void sub_192ADD2B4(_Unwind_Exception *exception_object)
{
  void *v1;
  uint64_t v2;
  void *v3;

  if (v3)
  {
    *(void *)(v2 + 8) = v3;
    operator delete(v3);
  }
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<int,float,float>>>(unint64_t a1)
{
  if (a1 >= 0x1555555555555556) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(12 * a1);
}

void std::__introsort<std::_ClassicAlgPolicy,Espresso::get_top_pred(float *,float *,int,int)::$_0 &,std::tuple<int,float,float> *,false>(unint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  while (2)
  {
    unint64_t v10 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v10;
          uint64_t v11 = a2 - v10;
          unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - v10) >> 2);
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                float v51 = *(float *)(a2 - 8);
                float v52 = *(float *)(v10 + 4);
                if (v51 > v52)
                {
                  float v53 = *(float *)v10;
                  *(_DWORD *)unint64_t v10 = *(_DWORD *)(a2 - 12);
                  *(float *)(a2 - 12) = v53;
                  *(float *)(v10 + 4) = v51;
                  *(float *)(a2 - 8) = v52;
                  int v54 = *(_DWORD *)(v10 + 8);
                  *(_DWORD *)(v10 + 8) = *(_DWORD *)(a2 - 4);
                  *(_DWORD *)(a2 - 4) = v54;
                }
                break;
              case 3uLL:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::get_top_pred(float *,float *,int,int)::$_0 &,std::tuple<int,float,float> *>((float *)v10, (float *)(v10 + 12), (float *)(a2 - 12));
                break;
              case 4uLL:
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::get_top_pred(float *,float *,int,int)::$_0 &,std::tuple<int,float,float> *>((float *)v10, v10 + 12, v10 + 24, a2 - 12);
                break;
              case 5uLL:
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::get_top_pred(float *,float *,int,int)::$_0 &,std::tuple<int,float,float> *>((float *)v10, v10 + 12, v10 + 24, v10 + 36);
                float v55 = *(float *)(a2 - 8);
                float v56 = *(float *)(v10 + 40);
                if (v55 > v56)
                {
                  int v57 = *(_DWORD *)(v10 + 36);
                  *(_DWORD *)(v10 + 36) = *(_DWORD *)(a2 - 12);
                  *(_DWORD *)(a2 - 12) = v57;
                  *(float *)(v10 + 40) = v55;
                  *(float *)(a2 - 8) = v56;
                  int v58 = *(_DWORD *)(v10 + 44);
                  *(_DWORD *)(v10 + 44) = *(_DWORD *)(a2 - 4);
                  *(_DWORD *)(a2 - 4) = v58;
                  float v59 = *(float *)(v10 + 40);
                  float v60 = *(float *)(v10 + 28);
                  if (v59 > v60)
                  {
                    int v61 = *(_DWORD *)(v10 + 24);
                    int v62 = *(_DWORD *)(v10 + 36);
                    *(_DWORD *)(v10 + 24) = v62;
                    *(_DWORD *)(v10 + 36) = v61;
                    int v63 = *(_DWORD *)(v10 + 32);
                    int v64 = *(_DWORD *)(v10 + 44);
                    *(float *)(v10 + 28) = v59;
                    *(_DWORD *)(v10 + 32) = v64;
                    float v65 = *(float *)(v10 + 16);
                    *(float *)(v10 + 40) = v60;
                    *(_DWORD *)(v10 + 44) = v63;
                    if (v59 > v65)
                    {
                      int v66 = *(_DWORD *)(v10 + 12);
                      *(_DWORD *)(v10 + 12) = v62;
                      *(_DWORD *)(v10 + 24) = v66;
                      int v67 = *(_DWORD *)(v10 + 20);
                      *(float *)(v10 + 16) = v59;
                      *(_DWORD *)(v10 + 20) = v64;
                      *(float *)(v10 + 28) = v65;
                      *(_DWORD *)(v10 + 32) = v67;
                      float v68 = *(float *)(v10 + 4);
                      if (v59 > v68)
                      {
                        float v69 = *(float *)v10;
                        *(_DWORD *)unint64_t v10 = v62;
                        *(float *)(v10 + 12) = v69;
                        int v70 = *(_DWORD *)(v10 + 8);
                        *(float *)(v10 + 4) = v59;
                        *(_DWORD *)(v10 + 8) = v64;
                        *(float *)(v10 + 16) = v68;
                        *(_DWORD *)(v10 + 20) = v70;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 287)
          {
            v71 = (_DWORD *)(v10 + 12);
            BOOL v73 = v10 == a2 || v71 == (_DWORD *)a2;
            if (a4)
            {
              if (!v73)
              {
                uint64_t v74 = 0;
                unint64_t v75 = v10;
                do
                {
                  v76 = v71;
                  float v77 = *(float *)(v75 + 16);
                  if (v77 > *(float *)(v75 + 4))
                  {
                    int v78 = *v71;
                    int v79 = *(_DWORD *)(v75 + 20);
                    uint64_t v80 = v74;
                    while (1)
                    {
                      v81 = (float *)(v10 + v80);
                      v81[3] = *(float *)(v10 + v80);
                      int v82 = *(_DWORD *)(v10 + v80 + 8);
                      v81[4] = *(float *)(v10 + v80 + 4);
                      *((_DWORD *)v81 + 5) = v82;
                      if (!v80) {
                        break;
                      }
                      v80 -= 12;
                      if (v77 <= *(v81 - 2))
                      {
                        uint64_t v83 = v10 + v80 + 12;
                        goto LABEL_84;
                      }
                    }
                    uint64_t v83 = v10;
LABEL_84:
                    *(_DWORD *)uint64_t v83 = v78;
                    *(float *)(v83 + 4) = v77;
                    *(_DWORD *)(v83 + 8) = v79;
                  }
                  v71 = v76 + 3;
                  v74 += 12;
                  unint64_t v75 = (unint64_t)v76;
                }
                while (v76 + 3 != (_DWORD *)a2);
              }
            }
            else if (!v73)
            {
              v115 = (float *)(v10 + 8);
              do
              {
                v116 = v71;
                float v117 = *(float *)(a1 + 16);
                if (v117 > *(float *)(a1 + 4))
                {
                  int v118 = *v71;
                  int v119 = *(_DWORD *)(a1 + 20);
                  v120 = v115;
                  do
                  {
                    v120[1] = *(v120 - 2);
                    float v121 = *v120;
                    v120[2] = *(v120 - 1);
                    v120[3] = v121;
                    float v122 = *(v120 - 4);
                    v120 -= 3;
                  }
                  while (v117 > v122);
                  *((_DWORD *)v120 + 1) = v118;
                  v120[2] = v117;
                  *((_DWORD *)v120 + 3) = v119;
                }
                v71 = v116 + 3;
                v115 += 3;
                a1 = (unint64_t)v116;
              }
              while (v116 + 3 != (_DWORD *)a2);
            }
            return;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v84 = (v12 - 2) >> 1;
              int64_t v85 = v84;
              do
              {
                int64_t v86 = v85;
                if (v84 >= v85)
                {
                  uint64_t v87 = (2 * v85) | 1;
                  unint64_t v88 = v10 + 12 * v87;
                  if (2 * v86 + 2 < (uint64_t)v12 && *(float *)(v88 + 4) > *(float *)(v88 + 16))
                  {
                    v88 += 12;
                    uint64_t v87 = 2 * v86 + 2;
                  }
                  unint64_t v89 = v10 + 12 * v86;
                  float v90 = *(float *)(v88 + 4);
                  float v91 = *(float *)(v89 + 4);
                  if (v90 <= v91)
                  {
                    int v92 = *(_DWORD *)v89;
                    int v93 = *(_DWORD *)(v89 + 8);
                    do
                    {
                      unint64_t v94 = v89;
                      unint64_t v89 = v88;
                      *(_DWORD *)unint64_t v94 = *(_DWORD *)v88;
                      *(float *)(v94 + 4) = v90;
                      *(_DWORD *)(v94 + 8) = *(_DWORD *)(v88 + 8);
                      if (v84 < v87) {
                        break;
                      }
                      uint64_t v95 = 2 * v87;
                      uint64_t v87 = (2 * v87) | 1;
                      unint64_t v88 = v10 + 12 * v87;
                      uint64_t v96 = v95 + 2;
                      if (v96 < (uint64_t)v12 && *(float *)(v88 + 4) > *(float *)(v88 + 16))
                      {
                        v88 += 12;
                        uint64_t v87 = v96;
                      }
                      float v90 = *(float *)(v88 + 4);
                    }
                    while (v90 <= v91);
                    *(_DWORD *)unint64_t v89 = v92;
                    *(float *)(v89 + 4) = v91;
                    *(_DWORD *)(v89 + 8) = v93;
                  }
                }
                int64_t v85 = v86 - 1;
              }
              while (v86);
              int64_t v97 = v11 / 0xCuLL;
              do
              {
                uint64_t v98 = 0;
                float v99 = *(float *)v10;
                int v101 = *(_DWORD *)(v10 + 4);
                int v100 = *(_DWORD *)(v10 + 8);
                unint64_t v102 = v10;
                do
                {
                  v103 = (_DWORD *)v102;
                  v102 += 12 * v98 + 12;
                  uint64_t v104 = 2 * v98;
                  uint64_t v98 = (2 * v98) | 1;
                  int64_t v105 = v104 + 2;
                  if (v105 < v97 && *(float *)(v102 + 4) > *(float *)(v102 + 16))
                  {
                    v102 += 12;
                    uint64_t v98 = v105;
                  }
                  _DWORD *v103 = *(_DWORD *)v102;
                  v103[1] = *(_DWORD *)(v102 + 4);
                  v103[2] = *(_DWORD *)(v102 + 8);
                }
                while (v98 <= (uint64_t)((unint64_t)(v97 - 2) >> 1));
                if (v102 == a2 - 12)
                {
                  *(float *)unint64_t v102 = v99;
                  *(_DWORD *)(v102 + 4) = v101;
                  *(_DWORD *)(v102 + 8) = v100;
                }
                else
                {
                  *(_DWORD *)unint64_t v102 = *(_DWORD *)(a2 - 12);
                  *(_DWORD *)(v102 + 4) = *(_DWORD *)(a2 - 8);
                  *(_DWORD *)(v102 + 8) = *(_DWORD *)(a2 - 4);
                  *(float *)(a2 - 12) = v99;
                  *(_DWORD *)(a2 - 8) = v101;
                  *(_DWORD *)(a2 - 4) = v100;
                  uint64_t v106 = v102 - v10 + 12;
                  if (v106 >= 13)
                  {
                    unint64_t v107 = (v106 / 0xCuLL - 2) >> 1;
                    unint64_t v108 = v10 + 12 * v107;
                    float v109 = *(float *)(v108 + 4);
                    float v110 = *(float *)(v102 + 4);
                    if (v109 > v110)
                    {
                      int v111 = *(_DWORD *)v102;
                      int v112 = *(_DWORD *)(v102 + 8);
                      do
                      {
                        unint64_t v113 = v102;
                        unint64_t v102 = v108;
                        *(_DWORD *)unint64_t v113 = *(_DWORD *)v108;
                        *(float *)(v113 + 4) = v109;
                        *(_DWORD *)(v113 + 8) = *(_DWORD *)(v108 + 8);
                        if (!v107) {
                          break;
                        }
                        unint64_t v107 = (v107 - 1) >> 1;
                        unint64_t v108 = v10 + 12 * v107;
                        float v109 = *(float *)(v108 + 4);
                      }
                      while (v109 > v110);
                      *(_DWORD *)unint64_t v102 = v111;
                      *(float *)(v102 + 4) = v110;
                      *(_DWORD *)(v102 + 8) = v112;
                    }
                  }
                }
                a2 -= 12;
              }
              while (v97-- > 2);
            }
            return;
          }
          unint64_t v13 = v12 >> 1;
          unint64_t v14 = v10 + 12 * (v12 >> 1);
          if ((unint64_t)v11 >= 0x601)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::get_top_pred(float *,float *,int,int)::$_0 &,std::tuple<int,float,float> *>((float *)a1, (float *)(a1 + 12 * (v12 >> 1)), (float *)(a2 - 12));
            uint64_t v15 = 3 * v13;
            v16 = (float *)(a1 + 12 * v13 - 12);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::get_top_pred(float *,float *,int,int)::$_0 &,std::tuple<int,float,float> *>((float *)(a1 + 12), v16, (float *)(a2 - 24));
            v17 = (float *)(a1 + 12 + 4 * v15);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::get_top_pred(float *,float *,int,int)::$_0 &,std::tuple<int,float,float> *>((float *)(a1 + 24), v17, (float *)(a2 - 36));
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::get_top_pred(float *,float *,int,int)::$_0 &,std::tuple<int,float,float> *>(v16, (float *)v14, v17);
            float v18 = *(float *)a1;
            *(_DWORD *)a1 = *(_DWORD *)v14;
            *(float *)unint64_t v14 = v18;
            uint64_t v19 = *(void *)(a1 + 4);
            *(void *)(a1 + 4) = *(void *)(v14 + 4);
            *(void *)(v14 + 4) = v19;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::get_top_pred(float *,float *,int,int)::$_0 &,std::tuple<int,float,float> *>((float *)(a1 + 12 * (v12 >> 1)), (float *)a1, (float *)(a2 - 12));
          }
          --a3;
          if (a4) {
            break;
          }
          float v20 = *(float *)(a1 + 4);
          if (*(float *)(a1 - 8) > v20) {
            goto LABEL_12;
          }
          if (v20 <= *(float *)(a2 - 8))
          {
            unint64_t v39 = a1 + 12;
            do
            {
              unint64_t v10 = v39;
              if (v39 >= a2) {
                break;
              }
              float v40 = *(float *)(v39 + 4);
              v39 += 12;
            }
            while (v20 <= v40);
          }
          else
          {
            unint64_t v37 = a1;
            do
            {
              unint64_t v10 = v37 + 12;
              float v38 = *(float *)(v37 + 16);
              v37 += 12;
            }
            while (v20 <= v38);
          }
          v41 = (float *)a2;
          if (v10 < a2)
          {
            unint64_t v42 = a2;
            do
            {
              v41 = (float *)(v42 - 12);
              float v43 = *(float *)(v42 - 8);
              v42 -= 12;
            }
            while (v20 > v43);
          }
          float v44 = *(float *)a1;
          int v45 = *(_DWORD *)(a1 + 8);
          while (v10 < (unint64_t)v41)
          {
            float v46 = *(float *)v10;
            *(float *)unint64_t v10 = *v41;
            float *v41 = v46;
            int v47 = *(_DWORD *)(v10 + 4);
            *(float *)(v10 + 4) = v41[1];
            *((_DWORD *)v41 + 1) = v47;
            int v48 = *(_DWORD *)(v10 + 8);
            *(float *)(v10 + 8) = v41[2];
            *((_DWORD *)v41 + 2) = v48;
            do
            {
              float v49 = *(float *)(v10 + 16);
              v10 += 12;
            }
            while (v20 <= v49);
            do
            {
              float v50 = *(v41 - 2);
              v41 -= 3;
            }
            while (v20 > v50);
          }
          BOOL v4 = v10 - 12 >= a1;
          BOOL v5 = v10 - 12 == a1;
          if (v10 - 12 != a1)
          {
            *(_DWORD *)a1 = *(_DWORD *)(v10 - 12);
            *(_DWORD *)(a1 + 4) = *(_DWORD *)(v10 - 8);
            *(_DWORD *)(a1 + 8) = *(_DWORD *)(v10 - 4);
          }
          a4 = 0;
          *(float *)(v10 - 12) = v44;
          *(float *)(v10 - 8) = v20;
          *(_DWORD *)(v10 - 4) = v45;
        }
        float v20 = *(float *)(a1 + 4);
LABEL_12:
        float v21 = *(float *)a1;
        int v22 = *(_DWORD *)(a1 + 8);
        unint64_t v23 = a1;
        do
        {
          unint64_t v24 = v23;
          v23 += 12;
        }
        while (*(float *)(v24 + 16) > v20);
        unint64_t v25 = a2;
        if (v24 == a1)
        {
          unint64_t v28 = a2;
          while (v23 < v28)
          {
            v26 = (float *)(v28 - 12);
            float v29 = *(float *)(v28 - 8);
            v28 -= 12;
            if (v29 > v20) {
              goto LABEL_22;
            }
          }
          v26 = (float *)v28;
        }
        else
        {
          do
          {
            v26 = (float *)(v25 - 12);
            float v27 = *(float *)(v25 - 8);
            v25 -= 12;
          }
          while (v27 <= v20);
        }
LABEL_22:
        unint64_t v10 = v23;
        if (v23 < (unint64_t)v26)
        {
          v30 = v26;
          do
          {
            float v31 = *(float *)v10;
            *(float *)unint64_t v10 = *v30;
            float *v30 = v31;
            int v32 = *(_DWORD *)(v10 + 4);
            *(float *)(v10 + 4) = v30[1];
            *((_DWORD *)v30 + 1) = v32;
            int v33 = *(_DWORD *)(v10 + 8);
            *(float *)(v10 + 8) = v30[2];
            *((_DWORD *)v30 + 2) = v33;
            do
            {
              float v34 = *(float *)(v10 + 16);
              v10 += 12;
            }
            while (v34 > v20);
            do
            {
              float v35 = *(v30 - 2);
              v30 -= 3;
            }
            while (v35 <= v20);
          }
          while (v10 < (unint64_t)v30);
        }
        if (v10 - 12 != a1)
        {
          *(_DWORD *)a1 = *(_DWORD *)(v10 - 12);
          *(_DWORD *)(a1 + 4) = *(_DWORD *)(v10 - 8);
          *(_DWORD *)(a1 + 8) = *(_DWORD *)(v10 - 4);
        }
        *(float *)(v10 - 12) = v21;
        *(float *)(v10 - 8) = v20;
        *(_DWORD *)(v10 - 4) = v22;
        if (v23 >= (unint64_t)v26) {
          break;
        }
LABEL_33:
        std::__introsort<std::_ClassicAlgPolicy,Espresso::get_top_pred(float *,float *,int,int)::$_0 &,std::tuple<int,float,float> *,false>(a1, v10 - 12, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v36 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::get_top_pred(float *,float *,int,int)::$_0 &,std::tuple<int,float,float> *>(a1, v10 - 12);
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::get_top_pred(float *,float *,int,int)::$_0 &,std::tuple<int,float,float> *>(v10, a2))
      {
        break;
      }
      if (!v36) {
        goto LABEL_33;
      }
    }
    a2 = v10 - 12;
    if (!v36) {
      continue;
    }
    break;
  }
}

float std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::get_top_pred(float *,float *,int,int)::$_0 &,std::tuple<int,float,float> *>(float *a1, float *a2, float *a3)
{
  float result = a2[1];
  float v4 = a1[1];
  float v5 = a3[1];
  if (result > v4)
  {
    v6 = a1 + 2;
    float v7 = *a1;
    if (v5 <= result)
    {
      *a1 = *a2;
      *a2 = v7;
      a1[1] = result;
      a2[1] = v4;
      v6 = a2 + 2;
      int v13 = *((_DWORD *)a1 + 2);
      a1[2] = a2[2];
      *((_DWORD *)a2 + 2) = v13;
      float result = a3[1];
      float v14 = a2[1];
      if (result <= v14) {
        return result;
      }
      *a2 = *a3;
      *a3 = v7;
      a2[1] = result;
      a3[1] = v14;
    }
    else
    {
      *a1 = *a3;
      *a3 = v7;
      a1[1] = v5;
      a3[1] = v4;
    }
    v9 = a3 + 2;
    goto LABEL_10;
  }
  if (v5 > result)
  {
    float v8 = *a2;
    *a2 = *a3;
    *a3 = v8;
    a2[1] = v5;
    a3[1] = result;
    v9 = a2 + 2;
    int v10 = *((_DWORD *)a2 + 2);
    a2[2] = a3[2];
    *((_DWORD *)a3 + 2) = v10;
    float result = a2[1];
    float v11 = a1[1];
    if (result > v11)
    {
      float v12 = *a1;
      *a1 = *a2;
      *a2 = v12;
      a1[1] = result;
      a2[1] = v11;
      v6 = a1 + 2;
LABEL_10:
      float result = *v6;
      float *v6 = *v9;
      float *v9 = result;
    }
  }
  return result;
}

float std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::get_top_pred(float *,float *,int,int)::$_0 &,std::tuple<int,float,float> *>(float *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::get_top_pred(float *,float *,int,int)::$_0 &,std::tuple<int,float,float> *>(a1, (float *)a2, (float *)a3);
  float result = *(float *)(a4 + 4);
  float v9 = *(float *)(a3 + 4);
  if (result > v9)
  {
    float v10 = *(float *)a3;
    *(_DWORD *)a3 = *(_DWORD *)a4;
    *(float *)a4 = v10;
    *(float *)(a3 + 4) = result;
    *(float *)(a4 + 4) = v9;
    int v11 = *(_DWORD *)(a3 + 8);
    *(_DWORD *)(a3 + 8) = *(_DWORD *)(a4 + 8);
    *(_DWORD *)(a4 + 8) = v11;
    float result = *(float *)(a3 + 4);
    float v12 = *(float *)(a2 + 4);
    if (result > v12)
    {
      float v13 = *(float *)a2;
      *(_DWORD *)a2 = *(_DWORD *)a3;
      *(float *)a3 = v13;
      *(float *)(a2 + 4) = result;
      *(float *)(a3 + 4) = v12;
      int v14 = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a2 + 8) = *(_DWORD *)(a3 + 8);
      *(_DWORD *)(a3 + 8) = v14;
      float result = *(float *)(a2 + 4);
      float v15 = a1[1];
      if (result > v15)
      {
        float v16 = *a1;
        *a1 = *(float *)a2;
        *(float *)a2 = v16;
        a1[1] = result;
        *(float *)(a2 + 4) = v15;
        float result = a1[2];
        a1[2] = *(float *)(a2 + 8);
        *(float *)(a2 + 8) = result;
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::get_top_pred(float *,float *,int,int)::$_0 &,std::tuple<int,float,float> *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 2;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      float v6 = *(float *)(a2 - 8);
      float v7 = *(float *)(a1 + 4);
      if (v6 > v7)
      {
        float v8 = *(float *)a1;
        *(_DWORD *)a1 = *(_DWORD *)(a2 - 12);
        *(float *)(a2 - 12) = v8;
        *(float *)(a1 + 4) = v6;
        *(float *)(a2 - 8) = v7;
        int v9 = *(_DWORD *)(a1 + 8);
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 - 4);
        *(_DWORD *)(a2 - 4) = v9;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::get_top_pred(float *,float *,int,int)::$_0 &,std::tuple<int,float,float> *>((float *)a1, (float *)(a1 + 12), (float *)(a2 - 12));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::get_top_pred(float *,float *,int,int)::$_0 &,std::tuple<int,float,float> *>((float *)a1, a1 + 12, a1 + 24, a2 - 12);
      return 1;
    case 5uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::get_top_pred(float *,float *,int,int)::$_0 &,std::tuple<int,float,float> *>((float *)a1, a1 + 12, a1 + 24, a1 + 36);
      float v21 = *(float *)(a2 - 8);
      float v22 = *(float *)(a1 + 40);
      if (v21 > v22)
      {
        int v23 = *(_DWORD *)(a1 + 36);
        *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 - 12);
        *(_DWORD *)(a2 - 12) = v23;
        *(float *)(a1 + 40) = v21;
        *(float *)(a2 - 8) = v22;
        int v24 = *(_DWORD *)(a1 + 44);
        *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 - 4);
        *(_DWORD *)(a2 - 4) = v24;
        float v25 = *(float *)(a1 + 40);
        float v26 = *(float *)(a1 + 28);
        if (v25 > v26)
        {
          int v27 = *(_DWORD *)(a1 + 24);
          int v28 = *(_DWORD *)(a1 + 36);
          *(_DWORD *)(a1 + 24) = v28;
          *(_DWORD *)(a1 + 36) = v27;
          int v29 = *(_DWORD *)(a1 + 32);
          int v30 = *(_DWORD *)(a1 + 44);
          *(float *)(a1 + 28) = v25;
          *(_DWORD *)(a1 + 32) = v30;
          float v31 = *(float *)(a1 + 16);
          *(float *)(a1 + 40) = v26;
          *(_DWORD *)(a1 + 44) = v29;
          if (v25 > v31)
          {
            int v32 = *(_DWORD *)(a1 + 12);
            *(_DWORD *)(a1 + 12) = v28;
            *(_DWORD *)(a1 + 24) = v32;
            int v33 = *(_DWORD *)(a1 + 20);
            *(float *)(a1 + 16) = v25;
            *(_DWORD *)(a1 + 20) = v30;
            *(float *)(a1 + 28) = v31;
            *(_DWORD *)(a1 + 32) = v33;
            float v34 = *(float *)(a1 + 4);
            if (v25 > v34)
            {
              float v35 = *(float *)a1;
              *(_DWORD *)a1 = v28;
              *(float *)(a1 + 12) = v35;
              int v36 = *(_DWORD *)(a1 + 8);
              *(float *)(a1 + 4) = v25;
              *(_DWORD *)(a1 + 8) = v30;
              *(float *)(a1 + 16) = v34;
              *(_DWORD *)(a1 + 20) = v36;
            }
          }
        }
      }
      return 1;
    default:
      uint64_t v10 = a1 + 24;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::get_top_pred(float *,float *,int,int)::$_0 &,std::tuple<int,float,float> *>((float *)a1, (float *)(a1 + 12), (float *)(a1 + 24));
      uint64_t v11 = a1 + 36;
      if (a1 + 36 == a2) {
        return 1;
      }
      uint64_t v12 = 0;
      int v13 = 0;
      break;
  }
  while (1)
  {
    float v14 = *(float *)(v11 + 4);
    if (v14 > *(float *)(v10 + 4))
    {
      int v15 = *(_DWORD *)v11;
      int v16 = *(_DWORD *)(v11 + 8);
      uint64_t v17 = v12;
      while (1)
      {
        uint64_t v18 = a1 + v17;
        *(_DWORD *)(v18 + 36) = *(_DWORD *)(a1 + v17 + 24);
        int v19 = *(_DWORD *)(a1 + v17 + 32);
        *(_DWORD *)(v18 + 40) = *(_DWORD *)(a1 + v17 + 28);
        *(_DWORD *)(v18 + 44) = v19;
        if (v17 == -24) {
          break;
        }
        v17 -= 12;
        if (v14 <= *(float *)(v18 + 16))
        {
          uint64_t v20 = a1 + v17 + 36;
          goto LABEL_13;
        }
      }
      uint64_t v20 = a1;
LABEL_13:
      *(_DWORD *)uint64_t v20 = v15;
      *(float *)(v20 + 4) = v14;
      *(_DWORD *)(v20 + 8) = v16;
      if (++v13 == 8) {
        return v11 + 12 == a2;
      }
    }
    uint64_t v10 = v11;
    v12 += 12;
    v11 += 12;
    if (v11 == a2) {
      return 1;
    }
  }
}

void Espresso::run_validation(void *a1@<X0>, uint64_t a2@<X1>, unsigned int *a3@<X2>, uint64_t **a4@<X3>, uint64_t a5@<X8>, double a6@<D0>)
{
  void (***v56)(uint64_t *__return_ptr, void);
  std::__shared_weak_count *v57;
  uint64_t v58;
  void (***v59)(uint64_t *__return_ptr, void);
  std::__shared_weak_count *v60;
  std::__shared_weak_count *v61;
  char *v62;
  int v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t *v67;
  std::__shared_weak_count *v68;
  _DWORD *v69;
  int v70;
  std::__shared_weak_count *v71;
  std::__shared_weak_count *v72;
  uint64_t v73;
  uint64_t v74;
  std::__shared_weak_count *v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  uint64_t v78;
  long long v79;
  std::__shared_weak_count *v80;
  _DWORD *v81;
  void (***v82)(uint64_t *__return_ptr, void);
  std::string::size_type size;
  uint64_t v84;
  uint64_t v85;
  std::__shared_weak_count *v86;
  std::__shared_weak_count *v87;
  uint64_t v88;
  std::__shared_weak_count *v89;
  int v90;
  std::__shared_weak_count *v91;
  uint64_t i;
  float *v93;
  uint64_t v94;
  float *v95;
  float v96;
  int v97;
  uint64_t *j;
  int v99;
  int v100;
  int v101;
  unsigned int v102;
  float *v103;
  float v104;
  BOOL v105;
  BOOL v106;
  BOOL v107;
  int v108;
  BOOL v109;
  int v110;
  int v111;
  int v112;
  int v113;
  int v114;
  int v115;
  int v116;
  int v117;
  int v118;
  unint64_t v119;
  float *v120;
  float v121;
  FILE *v122;
  float v123;
  int v124;
  uint64_t v126;
  float v127;
  int v128;
  int v129;
  uint64_t v130;
  float *v131;
  unint64_t v133;
  void *v134;
  float v135;
  double v136;
  uint64_t **v137;
  float v138;
  void *v139;
  void *v140;
  double v141;
  int v142;
  void *v143;
  void *v144;
  double v145;
  void *v146;
  void *v147;
  double v148;
  void *v149;
  void *v150;
  double v151;
  void *v152;
  uint64_t **v153;
  float v154;
  uint64_t **v155;
  uint64_t v161;
  void *v162;
  void *v163;
  void *v164;
  void *v165;
  void *v166;
  id v167;
  unsigned int *v168;
  id v169;
  void *v170;
  std::runtime_error *exception;
  std::string *v172;
  long long v173;
  uint64_t v174;
  int v175;
  void *v176;
  uint64_t v177;
  std::string *v179;
  unint64_t v180;
  uint64_t v181;
  std::__shared_weak_count *v182;
  std::__shared_weak_count *v183;
  uint64_t *v184;
  FILE *v185;
  uint64_t v186;
  Espresso::confusion_matrix *v187;
  Espresso::confusion_matrix *v188;
  std::__shared_weak_count *v189;
  uint64_t v190;
  std::__shared_weak_count *v191;
  std::__shared_weak_count *v192;
  std::__shared_weak_count *v193;
  int v194;
  int v195;
  int v196;
  int v197;
  int v198;
  int v199;
  unsigned int *v200;
  _DWORD *v201;
  id v202;
  void *v203[2];
  char v204;
  int v205;
  long long v206;
  uint64_t v207;
  int v208;
  float v209;
  long long v210;
  int v211;
  std::string __p;
  void *v213;
  void *v214;
  const char *v215;
  void *v216;
  std::__shared_weak_count *v217;
  void *v218;
  unsigned char *v219;
  void *v220;
  void *v221;
  void *v222;
  void *v223;
  void v224[7];
  std::__shared_weak_count *v225;
  _DWORD *v226;
  std::__shared_weak_count *v227;
  _DWORD *v228;
  std::__shared_weak_count *v229;
  uint64_t v230;
  std::__shared_weak_count *v231;
  std::string v232;
  __n128 (*v233)(__n128 *, __n128 *);
  void (*v234)(uint64_t);
  const char *v235;
  uint64_t v236;
  std::__shared_weak_count *v237;
  void v238[6];
  std::__shared_weak_count *v239;
  uint64_t v240;
  std::__shared_weak_count *v241;
  uint64_t v242;
  void *v243;
  char v244;
  void *v245;
  char v246;
  void *v247;
  char v248;
  void *v249;
  char v250;
  _DWORD *v251;
  std::__shared_weak_count *v252;
  int v253;
  void v254[5];
  std::__shared_weak_count *v255;
  std::string v256;
  __n128 (*v257)(__n128 *, __n128 *);
  void (*v258)(uint64_t);
  const char *v259;
  uint64_t v260;
  std::__shared_weak_count *v261;
  void *v262[2];
  void *v263;
  uint64_t v264;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  double v266;
  char v267;

  Espresso::scoped_timer::scoped_timer((Espresso::scoped_timer *)&v264, "validation", a6);
  v177 = a2;
  unint64_t v10 = (*(uint64_t (**)(void))(**(void **)a2 + 32))();
  unint64_t v11 = *a3;
  if (v10 >= v11) {
    unint64_t v12 = *a3;
  }
  else {
    unint64_t v12 = v10;
  }
  if ((int)v11 <= 0) {
    unint64_t v13 = v10;
  }
  else {
    unint64_t v13 = v12;
  }
  unint64_t v14 = (v13 - 1) / (int)a3[2];
  v180 = v14;
  unint64_t v15 = v14 + 1;
  if (a3[3]) {
    printf("Testing over %zu samples (%zu batches)\n", v13, v14 + 1);
  }
  int v16 = (const char *)(a3 + 4);
  if ((*((char *)a3 + 39) & 0x80000000) == 0)
  {
    if (!*((unsigned char *)a3 + 39)) {
      goto LABEL_15;
    }
LABEL_14:
    uint64_t v17 = fopen(v16, "w");
    goto LABEL_16;
  }
  if (*((void *)a3 + 3))
  {
    int v16 = *(const char **)v16;
    goto LABEL_14;
  }
LABEL_15:
  uint64_t v17 = 0;
LABEL_16:
  v174 = a5;
  if (v15)
  {
    uint64_t v18 = 0;
    v198 = 0;
    int v19 = 0;
    v196 = 0;
    v197 = 0;
    v194 = 0;
    v195 = 0;
    v199 = 0;
    uint64_t v20 = 0;
    float v21 = 0;
    v179 = (std::string *)(a3 + 10);
    v175 = v15;
    v176 = a1;
    v200 = a3;
    v185 = v17;
    while (1)
    {
      if (a3[1] && a3[3]) {
        printf("ValBatch %d/%d (%d)\n", v18, v175, a3[2]);
      }
      (*(void (**)(void **__return_ptr))(**(void **)v177 + 8))(v262);
      if (*((char *)a3 + 63) < 0)
      {
        if (*((void *)a3 + 6)) {
          goto LABEL_30;
        }
      }
      else if (*((unsigned char *)a3 + 63))
      {
        goto LABEL_30;
      }
      v256.__r_.__value_.__r.__words[0] = 0;
      uint64_t v22 = *a1;
      if (*(void *)(*a1 + 80))
      {
        while (1)
        {
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v256;
          int v23 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v22 + 56, (unint64_t *)&v256, (uint64_t)&std::piecewise_construct, (uint64_t **)&__p);
          if (v23[4] != v23[3]) {
            break;
          }
          ++v256.__r_.__value_.__r.__words[0];
          uint64_t v22 = *a1;
          if (v256.__r_.__value_.__r.__words[0] >= *(void *)(*a1 + 80)) {
            goto LABEL_30;
          }
        }
        uint64_t v24 = *a1 + 56;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v256;
        float v25 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v24, (unint64_t *)&v256, (uint64_t)&std::piecewise_construct, (uint64_t **)&__p);
        std::string::operator=(v179, (const std::string *)v25[3]);
      }
LABEL_30:
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v179;
      float v26 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v262, (unsigned __int8 *)v179, (long long **)&__p);
      uint64_t v27 = *((void *)v26 + 5);
      int v28 = (std::__shared_weak_count *)*((void *)v26 + 6);
      if (v28) {
        atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      v193 = v28;
      if (!v27)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        v172 = std::string::append(&v256, " not found in dset");
        v173 = *(_OWORD *)&v172->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v172->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v173;
        v172->__r_.__value_.__l.__size_ = 0;
        v172->__r_.__value_.__r.__words[2] = 0;
        v172->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, &__p);
        __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "labels");
      v256.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
      int v29 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v262, (unsigned __int8 *)&__p, (long long **)&v256);
      int v30 = (std::__shared_weak_count *)*((void *)v29 + 6);
      v186 = *((void *)v29 + 5);
      if (v30) {
        atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      v181 = v18;
      v190 = v27;
      if (v186)
      {
        v182 = v30;
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "label");
        v256.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
        float v31 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v262, (unsigned __int8 *)&__p, (long long **)&v256);
        int v32 = (std::__shared_weak_count *)v31[6];
        v186 = v31[5];
        if (v32) {
          atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (v30) {
          nitro::nitro_function::nitro_function(v30);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        v182 = v32;
      }
      v256.__r_.__value_.__r.__words[0] = 0;
      v256.__r_.__value_.__l.__size_ = (std::string::size_type)&v256;
      v256.__r_.__value_.__r.__words[2] = 0x4012000000;
      v257 = __Block_byref_object_copy__19865;
      v258 = __Block_byref_object_dispose__19866;
      v259 = "";
      v260 = 0;
      v261 = 0;
      uint64_t v33 = *a1;
      float v34 = *(void **)(*a1 + 32);
      float v35 = *(void **)(*a1 + 40);
      int v36 = a1;
      if (v34 == v35)
      {
        int v47 = 0;
        float v46 = v193;
        goto LABEL_68;
      }
      v187 = v20;
      int v37 = 0;
      int v38 = 0;
      v201 = 0;
      unint64_t v39 = 0;
      do
      {
        v41 = (void *)*v34;
        float v40 = (std::__shared_weak_count *)v34[1];
        if (v40) {
          atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        unint64_t v42 = (const void *)v41[8];
        if (v42
        {
          float v43 = (std::__shared_weak_count *)v41[9];
          if (v43) {
            atomic_fetch_add_explicit(&v43->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v44 = v41[13];
          int v45 = *(std::__shared_weak_count **)(v44 + 8);
          v201 = *(_DWORD **)v44;
          if (v45) {
            atomic_fetch_add_explicit(&v45->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v39) {
            nitro::nitro_function::nitro_function(v39);
          }
          if (v43) {
            nitro::nitro_function::nitro_function(v43);
          }
          int v38 = v37;
          unint64_t v39 = v45;
        }
        a3 = v200;
        if (v40) {
          nitro::nitro_function::nitro_function(v40);
        }
        v34 += 2;
        ++v37;
      }
      while (v34 != v35);
      if (!v201)
      {
        uint64_t v33 = *v36;
        float v46 = v193;
        uint64_t v20 = v187;
        int v47 = v39;
        a1 = v36;
LABEL_68:
        __p.__r_.__value_.__r.__words[0] = *(_DWORD *)(v33 + 120) - 1;
        int v48 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v33 + 96, __p.__r_.__value_.__r.__words[0], &__p);
        uint64_t v49 = *a1;
        if (-1431655765 * ((v48[4] - v48[3]) >> 3))
        {
          uint64_t v50 = *(void *)(*(void *)(*(void *)(v49 + 40) - 16) + 104);
          float v51 = *(std::__shared_weak_count **)(v50 + 8);
          v201 = *(_DWORD **)v50;
          if (v51) {
            atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v47) {
            nitro::nitro_function::nitro_function(v47);
          }
          if (v51)
          {
            atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
            int v47 = v51;
            goto LABEL_78;
          }
        }
        else
        {
          uint64_t v52 = *(void *)(*(void *)(*(void *)(v49 + 40) - 32) + 104);
          float v51 = *(std::__shared_weak_count **)(v52 + 8);
          v201 = *(_DWORD **)v52;
          if (v51) {
            atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v47) {
LABEL_78:
          }
            nitro::nitro_function::nitro_function(v47);
        }
        int v38 = ((*(void *)(*a1 + 40) - *(void *)(*a1 + 32)) >> 4) - 1;
        unint64_t v39 = v51;
        goto LABEL_80;
      }
      float v46 = v193;
      uint64_t v20 = v187;
LABEL_80:
      (*(void (**)(std::string *__return_ptr))(*(void *)v201 + 56))(&__p);
      long long v53 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
      int v54 = *(std::__shared_weak_count **)(v256.__r_.__value_.__l.__size_ + 56);
      *(_OWORD *)(v256.__r_.__value_.__l.__size_ + 48) = v53;
      if (v54)
      {
        nitro::nitro_function::nitro_function(v54);
        if (__p.__r_.__value_.__l.__size_) {
          nitro::nitro_function::nitro_function((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
        }
      }
      uint64_t v55 = *v36;
      float v56 = *(void (****)(uint64_t *__return_ptr, void))(*v36 + 16);
      v254[0] = MEMORY[0x1E4F143A8];
      v254[1] = 3321888768;
      v254[2] = ___ZN8Espresso14run_validationENSt3__110shared_ptrINS_3netEEENS1_INS_20abstract_data_sourceEEENS_18validation_optionsENS0_6vectorIS3_NS0_9allocatorIS3_EEEE_block_invoke;
      v254[3] = &__block_descriptor_48_ea8_32c41_ZTSNSt3__110shared_ptrIN8Espresso3netEEE_e10_v16__0r_v8l;
      int v57 = (std::__shared_weak_count *)v36[1];
      v254[4] = v55;
      v255 = v57;
      if (v57) {
        atomic_fetch_add_explicit(&v57->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      Espresso::abstract_context::compute_batch_sync(v56, v254);
      if (*((char *)a3 + 63) < 0)
      {
        if (*((void *)a3 + 6)) {
          goto LABEL_90;
        }
      }
      else if (*((unsigned char *)a3 + 63))
      {
        goto LABEL_90;
      }
      std::string::operator=(v179, (const std::string *)(*(void *)(*v36 + 232) + 32));
LABEL_90:
      int v58 = *v36;
      float v59 = *(void (****)(uint64_t *__return_ptr, void))(*v36 + 16);
      v238[0] = MEMORY[0x1E4F143A8];
      v238[1] = 3321888768;
      v238[2] = ___ZN8Espresso14run_validationENSt3__110shared_ptrINS_3netEEENS1_INS_20abstract_data_sourceEEENS_18validation_optionsENS0_6vectorIS3_NS0_9allocatorIS3_EEEE_block_invoke_36;
      v238[3] = &unk_1EE38EB48;
      v238[5] = v190;
      v239 = v46;
      if (v46)
      {
        atomic_fetch_add_explicit(&v46->__shared_owners_, 1uLL, memory_order_relaxed);
        int v58 = *v36;
      }
      float v60 = (std::__shared_weak_count *)v36[1];
      v240 = v58;
      v241 = v60;
      if (v60) {
        atomic_fetch_add_explicit(&v60->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      Espresso::validation_options::validation_options((uint64_t)&v242, (uint64_t)a3);
      v253 = v38;
      v251 = v201;
      int v61 = v39;
      v252 = v39;
      if (v39) {
        atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      v238[4] = &v256;
      Espresso::abstract_context::compute_batch_sync(v59, v238);
      if (v20)
      {
        v183 = v21;
      }
      else
      {
        int v62 = (char *)operator new(0x38uLL);
        *(_OWORD *)(v62 + 8) = 0u;
        *(void *)int v62 = &unk_1EE3847F8;
        int v63 = v201[4];
        *((_DWORD *)v62 + 6) = v63;
        uint64_t v20 = (Espresso::confusion_matrix *)(v62 + 24);
        *((void *)v62 + 4) = 0;
        *(_OWORD *)(v62 + 40) = 0u;
        std::vector<int>::resize((std::vector<int> *)(v62 + 32), (v63 * v63));
        if (*((_DWORD *)v62 + 6))
        {
          int v64 = 0;
          float v65 = *((void *)v62 + 4);
          do
            *(_DWORD *)(v65 + 4 * v64++) = 0;
          while (v64 < (*(_DWORD *)v20 * *(_DWORD *)v20));
        }
        if (v21) {
          nitro::nitro_function::nitro_function(v21);
        }
        v183 = (std::__shared_weak_count *)v62;
        int v61 = v39;
      }
      int v67 = *a4;
      int v66 = a4[1];
      v188 = v20;
      if (v66 == *a4)
      {
        v192 = 0;
        unint64_t v88 = 0;
        float v21 = v183;
      }
      else
      {
        float v69 = *(_DWORD **)(v256.__r_.__value_.__l.__size_ + 48);
        float v68 = *(std::__shared_weak_count **)(v256.__r_.__value_.__l.__size_ + 56);
        if (v68)
        {
          atomic_fetch_add_explicit(&v68->__shared_owners_, 1uLL, memory_order_relaxed);
          int v67 = *a4;
          int v66 = a4[1];
        }
        if (v67 == v66)
        {
          v192 = 0;
          unint64_t v88 = 0;
        }
        else
        {
          int v70 = 0;
          v71 = 0;
          v184 = v66;
          do
          {
            BOOL v73 = *v67;
            v72 = (std::__shared_weak_count *)v67[1];
            if (v72) {
              atomic_fetch_add_explicit(&v72->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            v189 = v71;
            uint64_t v74 = *(void *)(*(void *)(*(void *)(v73 + 40) - 16) + 104);
            unint64_t v75 = *(std::__shared_weak_count **)(v74 + 8);
            v201 = *(_DWORD **)v74;
            if (v75) {
              atomic_fetch_add_explicit(&v75->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            __p.__r_.__value_.__r.__words[0] = 0;
            __p.__r_.__value_.__l.__size_ = (std::string::size_type)&__p;
            __p.__r_.__value_.__r.__words[2] = 0x4012000000;
            v213 = __Block_byref_object_copy__19865;
            v214 = __Block_byref_object_dispose__19866;
            v215 = "";
            (*(void (**)(_DWORD *))(*(void *)v201 + 56))(v201);
            v191 = v61;
            v76 = 0;
            float v77 = 0;
            v232.__r_.__value_.__r.__words[0] = 0;
            v232.__r_.__value_.__l.__size_ = (std::string::size_type)&v232;
            v232.__r_.__value_.__r.__words[2] = 0x4012000000;
            v233 = __Block_byref_object_copy__19865;
            v234 = __Block_byref_object_dispose__19866;
            v235 = "";
            v236 = 0;
            v237 = 0;
            int v78 = *(void *)(*(void *)(*(void *)(v73 + 40) - 16) + 104);
            if ((unint64_t)(*(void *)(*(void *)(*(void *)(v73 + 40) - 16) + 112) - v78) >= 0x11)
            {
              v76 = *(void *)(v78 + 16);
              float v77 = *(std::__shared_weak_count **)(v78 + 24);
              if (v77) {
                atomic_fetch_add_explicit(&v77->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v76 + 56))(v203, v76);
              int v79 = *(_OWORD *)v203;
              v203[0] = 0;
              v203[1] = 0;
              uint64_t v80 = *(std::__shared_weak_count **)(v232.__r_.__value_.__l.__size_ + 56);
              *(_OWORD *)(v232.__r_.__value_.__l.__size_ + 48) = v79;
              if (v80)
              {
                nitro::nitro_function::nitro_function(v80);
                if (v203[1]) {
                  nitro::nitro_function::nitro_function((std::__shared_weak_count *)v203[1]);
                }
              }
            }
            if ((int)v200[3] >= 2)
            {
              v81 = **(_DWORD ***)(**(void **)(v73 + 32) + 80);
              printf("%d: %d %d %d %d - %d %d %d %d\n", v70, v81[2], v81[3], v81[4], v81[5], v69[2], v69[3], v69[4], v69[5]);
            }
            int v82 = *(void (****)(uint64_t *__return_ptr, void))(v73 + 16);
            v224[0] = MEMORY[0x1E4F143A8];
            v224[1] = 3321888768;
            v224[2] = ___ZN8Espresso14run_validationENSt3__110shared_ptrINS_3netEEENS1_INS_20abstract_data_sourceEEENS_18validation_optionsENS0_6vectorIS3_NS0_9allocatorIS3_EEEE_block_invoke_40;
            v224[3] = &unk_1EE38E968;
            v224[6] = v73;
            v225 = v72;
            if (v72) {
              atomic_fetch_add_explicit(&v72->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            v226 = v69;
            v227 = v68;
            if (v68) {
              atomic_fetch_add_explicit(&v68->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            v228 = v201;
            v229 = v75;
            if (v75) {
              atomic_fetch_add_explicit(&v75->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            v224[4] = &__p;
            v230 = v76;
            v231 = v77;
            if (v77) {
              atomic_fetch_add_explicit(&v77->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            v224[5] = &v232;
            Espresso::abstract_context::compute_batch_sync(v82, v224);
            if (v75) {
              atomic_fetch_add_explicit(&v75->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            if (v191) {
              nitro::nitro_function::nitro_function(v191);
            }
            size = v256.__r_.__value_.__l.__size_;
            int64_t v85 = *(void *)(__p.__r_.__value_.__l.__size_ + 48);
            int64_t v84 = *(void *)(__p.__r_.__value_.__l.__size_ + 56);
            if (v84) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v84 + 8), 1uLL, memory_order_relaxed);
            }
            int64_t v86 = *(std::__shared_weak_count **)(size + 56);
            *(void *)(size + 48) = v85;
            *(void *)(size + 56) = v84;
            if (v86) {
              nitro::nitro_function::nitro_function(v86);
            }
            unint64_t v88 = *(void *)(v232.__r_.__value_.__l.__size_ + 48);
            uint64_t v87 = *(std::__shared_weak_count **)(v232.__r_.__value_.__l.__size_ + 56);
            if (v87) {
              atomic_fetch_add_explicit(&v87->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            v192 = v87;
            if (v189) {
              nitro::nitro_function::nitro_function(v189);
            }
            float v69 = *(_DWORD **)(__p.__r_.__value_.__l.__size_ + 48);
            unint64_t v89 = *(std::__shared_weak_count **)(__p.__r_.__value_.__l.__size_ + 56);
            if (v89) {
              atomic_fetch_add_explicit(&v89->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            if (v68) {
              nitro::nitro_function::nitro_function(v68);
            }
            if (v231) {
              nitro::nitro_function::nitro_function(v231);
            }
            if (v229) {
              nitro::nitro_function::nitro_function(v229);
            }
            if (v227) {
              nitro::nitro_function::nitro_function(v227);
            }
            if (v225) {
              nitro::nitro_function::nitro_function(v225);
            }
            _Block_object_dispose(&v232, 8);
            if (v237) {
              nitro::nitro_function::nitro_function(v237);
            }
            if (v77) {
              nitro::nitro_function::nitro_function(v77);
            }
            _Block_object_dispose(&__p, 8);
            if (v217) {
              nitro::nitro_function::nitro_function(v217);
            }
            if (v75) {
              nitro::nitro_function::nitro_function(v75);
            }
            if (v72) {
              nitro::nitro_function::nitro_function(v72);
            }
            v67 += 2;
            ++v70;
            v71 = v192;
            int v61 = v75;
            float v68 = v89;
          }
          while (v67 != v184);
          float v68 = v89;
          int v61 = v75;
          float v46 = v193;
        }
        float v21 = v183;
        uint64_t v20 = v188;
        if (v68) {
          nitro::nitro_function::nitro_function(v68);
        }
      }
      float v90 = v201[4];
      float v91 = v61;
      if ((int)v201[5] >= 1)
      {
        for (i = 0; i < (int)v201[5]; ++i)
        {
          if (v88) {
            int v93 = *(float **)(v88 + 24);
          }
          else {
            int v93 = 0;
          }
          unint64_t v94 = *(void *)(v256.__r_.__value_.__l.__size_ + 48);
          uint64_t v95 = (float *)(*(_DWORD *)(v94 + 12) * *(_DWORD *)(v94 + 8) * *(_DWORD *)(v94 + 16));
          Espresso::get_top_pred((Espresso *)(*(void *)(v94 + 24) + 4 * (int)v95 * (int)i), v93, v95, 5, (unint64_t *)&__p);
          uint64_t v96 = *(float *)(*(void *)(v186 + 24) + 4 * i);
          int64_t v97 = (int)v96;
          LODWORD(v232.__r_.__value_.__l.__data_) = (int)v96;
          if (Espresso::validation_label_mapper)
          {
            for (j = *(uint64_t **)(Espresso::validation_label_mapper + 8); j; j = (uint64_t *)*j)
            {
              float v99 = *((_DWORD *)j + 7);
              if (v99 <= v97)
              {
                if (v99 >= v97)
                {
                  int64_t v97 = *((_DWORD *)std::__tree<std::__value_type<Espresso::platform,int>,std::__map_value_compare<Espresso::platform,std::__value_type<Espresso::platform,int>,std::less<Espresso::platform>,true>,std::allocator<std::__value_type<Espresso::platform,int>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform const&>,std::tuple<>>((uint64_t **)Espresso::validation_label_mapper, (int)v96, (unsigned int *)&v232)+ 8);
                  LODWORD(v232.__r_.__value_.__l.__data_) = v97;
                  break;
                }
                ++j;
              }
            }
          }
          int v100 = Espresso::validation_label_offset;
          int v101 = v97 - Espresso::validation_label_offset;
          unint64_t v102 = v200[3];
          v103 = (float *)__p.__r_.__value_.__r.__words[0];
          if (v200[1])
          {
            if (v102) {
              printf("\tgt: %d pred: [%d %.2f %.2e] [%d %d %d %d]\n");
            }
          }
          else if (v102)
          {
            printf("\tgt: %d pred: [%d %.2f] [%d]\n");
          }
          uint64_t v104 = *v103;
          int64_t v105 = *(_DWORD *)v103 == 1;
          uint64_t v106 = *(_DWORD *)v103 == 0;
          unint64_t v107 = v101 == 1 && *(_DWORD *)v103 == 1;
          unint64_t v108 = v197 + v107;
          float v109 = v101 == 1 && *(_DWORD *)v103 == 0;
          float v110 = v194 + v109;
          if (v97 != v100) {
            int64_t v105 = 0;
          }
          int v111 = v195 + v105;
          if (v97 != v100) {
            uint64_t v106 = 0;
          }
          int v112 = v196 + v106;
          if (v90 == 2) {
            unint64_t v113 = v110;
          }
          else {
            unint64_t v113 = v194;
          }
          if (v90 == 2) {
            v114 = v111;
          }
          else {
            v114 = v195;
          }
          v194 = v113;
          v195 = v114;
          if (v90 == 2) {
            v115 = v112;
          }
          else {
            v115 = v196;
          }
          if (v90 == 2) {
            v116 = v108;
          }
          else {
            v116 = v197;
          }
          v196 = v115;
          v197 = v116;
          float v117 = v198;
          if (LODWORD(v104) == v101) {
            float v117 = v198 + 1;
          }
          v198 = v117;
          if ((float *)__p.__r_.__value_.__l.__size_ == v103)
          {
            int v118 = 0;
            float v121 = 0.0;
            float v122 = v185;
            uint64_t v20 = v188;
            if (!v185) {
              goto LABEL_219;
            }
          }
          else
          {
            int v118 = 0;
            int v119 = (int64_t)(__p.__r_.__value_.__l.__size_ - (void)v103) / 12;
            if (v119 <= 1) {
              int v119 = 1;
            }
            v120 = v103 + 2;
            float v121 = 0.0;
            float v122 = v185;
            uint64_t v20 = v188;
            do
            {
              if (*((_DWORD *)v120 - 2) == v101)
              {
                int v118 = 1;
                ++v19;
              }
              v123 = *v120;
              v120 += 3;
              float v121 = v121 + v123;
              --v119;
            }
            while (v119);
            if (!v185) {
              goto LABEL_219;
            }
          }
          fprintf(v122, "%d;%d;%f;%f;%f\n", LODWORD(v104) == v101, v118, v103[2], v121, v103[1]);
          fflush(v122);
          uint64_t v104 = *v103;
LABEL_219:
          int v61 = v91;
          v124 = *(_DWORD *)v20;
          if (*(_DWORD *)v20 > v101 && v124 > SLODWORD(v104)) {
            ++*(_DWORD *)(*((void *)v20 + 1) + 4 * (LODWORD(v104) + v124 * v101));
          }
          ++v199;
          operator delete(v103);
          float v46 = v193;
        }
      }
      if (v200[1])
      {
        a1 = v176;
        v126 = v181;
        if (v200[3] || v180 == v181)
        {
LABEL_233:
          if (v90 == 2)
          {
            v127 = (float)v197 / (float)(v197 + v195);
            printf("\tTop 1: %.4f; Top 5: %.4f Count: %d\n",
              (float)((float)v198 / (float)v199),
              (float)((float)v19 / (float)v199),
              v199);
            uint64_t v20 = v188;
            int v61 = v91;
            printf("PR P=%.4f R=%.4f F1=%.4f Count: %d (tp=%d fp=%d fn=%d tn=%d)\n", v127, (float)((float)v197 / (float)(v197 + v194)), (float)((float)((float)(v127 * (float)((float)v197 / (float)(v197 + v194)))+ (float)(v127 * (float)((float)v197 / (float)(v197 + v194))))/ (float)(v127 + (float)((float)v197 / (float)(v197 + v194)))), v199, v197, v195, v194, v196);
          }
          else
          {
            printf("\tTop 1: %.4f; Top 5: %.4f Count: %d\n",
              (float)((float)v198 / (float)v199),
              (float)((float)v19 / (float)v199),
              v199);
            Espresso::confusion_matrix::generate_summary(v20, (uint64_t)&__p);
            if ((*(_DWORD *)v20 - 1) <= 0x17)
            {
              v128 = 0;
              do
              {
                printf("%4d | ", v128);
                v129 = *(_DWORD *)v20;
                if (*(int *)v20 >= 1)
                {
                  v130 = 0;
                  do
                  {
                    printf("%4d ", *(_DWORD *)(*((void *)v20 + 1) + 4 * (v130 + v128 * v129)));
                    v129 = *(_DWORD *)v20;
                    ++v130;
                  }
                  while ((int)v130 < *(_DWORD *)v20);
                }
                putchar(10);
                ++v128;
              }
              while (v128 < *(_DWORD *)v20);
            }
            v131 = (float *)v218;
            _ZF = (unint64_t)(v219 - (unsigned char *)v218) > 0x18F || v219 == v218;
            if (!_ZF)
            {
              v133 = 0;
              do
              {
                printf("\tc:\t%d\ttp:\t%4d\tfp:\t%4d\tfn:%4d\tprec:\t%.3f\trecall:\t%.3f\tf1:\t%.3f\n", v133, *(_DWORD *)(__p.__r_.__value_.__r.__words[0] + 4 * v133), *((_DWORD *)v213 + v133), *((_DWORD *)v216 + v133), v131[v133], *((float *)v220 + v133), *((float *)v222 + v133));
                ++v133;
                v131 = (float *)v218;
              }
              while (v133 < (v219 - (unsigned char *)v218) >> 2);
            }
            if (v222)
            {
              v223 = v222;
              operator delete(v222);
            }
            int v61 = v91;
            if (v220)
            {
              v221 = v220;
              operator delete(v220);
            }
            if (v218)
            {
              v219 = v218;
              operator delete(v218);
            }
            if (v216)
            {
              v217 = (std::__shared_weak_count *)v216;
              operator delete(v216);
            }
            if (v213)
            {
              v214 = v213;
              operator delete(v213);
            }
            if (__p.__r_.__value_.__r.__words[0])
            {
              __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
              operator delete(__p.__r_.__value_.__l.__data_);
            }
          }
        }
      }
      else
      {
        v126 = v181;
        a1 = v176;
        if (v180 == v181) {
          goto LABEL_233;
        }
      }
      if (v252) {
        nitro::nitro_function::nitro_function(v252);
      }
      a3 = v200;
      if (v250 < 0) {
        operator delete(v249);
      }
      if (v248 < 0) {
        operator delete(v247);
      }
      if (v246 < 0) {
        operator delete(v245);
      }
      if (v244 < 0) {
        operator delete(v243);
      }
      if (v241) {
        nitro::nitro_function::nitro_function(v241);
      }
      if (v239) {
        nitro::nitro_function::nitro_function(v239);
      }
      if (v255) {
        nitro::nitro_function::nitro_function(v255);
      }
      if (v61) {
        nitro::nitro_function::nitro_function(v61);
      }
      if (v192) {
        nitro::nitro_function::nitro_function(v192);
      }
      _Block_object_dispose(&v256, 8);
      if (v261) {
        nitro::nitro_function::nitro_function(v261);
      }
      if (v182) {
        nitro::nitro_function::nitro_function(v182);
      }
      if (v46) {
        nitro::nitro_function::nitro_function(v46);
      }
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__deallocate_node(v263);
      v134 = v262[0];
      v262[0] = 0;
      if (v134) {
        operator delete(v134);
      }
      _ZF = v126 == v180;
      uint64_t v18 = v126 + 1;
      if (_ZF) {
        goto LABEL_291;
      }
    }
  }
  float v21 = 0;
  v199 = 0;
  int v19 = 0;
  v198 = 0;
LABEL_291:
  *(void *)(v174 + 8) = 0;
  *(void *)(v174 + 16) = 0;
  *(void *)v174 = v174 + 8;
  std::string::basic_string[abi:ne180100]<0>(&__p, "top1");
  v135 = (float)v199;
  *((float *)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v174, &__p, (uint64_t)&__p)+ 14) = (float)v198 / (float)v199;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "top5");
  *((float *)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v174, &__p, (uint64_t)&__p)+ 14) = (float)v19 / v135;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "count");
  *((float *)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v174, &__p, (uint64_t)&__p)+ 14) = v135;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  v267 = 1;
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  v136 = (double)(rep - v264) * 0.000001;
  v266 = v136;
  std::string::basic_string[abi:ne180100]<0>(&__p, "time");
  v137 = std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v174, &__p, (uint64_t)&__p);
  v138 = v136 / 1000.0;
  *((float *)v137 + 14) = v138;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (*((char *)a3 + 87) < 0)
  {
    if (!*((void *)a3 + 9)) {
      goto LABEL_345;
    }
  }
  else if (!*((unsigned char *)a3 + 87))
  {
    goto LABEL_345;
  }
  v139 = objc_opt_new();
  v140 = NSNumber;
  std::string::basic_string[abi:ne180100]<0>(&__p, "top1");
  LODWORD(v141) = *((_DWORD *)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v174, &__p, (uint64_t)&__p)+ 14);
  v142 = -887581056;
  if ((LODWORD(v141) & 0x7FFFFFFFu) >= 0x7F800000) {
    *(float *)&v141 = -10000000.0;
  }
  v143 = [v140 numberWithFloat:v141];
  [v139 setObject:v143 forKeyedSubscript:@"top1"];

  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  v144 = NSNumber;
  std::string::basic_string[abi:ne180100]<0>(&__p, "top5");
  LODWORD(v145) = *((_DWORD *)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v174, &__p, (uint64_t)&__p)+ 14);
  if ((LODWORD(v145) & 0x7FFFFFFFu) >= 0x7F800000) {
    *(float *)&v145 = -10000000.0;
  }
  v146 = [v144 numberWithFloat:v145];
  [v139 setObject:v146 forKeyedSubscript:@"top5"];

  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  v147 = NSNumber;
  std::string::basic_string[abi:ne180100]<0>(&__p, "count");
  LODWORD(v148) = *((_DWORD *)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v174, &__p, (uint64_t)&__p)+ 14);
  if ((LODWORD(v148) & 0x7FFFFFFFu) >= 0x7F800000) {
    *(float *)&v148 = -10000000.0;
  }
  v149 = [v147 numberWithFloat:v148];
  [v139 setObject:v149 forKeyedSubscript:@"count"];

  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  v150 = NSNumber;
  std::string::basic_string[abi:ne180100]<0>(&__p, "time");
  LODWORD(v151) = *((_DWORD *)std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v174, &__p, (uint64_t)&__p)+ 14);
  if ((LODWORD(v151) & 0x7FFFFFFFu) >= 0x7F800000) {
    *(float *)&v151 = -10000000.0;
  }
  v152 = [v150 numberWithFloat:v151];
  [v139 setObject:v152 forKeyedSubscript:@"time"];

  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if ((*((char *)a3 + 111) & 0x80000000) == 0)
  {
    if (!*((unsigned char *)a3 + 111)) {
      goto LABEL_342;
    }
LABEL_323:
    std::string::basic_string[abi:ne180100]<0>(&__p, "top1");
    v153 = std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v174, &__p, (uint64_t)&__p);
    if ((v153[7] & 0x7FFFFFFFu) >= 0x7F800000) {
      v154 = -10000000.0;
    }
    else {
      v154 = *((float *)v153 + 14);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "time");
    v155 = std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v174, &__p, (uint64_t)&__p);
    if ((v155[7] & 0x7FFFFFFFu) < 0x7F800000) {
      v142 = *((_DWORD *)v155 + 14);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    v205 = v142;
    __asm { FMOV            V0.4S, #-1.0 }
    v206 = _Q0;
    __asm { FMOV            V1.2S, #-1.0 }
    v207 = _D1;
    v208 = -1082130432;
    v209 = v154;
    v210 = _Q0;
    v211 = -1082130432;
    std::operator+<char>();
    std::string::basic_string[abi:ne180100]<0>(&v256, "EspressoValidation");
    v161 = *a1;
    Espresso::compute_path_to_string(*(_DWORD *)(**(void **)(*a1 + 32) + 12), &v232);
    std::string::basic_string[abi:ne180100]<0>(v262, "");
    std::string::basic_string[abi:ne180100]<0>(v203, "");
    Espresso::report_benchmark_result((uint64_t)&v205, (const char *)&__p, (uint64_t *)&v256, (uint64_t *)(v161 + 16), (uint64_t *)&v232, (uint64_t)v262, (uint64_t)v203);
    if (v204 < 0) {
      operator delete(v203[0]);
    }
    if (SHIBYTE(v263) < 0) {
      operator delete(v262[0]);
    }
    if (SHIBYTE(v232.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v232.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v256.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v256.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    goto LABEL_342;
  }
  if (*((void *)a3 + 12)) {
    goto LABEL_323;
  }
LABEL_342:
  v162 = [MEMORY[0x1E4F1C9C8] dateWithTimeIntervalSinceNow:0.0];
  v163 = objc_opt_new();
  [v163 setDateStyle:1];
  [v163 setTimeStyle:1];
  v164 = [v163 stringFromDate:v162];
  [v139 setObject:v164 forKeyedSubscript:@"date"];
  v202 = 0;
  v165 = [MEMORY[0x1E4F28D90] dataWithJSONObject:v139 options:1 error:&v202];
  v166 = a3 + 16;
  v167 = v202;
  v168 = a3;
  v169 = v167;
  if (*((char *)v168 + 87) < 0) {
    v166 = (void *)*v166;
  }
  v170 = [NSString stringWithUTF8String:v166];
  [v165 writeToFile:v170 atomically:1];

LABEL_345:
  if (v21) {
    nitro::nitro_function::nitro_function(v21);
  }
  Espresso::scoped_timer::~scoped_timer((Espresso::scoped_timer *)&v264);
}

void sub_192ADF9FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,Espresso::validation_options *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *__p,uint64_t a60,int a61,__int16 a62,char a63)
{
  if (a64 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v76 - 217) < 0) {
    operator delete(*(void **)(v76 - 240));
  }
  if (SLOBYTE(STACK[0x2F7]) < 0) {
    operator delete((void *)STACK[0x2E0]);
  }
  if (SLOBYTE(STACK[0x437]) < 0) {
    operator delete((void *)STACK[0x420]);
  }
  if (a73 < 0) {
    operator delete(a72);
  }

  std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::destroy(*v74);
  if (v75) {
    nitro::nitro_function::nitro_function(v75);
  }
  Espresso::scoped_timer::~scoped_timer((Espresso::scoped_timer *)(v76 - 200));
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__19865(__n128 *a1, __n128 *a2)
{
  __n128 result = a2[3];
  a1[3] = result;
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  return result;
}

void __Block_byref_object_dispose__19866(uint64_t a1)
{
  v1 = *(std::__shared_weak_count **)(a1 + 56);
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
}

void ___ZN8Espresso14run_validationENSt3__110shared_ptrINS_3netEEENS1_INS_20abstract_data_sourceEEENS_18validation_optionsENS0_6vectorIS3_NS0_9allocatorIS3_EEEE_block_invoke(uint64_t a1, uint64_t a2)
{
}

void ___ZN8Espresso14run_validationENSt3__110shared_ptrINS_3netEEENS1_INS_20abstract_data_sourceEEENS_18validation_optionsENS0_6vectorIS3_NS0_9allocatorIS3_EEEE_block_invoke_36(uint64_t a1, void *a2)
{
  uint64_t v4 = Espresso::blob<float,4>::copy(&v10, *(void *)(a1 + 40));
  if (*(char *)(a1 + 135) < 0) {
    std::string::__init_copy_ctor_external(&v9, *(const std::string::value_type **)(a1 + 112), *(void *)(a1 + 120));
  }
  else {
    std::string v9 = *(std::string *)(a1 + 112);
  }
  float v5 = v11;
  v8[0] = v10;
  v8[1] = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::prepare_blob_for_network((uint64_t)v4, (uint64_t *)(a1 + 56), (std::string::size_type)&v9, (uint64_t)v8, 0);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
  uint64_t v6 = *(void *)(a1 + 56) + 136;
  unint64_t v12 = (long long *)(a1 + 112);
  float v7 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v6, (unsigned __int8 *)(a1 + 112), &v12);
  (*(void (**)(void, void *, uint64_t *))(**((void **)v7 + 5) + 48))(*((void *)v7 + 5), a2, &v10);
  Espresso::net::__forward(*(void *)(a1 + 56), a2, 0, (*(_DWORD *)(a1 + 200) + 1));
  (*(void (**)(void, void *, uint64_t))(**(void **)(a1 + 184) + 40))(*(void *)(a1 + 184), a2, *(void *)(*(void *)(a1 + 32) + 8) + 48);
  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
}

void sub_192AE0050(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18)
{
  if (v18) {
    nitro::nitro_function::nitro_function(v18);
  }
  if (a16 < 0) {
    operator delete(__p);
  }
  if (v18) {
    nitro::nitro_function::nitro_function(v18);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN8Espresso14run_validationENSt3__110shared_ptrINS_3netEEENS1_INS_20abstract_data_sourceEEENS_18validation_optionsENS0_6vectorIS3_NS0_9allocatorIS3_EEEE_block_invoke_40(uint64_t a1, void *a2)
{
  uint64_t v4 = **(void **)(**(void **)(*(void *)(a1 + 48) + 32) + 80);
  (*(void (**)(uint64_t, void *, uint64_t))(*(void *)v4 + 48))(v4, a2, a1 + 64);
  Espresso::net::__forward(*(void *)(a1 + 48), a2, 0, 0xFFFFFFFFLL);
  (*(void (**)(void, void *, uint64_t))(**(void **)(a1 + 80) + 40))(*(void *)(a1 + 80), a2, *(void *)(*(void *)(a1 + 32) + 8) + 48);
  uint64_t result = *(void *)(a1 + 96);
  if (result)
  {
    uint64_t v6 = *(uint64_t (**)(void))(*(void *)result + 40);
    return v6();
  }
  return result;
}

void Espresso::confusion_matrix::generate_summary(Espresso::confusion_matrix *this@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 128) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  std::vector<int>::resize((std::vector<int> *)a2, *(int *)this);
  std::vector<int>::resize((std::vector<int> *)(a2 + 24), *(int *)this);
  std::vector<int>::resize((std::vector<int> *)(a2 + 48), *(int *)this);
  std::vector<float>::resize((void *)(a2 + 72), *(int *)this);
  std::vector<float>::resize((void *)(a2 + 96), *(int *)this);
  std::vector<float>::resize((void *)(a2 + 120), *(int *)this);
  int v4 = *(_DWORD *)this;
  if (*(int *)this >= 1)
  {
    uint64_t v5 = 0;
    uint64_t v6 = *((void *)this + 1);
    float v7 = *(int **)a2;
    float v8 = *(int **)(a2 + 48);
    do
    {
      v7[v5] = *(_DWORD *)(v6 + 4 * ((int)v5 + (int)v5 * v4));
      v8[v5] = 0;
      int v4 = *(_DWORD *)this;
      if (*(int *)this >= 1)
      {
        uint64_t v9 = 0;
        int v10 = 0;
        do
        {
          if (v5 != v9)
          {
            v10 += *(_DWORD *)(v6 + 4 * ((int)v9 + (int)v5 * v4));
            v8[v5] = v10;
            int v4 = *(_DWORD *)this;
          }
          ++v9;
        }
        while (v9 < v4);
      }
      ++v5;
    }
    while (v5 < v4);
    if (v4 >= 1)
    {
      uint64_t v11 = 0;
      unint64_t v12 = *(int **)(a2 + 24);
      do
      {
        v12[v11] = 0;
        LODWORD(v13) = *(_DWORD *)this;
        if (*(int *)this >= 1)
        {
          uint64_t v14 = 0;
          int v15 = 0;
          do
          {
            if (v11 != v14)
            {
              v15 += *(_DWORD *)(v6 + 4 * ((int)v11 + (int)v13 * (int)v14));
              v12[v11] = v15;
              LODWORD(v13) = *(_DWORD *)this;
            }
            ++v14;
          }
          while (v14 < (int)v13);
        }
        ++v11;
      }
      while (v11 < (int)v13);
      if ((int)v13 >= 1)
      {
        int v16 = *(float **)(a2 + 96);
        uint64_t v17 = *(_DWORD **)(a2 + 72);
        uint64_t v18 = *(_DWORD **)(a2 + 120);
        uint64_t v13 = v13;
        do
        {
          int v19 = *v7++;
          double v20 = (double)v19;
          int v21 = *v8++;
          double v22 = (double)v21;
          int v23 = *v12++;
          *(float *)&double v22 = v20 / (v20 + 1.0e-12 + v22);
          float *v16 = *(float *)&v22;
          *(float *)&double v20 = v20 / (v20 + 1.0e-12 + (double)v23);
          *v17++ = LODWORD(v20);
          float v24 = *v16++;
          *(float *)&double v20 = (float)((float)(v24 * *(float *)&v20) + (float)(v24 * *(float *)&v20))
                         / (v24 + 1.0e-12 + *(float *)&v20);
          *v18++ = LODWORD(v20);
          --v13;
        }
        while (v13);
      }
    }
  }
}

void sub_192AE0394(_Unwind_Exception *a1)
{
  Espresso::confusion_matrix::summary::~summary(v1);
  _Unwind_Resume(a1);
}

void Espresso::confusion_matrix::summary::~summary(Espresso::confusion_matrix::summary *this)
{
  v2 = (void *)*((void *)this + 15);
  if (v2)
  {
    *((void *)this + 16) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((void *)this + 12);
  if (v3)
  {
    *((void *)this + 13) = v3;
    operator delete(v3);
  }
  int v4 = (void *)*((void *)this + 9);
  if (v4)
  {
    *((void *)this + 10) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 6);
  if (v5)
  {
    *((void *)this + 7) = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)*((void *)this + 3);
  if (v6)
  {
    *((void *)this + 4) = v6;
    operator delete(v6);
  }
  float v7 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + 1) = v7;
    operator delete(v7);
  }
}

void __destroy_helper_block_ea8_48c41_ZTSNSt3__110shared_ptrIN8Espresso3netEEE64c49_ZTSNSt3__110shared_ptrIN8Espresso4blobIfLi4EEEEE80c62_ZTSNSt3__110shared_ptrIN8Espresso23abstract_blob_containerEEE96c62_ZTSNSt3__110shared_ptrIN8Espresso23abstract_blob_containerEEE(void *a1)
{
  v2 = (std::__shared_weak_count *)a1[13];
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  v3 = (std::__shared_weak_count *)a1[11];
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  int v4 = (std::__shared_weak_count *)a1[9];
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)a1[7];
  if (v5)
  {
    nitro::nitro_function::nitro_function(v5);
  }
}

void *__copy_helper_block_ea8_48c41_ZTSNSt3__110shared_ptrIN8Espresso3netEEE64c49_ZTSNSt3__110shared_ptrIN8Espresso4blobIfLi4EEEEE80c62_ZTSNSt3__110shared_ptrIN8Espresso23abstract_blob_containerEEE96c62_ZTSNSt3__110shared_ptrIN8Espresso23abstract_blob_containerEEE(void *result, void *a2)
{
  uint64_t v2 = a2[7];
  result[6] = a2[6];
  result[7] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = a2[9];
  result[8] = a2[8];
  result[9] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = a2[11];
  result[10] = a2[10];
  result[11] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = a2[13];
  result[12] = a2[12];
  result[13] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__shared_ptr_emplace<Espresso::confusion_matrix>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(void *)(a1 + 40) = v2;
    operator delete(v2);
  }
}

void std::__shared_ptr_emplace<Espresso::confusion_matrix>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3847F8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::confusion_matrix>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3847F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void __destroy_helper_block_ea8_40c49_ZTSNSt3__110shared_ptrIN8Espresso4blobIfLi4EEEEE56c41_ZTSNSt3__110shared_ptrIN8Espresso3netEEE72c35_ZTSN8Espresso18validation_optionsE184c62_ZTSNSt3__110shared_ptrIN8Espresso23abstract_blob_containerEEE(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 192);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  if (*(char *)(a1 + 183) < 0) {
    operator delete(*(void **)(a1 + 160));
  }
  if (*(char *)(a1 + 159) < 0) {
    operator delete(*(void **)(a1 + 136));
  }
  if (*(char *)(a1 + 135) < 0) {
    operator delete(*(void **)(a1 + 112));
  }
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 64);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 48);
  if (v4)
  {
    nitro::nitro_function::nitro_function(v4);
  }
}

uint64_t __copy_helper_block_ea8_40c49_ZTSNSt3__110shared_ptrIN8Espresso4blobIfLi4EEEEE56c41_ZTSNSt3__110shared_ptrIN8Espresso3netEEE72c35_ZTSN8Espresso18validation_optionsE184c62_ZTSNSt3__110shared_ptrIN8Espresso23abstract_blob_containerEEE(void *a1, void *a2)
{
  uint64_t v4 = a2[6];
  a1[5] = a2[5];
  a1[6] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = a2[8];
  a1[7] = a2[7];
  a1[8] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t result = Espresso::validation_options::validation_options((uint64_t)(a1 + 9), (uint64_t)(a2 + 9));
  uint64_t v7 = a2[24];
  a1[23] = a2[23];
  a1[24] = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_192AE069C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 64);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(v1 + 48);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  _Unwind_Resume(exception_object);
}

int *Espresso::confusion_matrix::predicted(int *this, int a2, int a3)
{
  int v3 = *this;
  if (*this > a3 && v3 > a2) {
    ++*(_DWORD *)(*((void *)this + 1) + 4 * (a2 + v3 * a3));
  }
  return this;
}

void Espresso::regularizer_builder::variable_gradient_diff(Espresso::regularizer_builder *this)
{
}

void Espresso::regularizer_builder::per_variable_loss(Espresso::regularizer_builder *this)
{
}

void Espresso::regularizer_builder::~regularizer_builder(Espresso::regularizer_builder *this)
{
  Espresso::regularizer_builder::~regularizer_builder(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *(void *)this = &unk_1EE350110;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 27);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  std::deque<std::pair<std::shared_ptr<Espresso::abstract_context>,Espresso::compute_path>>::~deque[abi:ne180100]((uint64_t)this + 144);
  int v3 = (std::__shared_weak_count *)*((void *)this + 16);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 14);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 12);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
  if (*((char *)this + 87) < 0) {
    operator delete(*((void **)this + 8));
  }
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)this + 24, *((void **)this + 4));
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }
}

void Espresso::regularizer_with_factors_builder::~regularizer_with_factors_builder(Espresso::regularizer_with_factors_builder *this)
{
  Espresso::regularizer_with_factors_builder::~regularizer_with_factors_builder(this);

  JUMPOUT(0x192FF16B0);
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_1EE367EA8;
  uint64_t v2 = (void *)*((void *)this + 29);
  if (v2)
  {
    *((void *)this + 30) = v2;
    operator delete(v2);
  }

  Espresso::regularizer_builder::~regularizer_builder(this);
}

void Espresso::l2_regularizer_builder::variable_gradient_diff(Espresso::l2_regularizer_builder *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = **((void **)this + 28) + 24 * a2;
  if (*(char *)(v6 + 23) >= 0) {
    size_t v7 = *(unsigned __int8 *)(v6 + 23);
  }
  else {
    size_t v7 = *(void *)(v6 + 8);
  }
  std::string::basic_string[abi:ne180100](a3, v7 + 14);
  if (*(char *)(a3 + 23) >= 0) {
    float v8 = (std::string::value_type *)a3;
  }
  else {
    float v8 = *(std::string::value_type **)a3;
  }
  if (v7)
  {
    if (*(char *)(v6 + 23) >= 0) {
      uint64_t v9 = (const void *)v6;
    }
    else {
      uint64_t v9 = *(const void **)v6;
    }
    memmove(v8, v9, v7);
  }
  strcpy(&v8[v7], "/reg_grad_diff");
  if (*((unsigned char *)this + 256))
  {
    uint64_t v10 = **((void **)this + 28);
    float v11 = **((float **)this + 29);
    if (*(char *)(a3 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v16, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
    }
    else {
      std::string v16 = *(std::string *)a3;
    }
    Espresso::sequential_builder::by_constant_op(1u, (uint64_t *)this + 1, v10 + 24 * a2, (uint64_t)&v16, (uint64_t)&v17, v11);
    if (*(char *)(a3 + 23) < 0) {
      operator delete(*(void **)a3);
    }
    *(_OWORD *)a3 = v17;
    *(void *)(a3 + 16) = v18;
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    {
      uint64_t v14 = (void *)v16.__r_.__value_.__r.__words[0];
LABEL_27:
      operator delete(v14);
    }
  }
  else
  {
    uint64_t v12 = **((void **)this + 28);
    float v13 = *(float *)(*((void *)this + 29) + 4 * a2);
    if (*(char *)(a3 + 23) < 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
    }
    else {
      std::string __p = *(std::string *)a3;
    }
    Espresso::sequential_builder::by_constant_op(1u, (uint64_t *)this + 1, v12 + 24 * a2, (uint64_t)&__p, (uint64_t)&v17, v13);
    if (*(char *)(a3 + 23) < 0) {
      operator delete(*(void **)a3);
    }
    *(_OWORD *)a3 = v17;
    *(void *)(a3 + 16) = v18;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      uint64_t v14 = (void *)__p.__r_.__value_.__r.__words[0];
      goto LABEL_27;
    }
  }
}

void sub_192AE0A68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (*(char *)(v21 + 23) < 0) {
    operator delete(*(void **)v21);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::l2_regularizer_builder::per_variable_loss(Espresso::l2_regularizer_builder *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = (uint64_t *)((char *)this + 8);
  uint64_t v7 = **((void **)this + 28) + 24 * a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  Espresso::sequential_builder::by_constant_op(0xDu, v6, v7, (uint64_t)__p, (uint64_t)v22, 2.0);
  if (v21 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v16, "");
  Espresso::sequential_builder::reduce(v6, (uint64_t)v22, 0, 0x1Fu, (uint64_t)v16, (uint64_t)v18);
  if (v17 < 0) {
    operator delete(v16[0]);
  }
  float v8 = (float *)*((void *)this + 29);
  if (*((unsigned char *)this + 256))
  {
    float v9 = *v8;
    std::string::basic_string[abi:ne180100]<0>(v14, "");
    Espresso::sequential_builder::by_constant_op(1u, v6, (uint64_t)v18, (uint64_t)v14, a3, v9 * 0.5);
    if ((v15 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    uint64_t v10 = (void **)v14;
  }
  else
  {
    float v11 = v8[a2];
    std::string::basic_string[abi:ne180100]<0>(v12, "");
    Espresso::sequential_builder::by_constant_op(1u, v6, (uint64_t)v18, (uint64_t)v12, a3, v11 * 0.5);
    if ((v13 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    uint64_t v10 = (void **)v12;
  }
  operator delete(*v10);
LABEL_11:
  if (v19 < 0) {
    operator delete(v18[0]);
  }
  if (v23 < 0) {
    operator delete(v22[0]);
  }
}

void sub_192AE0C40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  if (*(char *)(v32 - 65) < 0) {
    operator delete(*(void **)(v32 - 88));
  }
  _Unwind_Resume(exception_object);
}

void sub_192AE0CB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    JUMPOUT(0x192AE0CA8);
  }
  JUMPOUT(0x192AE0CB0);
}

void Espresso::l2_regularizer_builder::~l2_regularizer_builder(Espresso::l2_regularizer_builder *this)
{
  Espresso::regularizer_with_factors_builder::~regularizer_with_factors_builder(this);

  JUMPOUT(0x192FF16B0);
}

uint64_t Espresso::SharedUtils::TemporaryDirectory::GetDirectoryPath(Espresso::SharedUtils::TemporaryDirectory *this)
{
  return (uint64_t)this + 8;
}

void Espresso::SharedUtils::TemporaryDirectory::~TemporaryDirectory(Espresso::SharedUtils::TemporaryDirectory *this)
{
  Espresso::SharedUtils::TemporaryDirectory::~TemporaryDirectory(this);

  JUMPOUT(0x192FF16B0);
}

{
  void **v2;

  *(void *)this = &unk_1EE32A3D0;
  uint64_t v2 = (void **)((char *)this + 8);
  std::__fs::filesystem::__remove_all((const std::__fs::filesystem::path *)((char *)this + 8), 0);
  if (*((char *)this + 31) < 0) {
    operator delete(*v2);
  }
}

uint64_t Espresso::SharedUtils::TemporaryDirectory::TemporaryDirectory(uint64_t a1, const void **a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  *(void *)a1 = &unk_1EE32A3D0;
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (std::__fs::filesystem::path *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  if (*((char *)a2 + 23) >= 0) {
    size_t v5 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v5 = (size_t)a2[1];
  }
  uint64_t v6 = (void **)&v15;
  std::string::basic_string[abi:ne180100]((uint64_t)&v15, v5 + 41);
  if (v16 < 0) {
    uint64_t v6 = v15;
  }
  if (v5)
  {
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v7 = a2;
    }
    else {
      uint64_t v7 = *a2;
    }
    memmove(v6, v7, v5);
  }
  strcpy((char *)v6 + v5, "/com.apple.espresso.test_directory.XXXXXX");
  MEMORY[0x1F4188790](*(__n128 *)"directory.XXXXXX");
  if (v16 >= 0) {
    float v9 = (const char *)&v15;
  }
  else {
    float v9 = (const char *)v15;
  }
  uint64_t v10 = strcpy((char *)&v13 - v8, v9);
  uint64_t v14 = (std::string *)mkdtemp(v10);
  if (!v14)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Unable to create temporary directory.");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  std::__fs::filesystem::path::path[abi:ne180100]<char const*,void>(&v13, &v14);
  if (*(char *)(a1 + 31) < 0) {
    operator delete(v4->__pn_.__r_.__value_.__l.__data_);
  }
  v4->__pn_ = v13;
  std::__fs::filesystem::__permissions(v4, all, replace, 0);
  if (v16 < 0) {
    operator delete(v15);
  }
  return a1;
}

void sub_192AE0FAC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v3);
  if (*(char *)(v4 - 57) < 0) {
    operator delete(*(void **)(v4 - 80));
  }
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(a1);
}

void Espresso::pass_params_sgd_hoisting::~pass_params_sgd_hoisting(Espresso::pass_params_sgd_hoisting *this)
{
}

uint64_t Espresso::pass_sgd_hoisting::run_on_network@<X0>(Espresso::net *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v261 = *MEMORY[0x1E4F143B8];
  *(unsigned char *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  Espresso::run_pass_on_network<Espresso::pass_global_name_indexing>((uint64_t)a1);
  Espresso::run_pass_on_network<Espresso::pass_blob_name_indexing>((uint64_t)a1);
  v228 = a1;
  v229 = Espresso::net::get_analysis<Espresso::pass_global_name_indexing_result>((uint64_t)a1);
  v230 = Espresso::net::get_analysis<Espresso::pass_blob_name_indexing_result>((uint64_t)a1);
  long long v252 = 0u;
  long long v253 = 0u;
  float v254 = 1.0;
  std::string __p = 0;
  v250 = 0;
  unint64_t v251 = 0;
  *(_OWORD *)v246 = 0u;
  long long v247 = 0u;
  float v248 = 1.0;
  memset(v244, 0, sizeof(v244));
  int v245 = 1065353216;
  std::string::basic_string[abi:ne180100]<0>(&v257, "array_gather");
  std::unordered_set<std::string>::unordered_set((uint64_t)v243, (uint64_t)&v257, 1);
  if (SHIBYTE(v257.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v257.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v257, "array_gather");
  std::string::basic_string[abi:ne180100]<0>(&v258, "scatter");
  memset(v241, 0, sizeof(v241));
  int v242 = 1065353216;
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::string> const&>((uint64_t)v241, (uint64_t)&v257, (uint64_t)&v257);
  if (v260.__r_.__value_.__s.__data_[7] < 0) {
    operator delete(v258);
  }
  if (SHIBYTE(v257.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v257.__r_.__value_.__l.__data_);
  }
  long long v238 = 0u;
  long long v239 = 0u;
  int v240 = 1065353216;
  memset(v236, 0, sizeof(v236));
  int v237 = 1065353216;
  int v235 = -1;
  unint64_t v4 = v229[1];
  if (v4)
  {
    uint64_t v5 = 0;
    v219 = (char *)a1 + 96;
    while (1)
    {
      uint64_t v6 = *(void **)(v229[7] + 24 * v5);
      if (*(void *)(v229[7] + 24 * v5 + 8) - (void)v6 == 8) {
        break;
      }
LABEL_287:
      if (++v5 >= v4) {
        goto LABEL_298;
      }
    }
    int v7 = **(_DWORD **)(v230[10] + 24 * *v6);
    uint64_t v8 = (void *)(v230[22] + 24 * v7);
    float v9 = (void *)*v8;
    uint64_t v226 = v8[1] - *v8;
    unint64_t v10 = (v226 >> 3) - 1;
    uint64_t v11 = *(void *)(*v8 + 8 * v10);
    int v234 = v11;
    uint64_t v12 = *((void *)v228 + 4);
    uint64_t v13 = *(void *)(v12 + 16 * (int)v11);
    uint64_t v14 = (unsigned __int16 *)(v13 + 40);
    int v15 = *(char *)(v13 + 63);
    if (v15 < 0)
    {
      if (*(void *)(v13 + 48) != 3)
      {
LABEL_286:
        unint64_t v4 = v229[1];
        goto LABEL_287;
      }
      uint64_t v14 = *(unsigned __int16 **)v14;
    }
    else if (v15 != 3)
    {
      goto LABEL_286;
    }
    int v16 = *v14;
    int v17 = *((unsigned __int8 *)v14 + 2);
    BOOL v19 = v16 != 26483 || v17 != 100;
    if ((unint64_t)v226 < 9 || v19) {
      goto LABEL_286;
    }
    uint64_t v20 = *(void *)(v12 + 16 * v9[(v226 >> 3) - 2]);
    char v21 = (unsigned __int16 *)(v20 + 40);
    int v22 = *(char *)(v20 + 63);
    if (v22 < 0)
    {
      if (*(void *)(v20 + 48) != 3) {
        goto LABEL_32;
      }
      char v21 = *(unsigned __int16 **)v21;
    }
    else if (v22 != 3)
    {
LABEL_32:
      int v235 = *(_DWORD *)(*(void *)(v230[13] + 24 * (int)v11 + 8) - 4);
      float v26 = *(const void **)(v13 + 64);
      if (!v26) {
        goto LABEL_286;
      }
      if (!v27) {
        goto LABEL_286;
      }
      int v225 = v7;
      int v28 = *(std::__shared_weak_count **)(v13 + 72);
      if (v28) {
        atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      v223 = v28;
      v224 = (void **)v8;
      uint64_t v29 = (*(uint64_t (**)(void *))(*(void *)v27 + 320))(v27);
      if (*(unsigned char *)v29) {
        goto LABEL_284;
      }
      int v30 = *(_DWORD *)(v29 + 8);
      if (v226 >> 3 == 1) {
        goto LABEL_58;
      }
      unint64_t v31 = 0;
      uint64_t v32 = *(void *)(*((void *)v228 + 4) + 16 * **v224);
      LOBYTE(v33) = 1;
      do
      {
        uint64_t v34 = *(void *)(*((void *)v228 + 4) + 16 * (*v224)[v31]);
        uint64_t v35 = *(unsigned __int8 *)(v34 + 63);
        if ((v35 & 0x80u) == 0) {
          uint64_t v36 = *(unsigned __int8 *)(v34 + 63);
        }
        else {
          uint64_t v36 = *(void *)(v34 + 48);
        }
        uint64_t v37 = *(unsigned __int8 *)(v32 + 63);
        int v38 = (char)v37;
        if ((v37 & 0x80u) != 0) {
          uint64_t v37 = *(void *)(v32 + 48);
        }
        if (v36 != v37) {
          goto LABEL_284;
        }
        unint64_t v39 = (const void **)(v34 + 40);
        if (v38 >= 0) {
          float v40 = (unsigned __int8 *)(v32 + 40);
        }
        else {
          float v40 = *(unsigned __int8 **)(v32 + 40);
        }
        if ((v35 & 0x80) != 0)
        {
          if (memcmp(*v39, v40, *(void *)(v34 + 48))) {
            goto LABEL_284;
          }
        }
        else if (*(unsigned char *)(v34 + 63))
        {
          v41 = (unsigned __int8 *)(v34 + 40);
          while (*v41 == *v40)
          {
            ++v41;
            ++v40;
            if (!--v35) {
              goto LABEL_55;
            }
          }
          goto LABEL_284;
        }
LABEL_55:
        unint64_t v42 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v243, (uint64_t)v39);
        int v33 = (v42 != 0) & v33;
        if (!v42) {
          break;
        }
        ++v31;
      }
      while (v10 > v31);
      if (!v33)
      {
LABEL_284:
        if (v223) {
          nitro::nitro_function::nitro_function(v223);
        }
        goto LABEL_286;
      }
LABEL_58:
      memset(&v257, 0, sizeof(v257));
      memset(&v260, 0, sizeof(v260));
      int v259 = v11;
      uint64_t v43 = *(void *)(v230[13] + 24 * (int)v11);
      uint64_t v44 = *(void *)(v230[13] + 24 * (int)v11 + 8) - v43;
      if (v44)
      {
        uint64_t v45 = 0;
        unint64_t v46 = v44 >> 2;
        if (v46 <= 1) {
          unint64_t v46 = 1;
        }
        unint64_t v47 = (unint64_t)v224;
        while (*(_DWORD *)(v43 + 4 * v45) != v225)
        {
          if (v46 == ++v45)
          {
            LODWORD(v45) = -1;
            break;
          }
        }
      }
      else
      {
        LODWORD(v45) = -1;
        unint64_t v47 = (unint64_t)v224;
      }
      if (!std::__hash_table<Espresso::activation_mode,std::hash<Espresso::activation_mode>,std::equal_to<Espresso::activation_mode>,std::allocator<Espresso::activation_mode>>::find<Espresso::activation_mode>(v238, *((unint64_t *)&v238 + 1), v11))
      {
        memset(v232, 0, sizeof(v232));
        int v233 = 1065353216;
        int v48 = std::__hash_table<std::__hash_value_type<int,std::unordered_set<int>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::unordered_set<int>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::unordered_set<int>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::unordered_set<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)&v238, v11, &v234);
        std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__move_assign((uint64_t)(v48 + 3), (uint64_t *)v232);
        std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)v232);
      }
      if (!std::__hash_table<Espresso::activation_mode,std::hash<Espresso::activation_mode>,std::equal_to<Espresso::activation_mode>,std::allocator<Espresso::activation_mode>>::find<Espresso::activation_mode>(*(uint64_t *)&v236[0], *((unint64_t *)&v236[0] + 1), v11))
      {
        memset(v232, 0, sizeof(v232));
        int v233 = 1065353216;
        uint64_t v49 = std::__hash_table<std::__hash_value_type<int,std::unordered_set<int>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::unordered_set<int>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::unordered_set<int>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::unordered_set<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)v236, v11, &v234);
        std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__move_assign((uint64_t)(v49 + 3), (uint64_t *)v232);
        std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)v232);
      }
      uint64_t v50 = std::__hash_table<std::__hash_value_type<int,std::unordered_set<int>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::unordered_set<int>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::unordered_set<int>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::unordered_set<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)&v238, v11, &v234);
      int v51 = *(_DWORD *)(*(void *)(v230[13] + 24 * (int)v11) + 4 * (int)v45);
      std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>((uint64_t)(v50 + 3), v51, v51);
      uint64_t v52 = std::__hash_table<std::__hash_value_type<int,std::unordered_set<int>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::unordered_set<int>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::unordered_set<int>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::unordered_set<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)&v238, v11, &v234);
      int v53 = v45 + v30;
      int v54 = *(_DWORD *)(*(void *)(v230[13] + 24 * (int)v11) + 4 * v53);
      std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>((uint64_t)(v52 + 3), v54, v54);
      uint64_t v55 = std::__hash_table<std::__hash_value_type<int,std::unordered_set<int>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::unordered_set<int>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::unordered_set<int>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::unordered_set<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)v236, v11, &v234);
      int v56 = *(_DWORD *)(*(void *)(v230[10] + 24 * (int)v11) + 4 * (int)v45);
      std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>((uint64_t)(v55 + 3), v56, v56);
      int v57 = *(_DWORD *)(*(void *)(v230[13] + 24 * (int)v11) + 4 * v53);
      int v58 = v250;
      if ((unint64_t)v250 >= v251)
      {
        float v60 = (char *)__p;
        uint64_t v61 = (v250 - (unsigned char *)__p) >> 2;
        unint64_t v62 = v61 + 1;
        if ((unint64_t)(v61 + 1) >> 62) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v63 = v251 - (void)__p;
        if ((uint64_t)(v251 - (void)__p) >> 1 > v62) {
          unint64_t v62 = v63 >> 1;
        }
        BOOL v64 = (unint64_t)v63 >= 0x7FFFFFFFFFFFFFFCLL;
        unint64_t v65 = 0x3FFFFFFFFFFFFFFFLL;
        if (!v64) {
          unint64_t v65 = v62;
        }
        if (v65)
        {
          unint64_t v65 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v65);
          float v60 = (char *)__p;
          int v58 = v250;
        }
        else
        {
          uint64_t v66 = 0;
        }
        int v67 = (char *)(v65 + 4 * v61);
        *(_DWORD *)int v67 = v57;
        float v59 = v67 + 4;
        while (v58 != v60)
        {
          int v68 = *((_DWORD *)v58 - 1);
          v58 -= 4;
          *((_DWORD *)v67 - 1) = v68;
          v67 -= 4;
        }
        std::string __p = v67;
        v250 = v59;
        unint64_t v251 = v65 + 4 * v66;
        if (v60) {
          operator delete(v60);
        }
      }
      else
      {
        *(_DWORD *)v250 = v57;
        float v59 = v58 + 4;
      }
      v250 = v59;
      HIDWORD(v258) = v57;
      v232[0] = (void *)v234;
      float v69 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)v219, v234, v232);
      std::string::operator=(&v260, (const std::string *)(v69[3] + 24 * (int)v45));
      LODWORD(v258) = v5;
      if (v226 >> 3 != 1)
      {
        uint64_t v70 = 0;
        uint64_t v218 = v5;
        while (1)
        {
          uint64_t v71 = *(void *)(*(void *)v47 + 8 * v70);
          uint64_t v72 = *(void *)(*((void *)v228 + 4) + 16 * (int)v71);
          BOOL v73 = (uint64_t *)(v72 + 40);
          int v74 = *(char *)(v72 + 63);
          if (v74 < 0)
          {
            if (*(void *)(v72 + 48) != 12) {
              goto LABEL_204;
            }
            BOOL v73 = (uint64_t *)*v73;
          }
          else if (v74 != 12)
          {
            goto LABEL_204;
          }
          unint64_t v75 = (uint64_t *)*v73;
          int v76 = *((_DWORD *)v73 + 2);
          if (v75 == (uint64_t *)0x61675F7961727261 && v76 == 1919248500) {
            break;
          }
LABEL_204:
          if (++v70 == (v226 >> 3) - 1) {
            goto LABEL_208;
          }
        }
        if (*(char *)(v72 + 39) < 0) {
          std::string::__init_copy_ctor_external(&v231, *(const std::string::value_type **)(v72 + 16), *(void *)(v72 + 24));
        }
        else {
          std::string v231 = *(std::string *)(v72 + 16);
        }
        uint64_t v220 = v70;
        *(void *)((char *)v256 + 7) = 0;
        v256[0] = 0;
        std::operator+<char>();
        v221 = v232[0];
        char v222 = HIBYTE(v232[2]);
        uint64_t v78 = SHIDWORD(v258);
        v256[0] = v232[1];
        *(void **)((char *)v256 + 7) = *(void **)((char *)&v232[1] + 7);
        std::string::basic_string[abi:ne180100]<0>(v232, "scatter");
        if (v226 == 16)
        {
          uint64_t v79 = *(void *)(v230[19] + 8 * v78);
          char v227 = HIBYTE(v232[2]);
          goto LABEL_102;
        }
        int v87 = *(_DWORD *)(*(void *)(v230[13] + 24 * (int)v71) + 4);
        unint64_t v88 = (uint64_t *)(v230[19] + 8 * v78);
        while (2)
        {
          uint64_t v89 = *v88;
          std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>((uint64_t)&v252, *v88, *v88);
          uint64_t v90 = v230[13];
          float v91 = (char **)(v90 + 24 * (int)v89);
          int v92 = *v91;
          unint64_t v93 = v91[1] - *v91;
          uint64_t v94 = v230[19];
          if ((int)(v93 >> 2) < 1) {
            goto LABEL_132;
          }
          uint64_t v95 = *((void *)v228 + 4);
          char v227 = HIBYTE(v232[2]);
          if (SHIBYTE(v232[2]) >= 0) {
            uint64_t v96 = (void *)HIBYTE(v232[2]);
          }
          else {
            uint64_t v96 = v232[1];
          }
          if (SHIBYTE(v232[2]) >= 0) {
            int64_t v97 = v232;
          }
          else {
            int64_t v97 = (void **)v232[0];
          }
          uint64_t v78 = (v93 >> 2);
LABEL_116:
          uint64_t v79 = *(void *)(v94 + 8 * *(int *)&v92[4 * (v78 - 1)]);
          uint64_t v98 = *(void *)(v95 + 16 * (int)v79);
          uint64_t v99 = *(unsigned __int8 *)(v98 + 63);
          size_t v100 = *(void *)(v98 + 48);
          if ((v99 & 0x80u) == 0) {
            int v101 = (void *)*(unsigned __int8 *)(v98 + 63);
          }
          else {
            int v101 = *(void **)(v98 + 48);
          }
          if (v101 == v96)
          {
            unint64_t v102 = (const void **)(v98 + 40);
            if ((v99 & 0x80) != 0)
            {
              if (memcmp(*v102, v97, v100)) {
                break;
              }
            }
            else if (v99)
            {
              v103 = v97;
              while (*(unsigned __int8 *)v102 == *(unsigned __int8 *)v103)
              {
                unint64_t v102 = (const void **)((char *)v102 + 1);
                v103 = (void **)((char *)v103 + 1);
                if (!--v99) {
                  goto LABEL_127;
                }
              }
              break;
            }
LABEL_127:
            if (*(_DWORD *)(*(void *)(v90 + 24 * (int)v79) + 4) == v87)
            {
              if ((int)v79 <= 0)
              {
LABEL_132:
                unint64_t v88 = (uint64_t *)(v94 + 8 * *(int *)v92);
                continue;
              }
LABEL_102:
              if (v227 < 0) {
                operator delete(v232[0]);
              }
              std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>((uint64_t)v244, v79, v79);
              uint64_t v5 = v218;
              unint64_t v47 = (unint64_t)v224;
              uint64_t v80 = *(int **)(v230[13] + 24 * (int)v79);
              uint64_t v81 = v80[2];
              uint64_t v82 = *v80;
              uint64_t v83 = *(void *)(v230[19] + 8 * v82);
              unint64_t v84 = *((void *)&v252 + 1);
              if (*((void *)&v252 + 1))
              {
                uint8x8_t v85 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v252 + 8));
                v85.i16[0] = vaddlv_u8(v85);
                if (v85.u32[0] > 1uLL)
                {
                  unint64_t v86 = (int)v83;
                  if (*((void *)&v252 + 1) <= (unint64_t)(int)v83) {
                    unint64_t v86 = (unint64_t)(int)v83 % *((void *)&v252 + 1);
                  }
                }
                else
                {
                  unint64_t v86 = (*((void *)&v252 + 1) - 1) & (int)v83;
                }
                uint64_t v78 = v86;
                int64_t v105 = *(uint64_t ***)(v252 + 8 * v86);
                if (v105)
                {
                  for (i = *v105; i; i = (uint64_t *)*i)
                  {
                    unint64_t v107 = i[1];
                    if (v107 == (int)v83)
                    {
                      if (*((_DWORD *)i + 4) == v83) {
                        goto LABEL_168;
                      }
                    }
                    else
                    {
                      if (v85.u32[0] > 1uLL)
                      {
                        if (v107 >= *((void *)&v252 + 1)) {
                          v107 %= *((void *)&v252 + 1);
                        }
                      }
                      else
                      {
                        v107 &= *((void *)&v252 + 1) - 1;
                      }
                      if (v107 != v86) {
                        break;
                      }
                    }
                  }
                }
              }
              unint64_t v108 = operator new(0x18uLL);
              *unint64_t v108 = 0;
              v108[1] = (int)v83;
              *((_DWORD *)v108 + 4) = v83;
              float v109 = (float)(unint64_t)(*((void *)&v253 + 1) + 1);
              if (!v84 || (float)(v254 * (float)v84) < v109)
              {
                BOOL v110 = (v84 & (v84 - 1)) != 0;
                if (v84 < 3) {
                  BOOL v110 = 1;
                }
                unint64_t v111 = v110 | (2 * v84);
                unint64_t v112 = vcvtps_u32_f32(v109 / v254);
                if (v111 <= v112) {
                  size_t v113 = v112;
                }
                else {
                  size_t v113 = v111;
                }
                std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__rehash<true>((uint64_t)&v252, v113);
                unint64_t v84 = *((void *)&v252 + 1);
                if ((*((void *)&v252 + 1) & (*((void *)&v252 + 1) - 1)) != 0)
                {
                  if (*((void *)&v252 + 1) <= (unint64_t)(int)v83) {
                    uint64_t v78 = (unint64_t)(int)v83 % *((void *)&v252 + 1);
                  }
                  else {
                    uint64_t v78 = (int)v83;
                  }
                }
                else
                {
                  uint64_t v78 = (*((void *)&v252 + 1) - 1) & (int)v83;
                }
              }
              uint64_t v114 = v252;
              v115 = *(void **)(v252 + 8 * v78);
              if (v115)
              {
                *unint64_t v108 = *v115;
                goto LABEL_166;
              }
              *unint64_t v108 = v253;
              *(void *)&long long v253 = v108;
              *(void *)(v114 + 8 * v78) = &v253;
              if (*v108)
              {
                unint64_t v116 = *(void *)(*v108 + 8);
                if ((v84 & (v84 - 1)) != 0)
                {
                  if (v116 >= v84) {
                    v116 %= v84;
                  }
                }
                else
                {
                  v116 &= v84 - 1;
                }
                v115 = (void *)(v252 + 8 * v116);
LABEL_166:
                void *v115 = v108;
              }
              ++*((void *)&v253 + 1);
LABEL_168:
              float v117 = v250;
              if ((unint64_t)v250 >= v251)
              {
                int v119 = (char *)__p;
                uint64_t v120 = (v250 - (unsigned char *)__p) >> 2;
                unint64_t v121 = v120 + 1;
                if ((unint64_t)(v120 + 1) >> 62) {
                  std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v122 = v251 - (void)__p;
                if ((uint64_t)(v251 - (void)__p) >> 1 > v121) {
                  unint64_t v121 = v122 >> 1;
                }
                BOOL v64 = (unint64_t)v122 >= 0x7FFFFFFFFFFFFFFCLL;
                unint64_t v123 = 0x3FFFFFFFFFFFFFFFLL;
                if (!v64) {
                  unint64_t v123 = v121;
                }
                if (v123)
                {
                  unint64_t v123 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v123);
                  int v119 = (char *)__p;
                  float v117 = v250;
                }
                else
                {
                  uint64_t v124 = 0;
                }
                v125 = (char *)(v123 + 4 * v120);
                *(_DWORD *)v125 = v82;
                int v118 = v125 + 4;
                while (v117 != v119)
                {
                  int v126 = *((_DWORD *)v117 - 1);
                  v117 -= 4;
                  *((_DWORD *)v125 - 1) = v126;
                  v125 -= 4;
                }
                std::string __p = v125;
                v250 = v118;
                unint64_t v251 = v123 + 4 * v124;
                if (v119) {
                  operator delete(v119);
                }
              }
              else
              {
                *(_DWORD *)v250 = v82;
                int v118 = v117 + 4;
              }
              unint64_t v127 = v79 | (unint64_t)(v81 << 32);
              v250 = v118;
              std::string::size_type size = v257.__r_.__value_.__l.__size_;
              if (v257.__r_.__value_.__l.__size_ < v257.__r_.__value_.__r.__words[2])
              {
                *(void *)v257.__r_.__value_.__l.__size_ = v127;
                *(void *)(size + 8) = v221;
                *(void *)(size + 16) = v256[0];
                *(void *)(size + 23) = *(void *)((char *)v256 + 7);
                *(unsigned char *)(size + 31) = v222;
                std::string::size_type v129 = size + 32;
                uint64_t v70 = v220;
                goto LABEL_202;
              }
              std::string::size_type v130 = v257.__r_.__value_.__r.__words[0];
              uint64_t v131 = (uint64_t)(v257.__r_.__value_.__l.__size_ - v257.__r_.__value_.__r.__words[0]) >> 5;
              unint64_t v132 = v131 + 1;
              if ((unint64_t)(v131 + 1) >> 59) {
                std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
              }
              int64_t v133 = v257.__r_.__value_.__r.__words[2] - v257.__r_.__value_.__r.__words[0];
              if ((uint64_t)(v257.__r_.__value_.__r.__words[2] - v257.__r_.__value_.__r.__words[0]) >> 4 > v132) {
                unint64_t v132 = v133 >> 4;
              }
              if ((unint64_t)v133 >= 0x7FFFFFFFFFFFFFE0) {
                unint64_t v134 = 0x7FFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v134 = v132;
              }
              if (v134 >> 59) {
                std::__throw_bad_array_new_length[abi:ne180100]();
              }
              v135 = operator new(32 * v134);
              std::string::size_type v136 = (std::string::size_type)v135 + 32 * v131;
              *(void *)std::string::size_type v136 = v127;
              *(void *)(v136 + 8) = v221;
              *(void *)(v136 + 16) = v256[0];
              *(void *)(v136 + 23) = *(void *)((char *)v256 + 7);
              *(unsigned char *)(v136 + 31) = v222;
              v256[0] = 0;
              *(void *)((char *)v256 + 7) = 0;
              std::string::size_type v129 = v136 + 32;
              if (size == v130)
              {
                v257.__r_.__value_.__r.__words[0] = v136;
                v257.__r_.__value_.__l.__size_ = v136 + 32;
                v257.__r_.__value_.__r.__words[2] = (std::string::size_type)v135 + 32 * v134;
                uint64_t v70 = v220;
                if (!size) {
                  goto LABEL_202;
                }
                goto LABEL_201;
              }
              uint64_t v70 = v220;
              do
              {
                uint64_t v137 = *(void *)(size - 32);
                size -= 32;
                *(void *)(v136 - 32) = v137;
                v136 -= 32;
                long long v138 = *(_OWORD *)(size + 8);
                *(void *)(v136 + 24) = *(void *)(size + 24);
                *(_OWORD *)(v136 + 8) = v138;
                *(void *)(size + 16) = 0;
                *(void *)(size + 24) = 0;
                *(void *)(size + 8) = 0;
              }
              while (size != v130);
              std::string::size_type size = v257.__r_.__value_.__l.__size_;
              std::string::size_type v139 = v257.__r_.__value_.__r.__words[0];
              v257.__r_.__value_.__r.__words[0] = v136;
              v257.__r_.__value_.__l.__size_ = v129;
              v257.__r_.__value_.__r.__words[2] = (std::string::size_type)v135 + 32 * v134;
              if (size != v139)
              {
                do
                {
                  if (*(char *)(size - 1) < 0) {
                    operator delete(*(void **)(size - 24));
                  }
                  size -= 32;
                }
                while (size != v139);
                std::string::size_type size = v139;
              }
              if (size) {
LABEL_201:
              }
                operator delete((void *)size);
LABEL_202:
              v257.__r_.__value_.__l.__size_ = v129;
              if (SHIBYTE(v231.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v231.__r_.__value_.__l.__data_);
              }
              goto LABEL_204;
            }
          }
          break;
        }
        if (v78-- <= 1) {
          goto LABEL_132;
        }
        goto LABEL_116;
      }
LABEL_208:
      unint64_t v140 = (unint64_t)v246[1];
      if (v246[1])
      {
        uint8x8_t v141 = (uint8x8_t)vcnt_s8((int8x8_t)v246[1]);
        v141.i16[0] = vaddlv_u8(v141);
        if (v141.u32[0] > 1uLL)
        {
          unint64_t v47 = v225;
          if (v246[1] <= (void *)v225) {
            unint64_t v47 = v225 % (unint64_t)v246[1];
          }
        }
        else
        {
          unint64_t v47 = ((unint64_t)v246[1] - 1) & v225;
        }
        v142 = (uint64_t **)*((void *)v246[0] + v47);
        if (v142)
        {
          for (j = *v142; j; j = (uint64_t *)*j)
          {
            unint64_t v144 = j[1];
            if (v144 == v225)
            {
              if (*((_DWORD *)j + 4) == v225) {
                goto LABEL_281;
              }
            }
            else
            {
              if (v141.u32[0] > 1uLL)
              {
                if ((void *)v144 >= v246[1]) {
                  v144 %= (unint64_t)v246[1];
                }
              }
              else
              {
                v144 &= (unint64_t)v246[1] - 1;
              }
              if (v144 != v47) {
                break;
              }
            }
          }
        }
      }
      v145 = operator new(0x58uLL);
      v232[0] = v145;
      v232[1] = &v247;
      void *v145 = 0;
      v145[1] = v225;
      *((_DWORD *)v145 + 4) = v225;
      *(_OWORD *)(v145 + 3) = *(_OWORD *)&v257.__r_.__value_.__l.__data_;
      std::string::size_type v146 = v257.__r_.__value_.__r.__words[2];
      memset(&v257, 0, sizeof(v257));
      v147 = v258;
      v145[5] = v146;
      v145[6] = v147;
      *((_DWORD *)v145 + 14) = v259;
      long long v148 = *(_OWORD *)&v260.__r_.__value_.__l.__data_;
      v145[10] = *((void *)&v260.__r_.__value_.__l + 2);
      *((_OWORD *)v145 + 4) = v148;
      memset(&v260, 0, sizeof(v260));
      LOBYTE(v232[2]) = 1;
      float v149 = (float)(unint64_t)(*((void *)&v247 + 1) + 1);
      if (!v140 || (float)(v248 * (float)v140) < v149)
      {
        BOOL v150 = v140 < 3 || (v140 & (v140 - 1)) != 0;
        unint64_t v151 = v150 | (2 * v140);
        unint64_t v152 = vcvtps_u32_f32(v149 / v248);
        if (v151 <= v152) {
          int8x8_t prime = (int8x8_t)v152;
        }
        else {
          int8x8_t prime = (int8x8_t)v151;
        }
        if (*(void *)&prime == 1)
        {
          int8x8_t prime = (int8x8_t)2;
        }
        else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
        {
          int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
          unint64_t v140 = (unint64_t)v246[1];
        }
        if (*(void *)&prime <= v140)
        {
          if (*(void *)&prime < v140)
          {
            unint64_t v160 = vcvtps_u32_f32((float)*((unint64_t *)&v247 + 1) / v248);
            if (v140 < 3
              || (uint8x8_t v161 = (uint8x8_t)vcnt_s8((int8x8_t)v140), v161.i16[0] = vaddlv_u8(v161), v161.u32[0] > 1uLL))
            {
              unint64_t v160 = std::__next_prime(v160);
            }
            else
            {
              uint64_t v162 = 1 << -(char)__clz(v160 - 1);
              if (v160 >= 2) {
                unint64_t v160 = v162;
              }
            }
            if (*(void *)&prime <= v160) {
              int8x8_t prime = (int8x8_t)v160;
            }
            if (*(void *)&prime >= v140)
            {
              unint64_t v140 = (unint64_t)v246[1];
            }
            else
            {
              if (prime) {
                goto LABEL_237;
              }
              v168 = v246[0];
              v246[0] = 0;
              if (v168) {
                operator delete(v168);
              }
              unint64_t v140 = 0;
              v246[1] = 0;
            }
          }
        }
        else
        {
LABEL_237:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          v154 = operator new(8 * *(void *)&prime);
          v155 = v246[0];
          v246[0] = v154;
          if (v155) {
            operator delete(v155);
          }
          uint64_t v156 = 0;
          v246[1] = (void *)prime;
          do
            *((void *)v246[0] + v156++) = 0;
          while (*(void *)&prime != v156);
          v157 = (void **)v247;
          if ((void)v247)
          {
            unint64_t v158 = *(void *)(v247 + 8);
            uint8x8_t v159 = (uint8x8_t)vcnt_s8(prime);
            v159.i16[0] = vaddlv_u8(v159);
            if (v159.u32[0] > 1uLL)
            {
              if (v158 >= *(void *)&prime) {
                v158 %= *(void *)&prime;
              }
            }
            else
            {
              v158 &= *(void *)&prime - 1;
            }
            *((void *)v246[0] + v158) = &v247;
            for (k = *v157; k; unint64_t v158 = v164)
            {
              unint64_t v164 = k[1];
              if (v159.u32[0] > 1uLL)
              {
                if (v164 >= *(void *)&prime) {
                  v164 %= *(void *)&prime;
                }
              }
              else
              {
                v164 &= *(void *)&prime - 1;
              }
              if (v164 != v158)
              {
                if (!*((void *)v246[0] + v164))
                {
                  *((void *)v246[0] + v164) = v157;
                  goto LABEL_262;
                }
                *v157 = (void *)*k;
                void *k = **((void **)v246[0] + v164);
                **((void **)v246[0] + v164) = k;
                k = v157;
              }
              unint64_t v164 = v158;
LABEL_262:
              v157 = (void **)k;
              k = (void *)*k;
            }
          }
          unint64_t v140 = (unint64_t)prime;
        }
        if ((v140 & (v140 - 1)) != 0)
        {
          if (v140 <= v225) {
            unint64_t v47 = v225 % v140;
          }
          else {
            unint64_t v47 = v225;
          }
        }
        else
        {
          unint64_t v47 = (v140 - 1) & v225;
        }
      }
      v165 = (void *)*((void *)v246[0] + v47);
      v166 = v232[0];
      if (v165)
      {
        *(void *)v232[0] = *v165;
      }
      else
      {
        *(void *)v232[0] = v247;
        *(void *)&long long v247 = v166;
        *((void *)v246[0] + v47) = &v247;
        if (!*(void *)v166) {
          goto LABEL_280;
        }
        unint64_t v167 = *(void *)(*(void *)v166 + 8);
        if ((v140 & (v140 - 1)) != 0)
        {
          if (v167 >= v140) {
            v167 %= v140;
          }
        }
        else
        {
          v167 &= v140 - 1;
        }
        v165 = (char *)v246[0] + 8 * v167;
      }
      void *v165 = v166;
LABEL_280:
      v232[0] = 0;
      ++*((void *)&v247 + 1);
      std::unique_ptr<std::__hash_node<std::__hash_value_type<int,sgd_hoisting_idx_info>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,sgd_hoisting_idx_info>,void *>>>>::reset[abi:ne180100]((uint64_t)v232);
LABEL_281:
      if (SHIBYTE(v260.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v260.__r_.__value_.__l.__data_);
      }
      v232[0] = &v257;
      std::vector<sgd_hoisting_idx_info::single_consumer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)v232);
      goto LABEL_284;
    }
    int v23 = *v21;
    int v24 = *((unsigned __int8 *)v21 + 2);
    if (v23 == 26483 && v24 == 100) {
      goto LABEL_286;
    }
    goto LABEL_32;
  }
LABEL_298:
  if (*((void *)&v247 + 1))
  {
    v169 = (uint64_t *)v247;
    if ((void)v247)
    {
      int v170 = -1;
      v171 = (uint64_t *)v247;
      do
      {
        if (*((_DWORD *)v171 + 14) > v170) {
          int v170 = *((_DWORD *)v171 + 14);
        }
        v171 = (uint64_t *)*v171;
      }
      while (v171);
    }
    else
    {
      int v170 = -1;
    }
    LODWORD(v256[0]) = v170;
    v172 = (uint64_t *)v239;
    if ((void)v239)
    {
      do
      {
        v173 = (int *)(v172 + 2);
        v174 = std::__hash_table<std::__hash_value_type<int,std::unordered_set<int>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::unordered_set<int>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::unordered_set<int>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::unordered_set<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)v236, *((_DWORD *)v172 + 4), (_DWORD *)v172 + 4);
        memset(&v257, 0, sizeof(v257));
        memset(v232, 0, 24);
        uint64_t v175 = *((int *)v172 + 4);
        uint64_t v176 = v230[13] + 24 * (int)v175;
        v177 = *(int **)v176;
        v178 = *(int **)(v176 + 8);
        if (*(int **)v176 != v178)
        {
          v179 = 0;
          do
          {
            int v180 = *v177;
            if (!std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(v172 + 3, *v177))
            {
              uint64_t v181 = v230[7] + 24 * v180;
              if ((unint64_t)v179 >= v257.__r_.__value_.__r.__words[2])
              {
                v179 = std::vector<std::string>::__push_back_slow_path<std::string const&>(&v257.__r_.__value_.__l.__data_, v181);
              }
              else
              {
                if (*(char *)(v181 + 23) < 0)
                {
                  std::string::__init_copy_ctor_external(v179, *(const std::string::value_type **)v181, *(void *)(v181 + 8));
                }
                else
                {
                  long long v182 = *(_OWORD *)v181;
                  v179->__r_.__value_.__r.__words[2] = *(void *)(v181 + 16);
                  *(_OWORD *)&v179->__r_.__value_.__l.__data_ = v182;
                }
                ++v179;
              }
              v257.__r_.__value_.__l.__size_ = (std::string::size_type)v179;
            }
            ++v177;
          }
          while (v177 != v178);
          uint64_t v175 = *v173;
        }
        uint64_t v183 = v230[10] + 24 * (int)v175;
        v184 = *(int **)v183;
        v185 = *(int **)(v183 + 8);
        if (*(int **)v183 != v185)
        {
          do
          {
            int v186 = *v184;
            if (!std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(v174 + 3, *v184))
            {
              uint64_t v187 = v230[7] + 24 * v186;
              v188 = v232[1];
              if (v232[1] >= v232[2])
              {
                v190 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)v232, v187);
              }
              else
              {
                if (*(char *)(v187 + 23) < 0)
                {
                  std::string::__init_copy_ctor_external((std::string *)v232[1], *(const std::string::value_type **)v187, *(void *)(v187 + 8));
                }
                else
                {
                  long long v189 = *(_OWORD *)v187;
                  *((void *)v232[1] + 2) = *(void *)(v187 + 16);
                  _OWORD *v188 = v189;
                }
                v190 = (std::string *)((char *)v188 + 24);
              }
              v232[1] = v190;
            }
            ++v184;
          }
          while (v184 != v185);
          uint64_t v175 = *v173;
        }
        uint64_t v191 = *(void *)(*((void *)v228 + 4) + 16 * v175);
        v192 = *(void **)(v191 + 64);
        if (v192
        {
          v193 = *(std::__shared_weak_count **)(v191 + 72);
          if (v193) {
            atomic_fetch_add_explicit(&v193->__shared_owners_, 1uLL, memory_order_relaxed);
          }
        }
        else
        {
          v193 = 0;
        }
        v195 = v232[0];
        v194 = v232[1];
        *(_DWORD *)((*(uint64_t (**)(void *))(*(void *)v192 + 320))(v192) + 8) = -1431655765
                                                                                             * ((unint64_t)(v194 - v195) >> 3);
        unint64_t v196 = *v173;
        v231.__r_.__value_.__r.__words[0] = v196;
        v197 = (std::string *)(std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)v228 + 56, v196, &v231)+ 3);
        if (v197 != &v257) {
          std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)v197, (std::string *)v257.__r_.__value_.__l.__data_, (std::string *)v257.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v257.__r_.__value_.__l.__size_ - v257.__r_.__value_.__r.__words[0]) >> 3));
        }
        unint64_t v198 = *v173;
        v231.__r_.__value_.__r.__words[0] = v198;
        v199 = (void **)(std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)v228 + 96, v198, &v231)+ 3);
        if (v199 != v232) {
          std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)v199, (std::string *)v232[0], (std::string *)v232[1], 0xAAAAAAAAAAAAAAABLL * (((char *)v232[1] - (char *)v232[0]) >> 3));
        }
        if (v193) {
          nitro::nitro_function::nitro_function(v193);
        }
        v231.__r_.__value_.__r.__words[0] = (std::string::size_type)v232;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v231);
        v232[0] = &v257;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v232);
        v172 = (uint64_t *)*v172;
      }
      while (v172);
      v169 = (uint64_t *)v247;
    }
    if (v169)
    {
      uint64_t v200 = (uint64_t)v228 + 56;
      do
      {
        if (*((char *)v169 + 87) < 0) {
          std::string::__init_copy_ctor_external(&v257, (const std::string::value_type *)v169[8], v169[9]);
        }
        else {
          std::string v257 = *(std::string *)(v169 + 8);
        }
        unint64_t v201 = v169[4] - v169[3];
        if ((int)(v201 >> 5) >= 1)
        {
          uint64_t v202 = 0;
          uint64_t v203 = v201 & 0x1FFFFFFFE0;
          do
          {
            v204 = (int *)(v169[3] + v202);
            unint64_t v205 = *v204;
            int v206 = *((_DWORD *)v169 + 4);
            uint64_t v207 = v230[7];
            v232[0] = (void *)v205;
            v208 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v200, v205, v232);
            v209 = (const std::string *)(v207 + 24 * v206);
            std::string::operator=((std::string *)v208[3], v209);
            v232[0] = (void *)v205;
            v210 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v200, v205, v232);
            std::string::operator=((std::string *)(v210[3] + 48), (const std::string *)(v204 + 2));
            v232[0] = (void *)v205;
            v211 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)v228 + 96, v205, v232);
            std::string::operator=((std::string *)v211[3], v209);
            v212 = *(int **)(v229[10] + 24 * *((int *)v169 + 12));
            if (*(void *)(v229[10] + 24 * *((int *)v169 + 12) + 8) - (void)v212 != 8) {
              Espresso::throw_exception_selector<Espresso::invalid_state_error>("store_global does not have exactly one input");
            }
            int v213 = *((_DWORD *)v169 + 4);
            uint64_t v214 = v230[7];
            v232[0] = (void *)*v212;
            v215 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v200, (unint64_t)v232[0], v232);
            std::string::operator=((std::string *)v215[3], (const std::string *)(v214 + 24 * v213));
            v202 += 32;
          }
          while (v203 != v202);
        }
        if (SHIBYTE(v257.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v257.__r_.__value_.__l.__data_);
        }
        v169 = (uint64_t *)*v169;
      }
      while (v169);
    }
    v255 = 0;
    v216 = operator new(0x40uLL);
    void *v216 = &unk_1EE37C538;
    v216[1] = v256;
    v216[2] = v244;
    v216[3] = &v252;
    v216[4] = v230;
    v216[5] = &v235;
    v216[6] = v246;
    v216[7] = &__p;
    v255 = v216;
    Espresso::transform_network_inplace((uint64_t)v228);
  }
  std::__hash_table<std::__hash_value_type<int,std::unordered_set<int>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::unordered_set<int>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::unordered_set<int>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::unordered_set<int>>>>::~__hash_table((uint64_t)v236);
  std::__hash_table<std::__hash_value_type<int,std::unordered_set<int>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::unordered_set<int>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::unordered_set<int>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::unordered_set<int>>>>::~__hash_table((uint64_t)&v238);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v241);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v243);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)v244);
  std::__hash_table<std::__hash_value_type<int,sgd_hoisting_idx_info>,std::__unordered_map_hasher<int,std::__hash_value_type<int,sgd_hoisting_idx_info>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,sgd_hoisting_idx_info>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,sgd_hoisting_idx_info>>>::~__hash_table((uint64_t)v246);
  if (__p)
  {
    v250 = (char *)__p;
    operator delete(__p);
  }
  return std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&v252);
}

void sub_192AE27A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61,uint64_t a62,uint64_t a63)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<int,sgd_hoisting_idx_info>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,sgd_hoisting_idx_info>,void *>>>>::reset[abi:ne180100]((uint64_t)&a33);
  sgd_hoisting_idx_info::~sgd_hoisting_idx_info((void **)(v72 - 176));
  if (a20) {
    nitro::nitro_function::nitro_function(a20);
  }
  std::__hash_table<std::__hash_value_type<int,std::unordered_set<int>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::unordered_set<int>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::unordered_set<int>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::unordered_set<int>>>>::~__hash_table((uint64_t)&a39);
  std::__hash_table<std::__hash_value_type<int,std::unordered_set<int>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::unordered_set<int>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::unordered_set<int>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::unordered_set<int>>>>::~__hash_table((uint64_t)&a45);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&a51);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&a56);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&a61);
  std::__hash_table<std::__hash_value_type<int,sgd_hoisting_idx_info>,std::__unordered_map_hasher<int,std::__hash_value_type<int,sgd_hoisting_idx_info>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,sgd_hoisting_idx_info>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,sgd_hoisting_idx_info>>>::~__hash_table((uint64_t)&a67);
  int v74 = __p;
  if (__p)
  {
    STACK[0x200] = (unint64_t)__p;
    operator delete(v74);
  }
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&STACK[0x210]);
  unint64_t v75 = *(std::__shared_weak_count **)(a14 + 16);
  if (v75) {
    nitro::nitro_function::nitro_function(v75);
  }
  _Unwind_Resume(a1);
}

void std::vector<sgd_hoisting_idx_info::single_consumer_info>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    unint64_t v4 = (void **)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (*((char *)v4 - 1) < 0) {
          operator delete(*(v4 - 3));
        }
        v4 -= 4;
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sgd_hoisting_idx_info::~sgd_hoisting_idx_info(void **this)
{
  if (*((char *)this + 63) < 0) {
    operator delete(this[5]);
  }
  uint64_t v2 = this;
  std::vector<sgd_hoisting_idx_info::single_consumer_info>::__destroy_vector::operator()[abi:ne180100](&v2);
}

uint64_t std::__hash_table<std::__hash_value_type<int,sgd_hoisting_idx_info>,std::__unordered_map_hasher<int,std::__hash_value_type<int,sgd_hoisting_idx_info>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,sgd_hoisting_idx_info>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,sgd_hoisting_idx_info>>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      int v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<int const,sgd_hoisting_idx_info>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  unint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void std::__destroy_at[abi:ne180100]<std::pair<int const,sgd_hoisting_idx_info>,0>(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  uint64_t v2 = (void **)(a1 + 8);
  std::vector<sgd_hoisting_idx_info::single_consumer_info>::__destroy_vector::operator()[abi:ne180100](&v2);
}

void *std::__function::__func<Espresso::pass_sgd_hoisting::run_on_network(Espresso::net &)::$_0,std::allocator<Espresso::pass_sgd_hoisting::run_on_network(Espresso::net &)::$_0>,void ()(Espresso::net &,Espresso::sequential_builder &)>::target_type()
{
}

uint64_t std::__function::__func<Espresso::pass_sgd_hoisting::run_on_network(Espresso::net &)::$_0,std::allocator<Espresso::pass_sgd_hoisting::run_on_network(Espresso::net &)::$_0>,void ()(Espresso::net &,Espresso::sequential_builder &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN8Espresso17pass_sgd_hoisting14run_on_networkERNS_3netEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<Espresso::pass_sgd_hoisting::run_on_network(Espresso::net &)::$_0,std::allocator<Espresso::pass_sgd_hoisting::run_on_network(Espresso::net &)::$_0>,void ()(Espresso::net &,Espresso::sequential_builder &)>::operator()(uint64_t a1, Espresso::net *a2, uint64_t *a3)
{
  uint64_t v5 = a1;
  *(void *)&long long v68 = *MEMORY[0x1E4F143B8];
  int v6 = **(_DWORD **)(a1 + 8);
  if ((v6 & 0x80000000) == 0)
  {
    int64_t v7 = 0;
    do
    {
      if (!std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(*(void **)(v5 + 16), v7)&& !std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(*(void **)(v5 + 24), v7))
      {
        Espresso::sequential_builder::add_layer_from_network((Espresso::sequential_builder *)a3, a2, v7);
        int v6 = **(_DWORD **)(v5 + 8);
      }
    }
    while (v7++ < v6);
  }
  uint64_t v9 = *(void *)(*(void *)(v5 + 32) + 56) + 24 * **(int **)(v5 + 40);
  if (*(char *)(v9 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v60, *(const std::string::value_type **)v9, *(void *)(v9 + 8));
  }
  else
  {
    long long v10 = *(_OWORD *)v9;
    v60.__r_.__value_.__r.__words[2] = *(void *)(v9 + 16);
    *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v10;
  }
  if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t size = HIBYTE(v60.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t size = v60.__r_.__value_.__l.__size_;
  }
  std::string::basic_string[abi:ne180100]((uint64_t)&v59, size + 4);
  if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v12 = &v59;
  }
  else {
    uint64_t v12 = (std::string *)v59.__r_.__value_.__r.__words[0];
  }
  if (size)
  {
    if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v13 = &v60;
    }
    else {
      uint64_t v13 = (std::string *)v60.__r_.__value_.__r.__words[0];
    }
    memmove(v12, v13, size);
  }
  strcpy((char *)v12 + size, "/neg");
  v55[2] = 897988541;
  char v56 = 0;
  int v58 = 0;
  int v57 = 0;
  v55[0] = 3;
  v55[1] = 3212836864;
  std::string::basic_string[abi:ne180100]<0>(__p, "elementwise");
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v65, v60.__r_.__value_.__l.__data_, v60.__r_.__value_.__l.__size_);
  }
  else {
    std::string v65 = v60;
  }
  uint64_t v50 = 0;
  int v51 = 0;
  uint64_t v52 = 0;
  unint64_t v47 = (std::string *)&v50;
  LOBYTE(v48) = 0;
  uint64_t v50 = (std::string *)operator new(0x18uLL);
  int v51 = v50;
  uint64_t v52 = v50 + 1;
  int v51 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v52, (long long *)&v65, (long long *)&v66, v50);
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v67, v59.__r_.__value_.__l.__data_, v59.__r_.__value_.__l.__size_);
  }
  else {
    std::string v67 = v59;
  }
  unint64_t v47 = 0;
  int v48 = 0;
  uint64_t v49 = 0;
  uint64_t v37 = (std::string *)&v47;
  LOBYTE(v38) = 0;
  unint64_t v47 = (std::string *)operator new(0x18uLL);
  int v48 = v47;
  uint64_t v49 = v47 + 1;
  int v48 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v49, (long long *)&v67, &v68, v47);
  Espresso::sequential_builder::add<Espresso::elementwise_params>(&v53, a3, (uint64_t)__p, (uint64_t)&v59, (uint64_t)v55, (uint64_t)v50, (uint64_t)v51, (uint64_t *)&v47);
  if (v54) {
    nitro::nitro_function::nitro_function(v54);
  }
  uint64_t v37 = (std::string *)&v47;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v37);
  if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v67.__r_.__value_.__l.__data_);
  }
  v67.__r_.__value_.__r.__words[0] = (std::string::size_type)&v50;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v67);
  if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v65.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v43) < 0) {
    operator delete(__p[0]);
  }
  for (i = *(void **)(*(void *)(v5 + 48) + 16); i; i = (void *)*i)
  {
    unint64_t v15 = i[4] - i[3];
    if ((int)(v15 >> 5) >= 1)
    {
      uint64_t v16 = 0;
      uint64_t v33 = (v15 >> 5);
      do
      {
        uint64_t v17 = i[3];
        uint64_t v43 = 897988541;
        char v44 = 0;
        int v45 = 0;
        int v46 = 0;
        __p[0] = (void *)1;
        __p[1] = (void *)1065353216;
        std::string::basic_string[abi:ne180100]<0>(&v67, "elementwise");
        uint64_t v18 = (int *)(v17 + 32 * v16);
        uint64_t v19 = *(void *)(*(void *)(v5 + 32) + 56) + 24 * v18[1];
        if (*(char *)(v19 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v65, *(const std::string::value_type **)v19, *(void *)(v19 + 8));
        }
        else
        {
          long long v20 = *(_OWORD *)v19;
          v65.__r_.__value_.__r.__words[2] = *(void *)(v19 + 16);
          *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v20;
        }
        if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v66, v59.__r_.__value_.__l.__data_, v59.__r_.__value_.__l.__size_);
        }
        else {
          std::string v66 = v59;
        }
        char v21 = a2;
        uint64_t v22 = v5;
        int v23 = a3;
        uint64_t v37 = 0;
        int v38 = 0;
        p_data = 0;
        v63.__r_.__value_.__r.__words[0] = (std::string::size_type)&v37;
        v63.__r_.__value_.__s.__data_[8] = 0;
        uint64_t v37 = (std::string *)operator new(0x30uLL);
        int v38 = v37;
        p_data = (void **)&v37[2].__r_.__value_.__l.__data_;
        int v24 = (const std::string::value_type **)(v18 + 2);
        int v38 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&p_data, (long long *)&v65, (long long *)&v67, v37);
        if (*((char *)v18 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(&v63, *v24, *((void *)v18 + 2));
        }
        else
        {
          long long v25 = *(_OWORD *)v24;
          v63.__r_.__value_.__r.__words[2] = *((void *)v18 + 3);
          *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v25;
        }
        uint64_t v34 = 0;
        uint64_t v35 = 0;
        uint64_t v36 = 0;
        uint64_t v61 = &v34;
        char v62 = 0;
        uint64_t v34 = (std::string *)operator new(0x18uLL);
        uint64_t v35 = v34;
        uint64_t v36 = v34 + 1;
        uint64_t v35 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v36, (long long *)&v63, (long long *)&v64, v34);
        Espresso::sequential_builder::add<Espresso::elementwise_params>(&v40, v23, (uint64_t)&v67, (uint64_t)(v18 + 2), (uint64_t)__p, (uint64_t)v37, (uint64_t)v38, (uint64_t *)&v34);
        if (v41) {
          nitro::nitro_function::nitro_function(v41);
        }
        uint64_t v61 = &v34;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v61);
        a3 = v23;
        if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v63.__r_.__value_.__l.__data_);
        }
        v63.__r_.__value_.__r.__words[0] = (std::string::size_type)&v37;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v63);
        uint64_t v26 = 0;
        uint64_t v5 = v22;
        a2 = v21;
        do
        {
          if (SHIBYTE(v66.__r_.__value_.__r.__words[v26 + 2]) < 0) {
            operator delete(*(void **)((char *)&v65 + v26 * 8 + 24));
          }
          v26 -= 3;
        }
        while (v26 != -6);
        if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v67.__r_.__value_.__l.__data_);
        }
        Espresso::sequential_builder::add_layer_from_network((Espresso::sequential_builder *)a3, v21, *v18);
        ++v16;
      }
      while (v16 != v33);
    }
  }
  for (unint64_t j = **(int **)(v5 + 8) + 1; j < (uint64_t)(*((void *)a2 + 5) - *((void *)a2 + 4)) >> 4; unint64_t j = v28)
  {
    unint64_t v28 = j + 1;
    Espresso::sequential_builder::add_layer_from_network((Espresso::sequential_builder *)a3, a2, j);
  }
  uint64_t v29 = *(int ***)(v5 + 56);
  int v30 = *v29;
  unint64_t v31 = v29[1];
  if (*v29 != v31)
  {
    do
    {
      int v32 = *v30++;
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__erase_unique<std::string>((void *)(a3[10] + 136), (unsigned __int8 *)(*(void *)(*(void *)(v5 + 32) + 56) + 24 * v32));
    }
    while (v30 != v31);
  }
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v59.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v60.__r_.__value_.__l.__data_);
  }
}

void sub_192AE31C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  *(void *)(v58 - 144) = &a35;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v58 - 144));
  if (*(char *)(v58 - 169) < 0) {
    operator delete(*(void **)(v58 - 192));
  }
  if (a27 < 0) {
    operator delete(__p);
  }
  if (a52 < 0) {
    operator delete(a47);
  }
  if (a58 < 0) {
    operator delete(a53);
  }
  _Unwind_Resume(a1);
}

__n128 std::__function::__func<Espresso::pass_sgd_hoisting::run_on_network(Espresso::net &)::$_0,std::allocator<Espresso::pass_sgd_hoisting::run_on_network(Espresso::net &)::$_0>,void ()(Espresso::net &,Espresso::sequential_builder &)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE37C538;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  long long v4 = *(_OWORD *)(a1 + 40);
  *(void *)(a2 + 56) = *(void *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<Espresso::pass_sgd_hoisting::run_on_network(Espresso::net &)::$_0,std::allocator<Espresso::pass_sgd_hoisting::run_on_network(Espresso::net &)::$_0>,void ()(Espresso::net &,Espresso::sequential_builder &)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x40uLL);
  *(void *)uint64_t v2 = &unk_1EE37C538;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  __n128 result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  *((void *)v2 + 7) = *(void *)(a1 + 56);
  return result;
}

void std::__function::__func<Espresso::pass_sgd_hoisting::run_on_network(Espresso::net &)::$_0,std::allocator<Espresso::pass_sgd_hoisting::run_on_network(Espresso::net &)::$_0>,void ()(Espresso::net &,Espresso::sequential_builder &)>::~__func()
{
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<int,sgd_hoisting_idx_info>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,sgd_hoisting_idx_info>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<int const,sgd_hoisting_idx_info>,0>((uint64_t)v1 + 16);
    }
    operator delete(v1);
  }
}

void Espresso::pass_sgd_hoisting::get_analysis_usage(uint64_t a1, unsigned char *a2)
{
  *a2 = 0;
}

void Espresso::pass_sgd_hoisting::~pass_sgd_hoisting(Espresso::pass_sgd_hoisting *this)
{
  *(void *)this = &unk_1EE3719B0;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v1;

  *(void *)this = &unk_1EE3719B0;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
}

uint64_t Espresso::MPSGraphCompilerEngine::compiler::clear_priority(uint64_t this)
{
  *(unsigned char *)(this + 120) = 0;
  return this;
}

uint64_t Espresso::MPSGraphCompilerEngine::compiler::set_priority(uint64_t result, int a2)
{
  *(unsigned char *)(result + 120) = 1;
  *(_DWORD *)(result + 124) = a2;
  return result;
}

void Espresso::MPSGraphCompilerEngine::compiler::build_segment(uint64_t a1, uint64_t a2, int a3, long long *a4)
{
  v38[0] = a3;
  long long v34 = *a4;
  std::unordered_set<std::string>::unordered_set((uint64_t)v35, (uint64_t)(a4 + 1));
  std::unordered_set<std::string>::unordered_set((uint64_t)v36, (uint64_t)a4 + 56);
  memset(v37, 0, 24);
  std::vector<Espresso::platform>::__init_with_size[abi:ne180100]<Espresso::platform*,Espresso::platform*>(v37, *((const void **)a4 + 12), *((void *)a4 + 13), (uint64_t)(*((void *)a4 + 13) - *((void *)a4 + 12)) >> 2);
  int64_t v7 = *(std::__shared_weak_count **)(a1 + 16);
  if (v7)
  {
    uint64_t v8 = std::__shared_weak_count::lock(v7);
    if (v8)
    {
      uint64_t v9 = *(void *)(a1 + 8);
      if (v9)
      {
        char v24 = 1;
        uint64_t v26 = a3;
        uint64_t v27 = v9;
        uint64_t v28 = 0;
        uint64_t v29 = 0;
        uint64_t v30 = 0;
        uint64_t v31 = v9;
        uint64_t v32 = 0;
        uint64_t v33 = 0;
        int v25 = 723714112;
        kdebug_trace();
        std::set<std::string>::set[abi:ne180100]<std::__hash_const_iterator<std::__hash_node<std::string,void *> *>>((uint64_t)__p, v36[2]);
        long long v10 = std::__tree<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(a1 + 160), a3, v38);
        uint64_t v11 = (char **)(v10 + 6);
        uint64_t v12 = (char ***)(v10 + 5);
        std::__tree<std::string>::destroy((uint64_t)(v10 + 5), (char *)v10[6]);
        uint64_t v13 = (char *)__p[1];
        *(v11 - 1) = (char *)__p[0];
        *uint64_t v11 = v13;
        uint64_t v14 = v20;
        v11[1] = v20;
        if (v14)
        {
          *((void *)v13 + 2) = v11;
          __p[0] = &__p[1];
          __p[1] = 0;
          long long v20 = 0;
          uint64_t v13 = 0;
        }
        else
        {
          *uint64_t v12 = v11;
        }
        std::__tree<std::string>::destroy((uint64_t)__p, v13);
        v22[0] = v9;
        v22[1] = v8;
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
        long long v15 = v34;
        std::set<std::string>::set[abi:ne180100]<std::__hash_const_iterator<std::__hash_node<std::string,void *> *>>((uint64_t)__p, v35[2]);
        uint64_t v16 = std::__tree<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(a1 + 160), a3, v38)+ 5;
        uint64_t v17 = *(void *)(a1 + 224);
        v21[0] = *(void *)(a1 + 216);
        v21[1] = v17;
        if (v17) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
        }
        Espresso::MILTranslator::TranslateSegment((uint64_t)&v23, (uint64_t)v22, v15, *((uint64_t *)&v15 + 1), (uint64_t)__p, (uint64_t)v16, v21);
      }
    }
  }
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Inconsistent state");
  __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
}

void sub_192AE3D00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, MIL::Attributes::IOAliasInfo *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  *(void *)(v35 - 120) = &a16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v35 - 120));
  std::unique_ptr<MIL::Attributes::IOAliasInfo>::reset[abi:ne180100](&a19);
  uint64_t v37 = a24;
  a24 = 0;
  if (v37) {
    (*(void (**)(uint64_t))(*(void *)v37 + 8))(v37);
  }
  Espresso_scoped_signpost::~Espresso_scoped_signpost((Espresso_scoped_signpost *)&a25);
  if (v34) {
    nitro::nitro_function::nitro_function(v34);
  }
  Espresso::net_compiler_segment_based::segment_t::~segment_t((Espresso::net_compiler_segment_based::segment_t *)&a34);
  _Unwind_Resume(a1);
}

uint64_t std::set<std::string>::set[abi:ne180100]<std::__hash_const_iterator<std::__hash_node<std::string,void *> *>>(uint64_t a1, const void **a2)
{
  *(void *)(a1 + 8) = 0;
  long long v3 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a2)
  {
    long long v4 = a2;
    do
    {
      std::__tree<std::string>::__emplace_hint_unique_key_args<std::string,std::string const&>((uint64_t **)a1, v3, v4 + 2, (uint64_t)(v4 + 2));
      long long v4 = (const void **)*v4;
    }
    while (v4);
  }
  return a1;
}

void sub_192AE3F14(_Unwind_Exception *a1)
{
  std::__tree<std::string>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

MIL::Attributes::IOAliasInfo *std::unique_ptr<MIL::Attributes::IOAliasInfo>::reset[abi:ne180100](MIL::Attributes::IOAliasInfo **a1)
{
  __n128 result = *a1;
  *a1 = 0;
  if (result)
  {
    MIL::Attributes::IOAliasInfo::~IOAliasInfo(result);
    JUMPOUT(0x192FF16B0);
  }
  return result;
}

uint64_t **Espresso::MPSGraphCompilerEngine::compiler::process_blob_tensor_type(uint64_t a1, int a2, void *a3)
{
  int v3 = a2 - 2;
  if ((a2 - 2) >= 0xF || ((0x778Du >> v3) & 1) == 0) {
    Espresso::throw_exception_selector<Espresso::unsupported_configuration_error>("[Espresso] MPSGraphEngine: unsupported type for I/O Tensors");
  }
  int v4 = dword_192DFFCD0[v3];
  __n128 result = std::__tree<std::__value_type<std::string,Espresso::compute_path>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::compute_path>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::compute_path>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 184), a3, (uint64_t)a3);
  *((_DWORD *)result + 14) = v4;
  return result;
}

uint64_t **std::__tree<std::__value_type<std::string,Espresso::compute_path>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::compute_path>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::compute_path>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void *a2, uint64_t a3)
{
  int v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        int v6 = (uint64_t **)v5;
        uint64_t v8 = v5 + 4;
        if (!std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, v5 + 4)) {
          break;
        }
        uint64_t v5 = *v6;
        uint64_t v9 = v6;
        if (!*v6) {
          goto LABEL_9;
        }
      }
      if (!std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v8, a2)) {
        return v6;
      }
      uint64_t v9 = v6 + 1;
      uint64_t v5 = v6[1];
      if (!v5) {
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v9 = a1 + 1;
LABEL_9:
    long long v10 = (char *)operator new(0x40uLL);
    uint64_t v11 = (std::string *)(v10 + 32);
    if (*(char *)(a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
    }
    else
    {
      *(_OWORD *)&v11->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
      *((void *)v10 + 6) = *(void *)(a3 + 16);
    }
    *((_DWORD *)v10 + 14) = 0;
    *(void *)long long v10 = 0;
    *((void *)v10 + 1) = 0;
    *((void *)v10 + 2) = v6;
    void *v9 = (uint64_t *)v10;
    uint64_t v12 = (uint64_t *)**a1;
    uint64_t v13 = (uint64_t *)v10;
    if (v12)
    {
      *a1 = v12;
      uint64_t v13 = *v9;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v13);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return (uint64_t **)v10;
}

void sub_192AE40E4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void Espresso::MPSGraphCompilerEngine::compiler::dump_ir(uint64_t *a1, uint64_t *a2)
{
  void (***v9)(uint64_t *__return_ptr, void);
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  char v14;
  std::string::size_type size;
  std::string::size_type i;
  uint64_t v17;
  char *v18;
  char *v19;
  void *v20;
  char *v21;
  BOOL v22;
  void *v23;
  void *v24;
  int v25;
  void *v26;
  size_t v27;
  std::__fs::filesystem::path *v28;
  const void *v29;
  std::__fs::filesystem::path *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  uint64_t v37;
  void *v38;
  void *v39;
  uint64_t v40;
  id v41;
  void *v42;
  void *v43;
  uint64_t v44;
  Espresso *v45;
  const char *v46;
  void **v47;
  id v48;
  id v49;
  id v50;
  id v51;
  id v52;
  id v53;
  std::string *v54;
  NSObject *v55;
  const std::__fs::filesystem::path *v56;
  Espresso *v57;
  const char *v58;
  NSObject *v59;
  std::__fs::filesystem::path *p_to;
  std::runtime_error *exception;
  const void **v62;
  void *v63;
  std::__shared_weak_count *v64;
  uint64_t v65;
  id v67;
  id v68;
  void *v69[2];
  char v70;
  void *v71[2];
  char v72;
  void *v73[2];
  char v74;
  void *v75[2];
  char v76;
  void *v77[3];
  void *__p[2];
  char v79;
  void *v80[2];
  char v81;
  uint8_t buf[8];
  long long v83;
  long long v84;
  long long v85;
  long long v86;
  void v87[5];
  std::__shared_weak_count *v88;
  std::string v89;
  void *v90;
  char v91;
  std::string *v92;
  std::__fs::filesystem::path v93;
  std::__fs::filesystem::path __to;
  std::string v95;
  std::__fs::filesystem::path v96;
  std::string v97;
  uint64_t v98;

  int v3 = a1;
  uint64_t v98 = *MEMORY[0x1E4F143B8];
  if (*((char *)a2 + 23) < 0)
  {
    if (a2[1])
    {
LABEL_3:
      if (!a1) {
        goto LABEL_10;
      }
LABEL_9:
      operator new();
    }
  }
  else if (*((unsigned char *)a2 + 23))
  {
    goto LABEL_3;
  }
  int v4 = Espresso::espresso_os_log_subsystem((Espresso *)a1, (const char *)a2);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_debug_impl(&dword_1920CB000, v4, OS_LOG_TYPE_DEBUG, "[Espresso::MPSGraphEngine] Provide a non-null directory for IR dump.", buf, 2u);
  }

  int v3 = a1;
  if (a1) {
    goto LABEL_9;
  }
LABEL_10:
  uint64_t v5 = (std::__shared_weak_count *)v3[2];
  if (!v5 || (uint64_t v64 = std::__shared_weak_count::lock(v5)) == 0 || (v65 = v3[1]) == 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Inconsistent state");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  std::string::basic_string[abi:ne180100]<0>(&v90, "net");
  if (*((char *)a2 + 23) >= 0) {
    int v6 = a2;
  }
  else {
    int v6 = (uint64_t *)*a2;
  }
  long long v68 = [NSString stringWithUTF8String:v6];
  if (*(char *)(v65 + 471) < 0) {
    std::string::__init_copy_ctor_external(&v89, *(const std::string::value_type **)(v65 + 448), *(void *)(v65 + 456));
  }
  else {
    uint64_t v89 = *(std::string *)(v65 + 448);
  }
  if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v89.__r_.__value_.__l.__size_)
    {
      int64_t v7 = (std::string *)v89.__r_.__value_.__r.__words[0];
      goto LABEL_24;
    }
  }
  else if (*((unsigned char *)&v89.__r_.__value_.__s + 23))
  {
    int64_t v7 = &v89;
LABEL_24:
    [NSString stringWithUTF8String:v7];
    uint64_t v8 = v68;
    long long v68 = (id)objc_claimAutoreleasedReturnValue();
    goto LABEL_26;
  }
  uint64_t v8 = [MEMORY[0x1E4F28CB8] defaultManager];
  [v8 createDirectoryAtPath:v68 withIntermediateDirectories:1 attributes:0 error:0];
LABEL_26:

  uint64_t v9 = (void (***)(uint64_t *__return_ptr, void))a1[13];
  v87[0] = MEMORY[0x1E4F143A8];
  v87[1] = 3321888768;
  v87[2] = ___ZN8Espresso22MPSGraphCompilerEngine8compiler7dump_irERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE_block_invoke;
  v87[3] = &__block_descriptor_48_ea8_32c41_ZTSNSt3__110shared_ptrIN8Espresso3netEEE_e10_v16__0r_v8l;
  v87[4] = v65;
  unint64_t v88 = v64;
  atomic_fetch_add_explicit(&v64->__shared_owners_, 1uLL, memory_order_relaxed);
  Espresso::abstract_context::compute_batch_sync(v9, v87);
  buf[0] = 1;
  uint64_t v83 = 0u;
  unint64_t v84 = 0u;
  uint8x8_t v85 = 0u;
  unint64_t v86 = 0u;
  *(_DWORD *)&buf[4] = 723714120;
  kdebug_trace();
  long long v10 = (void *)(v65 + 592);
  if (*(char *)(v65 + 615) < 0)
  {
    if (*(void *)(v65 + 600))
    {
LABEL_31:
      long long v10 = (void *)*v10;
      goto LABEL_32;
    }
  }
  else if (*(unsigned char *)(v65 + 615))
  {
    goto LABEL_32;
  }
  long long v10 = (void *)(v65 + 616);
  if (*(char *)(v65 + 639) < 0) {
    goto LABEL_31;
  }
LABEL_32:
  uint64_t v11 = [NSString stringWithCString:v10 encoding:1];
  std::string v67 = [v11 stringByDeletingLastPathComponent];

  char v62 = (const void **)a2;
  std::string v63 = (void *)a1[26];
  uint64_t v12 = v63 + 1;
  uint64_t v13 = (void *)*v63;
  if ((void *)*v63 == v63 + 1) {
    goto LABEL_60;
  }
  uint64_t v14 = 0;
  do
  {
    MIL::Util::FindBlobFilePaths();
    size_t size = v96.__pn_.__r_.__value_.__l.__size_;
    for (i = v96.__pn_.__r_.__value_.__r.__words[0]; i != size; i += 24)
    {
      if (*(char *)(i + 23) < 0)
      {
        uint64_t v18 = *(char **)i;
        uint64_t v17 = *(void *)(i + 8);
      }
      else
      {
        uint64_t v17 = *(unsigned __int8 *)(i + 23);
        uint64_t v18 = (char *)i;
      }
      if (v17 >= 16)
      {
        uint64_t v19 = &v18[v17];
        long long v20 = v18;
        do
        {
          char v21 = (char *)memchr(v20, 101, v17 - 15);
          if (!v21) {
            break;
          }
          uint64_t v22 = *(void *)v21 == 0x6F73736572707365 && *((void *)v21 + 1) == 0x737468676965772ELL;
          if (v22)
          {
            if (v21 != v19 && v21 - v18 != -1)
            {
              uint64_t v14 = 1;
              goto LABEL_52;
            }
            break;
          }
          long long v20 = v21 + 1;
          uint64_t v17 = v19 - (unsigned char *)v20;
        }
        while (v19 - (unsigned char *)v20 >= 16);
      }
    }
LABEL_52:
    v95.__r_.__value_.__r.__words[0] = (std::string::size_type)&v96;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v95);
    uint64_t v23 = (void *)v13[1];
    if (v23)
    {
      do
      {
        char v24 = v23;
        uint64_t v23 = (void *)*v23;
      }
      while (v23);
    }
    else
    {
      do
      {
        char v24 = (void *)v13[2];
        uint64_t v22 = *v24 == (void)v13;
        uint64_t v13 = v24;
      }
      while (!v22);
    }
    uint64_t v13 = v24;
  }
  while (v24 != v12);
  if ((v14 & 1) == 0)
  {
LABEL_60:
    uint64_t v26 = NSString;
    if (*((char *)v62 + 23) >= 0) {
      uint64_t v27 = *((unsigned __int8 *)v62 + 23);
    }
    else {
      uint64_t v27 = (size_t)v62[1];
    }
    std::string::basic_string[abi:ne180100]((uint64_t)&v96, v27 + 8);
    if ((v96.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v28 = &v96;
    }
    else {
      uint64_t v28 = (std::__fs::filesystem::path *)v96.__pn_.__r_.__value_.__r.__words[0];
    }
    if (v27)
    {
      if (*((char *)v62 + 23) >= 0) {
        uint64_t v29 = v62;
      }
      else {
        uint64_t v29 = *v62;
      }
      memmove(v28, v29, v27);
    }
    strcpy((char *)v28 + v27, "/weights");
    if ((v96.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v30 = &v96;
    }
    else {
      uint64_t v30 = (std::__fs::filesystem::path *)v96.__pn_.__r_.__value_.__r.__words[0];
    }
    uint64_t v31 = [v26 stringWithUTF8String:v30];
    if (SHIBYTE(v96.__pn_.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v96.__pn_.__r_.__value_.__l.__data_);
    }
    uint64_t v32 = [MEMORY[0x1E4F28CB8] defaultManager];
    [v32 createDirectoryAtPath:v31 withIntermediateDirectories:0 attributes:0 error:0];

    int v25 = 0;
  }
  else
  {
    int v25 = 1;
  }
  uint64_t v33 = (void *)*v63;
  if ((void *)*v63 != v12)
  {
    do
    {
      long long v34 = [NSString stringWithFormat:@"model.mil"];
      uint64_t v35 = [v68 stringByAppendingPathComponent:v34];
      uint64_t v36 = v35;
      if (v25)
      {
        uint64_t v37 = v33[5];
        std::string::basic_string[abi:ne180100]<0>(v80, (char *)[v35 UTF8String]);
        std::string::basic_string[abi:ne180100]<0>(__p, (char *)[v67 UTF8String]);
        memset(v77, 0, sizeof(v77));
        Espresso::MILUtil::SerializeProgram(v37, (uint64_t)v80, (uint64_t)__p, (uint64_t)v77, 0, 0);
        if (v79 < 0) {
          operator delete(__p[0]);
        }
        if (v81 < 0) {
          operator delete(v80[0]);
        }
      }
      else
      {
        int v38 = [NSString stringWithFormat:@"weights/weight.bin"];
        unint64_t v39 = [v68 stringByAppendingPathComponent:v38];
        uint64_t v40 = v33[5];
        std::string::basic_string[abi:ne180100]<0>(v75, (char *)[v36 UTF8String]);
        std::string::basic_string[abi:ne180100]<0>(v73, (char *)[v68 UTF8String]);
        v41 = v39;
        std::string::basic_string[abi:ne180100]<0>(v71, (char *)[v41 UTF8String]);
        Espresso::MILUtil::SerializeProgram(v40, (uint64_t)v75, (uint64_t)v73, (uint64_t)v71, 0, 0);
        if (v72 < 0) {
          operator delete(v71[0]);
        }
        if (v74 < 0) {
          operator delete(v73[0]);
        }
        if (v76 < 0) {
          operator delete(v75[0]);
        }
      }
      unint64_t v42 = (void *)v33[1];
      if (v42)
      {
        do
        {
          uint64_t v43 = v42;
          unint64_t v42 = (void *)*v42;
        }
        while (v42);
      }
      else
      {
        do
        {
          uint64_t v43 = (void *)v33[2];
          uint64_t v22 = *v43 == (void)v33;
          uint64_t v33 = v43;
        }
        while (!v22);
      }
      uint64_t v33 = v43;
    }
    while (v43 != v12);
  }
  if (v25)
  {
    char v44 = *(void *)(v65 + 576);
    if (v44) {
      int v45 = (Espresso *)(*(void *(**)(void **__return_ptr))(*(void *)v44 + 40))(v69);
    }
    else {
      int v45 = (Espresso *)std::string::basic_string[abi:ne180100]<0>(v69, "");
    }
    if (v70 < 0)
    {
      if (v69[1])
      {
        unint64_t v47 = (void **)v69[0];
        goto LABEL_105;
      }
    }
    else if (v70)
    {
      unint64_t v47 = v69;
LABEL_105:
      int v48 = [NSString stringWithUTF8String:v47];
      uint64_t v49 = v68;
      uint64_t v50 = v67;
      int v51 = v48;
      v93.__pn_.__r_.__value_.__r.__words[0] = [v51 UTF8String];
      std::__fs::filesystem::path::path[abi:ne180100]<char const*,void>(&v95, (std::string **)&v93);
      uint64_t v52 = v50;
      v97.__r_.__value_.__r.__words[0] = [v52 UTF8String];
      std::__fs::filesystem::path::path[abi:ne180100]<char const*,void>(&__to.__pn_, (std::string **)&v97);
      std::__fs::filesystem::relative[abi:ne180100]((const std::__fs::filesystem::path *)&v95, &__to, &v96);
      if (SHIBYTE(__to.__pn_.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__to.__pn_.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v95.__r_.__value_.__l.__data_);
      }
      uint64_t v53 = v49;
      __to.__pn_.__r_.__value_.__r.__words[0] = [v53 UTF8String];
      int v54 = std::__fs::filesystem::path::path[abi:ne180100]<char const*,void>(&v95, (std::string **)&__to);
      std::__fs::filesystem::operator/[abi:ne180100](&v96, (uint64_t)v54, &__to);
      std::__fs::filesystem::path::parent_path[abi:ne180100]((uint64_t)&v93, &__to);
      std::__fs::filesystem::__create_directory(&v93, 0);
      uint64_t v55 = v51;
      int v92 = (std::string *)[v55 UTF8String];
      char v56 = (const std::__fs::filesystem::path *)std::__fs::filesystem::path::path[abi:ne180100]<char const*,void>(&v97, &v92);
      std::__fs::filesystem::__copy(v56, &__to, (std::__fs::filesystem::copy_options)0, 0);
      if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v97.__r_.__value_.__l.__data_);
      }
      std::string v59 = Espresso::espresso_os_log_subsystem(v57, v58);
      if (os_log_type_enabled(v59, OS_LOG_TYPE_DEBUG))
      {
        p_to = &__to;
        if ((__to.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          p_to = (std::__fs::filesystem::path *)__to.__pn_.__r_.__value_.__r.__words[0];
        }
        LODWORD(v97.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)v97.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_to;
        _os_log_debug_impl(&dword_1920CB000, v59, OS_LOG_TYPE_DEBUG, "[MPSGraphCompilerCompiler::dump_ir] weights dumped to: %s", (uint8_t *)&v97, 0xCu);
      }

      if (SHIBYTE(v93.__pn_.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v93.__pn_.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__to.__pn_.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__to.__pn_.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v95.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v96.__pn_.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v96.__pn_.__r_.__value_.__l.__data_);
      }

LABEL_123:
      if (v70 < 0) {
        operator delete(v69[0]);
      }
      goto LABEL_125;
    }
    uint64_t v55 = Espresso::espresso_os_log_subsystem(v45, v46);
    if (os_log_type_enabled(v55, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(v96.__pn_.__r_.__value_.__l.__data_) = 0;
      _os_log_debug_impl(&dword_1920CB000, v55, OS_LOG_TYPE_DEBUG, "[MPSGraphCompilerCompiler::dump_ir] Failed to find weights file, or network does not have weights.", (uint8_t *)&v96, 2u);
    }
    goto LABEL_123;
  }
LABEL_125:

  Espresso_scoped_signpost::~Espresso_scoped_signpost((Espresso_scoped_signpost *)buf);
  if (v88) {
    nitro::nitro_function::nitro_function(v88);
  }
  if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v89.__r_.__value_.__l.__data_);
  }

  if (v91 < 0) {
    operator delete(v90);
  }
  nitro::nitro_function::nitro_function(v64);
  if (a1) {
    std::unique_ptr<std::map<int,std::unique_ptr<MIL::IRProgram>>>::reset[abi:ne180100](a1 + 26, 0);
  }
}

void sub_192AE4B44(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, _Unwind_Exception *exception_objecta, uint64_t a15, void *a16, void *a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  if (*(char *)(v73 - 105) < 0) {
    operator delete(*(void **)(v73 - 128));
  }
  if (a2 == 1)
  {
    unint64_t v75 = (Espresso *)__cxa_begin_catch(a1);
    float v77 = Espresso::espresso_os_log_subsystem(v75, v76);
    if (os_log_type_enabled(v77, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v78 = (*(uint64_t (**)(Espresso *))(*(void *)v75 + 16))(v75);
      *(_DWORD *)(v73 - 128) = 136315138;
      *(void *)(v69 + 4) = v78;
      _os_log_debug_impl(&dword_1920CB000, v77, OS_LOG_TYPE_DEBUG, "[MPSGraphCompilerCompiler::dump_ir] failed to dump weights file - maybe it already exists? Error: %s", (uint8_t *)(v73 - 128), 0xCu);
    }

    __cxa_end_catch();
    JUMPOUT(0x192AE4948);
  }
  if (*(char *)(v73 - 209) < 0) {
    operator delete(*(void **)(v73 - 232));
  }
  if (*(char *)(v73 - 185) < 0) {
    operator delete(*(void **)(v73 - 208));
  }
  if (*(char *)(v73 - 161) < 0) {
    operator delete(*(void **)(v73 - 184));
  }
  if (*(char *)(v73 - 137) < 0) {
    operator delete(*(void **)(v73 - 160));
  }

  if (a23 < 0) {
    operator delete(__p);
  }

  Espresso_scoped_signpost::~Espresso_scoped_signpost((Espresso_scoped_signpost *)&a42);
  if (a57) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)a57);
  }
  if (a63 < 0) {
    operator delete(a58);
  }

  if (a69 < 0) {
    operator delete(a64);
  }
  if (a13) {
    nitro::nitro_function::nitro_function(a13);
  }
  if (a15) {
    std::unique_ptr<std::map<int,std::unique_ptr<MIL::IRProgram>>>::reset[abi:ne180100]((uint64_t *)(a15 + 208), 0);
  }
  _Unwind_Resume(a1);
}

void sub_192AE4BB0()
{
}

void sub_192AE4BCC(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void sub_192AE4C04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (*(char *)(v26 - 185) < 0) {
    operator delete(*(void **)(v26 - 208));
  }
  if (*(char *)(v26 - 161) < 0) {
    JUMPOUT(0x192AE4D08);
  }

  if (a23 < 0) {
    JUMPOUT(0x192AE4D5CLL);
  }
  JUMPOUT(0x192AE4E74);
}

void sub_192AE4C1C()
{
}

void sub_192AE4C24()
{
  JUMPOUT(0x192AE4E90);
}

void sub_192AE4C30()
{
}

void sub_192AE4C3C()
{
}

void sub_192AE4CDC()
{
  if (*(char *)(v0 - 209) < 0) {
    operator delete(*(void **)(v0 - 232));
  }
  JUMPOUT(0x192AE4BD8);
}

void sub_192AE4D34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, uint64_t a15, void *a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,std::__shared_weak_count *a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60,void *a61,uint64_t a62,int a63)
{
  Espresso_scoped_signpost::~Espresso_scoped_signpost((Espresso_scoped_signpost *)&a39);
  if (a54) {
    nitro::nitro_function::nitro_function(a54);
  }
  if (a60 < 0) {
    operator delete(a55);
  }

  if (a66 < 0) {
    operator delete(a61);
  }
  if (a13) {
    nitro::nitro_function::nitro_function(a13);
  }
  if (a15) {
    std::unique_ptr<std::map<int,std::unique_ptr<MIL::IRProgram>>>::reset[abi:ne180100]((uint64_t *)(a15 + 208), 0);
  }
  _Unwind_Resume(a1);
}

void sub_192AE4D4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60,void *a61,uint64_t a62,int a63)
{
  if (*(char *)(v66 - 137) < 0) {
    JUMPOUT(0x192AE4D5CLL);
  }

  Espresso_scoped_signpost::~Espresso_scoped_signpost((Espresso_scoped_signpost *)&a39);
  if (a54) {
    nitro::nitro_function::nitro_function();
  }
  if (a60 < 0) {
    operator delete(a55);
  }

  if (a66 < 0) {
    operator delete(a61);
  }
  if (a13) {
    nitro::nitro_function::nitro_function();
  }
  if (a15) {
    std::unique_ptr<std::map<int,std::unique_ptr<MIL::IRProgram>>>::reset[abi:ne180100](a15 + 208, 0);
  }
  _Unwind_Resume(a1);
}

void sub_192AE4D68()
{
  JUMPOUT(0x192AE4E7CLL);
}

void sub_192AE4D74()
{
}

void sub_192AE4D7C()
{
}

void sub_192AE4D88()
{
}

void sub_192AE4D90()
{
}

void sub_192AE4D98()
{
}

void sub_192AE4DA4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  __cxa_free_exception(v14);
  JUMPOUT(0x192AE4EB8);
}

void sub_192AE4DB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, uint64_t a15, void *a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  Espresso_scoped_signpost::~Espresso_scoped_signpost((Espresso_scoped_signpost *)&a54);
  if (a69) {
    nitro::nitro_function::nitro_function(a69);
  }
  if (a72 < 0) {
    operator delete(a70);
  }

  if (a74 < 0) {
    operator delete(a73);
  }
  if (a13) {
    nitro::nitro_function::nitro_function(a13);
  }
  if (a15) {
    std::unique_ptr<std::map<int,std::unique_ptr<MIL::IRProgram>>>::reset[abi:ne180100]((uint64_t *)(a15 + 208), 0);
  }
  _Unwind_Resume(a1);
}

void ___ZN8Espresso22MPSGraphCompilerEngine8compiler7dump_irERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE_block_invoke(uint64_t a1, uint64_t a2)
{
}

uint64_t *std::unique_ptr<std::map<int,std::unique_ptr<MIL::IRProgram>>>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *__n128 result = a2;
  if (v2)
  {
    std::__tree<std::__value_type<int,std::unique_ptr<MIL::IRProgram>>,std::__map_value_compare<int,std::__value_type<int,std::unique_ptr<MIL::IRProgram>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::unique_ptr<MIL::IRProgram>>>>::destroy(*(void **)(v2 + 8));
    JUMPOUT(0x192FF16B0);
  }
  return result;
}

void std::__tree<std::__value_type<int,std::unique_ptr<MIL::IRProgram>>,std::__map_value_compare<int,std::__value_type<int,std::unique_ptr<MIL::IRProgram>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::unique_ptr<MIL::IRProgram>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<int,std::unique_ptr<MIL::IRProgram>>,std::__map_value_compare<int,std::__value_type<int,std::unique_ptr<MIL::IRProgram>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::unique_ptr<MIL::IRProgram>>>>::destroy(*a1);
    std::__tree<std::__value_type<int,std::unique_ptr<MIL::IRProgram>>,std::__map_value_compare<int,std::__value_type<int,std::unique_ptr<MIL::IRProgram>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::unique_ptr<MIL::IRProgram>>>>::destroy(a1[1]);
    uint64_t v2 = a1[5];
    a1[5] = 0;
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
    operator delete(a1);
  }
}

void Espresso::MPSGraphCompilerEngine::compiler::build(uint64_t **a1, uint64_t a2)
{
  v54[5] = *(void **)MEMORY[0x1E4F143B8];
  if (a1)
  {
    Espresso::MILUtil::CreateMILContext((Espresso::MILUtil *)v53);
    std::shared_ptr<MIL::MILContext>::operator=[abi:ne180100]<MIL::MILContext,std::default_delete<MIL::MILContext>,void>((uint64_t)(a1 + 27), v53);
    int v4 = v53[0];
    v53[0] = 0;
    if (v4) {
      (*(void (**)(long long *))(*(void *)v4 + 8))(v4);
    }
  }
  Espresso::net_compiler_segment_based::build(a1, a2);
  uint64_t v5 = (std::__shared_weak_count *)a1[2];
  uint64_t v40 = a1;
  if (!v5 || (v6 = std::__shared_weak_count::lock(v5)) == 0 || (v42 = v6, (uint64_t v36 = a1[1]) == 0))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Inconsistent state");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  memset(v47, 0, sizeof(v47));
  int v48 = 1065353216;
  int64_t v7 = a1[4];
  uint64_t v37 = a1[5];
  if (v7 != v37)
  {
    uint64_t v8 = a1 + 23;
    do
    {
      std::unordered_set<std::string>::unordered_set((uint64_t)v53, (uint64_t)(v7 + 2));
      unint64_t v39 = v7;
      std::unordered_set<std::string>::unordered_set((uint64_t)v54, (uint64_t)(v7 + 7));
      char v9 = 0;
      uint64_t v10 = 0;
      do
      {
        char v41 = v9;
        for (i = v53[5 * v10 + 2]; i; i = *(long long **)i)
        {
          v49[0] = i + 1;
          uint64_t v12 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v36 + 17), (unsigned __int8 *)i + 16, v49);
          uint64_t v13 = (const void *)*((void *)v12 + 5);
          if (!v13
          {
            long long v34 = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
            Espresso::invalid_state_error::invalid_state_error(v34);
          }
          uint64_t v15 = (uint64_t)v14;
          uint64_t v16 = (std::__shared_weak_count *)*((void *)v12 + 6);
          if (v16) {
            atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          int v17 = *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::compute_path>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::compute_path>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::compute_path>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8, (void *)i + 2, (uint64_t)(i + 1))+ 14);
          uint64_t v18 = (std::__shared_weak_count *)operator new(0x98uLL);
          v18->__shared_owners_ = 0;
          v18->__shared_weak_owners_ = 0;
          v18->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3875E8;
          *(_OWORD *)&v18[2].__shared_weak_owners_ = 0u;
          *(_OWORD *)&v18[3].__shared_owners_ = 0u;
          *(_OWORD *)&v18[4].__shared_weak_owners_ = 0u;
          *(_OWORD *)&v18[5].__shared_owners_ = 0u;
          v18[5].__shared_weak_owners_ = 0;
          v18[6].__vftable = 0;
          *(_OWORD *)&v18[1].__shared_owners_ = 0u;
          v18[2].std::__shared_count = 0u;
          v18[4].std::__shared_count = 0u;
          LODWORD(v18[2].__vftable) = 1065353216;
          v18[2].__shared_owners_ = 0x1FFFFFFFFLL;
          v18[2].__shared_weak_owners_ = 0;
          v18[3].__vftable = 0;
          LOBYTE(v18[3].__shared_weak_owners_) = 0;
          v18[3].__shared_owners_ = 0;
          v18[5].__vftable = 0;
          v18[5].__shared_owners_ = 0;
          LOBYTE(v18[6].__vftable) = 0;
          v18[4].__vftable = 0;
          v18[4].__shared_owners_ = 0;
          LOBYTE(v18[4].__shared_weak_owners_) = 0;
          v18[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3574C8;
          LOBYTE(v18[1].__shared_owners_) = 1;
          HIDWORD(v18[1].__shared_owners_) = v17;
          Espresso::abstract_blob_container::shape((char *)v49, v15);
          int v45 = v18 + 1;
          int v46 = v18;
          atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
          (*(void (**)(uint64_t, long long **, std::__shared_weak_count **))(*(void *)v15 + 16))(v15, v49, &v45);
          if (v46) {
            nitro::nitro_function::nitro_function(v46);
          }
          std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v47, (uint64_t)(i + 1), (uint64_t)(i + 1));
          if (__p)
          {
            uint64_t v52 = __p;
            operator delete(__p);
          }
          nitro::nitro_function::nitro_function(v18);
          if (v16) {
            nitro::nitro_function::nitro_function(v16);
          }
        }
        char v9 = 1;
        uint64_t v10 = 1;
      }
      while ((v41 & 1) == 0);
      for (uint64_t j = 5; j != -5; j -= 5)
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v53[j]);
      int64_t v7 = v39 + 15;
    }
    while (v39 + 15 != v37);
  }
  memset(v49, 0, sizeof(v49));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v49, v36[80], v36[81], 0xAAAAAAAAAAAAAAABLL * ((v36[81] - v36[80]) >> 3));
  v50[0] = 0;
  v50[1] = 0;
  std::string __p = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v50, v36[83], v36[84], 0xAAAAAAAAAAAAAAABLL * ((v36[84] - v36[83]) >> 3));
  char v20 = 0;
  uint64_t v21 = 0;
  do
  {
    char v38 = v20;
    uint64_t v22 = &v49[3 * v21];
    char v24 = *v22;
    uint64_t v23 = v22[1];
    while (v24 != v23)
    {
      v53[0] = v24;
      int v25 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v36 + 17), (unsigned __int8 *)v24, v53);
      uint64_t v26 = (const void *)*((void *)v25 + 5);
      if (v26)
      {
        if (v27)
        {
          uint64_t v28 = (uint64_t)v27;
          uint64_t v29 = (std::__shared_weak_count *)*((void *)v25 + 6);
          if (v29) {
            atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v47, (uint64_t)v24))
          {
            if (!v29) {
              goto LABEL_36;
            }
LABEL_35:
            nitro::nitro_function::nitro_function(v29);
            goto LABEL_36;
          }
          int v30 = *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::compute_path>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::compute_path>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::compute_path>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v40 + 23, v24, (uint64_t)v24)+ 14);
          uint64_t v31 = (std::__shared_weak_count *)operator new(0x98uLL);
          v31->__shared_owners_ = 0;
          v31->__shared_weak_owners_ = 0;
          v31->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3875E8;
          *(_OWORD *)&v31[2].__shared_weak_owners_ = 0u;
          *(_OWORD *)&v31[3].__shared_owners_ = 0u;
          *(_OWORD *)&v31[4].__shared_weak_owners_ = 0u;
          *(_OWORD *)&v31[5].__shared_owners_ = 0u;
          v31[5].__shared_weak_owners_ = 0;
          v31[6].__vftable = 0;
          *(_OWORD *)&v31[1].__shared_owners_ = 0u;
          v31[2].std::__shared_count = 0u;
          v31[4].std::__shared_count = 0u;
          LODWORD(v31[2].__vftable) = 1065353216;
          v31[2].__shared_owners_ = 0x1FFFFFFFFLL;
          v31[2].__shared_weak_owners_ = 0;
          v31[3].__vftable = 0;
          LOBYTE(v31[3].__shared_weak_owners_) = 0;
          v31[3].__shared_owners_ = 0;
          v31[5].__vftable = 0;
          v31[5].__shared_owners_ = 0;
          LOBYTE(v31[6].__vftable) = 0;
          v31[4].__vftable = 0;
          v31[4].__shared_owners_ = 0;
          LOBYTE(v31[4].__shared_weak_owners_) = 0;
          v31[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3574C8;
          LOBYTE(v31[1].__shared_owners_) = 1;
          HIDWORD(v31[1].__shared_owners_) = v30;
          Espresso::abstract_blob_container::shape((char *)v53, v28);
          uint64_t v43 = v31 + 1;
          char v44 = v31;
          atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
          (*(void (**)(uint64_t, long long **, std::__shared_weak_count **))(*(void *)v28 + 16))(v28, v53, &v43);
          if (v44) {
            nitro::nitro_function::nitro_function(v44);
          }
          if (v54[0])
          {
            v54[1] = v54[0];
            operator delete(v54[0]);
          }
          nitro::nitro_function::nitro_function(v31);
          if (v29) {
            goto LABEL_35;
          }
        }
      }
LABEL_36:
      char v24 = (long long *)((char *)v24 + 24);
    }
    char v20 = 1;
    uint64_t v21 = 1;
  }
  while ((v38 & 1) == 0);
  for (uint64_t k = 3; k != -3; k -= 3)
  {
    v53[0] = (long long *)&v49[k];
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v53);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v47);
  nitro::nitro_function::nitro_function(v42);
  if (v40)
  {
    uint64_t v33 = (std::__shared_weak_count *)v40[28];
    v40[27] = 0;
    v40[28] = 0;
    if (v33) {
      nitro::nitro_function::nitro_function(v33);
    }
  }
}

void sub_192AE5688(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33)
{
  uint64_t v35 = *(void *)(v33 - 192);
  *(void *)(v33 - 192) = 0;
  if (v35) {
    (*(void (**)(uint64_t))(*(void *)v35 + 8))(v35);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSGraphCompilerEngine::blob_container_options>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::MPSGraphCompilerEngine::blob_container_options>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3875E8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphCompilerEngine::blob_container_options>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3875E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::MPSGraphCompilerEngine::compiler::~compiler(Espresso::MPSGraphCompilerEngine::compiler *this)
{
  Espresso::MPSGraphCompilerEngine::compiler::~compiler(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  void *v4;
  std::__shared_weak_count *v5;
  void **v6;

  *(void *)this = &unk_1EE357650;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 28);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  std::unique_ptr<std::map<int,std::unique_ptr<MIL::IRProgram>>>::reset[abi:ne180100]((uint64_t *)this + 26, 0);
  std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::destroy(*((char **)this + 24));
  std::__tree<std::__value_type<int,std::map<std::string,BOOL>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,BOOL>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,BOOL>>>>::destroy(*((void **)this + 21));
  std::__tree<std::__value_type<unsigned long,std::vector<std::string>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::vector<std::string>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::vector<std::string>>>>::destroy(*((char **)this + 18));

  int v3 = (std::__shared_weak_count *)*((void *)this + 14);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  *(void *)this = &unk_1EE35F3A0;
  int v4 = (void *)*((void *)this + 10);
  if (v4)
  {
    *((void *)this + 11) = v4;
    operator delete(v4);
  }
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)this + 56, *((void **)this + 8));
  int v6 = (void **)((char *)this + 32);
  std::vector<Espresso::net_compiler_segment_based::segment_t>::__destroy_vector::operator()[abi:ne180100](&v6);
  *(void *)this = &unk_1EE32A8C8;
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
}

void Espresso::EspressoCreateMetalContext(void *a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  Espresso::create_metal_context((uint64_t)v5, a1, a2);
  int v4 = (std::__shared_weak_count *)v5[1];
  *a3 = v5[0];
  a3[1] = v4;
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    nitro::nitro_function::nitro_function(v4);
  }
}

void Espresso::abstract_batch_metal::~abstract_batch_metal(Espresso::abstract_batch_metal *this)
{
  Espresso::abstract_batch_metal::~abstract_batch_metal(this);

  JUMPOUT(0x192FF16B0);
}

{
  void **v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EE350748;
  uint64_t v2 = (void **)((char *)this + 160);
  if (*((void *)this + 20))
  {
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__clear[abi:ne180100]((uint64_t *)this + 20);
    operator delete(*v2);
  }

  *(void *)this = &unk_1EE350548;
  int v3 = (std::__shared_weak_count *)*((void *)this + 16);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }

  Espresso::abstract_batch::~abstract_batch(this);
}

void Espresso::loopkit_kernel_cpu::on_resized(uint64_t a1)
{
  *(void *)(a1 + 520) = *(void *)(a1 + 512);
}

void std::__hash_table<std::__hash_value_type<int,Espresso::lk_buffer_generator>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Espresso::lk_buffer_generator>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Espresso::lk_buffer_generator>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Espresso::lk_buffer_generator>>>::clear(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<int,Espresso::lk_buffer_generator>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Espresso::lk_buffer_generator>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Espresso::lk_buffer_generator>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Espresso::lk_buffer_generator>>>::__deallocate_node(*(void **)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

void std::__hash_table<std::__hash_value_type<int,Espresso::lk_buffer_generator>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Espresso::lk_buffer_generator>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Espresso::lk_buffer_generator>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Espresso::lk_buffer_generator>>>::__deallocate_node(void *__p)
{
  if (__p)
  {
    uint64_t v1 = __p;
    do
    {
      uint64_t v2 = (void *)*v1;
      int v3 = (void *)v1[3];
      if (v3)
      {
        v1[4] = v3;
        operator delete(v3);
      }
      operator delete(v1);
      uint64_t v1 = v2;
    }
    while (v2);
  }
}

void Espresso::generic_loopkit_kernel::top_shapes_for_bottom_shapes(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5 = a3;
  if (*(void *)(a1 + 376) != *(void *)(a1 + 384))
  {
    int v6 = (uint64_t *)(a1 + 376);
    Espresso::generic_loopkit_kernel::deserialize_shapes(v6, a3);
    return;
  }
  if (!*(void *)(a1 + 448) || !*(void *)(a1 + 456))
  {
    uint64_t v8 = *(void ***)(a1 + 408);
    if (!v8) {
      Espresso::throw_exception_selector<Espresso::invalid_state_error>("dylib not loaded");
    }
    char v9 = *v8;
    Espresso::func_argv_name((uint64_t)__p, (const void **)(a1 + 280), 1);
    if (v154[7] >= 0) {
      uint64_t v10 = __p;
    }
    else {
      uint64_t v10 = (void **)__p[0];
    }
    *(void *)(a1 + 448) = dlsym(v9, (const char *)v10);
    if ((v154[7] & 0x80000000) != 0) {
      operator delete(__p[0]);
    }
    uint64_t v11 = **(void ***)(a1 + 408);
    Espresso::func_argv_name((uint64_t)__p, (const void **)(a1 + 280), 2);
    if (v154[7] >= 0) {
      uint64_t v12 = __p;
    }
    else {
      uint64_t v12 = (void **)__p[0];
    }
    *(void *)(a1 + 456) = dlsym(v11, (const char *)v12);
    if ((v154[7] & 0x80000000) != 0) {
      operator delete(__p[0]);
    }
    if (!*(void *)(a1 + 448) || !*(void *)(a1 + 456)) {
      Espresso::throw_exception_selector<Espresso::invalid_state_error>("cannot load shape info");
    }
  }
  uint64_t v147 = a1;
  std::vector<int>::size_type v13 = *(int *)(a1 + 400);
  uint64_t v15 = *a2;
  uint64_t v14 = a2[1];
  long long v159 = 0u;
  long long v160 = 0u;
  float v161 = 1.0;
  memset(v158, 0, 24);
  uint64_t v17 = v14 - v15;
  BOOL v16 = v17 == 0;
  unint64_t v18 = v17 >> 6;
  v145 = v5;
  unint64_t v143 = v18;
  std::vector<int>::size_type v144 = v13;
  if (v16)
  {
    uint64_t v37 = 0;
    goto LABEL_125;
  }
  uint64_t v19 = 0;
  if (v18 <= 1) {
    uint64_t v20 = 1;
  }
  else {
    uint64_t v20 = v18;
  }
  do
  {
    Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v164, (const Espresso::layer_shape *)(*a2 + (v19 << 6)), 0);
    Espresso::layer_nd_shape::shape_vector((std::vector<int> *)__p, (uint64_t)v164);
    uint64_t v21 = *(void *)(v147 + 304);
    unint64_t v22 = *(int *)(v21 + 4 * v19);
    unint64_t v23 = *((void *)&v159 + 1);
    if (*((void *)&v159 + 1))
    {
      uint8x8_t v24 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v159 + 8));
      v24.i16[0] = vaddlv_u8(v24);
      if (v24.u32[0] > 1uLL)
      {
        unint64_t v3 = *(int *)(v21 + 4 * v19);
        if (*((void *)&v159 + 1) <= v22) {
          unint64_t v3 = v22 % *((void *)&v159 + 1);
        }
      }
      else
      {
        unint64_t v3 = (*((void *)&v159 + 1) - 1) & v22;
      }
      int v25 = *(uint64_t ***)(v159 + 8 * v3);
      if (v25)
      {
        for (uint64_t i = *v25; i; uint64_t i = (uint64_t *)*i)
        {
          unint64_t v27 = i[1];
          if (v27 == v22)
          {
            if (*((_DWORD *)i + 4) == v22) {
              goto LABEL_62;
            }
          }
          else
          {
            if (v24.u32[0] > 1uLL)
            {
              if (v27 >= *((void *)&v159 + 1)) {
                v27 %= *((void *)&v159 + 1);
              }
            }
            else
            {
              v27 &= *((void *)&v159 + 1) - 1;
            }
            if (v27 != v3) {
              break;
            }
          }
        }
      }
    }
    uint64_t v28 = (char *)operator new(0x30uLL);
    *(void *)uint64_t v28 = 0;
    *((void *)v28 + 1) = v22;
    *((_DWORD *)v28 + 4) = *(_DWORD *)(v21 + 4 * v19);
    *(_OWORD *)(v28 + 24) = *(_OWORD *)__p;
    *((void *)v28 + 5) = *(void *)v154;
    __p[0] = 0;
    __p[1] = 0;
    *(void *)v154 = 0;
    float v29 = (float)(unint64_t)(*((void *)&v160 + 1) + 1);
    if (!v23 || (float)(v161 * (float)v23) < v29)
    {
      BOOL v30 = (v23 & (v23 - 1)) != 0;
      if (v23 < 3) {
        BOOL v30 = 1;
      }
      unint64_t v31 = v30 | (2 * v23);
      unint64_t v32 = vcvtps_u32_f32(v29 / v161);
      if (v31 <= v32) {
        size_t v33 = v32;
      }
      else {
        size_t v33 = v31;
      }
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__rehash<true>((uint64_t)&v159, v33);
      unint64_t v23 = *((void *)&v159 + 1);
      if ((*((void *)&v159 + 1) & (*((void *)&v159 + 1) - 1)) != 0)
      {
        if (*((void *)&v159 + 1) <= v22) {
          unint64_t v3 = v22 % *((void *)&v159 + 1);
        }
        else {
          unint64_t v3 = v22;
        }
      }
      else
      {
        unint64_t v3 = (*((void *)&v159 + 1) - 1) & v22;
      }
    }
    uint64_t v34 = v159;
    uint64_t v35 = *(void **)(v159 + 8 * v3);
    if (v35)
    {
      *(void *)uint64_t v28 = *v35;
LABEL_60:
      *uint64_t v35 = v28;
      goto LABEL_61;
    }
    *(void *)uint64_t v28 = v160;
    *(void *)&long long v160 = v28;
    *(void *)(v34 + 8 * v3) = &v160;
    if (*(void *)v28)
    {
      unint64_t v36 = *(void *)(*(void *)v28 + 8);
      if ((v23 & (v23 - 1)) != 0)
      {
        if (v36 >= v23) {
          v36 %= v23;
        }
      }
      else
      {
        v36 &= v23 - 1;
      }
      uint64_t v35 = (void *)(v159 + 8 * v36);
      goto LABEL_60;
    }
LABEL_61:
    ++*((void *)&v160 + 1);
LABEL_62:
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    ++v19;
  }
  while (v19 != v20);
  uint64_t v37 = *((void *)&v160 + 1);
  if (*((void *)&v160 + 1))
  {
    unint64_t v38 = 0;
    unint64_t v39 = &v164[4];
    do
    {
      unint64_t v40 = *((void *)&v159 + 1);
      if (*((void *)&v159 + 1))
      {
        uint8x8_t v41 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v159 + 8));
        v41.i16[0] = vaddlv_u8(v41);
        if (v41.u32[0] > 1uLL)
        {
          unint64_t v22 = (int)v38;
          if (*((void *)&v159 + 1) <= (unint64_t)(int)v38) {
            unint64_t v22 = (unint64_t)(int)v38 % *((void *)&v159 + 1);
          }
        }
        else
        {
          unint64_t v22 = (*((void *)&v159 + 1) - 1) & (int)v38;
        }
        unint64_t v42 = *(void ***)(v159 + 8 * v22);
        if (v42)
        {
          uint64_t v43 = *v42;
          if (*v42)
          {
            do
            {
              unint64_t v44 = v43[1];
              if (v44 == (int)v38)
              {
                if (*((_DWORD *)v43 + 4) == v38) {
                  goto LABEL_106;
                }
              }
              else
              {
                if (v41.u32[0] > 1uLL)
                {
                  if (v44 >= *((void *)&v159 + 1)) {
                    v44 %= *((void *)&v159 + 1);
                  }
                }
                else
                {
                  v44 &= *((void *)&v159 + 1) - 1;
                }
                if (v44 != v22) {
                  break;
                }
              }
              uint64_t v43 = (void *)*v43;
            }
            while (v43);
          }
        }
      }
      uint64_t v43 = operator new(0x30uLL);
      *uint64_t v43 = 0;
      v43[1] = (int)v38;
      *((_DWORD *)v43 + 4) = v38;
      v43[4] = 0;
      v43[5] = 0;
      v43[3] = 0;
      float v45 = (float)(unint64_t)(v37 + 1);
      if (!v40 || (float)(v161 * (float)v40) < v45)
      {
        BOOL v46 = v40 < 3 || (v40 & (v40 - 1)) != 0;
        unint64_t v47 = v46 | (2 * v40);
        unint64_t v48 = vcvtps_u32_f32(v45 / v161);
        if (v47 <= v48) {
          size_t v49 = v48;
        }
        else {
          size_t v49 = v47;
        }
        std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__rehash<true>((uint64_t)&v159, v49);
        unint64_t v40 = *((void *)&v159 + 1);
        if ((*((void *)&v159 + 1) & (*((void *)&v159 + 1) - 1)) != 0)
        {
          if (*((void *)&v159 + 1) <= (unint64_t)(int)v38) {
            unint64_t v22 = (unint64_t)(int)v38 % *((void *)&v159 + 1);
          }
          else {
            unint64_t v22 = (int)v38;
          }
        }
        else
        {
          unint64_t v22 = (*((void *)&v159 + 1) - 1) & (int)v38;
        }
      }
      uint64_t v50 = v159;
      int v51 = *(void **)(v159 + 8 * v22);
      if (v51)
      {
        *uint64_t v43 = *v51;
      }
      else
      {
        *uint64_t v43 = v160;
        *(void *)&long long v160 = v43;
        *(void *)(v50 + 8 * v22) = &v160;
        if (!*v43) {
          goto LABEL_105;
        }
        unint64_t v52 = *(void *)(*v43 + 8);
        if ((v40 & (v40 - 1)) != 0)
        {
          if (v52 >= v40) {
            v52 %= v40;
          }
        }
        else
        {
          v52 &= v40 - 1;
        }
        int v51 = (void *)(v159 + 8 * v52);
      }
      *int v51 = v43;
LABEL_105:
      ++*((void *)&v160 + 1);
LABEL_106:
      uint64_t v53 = v43[3];
      unint64_t v54 = (unint64_t)(v43[4] - v53) >> 2;
      *unint64_t v39 = 0;
      v39[1] = 0;
      *(_DWORD *)unint64_t v164 = v54;
      *(_DWORD *)&v164[20] = 1;
      Espresso::lk_buffer_generator::lk_buffer_generator((uint64_t)__p, (uint64_t)v164, v53, 3u);
      uint64_t v55 = (uint64_t *)*((void *)&v158[0] + 1);
      if (*((void *)&v158[0] + 1) >= *(void *)&v158[1])
      {
        std::string v60 = v39;
        unint64_t v61 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)&v158[0] + 1) - *(void *)&v158[0]) >> 4);
        unint64_t v62 = v61 + 1;
        if (v61 + 1 > 0x333333333333333) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        if (0x999999999999999ALL * ((uint64_t)(*(void *)&v158[1] - *(void *)&v158[0]) >> 4) > v62) {
          unint64_t v62 = 0x999999999999999ALL * ((uint64_t)(*(void *)&v158[1] - *(void *)&v158[0]) >> 4);
        }
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)&v158[1] - *(void *)&v158[0]) >> 4) >= 0x199999999999999) {
          unint64_t v63 = 0x333333333333333;
        }
        else {
          unint64_t v63 = v62;
        }
        v165 = &v158[1];
        uint64_t v64 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::lk_buffer_generator>>(v63);
        std::string v65 = &v64[80 * v61];
        *(void *)unint64_t v164 = v64;
        *(void *)&v164[8] = v65;
        *(void *)&v164[16] = v65;
        *(void *)&v164[24] = &v64[80 * v66];
        *(void *)std::string v65 = 0;
        *((void *)v65 + 1) = 0;
        *((void *)v65 + 2) = 0;
        *(_OWORD *)std::string v65 = *(_OWORD *)__p;
        *((void *)v65 + 2) = *(void *)v154;
        __p[1] = 0;
        *(void *)v154 = 0;
        __p[0] = 0;
        uint64_t v67 = v155;
        int v68 = v156;
        uint64_t v69 = *(void *)v65;
        uint64_t v70 = (*((void *)v65 + 1) - *(void *)v65) >> 4;
        *((void *)v65 + 3) = 0;
        *((void *)v65 + 4) = 0;
        *((void *)v65 + 5) = v67;
        *((void *)v65 + 6) = 0;
        *((_DWORD *)v65 + 14) = v68;
        *((_DWORD *)v65 + 15) = v70;
        *((void *)v65 + 8) = v69;
        *((void *)v65 + 9) = 0;
        unint64_t v22 = *(void *)&v164[8];
        *(void *)&v164[16] += 80;
        uint64_t v71 = *((void *)&v158[0] + 1);
        uint64_t v72 = *(void *)&v158[0];
        *(void *)&long long v152 = *(void *)&v164[8];
        *((void *)&v152 + 1) = *(void *)&v164[8];
        long long v151 = v152;
        v162.__begin_ = (std::vector<int>::pointer)&v158[1];
        v162.__end_ = (std::vector<int>::pointer)&v151;
        v162.__end_cap_.__value_ = (int *)&v152;
        char v163 = 0;
        if (*((void *)&v158[0] + 1) != *(void *)&v158[0])
        {
          uint64_t v73 = *((void *)&v158[0] + 1);
          do
          {
            *(void *)(v22 - 80) = 0;
            *(void *)(v22 - 72) = 0;
            *(void *)(v22 - 64) = 0;
            unint64_t v75 = *(unsigned char **)(v73 - 80);
            int v74 = *(unsigned char **)(v73 - 72);
            v73 -= 80;
            int64_t v76 = v74 - v75;
            if (v74 == v75)
            {
              uint64_t v79 = 0;
              uint64_t v78 = 0;
            }
            else
            {
              std::vector<loopkit_rt_dimension_t>::__vallocate[abi:ne180100]((void *)(v22 - 80), v76 >> 4);
              float v77 = *(char **)(v22 - 72);
              memmove(v77, v75, v76);
              uint64_t v78 = &v77[16 * (v76 >> 4)];
              *(void *)(v22 - 72) = v78;
              uint64_t v79 = *(void *)(v22 - 80);
            }
            uint64_t v80 = *(void *)(v71 - 40);
            int v81 = *(_DWORD *)(v71 - 24);
            *(void *)(v22 - 56) = 0;
            *(void *)(v22 - 48) = 0;
            *(void *)(v22 - 40) = v80;
            *(void *)(v22 - 32) = 0;
            *(_DWORD *)(v22 - 24) = v81;
            *(_DWORD *)(v22 - 20) = (unint64_t)&v78[-v79] >> 4;
            *(void *)(v22 - 16) = v79;
            *(void *)(v22 - 8) = 0;
            unint64_t v22 = *((void *)&v152 + 1) - 80;
            *((void *)&v152 + 1) -= 80;
            uint64_t v71 = v73;
          }
          while (v73 != v72);
        }
        char v163 = 1;
        std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<Espresso::lk_buffer_generator>,std::reverse_iterator<Espresso::lk_buffer_generator*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&v162);
        uint64_t v82 = *(void *)&v158[1];
        uint64_t v146 = *(void *)&v164[16];
        long long v83 = *(_OWORD *)&v164[16];
        long long v84 = v158[0];
        *(void *)&v158[0] = v22;
        *(_OWORD *)&v164[8] = v84;
        *(_OWORD *)((char *)v158 + 8) = v83;
        *(void *)&v164[24] = v82;
        *(void *)unint64_t v164 = v84;
        std::__split_buffer<Espresso::lk_buffer_generator>::~__split_buffer((uint64_t)v164);
        *((void *)&v158[0] + 1) = v146;
        unint64_t v39 = v60;
        uint64_t v5 = v145;
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
      }
      else
      {
        **((void **)&v158[0] + 1) = 0;
        v55[1] = 0;
        v55[2] = 0;
        *(_OWORD *)uint64_t v55 = *(_OWORD *)__p;
        v55[2] = *(void *)v154;
        __p[1] = 0;
        *(void *)v154 = 0;
        __p[0] = 0;
        uint64_t v56 = v155;
        int v57 = v156;
        uint64_t v58 = *v55;
        unint64_t v59 = (unint64_t)(v55[1] - *v55) >> 4;
        void v55[3] = 0;
        v55[4] = 0;
        v55[5] = v56;
        v55[6] = 0;
        *((_DWORD *)v55 + 14) = v57;
        *((_DWORD *)v55 + 15) = v59;
        v55[8] = v58;
        v55[9] = 0;
        *((void *)&v158[0] + 1) = v55 + 10;
      }
      ++v38;
      uint64_t v37 = *((void *)&v160 + 1);
    }
    while (v38 < *((void *)&v160 + 1));
  }
LABEL_125:
  unint64_t v85 = v143 + v144;
  if (v143 + v144)
  {
    if (v85 >> 61) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v86 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v143 + v144);
    bzero(v86, 8 * v85);
    uint64_t v37 = *((void *)&v160 + 1);
    if (!*((void *)&v160 + 1)) {
      goto LABEL_132;
    }
LABEL_130:
    uint64_t v87 = 24;
    unint64_t v88 = v86;
    do
    {
      *(void *)unint64_t v88 = *(void *)&v158[0] + v87;
      v88 += 8;
      v87 += 80;
      --v37;
    }
    while (v37);
  }
  else
  {
    unint64_t v86 = 0;
    if (v37) {
      goto LABEL_130;
    }
  }
LABEL_132:
  std::vector<int>::vector(&v162, v144);
  std::vector<Espresso::lk_buffer_generator>::vector(&v152, v144);
  if ((int)v144 >= 1)
  {
    uint64_t v89 = 0;
    uint64_t v90 = 0;
    float v91 = &v86[8 * v143];
    do
    {
      *(_OWORD *)&v164[4] = 0uLL;
      *(_DWORD *)unint64_t v164 = 1;
      *(_DWORD *)&v164[20] = 1;
      Espresso::lk_buffer_generator::lk_buffer_generator((uint64_t)__p, (uint64_t)v164, (uint64_t)&v162.__begin_[v89], 3u);
      uint64_t v92 = v152 + v90;
      unint64_t v93 = *(void **)(v152 + v90);
      *(void **)uint64_t v92 = __p[0];
      __p[0] = v93;
      uint64_t v94 = *(void **)(v92 + 8);
      *(void **)(v92 + 8) = __p[1];
      __p[1] = v94;
      uint64_t v95 = *(void *)(v92 + 16);
      *(void *)(v92 + 16) = *(void *)v154;
      *(void *)v154 = v95;
      uint64_t v96 = *(void *)(v92 + 72);
      long long v97 = *(_OWORD *)(v92 + 56);
      long long v98 = *(_OWORD *)(v92 + 40);
      long long v99 = *(_OWORD *)(v92 + 24);
      long long v101 = v155;
      long long v100 = v156;
      uint64_t v102 = v157;
      *(_OWORD *)(v92 + 24) = *(_OWORD *)&v154[8];
      *(void *)(v92 + 72) = v102;
      *(_OWORD *)(v92 + 56) = v100;
      *(_OWORD *)(v92 + 40) = v101;
      *(_OWORD *)&v154[8] = v99;
      long long v155 = v98;
      long long v156 = v97;
      uint64_t v157 = v96;
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      *(void *)float v91 = v152 + v90 + 24;
      v91 += 8;
      v90 += 80;
      ++v89;
    }
    while (80 * v144 != v90);
  }
  if ((*(unsigned int (**)(char *))(v147 + 456))(v86)) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error,Espresso::loopkit_func_t &>(2);
  }
  std::vector<std::vector<int>>::vector(&v151, v144);
  std::vector<Espresso::lk_buffer_generator>::vector(v150, v144);
  if ((int)v144 >= 1)
  {
    uint64_t v103 = 0;
    uint64_t v104 = 0;
    uint64_t v105 = 0;
    do
    {
      std::vector<int>::vector((std::vector<int> *)__p, v162.__begin_[v105]);
      uint64_t v106 = (void *)(v151 + v103);
      unint64_t v107 = *(void **)(v151 + v103);
      if (v107)
      {
        v106[1] = v107;
        operator delete(v107);
        *uint64_t v106 = 0;
        v106[1] = 0;
        v106[2] = 0;
      }
      *(_OWORD *)uint64_t v106 = *(_OWORD *)__p;
      v106[2] = *(void *)v154;
      uint64_t v108 = *(void *)(v151 + v103);
      unint64_t v109 = (unint64_t)(*(void *)(v151 + v103 + 8) - v108) >> 2;
      *(void *)&v164[4] = 0;
      *(void *)&v164[12] = 0;
      *(_DWORD *)unint64_t v164 = v109;
      *(_DWORD *)&v164[20] = 1;
      Espresso::lk_buffer_generator::lk_buffer_generator((uint64_t)__p, (uint64_t)v164, v108, 3u);
      uint64_t v110 = v150[0] + v104;
      unint64_t v111 = *(void **)(v150[0] + v104);
      *(void **)uint64_t v110 = __p[0];
      __p[0] = v111;
      unint64_t v112 = *(void **)(v110 + 8);
      *(void **)(v110 + 8) = __p[1];
      __p[1] = v112;
      uint64_t v113 = *(void *)(v110 + 16);
      *(void *)(v110 + 16) = *(void *)v154;
      *(void *)v154 = v113;
      uint64_t v114 = *(void *)(v110 + 72);
      long long v115 = *(_OWORD *)(v110 + 56);
      long long v116 = *(_OWORD *)(v110 + 40);
      long long v117 = *(_OWORD *)(v110 + 24);
      long long v119 = v155;
      long long v118 = v156;
      uint64_t v120 = v157;
      *(_OWORD *)(v110 + 24) = *(_OWORD *)&v154[8];
      *(void *)(v110 + 72) = v120;
      *(_OWORD *)(v110 + 56) = v118;
      *(_OWORD *)(v110 + 40) = v119;
      *(_OWORD *)&v154[8] = v117;
      long long v155 = v116;
      long long v156 = v115;
      uint64_t v157 = v114;
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      *(void *)&v86[8 * v143 + 8 * v105++] = v150[0] + v104 + 24;
      v104 += 80;
      v103 += 24;
    }
    while (80 * v144 != v104);
  }
  if ((*(unsigned int (**)(char *))(v147 + 448))(v86)) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error,Espresso::loopkit_func_t &>(1);
  }
  *uint64_t v5 = 0;
  v5[1] = 0;
  void v5[2] = 0;
  if ((int)v144 >= 1)
  {
    uint64_t v121 = 0;
    do
    {
      uint64_t v122 = (int **)(v151 + 24 * v121);
      v148[1] = 0;
      uint64_t v149 = 0;
      v148[0] = 0;
      unint64_t v123 = *v122;
      uint64_t v124 = (char *)v122[1] - (char *)*v122;
      if (v124)
      {
        uint64_t v125 = v124 >> 2;
        if ((unint64_t)(v124 >> 2) <= 1) {
          uint64_t v125 = 1;
        }
        int v126 = v148;
        do
        {
          int v127 = *v123++;
          *v126++ = v127;
          --v125;
        }
        while (v125);
      }
      HIDWORD(v149) = (unint64_t)v124 >> 2;
      Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)v148, 0, (uint64_t)__p);
      unint64_t v128 = v5[1];
      unint64_t v129 = v5[2];
      if (v128 >= v129)
      {
        uint64_t v132 = (uint64_t)(v128 - *v5) >> 6;
        unint64_t v133 = v132 + 1;
        if ((unint64_t)(v132 + 1) >> 58) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v134 = v129 - *v5;
        if (v134 >> 5 > v133) {
          unint64_t v133 = v134 >> 5;
        }
        if ((unint64_t)v134 >= 0x7FFFFFFFFFFFFFC0) {
          unint64_t v135 = 0x3FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v135 = v133;
        }
        v165 = v5 + 2;
        std::string::size_type v136 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::layer_shape>>(v135);
        uint64_t v137 = &v136[64 * v132];
        *(void *)unint64_t v164 = v136;
        *(void *)&v164[8] = v137;
        *(void *)&v164[24] = &v136[64 * v138];
        long long v139 = *(_OWORD *)v154;
        uint64_t v140 = *(void *)&v154[16];
        *(_OWORD *)uint64_t v137 = *(_OWORD *)__p;
        *((_OWORD *)v137 + 1) = v139;
        *((void *)v137 + 4) = v140;
        *((void *)v137 + 5) = 0;
        *((void *)v137 + 6) = 0;
        *((void *)v137 + 7) = 0;
        *(_OWORD *)(v137 + 40) = v155;
        *((void *)v137 + 7) = v156;
        long long v155 = 0uLL;
        *(void *)&long long v156 = 0;
        *(void *)&v164[16] = v137 + 64;
        std::vector<Espresso::layer_shape>::__swap_out_circular_buffer(v5, v164);
        uint64_t v141 = v5[1];
        std::__split_buffer<Espresso::layer_shape>::~__split_buffer((uint64_t)v164);
        v142 = (void *)v155;
        v5[1] = v141;
        if (v142)
        {
          *((void *)&v155 + 1) = v142;
          operator delete(v142);
        }
      }
      else
      {
        long long v130 = *(_OWORD *)v154;
        uint64_t v131 = *(void *)&v154[16];
        *(_OWORD *)unint64_t v128 = *(_OWORD *)__p;
        *(_OWORD *)(v128 + 16) = v130;
        *(void *)(v128 + 32) = v131;
        *(void *)(v128 + 40) = 0;
        *(void *)(v128 + 48) = 0;
        *(void *)(v128 + 56) = 0;
        *(_OWORD *)(v128 + 40) = v155;
        *(void *)(v128 + 56) = v156;
        long long v155 = 0uLL;
        *(void *)&long long v156 = 0;
        v5[1] = v128 + 64;
      }
      ++v121;
    }
    while (v121 != v144);
  }
  __p[0] = v150;
  std::vector<Espresso::lk_buffer_generator>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  __p[0] = &v151;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  __p[0] = &v152;
  std::vector<Espresso::lk_buffer_generator>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (v162.__begin_)
  {
    v162.__end_ = v162.__begin_;
    operator delete(v162.__begin_);
  }
  if (v86) {
    operator delete(v86);
  }
  __p[0] = v158;
  std::vector<Espresso::lk_buffer_generator>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  std::__hash_table<std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<unsigned long>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<unsigned long>>>>::~__hash_table((uint64_t)&v159);
}

void sub_192AE69FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55)
{
  if (a36 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::generic_loopkit_kernel::deserialize_shapes(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v3 = *a1;
  if (a1[1] != *a1)
  {
    uint64_t v5 = 0;
    LODWORD(v6) = 0;
    do
    {
      int v7 = *(_DWORD *)(v3 + 4 * v5);
      std::vector<int>::vector(&v38, v7);
      uint64_t v8 = v7;
      LODWORD(v6) = v6 + 1;
      std::vector<int>::pointer begin = v38.__begin_;
      if (v7 >= 1)
      {
        uint64_t v10 = *a1;
        uint64_t v6 = (int)v6;
        std::vector<int>::pointer v11 = v38.__begin_;
        do
        {
          *v11++ = *(_DWORD *)(v10 + 4 * v6++);
          --v8;
        }
        while (v8);
      }
      v31[0] = 0;
      v31[1] = 0;
      uint64_t v32 = 0;
      uint64_t v12 = (char *)v38.__end_ - (char *)begin;
      if (v38.__end_ != begin)
      {
        uint64_t v13 = v12 >> 2;
        if ((unint64_t)(v12 >> 2) <= 1) {
          uint64_t v13 = 1;
        }
        uint64_t v14 = (int *)v31;
        do
        {
          int v15 = *begin++;
          *v14++ = v15;
          --v13;
        }
        while (v13);
      }
      HIDWORD(v32) = (unint64_t)v12 >> 2;
      Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)v31, 0, (uint64_t)&v33);
      unint64_t v16 = a2[1];
      unint64_t v17 = a2[2];
      if (v16 >= v17)
      {
        uint64_t v20 = (uint64_t)(v16 - *a2) >> 6;
        unint64_t v21 = v20 + 1;
        if ((unint64_t)(v20 + 1) >> 58) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v22 = v17 - *a2;
        if (v22 >> 5 > v21) {
          unint64_t v21 = v22 >> 5;
        }
        if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFC0) {
          unint64_t v23 = 0x3FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v23 = v21;
        }
        v39[4] = a2 + 2;
        uint8x8_t v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::layer_shape>>(v23);
        int v25 = &v24[64 * v20];
        v39[0] = v24;
        v39[1] = v25;
        v39[3] = &v24[64 * v26];
        long long v27 = v34;
        uint64_t v28 = v35;
        *(_OWORD *)int v25 = v33;
        *((_OWORD *)v25 + 1) = v27;
        *((void *)v25 + 4) = v28;
        *((void *)v25 + 5) = 0;
        *((void *)v25 + 6) = 0;
        *((void *)v25 + 7) = 0;
        *(_OWORD *)(v25 + 40) = *(_OWORD *)__p;
        *((void *)v25 + 7) = v37;
        __p[0] = 0;
        __p[1] = 0;
        uint64_t v37 = 0;
        v39[2] = v25 + 64;
        std::vector<Espresso::layer_shape>::__swap_out_circular_buffer(a2, v39);
        uint64_t v29 = a2[1];
        std::__split_buffer<Espresso::layer_shape>::~__split_buffer((uint64_t)v39);
        BOOL v30 = __p[0];
        a2[1] = v29;
        if (v30)
        {
          __p[1] = v30;
          operator delete(v30);
        }
      }
      else
      {
        long long v18 = v34;
        uint64_t v19 = v35;
        *(_OWORD *)unint64_t v16 = v33;
        *(_OWORD *)(v16 + 16) = v18;
        *(void *)(v16 + 32) = v19;
        *(void *)(v16 + 40) = 0;
        *(void *)(v16 + 48) = 0;
        *(void *)(v16 + 56) = 0;
        *(_OWORD *)(v16 + 40) = *(_OWORD *)__p;
        *(void *)(v16 + 56) = v37;
        __p[0] = 0;
        __p[1] = 0;
        uint64_t v37 = 0;
        a2[1] = v16 + 64;
      }
      if (v38.__begin_)
      {
        v38.__end_ = v38.__begin_;
        operator delete(v38.__begin_);
      }
      uint64_t v5 = (int)v6;
      uint64_t v3 = *a1;
    }
    while ((int)v6 < (unint64_t)((a1[1] - *a1) >> 2));
  }
}

void sub_192AE6D90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22)
{
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a21)
  {
    a22 = (uint64_t)a21;
    operator delete(a21);
  }
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  _Unwind_Resume(a1);
}

void *std::vector<Espresso::lk_buffer_generator>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0x333333333333334) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    int v4 = std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::lk_buffer_generator>>(a2);
    *a1 = v4;
    a1[1] = v4;
    a1[2] = &v4[10 * v5];
    uint64_t v6 = &v4[10 * a2];
    uint64_t v7 = 80 * a2;
    do
    {
      *int v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      v4 += 10;
      v7 -= 80;
    }
    while (v7);
    a1[1] = v6;
  }
  return a1;
}

void sub_192AE6E78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void std::vector<Espresso::lk_buffer_generator>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    int v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      uint64_t v6 = (char *)v1[1];
      do
      {
        uint64_t v8 = (void *)*((void *)v6 - 10);
        v6 -= 80;
        uint64_t v7 = v8;
        if (v8)
        {
          *((void *)v4 - 9) = v7;
          operator delete(v7);
        }
        int v4 = v6;
      }
      while (v6 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::lk_buffer_generator>>(unint64_t a1)
{
  if (a1 >= 0x333333333333334) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(80 * a1);
}

uint64_t std::__split_buffer<Espresso::lk_buffer_generator>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != v3)
  {
    int v4 = *(void **)(v2 - 80);
    *(void *)(a1 + 16) = v2 - 80;
    if (v4)
    {
      *(void *)(v2 - 72) = v4;
      operator delete(v4);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 80;
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<Espresso::lk_buffer_generator>,std::reverse_iterator<Espresso::lk_buffer_generator*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = *(void *)(*(void *)(a1 + 16) + 8);
    uint64_t v4 = *(void *)(*(void *)(a1 + 8) + 8);
    while (v3 != v4)
    {
      uint64_t v5 = *(void **)v3;
      if (*(void *)v3)
      {
        *(void *)(v3 + 8) = v5;
        operator delete(v5);
      }
      v3 += 80;
    }
  }
  return a1;
}

uint64_t Espresso::loopkit_kernel_cpu::__launch(uint64_t a1, const char *a2, void *a3, uint64_t *a4)
{
  if (*(char *)(a1 + 375) < 0)
  {
    if (!*(void *)(a1 + 360)) {
      goto LABEL_30;
    }
  }
  else if (!*(unsigned char *)(a1 + 375))
  {
    goto LABEL_30;
  }
  char v9 = Espresso::espresso_os_log_subsystem((Espresso *)a1, a2);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    LOWORD(__p[0]) = 0;
    _os_log_error_impl(&dword_1920CB000, v9, OS_LOG_TYPE_ERROR, "Loading deprecated LK kernels.\nThis path will be removed.", (uint8_t *)__p, 2u);
  }

  if (*(char *)(a1 + 375) < 0)
  {
    if (!*(void *)(a1 + 360)) {
      goto LABEL_30;
    }
  }
  else if (!*(unsigned char *)(a1 + 375))
  {
    goto LABEL_30;
  }
  if (*(void *)(a1 + 464)) {
    goto LABEL_30;
  }
  uint64_t v10 = (void *)(a1 + 424);
  if (*(char *)(a1 + 447) < 0) {
    uint64_t v10 = (void *)*v10;
  }
  std::vector<int>::pointer v11 = [NSString stringWithUTF8String:v10];
  uint64_t v12 = [v11 stringByDeletingLastPathComponent];
  uint64_t v13 = (void *)(a1 + 352);

  if (*(char *)(a1 + 375) < 0) {
    uint64_t v13 = (void *)*v13;
  }
  uint64_t v14 = [NSString stringWithUTF8String:v13];
  int v15 = [v14 lastPathComponent];

  if (Espresso::loopkit_dylib_cache::shared(void)::onceToken != -1) {
    dispatch_once(&Espresso::loopkit_dylib_cache::shared(void)::onceToken, &__block_literal_global_20066);
  }
  uint64_t v16 = Espresso::loopkit_dylib_cache::shared(void)::ret;
  id v17 = [v12 stringByAppendingPathComponent:v15];
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)[v17 UTF8String]);
  Espresso::loopkit_dylib_cache::get_dylib((uint64_t **)&v121, v16, (uint64_t)__p);
  long long v18 = (void ***)(a1 + 408);
  uint64_t v19 = *(std::__shared_weak_count **)(a1 + 416);
  *(_OWORD *)(a1 + 408) = v121;
  if (v19) {
    nitro::nitro_function::nitro_function(v19);
  }
  if (SHIBYTE(v117) < 0) {
    operator delete(__p[0]);
  }

  Espresso::func_argv_name((uint64_t)__p, (const void **)(a1 + 280), 0);
  if (*v18)
  {
    if (v117 >= 0) {
      uint64_t v20 = __p;
    }
    else {
      uint64_t v20 = (void **)__p[0];
    }
    unint64_t v21 = dlsym(**v18, (const char *)v20);
    *(void *)(a1 + 464) = v21;
    if (v21) {
      goto LABEL_27;
    }
LABEL_184:
    uint64_t v113 = __p;
    if (v117 < 0) {
      uint64_t v113 = (void **)__p[0];
    }
    *(void *)&long long v121 = v113;
    uint64_t v114 = (void *)(a1 + 328);
    if (*(char *)(a1 + 351) < 0) {
      uint64_t v114 = (void *)*v114;
    }
    uint64_t v120 = v114;
    Espresso::throw_exception_selector<Espresso::invalid_state_error,char const*,char const*>("Fail to load function '%s' from dylib %s", &v121, &v120);
  }
  if (!*(void *)(a1 + 464)) {
    goto LABEL_184;
  }
LABEL_27:
  if (SHIBYTE(v117) < 0) {
    operator delete(__p[0]);
  }

LABEL_30:
  uint64_t v22 = *(void *)(a1 + 512);
  if (v22 != *(void *)(a1 + 520)) {
    goto LABEL_181;
  }
  unint64_t v23 = (uint64_t *)(a1 + 472);
  std::__hash_table<std::__hash_value_type<int,Espresso::lk_buffer_generator>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Espresso::lk_buffer_generator>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Espresso::lk_buffer_generator>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Espresso::lk_buffer_generator>>>::clear(a1 + 472);
  uint64_t v24 = a4[1];
  if (v24 != *a4)
  {
    long long v115 = a3;
    unint64_t v25 = 0;
    uint64_t v26 = (void *)(a1 + 488);
    uint64_t v24 = *a4;
    while (1)
    {
      blob_to_lk_buffer_cpu((uint64_t)__p, (uint64_t *)(v24 + 16 * v25));
      uint64_t v27 = *(void *)(a1 + 304);
      unint64_t v28 = *(int *)(v27 + 4 * v25);
      unint64_t v5 = *(void *)(a1 + 480);
      if (v5)
      {
        uint8x8_t v29 = (uint8x8_t)vcnt_s8((int8x8_t)v5);
        v29.i16[0] = vaddlv_u8(v29);
        if (v29.u32[0] > 1uLL)
        {
          unint64_t v4 = *(int *)(v27 + 4 * v25);
          if (v5 <= v28) {
            unint64_t v4 = v28 % v5;
          }
        }
        else
        {
          unint64_t v4 = (v5 - 1) & v28;
        }
        BOOL v30 = *(uint64_t ***)(*v23 + 8 * v4);
        if (v30)
        {
          for (uint64_t i = *v30; i; uint64_t i = (uint64_t *)*i)
          {
            unint64_t v32 = i[1];
            if (v32 == v28)
            {
              if (*((_DWORD *)i + 4) == v28) {
                goto LABEL_71;
              }
            }
            else
            {
              if (v29.u32[0] > 1uLL)
              {
                if (v32 >= v5) {
                  v32 %= v5;
                }
              }
              else
              {
                v32 &= v5 - 1;
              }
              if (v32 != v4) {
                break;
              }
            }
          }
        }
      }
      long long v33 = (char *)operator new(0x68uLL);
      *(void *)long long v33 = 0;
      *((void *)v33 + 1) = v28;
      *((_DWORD *)v33 + 4) = *(_DWORD *)(v27 + 4 * v25);
      long long v34 = *(_OWORD *)__p;
      *(_OWORD *)(v33 + 24) = *(_OWORD *)__p;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v35 = v117;
      uint64_t v36 = v118;
      uint64_t v117 = 0;
      *((void *)v33 + 11) = v34;
      int v37 = v119;
      *((void *)v33 + 5) = v35;
      *((void *)v33 + 6) = 0;
      *((void *)v33 + 7) = 0;
      *((void *)v33 + 8) = v36;
      *((void *)v33 + 9) = 0;
      *((_DWORD *)v33 + 20) = v37;
      *((_DWORD *)v33 + 21) = (*((void *)&v34 + 1) - (void)v34) >> 4;
      *((void *)v33 + 12) = 0;
      float v38 = (float)(unint64_t)(*(void *)(a1 + 496) + 1);
      float v39 = *(float *)(a1 + 504);
      if (!v5 || (float)(v39 * (float)v5) < v38)
      {
        BOOL v40 = (v5 & (v5 - 1)) != 0;
        if (v5 < 3) {
          BOOL v40 = 1;
        }
        unint64_t v41 = v40 | (2 * v5);
        unint64_t v42 = vcvtps_u32_f32(v38 / v39);
        if (v41 <= v42) {
          size_t v43 = v42;
        }
        else {
          size_t v43 = v41;
        }
        std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__rehash<true>(a1 + 472, v43);
        unint64_t v5 = *(void *)(a1 + 480);
        if ((v5 & (v5 - 1)) != 0)
        {
          if (v5 <= v28) {
            unint64_t v4 = v28 % v5;
          }
          else {
            unint64_t v4 = v28;
          }
        }
        else
        {
          unint64_t v4 = (v5 - 1) & v28;
        }
      }
      uint64_t v44 = *v23;
      float v45 = *(void **)(*v23 + 8 * v4);
      if (v45)
      {
        *(void *)long long v33 = *v45;
      }
      else
      {
        *(void *)long long v33 = *v26;
        void *v26 = v33;
        *(void *)(v44 + 8 * v4) = v26;
        if (!*(void *)v33) {
          goto LABEL_70;
        }
        unint64_t v46 = *(void *)(*(void *)v33 + 8);
        if ((v5 & (v5 - 1)) != 0)
        {
          if (v46 >= v5) {
            v46 %= v5;
          }
        }
        else
        {
          v46 &= v5 - 1;
        }
        float v45 = (void *)(*v23 + 8 * v46);
      }
      *float v45 = v33;
LABEL_70:
      ++*(void *)(a1 + 496);
LABEL_71:
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      ++v25;
      uint64_t v24 = *a4;
      uint64_t v47 = a4[1];
      uint64_t v48 = v47 - *a4;
      if (v25 >= v48 >> 4)
      {
        uint64_t v49 = v48 >> 4;
        a3 = v115;
        goto LABEL_76;
      }
    }
  }
  uint64_t v49 = (v24 - *a4) >> 4;
  uint64_t v47 = a4[1];
LABEL_76:
  uint64_t v50 = *a3;
  if (a3[1] != *a3)
  {
    unint64_t v51 = 0;
    unint64_t v52 = (void *)(a1 + 488);
    unint64_t v5 = 1;
    while (1)
    {
      blob_to_lk_buffer_cpu((uint64_t)__p, (uint64_t *)(v50 + 16 * v51));
      uint64_t v53 = (char *)operator new(0x68uLL);
      *((_DWORD *)v53 + 4) = v51 + v49;
      long long v54 = *(_OWORD *)__p;
      *(_OWORD *)(v53 + 24) = *(_OWORD *)__p;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v55 = v117;
      uint64_t v56 = v118;
      uint64_t v117 = 0;
      *((void *)v53 + 11) = v54;
      int v57 = v119;
      *((void *)v53 + 5) = v55;
      *((void *)v53 + 6) = 0;
      *((void *)v53 + 7) = 0;
      *((void *)v53 + 8) = v56;
      *((void *)v53 + 9) = 0;
      *((_DWORD *)v53 + 20) = v57;
      *((_DWORD *)v53 + 21) = (*((void *)&v54 + 1) - (void)v54) >> 4;
      *((void *)v53 + 12) = 0;
      unint64_t v58 = (int)v51 + (int)v49;
      *(void *)uint64_t v53 = 0;
      *((void *)v53 + 1) = v58;
      unint64_t v59 = *(void *)(a1 + 480);
      if (v59)
      {
        uint8x8_t v60 = (uint8x8_t)vcnt_s8((int8x8_t)v59);
        v60.i16[0] = vaddlv_u8(v60);
        if (v60.u32[0] > 1uLL)
        {
          unint64_t v61 = (int)v51 + (int)v49;
          if (v59 <= v58) {
            unint64_t v61 = v58 % v59;
          }
        }
        else
        {
          unint64_t v61 = (v59 - 1) & v58;
        }
        unint64_t v62 = *(uint64_t ***)(*v23 + 8 * v61);
        if (v62)
        {
          for (uint64_t j = *v62; j; uint64_t j = (uint64_t *)*j)
          {
            unint64_t v64 = j[1];
            if (v64 == v58)
            {
              if (*((_DWORD *)j + 4) == v51 + v49)
              {
                std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,std::vector<unsigned long>>,void *>>>::operator()[abi:ne180100](1, v53);
                goto LABEL_117;
              }
            }
            else
            {
              if (v60.u32[0] > 1uLL)
              {
                if (v64 >= v59) {
                  v64 %= v59;
                }
              }
              else
              {
                v64 &= v59 - 1;
              }
              if (v64 != v61) {
                break;
              }
            }
          }
        }
      }
      float v65 = (float)(unint64_t)(*(void *)(a1 + 496) + 1);
      float v66 = *(float *)(a1 + 504);
      if (!v59 || (float)(v66 * (float)v59) < v65)
      {
        uint64_t v67 = 2 * v59;
        BOOL v68 = v59 < 3 || (v59 & (v59 - 1)) != 0;
        size_t v69 = v68 | v67;
        unint64_t v70 = vcvtps_u32_f32(v65 / v66);
        if (v69 <= v70) {
          size_t v71 = v70;
        }
        else {
          size_t v71 = v69;
        }
        std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__rehash<true>(a1 + 472, v71);
        unint64_t v59 = *(void *)(a1 + 480);
        unint64_t v58 = *((void *)v53 + 1);
      }
      uint8x8_t v72 = (uint8x8_t)vcnt_s8((int8x8_t)v59);
      v72.i16[0] = vaddlv_u8(v72);
      if (v72.u32[0] > 1uLL)
      {
        if (v58 >= v59) {
          v58 %= v59;
        }
      }
      else
      {
        v58 &= v59 - 1;
      }
      uint64_t v73 = *v23;
      int v74 = *(void **)(*v23 + 8 * v58);
      if (v74)
      {
        *(void *)uint64_t v53 = *v74;
      }
      else
      {
        *(void *)uint64_t v53 = *v52;
        *unint64_t v52 = v53;
        *(void *)(v73 + 8 * v58) = v52;
        if (!*(void *)v53) {
          goto LABEL_116;
        }
        unint64_t v75 = *(void *)(*(void *)v53 + 8);
        if (v72.u32[0] > 1uLL)
        {
          if (v75 >= v59) {
            v75 %= v59;
          }
        }
        else
        {
          v75 &= v59 - 1;
        }
        int v74 = (void *)(*v23 + 8 * v75);
      }
      *int v74 = v53;
LABEL_116:
      ++*(void *)(a1 + 496);
LABEL_117:
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      ++v51;
      uint64_t v50 = *a3;
      uint64_t v76 = a3[1] - *a3;
      if (v51 >= v76 >> 4)
      {
        uint64_t v77 = v76 >> 4;
        uint64_t v24 = *a4;
        uint64_t v47 = a4[1];
        goto LABEL_122;
      }
    }
  }
  uint64_t v77 = 0;
LABEL_122:
  unint64_t v78 = v77 + ((v47 - v24) >> 4);
  uint64_t v79 = *(void *)(a1 + 520);
  uint64_t v80 = *(void *)(a1 + 512);
  unint64_t v81 = (v79 - v80) >> 3;
  if (v78 > v81)
  {
    unint64_t v82 = v78 - v81;
    uint64_t v83 = *(void *)(a1 + 528);
    if (v78 - v81 > (v83 - v79) >> 3)
    {
      if (v78 >> 61) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v84 = v83 - v80;
      if (v84 >> 2 > v78) {
        unint64_t v78 = v84 >> 2;
      }
      if ((unint64_t)v84 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v85 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v85 = v78;
      }
      unint64_t v86 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v85);
      uint64_t v87 = &v86[8 * v81];
      uint64_t v89 = &v86[8 * v88];
      bzero(v87, 8 * v82);
      uint64_t v90 = &v87[8 * v82];
      float v91 = *(char **)(a1 + 520);
      uint64_t v92 = *(char **)(a1 + 512);
      if (v91 != v92)
      {
        do
        {
          uint64_t v93 = *((void *)v91 - 1);
          v91 -= 8;
          *((void *)v87 - 1) = v93;
          v87 -= 8;
        }
        while (v91 != v92);
        float v91 = *(char **)(a1 + 512);
      }
      *(void *)(a1 + 512) = v87;
      *(void *)(a1 + 520) = v90;
      *(void *)(a1 + 528) = v89;
      if (v91) {
        operator delete(v91);
      }
      goto LABEL_139;
    }
    bzero(*(void **)(a1 + 520), 8 * v82);
    uint64_t v94 = v79 + 8 * v82;
    goto LABEL_138;
  }
  if (v78 < v81)
  {
    uint64_t v94 = v80 + 8 * v78;
LABEL_138:
    *(void *)(a1 + 520) = v94;
  }
LABEL_139:
  unint64_t v95 = *(void *)(a1 + 496);
  if (v95)
  {
    unint64_t v96 = 0;
    long long v97 = (void *)(a1 + 488);
    unint64_t v98 = *(void *)(a1 + 480);
    do
    {
      if (v98)
      {
        uint8x8_t v99 = (uint8x8_t)vcnt_s8((int8x8_t)v98);
        v99.i16[0] = vaddlv_u8(v99);
        if (v99.u32[0] > 1uLL)
        {
          unint64_t v5 = v96;
          if (v98 <= v96) {
            unint64_t v5 = v96 % v98;
          }
        }
        else
        {
          unint64_t v5 = (v98 - 1) & v96;
        }
        long long v100 = *(void ***)(*v23 + 8 * v5);
        if (v100)
        {
          long long v101 = *v100;
          if (*v100)
          {
            do
            {
              unint64_t v102 = v101[1];
              if (v102 == v96)
              {
                if (v96 == *((_DWORD *)v101 + 4)) {
                  goto LABEL_179;
                }
              }
              else
              {
                if (v99.u32[0] > 1uLL)
                {
                  if (v102 >= v98) {
                    v102 %= v98;
                  }
                }
                else
                {
                  v102 &= v98 - 1;
                }
                if (v102 != v5) {
                  break;
                }
              }
              long long v101 = (void *)*v101;
            }
            while (v101);
          }
        }
      }
      long long v101 = operator new(0x68uLL);
      *long long v101 = 0;
      v101[1] = v96;
      *((_DWORD *)v101 + 4) = v96;
      v101[4] = 0;
      v101[5] = 0;
      v101[3] = 0;
      float v103 = (float)(v95 + 1);
      float v104 = *(float *)(a1 + 504);
      if (!v98 || (float)(v104 * (float)v98) < v103)
      {
        BOOL v105 = (v98 & (v98 - 1)) != 0;
        if (v98 < 3) {
          BOOL v105 = 1;
        }
        unint64_t v106 = v105 | (2 * v98);
        unint64_t v107 = vcvtps_u32_f32(v103 / v104);
        if (v106 <= v107) {
          size_t v108 = v107;
        }
        else {
          size_t v108 = v106;
        }
        std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__rehash<true>(a1 + 472, v108);
        unint64_t v98 = *(void *)(a1 + 480);
        if ((v98 & (v98 - 1)) != 0)
        {
          if (v98 <= v96) {
            unint64_t v5 = v96 % v98;
          }
          else {
            unint64_t v5 = v96;
          }
        }
        else
        {
          unint64_t v5 = (v98 - 1) & v96;
        }
      }
      uint64_t v109 = *v23;
      uint64_t v110 = *(void **)(*v23 + 8 * v5);
      if (v110)
      {
        *long long v101 = *v110;
      }
      else
      {
        *long long v101 = *v97;
        *long long v97 = v101;
        *(void *)(v109 + 8 * v5) = v97;
        if (!*v101) {
          goto LABEL_178;
        }
        unint64_t v111 = *(void *)(*v101 + 8);
        if ((v98 & (v98 - 1)) != 0)
        {
          if (v111 >= v98) {
            v111 %= v98;
          }
        }
        else
        {
          v111 &= v98 - 1;
        }
        uint64_t v110 = (void *)(*v23 + 8 * v111);
      }
      *uint64_t v110 = v101;
LABEL_178:
      unint64_t v95 = *(void *)(a1 + 496) + 1;
      *(void *)(a1 + 496) = v95;
LABEL_179:
      *(void *)(*(void *)(a1 + 512) + 8 * v96++) = v101 + 6;
    }
    while (v95 > v96);
  }
  uint64_t v22 = *(void *)(a1 + 512);
LABEL_181:
  uint64_t result = (*(uint64_t (**)(uint64_t))(a1 + 464))(v22);
  if (result) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error,Espresso::loopkit_func_t &>(0);
  }
  return result;
}

void sub_192AE7A64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void blob_to_lk_buffer_cpu(uint64_t a1, uint64_t *a2)
{
  Espresso::abstract_blob_container::shape((char *)&v16, *a2);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v20, (const Espresso::layer_shape *)&v16, 0);
  if (__p)
  {
    uint64_t v19 = __p;
    operator delete(__p);
  }
  unint64_t v4 = *(uint64_t (****)(void))(*(void *)(*a2 + 72) + 8);
  int v5 = (**v4)(v4);
  int v6 = (*(uint64_t (**)(void))(*(void *)*a2 + 32))();
  if (v5 == 10010)
  {
    switch(v6)
    {
      case 0:
        uint64_t v7 = *a2;
        uint64_t v8 = *(void *)(*a2 + 160);
        goto LABEL_15;
      case 1:
        uint64_t v7 = *a2;
        uint64_t v8 = *(void *)(*a2 + 176);
        goto LABEL_15;
      case 2:
        uint64_t v7 = *a2;
        uint64_t v8 = *(void *)(*a2 + 208);
        goto LABEL_15;
      case 4:
        uint64_t v7 = *a2;
        uint64_t v8 = *(void *)(*a2 + 192);
LABEL_15:
        uint64_t v13 = *(void *)(v8 + 24);
        unsigned int v14 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 32))(v7);
        Espresso::lk_buffer_generator::lk_buffer_generator(a1, (uint64_t)v20, v13, v14);
        return;
      default:
        goto LABEL_17;
    }
  }
  if (v6 == 1)
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<unsigned short,4>,false>(&v16, a2);
    uint64_t v11 = *(void *)(v16 + 24);
    unsigned int v12 = (*(uint64_t (**)(void))(*(void *)*a2 + 32))();
    Espresso::lk_buffer_generator::lk_buffer_generator(a1, (uint64_t)v20, v11, v12);
  }
  else
  {
    if (v6)
    {
LABEL_17:
      int v15 = (*(uint64_t (**)(void))(*(void *)*a2 + 32))();
      Espresso::throw_exception_selector<Espresso::not_implemented_error,Espresso::compute_path>(v15);
    }
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v16, a2);
    uint64_t v9 = *(void *)(v16 + 24);
    unsigned int v10 = (*(uint64_t (**)(void))(*(void *)*a2 + 32))();
    Espresso::lk_buffer_generator::lk_buffer_generator(a1, (uint64_t)v20, v9, v10);
  }
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
}

void sub_192AE7D6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (a11) {
    nitro::nitro_function::nitro_function(a11);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::throw_exception_selector<Espresso::not_implemented_error,Espresso::compute_path>(int a1)
{
}

void Espresso::loopkit_dylib_cache::get_dylib(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  int v6 = (std::mutex *)(a2 + 24);
  std::mutex::lock((std::mutex *)(a2 + 24));
  uint64_t v7 = std::__tree<std::__value_type<std::string,std::weak_ptr<Espresso::generic_loopkit_kernel::raii_dylib>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<Espresso::generic_loopkit_kernel::raii_dylib>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<Espresso::generic_loopkit_kernel::raii_dylib>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a2, (void *)a3, a3);
  *a1 = 0;
  a1[1] = 0;
  uint64_t v8 = (std::__shared_weak_count *)v7[8];
  if (v8)
  {
    uint64_t v9 = std::__shared_weak_count::lock(v8);
    a1[1] = (uint64_t *)v9;
    if (v9)
    {
      unsigned int v10 = v7[7];
      *a1 = v10;
      if (v10) {
        goto LABEL_28;
      }
    }
  }
  else
  {
    uint64_t v9 = 0;
  }
  uint64_t v11 = (Espresso *)operator new(0x20uLL);
  uint64_t v13 = (uint64_t *)v11;
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = 0;
  *(void *)uint64_t v11 = &unk_1EE387850;
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string __p = *(std::string *)a3;
  }
  unsigned int v14 = v13 + 3;
  v13[3] = 0;
  int v15 = Espresso::espresso_os_log_subsystem(v11, v12);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_1920CB000, v15, OS_LOG_TYPE_ERROR, "RAII load of deprecated LK kernels.\nThis path will be removed.", buf, 2u);
  }

  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!__p.__r_.__value_.__l.__size_)
    {
LABEL_15:
      long long v18 = [MEMORY[0x1E4F28B50] bundleForClass:objc_opt_class()];
      uint64_t v19 = [v18 executablePath];

      uint64_t v20 = [v19 stringByDeletingLastPathComponent];
      unint64_t v21 = [v20 stringByAppendingPathComponent:@"Frameworks/LoopKitGeneratedKernels.framework/LoopKitGeneratedKernels"];

      id v22 = v21;
      if (![v22 UTF8String]) {
        Espresso::throw_exception_selector<Espresso::invalid_state_error>("Cannot find bundle");
      }
      MEMORY[0x192FF0F50](&__p);
    }
  }
  else if (!*((unsigned char *)&__p.__r_.__value_.__s + 23))
  {
    goto LABEL_15;
  }
  unint64_t v23 = Espresso::espresso_os_log_subsystem(v16, v17);
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
  {
    p_p = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)buf = 136315138;
    float v38 = p_p;
    _os_log_debug_impl(&dword_1920CB000, v23, OS_LOG_TYPE_DEBUG, "raii_dylib: %s", buf, 0xCu);
  }

  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v24 = &__p;
  }
  else {
    uint64_t v24 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  unint64_t v25 = dlopen((const char *)v24, 5);
  *unsigned int v14 = (uint64_t)v25;
  if (!v25)
  {
    BOOL v30 = Espresso::espresso_os_log_subsystem(0, v26);
    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
    {
      unint64_t v31 = dlerror();
      *(_DWORD *)buf = 136315138;
      float v38 = (std::string *)v31;
      _os_log_debug_impl(&dword_1920CB000, v30, OS_LOG_TYPE_DEBUG, "dl error: %s\n", buf, 0xCu);
    }

    int v32 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    std::string::size_type v33 = __p.__r_.__value_.__r.__words[0];
    long long v34 = dlerror();
    if (v32 >= 0) {
      uint64_t v35 = &__p;
    }
    else {
      uint64_t v35 = (std::string *)v33;
    }
    Espresso::throw_exception_selector<Espresso::invalid_state_error,char const*,char *>((const char *)v35, v34);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *a1 = v14;
  a1[1] = v13;
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  uint64_t v27 = std::__tree<std::__value_type<std::string,std::weak_ptr<Espresso::generic_loopkit_kernel::raii_dylib>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<Espresso::generic_loopkit_kernel::raii_dylib>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<Espresso::generic_loopkit_kernel::raii_dylib>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a2, (void *)a3, a3);
  atomic_fetch_add_explicit(v13 + 2, 1uLL, memory_order_relaxed);
  unint64_t v28 = (std::__shared_weak_count *)v27[8];
  v27[7] = v14;
  v27[8] = v13;
  if (v28) {
    std::__shared_weak_count::__release_weak(v28);
  }
LABEL_28:
  std::mutex::unlock(v6);
}

void sub_192AE8150(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::~__shared_weak_count(v16);
  operator delete(v20);
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
  std::mutex::unlock(v14);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<std::string,std::weak_ptr<Espresso::generic_loopkit_kernel::raii_dylib>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<Espresso::generic_loopkit_kernel::raii_dylib>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<Espresso::generic_loopkit_kernel::raii_dylib>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void *a2, uint64_t a3)
{
  uint64_t v6 = (uint64_t)(a1 + 1);
  int v5 = a1[1];
  uint64_t v7 = a1 + 1;
  uint64_t v8 = a1 + 1;
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v7 = (uint64_t **)v5;
        unsigned int v10 = v5 + 4;
        if (!std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, v5 + 4)) {
          break;
        }
        int v5 = *v7;
        uint64_t v8 = v7;
        if (!*v7) {
          goto LABEL_7;
        }
      }
      if (!std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v10, a2)) {
        return v7;
      }
      uint64_t v8 = v7 + 1;
      int v5 = v7[1];
      if (!v5) {
        goto LABEL_7;
      }
    }
  }
  else
  {
LABEL_7:
    uint64_t v11 = operator new(0x48uLL);
    v16[0] = (uint64_t)v11;
    v16[1] = v6;
    char v17 = 0;
    unsigned int v12 = (std::string *)(v11 + 4);
    if (*(char *)(a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
    }
    else
    {
      *(_OWORD *)&v12->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
      v11[6] = *(void *)(a3 + 16);
    }
    v11[7] = 0;
    v11[8] = 0;
    char v17 = 1;
    *uint64_t v11 = 0;
    v11[1] = 0;
    v11[2] = v7;
    *uint64_t v8 = v11;
    uint64_t v13 = (uint64_t *)**a1;
    unsigned int v14 = v11;
    if (v13)
    {
      *a1 = v13;
      unsigned int v14 = *v8;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v14);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    v16[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::weak_ptr<Espresso::generic_loopkit_kernel::raii_dylib>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::weak_ptr<Espresso::generic_loopkit_kernel::raii_dylib>>,void *>>>>::reset[abi:ne180100](v16);
  }
  return (uint64_t **)v11;
}

void sub_192AE831C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::weak_ptr<Espresso::generic_loopkit_kernel::raii_dylib>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::weak_ptr<Espresso::generic_loopkit_kernel::raii_dylib>>,void *>>>>::reset[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void Espresso::throw_exception_selector<Espresso::invalid_state_error,char const*,char *>(const char *a1, const char *a2)
{
}

void *std::__shared_ptr_emplace<Espresso::generic_loopkit_kernel::raii_dylib>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void **)(a1 + 24);
  if (result) {
    return (void *)dlclose(result);
  }
  return result;
}

void std::__shared_ptr_emplace<Espresso::generic_loopkit_kernel::raii_dylib>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE387850;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::generic_loopkit_kernel::raii_dylib>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE387850;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::weak_ptr<Espresso::generic_loopkit_kernel::raii_dylib>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::weak_ptr<Espresso::generic_loopkit_kernel::raii_dylib>>,void *>>>>::reset[abi:ne180100](uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0;
  if (v1)
  {
    if (*((unsigned char *)a1 + 16))
    {
      uint64_t v2 = *(std::__shared_weak_count **)(v1 + 64);
      if (v2) {
        std::__shared_weak_count::__release_weak(v2);
      }
      if (*(char *)(v1 + 55) < 0) {
        operator delete(*(void **)(v1 + 32));
      }
    }
    operator delete((void *)v1);
  }
}

void ___ZN8Espresso19loopkit_dylib_cache6sharedEv_block_invoke()
{
}

void Espresso::loopkit_kernel_cpu::~loopkit_kernel_cpu(Espresso::loopkit_kernel_cpu *this)
{
  *(void *)this = &unk_1EE34E568;
  uint64_t v2 = (void *)*((void *)this + 64);
  if (v2)
  {
    *((void *)this + 65) = v2;
    operator delete(v2);
  }
  std::__hash_table<std::__hash_value_type<int,Espresso::lk_buffer_generator>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Espresso::lk_buffer_generator>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Espresso::lk_buffer_generator>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Espresso::lk_buffer_generator>>>::~__hash_table((uint64_t)this + 472);
  Espresso::generic_loopkit_kernel::~generic_loopkit_kernel((void **)this);

  JUMPOUT(0x192FF16B0);
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_1EE34E568;
  uint64_t v2 = (void *)*((void *)this + 64);
  if (v2)
  {
    *((void *)this + 65) = v2;
    operator delete(v2);
  }
  std::__hash_table<std::__hash_value_type<int,Espresso::lk_buffer_generator>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Espresso::lk_buffer_generator>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Espresso::lk_buffer_generator>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Espresso::lk_buffer_generator>>>::~__hash_table((uint64_t)this + 472);

  Espresso::generic_loopkit_kernel::~generic_loopkit_kernel((void **)this);
}

uint64_t std::__hash_table<std::__hash_value_type<int,Espresso::lk_buffer_generator>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Espresso::lk_buffer_generator>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Espresso::lk_buffer_generator>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Espresso::lk_buffer_generator>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<int,Espresso::lk_buffer_generator>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Espresso::lk_buffer_generator>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Espresso::lk_buffer_generator>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Espresso::lk_buffer_generator>>>::__deallocate_node(*(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

uint64_t ___ZN8Espresso18loopkit_kernel_cpuC2ERKNSt3__110shared_ptrINS_16abstract_contextEEENS_12compute_pathERKNS_16loopkit_params_tE_block_invoke()
{
  return MGGetBoolAnswer();
}

void Espresso::generic_loopkit_kernel::serialize_shapes(long long **a1@<X0>, int **a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  if (*a1 != v3)
  {
    do
    {
      long long v5 = *v2;
      long long v6 = v2[1];
      uint64_t v38 = *((void *)v2 + 4);
      long long v36 = v5;
      long long v37 = v6;
      BOOL v40 = 0;
      uint64_t v41 = 0;
      std::string __p = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *((const void **)v2 + 5), *((void *)v2 + 6), (uint64_t)(*((void *)v2 + 6) - *((void *)v2 + 5)) >> 2);
      if (v37 == 1) {
        int v7 = 4;
      }
      else {
        int v7 = 5;
      }
      if (DWORD1(v37) == -1) {
        int v8 = v7;
      }
      else {
        int v8 = DWORD1(v37);
      }
      unsigned int v10 = a2[1];
      unint64_t v9 = (unint64_t)a2[2];
      if ((unint64_t)v10 >= v9)
      {
        unsigned int v12 = *a2;
        uint64_t v13 = v10 - *a2;
        unint64_t v14 = v13 + 1;
        if ((unint64_t)(v13 + 1) >> 62) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v15 = v9 - (void)v12;
        if (v15 >> 1 > v14) {
          unint64_t v14 = v15 >> 1;
        }
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v16 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v16 = v14;
        }
        if (v16)
        {
          unint64_t v16 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v16);
          unsigned int v12 = *a2;
          unsigned int v10 = a2[1];
        }
        else
        {
          uint64_t v17 = 0;
        }
        long long v18 = (int *)(v16 + 4 * v13);
        *long long v18 = v8;
        uint64_t v11 = v18 + 1;
        while (v10 != v12)
        {
          int v19 = *--v10;
          *--long long v18 = v19;
        }
        *a2 = v18;
        a2[1] = v11;
        a2[2] = (int *)(v16 + 4 * v17);
        if (v12) {
          operator delete(v12);
        }
      }
      else
      {
        *unsigned int v10 = v8;
        uint64_t v11 = v10 + 1;
      }
      a2[1] = v11;
      Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v34, (const Espresso::layer_shape *)&v36, 0);
      Espresso::layer_nd_shape::shape_vector(&v35, (uint64_t)v34);
      std::vector<int>::pointer begin = v35.__begin_;
      std::vector<int>::pointer end = v35.__end_;
      if (v35.__begin_ != v35.__end_)
      {
        id v22 = a2[1];
        do
        {
          int v23 = *begin;
          unint64_t v24 = (unint64_t)a2[2];
          if ((unint64_t)v22 >= v24)
          {
            uint64_t v26 = *a2;
            uint64_t v27 = v22 - *a2;
            unint64_t v28 = v27 + 1;
            if ((unint64_t)(v27 + 1) >> 62) {
              std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v29 = v24 - (void)v26;
            if (v29 >> 1 > v28) {
              unint64_t v28 = v29 >> 1;
            }
            if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v30 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v30 = v28;
            }
            if (v30)
            {
              unint64_t v30 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v30);
              uint64_t v26 = *a2;
              id v22 = a2[1];
            }
            else
            {
              uint64_t v31 = 0;
            }
            int v32 = (int *)(v30 + 4 * v27);
            *int v32 = v23;
            unint64_t v25 = v32 + 1;
            while (v22 != v26)
            {
              int v33 = *--v22;
              *--int v32 = v33;
            }
            *a2 = v32;
            a2[1] = v25;
            a2[2] = (int *)(v30 + 4 * v31);
            if (v26) {
              operator delete(v26);
            }
          }
          else
          {
            *id v22 = v23;
            unint64_t v25 = v22 + 1;
          }
          a2[1] = v25;
          ++begin;
          id v22 = v25;
        }
        while (begin != end);
        std::vector<int>::pointer begin = v35.__begin_;
      }
      if (begin)
      {
        v35.__end_ = begin;
        operator delete(begin);
      }
      if (__p)
      {
        BOOL v40 = __p;
        operator delete(__p);
      }
      v2 += 4;
    }
    while (v2 != v3);
  }
}

void sub_192AE8850(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p) {
    operator delete(__p);
  }
  int v23 = *(void **)v21;
  if (*(void *)v21)
  {
    *(void *)(v21 + 8) = v23;
    operator delete(v23);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::MPSGraphEngine::Kernels::copy_kernel::is_valid_for_engine()
{
  return 1;
}

void Espresso::MPSGraphEngine::Kernels::copy_kernel::~copy_kernel(Espresso::MPSGraphEngine::Kernels::copy_kernel *this)
{
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

void Espresso::rnn_arch_cpu::lstm_elementwise(uint64_t a1, uint64_t a2, int a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t v9 = 12;
  if (!*(unsigned char *)(a1 + 456)) {
    uint64_t v9 = 20;
  }
  uint64_t v70 = *(unsigned int *)(*a4 + v9);
  vDSP_Length v10 = *(int *)(a1 + 380);
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v82, a4);
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v80, a5);
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v78, a6);
  if ((int)v70 >= 1)
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = 4 * v10;
    uint64_t v15 = a1 + 16 * a3;
    uint64_t v63 = v15 + 736;
    uint64_t v64 = v15 + 704;
    uint64_t v67 = 3 * (int)v10;
    uint64_t v62 = v15 + 768;
    uint64_t v73 = a1 + 320;
    uint64_t v68 = v80;
    uint64_t v69 = v78;
    uint64_t v65 = 16 * v10;
    uint64_t v66 = v82;
    uint64_t v16 = 8 * v10;
    uint64_t v17 = 4 * v10;
    uint64_t v71 = v10;
    do
    {
      uint64_t v18 = *(void *)(v69 + 24);
      uint64_t v72 = v13;
      __C = (float *)(v18 + 4 * v13 * v14);
      int v19 = &__C[v10];
      uint64_t v20 = *(void *)(v68 + 24);
      if (*(_DWORD *)(a1 + 404)) {
        vDSP_vsadd(&__C[v10], 1, (const float *)(a1 + 388), &__C[v10], 1, v10);
      }
      if (*(_DWORD *)(a1 + 392))
      {
        if (*(_DWORD *)(a1 + 396) == 2)
        {
          if (v10)
          {
            uint64_t v21 = *(char **)(*(void *)v63 + 16);
            uint64_t v22 = *(void *)(*(void *)v62 + 16);
            int v23 = v21;
            uint64_t v24 = v20;
            uint64_t v25 = v18;
            vDSP_Length v26 = v10;
            do
            {
              char v27 = *v23++;
              int v28 = v27;
              if (v22) {
                float v29 = (double)v28 * 0.0078125 * *(float *)(v22 + 4);
              }
              else {
                float v29 = (float)v28;
              }
              *(float *)(v25 + v12) = *(float *)(v25 + v12) + (float)(*(float *)(v24 + v11) * v29);
              v25 += 4;
              v24 += 4;
              --v26;
            }
            while (v26);
            unint64_t v30 = &v21[v10];
            uint64_t v31 = v20;
            uint64_t v32 = v18;
            vDSP_Length v33 = v10;
            do
            {
              char v34 = *v30++;
              int v35 = v34;
              if (v22) {
                float v36 = (double)v35 * 0.0078125 * *(float *)(v22 + 4);
              }
              else {
                float v36 = (float)v35;
              }
              *(float *)(v32 + v17) = *(float *)(v32 + v17) + (float)(*(float *)(v31 + v11) * v36);
              v32 += 4;
              v31 += 4;
              --v33;
            }
            while (v33);
          }
        }
        else if (v10)
        {
          long long v37 = *(float **)(*(void *)v64 + 16);
          uint64_t v38 = (float *)(v18 + v12);
          uint64_t v39 = (float *)(v20 + v11);
          BOOL v40 = v37;
          vDSP_Length v41 = v10;
          do
          {
            float v42 = *v40++;
            float v43 = v42;
            float v44 = *v39++;
            *uint64_t v38 = *v38 + (float)(v44 * v43);
            ++v38;
            --v41;
          }
          while (v41);
          float v45 = (float *)(v18 + v17);
          unint64_t v46 = &v37[v71];
          uint64_t v47 = v20;
          vDSP_Length v48 = v10;
          do
          {
            float v49 = *v46++;
            *float v45 = *v45 + (float)(*(float *)(v47 + v11) * v49);
            ++v45;
            v47 += 4;
            --v48;
          }
          while (v48);
        }
      }
      Espresso::apply_nonlinearity2(&__C[v67], &__C[v67], v10, a1 + 332);
      Espresso::apply_nonlinearity2(__C, __C, v10, v73);
      Espresso::apply_nonlinearity2(v19, v19, v10, v73);
      __E = (float *)(v20 + 4 * v72 * v10);
      vDSP_vmma(v19, 1, __E, 1, __C, 1, &__C[v67], 1, __E, 1, v10);
      float v76 = *(float *)(a1 + 408);
      float v77 = -v76;
      vDSP_vclip(__E, 1, &v77, &v76, __E, 1, v10);
      if (*(_DWORD *)(a1 + 392))
      {
        if (*(_DWORD *)(a1 + 396) == 2)
        {
          if (v10)
          {
            uint64_t v51 = *(void *)(*(void *)v62 + 16);
            unint64_t v52 = (char *)(*(void *)(*(void *)v63 + 16) + 2 * v10);
            vDSP_Length v53 = v10;
            do
            {
              char v54 = *v52++;
              int v55 = v54;
              if (v51) {
                float v56 = (double)v55 * 0.0078125 * *(float *)(v51 + 4);
              }
              else {
                float v56 = (float)v55;
              }
              *(float *)(v18 + v16) = *(float *)(v18 + v16) + (float)(*(float *)(v20 + v11) * v56);
              v18 += 4;
              v20 += 4;
              --v53;
            }
            while (v53);
          }
        }
        else if (v10)
        {
          int v57 = (float *)(v18 + v16);
          unint64_t v58 = (float *)(*(void *)(*(void *)v64 + 16) + 8 * v10);
          vDSP_Length v59 = v10;
          do
          {
            float v60 = *v58++;
            *int v57 = *v57 + (float)(*(float *)(v20 + v11) * v60);
            ++v57;
            v20 += 4;
            --v59;
          }
          while (v59);
        }
      }
      Espresso::apply_nonlinearity2(&__C[2 * v10], &__C[2 * v10], v10, v73);
      unint64_t v61 = (float *)(*(void *)(v66 + 24) + 4 * v72 * v10);
      Espresso::apply_nonlinearity2(__E, v61, v10, a1 + 308);
      vDSP_vmul(v61, 1, &__C[2 * v10], 1, v61, 1, v10);
      uint64_t v13 = v72 + 1;
      v12 += v65;
      uint64_t v14 = 4 * v10;
      v11 += v71 * 4;
      v17 += v65;
      v16 += v65;
    }
    while (v72 + 1 != v70);
  }
  if (v79) {
    nitro::nitro_function::nitro_function(v79);
  }
  if (v81) {
    nitro::nitro_function::nitro_function(v81);
  }
  if (v83) {
    nitro::nitro_function::nitro_function(v83);
  }
}

void sub_192AE8E0C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 - 112);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  unint64_t v4 = *(std::__shared_weak_count **)(v1 - 96);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::rnn_arch_cpu::blob_container_options_for_weight(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void Espresso::rnn_arch_cpu::__set_weights_finalize(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 464);
  uint64_t v2 = (void *)(a1 + 472);
  if (v1 == (void *)(a1 + 472)) {
    return;
  }
  while (1)
  {
    unint64_t v4 = (Espresso::quantized_weights_helper *)v1[7];
    long long v5 = (std::__shared_weak_count *)v1[8];
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (!v4
      || !*(void *)v4
      || !*((void *)v4 + 4) && !*((void *)v4 + 6) && !*((void *)v4 + 8) && !*((void *)v4 + 10))
    {
      break;
    }
    if (*(_DWORD *)(a1 + 304)) {
      Espresso::quantized_weights_helper::dequantize_to_float32_4d(v4, v38);
    }
    else {
      Espresso::quantized_weights_helper::dequantize_to_float32_4d_lstm(v4, v38);
    }
    uint64_t v7 = v38[0];
    long long v6 = (std::__shared_weak_count *)v38[1];
    int v8 = (char *)operator new(0x58uLL);
    uint64_t v9 = (unsigned __int16 *)(v1 + 4);
    *((void *)v8 + 1) = 0;
    *((void *)v8 + 2) = 0;
    *(void *)int v8 = &unk_1EE389958;
    uint64_t v10 = *(void *)(v7 + 24);
    *((void *)v8 + 3) = &unk_1EE36BED0;
    uint64_t v11 = *(void *)(v7 + 16);
    *(_OWORD *)(v8 + 72) = 0u;
    *(_OWORD *)(v8 + 56) = 0u;
    *((void *)v8 + 4) = v11;
    *((void *)v8 + 5) = v10;
    v8[48] = 1;
    *(unsigned char *)(v7 + 32) = 0;
    if ((*((char *)v1 + 55) & 0x80000000) == 0)
    {
      int v12 = *((unsigned __int8 *)v1 + 55);
      if (v12 == 3) {
        goto LABEL_37;
      }
      if (v12 != 11) {
        goto LABEL_50;
      }
      BOOL v13 = *(void *)v9 == 0x657665725F685F57 && *(void *)((char *)v1 + 35) == 0x657372657665725FLL;
      if (!v13) {
        goto LABEL_29;
      }
      goto LABEL_48;
    }
    uint64_t v14 = v1[5];
    if (v14 == 3)
    {
      uint64_t v9 = *(unsigned __int16 **)v9;
LABEL_37:
      if (*v9 == 24407 && *((unsigned char *)v9 + 2) == 104)
      {
        uint64_t v29 = *(void *)(a1 + 656);
        float v36 = v8 + 24;
        long long v37 = (std::__shared_weak_count *)v8;
        atomic_fetch_add_explicit((atomic_ullong *volatile)v8 + 1, 1uLL, memory_order_relaxed);
        (*(void (**)(uint64_t, char **))(*(void *)v29 + 400))(v29, &v36);
        uint64_t v20 = v37;
        if (!v37) {
          goto LABEL_50;
        }
      }
      else
      {
        int v22 = *v9;
        int v23 = *((unsigned __int8 *)v9 + 2);
        if (v22 != 24407 || v23 != 120) {
          goto LABEL_50;
        }
        uint64_t v25 = *(void *)(a1 + 624);
        uint64_t v32 = v8 + 24;
        vDSP_Length v33 = (std::__shared_weak_count *)v8;
        atomic_fetch_add_explicit((atomic_ullong *volatile)v8 + 1, 1uLL, memory_order_relaxed);
        (*(void (**)(uint64_t, char **))(*(void *)v25 + 400))(v25, &v32);
        uint64_t v20 = v33;
        if (!v33) {
          goto LABEL_50;
        }
      }
      goto LABEL_49;
    }
    if (v14 == 11)
    {
      if (**(void **)v9 != 0x657665725F685F57 || *(void *)(*(void *)v9 + 3) != 0x657372657665725FLL)
      {
        uint64_t v9 = *(unsigned __int16 **)v9;
LABEL_29:
        uint64_t v16 = *(void *)v9;
        uint64_t v17 = *(void *)((char *)v9 + 3);
        if (v16 != 0x657665725F785F57 || v17 != 0x657372657665725FLL) {
          goto LABEL_50;
        }
        uint64_t v19 = *(void *)(a1 + 640);
        unint64_t v30 = v8 + 24;
        uint64_t v31 = (std::__shared_weak_count *)v8;
        atomic_fetch_add_explicit((atomic_ullong *volatile)v8 + 1, 1uLL, memory_order_relaxed);
        (*(void (**)(uint64_t, char **))(*(void *)v19 + 400))(v19, &v30);
        uint64_t v20 = v31;
        if (!v31) {
          goto LABEL_50;
        }
LABEL_49:
        nitro::nitro_function::nitro_function(v20);
        goto LABEL_50;
      }
LABEL_48:
      uint64_t v26 = *(void *)(a1 + 672);
      char v34 = v8 + 24;
      int v35 = (std::__shared_weak_count *)v8;
      atomic_fetch_add_explicit((atomic_ullong *volatile)v8 + 1, 1uLL, memory_order_relaxed);
      (*(void (**)(uint64_t, char **))(*(void *)v26 + 400))(v26, &v34);
      uint64_t v20 = v35;
      if (v35) {
        goto LABEL_49;
      }
    }
LABEL_50:
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v8);
    if (v6) {
      nitro::nitro_function::nitro_function(v6);
    }
    if (v5) {
      nitro::nitro_function::nitro_function(v5);
    }
    char v27 = (void *)v1[1];
    if (v27)
    {
      do
      {
        int v28 = v27;
        char v27 = (void *)*v27;
      }
      while (v27);
    }
    else
    {
      do
      {
        int v28 = (void *)v1[2];
        BOOL v13 = *v28 == (void)v1;
        uint64_t v1 = v28;
      }
      while (!v13);
    }
    uint64_t v1 = v28;
    if (v28 == v2) {
      return;
    }
  }
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
}

void sub_192AE9214(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    nitro::nitro_function::nitro_function(a12);
  }
  nitro::nitro_function::nitro_function(v14);
  if (v13) {
    nitro::nitro_function::nitro_function(v13);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
  _Unwind_Resume(a1);
}

void Espresso::rnn_arch_cpu::~rnn_arch_cpu(Espresso::rnn_arch_cpu *this)
{
  Espresso::generic_rnn_arch_kernel_impl::~generic_rnn_arch_kernel_impl(this);

  JUMPOUT(0x192FF16B0);
}

void Espresso::sequence_reverse_kernel_cpu::__launch(uint64_t a1, uint64_t a2, void ***a3, void ***a4)
{
  long long v6 = **a4;
  long long v5 = (std::__shared_weak_count *)(*a4)[1];
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = (std::__shared_weak_count *)(*a3)[1];
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v17, **a4, (std::__shared_weak_count *)(*a4)[1]);
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v15, **a3, (std::__shared_weak_count *)(*a3)[1]);
  LODWORD(v8) = v6[6];
  if ((int)v8 >= 1)
  {
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    int v11 = v6[3] * v6[2] * v6[4] * v6[5];
    uint64_t v12 = v15;
    int v13 = -1;
    uint64_t v14 = v17;
    do
    {
      memcpy((void *)(*(void *)(v12 + 24) + v9), (const void *)(*(void *)(v14 + 24) + 4 * ((int)v8 + v13) * v11), 4 * v11);
      ++v10;
      uint64_t v8 = (int)v6[6];
      --v13;
      v9 += 4 * v11;
    }
    while (v10 < v8);
  }
  if (v16) {
    nitro::nitro_function::nitro_function(v16);
  }
  if (v18) {
    nitro::nitro_function::nitro_function(v18);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  if (v5)
  {
    nitro::nitro_function::nitro_function(v5);
  }
}

void sub_192AE9430(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12)
  {
    nitro::nitro_function::nitro_function(a12);
    if (!v13)
    {
LABEL_3:
      if (!v12) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if (!v13)
  {
    goto LABEL_3;
  }
  nitro::nitro_function::nitro_function(v13);
  if (!v12) {
LABEL_5:
  }
    _Unwind_Resume(exception_object);
LABEL_4:
  nitro::nitro_function::nitro_function(v12);
  goto LABEL_5;
}

void Espresso::sequence_reverse_kernel_cpu::~sequence_reverse_kernel_cpu(Espresso::sequence_reverse_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

void Espresso::sequence_concat_kernel_cpu::__launch(uint64_t a1, uint64_t a2, void ***a3, uint64_t a4)
{
  long long v5 = *a3;
  uint64_t v7 = **a3;
  long long v6 = (std::__shared_weak_count *)(*a3)[1];
  if (*(_DWORD *)(a1 + 280))
  {
    if (v6)
    {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      long long v5 = *a3;
    }
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v35, **a3, (std::__shared_weak_count *)v5[1]);
    uint64_t v21 = *(_DWORD ***)a4;
    int v22 = *(_DWORD ***)(a4 + 8);
    if (*(_DWORD ***)a4 != v22)
    {
      int v23 = v7[3] * v7[2] * v7[4] * v7[5];
      uint64_t v24 = *(char **)(v35 + 24);
      do
      {
        uint64_t v25 = *v21;
        uint64_t v26 = (std::__shared_weak_count *)v21[1];
        if (v26) {
          atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        int v27 = v25[6];
        Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v33, v25, v26);
        int v28 = v23 * v27;
        if (v28 >= 1) {
          memcpy(v24, *(const void **)(v33 + 24), 4 * v28);
        }
        if (v34) {
          nitro::nitro_function::nitro_function(v34);
        }
        if (v26) {
          nitro::nitro_function::nitro_function(v26);
        }
        v24 += 4 * v28;
        v21 += 2;
      }
      while (v21 != v22);
    }
  }
  else
  {
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v35, v7, v6);
    uint64_t v9 = **(_DWORD ***)a4;
    uint64_t v8 = *(std::__shared_weak_count **)(*(void *)a4 + 8);
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    unint64_t v30 = v8;
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v33, v9, v8);
    int v11 = *(int **)(*(void *)a4 + 16);
    uint64_t v10 = *(std::__shared_weak_count **)(*(void *)a4 + 24);
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v31, v11, v10);
    int v12 = v9[6];
    if (v12 != v11[6] || v12 != v7[6])
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Mismatched sequence lengths in sequence concat.");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    if (v12 >= 1)
    {
      uint64_t v13 = v11[2] * (uint64_t)v11[4] * v11[3];
      uint64_t v14 = (char *)(*(void *)(v31 + 24) + 4 * (int)v13 * (v12 - 1));
      uint64_t v15 = *(char **)(v33 + 24);
      size_t v16 = 4 * v9[2] * v9[4] * v9[3];
      size_t v17 = 4 * v13;
      uint64_t v18 = *(char **)(v35 + 24);
      uint64_t v19 = -4 * v13;
      size_t v20 = 4 * v13 + v16;
      do
      {
        memcpy(v18, v15, v16);
        memcpy(&v18[v16], v14, v17);
        v14 += v19;
        v15 += v16;
        v18 += v20;
        --v12;
      }
      while (v12);
    }
    if (v32) {
      nitro::nitro_function::nitro_function(v32);
    }
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
    if (v34) {
      nitro::nitro_function::nitro_function(v34);
    }
    if (v30) {
      nitro::nitro_function::nitro_function(v30);
    }
  }
  if (v36) {
    nitro::nitro_function::nitro_function(v36);
  }
  if (v6)
  {
    nitro::nitro_function::nitro_function(v6);
  }
}

void sub_192AE97A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a12) {
    nitro::nitro_function::nitro_function(a12);
  }
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
  if (a14) {
    nitro::nitro_function::nitro_function(a14);
  }
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  if (v16) {
    nitro::nitro_function::nitro_function(v16);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::sequence_concat_kernel_cpu::~sequence_concat_kernel_cpu(Espresso::sequence_concat_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

void Espresso::sequence_repeat_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t *a3, void ***a4)
{
  uint64_t v6 = *a3;
  uint64_t v7 = *(std::__shared_weak_count **)(*a3 + 8);
  if (v7)
  {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v6 = *a3;
  }
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v18, *(void **)v6, *(std::__shared_weak_count **)(v6 + 8));
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v16, **a4, (std::__shared_weak_count *)(*a4)[1]);
  if (*(int *)(a1 + 280) >= 1)
  {
    int v8 = 0;
    uint64_t v9 = *(char **)(v18 + 24);
    uint64_t v10 = v16;
    LODWORD(v11) = *(_DWORD *)(v16 + 8);
    uint64_t v12 = v16 + 12;
    do
    {
      uint64_t v13 = 0;
      uint64_t v11 = (int)v11;
      do
      {
        v11 *= *(int *)(v12 + v13);
        v13 += 4;
      }
      while (v13 != 12);
      memcpy(v9, *(const void **)(v10 + 24), 4 * v11);
      uint64_t v14 = 0;
      LODWORD(v11) = *(_DWORD *)(v10 + 8);
      uint64_t v15 = (int)v11;
      do
      {
        v15 *= *(int *)(v12 + v14);
        v14 += 4;
      }
      while (v14 != 12);
      v9 += 4 * v15;
      ++v8;
    }
    while (v8 < *(_DWORD *)(a1 + 280));
  }
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
  if (v19) {
    nitro::nitro_function::nitro_function(v19);
  }
  if (v7)
  {
    nitro::nitro_function::nitro_function(v7);
  }
}

void sub_192AE99B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    nitro::nitro_function::nitro_function(a12);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::sequence_repeat_kernel_cpu::~sequence_repeat_kernel_cpu(Espresso::sequence_repeat_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

BOOL Espresso::generic_rnn_arch_kernel_impl::__set_quantized_weight_raw_blob(_DWORD *a1, uint64_t *a2, const std::string *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a6)
  {
    uint64_t v10 = *(void **)a6;
    if (*(void *)a6 && (uint64_t v11 = *(void *)(a6 + 8)) != 0)
    {
      uint64_t v12 = a4;
      uint64_t v114 = *(std::__shared_weak_count **)(a6 + 8);
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
    }
    else
    {
      uint64_t v12 = a4;
      uint64_t v114 = 0;
    }
  }
  else
  {
    uint64_t v12 = a4;
    uint64_t v114 = 0;
    uint64_t v10 = 0;
  }
  int v13 = a1[95];
  int v14 = a1[96];
  if (a1[76]) {
    int v15 = a1[95];
  }
  else {
    int v15 = 4 * v13;
  }
  unsigned __int8 v127 = 0;
  v126[0] = 0;
  v126[1] = 0;
  uint64_t v125 = v126;
  std::string::basic_string[abi:ne180100]<0>(__p, "W_x");
  uint64_t v16 = std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v125, __p, (uint64_t)__p);
  *((_DWORD *)v16 + 14) = v14;
  *((_DWORD *)v16 + 15) = v15;
  if (SHIBYTE(v118) < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "W_x_reverse");
  size_t v17 = std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v125, __p, (uint64_t)__p);
  *((_DWORD *)v17 + 14) = v14;
  *((_DWORD *)v17 + 15) = v15;
  if (SHIBYTE(v118) < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "W_h");
  uint64_t v18 = std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v125, __p, (uint64_t)__p);
  *((_DWORD *)v18 + 14) = v13;
  *((_DWORD *)v18 + 15) = v15;
  if (SHIBYTE(v118) < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "W_h_reverse");
  uint64_t v19 = std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v125, __p, (uint64_t)__p);
  *((_DWORD *)v19 + 14) = v13;
  *((_DWORD *)v19 + 15) = v15;
  if (SHIBYTE(v118) < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "W_z");
  size_t v20 = std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v125, __p, (uint64_t)__p);
  *((_DWORD *)v20 + 14) = v14;
  *((_DWORD *)v20 + 15) = v15;
  if (SHIBYTE(v118) < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "W_r");
  uint64_t v21 = std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v125, __p, (uint64_t)__p);
  *((_DWORD *)v21 + 14) = v14;
  *((_DWORD *)v21 + 15) = v15;
  if (SHIBYTE(v118) < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "W_o");
  int v22 = std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v125, __p, (uint64_t)__p);
  *((_DWORD *)v22 + 14) = v14;
  *((_DWORD *)v22 + 15) = v15;
  if (SHIBYTE(v118) < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "R_z");
  int v23 = std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v125, __p, (uint64_t)__p);
  *((_DWORD *)v23 + 14) = v13;
  *((_DWORD *)v23 + 15) = v15;
  if (SHIBYTE(v118) < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "R_r");
  uint64_t v24 = std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v125, __p, (uint64_t)__p);
  *((_DWORD *)v24 + 14) = v13;
  *((_DWORD *)v24 + 15) = v15;
  if (SHIBYTE(v118) < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "R_o");
  uint64_t v25 = std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v125, __p, (uint64_t)__p);
  *((_DWORD *)v25 + 14) = v13;
  *((_DWORD *)v25 + 15) = v15;
  if (SHIBYTE(v118) < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "b");
  uint64_t v26 = std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v125, __p, (uint64_t)__p);
  *((_DWORD *)v26 + 14) = v15;
  *((_DWORD *)v26 + 15) = 1;
  if (SHIBYTE(v118) < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "b_reverse");
  int v27 = std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v125, __p, (uint64_t)__p);
  *((_DWORD *)v27 + 14) = v15;
  *((_DWORD *)v27 + 15) = 1;
  if (SHIBYTE(v118) < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "p");
  int v28 = std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v125, __p, (uint64_t)__p);
  *((_DWORD *)v28 + 14) = 3 * v13;
  *((_DWORD *)v28 + 15) = 1;
  if (SHIBYTE(v118) < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "p_reverse");
  uint64_t v29 = std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v125, __p, (uint64_t)__p);
  *((_DWORD *)v29 + 14) = 3 * v13;
  *((_DWORD *)v29 + 15) = 1;
  if (SHIBYTE(v118) < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "B_z");
  unint64_t v30 = std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v125, __p, (uint64_t)__p);
  *((_DWORD *)v30 + 14) = v15;
  *((_DWORD *)v30 + 15) = 1;
  if (SHIBYTE(v118) < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "B_r");
  uint64_t v31 = std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v125, __p, (uint64_t)__p);
  *((_DWORD *)v31 + 14) = v15;
  *((_DWORD *)v31 + 15) = 1;
  if (SHIBYTE(v118) < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "B_o");
  uint64_t v32 = std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v125, __p, (uint64_t)__p);
  *((_DWORD *)v32 + 14) = v15;
  *((_DWORD *)v32 + 15) = 1;
  if (SHIBYTE(v118) < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "B_i_z");
  uint64_t v33 = std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v125, __p, (uint64_t)__p);
  *((_DWORD *)v33 + 14) = v15;
  *((_DWORD *)v33 + 15) = 1;
  if (SHIBYTE(v118) < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "B_i_r");
  char v34 = std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v125, __p, (uint64_t)__p);
  *((_DWORD *)v34 + 14) = v15;
  *((_DWORD *)v34 + 15) = 1;
  if (SHIBYTE(v118) < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "B_i_o");
  uint64_t v35 = std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v125, __p, (uint64_t)__p);
  *((_DWORD *)v35 + 14) = v15;
  *((_DWORD *)v35 + 15) = 1;
  if (SHIBYTE(v118) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = v10;
  __p[1] = v114;
  if (v114) {
    atomic_fetch_add_explicit(&v114->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v118 = v12;
  uint64_t v119 = a5;
  uint64_t v36 = *a2;
  long long v37 = (std::__shared_weak_count *)a2[1];
  uint64_t v120 = &v127;
  uint64_t v121 = v36;
  uint64_t v122 = v37;
  if (v37) {
    atomic_fetch_add_explicit(&v37->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v123 = a6;
  uint64_t v124 = a1;
  uint64_t v38 = (uint64_t *)v125;
  if (v125 != v126)
  {
    while (1)
    {
      if (*((char *)v38 + 55) < 0) {
        std::string::__init_copy_ctor_external(&v116, (const std::string::value_type *)v38[4], v38[5]);
      }
      else {
        std::string v116 = *(std::string *)(v38 + 4);
      }
      uint64_t v39 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
      if ((v39 & 0x80u) == 0) {
        std::string::size_type size = HIBYTE(a3->__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = a3->__r_.__value_.__l.__size_;
      }
      if ((v116.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v41 = HIBYTE(v116.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t v41 = v116.__r_.__value_.__l.__size_;
      }
      if (size == v41)
      {
        if ((v116.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          float v42 = &v116;
        }
        else {
          float v42 = (std::string *)v116.__r_.__value_.__r.__words[0];
        }
        if ((v39 & 0x80) != 0)
        {
          if (!memcmp(a3->__r_.__value_.__l.__data_, v42, a3->__r_.__value_.__l.__size_)) {
            goto LABEL_173;
          }
        }
        else
        {
          if (!*((unsigned char *)&a3->__r_.__value_.__s + 23)) {
            goto LABEL_173;
          }
          float v43 = a3;
          while (v43->__r_.__value_.__s.__data_[0] == v42->__r_.__value_.__s.__data_[0])
          {
            float v43 = (const std::string *)((char *)v43 + 1);
            float v42 = (std::string *)((char *)v42 + 1);
            if (!--v39) {
              goto LABEL_173;
            }
          }
        }
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&v128, v41 + 14);
      if ((v128.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        float v44 = &v128;
      }
      else {
        float v44 = (std::string *)v128.__r_.__value_.__r.__words[0];
      }
      if (v41)
      {
        if ((v116.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          float v45 = &v116;
        }
        else {
          float v45 = (std::string *)v116.__r_.__value_.__r.__words[0];
        }
        memmove(v44, v45, v41);
      }
      BOOL v46 = 0;
      strcpy((char *)v44 + v41, "_per_ch_qscale");
      uint64_t v47 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
      if ((v47 & 0x80u) == 0) {
        std::string::size_type v48 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v48 = a3->__r_.__value_.__l.__size_;
      }
      std::string::size_type v49 = HIBYTE(v128.__r_.__value_.__r.__words[2]);
      int v50 = SHIBYTE(v128.__r_.__value_.__r.__words[2]);
      if ((v128.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v49 = v128.__r_.__value_.__l.__size_;
      }
      if (v48 != v49) {
        goto LABEL_100;
      }
      if ((v128.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v51 = &v128;
      }
      else {
        uint64_t v51 = (std::string *)v128.__r_.__value_.__r.__words[0];
      }
      if ((v47 & 0x80) != 0)
      {
        BOOL v46 = memcmp(a3->__r_.__value_.__l.__data_, v51, a3->__r_.__value_.__l.__size_) == 0;
        if ((v50 & 0x80000000) == 0) {
          goto LABEL_101;
        }
      }
      else
      {
        if (*((unsigned char *)&a3->__r_.__value_.__s + 23))
        {
          uint64_t v52 = v47 - 1;
          vDSP_Length v53 = a3;
          do
          {
            int v55 = v53->__r_.__value_.__s.__data_[0];
            vDSP_Length v53 = (const std::string *)((char *)v53 + 1);
            int v54 = v55;
            int v57 = v51->__r_.__value_.__s.__data_[0];
            uint64_t v51 = (std::string *)((char *)v51 + 1);
            int v56 = v57;
            BOOL v58 = v52-- != 0;
            char v59 = v58;
            BOOL v46 = v54 == v56;
          }
          while (v54 == v56 && (v59 & 1) != 0);
LABEL_100:
          if ((SHIBYTE(v128.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_101;
          }
          goto LABEL_104;
        }
        BOOL v46 = 1;
        if ((SHIBYTE(v128.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_101:
          if (v46) {
            goto LABEL_102;
          }
          goto LABEL_105;
        }
      }
LABEL_104:
      operator delete(v128.__r_.__value_.__l.__data_);
      if (v46)
      {
LABEL_102:
        std::string::basic_string[abi:ne180100]<0>(&v128, "per_ch_qscale");
        Espresso::generic_rnn_arch_kernel_impl::__set_quantized_weight_raw_blob(std::shared_ptr<Espresso::abstract_batch> const&,std::string const&,void *,unsigned long,Espresso::base_kernel::set_weight_options *)::$_0::operator()((uint64_t)__p, &v116, (uint64_t)&v128, *((_DWORD *)v38 + 14), *((_DWORD *)v38 + 15));
        goto LABEL_171;
      }
LABEL_105:
      if ((v116.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v60 = HIBYTE(v116.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t v60 = v116.__r_.__value_.__l.__size_;
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&v128, v60 + 13);
      if ((v128.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v61 = &v128;
      }
      else {
        unint64_t v61 = (std::string *)v128.__r_.__value_.__r.__words[0];
      }
      if (v60)
      {
        if ((v116.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v62 = &v116;
        }
        else {
          uint64_t v62 = (std::string *)v116.__r_.__value_.__r.__words[0];
        }
        memmove(v61, v62, v60);
      }
      BOOL v63 = 0;
      strcpy((char *)v61 + v60, "_per_ch_qbias");
      uint64_t v64 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
      if ((v64 & 0x80u) == 0) {
        std::string::size_type v65 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v65 = a3->__r_.__value_.__l.__size_;
      }
      std::string::size_type v66 = HIBYTE(v128.__r_.__value_.__r.__words[2]);
      int v67 = SHIBYTE(v128.__r_.__value_.__r.__words[2]);
      if ((v128.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v66 = v128.__r_.__value_.__l.__size_;
      }
      if (v65 != v66) {
        goto LABEL_133;
      }
      if ((v128.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v68 = &v128;
      }
      else {
        uint64_t v68 = (std::string *)v128.__r_.__value_.__r.__words[0];
      }
      if ((v64 & 0x80) != 0)
      {
        BOOL v63 = memcmp(a3->__r_.__value_.__l.__data_, v68, a3->__r_.__value_.__l.__size_) == 0;
        if ((v67 & 0x80000000) == 0) {
          goto LABEL_134;
        }
      }
      else
      {
        if (*((unsigned char *)&a3->__r_.__value_.__s + 23))
        {
          uint64_t v69 = v64 - 1;
          uint64_t v70 = a3;
          do
          {
            int v72 = v70->__r_.__value_.__s.__data_[0];
            uint64_t v70 = (const std::string *)((char *)v70 + 1);
            int v71 = v72;
            int v74 = v68->__r_.__value_.__s.__data_[0];
            uint64_t v68 = (std::string *)((char *)v68 + 1);
            int v73 = v74;
            BOOL v58 = v69-- != 0;
            char v75 = v58;
            BOOL v63 = v71 == v73;
          }
          while (v71 == v73 && (v75 & 1) != 0);
LABEL_133:
          if ((SHIBYTE(v128.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_134;
          }
          goto LABEL_139;
        }
        BOOL v63 = 1;
        if ((SHIBYTE(v128.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_134:
          if (v63) {
            goto LABEL_135;
          }
          goto LABEL_140;
        }
      }
LABEL_139:
      operator delete(v128.__r_.__value_.__l.__data_);
      if (v63)
      {
LABEL_135:
        std::string::basic_string[abi:ne180100]<0>(&v128, "per_ch_qbias");
        Espresso::generic_rnn_arch_kernel_impl::__set_quantized_weight_raw_blob(std::shared_ptr<Espresso::abstract_batch> const&,std::string const&,void *,unsigned long,Espresso::base_kernel::set_weight_options *)::$_0::operator()((uint64_t)__p, &v116, (uint64_t)&v128, *((_DWORD *)v38 + 14), *((_DWORD *)v38 + 15));
        goto LABEL_171;
      }
LABEL_140:
      if ((v116.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v76 = HIBYTE(v116.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t v76 = v116.__r_.__value_.__l.__size_;
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&v128, v76 + 15);
      if ((v128.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        float v77 = &v128;
      }
      else {
        float v77 = (std::string *)v128.__r_.__value_.__r.__words[0];
      }
      if (v76)
      {
        if ((v116.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v78 = &v116;
        }
        else {
          uint64_t v78 = (std::string *)v116.__r_.__value_.__r.__words[0];
        }
        memmove(v77, v78, v76);
      }
      BOOL v79 = 0;
      strcpy((char *)v77 + v76, "_lut_to_float32");
      uint64_t v80 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
      if ((v80 & 0x80u) == 0) {
        std::string::size_type v81 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v81 = a3->__r_.__value_.__l.__size_;
      }
      std::string::size_type v82 = HIBYTE(v128.__r_.__value_.__r.__words[2]);
      int v83 = SHIBYTE(v128.__r_.__value_.__r.__words[2]);
      if ((v128.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v82 = v128.__r_.__value_.__l.__size_;
      }
      if (v81 != v82) {
        goto LABEL_168;
      }
      if ((v128.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v84 = &v128;
      }
      else {
        uint64_t v84 = (std::string *)v128.__r_.__value_.__r.__words[0];
      }
      if ((v80 & 0x80) != 0)
      {
        BOOL v79 = memcmp(a3->__r_.__value_.__l.__data_, v84, a3->__r_.__value_.__l.__size_) == 0;
        if (v83 < 0) {
          goto LABEL_186;
        }
      }
      else
      {
        if (*((unsigned char *)&a3->__r_.__value_.__s + 23))
        {
          uint64_t v85 = v80 - 1;
          unint64_t v86 = a3;
          do
          {
            int v88 = v86->__r_.__value_.__s.__data_[0];
            unint64_t v86 = (const std::string *)((char *)v86 + 1);
            int v87 = v88;
            int v90 = v84->__r_.__value_.__s.__data_[0];
            uint64_t v84 = (std::string *)((char *)v84 + 1);
            int v89 = v90;
            BOOL v58 = v85-- != 0;
            char v91 = v58;
            BOOL v79 = v87 == v89;
          }
          while (v87 == v89 && (v91 & 1) != 0);
LABEL_168:
          if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0) {
            goto LABEL_186;
          }
          goto LABEL_169;
        }
        BOOL v79 = 1;
        if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0)
        {
LABEL_186:
          operator delete(v128.__r_.__value_.__l.__data_);
          if (!v79)
          {
LABEL_187:
            if ((v116.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v95 = HIBYTE(v116.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v95 = v116.__r_.__value_.__l.__size_;
            }
            std::string::size_type v96 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
            if ((v96 & 0x80u) != 0) {
              std::string::size_type v96 = a3->__r_.__value_.__l.__size_;
            }
            if (v96 != v95 + 3) {
              goto LABEL_173;
            }
            std::string::basic_string(&v128, a3, 0, v95, (std::allocator<char> *)&v115);
            if ((v128.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v97 = HIBYTE(v128.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v97 = v128.__r_.__value_.__l.__size_;
            }
            std::string::size_type v98 = HIBYTE(v116.__r_.__value_.__r.__words[2]);
            if ((v116.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              std::string::size_type v98 = v116.__r_.__value_.__l.__size_;
            }
            if (v97 != v98)
            {
              if ((*((unsigned char *)&v128.__r_.__value_.__s + 23) & 0x80) == 0) {
                goto LABEL_173;
              }
LABEL_172:
              operator delete(v128.__r_.__value_.__l.__data_);
              goto LABEL_173;
            }
            if ((v116.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint8x8_t v99 = &v116;
            }
            else {
              uint8x8_t v99 = (std::string *)v116.__r_.__value_.__r.__words[0];
            }
            if ((*((unsigned char *)&v128.__r_.__value_.__s + 23) & 0x80) != 0)
            {
              float v104 = (void *)v128.__r_.__value_.__r.__words[0];
              int v105 = memcmp(v128.__r_.__value_.__l.__data_, v99, v128.__r_.__value_.__l.__size_);
              operator delete(v104);
              if (v105) {
                goto LABEL_173;
              }
            }
            else if (*((unsigned char *)&v128.__r_.__value_.__s + 23))
            {
              uint64_t v100 = 0;
              do
              {
                int v101 = v128.__r_.__value_.__s.__data_[v100];
                int v102 = v99->__r_.__value_.__s.__data_[v100];
                BOOL v103 = v101 != v102 || HIBYTE(v128.__r_.__value_.__r.__words[2]) - 1 == v100++;
              }
              while (!v103);
              if (v101 != v102) {
                goto LABEL_173;
              }
            }
            std::string::size_type v106 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
            if ((v106 & 0x80u) == 0) {
              unint64_t v107 = a3;
            }
            else {
              unint64_t v107 = (const std::string *)a3->__r_.__value_.__r.__words[0];
            }
            if (v107->__r_.__value_.__s.__data_[v95] != 95) {
              goto LABEL_173;
            }
            std::string::size_type v108 = (std::string::size_type)v107 + v95;
            int v109 = *(unsigned __int8 *)(v108 + 1);
            if (v109 != 85 && v109 != 83) {
              goto LABEL_173;
            }
            if (*(unsigned __int8 *)(v108 + 2) - 49 > 7) {
              goto LABEL_173;
            }
            if ((v106 & 0x80u) != 0) {
              std::string::size_type v106 = a3->__r_.__value_.__l.__size_;
            }
            std::string::basic_string(&v115, a3, v106 - 2, 2uLL, (std::allocator<char> *)v129);
            uint64_t v110 = std::string::insert(&v115, 0, "W_");
            std::string v128 = *v110;
            v110->__r_.__value_.__l.__size_ = 0;
            v110->__r_.__value_.__r.__words[2] = 0;
            v110->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v115.__r_.__value_.__l.__data_);
            }
            Espresso::generic_rnn_arch_kernel_impl::__set_quantized_weight_raw_blob(std::shared_ptr<Espresso::abstract_batch> const&,std::string const&,void *,unsigned long,Espresso::base_kernel::set_weight_options *)::$_0::operator()((uint64_t)__p, &v116, (uint64_t)&v128, *((_DWORD *)v38 + 14), *((_DWORD *)v38 + 15));
            goto LABEL_171;
          }
          goto LABEL_170;
        }
      }
LABEL_169:
      if (!v79) {
        goto LABEL_187;
      }
LABEL_170:
      std::string::basic_string[abi:ne180100]<0>(&v128, "lut_to_float32");
      Espresso::generic_rnn_arch_kernel_impl::__set_quantized_weight_raw_blob(std::shared_ptr<Espresso::abstract_batch> const&,std::string const&,void *,unsigned long,Espresso::base_kernel::set_weight_options *)::$_0::operator()((uint64_t)__p, &v116, (uint64_t)&v128, *((_DWORD *)v38 + 14), *((_DWORD *)v38 + 15));
LABEL_171:
      if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0) {
        goto LABEL_172;
      }
LABEL_173:
      int v92 = v127;
      if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v116.__r_.__value_.__l.__data_);
      }
      if (!v92)
      {
        uint64_t v93 = (char *)v38[1];
        if (v93)
        {
          do
          {
            uint64_t v94 = (char **)v93;
            uint64_t v93 = *(char **)v93;
          }
          while (v93);
        }
        else
        {
          do
          {
            uint64_t v94 = (char **)v38[2];
            BOOL v103 = *v94 == (char *)v38;
            uint64_t v38 = (uint64_t *)v94;
          }
          while (!v103);
        }
        uint64_t v38 = (uint64_t *)v94;
        if (v94 != v126) {
          continue;
        }
      }
      break;
    }
  }
  int v111 = v127;
  if (v37) {
    nitro::nitro_function::nitro_function(v37);
  }
  if (v114)
  {
    nitro::nitro_function::nitro_function(v114);
    std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::destroy(v126[0]);
    nitro::nitro_function::nitro_function(v114);
  }
  else
  {
    std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::destroy(v126[0]);
  }
  return v111 != 0;
}

void sub_192AEA600(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char *a37)
{
  if (*(char *)(v37 - 105) < 0) {
    operator delete(*(void **)(v37 - 128));
  }
  if (a23 < 0) {
    operator delete(__p);
  }
  Espresso::generic_rnn_arch_kernel_impl::__set_quantized_weight_raw_blob(std::shared_ptr<Espresso::abstract_batch> const&,std::string const&,void *,unsigned long,Espresso::base_kernel::set_weight_options *)::$_0::~$_0((uint64_t)&a24);
  std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::destroy(a37);
  if (a11) {
    nitro::nitro_function::nitro_function(a11);
  }
  _Unwind_Resume(a1);
}

void Espresso::generic_rnn_arch_kernel_impl::__set_quantized_weight_raw_blob(std::shared_ptr<Espresso::abstract_batch> const&,std::string const&,void *,unsigned long,Espresso::base_kernel::set_weight_options *)::$_0::operator()(uint64_t a1, void *a2, uint64_t a3, int a4, int a5)
{
  uint64_t v10 = *(void *)(a1 + 64);
  uint64_t v11 = *(void **)(v10 + 472);
  if (!v11) {
    goto LABEL_8;
  }
  uint64_t v12 = (void *)(v10 + 472);
  do
  {
    BOOL v13 = std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v11 + 4, a2);
    int v14 = v11 + 1;
    if (!v13)
    {
      int v14 = v11;
      uint64_t v12 = v11;
    }
    uint64_t v11 = (void *)*v14;
  }
  while (*v14);
  if (v12 == (void *)(v10 + 472)
    || std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, v12 + 4))
  {
LABEL_8:
    int v15 = *(_DWORD *)(v10 + 304);
    uint64_t v16 = (char *)operator new(0xD0uLL);
    *((void *)v16 + 1) = 0;
    *((void *)v16 + 2) = 0;
    *(void *)uint64_t v16 = &unk_1EE388110;
    size_t v17 = v16 + 24;
    uint64_t v19 = *(void *)(v10 + 8);
    uint64_t v18 = *(std::__shared_weak_count **)(v10 + 16);
    if (v15)
    {
      if (v18)
      {
        atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
        *(_OWORD *)(v16 + 104) = 0u;
        *(_OWORD *)(v16 + 120) = 0u;
        *(_OWORD *)(v16 + 72) = 0u;
        *(_OWORD *)(v16 + 88) = 0u;
        *(_OWORD *)(v16 + 40) = 0u;
        *(_OWORD *)(v16 + 56) = 0u;
        _OWORD *v17 = 0u;
        *((void *)v16 + 17) = v19;
        *((void *)v16 + 18) = v18;
        atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      else
      {
        *(_OWORD *)(v16 + 104) = 0u;
        *(_OWORD *)(v16 + 120) = 0u;
        *(_OWORD *)(v16 + 72) = 0u;
        *(_OWORD *)(v16 + 88) = 0u;
        *(_OWORD *)(v16 + 40) = 0u;
        *(_OWORD *)(v16 + 56) = 0u;
        _OWORD *v17 = 0u;
        *((void *)v16 + 17) = v19;
        *((void *)v16 + 18) = 0;
      }
      *((void *)v16 + 19) = 0x100000001;
      *((_DWORD *)v16 + 40) = a4;
      *((_DWORD *)v16 + 41) = a5;
      *((void *)v16 + 21) = 0x100000000;
      v16[176] = 0;
      *((void *)v16 + 24) = 0;
      *((void *)v16 + 25) = 0;
      *(void *)(v16 + 180) = 0;
      v16[188] = 0;
      if (v18) {
        nitro::nitro_function::nitro_function(v18);
      }
    }
    else
    {
      if (v18)
      {
        atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
        *(_OWORD *)(v16 + 104) = 0u;
        *(_OWORD *)(v16 + 120) = 0u;
        *(_OWORD *)(v16 + 72) = 0u;
        *(_OWORD *)(v16 + 88) = 0u;
        *(_OWORD *)(v16 + 40) = 0u;
        *(_OWORD *)(v16 + 56) = 0u;
        _OWORD *v17 = 0u;
        *((void *)v16 + 17) = v19;
        *((void *)v16 + 18) = v18;
        atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      else
      {
        *(_OWORD *)(v16 + 104) = 0u;
        *(_OWORD *)(v16 + 120) = 0u;
        *(_OWORD *)(v16 + 72) = 0u;
        *(_OWORD *)(v16 + 88) = 0u;
        *(_OWORD *)(v16 + 40) = 0u;
        *(_OWORD *)(v16 + 56) = 0u;
        _OWORD *v17 = 0u;
        *((void *)v16 + 17) = v19;
        *((void *)v16 + 18) = 0;
      }
      *((void *)v16 + 19) = 0x100000001;
      *((_DWORD *)v16 + 40) = a4;
      *((_DWORD *)v16 + 41) = a5;
      *((void *)v16 + 21) = 0x400000000;
      v16[176] = 0;
      *((void *)v16 + 24) = 0;
      *((void *)v16 + 25) = 0;
      *(void *)(v16 + 180) = 0;
      v16[188] = 0;
      if (v18) {
        nitro::nitro_function::nitro_function(v18);
      }
    }
    size_t v20 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v10 + 464), a2, (uint64_t)a2);
    *(void *)&long long v21 = v16 + 24;
    *((void *)&v21 + 1) = v16;
    int v22 = (std::__shared_weak_count *)v20[8];
    *(_OWORD *)(v20 + 7) = v21;
    if (v22) {
      nitro::nitro_function::nitro_function(v22);
    }
  }
  int v23 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v10 + 464), a2, (uint64_t)a2);
  Espresso::quantized_weights_helper::__set_weight_raw_blob((uint64_t)v23[7], v25, v26, v27, v24, a3, *(char **)(a1 + 16), *(void *)(a1 + 24), *(uint64_t **)(a1 + 56));
  **(unsigned char **)(a1 + 32) = 1;
}

void sub_192AEA990(_Unwind_Exception *a1)
{
  nitro::nitro_function::nitro_function(v1);
  _Unwind_Resume(a1);
}

uint64_t Espresso::generic_rnn_arch_kernel_impl::__set_quantized_weight_raw_blob(std::shared_ptr<Espresso::abstract_batch> const&,std::string const&,void *,unsigned long,Espresso::base_kernel::set_weight_options *)::$_0::~$_0(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  return a1;
}

uint64_t **std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a1 + 1;
  long long v5 = a1[1];
  uint64_t v7 = a1 + 1;
  int v8 = a1 + 1;
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v7 = (uint64_t **)v5;
        uint64_t v10 = v5 + 4;
        if (!std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, v5 + 4)) {
          break;
        }
        long long v5 = *v7;
        int v8 = v7;
        if (!*v7) {
          goto LABEL_7;
        }
      }
      if (!std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v10, a2)) {
        return v7;
      }
      int v8 = v7 + 1;
      long long v5 = v7[1];
      if (!v5) {
        goto LABEL_7;
      }
    }
  }
  else
  {
LABEL_7:
    uint64_t v11 = operator new(0x48uLL);
    v16[0] = v11;
    v16[1] = v6;
    char v17 = 0;
    uint64_t v12 = (std::string *)(v11 + 4);
    if (*(char *)(a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
    }
    else
    {
      *(_OWORD *)&v12->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
      v11[6] = *(void *)(a3 + 16);
    }
    v11[7] = 0;
    v11[8] = 0;
    char v17 = 1;
    *uint64_t v11 = 0;
    v11[1] = 0;
    v11[2] = v7;
    *int v8 = v11;
    BOOL v13 = (uint64_t *)**a1;
    int v14 = v11;
    if (v13)
    {
      *a1 = v13;
      int v14 = *v8;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v14);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    v16[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>>>>::reset[abi:ne180100]((uint64_t)v16);
  }
  return (uint64_t **)v11;
}

void sub_192AEAB14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::params_io<Espresso::rnn_arch_params>(uint64_t a1, uint64_t a2, int a3)
{
  if (!a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v8, "alpha");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v8, &v10);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v10, (float *)(a2 + 8));
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (v11) {
      nitro::nitro_function::nitro_function(v11);
    }
    if (v9 < 0) {
      operator delete(v8[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v8, "beta");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v8, &v10);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v10, (float *)(a2 + 12));
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (v11) {
      nitro::nitro_function::nitro_function(v11);
    }
    if (v9 < 0) {
      operator delete(v8[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v8, "mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v8, &v10);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v10, (_DWORD *)a2);
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (v11) {
      nitro::nitro_function::nitro_function(v11);
    }
    if (v9 < 0) {
      operator delete(v8[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v8, "nonlinearity_type");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v8, &v10);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v10, (_DWORD *)(a2 + 4));
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (v11) {
      nitro::nitro_function::nitro_function(v11);
    }
    if (v9 < 0) {
      operator delete(v8[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v8, "nonlinearity_alpha");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v8, &v10);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v10, (float *)(a2 + 8));
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (v11) {
      nitro::nitro_function::nitro_function(v11);
    }
    if (v9 < 0) {
      operator delete(v8[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v8, "nonlinearity_beta");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v8, &v10);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v10, (float *)(a2 + 12));
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (v11) {
      nitro::nitro_function::nitro_function(v11);
    }
    if (v9 < 0) {
      operator delete(v8[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v8, "quantization_mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v8, &v10);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v10, (_DWORD *)(a2 + 92));
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (v11) {
      nitro::nitro_function::nitro_function(v11);
    }
    if (v9 < 0) {
      operator delete(v8[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v8, "quantization_scale_x");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v8, &v10);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v10, (float *)(a2 + 116));
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (v11) {
      nitro::nitro_function::nitro_function(v11);
    }
    if (v9 < 0) {
      operator delete(v8[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v8, "quantization_scale_x_reverse");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v8, &v10);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v10, (float *)(a2 + 120));
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (v11) {
      nitro::nitro_function::nitro_function(v11);
    }
    if (v9 < 0) {
      operator delete(v8[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v8, "quantization_scale_h");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v8, &v10);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v10, (float *)(a2 + 124));
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (v11) {
      nitro::nitro_function::nitro_function(v11);
    }
    if (v9 < 0) {
      operator delete(v8[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v8, "quantization_scale_h_reverse");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v8, &v10);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v10, (float *)(a2 + 128));
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (v11) {
      nitro::nitro_function::nitro_function(v11);
    }
    if (v9 < 0) {
      operator delete(v8[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v8, "quantization_simple_mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v8, &v10);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v10, (unsigned char *)(a2 + 132));
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (v11) {
      nitro::nitro_function::nitro_function(v11);
    }
    if (v9 < 0) {
      operator delete(v8[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v8, "internal_nonlinearity_type");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v8, &v10);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v10, (_DWORD *)(a2 + 16));
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (v11) {
      nitro::nitro_function::nitro_function(v11);
    }
    if (v9 < 0) {
      operator delete(v8[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v8, "internal_nonlinearity_alpha");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v8, &v10);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v10, (float *)(a2 + 20));
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (v11) {
      nitro::nitro_function::nitro_function(v11);
    }
    if (v9 < 0) {
      operator delete(v8[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v8, "internal_nonlinearity_beta");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v8, &v10);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v10, (float *)(a2 + 24));
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (v11) {
      nitro::nitro_function::nitro_function(v11);
    }
    if (v9 < 0) {
      operator delete(v8[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v8, "hidden_size");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v8, &v10);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v10, (_DWORD *)(a2 + 76));
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (v11) {
      nitro::nitro_function::nitro_function(v11);
    }
    if (v9 < 0) {
      operator delete(v8[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v8, "input_size");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v8, &v10);
    uint64_t v7 = (int *)(a2 + 80);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v10, (_DWORD *)(a2 + 80));
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (v11) {
      nitro::nitro_function::nitro_function(v11);
    }
    if (v9 < 0) {
      operator delete(v8[0]);
    }
    if (*v7 <= 0) {
      *uint64_t v7 = *(_DWORD *)(a2 + 76);
    }
    std::string::basic_string[abi:ne180100]<0>(v8, "lstm_forget_bias");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v8, &v10);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v10, (float *)(a2 + 84));
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (v11) {
      nitro::nitro_function::nitro_function(v11);
    }
    if (v9 < 0) {
      operator delete(v8[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v8, "lstm_has_peepholes");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v8, &v10);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v10, (_DWORD *)(a2 + 88));
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (v11) {
      nitro::nitro_function::nitro_function(v11);
    }
    if (v9 < 0) {
      operator delete(v8[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v8, "encoder_output_sequence");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v8, &v10);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v10, (_DWORD *)(a2 + 144));
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (v11) {
      nitro::nitro_function::nitro_function(v11);
    }
    if (v9 < 0) {
      operator delete(v8[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v8, "arch");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v8, &v10);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v10, (_DWORD *)(a2 + 136));
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (v11) {
      nitro::nitro_function::nitro_function(v11);
    }
    if (v9 < 0) {
      operator delete(v8[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v8, "encoder_bidirectional_mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v8, &v10);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v10, (_DWORD *)(a2 + 148));
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (v11) {
      nitro::nitro_function::nitro_function(v11);
    }
    if (v9 < 0) {
      operator delete(v8[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v8, "internal_nonlinearity_second_type");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v8, &v10);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v10, (_DWORD *)(a2 + 28));
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (v11) {
      nitro::nitro_function::nitro_function(v11);
    }
    if (v9 < 0) {
      operator delete(v8[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v8, "internal_nonlinearity_second_alpha");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v8, &v10);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v10, (float *)(a2 + 32));
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (v11) {
      nitro::nitro_function::nitro_function(v11);
    }
    if (v9 < 0) {
      operator delete(v8[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v8, "internal_nonlinearity_second_beta");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v8, &v10);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v10, (float *)(a2 + 36));
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (v11) {
      nitro::nitro_function::nitro_function(v11);
    }
    if (v9 < 0) {
      operator delete(v8[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v8, "nonlinearity_bidir_type");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v8, &v10);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v10, (_DWORD *)(a2 + 40));
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (v11) {
      nitro::nitro_function::nitro_function(v11);
    }
    if (v9 < 0) {
      operator delete(v8[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v8, "nonlinearity_bidir_alpha");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v8, &v10);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v10, (float *)(a2 + 44));
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (v11) {
      nitro::nitro_function::nitro_function(v11);
    }
    if (v9 < 0) {
      operator delete(v8[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v8, "nonlinearity_bidir_beta");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v8, &v10);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v10, (float *)(a2 + 48));
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (v11) {
      nitro::nitro_function::nitro_function(v11);
    }
    if (v9 < 0) {
      operator delete(v8[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v8, "internal_nonlinearity_bidir_type");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v8, &v10);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v10, (_DWORD *)(a2 + 52));
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (v11) {
      nitro::nitro_function::nitro_function(v11);
    }
    if (v9 < 0) {
      operator delete(v8[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v8, "internal_nonlinearity_bidir_alpha");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v8, &v10);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v10, (float *)(a2 + 56));
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (v11) {
      nitro::nitro_function::nitro_function(v11);
    }
    if (v9 < 0) {
      operator delete(v8[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v8, "internal_nonlinearity_bidir_beta");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v8, &v10);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v10, (float *)(a2 + 60));
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (v11) {
      nitro::nitro_function::nitro_function(v11);
    }
    if (v9 < 0) {
      operator delete(v8[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v8, "internal_nonlinearity_second_bidir_type");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v8, &v10);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v10, (_DWORD *)(a2 + 64));
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (v11) {
      nitro::nitro_function::nitro_function(v11);
    }
    if (v9 < 0) {
      operator delete(v8[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v8, "internal_nonlinearity_second_bidir_alpha");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v8, &v10);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v10, (float *)(a2 + 68));
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (v11) {
      nitro::nitro_function::nitro_function(v11);
    }
    if (v9 < 0) {
      operator delete(v8[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v8, "internal_nonlinearity_second_bidir_beta");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v8, &v10);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v10, (float *)(a2 + 72));
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (v11) {
      nitro::nitro_function::nitro_function(v11);
    }
    if (v9 < 0) {
      operator delete(v8[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v8, "bias_vector_flag");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v8, &v10);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v10, (_DWORD *)(a2 + 96));
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (v11) {
      nitro::nitro_function::nitro_function(v11);
    }
    if (v9 < 0) {
      operator delete(v8[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v8, "forget_bias");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v8, &v10);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v10, (_DWORD *)(a2 + 100));
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (v11) {
      nitro::nitro_function::nitro_function(v11);
    }
    if (v9 < 0) {
      operator delete(v8[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v8, "cell_clip_threshold");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v8, &v10);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v10, (float *)(a2 + 104));
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (v11) {
      nitro::nitro_function::nitro_function(v11);
    }
    if (v9 < 0) {
      operator delete(v8[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v8, "reset_after");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v8, &v10);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v10, (unsigned char *)(a2 + 133));
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (v11) {
      nitro::nitro_function::nitro_function(v11);
    }
    if (v9 < 0) {
      operator delete(v8[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v8, "hidden_bias");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v8, &v10);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v10, (unsigned char *)(a2 + 134));
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (v11) {
      nitro::nitro_function::nitro_function(v11);
    }
    if (v9 < 0) {
      operator delete(v8[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v8, "input_bias");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v8, &v10);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v10, (unsigned char *)(a2 + 135));
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (v11) {
      nitro::nitro_function::nitro_function(v11);
    }
    if (v9 < 0) {
      operator delete(v8[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v8, "coupled_input_forget");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v8, &v10);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v10, (_DWORD *)(a2 + 108));
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (v11) {
      nitro::nitro_function::nitro_function(v11);
    }
    if (v9 < 0) {
      operator delete(v8[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v8, "max_batch_size");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v8, &v10);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v10, (_DWORD *)(a2 + 112));
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (v11) {
      nitro::nitro_function::nitro_function(v11);
    }
    if (v9 < 0) {
      operator delete(v8[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v8, "nd_mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v8, &v10);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v10, (unsigned char *)(a2 + 152));
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (v11) {
      nitro::nitro_function::nitro_function(v11);
    }
    if (v9 < 0) {
      operator delete(v8[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v8, "dynamic_length");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v8, &v10);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v10, (unsigned char *)(a2 + 153));
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (v11) {
      nitro::nitro_function::nitro_function(v11);
    }
    if (v9 < 0) {
      operator delete(v8[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v8, "override_eng");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v8, &v10);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v10, (_DWORD *)(a2 + 140));
    goto LABEL_539;
  }
  std::string::basic_string[abi:ne180100]<0>(v8, "alpha");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v8, &v10);
  (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v10 + 216))(v10, __p, a2 + 8);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v8, "beta");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v8, &v10);
  (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v10 + 216))(v10, __p, a2 + 12);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v8, "mode");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v8, &v10);
  (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v10 + 160))(v10, __p, a2);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v8, "nonlinearity_type");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v8, &v10);
  (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v10 + 160))(v10, __p, a2 + 4);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v8, "nonlinearity_alpha");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v8, &v10);
  (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v10 + 216))(v10, __p, a2 + 8);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v8, "nonlinearity_beta");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v8, &v10);
  (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v10 + 216))(v10, __p, a2 + 12);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v8, "quantization_mode");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v8, &v10);
  (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v10 + 160))(v10, __p, a2 + 92);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v8, "quantization_scale_x");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v8, &v10);
  (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v10 + 216))(v10, __p, a2 + 116);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v8, "quantization_scale_x_reverse");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v8, &v10);
  (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v10 + 216))(v10, __p, a2 + 120);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v8, "quantization_scale_h");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v8, &v10);
  (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v10 + 216))(v10, __p, a2 + 124);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v8, "quantization_scale_h_reverse");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v8, &v10);
  (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v10 + 216))(v10, __p, a2 + 128);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v8, "quantization_simple_mode");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v8, &v10);
  (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v10 + 208))(v10, __p, a2 + 132);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v8, "internal_nonlinearity_type");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v8, &v10);
  (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v10 + 160))(v10, __p, a2 + 16);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v8, "internal_nonlinearity_alpha");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v8, &v10);
  (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v10 + 216))(v10, __p, a2 + 20);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v8, "internal_nonlinearity_beta");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v8, &v10);
  (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v10 + 216))(v10, __p, a2 + 24);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v8, "hidden_size");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v8, &v10);
  (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v10 + 160))(v10, __p, a2 + 76);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  if (*(int *)(a2 + 80) >= 1)
  {
    std::string::basic_string[abi:ne180100]<0>(v8, "input_size");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v8, &v10);
    (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v10 + 160))(v10, __p, a2 + 80);
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (v11) {
      nitro::nitro_function::nitro_function(v11);
    }
    if (v9 < 0) {
      operator delete(v8[0]);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(v8, "lstm_forget_bias");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v8, &v10);
  (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v10 + 216))(v10, __p, a2 + 84);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v8, "lstm_has_peepholes");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v8, &v10);
  (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v10 + 160))(v10, __p, a2 + 88);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v8, "encoder_output_sequence");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v8, &v10);
  (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v10 + 160))(v10, __p, a2 + 144);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v8, "arch");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v8, &v10);
  (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v10 + 160))(v10, __p, a2 + 136);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v8, "encoder_bidirectional_mode");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v8, &v10);
  (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v10 + 160))(v10, __p, a2 + 148);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v8, "internal_nonlinearity_second_type");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v8, &v10);
  (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v10 + 160))(v10, __p, a2 + 28);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v8, "internal_nonlinearity_second_alpha");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v8, &v10);
  (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v10 + 216))(v10, __p, a2 + 32);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v8, "internal_nonlinearity_second_beta");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v8, &v10);
  (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v10 + 216))(v10, __p, a2 + 36);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v8, "nonlinearity_bidir_type");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v8, &v10);
  (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v10 + 160))(v10, __p, a2 + 40);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v8, "nonlinearity_bidir_alpha");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v8, &v10);
  (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v10 + 216))(v10, __p, a2 + 44);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v8, "nonlinearity_bidir_beta");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v8, &v10);
  (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v10 + 216))(v10, __p, a2 + 48);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  if (*(_DWORD *)(a2 + 148))
  {
    std::string::basic_string[abi:ne180100]<0>(v8, "internal_nonlinearity_bidir_type");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v8, &v10);
    (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v10 + 160))(v10, __p, a2 + 52);
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (v11) {
      nitro::nitro_function::nitro_function(v11);
    }
    if (v9 < 0) {
      operator delete(v8[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v8, "internal_nonlinearity_bidir_alpha");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v8, &v10);
    (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v10 + 216))(v10, __p, a2 + 56);
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (v11) {
      nitro::nitro_function::nitro_function(v11);
    }
    if (v9 < 0) {
      operator delete(v8[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v8, "internal_nonlinearity_bidir_beta");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v8, &v10);
    (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v10 + 216))(v10, __p, a2 + 60);
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (v11) {
      nitro::nitro_function::nitro_function(v11);
    }
    if (v9 < 0) {
      operator delete(v8[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v8, "internal_nonlinearity_second_bidir_type");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v8, &v10);
    (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v10 + 160))(v10, __p, a2 + 64);
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (v11) {
      nitro::nitro_function::nitro_function(v11);
    }
    if (v9 < 0) {
      operator delete(v8[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v8, "internal_nonlinearity_second_bidir_alpha");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v8, &v10);
    (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v10 + 216))(v10, __p, a2 + 68);
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (v11) {
      nitro::nitro_function::nitro_function(v11);
    }
    if (v9 < 0) {
      operator delete(v8[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v8, "internal_nonlinearity_second_bidir_beta");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v8, &v10);
    (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v10 + 216))(v10, __p, a2 + 72);
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (v11) {
      nitro::nitro_function::nitro_function(v11);
    }
    if (v9 < 0) {
      operator delete(v8[0]);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(v8, "bias_vector_flag");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v8, &v10);
  (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v10 + 160))(v10, __p, a2 + 96);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v8, "forget_bias");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v8, &v10);
  (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v10 + 160))(v10, __p, a2 + 100);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v8, "cell_clip_threshold");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v8, &v10);
  (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v10 + 216))(v10, __p, a2 + 104);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v8, "reset_after");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v8, &v10);
  (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v10 + 208))(v10, __p, a2 + 133);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v8, "hidden_bias");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v8, &v10);
  (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v10 + 208))(v10, __p, a2 + 134);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v8, "input_bias");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v8, &v10);
  (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v10 + 208))(v10, __p, a2 + 135);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v8, "coupled_input_forget");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v8, &v10);
  (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v10 + 160))(v10, __p, a2 + 108);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v8, "max_batch_size");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v8, &v10);
  (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v10 + 160))(v10, __p, a2 + 112);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  if (*(unsigned char *)(a2 + 152))
  {
    std::string::basic_string[abi:ne180100]<0>(v8, "nd_mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v8, &v10);
    (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v10 + 208))(v10, __p, a2 + 152);
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (v11) {
      nitro::nitro_function::nitro_function(v11);
    }
    if (v9 < 0) {
      operator delete(v8[0]);
    }
  }
  if (*(unsigned char *)(a2 + 153))
  {
    std::string::basic_string[abi:ne180100]<0>(v8, "dynamic_length");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v8, &v10);
    (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v10 + 208))(v10, __p, a2 + 153);
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (v11) {
      nitro::nitro_function::nitro_function(v11);
    }
    if (v9 < 0) {
      operator delete(v8[0]);
    }
  }
  int v6 = *(_DWORD *)(a2 + 140);
  uint64_t v5 = a2 + 140;
  if (v6)
  {
    std::string::basic_string[abi:ne180100]<0>(v8, "override_eng");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v8, &v10);
    (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v10 + 160))(v10, __p, v5);
LABEL_539:
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (v11) {
      nitro::nitro_function::nitro_function(v11);
    }
    if (v9 < 0) {
      operator delete(v8[0]);
    }
  }
}

void sub_192AED194(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::params_io<Espresso::sequence_concat_params>(uint64_t a1, _DWORD *a2, int a3)
{
  if (a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v5, "simple_concat");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v5, &v7);
    (*(void (**)(uint64_t, void **, _DWORD *))(*(void *)v7 + 160))(v7, &__p, a2);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v5, "simple_concat");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v5, &v7);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v7, a2);
  }
  if (v10 < 0) {
    operator delete(__p);
  }
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  if (v6 < 0) {
    operator delete(v5[0]);
  }
}

void sub_192AED568(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::params_io<Espresso::sequence_repeat_params>(uint64_t a1, _DWORD *a2, int a3)
{
  if (a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v5, "n_repetitions");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v5, &v7);
    (*(void (**)(uint64_t, void **, _DWORD *))(*(void *)v7 + 160))(v7, &__p, a2);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v5, "n_repetitions");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v5, &v7);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v7, a2);
  }
  if (v10 < 0) {
    operator delete(__p);
  }
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  if (v6 < 0) {
    operator delete(v5[0]);
  }
}

void sub_192AED678(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::operator>>(uint64_t a1, uint64_t a2)
{
}

{
  Espresso::SerDes::params_io<Espresso::convolution_uniforms>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::pool_params>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::lrn_params>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::softmax_params>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::inner_product_uniforms>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::layer_shape>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::concat_params>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::split_params>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::upsample_kernel_params>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::elementwise_params>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::activation_params>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::axpby_params>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::l2_norm_params>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::bias_params>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::batchnorm_params>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::dropout_params>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::reshape_params>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::reshape_like_params>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::vimage2espresso_param>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::blob_numerical_properties>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::reduce_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::general_padding_params>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::prediction_smoothing_params>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::space_to_batch_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::broadcast_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::lambda_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::patch_extractor_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::crop_and_resize_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::cf_branch_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::dynamic_dequantize_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::spatial_transformer_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::cf_call_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::topk_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::general_concat_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::alloc_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::load_global_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::store_global_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::scatter_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::load_random_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::matrix_band_part_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::fill_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::tensor_zero_pad_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::squeeze_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::array_gather_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::instancenorm_1d_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::gumbel_max_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::builtin_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::general_slice_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::cross_entropy_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::non_maximum_suppression_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::sgd_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::gather_nd_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::adam_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::scatter_nd_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::one_hot_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::wg_transform_params>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::grid_sampling_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::resample_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::self_attention_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::loopkit_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::argsort_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::pool3d_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::conv3d_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::static_quantize_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::static_dequantize_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::general_slice_update_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::einsum_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::foreign_network_storage_blob_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::foreign_network_weight_file_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::tunneled_ane_op_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::tunneled_unit_bottom_layout_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::tunneled_unit_top_layout_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::tunneled_ane_unit_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::brick_params>(a1, a2, 0);
}

void Espresso::SerDes::operator>>(void *a1, uint64_t a2)
{
  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 120))(&v4);
    Espresso::SerDes::params_io<Espresso::rnn_arch_params>(v4, a2, 0);
    if (v5) {
      nitro::nitro_function::nitro_function(v5);
    }
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 120))(&v4);
    Espresso::SerDes::params_io<Espresso::convolution_uniforms>(v4, a2, 0);
    if (v5) {
      nitro::nitro_function::nitro_function(v5);
    }
  }
}

{
  Espresso::convolution_uniforms *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  Espresso::convolution_uniforms *v15;
  char *v16;
  Espresso::convolution_uniforms *v17;
  Espresso::convolution_uniforms *v18;
  long long v19;
  long long v20;
  long long v21;
  long long v22;
  long long v23;
  long long v24;
  long long v25;
  long long v26;
  uint64_t v27;
  uint64_t v28;
  Espresso::convolution_uniforms *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void **v35;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 128))(&v33);
    uint64_t v4 = *(Espresso::convolution_uniforms **)a2;
    *(void *)(a2 + 8) = *(void *)a2;
    uint64_t v5 = v34 - v33;
    if (v34 == v33)
    {
      int v15 = v4;
    }
    else
    {
      char v6 = v5 >> 4;
      uint64_t v7 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*(void *)(a2 + 16) - (void)v4) >> 3);
      if (v7 >= v5 >> 4)
      {
        int32x2_t v27 = 168 * v6;
        int v15 = (Espresso::convolution_uniforms *)((char *)v4 + 168 * v6);
        do
        {
          Espresso::convolution_uniforms::convolution_uniforms(v4);
          uint64_t v4 = (Espresso::convolution_uniforms *)(v28 + 168);
          v27 -= 168;
        }
        while (v27);
        *(void *)(a2 + 8) = v15;
      }
      else
      {
        if ((unint64_t)v5 >= 0x1861861861861861) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        int v8 = 0x9E79E79E79E79E7ALL * ((uint64_t)(*(void *)(a2 + 16) - (void)v4) >> 3);
        if (v8 <= v6) {
          int v8 = v6;
        }
        if (v7 >= 0xC30C30C30C30C3) {
          char v9 = 0x186186186186186;
        }
        else {
          char v9 = v8;
        }
        char v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::convolution_uniforms>>(v9);
        uint64_t v12 = v11;
        char v13 = 0;
        int v14 = 168 * v6;
        int v15 = (Espresso::convolution_uniforms *)&v10[168 * v6];
        do
        {
          Espresso::convolution_uniforms::convolution_uniforms((Espresso::convolution_uniforms *)&v10[v13]);
          v13 += 168;
        }
        while (v14 != v13);
        uint64_t v16 = &v10[168 * v12];
        uint64_t v18 = *(Espresso::convolution_uniforms **)a2;
        char v17 = *(Espresso::convolution_uniforms **)(a2 + 8);
        if (v17 != *(Espresso::convolution_uniforms **)a2)
        {
          do
          {
            uint64_t v19 = *(_OWORD *)((char *)v17 - 168);
            size_t v20 = *(_OWORD *)((char *)v17 - 152);
            *(_OWORD *)(v10 - 136) = *(_OWORD *)((char *)v17 - 136);
            *(_OWORD *)(v10 - 152) = v20;
            *(_OWORD *)(v10 - 168) = v19;
            long long v21 = *(_OWORD *)((char *)v17 - 120);
            int v22 = *(_OWORD *)((char *)v17 - 104);
            int v23 = *(_OWORD *)((char *)v17 - 88);
            *(_OWORD *)(v10 - 72) = *(_OWORD *)((char *)v17 - 72);
            *(_OWORD *)(v10 - 88) = v23;
            *(_OWORD *)(v10 - 104) = v22;
            *(_OWORD *)(v10 - 120) = v21;
            uint64_t v24 = *(_OWORD *)((char *)v17 - 56);
            double v25 = *(_OWORD *)((char *)v17 - 40);
            double v26 = *(_OWORD *)((char *)v17 - 24);
            *(void *)(v10 - 11) = *(void *)((char *)v17 - 11);
            *(_OWORD *)(v10 - 24) = v26;
            *(_OWORD *)(v10 - 40) = v25;
            *(_OWORD *)(v10 - 56) = v24;
            v10 -= 168;
            char v17 = (Espresso::convolution_uniforms *)((char *)v17 - 168);
          }
          while (v17 != v18);
          char v17 = *(Espresso::convolution_uniforms **)a2;
        }
        *(void *)a2 = v10;
        *(void *)(a2 + 8) = v15;
        *(void *)(a2 + 16) = v16;
        if (v17)
        {
          operator delete(v17);
          int v15 = *(Espresso::convolution_uniforms **)(a2 + 8);
        }
      }
    }
    uint64_t v29 = *(Espresso::convolution_uniforms **)a2;
    if (v15 != *(Espresso::convolution_uniforms **)a2)
    {
      unint64_t v30 = 0;
      uint64_t v31 = 0;
      uint64_t v32 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::convolution_uniforms>(*(void *)(v33 + v30), (uint64_t)v29 + v31, 0);
        ++v32;
        uint64_t v29 = *(Espresso::convolution_uniforms **)a2;
        v31 += 168;
        v30 += 16;
      }
      while (v32 < 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
    }
    uint64_t v35 = (void **)&v33;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v35);
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 120))(&v4);
    Espresso::SerDes::params_io<Espresso::pool_params>(v4, a2, 0);
    if (v5) {
      nitro::nitro_function::nitro_function(v5);
    }
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 120))(&v4);
    Espresso::SerDes::params_io<Espresso::lrn_params>(v4, a2, 0);
    if (v5) {
      nitro::nitro_function::nitro_function(v5);
    }
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 120))(&v4);
    Espresso::SerDes::params_io<Espresso::softmax_params>(v4, a2, 0);
    if (v5) {
      nitro::nitro_function::nitro_function(v5);
    }
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 120))(&v4);
    Espresso::SerDes::params_io<Espresso::inner_product_uniforms>(v4, a2, 0);
    if (v5) {
      nitro::nitro_function::nitro_function(v5);
    }
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 120))(&v4);
    Espresso::SerDes::params_io<Espresso::layer_shape>(v4, a2, 0);
    if (v5) {
      nitro::nitro_function::nitro_function(v5);
    }
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 120))(&v4);
    Espresso::SerDes::params_io<Espresso::concat_params>(v4, a2, 0);
    if (v5) {
      nitro::nitro_function::nitro_function(v5);
    }
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 120))(&v4);
    Espresso::SerDes::params_io<Espresso::split_params>(v4, a2, 0);
    if (v5) {
      nitro::nitro_function::nitro_function(v5);
    }
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 120))(&v4);
    Espresso::SerDes::params_io<Espresso::upsample_kernel_params>(v4, a2, 0);
    if (v5) {
      nitro::nitro_function::nitro_function(v5);
    }
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 120))(&v4);
    Espresso::SerDes::params_io<Espresso::elementwise_params>(v4, a2, 0);
    if (v5) {
      nitro::nitro_function::nitro_function(v5);
    }
  }
}

{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void **v19;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 128))(&v17);
    uint64_t v4 = *(char **)a2;
    *(void *)(a2 + 8) = *(void *)a2;
    uint64_t v5 = v18 - v17;
    if (v18 == v17)
    {
      uint64_t v11 = v4;
    }
    else
    {
      char v6 = v5 >> 4;
      uint64_t v7 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(void *)(a2 + 16) - (void)v4) >> 2);
      if (v7 >= v5 >> 4)
      {
        uint64_t v11 = &v4[52 * v6];
        do
        {
          *(_OWORD *)uint64_t v4 = 0uLL;
          *((_OWORD *)v4 + 1) = 0uLL;
          *(_OWORD *)(v4 + 28) = 0uLL;
          *((_DWORD *)v4 + 2) = 1065353216;
          *((_DWORD *)v4 + 4) = 897988541;
          *((_DWORD *)v4 + 11) = 0;
          *((_DWORD *)v4 + 12) = 0;
          v4 += 52;
        }
        while (v4 != v11);
        *(void *)(a2 + 8) = v11;
      }
      else
      {
        if ((unint64_t)v5 >= 0x4EC4EC4EC4EC4EC1) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        int v8 = 0x9D89D89D89D89D8ALL * ((uint64_t)(*(void *)(a2 + 16) - (void)v4) >> 2);
        if (v8 <= v6) {
          int v8 = v6;
        }
        if (v7 >= 0x276276276276276) {
          char v9 = 0x4EC4EC4EC4EC4ECLL;
        }
        else {
          char v9 = v8;
        }
        if (v9 > 0x4EC4EC4EC4EC4ECLL) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        char v10 = (char *)operator new(52 * v9);
        uint64_t v11 = &v10[52 * v6];
        uint64_t v12 = v10;
        do
        {
          *(_OWORD *)uint64_t v12 = 0uLL;
          *((_OWORD *)v12 + 1) = 0uLL;
          *(_OWORD *)(v12 + 28) = 0uLL;
          *((_DWORD *)v12 + 2) = 1065353216;
          *((_DWORD *)v12 + 4) = 897988541;
          *((_DWORD *)v12 + 11) = 0;
          *((_DWORD *)v12 + 12) = 0;
          v12 += 52;
        }
        while (v12 != v11);
        *(void *)a2 = v10;
        *(void *)(a2 + 8) = v11;
        *(void *)(a2 + 16) = &v10[52 * v9];
        if (v4)
        {
          operator delete(v4);
          uint64_t v11 = *(char **)(a2 + 8);
        }
      }
    }
    char v13 = *(char **)a2;
    if (v11 != *(char **)a2)
    {
      int v14 = 0;
      int v15 = 0;
      uint64_t v16 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::elementwise_params>(*(void *)(v17 + v14), (uint64_t)&v13[v15], 0);
        ++v16;
        char v13 = *(char **)a2;
        v15 += 52;
        v14 += 16;
      }
      while (v16 < 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2));
    }
    uint64_t v19 = (void **)&v17;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v19);
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 120))(&v4);
    Espresso::SerDes::params_io<Espresso::activation_params>(v4, a2, 0);
    if (v5) {
      nitro::nitro_function::nitro_function(v5);
    }
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 120))(&v4);
    Espresso::SerDes::params_io<Espresso::axpby_params>(v4, a2, 0);
    if (v5) {
      nitro::nitro_function::nitro_function(v5);
    }
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 120))(&v4);
    Espresso::SerDes::params_io<Espresso::l2_norm_params>(v4, a2, 0);
    if (v5) {
      nitro::nitro_function::nitro_function(v5);
    }
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 120))(&v4);
    Espresso::SerDes::params_io<Espresso::bias_params>(v4, a2, 0);
    if (v5) {
      nitro::nitro_function::nitro_function(v5);
    }
  }
}

{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void **v19;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 128))(&v17);
    uint64_t v4 = *(char **)a2;
    *(void *)(a2 + 8) = *(void *)a2;
    uint64_t v5 = v18 - v17;
    if (v18 == v17)
    {
      uint64_t v11 = v4;
    }
    else
    {
      char v6 = v5 >> 4;
      uint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 16) - (void)v4) >> 3);
      if (v7 >= v5 >> 4)
      {
        uint64_t v11 = &v4[24 * v6];
        do
        {
          *(_OWORD *)uint64_t v4 = xmmword_192DC3600;
          *((void *)v4 + 2) = 0xFFFFFFFF00000001;
          v4 += 24;
        }
        while (v4 != v11);
        *(void *)(a2 + 8) = v11;
      }
      else
      {
        if (v5 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        int v8 = 0x5555555555555556 * ((uint64_t)(*(void *)(a2 + 16) - (void)v4) >> 3);
        if (v8 <= v6) {
          int v8 = v6;
        }
        if (v7 >= 0x555555555555555) {
          char v9 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          char v9 = v8;
        }
        if (v9 > 0xAAAAAAAAAAAAAAALL) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        char v10 = (char *)operator new(24 * v9);
        uint64_t v11 = &v10[24 * v6];
        uint64_t v12 = v10;
        do
        {
          *(_OWORD *)uint64_t v12 = xmmword_192DC3600;
          *((void *)v12 + 2) = 0xFFFFFFFF00000001;
          v12 += 24;
        }
        while (v12 != v11);
        *(void *)a2 = v10;
        *(void *)(a2 + 8) = v11;
        *(void *)(a2 + 16) = &v10[24 * v9];
        if (v4)
        {
          operator delete(v4);
          uint64_t v11 = *(char **)(a2 + 8);
        }
      }
    }
    char v13 = *(char **)a2;
    if (v11 != *(char **)a2)
    {
      int v14 = 0;
      int v15 = 0;
      uint64_t v16 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::load_constant_params>(*(void *)(v17 + v14), &v13[v15], 0);
        ++v16;
        char v13 = *(char **)a2;
        v15 += 24;
        v14 += 16;
      }
      while (v16 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
    }
    uint64_t v19 = (void **)&v17;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v19);
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 120))(&v4);
    Espresso::SerDes::params_io<Espresso::batchnorm_params>(v4, a2, 0);
    if (v5) {
      nitro::nitro_function::nitro_function(v5);
    }
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 120))(&v4);
    Espresso::SerDes::params_io<Espresso::dropout_params>(v4, a2, 0);
    if (v5) {
      nitro::nitro_function::nitro_function(v5);
    }
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 120))(&v4);
    Espresso::SerDes::params_io<Espresso::reshape_params>(v4, a2, 0);
    if (v5) {
      nitro::nitro_function::nitro_function(v5);
    }
  }
}

{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void **v19;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 128))(&v17);
    uint64_t v4 = *(char **)a2;
    *(void *)(a2 + 8) = *(void *)a2;
    uint64_t v5 = v18 - v17;
    if (v18 == v17)
    {
      uint64_t v11 = v4;
    }
    else
    {
      char v6 = v5 >> 4;
      uint64_t v7 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 16) - (void)v4) >> 3);
      if (v7 >= v5 >> 4)
      {
        uint64_t v11 = &v4[40 * v6];
        do
        {
          *((void *)v4 + 4) = 0x100000000;
          *(_OWORD *)uint64_t v4 = 0uLL;
          *((_OWORD *)v4 + 1) = 0uLL;
          *((void *)v4 + 2) = 0xFFFFFFFF00000001;
          v4[32] = 1;
          v4 += 40;
        }
        while (v4 != v11);
        *(void *)(a2 + 8) = v11;
      }
      else
      {
        if ((unint64_t)v5 >= 0x6666666666666661) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        int v8 = 0x999999999999999ALL * ((uint64_t)(*(void *)(a2 + 16) - (void)v4) >> 3);
        if (v8 <= v6) {
          int v8 = v6;
        }
        if (v7 >= 0x333333333333333) {
          char v9 = 0x666666666666666;
        }
        else {
          char v9 = v8;
        }
        if (v9 > 0x666666666666666) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        char v10 = (char *)operator new(40 * v9);
        uint64_t v11 = &v10[40 * v6];
        uint64_t v12 = v10;
        do
        {
          *((void *)v12 + 4) = 0x100000000;
          *(_OWORD *)uint64_t v12 = 0uLL;
          *((_OWORD *)v12 + 1) = 0uLL;
          *((void *)v12 + 2) = 0xFFFFFFFF00000001;
          v12[32] = 1;
          v12 += 40;
        }
        while (v12 != v11);
        *(void *)a2 = v10;
        *(void *)(a2 + 8) = v11;
        *(void *)(a2 + 16) = &v10[40 * v9];
        if (v4)
        {
          operator delete(v4);
          uint64_t v11 = *(char **)(a2 + 8);
        }
      }
    }
    char v13 = *(char **)a2;
    if (v11 != *(char **)a2)
    {
      int v14 = 0;
      int v15 = 0;
      uint64_t v16 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::reshape_params>(*(void *)(v17 + v14), (uint64_t)&v13[v15], 0);
        ++v16;
        char v13 = *(char **)a2;
        v15 += 40;
        v14 += 16;
      }
      while (v16 < 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
    }
    uint64_t v19 = (void **)&v17;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v19);
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 120))(&v4);
    Espresso::SerDes::params_io<Espresso::reshape_like_params>(v4, a2, 0);
    if (v5) {
      nitro::nitro_function::nitro_function(v5);
    }
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 120))(&v4);
    Espresso::SerDes::params_io<Espresso::vimage2espresso_param>(v4, a2, 0);
    if (v5) {
      nitro::nitro_function::nitro_function(v5);
    }
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 120))(&v4);
    Espresso::SerDes::params_io<Espresso::blob_numerical_properties>(v4, a2, 0);
    if (v5) {
      nitro::nitro_function::nitro_function(v5);
    }
  }
}

{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void **v13;
  void **v14;
  uint64_t v15;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void **v24[5];

  if (!(*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2)) {
    return;
  }
  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 128))(&v22);
  std::vector<Espresso::blob_numerical_properties>::__clear[abi:ne180100]((uint64_t *)a2);
  uint64_t v4 = (v23 - v22) >> 4;
  uint64_t v5 = *(void *)a2;
  char v6 = *(void *)(a2 + 8);
  uint64_t v7 = 0xCCCCCCCCCCCCCCCDLL * ((v6 - *(void *)a2) >> 3);
  int v8 = v4 - v7;
  if (v4 <= v7)
  {
    if (v4 >= v7)
    {
      uint64_t v16 = *(void *)(a2 + 8);
      goto LABEL_23;
    }
    uint64_t v16 = v5 + 40 * v4;
    while (v6 != v16)
    {
      char v17 = *(void **)(v6 - 24);
      if (v17)
      {
        *(void *)(v6 - 16) = v17;
        operator delete(v17);
      }
      v6 -= 40;
    }
  }
  else
  {
    char v9 = *(void *)(a2 + 16);
    if (0xCCCCCCCCCCCCCCCDLL * ((v9 - v6) >> 3) < v8)
    {
      if ((unint64_t)(v23 - v22) >= 0x6666666666666661) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      v24[4] = (void **)(a2 + 16);
      char v10 = 0xCCCCCCCCCCCCCCCDLL * ((v9 - v5) >> 3);
      uint64_t v11 = 2 * v10;
      if (2 * v10 <= v4) {
        uint64_t v11 = (v23 - v22) >> 4;
      }
      if (v10 >= 0x333333333333333) {
        uint64_t v12 = 0x666666666666666;
      }
      else {
        uint64_t v12 = v11;
      }
      char v13 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unordered_set<std::string>>>(v12);
      int v14 = &v13[5 * v7];
      v24[0] = v13;
      v24[1] = v14;
      v24[3] = &v13[5 * v15];
      do
      {
        *(_DWORD *)int v14 = 1065353216;
        *(void **)((char *)v14 + 4) = (void *)0xFFFFFFFF00000000;
        *((_DWORD *)v14 + 3) = 1;
        v14[3] = 0;
        v14[4] = 0;
        void v14[2] = 0;
        v14 += 5;
      }
      while (v14 != &v13[5 * v4]);
      v24[2] = &v13[5 * v4];
      std::vector<Espresso::blob_numerical_properties>::__swap_out_circular_buffer((uint64_t *)a2, v24);
      std::__split_buffer<Espresso::blob_numerical_properties>::~__split_buffer((uint64_t)v24);
      uint64_t v16 = *(void *)(a2 + 8);
      goto LABEL_23;
    }
    uint64_t v16 = v6 + 40 * v8;
    do
    {
      *(_DWORD *)char v6 = 1065353216;
      *(void *)(v6 + 4) = 0xFFFFFFFF00000000;
      *(_DWORD *)(v6 + 12) = 1;
      *(void *)(v6 + 24) = 0;
      *(void *)(v6 + 32) = 0;
      *(void *)(v6 + 16) = 0;
      v6 += 40;
    }
    while (v6 != v16);
  }
  *(void *)(a2 + 8) = v16;
LABEL_23:
  uint64_t v18 = *(void *)a2;
  if (v16 != *(void *)a2)
  {
    uint64_t v19 = 0;
    size_t v20 = 0;
    long long v21 = 0;
    do
    {
      Espresso::SerDes::params_io<Espresso::blob_numerical_properties>(*(void *)(v22 + v19), v18 + v20, 0);
      ++v21;
      uint64_t v18 = *(void *)a2;
      v20 += 40;
      v19 += 16;
    }
    while (v21 < 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
  }
  v24[0] = (void **)&v22;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v24);
}

{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  long long v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 128))(&v18);
    uint64_t v4 = *(char **)a2;
    *(void *)(a2 + 8) = *(void *)a2;
    uint64_t v5 = v19 - v18;
    if (v19 == v18)
    {
      uint64_t v12 = v4;
    }
    else
    {
      char v6 = v5 >> 4;
      uint64_t v7 = *(void *)(a2 + 16) - (void)v4;
      if (v5 >> 4 <= (unint64_t)(v7 >> 6))
      {
        uint64_t v12 = &v4[64 * v6];
        do
        {
          *(void *)uint64_t v4 = 0;
          *((void *)v4 + 1) = 0x3F80000000000200;
          *((_OWORD *)v4 + 1) = xmmword_192DCA760;
          *((_OWORD *)v4 + 2) = xmmword_192DCA770;
          *((_OWORD *)v4 + 3) = xmmword_192DCA780;
          v4 += 64;
        }
        while (v4 != v12);
        *(void *)(a2 + 8) = v12;
      }
      else
      {
        if ((unint64_t)v5 >= 0x3FFFFFFFFFFFFFF1) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        int v8 = v7 >> 5;
        if (v7 >> 5 <= v6) {
          int v8 = v6;
        }
        if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFC0) {
          char v9 = 0x3FFFFFFFFFFFFFFLL;
        }
        else {
          char v9 = v8;
        }
        if (v9 >> 58) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        char v10 = (char *)operator new(v9 << 6);
        uint64_t v11 = v10;
        uint64_t v12 = &v10[64 * v6];
        do
        {
          *(void *)uint64_t v11 = 0;
          *((void *)v11 + 1) = 0x3F80000000000200;
          *((_OWORD *)v11 + 1) = xmmword_192DCA760;
          *((_OWORD *)v11 + 2) = xmmword_192DCA770;
          *((_OWORD *)v11 + 3) = xmmword_192DCA780;
          v11 += 64;
        }
        while (v11 != v12);
        *(void *)&char v13 = &v10[64 * v6];
        *((void *)&v13 + 1) = &v10[64 * v9];
        *(void *)a2 = v10;
        *(_OWORD *)(a2 + 8) = v13;
        if (v4)
        {
          operator delete(v4);
          uint64_t v12 = *(char **)(a2 + 8);
        }
      }
    }
    int v14 = *(char **)a2;
    if (v12 != *(char **)a2)
    {
      int v15 = 0;
      uint64_t v16 = 0;
      char v17 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::rnn_params>(*(void *)(v18 + v15), &v14[v16], 0);
        ++v17;
        int v14 = *(char **)a2;
        v16 += 64;
        v15 += 16;
      }
      while (v17 < (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 6);
    }
    size_t v20 = (void **)&v18;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v20);
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 120))(&v4);
    Espresso::SerDes::params_io<Espresso::reduce_params_t>(v4, a2, 0);
    if (v5) {
      nitro::nitro_function::nitro_function(v5);
    }
  }
}

{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void **v19;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 128))(&v17);
    uint64_t v4 = *(char **)a2;
    *(void *)(a2 + 8) = *(void *)a2;
    uint64_t v5 = v18 - v17;
    if (v18 == v17)
    {
      uint64_t v11 = v4;
    }
    else
    {
      char v6 = v5 >> 4;
      uint64_t v7 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(a2 + 16) - (void)v4) >> 2);
      if (v7 >= v5 >> 4)
      {
        uint64_t v11 = &v4[44 * v6];
        do
        {
          *(_OWORD *)uint64_t v4 = 0uLL;
          *((_OWORD *)v4 + 1) = 0uLL;
          *(_OWORD *)(v4 + 28) = 0uLL;
          *((_DWORD *)v4 + 1) = 897988541;
          *((void *)v4 + 1) = 0x100000007;
          *((void *)v4 + 2) = 0;
          *((void *)v4 + 3) = 0;
          *((void *)v4 + 4) = 0xFFFFFFFF00000000;
          v4 += 44;
        }
        while (v4 != v11);
        *(void *)(a2 + 8) = v11;
      }
      else
      {
        if ((unint64_t)v5 >= 0x5D1745D1745D1741) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        int v8 = 0x5D1745D1745D1746 * ((uint64_t)(*(void *)(a2 + 16) - (void)v4) >> 2);
        if (v8 <= v6) {
          int v8 = v6;
        }
        if (v7 >= 0x2E8BA2E8BA2E8BALL) {
          char v9 = 0x5D1745D1745D174;
        }
        else {
          char v9 = v8;
        }
        if (v9 > 0x5D1745D1745D174) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        char v10 = (char *)operator new(44 * v9);
        uint64_t v11 = &v10[44 * v6];
        uint64_t v12 = v10;
        do
        {
          *(_OWORD *)uint64_t v12 = 0uLL;
          *((_OWORD *)v12 + 1) = 0uLL;
          *(_OWORD *)(v12 + 28) = 0uLL;
          *((_DWORD *)v12 + 1) = 897988541;
          *((void *)v12 + 1) = 0x100000007;
          *((void *)v12 + 2) = 0;
          *((void *)v12 + 3) = 0;
          *((void *)v12 + 4) = 0xFFFFFFFF00000000;
          v12 += 44;
        }
        while (v12 != v11);
        *(void *)a2 = v10;
        *(void *)(a2 + 8) = v11;
        *(void *)(a2 + 16) = &v10[44 * v9];
        if (v4)
        {
          operator delete(v4);
          uint64_t v11 = *(char **)(a2 + 8);
        }
      }
    }
    char v13 = *(char **)a2;
    if (v11 != *(char **)a2)
    {
      int v14 = 0;
      int v15 = 0;
      uint64_t v16 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::reduce_params_t>(*(void *)(v17 + v14), (uint64_t)&v13[v15], 0);
        ++v16;
        char v13 = *(char **)a2;
        v15 += 44;
        v14 += 16;
      }
      while (v16 < 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2));
    }
    uint64_t v19 = (void **)&v17;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v19);
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 120))(&v4);
    Espresso::SerDes::params_io<Espresso::general_padding_params>(v4, a2, 0);
    if (v5) {
      nitro::nitro_function::nitro_function(v5);
    }
  }
}

{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void **v19;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 128))(&v17);
    uint64_t v4 = *(char **)a2;
    *(void *)(a2 + 8) = *(void *)a2;
    uint64_t v5 = v18 - v17;
    if (v18 == v17)
    {
      uint64_t v11 = v4;
    }
    else
    {
      char v6 = v5 >> 4;
      uint64_t v7 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 16) - (void)v4) >> 2);
      if (v7 >= v5 >> 4)
      {
        uint64_t v11 = &v4[20 * v6];
        do
        {
          *(_OWORD *)uint64_t v4 = xmmword_192DAF430;
          *((_DWORD *)v4 + 4) = 4;
          v4 += 20;
        }
        while (v4 != v11);
        *(void *)(a2 + 8) = v11;
      }
      else
      {
        if (v5 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        int v8 = 0x999999999999999ALL * ((uint64_t)(*(void *)(a2 + 16) - (void)v4) >> 2);
        if (v8 <= v6) {
          int v8 = v6;
        }
        if (v7 >= 0x666666666666666) {
          char v9 = 0xCCCCCCCCCCCCCCCLL;
        }
        else {
          char v9 = v8;
        }
        if (v9 > 0xCCCCCCCCCCCCCCCLL) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        char v10 = (char *)operator new(20 * v9);
        uint64_t v11 = &v10[20 * v6];
        uint64_t v12 = v10;
        do
        {
          *(_OWORD *)uint64_t v12 = xmmword_192DAF430;
          *((_DWORD *)v12 + 4) = 4;
          v12 += 20;
        }
        while (v12 != v11);
        *(void *)a2 = v10;
        *(void *)(a2 + 8) = v11;
        *(void *)(a2 + 16) = &v10[20 * v9];
        if (v4)
        {
          operator delete(v4);
          uint64_t v11 = *(char **)(a2 + 8);
        }
      }
    }
    char v13 = *(char **)a2;
    if (v11 != *(char **)a2)
    {
      int v14 = 0;
      int v15 = 0;
      uint64_t v16 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::transpose_params_t>(*(void *)(v17 + v14), &v13[v15], 0);
        ++v16;
        char v13 = *(char **)a2;
        v15 += 20;
        v14 += 16;
      }
      while (v16 < 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2));
    }
    uint64_t v19 = (void **)&v17;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v19);
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 120))(&v4);
    Espresso::SerDes::params_io<Espresso::prediction_smoothing_params>(v4, a2, 0);
    if (v5) {
      nitro::nitro_function::nitro_function(v5);
    }
  }
}

{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void **v19;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 128))(&v17);
    uint64_t v4 = *(char **)a2;
    *(void *)(a2 + 8) = *(void *)a2;
    uint64_t v5 = v18 - v17;
    if (v18 == v17)
    {
      uint64_t v11 = v4;
    }
    else
    {
      char v6 = v5 >> 4;
      uint64_t v7 = *(void *)(a2 + 16) - (void)v4;
      if (v5 >> 4 <= (unint64_t)(v7 >> 3))
      {
        uint64_t v11 = &v4[8 * v6];
        do
        {
          *(void *)uint64_t v4 = 0;
          *((_DWORD *)v4 + 1) = 1061997773;
          v4 += 8;
        }
        while (v4 != v11);
        *(void *)(a2 + 8) = v11;
      }
      else
      {
        if (v5 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        int v8 = v7 >> 2;
        if (v7 >> 2 <= v6) {
          int v8 = v6;
        }
        if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8) {
          char v9 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          char v9 = v8;
        }
        if (v9 >> 61) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        char v10 = (char *)operator new(8 * v9);
        uint64_t v11 = &v10[8 * v6];
        uint64_t v12 = v10;
        do
        {
          *(void *)uint64_t v12 = 0;
          *((_DWORD *)v12 + 1) = 1061997773;
          v12 += 8;
        }
        while (v12 != v11);
        *(void *)a2 = v10;
        *(void *)(a2 + 8) = v11;
        *(void *)(a2 + 16) = &v10[8 * v9];
        if (v4)
        {
          operator delete(v4);
          uint64_t v11 = *(char **)(a2 + 8);
        }
      }
    }
    char v13 = *(char **)a2;
    if (v11 != *(char **)a2)
    {
      int v14 = 0;
      int v15 = 0;
      uint64_t v16 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::prediction_smoothing_params>(*(void *)(v17 + v14), (uint64_t)&v13[v15], 0);
        ++v16;
        char v13 = *(char **)a2;
        v15 += 8;
        v14 += 16;
      }
      while (v16 < (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
    }
    uint64_t v19 = (void **)&v17;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v19);
  }
}

{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void **v19;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 128))(&v17);
    uint64_t v4 = *(char **)a2;
    *(void *)(a2 + 8) = *(void *)a2;
    uint64_t v5 = v18 - v17;
    if (v18 == v17)
    {
      uint64_t v11 = v4;
    }
    else
    {
      char v6 = v5 >> 4;
      uint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 16) - (void)v4) >> 2);
      if (v7 >= v5 >> 4)
      {
        uint64_t v11 = &v4[12 * v6];
        do
        {
          *(void *)uint64_t v4 = 2;
          *((_DWORD *)v4 + 2) = 0;
          v4 += 12;
        }
        while (v4 != v11);
        *(void *)(a2 + 8) = v11;
      }
      else
      {
        if (v5 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        int v8 = 0x5555555555555556 * ((uint64_t)(*(void *)(a2 + 16) - (void)v4) >> 2);
        if (v8 <= v6) {
          int v8 = v6;
        }
        if (v7 >= 0xAAAAAAAAAAAAAAALL) {
          char v9 = 0x1555555555555555;
        }
        else {
          char v9 = v8;
        }
        if (v9 > 0x1555555555555555) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        char v10 = (char *)operator new(12 * v9);
        uint64_t v11 = &v10[12 * v6];
        uint64_t v12 = v10;
        do
        {
          *(void *)uint64_t v12 = 2;
          *((_DWORD *)v12 + 2) = 0;
          v12 += 12;
        }
        while (v12 != v11);
        *(void *)a2 = v10;
        *(void *)(a2 + 8) = v11;
        *(void *)(a2 + 16) = &v10[12 * v9];
        if (v4)
        {
          operator delete(v4);
          uint64_t v11 = *(char **)(a2 + 8);
        }
      }
    }
    char v13 = *(char **)a2;
    if (v11 != *(char **)a2)
    {
      int v14 = 0;
      int v15 = 0;
      uint64_t v16 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::space_to_depth_params_t>(*(void *)(v17 + v14), &v13[v15], 0);
        ++v16;
        char v13 = *(char **)a2;
        v15 += 12;
        v14 += 16;
      }
      while (v16 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2));
    }
    uint64_t v19 = (void **)&v17;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v19);
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 120))(&v4);
    Espresso::SerDes::params_io<Espresso::space_to_batch_params_t>(v4, a2, 0);
    if (v5) {
      nitro::nitro_function::nitro_function(v5);
    }
  }
}

{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void **v19;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 128))(&v17);
    uint64_t v4 = *(char **)a2;
    *(void *)(a2 + 8) = *(void *)a2;
    uint64_t v5 = v18 - v17;
    if (v18 == v17)
    {
      uint64_t v11 = v4;
    }
    else
    {
      char v6 = v5 >> 4;
      uint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 16) - (void)v4) >> 3);
      if (v7 >= v5 >> 4)
      {
        uint64_t v11 = &v4[24 * v6];
        do
        {
          *(_OWORD *)uint64_t v4 = xmmword_192DCA6B0;
          *((void *)v4 + 2) = 0x100000000;
          v4 += 24;
        }
        while (v4 != v11);
        *(void *)(a2 + 8) = v11;
      }
      else
      {
        if (v5 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        int v8 = 0x5555555555555556 * ((uint64_t)(*(void *)(a2 + 16) - (void)v4) >> 3);
        if (v8 <= v6) {
          int v8 = v6;
        }
        if (v7 >= 0x555555555555555) {
          char v9 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          char v9 = v8;
        }
        if (v9 > 0xAAAAAAAAAAAAAAALL) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        char v10 = (char *)operator new(24 * v9);
        uint64_t v11 = &v10[24 * v6];
        uint64_t v12 = v10;
        do
        {
          *(_OWORD *)uint64_t v12 = xmmword_192DCA6B0;
          *((void *)v12 + 2) = 0x100000000;
          v12 += 24;
        }
        while (v12 != v11);
        *(void *)a2 = v10;
        *(void *)(a2 + 8) = v11;
        *(void *)(a2 + 16) = &v10[24 * v9];
        if (v4)
        {
          operator delete(v4);
          uint64_t v11 = *(char **)(a2 + 8);
        }
      }
    }
    char v13 = *(char **)a2;
    if (v11 != *(char **)a2)
    {
      int v14 = 0;
      int v15 = 0;
      uint64_t v16 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::slice_params_t>(*(void *)(v17 + v14), &v13[v15], 0);
        ++v16;
        char v13 = *(char **)a2;
        v15 += 24;
        v14 += 16;
      }
      while (v16 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
    }
    uint64_t v19 = (void **)&v17;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v19);
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 120))(&v4);
    Espresso::SerDes::params_io<Espresso::broadcast_params_t>(v4, a2, 0);
    if (v5) {
      nitro::nitro_function::nitro_function(v5);
    }
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 120))(&v4);
    Espresso::SerDes::params_io<Espresso::lambda_params_t>(v4, a2, 0);
    if (v5) {
      nitro::nitro_function::nitro_function(v5);
    }
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 120))(&v4);
    Espresso::SerDes::params_io<Espresso::patch_extractor_params_t>(v4, a2, 0);
    if (v5) {
      nitro::nitro_function::nitro_function(v5);
    }
  }
}

{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void **v21;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 128))(&v19);
    uint64_t v4 = *(char **)a2;
    *(void *)(a2 + 8) = *(void *)a2;
    uint64_t v5 = v20 - v19;
    if (v20 == v19)
    {
      uint64_t v12 = v4;
    }
    else
    {
      char v6 = v5 >> 4;
      uint64_t v7 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(a2 + 16) - (void)v4) >> 2);
      if (v7 >= v5 >> 4)
      {
        int v14 = 44 * v6;
        uint64_t v12 = &v4[44 * v6];
        do
        {
          *((_DWORD *)v4 + 10) = 0;
          *(_OWORD *)uint64_t v4 = xmmword_192DCA5A0;
          *((void *)v4 + 3) = 0;
          *((void *)v4 + 4) = 0;
          *((void *)v4 + 2) = 0;
          v4[40] = 0;
          v4 += 44;
          v14 -= 44;
        }
        while (v14);
        *(void *)(a2 + 8) = v12;
      }
      else
      {
        if ((unint64_t)v5 >= 0x5D1745D1745D1741) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        int v8 = 0x5D1745D1745D1746 * ((uint64_t)(*(void *)(a2 + 16) - (void)v4) >> 2);
        if (v8 <= v6) {
          int v8 = v6;
        }
        if (v7 >= 0x2E8BA2E8BA2E8BALL) {
          char v9 = 0x5D1745D1745D174;
        }
        else {
          char v9 = v8;
        }
        if (v9 > 0x5D1745D1745D174) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        char v10 = (char *)operator new(44 * v9);
        uint64_t v11 = 0;
        uint64_t v12 = &v10[44 * v6];
        do
        {
          char v13 = &v10[v11];
          *((_DWORD *)v13 + 10) = 0;
          *(_OWORD *)char v13 = xmmword_192DCA5A0;
          *((void *)v13 + 3) = 0;
          *((void *)v13 + 4) = 0;
          *((void *)v13 + 2) = 0;
          v11 += 44;
          v13[40] = 0;
        }
        while (44 * v6 != v11);
        *(void *)a2 = v10;
        *(void *)(a2 + 8) = v12;
        *(void *)(a2 + 16) = &v10[44 * v9];
        if (v4)
        {
          operator delete(v4);
          uint64_t v12 = *(char **)(a2 + 8);
        }
      }
    }
    int v15 = *(char **)a2;
    if (v12 != *(char **)a2)
    {
      uint64_t v16 = 0;
      char v17 = 0;
      uint64_t v18 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::patch_extractor_params_t>(*(void *)(v19 + v16), (uint64_t)&v15[v17], 0);
        ++v18;
        int v15 = *(char **)a2;
        v17 += 44;
        v16 += 16;
      }
      while (v18 < 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2));
    }
    long long v21 = (void **)&v19;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v21);
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 120))(&v4);
    Espresso::SerDes::params_io<Espresso::crop_and_resize_params_t>(v4, a2, 0);
    if (v5) {
      nitro::nitro_function::nitro_function(v5);
    }
  }
}

{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void **v19;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 128))(&v17);
    uint64_t v4 = *(char **)a2;
    *(void *)(a2 + 8) = *(void *)a2;
    uint64_t v5 = v18 - v17;
    if (v18 == v17)
    {
      uint64_t v11 = v4;
    }
    else
    {
      char v6 = v5 >> 4;
      uint64_t v7 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 16) - (void)v4) >> 4);
      if (v7 >= v5 >> 4)
      {
        uint64_t v11 = &v4[80 * v6];
        do
        {
          *((_OWORD *)v4 + 2) = 0uLL;
          *((_OWORD *)v4 + 3) = 0uLL;
          *((_OWORD *)v4 + 4) = 0uLL;
          *(_OWORD *)uint64_t v4 = 0uLL;
          *((_OWORD *)v4 + 1) = 0uLL;
          *((_DWORD *)v4 + 7) = 1065353216;
          *((_DWORD *)v4 + 9) = 2;
          *(_OWORD *)(v4 + 40) = 0uLL;
          *(_OWORD *)(v4 + 56) = 0uLL;
          *((_DWORD *)v4 + 18) = 1;
          v4 += 80;
        }
        while (v4 != v11);
        *(void *)(a2 + 8) = v11;
      }
      else
      {
        if ((unint64_t)v5 >= 0x3333333333333331) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        int v8 = 0x999999999999999ALL * ((uint64_t)(*(void *)(a2 + 16) - (void)v4) >> 4);
        if (v8 <= v6) {
          int v8 = v6;
        }
        if (v7 >= 0x199999999999999) {
          char v9 = 0x333333333333333;
        }
        else {
          char v9 = v8;
        }
        if (v9 > 0x333333333333333) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        char v10 = (char *)operator new(80 * v9);
        uint64_t v11 = &v10[80 * v6];
        uint64_t v12 = v10;
        do
        {
          *((_OWORD *)v12 + 2) = 0uLL;
          *((_OWORD *)v12 + 3) = 0uLL;
          *((_OWORD *)v12 + 4) = 0uLL;
          *(_OWORD *)uint64_t v12 = 0uLL;
          *((_OWORD *)v12 + 1) = 0uLL;
          *((_DWORD *)v12 + 7) = 1065353216;
          *((_DWORD *)v12 + 9) = 2;
          *(_OWORD *)(v12 + 40) = 0uLL;
          *(_OWORD *)(v12 + 56) = 0uLL;
          *((_DWORD *)v12 + 18) = 1;
          v12 += 80;
        }
        while (v12 != v11);
        *(void *)a2 = v10;
        *(void *)(a2 + 8) = v11;
        *(void *)(a2 + 16) = &v10[80 * v9];
        if (v4)
        {
          operator delete(v4);
          uint64_t v11 = *(char **)(a2 + 8);
        }
      }
    }
    char v13 = *(char **)a2;
    if (v11 != *(char **)a2)
    {
      int v14 = 0;
      int v15 = 0;
      uint64_t v16 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::crop_and_resize_params_t>(*(void *)(v17 + v14), (uint64_t)&v13[v15], 0);
        ++v16;
        char v13 = *(char **)a2;
        v15 += 80;
        v14 += 16;
      }
      while (v16 < 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4));
    }
    uint64_t v19 = (void **)&v17;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v19);
  }
}

{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void **v19;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 128))(&v17);
    uint64_t v4 = *(char **)a2;
    *(void *)(a2 + 8) = *(void *)a2;
    uint64_t v5 = v18 - v17;
    if (v18 == v17)
    {
      uint64_t v12 = v4;
    }
    else
    {
      char v6 = v5 >> 4;
      uint64_t v7 = *(void *)(a2 + 16) - (void)v4;
      if (v5 >> 4 <= (unint64_t)(v7 >> 4))
      {
        uint64_t v12 = &v4[16 * v6];
        char v13 = 16 * v6;
        do
        {
          *(_OWORD *)uint64_t v4 = xmmword_192DCA750;
          v4 += 16;
          v13 -= 16;
        }
        while (v13);
        *(void *)(a2 + 8) = v12;
      }
      else
      {
        if (v5 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        int v8 = v7 >> 3;
        if (v7 >> 3 <= v6) {
          int v8 = v6;
        }
        if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF0) {
          char v9 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          char v9 = v8;
        }
        if (v9 >> 60) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        char v10 = (char *)operator new(16 * v9);
        uint64_t v11 = 0;
        uint64_t v12 = &v10[16 * v6];
        do
        {
          *(_OWORD *)&v10[v11] = xmmword_192DCA750;
          v11 += 16;
        }
        while (16 * v6 != v11);
        *(void *)a2 = v10;
        *(void *)(a2 + 8) = v12;
        *(void *)(a2 + 16) = &v10[16 * v9];
        if (v4)
        {
          operator delete(v4);
          uint64_t v12 = *(char **)(a2 + 8);
        }
      }
    }
    int v14 = *(char **)a2;
    if (v12 != *(char **)a2)
    {
      int v15 = 0;
      uint64_t v16 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::quantized_gather_params_t>(*(void *)(v17 + v15), &v14[v15], 0);
        ++v16;
        int v14 = *(char **)a2;
        v15 += 16;
      }
      while (v16 < (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4);
    }
    uint64_t v19 = (void **)&v17;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v19);
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 120))(&v4);
    Espresso::SerDes::params_io<Espresso::cf_branch_params_t>(v4, a2, 0);
    if (v5) {
      nitro::nitro_function::nitro_function(v5);
    }
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 120))(&v4);
    Espresso::SerDes::params_io<Espresso::dynamic_dequantize_params_t>(v4, a2, 0);
    if (v5) {
      nitro::nitro_function::nitro_function(v5);
    }
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 120))(&v4);
    Espresso::SerDes::params_io<Espresso::spatial_transformer_params_t>(v4, a2, 0);
    if (v5) {
      nitro::nitro_function::nitro_function(v5);
    }
  }
}

{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void **v19;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 128))(&v17);
    uint64_t v4 = *(char **)a2;
    *(void *)(a2 + 8) = *(void *)a2;
    uint64_t v5 = v18 - v17;
    if (v18 == v17)
    {
      uint64_t v11 = v4;
    }
    else
    {
      char v6 = v5 >> 4;
      uint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 16) - (void)v4) >> 3);
      if (v7 >= v5 >> 4)
      {
        uint64_t v11 = &v4[24 * v6];
        do
        {
          *(_OWORD *)uint64_t v4 = xmmword_192DCA5A0;
          *((void *)v4 + 2) = 0;
          v4 += 24;
        }
        while (v4 != v11);
        *(void *)(a2 + 8) = v11;
      }
      else
      {
        if (v5 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        int v8 = 0x5555555555555556 * ((uint64_t)(*(void *)(a2 + 16) - (void)v4) >> 3);
        if (v8 <= v6) {
          int v8 = v6;
        }
        if (v7 >= 0x555555555555555) {
          char v9 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          char v9 = v8;
        }
        if (v9 > 0xAAAAAAAAAAAAAAALL) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        char v10 = (char *)operator new(24 * v9);
        uint64_t v11 = &v10[24 * v6];
        uint64_t v12 = v10;
        do
        {
          *(_OWORD *)uint64_t v12 = xmmword_192DCA5A0;
          *((void *)v12 + 2) = 0;
          v12 += 24;
        }
        while (v12 != v11);
        *(void *)a2 = v10;
        *(void *)(a2 + 8) = v11;
        *(void *)(a2 + 16) = &v10[24 * v9];
        if (v4)
        {
          operator delete(v4);
          uint64_t v11 = *(char **)(a2 + 8);
        }
      }
    }
    char v13 = *(char **)a2;
    if (v11 != *(char **)a2)
    {
      int v14 = 0;
      int v15 = 0;
      uint64_t v16 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::spatial_transformer_params_t>(*(void *)(v17 + v14), (uint64_t)&v13[v15], 0);
        ++v16;
        char v13 = *(char **)a2;
        v15 += 24;
        v14 += 16;
      }
      while (v16 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
    }
    uint64_t v19 = (void **)&v17;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v19);
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 120))(&v4);
    Espresso::SerDes::params_io<Espresso::cf_call_params_t>(v4, a2, 0);
    if (v5) {
      nitro::nitro_function::nitro_function(v5);
    }
  }
}

{
  void **v4;
  void **v5;
  void **v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  size_t v17;
  char *v18;
  long long v19;
  void **v20;
  void **v21;
  void **v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void **v28;

  if (!(*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2)) {
    return;
  }
  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 128))(&v26);
  uint64_t v4 = *(void ***)a2;
  uint64_t v5 = *(void ***)(a2 + 8);
  char v6 = *(void ***)a2;
  if (v5 != *(void ***)a2)
  {
    do
    {
      if (*((char *)v5 - 1) < 0) {
        operator delete(*(v5 - 3));
      }
      v5 -= 3;
    }
    while (v5 != v4);
    char v6 = *(void ***)a2;
  }
  *(void *)(a2 + 8) = v4;
  uint64_t v7 = (v27 - v26) >> 4;
  int v8 = 0xAAAAAAAAAAAAAAABLL * (v4 - v6);
  char v9 = v7 - v8;
  if (v7 <= v8)
  {
    if (v7 >= v8)
    {
      long long v21 = v4;
      goto LABEL_36;
    }
    long long v21 = &v6[3 * v7];
    while (v4 != v21)
    {
      if (*((char *)v4 - 1) < 0) {
        operator delete(*(v4 - 3));
      }
      v4 -= 3;
    }
  }
  else
  {
    char v10 = *(void *)(a2 + 16);
    if (0xAAAAAAAAAAAAAAABLL * ((v10 - (uint64_t)v4) >> 3) < v9)
    {
      if (v27 - v26 < 0) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((v10 - (uint64_t)v6) >> 3);
      uint64_t v12 = 0x5555555555555556 * ((v10 - (uint64_t)v6) >> 3);
      if (v12 > v7) {
        uint64_t v7 = v12;
      }
      if (v11 >= 0x555555555555555) {
        char v13 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        char v13 = v7;
      }
      if (v13 > 0xAAAAAAAAAAAAAAALL) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      int v14 = (char *)operator new(24 * v13);
      int v15 = &v14[8 * (v4 - v6)];
      uint64_t v16 = &v14[24 * v13];
      char v17 = 24 * ((24 * v9 - 24) / 0x18) + 24;
      bzero(v15, v17);
      uint64_t v18 = &v15[v17];
      if (v4 == v6)
      {
        *(void *)a2 = v15;
        *(void *)(a2 + 8) = v18;
        *(void *)(a2 + 16) = v16;
      }
      else
      {
        do
        {
          uint64_t v19 = *(_OWORD *)(v4 - 3);
          *((void *)v15 - 1) = *(v4 - 1);
          *(_OWORD *)(v15 - 24) = v19;
          v15 -= 24;
          *(v4 - 2) = 0;
          *(v4 - 1) = 0;
          *(v4 - 3) = 0;
          v4 -= 3;
        }
        while (v4 != v6);
        size_t v20 = *(void ***)a2;
        uint64_t v4 = *(void ***)(a2 + 8);
        *(void *)a2 = v15;
        *(void *)(a2 + 8) = v18;
        *(void *)(a2 + 16) = v16;
        if (v4 != v20)
        {
          do
          {
            if (*((char *)v4 - 1) < 0) {
              operator delete(*(v4 - 3));
            }
            v4 -= 3;
          }
          while (v4 != v20);
          uint64_t v4 = v20;
        }
      }
      if (v4) {
        operator delete(v4);
      }
      long long v21 = *(void ***)(a2 + 8);
      goto LABEL_36;
    }
    bzero(v4, 24 * ((24 * v9 - 24) / 0x18) + 24);
    long long v21 = &v4[3 * ((24 * v9 - 24) / 0x18) + 3];
  }
  *(void *)(a2 + 8) = v21;
LABEL_36:
  int v22 = *(void ***)a2;
  if (v21 != *(void ***)a2)
  {
    int v23 = 0;
    uint64_t v24 = 0;
    double v25 = 0;
    do
    {
      Espresso::SerDes::params_io<Espresso::cf_call_params_t>(*(void *)(v26 + v23), (uint64_t)&v22[v24], 0);
      ++v25;
      int v22 = *(void ***)a2;
      v24 += 3;
      v23 += 16;
    }
    while (v25 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
  }
  int v28 = (void **)&v26;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v28);
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 120))(&v4);
    Espresso::SerDes::params_io<Espresso::topk_params_t>(v4, a2, 0);
    if (v5) {
      nitro::nitro_function::nitro_function(v5);
    }
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 120))(&v4);
    Espresso::SerDes::params_io<Espresso::general_concat_params_t>(v4, a2, 0);
    if (v5) {
      nitro::nitro_function::nitro_function(v5);
    }
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 120))(&v4);
    Espresso::SerDes::params_io<Espresso::alloc_params_t>(v4, a2, 0);
    if (v5) {
      nitro::nitro_function::nitro_function(v5);
    }
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 120))(&v4);
    Espresso::SerDes::params_io<Espresso::load_global_params_t>(v4, a2, 0);
    if (v5) {
      nitro::nitro_function::nitro_function(v5);
    }
  }
}

{
  char *v4;
  void **v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  long long v19;
  long long v20;
  void **v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void **v29;

  if (!(*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2)) {
    return;
  }
  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 128))(&v27);
  uint64_t v4 = *(char **)a2;
  uint64_t v5 = *(void ***)(a2 + 8);
  char v6 = *(char **)a2;
  if (v5 != *(void ***)a2)
  {
    do
    {
      if (*((char *)v5 - 33) < 0) {
        operator delete(*(v5 - 7));
      }
      v5 -= 7;
    }
    while (v5 != (void **)v4);
    char v6 = *(char **)a2;
  }
  *(void *)(a2 + 8) = v4;
  uint64_t v7 = (v28 - v27) >> 4;
  int v8 = 0x6DB6DB6DB6DB6DB7 * ((v4 - v6) >> 3);
  char v9 = v7 - v8;
  if (v7 <= v8)
  {
    if (v7 >= v8)
    {
      int v22 = v4;
      goto LABEL_39;
    }
    int v22 = &v6[56 * v7];
    while (v4 != v22)
    {
      if (*(v4 - 33) < 0) {
        operator delete(*((void **)v4 - 7));
      }
      v4 -= 56;
    }
  }
  else
  {
    char v10 = *(void *)(a2 + 16);
    if (0x6DB6DB6DB6DB6DB7 * ((v10 - (uint64_t)v4) >> 3) < v9)
    {
      if ((unint64_t)(v28 - v27) >= 0x4924924924924921) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v11 = 0x6DB6DB6DB6DB6DB7 * ((v10 - (uint64_t)v6) >> 3);
      uint64_t v12 = 2 * v11;
      if (2 * v11 <= v7) {
        uint64_t v12 = (v28 - v27) >> 4;
      }
      if (v11 >= 0x249249249249249) {
        char v13 = 0x492492492492492;
      }
      else {
        char v13 = v12;
      }
      if (v13 > 0x492492492492492) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      int v14 = (char *)operator new(56 * v13);
      int v15 = &v14[56 * v8];
      uint64_t v16 = &v14[56 * v7];
      char v17 = v15;
      do
      {
        *(_OWORD *)char v17 = 0uLL;
        *((_OWORD *)v17 + 1) = 0uLL;
        *(_OWORD *)(v17 + 28) = xmmword_192DCA4C0;
        *(void *)(v17 + 44) = 0xFFFFFFFF00000001;
        *((_DWORD *)v17 + 13) = 7;
        v17 += 56;
      }
      while (v17 != v16);
      uint64_t v18 = *(char **)a2;
      if (v4 != *(char **)a2)
      {
        do
        {
          uint64_t v19 = *(_OWORD *)(v4 - 56);
          *((void *)v15 - 5) = *((void *)v4 - 5);
          *(_OWORD *)(v15 - 56) = v19;
          *((void *)v4 - 6) = 0;
          *((void *)v4 - 5) = 0;
          *((void *)v4 - 7) = 0;
          size_t v20 = *((_OWORD *)v4 - 1);
          *((_OWORD *)v15 - 2) = *((_OWORD *)v4 - 2);
          *((_OWORD *)v15 - 1) = v20;
          v15 -= 56;
          v4 -= 56;
        }
        while (v4 != v18);
        uint64_t v4 = *(char **)a2;
      }
      long long v21 = *(void ***)(a2 + 8);
      *(void *)a2 = v15;
      *(void *)(a2 + 8) = v16;
      *(void *)(a2 + 16) = &v14[56 * v13];
      while (v21 != (void **)v4)
      {
        if (*((char *)v21 - 33) < 0) {
          operator delete(*(v21 - 7));
        }
        v21 -= 7;
      }
      if (v4) {
        operator delete(v4);
      }
      int v22 = *(char **)(a2 + 8);
      goto LABEL_39;
    }
    int v22 = &v4[56 * v9];
    do
    {
      *(_OWORD *)uint64_t v4 = 0uLL;
      *((_OWORD *)v4 + 1) = 0uLL;
      *(_OWORD *)(v4 + 28) = xmmword_192DCA4C0;
      *(void *)(v4 + 44) = 0xFFFFFFFF00000001;
      *((_DWORD *)v4 + 13) = 7;
      v4 += 56;
    }
    while (v4 != v22);
  }
  *(void *)(a2 + 8) = v22;
LABEL_39:
  int v23 = *(char **)a2;
  if (v22 != *(char **)a2)
  {
    uint64_t v24 = 0;
    double v25 = 0;
    double v26 = 0;
    do
    {
      Espresso::SerDes::params_io<Espresso::load_global_params_t>(*(void *)(v27 + v24), (uint64_t)&v23[v25], 0);
      ++v26;
      int v23 = *(char **)a2;
      v25 += 56;
      v24 += 16;
    }
    while (v26 < 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
  }
  uint64_t v29 = (void **)&v27;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v29);
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 120))(&v4);
    Espresso::SerDes::params_io<Espresso::store_global_params_t>(v4, a2, 0);
    if (v5) {
      nitro::nitro_function::nitro_function(v5);
    }
  }
}

{
  char *v4;
  void **v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  long long v17;
  char *v18;
  char *v19;
  long long v20;
  long long v21;
  void **v22;
  char *v23;
  long long v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void **v31;

  if (!(*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2)) {
    return;
  }
  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 128))(&v29);
  uint64_t v4 = *(char **)a2;
  uint64_t v5 = *(void ***)(a2 + 8);
  char v6 = *(char **)a2;
  if (v5 != *(void ***)a2)
  {
    do
    {
      if (*((char *)v5 - 33) < 0) {
        operator delete(*(v5 - 7));
      }
      v5 -= 7;
    }
    while (v5 != (void **)v4);
    char v6 = *(char **)a2;
  }
  *(void *)(a2 + 8) = v4;
  uint64_t v7 = (v30 - v29) >> 4;
  int v8 = 0x6DB6DB6DB6DB6DB7 * ((v4 - v6) >> 3);
  char v9 = v7 - v8;
  if (v7 <= v8)
  {
    if (v7 >= v8)
    {
      int v23 = v4;
      goto LABEL_39;
    }
    int v23 = &v6[56 * v7];
    while (v4 != v23)
    {
      if (*(v4 - 33) < 0) {
        operator delete(*((void **)v4 - 7));
      }
      v4 -= 56;
    }
  }
  else
  {
    char v10 = *(void *)(a2 + 16);
    if (0x6DB6DB6DB6DB6DB7 * ((v10 - (uint64_t)v4) >> 3) < v9)
    {
      if ((unint64_t)(v30 - v29) >= 0x4924924924924921) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v11 = 0x6DB6DB6DB6DB6DB7 * ((v10 - (uint64_t)v6) >> 3);
      uint64_t v12 = 2 * v11;
      if (2 * v11 <= v7) {
        uint64_t v12 = (v30 - v29) >> 4;
      }
      if (v11 >= 0x249249249249249) {
        char v13 = 0x492492492492492;
      }
      else {
        char v13 = v12;
      }
      if (v13 > 0x492492492492492) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      int v14 = (char *)operator new(56 * v13);
      int v15 = &v14[56 * v8];
      uint64_t v16 = &v14[56 * v7];
      *(void *)&char v17 = 0x100000001;
      *((void *)&v17 + 1) = 0x100000001;
      uint64_t v18 = v15;
      do
      {
        *(_OWORD *)uint64_t v18 = 0uLL;
        *((_OWORD *)v18 + 1) = 0uLL;
        *((_OWORD *)v18 + 2) = v17;
        *((void *)v18 + 6) = 1;
        v18 += 56;
      }
      while (v18 != v16);
      uint64_t v19 = *(char **)a2;
      if (v4 != *(char **)a2)
      {
        do
        {
          size_t v20 = *(_OWORD *)(v4 - 56);
          *((void *)v15 - 5) = *((void *)v4 - 5);
          *(_OWORD *)(v15 - 56) = v20;
          *((void *)v4 - 6) = 0;
          *((void *)v4 - 5) = 0;
          *((void *)v4 - 7) = 0;
          long long v21 = *((_OWORD *)v4 - 1);
          *((_OWORD *)v15 - 2) = *((_OWORD *)v4 - 2);
          *((_OWORD *)v15 - 1) = v21;
          v15 -= 56;
          v4 -= 56;
        }
        while (v4 != v19);
        uint64_t v4 = *(char **)a2;
      }
      int v22 = *(void ***)(a2 + 8);
      *(void *)a2 = v15;
      *(void *)(a2 + 8) = v16;
      *(void *)(a2 + 16) = &v14[56 * v13];
      while (v22 != (void **)v4)
      {
        if (*((char *)v22 - 33) < 0) {
          operator delete(*(v22 - 7));
        }
        v22 -= 7;
      }
      if (v4) {
        operator delete(v4);
      }
      int v23 = *(char **)(a2 + 8);
      goto LABEL_39;
    }
    int v23 = &v4[56 * v9];
    *(void *)&uint64_t v24 = 0x100000001;
    *((void *)&v24 + 1) = 0x100000001;
    do
    {
      *(_OWORD *)uint64_t v4 = 0uLL;
      *((_OWORD *)v4 + 1) = 0uLL;
      *((_OWORD *)v4 + 2) = v24;
      *((void *)v4 + 6) = 1;
      v4 += 56;
    }
    while (v4 != v23);
  }
  *(void *)(a2 + 8) = v23;
LABEL_39:
  double v25 = *(char **)a2;
  if (v23 != *(char **)a2)
  {
    double v26 = 0;
    int32x2_t v27 = 0;
    int v28 = 0;
    do
    {
      Espresso::SerDes::params_io<Espresso::store_global_params_t>(*(void *)(v29 + v26), (uint64_t)&v25[v27], 0);
      ++v28;
      double v25 = *(char **)a2;
      v27 += 56;
      v26 += 16;
    }
    while (v28 < 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
  }
  uint64_t v31 = (void **)&v29;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v31);
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 120))(&v4);
    Espresso::SerDes::params_io<Espresso::scatter_params_t>(v4, a2, 0);
    if (v5) {
      nitro::nitro_function::nitro_function(v5);
    }
  }
}

{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  long long v12;
  char *v13;
  long long v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void **v21;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 128))(&v19);
    uint64_t v4 = *(char **)a2;
    *(void *)(a2 + 8) = *(void *)a2;
    uint64_t v5 = v20 - v19;
    if (v20 == v19)
    {
      uint64_t v11 = v4;
    }
    else
    {
      char v6 = v5 >> 4;
      uint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 16) - (void)v4) >> 3);
      if (v7 >= v5 >> 4)
      {
        uint64_t v11 = &v4[24 * v6];
        *(void *)&int v14 = 0x100000001;
        *((void *)&v14 + 1) = 0x100000001;
        do
        {
          *(_OWORD *)uint64_t v4 = v14;
          *((void *)v4 + 2) = 4294967294;
          v4 += 24;
        }
        while (v4 != v11);
        *(void *)(a2 + 8) = v11;
      }
      else
      {
        if (v5 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        int v8 = 0x5555555555555556 * ((uint64_t)(*(void *)(a2 + 16) - (void)v4) >> 3);
        if (v8 <= v6) {
          int v8 = v6;
        }
        if (v7 >= 0x555555555555555) {
          char v9 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          char v9 = v8;
        }
        if (v9 > 0xAAAAAAAAAAAAAAALL) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        char v10 = (char *)operator new(24 * v9);
        uint64_t v11 = &v10[24 * v6];
        *(void *)&uint64_t v12 = 0x100000001;
        *((void *)&v12 + 1) = 0x100000001;
        char v13 = v10;
        do
        {
          *(_OWORD *)char v13 = v12;
          *((void *)v13 + 2) = 4294967294;
          v13 += 24;
        }
        while (v13 != v11);
        *(void *)a2 = v10;
        *(void *)(a2 + 8) = v11;
        *(void *)(a2 + 16) = &v10[24 * v9];
        if (v4)
        {
          operator delete(v4);
          uint64_t v11 = *(char **)(a2 + 8);
        }
      }
    }
    int v15 = *(char **)a2;
    if (v11 != *(char **)a2)
    {
      uint64_t v16 = 0;
      char v17 = 0;
      uint64_t v18 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::scatter_params_t>(*(void *)(v19 + v16), (uint64_t)&v15[v17], 0);
        ++v18;
        int v15 = *(char **)a2;
        v17 += 24;
        v16 += 16;
      }
      while (v18 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
    }
    long long v21 = (void **)&v19;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v21);
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 120))(&v4);
    Espresso::SerDes::params_io<Espresso::load_random_params_t>(v4, a2, 0);
    if (v5) {
      nitro::nitro_function::nitro_function(v5);
    }
  }
}

{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void **v19;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 128))(&v17);
    uint64_t v4 = *(char **)a2;
    *(void *)(a2 + 8) = *(void *)a2;
    uint64_t v5 = v18 - v17;
    if (v18 == v17)
    {
      uint64_t v11 = v4;
    }
    else
    {
      char v6 = v5 >> 4;
      uint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 16) - (void)v4) >> 4);
      if (v7 >= v5 >> 4)
      {
        uint64_t v11 = &v4[48 * v6];
        do
        {
          *(_OWORD *)uint64_t v4 = 0uLL;
          *((_OWORD *)v4 + 1) = 0uLL;
          *((_OWORD *)v4 + 2) = 0uLL;
          *((_DWORD *)v4 + 1) = 1065353216;
          *(_OWORD *)(v4 + 12) = xmmword_192DCA4C0;
          *(_OWORD *)(v4 + 28) = xmmword_192DC5D50;
          v4 += 48;
        }
        while (v4 != v11);
        *(void *)(a2 + 8) = v11;
      }
      else
      {
        if ((unint64_t)v5 >= 0x5555555555555551) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        int v8 = 0x5555555555555556 * ((uint64_t)(*(void *)(a2 + 16) - (void)v4) >> 4);
        if (v8 <= v6) {
          int v8 = v6;
        }
        if (v7 >= 0x2AAAAAAAAAAAAAALL) {
          char v9 = 0x555555555555555;
        }
        else {
          char v9 = v8;
        }
        if (v9 > 0x555555555555555) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        char v10 = (char *)operator new(48 * v9);
        uint64_t v11 = &v10[48 * v6];
        uint64_t v12 = v10;
        do
        {
          *(_OWORD *)uint64_t v12 = 0uLL;
          *((_OWORD *)v12 + 1) = 0uLL;
          *((_OWORD *)v12 + 2) = 0uLL;
          *((_DWORD *)v12 + 1) = 1065353216;
          *(_OWORD *)(v12 + 12) = xmmword_192DCA4C0;
          *(_OWORD *)(v12 + 28) = xmmword_192DC5D50;
          v12 += 48;
        }
        while (v12 != v11);
        *(void *)a2 = v10;
        *(void *)(a2 + 8) = v11;
        *(void *)(a2 + 16) = &v10[48 * v9];
        if (v4)
        {
          operator delete(v4);
          uint64_t v11 = *(char **)(a2 + 8);
        }
      }
    }
    char v13 = *(char **)a2;
    if (v11 != *(char **)a2)
    {
      int v14 = 0;
      int v15 = 0;
      uint64_t v16 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::load_random_params_t>(*(void *)(v17 + v14), (uint64_t)&v13[v15], 0);
        ++v16;
        char v13 = *(char **)a2;
        v15 += 48;
        v14 += 16;
      }
      while (v16 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4));
    }
    uint64_t v19 = (void **)&v17;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v19);
  }
}

{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void **v19;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 128))(&v17);
    uint64_t v4 = *(char **)a2;
    *(void *)(a2 + 8) = *(void *)a2;
    uint64_t v5 = v18 - v17;
    if (v18 == v17)
    {
      uint64_t v11 = v4;
    }
    else
    {
      char v6 = v5 >> 4;
      uint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 16) - (void)v4) >> 2);
      if (v7 >= v5 >> 4)
      {
        uint64_t v11 = &v4[12 * v6];
        do
        {
          *(void *)uint64_t v4 = 1065353216;
          *((_DWORD *)v4 + 2) = 1065353216;
          v4 += 12;
        }
        while (v4 != v11);
        *(void *)(a2 + 8) = v11;
      }
      else
      {
        if (v5 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        int v8 = 0x5555555555555556 * ((uint64_t)(*(void *)(a2 + 16) - (void)v4) >> 2);
        if (v8 <= v6) {
          int v8 = v6;
        }
        if (v7 >= 0xAAAAAAAAAAAAAAALL) {
          char v9 = 0x1555555555555555;
        }
        else {
          char v9 = v8;
        }
        if (v9 > 0x1555555555555555) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        char v10 = (char *)operator new(12 * v9);
        uint64_t v11 = &v10[12 * v6];
        uint64_t v12 = v10;
        do
        {
          *(void *)uint64_t v12 = 1065353216;
          *((_DWORD *)v12 + 2) = 1065353216;
          v12 += 12;
        }
        while (v12 != v11);
        *(void *)a2 = v10;
        *(void *)(a2 + 8) = v11;
        *(void *)(a2 + 16) = &v10[12 * v9];
        if (v4)
        {
          operator delete(v4);
          uint64_t v11 = *(char **)(a2 + 8);
        }
      }
    }
    char v13 = *(char **)a2;
    if (v11 != *(char **)a2)
    {
      int v14 = 0;
      int v15 = 0;
      uint64_t v16 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::range_params_t>(*(void *)(v17 + v14), (float *)&v13[v15], 0);
        ++v16;
        char v13 = *(char **)a2;
        v15 += 12;
        v14 += 16;
      }
      while (v16 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2));
    }
    uint64_t v19 = (void **)&v17;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v19);
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 120))(&v4);
    Espresso::SerDes::params_io<Espresso::matrix_band_part_params_t>(v4, a2, 0);
    if (v5) {
      nitro::nitro_function::nitro_function(v5);
    }
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 120))(&v4);
    Espresso::SerDes::params_io<Espresso::fill_params_t>(v4, a2, 0);
    if (v5) {
      nitro::nitro_function::nitro_function(v5);
    }
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 120))(&v4);
    Espresso::SerDes::params_io<Espresso::tensor_zero_pad_params_t>(v4, a2, 0);
    if (v5) {
      nitro::nitro_function::nitro_function(v5);
    }
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 120))(&v4);
    Espresso::SerDes::params_io<Espresso::squeeze_params_t>(v4, a2, 0);
    if (v5) {
      nitro::nitro_function::nitro_function(v5);
    }
  }
}

{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void **v19;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 128))(&v17);
    uint64_t v4 = *(char **)a2;
    *(void *)(a2 + 8) = *(void *)a2;
    uint64_t v5 = v18 - v17;
    if (v18 == v17)
    {
      uint64_t v11 = v4;
    }
    else
    {
      char v6 = v5 >> 4;
      uint64_t v7 = 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a2 + 16) - (void)v4) >> 4);
      if (v7 >= v5 >> 4)
      {
        uint64_t v11 = &v4[144 * v6];
        do
        {
          *(_OWORD *)(v4 + 124) = 0uLL;
          *((_OWORD *)v4 + 6) = 0uLL;
          *((_OWORD *)v4 + 7) = 0uLL;
          *((_OWORD *)v4 + 4) = 0uLL;
          *((_OWORD *)v4 + 5) = 0uLL;
          *((_OWORD *)v4 + 2) = 0uLL;
          *((_OWORD *)v4 + 3) = 0uLL;
          *(_OWORD *)uint64_t v4 = 0uLL;
          *((_OWORD *)v4 + 1) = 0uLL;
          *((_DWORD *)v4 + 35) = 2;
          v4 += 144;
        }
        while (v4 != v11);
        *(void *)(a2 + 8) = v11;
      }
      else
      {
        if ((unint64_t)v5 >= 0x1C71C71C71C71C71) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        int v8 = 0x1C71C71C71C71C72 * ((uint64_t)(*(void *)(a2 + 16) - (void)v4) >> 4);
        if (v8 <= v6) {
          int v8 = v6;
        }
        if (v7 >= 0xE38E38E38E38E3) {
          char v9 = 0x1C71C71C71C71C7;
        }
        else {
          char v9 = v8;
        }
        if (v9 > 0x1C71C71C71C71C7) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        char v10 = (char *)operator new(144 * v9);
        uint64_t v11 = &v10[144 * v6];
        uint64_t v12 = v10;
        do
        {
          *(_OWORD *)(v12 + 124) = 0uLL;
          *((_OWORD *)v12 + 6) = 0uLL;
          *((_OWORD *)v12 + 7) = 0uLL;
          *((_OWORD *)v12 + 4) = 0uLL;
          *((_OWORD *)v12 + 5) = 0uLL;
          *((_OWORD *)v12 + 2) = 0uLL;
          *((_OWORD *)v12 + 3) = 0uLL;
          *(_OWORD *)uint64_t v12 = 0uLL;
          *((_OWORD *)v12 + 1) = 0uLL;
          *((_DWORD *)v12 + 35) = 2;
          v12 += 144;
        }
        while (v12 != v11);
        *(void *)a2 = v10;
        *(void *)(a2 + 8) = v11;
        *(void *)(a2 + 16) = &v10[144 * v9];
        if (v4)
        {
          operator delete(v4);
          uint64_t v11 = *(char **)(a2 + 8);
        }
      }
    }
    char v13 = *(char **)a2;
    if (v11 != *(char **)a2)
    {
      int v14 = 0;
      int v15 = 0;
      uint64_t v16 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::squeeze_params_t>(*(void *)(v17 + v14), (uint64_t)&v13[v15], 0);
        ++v16;
        char v13 = *(char **)a2;
        v15 += 144;
        v14 += 16;
      }
      while (v16 < 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4));
    }
    uint64_t v19 = (void **)&v17;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v19);
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 120))(&v4);
    Espresso::SerDes::params_io<Espresso::array_gather_params_t>(v4, a2, 0);
    if (v5) {
      nitro::nitro_function::nitro_function(v5);
    }
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 120))(&v4);
    Espresso::SerDes::params_io<Espresso::instancenorm_1d_params_t>(v4, a2, 0);
    if (v5) {
      nitro::nitro_function::nitro_function(v5);
    }
  }
}

{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void **v19;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 128))(&v17);
    uint64_t v4 = *(char **)a2;
    *(void *)(a2 + 8) = *(void *)a2;
    uint64_t v5 = v18 - v17;
    if (v18 == v17)
    {
      uint64_t v11 = v4;
    }
    else
    {
      char v6 = v5 >> 4;
      uint64_t v7 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 16) - (void)v4) >> 2);
      if (v7 >= v5 >> 4)
      {
        uint64_t v11 = &v4[20 * v6];
        do
        {
          *(void *)uint64_t v4 = 0x358637BD00000000;
          *((void *)v4 + 1) = 0;
          *((_DWORD *)v4 + 4) = 0;
          v4 += 20;
        }
        while (v4 != v11);
        *(void *)(a2 + 8) = v11;
      }
      else
      {
        if (v5 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        int v8 = 0x999999999999999ALL * ((uint64_t)(*(void *)(a2 + 16) - (void)v4) >> 2);
        if (v8 <= v6) {
          int v8 = v6;
        }
        if (v7 >= 0x666666666666666) {
          char v9 = 0xCCCCCCCCCCCCCCCLL;
        }
        else {
          char v9 = v8;
        }
        if (v9 > 0xCCCCCCCCCCCCCCCLL) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        char v10 = (char *)operator new(20 * v9);
        uint64_t v11 = &v10[20 * v6];
        uint64_t v12 = v10;
        do
        {
          *(void *)uint64_t v12 = 0x358637BD00000000;
          *((void *)v12 + 1) = 0;
          *((_DWORD *)v12 + 4) = 0;
          v12 += 20;
        }
        while (v12 != v11);
        *(void *)a2 = v10;
        *(void *)(a2 + 8) = v11;
        *(void *)(a2 + 16) = &v10[20 * v9];
        if (v4)
        {
          operator delete(v4);
          uint64_t v11 = *(char **)(a2 + 8);
        }
      }
    }
    char v13 = *(char **)a2;
    if (v11 != *(char **)a2)
    {
      int v14 = 0;
      int v15 = 0;
      uint64_t v16 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::instancenorm_1d_params_t>(*(void *)(v17 + v14), (uint64_t)&v13[v15], 0);
        ++v16;
        char v13 = *(char **)a2;
        v15 += 20;
        v14 += 16;
      }
      while (v16 < 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2));
    }
    uint64_t v19 = (void **)&v17;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v19);
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 120))(&v4);
    Espresso::SerDes::params_io<Espresso::gumbel_max_params_t>(v4, a2, 0);
    if (v5) {
      nitro::nitro_function::nitro_function(v5);
    }
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 120))(&v4);
    Espresso::SerDes::params_io<Espresso::builtin_params_t>(v4, a2, 0);
    if (v5) {
      nitro::nitro_function::nitro_function(v5);
    }
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 120))(&v4);
    Espresso::SerDes::params_io<Espresso::general_slice_params_t>(v4, a2, 0);
    if (v5) {
      nitro::nitro_function::nitro_function(v5);
    }
  }
}

{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void **v19;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 128))(&v17);
    uint64_t v4 = *(char **)a2;
    *(void *)(a2 + 8) = *(void *)a2;
    uint64_t v5 = v18 - v17;
    if (v18 == v17)
    {
      uint64_t v11 = v4;
    }
    else
    {
      char v6 = v5 >> 4;
      uint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 16) - (void)v4) >> 2);
      if (v7 >= v5 >> 4)
      {
        uint64_t v11 = &v4[12 * v6];
        do
        {
          *(void *)uint64_t v4 = 0x100000000;
          *((_DWORD *)v4 + 2) = 1;
          v4 += 12;
        }
        while (v4 != v11);
        *(void *)(a2 + 8) = v11;
      }
      else
      {
        if (v5 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        int v8 = 0x5555555555555556 * ((uint64_t)(*(void *)(a2 + 16) - (void)v4) >> 2);
        if (v8 <= v6) {
          int v8 = v6;
        }
        if (v7 >= 0xAAAAAAAAAAAAAAALL) {
          char v9 = 0x1555555555555555;
        }
        else {
          char v9 = v8;
        }
        if (v9 > 0x1555555555555555) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        char v10 = (char *)operator new(12 * v9);
        uint64_t v11 = &v10[12 * v6];
        uint64_t v12 = v10;
        do
        {
          *(void *)uint64_t v12 = 0x100000000;
          *((_DWORD *)v12 + 2) = 1;
          v12 += 12;
        }
        while (v12 != v11);
        *(void *)a2 = v10;
        *(void *)(a2 + 8) = v11;
        *(void *)(a2 + 16) = &v10[12 * v9];
        if (v4)
        {
          operator delete(v4);
          uint64_t v11 = *(char **)(a2 + 8);
        }
      }
    }
    char v13 = *(char **)a2;
    if (v11 != *(char **)a2)
    {
      int v14 = 0;
      int v15 = 0;
      uint64_t v16 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::sliding_windows_params_t>(*(void *)(v17 + v14), &v13[v15], 0);
        ++v16;
        char v13 = *(char **)a2;
        v15 += 12;
        v14 += 16;
      }
      while (v16 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2));
    }
    uint64_t v19 = (void **)&v17;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v19);
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 120))(&v4);
    Espresso::SerDes::params_io<Espresso::cross_entropy_params_t>(v4, a2, 0);
    if (v5) {
      nitro::nitro_function::nitro_function(v5);
    }
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 120))(&v4);
    Espresso::SerDes::params_io<Espresso::non_maximum_suppression_params_t>(v4, a2, 0);
    if (v5) {
      nitro::nitro_function::nitro_function(v5);
    }
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 120))(&v4);
    Espresso::SerDes::params_io<Espresso::sgd_params_t>(v4, a2, 0);
    if (v5) {
      nitro::nitro_function::nitro_function(v5);
    }
  }
}

{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void **v19;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 128))(&v17);
    uint64_t v4 = *(char **)a2;
    *(void *)(a2 + 8) = *(void *)a2;
    uint64_t v5 = v18 - v17;
    if (v18 == v17)
    {
      uint64_t v11 = v4;
    }
    else
    {
      char v6 = v5 >> 4;
      uint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 16) - (void)v4) >> 2);
      if (v7 >= v5 >> 4)
      {
        uint64_t v11 = &v4[12 * v6];
        do
        {
          *(void *)uint64_t v4 = 0;
          *((_DWORD *)v4 + 2) = 1;
          v4 += 12;
        }
        while (v4 != v11);
        *(void *)(a2 + 8) = v11;
      }
      else
      {
        if (v5 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        int v8 = 0x5555555555555556 * ((uint64_t)(*(void *)(a2 + 16) - (void)v4) >> 2);
        if (v8 <= v6) {
          int v8 = v6;
        }
        if (v7 >= 0xAAAAAAAAAAAAAAALL) {
          char v9 = 0x1555555555555555;
        }
        else {
          char v9 = v8;
        }
        if (v9 > 0x1555555555555555) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        char v10 = (char *)operator new(12 * v9);
        uint64_t v11 = &v10[12 * v6];
        uint64_t v12 = v10;
        do
        {
          *(void *)uint64_t v12 = 0;
          *((_DWORD *)v12 + 2) = 1;
          v12 += 12;
        }
        while (v12 != v11);
        *(void *)a2 = v10;
        *(void *)(a2 + 8) = v11;
        *(void *)(a2 + 16) = &v10[12 * v9];
        if (v4)
        {
          operator delete(v4);
          uint64_t v11 = *(char **)(a2 + 8);
        }
      }
    }
    char v13 = *(char **)a2;
    if (v11 != *(char **)a2)
    {
      int v14 = 0;
      int v15 = 0;
      uint64_t v16 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::sgd_params_t>(*(void *)(v17 + v14), (uint64_t)&v13[v15], 0);
        ++v16;
        char v13 = *(char **)a2;
        v15 += 12;
        v14 += 16;
      }
      while (v16 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2));
    }
    uint64_t v19 = (void **)&v17;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v19);
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 120))(&v4);
    Espresso::SerDes::params_io<Espresso::gather_nd_params_t>(v4, a2, 0);
    if (v5) {
      nitro::nitro_function::nitro_function(v5);
    }
  }
}

{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void **v18;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 128))(&v16);
    uint64_t v4 = *(char **)a2;
    *(void *)(a2 + 8) = *(void *)a2;
    uint64_t v5 = v17 - v16;
    if (v17 == v16)
    {
      uint64_t v11 = v4;
    }
    else
    {
      char v6 = v5 >> 4;
      uint64_t v7 = *(void *)(a2 + 16) - (void)v4;
      if (v5 >> 4 <= (unint64_t)(v7 >> 4))
      {
        uint64_t v11 = &v4[16 * v6];
        do
        {
          *(void *)uint64_t v4 = 0;
          *((void *)v4 + 1) = 0;
          *((_WORD *)v4 + 6) = 257;
          v4 += 16;
        }
        while (v4 != v11);
        *(void *)(a2 + 8) = v11;
      }
      else
      {
        if (v5 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        int v8 = v7 >> 3;
        if (v7 >> 3 <= v6) {
          int v8 = v6;
        }
        if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF0) {
          char v9 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          char v9 = v8;
        }
        if (v9 >> 60) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        char v10 = (char *)operator new(16 * v9);
        uint64_t v11 = &v10[16 * v6];
        uint64_t v12 = v10;
        do
        {
          *(void *)uint64_t v12 = 0;
          *((void *)v12 + 1) = 0;
          *((_WORD *)v12 + 6) = 257;
          v12 += 16;
        }
        while (v12 != v11);
        *(void *)a2 = v10;
        *(void *)(a2 + 8) = v11;
        *(void *)(a2 + 16) = &v10[16 * v9];
        if (v4)
        {
          operator delete(v4);
          uint64_t v11 = *(char **)(a2 + 8);
        }
      }
    }
    char v13 = *(char **)a2;
    if (v11 != *(char **)a2)
    {
      int v14 = 0;
      int v15 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::gather_nd_params_t>(*(void *)(v16 + v14), (uint64_t)&v13[v14], 0);
        ++v15;
        char v13 = *(char **)a2;
        v14 += 16;
      }
      while (v15 < (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4);
    }
    uint64_t v18 = (void **)&v16;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v18);
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 120))(&v4);
    Espresso::SerDes::params_io<Espresso::adam_params_t>(v4, a2, 0);
    if (v5) {
      nitro::nitro_function::nitro_function(v5);
    }
  }
}

{
  void *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void **v18;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 128))(&v16);
    uint64_t v4 = *(void **)a2;
    *(void *)(a2 + 8) = *(void *)a2;
    uint64_t v5 = v17 - v16;
    if (v17 == v16)
    {
      uint64_t v11 = v4;
    }
    else
    {
      char v6 = v5 >> 4;
      uint64_t v7 = *(void *)(a2 + 16) - (void)v4;
      if (v5 >> 4 <= (unint64_t)(v7 >> 4))
      {
        uint64_t v11 = &v4[2 * v6];
        do
        {
          *uint64_t v4 = 0x3F7FBE773F666666;
          v4[1] = 0x1322BCC77;
          v4 += 2;
        }
        while (v4 != v11);
        *(void *)(a2 + 8) = v11;
      }
      else
      {
        if (v5 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        int v8 = v7 >> 3;
        if (v7 >> 3 <= v6) {
          int v8 = v6;
        }
        if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF0) {
          char v9 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          char v9 = v8;
        }
        if (v9 >> 60) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        char v10 = operator new(16 * v9);
        uint64_t v11 = &v10[2 * v6];
        uint64_t v12 = v10;
        do
        {
          *uint64_t v12 = 0x3F7FBE773F666666;
          v12[1] = 0x1322BCC77;
          v12 += 2;
        }
        while (v12 != v11);
        *(void *)a2 = v10;
        *(void *)(a2 + 8) = v11;
        *(void *)(a2 + 16) = &v10[2 * v9];
        if (v4)
        {
          operator delete(v4);
          uint64_t v11 = *(void **)(a2 + 8);
        }
      }
    }
    char v13 = *(void **)a2;
    if (v11 != *(void **)a2)
    {
      int v14 = 0;
      int v15 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::adam_params_t>(*(void *)(v16 + v14 * 8), (uint64_t)&v13[v14], 0);
        ++v15;
        char v13 = *(void **)a2;
        v14 += 2;
      }
      while (v15 < (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4);
    }
    uint64_t v18 = (void **)&v16;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v18);
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 120))(&v4);
    Espresso::SerDes::params_io<Espresso::scatter_nd_params_t>(v4, a2, 0);
    if (v5) {
      nitro::nitro_function::nitro_function(v5);
    }
  }
}

{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void **v18;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 128))(&v16);
    uint64_t v4 = *(char **)a2;
    *(void *)(a2 + 8) = *(void *)a2;
    uint64_t v5 = v17 - v16;
    if (v17 == v16)
    {
      uint64_t v11 = v4;
    }
    else
    {
      char v6 = v5 >> 4;
      uint64_t v7 = *(void *)(a2 + 16) - (void)v4;
      if (v5 >> 4 <= (unint64_t)(v7 >> 4))
      {
        uint64_t v11 = &v4[16 * v6];
        do
        {
          *(void *)uint64_t v4 = 0;
          *((void *)v4 + 1) = 0;
          *((_WORD *)v4 + 6) = 257;
          v4 += 16;
        }
        while (v4 != v11);
        *(void *)(a2 + 8) = v11;
      }
      else
      {
        if (v5 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        int v8 = v7 >> 3;
        if (v7 >> 3 <= v6) {
          int v8 = v6;
        }
        if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF0) {
          char v9 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          char v9 = v8;
        }
        if (v9 >> 60) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        char v10 = (char *)operator new(16 * v9);
        uint64_t v11 = &v10[16 * v6];
        uint64_t v12 = v10;
        do
        {
          *(void *)uint64_t v12 = 0;
          *((void *)v12 + 1) = 0;
          *((_WORD *)v12 + 6) = 257;
          v12 += 16;
        }
        while (v12 != v11);
        *(void *)a2 = v10;
        *(void *)(a2 + 8) = v11;
        *(void *)(a2 + 16) = &v10[16 * v9];
        if (v4)
        {
          operator delete(v4);
          uint64_t v11 = *(char **)(a2 + 8);
        }
      }
    }
    char v13 = *(char **)a2;
    if (v11 != *(char **)a2)
    {
      int v14 = 0;
      int v15 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::scatter_nd_params_t>(*(void *)(v16 + v14), (uint64_t)&v13[v14], 0);
        ++v15;
        char v13 = *(char **)a2;
        v14 += 16;
      }
      while (v15 < (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4);
    }
    uint64_t v18 = (void **)&v16;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v18);
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 120))(&v4);
    Espresso::SerDes::params_io<Espresso::one_hot_params_t>(v4, a2, 0);
    if (v5) {
      nitro::nitro_function::nitro_function(v5);
    }
  }
}

{
  Espresso::SerDes::params_io<Espresso::dev_op_params_t>(a1, a2, 0);
}

{
  void *v4;
  std::__shared_weak_count *v5;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(void **__return_ptr))(*(void *)*a1 + 120))(&v4);
    Espresso::SerDes::params_io<Espresso::dev_op_params_t>(v4, a2, 0);
    if (v5) {
      nitro::nitro_function::nitro_function(v5);
    }
  }
}

{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void **v19;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 128))(&v17);
    uint64_t v4 = *(char **)a2;
    *(void *)(a2 + 8) = *(void *)a2;
    uint64_t v5 = v18 - v17;
    if (v18 == v17)
    {
      uint64_t v11 = v4;
    }
    else
    {
      char v6 = v5 >> 4;
      uint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 16) - (void)v4) >> 2);
      if (v7 >= v5 >> 4)
      {
        uint64_t v11 = &v4[12 * v6];
        do
        {
          *(void *)uint64_t v4 = 0x100000001;
          *((_DWORD *)v4 + 2) = 0;
          v4 += 12;
        }
        while (v4 != v11);
        *(void *)(a2 + 8) = v11;
      }
      else
      {
        if (v5 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        int v8 = 0x5555555555555556 * ((uint64_t)(*(void *)(a2 + 16) - (void)v4) >> 2);
        if (v8 <= v6) {
          int v8 = v6;
        }
        if (v7 >= 0xAAAAAAAAAAAAAAALL) {
          char v9 = 0x1555555555555555;
        }
        else {
          char v9 = v8;
        }
        if (v9 > 0x1555555555555555) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        char v10 = (char *)operator new(12 * v9);
        uint64_t v11 = &v10[12 * v6];
        uint64_t v12 = v10;
        do
        {
          *(void *)uint64_t v12 = 0x100000001;
          *((_DWORD *)v12 + 2) = 0;
          v12 += 12;
        }
        while (v12 != v11);
        *(void *)a2 = v10;
        *(void *)(a2 + 8) = v11;
        *(void *)(a2 + 16) = &v10[12 * v9];
        if (v4)
        {
          operator delete(v4);
          uint64_t v11 = *(char **)(a2 + 8);
        }
      }
    }
    char v13 = *(char **)a2;
    if (v11 != *(char **)a2)
    {
      int v14 = 0;
      int v15 = 0;
      uint64_t v16 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::sparse_inner_product_params_t>(*(void *)(v17 + v14), &v13[v15], 0);
        ++v16;
        char v13 = *(char **)a2;
        v15 += 12;
        v14 += 16;
      }
      while (v16 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2));
    }
    uint64_t v19 = (void **)&v17;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v19);
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 120))(&v4);
    Espresso::SerDes::params_io<Espresso::wg_transform_params>(v4, a2, 0);
    if (v5) {
      nitro::nitro_function::nitro_function(v5);
    }
  }
}

{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void **v19;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 128))(&v17);
    uint64_t v4 = *(char **)a2;
    *(void *)(a2 + 8) = *(void *)a2;
    uint64_t v5 = v18 - v17;
    if (v18 == v17)
    {
      uint64_t v11 = v4;
    }
    else
    {
      char v6 = v5 >> 4;
      uint64_t v7 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 16) - (void)v4) >> 3);
      if (v7 >= v5 >> 4)
      {
        uint64_t v11 = &v4[40 * v6];
        do
        {
          *(_OWORD *)uint64_t v4 = xmmword_192DCA4F0;
          *((void *)v4 + 3) = 0;
          *((void *)v4 + 4) = 0;
          *((void *)v4 + 2) = 0;
          v4 += 40;
        }
        while (v4 != v11);
        *(void *)(a2 + 8) = v11;
      }
      else
      {
        if ((unint64_t)v5 >= 0x6666666666666661) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        int v8 = 0x999999999999999ALL * ((uint64_t)(*(void *)(a2 + 16) - (void)v4) >> 3);
        if (v8 <= v6) {
          int v8 = v6;
        }
        if (v7 >= 0x333333333333333) {
          char v9 = 0x666666666666666;
        }
        else {
          char v9 = v8;
        }
        if (v9 > 0x666666666666666) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        char v10 = (char *)operator new(40 * v9);
        uint64_t v11 = &v10[40 * v6];
        uint64_t v12 = v10;
        do
        {
          *(_OWORD *)uint64_t v12 = xmmword_192DCA4F0;
          *((void *)v12 + 3) = 0;
          *((void *)v12 + 4) = 0;
          *((void *)v12 + 2) = 0;
          v12 += 40;
        }
        while (v12 != v11);
        *(void *)a2 = v10;
        *(void *)(a2 + 8) = v11;
        *(void *)(a2 + 16) = &v10[40 * v9];
        if (v4)
        {
          operator delete(v4);
          uint64_t v11 = *(char **)(a2 + 8);
        }
      }
    }
    char v13 = *(char **)a2;
    if (v11 != *(char **)a2)
    {
      int v14 = 0;
      int v15 = 0;
      uint64_t v16 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::wg_transform_params>(*(void *)(v17 + v14), (uint64_t)&v13[v15], 0);
        ++v16;
        char v13 = *(char **)a2;
        v15 += 40;
        v14 += 16;
      }
      while (v16 < 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
    }
    uint64_t v19 = (void **)&v17;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v19);
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 120))(&v4);
    Espresso::SerDes::params_io<Espresso::grid_sampling_params_t>(v4, a2, 0);
    if (v5) {
      nitro::nitro_function::nitro_function(v5);
    }
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 120))(&v4);
    Espresso::SerDes::params_io<Espresso::resample_params_t>(v4, a2, 0);
    if (v5) {
      nitro::nitro_function::nitro_function(v5);
    }
  }
}

{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void **v19;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 128))(&v17);
    uint64_t v4 = *(char **)a2;
    *(void *)(a2 + 8) = *(void *)a2;
    uint64_t v5 = v18 - v17;
    if (v18 == v17)
    {
      uint64_t v12 = v4;
    }
    else
    {
      char v6 = v5 >> 4;
      uint64_t v7 = *(void *)(a2 + 16) - (void)v4;
      if (v5 >> 4 <= (unint64_t)(v7 >> 4))
      {
        uint64_t v12 = &v4[16 * v6];
        char v13 = 16 * v6;
        do
        {
          *(_OWORD *)uint64_t v4 = xmmword_192DCA740;
          v4 += 16;
          v13 -= 16;
        }
        while (v13);
        *(void *)(a2 + 8) = v12;
      }
      else
      {
        if (v5 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        int v8 = v7 >> 3;
        if (v7 >> 3 <= v6) {
          int v8 = v6;
        }
        if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF0) {
          char v9 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          char v9 = v8;
        }
        if (v9 >> 60) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        char v10 = (char *)operator new(16 * v9);
        uint64_t v11 = 0;
        uint64_t v12 = &v10[16 * v6];
        do
        {
          *(_OWORD *)&v10[v11] = xmmword_192DCA740;
          v11 += 16;
        }
        while (16 * v6 != v11);
        *(void *)a2 = v10;
        *(void *)(a2 + 8) = v12;
        *(void *)(a2 + 16) = &v10[16 * v9];
        if (v4)
        {
          operator delete(v4);
          uint64_t v12 = *(char **)(a2 + 8);
        }
      }
    }
    int v14 = *(char **)a2;
    if (v12 != *(char **)a2)
    {
      int v15 = 0;
      uint64_t v16 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::local_correlation_params_t>(*(void *)(v17 + v15), &v14[v15], 0);
        ++v16;
        int v14 = *(char **)a2;
        v15 += 16;
      }
      while (v16 < (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4);
    }
    uint64_t v19 = (void **)&v17;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v19);
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 120))(&v4);
    Espresso::SerDes::params_io<Espresso::self_attention_params_t>(v4, a2, 0);
    if (v5) {
      nitro::nitro_function::nitro_function(v5);
    }
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 120))(&v4);
    Espresso::SerDes::params_io<Espresso::loopkit_params_t>(v4, a2, 0);
    if (v5) {
      nitro::nitro_function::nitro_function(v5);
    }
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 120))(&v4);
    Espresso::SerDes::params_io<Espresso::argsort_params_t>(v4, a2, 0);
    if (v5) {
      nitro::nitro_function::nitro_function(v5);
    }
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 120))(&v4);
    Espresso::SerDes::params_io<Espresso::pool3d_params_t>(v4, a2, 0);
    if (v5) {
      nitro::nitro_function::nitro_function(v5);
    }
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 120))(&v4);
    Espresso::SerDes::params_io<Espresso::conv3d_params_t>(v4, a2, 0);
    if (v5) {
      nitro::nitro_function::nitro_function(v5);
    }
  }
}

{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void **v19;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 128))(&v17);
    uint64_t v4 = *(char **)a2;
    *(void *)(a2 + 8) = *(void *)a2;
    uint64_t v5 = v18 - v17;
    if (v18 == v17)
    {
      uint64_t v11 = v4;
    }
    else
    {
      char v6 = v5 >> 4;
      uint64_t v7 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a2 + 16) - (void)v4) >> 2);
      if (v7 >= v5 >> 4)
      {
        uint64_t v11 = &v4[28 * v6];
        do
        {
          *(_OWORD *)uint64_t v4 = xmmword_192DCA6B0;
          *((void *)v4 + 2) = 0x100000000;
          *((_DWORD *)v4 + 6) = 0;
          v4 += 28;
        }
        while (v4 != v11);
        *(void *)(a2 + 8) = v11;
      }
      else
      {
        if (v5 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        int v8 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(*(void *)(a2 + 16) - (void)v4) >> 2);
        if (v8 <= v6) {
          int v8 = v6;
        }
        if (v7 >= 0x492492492492492) {
          char v9 = 0x924924924924924;
        }
        else {
          char v9 = v8;
        }
        if (v9 > 0x924924924924924) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        char v10 = (char *)operator new(28 * v9);
        uint64_t v11 = &v10[28 * v6];
        uint64_t v12 = v10;
        do
        {
          *(_OWORD *)uint64_t v12 = xmmword_192DCA6B0;
          *((void *)v12 + 2) = 0x100000000;
          *((_DWORD *)v12 + 6) = 0;
          v12 += 28;
        }
        while (v12 != v11);
        *(void *)a2 = v10;
        *(void *)(a2 + 8) = v11;
        *(void *)(a2 + 16) = &v10[28 * v9];
        if (v4)
        {
          operator delete(v4);
          uint64_t v11 = *(char **)(a2 + 8);
        }
      }
    }
    char v13 = *(void **)a2;
    if (v11 != *(char **)a2)
    {
      int v14 = 0;
      int v15 = 0;
      uint64_t v16 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::slice_update_params_t>(*(void *)(v17 + v14), (void *)((char *)v13 + v15), 0);
        ++v16;
        char v13 = *(void **)a2;
        v15 += 28;
        v14 += 16;
      }
      while (v16 < 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2));
    }
    uint64_t v19 = (void **)&v17;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v19);
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 120))(&v4);
    Espresso::SerDes::params_io<Espresso::static_quantize_params_t>(v4, a2, 0);
    if (v5) {
      nitro::nitro_function::nitro_function(v5);
    }
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 120))(&v4);
    Espresso::SerDes::params_io<Espresso::static_dequantize_params_t>(v4, a2, 0);
    if (v5) {
      nitro::nitro_function::nitro_function(v5);
    }
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 120))(&v4);
    Espresso::SerDes::params_io<Espresso::general_slice_update_params_t>(v4, a2, 0);
    if (v5) {
      nitro::nitro_function::nitro_function(v5);
    }
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 120))(&v4);
    Espresso::SerDes::params_io<Espresso::einsum_params_t>(v4, a2, 0);
    if (v5) {
      nitro::nitro_function::nitro_function(v5);
    }
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 120))(&v4);
    Espresso::SerDes::params_io<Espresso::foreign_network_storage_blob_t>(v4, a2, 0);
    if (v5) {
      nitro::nitro_function::nitro_function(v5);
    }
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 120))(&v4);
    Espresso::SerDes::params_io<Espresso::foreign_network_weight_file_t>(v4, a2, 0);
    if (v5) {
      nitro::nitro_function::nitro_function(v5);
    }
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 120))(&v4);
    Espresso::SerDes::params_io<Espresso::tunneled_ane_op_params_t>(v4, a2, 0);
    if (v5) {
      nitro::nitro_function::nitro_function(v5);
    }
  }
}

{
  Espresso::tunneled_ane_op_params_t *v4;
  Espresso::tunneled_ane_op_params_t *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  size_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  long long v23;
  long long v24;
  long long v25;
  Espresso::tunneled_ane_op_params_t *v26;
  Espresso::tunneled_ane_op_params_t *v27;
  Espresso::tunneled_ane_op_params_t *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void **v34;

  if (!(*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2)) {
    return;
  }
  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 128))(&v32);
  uint64_t v4 = *(Espresso::tunneled_ane_op_params_t **)a2;
  uint64_t v5 = *(Espresso::tunneled_ane_op_params_t **)(a2 + 8);
  if (v5 != *(Espresso::tunneled_ane_op_params_t **)a2)
  {
    do
    {
      uint64_t v5 = (Espresso::tunneled_ane_op_params_t *)((char *)v5 - 280);
      Espresso::tunneled_ane_op_params_t::~tunneled_ane_op_params_t(v5);
    }
    while (v5 != v4);
    uint64_t v5 = *(Espresso::tunneled_ane_op_params_t **)a2;
  }
  *(void *)(a2 + 8) = v4;
  char v6 = (v33 - v32) >> 4;
  uint64_t v7 = 0xAF8AF8AF8AF8AF8BLL * ((v4 - v5) >> 3);
  int v8 = v6 - v7;
  if (v6 <= v7)
  {
    if (v6 >= v7)
    {
      int32x2_t v27 = v4;
      goto LABEL_31;
    }
    int32x2_t v27 = (Espresso::tunneled_ane_op_params_t *)((char *)v5 + 280 * v6);
    while (v4 != v27)
    {
      uint64_t v4 = (Espresso::tunneled_ane_op_params_t *)((char *)v4 - 280);
      Espresso::tunneled_ane_op_params_t::~tunneled_ane_op_params_t(v4);
    }
  }
  else
  {
    char v9 = *(void *)(a2 + 16);
    if (0xAF8AF8AF8AF8AF8BLL * ((v9 - (uint64_t)v4) >> 3) < v8)
    {
      if ((unint64_t)(v33 - v32) >= 0xEA0EA0EA0EA0EA1) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      char v10 = 0xAF8AF8AF8AF8AF8BLL * ((v9 - (uint64_t)v5) >> 3);
      uint64_t v11 = 0x5F15F15F15F15F16 * ((v9 - (uint64_t)v5) >> 3);
      if (v11 > v6) {
        char v6 = v11;
      }
      if (v10 >= 0x75075075075075) {
        uint64_t v12 = 0xEA0EA0EA0EA0EALL;
      }
      else {
        uint64_t v12 = v6;
      }
      if (v12 > 0xEA0EA0EA0EA0EALL) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      char v13 = (char *)operator new(280 * v12);
      int v14 = &v13[8 * ((v4 - v5) >> 3)];
      int v15 = &v13[280 * v12];
      uint64_t v16 = 280 * ((280 * v8 - 280) / 0x118) + 280;
      bzero(v14, v16);
      char v17 = &v14[v16];
      if (v4 == v5)
      {
        *(void *)a2 = v14;
        *(void *)(a2 + 8) = v17;
        *(void *)(a2 + 16) = v15;
      }
      else
      {
        uint64_t v18 = 0;
        do
        {
          uint64_t v19 = &v14[v18];
          size_t v20 = (char *)v4 + v18;
          long long v21 = (uint64_t)v4 + v18 - 280;
          int v22 = &v14[v18 - 264];
          *(void *)int v22 = 0;
          *(_OWORD *)&v14[v18 - 280] = *(_OWORD *)v21;
          *(void *)int v22 = *(void *)((char *)v4 + v18 - 264);
          *(void *)((char *)v4 + v18 - 272) = 0;
          *(void *)long long v21 = 0;
          *(void *)(v21 + 16) = 0;
          *((void *)v19 - 30) = 0;
          *((_OWORD *)v19 - 16) = *(_OWORD *)((char *)v4 + v18 - 256);
          *((void *)v19 - 30) = *(void *)((char *)v4 + v18 - 240);
          *((void *)v20 - 31) = 0;
          *((void *)v20 - 30) = 0;
          *((void *)v20 - 32) = 0;
          *((_DWORD *)v19 - 58) = *(_DWORD *)((char *)v4 + v18 - 232);
          *((_DWORD *)v19 - 56) = *(_DWORD *)((char *)v4 + v18 - 224);
          int v23 = *(_OWORD *)((char *)v4 + v18 - 216);
          *((void *)v19 - 25) = *(void *)((char *)v4 + v18 - 200);
          *(_OWORD *)(v19 - 216) = v23;
          *((void *)v20 - 26) = 0;
          *((void *)v20 - 25) = 0;
          *((void *)v20 - 27) = 0;
          uint64_t v24 = *(_OWORD *)((char *)v4 + v18 - 192);
          *((void *)v19 - 22) = *(void *)((char *)v4 + v18 - 176);
          *((_OWORD *)v19 - 12) = v24;
          *((void *)v20 - 23) = 0;
          *((void *)v20 - 22) = 0;
          *((void *)v20 - 24) = 0;
          double v25 = *(_OWORD *)((char *)v4 + v18 - 168);
          *((void *)v19 - 19) = *(void *)((char *)v4 + v18 - 152);
          *(_OWORD *)(v19 - 168) = v25;
          *((void *)v20 - 20) = 0;
          *((void *)v20 - 19) = 0;
          *((void *)v20 - 21) = 0;
          *((void *)v19 - 16) = 0;
          *((_OWORD *)v19 - 9) = *(_OWORD *)((char *)v4 + v18 - 144);
          *((void *)v19 - 16) = *(void *)((char *)v4 + v18 - 128);
          *((void *)v20 - 18) = 0;
          *((void *)v20 - 17) = 0;
          *((void *)v20 - 16) = 0;
          *((void *)v19 - 13) = 0;
          *(_OWORD *)(v19 - 120) = *(_OWORD *)((char *)v4 + v18 - 120);
          *((void *)v19 - 13) = *(void *)((char *)v4 + v18 - 104);
          *((void *)v20 - 15) = 0;
          *((void *)v20 - 14) = 0;
          *((void *)v20 - 13) = 0;
          *((void *)v19 - 10) = 0;
          *((_OWORD *)v19 - 6) = *(_OWORD *)((char *)v4 + v18 - 96);
          *((void *)v19 - 10) = *(void *)((char *)v4 + v18 - 80);
          *((void *)v20 - 12) = 0;
          *((void *)v20 - 11) = 0;
          *((void *)v20 - 10) = 0;
          *((void *)v19 - 7) = 0;
          *(_OWORD *)(v19 - 72) = *(_OWORD *)((char *)v4 + v18 - 72);
          *((void *)v19 - 7) = *(void *)((char *)v4 + v18 - 56);
          *((void *)v20 - 9) = 0;
          *((void *)v20 - 8) = 0;
          *((void *)v20 - 7) = 0;
          *((void *)v19 - 4) = 0;
          *((_OWORD *)v19 - 3) = *(_OWORD *)((char *)v4 + v18 - 48);
          *((void *)v19 - 4) = *(void *)((char *)v4 + v18 - 32);
          *((void *)v20 - 6) = 0;
          *((void *)v20 - 5) = 0;
          *((void *)v20 - 4) = 0;
          *((void *)v19 - 1) = 0;
          *(_OWORD *)(v19 - 24) = *(_OWORD *)((char *)v4 + v18 - 24);
          *((void *)v19 - 1) = *(void *)((char *)v4 + v18 - 8);
          *((void *)v20 - 3) = 0;
          *((void *)v20 - 2) = 0;
          *((void *)v20 - 1) = 0;
          v18 -= 280;
        }
        while ((Espresso::tunneled_ane_op_params_t *)((char *)v4 + v18) != v5);
        double v26 = *(Espresso::tunneled_ane_op_params_t **)a2;
        uint64_t v4 = *(Espresso::tunneled_ane_op_params_t **)(a2 + 8);
        *(void *)a2 = &v14[v18];
        *(void *)(a2 + 8) = v17;
        *(void *)(a2 + 16) = v15;
        if (v4 != v26)
        {
          do
          {
            uint64_t v4 = (Espresso::tunneled_ane_op_params_t *)((char *)v4 - 280);
            Espresso::tunneled_ane_op_params_t::~tunneled_ane_op_params_t(v4);
          }
          while (v4 != v26);
          uint64_t v4 = v26;
        }
      }
      if (v4) {
        operator delete(v4);
      }
      int32x2_t v27 = *(Espresso::tunneled_ane_op_params_t **)(a2 + 8);
      goto LABEL_31;
    }
    bzero(v4, 280 * ((280 * v8 - 280) / 0x118) + 280);
    int32x2_t v27 = (Espresso::tunneled_ane_op_params_t *)((char *)v4 + 280 * ((280 * v8 - 280) / 0x118) + 280);
  }
  *(void *)(a2 + 8) = v27;
LABEL_31:
  int v28 = *(Espresso::tunneled_ane_op_params_t **)a2;
  if (v27 != *(Espresso::tunneled_ane_op_params_t **)a2)
  {
    uint64_t v29 = 0;
    unint64_t v30 = 0;
    uint64_t v31 = 0;
    do
    {
      Espresso::SerDes::params_io<Espresso::tunneled_ane_op_params_t>(*(void *)(v32 + v29), (uint64_t)v28 + v30, 0);
      ++v31;
      int v28 = *(Espresso::tunneled_ane_op_params_t **)a2;
      v30 += 280;
      v29 += 16;
    }
    while (v31 < 0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
  }
  char v34 = (void **)&v32;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v34);
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 120))(&v4);
    Espresso::SerDes::params_io<Espresso::tunneled_unit_bottom_layout_t>(v4, a2, 0);
    if (v5) {
      nitro::nitro_function::nitro_function(v5);
    }
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 120))(&v4);
    Espresso::SerDes::params_io<Espresso::tunneled_unit_top_layout_t>(v4, a2, 0);
    if (v5) {
      nitro::nitro_function::nitro_function(v5);
    }
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 120))(&v4);
    Espresso::SerDes::params_io<Espresso::tunneled_ane_unit_params_t>(v4, a2, 0);
    if (v5) {
      nitro::nitro_function::nitro_function(v5);
    }
  }
}

{
  void **v4;
  void **v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  size_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  void **v20;
  long long v21;
  void *v22;
  long long v23;
  long long v24;
  void **v25;
  void **v26;
  void **v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void **v33;

  if (!(*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2)) {
    return;
  }
  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 128))(&v31);
  uint64_t v4 = *(void ***)a2;
  uint64_t v5 = *(void ***)(a2 + 8);
  if (v5 != *(void ***)a2)
  {
    do
    {
      v5 -= 22;
      Espresso::tunneled_ane_unit_params_t::~tunneled_ane_unit_params_t(v5);
    }
    while (v5 != v4);
    uint64_t v5 = *(void ***)a2;
  }
  *(void *)(a2 + 8) = v4;
  char v6 = (v32 - v31) >> 4;
  uint64_t v7 = 0x2E8BA2E8BA2E8BA3 * (((char *)v4 - (char *)v5) >> 4);
  int v8 = v6 - v7;
  if (v6 <= v7)
  {
    if (v6 >= v7)
    {
      double v26 = v4;
      goto LABEL_31;
    }
    double v26 = &v5[22 * v6];
    while (v4 != v26)
    {
      v4 -= 22;
      Espresso::tunneled_ane_unit_params_t::~tunneled_ane_unit_params_t(v4);
    }
  }
  else
  {
    char v9 = *(void *)(a2 + 16);
    if (0x2E8BA2E8BA2E8BA3 * ((v9 - (uint64_t)v4) >> 4) < v8)
    {
      if ((unint64_t)(v32 - v31) >= 0x1745D1745D1745D1) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      char v10 = 0x2E8BA2E8BA2E8BA3 * ((v9 - (uint64_t)v5) >> 4);
      uint64_t v11 = 0x5D1745D1745D1746 * ((v9 - (uint64_t)v5) >> 4);
      if (v11 > v6) {
        char v6 = v11;
      }
      if (v10 >= 0xBA2E8BA2E8BA2ELL) {
        uint64_t v12 = 0x1745D1745D1745DLL;
      }
      else {
        uint64_t v12 = v6;
      }
      if (v12 > 0x1745D1745D1745DLL) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      char v13 = (char *)operator new(176 * v12);
      int v14 = &v13[16 * (((char *)v4 - (char *)v5) >> 4)];
      int v15 = &v13[176 * v12];
      uint64_t v16 = 176 * ((176 * v8 - 176) / 0xB0) + 176;
      bzero(v14, v16);
      char v17 = &v14[v16];
      if (v4 == v5)
      {
        *(void *)a2 = v14;
        *(void *)(a2 + 8) = v17;
        *(void *)(a2 + 16) = v15;
      }
      else
      {
        uint64_t v18 = 0;
        do
        {
          uint64_t v19 = &v14[v18 * 8];
          size_t v20 = &v4[v18];
          *((void *)v19 - 20) = 0;
          *((_OWORD *)v19 - 11) = *(_OWORD *)&v4[v18 - 22];
          *((void *)v19 - 20) = v4[v18 - 20];
          *(v20 - 22) = 0;
          *(v20 - 21) = 0;
          *(v20 - 20) = 0;
          *((void *)v19 - 17) = 0;
          *(_OWORD *)(v19 - 152) = *(_OWORD *)&v4[v18 - 19];
          *((void *)v19 - 17) = v4[v18 - 17];
          *(v20 - 19) = 0;
          *(v20 - 18) = 0;
          *(v20 - 17) = 0;
          *((void *)v19 - 14) = 0;
          *((_OWORD *)v19 - 8) = *(_OWORD *)&v4[v18 - 16];
          *((void *)v19 - 14) = v4[v18 - 14];
          *(v20 - 16) = 0;
          *(v20 - 15) = 0;
          *(v20 - 14) = 0;
          *((void *)v19 - 11) = 0;
          *(_OWORD *)(v19 - 104) = *(_OWORD *)&v4[v18 - 13];
          *((void *)v19 - 11) = v4[v18 - 11];
          *(v20 - 13) = 0;
          *(v20 - 12) = 0;
          long long v21 = *(_OWORD *)&v4[v18 - 10];
          int v22 = v4[v18 - 8];
          *(v20 - 11) = 0;
          *((void *)v19 - 8) = v22;
          *((_OWORD *)v19 - 5) = v21;
          *(v20 - 9) = 0;
          *(v20 - 8) = 0;
          *(v20 - 10) = 0;
          int v23 = *(_OWORD *)&v4[v18 - 7];
          *((void *)v19 - 5) = v4[v18 - 5];
          *(_OWORD *)(v19 - 56) = v23;
          *(v20 - 6) = 0;
          *(v20 - 5) = 0;
          *(v20 - 7) = 0;
          uint64_t v24 = *(_OWORD *)&v4[v18 - 4];
          *((void *)v19 - 2) = v4[v18 - 2];
          *((_OWORD *)v19 - 2) = v24;
          *(v20 - 4) = 0;
          *(v20 - 3) = 0;
          *(v20 - 2) = 0;
          *((_DWORD *)v19 - 2) = v4[v18 - 1];
          v18 -= 22;
        }
        while (&v4[v18] != v5);
        double v25 = *(void ***)a2;
        uint64_t v4 = *(void ***)(a2 + 8);
        *(void *)a2 = &v14[v18 * 8];
        *(void *)(a2 + 8) = v17;
        *(void *)(a2 + 16) = v15;
        if (v4 != v25)
        {
          do
          {
            v4 -= 22;
            Espresso::tunneled_ane_unit_params_t::~tunneled_ane_unit_params_t(v4);
          }
          while (v4 != v25);
          uint64_t v4 = v25;
        }
      }
      if (v4) {
        operator delete(v4);
      }
      double v26 = *(void ***)(a2 + 8);
      goto LABEL_31;
    }
    bzero(v4, 176 * ((176 * v8 - 176) / 0xB0) + 176);
    double v26 = &v4[22 * ((176 * v8 - 176) / 0xB0) + 22];
  }
  *(void *)(a2 + 8) = v26;
LABEL_31:
  int32x2_t v27 = *(void ***)a2;
  if (v26 != *(void ***)a2)
  {
    int v28 = 0;
    uint64_t v29 = 0;
    unint64_t v30 = 0;
    do
    {
      Espresso::SerDes::params_io<Espresso::tunneled_ane_unit_params_t>(*(void *)(v31 + v28), (uint64_t)&v27[v29], 0);
      ++v30;
      int32x2_t v27 = *(void ***)a2;
      v29 += 22;
      v28 += 16;
    }
    while (v30 < 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4));
  }
  uint64_t v33 = (void **)&v31;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v33);
}

{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void **v19;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 128))(&v17);
    uint64_t v4 = *(char **)a2;
    *(void *)(a2 + 8) = *(void *)a2;
    uint64_t v5 = v18 - v17;
    if (v18 == v17)
    {
      uint64_t v11 = v4;
    }
    else
    {
      char v6 = v5 >> 4;
      uint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 16) - (void)v4) >> 2);
      if (v7 >= v5 >> 4)
      {
        uint64_t v11 = &v4[12 * v6];
        do
        {
          *(void *)uint64_t v4 = 2;
          *((_DWORD *)v4 + 2) = -2;
          v4 += 12;
        }
        while (v4 != v11);
        *(void *)(a2 + 8) = v11;
      }
      else
      {
        if (v5 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        int v8 = 0x5555555555555556 * ((uint64_t)(*(void *)(a2 + 16) - (void)v4) >> 2);
        if (v8 <= v6) {
          int v8 = v6;
        }
        if (v7 >= 0xAAAAAAAAAAAAAAALL) {
          char v9 = 0x1555555555555555;
        }
        else {
          char v9 = v8;
        }
        if (v9 > 0x1555555555555555) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        char v10 = (char *)operator new(12 * v9);
        uint64_t v11 = &v10[12 * v6];
        uint64_t v12 = v10;
        do
        {
          *(void *)uint64_t v12 = 2;
          *((_DWORD *)v12 + 2) = -2;
          v12 += 12;
        }
        while (v12 != v11);
        *(void *)a2 = v10;
        *(void *)(a2 + 8) = v11;
        *(void *)(a2 + 16) = &v10[12 * v9];
        if (v4)
        {
          operator delete(v4);
          uint64_t v11 = *(char **)(a2 + 8);
        }
      }
    }
    char v13 = *(char **)a2;
    if (v11 != *(char **)a2)
    {
      int v14 = 0;
      int v15 = 0;
      uint64_t v16 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::furthest_point_sampling_params_t>(*(void *)(v17 + v14), &v13[v15], 0);
        ++v16;
        char v13 = *(char **)a2;
        v15 += 12;
        v14 += 16;
      }
      while (v16 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2));
    }
    uint64_t v19 = (void **)&v17;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v19);
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 120))(&v4);
    Espresso::SerDes::params_io<Espresso::brick_params>(v4, a2, 0);
    if (v5) {
      nitro::nitro_function::nitro_function(v5);
    }
  }
}

void sub_192AED768(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::operator>>(void *a1, char **a2)
{
  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 128))(&v23);
    uint64_t v4 = *a2;
    a2[1] = *a2;
    uint64_t v5 = v24 - v23;
    if (v24 == v23)
    {
      uint64_t v11 = v4;
    }
    else
    {
      unint64_t v6 = v5 >> 4;
      unint64_t v7 = 0x6F96F96F96F96F97 * ((a2[2] - v4) >> 2);
      if (v7 >= v5 >> 4)
      {
        uint64_t v11 = &v4[156 * v6];
        __asm { FMOV            V1.2S, #1.0 }
        do
        {
          *(_OWORD *)uint64_t v4 = 0uLL;
          *((_OWORD *)v4 + 1) = 0uLL;
          *((_OWORD *)v4 + 2) = 0uLL;
          *((_OWORD *)v4 + 3) = 0uLL;
          *((_OWORD *)v4 + 4) = 0uLL;
          *((_OWORD *)v4 + 5) = 0uLL;
          *((_OWORD *)v4 + 6) = 0uLL;
          *((_OWORD *)v4 + 7) = 0uLL;
          *(_OWORD *)(v4 + 140) = 0uLL;
          *((_OWORD *)v4 + 8) = 0uLL;
          *((void *)v4 + 1) = _D1;
          *(void *)(v4 + 20) = _D1;
          *((_DWORD *)v4 + 4) = 2;
          *((void *)v4 + 4) = _D1;
          *(void *)(v4 + 44) = _D1;
          *((void *)v4 + 7) = _D1;
          *((_DWORD *)v4 + 13) = 2;
          *(void *)(v4 + 68) = _D1;
          *((_DWORD *)v4 + 19) = 512;
          *((_DWORD *)v4 + 21) = 1065353216;
          *(void *)(v4 + 92) = 0x100000000;
          *((_DWORD *)v4 + 26) = 1112014848;
          *((void *)v4 + 14) = 0x3F80000000000001;
          *((_DWORD *)v4 + 31) = 1065353216;
          *((void *)v4 + 16) = 0;
          *((void *)v4 + 17) = 0;
          *((_WORD *)v4 + 76) = 0;
          *((void *)v4 + 18) = 0;
          v4 += 156;
        }
        while (v4 != v11);
        a2[1] = v11;
      }
      else
      {
        if ((unint64_t)v5 >= 0x1A41A41A41A41A41) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v8 = 0xDF2DF2DF2DF2DF2ELL * ((a2[2] - v4) >> 2);
        if (v8 <= v6) {
          unint64_t v8 = v6;
        }
        if (v7 >= 0xD20D20D20D20D2) {
          unint64_t v9 = 0x1A41A41A41A41A4;
        }
        else {
          unint64_t v9 = v8;
        }
        if (v9 > 0x1A41A41A41A41A4) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        char v10 = (char *)operator new(156 * v9);
        uint64_t v11 = &v10[156 * v6];
        __asm { FMOV            V1.2S, #1.0 }
        char v17 = v10;
        do
        {
          *(_OWORD *)char v17 = 0uLL;
          *((_OWORD *)v17 + 1) = 0uLL;
          *((_OWORD *)v17 + 2) = 0uLL;
          *((_OWORD *)v17 + 3) = 0uLL;
          *((_OWORD *)v17 + 4) = 0uLL;
          *((_OWORD *)v17 + 5) = 0uLL;
          *((_OWORD *)v17 + 6) = 0uLL;
          *((_OWORD *)v17 + 7) = 0uLL;
          *(_OWORD *)(v17 + 140) = 0uLL;
          *((_OWORD *)v17 + 8) = 0uLL;
          *((void *)v17 + 1) = _D1;
          *(void *)(v17 + 20) = _D1;
          *((_DWORD *)v17 + 4) = 2;
          *((void *)v17 + 4) = _D1;
          *(void *)(v17 + 44) = _D1;
          *((void *)v17 + 7) = _D1;
          *((_DWORD *)v17 + 13) = 2;
          *(void *)(v17 + 68) = _D1;
          *((_DWORD *)v17 + 19) = 512;
          *((_DWORD *)v17 + 21) = 1065353216;
          *(void *)(v17 + 92) = 0x100000000;
          *((_DWORD *)v17 + 26) = 1112014848;
          *((void *)v17 + 14) = 0x3F80000000000001;
          *((_DWORD *)v17 + 31) = 1065353216;
          *((void *)v17 + 16) = 0;
          *((void *)v17 + 17) = 0;
          *((_WORD *)v17 + 76) = 0;
          *((void *)v17 + 18) = 0;
          v17 += 156;
        }
        while (v17 != v11);
        *a2 = v10;
        a2[1] = v11;
        a2[2] = &v10[156 * v9];
        if (v4)
        {
          operator delete(v4);
          uint64_t v11 = a2[1];
        }
      }
    }
    uint64_t v19 = *a2;
    if (v11 != *a2)
    {
      uint64_t v20 = 0;
      uint64_t v21 = 0;
      unint64_t v22 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::rnn_arch_params>(*(void *)(v23 + v20), (uint64_t)&v19[v21], 0);
        ++v22;
        uint64_t v19 = *a2;
        v21 += 156;
        v20 += 16;
      }
      while (v22 < 0x6F96F96F96F96F97 * ((a2[1] - *a2) >> 2));
    }
    double v25 = (void **)&v23;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v25);
  }
}

{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 128))(&v14);
    uint64_t v4 = *a2;
    a2[1] = *a2;
    uint64_t v5 = v15 - v14;
    if (v15 != v14)
    {
      unint64_t v6 = v5 >> 4;
      unint64_t v7 = a2[2] - v4;
      if (v5 >> 4 <= (unint64_t)(v7 >> 2))
      {
        bzero(v4, v5 >> 2);
        v4 += v5 >> 2;
        a2[1] = v4;
      }
      else
      {
        if (v5 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        if (v7 >> 1 > v6) {
          unint64_t v6 = v7 >> 1;
        }
        if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v8 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v8 = v6;
        }
        if (v8 >> 62) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        unint64_t v9 = (char *)operator new(4 * v8);
        bzero(v9, v5 >> 2);
        *a2 = v9;
        a2[1] = &v9[v5 >> 2];
        a2[2] = &v9[4 * v8];
        if (v4)
        {
          operator delete(v4);
          uint64_t v4 = a2[1];
        }
        else
        {
          uint64_t v4 = &v9[v5 >> 2];
        }
      }
    }
    char v10 = *a2;
    if (v4 != *a2)
    {
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      char v13 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::sequence_concat_params>(*(void *)(v14 + v11), &v10[v12], 0);
        ++v13;
        char v10 = *a2;
        v12 += 4;
        v11 += 16;
      }
      while (v13 < (a2[1] - *a2) >> 2);
    }
    uint64_t v16 = (void **)&v14;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v16);
  }
}

{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  size_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void **v13;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 128))(&v11);
    uint64_t v4 = *a2;
    a2[1] = *a2;
    uint64_t v5 = v12 - v11;
    if (v12 != v11)
    {
      unint64_t v6 = v5 >> 4;
      unint64_t v7 = a2[2] - v4;
      if (v7 >= v5 >> 4)
      {
        a2[1] = &v4[v6];
      }
      else
      {
        if (v5 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v8 = 2 * v7;
        if (2 * v7 <= v6) {
          unint64_t v8 = v6;
        }
        if (v7 >= 0x3FFFFFFFFFFFFFFFLL) {
          unint64_t v9 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v9 = v8;
        }
        char v10 = (char *)operator new(v9);
        *a2 = v10;
        a2[1] = &v10[v6];
        a2[2] = &v10[v9];
        if (v4) {
          operator delete(v4);
        }
      }
    }
    char v13 = (void **)&v11;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v13);
  }
}

{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 128))(&v14);
    uint64_t v4 = *a2;
    a2[1] = *a2;
    uint64_t v5 = v15 - v14;
    if (v15 != v14)
    {
      unint64_t v6 = v5 >> 4;
      unint64_t v7 = a2[2] - v4;
      if (v5 >> 4 <= (unint64_t)(v7 >> 2))
      {
        memset_pattern16(v4, &xmmword_192DCA970, v5 >> 2);
        v4 += v5 >> 2;
        a2[1] = v4;
      }
      else
      {
        if (v5 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        if (v7 >> 1 > v6) {
          unint64_t v6 = v7 >> 1;
        }
        if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v8 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v8 = v6;
        }
        if (v8 >> 62) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        unint64_t v9 = (char *)operator new(4 * v8);
        memset_pattern16(v9, &xmmword_192DCA970, v5 >> 2);
        *a2 = v9;
        a2[1] = &v9[v5 >> 2];
        a2[2] = &v9[4 * v8];
        if (v4)
        {
          operator delete(v4);
          uint64_t v4 = a2[1];
        }
        else
        {
          uint64_t v4 = &v9[v5 >> 2];
        }
      }
    }
    char v10 = *a2;
    if (v4 != *a2)
    {
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      char v13 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::sequence_repeat_params>(*(void *)(v14 + v11), &v10[v12], 0);
        ++v13;
        char v10 = *a2;
        v12 += 4;
        v11 += 16;
      }
      while (v13 < (a2[1] - *a2) >> 2);
    }
    uint64_t v16 = (void **)&v14;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v16);
  }
}

{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  size_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void **v13;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 128))(&v11);
    uint64_t v4 = *a2;
    a2[1] = *a2;
    uint64_t v5 = v12 - v11;
    if (v12 != v11)
    {
      unint64_t v6 = v5 >> 4;
      unint64_t v7 = a2[2] - v4;
      if (v7 >= v5 >> 4)
      {
        a2[1] = &v4[v6];
      }
      else
      {
        if (v5 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v8 = 2 * v7;
        if (2 * v7 <= v6) {
          unint64_t v8 = v6;
        }
        if (v7 >= 0x3FFFFFFFFFFFFFFFLL) {
          unint64_t v9 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v9 = v8;
        }
        char v10 = (char *)operator new(v9);
        *a2 = v10;
        a2[1] = &v10[v6];
        a2[2] = &v10[v9];
        if (v4) {
          operator delete(v4);
        }
      }
    }
    char v13 = (void **)&v11;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v13);
  }
}

{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  long long v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 128))(&v18);
    uint64_t v4 = *a2;
    a2[1] = *a2;
    uint64_t v5 = v19 - v18;
    if (v19 == v18)
    {
      uint64_t v11 = v4;
    }
    else
    {
      unint64_t v6 = v5 >> 4;
      unint64_t v7 = 0x6DB6DB6DB6DB6DB7 * ((a2[2] - v4) >> 4);
      if (v7 >= v5 >> 4)
      {
        uint64_t v11 = &v4[112 * v6];
        do
        {
          *(_OWORD *)uint64_t v4 = 0uLL;
          *((_OWORD *)v4 + 1) = 0uLL;
          *((_OWORD *)v4 + 2) = 0uLL;
          *((_OWORD *)v4 + 3) = 0uLL;
          *((void *)v4 + 8) = 0;
          *((void *)v4 + 9) = 0;
          *(void *)(v4 + 4) = 0x300000003;
          *((void *)v4 + 2) = 0x100000001;
          *((_DWORD *)v4 + 6) = 1;
          *((_DWORD *)v4 + 8) = 2;
          *((_WORD *)v4 + 18) = 1;
          *(_OWORD *)(v4 + 38) = 0uLL;
          *(_OWORD *)(v4 + 54) = 0uLL;
          *((void *)v4 + 10) = 0;
          *((void *)v4 + 11) = 0x100000001;
          *((void *)v4 + 12) = 0;
          *((void *)v4 + 13) = 0;
          v4 += 112;
        }
        while (v4 != v11);
        a2[1] = v11;
      }
      else
      {
        if ((unint64_t)v5 >= 0x2492492492492491) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v8 = 0xDB6DB6DB6DB6DB6ELL * ((a2[2] - v4) >> 4);
        if (v8 <= v6) {
          unint64_t v8 = v6;
        }
        if (v7 >= 0x124924924924924) {
          unint64_t v9 = 0x249249249249249;
        }
        else {
          unint64_t v9 = v8;
        }
        if (v9 > 0x249249249249249) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        char v10 = (char *)operator new(112 * v9);
        uint64_t v11 = &v10[112 * v6];
        uint64_t v12 = v10;
        do
        {
          *(_OWORD *)uint64_t v12 = 0uLL;
          *((_OWORD *)v12 + 1) = 0uLL;
          *((_OWORD *)v12 + 2) = 0uLL;
          *((_OWORD *)v12 + 3) = 0uLL;
          *((void *)v12 + 8) = 0;
          *((void *)v12 + 9) = 0;
          *(void *)(v12 + 4) = 0x300000003;
          *((void *)v12 + 2) = 0x100000001;
          *((_DWORD *)v12 + 6) = 1;
          *((_DWORD *)v12 + 8) = 2;
          *((_WORD *)v12 + 18) = 1;
          *(_OWORD *)(v12 + 38) = 0uLL;
          *(_OWORD *)(v12 + 54) = 0uLL;
          *((void *)v12 + 10) = 0;
          *((void *)v12 + 11) = 0x100000001;
          *((void *)v12 + 12) = 0;
          *((void *)v12 + 13) = 0;
          v12 += 112;
        }
        while (v12 != v11);
        *(void *)&char v13 = &v10[112 * v6];
        *((void *)&v13 + 1) = &v10[112 * v9];
        *a2 = v10;
        *(_OWORD *)(a2 + 1) = v13;
        if (v4)
        {
          operator delete(v4);
          uint64_t v11 = a2[1];
        }
      }
    }
    int v14 = *a2;
    if (v11 != *a2)
    {
      int v15 = 0;
      uint64_t v16 = 0;
      char v17 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::pool_params>(*(void *)(v18 + v15), (uint64_t)&v14[v16], 0);
        ++v17;
        int v14 = *a2;
        v16 += 112;
        v15 += 16;
      }
      while (v17 < 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 4));
    }
    uint64_t v20 = (void **)&v18;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v20);
  }
}

{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void **v19;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 128))(&v17);
    uint64_t v4 = *a2;
    a2[1] = *a2;
    uint64_t v5 = v18 - v17;
    if (v18 == v17)
    {
      uint64_t v11 = v4;
    }
    else
    {
      unint64_t v6 = v5 >> 4;
      unint64_t v7 = 0x6DB6DB6DB6DB6DB7 * ((a2[2] - v4) >> 2);
      if (v7 >= v5 >> 4)
      {
        uint64_t v11 = &v4[28 * v6];
        do
        {
          *(void *)uint64_t v4 = 0x3F40000038D1B717;
          *((_DWORD *)v4 + 2) = 3;
          *(void *)(v4 + 20) = 0;
          *(void *)(v4 + 12) = 0;
          v4 += 28;
        }
        while (v4 != v11);
        a2[1] = v11;
      }
      else
      {
        if (v5 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v8 = 0xDB6DB6DB6DB6DB6ELL * ((a2[2] - v4) >> 2);
        if (v8 <= v6) {
          unint64_t v8 = v6;
        }
        if (v7 >= 0x492492492492492) {
          unint64_t v9 = 0x924924924924924;
        }
        else {
          unint64_t v9 = v8;
        }
        if (v9 > 0x924924924924924) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        char v10 = (char *)operator new(28 * v9);
        uint64_t v11 = &v10[28 * v6];
        uint64_t v12 = v10;
        do
        {
          *(void *)uint64_t v12 = 0x3F40000038D1B717;
          *((_DWORD *)v12 + 2) = 3;
          *(void *)(v12 + 20) = 0;
          *(void *)(v12 + 12) = 0;
          v12 += 28;
        }
        while (v12 != v11);
        *a2 = v10;
        a2[1] = v11;
        a2[2] = &v10[28 * v9];
        if (v4)
        {
          operator delete(v4);
          uint64_t v11 = a2[1];
        }
      }
    }
    char v13 = *a2;
    if (v11 != *a2)
    {
      int v14 = 0;
      int v15 = 0;
      uint64_t v16 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::lrn_params>(*(void *)(v17 + v14), (uint64_t)&v13[v15], 0);
        ++v16;
        char v13 = *a2;
        v15 += 28;
        v14 += 16;
      }
      while (v16 < 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 2));
    }
    uint64_t v19 = (void **)&v17;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v19);
  }
}

{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void **v22;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 128))(&v20);
    uint64_t v4 = *a2;
    a2[1] = *a2;
    uint64_t v5 = v21 - v20;
    if (v21 == v20)
    {
      uint64_t v12 = v4;
    }
    else
    {
      unint64_t v6 = v5 >> 4;
      unint64_t v7 = 0x6DB6DB6DB6DB6DB7 * ((a2[2] - v4) >> 2);
      if (v7 >= v5 >> 4)
      {
        int v14 = 28 * v6;
        uint64_t v12 = &v4[28 * v6];
        int v15 = v4 + 16;
        do
        {
          *((_DWORD *)v15 + 2) = 256;
          *((_OWORD *)v15 - 1) = xmmword_192DCA290;
          *(void *)int v15 = 1;
          v15 += 28;
          v14 -= 28;
        }
        while (v14);
        a2[1] = v12;
      }
      else
      {
        if (v5 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v8 = 0xDB6DB6DB6DB6DB6ELL * ((a2[2] - v4) >> 2);
        if (v8 <= v6) {
          unint64_t v8 = v6;
        }
        if (v7 >= 0x492492492492492) {
          unint64_t v9 = 0x924924924924924;
        }
        else {
          unint64_t v9 = v8;
        }
        if (v9 > 0x924924924924924) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        char v10 = (char *)operator new(28 * v9);
        uint64_t v11 = 0;
        uint64_t v12 = &v10[28 * v6];
        do
        {
          char v13 = &v10[v11];
          *((_DWORD *)v13 + 6) = 256;
          *(_OWORD *)char v13 = xmmword_192DCA290;
          *((void *)v13 + 2) = 1;
          v11 += 28;
        }
        while (28 * v6 != v11);
        *a2 = v10;
        a2[1] = v12;
        a2[2] = &v10[28 * v9];
        if (v4)
        {
          operator delete(v4);
          uint64_t v12 = a2[1];
        }
      }
    }
    uint64_t v16 = *a2;
    if (v12 != *a2)
    {
      char v17 = 0;
      uint64_t v18 = 0;
      uint64_t v19 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::softmax_params>(*(void *)(v20 + v17), (uint64_t)&v16[v18], 0);
        ++v19;
        uint64_t v16 = *a2;
        v18 += 28;
        v17 += 16;
      }
      while (v19 < 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 2));
    }
    unint64_t v22 = (void **)&v20;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v22);
  }
}

{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  char *v18;
  long long v19;
  uint64_t v20;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void **v29;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 128))(&v27);
    uint64_t v4 = *a2;
    a2[1] = *a2;
    uint64_t v5 = v28 - v27;
    if (v28 == v27)
    {
      uint64_t v12 = v4;
    }
    else
    {
      unint64_t v6 = v5 >> 4;
      unint64_t v7 = 0xF83E0F83E0F83E1 * ((a2[2] - v4) >> 2);
      if (v7 >= v5 >> 4)
      {
        uint64_t v20 = 0;
        uint64_t v12 = &v4[132 * v6];
        __asm { FMOV            V0.2S, #1.0 }
        do
        {
          unint64_t v22 = &v4[v20];
          v22[40] = 0;
          *((_DWORD *)v22 + 13) = -1;
          *((void *)v22 + 7) = _D0;
          *(void *)(v22 + 124) = 0;
          *(_OWORD *)unint64_t v22 = xmmword_192DCA240;
          *((_DWORD *)v22 + 4) = 0;
          *(void *)(v22 + 20) = _D0;
          *(void *)(v22 + 84) = 0;
          *(void *)(v22 + 28) = 0;
          *(void *)(v22 + 44) = 0;
          *((_DWORD *)v22 + 9) = 0;
          *(void *)(v22 + 100) = 0;
          *(void *)(v22 + 116) = 0;
          v20 += 132;
          *(void *)(v22 + 108) = 0;
        }
        while (132 * v6 != v20);
        a2[1] = v12;
      }
      else
      {
        if ((unint64_t)v5 >= 0x1F07C1F07C1F07C1) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v8 = 0x1F07C1F07C1F07C2 * ((a2[2] - v4) >> 2);
        if (v8 <= v6) {
          unint64_t v8 = v6;
        }
        if (v7 >= 0xF83E0F83E0F83ELL) {
          unint64_t v9 = 0x1F07C1F07C1F07CLL;
        }
        else {
          unint64_t v9 = v8;
        }
        if (v9 > 0x1F07C1F07C1F07CLL) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        char v10 = (char *)operator new(132 * v9);
        uint64_t v11 = 0;
        uint64_t v12 = &v10[132 * v6];
        __asm { FMOV            V0.2S, #1.0 }
        do
        {
          uint64_t v18 = &v10[v11];
          v18[40] = 0;
          *((_DWORD *)v18 + 13) = -1;
          *((void *)v18 + 7) = _D0;
          *(void *)(v18 + 124) = 0;
          *(_OWORD *)uint64_t v18 = xmmword_192DCA240;
          *((_DWORD *)v18 + 4) = 0;
          *(void *)(v18 + 20) = _D0;
          *(void *)(v18 + 84) = 0;
          *(void *)(v18 + 28) = 0;
          *(void *)(v18 + 44) = 0;
          *((_DWORD *)v18 + 9) = 0;
          *(void *)(v18 + 100) = 0;
          *(void *)(v18 + 116) = 0;
          v11 += 132;
          *(void *)(v18 + 108) = 0;
        }
        while (132 * v6 != v11);
        *(void *)&uint64_t v19 = &v10[132 * v6];
        *((void *)&v19 + 1) = &v10[132 * v9];
        *a2 = v10;
        *(_OWORD *)(a2 + 1) = v19;
        if (v4)
        {
          operator delete(v4);
          uint64_t v12 = a2[1];
        }
      }
    }
    uint64_t v23 = *a2;
    if (v12 != *a2)
    {
      uint64_t v24 = 0;
      double v25 = 0;
      double v26 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::inner_product_uniforms>(*(void *)(v27 + v24), (uint64_t)&v23[v25], 0);
        ++v26;
        uint64_t v23 = *a2;
        v25 += 132;
        v24 += 16;
      }
      while (v26 < 0xF83E0F83E0F83E1 * ((a2[1] - *a2) >> 2));
    }
    uint64_t v29 = (void **)&v27;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v29);
  }
}

{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void **v22;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 128))(&v20);
    uint64_t v4 = *a2;
    a2[1] = *a2;
    uint64_t v5 = v21 - v20;
    if (v21 == v20)
    {
      uint64_t v12 = v4;
    }
    else
    {
      unint64_t v6 = v5 >> 4;
      unint64_t v7 = a2[2] - v4;
      if (v5 >> 4 <= (unint64_t)(v7 >> 6))
      {
        int v14 = v6 << 6;
        int v15 = v4 + 32;
        uint64_t v12 = &v4[64 * v6];
        do
        {
          v15[28] = 0;
          *((_WORD *)v15 + 4) = 0;
          *((_DWORD *)v15 - 8) = 0;
          *(_DWORD *)int v15 = 0;
          v15 += 64;
          v14 -= 64;
        }
        while (v14);
        a2[1] = v12;
      }
      else
      {
        if ((unint64_t)v5 >= 0x3FFFFFFFFFFFFFF1) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v8 = v7 >> 5;
        if (v7 >> 5 <= v6) {
          unint64_t v8 = v6;
        }
        if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFC0) {
          unint64_t v9 = 0x3FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v9 = v8;
        }
        if (v9 >> 58) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        char v10 = (char *)operator new(v9 << 6);
        uint64_t v11 = 0;
        uint64_t v12 = &v10[64 * v6];
        do
        {
          char v13 = &v10[v11];
          v13[60] = 0;
          *((_WORD *)v13 + 20) = 0;
          *(_DWORD *)char v13 = 0;
          *((_DWORD *)v13 + 8) = 0;
          v11 += 64;
        }
        while (v6 << 6 != v11);
        *a2 = v10;
        a2[1] = v12;
        a2[2] = &v10[64 * v9];
        if (v4)
        {
          operator delete(v4);
          uint64_t v12 = a2[1];
        }
      }
    }
    uint64_t v16 = *a2;
    if (v12 != *a2)
    {
      char v17 = 0;
      uint64_t v18 = 0;
      uint64_t v19 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::concat_params>(*(void *)(v20 + v17), (uint64_t)&v16[v18], 0);
        ++v19;
        uint64_t v16 = *a2;
        v18 += 64;
        v17 += 16;
      }
      while (v19 < (a2[1] - *a2) >> 6);
    }
    unint64_t v22 = (void **)&v20;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v22);
  }
}

{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void **v21;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 128))(&v19);
    uint64_t v4 = *a2;
    a2[1] = *a2;
    uint64_t v5 = v20 - v19;
    if (v20 == v19)
    {
      uint64_t v12 = v4;
    }
    else
    {
      unint64_t v6 = v5 >> 4;
      unint64_t v7 = 0x4EC4EC4EC4EC4EC5 * ((a2[2] - v4) >> 2);
      if (v7 >= v5 >> 4)
      {
        int v14 = 52 * v6;
        uint64_t v12 = &v4[52 * v6];
        do
        {
          v4[8] = 0;
          *(void *)(v4 + 20) = 0;
          *(void *)(v4 + 12) = 0;
          *(void *)uint64_t v4 = 0x200000002;
          *((_DWORD *)v4 + 12) = 0;
          v4 += 52;
          v14 -= 52;
        }
        while (v14);
        a2[1] = v12;
      }
      else
      {
        if ((unint64_t)v5 >= 0x4EC4EC4EC4EC4EC1) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v8 = 0x9D89D89D89D89D8ALL * ((a2[2] - v4) >> 2);
        if (v8 <= v6) {
          unint64_t v8 = v6;
        }
        if (v7 >= 0x276276276276276) {
          unint64_t v9 = 0x4EC4EC4EC4EC4ECLL;
        }
        else {
          unint64_t v9 = v8;
        }
        if (v9 > 0x4EC4EC4EC4EC4ECLL) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        char v10 = (char *)operator new(52 * v9);
        uint64_t v11 = 0;
        uint64_t v12 = &v10[52 * v6];
        do
        {
          char v13 = &v10[v11];
          v13[8] = 0;
          *(void *)(v13 + 20) = 0;
          *(void *)(v13 + 12) = 0;
          *(void *)char v13 = 0x200000002;
          v11 += 52;
          *((_DWORD *)v13 + 12) = 0;
        }
        while (52 * v6 != v11);
        *a2 = v10;
        a2[1] = v12;
        a2[2] = &v10[52 * v9];
        if (v4)
        {
          operator delete(v4);
          uint64_t v12 = a2[1];
        }
      }
    }
    int v15 = *a2;
    if (v12 != *a2)
    {
      uint64_t v16 = 0;
      char v17 = 0;
      uint64_t v18 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::split_params>(*(void *)(v19 + v16), (uint64_t)&v15[v17], 0);
        ++v18;
        int v15 = *a2;
        v17 += 52;
        v16 += 16;
      }
      while (v18 < 0x4EC4EC4EC4EC4EC5 * ((a2[1] - *a2) >> 2));
    }
    uint64_t v21 = (void **)&v19;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v21);
  }
}

{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  char *v18;
  long long v19;
  uint64_t v20;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void **v29;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 128))(&v27);
    uint64_t v4 = *a2;
    a2[1] = *a2;
    uint64_t v5 = v28 - v27;
    if (v28 == v27)
    {
      uint64_t v12 = v4;
    }
    else
    {
      unint64_t v6 = v5 >> 4;
      unint64_t v7 = 0x8E38E38E38E38E39 * ((a2[2] - v4) >> 3);
      if (v7 >= v5 >> 4)
      {
        uint64_t v20 = 0;
        uint64_t v12 = &v4[72 * v6];
        __asm { FMOV            V2.2S, #1.0 }
        do
        {
          unint64_t v22 = &v4[v20];
          *((void *)v22 + 3) = 0;
          *((void *)v22 + 4) = 0;
          *(_OWORD *)unint64_t v22 = xmmword_192DCA210;
          *((void *)v22 + 2) = 0x100000000;
          *(void *)(v22 + 28) = _D2;
          v22[36] = 1;
          *((void *)v22 + 6) = 0;
          *((void *)v22 + 7) = 0;
          *((void *)v22 + 5) = 0;
          v20 += 72;
          *((void *)v22 + 8) = _D2;
        }
        while (72 * v6 != v20);
        a2[1] = v12;
      }
      else
      {
        if ((unint64_t)v5 >= 0x38E38E38E38E38E1) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v8 = 0x1C71C71C71C71C72 * ((a2[2] - v4) >> 3);
        if (v8 <= v6) {
          unint64_t v8 = v6;
        }
        if (v7 >= 0x1C71C71C71C71C7) {
          unint64_t v9 = 0x38E38E38E38E38ELL;
        }
        else {
          unint64_t v9 = v8;
        }
        if (v9 > 0x38E38E38E38E38ELL) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        char v10 = (char *)operator new(72 * v9);
        uint64_t v11 = 0;
        uint64_t v12 = &v10[72 * v6];
        __asm { FMOV            V2.2S, #1.0 }
        do
        {
          uint64_t v18 = &v10[v11];
          *((void *)v18 + 3) = 0;
          *((void *)v18 + 4) = 0;
          *(_OWORD *)uint64_t v18 = xmmword_192DCA210;
          *((void *)v18 + 2) = 0x100000000;
          *(void *)(v18 + 28) = _D2;
          v18[36] = 1;
          *((void *)v18 + 6) = 0;
          *((void *)v18 + 7) = 0;
          *((void *)v18 + 5) = 0;
          v11 += 72;
          *((void *)v18 + 8) = _D2;
        }
        while (72 * v6 != v11);
        *(void *)&uint64_t v19 = &v10[72 * v6];
        *((void *)&v19 + 1) = &v10[72 * v9];
        *a2 = v10;
        *(_OWORD *)(a2 + 1) = v19;
        if (v4)
        {
          operator delete(v4);
          uint64_t v12 = a2[1];
        }
      }
    }
    uint64_t v23 = *a2;
    if (v12 != *a2)
    {
      uint64_t v24 = 0;
      double v25 = 0;
      double v26 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::upsample_kernel_params>(*(void *)(v27 + v24), (uint64_t)&v23[v25], 0);
        ++v26;
        uint64_t v23 = *a2;
        v25 += 72;
        v24 += 16;
      }
      while (v26 < 0x8E38E38E38E38E39 * ((a2[1] - *a2) >> 3));
    }
    uint64_t v29 = (void **)&v27;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v29);
  }
}

{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v17;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void **v25;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 128))(&v23);
    uint64_t v4 = *a2;
    a2[1] = *a2;
    uint64_t v5 = v24 - v23;
    if (v24 == v23)
    {
      uint64_t v11 = v4;
    }
    else
    {
      unint64_t v6 = v5 >> 4;
      unint64_t v7 = 0x8E38E38E38E38E39 * ((a2[2] - v4) >> 2);
      if (v7 >= v5 >> 4)
      {
        uint64_t v11 = &v4[36 * v6];
        __asm { FMOV            V0.2S, #1.0 }
        do
        {
          *(_DWORD *)uint64_t v4 = 0;
          *(void *)(v4 + 4) = _D0;
          *(void *)(v4 + 12) = 0;
          *(void *)(v4 + 28) = 0;
          *(void *)(v4 + 20) = 0;
          v4 += 36;
        }
        while (v4 != v11);
        a2[1] = v11;
      }
      else
      {
        if ((unint64_t)v5 >= 0x71C71C71C71C71C1) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v8 = 0x1C71C71C71C71C72 * ((a2[2] - v4) >> 2);
        if (v8 <= v6) {
          unint64_t v8 = v6;
        }
        if (v7 >= 0x38E38E38E38E38ELL) {
          unint64_t v9 = 0x71C71C71C71C71CLL;
        }
        else {
          unint64_t v9 = v8;
        }
        if (v9 > 0x71C71C71C71C71CLL) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        char v10 = (char *)operator new(36 * v9);
        uint64_t v11 = &v10[36 * v6];
        __asm { FMOV            V0.2S, #1.0 }
        char v17 = v10;
        do
        {
          *(_DWORD *)char v17 = 0;
          *(void *)(v17 + 4) = _D0;
          *(void *)(v17 + 12) = 0;
          *(void *)(v17 + 28) = 0;
          *(void *)(v17 + 20) = 0;
          v17 += 36;
        }
        while (v17 != v11);
        *a2 = v10;
        a2[1] = v11;
        a2[2] = &v10[36 * v9];
        if (v4)
        {
          operator delete(v4);
          uint64_t v11 = a2[1];
        }
      }
    }
    uint64_t v19 = *a2;
    if (v11 != *a2)
    {
      uint64_t v20 = 0;
      uint64_t v21 = 0;
      unint64_t v22 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::activation_params>(*(void *)(v23 + v20), (uint64_t)&v19[v21], 0);
        ++v22;
        uint64_t v19 = *a2;
        v21 += 36;
        v20 += 16;
      }
      while (v22 < 0x8E38E38E38E38E39 * ((a2[1] - *a2) >> 2));
    }
    double v25 = (void **)&v23;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v25);
  }
}

{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  long long v23;
  long long v24;
  long long v25;
  uint64_t v26;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void **v34;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 128))(&v32);
    uint64_t v4 = *a2;
    a2[1] = *a2;
    uint64_t v5 = v33 - v32;
    if (v33 == v32)
    {
      char v13 = v4;
    }
    else
    {
      unint64_t v6 = v5 >> 4;
      unint64_t v7 = 0x6DB6DB6DB6DB6DB7 * ((a2[2] - v4) >> 3);
      if (v7 >= v5 >> 4)
      {
        double v26 = 56 * v6;
        char v13 = &v4[56 * v6];
        __asm { FMOV            V0.2S, #1.0 }
        do
        {
          *((_DWORD *)v4 + 13) = 0;
          *(void *)uint64_t v4 = _D0;
          *(_OWORD *)(v4 + 8) = 0uLL;
          *(_OWORD *)(v4 + 24) = 0uLL;
          *(_OWORD *)(v4 + 36) = 0uLL;
          v4 += 56;
          v26 -= 56;
        }
        while (v26);
        a2[1] = v13;
      }
      else
      {
        if ((unint64_t)v5 >= 0x4924924924924921) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v8 = 0xDB6DB6DB6DB6DB6ELL * ((a2[2] - v4) >> 3);
        if (2 * v7 <= v6) {
          unint64_t v8 = v5 >> 4;
        }
        if (v7 >= 0x249249249249249) {
          unint64_t v9 = 0x492492492492492;
        }
        else {
          unint64_t v9 = v8;
        }
        char v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::axpby_params>>(v9);
        uint64_t v12 = 0;
        char v13 = &v10[56 * v6];
        __asm { FMOV            V0.2S, #1.0 }
        do
        {
          uint64_t v19 = &v10[v12];
          *((_DWORD *)v19 + 13) = 0;
          *(void *)uint64_t v19 = _D0;
          *(_OWORD *)(v19 + 8) = 0uLL;
          *(_OWORD *)(v19 + 24) = 0uLL;
          v12 += 56;
          *(_OWORD *)(v19 + 36) = 0uLL;
        }
        while (56 * v6 != v12);
        uint64_t v20 = &v10[56 * v11];
        unint64_t v22 = *a2;
        uint64_t v21 = a2[1];
        if (v21 != *a2)
        {
          do
          {
            uint64_t v23 = *(_OWORD *)(v21 - 56);
            uint64_t v24 = *(_OWORD *)(v21 - 40);
            double v25 = *(_OWORD *)(v21 - 24);
            *((void *)v10 - 1) = *((void *)v21 - 1);
            *(_OWORD *)(v10 - 24) = v25;
            *(_OWORD *)(v10 - 40) = v24;
            *(_OWORD *)(v10 - 56) = v23;
            v10 -= 56;
            v21 -= 56;
          }
          while (v21 != v22);
          uint64_t v21 = *a2;
        }
        *a2 = v10;
        a2[1] = v13;
        a2[2] = v20;
        if (v21)
        {
          operator delete(v21);
          char v13 = a2[1];
        }
      }
    }
    int v28 = *a2;
    if (v13 != *a2)
    {
      uint64_t v29 = 0;
      unint64_t v30 = 0;
      uint64_t v31 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::axpby_params>(*(void *)(v32 + v29), (uint64_t)&v28[v30], 0);
        ++v31;
        int v28 = *a2;
        v30 += 56;
        v29 += 16;
      }
      while (v31 < 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 3));
    }
    char v34 = (void **)&v32;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v34);
  }
}

{
  char *v4;
  int64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 128))(&v13);
    uint64_t v4 = *a2;
    a2[1] = *a2;
    uint64_t v5 = v14 - v13;
    if (v14 != v13)
    {
      unint64_t v6 = v5 >> 4;
      unint64_t v7 = a2[2] - v4;
      if (v5 >> 4 <= (unint64_t)(v7 >> 4))
      {
        bzero(v4, v14 - v13);
        v4 += v5;
        a2[1] = v4;
      }
      else
      {
        if (v5 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        if (v7 >> 3 > v6) {
          unint64_t v6 = v7 >> 3;
        }
        if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v8 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v8 = v6;
        }
        if (v8 >> 60) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        unint64_t v9 = (char *)operator new(16 * v8);
        bzero(v9, v5);
        *a2 = v9;
        a2[1] = &v9[v5];
        a2[2] = &v9[16 * v8];
        if (v4)
        {
          operator delete(v4);
          uint64_t v4 = a2[1];
        }
        else
        {
          uint64_t v4 = &v9[v5];
        }
      }
    }
    char v10 = *a2;
    if (v4 != *a2)
    {
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::fused_kernel_parameters>(*(void *)(v13 + v11), &v10[v11], 0);
        ++v12;
        char v10 = *a2;
        v11 += 16;
      }
      while (v12 < (a2[1] - *a2) >> 4);
    }
    int v15 = (void **)&v13;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v15);
  }
}

{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void **v19;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 128))(&v17);
    uint64_t v4 = *a2;
    a2[1] = *a2;
    uint64_t v5 = v18 - v17;
    if (v18 == v17)
    {
      uint64_t v11 = v4;
    }
    else
    {
      unint64_t v6 = v5 >> 4;
      unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((a2[2] - v4) >> 2);
      if (v7 >= v5 >> 4)
      {
        uint64_t v11 = &v4[12 * v6];
        do
        {
          *(_DWORD *)uint64_t v4 = 897988541;
          *(void *)(v4 + 4) = 0x200000003;
          v4 += 12;
        }
        while (v4 != v11);
        a2[1] = v11;
      }
      else
      {
        if (v5 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v8 = 0x5555555555555556 * ((a2[2] - v4) >> 2);
        if (v8 <= v6) {
          unint64_t v8 = v6;
        }
        if (v7 >= 0xAAAAAAAAAAAAAAALL) {
          unint64_t v9 = 0x1555555555555555;
        }
        else {
          unint64_t v9 = v8;
        }
        if (v9 > 0x1555555555555555) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        char v10 = (char *)operator new(12 * v9);
        uint64_t v11 = &v10[12 * v6];
        uint64_t v12 = v10;
        do
        {
          *(_DWORD *)uint64_t v12 = 897988541;
          *(void *)(v12 + 4) = 0x200000003;
          v12 += 12;
        }
        while (v12 != v11);
        *a2 = v10;
        a2[1] = v11;
        a2[2] = &v10[12 * v9];
        if (v4)
        {
          operator delete(v4);
          uint64_t v11 = a2[1];
        }
      }
    }
    char v13 = *a2;
    if (v11 != *a2)
    {
      int v14 = 0;
      int v15 = 0;
      uint64_t v16 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::l2_norm_params>(*(void *)(v17 + v14), (uint64_t)&v13[v15], 0);
        ++v16;
        char v13 = *a2;
        v15 += 12;
        v14 += 16;
      }
      while (v16 < 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 2));
    }
    uint64_t v19 = (void **)&v17;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v19);
  }
}

{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 128))(&v14);
    uint64_t v4 = *a2;
    a2[1] = *a2;
    uint64_t v5 = v15 - v14;
    if (v15 != v14)
    {
      unint64_t v6 = v5 >> 4;
      unint64_t v7 = a2[2] - v4;
      if (v5 >> 4 <= (unint64_t)(v7 >> 3))
      {
        bzero(v4, v5 >> 1);
        v4 += v5 >> 1;
        a2[1] = v4;
      }
      else
      {
        if (v5 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        if (v7 >> 2 > v6) {
          unint64_t v6 = v7 >> 2;
        }
        if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v8 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v8 = v6;
        }
        if (v8 >> 61) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        unint64_t v9 = (char *)operator new(8 * v8);
        bzero(v9, v5 >> 1);
        *a2 = v9;
        a2[1] = &v9[v5 >> 1];
        a2[2] = &v9[8 * v8];
        if (v4)
        {
          operator delete(v4);
          uint64_t v4 = a2[1];
        }
        else
        {
          uint64_t v4 = &v9[v5 >> 1];
        }
      }
    }
    char v10 = *a2;
    if (v4 != *a2)
    {
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      char v13 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::bias_params>(*(void *)(v14 + v11), (uint64_t)&v10[v12], 0);
        ++v13;
        char v10 = *a2;
        v12 += 8;
        v11 += 16;
      }
      while (v13 < (a2[1] - *a2) >> 3);
    }
    uint64_t v16 = (void **)&v14;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v16);
  }
}

{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void **v19;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 128))(&v17);
    uint64_t v4 = *a2;
    a2[1] = *a2;
    uint64_t v5 = v18 - v17;
    if (v18 == v17)
    {
      uint64_t v11 = v4;
    }
    else
    {
      unint64_t v6 = v5 >> 4;
      unint64_t v7 = 0x86BCA1AF286BCA1BLL * ((a2[2] - v4) >> 2);
      if (v7 >= v5 >> 4)
      {
        uint64_t v11 = &v4[76 * v6];
        do
        {
          *((void *)v4 + 1) = 0;
          *((void *)v4 + 2) = 0;
          *(void *)uint64_t v4 = 0;
          *(void *)(v4 + 12) = 0x3F6666663727C5ACLL;
          *(_OWORD *)(v4 + 24) = 0uLL;
          *(_OWORD *)(v4 + 40) = 0uLL;
          *((_DWORD *)v4 + 15) = 0;
          *((_DWORD *)v4 + 16) = 0;
          *((_DWORD *)v4 + 14) = 1065353216;
          *(void *)(v4 + 68) = 0x200000000;
          v4 += 76;
        }
        while (v4 != v11);
        a2[1] = v11;
      }
      else
      {
        if ((unint64_t)v5 >= 0x35E50D79435E50D1) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v8 = 0xD79435E50D79436 * ((a2[2] - v4) >> 2);
        if (v8 <= v6) {
          unint64_t v8 = v6;
        }
        if (v7 >= 0x1AF286BCA1AF286) {
          unint64_t v9 = 0x35E50D79435E50DLL;
        }
        else {
          unint64_t v9 = v8;
        }
        if (v9 > 0x35E50D79435E50DLL) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        char v10 = (char *)operator new(76 * v9);
        uint64_t v11 = &v10[76 * v6];
        uint64_t v12 = v10;
        do
        {
          *((void *)v12 + 1) = 0;
          *((void *)v12 + 2) = 0;
          *(void *)uint64_t v12 = 0;
          *(void *)(v12 + 12) = 0x3F6666663727C5ACLL;
          *(_OWORD *)(v12 + 24) = 0uLL;
          *(_OWORD *)(v12 + 40) = 0uLL;
          *((_DWORD *)v12 + 15) = 0;
          *((_DWORD *)v12 + 16) = 0;
          *((_DWORD *)v12 + 14) = 1065353216;
          *(void *)(v12 + 68) = 0x200000000;
          v12 += 76;
        }
        while (v12 != v11);
        *a2 = v10;
        a2[1] = v11;
        a2[2] = &v10[76 * v9];
        if (v4)
        {
          operator delete(v4);
          uint64_t v11 = a2[1];
        }
      }
    }
    char v13 = *a2;
    if (v11 != *a2)
    {
      int v14 = 0;
      int v15 = 0;
      uint64_t v16 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::batchnorm_params>(*(void *)(v17 + v14), (uint64_t)&v13[v15], 0);
        ++v16;
        char v13 = *a2;
        v15 += 76;
        v14 += 16;
      }
      while (v16 < 0x86BCA1AF286BCA1BLL * ((a2[1] - *a2) >> 2));
    }
    uint64_t v19 = (void **)&v17;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v19);
  }
}

{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void **v18;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 128))(&v16);
    uint64_t v4 = *a2;
    a2[1] = *a2;
    uint64_t v5 = v17 - v16;
    if (v17 == v16)
    {
      uint64_t v11 = v4;
    }
    else
    {
      unint64_t v6 = v5 >> 4;
      unint64_t v7 = a2[2] - v4;
      if (v5 >> 4 <= (unint64_t)(v7 >> 4))
      {
        uint64_t v11 = &v4[16 * v6];
        do
        {
          *(_DWORD *)uint64_t v4 = 1056964608;
          *(void *)(v4 + 4) = 1993;
          *((_DWORD *)v4 + 3) = 0;
          v4 += 16;
        }
        while (v4 != v11);
        a2[1] = v11;
      }
      else
      {
        if (v5 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v8 = v7 >> 3;
        if (v7 >> 3 <= v6) {
          unint64_t v8 = v6;
        }
        if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v9 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v9 = v8;
        }
        if (v9 >> 60) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        char v10 = (char *)operator new(16 * v9);
        uint64_t v11 = &v10[16 * v6];
        uint64_t v12 = v10;
        do
        {
          *(_DWORD *)uint64_t v12 = 1056964608;
          *(void *)(v12 + 4) = 1993;
          *((_DWORD *)v12 + 3) = 0;
          v12 += 16;
        }
        while (v12 != v11);
        *a2 = v10;
        a2[1] = v11;
        a2[2] = &v10[16 * v9];
        if (v4)
        {
          operator delete(v4);
          uint64_t v11 = a2[1];
        }
      }
    }
    char v13 = *a2;
    if (v11 != *a2)
    {
      int v14 = 0;
      int v15 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::dropout_params>(*(void *)(v16 + v14), (uint64_t)&v13[v14], 0);
        ++v15;
        char v13 = *a2;
        v14 += 16;
      }
      while (v15 < (a2[1] - *a2) >> 4);
    }
    uint64_t v18 = (void **)&v16;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v18);
  }
}

{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 128))(&v14);
    uint64_t v4 = *a2;
    a2[1] = *a2;
    uint64_t v5 = v15 - v14;
    if (v15 != v14)
    {
      unint64_t v6 = v5 >> 4;
      unint64_t v7 = a2[2] - v4;
      if (v5 >> 4 <= (unint64_t)(v7 >> 5))
      {
        bzero(v4, 2 * v5);
        v4 += 2 * v5;
        a2[1] = v4;
      }
      else
      {
        if ((unint64_t)v5 >= 0x7FFFFFFFFFFFFFF1) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        if (v7 >> 4 > v6) {
          unint64_t v6 = v7 >> 4;
        }
        if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v8 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v8 = v6;
        }
        if (v8 >> 59) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        unint64_t v9 = (char *)operator new(32 * v8);
        bzero(v9, 2 * v5);
        *a2 = v9;
        a2[1] = &v9[2 * v5];
        a2[2] = &v9[32 * v8];
        if (v4)
        {
          operator delete(v4);
          uint64_t v4 = a2[1];
        }
        else
        {
          uint64_t v4 = &v9[2 * v5];
        }
      }
    }
    char v10 = *a2;
    if (v4 != *a2)
    {
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      char v13 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::context_transfer_params>(*(void *)(v14 + v11), &v10[v12], 0);
        ++v13;
        char v10 = *a2;
        v12 += 32;
        v11 += 16;
      }
      while (v13 < (a2[1] - *a2) >> 5);
    }
    uint64_t v16 = (void **)&v14;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v16);
  }
}

{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void **v18;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 128))(&v16);
    uint64_t v4 = *a2;
    a2[1] = *a2;
    uint64_t v5 = v17 - v16;
    if (v17 != v16)
    {
      unint64_t v6 = v5 >> 4;
      unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((a2[2] - v4) >> 4);
      if (v7 >= v5 >> 4)
      {
        bzero(v4, 48 * ((48 * v6 - 48) / 0x30) + 48);
        v4 += 48 * ((48 * v6 - 48) / 0x30) + 48;
        a2[1] = v4;
      }
      else
      {
        if ((unint64_t)v5 >= 0x5555555555555551) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v8 = 0x5555555555555556 * ((a2[2] - v4) >> 4);
        if (v8 <= v6) {
          unint64_t v8 = v6;
        }
        if (v7 >= 0x2AAAAAAAAAAAAAALL) {
          unint64_t v9 = 0x555555555555555;
        }
        else {
          unint64_t v9 = v8;
        }
        if (v9 > 0x555555555555555) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        char v10 = (char *)operator new(48 * v9);
        uint64_t v11 = 48 * ((48 * v6 - 48) / 0x30) + 48;
        bzero(v10, v11);
        *a2 = v10;
        a2[1] = &v10[v11];
        a2[2] = &v10[48 * v9];
        if (v4)
        {
          operator delete(v4);
          uint64_t v4 = a2[1];
        }
        else
        {
          uint64_t v4 = &v10[v11];
        }
      }
    }
    uint64_t v12 = *a2;
    if (v4 != *a2)
    {
      char v13 = 0;
      int v14 = 0;
      int v15 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::reshape_like_params>(*(void *)(v16 + v13), (uint64_t)&v12[v14], 0);
        ++v15;
        uint64_t v12 = *a2;
        v14 += 48;
        v13 += 16;
      }
      while (v15 < 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 4));
    }
    uint64_t v18 = (void **)&v16;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v18);
  }
}

{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void **v18;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 128))(&v16);
    uint64_t v4 = *a2;
    a2[1] = *a2;
    uint64_t v5 = v17 - v16;
    if (v17 != v16)
    {
      unint64_t v6 = v5 >> 4;
      unint64_t v7 = 0xCCCCCCCCCCCCCCCDLL * ((a2[2] - v4) >> 2);
      if (v7 >= v5 >> 4)
      {
        memset_pattern16(v4, &xmmword_192DCA970, 20 * ((20 * v6 - 20) / 0x14) + 20);
        v4 += 20 * ((20 * v6 - 20) / 0x14) + 20;
        a2[1] = v4;
      }
      else
      {
        if (v5 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v8 = 0x999999999999999ALL * ((a2[2] - v4) >> 2);
        if (v8 <= v6) {
          unint64_t v8 = v6;
        }
        if (v7 >= 0x666666666666666) {
          unint64_t v9 = 0xCCCCCCCCCCCCCCCLL;
        }
        else {
          unint64_t v9 = v8;
        }
        if (v9 > 0xCCCCCCCCCCCCCCCLL) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        char v10 = (char *)operator new(20 * v9);
        uint64_t v11 = 20 * ((20 * v6 - 20) / 0x14) + 20;
        memset_pattern16(v10, &xmmword_192DCA970, v11);
        *a2 = v10;
        a2[1] = &v10[v11];
        a2[2] = &v10[20 * v9];
        if (v4)
        {
          operator delete(v4);
          uint64_t v4 = a2[1];
        }
        else
        {
          uint64_t v4 = &v10[v11];
        }
      }
    }
    uint64_t v12 = *a2;
    if (v4 != *a2)
    {
      char v13 = 0;
      int v14 = 0;
      int v15 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::tile_params_t>(*(void *)(v16 + v13), &v12[v14], 0);
        ++v15;
        uint64_t v12 = *a2;
        v14 += 20;
        v13 += 16;
      }
      while (v15 < 0xCCCCCCCCCCCCCCCDLL * ((a2[1] - *a2) >> 2));
    }
    uint64_t v18 = (void **)&v16;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v18);
  }
}

{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v17;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void **v25;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 128))(&v23);
    uint64_t v4 = *a2;
    a2[1] = *a2;
    uint64_t v5 = v24 - v23;
    if (v24 == v23)
    {
      uint64_t v11 = v4;
    }
    else
    {
      unint64_t v6 = v5 >> 4;
      unint64_t v7 = 0xCCCCCCCCCCCCCCCDLL * ((a2[2] - v4) >> 4);
      if (v7 >= v5 >> 4)
      {
        uint64_t v11 = &v4[80 * v6];
        __asm { FMOV            V1.2S, #1.0 }
        do
        {
          *(_DWORD *)uint64_t v4 = 1065353216;
          *(void *)(v4 + 20) = 0;
          *(void *)(v4 + 12) = 0;
          *((_DWORD *)v4 + 7) = 0;
          *(void *)(v4 + 4) = 0x100000000;
          *((_DWORD *)v4 + 18) = 0;
          *((void *)v4 + 7) = 0;
          *((void *)v4 + 8) = 0;
          *((void *)v4 + 4) = 0;
          *((void *)v4 + 5) = 0;
          *((void *)v4 + 6) = _D1;
          v4 += 80;
        }
        while (v4 != v11);
        a2[1] = v11;
      }
      else
      {
        if ((unint64_t)v5 >= 0x3333333333333331) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v8 = 0x999999999999999ALL * ((a2[2] - v4) >> 4);
        if (v8 <= v6) {
          unint64_t v8 = v6;
        }
        if (v7 >= 0x199999999999999) {
          unint64_t v9 = 0x333333333333333;
        }
        else {
          unint64_t v9 = v8;
        }
        if (v9 > 0x333333333333333) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        char v10 = (char *)operator new(80 * v9);
        uint64_t v11 = &v10[80 * v6];
        __asm { FMOV            V1.2S, #1.0 }
        char v17 = v10;
        do
        {
          *(_DWORD *)char v17 = 1065353216;
          *(void *)(v17 + 20) = 0;
          *(void *)(v17 + 12) = 0;
          *((_DWORD *)v17 + 7) = 0;
          *(void *)(v17 + 4) = 0x100000000;
          *((_DWORD *)v17 + 18) = 0;
          *((void *)v17 + 7) = 0;
          *((void *)v17 + 8) = 0;
          *((void *)v17 + 4) = 0;
          *((void *)v17 + 5) = 0;
          *((void *)v17 + 6) = _D1;
          v17 += 80;
        }
        while (v17 != v11);
        *a2 = v10;
        a2[1] = v11;
        a2[2] = &v10[80 * v9];
        if (v4)
        {
          operator delete(v4);
          uint64_t v11 = a2[1];
        }
      }
    }
    uint64_t v19 = *a2;
    if (v11 != *a2)
    {
      uint64_t v20 = 0;
      uint64_t v21 = 0;
      unint64_t v22 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::vimage2espresso_param>(*(void *)(v23 + v20), (uint64_t)&v19[v21], 0);
        ++v22;
        uint64_t v19 = *a2;
        v21 += 80;
        v20 += 16;
      }
      while (v22 < 0xCCCCCCCCCCCCCCCDLL * ((a2[1] - *a2) >> 4));
    }
    double v25 = (void **)&v23;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v25);
  }
}

{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void **v18;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 128))(&v16);
    uint64_t v4 = *a2;
    a2[1] = *a2;
    uint64_t v5 = v17 - v16;
    if (v17 != v16)
    {
      unint64_t v6 = v5 >> 4;
      unint64_t v7 = 0x86BCA1AF286BCA1BLL * ((a2[2] - v4) >> 2);
      if (v7 >= v5 >> 4)
      {
        bzero(v4, 76 * ((76 * v6 - 76) / 0x4C) + 76);
        v4 += 76 * ((76 * v6 - 76) / 0x4C) + 76;
        a2[1] = v4;
      }
      else
      {
        if ((unint64_t)v5 >= 0x35E50D79435E50D1) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v8 = 0xD79435E50D79436 * ((a2[2] - v4) >> 2);
        if (v8 <= v6) {
          unint64_t v8 = v6;
        }
        if (v7 >= 0x1AF286BCA1AF286) {
          unint64_t v9 = 0x35E50D79435E50DLL;
        }
        else {
          unint64_t v9 = v8;
        }
        if (v9 > 0x35E50D79435E50DLL) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        char v10 = (char *)operator new(76 * v9);
        uint64_t v11 = 76 * ((76 * v6 - 76) / 0x4C) + 76;
        bzero(v10, v11);
        *a2 = v10;
        a2[1] = &v10[v11];
        a2[2] = &v10[76 * v9];
        if (v4)
        {
          operator delete(v4);
          uint64_t v4 = a2[1];
        }
        else
        {
          uint64_t v4 = &v10[v11];
        }
      }
    }
    uint64_t v12 = *a2;
    if (v4 != *a2)
    {
      char v13 = 0;
      int v14 = 0;
      int v15 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::general_padding_params>(*(void *)(v16 + v13), (uint64_t)&v12[v14], 0);
        ++v15;
        uint64_t v12 = *a2;
        v14 += 76;
        v13 += 16;
      }
      while (v15 < 0x86BCA1AF286BCA1BLL * ((a2[1] - *a2) >> 2));
    }
    uint64_t v18 = (void **)&v16;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v18);
  }
}

{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 128))(&v14);
    uint64_t v4 = *a2;
    a2[1] = *a2;
    uint64_t v5 = v15 - v14;
    if (v15 != v14)
    {
      unint64_t v6 = v5 >> 4;
      unint64_t v7 = a2[2] - v4;
      if (v5 >> 4 <= (unint64_t)(v7 >> 3))
      {
        bzero(v4, v5 >> 1);
        v4 += v5 >> 1;
        a2[1] = v4;
      }
      else
      {
        if (v5 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        if (v7 >> 2 > v6) {
          unint64_t v6 = v7 >> 2;
        }
        if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v8 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v8 = v6;
        }
        if (v8 >> 61) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        unint64_t v9 = (char *)operator new(8 * v8);
        bzero(v9, v5 >> 1);
        *a2 = v9;
        a2[1] = &v9[v5 >> 1];
        a2[2] = &v9[8 * v8];
        if (v4)
        {
          operator delete(v4);
          uint64_t v4 = a2[1];
        }
        else
        {
          uint64_t v4 = &v9[v5 >> 1];
        }
      }
    }
    char v10 = *a2;
    if (v4 != *a2)
    {
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      char v13 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::flatten_params>(*(void *)(v14 + v11), &v10[v12], 0);
        ++v13;
        char v10 = *a2;
        v12 += 8;
        v11 += 16;
      }
      while (v13 < (a2[1] - *a2) >> 3);
    }
    uint64_t v16 = (void **)&v14;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v16);
  }
}

{
  char *v4;
  int64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 128))(&v13);
    uint64_t v4 = *a2;
    a2[1] = *a2;
    uint64_t v5 = v14 - v13;
    if (v14 != v13)
    {
      unint64_t v6 = v5 >> 4;
      unint64_t v7 = a2[2] - v4;
      if (v5 >> 4 <= (unint64_t)(v7 >> 4))
      {
        bzero(v4, v14 - v13);
        v4 += v5;
        a2[1] = v4;
      }
      else
      {
        if (v5 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        if (v7 >> 3 > v6) {
          unint64_t v6 = v7 >> 3;
        }
        if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v8 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v8 = v6;
        }
        if (v8 >> 60) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        unint64_t v9 = (char *)operator new(16 * v8);
        bzero(v9, v5);
        *a2 = v9;
        a2[1] = &v9[v5];
        a2[2] = &v9[16 * v8];
        if (v4)
        {
          operator delete(v4);
          uint64_t v4 = a2[1];
        }
        else
        {
          uint64_t v4 = &v9[v5];
        }
      }
    }
    char v10 = *a2;
    if (v4 != *a2)
    {
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::crop_params>(*(void *)(v13 + v11), &v10[v11], 0);
        ++v12;
        char v10 = *a2;
        v11 += 16;
      }
      while (v12 < (a2[1] - *a2) >> 4);
    }
    int v15 = (void **)&v13;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v15);
  }
}

{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void **v18;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 128))(&v16);
    uint64_t v4 = *a2;
    a2[1] = *a2;
    uint64_t v5 = v17 - v16;
    if (v17 != v16)
    {
      unint64_t v6 = v5 >> 4;
      unint64_t v7 = 0xCCCCCCCCCCCCCCCDLL * ((a2[2] - v4) >> 3);
      if (v7 >= v5 >> 4)
      {
        bzero(v4, 40 * ((40 * v6 - 40) / 0x28) + 40);
        v4 += 40 * ((40 * v6 - 40) / 0x28) + 40;
        a2[1] = v4;
      }
      else
      {
        if ((unint64_t)v5 >= 0x6666666666666661) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v8 = 0x999999999999999ALL * ((a2[2] - v4) >> 3);
        if (v8 <= v6) {
          unint64_t v8 = v6;
        }
        if (v7 >= 0x333333333333333) {
          unint64_t v9 = 0x666666666666666;
        }
        else {
          unint64_t v9 = v8;
        }
        if (v9 > 0x666666666666666) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        char v10 = (char *)operator new(40 * v9);
        uint64_t v11 = 40 * ((40 * v6 - 40) / 0x28) + 40;
        bzero(v10, v11);
        *a2 = v10;
        a2[1] = &v10[v11];
        a2[2] = &v10[40 * v9];
        if (v4)
        {
          operator delete(v4);
          uint64_t v4 = a2[1];
        }
        else
        {
          uint64_t v4 = &v10[v11];
        }
      }
    }
    uint64_t v12 = *a2;
    if (v4 != *a2)
    {
      char v13 = 0;
      int v14 = 0;
      int v15 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::space_to_batch_params_t>(*(void *)(v16 + v13), (uint64_t)&v12[v14], 0);
        ++v15;
        uint64_t v12 = *a2;
        v14 += 40;
        v13 += 16;
      }
      while (v15 < 0xCCCCCCCCCCCCCCCDLL * ((a2[1] - *a2) >> 3));
    }
    uint64_t v18 = (void **)&v16;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v18);
  }
}

{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void **v22;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 128))(&v20);
    uint64_t v4 = *a2;
    a2[1] = *a2;
    uint64_t v5 = v21 - v20;
    if (v21 == v20)
    {
      uint64_t v12 = v4;
    }
    else
    {
      unint64_t v6 = v5 >> 4;
      unint64_t v7 = 0x8E38E38E38E38E39 * ((a2[2] - v4) >> 2);
      if (v7 >= v5 >> 4)
      {
        uint64_t v12 = &v4[36 * v6];
        int v14 = 36 * v6;
        int v15 = v4 + 24;
        do
        {
          *((_DWORD *)v15 + 2) = 0;
          *(void *)int v15 = 0;
          *((void *)v15 - 3) = -1;
          *((void *)v15 - 2) = -1;
          *((void *)v15 - 1) = 0xFFFFFFFF00000001;
          v15 += 36;
          v14 -= 36;
        }
        while (v14);
        a2[1] = v12;
      }
      else
      {
        if ((unint64_t)v5 >= 0x71C71C71C71C71C1) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v8 = 0x1C71C71C71C71C72 * ((a2[2] - v4) >> 2);
        if (v8 <= v6) {
          unint64_t v8 = v6;
        }
        if (v7 >= 0x38E38E38E38E38ELL) {
          unint64_t v9 = 0x71C71C71C71C71CLL;
        }
        else {
          unint64_t v9 = v8;
        }
        if (v9 > 0x71C71C71C71C71CLL) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        char v10 = (char *)operator new(36 * v9);
        uint64_t v11 = 0;
        uint64_t v12 = &v10[36 * v6];
        do
        {
          char v13 = &v10[v11];
          *((_DWORD *)v13 + 8) = 0;
          *((void *)v13 + 3) = 0;
          *(void *)char v13 = -1;
          *((void *)v13 + 1) = -1;
          v11 += 36;
          *((void *)v13 + 2) = 0xFFFFFFFF00000001;
        }
        while (36 * v6 != v11);
        *a2 = v10;
        a2[1] = v12;
        a2[2] = &v10[36 * v9];
        if (v4)
        {
          operator delete(v4);
          uint64_t v12 = a2[1];
        }
      }
    }
    uint64_t v16 = *a2;
    if (v12 != *a2)
    {
      char v17 = 0;
      uint64_t v18 = 0;
      uint64_t v19 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::broadcast_params_t>(*(void *)(v20 + v17), (uint64_t)&v16[v18], 0);
        ++v19;
        uint64_t v16 = *a2;
        v18 += 36;
        v17 += 16;
      }
      while (v19 < 0x8E38E38E38E38E39 * ((a2[1] - *a2) >> 2));
    }
    unint64_t v22 = (void **)&v20;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v22);
  }
}

{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 128))(&v14);
    uint64_t v4 = *a2;
    a2[1] = *a2;
    uint64_t v5 = v15 - v14;
    if (v15 != v14)
    {
      unint64_t v6 = v5 >> 4;
      unint64_t v7 = a2[2] - v4;
      if (v5 >> 4 <= (unint64_t)(v7 >> 3))
      {
        bzero(v4, v5 >> 1);
        v4 += v5 >> 1;
        a2[1] = v4;
      }
      else
      {
        if (v5 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        if (v7 >> 2 > v6) {
          unint64_t v6 = v7 >> 2;
        }
        if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v8 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v8 = v6;
        }
        if (v8 >> 61) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        unint64_t v9 = (char *)operator new(8 * v8);
        bzero(v9, v5 >> 1);
        *a2 = v9;
        a2[1] = &v9[v5 >> 1];
        a2[2] = &v9[8 * v8];
        if (v4)
        {
          operator delete(v4);
          uint64_t v4 = a2[1];
        }
        else
        {
          uint64_t v4 = &v9[v5 >> 1];
        }
      }
    }
    char v10 = *a2;
    if (v4 != *a2)
    {
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      char v13 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::cast_params_t>(*(void *)(v14 + v11), &v10[v12], 0);
        ++v13;
        char v10 = *a2;
        v12 += 8;
        v11 += 16;
      }
      while (v13 < (a2[1] - *a2) >> 3);
    }
    uint64_t v16 = (void **)&v14;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v16);
  }
}

{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  size_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void **v13;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 128))(&v11);
    uint64_t v4 = *a2;
    a2[1] = *a2;
    uint64_t v5 = v12 - v11;
    if (v12 != v11)
    {
      unint64_t v6 = v5 >> 4;
      unint64_t v7 = a2[2] - v4;
      if (v7 >= v5 >> 4)
      {
        a2[1] = &v4[v6];
      }
      else
      {
        if (v5 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v8 = 2 * v7;
        if (2 * v7 <= v6) {
          unint64_t v8 = v6;
        }
        if (v7 >= 0x3FFFFFFFFFFFFFFFLL) {
          unint64_t v9 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v9 = v8;
        }
        char v10 = (char *)operator new(v9);
        *a2 = v10;
        a2[1] = &v10[v6];
        a2[2] = &v10[v9];
        if (v4) {
          operator delete(v4);
        }
      }
    }
    char v13 = (void **)&v11;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v13);
  }
}

{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 128))(&v14);
    uint64_t v4 = *a2;
    a2[1] = *a2;
    uint64_t v5 = v15 - v14;
    if (v15 != v14)
    {
      unint64_t v6 = v5 >> 4;
      unint64_t v7 = a2[2] - v4;
      if (v5 >> 4 <= (unint64_t)(v7 >> 3))
      {
        memset_pattern16(v4, &unk_192DCA980, v5 >> 1);
        v4 += v5 >> 1;
        a2[1] = v4;
      }
      else
      {
        if (v5 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        if (v7 >> 2 > v6) {
          unint64_t v6 = v7 >> 2;
        }
        if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v8 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v8 = v6;
        }
        if (v8 >> 61) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        unint64_t v9 = (char *)operator new(8 * v8);
        memset_pattern16(v9, &unk_192DCA980, v5 >> 1);
        *a2 = v9;
        a2[1] = &v9[v5 >> 1];
        a2[2] = &v9[8 * v8];
        if (v4)
        {
          operator delete(v4);
          uint64_t v4 = a2[1];
        }
        else
        {
          uint64_t v4 = &v9[v5 >> 1];
        }
      }
    }
    char v10 = *a2;
    if (v4 != *a2)
    {
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      char v13 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::dynamic_quantize_params_t>(*(void *)(v14 + v11), &v10[v12], 0);
        ++v13;
        char v10 = *a2;
        v12 += 8;
        v11 += 16;
      }
      while (v13 < (a2[1] - *a2) >> 3);
    }
    uint64_t v16 = (void **)&v14;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v16);
  }
}

{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 128))(&v14);
    uint64_t v4 = *a2;
    a2[1] = *a2;
    uint64_t v5 = v15 - v14;
    if (v15 != v14)
    {
      unint64_t v6 = v5 >> 4;
      unint64_t v7 = a2[2] - v4;
      if (v5 >> 4 <= (unint64_t)(v7 >> 2))
      {
        memset(v4, 255, v5 >> 2);
        v4 += v5 >> 2;
        a2[1] = v4;
      }
      else
      {
        if (v5 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        if (v7 >> 1 > v6) {
          unint64_t v6 = v7 >> 1;
        }
        if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v8 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v8 = v6;
        }
        if (v8 >> 62) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        unint64_t v9 = (char *)operator new(4 * v8);
        memset(v9, 255, v5 >> 2);
        *a2 = v9;
        a2[1] = &v9[v5 >> 2];
        a2[2] = &v9[4 * v8];
        if (v4)
        {
          operator delete(v4);
          uint64_t v4 = a2[1];
        }
        else
        {
          uint64_t v4 = &v9[v5 >> 2];
        }
      }
    }
    char v10 = *a2;
    if (v4 != *a2)
    {
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      char v13 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::cf_jump_params_t>(*(void *)(v14 + v11), &v10[v12], 0);
        ++v13;
        char v10 = *a2;
        v12 += 4;
        v11 += 16;
      }
      while (v13 < (a2[1] - *a2) >> 2);
    }
    uint64_t v16 = (void **)&v14;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v16);
  }
}

{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void **v19;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 128))(&v17);
    uint64_t v4 = *a2;
    a2[1] = *a2;
    uint64_t v5 = v18 - v17;
    if (v18 == v17)
    {
      uint64_t v11 = v4;
    }
    else
    {
      unint64_t v6 = v5 >> 4;
      unint64_t v7 = a2[2] - v4;
      if (v5 >> 4 <= (unint64_t)(v7 >> 5))
      {
        uint64_t v11 = &v4[32 * v6];
        do
        {
          *(void *)uint64_t v4 = 0xFFFFFFFFLL;
          *((_DWORD *)v4 + 2) = 0;
          *(void *)(v4 + 12) = 1065353216;
          *((_DWORD *)v4 + 5) = 0;
          *((_DWORD *)v4 + 6) = 0;
          *((_DWORD *)v4 + 7) = 1065353216;
          v4 += 32;
        }
        while (v4 != v11);
        a2[1] = v11;
      }
      else
      {
        if ((unint64_t)v5 >= 0x7FFFFFFFFFFFFFF1) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v8 = v7 >> 4;
        if (v7 >> 4 <= v6) {
          unint64_t v8 = v6;
        }
        if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v9 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v9 = v8;
        }
        if (v9 >> 59) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        char v10 = (char *)operator new(32 * v9);
        uint64_t v11 = &v10[32 * v6];
        uint64_t v12 = v10;
        do
        {
          *(void *)uint64_t v12 = 0xFFFFFFFFLL;
          *((_DWORD *)v12 + 2) = 0;
          *(void *)(v12 + 12) = 1065353216;
          *((_DWORD *)v12 + 5) = 0;
          *((_DWORD *)v12 + 6) = 0;
          *((_DWORD *)v12 + 7) = 1065353216;
          v12 += 32;
        }
        while (v12 != v11);
        *a2 = v10;
        a2[1] = v11;
        a2[2] = &v10[32 * v9];
        if (v4)
        {
          operator delete(v4);
          uint64_t v11 = a2[1];
        }
      }
    }
    char v13 = *a2;
    if (v11 != *a2)
    {
      int v14 = 0;
      int v15 = 0;
      uint64_t v16 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::dynamic_dequantize_params_t>(*(void *)(v17 + v14), (uint64_t)&v13[v15], 0);
        ++v16;
        char v13 = *a2;
        v15 += 32;
        v14 += 16;
      }
      while (v16 < (a2[1] - *a2) >> 5);
    }
    uint64_t v19 = (void **)&v17;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v19);
  }
}

{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  size_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void **v13;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 128))(&v11);
    uint64_t v4 = *a2;
    a2[1] = *a2;
    uint64_t v5 = v12 - v11;
    if (v12 != v11)
    {
      unint64_t v6 = v5 >> 4;
      unint64_t v7 = a2[2] - v4;
      if (v7 >= v5 >> 4)
      {
        a2[1] = &v4[v6];
      }
      else
      {
        if (v5 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v8 = 2 * v7;
        if (2 * v7 <= v6) {
          unint64_t v8 = v6;
        }
        if (v7 >= 0x3FFFFFFFFFFFFFFFLL) {
          unint64_t v9 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v9 = v8;
        }
        char v10 = (char *)operator new(v9);
        *a2 = v10;
        a2[1] = &v10[v6];
        a2[2] = &v10[v9];
        if (v4) {
          operator delete(v4);
        }
      }
    }
    char v13 = (void **)&v11;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v13);
  }
}

{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 128))(&v14);
    uint64_t v4 = *a2;
    a2[1] = *a2;
    uint64_t v5 = v15 - v14;
    if (v15 != v14)
    {
      unint64_t v6 = v5 >> 4;
      unint64_t v7 = a2[2] - v4;
      if (v5 >> 4 <= (unint64_t)(v7 >> 3))
      {
        memset_pattern16(v4, &unk_192DCA980, v5 >> 1);
        v4 += v5 >> 1;
        a2[1] = v4;
      }
      else
      {
        if (v5 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        if (v7 >> 2 > v6) {
          unint64_t v6 = v7 >> 2;
        }
        if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v8 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v8 = v6;
        }
        if (v8 >> 61) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        unint64_t v9 = (char *)operator new(8 * v8);
        memset_pattern16(v9, &unk_192DCA980, v5 >> 1);
        *a2 = v9;
        a2[1] = &v9[v5 >> 1];
        a2[2] = &v9[8 * v8];
        if (v4)
        {
          operator delete(v4);
          uint64_t v4 = a2[1];
        }
        else
        {
          uint64_t v4 = &v9[v5 >> 1];
        }
      }
    }
    char v10 = *a2;
    if (v4 != *a2)
    {
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      char v13 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::get_shape_params_t>(*(void *)(v14 + v11), &v10[v12], 0);
        ++v13;
        char v10 = *a2;
        v12 += 8;
        v11 += 16;
      }
      while (v13 < (a2[1] - *a2) >> 3);
    }
    uint64_t v16 = (void **)&v14;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v16);
  }
}

{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void **v21;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 128))(&v19);
    uint64_t v4 = *a2;
    a2[1] = *a2;
    uint64_t v5 = v20 - v19;
    if (v20 == v19)
    {
      uint64_t v12 = v4;
    }
    else
    {
      unint64_t v6 = v5 >> 4;
      unint64_t v7 = a2[2] - v4;
      if (v5 >> 4 <= (unint64_t)(v7 >> 4))
      {
        int v14 = 16 * v6;
        int v15 = v4 + 14;
        uint64_t v12 = &v4[16 * v6];
        do
        {
          *(void *)(v15 - 10) = 0;
          *(_DWORD *)(v15 - 2) = 0;
          *(_DWORD *)(v15 - 14) = 5;
          *(_DWORD *)(v15 - 6) = -1;
          *(_WORD *)(v15 - 1) = 257;
          v15 += 16;
          v14 -= 16;
        }
        while (v14);
        a2[1] = v12;
      }
      else
      {
        if (v5 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v8 = v7 >> 3;
        if (v7 >> 3 <= v6) {
          unint64_t v8 = v6;
        }
        if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v9 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v9 = v8;
        }
        if (v9 >> 60) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        char v10 = (char *)operator new(16 * v9);
        uint64_t v11 = 0;
        uint64_t v12 = &v10[16 * v6];
        do
        {
          char v13 = &v10[v11];
          *(void *)(v13 + 4) = 0;
          *(_DWORD *)char v13 = 5;
          *((void *)v13 + 1) = 0xFFFFFFFFLL;
          v11 += 16;
          *(_WORD *)(v13 + 13) = 257;
        }
        while (16 * v6 != v11);
        *a2 = v10;
        a2[1] = v12;
        a2[2] = &v10[16 * v9];
        if (v4)
        {
          operator delete(v4);
          uint64_t v12 = a2[1];
        }
      }
    }
    uint64_t v16 = *a2;
    if (v12 != *a2)
    {
      char v17 = 0;
      uint64_t v18 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::topk_params_t>(*(void *)(v19 + v17), (uint64_t)&v16[v17], 0);
        ++v18;
        uint64_t v16 = *a2;
        v17 += 16;
      }
      while (v18 < (a2[1] - *a2) >> 4);
    }
    uint64_t v21 = (void **)&v19;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v21);
  }
}

{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void **v18;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 128))(&v16);
    uint64_t v4 = *a2;
    a2[1] = *a2;
    uint64_t v5 = v17 - v16;
    if (v17 != v16)
    {
      unint64_t v6 = v5 >> 4;
      unint64_t v7 = 0xCCCCCCCCCCCCCCCDLL * ((a2[2] - v4) >> 2);
      if (v7 >= v5 >> 4)
      {
        memset_pattern16(v4, &unk_192DCA990, 20 * ((20 * v6 - 20) / 0x14) + 20);
        v4 += 20 * ((20 * v6 - 20) / 0x14) + 20;
        a2[1] = v4;
      }
      else
      {
        if (v5 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v8 = 0x999999999999999ALL * ((a2[2] - v4) >> 2);
        if (v8 <= v6) {
          unint64_t v8 = v6;
        }
        if (v7 >= 0x666666666666666) {
          unint64_t v9 = 0xCCCCCCCCCCCCCCCLL;
        }
        else {
          unint64_t v9 = v8;
        }
        if (v9 > 0xCCCCCCCCCCCCCCCLL) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        char v10 = (char *)operator new(20 * v9);
        uint64_t v11 = 20 * ((20 * v6 - 20) / 0x14) + 20;
        memset_pattern16(v10, &unk_192DCA990, v11);
        *a2 = v10;
        a2[1] = &v10[v11];
        a2[2] = &v10[20 * v9];
        if (v4)
        {
          operator delete(v4);
          uint64_t v4 = a2[1];
        }
        else
        {
          uint64_t v4 = &v10[v11];
        }
      }
    }
    uint64_t v12 = *a2;
    if (v4 != *a2)
    {
      char v13 = 0;
      int v14 = 0;
      int v15 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::gather_params_t>(*(void *)(v16 + v13), &v12[v14], 0);
        ++v15;
        uint64_t v12 = *a2;
        v14 += 20;
        v13 += 16;
      }
      while (v15 < 0xCCCCCCCCCCCCCCCDLL * ((a2[1] - *a2) >> 2));
    }
    uint64_t v18 = (void **)&v16;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v18);
  }
}

{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 128))(&v14);
    uint64_t v4 = *a2;
    a2[1] = *a2;
    uint64_t v5 = v15 - v14;
    if (v15 != v14)
    {
      unint64_t v6 = v5 >> 4;
      unint64_t v7 = a2[2] - v4;
      if (v5 >> 4 <= (unint64_t)(v7 >> 3))
      {
        memset_pattern16(v4, &unk_192DCA9A0, v5 >> 1);
        v4 += v5 >> 1;
        a2[1] = v4;
      }
      else
      {
        if (v5 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        if (v7 >> 2 > v6) {
          unint64_t v6 = v7 >> 2;
        }
        if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v8 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v8 = v6;
        }
        if (v8 >> 61) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        unint64_t v9 = (char *)operator new(8 * v8);
        memset_pattern16(v9, &unk_192DCA9A0, v5 >> 1);
        *a2 = v9;
        a2[1] = &v9[v5 >> 1];
        a2[2] = &v9[8 * v8];
        if (v4)
        {
          operator delete(v4);
          uint64_t v4 = a2[1];
        }
        else
        {
          uint64_t v4 = &v9[v5 >> 1];
        }
      }
    }
    char v10 = *a2;
    if (v4 != *a2)
    {
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      char v13 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::general_concat_params_t>(*(void *)(v14 + v11), (uint64_t)&v10[v12], 0);
        ++v13;
        char v10 = *a2;
        v12 += 8;
        v11 += 16;
      }
      while (v13 < (a2[1] - *a2) >> 3);
    }
    uint64_t v16 = (void **)&v14;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v16);
  }
}

{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 128))(&v14);
    uint64_t v4 = *a2;
    a2[1] = *a2;
    uint64_t v5 = v15 - v14;
    if (v15 != v14)
    {
      unint64_t v6 = v5 >> 4;
      unint64_t v7 = a2[2] - v4;
      if (v5 >> 4 <= (unint64_t)(v7 >> 3))
      {
        memset_pattern16(v4, &xmmword_192DCA660, v5 >> 1);
        v4 += v5 >> 1;
        a2[1] = v4;
      }
      else
      {
        if (v5 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        if (v7 >> 2 > v6) {
          unint64_t v6 = v7 >> 2;
        }
        if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v8 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v8 = v6;
        }
        if (v8 >> 61) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        unint64_t v9 = (char *)operator new(8 * v8);
        memset_pattern16(v9, &xmmword_192DCA660, v5 >> 1);
        *a2 = v9;
        a2[1] = &v9[v5 >> 1];
        a2[2] = &v9[8 * v8];
        if (v4)
        {
          operator delete(v4);
          uint64_t v4 = a2[1];
        }
        else
        {
          uint64_t v4 = &v9[v5 >> 1];
        }
      }
    }
    char v10 = *a2;
    if (v4 != *a2)
    {
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      char v13 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::alloc_params_t>(*(void *)(v14 + v11), (uint64_t)&v10[v12], 0);
        ++v13;
        char v10 = *a2;
        v12 += 8;
        v11 += 16;
      }
      while (v13 < (a2[1] - *a2) >> 3);
    }
    uint64_t v16 = (void **)&v14;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v16);
  }
}

{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  size_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void **v13;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 128))(&v11);
    uint64_t v4 = *a2;
    a2[1] = *a2;
    uint64_t v5 = v12 - v11;
    if (v12 != v11)
    {
      unint64_t v6 = v5 >> 4;
      unint64_t v7 = a2[2] - v4;
      if (v7 >= v5 >> 4)
      {
        a2[1] = &v4[v6];
      }
      else
      {
        if (v5 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v8 = 2 * v7;
        if (2 * v7 <= v6) {
          unint64_t v8 = v6;
        }
        if (v7 >= 0x3FFFFFFFFFFFFFFFLL) {
          unint64_t v9 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v9 = v8;
        }
        char v10 = (char *)operator new(v9);
        *a2 = v10;
        a2[1] = &v10[v6];
        a2[2] = &v10[v9];
        if (v4) {
          operator delete(v4);
        }
      }
    }
    char v13 = (void **)&v11;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v13);
  }
}

{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 128))(&v14);
    uint64_t v4 = *a2;
    a2[1] = *a2;
    uint64_t v5 = v15 - v14;
    if (v15 != v14)
    {
      unint64_t v6 = v5 >> 4;
      unint64_t v7 = a2[2] - v4;
      if (v5 >> 4 <= (unint64_t)(v7 >> 2))
      {
        bzero(v4, v5 >> 2);
        v4 += v5 >> 2;
        a2[1] = v4;
      }
      else
      {
        if (v5 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        if (v7 >> 1 > v6) {
          unint64_t v6 = v7 >> 1;
        }
        if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v8 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v8 = v6;
        }
        if (v8 >> 62) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        unint64_t v9 = (char *)operator new(4 * v8);
        bzero(v9, v5 >> 2);
        *a2 = v9;
        a2[1] = &v9[v5 >> 2];
        a2[2] = &v9[4 * v8];
        if (v4)
        {
          operator delete(v4);
          uint64_t v4 = a2[1];
        }
        else
        {
          uint64_t v4 = &v9[v5 >> 2];
        }
      }
    }
    char v10 = *a2;
    if (v4 != *a2)
    {
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      char v13 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::cf_loop_params_t>(*(void *)(v14 + v11), &v10[v12], 0);
        ++v13;
        char v10 = *a2;
        v12 += 4;
        v11 += 16;
      }
      while (v13 < (a2[1] - *a2) >> 2);
    }
    uint64_t v16 = (void **)&v14;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v16);
  }
}

{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 128))(&v14);
    uint64_t v4 = *a2;
    a2[1] = *a2;
    uint64_t v5 = v15 - v14;
    if (v15 != v14)
    {
      unint64_t v6 = v5 >> 4;
      unint64_t v7 = a2[2] - v4;
      if (v5 >> 4 <= (unint64_t)(v7 >> 3))
      {
        memset_pattern16(v4, &xmmword_192DCA970, v5 >> 1);
        v4 += v5 >> 1;
        a2[1] = v4;
      }
      else
      {
        if (v5 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        if (v7 >> 2 > v6) {
          unint64_t v6 = v7 >> 2;
        }
        if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v8 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v8 = v6;
        }
        if (v8 >> 61) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        unint64_t v9 = (char *)operator new(8 * v8);
        memset_pattern16(v9, &xmmword_192DCA970, v5 >> 1);
        *a2 = v9;
        a2[1] = &v9[v5 >> 1];
        a2[2] = &v9[8 * v8];
        if (v4)
        {
          operator delete(v4);
          uint64_t v4 = a2[1];
        }
        else
        {
          uint64_t v4 = &v9[v5 >> 1];
        }
      }
    }
    char v10 = *a2;
    if (v4 != *a2)
    {
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      char v13 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::cf_for_params_t>(*(void *)(v14 + v11), &v10[v12], 0);
        ++v13;
        char v10 = *a2;
        v12 += 8;
        v11 += 16;
      }
      while (v13 < (a2[1] - *a2) >> 3);
    }
    uint64_t v16 = (void **)&v14;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v16);
  }
}

{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  size_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void **v13;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 128))(&v11);
    uint64_t v4 = *a2;
    a2[1] = *a2;
    uint64_t v5 = v12 - v11;
    if (v12 != v11)
    {
      unint64_t v6 = v5 >> 4;
      unint64_t v7 = a2[2] - v4;
      if (v7 >= v5 >> 4)
      {
        a2[1] = &v4[v6];
      }
      else
      {
        if (v5 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v8 = 2 * v7;
        if (2 * v7 <= v6) {
          unint64_t v8 = v6;
        }
        if (v7 >= 0x3FFFFFFFFFFFFFFFLL) {
          unint64_t v9 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v9 = v8;
        }
        char v10 = (char *)operator new(v9);
        *a2 = v10;
        a2[1] = &v10[v6];
        a2[2] = &v10[v9];
        if (v4) {
          operator delete(v4);
        }
      }
    }
    char v13 = (void **)&v11;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v13);
  }
}

{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  size_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void **v13;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 128))(&v11);
    uint64_t v4 = *a2;
    a2[1] = *a2;
    uint64_t v5 = v12 - v11;
    if (v12 != v11)
    {
      unint64_t v6 = v5 >> 4;
      unint64_t v7 = a2[2] - v4;
      if (v7 >= v5 >> 4)
      {
        a2[1] = &v4[v6];
      }
      else
      {
        if (v5 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v8 = 2 * v7;
        if (2 * v7 <= v6) {
          unint64_t v8 = v6;
        }
        if (v7 >= 0x3FFFFFFFFFFFFFFFLL) {
          unint64_t v9 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v9 = v8;
        }
        char v10 = (char *)operator new(v9);
        *a2 = v10;
        a2[1] = &v10[v6];
        a2[2] = &v10[v9];
        if (v4) {
          operator delete(v4);
        }
      }
    }
    char v13 = (void **)&v11;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v13);
  }
}

{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 128))(&v14);
    uint64_t v4 = *a2;
    a2[1] = *a2;
    uint64_t v5 = v15 - v14;
    if (v15 != v14)
    {
      unint64_t v6 = v5 >> 4;
      unint64_t v7 = a2[2] - v4;
      if (v5 >> 4 <= (unint64_t)(v7 >> 2))
      {
        bzero(v4, v5 >> 2);
        v4 += v5 >> 2;
        a2[1] = v4;
      }
      else
      {
        if (v5 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        if (v7 >> 1 > v6) {
          unint64_t v6 = v7 >> 1;
        }
        if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v8 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v8 = v6;
        }
        if (v8 >> 62) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        unint64_t v9 = (char *)operator new(4 * v8);
        bzero(v9, v5 >> 2);
        *a2 = v9;
        a2[1] = &v9[v5 >> 2];
        a2[2] = &v9[4 * v8];
        if (v4)
        {
          operator delete(v4);
          uint64_t v4 = a2[1];
        }
        else
        {
          uint64_t v4 = &v9[v5 >> 2];
        }
      }
    }
    char v10 = *a2;
    if (v4 != *a2)
    {
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      char v13 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::copy_params_t>(*(void *)(v14 + v11), &v10[v12], 0);
        ++v13;
        char v10 = *a2;
        v12 += 4;
        v11 += 16;
      }
      while (v13 < (a2[1] - *a2) >> 2);
    }
    uint64_t v16 = (void **)&v14;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v16);
  }
}

{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void **v18;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 128))(&v16);
    uint64_t v4 = *a2;
    a2[1] = *a2;
    uint64_t v5 = v17 - v16;
    if (v17 != v16)
    {
      unint64_t v6 = v5 >> 4;
      unint64_t v7 = 0xCCCCCCCCCCCCCCCDLL * ((a2[2] - v4) >> 2);
      if (v7 >= v5 >> 4)
      {
        bzero(v4, 20 * ((20 * v6 - 20) / 0x14) + 20);
        v4 += 20 * ((20 * v6 - 20) / 0x14) + 20;
        a2[1] = v4;
      }
      else
      {
        if (v5 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v8 = 0x999999999999999ALL * ((a2[2] - v4) >> 2);
        if (v8 <= v6) {
          unint64_t v8 = v6;
        }
        if (v7 >= 0x666666666666666) {
          unint64_t v9 = 0xCCCCCCCCCCCCCCCLL;
        }
        else {
          unint64_t v9 = v8;
        }
        if (v9 > 0xCCCCCCCCCCCCCCCLL) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        char v10 = (char *)operator new(20 * v9);
        uint64_t v11 = 20 * ((20 * v6 - 20) / 0x14) + 20;
        bzero(v10, v11);
        *a2 = v10;
        a2[1] = &v10[v11];
        a2[2] = &v10[20 * v9];
        if (v4)
        {
          operator delete(v4);
          uint64_t v4 = a2[1];
        }
        else
        {
          uint64_t v4 = &v10[v11];
        }
      }
    }
    uint64_t v12 = *a2;
    if (v4 != *a2)
    {
      char v13 = 0;
      int v14 = 0;
      int v15 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::matrix_band_part_params_t>(*(void *)(v16 + v13), (uint64_t)&v12[v14], 0);
        ++v15;
        uint64_t v12 = *a2;
        v14 += 20;
        v13 += 16;
      }
      while (v15 < 0xCCCCCCCCCCCCCCCDLL * ((a2[1] - *a2) >> 2));
    }
    uint64_t v18 = (void **)&v16;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v18);
  }
}

{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void **v19;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 128))(&v17);
    uint64_t v4 = *a2;
    a2[1] = *a2;
    uint64_t v5 = v18 - v17;
    if (v18 == v17)
    {
      uint64_t v11 = v4;
    }
    else
    {
      unint64_t v6 = v5 >> 4;
      unint64_t v7 = 0x8E38E38E38E38E39 * ((a2[2] - v4) >> 2);
      if (v7 >= v5 >> 4)
      {
        uint64_t v11 = &v4[36 * v6];
        do
        {
          *((_DWORD *)v4 + 8) = 0;
          *(_OWORD *)uint64_t v4 = 0uLL;
          *((_OWORD *)v4 + 1) = 0uLL;
          *(void *)(v4 + 20) = 0xFFFFFFFF00000001;
          v4[32] = 1;
          v4 += 36;
        }
        while (v4 != v11);
        a2[1] = v11;
      }
      else
      {
        if ((unint64_t)v5 >= 0x71C71C71C71C71C1) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v8 = 0x1C71C71C71C71C72 * ((a2[2] - v4) >> 2);
        if (v8 <= v6) {
          unint64_t v8 = v6;
        }
        if (v7 >= 0x38E38E38E38E38ELL) {
          unint64_t v9 = 0x71C71C71C71C71CLL;
        }
        else {
          unint64_t v9 = v8;
        }
        if (v9 > 0x71C71C71C71C71CLL) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        char v10 = (char *)operator new(36 * v9);
        uint64_t v11 = &v10[36 * v6];
        uint64_t v12 = v10;
        do
        {
          *((_DWORD *)v12 + 8) = 0;
          *(_OWORD *)uint64_t v12 = 0uLL;
          *((_OWORD *)v12 + 1) = 0uLL;
          *(void *)(v12 + 20) = 0xFFFFFFFF00000001;
          v12[32] = 1;
          v12 += 36;
        }
        while (v12 != v11);
        *a2 = v10;
        a2[1] = v11;
        a2[2] = &v10[36 * v9];
        if (v4)
        {
          operator delete(v4);
          uint64_t v11 = a2[1];
        }
      }
    }
    char v13 = *a2;
    if (v11 != *a2)
    {
      int v14 = 0;
      int v15 = 0;
      uint64_t v16 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::fill_params_t>(*(void *)(v17 + v14), (uint64_t)&v13[v15], 0);
        ++v16;
        char v13 = *a2;
        v15 += 36;
        v14 += 16;
      }
      while (v16 < 0x8E38E38E38E38E39 * ((a2[1] - *a2) >> 2));
    }
    uint64_t v19 = (void **)&v17;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v19);
  }
}

{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void **v19;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 128))(&v17);
    uint64_t v4 = *a2;
    a2[1] = *a2;
    uint64_t v5 = v18 - v17;
    if (v18 == v17)
    {
      uint64_t v11 = v4;
    }
    else
    {
      unint64_t v6 = v5 >> 4;
      unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * (a2[2] - v4);
      if (v7 >= v5 >> 4)
      {
        uint64_t v11 = &v4[3 * v6];
        do
        {
          *(_WORD *)uint64_t v4 = 1;
          v4[2] = 0;
          v4 += 3;
        }
        while (v4 != v11);
        a2[1] = v11;
      }
      else
      {
        if (v5 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v8 = 0x5555555555555556 * (a2[2] - v4);
        if (v8 <= v6) {
          unint64_t v8 = v6;
        }
        if (v7 >= 0x2AAAAAAAAAAAAAAALL) {
          unint64_t v9 = 0x5555555555555555;
        }
        else {
          unint64_t v9 = v8;
        }
        if (v9 >= 0x5555555555555556) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        char v10 = (char *)operator new(3 * v9);
        uint64_t v11 = &v10[3 * v6];
        uint64_t v12 = v10;
        do
        {
          *(_WORD *)uint64_t v12 = 1;
          void v12[2] = 0;
          v12 += 3;
        }
        while (v12 != v11);
        *a2 = v10;
        a2[1] = v11;
        a2[2] = &v10[3 * v9];
        if (v4)
        {
          operator delete(v4);
          uint64_t v11 = a2[1];
        }
      }
    }
    char v13 = *a2;
    if (v11 != *a2)
    {
      int v14 = 0;
      int v15 = 0;
      uint64_t v16 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::batch_matmul_params_t>(*(void *)(v17 + v14), &v13[v15], 0);
        ++v16;
        char v13 = *a2;
        v15 += 3;
        v14 += 16;
      }
      while (v16 < 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2));
    }
    uint64_t v19 = (void **)&v17;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v19);
  }
}

{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void **v18;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 128))(&v16);
    uint64_t v4 = *a2;
    a2[1] = *a2;
    uint64_t v5 = v17 - v16;
    if (v17 != v16)
    {
      unint64_t v6 = v5 >> 4;
      unint64_t v7 = 0xF0B7672A07A44C6BLL * ((a2[2] - v4) >> 2);
      if (v7 >= v5 >> 4)
      {
        bzero(v4, 268 * ((268 * v6 - 268) / 0x10C) + 268);
        v4 += 268 * ((268 * v6 - 268) / 0x10C) + 268;
        a2[1] = v4;
      }
      else
      {
        if ((unint64_t)v5 >= 0xF4898D5F85BB391) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v8 = 0xE16ECE540F4898D6 * ((a2[2] - v4) >> 2);
        if (v8 <= v6) {
          unint64_t v8 = v6;
        }
        if (v7 >= 0x7A44C6AFC2DD9CLL) {
          unint64_t v9 = 0xF4898D5F85BB39;
        }
        else {
          unint64_t v9 = v8;
        }
        if (v9 > 0xF4898D5F85BB39) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        char v10 = (char *)operator new(268 * v9);
        uint64_t v11 = 268 * ((268 * v6 - 268) / 0x10C) + 268;
        bzero(v10, v11);
        *a2 = v10;
        a2[1] = &v10[v11];
        a2[2] = &v10[268 * v9];
        if (v4)
        {
          operator delete(v4);
          uint64_t v4 = a2[1];
        }
        else
        {
          uint64_t v4 = &v10[v11];
        }
      }
    }
    uint64_t v12 = *a2;
    if (v4 != *a2)
    {
      char v13 = 0;
      int v14 = 0;
      int v15 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::tensor_zero_pad_params_t>(*(void *)(v16 + v13), (uint64_t)&v12[v14], 0);
        ++v15;
        uint64_t v12 = *a2;
        v14 += 268;
        v13 += 16;
      }
      while (v15 < 0xF0B7672A07A44C6BLL * ((a2[1] - *a2) >> 2));
    }
    uint64_t v18 = (void **)&v16;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v18);
  }
}

{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void **v18;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 128))(&v16);
    uint64_t v4 = *a2;
    a2[1] = *a2;
    uint64_t v5 = v17 - v16;
    if (v17 != v16)
    {
      unint64_t v6 = v5 >> 4;
      unint64_t v7 = 0xF0F0F0F0F0F0F0F1 * ((a2[2] - v4) >> 3);
      if (v7 >= v5 >> 4)
      {
        bzero(v4, 136 * ((136 * v6 - 136) / 0x88) + 136);
        v4 += 136 * ((136 * v6 - 136) / 0x88) + 136;
        a2[1] = v4;
      }
      else
      {
        if ((unint64_t)v5 >= 0x1E1E1E1E1E1E1E11) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v8 = 0xE1E1E1E1E1E1E1E2 * ((a2[2] - v4) >> 3);
        if (v8 <= v6) {
          unint64_t v8 = v6;
        }
        if (v7 >= 0xF0F0F0F0F0F0F0) {
          unint64_t v9 = 0x1E1E1E1E1E1E1E1;
        }
        else {
          unint64_t v9 = v8;
        }
        if (v9 > 0x1E1E1E1E1E1E1E1) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        char v10 = (char *)operator new(136 * v9);
        uint64_t v11 = 136 * ((136 * v6 - 136) / 0x88) + 136;
        bzero(v10, v11);
        *a2 = v10;
        a2[1] = &v10[v11];
        a2[2] = &v10[136 * v9];
        if (v4)
        {
          operator delete(v4);
          uint64_t v4 = a2[1];
        }
        else
        {
          uint64_t v4 = &v10[v11];
        }
      }
    }
    uint64_t v12 = *a2;
    if (v4 != *a2)
    {
      char v13 = 0;
      int v14 = 0;
      int v15 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::expand_dims_params_t>(*(void *)(v16 + v13), &v12[v14], 0);
        ++v15;
        uint64_t v12 = *a2;
        v14 += 136;
        v13 += 16;
      }
      while (v15 < 0xF0F0F0F0F0F0F0F1 * ((a2[1] - *a2) >> 3));
    }
    uint64_t v18 = (void **)&v16;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v18);
  }
}

{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  long long v13;
  char *v14;
  uint64_t v15;
  char *v16;
  long long v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void **v24;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 128))(&v22);
    uint64_t v4 = *a2;
    a2[1] = *a2;
    uint64_t v5 = v23 - v22;
    if (v23 == v22)
    {
      uint64_t v12 = v4;
    }
    else
    {
      unint64_t v6 = v5 >> 4;
      unint64_t v7 = 0x6DB6DB6DB6DB6DB7 * ((a2[2] - v4) >> 2);
      if (v7 >= v5 >> 4)
      {
        int v15 = 28 * v6;
        uint64_t v12 = &v4[28 * v6];
        uint64_t v16 = v4 + 16;
        *(void *)&char v17 = 0x100000001;
        *((void *)&v17 + 1) = 0x100000001;
        do
        {
          *((_DWORD *)v16 + 2) = 0;
          *((_OWORD *)v16 - 1) = v17;
          *(void *)uint64_t v16 = 4294967294;
          v16 += 28;
          v15 -= 28;
        }
        while (v15);
        a2[1] = v12;
      }
      else
      {
        if (v5 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v8 = 0xDB6DB6DB6DB6DB6ELL * ((a2[2] - v4) >> 2);
        if (v8 <= v6) {
          unint64_t v8 = v6;
        }
        if (v7 >= 0x492492492492492) {
          unint64_t v9 = 0x924924924924924;
        }
        else {
          unint64_t v9 = v8;
        }
        if (v9 > 0x924924924924924) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        char v10 = (char *)operator new(28 * v9);
        uint64_t v11 = 0;
        uint64_t v12 = &v10[28 * v6];
        *(void *)&char v13 = 0x100000001;
        *((void *)&v13 + 1) = 0x100000001;
        do
        {
          int v14 = &v10[v11];
          *((_DWORD *)v14 + 6) = 0;
          *(_OWORD *)int v14 = v13;
          *((void *)v14 + 2) = 4294967294;
          v11 += 28;
        }
        while (28 * v6 != v11);
        *a2 = v10;
        a2[1] = v12;
        a2[2] = &v10[28 * v9];
        if (v4)
        {
          operator delete(v4);
          uint64_t v12 = a2[1];
        }
      }
    }
    uint64_t v18 = *a2;
    if (v12 != *a2)
    {
      uint64_t v19 = 0;
      uint64_t v20 = 0;
      uint64_t v21 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::array_gather_params_t>(*(void *)(v22 + v19), (uint64_t)&v18[v20], 0);
        ++v21;
        uint64_t v18 = *a2;
        v20 += 28;
        v19 += 16;
      }
      while (v21 < 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 2));
    }
    uint64_t v24 = (void **)&v22;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v24);
  }
}

{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 128))(&v14);
    uint64_t v4 = *a2;
    a2[1] = *a2;
    uint64_t v5 = v15 - v14;
    if (v15 != v14)
    {
      unint64_t v6 = v5 >> 4;
      unint64_t v7 = a2[2] - v4;
      if (v5 >> 4 <= (unint64_t)(v7 >> 3))
      {
        memset_pattern16(v4, &unk_192DCA9B0, v5 >> 1);
        v4 += v5 >> 1;
        a2[1] = v4;
      }
      else
      {
        if (v5 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        if (v7 >> 2 > v6) {
          unint64_t v6 = v7 >> 2;
        }
        if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v8 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v8 = v6;
        }
        if (v8 >> 61) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        unint64_t v9 = (char *)operator new(8 * v8);
        memset_pattern16(v9, &unk_192DCA9B0, v5 >> 1);
        *a2 = v9;
        a2[1] = &v9[v5 >> 1];
        a2[2] = &v9[8 * v8];
        if (v4)
        {
          operator delete(v4);
          uint64_t v4 = a2[1];
        }
        else
        {
          uint64_t v4 = &v9[v5 >> 1];
        }
      }
    }
    char v10 = *a2;
    if (v4 != *a2)
    {
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      char v13 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::multinomial_params_t>(*(void *)(v14 + v11), &v10[v12], 0);
        ++v13;
        char v10 = *a2;
        v12 += 8;
        v11 += 16;
      }
      while (v13 < (a2[1] - *a2) >> 3);
    }
    uint64_t v16 = (void **)&v14;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v16);
  }
}

{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  size_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void **v13;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 128))(&v11);
    uint64_t v4 = *a2;
    a2[1] = *a2;
    uint64_t v5 = v12 - v11;
    if (v12 != v11)
    {
      unint64_t v6 = v5 >> 4;
      unint64_t v7 = a2[2] - v4;
      if (v7 >= v5 >> 4)
      {
        a2[1] = &v4[v6];
      }
      else
      {
        if (v5 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v8 = 2 * v7;
        if (2 * v7 <= v6) {
          unint64_t v8 = v6;
        }
        if (v7 >= 0x3FFFFFFFFFFFFFFFLL) {
          unint64_t v9 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v9 = v8;
        }
        char v10 = (char *)operator new(v9);
        *a2 = v10;
        a2[1] = &v10[v6];
        a2[2] = &v10[v9];
        if (v4) {
          operator delete(v4);
        }
      }
    }
    char v13 = (void **)&v11;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v13);
  }
}

{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void **v22;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 128))(&v20);
    uint64_t v4 = *a2;
    a2[1] = *a2;
    uint64_t v5 = v21 - v20;
    if (v21 == v20)
    {
      uint64_t v12 = v4;
    }
    else
    {
      unint64_t v6 = v5 >> 4;
      unint64_t v7 = 0x8E38E38E38E38E39 * ((a2[2] - v4) >> 2);
      if (v7 >= v5 >> 4)
      {
        uint64_t v12 = &v4[36 * v6];
        int v14 = 36 * v6;
        int v15 = v4 + 16;
        do
        {
          *((void *)v15 + 1) = 0;
          *((void *)v15 - 1) = 0;
          *((void *)v15 - 2) = 0xFFFFFFFF00000001;
          *(void *)int v15 = 0x2EDBE6FF3F800000;
          *((_DWORD *)v15 + 2) = 1065353216;
          *((_DWORD *)v15 + 4) = 0;
          v15 += 36;
          v14 -= 36;
        }
        while (v14);
        a2[1] = v12;
      }
      else
      {
        if ((unint64_t)v5 >= 0x71C71C71C71C71C1) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v8 = 0x1C71C71C71C71C72 * ((a2[2] - v4) >> 2);
        if (v8 <= v6) {
          unint64_t v8 = v6;
        }
        if (v7 >= 0x38E38E38E38E38ELL) {
          unint64_t v9 = 0x71C71C71C71C71CLL;
        }
        else {
          unint64_t v9 = v8;
        }
        if (v9 > 0x71C71C71C71C71CLL) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        char v10 = (char *)operator new(36 * v9);
        uint64_t v11 = 0;
        uint64_t v12 = &v10[36 * v6];
        do
        {
          char v13 = &v10[v11];
          *((void *)v13 + 3) = 0;
          *((void *)v13 + 1) = 0;
          *(void *)char v13 = 0xFFFFFFFF00000001;
          *((void *)v13 + 2) = 0x2EDBE6FF3F800000;
          *((_DWORD *)v13 + 6) = 1065353216;
          v11 += 36;
          *((_DWORD *)v13 + 8) = 0;
        }
        while (36 * v6 != v11);
        *a2 = v10;
        a2[1] = v12;
        a2[2] = &v10[36 * v9];
        if (v4)
        {
          operator delete(v4);
          uint64_t v12 = a2[1];
        }
      }
    }
    uint64_t v16 = *a2;
    if (v12 != *a2)
    {
      char v17 = 0;
      uint64_t v18 = 0;
      uint64_t v19 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::gumbel_max_params_t>(*(void *)(v20 + v17), (uint64_t)&v16[v18], 0);
        ++v19;
        uint64_t v16 = *a2;
        v18 += 36;
        v17 += 16;
      }
      while (v19 < 0x8E38E38E38E38E39 * ((a2[1] - *a2) >> 2));
    }
    unint64_t v22 = (void **)&v20;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v22);
  }
}

{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void **v18;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 128))(&v16);
    uint64_t v4 = *a2;
    a2[1] = *a2;
    uint64_t v5 = v17 - v16;
    if (v17 != v16)
    {
      unint64_t v6 = v5 >> 4;
      unint64_t v7 = 0xCCCCCCCCCCCCCCCDLL * ((a2[2] - v4) >> 2);
      if (v7 >= v5 >> 4)
      {
        bzero(v4, 20 * ((20 * v6 - 20) / 0x14) + 20);
        v4 += 20 * ((20 * v6 - 20) / 0x14) + 20;
        a2[1] = v4;
      }
      else
      {
        if (v5 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v8 = 0x999999999999999ALL * ((a2[2] - v4) >> 2);
        if (v8 <= v6) {
          unint64_t v8 = v6;
        }
        if (v7 >= 0x666666666666666) {
          unint64_t v9 = 0xCCCCCCCCCCCCCCCLL;
        }
        else {
          unint64_t v9 = v8;
        }
        if (v9 > 0xCCCCCCCCCCCCCCCLL) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        char v10 = (char *)operator new(20 * v9);
        uint64_t v11 = 20 * ((20 * v6 - 20) / 0x14) + 20;
        bzero(v10, v11);
        *a2 = v10;
        a2[1] = &v10[v11];
        a2[2] = &v10[20 * v9];
        if (v4)
        {
          operator delete(v4);
          uint64_t v4 = a2[1];
        }
        else
        {
          uint64_t v4 = &v10[v11];
        }
      }
    }
    uint64_t v12 = *a2;
    if (v4 != *a2)
    {
      char v13 = 0;
      int v14 = 0;
      int v15 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::transplant_params_t>(*(void *)(v16 + v13), &v12[v14], 0);
        ++v15;
        uint64_t v12 = *a2;
        v14 += 20;
        v13 += 16;
      }
      while (v15 < 0xCCCCCCCCCCCCCCCDLL * ((a2[1] - *a2) >> 2));
    }
    uint64_t v18 = (void **)&v16;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v18);
  }
}

{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void **v19;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 128))(&v17);
    uint64_t v4 = *a2;
    a2[1] = *a2;
    uint64_t v5 = v18 - v17;
    if (v18 == v17)
    {
      uint64_t v11 = v4;
    }
    else
    {
      unint64_t v6 = v5 >> 4;
      unint64_t v7 = 0x8F5C28F5C28F5C29 * ((a2[2] - v4) >> 2);
      if (v7 >= v5 >> 4)
      {
        uint64_t v11 = &v4[100 * v6];
        do
        {
          *(void *)uint64_t v4 = 0;
          *((void *)v4 + 1) = 0;
          *((_DWORD *)v4 + 4) = 0;
          *((_DWORD *)v4 + 9) = 1;
          *(_OWORD *)(v4 + 20) = xmmword_192E06E0C;
          *((_DWORD *)v4 + 14) = 1;
          *(_OWORD *)(v4 + 40) = xmmword_192E06E0C;
          *(_OWORD *)(v4 + 60) = 0uLL;
          *(_OWORD *)(v4 + 76) = 0uLL;
          *(void *)(v4 + 92) = 0xFFFFFFFF00000000;
          v4 += 100;
        }
        while (v4 != v11);
        a2[1] = v11;
      }
      else
      {
        if ((unint64_t)v5 >= 0x28F5C28F5C28F5C1) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v8 = 0x1EB851EB851EB852 * ((a2[2] - v4) >> 2);
        if (v8 <= v6) {
          unint64_t v8 = v6;
        }
        if (v7 >= 0x147AE147AE147AELL) {
          unint64_t v9 = 0x28F5C28F5C28F5CLL;
        }
        else {
          unint64_t v9 = v8;
        }
        if (v9 > 0x28F5C28F5C28F5CLL) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        char v10 = (char *)operator new(100 * v9);
        uint64_t v11 = &v10[100 * v6];
        uint64_t v12 = v10;
        do
        {
          *(void *)uint64_t v12 = 0;
          *((void *)v12 + 1) = 0;
          *((_DWORD *)v12 + 4) = 0;
          *((_DWORD *)v12 + 9) = 1;
          *(_OWORD *)(v12 + 20) = xmmword_192E06E0C;
          *((_DWORD *)v12 + 14) = 1;
          *(_OWORD *)(v12 + 40) = xmmword_192E06E0C;
          *(_OWORD *)(v12 + 60) = 0uLL;
          *(_OWORD *)(v12 + 76) = 0uLL;
          *(void *)(v12 + 92) = 0xFFFFFFFF00000000;
          v12 += 100;
        }
        while (v12 != v11);
        *a2 = v10;
        a2[1] = v11;
        a2[2] = &v10[100 * v9];
        if (v4)
        {
          operator delete(v4);
          uint64_t v11 = a2[1];
        }
      }
    }
    char v13 = *a2;
    if (v11 != *a2)
    {
      int v14 = 0;
      int v15 = 0;
      uint64_t v16 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::general_slice_params_t>(*(void *)(v17 + v14), (uint64_t)&v13[v15], 0);
        ++v16;
        char v13 = *a2;
        v15 += 100;
        v14 += 16;
      }
      while (v16 < 0x8F5C28F5C28F5C29 * ((a2[1] - *a2) >> 2));
    }
    uint64_t v19 = (void **)&v17;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v19);
  }
}

{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 128))(&v14);
    uint64_t v4 = *a2;
    a2[1] = *a2;
    uint64_t v5 = v15 - v14;
    if (v15 != v14)
    {
      unint64_t v6 = v5 >> 4;
      unint64_t v7 = a2[2] - v4;
      if (v5 >> 4 <= (unint64_t)(v7 >> 2))
      {
        bzero(v4, v5 >> 2);
        v4 += v5 >> 2;
        a2[1] = v4;
      }
      else
      {
        if (v5 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        if (v7 >> 1 > v6) {
          unint64_t v6 = v7 >> 1;
        }
        if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v8 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v8 = v6;
        }
        if (v8 >> 62) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        unint64_t v9 = (char *)operator new(4 * v8);
        bzero(v9, v5 >> 2);
        *a2 = v9;
        a2[1] = &v9[v5 >> 2];
        a2[2] = &v9[4 * v8];
        if (v4)
        {
          operator delete(v4);
          uint64_t v4 = a2[1];
        }
        else
        {
          uint64_t v4 = &v9[v5 >> 2];
        }
      }
    }
    char v10 = *a2;
    if (v4 != *a2)
    {
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      char v13 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::stack_nd_params_t>(*(void *)(v14 + v11), &v10[v12], 0);
        ++v13;
        char v10 = *a2;
        v12 += 4;
        v11 += 16;
      }
      while (v13 < (a2[1] - *a2) >> 2);
    }
    uint64_t v16 = (void **)&v14;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v16);
  }
}

{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void **v21;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 128))(&v19);
    uint64_t v4 = *a2;
    a2[1] = *a2;
    uint64_t v5 = v20 - v19;
    if (v20 == v19)
    {
      uint64_t v11 = v4;
    }
    else
    {
      unint64_t v6 = v5 >> 4;
      unint64_t v7 = 0xFC0FC0FC0FC0FC1 * ((a2[2] - v4) >> 3);
      if (v7 >= v5 >> 4)
      {
        uint64_t v11 = &v4[520 * v6];
        do
        {
          *(void *)uint64_t v4 = 0x200000000;
          *(_OWORD *)(v4 + 24) = 0uLL;
          *(_OWORD *)(v4 + 40) = 0uLL;
          *(_OWORD *)(v4 + 56) = 0uLL;
          *(_OWORD *)(v4 + 72) = 0uLL;
          *(_OWORD *)(v4 + 88) = 0uLL;
          *(_OWORD *)(v4 + 104) = 0uLL;
          *(_OWORD *)(v4 + 120) = 0uLL;
          *(_OWORD *)(v4 + 136) = 0uLL;
          *(_OWORD *)(v4 + 152) = 0uLL;
          *(_OWORD *)(v4 + 168) = 0uLL;
          *(_OWORD *)(v4 + 184) = 0uLL;
          *(_OWORD *)(v4 + 200) = 0uLL;
          *(_OWORD *)(v4 + 216) = 0uLL;
          *(_OWORD *)(v4 + 232) = 0uLL;
          *(_OWORD *)(v4 + 248) = 0uLL;
          *(_OWORD *)(v4 + 8) = 0uLL;
          int v14 = v4 + 8;
          *(_OWORD *)(v4 + 264) = 0uLL;
          *(_OWORD *)(v4 + 280) = 0uLL;
          *(_OWORD *)(v4 + 296) = 0uLL;
          *(_OWORD *)(v4 + 312) = 0uLL;
          *(_OWORD *)(v4 + 328) = 0uLL;
          *(_OWORD *)(v4 + 344) = 0uLL;
          *(_OWORD *)(v4 + 360) = 0uLL;
          *(_OWORD *)(v4 + 376) = 0uLL;
          *(_OWORD *)(v4 + 392) = 0uLL;
          *(_OWORD *)(v4 + 408) = 0uLL;
          *(_OWORD *)(v4 + 424) = 0uLL;
          *(_OWORD *)(v4 + 440) = 0uLL;
          *(_OWORD *)(v4 + 456) = 0uLL;
          *(_OWORD *)(v4 + 472) = 0uLL;
          v4 += 520;
          *((_OWORD *)v14 + 30) = 0uLL;
          *((_OWORD *)v14 + 31) = 0uLL;
        }
        while (v4 != v11);
        a2[1] = v11;
      }
      else
      {
        if ((unint64_t)v5 >= 0x7E07E07E07E07E1) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v8 = 0x1F81F81F81F81F82 * ((a2[2] - v4) >> 3);
        if (v8 <= v6) {
          unint64_t v8 = v6;
        }
        if (v7 >= 0x3F03F03F03F03FLL) {
          unint64_t v9 = 0x7E07E07E07E07ELL;
        }
        else {
          unint64_t v9 = v8;
        }
        if (v9 > 0x7E07E07E07E07ELL) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        char v10 = (char *)operator new(520 * v9);
        uint64_t v11 = &v10[520 * v6];
        uint64_t v12 = v10;
        do
        {
          *(void *)uint64_t v12 = 0x200000000;
          *(_OWORD *)(v12 + 24) = 0uLL;
          *(_OWORD *)(v12 + 40) = 0uLL;
          *(_OWORD *)(v12 + 56) = 0uLL;
          *(_OWORD *)(v12 + 72) = 0uLL;
          *(_OWORD *)(v12 + 88) = 0uLL;
          *(_OWORD *)(v12 + 104) = 0uLL;
          *(_OWORD *)(v12 + 120) = 0uLL;
          *(_OWORD *)(v12 + 136) = 0uLL;
          *(_OWORD *)(v12 + 152) = 0uLL;
          *(_OWORD *)(v12 + 168) = 0uLL;
          *(_OWORD *)(v12 + 184) = 0uLL;
          *(_OWORD *)(v12 + 200) = 0uLL;
          *(_OWORD *)(v12 + 216) = 0uLL;
          *(_OWORD *)(v12 + 232) = 0uLL;
          *(_OWORD *)(v12 + 248) = 0uLL;
          *(_OWORD *)(v12 + 8) = 0uLL;
          char v13 = v12 + 8;
          *(_OWORD *)(v12 + 264) = 0uLL;
          *(_OWORD *)(v12 + 280) = 0uLL;
          *(_OWORD *)(v12 + 296) = 0uLL;
          *(_OWORD *)(v12 + 312) = 0uLL;
          *(_OWORD *)(v12 + 328) = 0uLL;
          *(_OWORD *)(v12 + 344) = 0uLL;
          *(_OWORD *)(v12 + 360) = 0uLL;
          *(_OWORD *)(v12 + 376) = 0uLL;
          *(_OWORD *)(v12 + 392) = 0uLL;
          *(_OWORD *)(v12 + 408) = 0uLL;
          *(_OWORD *)(v12 + 424) = 0uLL;
          *(_OWORD *)(v12 + 440) = 0uLL;
          *(_OWORD *)(v12 + 456) = 0uLL;
          *(_OWORD *)(v12 + 472) = 0uLL;
          v12 += 520;
          *((_OWORD *)v13 + 30) = 0uLL;
          *((_OWORD *)v13 + 31) = 0uLL;
        }
        while (v12 != v11);
        *a2 = v10;
        a2[1] = v11;
        a2[2] = &v10[520 * v9];
        if (v4)
        {
          operator delete(v4);
          uint64_t v11 = a2[1];
        }
      }
    }
    int v15 = *a2;
    if (v11 != *a2)
    {
      uint64_t v16 = 0;
      char v17 = 0;
      uint64_t v18 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::split_nd_params_t>(*(void *)(v19 + v16), &v15[v17], 0);
        ++v18;
        int v15 = *a2;
        v17 += 520;
        v16 += 16;
      }
      while (v18 < 0xFC0FC0FC0FC0FC1 * ((a2[1] - *a2) >> 3));
    }
    uint64_t v21 = (void **)&v19;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v21);
  }
}

{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 128))(&v14);
    uint64_t v4 = *a2;
    a2[1] = *a2;
    uint64_t v5 = v15 - v14;
    if (v15 != v14)
    {
      unint64_t v6 = v5 >> 4;
      unint64_t v7 = a2[2] - v4;
      if (v5 >> 4 <= (unint64_t)(v7 >> 2))
      {
        bzero(v4, v5 >> 2);
        v4 += v5 >> 2;
        a2[1] = v4;
      }
      else
      {
        if (v5 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        if (v7 >> 1 > v6) {
          unint64_t v6 = v7 >> 1;
        }
        if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v8 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v8 = v6;
        }
        if (v8 >> 62) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        unint64_t v9 = (char *)operator new(4 * v8);
        bzero(v9, v5 >> 2);
        *a2 = v9;
        a2[1] = &v9[v5 >> 2];
        a2[2] = &v9[4 * v8];
        if (v4)
        {
          operator delete(v4);
          uint64_t v4 = a2[1];
        }
        else
        {
          uint64_t v4 = &v9[v5 >> 2];
        }
      }
    }
    char v10 = *a2;
    if (v4 != *a2)
    {
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      char v13 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::softmax_nd_params_t>(*(void *)(v14 + v11), &v10[v12], 0);
        ++v13;
        char v10 = *a2;
        v12 += 4;
        v11 += 16;
      }
      while (v13 < (a2[1] - *a2) >> 2);
    }
    uint64_t v16 = (void **)&v14;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v16);
  }
}

{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 128))(&v14);
    uint64_t v4 = *a2;
    a2[1] = *a2;
    uint64_t v5 = v15 - v14;
    if (v15 != v14)
    {
      unint64_t v6 = v5 >> 4;
      unint64_t v7 = a2[2] - v4;
      if (v5 >> 4 <= (unint64_t)(v7 >> 3))
      {
        memset_pattern16(v4, &xmmword_192DCA660, v5 >> 1);
        v4 += v5 >> 1;
        a2[1] = v4;
      }
      else
      {
        if (v5 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        if (v7 >> 2 > v6) {
          unint64_t v6 = v7 >> 2;
        }
        if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v8 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v8 = v6;
        }
        if (v8 >> 61) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        unint64_t v9 = (char *)operator new(8 * v8);
        memset_pattern16(v9, &xmmword_192DCA660, v5 >> 1);
        *a2 = v9;
        a2[1] = &v9[v5 >> 1];
        a2[2] = &v9[8 * v8];
        if (v4)
        {
          operator delete(v4);
          uint64_t v4 = a2[1];
        }
        else
        {
          uint64_t v4 = &v9[v5 >> 1];
        }
      }
    }
    char v10 = *a2;
    if (v4 != *a2)
    {
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      char v13 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::reverse_seq_params_t>(*(void *)(v14 + v11), &v10[v12], 0);
        ++v13;
        char v10 = *a2;
        v12 += 8;
        v11 += 16;
      }
      while (v13 < (a2[1] - *a2) >> 3);
    }
    uint64_t v16 = (void **)&v14;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v16);
  }
}

{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void **v19;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 128))(&v17);
    uint64_t v4 = *a2;
    a2[1] = *a2;
    uint64_t v5 = v18 - v17;
    if (v18 == v17)
    {
      uint64_t v11 = v4;
    }
    else
    {
      unint64_t v6 = v5 >> 4;
      unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((a2[2] - v4) >> 2);
      if (v7 >= v5 >> 4)
      {
        uint64_t v11 = &v4[12 * v6];
        do
        {
          *(void *)uint64_t v4 = 0;
          *(void *)(v4 + 4) = 1;
          v4[8] = 1;
          v4 += 12;
        }
        while (v4 != v11);
        a2[1] = v11;
      }
      else
      {
        if (v5 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v8 = 0x5555555555555556 * ((a2[2] - v4) >> 2);
        if (v8 <= v6) {
          unint64_t v8 = v6;
        }
        if (v7 >= 0xAAAAAAAAAAAAAAALL) {
          unint64_t v9 = 0x1555555555555555;
        }
        else {
          unint64_t v9 = v8;
        }
        if (v9 > 0x1555555555555555) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        char v10 = (char *)operator new(12 * v9);
        uint64_t v11 = &v10[12 * v6];
        uint64_t v12 = v10;
        do
        {
          *(void *)uint64_t v12 = 0;
          *(void *)(v12 + 4) = 1;
          v12[8] = 1;
          v12 += 12;
        }
        while (v12 != v11);
        *a2 = v10;
        a2[1] = v11;
        a2[2] = &v10[12 * v9];
        if (v4)
        {
          operator delete(v4);
          uint64_t v11 = a2[1];
        }
      }
    }
    char v13 = *a2;
    if (v11 != *a2)
    {
      int v14 = 0;
      int v15 = 0;
      uint64_t v16 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::cross_entropy_params_t>(*(void *)(v17 + v14), (uint64_t)&v13[v15], 0);
        ++v16;
        char v13 = *a2;
        v15 += 12;
        v14 += 16;
      }
      while (v16 < 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 2));
    }
    uint64_t v19 = (void **)&v17;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v19);
  }
}

{
  char *v4;
  char *v5;
  char *v6;
  void *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  long long v23;
  char *v24;
  void *v25;
  char *v26;
  void *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void **v36;

  if (!(*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2)) {
    return;
  }
  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 128))(&v34);
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  unint64_t v6 = *a2;
  if (v5 != *a2)
  {
    do
    {
      unint64_t v7 = (void *)*((void *)v5 - 3);
      if (v7)
      {
        *((void *)v5 - 2) = v7;
        operator delete(v7);
      }
      v5 -= 56;
    }
    while (v5 != v4);
    unint64_t v6 = *a2;
  }
  a2[1] = v4;
  unint64_t v8 = (v35 - v34) >> 4;
  unint64_t v9 = 0x6DB6DB6DB6DB6DB7 * ((v4 - v6) >> 3);
  char v10 = v8 - v9;
  if (v8 <= v9)
  {
    if (v8 >= v9)
    {
      double v26 = v4;
      goto LABEL_39;
    }
    double v26 = &v6[56 * v8];
    while (v4 != v26)
    {
      int32x2_t v27 = (void *)*((void *)v4 - 3);
      if (v27)
      {
        *((void *)v4 - 2) = v27;
        operator delete(v27);
      }
      v4 -= 56;
    }
  }
  else
  {
    uint64_t v11 = a2[2];
    if (0x6DB6DB6DB6DB6DB7 * ((v11 - v4) >> 3) < v10)
    {
      if ((unint64_t)(v35 - v34) >= 0x4924924924924921) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v12 = 0x6DB6DB6DB6DB6DB7 * ((v11 - v6) >> 3);
      char v13 = 2 * v12;
      if (2 * v12 <= v8) {
        char v13 = (v35 - v34) >> 4;
      }
      if (v12 >= 0x249249249249249) {
        int v14 = 0x492492492492492;
      }
      else {
        int v14 = v13;
      }
      if (v14 > 0x492492492492492) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      int v15 = (char *)operator new(56 * v14);
      uint64_t v16 = &v15[56 * v9];
      char v17 = &v15[56 * v8];
      uint64_t v18 = 56 * v8 - 56 * v9;
      uint64_t v19 = v16 + 20;
      do
      {
        *(void *)(v19 - 4) = 0;
        *(void *)(v19 - 12) = 0;
        *(void *)(v19 + 12) = 0;
        *(void *)(v19 + 4) = 0;
        *(void *)(v19 - 20) = 0x3F00000000000001;
        *(_DWORD *)uint64_t v19 = 3;
        *(void *)(v19 + 28) = 0;
        *(void *)(v19 + 20) = 0;
        v19 += 56;
        v18 -= 56;
      }
      while (v18);
      uint64_t v20 = &v15[56 * v14];
      uint64_t v21 = *a2;
      unint64_t v22 = a2[1];
      if (v22 == *a2)
      {
        *a2 = v16;
        a2[1] = v17;
        a2[2] = v20;
      }
      else
      {
        do
        {
          uint64_t v23 = *(_OWORD *)(v22 - 56);
          *(_OWORD *)(v16 - 44) = *(_OWORD *)(v22 - 44);
          *(_OWORD *)(v16 - 56) = v23;
          *((void *)v16 - 2) = 0;
          *((void *)v16 - 1) = 0;
          *((void *)v16 - 3) = 0;
          *(_OWORD *)(v16 - 24) = *(_OWORD *)(v22 - 24);
          *((void *)v16 - 1) = *((void *)v22 - 1);
          v16 -= 56;
          *((void *)v22 - 3) = 0;
          *((void *)v22 - 2) = 0;
          *((void *)v22 - 1) = 0;
          v22 -= 56;
        }
        while (v22 != v21);
        uint64_t v24 = *a2;
        unint64_t v22 = a2[1];
        *a2 = v16;
        a2[1] = v17;
        a2[2] = v20;
        if (v22 != v24)
        {
          do
          {
            double v25 = (void *)*((void *)v22 - 3);
            if (v25)
            {
              *((void *)v22 - 2) = v25;
              operator delete(v25);
            }
            v22 -= 56;
          }
          while (v22 != v24);
          unint64_t v22 = v24;
        }
      }
      if (v22) {
        operator delete(v22);
      }
      double v26 = a2[1];
      goto LABEL_39;
    }
    double v26 = &v4[56 * v10];
    int v28 = 56 * v8 - 8 * ((v4 - v6) >> 3);
    uint64_t v29 = v4 + 20;
    do
    {
      *(void *)(v29 - 4) = 0;
      *(void *)(v29 - 12) = 0;
      *(void *)(v29 + 12) = 0;
      *(void *)(v29 + 4) = 0;
      *(void *)(v29 - 20) = 0x3F00000000000001;
      *(_DWORD *)uint64_t v29 = 3;
      *(void *)(v29 + 28) = 0;
      *(void *)(v29 + 20) = 0;
      v29 += 56;
      v28 -= 56;
    }
    while (v28);
  }
  a2[1] = v26;
LABEL_39:
  unint64_t v30 = *a2;
  if (v26 != *a2)
  {
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    do
    {
      Espresso::SerDes::params_io<Espresso::non_maximum_suppression_params_t>(*(void *)(v34 + v31), (uint64_t)&v30[v32], 0);
      ++v33;
      unint64_t v30 = *a2;
      v32 += 56;
      v31 += 16;
    }
    while (v33 < 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 3));
  }
  uint64_t v36 = (void **)&v34;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v36);
}

{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  size_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void **v13;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 128))(&v11);
    uint64_t v4 = *a2;
    a2[1] = *a2;
    uint64_t v5 = v12 - v11;
    if (v12 != v11)
    {
      unint64_t v6 = v5 >> 4;
      unint64_t v7 = a2[2] - v4;
      if (v7 >= v5 >> 4)
      {
        a2[1] = &v4[v6];
      }
      else
      {
        if (v5 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v8 = 2 * v7;
        if (2 * v7 <= v6) {
          unint64_t v8 = v6;
        }
        if (v7 >= 0x3FFFFFFFFFFFFFFFLL) {
          unint64_t v9 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v9 = v8;
        }
        char v10 = (char *)operator new(v9);
        *a2 = v10;
        a2[1] = &v10[v6];
        a2[2] = &v10[v9];
        if (v4) {
          operator delete(v4);
        }
      }
    }
    char v13 = (void **)&v11;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v13);
  }
}

{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  size_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void **v13;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 128))(&v11);
    uint64_t v4 = *a2;
    a2[1] = *a2;
    uint64_t v5 = v12 - v11;
    if (v12 != v11)
    {
      unint64_t v6 = v5 >> 4;
      unint64_t v7 = a2[2] - v4;
      if (v7 >= v5 >> 4)
      {
        a2[1] = &v4[v6];
      }
      else
      {
        if (v5 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v8 = 2 * v7;
        if (2 * v7 <= v6) {
          unint64_t v8 = v6;
        }
        if (v7 >= 0x3FFFFFFFFFFFFFFFLL) {
          unint64_t v9 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v9 = v8;
        }
        char v10 = (char *)operator new(v9);
        *a2 = v10;
        a2[1] = &v10[v6];
        a2[2] = &v10[v9];
        if (v4) {
          operator delete(v4);
        }
      }
    }
    char v13 = (void **)&v11;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v13);
  }
}

{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void **v18;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 128))(&v16);
    uint64_t v4 = *a2;
    a2[1] = *a2;
    uint64_t v5 = v17 - v16;
    if (v17 == v16)
    {
      uint64_t v11 = v4;
    }
    else
    {
      unint64_t v6 = v5 >> 4;
      unint64_t v7 = a2[2] - v4;
      if (v5 >> 4 <= (unint64_t)(v7 >> 4))
      {
        uint64_t v11 = &v4[16 * v6];
        do
        {
          *(_DWORD *)uint64_t v4 = 0;
          *(void *)(v4 + 4) = 1065353216;
          *((_DWORD *)v4 + 3) = -1;
          v4 += 16;
        }
        while (v4 != v11);
        a2[1] = v11;
      }
      else
      {
        if (v5 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v8 = v7 >> 3;
        if (v7 >> 3 <= v6) {
          unint64_t v8 = v6;
        }
        if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v9 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v9 = v8;
        }
        if (v9 >> 60) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        char v10 = (char *)operator new(16 * v9);
        uint64_t v11 = &v10[16 * v6];
        uint64_t v12 = v10;
        do
        {
          *(_DWORD *)uint64_t v12 = 0;
          *(void *)(v12 + 4) = 1065353216;
          *((_DWORD *)v12 + 3) = -1;
          v12 += 16;
        }
        while (v12 != v11);
        *a2 = v10;
        a2[1] = v11;
        a2[2] = &v10[16 * v9];
        if (v4)
        {
          operator delete(v4);
          uint64_t v11 = a2[1];
        }
      }
    }
    char v13 = *a2;
    if (v11 != *a2)
    {
      int v14 = 0;
      int v15 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::one_hot_params_t>(*(void *)(v16 + v14), (uint64_t)&v13[v14], 0);
        ++v15;
        char v13 = *a2;
        v14 += 16;
      }
      while (v15 < (a2[1] - *a2) >> 4);
    }
    uint64_t v18 = (void **)&v16;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v18);
  }
}

{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 128))(&v13);
    uint64_t v4 = *a2;
    a2[1] = *a2;
    uint64_t v5 = v14 - v13;
    if (v14 != v13)
    {
      unint64_t v6 = v5 >> 4;
      unint64_t v7 = a2[2] - v4;
      if (v5 >> 4 <= (unint64_t)(v7 >> 1))
      {
        bzero(v4, v5 >> 3);
        v4 += v5 >> 3;
        a2[1] = v4;
      }
      else
      {
        if (v5 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        if (v7 > v6) {
          unint64_t v6 = a2[2] - v4;
        }
        if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFFELL) {
          unint64_t v8 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v8 = v6;
        }
        if (v8 < 0) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        unint64_t v9 = (char *)operator new(2 * v8);
        bzero(v9, v5 >> 3);
        *a2 = v9;
        a2[1] = &v9[v5 >> 3];
        a2[2] = &v9[2 * v8];
        if (v4)
        {
          operator delete(v4);
          uint64_t v4 = a2[1];
        }
        else
        {
          uint64_t v4 = &v9[v5 >> 3];
        }
      }
    }
    char v10 = *a2;
    if (v4 != *a2)
    {
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::cumsum_params_t>(*(void *)(v13 + 8 * v11), &v10[v11], 0);
        ++v12;
        char v10 = *a2;
        v11 += 2;
      }
      while (v12 < (a2[1] - *a2) >> 1);
    }
    int v15 = (void **)&v13;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v15);
  }
}

{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 128))(&v14);
    uint64_t v4 = *a2;
    a2[1] = *a2;
    uint64_t v5 = v15 - v14;
    if (v15 != v14)
    {
      unint64_t v6 = v5 >> 4;
      unint64_t v7 = a2[2] - v4;
      if (v5 >> 4 <= (unint64_t)(v7 >> 3))
      {
        bzero(v4, v5 >> 1);
        v4 += v5 >> 1;
        a2[1] = v4;
      }
      else
      {
        if (v5 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        if (v7 >> 2 > v6) {
          unint64_t v6 = v7 >> 2;
        }
        if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v8 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v8 = v6;
        }
        if (v8 >> 61) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        unint64_t v9 = (char *)operator new(8 * v8);
        bzero(v9, v5 >> 1);
        *a2 = v9;
        a2[1] = &v9[v5 >> 1];
        a2[2] = &v9[8 * v8];
        if (v4)
        {
          operator delete(v4);
          uint64_t v4 = a2[1];
        }
        else
        {
          uint64_t v4 = &v9[v5 >> 1];
        }
      }
    }
    char v10 = *a2;
    if (v4 != *a2)
    {
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      char v13 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::grid_sampling_params_t>(*(void *)(v14 + v11), (uint64_t)&v10[v12], 0);
        ++v13;
        char v10 = *a2;
        v12 += 8;
        v11 += 16;
      }
      while (v13 < (a2[1] - *a2) >> 3);
    }
    uint64_t v16 = (void **)&v14;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v16);
  }
}

{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void **v21;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 128))(&v19);
    uint64_t v4 = *a2;
    a2[1] = *a2;
    uint64_t v5 = v20 - v19;
    if (v20 == v19)
    {
      uint64_t v12 = v4;
    }
    else
    {
      unint64_t v6 = v5 >> 4;
      unint64_t v7 = 0x6DB6DB6DB6DB6DB7 * ((a2[2] - v4) >> 2);
      if (v7 >= v5 >> 4)
      {
        int v14 = 28 * v6;
        uint64_t v12 = &v4[28 * v6];
        do
        {
          *(_DWORD *)uint64_t v4 = 1;
          *(void *)(v4 + 12) = 0;
          *(void *)(v4 + 4) = 0;
          *(void *)(v4 + 20) = 0x100000000;
          v4 += 28;
          v14 -= 28;
        }
        while (v14);
        a2[1] = v12;
      }
      else
      {
        if (v5 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v8 = 0xDB6DB6DB6DB6DB6ELL * ((a2[2] - v4) >> 2);
        if (v8 <= v6) {
          unint64_t v8 = v6;
        }
        if (v7 >= 0x492492492492492) {
          unint64_t v9 = 0x924924924924924;
        }
        else {
          unint64_t v9 = v8;
        }
        if (v9 > 0x924924924924924) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        char v10 = (char *)operator new(28 * v9);
        uint64_t v11 = 0;
        uint64_t v12 = &v10[28 * v6];
        do
        {
          char v13 = &v10[v11];
          *(_DWORD *)char v13 = 1;
          *(void *)(v13 + 12) = 0;
          *(void *)(v13 + 4) = 0;
          *(void *)(v13 + 20) = 0x100000000;
          v11 += 28;
        }
        while (28 * v6 != v11);
        *a2 = v10;
        a2[1] = v12;
        a2[2] = &v10[28 * v9];
        if (v4)
        {
          operator delete(v4);
          uint64_t v12 = a2[1];
        }
      }
    }
    int v15 = *a2;
    if (v12 != *a2)
    {
      uint64_t v16 = 0;
      char v17 = 0;
      uint64_t v18 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::resample_params_t>(*(void *)(v19 + v16), (uint64_t)&v15[v17], 0);
        ++v18;
        int v15 = *a2;
        v17 += 28;
        v16 += 16;
      }
      while (v18 < 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 2));
    }
    uint64_t v21 = (void **)&v19;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v21);
  }
}

{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void **v18;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 128))(&v16);
    uint64_t v4 = *a2;
    a2[1] = *a2;
    uint64_t v5 = v17 - v16;
    if (v17 != v16)
    {
      unint64_t v6 = v5 >> 4;
      unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((a2[2] - v4) >> 2);
      if (v7 >= v5 >> 4)
      {
        bzero(v4, 12 * ((12 * v6 - 12) / 0xC) + 12);
        v4 += 12 * ((12 * v6 - 12) / 0xC) + 12;
        a2[1] = v4;
      }
      else
      {
        if (v5 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v8 = 0x5555555555555556 * ((a2[2] - v4) >> 2);
        if (v8 <= v6) {
          unint64_t v8 = v6;
        }
        if (v7 >= 0xAAAAAAAAAAAAAAALL) {
          unint64_t v9 = 0x1555555555555555;
        }
        else {
          unint64_t v9 = v8;
        }
        if (v9 > 0x1555555555555555) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        char v10 = (char *)operator new(12 * v9);
        uint64_t v11 = 12 * ((12 * v6 - 12) / 0xC) + 12;
        bzero(v10, v11);
        *a2 = v10;
        a2[1] = &v10[v11];
        a2[2] = &v10[12 * v9];
        if (v4)
        {
          operator delete(v4);
          uint64_t v4 = a2[1];
        }
        else
        {
          uint64_t v4 = &v10[v11];
        }
      }
    }
    uint64_t v12 = *a2;
    if (v4 != *a2)
    {
      char v13 = 0;
      int v14 = 0;
      int v15 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::bahdanau_attention_params_t>(*(void *)(v16 + v13), &v12[v14], 0);
        ++v15;
        uint64_t v12 = *a2;
        v14 += 12;
        v13 += 16;
      }
      while (v15 < 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 2));
    }
    uint64_t v18 = (void **)&v16;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v18);
  }
}

{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void **v18;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 128))(&v16);
    uint64_t v4 = *a2;
    a2[1] = *a2;
    uint64_t v5 = v17 - v16;
    if (v17 != v16)
    {
      unint64_t v6 = v5 >> 4;
      unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((a2[2] - v4) >> 2);
      if (v7 >= v5 >> 4)
      {
        bzero(v4, 12 * ((12 * v6 - 12) / 0xC) + 12);
        v4 += 12 * ((12 * v6 - 12) / 0xC) + 12;
        a2[1] = v4;
      }
      else
      {
        if (v5 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v8 = 0x5555555555555556 * ((a2[2] - v4) >> 2);
        if (v8 <= v6) {
          unint64_t v8 = v6;
        }
        if (v7 >= 0xAAAAAAAAAAAAAAALL) {
          unint64_t v9 = 0x1555555555555555;
        }
        else {
          unint64_t v9 = v8;
        }
        if (v9 > 0x1555555555555555) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        char v10 = (char *)operator new(12 * v9);
        uint64_t v11 = 12 * ((12 * v6 - 12) / 0xC) + 12;
        bzero(v10, v11);
        *a2 = v10;
        a2[1] = &v10[v11];
        a2[2] = &v10[12 * v9];
        if (v4)
        {
          operator delete(v4);
          uint64_t v4 = a2[1];
        }
        else
        {
          uint64_t v4 = &v10[v11];
        }
      }
    }
    uint64_t v12 = *a2;
    if (v4 != *a2)
    {
      char v13 = 0;
      int v14 = 0;
      int v15 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::self_attention_params_t>(*(void *)(v16 + v13), (uint64_t)&v12[v14], 0);
        ++v15;
        uint64_t v12 = *a2;
        v14 += 12;
        v13 += 16;
      }
      while (v15 < 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 2));
    }
    uint64_t v18 = (void **)&v16;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v18);
  }
}

{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 128))(&v14);
    uint64_t v4 = *a2;
    a2[1] = *a2;
    uint64_t v5 = v15 - v14;
    if (v15 != v14)
    {
      unint64_t v6 = v5 >> 4;
      unint64_t v7 = a2[2] - v4;
      if (v5 >> 4 <= (unint64_t)(v7 >> 3))
      {
        memset_pattern16(v4, &xmmword_192DCA660, v5 >> 1);
        v4 += v5 >> 1;
        a2[1] = v4;
      }
      else
      {
        if (v5 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        if (v7 >> 2 > v6) {
          unint64_t v6 = v7 >> 2;
        }
        if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v8 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v8 = v6;
        }
        if (v8 >> 61) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        unint64_t v9 = (char *)operator new(8 * v8);
        memset_pattern16(v9, &xmmword_192DCA660, v5 >> 1);
        *a2 = v9;
        a2[1] = &v9[v5 >> 1];
        a2[2] = &v9[8 * v8];
        if (v4)
        {
          operator delete(v4);
          uint64_t v4 = a2[1];
        }
        else
        {
          uint64_t v4 = &v9[v5 >> 1];
        }
      }
    }
    char v10 = *a2;
    if (v4 != *a2)
    {
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      char v13 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::argsort_params_t>(*(void *)(v14 + v11), (uint64_t)&v10[v12], 0);
        ++v13;
        char v10 = *a2;
        v12 += 8;
        v11 += 16;
      }
      while (v13 < (a2[1] - *a2) >> 3);
    }
    uint64_t v16 = (void **)&v14;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v16);
  }
}

{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void **v19;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 128))(&v17);
    uint64_t v4 = *a2;
    a2[1] = *a2;
    uint64_t v5 = v18 - v17;
    if (v18 == v17)
    {
      uint64_t v11 = v4;
    }
    else
    {
      unint64_t v6 = v5 >> 4;
      unint64_t v7 = 0xEEEEEEEEEEEEEEEFLL * ((a2[2] - v4) >> 2);
      if (v7 >= v5 >> 4)
      {
        uint64_t v11 = &v4[60 * v6];
        do
        {
          *(_OWORD *)uint64_t v4 = xmmword_192DC3600;
          *((_OWORD *)v4 + 1) = xmmword_192DCA240;
          *((_DWORD *)v4 + 8) = 0;
          *((_WORD *)v4 + 18) = 1;
          *(void *)(v4 + 46) = 0;
          *(void *)(v4 + 38) = 0;
          *(void *)(v4 + 52) = 0;
          v4 += 60;
        }
        while (v4 != v11);
        a2[1] = v11;
      }
      else
      {
        if ((unint64_t)v5 >= 0x4444444444444441) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v8 = 0xDDDDDDDDDDDDDDDELL * ((a2[2] - v4) >> 2);
        if (v8 <= v6) {
          unint64_t v8 = v6;
        }
        if (v7 >= 0x222222222222222) {
          unint64_t v9 = 0x444444444444444;
        }
        else {
          unint64_t v9 = v8;
        }
        if (v9 > 0x444444444444444) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        char v10 = (char *)operator new(60 * v9);
        uint64_t v11 = &v10[60 * v6];
        uint64_t v12 = v10;
        do
        {
          *(_OWORD *)uint64_t v12 = xmmword_192DC3600;
          *((_OWORD *)v12 + 1) = xmmword_192DCA240;
          *((_DWORD *)v12 + 8) = 0;
          *((_WORD *)v12 + 18) = 1;
          *(void *)(v12 + 46) = 0;
          *(void *)(v12 + 38) = 0;
          *(void *)(v12 + 52) = 0;
          v12 += 60;
        }
        while (v12 != v11);
        *a2 = v10;
        a2[1] = v11;
        a2[2] = &v10[60 * v9];
        if (v4)
        {
          operator delete(v4);
          uint64_t v11 = a2[1];
        }
      }
    }
    char v13 = *a2;
    if (v11 != *a2)
    {
      int v14 = 0;
      int v15 = 0;
      uint64_t v16 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::pool3d_params_t>(*(void *)(v17 + v14), (uint64_t)&v13[v15], 0);
        ++v16;
        char v13 = *a2;
        v15 += 60;
        v14 += 16;
      }
      while (v16 < 0xEEEEEEEEEEEEEEEFLL * ((a2[1] - *a2) >> 2));
    }
    uint64_t v19 = (void **)&v17;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v19);
  }
}

{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  long long v12;
  char *v18;
  long long v19;
  long long v20;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void **v28;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 128))(&v26);
    uint64_t v4 = *a2;
    a2[1] = *a2;
    uint64_t v5 = v27 - v26;
    if (v27 == v26)
    {
      uint64_t v11 = v4;
    }
    else
    {
      unint64_t v6 = v5 >> 4;
      unint64_t v7 = 0x8F5C28F5C28F5C29 * ((a2[2] - v4) >> 2);
      if (v7 >= v5 >> 4)
      {
        uint64_t v11 = &v4[100 * v6];
        *(void *)&uint64_t v20 = 0x100000001;
        *((void *)&v20 + 1) = 0x100000001;
        __asm { FMOV            V2.2S, #1.0 }
        do
        {
          *(void *)uint64_t v4 = 1;
          *(_OWORD *)(v4 + 8) = v20;
          *((void *)v4 + 3) = 0xFFFFFFFF00000001;
          *((void *)v4 + 4) = _D2;
          *((_DWORD *)v4 + 10) = 0;
          *((_WORD *)v4 + 22) = 1;
          *(void *)(v4 + 54) = 0;
          *(void *)(v4 + 46) = 0;
          *((_WORD *)v4 + 31) = 0;
          *((void *)v4 + 8) = 0x1000100010001;
          *((_DWORD *)v4 + 18) = 65537;
          *(void *)(v4 + 76) = 0x100000000;
          *(void *)(v4 + 92) = 0;
          *(void *)(v4 + 84) = 0;
          v4 += 100;
        }
        while (v4 != v11);
        a2[1] = v11;
      }
      else
      {
        if ((unint64_t)v5 >= 0x28F5C28F5C28F5C1) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v8 = 0x1EB851EB851EB852 * ((a2[2] - v4) >> 2);
        if (v8 <= v6) {
          unint64_t v8 = v6;
        }
        if (v7 >= 0x147AE147AE147AELL) {
          unint64_t v9 = 0x28F5C28F5C28F5CLL;
        }
        else {
          unint64_t v9 = v8;
        }
        if (v9 > 0x28F5C28F5C28F5CLL) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        char v10 = (char *)operator new(100 * v9);
        uint64_t v11 = &v10[100 * v6];
        *(void *)&uint64_t v12 = 0x100000001;
        *((void *)&v12 + 1) = 0x100000001;
        __asm { FMOV            V2.2S, #1.0 }
        uint64_t v18 = v10;
        do
        {
          *(void *)uint64_t v18 = 1;
          *(_OWORD *)(v18 + 8) = v12;
          *((void *)v18 + 3) = 0xFFFFFFFF00000001;
          *((void *)v18 + 4) = _D2;
          *((_DWORD *)v18 + 10) = 0;
          *((_WORD *)v18 + 22) = 1;
          *(void *)(v18 + 54) = 0;
          *(void *)(v18 + 46) = 0;
          *((_WORD *)v18 + 31) = 0;
          *((void *)v18 + 8) = 0x1000100010001;
          *((_DWORD *)v18 + 18) = 65537;
          *(void *)(v18 + 76) = 0x100000000;
          *(void *)(v18 + 92) = 0;
          *(void *)(v18 + 84) = 0;
          v18 += 100;
        }
        while (v18 != v11);
        *(void *)&uint64_t v19 = &v10[100 * v6];
        *((void *)&v19 + 1) = &v10[100 * v9];
        *a2 = v10;
        *(_OWORD *)(a2 + 1) = v19;
        if (v4)
        {
          operator delete(v4);
          uint64_t v11 = a2[1];
        }
      }
    }
    unint64_t v22 = *a2;
    if (v11 != *a2)
    {
      uint64_t v23 = 0;
      uint64_t v24 = 0;
      double v25 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::conv3d_params_t>(*(void *)(v26 + v23), (uint64_t)&v22[v24], 0);
        ++v25;
        unint64_t v22 = *a2;
        v24 += 100;
        v23 += 16;
      }
      while (v25 < 0x8F5C28F5C28F5C29 * ((a2[1] - *a2) >> 2));
    }
    int v28 = (void **)&v26;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v28);
  }
}

{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void **v19;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 128))(&v17);
    uint64_t v4 = *a2;
    a2[1] = *a2;
    uint64_t v5 = v18 - v17;
    if (v18 == v17)
    {
      uint64_t v11 = v4;
    }
    else
    {
      unint64_t v6 = v5 >> 4;
      unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((a2[2] - v4) >> 2);
      if (v7 >= v5 >> 4)
      {
        uint64_t v11 = &v4[12 * v6];
        do
        {
          *(_DWORD *)uint64_t v4 = -1;
          *(void *)(v4 + 4) = 1065353216;
          v4 += 12;
        }
        while (v4 != v11);
        a2[1] = v11;
      }
      else
      {
        if (v5 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v8 = 0x5555555555555556 * ((a2[2] - v4) >> 2);
        if (v8 <= v6) {
          unint64_t v8 = v6;
        }
        if (v7 >= 0xAAAAAAAAAAAAAAALL) {
          unint64_t v9 = 0x1555555555555555;
        }
        else {
          unint64_t v9 = v8;
        }
        if (v9 > 0x1555555555555555) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        char v10 = (char *)operator new(12 * v9);
        uint64_t v11 = &v10[12 * v6];
        uint64_t v12 = v10;
        do
        {
          *(_DWORD *)uint64_t v12 = -1;
          *(void *)(v12 + 4) = 1065353216;
          v12 += 12;
        }
        while (v12 != v11);
        *a2 = v10;
        a2[1] = v11;
        a2[2] = &v10[12 * v9];
        if (v4)
        {
          operator delete(v4);
          uint64_t v11 = a2[1];
        }
      }
    }
    char v13 = *a2;
    if (v11 != *a2)
    {
      int v14 = 0;
      int v15 = 0;
      uint64_t v16 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::static_quantize_params_t>(*(void *)(v17 + v14), (uint64_t)&v13[v15], 0);
        ++v16;
        char v13 = *a2;
        v15 += 12;
        v14 += 16;
      }
      while (v16 < 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 2));
    }
    uint64_t v19 = (void **)&v17;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v19);
  }
}

{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void **v19;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 128))(&v17);
    uint64_t v4 = *a2;
    a2[1] = *a2;
    uint64_t v5 = v18 - v17;
    if (v18 == v17)
    {
      uint64_t v11 = v4;
    }
    else
    {
      unint64_t v6 = v5 >> 4;
      unint64_t v7 = a2[2] - v4;
      if (v5 >> 4 <= (unint64_t)(v7 >> 5))
      {
        uint64_t v11 = &v4[32 * v6];
        do
        {
          *(_DWORD *)uint64_t v4 = -1;
          *(void *)(v4 + 4) = 1065353216;
          *((_DWORD *)v4 + 3) = 0;
          *((_DWORD *)v4 + 4) = 0;
          *(void *)(v4 + 20) = 1065353216;
          *((_DWORD *)v4 + 7) = 0;
          v4 += 32;
        }
        while (v4 != v11);
        a2[1] = v11;
      }
      else
      {
        if ((unint64_t)v5 >= 0x7FFFFFFFFFFFFFF1) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v8 = v7 >> 4;
        if (v7 >> 4 <= v6) {
          unint64_t v8 = v6;
        }
        if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v9 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v9 = v8;
        }
        if (v9 >> 59) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        char v10 = (char *)operator new(32 * v9);
        uint64_t v11 = &v10[32 * v6];
        uint64_t v12 = v10;
        do
        {
          *(_DWORD *)uint64_t v12 = -1;
          *(void *)(v12 + 4) = 1065353216;
          *((_DWORD *)v12 + 3) = 0;
          *((_DWORD *)v12 + 4) = 0;
          *(void *)(v12 + 20) = 1065353216;
          *((_DWORD *)v12 + 7) = 0;
          v12 += 32;
        }
        while (v12 != v11);
        *a2 = v10;
        a2[1] = v11;
        a2[2] = &v10[32 * v9];
        if (v4)
        {
          operator delete(v4);
          uint64_t v11 = a2[1];
        }
      }
    }
    char v13 = *a2;
    if (v11 != *a2)
    {
      int v14 = 0;
      int v15 = 0;
      uint64_t v16 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::static_dequantize_params_t>(*(void *)(v17 + v14), (uint64_t)&v13[v15], 0);
        ++v16;
        char v13 = *a2;
        v15 += 32;
        v14 += 16;
      }
      while (v16 < (a2[1] - *a2) >> 5);
    }
    uint64_t v19 = (void **)&v17;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v19);
  }
}

{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 128))(&v18);
    uint64_t v4 = *a2;
    a2[1] = *a2;
    uint64_t v5 = v19 - v18;
    if (v19 == v18)
    {
      uint64_t v12 = v4;
    }
    else
    {
      unint64_t v6 = v5 >> 4;
      unint64_t v7 = 0x82FA0BE82FA0BE83 * ((a2[2] - v4) >> 2);
      if (v7 >= v5 >> 4)
      {
        uint64_t v12 = &v4[172 * v6];
        do
        {
          *((void *)v4 + 20) = 0;
          *((_OWORD *)v4 + 8) = 0u;
          *((_OWORD *)v4 + 9) = 0u;
          *((_OWORD *)v4 + 6) = 0u;
          *((_OWORD *)v4 + 7) = 0u;
          *((_OWORD *)v4 + 4) = 0u;
          *((_OWORD *)v4 + 5) = 0u;
          *((_OWORD *)v4 + 2) = 0u;
          *((_OWORD *)v4 + 3) = 0u;
          *(_OWORD *)uint64_t v4 = 0u;
          *((_OWORD *)v4 + 1) = 0u;
          Espresso::convolution_uniforms::convolution_uniforms((Espresso::convolution_uniforms *)v4);
          *((_DWORD *)v4 + 42) = 65793;
          v4 += 172;
        }
        while (v4 != v12);
        a2[1] = v12;
      }
      else
      {
        if ((unint64_t)v5 >= 0x17D05F417D05F411) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v8 = 0x5F417D05F417D06 * ((a2[2] - v4) >> 2);
        if (v8 <= v6) {
          unint64_t v8 = v6;
        }
        if (v7 >= 0xBE82FA0BE82FA0) {
          unint64_t v9 = 0x17D05F417D05F41;
        }
        else {
          unint64_t v9 = v8;
        }
        if (v9 > 0x17D05F417D05F41) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        char v10 = (char *)operator new(172 * v9);
        uint64_t v11 = v10;
        uint64_t v12 = &v10[172 * v6];
        do
        {
          *((void *)v10 + 20) = 0;
          *((_OWORD *)v10 + 8) = 0u;
          *((_OWORD *)v10 + 9) = 0u;
          *((_OWORD *)v10 + 6) = 0u;
          *((_OWORD *)v10 + 7) = 0u;
          *((_OWORD *)v10 + 4) = 0u;
          *((_OWORD *)v10 + 5) = 0u;
          *((_OWORD *)v10 + 2) = 0u;
          *((_OWORD *)v10 + 3) = 0u;
          *(_OWORD *)char v10 = 0u;
          *((_OWORD *)v10 + 1) = 0u;
          Espresso::convolution_uniforms::convolution_uniforms((Espresso::convolution_uniforms *)v10);
          *(_DWORD *)(v13 + 168) = 65793;
          char v10 = (char *)(v13 + 172);
        }
        while (v10 != v12);
        *a2 = v11;
        a2[1] = v12;
        a2[2] = &v11[172 * v9];
        if (v4)
        {
          operator delete(v4);
          uint64_t v12 = a2[1];
        }
      }
    }
    int v14 = *a2;
    if (v12 != *a2)
    {
      int v15 = 0;
      uint64_t v16 = 0;
      char v17 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::fused_convolution_grad_params_t>(*(void *)(v18 + v15), &v14[v16], 0);
        ++v17;
        int v14 = *a2;
        v16 += 172;
        v15 += 16;
      }
      while (v17 < 0x82FA0BE82FA0BE83 * ((a2[1] - *a2) >> 2));
    }
    uint64_t v20 = (void **)&v18;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v20);
  }
}

{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  char *v18;
  long long v19;
  uint64_t v20;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void **v29;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 128))(&v27);
    uint64_t v4 = *a2;
    a2[1] = *a2;
    uint64_t v5 = v28 - v27;
    if (v28 == v27)
    {
      uint64_t v12 = v4;
    }
    else
    {
      unint64_t v6 = v5 >> 4;
      unint64_t v7 = 0xF0F0F0F0F0F0F0F1 * ((a2[2] - v4) >> 3);
      if (v7 >= v5 >> 4)
      {
        uint64_t v20 = 0;
        uint64_t v12 = &v4[136 * v6];
        __asm { FMOV            V1.2S, #1.0 }
        do
        {
          unint64_t v22 = &v4[v20];
          *(_OWORD *)(v22 + 40) = 0uLL;
          *(_OWORD *)(v22 + 56) = 0uLL;
          *(_OWORD *)(v22 + 104) = 0uLL;
          *(_OWORD *)(v22 + 88) = 0uLL;
          *(_OWORD *)(v22 + 120) = 0uLL;
          *(_OWORD *)(v22 + 72) = 0uLL;
          *((_DWORD *)v22 + 13) = -1;
          *((void *)v22 + 7) = _D1;
          *(_OWORD *)unint64_t v22 = xmmword_192DCA240;
          *((_DWORD *)v22 + 4) = 0;
          *(void *)(v22 + 20) = _D1;
          *((void *)v22 + 4) = 0;
          *((_DWORD *)v22 + 7) = 0;
          *(void *)(v22 + 100) = 0;
          *(void *)(v22 + 108) = 0;
          *(void *)(v22 + 116) = 0;
          *((_WORD *)v22 + 66) = 257;
          v20 += 136;
          v22[134] = 1;
        }
        while (136 * v6 != v20);
        a2[1] = v12;
      }
      else
      {
        if ((unint64_t)v5 >= 0x1E1E1E1E1E1E1E11) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v8 = 0xE1E1E1E1E1E1E1E2 * ((a2[2] - v4) >> 3);
        if (v8 <= v6) {
          unint64_t v8 = v6;
        }
        if (v7 >= 0xF0F0F0F0F0F0F0) {
          unint64_t v9 = 0x1E1E1E1E1E1E1E1;
        }
        else {
          unint64_t v9 = v8;
        }
        if (v9 > 0x1E1E1E1E1E1E1E1) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        char v10 = (char *)operator new(136 * v9);
        uint64_t v11 = 0;
        uint64_t v12 = &v10[136 * v6];
        __asm { FMOV            V1.2S, #1.0 }
        do
        {
          uint64_t v18 = &v10[v11];
          *(_OWORD *)(v18 + 40) = 0uLL;
          *(_OWORD *)(v18 + 56) = 0uLL;
          *(_OWORD *)(v18 + 104) = 0uLL;
          *(_OWORD *)(v18 + 88) = 0uLL;
          *(_OWORD *)(v18 + 120) = 0uLL;
          *(_OWORD *)(v18 + 72) = 0uLL;
          *((_DWORD *)v18 + 13) = -1;
          *((void *)v18 + 7) = _D1;
          *(_OWORD *)uint64_t v18 = xmmword_192DCA240;
          *((_DWORD *)v18 + 4) = 0;
          *(void *)(v18 + 20) = _D1;
          *((void *)v18 + 4) = 0;
          *((_DWORD *)v18 + 7) = 0;
          *(void *)(v18 + 100) = 0;
          *(void *)(v18 + 108) = 0;
          *(void *)(v18 + 116) = 0;
          *((_WORD *)v18 + 66) = 257;
          v11 += 136;
          v18[134] = 1;
        }
        while (136 * v6 != v11);
        *(void *)&uint64_t v19 = &v10[136 * v6];
        *((void *)&v19 + 1) = &v10[136 * v9];
        *a2 = v10;
        *(_OWORD *)(a2 + 1) = v19;
        if (v4)
        {
          operator delete(v4);
          uint64_t v12 = a2[1];
        }
      }
    }
    uint64_t v23 = *a2;
    if (v12 != *a2)
    {
      uint64_t v24 = 0;
      double v25 = 0;
      double v26 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::fused_inner_product_grad_params_t>(*(void *)(v27 + v24), &v23[v25], 0);
        ++v26;
        uint64_t v23 = *a2;
        v25 += 136;
        v24 += 16;
      }
      while (v26 < 0xF0F0F0F0F0F0F0F1 * ((a2[1] - *a2) >> 3));
    }
    uint64_t v29 = (void **)&v27;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v29);
  }
}

{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void **v19;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 128))(&v17);
    uint64_t v4 = *a2;
    a2[1] = *a2;
    uint64_t v5 = v18 - v17;
    if (v18 == v17)
    {
      uint64_t v11 = v4;
    }
    else
    {
      unint64_t v6 = v5 >> 4;
      unint64_t v7 = 0x4EC4EC4EC4EC4EC5 * ((a2[2] - v4) >> 3);
      if (v7 >= v5 >> 4)
      {
        uint64_t v11 = &v4[104 * v6];
        do
        {
          *(void *)uint64_t v4 = 0;
          *((void *)v4 + 1) = 0;
          *((_DWORD *)v4 + 4) = 0;
          *((_DWORD *)v4 + 9) = 1;
          *(_OWORD *)(v4 + 20) = xmmword_192E06E0C;
          *((_DWORD *)v4 + 14) = 1;
          *(_OWORD *)(v4 + 40) = xmmword_192E06E0C;
          *(_OWORD *)(v4 + 60) = 0uLL;
          *(_OWORD *)(v4 + 76) = 0uLL;
          *((_DWORD *)v4 + 23) = 0;
          *((void *)v4 + 12) = 0xFFFFFFFFLL;
          v4 += 104;
        }
        while (v4 != v11);
        a2[1] = v11;
      }
      else
      {
        if ((unint64_t)v5 >= 0x2762762762762761) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v8 = 0x9D89D89D89D89D8ALL * ((a2[2] - v4) >> 3);
        if (v8 <= v6) {
          unint64_t v8 = v6;
        }
        if (v7 >= 0x13B13B13B13B13BLL) {
          unint64_t v9 = 0x276276276276276;
        }
        else {
          unint64_t v9 = v8;
        }
        if (v9 > 0x276276276276276) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        char v10 = (char *)operator new(104 * v9);
        uint64_t v11 = &v10[104 * v6];
        uint64_t v12 = v10;
        do
        {
          *(void *)uint64_t v12 = 0;
          *((void *)v12 + 1) = 0;
          *((_DWORD *)v12 + 4) = 0;
          *((_DWORD *)v12 + 9) = 1;
          *(_OWORD *)(v12 + 20) = xmmword_192E06E0C;
          *((_DWORD *)v12 + 14) = 1;
          *(_OWORD *)(v12 + 40) = xmmword_192E06E0C;
          *(_OWORD *)(v12 + 60) = 0uLL;
          *(_OWORD *)(v12 + 76) = 0uLL;
          *((_DWORD *)v12 + 23) = 0;
          *((void *)v12 + 12) = 0xFFFFFFFFLL;
          v12 += 104;
        }
        while (v12 != v11);
        *a2 = v10;
        a2[1] = v11;
        a2[2] = &v10[104 * v9];
        if (v4)
        {
          operator delete(v4);
          uint64_t v11 = a2[1];
        }
      }
    }
    char v13 = *a2;
    if (v11 != *a2)
    {
      int v14 = 0;
      int v15 = 0;
      uint64_t v16 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::general_slice_update_params_t>(*(void *)(v17 + v14), (uint64_t)&v13[v15], 0);
        ++v16;
        char v13 = *a2;
        v15 += 104;
        v14 += 16;
      }
      while (v16 < 0x4EC4EC4EC4EC4EC5 * ((a2[1] - *a2) >> 3));
    }
    uint64_t v19 = (void **)&v17;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v19);
  }
}

{
  char *v4;
  int64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 128))(&v13);
    uint64_t v4 = *a2;
    a2[1] = *a2;
    uint64_t v5 = v14 - v13;
    if (v14 != v13)
    {
      unint64_t v6 = v5 >> 4;
      unint64_t v7 = a2[2] - v4;
      if (v5 >> 4 <= (unint64_t)(v7 >> 4))
      {
        bzero(v4, v14 - v13);
        v4 += v5;
        a2[1] = v4;
      }
      else
      {
        if (v5 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        if (v7 >> 3 > v6) {
          unint64_t v6 = v7 >> 3;
        }
        if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v8 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v8 = v6;
        }
        if (v8 >> 60) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        unint64_t v9 = (char *)operator new(16 * v8);
        bzero(v9, v5);
        *a2 = v9;
        a2[1] = &v9[v5];
        a2[2] = &v9[16 * v8];
        if (v4)
        {
          operator delete(v4);
          uint64_t v4 = a2[1];
        }
        else
        {
          uint64_t v4 = &v9[v5];
        }
      }
    }
    char v10 = *a2;
    if (v4 != *a2)
    {
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::resize_nearest_neighbor_params_t>(*(void *)(v13 + v11), &v10[v11], 0);
        ++v12;
        char v10 = *a2;
        v11 += 16;
      }
      while (v12 < (a2[1] - *a2) >> 4);
    }
    int v15 = (void **)&v13;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v15);
  }
}

{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  long long v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  long long v18;
  long long v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void **v26;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 128))(&v24);
    uint64_t v4 = *a2;
    a2[1] = *a2;
    uint64_t v5 = v25 - v24;
    if (v25 == v24)
    {
      uint64_t v12 = v4;
    }
    else
    {
      unint64_t v6 = v5 >> 4;
      unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((a2[2] - v4) >> 3);
      if (v7 >= v5 >> 4)
      {
        uint64_t v12 = &v4[24 * v6];
        *(void *)&uint64_t v19 = 0x100000001;
        *((void *)&v19 + 1) = 0x100000001;
        do
        {
          *(_OWORD *)uint64_t v4 = v19;
          *((void *)v4 + 2) = 0xFFFFFFFF00000001;
          v4 += 24;
        }
        while (v4 != v12);
        a2[1] = v12;
      }
      else
      {
        if (v5 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v8 = 0x5555555555555556 * ((a2[2] - v4) >> 3);
        if (2 * v7 <= v6) {
          unint64_t v8 = v5 >> 4;
        }
        if (v7 >= 0x555555555555555) {
          unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v9 = v8;
        }
        char v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v9);
        uint64_t v12 = &v10[24 * v6];
        *(void *)&char v13 = 0x100000001;
        *((void *)&v13 + 1) = 0x100000001;
        int v14 = v10;
        do
        {
          *(_OWORD *)int v14 = v13;
          *((void *)v14 + 2) = 0xFFFFFFFF00000001;
          v14 += 24;
        }
        while (v14 != v12);
        int v15 = &v10[24 * v11];
        char v17 = *a2;
        uint64_t v16 = a2[1];
        if (v16 != *a2)
        {
          do
          {
            uint64_t v18 = *(_OWORD *)(v16 - 24);
            *((void *)v10 - 1) = *((void *)v16 - 1);
            *(_OWORD *)(v10 - 24) = v18;
            v10 -= 24;
            v16 -= 24;
          }
          while (v16 != v17);
          uint64_t v16 = *a2;
        }
        *a2 = v10;
        a2[1] = v12;
        a2[2] = v15;
        if (v16)
        {
          operator delete(v16);
          uint64_t v12 = a2[1];
        }
      }
    }
    uint64_t v20 = *a2;
    if (v12 != *a2)
    {
      uint64_t v21 = 0;
      unint64_t v22 = 0;
      uint64_t v23 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::tensor_shape_t>(*(void *)(v24 + v21), &v20[v22], 0);
        ++v23;
        uint64_t v20 = *a2;
        v22 += 24;
        v21 += 16;
      }
      while (v23 < 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
    }
    double v26 = (void **)&v24;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v26);
  }
}

{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 128))(&v14);
    uint64_t v4 = *a2;
    a2[1] = *a2;
    uint64_t v5 = v15 - v14;
    if (v15 != v14)
    {
      unint64_t v6 = v5 >> 4;
      unint64_t v7 = a2[2] - v4;
      if (v5 >> 4 <= (unint64_t)(v7 >> 3))
      {
        memset_pattern16(v4, "f024", v5 >> 1);
        v4 += v5 >> 1;
        a2[1] = v4;
      }
      else
      {
        if (v5 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        if (v7 >> 2 > v6) {
          unint64_t v6 = v7 >> 2;
        }
        if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v8 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v8 = v6;
        }
        if (v8 >> 61) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        unint64_t v9 = (char *)operator new(8 * v8);
        memset_pattern16(v9, "f024", v5 >> 1);
        *a2 = v9;
        a2[1] = &v9[v5 >> 1];
        a2[2] = &v9[8 * v8];
        if (v4)
        {
          operator delete(v4);
          uint64_t v4 = a2[1];
        }
        else
        {
          uint64_t v4 = &v9[v5 >> 1];
        }
      }
    }
    char v10 = *a2;
    if (v4 != *a2)
    {
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      char v13 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::plane_rw_params_t>(*(void *)(v14 + v11), (int *)&v10[v12], 0);
        ++v13;
        char v10 = *a2;
        v12 += 8;
        v11 += 16;
      }
      while (v13 < (a2[1] - *a2) >> 3);
    }
    uint64_t v16 = (void **)&v14;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v16);
  }
}

{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 128))(&v14);
    uint64_t v4 = *a2;
    a2[1] = *a2;
    uint64_t v5 = v15 - v14;
    if (v15 != v14)
    {
      unint64_t v6 = v5 >> 4;
      unint64_t v7 = a2[2] - v4;
      if (v5 >> 4 <= (unint64_t)(v7 >> 2))
      {
        bzero(v4, v5 >> 2);
        v4 += v5 >> 2;
        a2[1] = v4;
      }
      else
      {
        if (v5 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        if (v7 >> 1 > v6) {
          unint64_t v6 = v7 >> 1;
        }
        if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v8 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v8 = v6;
        }
        if (v8 >> 62) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        unint64_t v9 = (char *)operator new(4 * v8);
        bzero(v9, v5 >> 2);
        *a2 = v9;
        a2[1] = &v9[v5 >> 2];
        a2[2] = &v9[4 * v8];
        if (v4)
        {
          operator delete(v4);
          uint64_t v4 = a2[1];
        }
        else
        {
          uint64_t v4 = &v9[v5 >> 2];
        }
      }
    }
    char v10 = *a2;
    if (v4 != *a2)
    {
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      char v13 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::degamma_params_t>(*(void *)(v14 + v11), &v10[v12], 0);
        ++v13;
        char v10 = *a2;
        v12 += 4;
        v11 += 16;
      }
      while (v13 < (a2[1] - *a2) >> 2);
    }
    uint64_t v16 = (void **)&v14;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v16);
  }
}

{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 128))(&v14);
    uint64_t v4 = *a2;
    a2[1] = *a2;
    uint64_t v5 = v15 - v14;
    if (v15 != v14)
    {
      unint64_t v6 = v5 >> 4;
      unint64_t v7 = a2[2] - v4;
      if (v5 >> 4 <= (unint64_t)(v7 >> 3))
      {
        memset(v4, 255, v5 >> 1);
        v4 += v5 >> 1;
        a2[1] = v4;
      }
      else
      {
        if (v5 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        if (v7 >> 2 > v6) {
          unint64_t v6 = v7 >> 2;
        }
        if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v8 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v8 = v6;
        }
        if (v8 >> 61) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        unint64_t v9 = (char *)operator new(8 * v8);
        memset(v9, 255, v5 >> 1);
        *a2 = v9;
        a2[1] = &v9[v5 >> 1];
        a2[2] = &v9[8 * v8];
        if (v4)
        {
          operator delete(v4);
          uint64_t v4 = a2[1];
        }
        else
        {
          uint64_t v4 = &v9[v5 >> 1];
        }
      }
    }
    char v10 = *a2;
    if (v4 != *a2)
    {
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      char v13 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::linear_quantize_params_t>(*(void *)(v14 + v11), &v10[v12], 0);
        ++v13;
        char v10 = *a2;
        v12 += 8;
        v11 += 16;
      }
      while (v13 < (a2[1] - *a2) >> 3);
    }
    uint64_t v16 = (void **)&v14;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v16);
  }
}

{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 128))(&v14);
    uint64_t v4 = *a2;
    a2[1] = *a2;
    uint64_t v5 = v15 - v14;
    if (v15 != v14)
    {
      unint64_t v6 = v5 >> 4;
      unint64_t v7 = a2[2] - v4;
      if (v5 >> 4 <= (unint64_t)(v7 >> 3))
      {
        memset(v4, 255, v5 >> 1);
        v4 += v5 >> 1;
        a2[1] = v4;
      }
      else
      {
        if (v5 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        if (v7 >> 2 > v6) {
          unint64_t v6 = v7 >> 2;
        }
        if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v8 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v8 = v6;
        }
        if (v8 >> 61) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        unint64_t v9 = (char *)operator new(8 * v8);
        memset(v9, 255, v5 >> 1);
        *a2 = v9;
        a2[1] = &v9[v5 >> 1];
        a2[2] = &v9[8 * v8];
        if (v4)
        {
          operator delete(v4);
          uint64_t v4 = a2[1];
        }
        else
        {
          uint64_t v4 = &v9[v5 >> 1];
        }
      }
    }
    char v10 = *a2;
    if (v4 != *a2)
    {
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      char v13 = 0;
      do
      {
        Espresso::SerDes::params_io<Espresso::linear_dequantize_params_t>(*(void *)(v14 + v11), &v10[v12], 0);
        ++v13;
        char v10 = *a2;
        v12 += 8;
        v11 += 16;
      }
      while (v13 < (a2[1] - *a2) >> 3);
    }
    uint64_t v16 = (void **)&v14;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v16);
  }
}

void sub_192AEDAA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::operator<<(uint64_t a1, uint64_t a2)
{
}

{
  Espresso::SerDes::params_io<Espresso::convolution_uniforms>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::pool_params>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::lrn_params>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::softmax_params>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::inner_product_uniforms>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::layer_shape>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::concat_params>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::split_params>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::upsample_kernel_params>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::elementwise_params>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::activation_params>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::axpby_params>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::l2_norm_params>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::bias_params>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::batchnorm_params>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::dropout_params>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::reshape_params>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::reshape_like_params>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::vimage2espresso_param>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::blob_numerical_properties>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::reduce_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::general_padding_params>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::prediction_smoothing_params>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::space_to_batch_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::broadcast_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::lambda_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::patch_extractor_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::crop_and_resize_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::cf_branch_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::dynamic_dequantize_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::spatial_transformer_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::cf_call_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::topk_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::general_concat_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::alloc_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::load_global_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::store_global_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::scatter_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::load_random_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::matrix_band_part_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::fill_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::tensor_zero_pad_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::squeeze_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::array_gather_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::instancenorm_1d_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::gumbel_max_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::builtin_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::general_slice_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::cross_entropy_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::non_maximum_suppression_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::sgd_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::gather_nd_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::adam_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::scatter_nd_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::one_hot_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::wg_transform_params>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::grid_sampling_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::resample_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::self_attention_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::loopkit_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::argsort_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::pool3d_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::conv3d_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::static_quantize_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::static_dequantize_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::general_slice_update_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::einsum_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::foreign_network_storage_blob_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::foreign_network_weight_file_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::tunneled_ane_op_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::tunneled_unit_bottom_layout_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::tunneled_unit_top_layout_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::tunneled_ane_unit_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::brick_params>(a1, a2, 1);
}

void Espresso::SerDes::operator<<(void *a1, uint64_t a2)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 16))(&v4);
  Espresso::SerDes::params_io<Espresso::rnn_arch_params>(v4, a2, 1);
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 240))(*a1, a1 + 2, &v4);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 16))(&v4);
  Espresso::SerDes::params_io<Espresso::convolution_uniforms>(v4, a2, 1);
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 240))(*a1, a1 + 2, &v4);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 16))(&v4);
  Espresso::SerDes::params_io<Espresso::pool_params>(v4, a2, 1);
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 240))(*a1, a1 + 2, &v4);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 16))(&v4);
  Espresso::SerDes::params_io<Espresso::lrn_params>(v4, a2, 1);
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 240))(*a1, a1 + 2, &v4);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 16))(&v4);
  Espresso::SerDes::params_io<Espresso::softmax_params>(v4, a2, 1);
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 240))(*a1, a1 + 2, &v4);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 16))(&v4);
  Espresso::SerDes::params_io<Espresso::inner_product_uniforms>(v4, a2, 1);
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 240))(*a1, a1 + 2, &v4);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 16))(&v4);
  Espresso::SerDes::params_io<Espresso::layer_shape>(v4, a2, 1);
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 240))(*a1, a1 + 2, &v4);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 16))(&v4);
  Espresso::SerDes::params_io<Espresso::concat_params>(v4, a2, 1);
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 240))(*a1, a1 + 2, &v4);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 16))(&v4);
  Espresso::SerDes::params_io<Espresso::split_params>(v4, a2, 1);
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 240))(*a1, a1 + 2, &v4);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 16))(&v4);
  Espresso::SerDes::params_io<Espresso::upsample_kernel_params>(v4, a2, 1);
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 240))(*a1, a1 + 2, &v4);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 16))(&v4);
  Espresso::SerDes::params_io<Espresso::elementwise_params>(v4, a2, 1);
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 240))(*a1, a1 + 2, &v4);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 16))(&v4);
  Espresso::SerDes::params_io<Espresso::activation_params>(v4, a2, 1);
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 240))(*a1, a1 + 2, &v4);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 16))(&v4);
  Espresso::SerDes::params_io<Espresso::axpby_params>(v4, a2, 1);
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 240))(*a1, a1 + 2, &v4);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 16))(&v4);
  Espresso::SerDes::params_io<Espresso::l2_norm_params>(v4, a2, 1);
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 240))(*a1, a1 + 2, &v4);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 16))(&v4);
  Espresso::SerDes::params_io<Espresso::bias_params>(v4, a2, 1);
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 240))(*a1, a1 + 2, &v4);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 16))(&v4);
  Espresso::SerDes::params_io<Espresso::batchnorm_params>(v4, a2, 1);
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 240))(*a1, a1 + 2, &v4);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 16))(&v4);
  Espresso::SerDes::params_io<Espresso::dropout_params>(v4, a2, 1);
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 240))(*a1, a1 + 2, &v4);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 16))(&v4);
  Espresso::SerDes::params_io<Espresso::reshape_params>(v4, a2, 1);
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 240))(*a1, a1 + 2, &v4);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 16))(&v4);
  Espresso::SerDes::params_io<Espresso::reshape_like_params>(v4, a2, 1);
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 240))(*a1, a1 + 2, &v4);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 16))(&v4);
  Espresso::SerDes::params_io<Espresso::vimage2espresso_param>(v4, a2, 1);
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 240))(*a1, a1 + 2, &v4);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 16))(&v4);
  Espresso::SerDes::params_io<Espresso::blob_numerical_properties>(v4, a2, 1);
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 240))(*a1, a1 + 2, &v4);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 16))(&v4);
  Espresso::SerDes::params_io<Espresso::reduce_params_t>(v4, a2, 1);
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 240))(*a1, a1 + 2, &v4);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 16))(&v4);
  Espresso::SerDes::params_io<Espresso::general_padding_params>(v4, a2, 1);
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 240))(*a1, a1 + 2, &v4);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 16))(&v4);
  Espresso::SerDes::params_io<Espresso::prediction_smoothing_params>(v4, a2, 1);
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 240))(*a1, a1 + 2, &v4);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 16))(&v4);
  Espresso::SerDes::params_io<Espresso::space_to_batch_params_t>(v4, a2, 1);
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 240))(*a1, a1 + 2, &v4);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 16))(&v4);
  Espresso::SerDes::params_io<Espresso::broadcast_params_t>(v4, a2, 1);
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 240))(*a1, a1 + 2, &v4);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 16))(&v4);
  Espresso::SerDes::params_io<Espresso::lambda_params_t>(v4, a2, 1);
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 240))(*a1, a1 + 2, &v4);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 16))(&v4);
  Espresso::SerDes::params_io<Espresso::patch_extractor_params_t>(v4, a2, 1);
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 240))(*a1, a1 + 2, &v4);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 16))(&v4);
  Espresso::SerDes::params_io<Espresso::crop_and_resize_params_t>(v4, a2, 1);
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 240))(*a1, a1 + 2, &v4);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 16))(&v4);
  Espresso::SerDes::params_io<Espresso::cf_branch_params_t>(v4, a2, 1);
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 240))(*a1, a1 + 2, &v4);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 16))(&v4);
  Espresso::SerDes::params_io<Espresso::dynamic_dequantize_params_t>(v4, a2, 1);
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 240))(*a1, a1 + 2, &v4);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 16))(&v4);
  Espresso::SerDes::params_io<Espresso::spatial_transformer_params_t>(v4, a2, 1);
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 240))(*a1, a1 + 2, &v4);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 16))(&v4);
  Espresso::SerDes::params_io<Espresso::cf_call_params_t>(v4, a2, 1);
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 240))(*a1, a1 + 2, &v4);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 16))(&v4);
  Espresso::SerDes::params_io<Espresso::topk_params_t>(v4, a2, 1);
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 240))(*a1, a1 + 2, &v4);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 16))(&v4);
  Espresso::SerDes::params_io<Espresso::general_concat_params_t>(v4, a2, 1);
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 240))(*a1, a1 + 2, &v4);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 16))(&v4);
  Espresso::SerDes::params_io<Espresso::alloc_params_t>(v4, a2, 1);
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 240))(*a1, a1 + 2, &v4);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 16))(&v4);
  Espresso::SerDes::params_io<Espresso::load_global_params_t>(v4, a2, 1);
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 240))(*a1, a1 + 2, &v4);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 16))(&v4);
  Espresso::SerDes::params_io<Espresso::store_global_params_t>(v4, a2, 1);
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 240))(*a1, a1 + 2, &v4);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 16))(&v4);
  Espresso::SerDes::params_io<Espresso::scatter_params_t>(v4, a2, 1);
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 240))(*a1, a1 + 2, &v4);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 16))(&v4);
  Espresso::SerDes::params_io<Espresso::load_random_params_t>(v4, a2, 1);
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 240))(*a1, a1 + 2, &v4);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 16))(&v4);
  Espresso::SerDes::params_io<Espresso::matrix_band_part_params_t>(v4, a2, 1);
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 240))(*a1, a1 + 2, &v4);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 16))(&v4);
  Espresso::SerDes::params_io<Espresso::fill_params_t>(v4, a2, 1);
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 240))(*a1, a1 + 2, &v4);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 16))(&v4);
  Espresso::SerDes::params_io<Espresso::tensor_zero_pad_params_t>(v4, a2, 1);
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 240))(*a1, a1 + 2, &v4);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 16))(&v4);
  Espresso::SerDes::params_io<Espresso::squeeze_params_t>(v4, a2, 1);
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 240))(*a1, a1 + 2, &v4);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 16))(&v4);
  Espresso::SerDes::params_io<Espresso::array_gather_params_t>(v4, a2, 1);
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 240))(*a1, a1 + 2, &v4);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 16))(&v4);
  Espresso::SerDes::params_io<Espresso::instancenorm_1d_params_t>(v4, a2, 1);
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 240))(*a1, a1 + 2, &v4);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 16))(&v4);
  Espresso::SerDes::params_io<Espresso::gumbel_max_params_t>(v4, a2, 1);
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 240))(*a1, a1 + 2, &v4);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 16))(&v4);
  Espresso::SerDes::params_io<Espresso::builtin_params_t>(v4, a2, 1);
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 240))(*a1, a1 + 2, &v4);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 16))(&v4);
  Espresso::SerDes::params_io<Espresso::general_slice_params_t>(v4, a2, 1);
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 240))(*a1, a1 + 2, &v4);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 16))(&v4);
  Espresso::SerDes::params_io<Espresso::cross_entropy_params_t>(v4, a2, 1);
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 240))(*a1, a1 + 2, &v4);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 16))(&v4);
  Espresso::SerDes::params_io<Espresso::non_maximum_suppression_params_t>(v4, a2, 1);
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 240))(*a1, a1 + 2, &v4);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 16))(&v4);
  Espresso::SerDes::params_io<Espresso::sgd_params_t>(v4, a2, 1);
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 240))(*a1, a1 + 2, &v4);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 16))(&v4);
  Espresso::SerDes::params_io<Espresso::gather_nd_params_t>(v4, a2, 1);
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 240))(*a1, a1 + 2, &v4);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 16))(&v4);
  Espresso::SerDes::params_io<Espresso::adam_params_t>(v4, a2, 1);
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 240))(*a1, a1 + 2, &v4);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 16))(&v4);
  Espresso::SerDes::params_io<Espresso::scatter_nd_params_t>(v4, a2, 1);
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 240))(*a1, a1 + 2, &v4);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 16))(&v4);
  Espresso::SerDes::params_io<Espresso::one_hot_params_t>(v4, a2, 1);
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 240))(*a1, a1 + 2, &v4);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
}

{
  Espresso::SerDes::params_io<Espresso::dev_op_params_t>(a1, a2, 1);
}

{
  void *v4;
  std::__shared_weak_count *v5;

  (*(void (**)(void **__return_ptr))(*(void *)*a1 + 16))(&v4);
  Espresso::SerDes::params_io<Espresso::dev_op_params_t>(v4, a2, 1);
  (*(void (**)(void, void *, void **))(*(void *)*a1 + 240))(*a1, a1 + 2, &v4);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 16))(&v4);
  Espresso::SerDes::params_io<Espresso::wg_transform_params>(v4, a2, 1);
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 240))(*a1, a1 + 2, &v4);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 16))(&v4);
  Espresso::SerDes::params_io<Espresso::grid_sampling_params_t>(v4, a2, 1);
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 240))(*a1, a1 + 2, &v4);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 16))(&v4);
  Espresso::SerDes::params_io<Espresso::resample_params_t>(v4, a2, 1);
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 240))(*a1, a1 + 2, &v4);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 16))(&v4);
  Espresso::SerDes::params_io<Espresso::self_attention_params_t>(v4, a2, 1);
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 240))(*a1, a1 + 2, &v4);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 16))(&v4);
  Espresso::SerDes::params_io<Espresso::loopkit_params_t>(v4, a2, 1);
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 240))(*a1, a1 + 2, &v4);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 16))(&v4);
  Espresso::SerDes::params_io<Espresso::argsort_params_t>(v4, a2, 1);
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 240))(*a1, a1 + 2, &v4);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 16))(&v4);
  Espresso::SerDes::params_io<Espresso::pool3d_params_t>(v4, a2, 1);
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 240))(*a1, a1 + 2, &v4);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 16))(&v4);
  Espresso::SerDes::params_io<Espresso::conv3d_params_t>(v4, a2, 1);
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 240))(*a1, a1 + 2, &v4);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 16))(&v4);
  Espresso::SerDes::params_io<Espresso::static_quantize_params_t>(v4, a2, 1);
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 240))(*a1, a1 + 2, &v4);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 16))(&v4);
  Espresso::SerDes::params_io<Espresso::static_dequantize_params_t>(v4, a2, 1);
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 240))(*a1, a1 + 2, &v4);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 16))(&v4);
  Espresso::SerDes::params_io<Espresso::general_slice_update_params_t>(v4, a2, 1);
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 240))(*a1, a1 + 2, &v4);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 16))(&v4);
  Espresso::SerDes::params_io<Espresso::einsum_params_t>(v4, a2, 1);
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 240))(*a1, a1 + 2, &v4);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 16))(&v4);
  Espresso::SerDes::params_io<Espresso::foreign_network_storage_blob_t>(v4, a2, 1);
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 240))(*a1, a1 + 2, &v4);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 16))(&v4);
  Espresso::SerDes::params_io<Espresso::foreign_network_weight_file_t>(v4, a2, 1);
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 240))(*a1, a1 + 2, &v4);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 16))(&v4);
  Espresso::SerDes::params_io<Espresso::tunneled_ane_op_params_t>(v4, a2, 1);
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 240))(*a1, a1 + 2, &v4);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 16))(&v4);
  Espresso::SerDes::params_io<Espresso::tunneled_unit_bottom_layout_t>(v4, a2, 1);
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 240))(*a1, a1 + 2, &v4);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 16))(&v4);
  Espresso::SerDes::params_io<Espresso::tunneled_unit_top_layout_t>(v4, a2, 1);
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 240))(*a1, a1 + 2, &v4);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 16))(&v4);
  Espresso::SerDes::params_io<Espresso::tunneled_ane_unit_params_t>(v4, a2, 1);
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 240))(*a1, a1 + 2, &v4);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 16))(&v4);
  Espresso::SerDes::params_io<Espresso::brick_params>(v4, a2, 1);
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 240))(*a1, a1 + 2, &v4);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
}

void sub_192AEDB70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::operator<<(void *a1, uint64_t *a2)
{
  uint64_t v16 = 0;
  char v17 = 0;
  unint64_t v18 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v16, 0x6F96F96F96F96F97 * ((a2[1] - *a2) >> 2));
  uint64_t v4 = *a2;
  for (uint64_t i = a2[1]; v4 != i; v4 += 156)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 16))(&v15);
    Espresso::SerDes::params_io<Espresso::rnn_arch_params>(v15, v4, 1);
    unint64_t v6 = v17;
    if ((unint64_t)v17 >= v18)
    {
      uint64_t v7 = ((uint64_t)v17 - v16) >> 4;
      unint64_t v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = v18 - v16;
      if ((uint64_t)(v18 - v16) >> 3 > v8) {
        unint64_t v8 = v9 >> 3;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v8;
      }
      v19[4] = (void **)&v18;
      uint64_t v11 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
      uint64_t v12 = &v11[2 * v7];
      v19[0] = v11;
      v19[1] = v12;
      v19[3] = &v11[2 * v13];
      *(_OWORD *)uint64_t v12 = v15;
      long long v15 = 0uLL;
      v19[2] = v12 + 2;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v16, v19);
      int v14 = v17;
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v19);
      char v17 = v14;
      if (*((void *)&v15 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v15 + 1));
      }
    }
    else
    {
      _OWORD *v17 = v15;
      char v17 = v6 + 1;
    }
  }
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 248))(*a1, a1 + 2, &v16);
  v19[0] = (void **)&v16;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v19);
}

{
  uint64_t i;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void **v11;
  void **v12;
  uint64_t v13;
  _OWORD *v14;
  long long v15;
  uint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  void **v19[5];

  uint64_t v16 = 0;
  char v17 = 0;
  unint64_t v18 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v16, a2[1] - *a2);
  uint64_t v5 = *a2;
  for (uint64_t i = a2[1]; v5 != i; ++v5)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 16))(&v15);
    unint64_t v6 = v17;
    if ((unint64_t)v17 >= v18)
    {
      uint64_t v7 = ((uint64_t)v17 - v16) >> 4;
      unint64_t v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = v18 - v16;
      if ((uint64_t)(v18 - v16) >> 3 > v8) {
        unint64_t v8 = v9 >> 3;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v8;
      }
      v19[4] = (void **)&v18;
      uint64_t v11 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
      uint64_t v12 = &v11[2 * v7];
      v19[0] = v11;
      v19[1] = v12;
      v19[3] = &v11[2 * v13];
      *(_OWORD *)uint64_t v12 = v15;
      long long v15 = 0uLL;
      v19[2] = v12 + 2;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v16, v19);
      int v14 = v17;
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v19);
      char v17 = v14;
      if (*((void *)&v15 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v15 + 1));
      }
    }
    else
    {
      _OWORD *v17 = v15;
      char v17 = v6 + 1;
    }
  }
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 248))(*a1, a1 + 2, &v16);
  v19[0] = (void **)&v16;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v19);
}

{
  uint64_t i;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void **v11;
  void **v12;
  uint64_t v13;
  _OWORD *v14;
  long long v15;
  uint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  void **v19[5];

  uint64_t v16 = 0;
  char v17 = 0;
  unint64_t v18 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v16, a2[1] - *a2);
  uint64_t v5 = *a2;
  for (uint64_t i = a2[1]; v5 != i; ++v5)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 16))(&v15);
    unint64_t v6 = v17;
    if ((unint64_t)v17 >= v18)
    {
      uint64_t v7 = ((uint64_t)v17 - v16) >> 4;
      unint64_t v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = v18 - v16;
      if ((uint64_t)(v18 - v16) >> 3 > v8) {
        unint64_t v8 = v9 >> 3;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v8;
      }
      v19[4] = (void **)&v18;
      uint64_t v11 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
      uint64_t v12 = &v11[2 * v7];
      v19[0] = v11;
      v19[1] = v12;
      v19[3] = &v11[2 * v13];
      *(_OWORD *)uint64_t v12 = v15;
      long long v15 = 0uLL;
      v19[2] = v12 + 2;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v16, v19);
      int v14 = v17;
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v19);
      char v17 = v14;
      if (*((void *)&v15 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v15 + 1));
      }
    }
    else
    {
      _OWORD *v17 = v15;
      char v17 = v6 + 1;
    }
  }
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 248))(*a1, a1 + 2, &v16);
  v19[0] = (void **)&v16;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v19);
}

{
  uint64_t v4;
  uint64_t i;
  _OWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void **v11;
  void **v12;
  uint64_t v13;
  _OWORD *v14;
  long long v15;
  uint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  void **v19[5];

  uint64_t v16 = 0;
  char v17 = 0;
  unint64_t v18 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v16, 0xCF3CF3CF3CF3CF3DLL * ((a2[1] - *a2) >> 3));
  uint64_t v4 = *a2;
  for (uint64_t i = a2[1]; v4 != i; v4 += 168)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 16))(&v15);
    Espresso::SerDes::params_io<Espresso::convolution_uniforms>(v15, v4, 1);
    unint64_t v6 = v17;
    if ((unint64_t)v17 >= v18)
    {
      uint64_t v7 = ((uint64_t)v17 - v16) >> 4;
      unint64_t v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = v18 - v16;
      if ((uint64_t)(v18 - v16) >> 3 > v8) {
        unint64_t v8 = v9 >> 3;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v8;
      }
      v19[4] = (void **)&v18;
      uint64_t v11 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
      uint64_t v12 = &v11[2 * v7];
      v19[0] = v11;
      v19[1] = v12;
      v19[3] = &v11[2 * v13];
      *(_OWORD *)uint64_t v12 = v15;
      long long v15 = 0uLL;
      v19[2] = v12 + 2;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v16, v19);
      int v14 = v17;
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v19);
      char v17 = v14;
      if (*((void *)&v15 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v15 + 1));
      }
    }
    else
    {
      _OWORD *v17 = v15;
      char v17 = v6 + 1;
    }
  }
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 248))(*a1, a1 + 2, &v16);
  v19[0] = (void **)&v16;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v19);
}

{
  uint64_t v4;
  uint64_t i;
  _OWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void **v11;
  void **v12;
  uint64_t v13;
  _OWORD *v14;
  long long v15;
  uint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  void **v19[5];

  uint64_t v16 = 0;
  char v17 = 0;
  unint64_t v18 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v16, 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 4));
  uint64_t v4 = *a2;
  for (uint64_t i = a2[1]; v4 != i; v4 += 112)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 16))(&v15);
    Espresso::SerDes::params_io<Espresso::pool_params>(v15, v4, 1);
    unint64_t v6 = v17;
    if ((unint64_t)v17 >= v18)
    {
      uint64_t v7 = ((uint64_t)v17 - v16) >> 4;
      unint64_t v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = v18 - v16;
      if ((uint64_t)(v18 - v16) >> 3 > v8) {
        unint64_t v8 = v9 >> 3;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v8;
      }
      v19[4] = (void **)&v18;
      uint64_t v11 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
      uint64_t v12 = &v11[2 * v7];
      v19[0] = v11;
      v19[1] = v12;
      v19[3] = &v11[2 * v13];
      *(_OWORD *)uint64_t v12 = v15;
      long long v15 = 0uLL;
      v19[2] = v12 + 2;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v16, v19);
      int v14 = v17;
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v19);
      char v17 = v14;
      if (*((void *)&v15 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v15 + 1));
      }
    }
    else
    {
      _OWORD *v17 = v15;
      char v17 = v6 + 1;
    }
  }
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 248))(*a1, a1 + 2, &v16);
  v19[0] = (void **)&v16;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v19);
}

{
  uint64_t v4;
  uint64_t i;
  _OWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void **v11;
  void **v12;
  uint64_t v13;
  _OWORD *v14;
  long long v15;
  uint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  void **v19[5];

  uint64_t v16 = 0;
  char v17 = 0;
  unint64_t v18 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v16, 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 2));
  uint64_t v4 = *a2;
  for (uint64_t i = a2[1]; v4 != i; v4 += 28)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 16))(&v15);
    Espresso::SerDes::params_io<Espresso::lrn_params>(v15, v4, 1);
    unint64_t v6 = v17;
    if ((unint64_t)v17 >= v18)
    {
      uint64_t v7 = ((uint64_t)v17 - v16) >> 4;
      unint64_t v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = v18 - v16;
      if ((uint64_t)(v18 - v16) >> 3 > v8) {
        unint64_t v8 = v9 >> 3;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v8;
      }
      v19[4] = (void **)&v18;
      uint64_t v11 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
      uint64_t v12 = &v11[2 * v7];
      v19[0] = v11;
      v19[1] = v12;
      v19[3] = &v11[2 * v13];
      *(_OWORD *)uint64_t v12 = v15;
      long long v15 = 0uLL;
      v19[2] = v12 + 2;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v16, v19);
      int v14 = v17;
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v19);
      char v17 = v14;
      if (*((void *)&v15 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v15 + 1));
      }
    }
    else
    {
      _OWORD *v17 = v15;
      char v17 = v6 + 1;
    }
  }
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 248))(*a1, a1 + 2, &v16);
  v19[0] = (void **)&v16;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v19);
}

{
  uint64_t v4;
  uint64_t i;
  _OWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void **v11;
  void **v12;
  uint64_t v13;
  _OWORD *v14;
  long long v15;
  uint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  void **v19[5];

  uint64_t v16 = 0;
  char v17 = 0;
  unint64_t v18 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v16, 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 2));
  uint64_t v4 = *a2;
  for (uint64_t i = a2[1]; v4 != i; v4 += 28)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 16))(&v15);
    Espresso::SerDes::params_io<Espresso::softmax_params>(v15, v4, 1);
    unint64_t v6 = v17;
    if ((unint64_t)v17 >= v18)
    {
      uint64_t v7 = ((uint64_t)v17 - v16) >> 4;
      unint64_t v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = v18 - v16;
      if ((uint64_t)(v18 - v16) >> 3 > v8) {
        unint64_t v8 = v9 >> 3;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v8;
      }
      v19[4] = (void **)&v18;
      uint64_t v11 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
      uint64_t v12 = &v11[2 * v7];
      v19[0] = v11;
      v19[1] = v12;
      v19[3] = &v11[2 * v13];
      *(_OWORD *)uint64_t v12 = v15;
      long long v15 = 0uLL;
      v19[2] = v12 + 2;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v16, v19);
      int v14 = v17;
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v19);
      char v17 = v14;
      if (*((void *)&v15 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v15 + 1));
      }
    }
    else
    {
      _OWORD *v17 = v15;
      char v17 = v6 + 1;
    }
  }
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 248))(*a1, a1 + 2, &v16);
  v19[0] = (void **)&v16;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v19);
}

{
  uint64_t v4;
  uint64_t i;
  _OWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void **v11;
  void **v12;
  uint64_t v13;
  _OWORD *v14;
  long long v15;
  uint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  void **v19[5];

  uint64_t v16 = 0;
  char v17 = 0;
  unint64_t v18 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v16, 0xF83E0F83E0F83E1 * ((a2[1] - *a2) >> 2));
  uint64_t v4 = *a2;
  for (uint64_t i = a2[1]; v4 != i; v4 += 132)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 16))(&v15);
    Espresso::SerDes::params_io<Espresso::inner_product_uniforms>(v15, v4, 1);
    unint64_t v6 = v17;
    if ((unint64_t)v17 >= v18)
    {
      uint64_t v7 = ((uint64_t)v17 - v16) >> 4;
      unint64_t v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = v18 - v16;
      if ((uint64_t)(v18 - v16) >> 3 > v8) {
        unint64_t v8 = v9 >> 3;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v8;
      }
      v19[4] = (void **)&v18;
      uint64_t v11 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
      uint64_t v12 = &v11[2 * v7];
      v19[0] = v11;
      v19[1] = v12;
      v19[3] = &v11[2 * v13];
      *(_OWORD *)uint64_t v12 = v15;
      long long v15 = 0uLL;
      v19[2] = v12 + 2;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v16, v19);
      int v14 = v17;
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v19);
      char v17 = v14;
      if (*((void *)&v15 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v15 + 1));
      }
    }
    else
    {
      _OWORD *v17 = v15;
      char v17 = v6 + 1;
    }
  }
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 248))(*a1, a1 + 2, &v16);
  v19[0] = (void **)&v16;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v19);
}

{
  uint64_t v4;
  uint64_t i;
  _OWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void **v11;
  void **v12;
  uint64_t v13;
  _OWORD *v14;
  long long v15;
  uint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  void **v19[5];

  uint64_t v16 = 0;
  char v17 = 0;
  unint64_t v18 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v16, (a2[1] - *a2) >> 6);
  uint64_t v4 = *a2;
  for (uint64_t i = a2[1]; v4 != i; v4 += 64)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 16))(&v15);
    Espresso::SerDes::params_io<Espresso::layer_shape>(v15, v4, 1);
    unint64_t v6 = v17;
    if ((unint64_t)v17 >= v18)
    {
      uint64_t v7 = ((uint64_t)v17 - v16) >> 4;
      unint64_t v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = v18 - v16;
      if ((uint64_t)(v18 - v16) >> 3 > v8) {
        unint64_t v8 = v9 >> 3;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v8;
      }
      v19[4] = (void **)&v18;
      uint64_t v11 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
      uint64_t v12 = &v11[2 * v7];
      v19[0] = v11;
      v19[1] = v12;
      v19[3] = &v11[2 * v13];
      *(_OWORD *)uint64_t v12 = v15;
      long long v15 = 0uLL;
      v19[2] = v12 + 2;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v16, v19);
      int v14 = v17;
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v19);
      char v17 = v14;
      if (*((void *)&v15 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v15 + 1));
      }
    }
    else
    {
      _OWORD *v17 = v15;
      char v17 = v6 + 1;
    }
  }
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 248))(*a1, a1 + 2, &v16);
  v19[0] = (void **)&v16;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v19);
}

{
  uint64_t v4;
  uint64_t i;
  _OWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void **v11;
  void **v12;
  uint64_t v13;
  _OWORD *v14;
  long long v15;
  uint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  void **v19[5];

  uint64_t v16 = 0;
  char v17 = 0;
  unint64_t v18 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v16, (a2[1] - *a2) >> 6);
  uint64_t v4 = *a2;
  for (uint64_t i = a2[1]; v4 != i; v4 += 64)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 16))(&v15);
    Espresso::SerDes::params_io<Espresso::concat_params>(v15, v4, 1);
    unint64_t v6 = v17;
    if ((unint64_t)v17 >= v18)
    {
      uint64_t v7 = ((uint64_t)v17 - v16) >> 4;
      unint64_t v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = v18 - v16;
      if ((uint64_t)(v18 - v16) >> 3 > v8) {
        unint64_t v8 = v9 >> 3;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v8;
      }
      v19[4] = (void **)&v18;
      uint64_t v11 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
      uint64_t v12 = &v11[2 * v7];
      v19[0] = v11;
      v19[1] = v12;
      v19[3] = &v11[2 * v13];
      *(_OWORD *)uint64_t v12 = v15;
      long long v15 = 0uLL;
      v19[2] = v12 + 2;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v16, v19);
      int v14 = v17;
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v19);
      char v17 = v14;
      if (*((void *)&v15 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v15 + 1));
      }
    }
    else
    {
      _OWORD *v17 = v15;
      char v17 = v6 + 1;
    }
  }
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 248))(*a1, a1 + 2, &v16);
  v19[0] = (void **)&v16;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v19);
}

{
  uint64_t v4;
  uint64_t i;
  _OWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void **v11;
  void **v12;
  uint64_t v13;
  _OWORD *v14;
  long long v15;
  uint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  void **v19[5];

  uint64_t v16 = 0;
  char v17 = 0;
  unint64_t v18 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v16, 0x4EC4EC4EC4EC4EC5 * ((a2[1] - *a2) >> 2));
  uint64_t v4 = *a2;
  for (uint64_t i = a2[1]; v4 != i; v4 += 52)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 16))(&v15);
    Espresso::SerDes::params_io<Espresso::split_params>(v15, v4, 1);
    unint64_t v6 = v17;
    if ((unint64_t)v17 >= v18)
    {
      uint64_t v7 = ((uint64_t)v17 - v16) >> 4;
      unint64_t v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = v18 - v16;
      if ((uint64_t)(v18 - v16) >> 3 > v8) {
        unint64_t v8 = v9 >> 3;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v8;
      }
      v19[4] = (void **)&v18;
      uint64_t v11 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
      uint64_t v12 = &v11[2 * v7];
      v19[0] = v11;
      v19[1] = v12;
      v19[3] = &v11[2 * v13];
      *(_OWORD *)uint64_t v12 = v15;
      long long v15 = 0uLL;
      v19[2] = v12 + 2;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v16, v19);
      int v14 = v17;
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v19);
      char v17 = v14;
      if (*((void *)&v15 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v15 + 1));
      }
    }
    else
    {
      _OWORD *v17 = v15;
      char v17 = v6 + 1;
    }
  }
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 248))(*a1, a1 + 2, &v16);
  v19[0] = (void **)&v16;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v19);
}

{
  uint64_t v4;
  uint64_t i;
  _OWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void **v11;
  void **v12;
  uint64_t v13;
  _OWORD *v14;
  long long v15;
  uint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  void **v19[5];

  uint64_t v16 = 0;
  char v17 = 0;
  unint64_t v18 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v16, 0x8E38E38E38E38E39 * ((a2[1] - *a2) >> 3));
  uint64_t v4 = *a2;
  for (uint64_t i = a2[1]; v4 != i; v4 += 72)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 16))(&v15);
    Espresso::SerDes::params_io<Espresso::upsample_kernel_params>(v15, v4, 1);
    unint64_t v6 = v17;
    if ((unint64_t)v17 >= v18)
    {
      uint64_t v7 = ((uint64_t)v17 - v16) >> 4;
      unint64_t v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = v18 - v16;
      if ((uint64_t)(v18 - v16) >> 3 > v8) {
        unint64_t v8 = v9 >> 3;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v8;
      }
      v19[4] = (void **)&v18;
      uint64_t v11 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
      uint64_t v12 = &v11[2 * v7];
      v19[0] = v11;
      v19[1] = v12;
      v19[3] = &v11[2 * v13];
      *(_OWORD *)uint64_t v12 = v15;
      long long v15 = 0uLL;
      v19[2] = v12 + 2;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v16, v19);
      int v14 = v17;
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v19);
      char v17 = v14;
      if (*((void *)&v15 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v15 + 1));
      }
    }
    else
    {
      _OWORD *v17 = v15;
      char v17 = v6 + 1;
    }
  }
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 248))(*a1, a1 + 2, &v16);
  v19[0] = (void **)&v16;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v19);
}

{
  uint64_t v4;
  uint64_t i;
  _OWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void **v11;
  void **v12;
  uint64_t v13;
  _OWORD *v14;
  long long v15;
  uint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  void **v19[5];

  uint64_t v16 = 0;
  char v17 = 0;
  unint64_t v18 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v16, 0x4EC4EC4EC4EC4EC5 * ((a2[1] - *a2) >> 2));
  uint64_t v4 = *a2;
  for (uint64_t i = a2[1]; v4 != i; v4 += 52)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 16))(&v15);
    Espresso::SerDes::params_io<Espresso::elementwise_params>(v15, v4, 1);
    unint64_t v6 = v17;
    if ((unint64_t)v17 >= v18)
    {
      uint64_t v7 = ((uint64_t)v17 - v16) >> 4;
      unint64_t v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = v18 - v16;
      if ((uint64_t)(v18 - v16) >> 3 > v8) {
        unint64_t v8 = v9 >> 3;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v8;
      }
      v19[4] = (void **)&v18;
      uint64_t v11 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
      uint64_t v12 = &v11[2 * v7];
      v19[0] = v11;
      v19[1] = v12;
      v19[3] = &v11[2 * v13];
      *(_OWORD *)uint64_t v12 = v15;
      long long v15 = 0uLL;
      v19[2] = v12 + 2;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v16, v19);
      int v14 = v17;
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v19);
      char v17 = v14;
      if (*((void *)&v15 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v15 + 1));
      }
    }
    else
    {
      _OWORD *v17 = v15;
      char v17 = v6 + 1;
    }
  }
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 248))(*a1, a1 + 2, &v16);
  v19[0] = (void **)&v16;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v19);
}

{
  uint64_t v4;
  uint64_t i;
  _OWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void **v11;
  void **v12;
  uint64_t v13;
  _OWORD *v14;
  long long v15;
  uint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  void **v19[5];

  uint64_t v16 = 0;
  char v17 = 0;
  unint64_t v18 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v16, 0x8E38E38E38E38E39 * ((a2[1] - *a2) >> 2));
  uint64_t v4 = *a2;
  for (uint64_t i = a2[1]; v4 != i; v4 += 36)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 16))(&v15);
    Espresso::SerDes::params_io<Espresso::activation_params>(v15, v4, 1);
    unint64_t v6 = v17;
    if ((unint64_t)v17 >= v18)
    {
      uint64_t v7 = ((uint64_t)v17 - v16) >> 4;
      unint64_t v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = v18 - v16;
      if ((uint64_t)(v18 - v16) >> 3 > v8) {
        unint64_t v8 = v9 >> 3;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v8;
      }
      v19[4] = (void **)&v18;
      uint64_t v11 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
      uint64_t v12 = &v11[2 * v7];
      v19[0] = v11;
      v19[1] = v12;
      v19[3] = &v11[2 * v13];
      *(_OWORD *)uint64_t v12 = v15;
      long long v15 = 0uLL;
      v19[2] = v12 + 2;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v16, v19);
      int v14 = v17;
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v19);
      char v17 = v14;
      if (*((void *)&v15 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v15 + 1));
      }
    }
    else
    {
      _OWORD *v17 = v15;
      char v17 = v6 + 1;
    }
  }
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 248))(*a1, a1 + 2, &v16);
  v19[0] = (void **)&v16;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v19);
}

{
  uint64_t v4;
  uint64_t i;
  _OWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void **v11;
  void **v12;
  uint64_t v13;
  _OWORD *v14;
  long long v15;
  uint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  void **v19[5];

  uint64_t v16 = 0;
  char v17 = 0;
  unint64_t v18 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v16, 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 3));
  uint64_t v4 = *a2;
  for (uint64_t i = a2[1]; v4 != i; v4 += 56)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 16))(&v15);
    Espresso::SerDes::params_io<Espresso::axpby_params>(v15, v4, 1);
    unint64_t v6 = v17;
    if ((unint64_t)v17 >= v18)
    {
      uint64_t v7 = ((uint64_t)v17 - v16) >> 4;
      unint64_t v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = v18 - v16;
      if ((uint64_t)(v18 - v16) >> 3 > v8) {
        unint64_t v8 = v9 >> 3;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v8;
      }
      v19[4] = (void **)&v18;
      uint64_t v11 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
      uint64_t v12 = &v11[2 * v7];
      v19[0] = v11;
      v19[1] = v12;
      v19[3] = &v11[2 * v13];
      *(_OWORD *)uint64_t v12 = v15;
      long long v15 = 0uLL;
      v19[2] = v12 + 2;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v16, v19);
      int v14 = v17;
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v19);
      char v17 = v14;
      if (*((void *)&v15 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v15 + 1));
      }
    }
    else
    {
      _OWORD *v17 = v15;
      char v17 = v6 + 1;
    }
  }
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 248))(*a1, a1 + 2, &v16);
  v19[0] = (void **)&v16;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v19);
}

{
  uint64_t v4;
  uint64_t i;
  _OWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void **v11;
  void **v12;
  uint64_t v13;
  _OWORD *v14;
  long long v15;
  uint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  void **v19[5];

  uint64_t v16 = 0;
  char v17 = 0;
  unint64_t v18 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v16, 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 2));
  uint64_t v4 = *a2;
  for (uint64_t i = a2[1]; v4 != i; v4 += 12)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 16))(&v15);
    Espresso::SerDes::params_io<Espresso::l2_norm_params>(v15, v4, 1);
    unint64_t v6 = v17;
    if ((unint64_t)v17 >= v18)
    {
      uint64_t v7 = ((uint64_t)v17 - v16) >> 4;
      unint64_t v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = v18 - v16;
      if ((uint64_t)(v18 - v16) >> 3 > v8) {
        unint64_t v8 = v9 >> 3;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v8;
      }
      v19[4] = (void **)&v18;
      uint64_t v11 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
      uint64_t v12 = &v11[2 * v7];
      v19[0] = v11;
      v19[1] = v12;
      v19[3] = &v11[2 * v13];
      *(_OWORD *)uint64_t v12 = v15;
      long long v15 = 0uLL;
      v19[2] = v12 + 2;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v16, v19);
      int v14 = v17;
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v19);
      char v17 = v14;
      if (*((void *)&v15 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v15 + 1));
      }
    }
    else
    {
      _OWORD *v17 = v15;
      char v17 = v6 + 1;
    }
  }
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 248))(*a1, a1 + 2, &v16);
  v19[0] = (void **)&v16;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v19);
}

{
  uint64_t v4;
  uint64_t i;
  _OWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void **v11;
  void **v12;
  uint64_t v13;
  _OWORD *v14;
  long long v15;
  uint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  void **v19[5];

  uint64_t v16 = 0;
  char v17 = 0;
  unint64_t v18 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v16, (a2[1] - *a2) >> 3);
  uint64_t v4 = *a2;
  for (uint64_t i = a2[1]; v4 != i; v4 += 8)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 16))(&v15);
    Espresso::SerDes::params_io<Espresso::bias_params>(v15, v4, 1);
    unint64_t v6 = v17;
    if ((unint64_t)v17 >= v18)
    {
      uint64_t v7 = ((uint64_t)v17 - v16) >> 4;
      unint64_t v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = v18 - v16;
      if ((uint64_t)(v18 - v16) >> 3 > v8) {
        unint64_t v8 = v9 >> 3;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v8;
      }
      v19[4] = (void **)&v18;
      uint64_t v11 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
      uint64_t v12 = &v11[2 * v7];
      v19[0] = v11;
      v19[1] = v12;
      v19[3] = &v11[2 * v13];
      *(_OWORD *)uint64_t v12 = v15;
      long long v15 = 0uLL;
      v19[2] = v12 + 2;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v16, v19);
      int v14 = v17;
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v19);
      char v17 = v14;
      if (*((void *)&v15 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v15 + 1));
      }
    }
    else
    {
      _OWORD *v17 = v15;
      char v17 = v6 + 1;
    }
  }
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 248))(*a1, a1 + 2, &v16);
  v19[0] = (void **)&v16;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v19);
}

{
  uint64_t v4;
  uint64_t i;
  _OWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void **v11;
  void **v12;
  uint64_t v13;
  _OWORD *v14;
  long long v15;
  uint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  void **v19[5];

  uint64_t v16 = 0;
  char v17 = 0;
  unint64_t v18 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v16, 0x86BCA1AF286BCA1BLL * ((a2[1] - *a2) >> 2));
  uint64_t v4 = *a2;
  for (uint64_t i = a2[1]; v4 != i; v4 += 76)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 16))(&v15);
    Espresso::SerDes::params_io<Espresso::batchnorm_params>(v15, v4, 1);
    unint64_t v6 = v17;
    if ((unint64_t)v17 >= v18)
    {
      uint64_t v7 = ((uint64_t)v17 - v16) >> 4;
      unint64_t v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = v18 - v16;
      if ((uint64_t)(v18 - v16) >> 3 > v8) {
        unint64_t v8 = v9 >> 3;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v8;
      }
      v19[4] = (void **)&v18;
      uint64_t v11 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
      uint64_t v12 = &v11[2 * v7];
      v19[0] = v11;
      v19[1] = v12;
      v19[3] = &v11[2 * v13];
      *(_OWORD *)uint64_t v12 = v15;
      long long v15 = 0uLL;
      v19[2] = v12 + 2;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v16, v19);
      int v14 = v17;
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v19);
      char v17 = v14;
      if (*((void *)&v15 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v15 + 1));
      }
    }
    else
    {
      _OWORD *v17 = v15;
      char v17 = v6 + 1;
    }
  }
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 248))(*a1, a1 + 2, &v16);
  v19[0] = (void **)&v16;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v19);
}

{
  uint64_t v4;
  uint64_t i;
  _OWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void **v11;
  void **v12;
  uint64_t v13;
  _OWORD *v14;
  long long v15;
  uint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  void **v19[5];

  uint64_t v16 = 0;
  char v17 = 0;
  unint64_t v18 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v16, (a2[1] - *a2) >> 4);
  uint64_t v4 = *a2;
  for (uint64_t i = a2[1]; v4 != i; v4 += 16)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 16))(&v15);
    Espresso::SerDes::params_io<Espresso::dropout_params>(v15, v4, 1);
    unint64_t v6 = v17;
    if ((unint64_t)v17 >= v18)
    {
      uint64_t v7 = ((uint64_t)v17 - v16) >> 4;
      unint64_t v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = v18 - v16;
      if ((uint64_t)(v18 - v16) >> 3 > v8) {
        unint64_t v8 = v9 >> 3;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v8;
      }
      v19[4] = (void **)&v18;
      uint64_t v11 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
      uint64_t v12 = &v11[2 * v7];
      v19[0] = v11;
      v19[1] = v12;
      v19[3] = &v11[2 * v13];
      *(_OWORD *)uint64_t v12 = v15;
      long long v15 = 0uLL;
      v19[2] = v12 + 2;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v16, v19);
      int v14 = v17;
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v19);
      char v17 = v14;
      if (*((void *)&v15 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v15 + 1));
      }
    }
    else
    {
      _OWORD *v17 = v15;
      char v17 = v6 + 1;
    }
  }
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 248))(*a1, a1 + 2, &v16);
  v19[0] = (void **)&v16;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v19);
}

{
  uint64_t v4;
  uint64_t i;
  _OWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void **v11;
  void **v12;
  uint64_t v13;
  _OWORD *v14;
  long long v15;
  uint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  void **v19[5];

  uint64_t v16 = 0;
  char v17 = 0;
  unint64_t v18 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v16, 0xCCCCCCCCCCCCCCCDLL * ((a2[1] - *a2) >> 3));
  uint64_t v4 = *a2;
  for (uint64_t i = a2[1]; v4 != i; v4 += 40)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 16))(&v15);
    Espresso::SerDes::params_io<Espresso::reshape_params>(v15, v4, 1);
    unint64_t v6 = v17;
    if ((unint64_t)v17 >= v18)
    {
      uint64_t v7 = ((uint64_t)v17 - v16) >> 4;
      unint64_t v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = v18 - v16;
      if ((uint64_t)(v18 - v16) >> 3 > v8) {
        unint64_t v8 = v9 >> 3;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v8;
      }
      v19[4] = (void **)&v18;
      uint64_t v11 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
      uint64_t v12 = &v11[2 * v7];
      v19[0] = v11;
      v19[1] = v12;
      v19[3] = &v11[2 * v13];
      *(_OWORD *)uint64_t v12 = v15;
      long long v15 = 0uLL;
      v19[2] = v12 + 2;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v16, v19);
      int v14 = v17;
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v19);
      char v17 = v14;
      if (*((void *)&v15 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v15 + 1));
      }
    }
    else
    {
      _OWORD *v17 = v15;
      char v17 = v6 + 1;
    }
  }
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 248))(*a1, a1 + 2, &v16);
  v19[0] = (void **)&v16;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v19);
}

{
  uint64_t v4;
  uint64_t i;
  _OWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void **v11;
  void **v12;
  uint64_t v13;
  _OWORD *v14;
  long long v15;
  uint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  void **v19[5];

  uint64_t v16 = 0;
  char v17 = 0;
  unint64_t v18 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v16, 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 4));
  uint64_t v4 = *a2;
  for (uint64_t i = a2[1]; v4 != i; v4 += 48)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 16))(&v15);
    Espresso::SerDes::params_io<Espresso::reshape_like_params>(v15, v4, 1);
    unint64_t v6 = v17;
    if ((unint64_t)v17 >= v18)
    {
      uint64_t v7 = ((uint64_t)v17 - v16) >> 4;
      unint64_t v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = v18 - v16;
      if ((uint64_t)(v18 - v16) >> 3 > v8) {
        unint64_t v8 = v9 >> 3;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v8;
      }
      v19[4] = (void **)&v18;
      uint64_t v11 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
      uint64_t v12 = &v11[2 * v7];
      v19[0] = v11;
      v19[1] = v12;
      v19[3] = &v11[2 * v13];
      *(_OWORD *)uint64_t v12 = v15;
      long long v15 = 0uLL;
      v19[2] = v12 + 2;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v16, v19);
      int v14 = v17;
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v19);
      char v17 = v14;
      if (*((void *)&v15 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v15 + 1));
      }
    }
    else
    {
      _OWORD *v17 = v15;
      char v17 = v6 + 1;
    }
  }
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 248))(*a1, a1 + 2, &v16);
  v19[0] = (void **)&v16;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v19);
}

{
  uint64_t v4;
  uint64_t i;
  _OWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void **v11;
  void **v12;
  uint64_t v13;
  _OWORD *v14;
  long long v15;
  uint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  void **v19[5];

  uint64_t v16 = 0;
  char v17 = 0;
  unint64_t v18 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v16, 0xCCCCCCCCCCCCCCCDLL * ((a2[1] - *a2) >> 4));
  uint64_t v4 = *a2;
  for (uint64_t i = a2[1]; v4 != i; v4 += 80)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 16))(&v15);
    Espresso::SerDes::params_io<Espresso::vimage2espresso_param>(v15, v4, 1);
    unint64_t v6 = v17;
    if ((unint64_t)v17 >= v18)
    {
      uint64_t v7 = ((uint64_t)v17 - v16) >> 4;
      unint64_t v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = v18 - v16;
      if ((uint64_t)(v18 - v16) >> 3 > v8) {
        unint64_t v8 = v9 >> 3;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v8;
      }
      v19[4] = (void **)&v18;
      uint64_t v11 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
      uint64_t v12 = &v11[2 * v7];
      v19[0] = v11;
      v19[1] = v12;
      v19[3] = &v11[2 * v13];
      *(_OWORD *)uint64_t v12 = v15;
      long long v15 = 0uLL;
      v19[2] = v12 + 2;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v16, v19);
      int v14 = v17;
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v19);
      char v17 = v14;
      if (*((void *)&v15 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v15 + 1));
      }
    }
    else
    {
      _OWORD *v17 = v15;
      char v17 = v6 + 1;
    }
  }
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 248))(*a1, a1 + 2, &v16);
  v19[0] = (void **)&v16;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v19);
}

{
  uint64_t v4;
  uint64_t i;
  _OWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void **v11;
  void **v12;
  uint64_t v13;
  _OWORD *v14;
  long long v15;
  uint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  void **v19[5];

  uint64_t v16 = 0;
  char v17 = 0;
  unint64_t v18 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v16, 0xCCCCCCCCCCCCCCCDLL * ((a2[1] - *a2) >> 3));
  uint64_t v4 = *a2;
  for (uint64_t i = a2[1]; v4 != i; v4 += 40)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 16))(&v15);
    Espresso::SerDes::params_io<Espresso::blob_numerical_properties>(v15, v4, 1);
    unint64_t v6 = v17;
    if ((unint64_t)v17 >= v18)
    {
      uint64_t v7 = ((uint64_t)v17 - v16) >> 4;
      unint64_t v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = v18 - v16;
      if ((uint64_t)(v18 - v16) >> 3 > v8) {
        unint64_t v8 = v9 >> 3;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v8;
      }
      v19[4] = (void **)&v18;
      uint64_t v11 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
      uint64_t v12 = &v11[2 * v7];
      v19[0] = v11;
      v19[1] = v12;
      v19[3] = &v11[2 * v13];
      *(_OWORD *)uint64_t v12 = v15;
      long long v15 = 0uLL;
      v19[2] = v12 + 2;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v16, v19);
      int v14 = v17;
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v19);
      char v17 = v14;
      if (*((void *)&v15 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v15 + 1));
      }
    }
    else
    {
      _OWORD *v17 = v15;
      char v17 = v6 + 1;
    }
  }
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 248))(*a1, a1 + 2, &v16);
  v19[0] = (void **)&v16;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v19);
}

{
  uint64_t v4;
  uint64_t i;
  _OWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void **v11;
  void **v12;
  uint64_t v13;
  _OWORD *v14;
  long long v15;
  uint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  void **v19[5];

  uint64_t v16 = 0;
  char v17 = 0;
  unint64_t v18 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v16, 0x2E8BA2E8BA2E8BA3 * ((a2[1] - *a2) >> 2));
  uint64_t v4 = *a2;
  for (uint64_t i = a2[1]; v4 != i; v4 += 44)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 16))(&v15);
    Espresso::SerDes::params_io<Espresso::reduce_params_t>(v15, v4, 1);
    unint64_t v6 = v17;
    if ((unint64_t)v17 >= v18)
    {
      uint64_t v7 = ((uint64_t)v17 - v16) >> 4;
      unint64_t v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = v18 - v16;
      if ((uint64_t)(v18 - v16) >> 3 > v8) {
        unint64_t v8 = v9 >> 3;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v8;
      }
      v19[4] = (void **)&v18;
      uint64_t v11 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
      uint64_t v12 = &v11[2 * v7];
      v19[0] = v11;
      v19[1] = v12;
      v19[3] = &v11[2 * v13];
      *(_OWORD *)uint64_t v12 = v15;
      long long v15 = 0uLL;
      v19[2] = v12 + 2;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v16, v19);
      int v14 = v17;
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v19);
      char v17 = v14;
      if (*((void *)&v15 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v15 + 1));
      }
    }
    else
    {
      _OWORD *v17 = v15;
      char v17 = v6 + 1;
    }
  }
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 248))(*a1, a1 + 2, &v16);
  v19[0] = (void **)&v16;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v19);
}

{
  uint64_t v4;
  uint64_t i;
  _OWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void **v11;
  void **v12;
  uint64_t v13;
  _OWORD *v14;
  long long v15;
  uint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  void **v19[5];

  uint64_t v16 = 0;
  char v17 = 0;
  unint64_t v18 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v16, 0x86BCA1AF286BCA1BLL * ((a2[1] - *a2) >> 2));
  uint64_t v4 = *a2;
  for (uint64_t i = a2[1]; v4 != i; v4 += 76)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 16))(&v15);
    Espresso::SerDes::params_io<Espresso::general_padding_params>(v15, v4, 1);
    unint64_t v6 = v17;
    if ((unint64_t)v17 >= v18)
    {
      uint64_t v7 = ((uint64_t)v17 - v16) >> 4;
      unint64_t v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = v18 - v16;
      if ((uint64_t)(v18 - v16) >> 3 > v8) {
        unint64_t v8 = v9 >> 3;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v8;
      }
      v19[4] = (void **)&v18;
      uint64_t v11 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
      uint64_t v12 = &v11[2 * v7];
      v19[0] = v11;
      v19[1] = v12;
      v19[3] = &v11[2 * v13];
      *(_OWORD *)uint64_t v12 = v15;
      long long v15 = 0uLL;
      v19[2] = v12 + 2;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v16, v19);
      int v14 = v17;
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v19);
      char v17 = v14;
      if (*((void *)&v15 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v15 + 1));
      }
    }
    else
    {
      _OWORD *v17 = v15;
      char v17 = v6 + 1;
    }
  }
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 248))(*a1, a1 + 2, &v16);
  v19[0] = (void **)&v16;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v19);
}

{
  uint64_t v4;
  uint64_t i;
  _OWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void **v11;
  void **v12;
  uint64_t v13;
  _OWORD *v14;
  long long v15;
  uint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  void **v19[5];

  uint64_t v16 = 0;
  char v17 = 0;
  unint64_t v18 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v16, (a2[1] - *a2) >> 3);
  uint64_t v4 = *a2;
  for (uint64_t i = a2[1]; v4 != i; v4 += 8)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 16))(&v15);
    Espresso::SerDes::params_io<Espresso::prediction_smoothing_params>(v15, v4, 1);
    unint64_t v6 = v17;
    if ((unint64_t)v17 >= v18)
    {
      uint64_t v7 = ((uint64_t)v17 - v16) >> 4;
      unint64_t v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = v18 - v16;
      if ((uint64_t)(v18 - v16) >> 3 > v8) {
        unint64_t v8 = v9 >> 3;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v8;
      }
      v19[4] = (void **)&v18;
      uint64_t v11 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
      uint64_t v12 = &v11[2 * v7];
      v19[0] = v11;
      v19[1] = v12;
      v19[3] = &v11[2 * v13];
      *(_OWORD *)uint64_t v12 = v15;
      long long v15 = 0uLL;
      v19[2] = v12 + 2;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v16, v19);
      int v14 = v17;
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v19);
      char v17 = v14;
      if (*((void *)&v15 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v15 + 1));
      }
    }
    else
    {
      _OWORD *v17 = v15;
      char v17 = v6 + 1;
    }
  }
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 248))(*a1, a1 + 2, &v16);
  v19[0] = (void **)&v16;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v19);
}

{
  uint64_t v4;
  uint64_t i;
  _OWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void **v11;
  void **v12;
  uint64_t v13;
  _OWORD *v14;
  long long v15;
  uint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  void **v19[5];

  uint64_t v16 = 0;
  char v17 = 0;
  unint64_t v18 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v16, 0xCCCCCCCCCCCCCCCDLL * ((a2[1] - *a2) >> 3));
  uint64_t v4 = *a2;
  for (uint64_t i = a2[1]; v4 != i; v4 += 40)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 16))(&v15);
    Espresso::SerDes::params_io<Espresso::space_to_batch_params_t>(v15, v4, 1);
    unint64_t v6 = v17;
    if ((unint64_t)v17 >= v18)
    {
      uint64_t v7 = ((uint64_t)v17 - v16) >> 4;
      unint64_t v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = v18 - v16;
      if ((uint64_t)(v18 - v16) >> 3 > v8) {
        unint64_t v8 = v9 >> 3;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v8;
      }
      v19[4] = (void **)&v18;
      uint64_t v11 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
      uint64_t v12 = &v11[2 * v7];
      v19[0] = v11;
      v19[1] = v12;
      v19[3] = &v11[2 * v13];
      *(_OWORD *)uint64_t v12 = v15;
      long long v15 = 0uLL;
      v19[2] = v12 + 2;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v16, v19);
      int v14 = v17;
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v19);
      char v17 = v14;
      if (*((void *)&v15 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v15 + 1));
      }
    }
    else
    {
      _OWORD *v17 = v15;
      char v17 = v6 + 1;
    }
  }
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 248))(*a1, a1 + 2, &v16);
  v19[0] = (void **)&v16;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v19);
}

{
  uint64_t v4;
  uint64_t i;
  _OWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void **v11;
  void **v12;
  uint64_t v13;
  _OWORD *v14;
  long long v15;
  uint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  void **v19[5];

  uint64_t v16 = 0;
  char v17 = 0;
  unint64_t v18 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v16, 0x8E38E38E38E38E39 * ((a2[1] - *a2) >> 2));
  uint64_t v4 = *a2;
  for (uint64_t i = a2[1]; v4 != i; v4 += 36)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 16))(&v15);
    Espresso::SerDes::params_io<Espresso::broadcast_params_t>(v15, v4, 1);
    unint64_t v6 = v17;
    if ((unint64_t)v17 >= v18)
    {
      uint64_t v7 = ((uint64_t)v17 - v16) >> 4;
      unint64_t v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = v18 - v16;
      if ((uint64_t)(v18 - v16) >> 3 > v8) {
        unint64_t v8 = v9 >> 3;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v8;
      }
      v19[4] = (void **)&v18;
      uint64_t v11 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
      uint64_t v12 = &v11[2 * v7];
      v19[0] = v11;
      v19[1] = v12;
      v19[3] = &v11[2 * v13];
      *(_OWORD *)uint64_t v12 = v15;
      long long v15 = 0uLL;
      v19[2] = v12 + 2;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v16, v19);
      int v14 = v17;
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v19);
      char v17 = v14;
      if (*((void *)&v15 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v15 + 1));
      }
    }
    else
    {
      _OWORD *v17 = v15;
      char v17 = v6 + 1;
    }
  }
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 248))(*a1, a1 + 2, &v16);
  v19[0] = (void **)&v16;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v19);
}

{
  uint64_t i;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void **v11;
  void **v12;
  uint64_t v13;
  _OWORD *v14;
  long long v15;
  uint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  void **v19[5];

  uint64_t v16 = 0;
  char v17 = 0;
  unint64_t v18 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v16, a2[1] - *a2);
  uint64_t v5 = *a2;
  for (uint64_t i = a2[1]; v5 != i; ++v5)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 16))(&v15);
    unint64_t v6 = v17;
    if ((unint64_t)v17 >= v18)
    {
      uint64_t v7 = ((uint64_t)v17 - v16) >> 4;
      unint64_t v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = v18 - v16;
      if ((uint64_t)(v18 - v16) >> 3 > v8) {
        unint64_t v8 = v9 >> 3;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v8;
      }
      v19[4] = (void **)&v18;
      uint64_t v11 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
      uint64_t v12 = &v11[2 * v7];
      v19[0] = v11;
      v19[1] = v12;
      v19[3] = &v11[2 * v13];
      *(_OWORD *)uint64_t v12 = v15;
      long long v15 = 0uLL;
      v19[2] = v12 + 2;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v16, v19);
      int v14 = v17;
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v19);
      char v17 = v14;
      if (*((void *)&v15 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v15 + 1));
      }
    }
    else
    {
      _OWORD *v17 = v15;
      char v17 = v6 + 1;
    }
  }
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 248))(*a1, a1 + 2, &v16);
  v19[0] = (void **)&v16;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v19);
}

{
  uint64_t v4;
  uint64_t i;
  _OWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void **v11;
  void **v12;
  uint64_t v13;
  _OWORD *v14;
  long long v15;
  uint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  void **v19[5];

  uint64_t v16 = 0;
  char v17 = 0;
  unint64_t v18 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v16, 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 4));
  uint64_t v4 = *a2;
  for (uint64_t i = a2[1]; v4 != i; v4 += 48)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 16))(&v15);
    Espresso::SerDes::params_io<Espresso::lambda_params_t>(v15, v4, 1);
    unint64_t v6 = v17;
    if ((unint64_t)v17 >= v18)
    {
      uint64_t v7 = ((uint64_t)v17 - v16) >> 4;
      unint64_t v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = v18 - v16;
      if ((uint64_t)(v18 - v16) >> 3 > v8) {
        unint64_t v8 = v9 >> 3;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v8;
      }
      v19[4] = (void **)&v18;
      uint64_t v11 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
      uint64_t v12 = &v11[2 * v7];
      v19[0] = v11;
      v19[1] = v12;
      v19[3] = &v11[2 * v13];
      *(_OWORD *)uint64_t v12 = v15;
      long long v15 = 0uLL;
      v19[2] = v12 + 2;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v16, v19);
      int v14 = v17;
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v19);
      char v17 = v14;
      if (*((void *)&v15 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v15 + 1));
      }
    }
    else
    {
      _OWORD *v17 = v15;
      char v17 = v6 + 1;
    }
  }
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 248))(*a1, a1 + 2, &v16);
  v19[0] = (void **)&v16;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v19);
}

{
  uint64_t v4;
  uint64_t i;
  _OWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void **v11;
  void **v12;
  uint64_t v13;
  _OWORD *v14;
  long long v15;
  uint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  void **v19[5];

  uint64_t v16 = 0;
  char v17 = 0;
  unint64_t v18 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v16, 0x2E8BA2E8BA2E8BA3 * ((a2[1] - *a2) >> 2));
  uint64_t v4 = *a2;
  for (uint64_t i = a2[1]; v4 != i; v4 += 44)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 16))(&v15);
    Espresso::SerDes::params_io<Espresso::patch_extractor_params_t>(v15, v4, 1);
    unint64_t v6 = v17;
    if ((unint64_t)v17 >= v18)
    {
      uint64_t v7 = ((uint64_t)v17 - v16) >> 4;
      unint64_t v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = v18 - v16;
      if ((uint64_t)(v18 - v16) >> 3 > v8) {
        unint64_t v8 = v9 >> 3;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v8;
      }
      v19[4] = (void **)&v18;
      uint64_t v11 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
      uint64_t v12 = &v11[2 * v7];
      v19[0] = v11;
      v19[1] = v12;
      v19[3] = &v11[2 * v13];
      *(_OWORD *)uint64_t v12 = v15;
      long long v15 = 0uLL;
      v19[2] = v12 + 2;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v16, v19);
      int v14 = v17;
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v19);
      char v17 = v14;
      if (*((void *)&v15 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v15 + 1));
      }
    }
    else
    {
      _OWORD *v17 = v15;
      char v17 = v6 + 1;
    }
  }
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 248))(*a1, a1 + 2, &v16);
  v19[0] = (void **)&v16;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v19);
}

{
  uint64_t v4;
  uint64_t i;
  _OWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void **v11;
  void **v12;
  uint64_t v13;
  _OWORD *v14;
  long long v15;
  uint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  void **v19[5];

  uint64_t v16 = 0;
  char v17 = 0;
  unint64_t v18 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v16, 0xCCCCCCCCCCCCCCCDLL * ((a2[1] - *a2) >> 4));
  uint64_t v4 = *a2;
  for (uint64_t i = a2[1]; v4 != i; v4 += 80)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 16))(&v15);
    Espresso::SerDes::params_io<Espresso::crop_and_resize_params_t>(v15, v4, 1);
    unint64_t v6 = v17;
    if ((unint64_t)v17 >= v18)
    {
      uint64_t v7 = ((uint64_t)v17 - v16) >> 4;
      unint64_t v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = v18 - v16;
      if ((uint64_t)(v18 - v16) >> 3 > v8) {
        unint64_t v8 = v9 >> 3;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v8;
      }
      v19[4] = (void **)&v18;
      uint64_t v11 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
      uint64_t v12 = &v11[2 * v7];
      v19[0] = v11;
      v19[1] = v12;
      v19[3] = &v11[2 * v13];
      *(_OWORD *)uint64_t v12 = v15;
      long long v15 = 0uLL;
      v19[2] = v12 + 2;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v16, v19);
      int v14 = v17;
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v19);
      char v17 = v14;
      if (*((void *)&v15 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v15 + 1));
      }
    }
    else
    {
      _OWORD *v17 = v15;
      char v17 = v6 + 1;
    }
  }
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 248))(*a1, a1 + 2, &v16);
  v19[0] = (void **)&v16;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v19);
}

{
  uint64_t v4;
  uint64_t i;
  _OWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void **v11;
  void **v12;
  uint64_t v13;
  _OWORD *v14;
  long long v15;
  uint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  void **v19[5];

  uint64_t v16 = 0;
  char v17 = 0;
  unint64_t v18 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v16, 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 3));
  uint64_t v4 = *a2;
  for (uint64_t i = a2[1]; v4 != i; v4 += 56)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 16))(&v15);
    Espresso::SerDes::params_io<Espresso::cf_branch_params_t>(v15, v4, 1);
    unint64_t v6 = v17;
    if ((unint64_t)v17 >= v18)
    {
      uint64_t v7 = ((uint64_t)v17 - v16) >> 4;
      unint64_t v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = v18 - v16;
      if ((uint64_t)(v18 - v16) >> 3 > v8) {
        unint64_t v8 = v9 >> 3;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v8;
      }
      v19[4] = (void **)&v18;
      uint64_t v11 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
      uint64_t v12 = &v11[2 * v7];
      v19[0] = v11;
      v19[1] = v12;
      v19[3] = &v11[2 * v13];
      *(_OWORD *)uint64_t v12 = v15;
      long long v15 = 0uLL;
      v19[2] = v12 + 2;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v16, v19);
      int v14 = v17;
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v19);
      char v17 = v14;
      if (*((void *)&v15 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v15 + 1));
      }
    }
    else
    {
      _OWORD *v17 = v15;
      char v17 = v6 + 1;
    }
  }
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 248))(*a1, a1 + 2, &v16);
  v19[0] = (void **)&v16;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v19);
}

{
  uint64_t v4;
  uint64_t i;
  _OWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void **v11;
  void **v12;
  uint64_t v13;
  _OWORD *v14;
  long long v15;
  uint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  void **v19[5];

  uint64_t v16 = 0;
  char v17 = 0;
  unint64_t v18 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v16, (a2[1] - *a2) >> 5);
  uint64_t v4 = *a2;
  for (uint64_t i = a2[1]; v4 != i; v4 += 32)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 16))(&v15);
    Espresso::SerDes::params_io<Espresso::dynamic_dequantize_params_t>(v15, v4, 1);
    unint64_t v6 = v17;
    if ((unint64_t)v17 >= v18)
    {
      uint64_t v7 = ((uint64_t)v17 - v16) >> 4;
      unint64_t v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = v18 - v16;
      if ((uint64_t)(v18 - v16) >> 3 > v8) {
        unint64_t v8 = v9 >> 3;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v8;
      }
      v19[4] = (void **)&v18;
      uint64_t v11 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
      uint64_t v12 = &v11[2 * v7];
      v19[0] = v11;
      v19[1] = v12;
      v19[3] = &v11[2 * v13];
      *(_OWORD *)uint64_t v12 = v15;
      long long v15 = 0uLL;
      v19[2] = v12 + 2;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v16, v19);
      int v14 = v17;
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v19);
      char v17 = v14;
      if (*((void *)&v15 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v15 + 1));
      }
    }
    else
    {
      _OWORD *v17 = v15;
      char v17 = v6 + 1;
    }
  }
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 248))(*a1, a1 + 2, &v16);
  v19[0] = (void **)&v16;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v19);
}

{
  uint64_t v4;
  uint64_t i;
  _OWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void **v11;
  void **v12;
  uint64_t v13;
  _OWORD *v14;
  long long v15;
  uint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  void **v19[5];

  uint64_t v16 = 0;
  char v17 = 0;
  unint64_t v18 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v16, 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  uint64_t v4 = *a2;
  for (uint64_t i = a2[1]; v4 != i; v4 += 24)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 16))(&v15);
    Espresso::SerDes::params_io<Espresso::spatial_transformer_params_t>(v15, v4, 1);
    unint64_t v6 = v17;
    if ((unint64_t)v17 >= v18)
    {
      uint64_t v7 = ((uint64_t)v17 - v16) >> 4;
      unint64_t v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = v18 - v16;
      if ((uint64_t)(v18 - v16) >> 3 > v8) {
        unint64_t v8 = v9 >> 3;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v8;
      }
      v19[4] = (void **)&v18;
      uint64_t v11 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
      uint64_t v12 = &v11[2 * v7];
      v19[0] = v11;
      v19[1] = v12;
      v19[3] = &v11[2 * v13];
      *(_OWORD *)uint64_t v12 = v15;
      long long v15 = 0uLL;
      v19[2] = v12 + 2;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v16, v19);
      int v14 = v17;
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v19);
      char v17 = v14;
      if (*((void *)&v15 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v15 + 1));
      }
    }
    else
    {
      _OWORD *v17 = v15;
      char v17 = v6 + 1;
    }
  }
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 248))(*a1, a1 + 2, &v16);
  v19[0] = (void **)&v16;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v19);
}

{
  uint64_t v4;
  uint64_t i;
  _OWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void **v11;
  void **v12;
  uint64_t v13;
  _OWORD *v14;
  long long v15;
  uint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  void **v19[5];

  uint64_t v16 = 0;
  char v17 = 0;
  unint64_t v18 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v16, 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  uint64_t v4 = *a2;
  for (uint64_t i = a2[1]; v4 != i; v4 += 24)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 16))(&v15);
    Espresso::SerDes::params_io<Espresso::cf_call_params_t>(v15, v4, 1);
    unint64_t v6 = v17;
    if ((unint64_t)v17 >= v18)
    {
      uint64_t v7 = ((uint64_t)v17 - v16) >> 4;
      unint64_t v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = v18 - v16;
      if ((uint64_t)(v18 - v16) >> 3 > v8) {
        unint64_t v8 = v9 >> 3;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v8;
      }
      v19[4] = (void **)&v18;
      uint64_t v11 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
      uint64_t v12 = &v11[2 * v7];
      v19[0] = v11;
      v19[1] = v12;
      v19[3] = &v11[2 * v13];
      *(_OWORD *)uint64_t v12 = v15;
      long long v15 = 0uLL;
      v19[2] = v12 + 2;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v16, v19);
      int v14 = v17;
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v19);
      char v17 = v14;
      if (*((void *)&v15 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v15 + 1));
      }
    }
    else
    {
      _OWORD *v17 = v15;
      char v17 = v6 + 1;
    }
  }
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 248))(*a1, a1 + 2, &v16);
  v19[0] = (void **)&v16;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v19);
}

{
  uint64_t i;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void **v11;
  void **v12;
  uint64_t v13;
  _OWORD *v14;
  long long v15;
  uint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  void **v19[5];

  uint64_t v16 = 0;
  char v17 = 0;
  unint64_t v18 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v16, a2[1] - *a2);
  uint64_t v5 = *a2;
  for (uint64_t i = a2[1]; v5 != i; ++v5)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 16))(&v15);
    unint64_t v6 = v17;
    if ((unint64_t)v17 >= v18)
    {
      uint64_t v7 = ((uint64_t)v17 - v16) >> 4;
      unint64_t v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = v18 - v16;
      if ((uint64_t)(v18 - v16) >> 3 > v8) {
        unint64_t v8 = v9 >> 3;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v8;
      }
      v19[4] = (void **)&v18;
      uint64_t v11 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
      uint64_t v12 = &v11[2 * v7];
      v19[0] = v11;
      v19[1] = v12;
      v19[3] = &v11[2 * v13];
      *(_OWORD *)uint64_t v12 = v15;
      long long v15 = 0uLL;
      v19[2] = v12 + 2;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v16, v19);
      int v14 = v17;
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v19);
      char v17 = v14;
      if (*((void *)&v15 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v15 + 1));
      }
    }
    else
    {
      _OWORD *v17 = v15;
      char v17 = v6 + 1;
    }
  }
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 248))(*a1, a1 + 2, &v16);
  v19[0] = (void **)&v16;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v19);
}

{
  uint64_t v4;
  uint64_t i;
  _OWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void **v11;
  void **v12;
  uint64_t v13;
  _OWORD *v14;
  long long v15;
  uint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  void **v19[5];

  uint64_t v16 = 0;
  char v17 = 0;
  unint64_t v18 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v16, (a2[1] - *a2) >> 4);
  uint64_t v4 = *a2;
  for (uint64_t i = a2[1]; v4 != i; v4 += 16)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 16))(&v15);
    Espresso::SerDes::params_io<Espresso::topk_params_t>(v15, v4, 1);
    unint64_t v6 = v17;
    if ((unint64_t)v17 >= v18)
    {
      uint64_t v7 = ((uint64_t)v17 - v16) >> 4;
      unint64_t v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = v18 - v16;
      if ((uint64_t)(v18 - v16) >> 3 > v8) {
        unint64_t v8 = v9 >> 3;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v8;
      }
      v19[4] = (void **)&v18;
      uint64_t v11 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
      uint64_t v12 = &v11[2 * v7];
      v19[0] = v11;
      v19[1] = v12;
      v19[3] = &v11[2 * v13];
      *(_OWORD *)uint64_t v12 = v15;
      long long v15 = 0uLL;
      v19[2] = v12 + 2;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v16, v19);
      int v14 = v17;
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v19);
      char v17 = v14;
      if (*((void *)&v15 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v15 + 1));
      }
    }
    else
    {
      _OWORD *v17 = v15;
      char v17 = v6 + 1;
    }
  }
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 248))(*a1, a1 + 2, &v16);
  v19[0] = (void **)&v16;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v19);
}

{
  uint64_t v4;
  uint64_t i;
  _OWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void **v11;
  void **v12;
  uint64_t v13;
  _OWORD *v14;
  long long v15;
  uint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  void **v19[5];

  uint64_t v16 = 0;
  char v17 = 0;
  unint64_t v18 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v16, (a2[1] - *a2) >> 3);
  uint64_t v4 = *a2;
  for (uint64_t i = a2[1]; v4 != i; v4 += 8)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 16))(&v15);
    Espresso::SerDes::params_io<Espresso::general_concat_params_t>(v15, v4, 1);
    unint64_t v6 = v17;
    if ((unint64_t)v17 >= v18)
    {
      uint64_t v7 = ((uint64_t)v17 - v16) >> 4;
      unint64_t v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = v18 - v16;
      if ((uint64_t)(v18 - v16) >> 3 > v8) {
        unint64_t v8 = v9 >> 3;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v8;
      }
      v19[4] = (void **)&v18;
      uint64_t v11 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
      uint64_t v12 = &v11[2 * v7];
      v19[0] = v11;
      v19[1] = v12;
      v19[3] = &v11[2 * v13];
      *(_OWORD *)uint64_t v12 = v15;
      long long v15 = 0uLL;
      v19[2] = v12 + 2;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v16, v19);
      int v14 = v17;
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v19);
      char v17 = v14;
      if (*((void *)&v15 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v15 + 1));
      }
    }
    else
    {
      _OWORD *v17 = v15;
      char v17 = v6 + 1;
    }
  }
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 248))(*a1, a1 + 2, &v16);
  v19[0] = (void **)&v16;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v19);
}

{
  uint64_t v4;
  uint64_t i;
  _OWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void **v11;
  void **v12;
  uint64_t v13;
  _OWORD *v14;
  long long v15;
  uint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  void **v19[5];

  uint64_t v16 = 0;
  char v17 = 0;
  unint64_t v18 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v16, (a2[1] - *a2) >> 3);
  uint64_t v4 = *a2;
  for (uint64_t i = a2[1]; v4 != i; v4 += 8)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 16))(&v15);
    Espresso::SerDes::params_io<Espresso::alloc_params_t>(v15, v4, 1);
    unint64_t v6 = v17;
    if ((unint64_t)v17 >= v18)
    {
      uint64_t v7 = ((uint64_t)v17 - v16) >> 4;
      unint64_t v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = v18 - v16;
      if ((uint64_t)(v18 - v16) >> 3 > v8) {
        unint64_t v8 = v9 >> 3;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v8;
      }
      v19[4] = (void **)&v18;
      uint64_t v11 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
      uint64_t v12 = &v11[2 * v7];
      v19[0] = v11;
      v19[1] = v12;
      v19[3] = &v11[2 * v13];
      *(_OWORD *)uint64_t v12 = v15;
      long long v15 = 0uLL;
      v19[2] = v12 + 2;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v16, v19);
      int v14 = v17;
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v19);
      char v17 = v14;
      if (*((void *)&v15 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v15 + 1));
      }
    }
    else
    {
      _OWORD *v17 = v15;
      char v17 = v6 + 1;
    }
  }
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 248))(*a1, a1 + 2, &v16);
  v19[0] = (void **)&v16;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v19);
}

{
  uint64_t v4;
  uint64_t i;
  _OWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void **v11;
  void **v12;
  uint64_t v13;
  _OWORD *v14;
  long long v15;
  uint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  void **v19[5];

  uint64_t v16 = 0;
  char v17 = 0;
  unint64_t v18 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v16, 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 3));
  uint64_t v4 = *a2;
  for (uint64_t i = a2[1]; v4 != i; v4 += 56)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 16))(&v15);
    Espresso::SerDes::params_io<Espresso::load_global_params_t>(v15, v4, 1);
    unint64_t v6 = v17;
    if ((unint64_t)v17 >= v18)
    {
      uint64_t v7 = ((uint64_t)v17 - v16) >> 4;
      unint64_t v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = v18 - v16;
      if ((uint64_t)(v18 - v16) >> 3 > v8) {
        unint64_t v8 = v9 >> 3;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v8;
      }
      v19[4] = (void **)&v18;
      uint64_t v11 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
      uint64_t v12 = &v11[2 * v7];
      v19[0] = v11;
      v19[1] = v12;
      v19[3] = &v11[2 * v13];
      *(_OWORD *)uint64_t v12 = v15;
      long long v15 = 0uLL;
      v19[2] = v12 + 2;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v16, v19);
      int v14 = v17;
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v19);
      char v17 = v14;
      if (*((void *)&v15 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v15 + 1));
      }
    }
    else
    {
      _OWORD *v17 = v15;
      char v17 = v6 + 1;
    }
  }
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 248))(*a1, a1 + 2, &v16);
  v19[0] = (void **)&v16;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v19);
}

{
  uint64_t v4;
  uint64_t i;
  _OWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void **v11;
  void **v12;
  uint64_t v13;
  _OWORD *v14;
  long long v15;
  uint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  void **v19[5];

  uint64_t v16 = 0;
  char v17 = 0;
  unint64_t v18 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v16, 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 3));
  uint64_t v4 = *a2;
  for (uint64_t i = a2[1]; v4 != i; v4 += 56)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 16))(&v15);
    Espresso::SerDes::params_io<Espresso::store_global_params_t>(v15, v4, 1);
    unint64_t v6 = v17;
    if ((unint64_t)v17 >= v18)
    {
      uint64_t v7 = ((uint64_t)v17 - v16) >> 4;
      unint64_t v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = v18 - v16;
      if ((uint64_t)(v18 - v16) >> 3 > v8) {
        unint64_t v8 = v9 >> 3;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v8;
      }
      v19[4] = (void **)&v18;
      uint64_t v11 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
      uint64_t v12 = &v11[2 * v7];
      v19[0] = v11;
      v19[1] = v12;
      v19[3] = &v11[2 * v13];
      *(_OWORD *)uint64_t v12 = v15;
      long long v15 = 0uLL;
      v19[2] = v12 + 2;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v16, v19);
      int v14 = v17;
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v19);
      char v17 = v14;
      if (*((void *)&v15 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v15 + 1));
      }
    }
    else
    {
      _OWORD *v17 = v15;
      char v17 = v6 + 1;
    }
  }
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 248))(*a1, a1 + 2, &v16);
  v19[0] = (void **)&v16;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v19);
}

{
  uint64_t i;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void **v11;
  void **v12;
  uint64_t v13;
  _OWORD *v14;
  long long v15;
  uint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  void **v19[5];

  uint64_t v16 = 0;
  char v17 = 0;
  unint64_t v18 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v16, a2[1] - *a2);
  uint64_t v5 = *a2;
  for (uint64_t i = a2[1]; v5 != i; ++v5)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 16))(&v15);
    unint64_t v6 = v17;
    if ((unint64_t)v17 >= v18)
    {
      uint64_t v7 = ((uint64_t)v17 - v16) >> 4;
      unint64_t v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = v18 - v16;
      if ((uint64_t)(v18 - v16) >> 3 > v8) {
        unint64_t v8 = v9 >> 3;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v8;
      }
      v19[4] = (void **)&v18;
      uint64_t v11 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
      uint64_t v12 = &v11[2 * v7];
      v19[0] = v11;
      v19[1] = v12;
      v19[3] = &v11[2 * v13];
      *(_OWORD *)uint64_t v12 = v15;
      long long v15 = 0uLL;
      v19[2] = v12 + 2;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v16, v19);
      int v14 = v17;
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v19);
      char v17 = v14;
      if (*((void *)&v15 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v15 + 1));
      }
    }
    else
    {
      _OWORD *v17 = v15;
      char v17 = v6 + 1;
    }
  }
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 248))(*a1, a1 + 2, &v16);
  v19[0] = (void **)&v16;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v19);
}

{
  uint64_t i;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void **v11;
  void **v12;
  uint64_t v13;
  _OWORD *v14;
  long long v15;
  uint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  void **v19[5];

  uint64_t v16 = 0;
  char v17 = 0;
  unint64_t v18 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v16, a2[1] - *a2);
  uint64_t v5 = *a2;
  for (uint64_t i = a2[1]; v5 != i; ++v5)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 16))(&v15);
    unint64_t v6 = v17;
    if ((unint64_t)v17 >= v18)
    {
      uint64_t v7 = ((uint64_t)v17 - v16) >> 4;
      unint64_t v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = v18 - v16;
      if ((uint64_t)(v18 - v16) >> 3 > v8) {
        unint64_t v8 = v9 >> 3;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v8;
      }
      v19[4] = (void **)&v18;
      uint64_t v11 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
      uint64_t v12 = &v11[2 * v7];
      v19[0] = v11;
      v19[1] = v12;
      v19[3] = &v11[2 * v13];
      *(_OWORD *)uint64_t v12 = v15;
      long long v15 = 0uLL;
      v19[2] = v12 + 2;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v16, v19);
      int v14 = v17;
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v19);
      char v17 = v14;
      if (*((void *)&v15 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v15 + 1));
      }
    }
    else
    {
      _OWORD *v17 = v15;
      char v17 = v6 + 1;
    }
  }
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 248))(*a1, a1 + 2, &v16);
  v19[0] = (void **)&v16;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v19);
}

{
  uint64_t i;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void **v11;
  void **v12;
  uint64_t v13;
  _OWORD *v14;
  long long v15;
  uint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  void **v19[5];

  uint64_t v16 = 0;
  char v17 = 0;
  unint64_t v18 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v16, a2[1] - *a2);
  uint64_t v5 = *a2;
  for (uint64_t i = a2[1]; v5 != i; ++v5)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 16))(&v15);
    unint64_t v6 = v17;
    if ((unint64_t)v17 >= v18)
    {
      uint64_t v7 = ((uint64_t)v17 - v16) >> 4;
      unint64_t v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = v18 - v16;
      if ((uint64_t)(v18 - v16) >> 3 > v8) {
        unint64_t v8 = v9 >> 3;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v8;
      }
      v19[4] = (void **)&v18;
      uint64_t v11 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
      uint64_t v12 = &v11[2 * v7];
      v19[0] = v11;
      v19[1] = v12;
      v19[3] = &v11[2 * v13];
      *(_OWORD *)uint64_t v12 = v15;
      long long v15 = 0uLL;
      v19[2] = v12 + 2;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v16, v19);
      int v14 = v17;
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v19);
      char v17 = v14;
      if (*((void *)&v15 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v15 + 1));
      }
    }
    else
    {
      _OWORD *v17 = v15;
      char v17 = v6 + 1;
    }
  }
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 248))(*a1, a1 + 2, &v16);
  v19[0] = (void **)&v16;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v19);
}

{
  uint64_t v4;
  uint64_t i;
  _OWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void **v11;
  void **v12;
  uint64_t v13;
  _OWORD *v14;
  long long v15;
  uint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  void **v19[5];

  uint64_t v16 = 0;
  char v17 = 0;
  unint64_t v18 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v16, 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  uint64_t v4 = *a2;
  for (uint64_t i = a2[1]; v4 != i; v4 += 24)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 16))(&v15);
    Espresso::SerDes::params_io<Espresso::scatter_params_t>(v15, v4, 1);
    unint64_t v6 = v17;
    if ((unint64_t)v17 >= v18)
    {
      uint64_t v7 = ((uint64_t)v17 - v16) >> 4;
      unint64_t v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = v18 - v16;
      if ((uint64_t)(v18 - v16) >> 3 > v8) {
        unint64_t v8 = v9 >> 3;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v8;
      }
      v19[4] = (void **)&v18;
      uint64_t v11 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
      uint64_t v12 = &v11[2 * v7];
      v19[0] = v11;
      v19[1] = v12;
      v19[3] = &v11[2 * v13];
      *(_OWORD *)uint64_t v12 = v15;
      long long v15 = 0uLL;
      v19[2] = v12 + 2;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v16, v19);
      int v14 = v17;
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v19);
      char v17 = v14;
      if (*((void *)&v15 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v15 + 1));
      }
    }
    else
    {
      _OWORD *v17 = v15;
      char v17 = v6 + 1;
    }
  }
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 248))(*a1, a1 + 2, &v16);
  v19[0] = (void **)&v16;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v19);
}

{
  uint64_t v4;
  uint64_t i;
  _OWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void **v11;
  void **v12;
  uint64_t v13;
  _OWORD *v14;
  long long v15;
  uint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  void **v19[5];

  uint64_t v16 = 0;
  char v17 = 0;
  unint64_t v18 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v16, 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 4));
  uint64_t v4 = *a2;
  for (uint64_t i = a2[1]; v4 != i; v4 += 48)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 16))(&v15);
    Espresso::SerDes::params_io<Espresso::load_random_params_t>(v15, v4, 1);
    unint64_t v6 = v17;
    if ((unint64_t)v17 >= v18)
    {
      uint64_t v7 = ((uint64_t)v17 - v16) >> 4;
      unint64_t v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = v18 - v16;
      if ((uint64_t)(v18 - v16) >> 3 > v8) {
        unint64_t v8 = v9 >> 3;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v8;
      }
      v19[4] = (void **)&v18;
      uint64_t v11 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
      uint64_t v12 = &v11[2 * v7];
      v19[0] = v11;
      v19[1] = v12;
      v19[3] = &v11[2 * v13];
      *(_OWORD *)uint64_t v12 = v15;
      long long v15 = 0uLL;
      v19[2] = v12 + 2;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v16, v19);
      int v14 = v17;
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v19);
      char v17 = v14;
      if (*((void *)&v15 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v15 + 1));
      }
    }
    else
    {
      _OWORD *v17 = v15;
      char v17 = v6 + 1;
    }
  }
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 248))(*a1, a1 + 2, &v16);
  v19[0] = (void **)&v16;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v19);
}

{
  uint64_t v4;
  uint64_t i;
  _OWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void **v11;
  void **v12;
  uint64_t v13;
  _OWORD *v14;
  long long v15;
  uint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  void **v19[5];

  uint64_t v16 = 0;
  char v17 = 0;
  unint64_t v18 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v16, 0xCCCCCCCCCCCCCCCDLL * ((a2[1] - *a2) >> 2));
  uint64_t v4 = *a2;
  for (uint64_t i = a2[1]; v4 != i; v4 += 20)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 16))(&v15);
    Espresso::SerDes::params_io<Espresso::matrix_band_part_params_t>(v15, v4, 1);
    unint64_t v6 = v17;
    if ((unint64_t)v17 >= v18)
    {
      uint64_t v7 = ((uint64_t)v17 - v16) >> 4;
      unint64_t v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = v18 - v16;
      if ((uint64_t)(v18 - v16) >> 3 > v8) {
        unint64_t v8 = v9 >> 3;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v8;
      }
      v19[4] = (void **)&v18;
      uint64_t v11 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
      uint64_t v12 = &v11[2 * v7];
      v19[0] = v11;
      v19[1] = v12;
      v19[3] = &v11[2 * v13];
      *(_OWORD *)uint64_t v12 = v15;
      long long v15 = 0uLL;
      v19[2] = v12 + 2;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v16, v19);
      int v14 = v17;
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v19);
      char v17 = v14;
      if (*((void *)&v15 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v15 + 1));
      }
    }
    else
    {
      _OWORD *v17 = v15;
      char v17 = v6 + 1;
    }
  }
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 248))(*a1, a1 + 2, &v16);
  v19[0] = (void **)&v16;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v19);
}

{
  uint64_t v4;
  uint64_t i;
  _OWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void **v11;
  void **v12;
  uint64_t v13;
  _OWORD *v14;
  long long v15;
  uint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  void **v19[5];

  uint64_t v16 = 0;
  char v17 = 0;
  unint64_t v18 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v16, 0x8E38E38E38E38E39 * ((a2[1] - *a2) >> 2));
  uint64_t v4 = *a2;
  for (uint64_t i = a2[1]; v4 != i; v4 += 36)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 16))(&v15);
    Espresso::SerDes::params_io<Espresso::fill_params_t>(v15, v4, 1);
    unint64_t v6 = v17;
    if ((unint64_t)v17 >= v18)
    {
      uint64_t v7 = ((uint64_t)v17 - v16) >> 4;
      unint64_t v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = v18 - v16;
      if ((uint64_t)(v18 - v16) >> 3 > v8) {
        unint64_t v8 = v9 >> 3;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v8;
      }
      v19[4] = (void **)&v18;
      uint64_t v11 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
      uint64_t v12 = &v11[2 * v7];
      v19[0] = v11;
      v19[1] = v12;
      v19[3] = &v11[2 * v13];
      *(_OWORD *)uint64_t v12 = v15;
      long long v15 = 0uLL;
      v19[2] = v12 + 2;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v16, v19);
      int v14 = v17;
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v19);
      char v17 = v14;
      if (*((void *)&v15 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v15 + 1));
      }
    }
    else
    {
      _OWORD *v17 = v15;
      char v17 = v6 + 1;
    }
  }
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 248))(*a1, a1 + 2, &v16);
  v19[0] = (void **)&v16;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v19);
}

{
  uint64_t v4;
  uint64_t i;
  _OWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void **v11;
  void **v12;
  uint64_t v13;
  _OWORD *v14;
  long long v15;
  uint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  void **v19[5];

  uint64_t v16 = 0;
  char v17 = 0;
  unint64_t v18 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v16, 0xF0B7672A07A44C6BLL * ((a2[1] - *a2) >> 2));
  uint64_t v4 = *a2;
  for (uint64_t i = a2[1]; v4 != i; v4 += 268)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 16))(&v15);
    Espresso::SerDes::params_io<Espresso::tensor_zero_pad_params_t>(v15, v4, 1);
    unint64_t v6 = v17;
    if ((unint64_t)v17 >= v18)
    {
      uint64_t v7 = ((uint64_t)v17 - v16) >> 4;
      unint64_t v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = v18 - v16;
      if ((uint64_t)(v18 - v16) >> 3 > v8) {
        unint64_t v8 = v9 >> 3;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v8;
      }
      v19[4] = (void **)&v18;
      uint64_t v11 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
      uint64_t v12 = &v11[2 * v7];
      v19[0] = v11;
      v19[1] = v12;
      v19[3] = &v11[2 * v13];
      *(_OWORD *)uint64_t v12 = v15;
      long long v15 = 0uLL;
      v19[2] = v12 + 2;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v16, v19);
      int v14 = v17;
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v19);
      char v17 = v14;
      if (*((void *)&v15 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v15 + 1));
      }
    }
    else
    {
      _OWORD *v17 = v15;
      char v17 = v6 + 1;
    }
  }
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 248))(*a1, a1 + 2, &v16);
  v19[0] = (void **)&v16;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v19);
}

{
  uint64_t v4;
  uint64_t i;
  _OWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void **v11;
  void **v12;
  uint64_t v13;
  _OWORD *v14;
  long long v15;
  uint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  void **v19[5];

  uint64_t v16 = 0;
  char v17 = 0;
  unint64_t v18 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v16, 0x8E38E38E38E38E39 * ((a2[1] - *a2) >> 4));
  uint64_t v4 = *a2;
  for (uint64_t i = a2[1]; v4 != i; v4 += 144)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 16))(&v15);
    Espresso::SerDes::params_io<Espresso::squeeze_params_t>(v15, v4, 1);
    unint64_t v6 = v17;
    if ((unint64_t)v17 >= v18)
    {
      uint64_t v7 = ((uint64_t)v17 - v16) >> 4;
      unint64_t v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = v18 - v16;
      if ((uint64_t)(v18 - v16) >> 3 > v8) {
        unint64_t v8 = v9 >> 3;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v8;
      }
      v19[4] = (void **)&v18;
      uint64_t v11 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
      uint64_t v12 = &v11[2 * v7];
      v19[0] = v11;
      v19[1] = v12;
      v19[3] = &v11[2 * v13];
      *(_OWORD *)uint64_t v12 = v15;
      long long v15 = 0uLL;
      v19[2] = v12 + 2;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v16, v19);
      int v14 = v17;
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v19);
      char v17 = v14;
      if (*((void *)&v15 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v15 + 1));
      }
    }
    else
    {
      _OWORD *v17 = v15;
      char v17 = v6 + 1;
    }
  }
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 248))(*a1, a1 + 2, &v16);
  v19[0] = (void **)&v16;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v19);
}

{
  uint64_t v4;
  uint64_t i;
  _OWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void **v11;
  void **v12;
  uint64_t v13;
  _OWORD *v14;
  long long v15;
  uint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  void **v19[5];

  uint64_t v16 = 0;
  char v17 = 0;
  unint64_t v18 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v16, 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 2));
  uint64_t v4 = *a2;
  for (uint64_t i = a2[1]; v4 != i; v4 += 28)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 16))(&v15);
    Espresso::SerDes::params_io<Espresso::array_gather_params_t>(v15, v4, 1);
    unint64_t v6 = v17;
    if ((unint64_t)v17 >= v18)
    {
      uint64_t v7 = ((uint64_t)v17 - v16) >> 4;
      unint64_t v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = v18 - v16;
      if ((uint64_t)(v18 - v16) >> 3 > v8) {
        unint64_t v8 = v9 >> 3;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v8;
      }
      v19[4] = (void **)&v18;
      uint64_t v11 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
      uint64_t v12 = &v11[2 * v7];
      v19[0] = v11;
      v19[1] = v12;
      v19[3] = &v11[2 * v13];
      *(_OWORD *)uint64_t v12 = v15;
      long long v15 = 0uLL;
      v19[2] = v12 + 2;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v16, v19);
      int v14 = v17;
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v19);
      char v17 = v14;
      if (*((void *)&v15 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v15 + 1));
      }
    }
    else
    {
      _OWORD *v17 = v15;
      char v17 = v6 + 1;
    }
  }
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 248))(*a1, a1 + 2, &v16);
  v19[0] = (void **)&v16;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v19);
}

{
  uint64_t v4;
  uint64_t i;
  _OWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void **v11;
  void **v12;
  uint64_t v13;
  _OWORD *v14;
  long long v15;
  uint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  void **v19[5];

  uint64_t v16 = 0;
  char v17 = 0;
  unint64_t v18 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v16, 0xCCCCCCCCCCCCCCCDLL * ((a2[1] - *a2) >> 2));
  uint64_t v4 = *a2;
  for (uint64_t i = a2[1]; v4 != i; v4 += 20)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 16))(&v15);
    Espresso::SerDes::params_io<Espresso::instancenorm_1d_params_t>(v15, v4, 1);
    unint64_t v6 = v17;
    if ((unint64_t)v17 >= v18)
    {
      uint64_t v7 = ((uint64_t)v17 - v16) >> 4;
      unint64_t v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = v18 - v16;
      if ((uint64_t)(v18 - v16) >> 3 > v8) {
        unint64_t v8 = v9 >> 3;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v8;
      }
      v19[4] = (void **)&v18;
      uint64_t v11 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
      uint64_t v12 = &v11[2 * v7];
      v19[0] = v11;
      v19[1] = v12;
      v19[3] = &v11[2 * v13];
      *(_OWORD *)uint64_t v12 = v15;
      long long v15 = 0uLL;
      v19[2] = v12 + 2;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v16, v19);
      int v14 = v17;
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v19);
      char v17 = v14;
      if (*((void *)&v15 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v15 + 1));
      }
    }
    else
    {
      _OWORD *v17 = v15;
      char v17 = v6 + 1;
    }
  }
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 248))(*a1, a1 + 2, &v16);
  v19[0] = (void **)&v16;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v19);
}

{
  uint64_t i;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void **v11;
  void **v12;
  uint64_t v13;
  _OWORD *v14;
  long long v15;
  uint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  void **v19[5];

  uint64_t v16 = 0;
  char v17 = 0;
  unint64_t v18 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v16, a2[1] - *a2);
  uint64_t v5 = *a2;
  for (uint64_t i = a2[1]; v5 != i; ++v5)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 16))(&v15);
    unint64_t v6 = v17;
    if ((unint64_t)v17 >= v18)
    {
      uint64_t v7 = ((uint64_t)v17 - v16) >> 4;
      unint64_t v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = v18 - v16;
      if ((uint64_t)(v18 - v16) >> 3 > v8) {
        unint64_t v8 = v9 >> 3;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v8;
      }
      v19[4] = (void **)&v18;
      uint64_t v11 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
      uint64_t v12 = &v11[2 * v7];
      v19[0] = v11;
      v19[1] = v12;
      v19[3] = &v11[2 * v13];
      *(_OWORD *)uint64_t v12 = v15;
      long long v15 = 0uLL;
      v19[2] = v12 + 2;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v16, v19);
      int v14 = v17;
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v19);
      char v17 = v14;
      if (*((void *)&v15 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v15 + 1));
      }
    }
    else
    {
      _OWORD *v17 = v15;
      char v17 = v6 + 1;
    }
  }
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 248))(*a1, a1 + 2, &v16);
  v19[0] = (void **)&v16;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v19);
}

{
  uint64_t v4;
  uint64_t i;
  _OWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void **v11;
  void **v12;
  uint64_t v13;
  _OWORD *v14;
  long long v15;
  uint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  void **v19[5];

  uint64_t v16 = 0;
  char v17 = 0;
  unint64_t v18 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v16, 0x8E38E38E38E38E39 * ((a2[1] - *a2) >> 2));
  uint64_t v4 = *a2;
  for (uint64_t i = a2[1]; v4 != i; v4 += 36)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 16))(&v15);
    Espresso::SerDes::params_io<Espresso::gumbel_max_params_t>(v15, v4, 1);
    unint64_t v6 = v17;
    if ((unint64_t)v17 >= v18)
    {
      uint64_t v7 = ((uint64_t)v17 - v16) >> 4;
      unint64_t v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = v18 - v16;
      if ((uint64_t)(v18 - v16) >> 3 > v8) {
        unint64_t v8 = v9 >> 3;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v8;
      }
      v19[4] = (void **)&v18;
      uint64_t v11 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
      uint64_t v12 = &v11[2 * v7];
      v19[0] = v11;
      v19[1] = v12;
      v19[3] = &v11[2 * v13];
      *(_OWORD *)uint64_t v12 = v15;
      long long v15 = 0uLL;
      v19[2] = v12 + 2;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v16, v19);
      int v14 = v17;
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v19);
      char v17 = v14;
      if (*((void *)&v15 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v15 + 1));
      }
    }
    else
    {
      _OWORD *v17 = v15;
      char v17 = v6 + 1;
    }
  }
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 248))(*a1, a1 + 2, &v16);
  v19[0] = (void **)&v16;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v19);
}

{
  uint64_t v4;
  uint64_t i;
  _OWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void **v11;
  void **v12;
  uint64_t v13;
  _OWORD *v14;
  long long v15;
  uint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  void **v19[5];

  uint64_t v16 = 0;
  char v17 = 0;
  unint64_t v18 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v16, 0x86BCA1AF286BCA1BLL * ((a2[1] - *a2) >> 3));
  uint64_t v4 = *a2;
  for (uint64_t i = a2[1]; v4 != i; v4 += 152)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 16))(&v15);
    Espresso::SerDes::params_io<Espresso::builtin_params_t>(v15, v4, 1);
    unint64_t v6 = v17;
    if ((unint64_t)v17 >= v18)
    {
      uint64_t v7 = ((uint64_t)v17 - v16) >> 4;
      unint64_t v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = v18 - v16;
      if ((uint64_t)(v18 - v16) >> 3 > v8) {
        unint64_t v8 = v9 >> 3;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v8;
      }
      v19[4] = (void **)&v18;
      uint64_t v11 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
      uint64_t v12 = &v11[2 * v7];
      v19[0] = v11;
      v19[1] = v12;
      v19[3] = &v11[2 * v13];
      *(_OWORD *)uint64_t v12 = v15;
      long long v15 = 0uLL;
      v19[2] = v12 + 2;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v16, v19);
      int v14 = v17;
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v19);
      char v17 = v14;
      if (*((void *)&v15 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v15 + 1));
      }
    }
    else
    {
      _OWORD *v17 = v15;
      char v17 = v6 + 1;
    }
  }
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 248))(*a1, a1 + 2, &v16);
  v19[0] = (void **)&v16;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v19);
}

{
  uint64_t v4;
  uint64_t i;
  _OWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void **v11;
  void **v12;
  uint64_t v13;
  _OWORD *v14;
  long long v15;
  uint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  void **v19[5];

  uint64_t v16 = 0;
  char v17 = 0;
  unint64_t v18 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v16, 0x8F5C28F5C28F5C29 * ((a2[1] - *a2) >> 2));
  uint64_t v4 = *a2;
  for (uint64_t i = a2[1]; v4 != i; v4 += 100)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 16))(&v15);
    Espresso::SerDes::params_io<Espresso::general_slice_params_t>(v15, v4, 1);
    unint64_t v6 = v17;
    if ((unint64_t)v17 >= v18)
    {
      uint64_t v7 = ((uint64_t)v17 - v16) >> 4;
      unint64_t v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = v18 - v16;
      if ((uint64_t)(v18 - v16) >> 3 > v8) {
        unint64_t v8 = v9 >> 3;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v8;
      }
      v19[4] = (void **)&v18;
      uint64_t v11 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
      uint64_t v12 = &v11[2 * v7];
      v19[0] = v11;
      v19[1] = v12;
      v19[3] = &v11[2 * v13];
      *(_OWORD *)uint64_t v12 = v15;
      long long v15 = 0uLL;
      v19[2] = v12 + 2;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v16, v19);
      int v14 = v17;
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v19);
      char v17 = v14;
      if (*((void *)&v15 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v15 + 1));
      }
    }
    else
    {
      _OWORD *v17 = v15;
      char v17 = v6 + 1;
    }
  }
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 248))(*a1, a1 + 2, &v16);
  v19[0] = (void **)&v16;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v19);
}

{
  uint64_t v4;
  uint64_t i;
  _OWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void **v11;
  void **v12;
  uint64_t v13;
  _OWORD *v14;
  long long v15;
  uint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  void **v19[5];

  uint64_t v16 = 0;
  char v17 = 0;
  unint64_t v18 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v16, 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 2));
  uint64_t v4 = *a2;
  for (uint64_t i = a2[1]; v4 != i; v4 += 12)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 16))(&v15);
    Espresso::SerDes::params_io<Espresso::cross_entropy_params_t>(v15, v4, 1);
    unint64_t v6 = v17;
    if ((unint64_t)v17 >= v18)
    {
      uint64_t v7 = ((uint64_t)v17 - v16) >> 4;
      unint64_t v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = v18 - v16;
      if ((uint64_t)(v18 - v16) >> 3 > v8) {
        unint64_t v8 = v9 >> 3;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v8;
      }
      v19[4] = (void **)&v18;
      uint64_t v11 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
      uint64_t v12 = &v11[2 * v7];
      v19[0] = v11;
      v19[1] = v12;
      v19[3] = &v11[2 * v13];
      *(_OWORD *)uint64_t v12 = v15;
      long long v15 = 0uLL;
      v19[2] = v12 + 2;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v16, v19);
      int v14 = v17;
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v19);
      char v17 = v14;
      if (*((void *)&v15 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v15 + 1));
      }
    }
    else
    {
      _OWORD *v17 = v15;
      char v17 = v6 + 1;
    }
  }
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 248))(*a1, a1 + 2, &v16);
  v19[0] = (void **)&v16;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v19);
}

{
  uint64_t v4;
  uint64_t i;
  _OWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void **v11;
  void **v12;
  uint64_t v13;
  _OWORD *v14;
  long long v15;
  uint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  void **v19[5];

  uint64_t v16 = 0;
  char v17 = 0;
  unint64_t v18 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v16, 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 3));
  uint64_t v4 = *a2;
  for (uint64_t i = a2[1]; v4 != i; v4 += 56)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 16))(&v15);
    Espresso::SerDes::params_io<Espresso::non_maximum_suppression_params_t>(v15, v4, 1);
    unint64_t v6 = v17;
    if ((unint64_t)v17 >= v18)
    {
      uint64_t v7 = ((uint64_t)v17 - v16) >> 4;
      unint64_t v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = v18 - v16;
      if ((uint64_t)(v18 - v16) >> 3 > v8) {
        unint64_t v8 = v9 >> 3;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v8;
      }
      v19[4] = (void **)&v18;
      uint64_t v11 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
      uint64_t v12 = &v11[2 * v7];
      v19[0] = v11;
      v19[1] = v12;
      v19[3] = &v11[2 * v13];
      *(_OWORD *)uint64_t v12 = v15;
      long long v15 = 0uLL;
      v19[2] = v12 + 2;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v16, v19);
      int v14 = v17;
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v19);
      char v17 = v14;
      if (*((void *)&v15 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v15 + 1));
      }
    }
    else
    {
      _OWORD *v17 = v15;
      char v17 = v6 + 1;
    }
  }
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 248))(*a1, a1 + 2, &v16);
  v19[0] = (void **)&v16;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v19);
}

{
  uint64_t i;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void **v11;
  void **v12;
  uint64_t v13;
  _OWORD *v14;
  long long v15;
  uint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  void **v19[5];

  uint64_t v16 = 0;
  char v17 = 0;
  unint64_t v18 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v16, a2[1] - *a2);
  uint64_t v5 = *a2;
  for (uint64_t i = a2[1]; v5 != i; ++v5)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 16))(&v15);
    unint64_t v6 = v17;
    if ((unint64_t)v17 >= v18)
    {
      uint64_t v7 = ((uint64_t)v17 - v16) >> 4;
      unint64_t v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = v18 - v16;
      if ((uint64_t)(v18 - v16) >> 3 > v8) {
        unint64_t v8 = v9 >> 3;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v8;
      }
      v19[4] = (void **)&v18;
      uint64_t v11 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
      uint64_t v12 = &v11[2 * v7];
      v19[0] = v11;
      v19[1] = v12;
      v19[3] = &v11[2 * v13];
      *(_OWORD *)uint64_t v12 = v15;
      long long v15 = 0uLL;
      v19[2] = v12 + 2;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v16, v19);
      int v14 = v17;
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v19);
      char v17 = v14;
      if (*((void *)&v15 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v15 + 1));
      }
    }
    else
    {
      _OWORD *v17 = v15;
      char v17 = v6 + 1;
    }
  }
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 248))(*a1, a1 + 2, &v16);
  v19[0] = (void **)&v16;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v19);
}

{
  uint64_t v4;
  uint64_t i;
  _OWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void **v11;
  void **v12;
  uint64_t v13;
  _OWORD *v14;
  long long v15;
  uint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  void **v19[5];

  uint64_t v16 = 0;
  char v17 = 0;
  unint64_t v18 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v16, 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 2));
  uint64_t v4 = *a2;
  for (uint64_t i = a2[1]; v4 != i; v4 += 12)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 16))(&v15);
    Espresso::SerDes::params_io<Espresso::sgd_params_t>(v15, v4, 1);
    unint64_t v6 = v17;
    if ((unint64_t)v17 >= v18)
    {
      uint64_t v7 = ((uint64_t)v17 - v16) >> 4;
      unint64_t v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = v18 - v16;
      if ((uint64_t)(v18 - v16) >> 3 > v8) {
        unint64_t v8 = v9 >> 3;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v8;
      }
      v19[4] = (void **)&v18;
      uint64_t v11 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
      uint64_t v12 = &v11[2 * v7];
      v19[0] = v11;
      v19[1] = v12;
      v19[3] = &v11[2 * v13];
      *(_OWORD *)uint64_t v12 = v15;
      long long v15 = 0uLL;
      v19[2] = v12 + 2;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v16, v19);
      int v14 = v17;
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v19);
      char v17 = v14;
      if (*((void *)&v15 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v15 + 1));
      }
    }
    else
    {
      _OWORD *v17 = v15;
      char v17 = v6 + 1;
    }
  }
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 248))(*a1, a1 + 2, &v16);
  v19[0] = (void **)&v16;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v19);
}

{
  uint64_t v4;
  uint64_t i;
  _OWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void **v11;
  void **v12;
  uint64_t v13;
  _OWORD *v14;
  long long v15;
  uint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  void **v19[5];

  uint64_t v16 = 0;
  char v17 = 0;
  unint64_t v18 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v16, (a2[1] - *a2) >> 4);
  uint64_t v4 = *a2;
  for (uint64_t i = a2[1]; v4 != i; v4 += 16)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 16))(&v15);
    Espresso::SerDes::params_io<Espresso::gather_nd_params_t>(v15, v4, 1);
    unint64_t v6 = v17;
    if ((unint64_t)v17 >= v18)
    {
      uint64_t v7 = ((uint64_t)v17 - v16) >> 4;
      unint64_t v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = v18 - v16;
      if ((uint64_t)(v18 - v16) >> 3 > v8) {
        unint64_t v8 = v9 >> 3;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v8;
      }
      v19[4] = (void **)&v18;
      uint64_t v11 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
      uint64_t v12 = &v11[2 * v7];
      v19[0] = v11;
      v19[1] = v12;
      v19[3] = &v11[2 * v13];
      *(_OWORD *)uint64_t v12 = v15;
      long long v15 = 0uLL;
      v19[2] = v12 + 2;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v16, v19);
      int v14 = v17;
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v19);
      char v17 = v14;
      if (*((void *)&v15 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v15 + 1));
      }
    }
    else
    {
      _OWORD *v17 = v15;
      char v17 = v6 + 1;
    }
  }
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 248))(*a1, a1 + 2, &v16);
  v19[0] = (void **)&v16;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v19);
}

{
  uint64_t v4;
  uint64_t i;
  _OWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void **v11;
  void **v12;
  uint64_t v13;
  _OWORD *v14;
  long long v15;
  uint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  void **v19[5];

  uint64_t v16 = 0;
  char v17 = 0;
  unint64_t v18 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v16, (a2[1] - *a2) >> 4);
  uint64_t v4 = *a2;
  for (uint64_t i = a2[1]; v4 != i; v4 += 16)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 16))(&v15);
    Espresso::SerDes::params_io<Espresso::adam_params_t>(v15, v4, 1);
    unint64_t v6 = v17;
    if ((unint64_t)v17 >= v18)
    {
      uint64_t v7 = ((uint64_t)v17 - v16) >> 4;
      unint64_t v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = v18 - v16;
      if ((uint64_t)(v18 - v16) >> 3 > v8) {
        unint64_t v8 = v9 >> 3;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v8;
      }
      v19[4] = (void **)&v18;
      uint64_t v11 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
      uint64_t v12 = &v11[2 * v7];
      v19[0] = v11;
      v19[1] = v12;
      v19[3] = &v11[2 * v13];
      *(_OWORD *)uint64_t v12 = v15;
      long long v15 = 0uLL;
      v19[2] = v12 + 2;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v16, v19);
      int v14 = v17;
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v19);
      char v17 = v14;
      if (*((void *)&v15 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v15 + 1));
      }
    }
    else
    {
      _OWORD *v17 = v15;
      char v17 = v6 + 1;
    }
  }
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 248))(*a1, a1 + 2, &v16);
  v19[0] = (void **)&v16;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v19);
}

{
  uint64_t v4;
  uint64_t i;
  _OWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void **v11;
  void **v12;
  uint64_t v13;
  _OWORD *v14;
  long long v15;
  uint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  void **v19[5];

  uint64_t v16 = 0;
  char v17 = 0;
  unint64_t v18 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v16, (a2[1] - *a2) >> 4);
  uint64_t v4 = *a2;
  for (uint64_t i = a2[1]; v4 != i; v4 += 16)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 16))(&v15);
    Espresso::SerDes::params_io<Espresso::scatter_nd_params_t>(v15, v4, 1);
    unint64_t v6 = v17;
    if ((unint64_t)v17 >= v18)
    {
      uint64_t v7 = ((uint64_t)v17 - v16) >> 4;
      unint64_t v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = v18 - v16;
      if ((uint64_t)(v18 - v16) >> 3 > v8) {
        unint64_t v8 = v9 >> 3;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v8;
      }
      v19[4] = (void **)&v18;
      uint64_t v11 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
      uint64_t v12 = &v11[2 * v7];
      v19[0] = v11;
      v19[1] = v12;
      v19[3] = &v11[2 * v13];
      *(_OWORD *)uint64_t v12 = v15;
      long long v15 = 0uLL;
      v19[2] = v12 + 2;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v16, v19);
      int v14 = v17;
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v19);
      char v17 = v14;
      if (*((void *)&v15 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v15 + 1));
      }
    }
    else
    {
      _OWORD *v17 = v15;
      char v17 = v6 + 1;
    }
  }
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 248))(*a1, a1 + 2, &v16);
  v19[0] = (void **)&v16;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v19);
}

{
  uint64_t i;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void **v11;
  void **v12;
  uint64_t v13;
  _OWORD *v14;
  long long v15;
  uint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  void **v19[5];

  uint64_t v16 = 0;
  char v17 = 0;
  unint64_t v18 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v16, a2[1] - *a2);
  uint64_t v5 = *a2;
  for (uint64_t i = a2[1]; v5 != i; ++v5)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 16))(&v15);
    unint64_t v6 = v17;
    if ((unint64_t)v17 >= v18)
    {
      uint64_t v7 = ((uint64_t)v17 - v16) >> 4;
      unint64_t v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = v18 - v16;
      if ((uint64_t)(v18 - v16) >> 3 > v8) {
        unint64_t v8 = v9 >> 3;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v8;
      }
      v19[4] = (void **)&v18;
      uint64_t v11 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
      uint64_t v12 = &v11[2 * v7];
      v19[0] = v11;
      v19[1] = v12;
      v19[3] = &v11[2 * v13];
      *(_OWORD *)uint64_t v12 = v15;
      long long v15 = 0uLL;
      v19[2] = v12 + 2;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v16, v19);
      int v14 = v17;
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v19);
      char v17 = v14;
      if (*((void *)&v15 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v15 + 1));
      }
    }
    else
    {
      _OWORD *v17 = v15;
      char v17 = v6 + 1;
    }
  }
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 248))(*a1, a1 + 2, &v16);
  v19[0] = (void **)&v16;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v19);
}

{
  uint64_t v4;
  uint64_t i;
  _OWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void **v11;
  void **v12;
  uint64_t v13;
  _OWORD *v14;
  long long v15;
  uint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  void **v19[5];

  uint64_t v16 = 0;
  char v17 = 0;
  unint64_t v18 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v16, (a2[1] - *a2) >> 4);
  uint64_t v4 = *a2;
  for (uint64_t i = a2[1]; v4 != i; v4 += 16)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 16))(&v15);
    Espresso::SerDes::params_io<Espresso::one_hot_params_t>(v15, v4, 1);
    unint64_t v6 = v17;
    if ((unint64_t)v17 >= v18)
    {
      uint64_t v7 = ((uint64_t)v17 - v16) >> 4;
      unint64_t v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = v18 - v16;
      if ((uint64_t)(v18 - v16) >> 3 > v8) {
        unint64_t v8 = v9 >> 3;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v8;
      }
      v19[4] = (void **)&v18;
      uint64_t v11 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
      uint64_t v12 = &v11[2 * v7];
      v19[0] = v11;
      v19[1] = v12;
      v19[3] = &v11[2 * v13];
      *(_OWORD *)uint64_t v12 = v15;
      long long v15 = 0uLL;
      v19[2] = v12 + 2;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v16, v19);
      int v14 = v17;
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v19);
      char v17 = v14;
      if (*((void *)&v15 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v15 + 1));
      }
    }
    else
    {
      _OWORD *v17 = v15;
      char v17 = v6 + 1;
    }
  }
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 248))(*a1, a1 + 2, &v16);
  v19[0] = (void **)&v16;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v19);
}

{
  uint64_t v4;
  uint64_t i;
  _OWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void **v11;
  void **v12;
  uint64_t v13;
  _OWORD *v14;
  long long v15;
  uint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  void **v19[5];

  uint64_t v16 = 0;
  char v17 = 0;
  unint64_t v18 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v16, 0xF0F0F0F0F0F0F0F1 * ((a2[1] - *a2) >> 3));
  uint64_t v4 = *a2;
  for (uint64_t i = a2[1]; v4 != i; v4 += 136)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 16))(&v15);
    Espresso::SerDes::params_io<Espresso::dev_op_params_t>((void *)v15, v4, 1);
    unint64_t v6 = v17;
    if ((unint64_t)v17 >= v18)
    {
      uint64_t v7 = ((uint64_t)v17 - v16) >> 4;
      unint64_t v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = v18 - v16;
      if ((uint64_t)(v18 - v16) >> 3 > v8) {
        unint64_t v8 = v9 >> 3;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v8;
      }
      v19[4] = (void **)&v18;
      uint64_t v11 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
      uint64_t v12 = &v11[2 * v7];
      v19[0] = v11;
      v19[1] = v12;
      v19[3] = &v11[2 * v13];
      *(_OWORD *)uint64_t v12 = v15;
      long long v15 = 0uLL;
      v19[2] = v12 + 2;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v16, v19);
      int v14 = v17;
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v19);
      char v17 = v14;
      if (*((void *)&v15 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v15 + 1));
      }
    }
    else
    {
      _OWORD *v17 = v15;
      char v17 = v6 + 1;
    }
  }
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 248))(*a1, a1 + 2, &v16);
  v19[0] = (void **)&v16;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v19);
}

{
  uint64_t v4;
  uint64_t i;
  _OWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void **v11;
  void **v12;
  uint64_t v13;
  _OWORD *v14;
  long long v15;
  uint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  void **v19[5];

  uint64_t v16 = 0;
  char v17 = 0;
  unint64_t v18 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v16, 0xCCCCCCCCCCCCCCCDLL * ((a2[1] - *a2) >> 3));
  uint64_t v4 = *a2;
  for (uint64_t i = a2[1]; v4 != i; v4 += 40)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 16))(&v15);
    Espresso::SerDes::params_io<Espresso::wg_transform_params>(v15, v4, 1);
    unint64_t v6 = v17;
    if ((unint64_t)v17 >= v18)
    {
      uint64_t v7 = ((uint64_t)v17 - v16) >> 4;
      unint64_t v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = v18 - v16;
      if ((uint64_t)(v18 - v16) >> 3 > v8) {
        unint64_t v8 = v9 >> 3;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v8;
      }
      v19[4] = (void **)&v18;
      uint64_t v11 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
      uint64_t v12 = &v11[2 * v7];
      v19[0] = v11;
      v19[1] = v12;
      v19[3] = &v11[2 * v13];
      *(_OWORD *)uint64_t v12 = v15;
      long long v15 = 0uLL;
      v19[2] = v12 + 2;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v16, v19);
      int v14 = v17;
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v19);
      char v17 = v14;
      if (*((void *)&v15 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v15 + 1));
      }
    }
    else
    {
      _OWORD *v17 = v15;
      char v17 = v6 + 1;
    }
  }
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 248))(*a1, a1 + 2, &v16);
  v19[0] = (void **)&v16;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v19);
}

{
  uint64_t v4;
  uint64_t i;
  _OWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void **v11;
  void **v12;
  uint64_t v13;
  _OWORD *v14;
  long long v15;
  uint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  void **v19[5];

  uint64_t v16 = 0;
  char v17 = 0;
  unint64_t v18 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v16, (a2[1] - *a2) >> 3);
  uint64_t v4 = *a2;
  for (uint64_t i = a2[1]; v4 != i; v4 += 8)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 16))(&v15);
    Espresso::SerDes::params_io<Espresso::grid_sampling_params_t>(v15, v4, 1);
    unint64_t v6 = v17;
    if ((unint64_t)v17 >= v18)
    {
      uint64_t v7 = ((uint64_t)v17 - v16) >> 4;
      unint64_t v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = v18 - v16;
      if ((uint64_t)(v18 - v16) >> 3 > v8) {
        unint64_t v8 = v9 >> 3;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v8;
      }
      v19[4] = (void **)&v18;
      uint64_t v11 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
      uint64_t v12 = &v11[2 * v7];
      v19[0] = v11;
      v19[1] = v12;
      v19[3] = &v11[2 * v13];
      *(_OWORD *)uint64_t v12 = v15;
      long long v15 = 0uLL;
      v19[2] = v12 + 2;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v16, v19);
      int v14 = v17;
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v19);
      char v17 = v14;
      if (*((void *)&v15 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v15 + 1));
      }
    }
    else
    {
      _OWORD *v17 = v15;
      char v17 = v6 + 1;
    }
  }
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 248))(*a1, a1 + 2, &v16);
  v19[0] = (void **)&v16;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v19);
}

{
  uint64_t v4;
  uint64_t i;
  _OWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void **v11;
  void **v12;
  uint64_t v13;
  _OWORD *v14;
  long long v15;
  uint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  void **v19[5];

  uint64_t v16 = 0;
  char v17 = 0;
  unint64_t v18 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v16, 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 2));
  uint64_t v4 = *a2;
  for (uint64_t i = a2[1]; v4 != i; v4 += 28)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 16))(&v15);
    Espresso::SerDes::params_io<Espresso::resample_params_t>(v15, v4, 1);
    unint64_t v6 = v17;
    if ((unint64_t)v17 >= v18)
    {
      uint64_t v7 = ((uint64_t)v17 - v16) >> 4;
      unint64_t v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = v18 - v16;
      if ((uint64_t)(v18 - v16) >> 3 > v8) {
        unint64_t v8 = v9 >> 3;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v8;
      }
      v19[4] = (void **)&v18;
      uint64_t v11 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
      uint64_t v12 = &v11[2 * v7];
      v19[0] = v11;
      v19[1] = v12;
      v19[3] = &v11[2 * v13];
      *(_OWORD *)uint64_t v12 = v15;
      long long v15 = 0uLL;
      v19[2] = v12 + 2;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v16, v19);
      int v14 = v17;
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v19);
      char v17 = v14;
      if (*((void *)&v15 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v15 + 1));
      }
    }
    else
    {
      _OWORD *v17 = v15;
      char v17 = v6 + 1;
    }
  }
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 248))(*a1, a1 + 2, &v16);
  v19[0] = (void **)&v16;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v19);
}

{
  uint64_t v4;
  uint64_t i;
  _OWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void **v11;
  void **v12;
  uint64_t v13;
  _OWORD *v14;
  long long v15;
  uint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  void **v19[5];

  uint64_t v16 = 0;
  char v17 = 0;
  unint64_t v18 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v16, 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 2));
  uint64_t v4 = *a2;
  for (uint64_t i = a2[1]; v4 != i; v4 += 12)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 16))(&v15);
    Espresso::SerDes::params_io<Espresso::self_attention_params_t>(v15, v4, 1);
    unint64_t v6 = v17;
    if ((unint64_t)v17 >= v18)
    {
      uint64_t v7 = ((uint64_t)v17 - v16) >> 4;
      unint64_t v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = v18 - v16;
      if ((uint64_t)(v18 - v16) >> 3 > v8) {
        unint64_t v8 = v9 >> 3;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v8;
      }
      v19[4] = (void **)&v18;
      uint64_t v11 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
      uint64_t v12 = &v11[2 * v7];
      v19[0] = v11;
      v19[1] = v12;
      v19[3] = &v11[2 * v13];
      *(_OWORD *)uint64_t v12 = v15;
      long long v15 = 0uLL;
      v19[2] = v12 + 2;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v16, v19);
      int v14 = v17;
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v19);
      char v17 = v14;
      if (*((void *)&v15 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v15 + 1));
      }
    }
    else
    {
      _OWORD *v17 = v15;
      char v17 = v6 + 1;
    }
  }
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 248))(*a1, a1 + 2, &v16);
  v19[0] = (void **)&v16;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v19);
}

{
  uint64_t v4;
  uint64_t i;
  _OWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void **v11;
  void **v12;
  uint64_t v13;
  _OWORD *v14;
  long long v15;
  uint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  void **v19[5];

  uint64_t v16 = 0;
  char v17 = 0;
  unint64_t v18 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v16, (a2[1] - *a2) >> 7);
  uint64_t v4 = *a2;
  for (uint64_t i = a2[1]; v4 != i; v4 += 128)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 16))(&v15);
    Espresso::SerDes::params_io<Espresso::loopkit_params_t>(v15, v4, 1);
    unint64_t v6 = v17;
    if ((unint64_t)v17 >= v18)
    {
      uint64_t v7 = ((uint64_t)v17 - v16) >> 4;
      unint64_t v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = v18 - v16;
      if ((uint64_t)(v18 - v16) >> 3 > v8) {
        unint64_t v8 = v9 >> 3;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v8;
      }
      v19[4] = (void **)&v18;
      uint64_t v11 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
      uint64_t v12 = &v11[2 * v7];
      v19[0] = v11;
      v19[1] = v12;
      v19[3] = &v11[2 * v13];
      *(_OWORD *)uint64_t v12 = v15;
      long long v15 = 0uLL;
      v19[2] = v12 + 2;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v16, v19);
      int v14 = v17;
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v19);
      char v17 = v14;
      if (*((void *)&v15 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v15 + 1));
      }
    }
    else
    {
      _OWORD *v17 = v15;
      char v17 = v6 + 1;
    }
  }
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 248))(*a1, a1 + 2, &v16);
  v19[0] = (void **)&v16;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v19);
}

{
  uint64_t v4;
  uint64_t i;
  _OWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void **v11;
  void **v12;
  uint64_t v13;
  _OWORD *v14;
  long long v15;
  uint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  void **v19[5];

  uint64_t v16 = 0;
  char v17 = 0;
  unint64_t v18 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v16, (a2[1] - *a2) >> 3);
  uint64_t v4 = *a2;
  for (uint64_t i = a2[1]; v4 != i; v4 += 8)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 16))(&v15);
    Espresso::SerDes::params_io<Espresso::argsort_params_t>(v15, v4, 1);
    unint64_t v6 = v17;
    if ((unint64_t)v17 >= v18)
    {
      uint64_t v7 = ((uint64_t)v17 - v16) >> 4;
      unint64_t v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = v18 - v16;
      if ((uint64_t)(v18 - v16) >> 3 > v8) {
        unint64_t v8 = v9 >> 3;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v8;
      }
      v19[4] = (void **)&v18;
      uint64_t v11 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
      uint64_t v12 = &v11[2 * v7];
      v19[0] = v11;
      v19[1] = v12;
      v19[3] = &v11[2 * v13];
      *(_OWORD *)uint64_t v12 = v15;
      long long v15 = 0uLL;
      v19[2] = v12 + 2;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v16, v19);
      int v14 = v17;
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v19);
      char v17 = v14;
      if (*((void *)&v15 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v15 + 1));
      }
    }
    else
    {
      _OWORD *v17 = v15;
      char v17 = v6 + 1;
    }
  }
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 248))(*a1, a1 + 2, &v16);
  v19[0] = (void **)&v16;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v19);
}

{
  uint64_t v4;
  uint64_t i;
  _OWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void **v11;
  void **v12;
  uint64_t v13;
  _OWORD *v14;
  long long v15;
  uint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  void **v19[5];

  uint64_t v16 = 0;
  char v17 = 0;
  unint64_t v18 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v16, 0xEEEEEEEEEEEEEEEFLL * ((a2[1] - *a2) >> 2));
  uint64_t v4 = *a2;
  for (uint64_t i = a2[1]; v4 != i; v4 += 60)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 16))(&v15);
    Espresso::SerDes::params_io<Espresso::pool3d_params_t>(v15, v4, 1);
    unint64_t v6 = v17;
    if ((unint64_t)v17 >= v18)
    {
      uint64_t v7 = ((uint64_t)v17 - v16) >> 4;
      unint64_t v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = v18 - v16;
      if ((uint64_t)(v18 - v16) >> 3 > v8) {
        unint64_t v8 = v9 >> 3;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v8;
      }
      v19[4] = (void **)&v18;
      uint64_t v11 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
      uint64_t v12 = &v11[2 * v7];
      v19[0] = v11;
      v19[1] = v12;
      v19[3] = &v11[2 * v13];
      *(_OWORD *)uint64_t v12 = v15;
      long long v15 = 0uLL;
      v19[2] = v12 + 2;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v16, v19);
      int v14 = v17;
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v19);
      char v17 = v14;
      if (*((void *)&v15 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v15 + 1));
      }
    }
    else
    {
      _OWORD *v17 = v15;
      char v17 = v6 + 1;
    }
  }
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 248))(*a1, a1 + 2, &v16);
  v19[0] = (void **)&v16;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v19);
}

{
  uint64_t v4;
  uint64_t i;
  _OWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void **v11;
  void **v12;
  uint64_t v13;
  _OWORD *v14;
  long long v15;
  uint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  void **v19[5];

  uint64_t v16 = 0;
  char v17 = 0;
  unint64_t v18 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v16, 0x8F5C28F5C28F5C29 * ((a2[1] - *a2) >> 2));
  uint64_t v4 = *a2;
  for (uint64_t i = a2[1]; v4 != i; v4 += 100)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 16))(&v15);
    Espresso::SerDes::params_io<Espresso::conv3d_params_t>(v15, v4, 1);
    unint64_t v6 = v17;
    if ((unint64_t)v17 >= v18)
    {
      uint64_t v7 = ((uint64_t)v17 - v16) >> 4;
      unint64_t v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = v18 - v16;
      if ((uint64_t)(v18 - v16) >> 3 > v8) {
        unint64_t v8 = v9 >> 3;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v8;
      }
      v19[4] = (void **)&v18;
      uint64_t v11 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
      uint64_t v12 = &v11[2 * v7];
      v19[0] = v11;
      v19[1] = v12;
      v19[3] = &v11[2 * v13];
      *(_OWORD *)uint64_t v12 = v15;
      long long v15 = 0uLL;
      v19[2] = v12 + 2;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v16, v19);
      int v14 = v17;
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v19);
      char v17 = v14;
      if (*((void *)&v15 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v15 + 1));
      }
    }
    else
    {
      _OWORD *v17 = v15;
      char v17 = v6 + 1;
    }
  }
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 248))(*a1, a1 + 2, &v16);
  v19[0] = (void **)&v16;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v19);
}

{
  uint64_t v4;
  uint64_t i;
  _OWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void **v11;
  void **v12;
  uint64_t v13;
  _OWORD *v14;
  long long v15;
  uint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  void **v19[5];

  uint64_t v16 = 0;
  char v17 = 0;
  unint64_t v18 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v16, 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 2));
  uint64_t v4 = *a2;
  for (uint64_t i = a2[1]; v4 != i; v4 += 12)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 16))(&v15);
    Espresso::SerDes::params_io<Espresso::static_quantize_params_t>(v15, v4, 1);
    unint64_t v6 = v17;
    if ((unint64_t)v17 >= v18)
    {
      uint64_t v7 = ((uint64_t)v17 - v16) >> 4;
      unint64_t v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = v18 - v16;
      if ((uint64_t)(v18 - v16) >> 3 > v8) {
        unint64_t v8 = v9 >> 3;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v8;
      }
      v19[4] = (void **)&v18;
      uint64_t v11 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
      uint64_t v12 = &v11[2 * v7];
      v19[0] = v11;
      v19[1] = v12;
      v19[3] = &v11[2 * v13];
      *(_OWORD *)uint64_t v12 = v15;
      long long v15 = 0uLL;
      v19[2] = v12 + 2;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v16, v19);
      int v14 = v17;
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v19);
      char v17 = v14;
      if (*((void *)&v15 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v15 + 1));
      }
    }
    else
    {
      _OWORD *v17 = v15;
      char v17 = v6 + 1;
    }
  }
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 248))(*a1, a1 + 2, &v16);
  v19[0] = (void **)&v16;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v19);
}

{
  uint64_t v4;
  uint64_t i;
  _OWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void **v11;
  void **v12;
  uint64_t v13;
  _OWORD *v14;
  long long v15;
  uint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  void **v19[5];

  uint64_t v16 = 0;
  char v17 = 0;
  unint64_t v18 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v16, (a2[1] - *a2) >> 5);
  uint64_t v4 = *a2;
  for (uint64_t i = a2[1]; v4 != i; v4 += 32)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 16))(&v15);
    Espresso::SerDes::params_io<Espresso::static_dequantize_params_t>(v15, v4, 1);
    unint64_t v6 = v17;
    if ((unint64_t)v17 >= v18)
    {
      uint64_t v7 = ((uint64_t)v17 - v16) >> 4;
      unint64_t v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = v18 - v16;
      if ((uint64_t)(v18 - v16) >> 3 > v8) {
        unint64_t v8 = v9 >> 3;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v8;
      }
      v19[4] = (void **)&v18;
      uint64_t v11 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
      uint64_t v12 = &v11[2 * v7];
      v19[0] = v11;
      v19[1] = v12;
      v19[3] = &v11[2 * v13];
      *(_OWORD *)uint64_t v12 = v15;
      long long v15 = 0uLL;
      v19[2] = v12 + 2;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v16, v19);
      int v14 = v17;
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v19);
      char v17 = v14;
      if (*((void *)&v15 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v15 + 1));
      }
    }
    else
    {
      _OWORD *v17 = v15;
      char v17 = v6 + 1;
    }
  }
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 248))(*a1, a1 + 2, &v16);
  v19[0] = (void **)&v16;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v19);
}

{
  uint64_t v4;
  uint64_t i;
  _OWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void **v11;
  void **v12;
  uint64_t v13;
  _OWORD *v14;
  long long v15;
  uint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  void **v19[5];

  uint64_t v16 = 0;
  char v17 = 0;
  unint64_t v18 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v16, 0x4EC4EC4EC4EC4EC5 * ((a2[1] - *a2) >> 3));
  uint64_t v4 = *a2;
  for (uint64_t i = a2[1]; v4 != i; v4 += 104)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 16))(&v15);
    Espresso::SerDes::params_io<Espresso::general_slice_update_params_t>(v15, v4, 1);
    unint64_t v6 = v17;
    if ((unint64_t)v17 >= v18)
    {
      uint64_t v7 = ((uint64_t)v17 - v16) >> 4;
      unint64_t v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = v18 - v16;
      if ((uint64_t)(v18 - v16) >> 3 > v8) {
        unint64_t v8 = v9 >> 3;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v8;
      }
      v19[4] = (void **)&v18;
      uint64_t v11 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
      uint64_t v12 = &v11[2 * v7];
      v19[0] = v11;
      v19[1] = v12;
      v19[3] = &v11[2 * v13];
      *(_OWORD *)uint64_t v12 = v15;
      long long v15 = 0uLL;
      v19[2] = v12 + 2;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v16, v19);
      int v14 = v17;
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v19);
      char v17 = v14;
      if (*((void *)&v15 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v15 + 1));
      }
    }
    else
    {
      _OWORD *v17 = v15;
      char v17 = v6 + 1;
    }
  }
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 248))(*a1, a1 + 2, &v16);
  v19[0] = (void **)&v16;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v19);
}

{
  uint64_t v4;
  uint64_t i;
  _OWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void **v11;
  void **v12;
  uint64_t v13;
  _OWORD *v14;
  long long v15;
  uint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  void **v19[5];

  uint64_t v16 = 0;
  char v17 = 0;
  unint64_t v18 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v16, 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 5));
  uint64_t v4 = *a2;
  for (uint64_t i = a2[1]; v4 != i; v4 += 96)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 16))(&v15);
    Espresso::SerDes::params_io<Espresso::einsum_params_t>(v15, v4, 1);
    unint64_t v6 = v17;
    if ((unint64_t)v17 >= v18)
    {
      uint64_t v7 = ((uint64_t)v17 - v16) >> 4;
      unint64_t v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = v18 - v16;
      if ((uint64_t)(v18 - v16) >> 3 > v8) {
        unint64_t v8 = v9 >> 3;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v8;
      }
      v19[4] = (void **)&v18;
      uint64_t v11 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
      uint64_t v12 = &v11[2 * v7];
      v19[0] = v11;
      v19[1] = v12;
      v19[3] = &v11[2 * v13];
      *(_OWORD *)uint64_t v12 = v15;
      long long v15 = 0uLL;
      v19[2] = v12 + 2;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v16, v19);
      int v14 = v17;
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v19);
      char v17 = v14;
      if (*((void *)&v15 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v15 + 1));
      }
    }
    else
    {
      _OWORD *v17 = v15;
      char v17 = v6 + 1;
    }
  }
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 248))(*a1, a1 + 2, &v16);
  v19[0] = (void **)&v16;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v19);
}

{
  uint64_t v4;
  uint64_t i;
  _OWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void **v11;
  void **v12;
  uint64_t v13;
  _OWORD *v14;
  long long v15;
  uint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  void **v19[5];

  uint64_t v16 = 0;
  char v17 = 0;
  unint64_t v18 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v16, 0xCCCCCCCCCCCCCCCDLL * ((a2[1] - *a2) >> 4));
  uint64_t v4 = *a2;
  for (uint64_t i = a2[1]; v4 != i; v4 += 80)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 16))(&v15);
    Espresso::SerDes::params_io<Espresso::foreign_network_storage_blob_t>(v15, v4, 1);
    unint64_t v6 = v17;
    if ((unint64_t)v17 >= v18)
    {
      uint64_t v7 = ((uint64_t)v17 - v16) >> 4;
      unint64_t v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = v18 - v16;
      if ((uint64_t)(v18 - v16) >> 3 > v8) {
        unint64_t v8 = v9 >> 3;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v8;
      }
      v19[4] = (void **)&v18;
      uint64_t v11 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
      uint64_t v12 = &v11[2 * v7];
      v19[0] = v11;
      v19[1] = v12;
      v19[3] = &v11[2 * v13];
      *(_OWORD *)uint64_t v12 = v15;
      long long v15 = 0uLL;
      v19[2] = v12 + 2;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v16, v19);
      int v14 = v17;
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v19);
      char v17 = v14;
      if (*((void *)&v15 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v15 + 1));
      }
    }
    else
    {
      _OWORD *v17 = v15;
      char v17 = v6 + 1;
    }
  }
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 248))(*a1, a1 + 2, &v16);
  v19[0] = (void **)&v16;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v19);
}

{
  uint64_t v4;
  uint64_t i;
  _OWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void **v11;
  void **v12;
  uint64_t v13;
  _OWORD *v14;
  long long v15;
  uint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  void **v19[5];

  uint64_t v16 = 0;
  char v17 = 0;
  unint64_t v18 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v16, 0x4EC4EC4EC4EC4EC5 * ((a2[1] - *a2) >> 3));
  uint64_t v4 = *a2;
  for (uint64_t i = a2[1]; v4 != i; v4 += 104)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 16))(&v15);
    Espresso::SerDes::params_io<Espresso::foreign_network_weight_file_t>(v15, v4, 1);
    unint64_t v6 = v17;
    if ((unint64_t)v17 >= v18)
    {
      uint64_t v7 = ((uint64_t)v17 - v16) >> 4;
      unint64_t v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = v18 - v16;
      if ((uint64_t)(v18 - v16) >> 3 > v8) {
        unint64_t v8 = v9 >> 3;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v8;
      }
      v19[4] = (void **)&v18;
      uint64_t v11 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
      uint64_t v12 = &v11[2 * v7];
      v19[0] = v11;
      v19[1] = v12;
      v19[3] = &v11[2 * v13];
      *(_OWORD *)uint64_t v12 = v15;
      long long v15 = 0uLL;
      v19[2] = v12 + 2;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v16, v19);
      int v14 = v17;
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v19);
      char v17 = v14;
      if (*((void *)&v15 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v15 + 1));
      }
    }
    else
    {
      _OWORD *v17 = v15;
      char v17 = v6 + 1;
    }
  }
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 248))(*a1, a1 + 2, &v16);
  v19[0] = (void **)&v16;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v19);
}

{
  uint64_t v4;
  uint64_t i;
  _OWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void **v11;
  void **v12;
  uint64_t v13;
  _OWORD *v14;
  long long v15;
  uint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  void **v19[5];

  uint64_t v16 = 0;
  char v17 = 0;
  unint64_t v18 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v16, 0xAF8AF8AF8AF8AF8BLL * ((a2[1] - *a2) >> 3));
  uint64_t v4 = *a2;
  for (uint64_t i = a2[1]; v4 != i; v4 += 280)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 16))(&v15);
    Espresso::SerDes::params_io<Espresso::tunneled_ane_op_params_t>(v15, v4, 1);
    unint64_t v6 = v17;
    if ((unint64_t)v17 >= v18)
    {
      uint64_t v7 = ((uint64_t)v17 - v16) >> 4;
      unint64_t v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = v18 - v16;
      if ((uint64_t)(v18 - v16) >> 3 > v8) {
        unint64_t v8 = v9 >> 3;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v8;
      }
      v19[4] = (void **)&v18;
      uint64_t v11 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
      uint64_t v12 = &v11[2 * v7];
      v19[0] = v11;
      v19[1] = v12;
      v19[3] = &v11[2 * v13];
      *(_OWORD *)uint64_t v12 = v15;
      long long v15 = 0uLL;
      v19[2] = v12 + 2;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v16, v19);
      int v14 = v17;
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v19);
      char v17 = v14;
      if (*((void *)&v15 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v15 + 1));
      }
    }
    else
    {
      _OWORD *v17 = v15;
      char v17 = v6 + 1;
    }
  }
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 248))(*a1, a1 + 2, &v16);
  v19[0] = (void **)&v16;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v19);
}

{
  uint64_t v4;
  uint64_t i;
  _OWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void **v11;
  void **v12;
  uint64_t v13;
  _OWORD *v14;
  long long v15;
  uint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  void **v19[5];

  uint64_t v16 = 0;
  char v17 = 0;
  unint64_t v18 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v16, (a2[1] - *a2) >> 5);
  uint64_t v4 = *a2;
  for (uint64_t i = a2[1]; v4 != i; v4 += 32)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 16))(&v15);
    Espresso::SerDes::params_io<Espresso::tunneled_unit_bottom_layout_t>(v15, v4, 1);
    unint64_t v6 = v17;
    if ((unint64_t)v17 >= v18)
    {
      uint64_t v7 = ((uint64_t)v17 - v16) >> 4;
      unint64_t v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = v18 - v16;
      if ((uint64_t)(v18 - v16) >> 3 > v8) {
        unint64_t v8 = v9 >> 3;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v8;
      }
      v19[4] = (void **)&v18;
      uint64_t v11 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
      uint64_t v12 = &v11[2 * v7];
      v19[0] = v11;
      v19[1] = v12;
      v19[3] = &v11[2 * v13];
      *(_OWORD *)uint64_t v12 = v15;
      long long v15 = 0uLL;
      v19[2] = v12 + 2;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v16, v19);
      int v14 = v17;
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v19);
      char v17 = v14;
      if (*((void *)&v15 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v15 + 1));
      }
    }
    else
    {
      _OWORD *v17 = v15;
      char v17 = v6 + 1;
    }
  }
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 248))(*a1, a1 + 2, &v16);
  v19[0] = (void **)&v16;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v19);
}

{
  uint64_t v4;
  uint64_t i;
  _OWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void **v11;
  void **v12;
  uint64_t v13;
  _OWORD *v14;
  long long v15;
  uint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  void **v19[5];

  uint64_t v16 = 0;
  char v17 = 0;
  unint64_t v18 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v16, (a2[1] - *a2) >> 5);
  uint64_t v4 = *a2;
  for (uint64_t i = a2[1]; v4 != i; v4 += 32)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 16))(&v15);
    Espresso::SerDes::params_io<Espresso::tunneled_unit_top_layout_t>(v15, v4, 1);
    unint64_t v6 = v17;
    if ((unint64_t)v17 >= v18)
    {
      uint64_t v7 = ((uint64_t)v17 - v16) >> 4;
      unint64_t v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = v18 - v16;
      if ((uint64_t)(v18 - v16) >> 3 > v8) {
        unint64_t v8 = v9 >> 3;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v8;
      }
      v19[4] = (void **)&v18;
      uint64_t v11 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
      uint64_t v12 = &v11[2 * v7];
      v19[0] = v11;
      v19[1] = v12;
      v19[3] = &v11[2 * v13];
      *(_OWORD *)uint64_t v12 = v15;
      long long v15 = 0uLL;
      v19[2] = v12 + 2;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v16, v19);
      int v14 = v17;
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v19);
      char v17 = v14;
      if (*((void *)&v15 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v15 + 1));
      }
    }
    else
    {
      _OWORD *v17 = v15;
      char v17 = v6 + 1;
    }
  }
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 248))(*a1, a1 + 2, &v16);
  v19[0] = (void **)&v16;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v19);
}

{
  uint64_t v4;
  uint64_t i;
  _OWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void **v11;
  void **v12;
  uint64_t v13;
  _OWORD *v14;
  long long v15;
  uint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  void **v19[5];

  uint64_t v16 = 0;
  char v17 = 0;
  unint64_t v18 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v16, 0x2E8BA2E8BA2E8BA3 * ((a2[1] - *a2) >> 4));
  uint64_t v4 = *a2;
  for (uint64_t i = a2[1]; v4 != i; v4 += 176)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 16))(&v15);
    Espresso::SerDes::params_io<Espresso::tunneled_ane_unit_params_t>(v15, v4, 1);
    unint64_t v6 = v17;
    if ((unint64_t)v17 >= v18)
    {
      uint64_t v7 = ((uint64_t)v17 - v16) >> 4;
      unint64_t v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = v18 - v16;
      if ((uint64_t)(v18 - v16) >> 3 > v8) {
        unint64_t v8 = v9 >> 3;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v8;
      }
      v19[4] = (void **)&v18;
      uint64_t v11 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
      uint64_t v12 = &v11[2 * v7];
      v19[0] = v11;
      v19[1] = v12;
      v19[3] = &v11[2 * v13];
      *(_OWORD *)uint64_t v12 = v15;
      long long v15 = 0uLL;
      v19[2] = v12 + 2;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v16, v19);
      int v14 = v17;
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v19);
      char v17 = v14;
      if (*((void *)&v15 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v15 + 1));
      }
    }
    else
    {
      _OWORD *v17 = v15;
      char v17 = v6 + 1;
    }
  }
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 248))(*a1, a1 + 2, &v16);
  v19[0] = (void **)&v16;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v19);
}

{
  uint64_t v4;
  uint64_t i;
  _OWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void **v11;
  void **v12;
  uint64_t v13;
  _OWORD *v14;
  long long v15;
  uint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  void **v19[5];

  uint64_t v16 = 0;
  char v17 = 0;
  unint64_t v18 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v16, 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 3));
  uint64_t v4 = *a2;
  for (uint64_t i = a2[1]; v4 != i; v4 += 56)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 16))(&v15);
    Espresso::SerDes::params_io<Espresso::brick_params>(v15, v4, 1);
    unint64_t v6 = v17;
    if ((unint64_t)v17 >= v18)
    {
      uint64_t v7 = ((uint64_t)v17 - v16) >> 4;
      unint64_t v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = v18 - v16;
      if ((uint64_t)(v18 - v16) >> 3 > v8) {
        unint64_t v8 = v9 >> 3;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v8;
      }
      v19[4] = (void **)&v18;
      uint64_t v11 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
      uint64_t v12 = &v11[2 * v7];
      v19[0] = v11;
      v19[1] = v12;
      v19[3] = &v11[2 * v13];
      *(_OWORD *)uint64_t v12 = v15;
      long long v15 = 0uLL;
      v19[2] = v12 + 2;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v16, v19);
      int v14 = v17;
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v19);
      char v17 = v14;
      if (*((void *)&v15 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v15 + 1));
      }
    }
    else
    {
      _OWORD *v17 = v15;
      char v17 = v6 + 1;
    }
  }
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 248))(*a1, a1 + 2, &v16);
  v19[0] = (void **)&v16;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v19);
}

void sub_192AEDD44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  a9 = (void **)&a11;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::operator>>(uint64_t a1, _DWORD *a2)
{
}

{
  Espresso::SerDes::params_io<Espresso::sequence_repeat_params>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::fused_kernel_parameters>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::load_constant_params>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::context_transfer_params>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::tile_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::rnn_params>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::transpose_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::flatten_params>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::crop_params>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::space_to_depth_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::slice_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::cast_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::dynamic_quantize_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::quantized_gather_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::cf_jump_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::get_shape_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::gather_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::cf_loop_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::cf_for_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::copy_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::expand_dims_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::multinomial_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::transplant_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::stack_nd_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::split_nd_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::softmax_nd_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::sliding_windows_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::reverse_seq_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::sparse_inner_product_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::local_correlation_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::bahdanau_attention_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::slice_update_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::resize_nearest_neighbor_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::tensor_shape_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::foreign_network_rep_blob_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::furthest_point_sampling_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::degamma_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::linear_quantize_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::linear_dequantize_params_t>(a1, a2, 0);
}

void Espresso::SerDes::operator>>(void *a1, _DWORD *a2)
{
  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 120))(&v4);
    Espresso::SerDes::params_io<Espresso::sequence_concat_params>(v4, a2, 0);
    if (v5) {
      nitro::nitro_function::nitro_function(v5);
    }
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 120))(&v4);
    Espresso::SerDes::params_io<Espresso::sequence_repeat_params>(v4, a2, 0);
    if (v5) {
      nitro::nitro_function::nitro_function(v5);
    }
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 120))(&v4);
    Espresso::SerDes::params_io<Espresso::fused_kernel_parameters>(v4, a2, 0);
    if (v5) {
      nitro::nitro_function::nitro_function(v5);
    }
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 120))(&v4);
    Espresso::SerDes::params_io<Espresso::load_constant_params>(v4, a2, 0);
    if (v5) {
      nitro::nitro_function::nitro_function(v5);
    }
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 120))(&v4);
    Espresso::SerDes::params_io<Espresso::context_transfer_params>(v4, a2, 0);
    if (v5) {
      nitro::nitro_function::nitro_function(v5);
    }
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 120))(&v4);
    Espresso::SerDes::params_io<Espresso::tile_params_t>(v4, a2, 0);
    if (v5) {
      nitro::nitro_function::nitro_function(v5);
    }
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 120))(&v4);
    Espresso::SerDes::params_io<Espresso::rnn_params>(v4, a2, 0);
    if (v5) {
      nitro::nitro_function::nitro_function(v5);
    }
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 120))(&v4);
    Espresso::SerDes::params_io<Espresso::transpose_params_t>(v4, a2, 0);
    if (v5) {
      nitro::nitro_function::nitro_function(v5);
    }
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 120))(&v4);
    Espresso::SerDes::params_io<Espresso::flatten_params>(v4, a2, 0);
    if (v5) {
      nitro::nitro_function::nitro_function(v5);
    }
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 120))(&v4);
    Espresso::SerDes::params_io<Espresso::crop_params>(v4, a2, 0);
    if (v5) {
      nitro::nitro_function::nitro_function(v5);
    }
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 120))(&v4);
    Espresso::SerDes::params_io<Espresso::space_to_depth_params_t>(v4, a2, 0);
    if (v5) {
      nitro::nitro_function::nitro_function(v5);
    }
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 120))(&v4);
    Espresso::SerDes::params_io<Espresso::slice_params_t>(v4, a2, 0);
    if (v5) {
      nitro::nitro_function::nitro_function(v5);
    }
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 120))(&v4);
    Espresso::SerDes::params_io<Espresso::cast_params_t>(v4, a2, 0);
    if (v5) {
      nitro::nitro_function::nitro_function(v5);
    }
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 120))(&v4);
    Espresso::SerDes::params_io<Espresso::dynamic_quantize_params_t>(v4, a2, 0);
    if (v5) {
      nitro::nitro_function::nitro_function(v5);
    }
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 120))(&v4);
    Espresso::SerDes::params_io<Espresso::quantized_gather_params_t>(v4, a2, 0);
    if (v5) {
      nitro::nitro_function::nitro_function(v5);
    }
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 120))(&v4);
    Espresso::SerDes::params_io<Espresso::cf_jump_params_t>(v4, a2, 0);
    if (v5) {
      nitro::nitro_function::nitro_function(v5);
    }
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 120))(&v4);
    Espresso::SerDes::params_io<Espresso::get_shape_params_t>(v4, a2, 0);
    if (v5) {
      nitro::nitro_function::nitro_function(v5);
    }
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 120))(&v4);
    Espresso::SerDes::params_io<Espresso::gather_params_t>(v4, a2, 0);
    if (v5) {
      nitro::nitro_function::nitro_function(v5);
    }
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 120))(&v4);
    Espresso::SerDes::params_io<Espresso::cf_loop_params_t>(v4, a2, 0);
    if (v5) {
      nitro::nitro_function::nitro_function(v5);
    }
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 120))(&v4);
    Espresso::SerDes::params_io<Espresso::cf_for_params_t>(v4, a2, 0);
    if (v5) {
      nitro::nitro_function::nitro_function(v5);
    }
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 120))(&v4);
    Espresso::SerDes::params_io<Espresso::copy_params_t>(v4, a2, 0);
    if (v5) {
      nitro::nitro_function::nitro_function(v5);
    }
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 120))(&v4);
    Espresso::SerDes::params_io<Espresso::expand_dims_params_t>(v4, a2, 0);
    if (v5) {
      nitro::nitro_function::nitro_function(v5);
    }
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 120))(&v4);
    Espresso::SerDes::params_io<Espresso::multinomial_params_t>(v4, a2, 0);
    if (v5) {
      nitro::nitro_function::nitro_function(v5);
    }
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 120))(&v4);
    Espresso::SerDes::params_io<Espresso::transplant_params_t>(v4, a2, 0);
    if (v5) {
      nitro::nitro_function::nitro_function(v5);
    }
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 120))(&v4);
    Espresso::SerDes::params_io<Espresso::stack_nd_params_t>(v4, a2, 0);
    if (v5) {
      nitro::nitro_function::nitro_function(v5);
    }
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 120))(&v4);
    Espresso::SerDes::params_io<Espresso::split_nd_params_t>(v4, a2, 0);
    if (v5) {
      nitro::nitro_function::nitro_function(v5);
    }
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 120))(&v4);
    Espresso::SerDes::params_io<Espresso::softmax_nd_params_t>(v4, a2, 0);
    if (v5) {
      nitro::nitro_function::nitro_function(v5);
    }
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 120))(&v4);
    Espresso::SerDes::params_io<Espresso::sliding_windows_params_t>(v4, a2, 0);
    if (v5) {
      nitro::nitro_function::nitro_function(v5);
    }
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 120))(&v4);
    Espresso::SerDes::params_io<Espresso::reverse_seq_params_t>(v4, a2, 0);
    if (v5) {
      nitro::nitro_function::nitro_function(v5);
    }
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 120))(&v4);
    Espresso::SerDes::params_io<Espresso::sparse_inner_product_params_t>(v4, a2, 0);
    if (v5) {
      nitro::nitro_function::nitro_function(v5);
    }
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 120))(&v4);
    Espresso::SerDes::params_io<Espresso::local_correlation_params_t>(v4, a2, 0);
    if (v5) {
      nitro::nitro_function::nitro_function(v5);
    }
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 120))(&v4);
    Espresso::SerDes::params_io<Espresso::bahdanau_attention_params_t>(v4, a2, 0);
    if (v5) {
      nitro::nitro_function::nitro_function(v5);
    }
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 120))(&v4);
    Espresso::SerDes::params_io<Espresso::slice_update_params_t>(v4, a2, 0);
    if (v5) {
      nitro::nitro_function::nitro_function(v5);
    }
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 120))(&v4);
    Espresso::SerDes::params_io<Espresso::resize_nearest_neighbor_params_t>(v4, a2, 0);
    if (v5) {
      nitro::nitro_function::nitro_function(v5);
    }
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 120))(&v4);
    Espresso::SerDes::params_io<Espresso::tensor_shape_t>(v4, a2, 0);
    if (v5) {
      nitro::nitro_function::nitro_function(v5);
    }
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 120))(&v4);
    Espresso::SerDes::params_io<Espresso::foreign_network_rep_blob_t>(v4, a2, 0);
    if (v5) {
      nitro::nitro_function::nitro_function(v5);
    }
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 120))(&v4);
    Espresso::SerDes::params_io<Espresso::furthest_point_sampling_params_t>(v4, a2, 0);
    if (v5) {
      nitro::nitro_function::nitro_function(v5);
    }
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 120))(&v4);
    Espresso::SerDes::params_io<Espresso::degamma_params_t>(v4, a2, 0);
    if (v5) {
      nitro::nitro_function::nitro_function(v5);
    }
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 120))(&v4);
    Espresso::SerDes::params_io<Espresso::linear_quantize_params_t>(v4, a2, 0);
    if (v5) {
      nitro::nitro_function::nitro_function(v5);
    }
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 120))(&v4);
    Espresso::SerDes::params_io<Espresso::linear_dequantize_params_t>(v4, a2, 0);
    if (v5) {
      nitro::nitro_function::nitro_function(v5);
    }
  }
}

void sub_192AEDE38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_192AEDFFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::operator<<(uint64_t a1, _DWORD *a2)
{
}

{
  Espresso::SerDes::params_io<Espresso::sequence_repeat_params>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::fused_kernel_parameters>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::load_constant_params>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::context_transfer_params>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::tile_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::rnn_params>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::transpose_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::flatten_params>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::crop_params>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::space_to_depth_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::slice_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::cast_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::dynamic_quantize_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::quantized_gather_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::cf_jump_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::get_shape_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::gather_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::cf_loop_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::cf_for_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::copy_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::expand_dims_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::multinomial_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::transplant_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::stack_nd_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::split_nd_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::softmax_nd_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::sliding_windows_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::reverse_seq_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::sparse_inner_product_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::local_correlation_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::bahdanau_attention_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::slice_update_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::resize_nearest_neighbor_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::tensor_shape_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::foreign_network_rep_blob_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::furthest_point_sampling_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::degamma_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::linear_quantize_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::linear_dequantize_params_t>(a1, a2, 1);
}

void Espresso::SerDes::operator<<(void *a1, _DWORD *a2)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 16))(&v4);
  Espresso::SerDes::params_io<Espresso::sequence_concat_params>(v4, a2, 1);
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 240))(*a1, a1 + 2, &v4);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 16))(&v4);
  Espresso::SerDes::params_io<Espresso::sequence_repeat_params>(v4, a2, 1);
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 240))(*a1, a1 + 2, &v4);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 16))(&v4);
  Espresso::SerDes::params_io<Espresso::fused_kernel_parameters>(v4, a2, 1);
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 240))(*a1, a1 + 2, &v4);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 16))(&v4);
  Espresso::SerDes::params_io<Espresso::load_constant_params>(v4, a2, 1);
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 240))(*a1, a1 + 2, &v4);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 16))(&v4);
  Espresso::SerDes::params_io<Espresso::context_transfer_params>(v4, a2, 1);
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 240))(*a1, a1 + 2, &v4);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 16))(&v4);
  Espresso::SerDes::params_io<Espresso::tile_params_t>(v4, a2, 1);
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 240))(*a1, a1 + 2, &v4);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 16))(&v4);
  Espresso::SerDes::params_io<Espresso::rnn_params>(v4, a2, 1);
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 240))(*a1, a1 + 2, &v4);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 16))(&v4);
  Espresso::SerDes::params_io<Espresso::transpose_params_t>(v4, a2, 1);
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 240))(*a1, a1 + 2, &v4);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 16))(&v4);
  Espresso::SerDes::params_io<Espresso::flatten_params>(v4, a2, 1);
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 240))(*a1, a1 + 2, &v4);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 16))(&v4);
  Espresso::SerDes::params_io<Espresso::crop_params>(v4, a2, 1);
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 240))(*a1, a1 + 2, &v4);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 16))(&v4);
  Espresso::SerDes::params_io<Espresso::space_to_depth_params_t>(v4, a2, 1);
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 240))(*a1, a1 + 2, &v4);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 16))(&v4);
  Espresso::SerDes::params_io<Espresso::slice_params_t>(v4, a2, 1);
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 240))(*a1, a1 + 2, &v4);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 16))(&v4);
  Espresso::SerDes::params_io<Espresso::cast_params_t>(v4, a2, 1);
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 240))(*a1, a1 + 2, &v4);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 16))(&v4);
  Espresso::SerDes::params_io<Espresso::dynamic_quantize_params_t>(v4, a2, 1);
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 240))(*a1, a1 + 2, &v4);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 16))(&v4);
  Espresso::SerDes::params_io<Espresso::quantized_gather_params_t>(v4, a2, 1);
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 240))(*a1, a1 + 2, &v4);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 16))(&v4);
  Espresso::SerDes::params_io<Espresso::cf_jump_params_t>(v4, a2, 1);
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 240))(*a1, a1 + 2, &v4);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 16))(&v4);
  Espresso::SerDes::params_io<Espresso::get_shape_params_t>(v4, a2, 1);
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 240))(*a1, a1 + 2, &v4);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 16))(&v4);
  Espresso::SerDes::params_io<Espresso::gather_params_t>(v4, a2, 1);
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 240))(*a1, a1 + 2, &v4);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 16))(&v4);
  Espresso::SerDes::params_io<Espresso::cf_loop_params_t>(v4, a2, 1);
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 240))(*a1, a1 + 2, &v4);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 16))(&v4);
  Espresso::SerDes::params_io<Espresso::cf_for_params_t>(v4, a2, 1);
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 240))(*a1, a1 + 2, &v4);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 16))(&v4);
  Espresso::SerDes::params_io<Espresso::copy_params_t>(v4, a2, 1);
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 240))(*a1, a1 + 2, &v4);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 16))(&v4);
  Espresso::SerDes::params_io<Espresso::expand_dims_params_t>(v4, a2, 1);
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 240))(*a1, a1 + 2, &v4);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 16))(&v4);
  Espresso::SerDes::params_io<Espresso::multinomial_params_t>(v4, a2, 1);
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 240))(*a1, a1 + 2, &v4);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 16))(&v4);
  Espresso::SerDes::params_io<Espresso::transplant_params_t>(v4, a2, 1);
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 240))(*a1, a1 + 2, &v4);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 16))(&v4);
  Espresso::SerDes::params_io<Espresso::stack_nd_params_t>(v4, a2, 1);
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 240))(*a1, a1 + 2, &v4);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 16))(&v4);
  Espresso::SerDes::params_io<Espresso::split_nd_params_t>(v4, a2, 1);
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 240))(*a1, a1 + 2, &v4);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 16))(&v4);
  Espresso::SerDes::params_io<Espresso::softmax_nd_params_t>(v4, a2, 1);
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 240))(*a1, a1 + 2, &v4);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 16))(&v4);
  Espresso::SerDes::params_io<Espresso::sliding_windows_params_t>(v4, a2, 1);
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 240))(*a1, a1 + 2, &v4);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 16))(&v4);
  Espresso::SerDes::params_io<Espresso::reverse_seq_params_t>(v4, a2, 1);
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 240))(*a1, a1 + 2, &v4);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 16))(&v4);
  Espresso::SerDes::params_io<Espresso::sparse_inner_product_params_t>(v4, a2, 1);
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 240))(*a1, a1 + 2, &v4);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 16))(&v4);
  Espresso::SerDes::params_io<Espresso::local_correlation_params_t>(v4, a2, 1);
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 240))(*a1, a1 + 2, &v4);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 16))(&v4);
  Espresso::SerDes::params_io<Espresso::bahdanau_attention_params_t>(v4, a2, 1);
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 240))(*a1, a1 + 2, &v4);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 16))(&v4);
  Espresso::SerDes::params_io<Espresso::slice_update_params_t>(v4, a2, 1);
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 240))(*a1, a1 + 2, &v4);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 16))(&v4);
  Espresso::SerDes::params_io<Espresso::resize_nearest_neighbor_params_t>(v4, a2, 1);
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 240))(*a1, a1 + 2, &v4);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 16))(&v4);
  Espresso::SerDes::params_io<Espresso::tensor_shape_t>(v4, a2, 1);
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 240))(*a1, a1 + 2, &v4);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 16))(&v4);
  Espresso::SerDes::params_io<Espresso::foreign_network_rep_blob_t>(v4, a2, 1);
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 240))(*a1, a1 + 2, &v4);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 16))(&v4);
  Espresso::SerDes::params_io<Espresso::furthest_point_sampling_params_t>(v4, a2, 1);
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 240))(*a1, a1 + 2, &v4);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 16))(&v4);
  Espresso::SerDes::params_io<Espresso::degamma_params_t>(v4, a2, 1);
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 240))(*a1, a1 + 2, &v4);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 16))(&v4);
  Espresso::SerDes::params_io<Espresso::linear_quantize_params_t>(v4, a2, 1);
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 240))(*a1, a1 + 2, &v4);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
}

{
  uint64_t v4;
  std::__shared_weak_count *v5;

  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 16))(&v4);
  Espresso::SerDes::params_io<Espresso::linear_dequantize_params_t>(v4, a2, 1);
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 240))(*a1, a1 + 2, &v4);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
}

void sub_192AEE0C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::operator<<(void *a1, void *a2)
{
  uint64_t v16 = 0;
  char v17 = 0;
  unint64_t v18 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v16, (uint64_t)(a2[1] - *a2) >> 2);
  uint64_t v4 = (_DWORD *)*a2;
  for (uint64_t i = (_DWORD *)a2[1]; v4 != i; ++v4)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 16))(&v15);
    Espresso::SerDes::params_io<Espresso::sequence_concat_params>(v15, v4, 1);
    unint64_t v6 = v17;
    if ((unint64_t)v17 >= v18)
    {
      uint64_t v7 = ((uint64_t)v17 - v16) >> 4;
      unint64_t v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = v18 - v16;
      if ((uint64_t)(v18 - v16) >> 3 > v8) {
        unint64_t v8 = v9 >> 3;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v8;
      }
      v19[4] = (void **)&v18;
      uint64_t v11 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
      uint64_t v12 = &v11[2 * v7];
      v19[0] = v11;
      v19[1] = v12;
      v19[3] = &v11[2 * v13];
      *(_OWORD *)uint64_t v12 = v15;
      long long v15 = 0uLL;
      v19[2] = v12 + 2;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v16, v19);
      int v14 = v17;
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v19);
      char v17 = v14;
      if (*((void *)&v15 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v15 + 1));
      }
    }
    else
    {
      _OWORD *v17 = v15;
      char v17 = v6 + 1;
    }
  }
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 248))(*a1, a1 + 2, &v16);
  v19[0] = (void **)&v16;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v19);
}

{
  _DWORD *v4;
  _DWORD *i;
  _OWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void **v11;
  void **v12;
  uint64_t v13;
  _OWORD *v14;
  long long v15;
  uint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  void **v19[5];

  uint64_t v16 = 0;
  char v17 = 0;
  unint64_t v18 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v16, (uint64_t)(a2[1] - *a2) >> 2);
  uint64_t v4 = (_DWORD *)*a2;
  for (uint64_t i = (_DWORD *)a2[1]; v4 != i; ++v4)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 16))(&v15);
    Espresso::SerDes::params_io<Espresso::sequence_repeat_params>(v15, v4, 1);
    unint64_t v6 = v17;
    if ((unint64_t)v17 >= v18)
    {
      uint64_t v7 = ((uint64_t)v17 - v16) >> 4;
      unint64_t v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = v18 - v16;
      if ((uint64_t)(v18 - v16) >> 3 > v8) {
        unint64_t v8 = v9 >> 3;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v8;
      }
      v19[4] = (void **)&v18;
      uint64_t v11 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
      uint64_t v12 = &v11[2 * v7];
      v19[0] = v11;
      v19[1] = v12;
      v19[3] = &v11[2 * v13];
      *(_OWORD *)uint64_t v12 = v15;
      long long v15 = 0uLL;
      v19[2] = v12 + 2;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v16, v19);
      int v14 = v17;
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v19);
      char v17 = v14;
      if (*((void *)&v15 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v15 + 1));
      }
    }
    else
    {
      _OWORD *v17 = v15;
      char v17 = v6 + 1;
    }
  }
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 248))(*a1, a1 + 2, &v16);
  v19[0] = (void **)&v16;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v19);
}

{
  _DWORD *v4;
  _DWORD *i;
  _OWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void **v11;
  void **v12;
  uint64_t v13;
  _OWORD *v14;
  long long v15;
  uint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  void **v19[5];

  uint64_t v16 = 0;
  char v17 = 0;
  unint64_t v18 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v16, (uint64_t)(a2[1] - *a2) >> 4);
  uint64_t v4 = (_DWORD *)*a2;
  for (uint64_t i = (_DWORD *)a2[1]; v4 != i; v4 += 4)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 16))(&v15);
    Espresso::SerDes::params_io<Espresso::fused_kernel_parameters>(v15, v4, 1);
    unint64_t v6 = v17;
    if ((unint64_t)v17 >= v18)
    {
      uint64_t v7 = ((uint64_t)v17 - v16) >> 4;
      unint64_t v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = v18 - v16;
      if ((uint64_t)(v18 - v16) >> 3 > v8) {
        unint64_t v8 = v9 >> 3;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v8;
      }
      v19[4] = (void **)&v18;
      uint64_t v11 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
      uint64_t v12 = &v11[2 * v7];
      v19[0] = v11;
      v19[1] = v12;
      v19[3] = &v11[2 * v13];
      *(_OWORD *)uint64_t v12 = v15;
      long long v15 = 0uLL;
      v19[2] = v12 + 2;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v16, v19);
      int v14 = v17;
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v19);
      char v17 = v14;
      if (*((void *)&v15 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v15 + 1));
      }
    }
    else
    {
      _OWORD *v17 = v15;
      char v17 = v6 + 1;
    }
  }
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 248))(*a1, a1 + 2, &v16);
  v19[0] = (void **)&v16;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v19);
}

{
  _DWORD *v4;
  _DWORD *i;
  _OWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void **v11;
  void **v12;
  uint64_t v13;
  _OWORD *v14;
  long long v15;
  uint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  void **v19[5];

  uint64_t v16 = 0;
  char v17 = 0;
  unint64_t v18 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v16, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3));
  uint64_t v4 = (_DWORD *)*a2;
  for (uint64_t i = (_DWORD *)a2[1]; v4 != i; v4 += 6)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 16))(&v15);
    Espresso::SerDes::params_io<Espresso::load_constant_params>(v15, v4, 1);
    unint64_t v6 = v17;
    if ((unint64_t)v17 >= v18)
    {
      uint64_t v7 = ((uint64_t)v17 - v16) >> 4;
      unint64_t v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = v18 - v16;
      if ((uint64_t)(v18 - v16) >> 3 > v8) {
        unint64_t v8 = v9 >> 3;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v8;
      }
      v19[4] = (void **)&v18;
      uint64_t v11 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
      uint64_t v12 = &v11[2 * v7];
      v19[0] = v11;
      v19[1] = v12;
      v19[3] = &v11[2 * v13];
      *(_OWORD *)uint64_t v12 = v15;
      long long v15 = 0uLL;
      v19[2] = v12 + 2;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v16, v19);
      int v14 = v17;
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v19);
      char v17 = v14;
      if (*((void *)&v15 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v15 + 1));
      }
    }
    else
    {
      _OWORD *v17 = v15;
      char v17 = v6 + 1;
    }
  }
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 248))(*a1, a1 + 2, &v16);
  v19[0] = (void **)&v16;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v19);
}

{
  _DWORD *v4;
  _DWORD *i;
  _OWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void **v11;
  void **v12;
  uint64_t v13;
  _OWORD *v14;
  long long v15;
  uint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  void **v19[5];

  uint64_t v16 = 0;
  char v17 = 0;
  unint64_t v18 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v16, (uint64_t)(a2[1] - *a2) >> 5);
  uint64_t v4 = (_DWORD *)*a2;
  for (uint64_t i = (_DWORD *)a2[1]; v4 != i; v4 += 8)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 16))(&v15);
    Espresso::SerDes::params_io<Espresso::context_transfer_params>(v15, v4, 1);
    unint64_t v6 = v17;
    if ((unint64_t)v17 >= v18)
    {
      uint64_t v7 = ((uint64_t)v17 - v16) >> 4;
      unint64_t v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = v18 - v16;
      if ((uint64_t)(v18 - v16) >> 3 > v8) {
        unint64_t v8 = v9 >> 3;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v8;
      }
      v19[4] = (void **)&v18;
      uint64_t v11 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
      uint64_t v12 = &v11[2 * v7];
      v19[0] = v11;
      v19[1] = v12;
      v19[3] = &v11[2 * v13];
      *(_OWORD *)uint64_t v12 = v15;
      long long v15 = 0uLL;
      v19[2] = v12 + 2;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v16, v19);
      int v14 = v17;
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v19);
      char v17 = v14;
      if (*((void *)&v15 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v15 + 1));
      }
    }
    else
    {
      _OWORD *v17 = v15;
      char v17 = v6 + 1;
    }
  }
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 248))(*a1, a1 + 2, &v16);
  v19[0] = (void **)&v16;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v19);
}

{
  _DWORD *v4;
  _DWORD *i;
  _OWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void **v11;
  void **v12;
  uint64_t v13;
  _OWORD *v14;
  long long v15;
  uint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  void **v19[5];

  uint64_t v16 = 0;
  char v17 = 0;
  unint64_t v18 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v16, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2[1] - *a2) >> 2));
  uint64_t v4 = (_DWORD *)*a2;
  for (uint64_t i = (_DWORD *)a2[1]; v4 != i; v4 += 5)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 16))(&v15);
    Espresso::SerDes::params_io<Espresso::tile_params_t>(v15, v4, 1);
    unint64_t v6 = v17;
    if ((unint64_t)v17 >= v18)
    {
      uint64_t v7 = ((uint64_t)v17 - v16) >> 4;
      unint64_t v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = v18 - v16;
      if ((uint64_t)(v18 - v16) >> 3 > v8) {
        unint64_t v8 = v9 >> 3;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v8;
      }
      v19[4] = (void **)&v18;
      uint64_t v11 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
      uint64_t v12 = &v11[2 * v7];
      v19[0] = v11;
      v19[1] = v12;
      v19[3] = &v11[2 * v13];
      *(_OWORD *)uint64_t v12 = v15;
      long long v15 = 0uLL;
      v19[2] = v12 + 2;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v16, v19);
      int v14 = v17;
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v19);
      char v17 = v14;
      if (*((void *)&v15 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v15 + 1));
      }
    }
    else
    {
      _OWORD *v17 = v15;
      char v17 = v6 + 1;
    }
  }
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 248))(*a1, a1 + 2, &v16);
  v19[0] = (void **)&v16;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v19);
}

{
  _DWORD *v4;
  _DWORD *i;
  _OWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void **v11;
  void **v12;
  uint64_t v13;
  _OWORD *v14;
  long long v15;
  uint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  void **v19[5];

  uint64_t v16 = 0;
  char v17 = 0;
  unint64_t v18 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v16, (uint64_t)(a2[1] - *a2) >> 6);
  uint64_t v4 = (_DWORD *)*a2;
  for (uint64_t i = (_DWORD *)a2[1]; v4 != i; v4 += 16)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 16))(&v15);
    Espresso::SerDes::params_io<Espresso::rnn_params>(v15, v4, 1);
    unint64_t v6 = v17;
    if ((unint64_t)v17 >= v18)
    {
      uint64_t v7 = ((uint64_t)v17 - v16) >> 4;
      unint64_t v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = v18 - v16;
      if ((uint64_t)(v18 - v16) >> 3 > v8) {
        unint64_t v8 = v9 >> 3;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v8;
      }
      v19[4] = (void **)&v18;
      uint64_t v11 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
      uint64_t v12 = &v11[2 * v7];
      v19[0] = v11;
      v19[1] = v12;
      v19[3] = &v11[2 * v13];
      *(_OWORD *)uint64_t v12 = v15;
      long long v15 = 0uLL;
      v19[2] = v12 + 2;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v16, v19);
      int v14 = v17;
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v19);
      char v17 = v14;
      if (*((void *)&v15 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v15 + 1));
      }
    }
    else
    {
      _OWORD *v17 = v15;
      char v17 = v6 + 1;
    }
  }
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 248))(*a1, a1 + 2, &v16);
  v19[0] = (void **)&v16;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v19);
}

{
  _DWORD *v4;
  _DWORD *i;
  _OWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void **v11;
  void **v12;
  uint64_t v13;
  _OWORD *v14;
  long long v15;
  uint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  void **v19[5];

  uint64_t v16 = 0;
  char v17 = 0;
  unint64_t v18 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v16, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2[1] - *a2) >> 2));
  uint64_t v4 = (_DWORD *)*a2;
  for (uint64_t i = (_DWORD *)a2[1]; v4 != i; v4 += 5)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 16))(&v15);
    Espresso::SerDes::params_io<Espresso::transpose_params_t>(v15, v4, 1);
    unint64_t v6 = v17;
    if ((unint64_t)v17 >= v18)
    {
      uint64_t v7 = ((uint64_t)v17 - v16) >> 4;
      unint64_t v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = v18 - v16;
      if ((uint64_t)(v18 - v16) >> 3 > v8) {
        unint64_t v8 = v9 >> 3;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v8;
      }
      v19[4] = (void **)&v18;
      uint64_t v11 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
      uint64_t v12 = &v11[2 * v7];
      v19[0] = v11;
      v19[1] = v12;
      v19[3] = &v11[2 * v13];
      *(_OWORD *)uint64_t v12 = v15;
      long long v15 = 0uLL;
      v19[2] = v12 + 2;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v16, v19);
      int v14 = v17;
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v19);
      char v17 = v14;
      if (*((void *)&v15 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v15 + 1));
      }
    }
    else
    {
      _OWORD *v17 = v15;
      char v17 = v6 + 1;
    }
  }
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 248))(*a1, a1 + 2, &v16);
  v19[0] = (void **)&v16;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v19);
}

{
  _DWORD *v4;
  _DWORD *i;
  _OWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void **v11;
  void **v12;
  uint64_t v13;
  _OWORD *v14;
  long long v15;
  uint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  void **v19[5];

  uint64_t v16 = 0;
  char v17 = 0;
  unint64_t v18 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v16, (uint64_t)(a2[1] - *a2) >> 3);
  uint64_t v4 = (_DWORD *)*a2;
  for (uint64_t i = (_DWORD *)a2[1]; v4 != i; v4 += 2)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 16))(&v15);
    Espresso::SerDes::params_io<Espresso::flatten_params>(v15, v4, 1);
    unint64_t v6 = v17;
    if ((unint64_t)v17 >= v18)
    {
      uint64_t v7 = ((uint64_t)v17 - v16) >> 4;
      unint64_t v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = v18 - v16;
      if ((uint64_t)(v18 - v16) >> 3 > v8) {
        unint64_t v8 = v9 >> 3;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v8;
      }
      v19[4] = (void **)&v18;
      uint64_t v11 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
      uint64_t v12 = &v11[2 * v7];
      v19[0] = v11;
      v19[1] = v12;
      v19[3] = &v11[2 * v13];
      *(_OWORD *)uint64_t v12 = v15;
      long long v15 = 0uLL;
      v19[2] = v12 + 2;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v16, v19);
      int v14 = v17;
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v19);
      char v17 = v14;
      if (*((void *)&v15 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v15 + 1));
      }
    }
    else
    {
      _OWORD *v17 = v15;
      char v17 = v6 + 1;
    }
  }
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 248))(*a1, a1 + 2, &v16);
  v19[0] = (void **)&v16;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v19);
}

{
  _DWORD *v4;
  _DWORD *i;
  _OWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void **v11;
  void **v12;
  uint64_t v13;
  _OWORD *v14;
  long long v15;
  uint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  void **v19[5];

  uint64_t v16 = 0;
  char v17 = 0;
  unint64_t v18 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v16, (uint64_t)(a2[1] - *a2) >> 4);
  uint64_t v4 = (_DWORD *)*a2;
  for (uint64_t i = (_DWORD *)a2[1]; v4 != i; v4 += 4)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 16))(&v15);
    Espresso::SerDes::params_io<Espresso::crop_params>(v15, v4, 1);
    unint64_t v6 = v17;
    if ((unint64_t)v17 >= v18)
    {
      uint64_t v7 = ((uint64_t)v17 - v16) >> 4;
      unint64_t v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = v18 - v16;
      if ((uint64_t)(v18 - v16) >> 3 > v8) {
        unint64_t v8 = v9 >> 3;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v8;
      }
      v19[4] = (void **)&v18;
      uint64_t v11 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
      uint64_t v12 = &v11[2 * v7];
      v19[0] = v11;
      v19[1] = v12;
      v19[3] = &v11[2 * v13];
      *(_OWORD *)uint64_t v12 = v15;
      long long v15 = 0uLL;
      v19[2] = v12 + 2;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v16, v19);
      int v14 = v17;
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v19);
      char v17 = v14;
      if (*((void *)&v15 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v15 + 1));
      }
    }
    else
    {
      _OWORD *v17 = v15;
      char v17 = v6 + 1;
    }
  }
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 248))(*a1, a1 + 2, &v16);
  v19[0] = (void **)&v16;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v19);
}

{
  _DWORD *v4;
  _DWORD *i;
  _OWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void **v11;
  void **v12;
  uint64_t v13;
  _OWORD *v14;
  long long v15;
  uint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  void **v19[5];

  uint64_t v16 = 0;
  char v17 = 0;
  unint64_t v18 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v16, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 2));
  uint64_t v4 = (_DWORD *)*a2;
  for (uint64_t i = (_DWORD *)a2[1]; v4 != i; v4 += 3)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 16))(&v15);
    Espresso::SerDes::params_io<Espresso::space_to_depth_params_t>(v15, v4, 1);
    unint64_t v6 = v17;
    if ((unint64_t)v17 >= v18)
    {
      uint64_t v7 = ((uint64_t)v17 - v16) >> 4;
      unint64_t v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = v18 - v16;
      if ((uint64_t)(v18 - v16) >> 3 > v8) {
        unint64_t v8 = v9 >> 3;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v8;
      }
      v19[4] = (void **)&v18;
      uint64_t v11 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
      uint64_t v12 = &v11[2 * v7];
      v19[0] = v11;
      v19[1] = v12;
      v19[3] = &v11[2 * v13];
      *(_OWORD *)uint64_t v12 = v15;
      long long v15 = 0uLL;
      v19[2] = v12 + 2;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v16, v19);
      int v14 = v17;
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v19);
      char v17 = v14;
      if (*((void *)&v15 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v15 + 1));
      }
    }
    else
    {
      _OWORD *v17 = v15;
      char v17 = v6 + 1;
    }
  }
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 248))(*a1, a1 + 2, &v16);
  v19[0] = (void **)&v16;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v19);
}

{
  _DWORD *v4;
  _DWORD *i;
  _OWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void **v11;
  void **v12;
  uint64_t v13;
  _OWORD *v14;
  long long v15;
  uint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  void **v19[5];

  uint64_t v16 = 0;
  char v17 = 0;
  unint64_t v18 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v16, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3));
  uint64_t v4 = (_DWORD *)*a2;
  for (uint64_t i = (_DWORD *)a2[1]; v4 != i; v4 += 6)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 16))(&v15);
    Espresso::SerDes::params_io<Espresso::slice_params_t>(v15, v4, 1);
    unint64_t v6 = v17;
    if ((unint64_t)v17 >= v18)
    {
      uint64_t v7 = ((uint64_t)v17 - v16) >> 4;
      unint64_t v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = v18 - v16;
      if ((uint64_t)(v18 - v16) >> 3 > v8) {
        unint64_t v8 = v9 >> 3;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v8;
      }
      v19[4] = (void **)&v18;
      uint64_t v11 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
      uint64_t v12 = &v11[2 * v7];
      v19[0] = v11;
      v19[1] = v12;
      v19[3] = &v11[2 * v13];
      *(_OWORD *)uint64_t v12 = v15;
      long long v15 = 0uLL;
      v19[2] = v12 + 2;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v16, v19);
      int v14 = v17;
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v19);
      char v17 = v14;
      if (*((void *)&v15 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v15 + 1));
      }
    }
    else
    {
      _OWORD *v17 = v15;
      char v17 = v6 + 1;
    }
  }
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 248))(*a1, a1 + 2, &v16);
  v19[0] = (void **)&v16;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v19);
}

{
  _DWORD *v4;
  _DWORD *i;
  _OWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void **v11;
  void **v12;
  uint64_t v13;
  _OWORD *v14;
  long long v15;
  uint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  void **v19[5];

  uint64_t v16 = 0;
  char v17 = 0;
  unint64_t v18 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v16, (uint64_t)(a2[1] - *a2) >> 3);
  uint64_t v4 = (_DWORD *)*a2;
  for (uint64_t i = (_DWORD *)a2[1]; v4 != i; v4 += 2)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 16))(&v15);
    Espresso::SerDes::params_io<Espresso::cast_params_t>(v15, v4, 1);
    unint64_t v6 = v17;
    if ((unint64_t)v17 >= v18)
    {
      uint64_t v7 = ((uint64_t)v17 - v16) >> 4;
      unint64_t v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = v18 - v16;
      if ((uint64_t)(v18 - v16) >> 3 > v8) {
        unint64_t v8 = v9 >> 3;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v8;
      }
      v19[4] = (void **)&v18;
      uint64_t v11 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
      uint64_t v12 = &v11[2 * v7];
      v19[0] = v11;
      v19[1] = v12;
      v19[3] = &v11[2 * v13];
      *(_OWORD *)uint64_t v12 = v15;
      long long v15 = 0uLL;
      v19[2] = v12 + 2;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v16, v19);
      int v14 = v17;
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v19);
      char v17 = v14;
      if (*((void *)&v15 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v15 + 1));
      }
    }
    else
    {
      _OWORD *v17 = v15;
      char v17 = v6 + 1;
    }
  }
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 248))(*a1, a1 + 2, &v16);
  v19[0] = (void **)&v16;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v19);
}

{
  _DWORD *v4;
  _DWORD *i;
  _OWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void **v11;
  void **v12;
  uint64_t v13;
  _OWORD *v14;
  long long v15;
  uint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  void **v19[5];

  uint64_t v16 = 0;
  char v17 = 0;
  unint64_t v18 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v16, (uint64_t)(a2[1] - *a2) >> 3);
  uint64_t v4 = (_DWORD *)*a2;
  for (uint64_t i = (_DWORD *)a2[1]; v4 != i; v4 += 2)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 16))(&v15);
    Espresso::SerDes::params_io<Espresso::dynamic_quantize_params_t>(v15, v4, 1);
    unint64_t v6 = v17;
    if ((unint64_t)v17 >= v18)
    {
      uint64_t v7 = ((uint64_t)v17 - v16) >> 4;
      unint64_t v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = v18 - v16;
      if ((uint64_t)(v18 - v16) >> 3 > v8) {
        unint64_t v8 = v9 >> 3;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v8;
      }
      v19[4] = (void **)&v18;
      uint64_t v11 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
      uint64_t v12 = &v11[2 * v7];
      v19[0] = v11;
      v19[1] = v12;
      v19[3] = &v11[2 * v13];
      *(_OWORD *)uint64_t v12 = v15;
      long long v15 = 0uLL;
      v19[2] = v12 + 2;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v16, v19);
      int v14 = v17;
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v19);
      char v17 = v14;
      if (*((void *)&v15 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v15 + 1));
      }
    }
    else
    {
      _OWORD *v17 = v15;
      char v17 = v6 + 1;
    }
  }
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 248))(*a1, a1 + 2, &v16);
  v19[0] = (void **)&v16;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v19);
}

{
  _DWORD *v4;
  _DWORD *i;
  _OWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void **v11;
  void **v12;
  uint64_t v13;
  _OWORD *v14;
  long long v15;
  uint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  void **v19[5];

  uint64_t v16 = 0;
  char v17 = 0;
  unint64_t v18 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v16, (uint64_t)(a2[1] - *a2) >> 4);
  uint64_t v4 = (_DWORD *)*a2;
  for (uint64_t i = (_DWORD *)a2[1]; v4 != i; v4 += 4)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 16))(&v15);
    Espresso::SerDes::params_io<Espresso::quantized_gather_params_t>(v15, v4, 1);
    unint64_t v6 = v17;
    if ((unint64_t)v17 >= v18)
    {
      uint64_t v7 = ((uint64_t)v17 - v16) >> 4;
      unint64_t v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = v18 - v16;
      if ((uint64_t)(v18 - v16) >> 3 > v8) {
        unint64_t v8 = v9 >> 3;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v8;
      }
      v19[4] = (void **)&v18;
      uint64_t v11 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
      uint64_t v12 = &v11[2 * v7];
      v19[0] = v11;
      v19[1] = v12;
      v19[3] = &v11[2 * v13];
      *(_OWORD *)uint64_t v12 = v15;
      long long v15 = 0uLL;
      v19[2] = v12 + 2;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v16, v19);
      int v14 = v17;
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v19);
      char v17 = v14;
      if (*((void *)&v15 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v15 + 1));
      }
    }
    else
    {
      _OWORD *v17 = v15;
      char v17 = v6 + 1;
    }
  }
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 248))(*a1, a1 + 2, &v16);
  v19[0] = (void **)&v16;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v19);
}

{
  _DWORD *v4;
  _DWORD *i;
  _OWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void **v11;
  void **v12;
  uint64_t v13;
  _OWORD *v14;
  long long v15;
  uint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  void **v19[5];

  uint64_t v16 = 0;
  char v17 = 0;
  unint64_t v18 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v16, (uint64_t)(a2[1] - *a2) >> 2);
  uint64_t v4 = (_DWORD *)*a2;
  for (uint64_t i = (_DWORD *)a2[1]; v4 != i; ++v4)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 16))(&v15);
    Espresso::SerDes::params_io<Espresso::cf_jump_params_t>(v15, v4, 1);
    unint64_t v6 = v17;
    if ((unint64_t)v17 >= v18)
    {
      uint64_t v7 = ((uint64_t)v17 - v16) >> 4;
      unint64_t v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = v18 - v16;
      if ((uint64_t)(v18 - v16) >> 3 > v8) {
        unint64_t v8 = v9 >> 3;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v8;
      }
      v19[4] = (void **)&v18;
      uint64_t v11 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
      uint64_t v12 = &v11[2 * v7];
      v19[0] = v11;
      v19[1] = v12;
      v19[3] = &v11[2 * v13];
      *(_OWORD *)uint64_t v12 = v15;
      long long v15 = 0uLL;
      v19[2] = v12 + 2;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v16, v19);
      int v14 = v17;
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v19);
      char v17 = v14;
      if (*((void *)&v15 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v15 + 1));
      }
    }
    else
    {
      _OWORD *v17 = v15;
      char v17 = v6 + 1;
    }
  }
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 248))(*a1, a1 + 2, &v16);
  v19[0] = (void **)&v16;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v19);
}

{
  _DWORD *v4;
  _DWORD *i;
  _OWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void **v11;
  void **v12;
  uint64_t v13;
  _OWORD *v14;
  long long v15;
  uint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  void **v19[5];

  uint64_t v16 = 0;
  char v17 = 0;
  unint64_t v18 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v16, (uint64_t)(a2[1] - *a2) >> 3);
  uint64_t v4 = (_DWORD *)*a2;
  for (uint64_t i = (_DWORD *)a2[1]; v4 != i; v4 += 2)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 16))(&v15);
    Espresso::SerDes::params_io<Espresso::get_shape_params_t>(v15, v4, 1);
    unint64_t v6 = v17;
    if ((unint64_t)v17 >= v18)
    {
      uint64_t v7 = ((uint64_t)v17 - v16) >> 4;
      unint64_t v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = v18 - v16;
      if ((uint64_t)(v18 - v16) >> 3 > v8) {
        unint64_t v8 = v9 >> 3;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v8;
      }
      v19[4] = (void **)&v18;
      uint64_t v11 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
      uint64_t v12 = &v11[2 * v7];
      v19[0] = v11;
      v19[1] = v12;
      v19[3] = &v11[2 * v13];
      *(_OWORD *)uint64_t v12 = v15;
      long long v15 = 0uLL;
      v19[2] = v12 + 2;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v16, v19);
      int v14 = v17;
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v19);
      char v17 = v14;
      if (*((void *)&v15 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v15 + 1));
      }
    }
    else
    {
      _OWORD *v17 = v15;
      char v17 = v6 + 1;
    }
  }
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 248))(*a1, a1 + 2, &v16);
  v19[0] = (void **)&v16;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v19);
}

{
  _DWORD *v4;
  _DWORD *i;
  _OWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void **v11;
  void **v12;
  uint64_t v13;
  _OWORD *v14;
  long long v15;
  uint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  void **v19[5];

  uint64_t v16 = 0;
  char v17 = 0;
  unint64_t v18 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v16, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2[1] - *a2) >> 2));
  uint64_t v4 = (_DWORD *)*a2;
  for (uint64_t i = (_DWORD *)a2[1]; v4 != i; v4 += 5)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 16))(&v15);
    Espresso::SerDes::params_io<Espresso::gather_params_t>(v15, v4, 1);
    unint64_t v6 = v17;
    if ((unint64_t)v17 >= v18)
    {
      uint64_t v7 = ((uint64_t)v17 - v16) >> 4;
      unint64_t v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = v18 - v16;
      if ((uint64_t)(v18 - v16) >> 3 > v8) {
        unint64_t v8 = v9 >> 3;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v8;
      }
      v19[4] = (void **)&v18;
      uint64_t v11 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
      uint64_t v12 = &v11[2 * v7];
      v19[0] = v11;
      v19[1] = v12;
      v19[3] = &v11[2 * v13];
      *(_OWORD *)uint64_t v12 = v15;
      long long v15 = 0uLL;
      v19[2] = v12 + 2;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v16, v19);
      int v14 = v17;
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v19);
      char v17 = v14;
      if (*((void *)&v15 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v15 + 1));
      }
    }
    else
    {
      _OWORD *v17 = v15;
      char v17 = v6 + 1;
    }
  }
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 248))(*a1, a1 + 2, &v16);
  v19[0] = (void **)&v16;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v19);
}

{
  _DWORD *v4;
  _DWORD *i;
  _OWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void **v11;
  void **v12;
  uint64_t v13;
  _OWORD *v14;
  long long v15;
  uint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  void **v19[5];

  uint64_t v16 = 0;
  char v17 = 0;
  unint64_t v18 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v16, (uint64_t)(a2[1] - *a2) >> 2);
  uint64_t v4 = (_DWORD *)*a2;
  for (uint64_t i = (_DWORD *)a2[1]; v4 != i; ++v4)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 16))(&v15);
    Espresso::SerDes::params_io<Espresso::cf_loop_params_t>(v15, v4, 1);
    unint64_t v6 = v17;
    if ((unint64_t)v17 >= v18)
    {
      uint64_t v7 = ((uint64_t)v17 - v16) >> 4;
      unint64_t v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = v18 - v16;
      if ((uint64_t)(v18 - v16) >> 3 > v8) {
        unint64_t v8 = v9 >> 3;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v8;
      }
      v19[4] = (void **)&v18;
      uint64_t v11 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
      uint64_t v12 = &v11[2 * v7];
      v19[0] = v11;
      v19[1] = v12;
      v19[3] = &v11[2 * v13];
      *(_OWORD *)uint64_t v12 = v15;
      long long v15 = 0uLL;
      v19[2] = v12 + 2;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v16, v19);
      int v14 = v17;
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v19);
      char v17 = v14;
      if (*((void *)&v15 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v15 + 1));
      }
    }
    else
    {
      _OWORD *v17 = v15;
      char v17 = v6 + 1;
    }
  }
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 248))(*a1, a1 + 2, &v16);
  v19[0] = (void **)&v16;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v19);
}

{
  _DWORD *v4;
  _DWORD *i;
  _OWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void **v11;
  void **v12;
  uint64_t v13;
  _OWORD *v14;
  long long v15;
  uint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  void **v19[5];

  uint64_t v16 = 0;
  char v17 = 0;
  unint64_t v18 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v16, (uint64_t)(a2[1] - *a2) >> 3);
  uint64_t v4 = (_DWORD *)*a2;
  for (uint64_t i = (_DWORD *)a2[1]; v4 != i; v4 += 2)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 16))(&v15);
    Espresso::SerDes::params_io<Espresso::cf_for_params_t>(v15, v4, 1);
    unint64_t v6 = v17;
    if ((unint64_t)v17 >= v18)
    {
      uint64_t v7 = ((uint64_t)v17 - v16) >> 4;
      unint64_t v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = v18 - v16;
      if ((uint64_t)(v18 - v16) >> 3 > v8) {
        unint64_t v8 = v9 >> 3;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v8;
      }
      v19[4] = (void **)&v18;
      uint64_t v11 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
      uint64_t v12 = &v11[2 * v7];
      v19[0] = v11;
      v19[1] = v12;
      v19[3] = &v11[2 * v13];
      *(_OWORD *)uint64_t v12 = v15;
      long long v15 = 0uLL;
      v19[2] = v12 + 2;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v16, v19);
      int v14 = v17;
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v19);
      char v17 = v14;
      if (*((void *)&v15 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v15 + 1));
      }
    }
    else
    {
      _OWORD *v17 = v15;
      char v17 = v6 + 1;
    }
  }
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 248))(*a1, a1 + 2, &v16);
  v19[0] = (void **)&v16;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v19);
}

{
  _DWORD *v4;
  _DWORD *i;
  _OWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void **v11;
  void **v12;
  uint64_t v13;
  _OWORD *v14;
  long long v15;
  uint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  void **v19[5];

  uint64_t v16 = 0;
  char v17 = 0;
  unint64_t v18 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v16, (uint64_t)(a2[1] - *a2) >> 2);
  uint64_t v4 = (_DWORD *)*a2;
  for (uint64_t i = (_DWORD *)a2[1]; v4 != i; ++v4)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 16))(&v15);
    Espresso::SerDes::params_io<Espresso::copy_params_t>(v15, v4, 1);
    unint64_t v6 = v17;
    if ((unint64_t)v17 >= v18)
    {
      uint64_t v7 = ((uint64_t)v17 - v16) >> 4;
      unint64_t v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = v18 - v16;
      if ((uint64_t)(v18 - v16) >> 3 > v8) {
        unint64_t v8 = v9 >> 3;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v8;
      }
      v19[4] = (void **)&v18;
      uint64_t v11 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
      uint64_t v12 = &v11[2 * v7];
      v19[0] = v11;
      v19[1] = v12;
      v19[3] = &v11[2 * v13];
      *(_OWORD *)uint64_t v12 = v15;
      long long v15 = 0uLL;
      v19[2] = v12 + 2;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v16, v19);
      int v14 = v17;
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v19);
      char v17 = v14;
      if (*((void *)&v15 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v15 + 1));
      }
    }
    else
    {
      _OWORD *v17 = v15;
      char v17 = v6 + 1;
    }
  }
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 248))(*a1, a1 + 2, &v16);
  v19[0] = (void **)&v16;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v19);
}

{
  unsigned char *v4;
  unsigned char *i;
  _OWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void **v11;
  void **v12;
  uint64_t v13;
  _OWORD *v14;
  long long v15;
  uint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  void **v19[5];

  uint64_t v16 = 0;
  char v17 = 0;
  unint64_t v18 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v16, 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2));
  uint64_t v4 = (unsigned char *)*a2;
  for (uint64_t i = (unsigned char *)a2[1]; v4 != i; v4 += 3)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 16))(&v15);
    Espresso::SerDes::params_io<Espresso::batch_matmul_params_t>(v15, v4, 1);
    unint64_t v6 = v17;
    if ((unint64_t)v17 >= v18)
    {
      uint64_t v7 = ((uint64_t)v17 - v16) >> 4;
      unint64_t v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = v18 - v16;
      if ((uint64_t)(v18 - v16) >> 3 > v8) {
        unint64_t v8 = v9 >> 3;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v8;
      }
      v19[4] = (void **)&v18;
      uint64_t v11 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
      uint64_t v12 = &v11[2 * v7];
      v19[0] = v11;
      v19[1] = v12;
      v19[3] = &v11[2 * v13];
      *(_OWORD *)uint64_t v12 = v15;
      long long v15 = 0uLL;
      v19[2] = v12 + 2;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v16, v19);
      int v14 = v17;
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v19);
      char v17 = v14;
      if (*((void *)&v15 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v15 + 1));
      }
    }
    else
    {
      _OWORD *v17 = v15;
      char v17 = v6 + 1;
    }
  }
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 248))(*a1, a1 + 2, &v16);
  v19[0] = (void **)&v16;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v19);
}

{
  _DWORD *v4;
  _DWORD *i;
  _OWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void **v11;
  void **v12;
  uint64_t v13;
  _OWORD *v14;
  long long v15;
  uint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  void **v19[5];

  uint64_t v16 = 0;
  char v17 = 0;
  unint64_t v18 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v16, 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(a2[1] - *a2) >> 3));
  uint64_t v4 = (_DWORD *)*a2;
  for (uint64_t i = (_DWORD *)a2[1]; v4 != i; v4 += 34)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 16))(&v15);
    Espresso::SerDes::params_io<Espresso::expand_dims_params_t>(v15, v4, 1);
    unint64_t v6 = v17;
    if ((unint64_t)v17 >= v18)
    {
      uint64_t v7 = ((uint64_t)v17 - v16) >> 4;
      unint64_t v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = v18 - v16;
      if ((uint64_t)(v18 - v16) >> 3 > v8) {
        unint64_t v8 = v9 >> 3;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v8;
      }
      v19[4] = (void **)&v18;
      uint64_t v11 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
      uint64_t v12 = &v11[2 * v7];
      v19[0] = v11;
      v19[1] = v12;
      v19[3] = &v11[2 * v13];
      *(_OWORD *)uint64_t v12 = v15;
      long long v15 = 0uLL;
      v19[2] = v12 + 2;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v16, v19);
      int v14 = v17;
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v19);
      char v17 = v14;
      if (*((void *)&v15 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v15 + 1));
      }
    }
    else
    {
      _OWORD *v17 = v15;
      char v17 = v6 + 1;
    }
  }
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 248))(*a1, a1 + 2, &v16);
  v19[0] = (void **)&v16;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v19);
}

{
  _DWORD *v4;
  _DWORD *i;
  _OWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void **v11;
  void **v12;
  uint64_t v13;
  _OWORD *v14;
  long long v15;
  uint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  void **v19[5];

  uint64_t v16 = 0;
  char v17 = 0;
  unint64_t v18 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v16, (uint64_t)(a2[1] - *a2) >> 3);
  uint64_t v4 = (_DWORD *)*a2;
  for (uint64_t i = (_DWORD *)a2[1]; v4 != i; v4 += 2)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 16))(&v15);
    Espresso::SerDes::params_io<Espresso::multinomial_params_t>(v15, v4, 1);
    unint64_t v6 = v17;
    if ((unint64_t)v17 >= v18)
    {
      uint64_t v7 = ((uint64_t)v17 - v16) >> 4;
      unint64_t v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = v18 - v16;
      if ((uint64_t)(v18 - v16) >> 3 > v8) {
        unint64_t v8 = v9 >> 3;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v8;
      }
      v19[4] = (void **)&v18;
      uint64_t v11 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
      uint64_t v12 = &v11[2 * v7];
      v19[0] = v11;
      v19[1] = v12;
      v19[3] = &v11[2 * v13];
      *(_OWORD *)uint64_t v12 = v15;
      long long v15 = 0uLL;
      v19[2] = v12 + 2;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v16, v19);
      int v14 = v17;
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v19);
      char v17 = v14;
      if (*((void *)&v15 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v15 + 1));
      }
    }
    else
    {
      _OWORD *v17 = v15;
      char v17 = v6 + 1;
    }
  }
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 248))(*a1, a1 + 2, &v16);
  v19[0] = (void **)&v16;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v19);
}

{
  _DWORD *v4;
  _DWORD *i;
  _OWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void **v11;
  void **v12;
  uint64_t v13;
  _OWORD *v14;
  long long v15;
  uint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  void **v19[5];

  uint64_t v16 = 0;
  char v17 = 0;
  unint64_t v18 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v16, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2[1] - *a2) >> 2));
  uint64_t v4 = (_DWORD *)*a2;
  for (uint64_t i = (_DWORD *)a2[1]; v4 != i; v4 += 5)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 16))(&v15);
    Espresso::SerDes::params_io<Espresso::transplant_params_t>(v15, v4, 1);
    unint64_t v6 = v17;
    if ((unint64_t)v17 >= v18)
    {
      uint64_t v7 = ((uint64_t)v17 - v16) >> 4;
      unint64_t v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = v18 - v16;
      if ((uint64_t)(v18 - v16) >> 3 > v8) {
        unint64_t v8 = v9 >> 3;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v8;
      }
      v19[4] = (void **)&v18;
      uint64_t v11 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
      uint64_t v12 = &v11[2 * v7];
      v19[0] = v11;
      v19[1] = v12;
      v19[3] = &v11[2 * v13];
      *(_OWORD *)uint64_t v12 = v15;
      long long v15 = 0uLL;
      v19[2] = v12 + 2;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v16, v19);
      int v14 = v17;
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v19);
      char v17 = v14;
      if (*((void *)&v15 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v15 + 1));
      }
    }
    else
    {
      _OWORD *v17 = v15;
      char v17 = v6 + 1;
    }
  }
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 248))(*a1, a1 + 2, &v16);
  v19[0] = (void **)&v16;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v19);
}

{
  _DWORD *v4;
  _DWORD *i;
  _OWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void **v11;
  void **v12;
  uint64_t v13;
  _OWORD *v14;
  long long v15;
  uint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  void **v19[5];

  uint64_t v16 = 0;
  char v17 = 0;
  unint64_t v18 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v16, (uint64_t)(a2[1] - *a2) >> 2);
  uint64_t v4 = (_DWORD *)*a2;
  for (uint64_t i = (_DWORD *)a2[1]; v4 != i; ++v4)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 16))(&v15);
    Espresso::SerDes::params_io<Espresso::stack_nd_params_t>(v15, v4, 1);
    unint64_t v6 = v17;
    if ((unint64_t)v17 >= v18)
    {
      uint64_t v7 = ((uint64_t)v17 - v16) >> 4;
      unint64_t v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = v18 - v16;
      if ((uint64_t)(v18 - v16) >> 3 > v8) {
        unint64_t v8 = v9 >> 3;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v8;
      }
      v19[4] = (void **)&v18;
      uint64_t v11 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
      uint64_t v12 = &v11[2 * v7];
      v19[0] = v11;
      v19[1] = v12;
      v19[3] = &v11[2 * v13];
      *(_OWORD *)uint64_t v12 = v15;
      long long v15 = 0uLL;
      v19[2] = v12 + 2;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v16, v19);
      int v14 = v17;
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v19);
      char v17 = v14;
      if (*((void *)&v15 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v15 + 1));
      }
    }
    else
    {
      _OWORD *v17 = v15;
      char v17 = v6 + 1;
    }
  }
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 248))(*a1, a1 + 2, &v16);
  v19[0] = (void **)&v16;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v19);
}

{
  _DWORD *v4;
  _DWORD *i;
  _OWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void **v11;
  void **v12;
  uint64_t v13;
  _OWORD *v14;
  long long v15;
  uint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  void **v19[5];

  uint64_t v16 = 0;
  char v17 = 0;
  unint64_t v18 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v16, 0xFC0FC0FC0FC0FC1 * ((uint64_t)(a2[1] - *a2) >> 3));
  uint64_t v4 = (_DWORD *)*a2;
  for (uint64_t i = (_DWORD *)a2[1]; v4 != i; v4 += 130)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 16))(&v15);
    Espresso::SerDes::params_io<Espresso::split_nd_params_t>(v15, v4, 1);
    unint64_t v6 = v17;
    if ((unint64_t)v17 >= v18)
    {
      uint64_t v7 = ((uint64_t)v17 - v16) >> 4;
      unint64_t v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = v18 - v16;
      if ((uint64_t)(v18 - v16) >> 3 > v8) {
        unint64_t v8 = v9 >> 3;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v8;
      }
      v19[4] = (void **)&v18;
      uint64_t v11 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
      uint64_t v12 = &v11[2 * v7];
      v19[0] = v11;
      v19[1] = v12;
      v19[3] = &v11[2 * v13];
      *(_OWORD *)uint64_t v12 = v15;
      long long v15 = 0uLL;
      v19[2] = v12 + 2;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v16, v19);
      int v14 = v17;
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v19);
      char v17 = v14;
      if (*((void *)&v15 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v15 + 1));
      }
    }
    else
    {
      _OWORD *v17 = v15;
      char v17 = v6 + 1;
    }
  }
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 248))(*a1, a1 + 2, &v16);
  v19[0] = (void **)&v16;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v19);
}

{
  _DWORD *v4;
  _DWORD *i;
  _OWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void **v11;
  void **v12;
  uint64_t v13;
  _OWORD *v14;
  long long v15;
  uint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  void **v19[5];

  uint64_t v16 = 0;
  char v17 = 0;
  unint64_t v18 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v16, (uint64_t)(a2[1] - *a2) >> 2);
  uint64_t v4 = (_DWORD *)*a2;
  for (uint64_t i = (_DWORD *)a2[1]; v4 != i; ++v4)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 16))(&v15);
    Espresso::SerDes::params_io<Espresso::softmax_nd_params_t>(v15, v4, 1);
    unint64_t v6 = v17;
    if ((unint64_t)v17 >= v18)
    {
      uint64_t v7 = ((uint64_t)v17 - v16) >> 4;
      unint64_t v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = v18 - v16;
      if ((uint64_t)(v18 - v16) >> 3 > v8) {
        unint64_t v8 = v9 >> 3;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v8;
      }
      v19[4] = (void **)&v18;
      uint64_t v11 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
      uint64_t v12 = &v11[2 * v7];
      v19[0] = v11;
      v19[1] = v12;
      v19[3] = &v11[2 * v13];
      *(_OWORD *)uint64_t v12 = v15;
      long long v15 = 0uLL;
      v19[2] = v12 + 2;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v16, v19);
      int v14 = v17;
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v19);
      char v17 = v14;
      if (*((void *)&v15 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v15 + 1));
      }
    }
    else
    {
      _OWORD *v17 = v15;
      char v17 = v6 + 1;
    }
  }
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 248))(*a1, a1 + 2, &v16);
  v19[0] = (void **)&v16;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v19);
}

{
  _DWORD *v4;
  _DWORD *i;
  _OWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void **v11;
  void **v12;
  uint64_t v13;
  _OWORD *v14;
  long long v15;
  uint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  void **v19[5];

  uint64_t v16 = 0;
  char v17 = 0;
  unint64_t v18 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v16, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 2));
  uint64_t v4 = (_DWORD *)*a2;
  for (uint64_t i = (_DWORD *)a2[1]; v4 != i; v4 += 3)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 16))(&v15);
    Espresso::SerDes::params_io<Espresso::sliding_windows_params_t>(v15, v4, 1);
    unint64_t v6 = v17;
    if ((unint64_t)v17 >= v18)
    {
      uint64_t v7 = ((uint64_t)v17 - v16) >> 4;
      unint64_t v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = v18 - v16;
      if ((uint64_t)(v18 - v16) >> 3 > v8) {
        unint64_t v8 = v9 >> 3;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v8;
      }
      v19[4] = (void **)&v18;
      uint64_t v11 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
      uint64_t v12 = &v11[2 * v7];
      v19[0] = v11;
      v19[1] = v12;
      v19[3] = &v11[2 * v13];
      *(_OWORD *)uint64_t v12 = v15;
      long long v15 = 0uLL;
      v19[2] = v12 + 2;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v16, v19);
      int v14 = v17;
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v19);
      char v17 = v14;
      if (*((void *)&v15 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v15 + 1));
      }
    }
    else
    {
      _OWORD *v17 = v15;
      char v17 = v6 + 1;
    }
  }
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 248))(*a1, a1 + 2, &v16);
  v19[0] = (void **)&v16;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v19);
}

{
  _DWORD *v4;
  _DWORD *i;
  _OWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void **v11;
  void **v12;
  uint64_t v13;
  _OWORD *v14;
  long long v15;
  uint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  void **v19[5];

  uint64_t v16 = 0;
  char v17 = 0;
  unint64_t v18 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v16, (uint64_t)(a2[1] - *a2) >> 3);
  uint64_t v4 = (_DWORD *)*a2;
  for (uint64_t i = (_DWORD *)a2[1]; v4 != i; v4 += 2)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 16))(&v15);
    Espresso::SerDes::params_io<Espresso::reverse_seq_params_t>(v15, v4, 1);
    unint64_t v6 = v17;
    if ((unint64_t)v17 >= v18)
    {
      uint64_t v7 = ((uint64_t)v17 - v16) >> 4;
      unint64_t v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = v18 - v16;
      if ((uint64_t)(v18 - v16) >> 3 > v8) {
        unint64_t v8 = v9 >> 3;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v8;
      }
      v19[4] = (void **)&v18;
      uint64_t v11 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
      uint64_t v12 = &v11[2 * v7];
      v19[0] = v11;
      v19[1] = v12;
      v19[3] = &v11[2 * v13];
      *(_OWORD *)uint64_t v12 = v15;
      long long v15 = 0uLL;
      v19[2] = v12 + 2;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v16, v19);
      int v14 = v17;
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v19);
      char v17 = v14;
      if (*((void *)&v15 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v15 + 1));
      }
    }
    else
    {
      _OWORD *v17 = v15;
      char v17 = v6 + 1;
    }
  }
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 248))(*a1, a1 + 2, &v16);
  v19[0] = (void **)&v16;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v19);
}

{
  unsigned char *v4;
  unsigned char *i;
  _OWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void **v11;
  void **v12;
  uint64_t v13;
  _OWORD *v14;
  long long v15;
  uint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  void **v19[5];

  uint64_t v16 = 0;
  char v17 = 0;
  unint64_t v18 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v16, (uint64_t)(a2[1] - *a2) >> 1);
  uint64_t v4 = (unsigned char *)*a2;
  for (uint64_t i = (unsigned char *)a2[1]; v4 != i; v4 += 2)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 16))(&v15);
    Espresso::SerDes::params_io<Espresso::cumsum_params_t>(v15, v4, 1);
    unint64_t v6 = v17;
    if ((unint64_t)v17 >= v18)
    {
      uint64_t v7 = ((uint64_t)v17 - v16) >> 4;
      unint64_t v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = v18 - v16;
      if ((uint64_t)(v18 - v16) >> 3 > v8) {
        unint64_t v8 = v9 >> 3;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v8;
      }
      v19[4] = (void **)&v18;
      uint64_t v11 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
      uint64_t v12 = &v11[2 * v7];
      v19[0] = v11;
      v19[1] = v12;
      v19[3] = &v11[2 * v13];
      *(_OWORD *)uint64_t v12 = v15;
      long long v15 = 0uLL;
      v19[2] = v12 + 2;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v16, v19);
      int v14 = v17;
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v19);
      char v17 = v14;
      if (*((void *)&v15 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v15 + 1));
      }
    }
    else
    {
      _OWORD *v17 = v15;
      char v17 = v6 + 1;
    }
  }
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 248))(*a1, a1 + 2, &v16);
  v19[0] = (void **)&v16;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v19);
}

{
  _DWORD *v4;
  _DWORD *i;
  _OWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void **v11;
  void **v12;
  uint64_t v13;
  _OWORD *v14;
  long long v15;
  uint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  void **v19[5];

  uint64_t v16 = 0;
  char v17 = 0;
  unint64_t v18 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v16, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 2));
  uint64_t v4 = (_DWORD *)*a2;
  for (uint64_t i = (_DWORD *)a2[1]; v4 != i; v4 += 3)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 16))(&v15);
    Espresso::SerDes::params_io<Espresso::sparse_inner_product_params_t>(v15, v4, 1);
    unint64_t v6 = v17;
    if ((unint64_t)v17 >= v18)
    {
      uint64_t v7 = ((uint64_t)v17 - v16) >> 4;
      unint64_t v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = v18 - v16;
      if ((uint64_t)(v18 - v16) >> 3 > v8) {
        unint64_t v8 = v9 >> 3;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v8;
      }
      v19[4] = (void **)&v18;
      uint64_t v11 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
      uint64_t v12 = &v11[2 * v7];
      v19[0] = v11;
      v19[1] = v12;
      v19[3] = &v11[2 * v13];
      *(_OWORD *)uint64_t v12 = v15;
      long long v15 = 0uLL;
      v19[2] = v12 + 2;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v16, v19);
      int v14 = v17;
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v19);
      char v17 = v14;
      if (*((void *)&v15 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v15 + 1));
      }
    }
    else
    {
      _OWORD *v17 = v15;
      char v17 = v6 + 1;
    }
  }
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 248))(*a1, a1 + 2, &v16);
  v19[0] = (void **)&v16;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v19);
}

{
  _DWORD *v4;
  _DWORD *i;
  _OWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void **v11;
  void **v12;
  uint64_t v13;
  _OWORD *v14;
  long long v15;
  uint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  void **v19[5];

  uint64_t v16 = 0;
  char v17 = 0;
  unint64_t v18 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v16, (uint64_t)(a2[1] - *a2) >> 4);
  uint64_t v4 = (_DWORD *)*a2;
  for (uint64_t i = (_DWORD *)a2[1]; v4 != i; v4 += 4)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 16))(&v15);
    Espresso::SerDes::params_io<Espresso::local_correlation_params_t>(v15, v4, 1);
    unint64_t v6 = v17;
    if ((unint64_t)v17 >= v18)
    {
      uint64_t v7 = ((uint64_t)v17 - v16) >> 4;
      unint64_t v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = v18 - v16;
      if ((uint64_t)(v18 - v16) >> 3 > v8) {
        unint64_t v8 = v9 >> 3;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v8;
      }
      v19[4] = (void **)&v18;
      uint64_t v11 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
      uint64_t v12 = &v11[2 * v7];
      v19[0] = v11;
      v19[1] = v12;
      v19[3] = &v11[2 * v13];
      *(_OWORD *)uint64_t v12 = v15;
      long long v15 = 0uLL;
      v19[2] = v12 + 2;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v16, v19);
      int v14 = v17;
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v19);
      char v17 = v14;
      if (*((void *)&v15 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v15 + 1));
      }
    }
    else
    {
      _OWORD *v17 = v15;
      char v17 = v6 + 1;
    }
  }
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 248))(*a1, a1 + 2, &v16);
  v19[0] = (void **)&v16;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v19);
}

{
  _DWORD *v4;
  _DWORD *i;
  _OWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void **v11;
  void **v12;
  uint64_t v13;
  _OWORD *v14;
  long long v15;
  uint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  void **v19[5];

  uint64_t v16 = 0;
  char v17 = 0;
  unint64_t v18 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v16, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 2));
  uint64_t v4 = (_DWORD *)*a2;
  for (uint64_t i = (_DWORD *)a2[1]; v4 != i; v4 += 3)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 16))(&v15);
    Espresso::SerDes::params_io<Espresso::bahdanau_attention_params_t>(v15, v4, 1);
    unint64_t v6 = v17;
    if ((unint64_t)v17 >= v18)
    {
      uint64_t v7 = ((uint64_t)v17 - v16) >> 4;
      unint64_t v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = v18 - v16;
      if ((uint64_t)(v18 - v16) >> 3 > v8) {
        unint64_t v8 = v9 >> 3;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v8;
      }
      v19[4] = (void **)&v18;
      uint64_t v11 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
      uint64_t v12 = &v11[2 * v7];
      v19[0] = v11;
      v19[1] = v12;
      v19[3] = &v11[2 * v13];
      *(_OWORD *)uint64_t v12 = v15;
      long long v15 = 0uLL;
      v19[2] = v12 + 2;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v16, v19);
      int v14 = v17;
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v19);
      char v17 = v14;
      if (*((void *)&v15 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v15 + 1));
      }
    }
    else
    {
      _OWORD *v17 = v15;
      char v17 = v6 + 1;
    }
  }
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 248))(*a1, a1 + 2, &v16);
  v19[0] = (void **)&v16;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v19);
}

{
  _DWORD *v4;
  _DWORD *i;
  _OWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void **v11;
  void **v12;
  uint64_t v13;
  _OWORD *v14;
  long long v15;
  uint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  void **v19[5];

  uint64_t v16 = 0;
  char v17 = 0;
  unint64_t v18 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v16, 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a2[1] - *a2) >> 2));
  uint64_t v4 = (_DWORD *)*a2;
  for (uint64_t i = (_DWORD *)a2[1]; v4 != i; v4 += 7)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 16))(&v15);
    Espresso::SerDes::params_io<Espresso::slice_update_params_t>(v15, v4, 1);
    unint64_t v6 = v17;
    if ((unint64_t)v17 >= v18)
    {
      uint64_t v7 = ((uint64_t)v17 - v16) >> 4;
      unint64_t v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = v18 - v16;
      if ((uint64_t)(v18 - v16) >> 3 > v8) {
        unint64_t v8 = v9 >> 3;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v8;
      }
      v19[4] = (void **)&v18;
      uint64_t v11 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
      uint64_t v12 = &v11[2 * v7];
      v19[0] = v11;
      v19[1] = v12;
      v19[3] = &v11[2 * v13];
      *(_OWORD *)uint64_t v12 = v15;
      long long v15 = 0uLL;
      v19[2] = v12 + 2;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v16, v19);
      int v14 = v17;
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v19);
      char v17 = v14;
      if (*((void *)&v15 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v15 + 1));
      }
    }
    else
    {
      _OWORD *v17 = v15;
      char v17 = v6 + 1;
    }
  }
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 248))(*a1, a1 + 2, &v16);
  v19[0] = (void **)&v16;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v19);
}

{
  unsigned char *v4;
  unsigned char *i;
  _OWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void **v11;
  void **v12;
  uint64_t v13;
  _OWORD *v14;
  long long v15;
  uint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  void **v19[5];

  uint64_t v16 = 0;
  char v17 = 0;
  unint64_t v18 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v16, 0x82FA0BE82FA0BE83 * ((uint64_t)(a2[1] - *a2) >> 2));
  uint64_t v4 = (unsigned char *)*a2;
  for (uint64_t i = (unsigned char *)a2[1]; v4 != i; v4 += 172)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 16))(&v15);
    Espresso::SerDes::params_io<Espresso::fused_convolution_grad_params_t>(v15, v4, 1);
    unint64_t v6 = v17;
    if ((unint64_t)v17 >= v18)
    {
      uint64_t v7 = ((uint64_t)v17 - v16) >> 4;
      unint64_t v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = v18 - v16;
      if ((uint64_t)(v18 - v16) >> 3 > v8) {
        unint64_t v8 = v9 >> 3;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v8;
      }
      v19[4] = (void **)&v18;
      uint64_t v11 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
      uint64_t v12 = &v11[2 * v7];
      v19[0] = v11;
      v19[1] = v12;
      v19[3] = &v11[2 * v13];
      *(_OWORD *)uint64_t v12 = v15;
      long long v15 = 0uLL;
      v19[2] = v12 + 2;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v16, v19);
      int v14 = v17;
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v19);
      char v17 = v14;
      if (*((void *)&v15 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v15 + 1));
      }
    }
    else
    {
      _OWORD *v17 = v15;
      char v17 = v6 + 1;
    }
  }
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 248))(*a1, a1 + 2, &v16);
  v19[0] = (void **)&v16;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v19);
}

{
  unsigned char *v4;
  unsigned char *i;
  _OWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void **v11;
  void **v12;
  uint64_t v13;
  _OWORD *v14;
  long long v15;
  uint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  void **v19[5];

  uint64_t v16 = 0;
  char v17 = 0;
  unint64_t v18 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v16, 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(a2[1] - *a2) >> 3));
  uint64_t v4 = (unsigned char *)*a2;
  for (uint64_t i = (unsigned char *)a2[1]; v4 != i; v4 += 136)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 16))(&v15);
    Espresso::SerDes::params_io<Espresso::fused_inner_product_grad_params_t>(v15, v4, 1);
    unint64_t v6 = v17;
    if ((unint64_t)v17 >= v18)
    {
      uint64_t v7 = ((uint64_t)v17 - v16) >> 4;
      unint64_t v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = v18 - v16;
      if ((uint64_t)(v18 - v16) >> 3 > v8) {
        unint64_t v8 = v9 >> 3;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v8;
      }
      v19[4] = (void **)&v18;
      uint64_t v11 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
      uint64_t v12 = &v11[2 * v7];
      v19[0] = v11;
      v19[1] = v12;
      v19[3] = &v11[2 * v13];
      *(_OWORD *)uint64_t v12 = v15;
      long long v15 = 0uLL;
      v19[2] = v12 + 2;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v16, v19);
      int v14 = v17;
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v19);
      char v17 = v14;
      if (*((void *)&v15 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v15 + 1));
      }
    }
    else
    {
      _OWORD *v17 = v15;
      char v17 = v6 + 1;
    }
  }
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 248))(*a1, a1 + 2, &v16);
  v19[0] = (void **)&v16;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v19);
}

{
  _DWORD *v4;
  _DWORD *i;
  _OWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void **v11;
  void **v12;
  uint64_t v13;
  _OWORD *v14;
  long long v15;
  uint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  void **v19[5];

  uint64_t v16 = 0;
  char v17 = 0;
  unint64_t v18 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v16, (uint64_t)(a2[1] - *a2) >> 4);
  uint64_t v4 = (_DWORD *)*a2;
  for (uint64_t i = (_DWORD *)a2[1]; v4 != i; v4 += 4)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 16))(&v15);
    Espresso::SerDes::params_io<Espresso::resize_nearest_neighbor_params_t>(v15, v4, 1);
    unint64_t v6 = v17;
    if ((unint64_t)v17 >= v18)
    {
      uint64_t v7 = ((uint64_t)v17 - v16) >> 4;
      unint64_t v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = v18 - v16;
      if ((uint64_t)(v18 - v16) >> 3 > v8) {
        unint64_t v8 = v9 >> 3;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v8;
      }
      v19[4] = (void **)&v18;
      uint64_t v11 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
      uint64_t v12 = &v11[2 * v7];
      v19[0] = v11;
      v19[1] = v12;
      v19[3] = &v11[2 * v13];
      *(_OWORD *)uint64_t v12 = v15;
      long long v15 = 0uLL;
      v19[2] = v12 + 2;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v16, v19);
      int v14 = v17;
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v19);
      char v17 = v14;
      if (*((void *)&v15 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v15 + 1));
      }
    }
    else
    {
      _OWORD *v17 = v15;
      char v17 = v6 + 1;
    }
  }
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 248))(*a1, a1 + 2, &v16);
  v19[0] = (void **)&v16;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v19);
}

{
  _DWORD *v4;
  _DWORD *i;
  _OWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void **v11;
  void **v12;
  uint64_t v13;
  _OWORD *v14;
  long long v15;
  uint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  void **v19[5];

  uint64_t v16 = 0;
  char v17 = 0;
  unint64_t v18 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v16, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3));
  uint64_t v4 = (_DWORD *)*a2;
  for (uint64_t i = (_DWORD *)a2[1]; v4 != i; v4 += 6)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 16))(&v15);
    Espresso::SerDes::params_io<Espresso::tensor_shape_t>(v15, v4, 1);
    unint64_t v6 = v17;
    if ((unint64_t)v17 >= v18)
    {
      uint64_t v7 = ((uint64_t)v17 - v16) >> 4;
      unint64_t v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = v18 - v16;
      if ((uint64_t)(v18 - v16) >> 3 > v8) {
        unint64_t v8 = v9 >> 3;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v8;
      }
      v19[4] = (void **)&v18;
      uint64_t v11 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
      uint64_t v12 = &v11[2 * v7];
      v19[0] = v11;
      v19[1] = v12;
      v19[3] = &v11[2 * v13];
      *(_OWORD *)uint64_t v12 = v15;
      long long v15 = 0uLL;
      v19[2] = v12 + 2;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v16, v19);
      int v14 = v17;
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v19);
      char v17 = v14;
      if (*((void *)&v15 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v15 + 1));
      }
    }
    else
    {
      _OWORD *v17 = v15;
      char v17 = v6 + 1;
    }
  }
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 248))(*a1, a1 + 2, &v16);
  v19[0] = (void **)&v16;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v19);
}

{
  _DWORD *v4;
  _DWORD *i;
  _OWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void **v11;
  void **v12;
  uint64_t v13;
  _OWORD *v14;
  long long v15;
  uint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  void **v19[5];

  uint64_t v16 = 0;
  char v17 = 0;
  unint64_t v18 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v16, 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(a2[1] - *a2) >> 3));
  uint64_t v4 = (_DWORD *)*a2;
  for (uint64_t i = (_DWORD *)a2[1]; v4 != i; v4 += 22)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 16))(&v15);
    Espresso::SerDes::params_io<Espresso::foreign_network_rep_blob_t>(v15, v4, 1);
    unint64_t v6 = v17;
    if ((unint64_t)v17 >= v18)
    {
      uint64_t v7 = ((uint64_t)v17 - v16) >> 4;
      unint64_t v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = v18 - v16;
      if ((uint64_t)(v18 - v16) >> 3 > v8) {
        unint64_t v8 = v9 >> 3;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v8;
      }
      v19[4] = (void **)&v18;
      uint64_t v11 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
      uint64_t v12 = &v11[2 * v7];
      v19[0] = v11;
      v19[1] = v12;
      v19[3] = &v11[2 * v13];
      *(_OWORD *)uint64_t v12 = v15;
      long long v15 = 0uLL;
      v19[2] = v12 + 2;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v16, v19);
      int v14 = v17;
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v19);
      char v17 = v14;
      if (*((void *)&v15 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v15 + 1));
      }
    }
    else
    {
      _OWORD *v17 = v15;
      char v17 = v6 + 1;
    }
  }
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 248))(*a1, a1 + 2, &v16);
  v19[0] = (void **)&v16;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v19);
}

{
  _DWORD *v4;
  _DWORD *i;
  _OWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void **v11;
  void **v12;
  uint64_t v13;
  _OWORD *v14;
  long long v15;
  uint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  void **v19[5];

  uint64_t v16 = 0;
  char v17 = 0;
  unint64_t v18 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v16, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 2));
  uint64_t v4 = (_DWORD *)*a2;
  for (uint64_t i = (_DWORD *)a2[1]; v4 != i; v4 += 3)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 16))(&v15);
    Espresso::SerDes::params_io<Espresso::furthest_point_sampling_params_t>(v15, v4, 1);
    unint64_t v6 = v17;
    if ((unint64_t)v17 >= v18)
    {
      uint64_t v7 = ((uint64_t)v17 - v16) >> 4;
      unint64_t v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = v18 - v16;
      if ((uint64_t)(v18 - v16) >> 3 > v8) {
        unint64_t v8 = v9 >> 3;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v8;
      }
      v19[4] = (void **)&v18;
      uint64_t v11 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
      uint64_t v12 = &v11[2 * v7];
      v19[0] = v11;
      v19[1] = v12;
      v19[3] = &v11[2 * v13];
      *(_OWORD *)uint64_t v12 = v15;
      long long v15 = 0uLL;
      v19[2] = v12 + 2;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v16, v19);
      int v14 = v17;
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v19);
      char v17 = v14;
      if (*((void *)&v15 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v15 + 1));
      }
    }
    else
    {
      _OWORD *v17 = v15;
      char v17 = v6 + 1;
    }
  }
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 248))(*a1, a1 + 2, &v16);
  v19[0] = (void **)&v16;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v19);
}

{
  _DWORD *v4;
  _DWORD *i;
  _OWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void **v11;
  void **v12;
  uint64_t v13;
  _OWORD *v14;
  long long v15;
  uint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  void **v19[5];

  uint64_t v16 = 0;
  char v17 = 0;
  unint64_t v18 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v16, (uint64_t)(a2[1] - *a2) >> 2);
  uint64_t v4 = (_DWORD *)*a2;
  for (uint64_t i = (_DWORD *)a2[1]; v4 != i; ++v4)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 16))(&v15);
    Espresso::SerDes::params_io<Espresso::degamma_params_t>(v15, v4, 1);
    unint64_t v6 = v17;
    if ((unint64_t)v17 >= v18)
    {
      uint64_t v7 = ((uint64_t)v17 - v16) >> 4;
      unint64_t v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = v18 - v16;
      if ((uint64_t)(v18 - v16) >> 3 > v8) {
        unint64_t v8 = v9 >> 3;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v8;
      }
      v19[4] = (void **)&v18;
      uint64_t v11 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
      uint64_t v12 = &v11[2 * v7];
      v19[0] = v11;
      v19[1] = v12;
      v19[3] = &v11[2 * v13];
      *(_OWORD *)uint64_t v12 = v15;
      long long v15 = 0uLL;
      v19[2] = v12 + 2;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v16, v19);
      int v14 = v17;
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v19);
      char v17 = v14;
      if (*((void *)&v15 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v15 + 1));
      }
    }
    else
    {
      _OWORD *v17 = v15;
      char v17 = v6 + 1;
    }
  }
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 248))(*a1, a1 + 2, &v16);
  v19[0] = (void **)&v16;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v19);
}

{
  _DWORD *v4;
  _DWORD *i;
  _OWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void **v11;
  void **v12;
  uint64_t v13;
  _OWORD *v14;
  long long v15;
  uint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  void **v19[5];

  uint64_t v16 = 0;
  char v17 = 0;
  unint64_t v18 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v16, (uint64_t)(a2[1] - *a2) >> 3);
  uint64_t v4 = (_DWORD *)*a2;
  for (uint64_t i = (_DWORD *)a2[1]; v4 != i; v4 += 2)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 16))(&v15);
    Espresso::SerDes::params_io<Espresso::linear_quantize_params_t>(v15, v4, 1);
    unint64_t v6 = v17;
    if ((unint64_t)v17 >= v18)
    {
      uint64_t v7 = ((uint64_t)v17 - v16) >> 4;
      unint64_t v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = v18 - v16;
      if ((uint64_t)(v18 - v16) >> 3 > v8) {
        unint64_t v8 = v9 >> 3;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v8;
      }
      v19[4] = (void **)&v18;
      uint64_t v11 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
      uint64_t v12 = &v11[2 * v7];
      v19[0] = v11;
      v19[1] = v12;
      v19[3] = &v11[2 * v13];
      *(_OWORD *)uint64_t v12 = v15;
      long long v15 = 0uLL;
      v19[2] = v12 + 2;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v16, v19);
      int v14 = v17;
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v19);
      char v17 = v14;
      if (*((void *)&v15 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v15 + 1));
      }
    }
    else
    {
      _OWORD *v17 = v15;
      char v17 = v6 + 1;
    }
  }
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 248))(*a1, a1 + 2, &v16);
  v19[0] = (void **)&v16;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v19);
}

{
  _DWORD *v4;
  _DWORD *i;
  _OWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void **v11;
  void **v12;
  uint64_t v13;
  _OWORD *v14;
  long long v15;
  uint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  void **v19[5];

  uint64_t v16 = 0;
  char v17 = 0;
  unint64_t v18 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v16, (uint64_t)(a2[1] - *a2) >> 3);
  uint64_t v4 = (_DWORD *)*a2;
  for (uint64_t i = (_DWORD *)a2[1]; v4 != i; v4 += 2)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 16))(&v15);
    Espresso::SerDes::params_io<Espresso::linear_dequantize_params_t>(v15, v4, 1);
    unint64_t v6 = v17;
    if ((unint64_t)v17 >= v18)
    {
      uint64_t v7 = ((uint64_t)v17 - v16) >> 4;
      unint64_t v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = v18 - v16;
      if ((uint64_t)(v18 - v16) >> 3 > v8) {
        unint64_t v8 = v9 >> 3;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v8;
      }
      v19[4] = (void **)&v18;
      uint64_t v11 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
      uint64_t v12 = &v11[2 * v7];
      v19[0] = v11;
      v19[1] = v12;
      v19[3] = &v11[2 * v13];
      *(_OWORD *)uint64_t v12 = v15;
      long long v15 = 0uLL;
      v19[2] = v12 + 2;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v16, v19);
      int v14 = v17;
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v19);
      char v17 = v14;
      if (*((void *)&v15 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v15 + 1));
      }
    }
    else
    {
      _OWORD *v17 = v15;
      char v17 = v6 + 1;
    }
  }
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 248))(*a1, a1 + 2, &v16);
  v19[0] = (void **)&v16;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v19);
}

void sub_192AEE288(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  a9 = (void **)&a11;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::operator>>(void *a1)
{
  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 120))(&v2);
    if (v3) {
      nitro::nitro_function::nitro_function(v3);
    }
  }
}

{
  uint64_t v2;
  std::__shared_weak_count *v3;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 120))(&v2);
    if (v3) {
      nitro::nitro_function::nitro_function(v3);
    }
  }
}

{
  uint64_t v2;
  std::__shared_weak_count *v3;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 120))(&v2);
    if (v3) {
      nitro::nitro_function::nitro_function(v3);
    }
  }
}

{
  uint64_t v2;
  std::__shared_weak_count *v3;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 120))(&v2);
    if (v3) {
      nitro::nitro_function::nitro_function(v3);
    }
  }
}

{
  uint64_t v2;
  std::__shared_weak_count *v3;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 120))(&v2);
    if (v3) {
      nitro::nitro_function::nitro_function(v3);
    }
  }
}

{
  uint64_t v2;
  std::__shared_weak_count *v3;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 120))(&v2);
    if (v3) {
      nitro::nitro_function::nitro_function(v3);
    }
  }
}

{
  uint64_t v2;
  std::__shared_weak_count *v3;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 120))(&v2);
    if (v3) {
      nitro::nitro_function::nitro_function(v3);
    }
  }
}

{
  uint64_t v2;
  std::__shared_weak_count *v3;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 120))(&v2);
    if (v3) {
      nitro::nitro_function::nitro_function(v3);
    }
  }
}

{
  uint64_t v2;
  std::__shared_weak_count *v3;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 120))(&v2);
    if (v3) {
      nitro::nitro_function::nitro_function(v3);
    }
  }
}

{
  uint64_t v2;
  std::__shared_weak_count *v3;

  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 120))(&v2);
    if (v3) {
      nitro::nitro_function::nitro_function(v3);
    }
  }
}

void sub_192AEE48C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::operator<<(void *a1)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 16))(&v2);
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 240))(*a1, a1 + 2, &v2);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
}

{
  uint64_t v2;
  std::__shared_weak_count *v3;

  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 16))(&v2);
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 240))(*a1, a1 + 2, &v2);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
}

{
  uint64_t v2;
  std::__shared_weak_count *v3;

  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 16))(&v2);
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 240))(*a1, a1 + 2, &v2);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
}

{
  uint64_t v2;
  std::__shared_weak_count *v3;

  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 16))(&v2);
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 240))(*a1, a1 + 2, &v2);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
}

{
  uint64_t v2;
  std::__shared_weak_count *v3;

  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 16))(&v2);
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 240))(*a1, a1 + 2, &v2);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
}

{
  uint64_t v2;
  std::__shared_weak_count *v3;

  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 16))(&v2);
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 240))(*a1, a1 + 2, &v2);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
}

{
  uint64_t v2;
  std::__shared_weak_count *v3;

  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 16))(&v2);
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 240))(*a1, a1 + 2, &v2);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
}

{
  uint64_t v2;
  std::__shared_weak_count *v3;

  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 16))(&v2);
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 240))(*a1, a1 + 2, &v2);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
}

{
  uint64_t v2;
  std::__shared_weak_count *v3;

  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 16))(&v2);
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 240))(*a1, a1 + 2, &v2);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
}

{
  uint64_t v2;
  std::__shared_weak_count *v3;

  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 16))(&v2);
  (*(void (**)(void, void *, uint64_t *))(*(void *)*a1 + 240))(*a1, a1 + 2, &v2);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
}

void sub_192AEE53C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_192AEE6E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  a9 = (void **)&a11;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void sub_192AEE7DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_192AEE9B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_192AEEA7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_192AEEC3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  a9 = (void **)&a11;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void Espresso::control_flow_graph::serialize(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t Espresso::control_flow_graph::deserialize()
{
  return 0;
}

void Espresso::control_flow_graph::~control_flow_graph(Espresso::control_flow_graph *this)
{
  *(void *)this = &unk_1EE34DCB8;
  uint64_t v1 = (void **)((char *)this + 8);
  std::vector<std::shared_ptr<Espresso::graph_optimization_rule>>::__destroy_vector::operator()[abi:ne180100](&v1);

  JUMPOUT(0x192FF16B0);
}

{
  void **v1;

  *(void *)this = &unk_1EE34DCB8;
  uint64_t v1 = (void **)((char *)this + 8);
  std::vector<std::shared_ptr<Espresso::graph_optimization_rule>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void Espresso::pass_control_flow_graph::run_on_network(Espresso::net *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v5 = operator new(0x40uLL);
  v5[1] = 0;
  void v5[2] = 0;
  *uint64_t v5 = &unk_1EE386628;
  v5[6] = 0;
  v5[7] = 0;
  int v109 = v5 + 3;
  v5[4] = 0;
  std::string v115 = (uint64_t ***)(v5 + 4);
  v5[3] = &unk_1EE34DCB8;
  v5[5] = 0;
  *((_WORD *)v5 + 28) = 0;
  memset(v128, 0, sizeof(v128));
  int v129 = 1065353216;
  memset(v126, 0, sizeof(v126));
  int v127 = 1065353216;
  memset(v124, 0, sizeof(v124));
  int v125 = 1065353216;
  memset(v122, 0, sizeof(v122));
  int v123 = 1065353216;
  *(_OWORD *)std::string __p = 0u;
  *(_OWORD *)uint64_t v120 = 0u;
  int v121 = 1065353216;
  uint64_t v6 = *((void *)a1 + 4);
  uint64_t v7 = *((void *)a1 + 5);
  unint64_t v112 = a1;
  uint64_t v114 = v5;
  uint64_t v110 = a2;
  if (v7 != v6)
  {
    uint64_t v8 = 0;
    unint64_t v9 = 0;
    do
    {
      std::string v116 = (long long **)(*(void *)(v6 + v8) + 16);
      std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)__p, (uint64_t)v116, (uint64_t)&std::piecewise_construct, (long long **)&v116)[5] = v9++;
      uint64_t v6 = *((void *)a1 + 4);
      uint64_t v7 = *((void *)a1 + 5);
      v8 += 16;
    }
    while (v9 < (v7 - v6) >> 4);
    v131[0] = 0;
    if (v7 != v6)
    {
      unint64_t v10 = 0;
      uint64_t v11 = (char *)a1 + 56;
      while (1)
      {
        uint64_t v12 = *(void *)(v6 + 16 * v10);
        uint64_t v13 = *(const void **)(v12 + 64);
        int v14 = *(std::__shared_weak_count **)(v12 + 72);
        if (v14) {
          atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (!v13) {
          goto LABEL_86;
        }
        if (v15)
        {
          uint64_t v16 = v15;
          if (v14) {
            atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)v128, (unint64_t *)v131, v131);
          std::string v116 = (long long **)(*(uint64_t (**)(void *))(*(void *)v16 + 320))(v16);
          char v17 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)__p, (uint64_t)v116, (uint64_t)&std::piecewise_construct, (long long **)&v116);
          std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)v126, (unint64_t *)v17 + 5, v17 + 5);
          std::string v116 = (long long **)((*(uint64_t (**)(void *))(*(void *)v16 + 320))(v16) + 24);
          unint64_t v18 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)__p, (uint64_t)v116, (uint64_t)&std::piecewise_construct, (long long **)&v116);
          std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)v126, (unint64_t *)v18 + 5, v18 + 5);
LABEL_17:
          *((unsigned char *)v114 + 57) = 1;
          goto LABEL_18;
        }
        if (v19)
        {
          uint64_t v20 = v19;
          if (v14) {
            atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          std::string v116 = (long long **)(v10 + 1);
          std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long>((uint64_t)v128, (unint64_t *)&v116, &v116);
          std::string v116 = (long long **)(v20 + 296);
          uint64_t v21 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)__p, (uint64_t)(v20 + 296), (uint64_t)&std::piecewise_construct, (long long **)&v116);
          std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)v126, (unint64_t *)v21 + 5, v21 + 5);
          goto LABEL_17;
        }
        if (v22) {
          break;
        }
        {
          if (v14) {
            atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          std::string v116 = (long long **)(v10 + 1);
          std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long>((uint64_t)v122, (unint64_t *)&v116, &v116);
        }
        {
          if (v14) {
            atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)v122, (unint64_t *)v131, v131);
        }
        else
        {
          if (v28)
          {
            uint64_t v29 = v28;
            if (v14) {
              atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)v122, (unint64_t *)v131, v131);
            unint64_t v30 = (void *)*((void *)v112 + 121);
            if (v30
            {
              double v25 = (std::__shared_weak_count *)*((void *)v112 + 122);
              if (v25)
              {
                char v26 = 0;
                atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
                atomic_fetch_add_explicit(&v25->__shared_weak_owners_, 1uLL, memory_order_relaxed);
                goto LABEL_50;
              }
            }
            else
            {
              double v25 = 0;
            }
            char v26 = 1;
LABEL_50:
            int32x2_t v27 = (std::__shared_weak_count *)*((void *)v29 + 43);
            *((void *)v29 + 42) = v30;
            *((void *)v29 + 43) = v25;
            if (!v27)
            {
LABEL_31:
              if ((v26 & 1) == 0) {
                nitro::nitro_function::nitro_function(v25);
              }
              goto LABEL_18;
            }
LABEL_30:
            std::__shared_weak_count::__release_weak(v27);
            goto LABEL_31;
          }
          {
            if (v14) {
              atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            std::string v116 = (long long **)(v10 + 1);
            std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long>((uint64_t)v126, (unint64_t *)&v116, &v116);
            goto LABEL_17;
          }
          {
            if (v14) {
              atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)v126, (unint64_t *)v131, v131);
LABEL_64:
            *((_WORD *)v114 + 28) = 257;
            goto LABEL_18;
          }
          if (v31)
          {
            uint64_t v32 = v31;
            if (v14) {
              atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)v126, (unint64_t *)v131, v131);
            std::string v116 = (long long **)(v32 + 296);
            uint64_t v33 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)__p, (uint64_t)(v32 + 296), (uint64_t)&std::piecewise_construct, (long long **)&v116);
            std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)v126, (unint64_t *)v33 + 5, v33 + 5);
            goto LABEL_64;
          }
          {
            if (v14) {
              atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)v126, (unint64_t *)v131, v131);
            std::string v116 = (long long **)((char *)v131[0] + 1);
            std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long>((uint64_t)v126, (unint64_t *)&v116, &v116);
          }
          else
          {
            {
              if (v34) {
                uint64_t v35 = v14;
              }
              else {
                uint64_t v35 = 0;
              }
              if (v34 && v14)
              {
                atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
                uint64_t v35 = v14;
                goto LABEL_80;
              }
              if (v34)
              {
LABEL_80:
                std::string v116 = v131;
                uint64_t v36 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v11, (unint64_t *)v131, (uint64_t)&std::piecewise_construct, (uint64_t **)&v116);
                uint64_t v38 = v36[3];
                uint64_t v37 = v36[4];
                if (v35) {
                  nitro::nitro_function::nitro_function(v35);
                }
                if (v37 != v38)
                {
LABEL_87:
                  std::string v116 = (long long **)((char *)v131[0] + 1);
                  std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long>((uint64_t)v122, (unint64_t *)&v116, &v116);
                  goto LABEL_88;
                }
              }
              else if (v35)
              {
                nitro::nitro_function::nitro_function(v35);
              }
LABEL_86:
              std::string v116 = v131;
              uint64_t v39 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v11, (unint64_t *)v131, (uint64_t)&std::piecewise_construct, (uint64_t **)&v116);
              if ((*(unsigned int (**)(const void *, unint64_t))(*(void *)v13 + 264))(v13, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v39[4] - v39[3]) >> 3)))
              {
                goto LABEL_87;
              }
LABEL_88:
              if (v14) {
                goto LABEL_89;
              }
              goto LABEL_90;
            }
            if (v14) {
              atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            std::string v116 = (long long **)(v10 + 1);
            std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long>((uint64_t)v126, (unint64_t *)&v116, &v116);
          }
        }
LABEL_18:
        if (v14)
        {
          nitro::nitro_function::nitro_function(v14);
LABEL_89:
          nitro::nitro_function::nitro_function(v14);
        }
LABEL_90:
        unint64_t v10 = (unint64_t)v131[0] + 1;
        v131[0] = (long long *)v10;
        uint64_t v6 = *((void *)v112 + 4);
        uint64_t v7 = *((void *)v112 + 5);
        if (v10 >= (v7 - v6) >> 4)
        {
          unint64_t v40 = (v7 - v6) >> 4;
          goto LABEL_93;
        }
      }
      uint64_t v23 = v22;
      if (v14) {
        atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::string v116 = (long long **)(v10 + 1);
      std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long>((uint64_t)v126, (unint64_t *)&v116, &v116);
      uint64_t v24 = (void *)*((void *)v112 + 121);
      if (v24
      {
        double v25 = (std::__shared_weak_count *)*((void *)v112 + 122);
        if (v25)
        {
          char v26 = 0;
          atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
          atomic_fetch_add_explicit(&v25->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          goto LABEL_29;
        }
      }
      else
      {
        double v25 = 0;
      }
      char v26 = 1;
LABEL_29:
      int32x2_t v27 = (std::__shared_weak_count *)*((void *)v23 + 39);
      *((void *)v23 + 38) = v24;
      *((void *)v23 + 39) = v25;
      if (!v27) {
        goto LABEL_31;
      }
      goto LABEL_30;
    }
  }
  unint64_t v40 = 0;
  uint64_t v6 = v7;
LABEL_93:
  unint64_t v41 = 0;
  unint64_t v42 = 0;
  v117[1] = 0;
  unint64_t v118 = 0;
  std::string v116 = (long long **)v117;
  v117[0] = 0;
  do
  {
    if (!v42
      || v42 == v40
      || std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::find<unsigned long>(v128, v42)|| std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::find<unsigned long>(v126, v42)|| std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::find<unsigned long>(v124, v42)|| std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::find<unsigned long>(v122, v42))
    {
      if (v41 >= v42)
      {
LABEL_131:
        unint64_t v118 = v42;
        unint64_t v41 = v42;
        goto LABEL_132;
      }
      uint64_t v44 = v114[4];
      uint64_t v43 = v114[5];
      std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t **)&v116, v41, (uint64_t *)&v118)[5] = (v43 - v44) >> 4;
      float v45 = (char *)operator new(0xE0uLL);
      *((void *)v45 + 1) = 0;
      *((void *)v45 + 2) = 0;
      *(void *)float v45 = &unk_1EE3817D8;
      BOOL v46 = (uint64_t *)(v45 + 24);
      *((void *)v45 + 3) = v45 + 24;
      *((void *)v45 + 4) = v45 + 24;
      *(_OWORD *)(v45 + 40) = 0u;
      *(_OWORD *)(v45 + 56) = 0u;
      *(_OWORD *)(v45 + 72) = 0u;
      *(_OWORD *)(v45 + 88) = 0u;
      *(_OWORD *)(v45 + 104) = 0u;
      *((void *)v45 + 15) = 0;
      *((_DWORD *)v45 + 32) = 1065353216;
      *(_OWORD *)(v45 + 136) = 0u;
      *(_OWORD *)(v45 + 152) = 0u;
      *((_DWORD *)v45 + 42) = 1065353216;
      *((_OWORD *)v45 + 11) = 0u;
      *((_OWORD *)v45 + 12) = 0u;
      *((_DWORD *)v45 + 52) = 1065353216;
      *((void *)v45 + 27) = v112;
      v131[0] = (long long *)v41;
      do
      {
        uint64_t v47 = (char *)operator new(0x58uLL);
        std::string::size_type v48 = v47;
        *((void *)v47 + 1) = 0;
        *((void *)v47 + 2) = 0;
        *(void *)uint64_t v47 = &unk_1EE3817A0;
        *(_OWORD *)(v47 + 24) = 0u;
        std::string::size_type v49 = v47 + 24;
        *(_OWORD *)(v47 + 40) = 0u;
        *(_OWORD *)(v47 + 56) = 0u;
        *(_OWORD *)(v47 + 72) = 0u;
        long long v50 = *(_OWORD *)(*(void *)(*((void *)v45 + 27) + 32) + 16 * v41);
        uint64_t v51 = *(void *)(*(void *)(*((void *)v45 + 27) + 32) + 16 * v41 + 8);
        if (v51)
        {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v51 + 8), 1uLL, memory_order_relaxed);
          uint64_t v52 = (std::__shared_weak_count *)*((void *)v47 + 4);
          *(_OWORD *)(v48 + 24) = v50;
          if (v52) {
            nitro::nitro_function::nitro_function(v52);
          }
        }
        else
        {
          *std::string::size_type v49 = v50;
        }
        uint64_t v53 = *((void *)v45 + 27) + 96;
        long long v130 = v131;
        int v54 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v53, (unint64_t *)v131, (uint64_t)&std::piecewise_construct, (uint64_t **)&v130);
        if (v48 + 40 != (char *)(v54 + 3)) {
          std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)(v48 + 40), (std::string *)v54[3], (std::string *)v54[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v54[4] - v54[3]) >> 3));
        }
        uint64_t v55 = *((void *)v45 + 27) + 56;
        long long v130 = v131;
        int v56 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v55, (unint64_t *)v131, (uint64_t)&std::piecewise_construct, (uint64_t **)&v130);
        if (v48 + 64 != (char *)(v56 + 3)) {
          std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)(v48 + 64), (std::string *)v56[3], (std::string *)v56[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v56[4] - v56[3]) >> 3));
        }
        int v57 = operator new(0x20uLL);
        v57[2] = v49;
        v57[3] = v48;
        atomic_fetch_add_explicit((atomic_ullong *volatile)v48 + 1, 1uLL, memory_order_relaxed);
        uint64_t v58 = *v46;
        *int v57 = *v46;
        v57[1] = v46;
        *(void *)(v58 + 8) = v57;
        *BOOL v46 = (uint64_t)v57;
        ++*((void *)v45 + 5);
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v48);
        unint64_t v41 = (unint64_t)v131[0] + 1;
        v131[0] = (long long *)v41;
      }
      while (v41 < v42);
      char v59 = v114;
      unint64_t v61 = (uint64_t **)v114[5];
      unint64_t v60 = v114[6];
      if ((unint64_t)v61 < v60)
      {
        *unint64_t v61 = v46;
        v61[1] = (uint64_t *)v45;
        atomic_fetch_add_explicit((atomic_ullong *volatile)v45 + 1, 1uLL, memory_order_relaxed);
        uint64_t v62 = v61 + 2;
        v114[5] = v61 + 2;
LABEL_130:
        v59[5] = v62;
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v45);
        uint64_t v6 = *((void *)v112 + 4);
        uint64_t v7 = *((void *)v112 + 5);
        goto LABEL_131;
      }
      BOOL v63 = *v115;
      uint64_t v64 = ((char *)v61 - (char *)*v115) >> 4;
      unint64_t v65 = v64 + 1;
      if ((unint64_t)(v64 + 1) >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v66 = v60 - (void)v63;
      if (v66 >> 3 > v65) {
        unint64_t v65 = v66 >> 3;
      }
      if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v67 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v67 = v65;
      }
      if (v67 >> 60) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v68 = (char *)operator new(16 * v67);
      *(void *)&long long v69 = v45 + 24;
      *((void *)&v69 + 1) = v45;
      uint64_t v70 = &v68[16 * v64];
      int v71 = &v68[16 * v67];
      *(_OWORD *)uint64_t v70 = v69;
      uint64_t v62 = v70 + 16;
      atomic_fetch_add_explicit((atomic_ullong *volatile)v45 + 1, 1uLL, memory_order_relaxed);
      if (v61 == v63)
      {
        v114[4] = v70;
        v114[5] = v62;
        v114[6] = v71;
        if (!v61) {
          goto LABEL_129;
        }
      }
      else
      {
        do
        {
          long long v72 = *((_OWORD *)v61 - 1);
          v61 -= 2;
          *((_OWORD *)v70 - 1) = v72;
          v70 -= 16;
          *unint64_t v61 = 0;
          v61[1] = 0;
        }
        while (v61 != v63);
        int v73 = (uint64_t **)v114[4];
        unint64_t v61 = (uint64_t **)v114[5];
        v114[4] = v70;
        v114[5] = v62;
        v114[6] = v71;
        if (v61 != v73)
        {
          do
          {
            int v74 = (std::__shared_weak_count *)*(v61 - 1);
            if (v74) {
              nitro::nitro_function::nitro_function(v74);
            }
            v61 -= 2;
          }
          while (v61 != v73);
          unint64_t v61 = v73;
        }
        if (!v61) {
          goto LABEL_129;
        }
      }
      operator delete(v61);
LABEL_129:
      char v59 = v114;
      goto LABEL_130;
    }
LABEL_132:
    ++v42;
    unint64_t v40 = (v7 - v6) >> 4;
  }
  while (v42 <= v40);
  char v75 = (unint64_t *)v114[4];
  int v111 = (unint64_t *)v114[5];
  if (v75 != v111)
  {
    unint64_t v76 = 0;
    do
    {
      unint64_t v78 = *v75;
      float v77 = (std::__shared_weak_count *)v75[1];
      if (v77) {
        atomic_fetch_add_explicit(&v77->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v113 = v77;
      uint64_t v79 = v114[4];
      if (v76 < ((v114[5] - v79) >> 4) - 1) {
        std::__hash_table<Espresso::basic_block *,std::hash<Espresso::basic_block *>,std::equal_to<Espresso::basic_block *>,std::allocator<Espresso::basic_block *>>::__emplace_unique_key_args<Espresso::basic_block *,Espresso::basic_block *>((float *)(v78 + 152), *(void *)(v79 + 16 * v76 + 16), *(void *)(v79 + 16 * v76 + 16));
      }
      for (uint64_t i = *(void *)(v78 + 8); i != v78; uint64_t i = *(void *)(i + 8))
      {
        std::string::size_type v81 = *(uint64_t **)(i + 16);
        uint64_t v82 = *v81;
        int v83 = *(const void **)(*v81 + 64);
        if (v83)
        {
          if (v84)
          {
            uint64_t v85 = v84;
            unint64_t v86 = *(std::__shared_weak_count **)(v82 + 72);
            if (v86) {
              atomic_fetch_add_explicit(&v86->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            if (*(void *)(v78 + 176))
            {
              int v87 = *(void **)(v78 + 168);
              if (v87)
              {
                do
                {
                  int v88 = (void *)*v87;
                  operator delete(v87);
                  int v87 = v88;
                }
                while (v88);
              }
              *(void *)(v78 + 168) = 0;
              uint64_t v89 = *(void *)(v78 + 160);
              if (v89)
              {
                for (uint64_t j = 0; j != v89; ++j)
                  *(void *)(*(void *)(v78 + 152) + 8 * j) = 0;
              }
              *(void *)(v78 + 176) = 0;
            }
            v131[0] = (long long *)(v85 + 296);
            char v91 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)__p, (uint64_t)(v85 + 296), (uint64_t)&std::piecewise_construct, v131);
            unint64_t v92 = (unint64_t)(*v115)[2 * *std::map<unsigned long,unsigned long>::at(v117[0], v91[5])];
            std::__hash_table<Espresso::basic_block *,std::hash<Espresso::basic_block *>,std::equal_to<Espresso::basic_block *>,std::allocator<Espresso::basic_block *>>::__emplace_unique_key_args<Espresso::basic_block *,Espresso::basic_block *>((float *)(v78 + 152), v92, v92);
            goto LABEL_167;
          }
          if (v93)
          {
            uint64_t v94 = v93;
            unint64_t v86 = *(std::__shared_weak_count **)(v82 + 72);
            if (v86) {
              atomic_fetch_add_explicit(&v86->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            std::__hash_table<Espresso::basic_block *,std::hash<Espresso::basic_block *>,std::equal_to<Espresso::basic_block *>,std::allocator<Espresso::basic_block *>>::__emplace_unique_key_args<Espresso::basic_block *,Espresso::basic_block *>((float *)(v78 + 152), v78, v78);
            v131[0] = (long long *)(v94 + 296);
            std::string::size_type v95 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)__p, (uint64_t)(v94 + 296), (uint64_t)&std::piecewise_construct, v131);
            unint64_t v96 = (unint64_t)(*v115)[2 * *std::map<unsigned long,unsigned long>::at(v117[0], v95[5])];
            std::__hash_table<Espresso::basic_block *,std::hash<Espresso::basic_block *>,std::equal_to<Espresso::basic_block *>,std::allocator<Espresso::basic_block *>>::__emplace_unique_key_args<Espresso::basic_block *,Espresso::basic_block *>((float *)(v78 + 152), v96, v96);
            goto LABEL_167;
          }
          if (v97)
          {
            unint64_t v86 = *(std::__shared_weak_count **)(v82 + 72);
            if (v86) {
              atomic_fetch_add_explicit(&v86->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            goto LABEL_166;
          }
          if (v97)
          {
            unint64_t v86 = *(std::__shared_weak_count **)(v82 + 72);
            if (v86) {
              atomic_fetch_add_explicit(&v86->__shared_owners_, 1uLL, memory_order_relaxed);
            }
LABEL_166:
            v131[0] = (long long *)(v97 + 296);
            std::string::size_type v98 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)__p, (uint64_t)(v97 + 296), (uint64_t)&std::piecewise_construct, v131);
            unint64_t v99 = (unint64_t)(*v115)[2 * *std::map<unsigned long,unsigned long>::at(v117[0], v98[5])];
            std::__hash_table<Espresso::basic_block *,std::hash<Espresso::basic_block *>,std::equal_to<Espresso::basic_block *>,std::allocator<Espresso::basic_block *>>::__emplace_unique_key_args<Espresso::basic_block *,Espresso::basic_block *>((float *)(v78 + 152), v99, v99);
LABEL_167:
            if (v86) {
              nitro::nitro_function::nitro_function(v86);
            }
            continue;
          }
          if (v100)
          {
            unint64_t v86 = *(std::__shared_weak_count **)(v82 + 72);
            if (v86) {
              atomic_fetch_add_explicit(&v86->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            if (v100[281])
            {
              v131[0] = (long long *)(v100 + 288);
              int v101 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)__p, (uint64_t)(v100 + 288), (uint64_t)&std::piecewise_construct, v131);
              unint64_t v102 = (unint64_t)(*v115)[2 * *std::map<unsigned long,unsigned long>::at(v117[0], v101[5])];
              std::__hash_table<Espresso::basic_block *,std::hash<Espresso::basic_block *>,std::equal_to<Espresso::basic_block *>,std::allocator<Espresso::basic_block *>>::__emplace_unique_key_args<Espresso::basic_block *,Espresso::basic_block *>((float *)(v78 + 152), v102, v102);
            }
            goto LABEL_167;
          }
        }
      }
      if (v113) {
        nitro::nitro_function::nitro_function(v113);
      }
      ++v76;
      v75 += 2;
    }
    while (v75 != v111);
    BOOL v103 = (unint64_t *)v114[4];
    for (uint64_t k = (unint64_t *)v114[5]; v103 != k; v103 += 2)
    {
      unint64_t v106 = *v103;
      int v105 = (std::__shared_weak_count *)v103[1];
      if (v105) {
        atomic_fetch_add_explicit(&v105->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      for (m = *(void **)(v106 + 168); m; m = (void *)*m)
        std::__hash_table<Espresso::basic_block *,std::hash<Espresso::basic_block *>,std::equal_to<Espresso::basic_block *>,std::allocator<Espresso::basic_block *>>::__emplace_unique_key_args<Espresso::basic_block *,Espresso::basic_block *>((float *)(m[2] + 112), v106, v106);
      if (v105) {
        nitro::nitro_function::nitro_function(v105);
      }
    }
  }
  atomic_fetch_add_explicit(v114 + 1, 1uLL, memory_order_relaxed);
  *(unsigned char *)uint64_t v110 = 1;
  *(void *)(v110 + 8) = v109;
  *(void *)(v110 + 16) = v114;
  atomic_fetch_add_explicit(v114 + 1, 1uLL, memory_order_relaxed);
  nitro::nitro_function::nitro_function((std::__shared_weak_count *)v114);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v116, v117[0]);
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__deallocate_node((void **)v120[0]);
  std::string::size_type v108 = __p[0];
  __p[0] = 0;
  if (v108) {
    operator delete(v108);
  }
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)v122);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)v124);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)v126);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)v128);
  nitro::nitro_function::nitro_function((std::__shared_weak_count *)v114);
}

void sub_192AEFE9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  if (v33) {
    nitro::nitro_function::nitro_function(v33);
  }
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::~__hash_table((uint64_t)&a21);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&a27);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&a33);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100](v34 - 208);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100](v34 - 160);
  nitro::nitro_function::nitro_function(a15);
  _Unwind_Resume(a1);
}

void *std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long>(uint64_t a1, unint64_t *a2, void *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    unint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      for (uint64_t i = *v9; i; uint64_t i = (void *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == v6)
        {
          if (i[2] == v6) {
            return i;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x18uLL);
  void *i = 0;
  i[1] = v6;
  i[2] = *a3;
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__rehash<true>(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v18 = *(void *)a1;
  uint64_t v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    void *i = *v19;
LABEL_38:
    *uint64_t v19 = i;
    goto LABEL_39;
  }
  void *i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v18 + 8 * v3) = a1 + 16;
  if (*i)
  {
    unint64_t v20 = *(void *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7) {
        v20 %= v7;
      }
    }
    else
    {
      v20 &= v7 - 1;
    }
    uint64_t v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_192AF0250(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<Espresso::basic_block *,std::hash<Espresso::basic_block *>,std::equal_to<Espresso::basic_block *>,std::allocator<Espresso::basic_block *>>::__emplace_unique_key_args<Espresso::basic_block *,Espresso::basic_block *>(float *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  unint64_t v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  unint64_t v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  unint64_t v9 = *((void *)a1 + 1);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }
    else
    {
      unint64_t v3 = v8 & (v9 - 1);
    }
    unint64_t v11 = *(void **)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      for (uint64_t i = (void *)*v11; i; uint64_t i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == a2) {
            return;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3) {
            break;
          }
        }
      }
    }
  }
  BOOL v14 = operator new(0x18uLL);
  *BOOL v14 = 0;
  v14[1] = v8;
  void v14[2] = a3;
  float v15 = (float)(unint64_t)(*((void *)a1 + 3) + 1);
  float v16 = a1[8];
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    BOOL v17 = 1;
    if (v9 >= 3) {
      BOOL v17 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v9);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      int8x8_t prime = (int8x8_t)v19;
    }
    else {
      int8x8_t prime = (int8x8_t)v18;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v9 = *((void *)a1 + 1);
    }
    if (*(void *)&prime > v9) {
      goto LABEL_30;
    }
    if (*(void *)&prime < v9)
    {
      unint64_t v27 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v9 < 3 || (uint8x8_t v28 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v28.i16[0] = vaddlv_u8(v28), v28.u32[0] > 1uLL))
      {
        unint64_t v27 = std::__next_prime(v27);
      }
      else
      {
        uint64_t v29 = 1 << -(char)__clz(v27 - 1);
        if (v27 >= 2) {
          unint64_t v27 = v29;
        }
      }
      if (*(void *)&prime <= v27) {
        int8x8_t prime = (int8x8_t)v27;
      }
      if (*(void *)&prime >= v9)
      {
        unint64_t v9 = *((void *)a1 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v21 = operator new(8 * *(void *)&prime);
          unint64_t v22 = *(void **)a1;
          *(void *)a1 = v21;
          if (v22) {
            operator delete(v22);
          }
          uint64_t v23 = 0;
          *((int8x8_t *)a1 + 1) = prime;
          do
            *(void *)(*(void *)a1 + 8 * v23++) = 0;
          while (*(void *)&prime != v23);
          uint64_t v24 = (void *)*((void *)a1 + 2);
          if (v24)
          {
            unint64_t v25 = v24[1];
            uint8x8_t v26 = (uint8x8_t)vcnt_s8(prime);
            v26.i16[0] = vaddlv_u8(v26);
            if (v26.u32[0] > 1uLL)
            {
              if (v25 >= *(void *)&prime) {
                v25 %= *(void *)&prime;
              }
            }
            else
            {
              v25 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)a1 + 8 * v25) = a1 + 4;
            unint64_t v30 = (void *)*v24;
            if (*v24)
            {
              do
              {
                unint64_t v31 = v30[1];
                if (v26.u32[0] > 1uLL)
                {
                  if (v31 >= *(void *)&prime) {
                    v31 %= *(void *)&prime;
                  }
                }
                else
                {
                  v31 &= *(void *)&prime - 1;
                }
                if (v31 != v25)
                {
                  if (!*(void *)(*(void *)a1 + 8 * v31))
                  {
                    *(void *)(*(void *)a1 + 8 * v31) = v24;
                    goto LABEL_55;
                  }
                  *uint64_t v24 = *v30;
                  void *v30 = **(void **)(*(void *)a1 + 8 * v31);
                  **(void **)(*(void *)a1 + 8 * v31) = v30;
                  unint64_t v30 = v24;
                }
                unint64_t v31 = v25;
LABEL_55:
                uint64_t v24 = v30;
                unint64_t v30 = (void *)*v30;
                unint64_t v25 = v31;
              }
              while (v30);
            }
          }
          unint64_t v9 = (unint64_t)prime;
          goto LABEL_59;
        }
        uint64_t v35 = *(void **)a1;
        *(void *)a1 = 0;
        if (v35) {
          operator delete(v35);
        }
        unint64_t v9 = 0;
        *((void *)a1 + 1) = 0;
      }
    }
LABEL_59:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v32 = *(void **)a1;
  uint64_t v33 = *(void **)(*(void *)a1 + 8 * v3);
  if (v33)
  {
    *BOOL v14 = *v33;
LABEL_72:
    *uint64_t v33 = v14;
    goto LABEL_73;
  }
  *BOOL v14 = *((void *)a1 + 2);
  *((void *)a1 + 2) = v14;
  v32[v3] = a1 + 4;
  if (*v14)
  {
    unint64_t v34 = *(void *)(*v14 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v34 >= v9) {
        v34 %= v9;
      }
    }
    else
    {
      v34 &= v9 - 1;
    }
    uint64_t v33 = (void *)(*(void *)a1 + 8 * v34);
    goto LABEL_72;
  }
LABEL_73:
  ++*((void *)a1 + 3);
}

void sub_192AF0668(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::basic_block>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)(a1 + 24);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100](a1 + 176);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100](a1 + 136);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a1 + 96);
  unint64_t v3 = (void **)(a1 + 72);
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v3);
  unint64_t v3 = (void **)(a1 + 48);
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v3);

  std::__list_imp<std::shared_ptr<Espresso::basic_block::instruction>>::clear(v2);
}

void std::__shared_ptr_emplace<Espresso::basic_block>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3817D8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::basic_block>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3817D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<Espresso::control_flow_graph>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::control_flow_graph>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE386628;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::control_flow_graph>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE386628;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::pass_control_flow_graph::get_analysis_usage(uint64_t a1, unsigned char *a2)
{
  *a2 = 1;
}

void Espresso::pass_control_flow_graph::~pass_control_flow_graph(Espresso::pass_control_flow_graph *this)
{
  *(void *)this = &unk_1EE3719B0;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v1;

  *(void *)this = &unk_1EE3719B0;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
}

uint64_t std::__shared_ptr_emplace<Espresso::pass_allocation>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::pass_allocation>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3830C8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::pass_allocation>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3830C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<Espresso::pass_liveness>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::pass_liveness>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE381DC0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::pass_liveness>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE381DC0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<Espresso::pass_re_lower_to_network>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::pass_re_lower_to_network>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3880D8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::pass_re_lower_to_network>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3880D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<Espresso::pass_block_transform>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::pass_block_transform>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE386F20;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::pass_block_transform>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE386F20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<Espresso::pass_tag_dynamic_blobs>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::pass_tag_dynamic_blobs>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE387968;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::pass_tag_dynamic_blobs>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE387968;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<Espresso::pass_make_ssa>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::pass_make_ssa>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE381DF8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::pass_make_ssa>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE381DF8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<Espresso::pass_control_flow_graph>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::pass_control_flow_graph>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE387C78;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::pass_control_flow_graph>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE387C78;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<Espresso::pass_bind_labels>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::pass_bind_labels>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3848A0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::pass_bind_labels>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3848A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

char *Espresso::control_flow_graph::blob_defined_in_block(char *this, uint64_t a2)
{
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_DWORD *)this + 8) = 1065353216;
  uint64_t v3 = *(void *)(a2 + 8);
  uint64_t v2 = *(void *)(a2 + 16);
  if (v2 != v3)
  {
    uint64_t v5 = (uint64_t *)this;
    unint64_t v6 = 0;
    do
    {
      unint64_t v7 = (uint64_t *)(v3 + 16 * v6);
      uint64_t v8 = *v7;
      uint64_t v9 = *(void *)(*v7 + 8);
      if (v9 != *v7)
      {
        do
        {
          uint64_t v10 = *(void *)(v9 + 16);
          unint64_t v11 = *(long long **)(v10 + 16);
          float v12 = *(long long **)(v10 + 24);
          while (v11 != v12)
          {
            std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(*v7 + 72, (uint64_t)v11, (uint64_t)v11);
            uint64_t v13 = *v7;
            BOOL v14 = v11;
            this = std::__hash_table<std::__hash_value_type<std::string,Espresso::basic_block *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::basic_block *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::basic_block *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::basic_block *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v5, (unsigned __int8 *)v11, &v14);
            *((void *)this + 5) = v13;
            unint64_t v11 = (long long *)((char *)v11 + 24);
          }
          uint64_t v9 = *(void *)(v9 + 8);
        }
        while (v9 != v8);
        uint64_t v3 = *(void *)(a2 + 8);
        uint64_t v2 = *(void *)(a2 + 16);
      }
      ++v6;
    }
    while (v6 < (v2 - v3) >> 4);
  }
  return this;
}

void sub_192AF0E94(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

double H12PlatformHeuristics::get_engine_switch_ms(uint64_t a1, int a2, int a3)
{
  int v10 = a3;
  int v11 = a2;
  double result = 0.0;
  if (a2 != a3)
  {
    unsigned int v5 = ((a2 - 10006) < 6) & (0x2Fu >> (a2 - 22));
    if (v5 == 1 && (is_cpu(&v10) & 1) != 0) {
      return 0.200000003;
    }
    int v6 = is_cpu(&v11);
    if (v6 && (a3 - 10006) <= 5 && ((0x2Fu >> (a3 - 22)) & 1) != 0) {
      return 0.0199999996;
    }
    int v7 = is_gpu(&v11);
    if (!v7 || (v8 = is_cpu(&v10), double result = 0.25, (v8 & 1) == 0))
    {
      if (!v6 || (v9 = is_gpu(&v10), double result = 0.25, (v9 & 1) == 0))
      {
        if (v5 && (is_gpu(&v10) & 1) != 0) {
          return 0.200000003;
        }
        if (v7 && (a3 - 10006) <= 5 && ((0x2Fu >> (a3 - 22)) & 1) != 0) {
          return 0.0199999996;
        }
        return 0.100000001;
      }
    }
  }
  return result;
}

double H12PlatformHeuristics::ane_gpu_net_compute_threshold(H12PlatformHeuristics *this)
{
  return 0.03;
}

uint64_t H12PlatformHeuristics::small_net_layer_count_threshold(H12PlatformHeuristics *this)
{
  return 10;
}

double H12PlatformHeuristics::GetANEDualSrcEWFactor(H12PlatformHeuristics *this)
{
  return 2.0;
}

double H12PlatformHeuristics::GetMPSDynamicConvFactor(H12PlatformHeuristics *this)
{
  return 10.0;
}

double H12PlatformHeuristics::GetMPSInnerProductFactor(H12PlatformHeuristics *this)
{
  return 4.0;
}

double H12PlatformHeuristics::GetANEOptimalityFactor(H12PlatformHeuristics *this)
{
  return 10.0;
}

double H12PlatformHeuristics::GetCPUAvgPoolFactor(H12PlatformHeuristics *this)
{
  return 1000.0;
}

double H12PlatformHeuristics::GetANESmallSourceFactor(H12PlatformHeuristics *this)
{
  return 8.0;
}

double H12PlatformHeuristics::GetGPULScale(H12PlatformHeuristics *this)
{
  return 0.5;
}

double H12PlatformHeuristics::GetGPULThreshold(H12PlatformHeuristics *this)
{
  return 0.00100000005;
}

double H12PlatformHeuristics::GetANEComputeRatio(H12PlatformHeuristics *this)
{
  return 0.4;
}

double H12PlatformHeuristics::GetDramBW(uint64_t a1, int a2)
{
  unint64_t v2 = *(void *)(a1 + 80);
  if (!v2) {
    goto LABEL_17;
  }
  uint8x8_t v3 = (uint8x8_t)vcnt_s8((int8x8_t)v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v4 = a2;
    if (v2 <= a2) {
      unint64_t v4 = a2 % v2;
    }
  }
  else
  {
    unint64_t v4 = (v2 - 1) & a2;
  }
  unsigned int v5 = *(uint64_t ***)(*(void *)(a1 + 72) + 8 * v4);
  if (!v5 || (int v6 = *v5) == 0) {
LABEL_17:
  }
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  while (1)
  {
    unint64_t v7 = v6[1];
    if (v7 == a2) {
      break;
    }
    if (v3.u32[0] > 1uLL)
    {
      if (v7 >= v2) {
        v7 %= v2;
      }
    }
    else
    {
      v7 &= v2 - 1;
    }
    if (v7 != v4) {
      goto LABEL_17;
    }
LABEL_16:
    int v6 = (uint64_t *)*v6;
    if (!v6) {
      goto LABEL_17;
    }
  }
  if (*((_DWORD *)v6 + 4) != a2) {
    goto LABEL_16;
  }
  return *((double *)v6 + 3);
}

uint64_t H12PlatformHeuristics::GetAnePerfHeuristics(H12PlatformHeuristics *this)
{
  return (uint64_t)this + 240;
}

uint64_t H12PlatformHeuristics::GetGpuPerfHeuristics(H12PlatformHeuristics *this)
{
  return (uint64_t)this + 408;
}

uint64_t H12PlatformHeuristics::GetCpuPerfHeuristics(H12PlatformHeuristics *this)
{
  return (uint64_t)this + 112;
}

uint64_t H12PlatformHeuristics::GetPlatformEnum(H12PlatformHeuristics *this)
{
  return 1;
}

uint64_t H12PlatformHeuristics::num_acce(H12PlatformHeuristics *this)
{
  return 4;
}

uint64_t H12PlatformHeuristics::num_accp(H12PlatformHeuristics *this)
{
  return 2;
}

uint64_t H12PlatformHeuristics::num_gpus(H12PlatformHeuristics *this)
{
  return 1;
}

uint64_t H12PlatformHeuristics::num_anes(H12PlatformHeuristics *this)
{
  return 1;
}

void H12PlatformHeuristics::~H12PlatformHeuristics(H12PlatformHeuristics *this)
{
  H12PlatformHeuristics::~H12PlatformHeuristics(this);

  JUMPOUT(0x192FF16B0);
}

{
  char *v2;

  *(void *)this = &unk_1EE321A18;
  unint64_t v2 = (char *)this + 72;
  H12GPUHeuristics::~H12GPUHeuristics((H12PlatformHeuristics *)((char *)this + 408));
  H12ANEHeuristics::~H12ANEHeuristics((H12PlatformHeuristics *)((char *)this + 240));
  H12ACCPHeuristics::~H12ACCPHeuristics((H12PlatformHeuristics *)((char *)this + 112));
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)v2);
  *(void *)this = &unk_1EE3216A0;
  std::mutex::~mutex((std::mutex *)((char *)this + 8));
}

double newpPlatformHeuristics::GetMPSDynamicConvFactor(newpPlatformHeuristics *this)
{
  return 10.0;
}

double newpPlatformHeuristics::GetCPUAvgPoolFactor(newpPlatformHeuristics *this)
{
  return 1000.0;
}

double newpPlatformHeuristics::GetANESmallSourceFactor(newpPlatformHeuristics *this)
{
  return 6.0;
}

uint64_t newpPlatformHeuristics::num_acce(newpPlatformHeuristics *this)
{
  return 4;
}

uint64_t newpPlatformHeuristics::num_accp(newpPlatformHeuristics *this)
{
  return 2;
}

uint64_t newpPlatformHeuristics::num_gpus(newpPlatformHeuristics *this)
{
  return 1;
}

uint64_t newpPlatformHeuristics::num_anes(newpPlatformHeuristics *this)
{
  return 1;
}

void newpPlatformHeuristics::~newpPlatformHeuristics(newpPlatformHeuristics *this)
{
  newpPlatformHeuristics::~newpPlatformHeuristics(this);

  JUMPOUT(0x192FF16B0);
}

{
  char *v2;

  *(void *)this = &unk_1EE321C10;
  unint64_t v2 = (char *)this + 72;
  newpGPUHeuristics::~newpGPUHeuristics((newpPlatformHeuristics *)((char *)this + 408));
  newpANEHeuristics::~newpANEHeuristics((newpPlatformHeuristics *)((char *)this + 240));
  newpACCPHeuristics::~newpACCPHeuristics((newpPlatformHeuristics *)((char *)this + 112));
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)v2);
  *(void *)this = &unk_1EE3216A0;
  std::mutex::~mutex((std::mutex *)((char *)this + 8));
}

uint64_t JadePlatformHeuristics::is_jade_family(JadePlatformHeuristics *this)
{
  return 1;
}

double JadePlatformHeuristics::get_engine_switch_ms(uint64_t a1, int a2, int a3)
{
  int v8 = a3;
  int v9 = a2;
  double result = 0.0;
  if (a2 != a3)
  {
    unsigned int v5 = ((a2 - 10006) < 6) & (0x2Fu >> (a2 - 22));
    if (v5 == 1 && (is_cpu(&v8) & 1) != 0) {
      return 0.100000001;
    }
    int v6 = is_cpu(&v9);
    if (v6 && (a3 - 10006) <= 5 && ((0x2Fu >> (a3 - 22)) & 1) != 0) {
      return 0.0199999996;
    }
    int v7 = is_gpu(&v9);
    if (v7 && (is_cpu(&v8) & 1) != 0 || v6 && (is_gpu(&v8) & 1) != 0) {
      return 0.150000006;
    }
    if (!v5 || (is_gpu(&v8) & 1) == 0) && v7 && (a3 - 10006) <= 5 && ((0x2Fu >> (a3 - 22))) {
      return 0.0199999996;
    }
    else {
      return 0.100000001;
    }
  }
  return result;
}

double JadePlatformHeuristics::ane_gpu_net_compute_threshold(JadePlatformHeuristics *this)
{
  return 0.03;
}

uint64_t JadePlatformHeuristics::small_net_layer_count_threshold(JadePlatformHeuristics *this)
{
  return 10;
}

double JadePlatformHeuristics::GetANEDualSrcEWFactor(JadePlatformHeuristics *this)
{
  return 1.0;
}

double JadePlatformHeuristics::GetMPSDynamicConvFactor(JadePlatformHeuristics *this)
{
  return 10.0;
}

double JadePlatformHeuristics::GetMPSInnerProductFactor(JadePlatformHeuristics *this)
{
  return 4.0;
}

double JadePlatformHeuristics::GetANEOptimalityFactor(JadePlatformHeuristics *this)
{
  return 10.0;
}

double JadePlatformHeuristics::GetCPUAvgPoolFactor(JadePlatformHeuristics *this)
{
  return 1000.0;
}

double JadePlatformHeuristics::GetANESmallSourceFactor(JadePlatformHeuristics *this)
{
  return 6.0;
}

double JadePlatformHeuristics::GetGPULScale(JadePlatformHeuristics *this)
{
  return 0.5;
}

double JadePlatformHeuristics::GetGPULThreshold(JadePlatformHeuristics *this)
{
  return 0.00499999989;
}

double JadePlatformHeuristics::GetANEComputeRatio(JadePlatformHeuristics *this)
{
  return 0.6;
}

double JadePlatformHeuristics::GetDramBW(uint64_t a1, int a2)
{
  unint64_t v2 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((void *)(a1 + 72), a2);
  if (!v2) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  return *((float *)v2 + 5);
}

uint64_t JadePlatformHeuristics::GetAnePerfHeuristics(JadePlatformHeuristics *this)
{
  return (uint64_t)this + 240;
}

uint64_t JadePlatformHeuristics::GetGpuPerfHeuristics(JadePlatformHeuristics *this)
{
  return (uint64_t)this + 408;
}

uint64_t JadePlatformHeuristics::GetCpuPerfHeuristics(JadePlatformHeuristics *this)
{
  return (uint64_t)this + 112;
}

uint64_t JadePlatformHeuristics::GetPlatformEnum(JadePlatformHeuristics *this)
{
  return 2;
}

uint64_t JadePlatformHeuristics::num_acce(JadePlatformHeuristics *this)
{
  return 4;
}

uint64_t JadePlatformHeuristics::num_accp(JadePlatformHeuristics *this)
{
  return 2;
}

uint64_t JadePlatformHeuristics::num_gpus(JadePlatformHeuristics *this)
{
  return 1;
}

uint64_t JadePlatformHeuristics::num_anes(JadePlatformHeuristics *this)
{
  return 1;
}

void JadePlatformHeuristics::~JadePlatformHeuristics(JadePlatformHeuristics *this)
{
  JadePlatformHeuristics::~JadePlatformHeuristics(this);

  JUMPOUT(0x192FF16B0);
}

{
  char *v2;

  *(void *)this = &unk_1EE321B40;
  unint64_t v2 = (char *)this + 72;
  JadeGPUHeuristics::~JadeGPUHeuristics((JadePlatformHeuristics *)((char *)this + 408));
  newpANEHeuristics::~newpANEHeuristics((JadePlatformHeuristics *)((char *)this + 240));
  newpACCPHeuristics::~newpACCPHeuristics((JadePlatformHeuristics *)((char *)this + 112));
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)v2);
  *(void *)this = &unk_1EE3216A0;
  std::mutex::~mutex((std::mutex *)((char *)this + 8));
}

void std::__shared_ptr_emplace<Espresso::blob_storage_memory>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE386A18;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::blob_storage_memory>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE386A18;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void ___ZN8Espresso11Image2Image10settings_t6sharedEv_block_invoke()
{
}

void Espresso::Image2Image::settings_t::load_style_settings_from_dict(uint64_t **this, NSDictionary *a2)
{
  uint64_t v148 = *MEMORY[0x1E4F143B8];
  uint64_t v137 = a2;
  if (v137)
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      uint8x8_t v3 = [(NSDictionary *)v137 objectForKeyedSubscript:@"wisdom_path"];

      if (v3)
      {
        id v4 = [(NSDictionary *)v137 objectForKeyedSubscript:@"wisdom_path"];
        MEMORY[0x192FF0F50](this + 3, [v4 UTF8String]);
      }
      long long v142 = 0u;
      long long v143 = 0u;
      long long v140 = 0u;
      long long v141 = 0u;
      obuint64_t j = [(NSDictionary *)v137 objectForKeyedSubscript:@"styles"];
      uint64_t v5 = [obj countByEnumeratingWithState:&v140 objects:v147 count:16];
      if (v5)
      {
        unint64_t v135 = (char *)(this + 1);
        uint64_t v6 = *(void *)v141;
        long long v134 = xmmword_192DCA2A0;
        long long v133 = xmmword_192DCA300;
        long long v132 = xmmword_192DCA310;
        long long v131 = xmmword_192DCA320;
        long long v130 = xmmword_192DCA2E0;
        do
        {
          uint64_t v7 = 0;
          do
          {
            if (*(void *)v141 != v6) {
              objc_enumerationMutation(obj);
            }
            int v8 = *(void **)(*((void *)&v140 + 1) + 8 * v7);
            int v9 = [(NSDictionary *)v137 objectForKeyedSubscript:@"styles", v130, v131, v132, v133, v134, v135];
            int v10 = [v9 objectForKeyedSubscript:v8];

            std::string::basic_string[abi:ne180100]<0>(__p, (char *)[v8 UTF8String]);
            int v11 = (void **)std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__find_equal<std::string>((uint64_t)this, &v146, __p);
            float v12 = (char *)*v11;
            if (!*v11)
            {
              uint64_t v13 = (uint64_t **)v11;
              float v12 = (char *)operator new(0xE8uLL);
              v144[1] = (uint64_t)v135;
              *((_OWORD *)v12 + 2) = *(_OWORD *)__p;
              *((void *)v12 + 6) = v139;
              __p[0] = 0;
              __p[1] = 0;
              uint64_t v139 = 0;
              *(_OWORD *)(v12 + 56) = 0u;
              *(_OWORD *)(v12 + 72) = 0u;
              *(_OWORD *)(v12 + 88) = 0u;
              *(_OWORD *)(v12 + 104) = 0u;
              *(_OWORD *)(v12 + 120) = 0u;
              *(_OWORD *)(v12 + 136) = 0u;
              *(_OWORD *)(v12 + 152) = 0u;
              *(_OWORD *)(v12 + 168) = 0u;
              *(_OWORD *)(v12 + 184) = 0u;
              *(_OWORD *)(v12 + 200) = 0u;
              *(_OWORD *)(v12 + 216) = 0u;
              *((_DWORD *)v12 + 27) = 1050253722;
              *(_OWORD *)(v12 + 120) = v134;
              *((_OWORD *)v12 + 9) = v133;
              *((_OWORD *)v12 + 10) = v132;
              *((_OWORD *)v12 + 11) = v131;
              *((void *)v12 + 24) = 0x3F8000003DA3D70ALL;
              *(_OWORD *)(v12 + 204) = v130;
              *(void *)(v12 + 220) = 0x3F8000003F79999ALL;
              char v145 = 1;
              std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at(this, v146, v13, (uint64_t *)v12);
              v144[0] = 0;
              std::unique_ptr<std::__tree_node<std::__value_type<std::string,Espresso::Image2Image::postprocessing_settings_t>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,Espresso::Image2Image::postprocessing_settings_t>,void *>>>>::reset[abi:ne180100](v144);
            }
            if (SHIBYTE(v139) < 0) {
              operator delete(__p[0]);
            }
            BOOL v14 = [v10 objectForKeyedSubscript:@"name"];
            BOOL v15 = v14 == 0;

            if (!v15)
            {
              id v16 = [v10 objectForKeyedSubscript:@"name"];
              MEMORY[0x192FF0F50](v12 + 56, [v16 UTF8String]);
            }
            BOOL v17 = [v10 objectForKeyedSubscript:@"network"];
            BOOL v18 = v17 == 0;

            if (!v18)
            {
              id v19 = [v10 objectForKeyedSubscript:@"network"];
              MEMORY[0x192FF0F50](v12 + 80, [v19 UTF8String]);
            }
            unint64_t v20 = [v10 objectForKeyedSubscript:@"do_blend"];
            BOOL v21 = v20 == 0;

            if (!v21)
            {
              unint64_t v22 = [v10 objectForKeyedSubscript:@"do_blend"];
              *((_DWORD *)v12 + 26) = [v22 intValue];
            }
            uint64_t v23 = [v10 objectForKeyedSubscript:@"blend_alpha"];
            BOOL v24 = v23 == 0;

            if (!v24)
            {
              unint64_t v25 = [v10 objectForKeyedSubscript:@"blend_alpha"];
              [v25 floatValue];
              *((_DWORD *)v12 + 27) = v26;
            }
            unint64_t v27 = [v10 objectForKeyedSubscript:@"grayscale_i0"];
            BOOL v28 = v27 == 0;

            if (!v28)
            {
              uint64_t v29 = [v10 objectForKeyedSubscript:@"grayscale_i0"];
              *((_DWORD *)v12 + 28) = [v29 intValue];
            }
            unint64_t v30 = [v10 objectForKeyedSubscript:@"grayscale_i1"];
            BOOL v31 = v30 == 0;

            if (!v31)
            {
              uint64_t v32 = [v10 objectForKeyedSubscript:@"grayscale_i1"];
              *((_DWORD *)v12 + 29) = [v32 intValue];
            }
            uint64_t v33 = [v10 objectForKeyedSubscript:@"temporal_alpha"];
            BOOL v34 = v33 == 0;

            if (!v34)
            {
              uint64_t v35 = [v10 objectForKeyedSubscript:@"temporal_alpha"];
              [v35 floatValue];
              *((_DWORD *)v12 + 30) = v36;
            }
            uint64_t v37 = [v10 objectForKeyedSubscript:@"gamma"];
            BOOL v38 = v37 == 0;

            if (!v38)
            {
              uint64_t v39 = [v10 objectForKeyedSubscript:@"gamma"];
              [v39 floatValue];
              *((_DWORD *)v12 + 31) = v40;
            }
            unint64_t v41 = [v10 objectForKeyedSubscript:@"saturation"];
            BOOL v42 = v41 == 0;

            if (!v42)
            {
              uint64_t v43 = [v10 objectForKeyedSubscript:@"saturation"];
              [v43 floatValue];
              *((_DWORD *)v12 + 32) = v44;
            }
            float v45 = [v10 objectForKeyedSubscript:@"contrast"];
            BOOL v46 = v45 == 0;

            if (!v46)
            {
              uint64_t v47 = [v10 objectForKeyedSubscript:@"contrast"];
              [v47 floatValue];
              *((_DWORD *)v12 + 33) = v48;
            }
            std::string::size_type v49 = [v10 objectForKeyedSubscript:@"brightness"];
            BOOL v50 = v49 == 0;

            if (!v50)
            {
              uint64_t v51 = [v10 objectForKeyedSubscript:@"brightness"];
              [v51 floatValue];
              *((_DWORD *)v12 + 34) = v52;
            }
            uint64_t v53 = [v10 objectForKeyedSubscript:@"noise_strength"];
            BOOL v54 = v53 == 0;

            if (!v54)
            {
              uint64_t v55 = [v10 objectForKeyedSubscript:@"noise_strength"];
              [v55 floatValue];
              *((_DWORD *)v12 + 49) = v56;
            }
            int v57 = [v10 objectForKeyedSubscript:@"noise_speed"];
            BOOL v58 = v57 == 0;

            if (!v58)
            {
              char v59 = [v10 objectForKeyedSubscript:@"noise_speed"];
              [v59 floatValue];
              *((_DWORD *)v12 + 51) = v60;
            }
            unint64_t v61 = [v10 objectForKeyedSubscript:@"color_transfer_mode"];
            BOOL v62 = v61 == 0;

            if (!v62)
            {
              BOOL v63 = [v10 objectForKeyedSubscript:@"color_transfer_mode"];
              *((_DWORD *)v12 + 35) = [v63 intValue];
            }
            uint64_t v64 = [v10 objectForKeyedSubscript:@"width"];
            BOOL v65 = v64 == 0;

            if (!v65)
            {
              uint64_t v66 = [v10 objectForKeyedSubscript:@"width"];
              *((_DWORD *)v12 + 36) = [v66 intValue];
            }
            unint64_t v67 = [v10 objectForKeyedSubscript:@"height"];
            BOOL v68 = v67 == 0;

            if (!v68)
            {
              long long v69 = [v10 objectForKeyedSubscript:@"height"];
              *((_DWORD *)v12 + 37) = [v69 intValue];
            }
            uint64_t v70 = [v10 objectForKeyedSubscript:@"width_fast"];
            BOOL v71 = v70 == 0;

            if (!v71)
            {
              long long v72 = [v10 objectForKeyedSubscript:@"width_fast"];
              *((_DWORD *)v12 + 38) = [v72 intValue];
            }
            int v73 = [v10 objectForKeyedSubscript:@"height_fast"];
            BOOL v74 = v73 == 0;

            if (!v74)
            {
              char v75 = [v10 objectForKeyedSubscript:@"height_fast"];
              *((_DWORD *)v12 + 39) = [v75 intValue];
            }
            unint64_t v76 = [v10 objectForKeyedSubscript:@"width_capture"];
            BOOL v77 = v76 == 0;

            if (!v77)
            {
              unint64_t v78 = [v10 objectForKeyedSubscript:@"width_capture"];
              *((_DWORD *)v12 + 40) = [v78 intValue];
            }
            uint64_t v79 = [v10 objectForKeyedSubscript:@"height_capture"];
            BOOL v80 = v79 == 0;

            if (!v80)
            {
              std::string::size_type v81 = [v10 objectForKeyedSubscript:@"height_capture"];
              *((_DWORD *)v12 + 41) = [v81 intValue];
            }
            uint64_t v82 = [v10 objectForKeyedSubscript:@"width_miniature"];
            BOOL v83 = v82 == 0;

            if (!v83)
            {
              uint64_t v84 = [v10 objectForKeyedSubscript:@"width_miniature"];
              *((_DWORD *)v12 + 42) = [v84 intValue];
            }
            uint64_t v85 = [v10 objectForKeyedSubscript:@"height_miniature"];
            BOOL v86 = v85 == 0;

            if (!v86)
            {
              int v87 = [v10 objectForKeyedSubscript:@"height_miniature"];
              *((_DWORD *)v12 + 43) = [v87 intValue];
            }
            int v88 = [v10 objectForKeyedSubscript:@"width_fullscreen"];
            BOOL v89 = v88 == 0;

            if (!v89)
            {
              int v90 = [v10 objectForKeyedSubscript:@"width_fullscreen"];
              *((_DWORD *)v12 + 44) = [v90 intValue];
            }
            char v91 = [v10 objectForKeyedSubscript:@"height_fullscreen"];
            BOOL v92 = v91 == 0;

            if (!v92)
            {
              uint64_t v93 = [v10 objectForKeyedSubscript:@"height_fullscreen"];
              *((_DWORD *)v12 + 45) = [v93 intValue];
            }
            uint64_t v94 = [v10 objectForKeyedSubscript:@"width_hd"];
            BOOL v95 = v94 == 0;

            if (!v95)
            {
              unint64_t v96 = [v10 objectForKeyedSubscript:@"width_hd"];
              *((_DWORD *)v12 + 46) = [v96 intValue];
            }
            std::string::size_type v97 = [v10 objectForKeyedSubscript:@"height_hd"];
            BOOL v98 = v97 == 0;

            if (!v98)
            {
              unint64_t v99 = [v10 objectForKeyedSubscript:@"height_hd"];
              *((_DWORD *)v12 + 47) = [v99 intValue];
            }
            uint64_t v100 = [v10 objectForKeyedSubscript:@"dyn_noise"];
            BOOL v101 = v100 == 0;

            if (!v101)
            {
              unint64_t v102 = [v10 objectForKeyedSubscript:@"dyn_noise"];
              *((_DWORD *)v12 + 50) = [v102 intValue];
            }
            BOOL v103 = [v10 objectForKeyedSubscript:@"high_quality_scaling"];
            BOOL v104 = v103 == 0;

            if (!v104)
            {
              int v105 = [v10 objectForKeyedSubscript:@"high_quality_scaling"];
              v12[228] = [v105 BOOLValue];
            }
            unint64_t v106 = [v10 objectForKeyedSubscript:@"old_frame_scale"];
            BOOL v107 = v106 == 0;

            if (!v107)
            {
              std::string::size_type v108 = [v10 objectForKeyedSubscript:@"old_frame_scale"];
              [v108 floatValue];
              *((_DWORD *)v12 + 48) = v109;
            }
            uint64_t v110 = [v10 objectForKeyedSubscript:@"preprocessing_bias_b"];
            BOOL v111 = v110 == 0;

            if (!v111)
            {
              unint64_t v112 = [v10 objectForKeyedSubscript:@"preprocessing_bias_b"];
              [v112 floatValue];
              *((_DWORD *)v12 + 52) = v113;
            }
            uint64_t v114 = [v10 objectForKeyedSubscript:@"preprocessing_bias_g"];
            BOOL v115 = v114 == 0;

            if (!v115)
            {
              std::string v116 = [v10 objectForKeyedSubscript:@"preprocessing_bias_g"];
              [v116 floatValue];
              *((_DWORD *)v12 + 53) = v117;
            }
            unint64_t v118 = [v10 objectForKeyedSubscript:@"preprocessing_bias_r"];
            BOOL v119 = v118 == 0;

            if (!v119)
            {
              uint64_t v120 = [v10 objectForKeyedSubscript:@"preprocessing_bias_r"];
              [v120 floatValue];
              *((_DWORD *)v12 + 54) = v121;
            }
            uint64_t v122 = [v10 objectForKeyedSubscript:@"preprocessing_scale"];
            BOOL v123 = v122 == 0;

            if (!v123)
            {
              uint64_t v124 = [v10 objectForKeyedSubscript:@"preprocessing_scale"];
              [v124 floatValue];
              *((_DWORD *)v12 + 55) = v125;
            }
            int v126 = [v10 objectForKeyedSubscript:@"preprocessing_old_frame_bias_scale"];
            BOOL v127 = v126 == 0;

            if (!v127)
            {
              std::string v128 = [v10 objectForKeyedSubscript:@"preprocessing_old_frame_bias_scale"];
              [v128 floatValue];
              *((_DWORD *)v12 + 56) = v129;
            }
            ++v7;
          }
          while (v5 != v7);
          uint64_t v5 = [obj countByEnumeratingWithState:&v140 objects:v147 count:16];
        }
        while (v5);
      }
    }
  }
}

void sub_192AF235C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,void *a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  _Unwind_Resume(a1);
}

void Espresso::MetalLowmemEngine::rnn_kernel::set_seq(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  int v18 = a4;
  int v9 = *(Espresso::context_metal **)(a1 + 8);
  id v10 = *(id *)(*(void *)a2 + 152);
  if (*(_DWORD *)(*(void *)a3 + 20) <= a4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Seq error");
    goto LABEL_7;
  }
  if (!*(void *)(a1 + 880))
  {
    uint64_t v11 = Espresso::context_metal::kernel_for_function(v9, &cfstr_RnnSetSeq.isa);
    float v12 = *(void **)(a1 + 880);
    *(void *)(a1 + 880) = v11;

    if (!*(void *)(a1 + 880))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Kernel not found");
LABEL_7:
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
  objc_msgSend(v10, "setComputePipelineState:");
  [v10 setBuffer:*(void *)(*(void *)a3 + 160) offset:0 atIndex:0];
  [v10 setBuffer:*(void *)(*(void *)a5 + 160) offset:0 atIndex:1];
  [v10 setBytes:&v18 length:4 atIndex:2];
  int64x2_t v16 = vdupq_n_s64(1uLL);
  uint64_t v17 = 1;
  int64x2_t v14 = v16;
  uint64_t v15 = 1;
  [v10 dispatchThreadgroups:&v16 threadsPerThreadgroup:&v14];
}

void sub_192AF26DC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);

  _Unwind_Resume(a1);
}

void Espresso::MetalLowmemEngine::rnn_kernel::__launch_gru()
{
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "not implemented");
  __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
}

void sub_192AF274C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void Espresso::MetalLowmemEngine::rnn_kernel::__launch_rnn()
{
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "not implemented");
  __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
}

void sub_192AF27A8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

double Espresso::MetalLowmemEngine::rnn_kernel::blob_container_options_for_weight@<D0>(void *a1@<X8>)
{
  unint64_t v2 = operator new(0x78uLL);
  v2[1] = 0;
  v2[2] = 0;
  void *v2 = &unk_1EE385C88;
  *((_OWORD *)v2 + 5) = 0u;
  *((_OWORD *)v2 + 6) = 0u;
  *((_OWORD *)v2 + 3) = 0u;
  *((_OWORD *)v2 + 4) = 0u;
  *((_OWORD *)v2 + 2) = 0u;
  v2[13] = 0;
  v2[14] = 0;
  *((_DWORD *)v2 + 12) = 1065353216;
  *(void *)&double result = 0x1FFFFFFFFLL;
  v2[7] = 0x1FFFFFFFFLL;
  v2[12] = 0;
  v2[8] = 0;
  v2[9] = 0;
  *((unsigned char *)v2 + 88) = 0;
  v2[10] = 0;
  v2[3] = &unk_1EE349D58;
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void *Espresso::MetalLowmemEngine::rnn_kernel::blob_options@<X0>(Espresso::MetalLowmemEngine::rnn_kernel *this@<X0>, int a2@<W1>, int a3@<W2>, void *a4@<X8>)
{
  double result = operator new(0x78uLL);
  result[1] = 0;
  result[2] = 0;
  *double result = &unk_1EE385C88;
  *((_OWORD *)result + 2) = 0u;
  *((_OWORD *)result + 3) = 0u;
  *((_OWORD *)result + 4) = 0u;
  *((_OWORD *)result + 5) = 0u;
  *((_OWORD *)result + 6) = 0u;
  result[13] = 0;
  result[14] = 0;
  *((_DWORD *)result + 12) = 1065353216;
  result[7] = 0x1FFFFFFFFLL;
  result[12] = 0;
  result[8] = 0;
  result[9] = 0;
  *((unsigned char *)result + 88) = 0;
  result[10] = 0;
  result[3] = &unk_1EE349D58;
  if (!a3 && *((_DWORD *)this + 80) == 1 && a2) {
    *((unsigned char *)result + 32) = 1;
  }
  *a4 = result + 3;
  a4[1] = result;
  return result;
}

void Espresso::MetalLowmemEngine::rnn_kernel::~rnn_kernel(id *this)
{
  Espresso::generic_rnn_kernel::~generic_rnn_kernel((Espresso::generic_rnn_kernel *)this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t vars8;

  Espresso::generic_rnn_kernel::~generic_rnn_kernel((Espresso::generic_rnn_kernel *)this);
}

void Espresso::analysis_ane_multi_head::~analysis_ane_multi_head(Espresso::analysis_ane_multi_head *this)
{
  *(void *)this = &unk_1EE359F08;
  std::__tree<int>::destroy(*((void **)this + 5));
  std::__tree<std::__value_type<int,Espresso::analysis_ane_multi_head::coalesced_segments_group_t>,std::__map_value_compare<int,std::__value_type<int,Espresso::analysis_ane_multi_head::coalesced_segments_group_t>,std::less<int>,true>,std::allocator<std::__value_type<int,Espresso::analysis_ane_multi_head::coalesced_segments_group_t>>>::destroy(*((void **)this + 2));

  JUMPOUT(0x192FF16B0);
}

{
  *(void *)this = &unk_1EE359F08;
  std::__tree<int>::destroy(*((void **)this + 5));
  std::__tree<std::__value_type<int,Espresso::analysis_ane_multi_head::coalesced_segments_group_t>,std::__map_value_compare<int,std::__value_type<int,Espresso::analysis_ane_multi_head::coalesced_segments_group_t>,std::less<int>,true>,std::allocator<std::__value_type<int,Espresso::analysis_ane_multi_head::coalesced_segments_group_t>>>::destroy(*((void **)this + 2));
}

void std::__tree<std::__value_type<int,Espresso::analysis_ane_multi_head::coalesced_segments_group_t>,std::__map_value_compare<int,std::__value_type<int,Espresso::analysis_ane_multi_head::coalesced_segments_group_t>,std::less<int>,true>,std::allocator<std::__value_type<int,Espresso::analysis_ane_multi_head::coalesced_segments_group_t>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<int,Espresso::analysis_ane_multi_head::coalesced_segments_group_t>,std::__map_value_compare<int,std::__value_type<int,Espresso::analysis_ane_multi_head::coalesced_segments_group_t>,std::less<int>,true>,std::allocator<std::__value_type<int,Espresso::analysis_ane_multi_head::coalesced_segments_group_t>>>::destroy(*a1);
    std::__tree<std::__value_type<int,Espresso::analysis_ane_multi_head::coalesced_segments_group_t>,std::__map_value_compare<int,std::__value_type<int,Espresso::analysis_ane_multi_head::coalesced_segments_group_t>,std::less<int>,true>,std::allocator<std::__value_type<int,Espresso::analysis_ane_multi_head::coalesced_segments_group_t>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<int const,Espresso::analysis_ane_multi_head::coalesced_segments_group_t>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<int const,Espresso::analysis_ane_multi_head::coalesced_segments_group_t>,0>(uint64_t a1)
{
  std::__tree<std::__value_type<unsigned long long,Espresso::analysis_ane_multi_head::runtime_segment_combination_t>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,Espresso::analysis_ane_multi_head::runtime_segment_combination_t>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,Espresso::analysis_ane_multi_head::runtime_segment_combination_t>>>::destroy(*(void **)(a1 + 40));
  unint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(void *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

void std::__tree<std::__value_type<unsigned long long,Espresso::analysis_ane_multi_head::runtime_segment_combination_t>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,Espresso::analysis_ane_multi_head::runtime_segment_combination_t>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,Espresso::analysis_ane_multi_head::runtime_segment_combination_t>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<unsigned long long,Espresso::analysis_ane_multi_head::runtime_segment_combination_t>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,Espresso::analysis_ane_multi_head::runtime_segment_combination_t>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,Espresso::analysis_ane_multi_head::runtime_segment_combination_t>>>::destroy(*a1);
    std::__tree<std::__value_type<unsigned long long,Espresso::analysis_ane_multi_head::runtime_segment_combination_t>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,Espresso::analysis_ane_multi_head::runtime_segment_combination_t>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,Espresso::analysis_ane_multi_head::runtime_segment_combination_t>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<unsigned long long const,Espresso::analysis_ane_multi_head::runtime_segment_combination_t>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<unsigned long long const,Espresso::analysis_ane_multi_head::runtime_segment_combination_t>,0>(uint64_t a1)
{
  uint8x8_t v3 = (void **)(a1 + 56);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint8x8_t v3 = (void **)(a1 + 32);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  unint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(void *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

void Espresso::pass_ane_multi_head::run_on_network(Espresso::net *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v280 = *MEMORY[0x1E4F143B8];
  unsigned int v5 = (***(uint64_t (****)(void))(*((void *)a1 + 2) + 8))(*(void *)(*((void *)a1 + 2) + 8));
  uint64_t v6 = std::__hash_table<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::__unordered_map_hasher<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::hash<Espresso::platform>,std::equal_to<Espresso::platform>,true>,std::__unordered_map_equal<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::equal_to<Espresso::platform>,std::hash<Espresso::platform>,true>,std::allocator<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>>>::find<Espresso::platform>((void *)a1 + 66, v5);
  if (!v6) {
    goto LABEL_415;
  }
  uint64_t v7 = v6;
  int v8 = (const void *)v6[3];
  int v9 = (std::__shared_weak_count *)v7[4];
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v246 = v9;
  if (!v8
  {
    if (v246) {
      nitro::nitro_function::nitro_function(v246);
    }
LABEL_415:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
    Espresso::invalid_state_error::invalid_state_error(exception);
  }
  if (v246)
  {
    atomic_fetch_add_explicit(&v246->__shared_owners_, 1uLL, memory_order_relaxed);
    nitro::nitro_function::nitro_function(v246);
  }
  std::vector<std::unordered_set<std::string>>::vector(&v266, 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v254[5] - v254[4]) >> 3));
  uint64_t v245 = a2;
  uint64_t v263 = 0;
  uint64_t v264 = 0;
  uint64_t v265 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v263, *((void *)a1 + 83), *((void *)a1 + 84), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a1 + 84) - *((void *)a1 + 83)) >> 3));
  uint64_t v12 = *((void *)a1 + 4);
  if (*((void *)a1 + 5) != v12)
  {
    unint64_t v13 = 0;
    while (1)
    {
      uint64_t v14 = *(void *)(v12 + 16 * v13);
      uint64_t v10 = *(void *)(v14 + 64);
      if (v10)
      {
        if (v10) {
          break;
        }
      }
LABEL_32:
      uint64_t v21 = v254[10];
      if (v13 < (v254[11] - v21) >> 2)
      {
        unsigned int v22 = *(_DWORD *)(v21 + 4 * v13);
        if ((v22 & 0x80000000) == 0)
        {
          std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__rehash<true>(v266 + 40 * v22, vcvtps_u32_f32((float)(0xAAAAAAAAAAAAAAABLL * ((v264 - v263) >> 3)) / *(float *)(v266 + 40 * v22 + 32)));
          uint64_t v24 = v263;
          uint64_t v23 = v264;
          while (v24 != v23)
          {
            uint64_t v10 = (uint64_t)std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(v266 + 40 * v22, v24, v24);
            v24 += 24;
          }
        }
      }
      ++v13;
      uint64_t v12 = *((void *)a1 + 4);
      if (v13 >= (*((void *)a1 + 5) - v12) >> 4) {
        goto LABEL_38;
      }
    }
    uint64_t v15 = v10;
    int64x2_t v16 = *(std::__shared_weak_count **)(v14 + 72);
    if (v16) {
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 320))(v10);
    int v17 = *(char *)(v10 + 23);
    if (v17 < 0)
    {
      if (*(void *)(v10 + 8) != 12) {
        goto LABEL_30;
      }
      uint64_t v10 = *(void *)v10;
    }
    else if (v17 != 12)
    {
LABEL_30:
      if (v16) {
        nitro::nitro_function::nitro_function(v16);
      }
      goto LABEL_32;
    }
    BOOL v18 = *(void *)v10 == 0x756F5F646E756F62 && *(_DWORD *)(v10 + 8) == 1953853556;
    if (v18 && &v263 != (uint64_t *)(v15 + 432)) {
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v263, *(std::string **)(v15 + 432), *(std::string **)(v15 + 440), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v15 + 440) - *(void *)(v15 + 432)) >> 3));
    }
    goto LABEL_30;
  }
LABEL_38:
  uint64_t v25 = v266;
  uint64_t v26 = v267;
  if (v266 != v267)
  {
    int v27 = 0;
    do
    {
      BOOL v28 = (Espresso *)std::unordered_set<std::string>::unordered_set((uint64_t)v277, v25);
      unint64_t v30 = Espresso::espresso_os_log_subsystem(v28, v29);
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)v271 = 67109120;
        *(_DWORD *)&v271[4] = v27;
        _os_log_debug_impl(&dword_1920CB000, v30, OS_LOG_TYPE_DEBUG, "pass_ane_multi_head: outputs_per_segment: %d: ", v271, 8u);
        ++v27;
      }

      uint64_t v33 = *(uint64_t **)&v277[16];
      if (*(void *)&v277[16])
      {
        do
        {
          if (*((char *)v33 + 39) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)v271, (const std::string::value_type *)v33[2], v33[3]);
          }
          else
          {
            *(_OWORD *)v271 = *((_OWORD *)v33 + 1);
            *(void *)&v271[16] = v33[4];
          }
          BOOL v34 = Espresso::espresso_os_log_subsystem(v31, v32);
          if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG))
          {
            if (v271[23] >= 0) {
              uint64_t v35 = v271;
            }
            else {
              uint64_t v35 = *(unsigned char **)v271;
            }
            LODWORD(buf) = 136315138;
            *(void *)((char *)&buf + 4) = v35;
            _os_log_debug_impl(&dword_1920CB000, v34, OS_LOG_TYPE_DEBUG, "\t%s", (uint8_t *)&buf, 0xCu);
          }

          if ((v271[23] & 0x80000000) != 0) {
            operator delete(*(void **)v271);
          }
          uint64_t v33 = (uint64_t *)*v33;
        }
        while (v33);
      }
      uint64_t v10 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v277);
      v25 += 40;
    }
    while (v25 != v26);
  }
  uint64_t v261 = 0;
  uint64_t v262 = 0;
  std::string v260 = (uint64_t *)&v261;
  *(_DWORD *)v271 = 0;
  uint64_t v36 = v254[4];
  if (v254[5] != v36)
  {
    LODWORD(v37) = 0;
    unint64_t v38 = 0;
    LOBYTE(v39) = 0;
    do
    {
      if ((v39 & 1) == 0)
      {
        int v40 = Espresso::espresso_os_log_subsystem((Espresso *)v10, v11);
        if (os_log_type_enabled(v40, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)v277 = 67109120;
          *(_DWORD *)&v277[4] = v37;
          _os_log_debug_impl(&dword_1920CB000, v40, OS_LOG_TYPE_DEBUG, "pass_ane_multi_head: new segment group: %d", v277, 8u);
        }

        long long v279 = 0u;
        memset(v277, 0, sizeof(v277));
        v278 = &v279;
        unint64_t v41 = std::__tree<std::__value_type<int,Espresso::analysis_ane_multi_head::coalesced_segments_group_t>,std::__map_value_compare<int,std::__value_type<int,Espresso::analysis_ane_multi_head::coalesced_segments_group_t>,std::less<int>,true>,std::allocator<std::__value_type<int,Espresso::analysis_ane_multi_head::coalesced_segments_group_t>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(&v260, v37, v271);
        BOOL v42 = (void *)*((void *)v41 + 5);
        if (v42)
        {
          *((void *)v41 + 6) = v42;
          operator delete(v42);
          *((void *)v41 + 5) = 0;
          *((void *)v41 + 6) = 0;
          *((void *)v41 + 7) = 0;
        }
        int v44 = v41 + 72;
        uint64_t v43 = (void *)*((void *)v41 + 9);
        *(_OWORD *)(v41 + 40) = *(_OWORD *)v277;
        *((void *)v41 + 7) = *(void *)&v277[16];
        memset(v277, 0, sizeof(v277));
        std::__tree<std::__value_type<unsigned long long,Espresso::analysis_ane_multi_head::runtime_segment_combination_t>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,Espresso::analysis_ane_multi_head::runtime_segment_combination_t>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,Espresso::analysis_ane_multi_head::runtime_segment_combination_t>>>::destroy(v43);
        float v45 = (void *)v279;
        *((void *)v41 + 8) = v278;
        *((void *)v41 + 9) = v45;
        uint64_t v46 = *((void *)&v279 + 1);
        *((void *)v41 + 10) = *((void *)&v279 + 1);
        if (v46)
        {
          v45[2] = v44;
          float v45 = 0;
          v278 = &v279;
          long long v279 = 0uLL;
        }
        else
        {
          *((void *)v41 + 8) = v44;
        }
        std::__tree<std::__value_type<unsigned long long,Espresso::analysis_ane_multi_head::runtime_segment_combination_t>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,Espresso::analysis_ane_multi_head::runtime_segment_combination_t>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,Espresso::analysis_ane_multi_head::runtime_segment_combination_t>>>::destroy(v45);
        uint64_t v10 = *(void *)v277;
        if (*(void *)v277)
        {
          *(void *)&v277[8] = *(void *)v277;
          operator delete(*(void **)v277);
        }
      }
      uint64_t v47 = v261;
      int v48 = &v261;
      if (v261)
      {
        do
        {
          std::string::size_type v49 = v47;
          uint64_t v47 = (void *)v47[1];
        }
        while (v47);
      }
      else
      {
        do
        {
          std::string::size_type v49 = v48[2];
          BOOL v18 = *v49 == (void)v48;
          int v48 = (void **)v49;
        }
        while (v18);
      }
      BOOL v50 = (_DWORD *)v49[6];
      unint64_t v51 = v49[7];
      if ((unint64_t)v50 >= v51)
      {
        uint64_t v10 = v49[5];
        uint64_t v53 = ((uint64_t)v50 - v10) >> 2;
        if ((unint64_t)(v53 + 1) >> 62) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v54 = v51 - v10;
        unint64_t v55 = (uint64_t)(v51 - v10) >> 1;
        if (v55 <= v53 + 1) {
          unint64_t v55 = v53 + 1;
        }
        BOOL v56 = v54 >= 0x7FFFFFFFFFFFFFFCLL;
        unint64_t v57 = 0x3FFFFFFFFFFFFFFFLL;
        if (!v56) {
          unint64_t v57 = v55;
        }
        if (v57)
        {
          unint64_t v57 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v57);
          uint64_t v10 = v49[5];
          BOOL v50 = (_DWORD *)v49[6];
        }
        else
        {
          uint64_t v11 = 0;
        }
        BOOL v58 = (_DWORD *)(v57 + 4 * v53);
        *BOOL v58 = v37;
        int v52 = v58 + 1;
        while (v50 != (_DWORD *)v10)
        {
          int v59 = *--v50;
          *--BOOL v58 = v59;
        }
        v49[5] = v58;
        v49[6] = v52;
        v49[7] = v57 + 4 * (void)v11;
        if (v10) {
          operator delete((void *)v10);
        }
      }
      else
      {
        *BOOL v50 = v37;
        int v52 = v50 + 1;
      }
      v49[6] = v52;
      int v60 = Espresso::espresso_os_log_subsystem((Espresso *)v10, v11);
      BOOL v61 = os_log_type_enabled(v60, OS_LOG_TYPE_DEBUG);
      int v62 = *(_DWORD *)v271;
      if (v61)
      {
        *(_DWORD *)v277 = 67109120;
        *(_DWORD *)&v277[4] = *(_DWORD *)v271;
        _os_log_debug_impl(&dword_1920CB000, v60, OS_LOG_TYPE_DEBUG, "pass_ane_multi_head:\tcoalescing segment %d", v277, 8u);
      }

      uint64_t v64 = v254[4];
      unint64_t v65 = 0xEEEEEEEEEEEEEEEFLL * ((v254[5] - v64) >> 3);
      unint64_t v37 = v62 + 1;
      if (v65 - 1 > v62)
      {
        uint64_t v66 = (unint64_t *)(v64 + 120 * v37);
        unint64_t v67 = *(void *)(v36 + 120 * v38 + 8);
        if (v67 < *v66)
        {
          int v39 = 1;
          long long v252 = (unint64_t *)(v64 + 120 * v37);
          while (1)
          {
            uint64_t v68 = *((void *)a1 + 4) + 16 * v67;
            long long v69 = *(void **)v68;
            uint64_t v70 = (uint64_t *)(*(void *)v68 + 40);
            int v71 = *(unsigned __int8 *)(*(void *)v68 + 63);
            if ((*(char *)(*(void *)v68 + 63) & 0x80000000) == 0)
            {
              if (v71 == 5)
              {
                int v73 = *(unsigned __int8 *)(*(void *)v68 + 44);
                BOOL v74 = *(_DWORD *)v70 == 1767859811;
                int v75 = 102;
              }
              else
              {
                uint64_t v72 = *(void *)v68 + 40;
                if (v71 == 6) {
                  goto LABEL_110;
                }
                if (v71 != 7)
                {
                  BOOL v81 = 0;
LABEL_141:
                  if (v71 == 16) {
                    goto LABEL_146;
                  }
                  goto LABEL_152;
                }
                int v73 = *(_DWORD *)(*(void *)v68 + 43);
                BOOL v74 = *(_DWORD *)v70 == 1818850658;
                int v75 = 1852404844;
              }
              if (!v74 || v73 != v75) {
                goto LABEL_121;
              }
              goto LABEL_122;
            }
            uint64_t v76 = v69[6];
            if (v76 == 5)
            {
              int v77 = *(unsigned __int8 *)(*v70 + 4);
              BOOL v78 = *(_DWORD *)*v70 == 1767859811;
              int v79 = 102;
              goto LABEL_117;
            }
            if (v76 == 6) {
              break;
            }
            if (v76 == 7)
            {
              int v77 = *(_DWORD *)(*v70 + 3);
              BOOL v78 = *(_DWORD *)*v70 == 1818850658;
              int v79 = 1852404844;
LABEL_117:
              if (!v78 || v77 != v79)
              {
LABEL_121:
                BOOL v81 = 0;
                goto LABEL_152;
              }
              goto LABEL_122;
            }
            BOOL v81 = 0;
LABEL_144:
            if (v76 == 16)
            {
              uint64_t v70 = (uint64_t *)*v70;
LABEL_146:
              BOOL v93 = *v70 == 0x5F747865746E6F63 && v70[1] == 0x726566736E617274;
              goto LABEL_153;
            }
LABEL_152:
            BOOL v93 = 0;
LABEL_153:
            v39 &= v81 || v93;
            uint64_t v94 = Espresso::espresso_os_log_subsystem((Espresso *)v10, v11);
            if (os_log_type_enabled(v94, OS_LOG_TYPE_DEBUG))
            {
              BOOL v95 = (void *)(*(void *)v68 + 40);
              if (*(char *)(*(void *)v68 + 63) < 0) {
                BOOL v95 = (void *)*v95;
              }
              *(_DWORD *)v277 = 134218498;
              *(void *)&v277[4] = v67;
              *(_WORD *)&v277[12] = 2080;
              *(void *)&v277[14] = v95;
              *(_WORD *)&v277[22] = 1024;
              LODWORD(v278) = v39;
              _os_log_debug_impl(&dword_1920CB000, v94, OS_LOG_TYPE_DEBUG, "pass_ane_multi_head:\tintermediate %zu %s cn=%d\n", v277, 0x1Cu);
            }

            if (++v67 >= *v66)
            {
              uint64_t v64 = v254[4];
              unint64_t v65 = 0xEEEEEEEEEEEEEEEFLL * ((v254[5] - v64) >> 3);
              goto LABEL_160;
            }
          }
          uint64_t v72 = *v70;
LABEL_110:
          int v82 = *(_DWORD *)v72;
          int v83 = *(unsigned __int16 *)(v72 + 4);
          if (v82 != 1700750947 || v83 != 25710)
          {
            BOOL v81 = 0;
            if ((v71 & 0x80) == 0) {
              goto LABEL_141;
            }
LABEL_115:
            uint64_t v76 = v69[6];
            goto LABEL_144;
          }
LABEL_122:
          if (*((char *)v69 + 39) < 0)
          {
            BOOL v86 = (void *)v69[2];
            uint64_t v87 = v69[3];
          }
          else
          {
            BOOL v86 = v69 + 2;
            uint64_t v87 = *((unsigned __int8 *)v69 + 39);
          }
          uint64_t v88 = (uint64_t)v86 + v87;
          if (v87 >= 11)
          {
            BOOL v89 = v86;
            do
            {
              uint64_t v10 = (uint64_t)memchr(v89, 109, v87 - 10);
              if (!v10) {
                break;
              }
              if (*(void *)v10 == 0x72746E6F635F686DLL && *(void *)(v10 + 3) == 0x406C6F72746E6F63) {
                goto LABEL_134;
              }
              BOOL v89 = (void *)(v10 + 1);
              uint64_t v87 = v88 - (void)v89;
            }
            while (v88 - (uint64_t)v89 > 10);
          }
          uint64_t v10 = v88;
LABEL_134:
          BOOL v81 = v10 != v88 && v10 == (void)v86;
          uint64_t v66 = v252;
          if ((v71 & 0x80) == 0) {
            goto LABEL_141;
          }
          goto LABEL_115;
        }
      }
      LOBYTE(v39) = 1;
LABEL_160:
      *(_DWORD *)v271 = v37;
      uint64_t v36 = v64;
      unint64_t v38 = v37;
    }
    while (v65 > v37);
    unint64_t v96 = v260;
    if (v260 != (uint64_t *)&v261)
    {
      uint64_t v247 = *MEMORY[0x1E4F283E0];
      *(void *)&long long v63 = 136315138;
      long long v244 = v63;
      while (1)
      {
        std::string::size_type v97 = objc_msgSend(MEMORY[0x1E4F1CB18], "standardUserDefaults", v244);
        long long v253 = v96;
        float v248 = [v97 persistentDomainForName:v247];

        BOOL v98 = [v248 objectForKeyedSubscript:@"espresso.ane.no_mh_procedures"];
        char v99 = [v98 BOOLValue];

        uint64_t v100 = v253;
        if ((v99 & 1) == 0)
        {
          uint64_t v101 = *((void *)a1 + 84);
          if (v101 == *((void *)a1 + 83))
          {
            unint64_t v118 = 0;
            uint64_t v117 = *((void *)a1 + 84);
          }
          else
          {
            unint64_t v102 = 0;
            do
            {
              memset(v277, 0, sizeof(v277));
              BOOL v103 = (int *)v100[5];
              BOOL v104 = (int *)v100[6];
              while (v103 != v104)
              {
                int v105 = *v103;
                if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>((void *)(v266 + 40 * *v103), *((void *)a1 + 83) + 24 * v102))
                {
                  unint64_t v106 = *(char **)&v277[8];
                  if (*(void *)&v277[8] >= *(void *)&v277[16])
                  {
                    std::string::size_type v108 = *(char **)v277;
                    uint64_t v109 = (uint64_t)(*(void *)&v277[8] - *(void *)v277) >> 2;
                    unint64_t v110 = v109 + 1;
                    if ((unint64_t)(v109 + 1) >> 62) {
                      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                    }
                    uint64_t v111 = *(void *)&v277[16] - *(void *)v277;
                    if ((uint64_t)(*(void *)&v277[16] - *(void *)v277) >> 1 > v110) {
                      unint64_t v110 = v111 >> 1;
                    }
                    BOOL v56 = (unint64_t)v111 >= 0x7FFFFFFFFFFFFFFCLL;
                    unint64_t v112 = 0x3FFFFFFFFFFFFFFFLL;
                    if (!v56) {
                      unint64_t v112 = v110;
                    }
                    if (v112)
                    {
                      unint64_t v112 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v112);
                      std::string::size_type v108 = *(char **)v277;
                      unint64_t v106 = *(char **)&v277[8];
                    }
                    else
                    {
                      uint64_t v113 = 0;
                    }
                    uint64_t v114 = (int *)(v112 + 4 * v109);
                    *uint64_t v114 = v105;
                    BOOL v107 = v114 + 1;
                    while (v106 != v108)
                    {
                      int v115 = *((_DWORD *)v106 - 1);
                      v106 -= 4;
                      *--uint64_t v114 = v115;
                    }
                    *(void *)v277 = v114;
                    *(void *)&v277[8] = v107;
                    *(void *)&v277[16] = v112 + 4 * v113;
                    if (v108) {
                      operator delete(v108);
                    }
                  }
                  else
                  {
                    **(_DWORD **)&v277[8] = v105;
                    BOOL v107 = v106 + 4;
                  }
                  *(void *)&v277[8] = v107;
                }
                ++v103;
              }
              *(void *)v271 = 1 << v102;
              std::string v116 = std::__tree<std::__value_type<unsigned long long,Espresso::analysis_ane_multi_head::runtime_segment_combination_t>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,Espresso::analysis_ane_multi_head::runtime_segment_combination_t>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,Espresso::analysis_ane_multi_head::runtime_segment_combination_t>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t **)v253 + 8, 1 << v102, v271)+ 40;
              if (v116 != (char *)v277) {
                std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v116, *(char **)v277, *(uint64_t *)&v277[8], (uint64_t)(*(void *)&v277[8] - *(void *)v277) >> 2);
              }
              if (*(void *)v277)
              {
                *(void *)&v277[8] = *(void *)v277;
                operator delete(*(void **)v277);
              }
              ++v102;
              uint64_t v117 = *((void *)a1 + 84);
              uint64_t v101 = *((void *)a1 + 83);
              unint64_t v118 = 0xAAAAAAAAAAAAAAABLL * ((v117 - v101) >> 3);
              uint64_t v100 = v253;
            }
            while (v102 < v118);
          }
          if (v118 > 0xB) {
            goto LABEL_226;
          }
          if (v117 != v101) {
            break;
          }
        }
LABEL_263:
        long long buf = 0uLL;
        *(void *)&long long v269 = 0;
        long long v159 = (int *)v100[5];
        long long v160 = (int *)v100[6];
        if (v159 != v160)
        {
          float v161 = 0;
          do
          {
            int v162 = *v159;
            if ((unint64_t)v161 >= (unint64_t)v269)
            {
              unint64_t v164 = (_DWORD *)buf;
              uint64_t v165 = (uint64_t)((uint64_t)v161 - buf) >> 2;
              unint64_t v166 = v165 + 1;
              if ((unint64_t)(v165 + 1) >> 62) {
                std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v167 = v269 - buf;
              if ((uint64_t)(v269 - buf) >> 1 > v166) {
                unint64_t v166 = v167 >> 1;
              }
              BOOL v56 = (unint64_t)v167 >= 0x7FFFFFFFFFFFFFFCLL;
              unint64_t v168 = 0x3FFFFFFFFFFFFFFFLL;
              if (!v56) {
                unint64_t v168 = v166;
              }
              if (v168)
              {
                unint64_t v168 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v168);
                float v161 = (_DWORD *)*((void *)&buf + 1);
                unint64_t v164 = (_DWORD *)buf;
              }
              else
              {
                uint64_t v169 = 0;
              }
              int v170 = (_DWORD *)(v168 + 4 * v165);
              *int v170 = v162;
              char v163 = v170 + 1;
              while (v161 != v164)
              {
                int v171 = *--v161;
                *--int v170 = v171;
              }
              *(void *)&long long buf = v170;
              *((void *)&buf + 1) = v163;
              *(void *)&long long v269 = v168 + 4 * v169;
              if (v164) {
                operator delete(v164);
              }
            }
            else
            {
              *float v161 = v162;
              char v163 = v161 + 1;
            }
            *((void *)&buf + 1) = v163;
            ++v159;
            float v161 = v163;
          }
          while (v159 != v160);
        }
        unint64_t v259 = ~(-1 << (-85 * ((uint64_t)(*((void *)a1 + 84) - *((void *)a1 + 83)) >> 3)));
        v172 = (std::string *)(std::__tree<std::__value_type<unsigned long long,Espresso::analysis_ane_multi_head::runtime_segment_combination_t>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,Espresso::analysis_ane_multi_head::runtime_segment_combination_t>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,Espresso::analysis_ane_multi_head::runtime_segment_combination_t>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t **)v100 + 8, v259, &v259)+ 40);
        if (v172 != (std::string *)&buf) {
          v172 = (std::string *)std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)v172, (char *)buf, *((uint64_t *)&buf + 1), (uint64_t)(*((void *)&buf + 1) - buf) >> 2);
        }
        memset(&v258, 0, sizeof(v258));
        v174 = (int *)v100[5];
        uint64_t v175 = (int *)v100[6];
        while (v174 != v175)
        {
          std::to_string((std::string *)v271, *v174);
          uint64_t v176 = std::string::append((std::string *)v271, ", ");
          long long v177 = *(_OWORD *)&v176->__r_.__value_.__l.__data_;
          *(void *)&v277[16] = *((void *)&v176->__r_.__value_.__l + 2);
          *(_OWORD *)v277 = v177;
          v176->__r_.__value_.__l.__size_ = 0;
          v176->__r_.__value_.__r.__words[2] = 0;
          v176->__r_.__value_.__r.__words[0] = 0;
          if ((v277[23] & 0x80u) == 0) {
            v178 = v277;
          }
          else {
            v178 = *(uint8_t **)v277;
          }
          if ((v277[23] & 0x80u) == 0) {
            std::string::size_type v179 = v277[23];
          }
          else {
            std::string::size_type v179 = *(void *)&v277[8];
          }
          v172 = std::string::append(&v258, (const std::string::value_type *)v178, v179);
          if ((char)v277[23] < 0) {
            operator delete(*(void **)v277);
          }
          if ((v271[23] & 0x80000000) != 0) {
            operator delete(*(void **)v271);
          }
          ++v174;
        }
        int v180 = Espresso::espresso_os_log_subsystem((Espresso *)v172, v173);
        if (os_log_type_enabled(v180, OS_LOG_TYPE_DEBUG))
        {
          v204 = &v258;
          if ((v258.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            v204 = (std::string *)v258.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)v277 = v244;
          *(void *)&v277[4] = v204;
          _os_log_debug_impl(&dword_1920CB000, v180, OS_LOG_TYPE_DEBUG, "pass_ane_multi_head: segments_group=%s", v277, 0xCu);
        }

        uint64_t v183 = (uint64_t *)v253[8];
        if (v183 != v253 + 9)
        {
          do
          {
            v184 = Espresso::espresso_os_log_subsystem(v181, v182);
            if (os_log_type_enabled(v184, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v187 = 0;
              unint64_t v188 = *((unsigned __int8 *)v183 + 32);
              char v257 = 8;
              strcpy((char *)__p, "00000000");
              uint64_t v189 = 7;
              do
              {
                if ((v188 >> v187))
                {
                  if (v257 >= 0) {
                    v190 = __p;
                  }
                  else {
                    v190 = (void **)__p[0];
                  }
                  *((unsigned char *)v190 + v189) = 49;
                }
                ++v187;
                --v189;
              }
              while (v187 != 8);
              int v191 = v257;
              v192 = (void **)__p[0];
              memset(&v255, 0, sizeof(v255));
              v194 = (int *)v183[5];
              v193 = (int *)v183[6];
              if (v194 == v193)
              {
                v195 = __p;
                if (v257 < 0) {
                  v195 = (void **)__p[0];
                }
                unint64_t v196 = &v255;
              }
              else
              {
                do
                {
                  std::to_string((std::string *)v271, *v194);
                  v197 = std::string::append((std::string *)v271, ", ");
                  long long v198 = *(_OWORD *)&v197->__r_.__value_.__l.__data_;
                  *(void *)&v277[16] = *((void *)&v197->__r_.__value_.__l + 2);
                  *(_OWORD *)v277 = v198;
                  v197->__r_.__value_.__l.__size_ = 0;
                  v197->__r_.__value_.__r.__words[2] = 0;
                  v197->__r_.__value_.__r.__words[0] = 0;
                  if ((v277[23] & 0x80u) == 0) {
                    v199 = v277;
                  }
                  else {
                    v199 = *(uint8_t **)v277;
                  }
                  if ((v277[23] & 0x80u) == 0) {
                    std::string::size_type v200 = v277[23];
                  }
                  else {
                    std::string::size_type v200 = *(void *)&v277[8];
                  }
                  std::string::append(&v255, (const std::string::value_type *)v199, v200);
                  if ((char)v277[23] < 0) {
                    operator delete(*(void **)v277);
                  }
                  if ((v271[23] & 0x80000000) != 0) {
                    operator delete(*(void **)v271);
                  }
                  ++v194;
                }
                while (v194 != v193);
                v195 = __p;
                if (v191 < 0) {
                  v195 = v192;
                }
                unint64_t v196 = &v255;
                if ((v255.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                  unint64_t v196 = (std::string *)v255.__r_.__value_.__r.__words[0];
                }
              }
              *(_DWORD *)v273 = 136315394;
              v274 = v195;
              __int16 v275 = 2080;
              v276 = v196;
              _os_log_debug_impl(&dword_1920CB000, v184, OS_LOG_TYPE_DEBUG, "\toutput_configuration=%s combo_desc=%s", v273, 0x16u);
              if (SHIBYTE(v255.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v255.__r_.__value_.__l.__data_);
              }
              if (v257 < 0) {
                operator delete(__p[0]);
              }
            }

            v185 = (uint64_t *)v183[1];
            if (v185)
            {
              do
              {
                int v186 = v185;
                v185 = (uint64_t *)*v185;
              }
              while (v185);
            }
            else
            {
              do
              {
                int v186 = (uint64_t *)v183[2];
                BOOL v18 = *v186 == (void)v183;
                uint64_t v183 = v186;
              }
              while (!v18);
            }
            uint64_t v183 = v186;
          }
          while (v186 != v253 + 9);
        }
        if (SHIBYTE(v258.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v258.__r_.__value_.__l.__data_);
        }
        if ((void)buf)
        {
          *((void *)&buf + 1) = buf;
          operator delete((void *)buf);
        }

        unint64_t v201 = v253;
        uint64_t v202 = (uint64_t *)v253[1];
        if (v202)
        {
          do
          {
            uint64_t v203 = v202;
            uint64_t v202 = (uint64_t *)*v202;
          }
          while (v202);
        }
        else
        {
          do
          {
            uint64_t v203 = (uint64_t *)v201[2];
            BOOL v18 = *v203 == (void)v201;
            unint64_t v201 = v203;
          }
          while (!v18);
        }
        unint64_t v96 = v203;
        if (v203 == (uint64_t *)&v261) {
          goto LABEL_350;
        }
      }
      unint64_t v119 = 0;
      v250 = (uint64_t **)(v100 + 8);
      do
      {
        unint64_t v120 = v119++;
        unint64_t v121 = 0xAAAAAAAAAAAAAAABLL * ((v117 - v101) >> 3);
        if (v119 < v121)
        {
          unint64_t v249 = v119;
          unint64_t v122 = v119;
          do
          {
            memset(v277, 0, sizeof(v277));
            uint64_t v124 = (int *)v253[5];
            BOOL v123 = (int *)v253[6];
            while (v124 != v123)
            {
              int v125 = *v124;
              if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>((void *)(v266 + 40 * *v124), *((void *)a1 + 83) + 24 * v120)|| std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>((void *)(v266 + 40 * v125), *((void *)a1 + 83) + 24 * v122))
              {
                int v126 = *(char **)&v277[8];
                if (*(void *)&v277[8] >= *(void *)&v277[16])
                {
                  std::string v128 = *(char **)v277;
                  uint64_t v129 = (uint64_t)(*(void *)&v277[8] - *(void *)v277) >> 2;
                  unint64_t v130 = v129 + 1;
                  if ((unint64_t)(v129 + 1) >> 62) {
                    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                  }
                  uint64_t v131 = *(void *)&v277[16] - *(void *)v277;
                  if ((uint64_t)(*(void *)&v277[16] - *(void *)v277) >> 1 > v130) {
                    unint64_t v130 = v131 >> 1;
                  }
                  BOOL v56 = (unint64_t)v131 >= 0x7FFFFFFFFFFFFFFCLL;
                  unint64_t v132 = 0x3FFFFFFFFFFFFFFFLL;
                  if (!v56) {
                    unint64_t v132 = v130;
                  }
                  if (v132)
                  {
                    unint64_t v132 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v132);
                    std::string v128 = *(char **)v277;
                    int v126 = *(char **)&v277[8];
                  }
                  else
                  {
                    uint64_t v133 = 0;
                  }
                  long long v134 = (int *)(v132 + 4 * v129);
                  *long long v134 = v125;
                  BOOL v127 = v134 + 1;
                  while (v126 != v128)
                  {
                    int v135 = *((_DWORD *)v126 - 1);
                    v126 -= 4;
                    *--long long v134 = v135;
                  }
                  *(void *)v277 = v134;
                  *(void *)&v277[8] = v127;
                  *(void *)&v277[16] = v132 + 4 * v133;
                  if (v128) {
                    operator delete(v128);
                  }
                }
                else
                {
                  **(_DWORD **)&v277[8] = v125;
                  BOOL v127 = v126 + 4;
                }
                *(void *)&v277[8] = v127;
              }
              ++v124;
            }
            *(void *)v271 = (1 << v122) | (1 << v120);
            std::string::size_type v136 = std::__tree<std::__value_type<unsigned long long,Espresso::analysis_ane_multi_head::runtime_segment_combination_t>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,Espresso::analysis_ane_multi_head::runtime_segment_combination_t>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,Espresso::analysis_ane_multi_head::runtime_segment_combination_t>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v250, *(unint64_t *)v271, v271)+ 40;
            if (v136 != (char *)v277) {
              std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v136, *(char **)v277, *(uint64_t *)&v277[8], (uint64_t)(*(void *)&v277[8] - *(void *)v277) >> 2);
            }
            if (*(void *)v277)
            {
              *(void *)&v277[8] = *(void *)v277;
              operator delete(*(void **)v277);
            }
            ++v122;
            uint64_t v117 = *((void *)a1 + 84);
            uint64_t v101 = *((void *)a1 + 83);
            unint64_t v121 = 0xAAAAAAAAAAAAAAABLL * ((v117 - v101) >> 3);
          }
          while (v122 < v121);
          uint64_t v100 = v253;
          unint64_t v119 = v249;
        }
      }
      while (v119 < v121);
LABEL_226:
      if (v117 != v101)
      {
        unint64_t v137 = 0;
        unint64_t v251 = (uint64_t **)(v100 + 8);
        do
        {
          memset(v277, 0, sizeof(v277));
          *(void *)v271 = 0;
          uint64_t v138 = (int *)v100[5];
          uint64_t v139 = (int *)v100[6];
          if (v138 == v139)
          {
            unint64_t v140 = 0;
          }
          else
          {
            unint64_t v140 = 0;
            long long v141 = 0;
            do
            {
              uint64_t v142 = *((void *)a1 + 84);
              uint64_t v143 = *((void *)a1 + 83);
              uint64_t v144 = v142 - v143;
              if (v142 != v143)
              {
                char v145 = 0;
                unint64_t v146 = 0;
                int v147 = *v138;
                unint64_t v148 = v144 / 24;
                if (v148 <= 1) {
                  unint64_t v148 = 1;
                }
                do
                {
                  while (v146 != v137)
                  {
                    char v145 = 1;
                    v140 |= 1 << v146++;
                    if (v146 == v148) {
                      goto LABEL_239;
                    }
                  }
                  unint64_t v146 = v137 + 1;
                }
                while (v137 + 1 != v148);
                if ((v145 & 1) == 0) {
                  goto LABEL_255;
                }
LABEL_239:
                if ((unint64_t)v141 >= *(void *)&v277[16])
                {
                  BOOL v150 = *(_DWORD **)v277;
                  uint64_t v151 = ((uint64_t)v141 - *(void *)v277) >> 2;
                  unint64_t v152 = v151 + 1;
                  if ((unint64_t)(v151 + 1) >> 62) {
                    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                  }
                  uint64_t v153 = *(void *)&v277[16] - *(void *)v277;
                  if ((uint64_t)(*(void *)&v277[16] - *(void *)v277) >> 1 > v152) {
                    unint64_t v152 = v153 >> 1;
                  }
                  BOOL v56 = (unint64_t)v153 >= 0x7FFFFFFFFFFFFFFCLL;
                  unint64_t v154 = 0x3FFFFFFFFFFFFFFFLL;
                  if (!v56) {
                    unint64_t v154 = v152;
                  }
                  if (v154)
                  {
                    unint64_t v154 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v154);
                    BOOL v150 = *(_DWORD **)v277;
                    long long v141 = *(_DWORD **)&v277[8];
                  }
                  else
                  {
                    uint64_t v155 = 0;
                  }
                  long long v156 = (_DWORD *)(v154 + 4 * v151);
                  *long long v156 = v147;
                  uint64_t v149 = v156 + 1;
                  while (v141 != v150)
                  {
                    int v157 = *--v141;
                    *--long long v156 = v157;
                  }
                  *(void *)v277 = v156;
                  *(void *)&v277[8] = v149;
                  *(void *)&v277[16] = v154 + 4 * v155;
                  if (v150) {
                    operator delete(v150);
                  }
                }
                else
                {
                  *long long v141 = v147;
                  uint64_t v149 = v141 + 1;
                }
                *(void *)&v277[8] = v149;
                long long v141 = v149;
              }
LABEL_255:
              ++v138;
            }
            while (v138 != v139);
            *(void *)v271 = v140;
          }
          uint64_t v100 = v253;
          unint64_t v158 = std::__tree<std::__value_type<unsigned long long,Espresso::analysis_ane_multi_head::runtime_segment_combination_t>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,Espresso::analysis_ane_multi_head::runtime_segment_combination_t>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,Espresso::analysis_ane_multi_head::runtime_segment_combination_t>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v251, v140, v271)+ 40;
          if (v158 != (char *)v277) {
            std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v158, *(char **)v277, *(uint64_t *)&v277[8], (uint64_t)(*(void *)&v277[8] - *(void *)v277) >> 2);
          }
          if (*(void *)v277)
          {
            *(void *)&v277[8] = *(void *)v277;
            operator delete(*(void **)v277);
          }
          ++v137;
        }
        while (v137 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a1 + 84) - *((void *)a1 + 83)) >> 3));
      }
      goto LABEL_263;
    }
  }
LABEL_350:
  memset(v271, 0, sizeof(v271));
  int v272 = 1065353216;
  Espresso::net::get_consumers_of_blobs(a1, v271, (uint64_t)v277);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v271);
  unint64_t v205 = v260;
  if (v260 != (uint64_t *)&v261)
  {
    while (1)
    {
      int v206 = (uint64_t *)v205[8];
      if (v206 != v205 + 9) {
        break;
      }
LABEL_384:
      uint64_t v226 = (uint64_t *)v205[1];
      if (v226)
      {
        do
        {
          char v227 = v226;
          uint64_t v226 = (uint64_t *)*v226;
        }
        while (v226);
      }
      else
      {
        do
        {
          char v227 = (uint64_t *)v205[2];
          BOOL v18 = *v227 == (void)v205;
          unint64_t v205 = v227;
        }
        while (!v18);
      }
      unint64_t v205 = v227;
      if (v227 == (uint64_t *)&v261) {
        goto LABEL_390;
      }
    }
    while (1)
    {
      memset(v271, 0, sizeof(v271));
      int v272 = 1065353216;
      long long buf = 0u;
      long long v269 = 0u;
      int v270 = 1065353216;
      uint64_t v207 = (int *)v206[5];
      v208 = (int *)v206[6];
      if (v207 != v208)
      {
        do
        {
          int v209 = *v207;
          uint64_t v210 = v254[4];
          v211 = *(void **)(v210 + 120 * *v207 + 32);
          if (v211)
          {
            do
            {
              std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)&buf, (uint64_t)(v211 + 2), (uint64_t)(v211 + 2));
              v211 = (void *)*v211;
            }
            while (v211);
            uint64_t v210 = v254[4];
          }
          for (uint64_t i = *(void **)(v210 + 120 * v209 + 72); i; uint64_t i = (void *)*i)
            std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v271, (uint64_t)(i + 2), (uint64_t)(i + 2));
          ++v207;
        }
        while (v207 != v208);
        for (uint64_t j = (long long *)v269; j; uint64_t j = *(long long **)j)
        {
          if (!std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v271, (uint64_t)(j + 1)))
          {
            uint64_t v214 = (std::string *)v206[9];
            if ((unint64_t)v214 >= v206[10])
            {
              v215 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)v206 + 8, (uint64_t)(j + 1));
            }
            else
            {
              std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)(v206 + 8), j + 1);
              v215 = v214 + 1;
            }
            v206[9] = (uint64_t)v215;
          }
        }
      }
      v216 = *(unsigned __int8 **)&v271[16];
      if (*(void *)&v271[16]) {
        break;
      }
LABEL_378:
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&buf);
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v271);
      v224 = (uint64_t *)v206[1];
      if (v224)
      {
        do
        {
          int v225 = v224;
          v224 = (uint64_t *)*v224;
        }
        while (v224);
      }
      else
      {
        do
        {
          int v225 = (uint64_t *)v206[2];
          BOOL v18 = *v225 == (void)v206;
          int v206 = v225;
        }
        while (!v18);
      }
      int v206 = v225;
      if (v225 == v205 + 9) {
        goto LABEL_384;
      }
    }
    while (1)
    {
      v258.__r_.__value_.__r.__words[0] = (std::string::size_type)(v216 + 16);
      v217 = std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v277, v216 + 16, (long long **)&v258);
      uint64_t v218 = v206[6];
      if (v206[5] != v218)
      {
        v219 = (unint64_t *)*((void *)v217 + 5);
        uint64_t v220 = (unint64_t *)*((void *)v217 + 6);
        if (v219 != v220) {
          break;
        }
      }
LABEL_372:
      if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*((void **)a1 + 33), (void *)v216 + 2))
      {
        goto LABEL_373;
      }
LABEL_377:
      v216 = *(unsigned __int8 **)v216;
      if (!v216) {
        goto LABEL_378;
      }
    }
    unint64_t v221 = *(void *)(v254[4] + 120 * *(int *)(v218 - 4) + 8);
    while (*v219 < v221)
    {
      if (++v219 == v220) {
        goto LABEL_372;
      }
    }
LABEL_373:
    char v222 = (std::string *)v206[12];
    if ((unint64_t)v222 >= v206[13])
    {
      v223 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)v206 + 11, (uint64_t)(v216 + 16));
    }
    else
    {
      std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)(v206 + 11), (long long *)v216 + 1);
      v223 = v222 + 1;
    }
    v206[12] = (uint64_t)v223;
    goto LABEL_377;
  }
LABEL_390:
  v228 = operator new(0x50uLL);
  v229 = (std::__shared_weak_count *)v228;
  v228[1] = 0;
  v228[2] = 0;
  void *v228 = &unk_1EE387A48;
  v230 = v228 + 3;
  v228[8] = 0;
  v228[7] = v228 + 8;
  std::string v231 = (uint64_t **)(v228 + 7);
  int v233 = v260;
  v232 = v261;
  v228[5] = v261;
  int v234 = v228 + 5;
  v228[9] = 0;
  v228[3] = &unk_1EE359F08;
  v228[4] = v233;
  uint64_t v235 = v262;
  v228[6] = v262;
  if (v235)
  {
    v232[2] = v234;
    std::string v260 = (uint64_t *)&v261;
    uint64_t v261 = 0;
    uint64_t v262 = 0;
    v236 = (void *)v228[4];
    if (v236 != v234)
    {
      do
      {
        int v237 = (_DWORD *)v236[5];
        long long v238 = (_DWORD *)v236[6];
        while (v237 != v238)
        {
          *(_DWORD *)v271 = *v237;
          int v239 = *((_DWORD *)v236 + 8);
          *((_DWORD *)std::__tree<std::__value_type<Espresso::platform,int>,std::__map_value_compare<Espresso::platform,std::__value_type<Espresso::platform,int>,std::less<Espresso::platform>,true>,std::allocator<std::__value_type<Espresso::platform,int>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform const&>,std::tuple<>>(v231, *(int *)v271, (unsigned int *)v271)+ 8) = v239;
          ++v237;
        }
        int v240 = (void *)v236[1];
        if (v240)
        {
          do
          {
            v241 = v240;
            int v240 = (void *)*v240;
          }
          while (v240);
        }
        else
        {
          do
          {
            v241 = (void *)v236[2];
            BOOL v18 = *v241 == (void)v236;
            v236 = v241;
          }
          while (!v18);
        }
        v236 = v241;
      }
      while (v241 != v234);
    }
  }
  else
  {
    v228[4] = v234;
  }
  atomic_fetch_add_explicit(&v229->__shared_owners_, 1uLL, memory_order_relaxed);
  *(unsigned char *)uint64_t v245 = 1;
  *(void *)(v245 + 8) = v230;
  *(void *)(v245 + 16) = v229;
  atomic_fetch_add_explicit(&v229->__shared_owners_, 1uLL, memory_order_relaxed);
  nitro::nitro_function::nitro_function(v229);
  nitro::nitro_function::nitro_function(v229);
  std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::__deallocate_node(*(void **)&v277[16]);
  int v242 = *(void **)v277;
  *(void *)v277 = 0;
  if (v242) {
    operator delete(v242);
  }
  std::__tree<std::__value_type<int,Espresso::analysis_ane_multi_head::coalesced_segments_group_t>,std::__map_value_compare<int,std::__value_type<int,Espresso::analysis_ane_multi_head::coalesced_segments_group_t>,std::less<int>,true>,std::allocator<std::__value_type<int,Espresso::analysis_ane_multi_head::coalesced_segments_group_t>>>::destroy(v261);
  *(void *)v277 = &v263;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v277);
  *(void *)v277 = &v266;
  std::vector<std::unordered_set<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)v277);
  if (v246) {
    nitro::nitro_function::nitro_function(v246);
  }
}

void sub_192AF4568(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,char a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,void *__p,uint64_t a57)
{
  std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::__deallocate_node(*(void **)(v57 - 144));
  int v59 = *(void **)(v57 - 160);
  *(void *)(v57 - 160) = 0;
  if (v59) {
    operator delete(v59);
  }
  std::__tree<std::__value_type<int,Espresso::analysis_ane_multi_head::coalesced_segments_group_t>,std::__map_value_compare<int,std::__value_type<int,Espresso::analysis_ane_multi_head::coalesced_segments_group_t>,std::less<int>,true>,std::allocator<std::__value_type<int,Espresso::analysis_ane_multi_head::coalesced_segments_group_t>>>::destroy(a48);
  *(void *)(v57 - 160) = &a50;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v57 - 160));
  *(void *)(v57 - 160) = &a53;
  std::vector<std::unordered_set<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v57 - 160));
  if (a13) {
    nitro::nitro_function::nitro_function(a13);
  }
  _Unwind_Resume(a1);
}

char *std::__tree<std::__value_type<int,Espresso::analysis_ane_multi_head::coalesced_segments_group_t>,std::__map_value_compare<int,std::__value_type<int,Espresso::analysis_ane_multi_head::coalesced_segments_group_t>,std::less<int>,true>,std::allocator<std::__value_type<int,Espresso::analysis_ane_multi_head::coalesced_segments_group_t>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(uint64_t **a1, int a2, _DWORD *a3)
{
  uint64_t v6 = a1 + 1;
  unsigned int v5 = (char *)a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v7 = v5;
        int v8 = *((_DWORD *)v5 + 8);
        if (v8 <= a2) {
          break;
        }
        unsigned int v5 = *(char **)v7;
        uint64_t v6 = (uint64_t **)v7;
        if (!*(void *)v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      unsigned int v5 = (char *)*((void *)v7 + 1);
      if (!v5)
      {
        uint64_t v6 = (uint64_t **)(v7 + 8);
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v7 = (char *)(a1 + 1);
LABEL_9:
    int v9 = v7;
    uint64_t v7 = (char *)operator new(0x58uLL);
    *((_DWORD *)v7 + 8) = *a3;
    *(_OWORD *)(v7 + 56) = 0u;
    *(_OWORD *)(v7 + 40) = 0u;
    *(_OWORD *)(v7 + 72) = 0u;
    *((void *)v7 + 8) = v7 + 72;
    *(void *)uint64_t v7 = 0;
    *((void *)v7 + 1) = 0;
    *((void *)v7 + 2) = v9;
    uint64_t *v6 = (uint64_t *)v7;
    uint64_t v10 = (uint64_t *)**a1;
    uint64_t v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      uint64_t v11 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

void Espresso::analysis_ane_multi_head::coalesced_segments_group_t::~coalesced_segments_group_t(Espresso::analysis_ane_multi_head::coalesced_segments_group_t *this)
{
  std::__tree<std::__value_type<unsigned long long,Espresso::analysis_ane_multi_head::runtime_segment_combination_t>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,Espresso::analysis_ane_multi_head::runtime_segment_combination_t>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,Espresso::analysis_ane_multi_head::runtime_segment_combination_t>>>::destroy(*((void **)this + 4));
  unint64_t v2 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + 1) = v2;
    operator delete(v2);
  }
}

char *std::__tree<std::__value_type<unsigned long long,Espresso::analysis_ane_multi_head::runtime_segment_combination_t>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,Espresso::analysis_ane_multi_head::runtime_segment_combination_t>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,Espresso::analysis_ane_multi_head::runtime_segment_combination_t>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t **a1, unint64_t a2, void *a3)
{
  uint64_t v6 = a1 + 1;
  unsigned int v5 = (char *)a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v7 = v5;
        unint64_t v8 = *((void *)v5 + 4);
        if (v8 <= a2) {
          break;
        }
        unsigned int v5 = *(char **)v7;
        uint64_t v6 = (uint64_t **)v7;
        if (!*(void *)v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      unsigned int v5 = (char *)*((void *)v7 + 1);
      if (!v5)
      {
        uint64_t v6 = (uint64_t **)(v7 + 8);
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v7 = (char *)(a1 + 1);
LABEL_9:
    int v9 = v7;
    uint64_t v7 = (char *)operator new(0x70uLL);
    *((void *)v7 + 4) = *a3;
    *(_OWORD *)(v7 + 40) = 0u;
    *(_OWORD *)(v7 + 56) = 0u;
    *(_OWORD *)(v7 + 72) = 0u;
    *(_OWORD *)(v7 + 88) = 0u;
    *((void *)v7 + 13) = 0;
    *(void *)uint64_t v7 = 0;
    *((void *)v7 + 1) = 0;
    *((void *)v7 + 2) = v9;
    uint64_t *v6 = (uint64_t *)v7;
    uint64_t v10 = (uint64_t *)**a1;
    uint64_t v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      uint64_t v11 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

uint64_t std::__shared_ptr_emplace<Espresso::analysis_ane_multi_head>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::analysis_ane_multi_head>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE387A48;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::analysis_ane_multi_head>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE387A48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::pass_ane_multi_head::get_analysis_usage(uint64_t a1, unsigned char *a2)
{
  *a2 = 1;
}

void Espresso::pass_ane_multi_head::~pass_ane_multi_head(Espresso::pass_ane_multi_head *this)
{
  *(void *)this = &unk_1EE3719B0;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v1;

  *(void *)this = &unk_1EE3719B0;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
}

void Espresso::analysis_ane_multi_head::get_combo_for_coalesced_segment_given_bound_outputs(Espresso *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  int v6 = a4;
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  int v35 = a4;
  unint64_t v8 = *(uint64_t **)(a2 + 16);
  if (v8)
  {
    int v9 = *(uint64_t **)(a2 + 16);
    do
    {
      int v10 = *((_DWORD *)v9 + 8);
      if (v10 <= a4)
      {
        if (v10 >= a4)
        {
LABEL_26:
          BOOL v18 = (uint64_t **)(a2 + 8);
          uint64_t v19 = *(void *)(a3 + 64);
          if (v19) {
            std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>(v19 + 48, v6, v6);
          }
          uint64_t v20 = *(void *)(a5 + 664);
          if (*(void *)(a5 + 672) == v20)
          {
            unint64_t v23 = 0;
          }
          else
          {
            uint64_t v21 = 0;
            unint64_t v22 = 0;
            unint64_t v23 = 0;
            do
            {
              uint64_t v24 = *(void *)(a5 + 1240);
              if (!v24
                || (*(unsigned int (**)(uint64_t, void, uint64_t))(*(void *)v24 + 144))(v24, *(unsigned int *)(a5 + 1248), v20 + v21))
              {
                v23 |= 1 << v22;
              }
              ++v22;
              uint64_t v20 = *(void *)(a5 + 664);
              v21 += 24;
            }
            while (v22 < 0xAAAAAAAAAAAAAAABLL * ((*(void *)(a5 + 672) - v20) >> 3));
          }
          uint64_t v25 = std::__tree<std::__value_type<int,Espresso::analysis_ane_multi_head::coalesced_segments_group_t>,std::__map_value_compare<int,std::__value_type<int,Espresso::analysis_ane_multi_head::coalesced_segments_group_t>,std::less<int>,true>,std::allocator<std::__value_type<int,Espresso::analysis_ane_multi_head::coalesced_segments_group_t>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v18, v6, &v35);
          BOOL v28 = (void *)*((void *)v25 + 9);
          uint64_t v26 = v25 + 72;
          int v27 = v28;
          if (v28)
          {
            uint64_t v29 = v26;
            unint64_t v30 = v27;
            do
            {
              unint64_t v31 = v30[4];
              BOOL v32 = v31 >= v23;
              if (v31 >= v23) {
                uint64_t v33 = v30;
              }
              else {
                uint64_t v33 = v30 + 1;
              }
              if (v32) {
                uint64_t v29 = (char *)v30;
              }
              unint64_t v30 = (void *)*v33;
            }
            while (*v33);
            if (v29 == v26 || v23 < *((void *)v29 + 4))
            {
              do
              {
                uint64_t v29 = (char *)v27;
                int v27 = (void *)v27[1];
              }
              while (v27);
            }
          }
          else
          {
            do
            {
              uint64_t v29 = (char *)*((void *)v26 + 2);
              BOOL v34 = *(void *)v29 == (void)v26;
              uint64_t v26 = v29;
            }
            while (v34);
          }
          *(void *)a1 = 0;
          *((void *)a1 + 1) = 0;
          *((void *)a1 + 2) = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(a1, *((const void **)v29 + 5), *((void *)v29 + 6), (uint64_t)(*((void *)v29 + 6) - *((void *)v29 + 5)) >> 2);
          *((void *)a1 + 3) = 0;
          *((void *)a1 + 4) = 0;
          *((void *)a1 + 5) = 0;
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((void *)a1 + 3, *((void *)v29 + 8), *((void *)v29 + 9), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v29 + 9) - *((void *)v29 + 8)) >> 3));
          *((void *)a1 + 6) = 0;
          *((void *)a1 + 7) = 0;
          *((void *)a1 + 8) = 0;
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((void *)a1 + 6, *((void *)v29 + 11), *((void *)v29 + 12), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v29 + 12) - *((void *)v29 + 11)) >> 3));
          return;
        }
        ++v9;
      }
      int v9 = (uint64_t *)*v9;
    }
    while (v9);
  }
  uint64_t v11 = *(void *)(a2 + 40);
  if (v11)
  {
    uint64_t v12 = a2 + 40;
    do
    {
      int v13 = *(_DWORD *)(v11 + 28);
      BOOL v14 = v13 < a4;
      if (v13 >= a4) {
        uint64_t v15 = (uint64_t *)v11;
      }
      else {
        uint64_t v15 = (uint64_t *)(v11 + 8);
      }
      if (!v14) {
        uint64_t v12 = v11;
      }
      uint64_t v11 = *v15;
    }
    while (*v15);
    if (v12 != a2 + 40 && *(_DWORD *)(v12 + 28) <= a4)
    {
      int v6 = *(_DWORD *)(v12 + 32);
      int v35 = v6;
    }
  }
  for (; v8; unint64_t v8 = (uint64_t *)*v8)
  {
    int v16 = *((_DWORD *)v8 + 8);
    if (v6 >= v16)
    {
      if (v16 >= v6) {
        goto LABEL_26;
      }
      ++v8;
    }
  }
  int v17 = Espresso::espresso_os_log_subsystem(a1, (const char *)a2);
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 67109120;
    int v37 = v6;
    _os_log_debug_impl(&dword_1920CB000, v17, OS_LOG_TYPE_DEBUG, "skip segment %d", buf, 8u);
  }

  *((void *)a1 + 8) = 0;
  *((_OWORD *)a1 + 2) = 0u;
  *((_OWORD *)a1 + 3) = 0u;
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
}

void sub_192AF4E80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  unsigned int v5 = *(void **)v3;
  if (*(void *)v3)
  {
    *(void *)(v3 + 8) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(a1);
}

void non-virtual thunk to'Espresso::ANECompilerEngine::pool_kernel::~pool_kernel(Espresso::ANECompilerEngine::pool_kernel *this)
{
  uint64_t v1 = (Espresso::ANECompilerEngine::pool_kernel *)((char *)this - 432);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::generic_pool_kernel::~generic_pool_kernel(v1);

  JUMPOUT(0x192FF16B0);
}

{
  Espresso::generic_pool_kernel *v1;
  uint64_t vars8;

  uint64_t v1 = (Espresso::ANECompilerEngine::pool_kernel *)((char *)this - 432);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);

  Espresso::generic_pool_kernel::~generic_pool_kernel(v1);
}

void non-virtual thunk to'Espresso::ANECompilerEngine::pool_kernel::compile(Espresso::ANECompilerEngine::pool_kernel *this, Espresso::ANECompilerEngine::compiler *a2, void **a3)
{
}

void Espresso::ANECompilerEngine::pool_kernel::compile(Espresso::ANECompilerEngine::pool_kernel *this, Espresso::ANECompilerEngine::compiler *a2, void **a3)
{
  uint64_t v181 = *MEMORY[0x1E4F143B8];
  id v4 = (std::__shared_weak_count *)*((void *)a2 + 2);
  if (!v4 || (v137 = std::__shared_weak_count::lock(v4)) == 0 || (uint64_t v7 = *((void *)a2 + 1)) == 0) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Inconsistent state: null network");
  }
  if (!*(void *)(v7 + 576)) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Inconsistent state: blob_storage");
  }
  uint64_t v8 = v7 + 136;
  v169[0] = a3[6];
  int v9 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7 + 136, (unsigned __int8 *)v169[0], (long long **)v169);
  uint64_t v11 = (const void *)*((void *)v9 + 5);
  int v10 = (std::__shared_weak_count *)*((void *)v9 + 6);
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::size_type v136 = v10;
  v169[0] = a3;
  uint64_t v12 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8, (unsigned __int8 *)a3, (long long **)v169);
  BOOL v14 = (float *)*((void *)v12 + 5);
  int v13 = (std::__shared_weak_count *)*((void *)v12 + 6);
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v138 = v13;
  uint64_t v139 = objc_opt_new();
  if (v11)
  {
    int v16 = v15;
    long long v134 = 0;
    if (v136 && v15)
    {
      atomic_fetch_add_explicit(&v136->__shared_owners_, 1uLL, memory_order_relaxed);
      long long v134 = v136;
    }
    if (v14) {
      goto LABEL_14;
    }
LABEL_18:
    BOOL v18 = 0;
    uint64_t v133 = 0;
    goto LABEL_19;
  }
  int v16 = 0;
  long long v134 = 0;
  if (!v14) {
    goto LABEL_18;
  }
LABEL_14:
  BOOL v18 = v17;
  uint64_t v133 = 0;
  if (v138 && v17)
  {
    atomic_fetch_add_explicit(&v138->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v133 = v138;
  }
  unint64_t v132 = LABEL_19:;
  [v139 setObject:v132 forKeyedSubscript:@"Type"];
  uint64_t v19 = [NSNumber numberWithInt:*((unsigned int *)this + 77)];
  [v139 setObject:v19 forKeyedSubscript:@"KernelWidth"];

  uint64_t v20 = [NSNumber numberWithInt:*((unsigned int *)this + 78)];
  [v139 setObject:v20 forKeyedSubscript:@"KernelHeight"];
  int v135 = a2;

  uint64_t v21 = *((unsigned int *)v146[0] + 1);
  unint64_t v22 = [NSNumber numberWithInt:*(unsigned int *)v146[0]];
  v157[0] = v22;
  unint64_t v23 = [NSNumber numberWithInt:v21];
  v157[1] = v23;
  uint64_t v24 = [MEMORY[0x1E4F1C978] arrayWithObjects:v157 count:2];
  [v139 setObject:v24 forKeyedSubscript:@"Step"];

  if (*((_DWORD *)this + 84) == 2 && !*((_WORD *)this + 170)) {
    *((_WORD *)this + 170) = 1;
  }
  uint64_t v26 = v145;
  if (*((_DWORD *)this + 90)) {
    _ZF = v145 == 0;
  }
  else {
    _ZF = 0;
  }
  *(void *)&long long v25 = v144;
  uint64_t v28 = v144;
  BOOL v29 = _ZF && v144 == 0;
  *(_OWORD *)obuint64_t j = v25;
  uint64_t v30 = HIDWORD(v144);
  char v32 = v29 && HIDWORD(v144) == 0;
  if (!*((_DWORD *)this + 76) && (v32 & 1) == 0)
  {
    if (*(unsigned char *)((*(uint64_t (**)(void))(*((void *)this + 54) + 104))() + 52)
      || v30 | v143
      || (int)v26 <= 0 && (int)v28 < 1)
    {
      uint64_t v33 = [NSNumber numberWithBool:*((_DWORD *)this + 83) != 0];
      [v139 setObject:v33 forKeyedSubscript:@"AverageCountExcludePadding"];
    }
    else
    {
      [v139 setObject:MEMORY[0x1E4F1CC38] forKeyedSubscript:@"AverageCountExcludePadding"];
    }
  }
  uint64_t v34 = v143;
  int32x4_t v35 = (int32x4_t)vextq_s8(*(int8x16_t *)obj, *(int8x16_t *)obj, 0xCuLL);
  v35.i32[0] = v143;
  v35.i32[3] = v26;
  if (vmaxv_u16((uint16x4_t)vmovn_s32(vtstq_s32(v35, v35))))
  {
    uint64_t v36 = [NSNumber numberWithInt:v30];
    [v139 setObject:v36 forKeyedSubscript:@"PadTop"];

    int v37 = [NSNumber numberWithInt:v26];
    [v139 setObject:v37 forKeyedSubscript:@"PadBot"];

    uint64_t v38 = [NSNumber numberWithInt:v34];
    [v139 setObject:v38 forKeyedSubscript:@"PadLeft"];

    int v39 = [NSNumber numberWithInt:v28];
    [v139 setObject:v39 forKeyedSubscript:@"PadRight"];
  }
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t(v169, a3);
  unint64_t v140 = 0;
  long long v141 = 0;
  unint64_t v142 = 0;
  *(void *)long long buf = &v140;
  buf[8] = 0;
  unint64_t v140 = (std::string *)operator new(0x90uLL);
  long long v141 = v140;
  unint64_t v142 = (unint64_t)&v140[6];
  long long v141 = (std::string *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>,Espresso::ANECompilerEngine::compiler::unit_t const*,Espresso::ANECompilerEngine::compiler::unit_t const*,Espresso::ANECompilerEngine::compiler::unit_t*>((uint64_t)&v142, (uint64_t)v169, (uint64_t)&__str, (uint64_t)v140);

  if (v174 < 0) {
    operator delete(__p);
  }
  *(void *)long long buf = v172;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(void *)long long buf = v171;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (v170 < 0) {
    operator delete(v169[0]);
  }
  std::string::pointer data = v140[5].__r_.__value_.__l.__data_;
  v140[5].__r_.__value_.__r.__words[0] = (std::string::size_type)@"Pooling";

  objc_storeStrong((id *)&v140[5].__r_.__value_.__l.__size_, v139);
  atomic_fetch_add_explicit(&v137->__shared_owners_, 1uLL, memory_order_relaxed);
  if (v138) {
    atomic_fetch_add_explicit(&v138->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::ANECompilerEngine::compiler::layer_graph_info_t::layer_graph_info_t((Espresso::ANECompilerEngine::compiler::layer_graph_info_t *)v169);
  id v177 = 0;
  id v176 = 0;
  uint64_t v178 = 0x100000000;
  uint64_t v41 = *((void *)this + 62);
  BOOL v42 = (std::__shared_weak_count *)*((void *)this + 63);
  if (v42) {
    atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v41 && !*(unsigned char *)((*(uint64_t (**)(void))(*((void *)this + 54) + 104))() + 40))
  {
    float v43 = v14[28];
    v150[0] = v41;
    v150[1] = v42;
    if (v42) {
      atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v44 = (std::__shared_weak_count *)*((void *)this + 65);
    v149[0] = *((void *)this + 64);
    v149[1] = (uint64_t)v44;
    if (v44) {
      atomic_fetch_add_explicit(&v44->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    Espresso::ane_style_post_scale_bias((uint64_t)v150, v149, (uint64_t)&v151, v43);
    if (v44) {
      nitro::nitro_function::nitro_function(v44);
    }
    if (v42) {
      nitro::nitro_function::nitro_function(v42);
    }
    uint64_t v45 = *(unsigned int *)(v41 + 8);
    std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v147, 2 * v45, 1, 1, 1);
    uint64_t v46 = (int)v45;
    uint64_t v47 = *((void *)this + 64);
    int v48 = v45;
    if (v47) {
      int v48 = *(_DWORD *)(v47 + 8);
    }
    if (!*((unsigned char *)v135 + 384))
    {
      Espresso::blob<unsigned char,1>::make(&__str, 4 * v45);
      char v99 = *(int **)(__str.__r_.__value_.__r.__words[0] + 16);
      int v100 = v45 - 1;
      if ((int)v45 >= 1)
      {
        for (uint64_t i = 0; i != v45; ++i)
        {
          float v102 = *(float *)(*(void *)(v41 + 16) + i * 4);
          *(float *)&int v103 = ldexp(1.0, -v155) * v102;
          v99[i] = v103;
        }
      }
      if (v45)
      {
        BOOL v104 = *(_WORD **)(v147 + 16);
        do
        {
          int v105 = *v99++;
          _S0 = v105;
          __asm { FCVT            H0, S0 }
          *v104++ = _S0;
          --v46;
        }
        while (v46);
      }
      if (*((void *)this + 64))
      {
        Espresso::blob<unsigned char,1>::make(buf, 4 * v48);
        uint64_t v108 = *(void *)buf;
        Espresso::blob<unsigned char,1>::make(buf, 2 * v48);
        uint64_t v129 = *(void *)buf;
        uint64_t v109 = *(int **)(v108 + 16);
        if (v48 >= 1)
        {
          for (uint64_t j = 0; j != v48; ++j)
          {
            if (v100 >= (int)j) {
              int v111 = j;
            }
            else {
              int v111 = v100;
            }
            *(float *)&int v112 = *(float *)(*(void *)(v153 + 16) + 4 * j)
                            * *(float *)(*(void *)(v151 + 16) + 4 * v111);
            v109[j] = v112;
            unsigned int v113 = v156;
            unsigned int v114 = v155;
            *(float *)&int v115 = ldexp(1.0, v156 - v155) * *(float *)&v112;
            v109[j] = v115;
            float v118 = ldexp(1.0, v114 - v113) * *(float *)&v115;
            if (v118 < -127.0 || v118 > 255.0)
            {
              unint64_t v120 = Espresso::espresso_os_log_subsystem(v116, v117);
              if (os_log_type_enabled(v120, OS_LOG_TYPE_ERROR))
              {
                double v121 = *(float *)&v109[j];
                *(_DWORD *)long long buf = 134218752;
                *(double *)&uint8_t buf[4] = v118;
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = v156;
                __int16 v159 = 1024;
                int v160 = v155;
                __int16 v161 = 2048;
                double v162 = v121;
                _os_log_error_impl(&dword_1920CB000, v120, OS_LOG_TYPE_ERROR, "[ANEC::add_ane_scale_bias_unit] Shifted bias overflowing shifted_b=%f acc_bias_shift=%d post_right_shift=%d anebias=%f", buf, 0x22u);
              }
            }
          }
        }
        if (v48)
        {
          uint64_t v122 = v48;
          BOOL v123 = *(_WORD **)(v129 + 16);
          do
          {
            int v124 = *v109++;
            _S0 = v124;
            __asm { FCVT            H0, S0 }
            *v123++ = _S0;
            --v122;
          }
          while (v122);
        }
      }
      exception = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
      Espresso::not_implemented_error::not_implemented_error(exception);
    }
    unsigned int v126 = v156;
    uint64_t v49 = v147;
    if (v45)
    {
      BOOL v50 = *(int **)(v151 + 16);
      unint64_t v51 = *(_WORD **)(v147 + 16);
      do
      {
        int v52 = *v50++;
        _S0 = v52;
        __asm { FCVT            H0, S0 }
        *v51++ = _S0;
        --v46;
      }
      while (v46);
    }
    if (v47)
    {
      std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(buf, 2 * v48, 1, 1, 1);
      uint64_t v57 = *(void *)buf;
      std::string v128 = *(std::__shared_weak_count **)&buf[8];
      if (v48)
      {
        uint64_t v58 = v48;
        int v59 = *(_WORD **)(*(void *)buf + 16);
        int v60 = *(int **)(v153 + 16);
        do
        {
          int v61 = *v60++;
          _S0 = v61;
          __asm { FCVT            H0, S0 }
          *v59++ = _S0;
          --v58;
        }
        while (v58);
      }
    }
    else
    {
      std::string v128 = 0;
      uint64_t v57 = 0;
    }
    int v127 = *((unsigned __int8 *)v135 + 552);
    long long v63 = (Espresso::ANECompilerEngine::compiler *)((char *)v135 + 128);
    uint64_t v64 = v148;
    if (v148) {
      atomic_fetch_add_explicit(&v148->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v65 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v63, *(const unsigned __int8 **)(v49 + 16), *(int *)(v49 + 8));
    if (v64) {
      nitro::nitro_function::nitro_function(v64);
    }
    obja = objc_opt_new();
    if (*((unsigned char *)v135 + 121))
    {
      id v66 = (id)v140[5].__r_.__value_.__l.__size_;

      obja = v66;
    }
    unint64_t v67 = objc_opt_new();
    uint64_t v68 = [NSNumber numberWithInt:v45];
    [v67 setObject:v68 forKeyedSubscript:@"ScaleCount"];

    long long v69 = [NSNumber numberWithInt:v65];
    [v67 setObject:v69 forKeyedSubscript:@"ScaleOffset"];

    uint64_t v70 = NSNumber;
    if (v127) {
      uint64_t weights_file_index = 0;
    }
    else {
    uint64_t v72 = [v70 numberWithUnsignedLong:weights_file_index];
    }
    [v67 setObject:v72 forKeyedSubscript:@"ScaleIndex"];

    [v67 setObject:@"Float16" forKeyedSubscript:@"ScaleType"];
    int v73 = [NSNumber numberWithInt:v155];
    [obja setObject:v73 forKeyedSubscript:@"ScaleShift"];

    if (*((void *)this + 64))
    {
      if (v128) {
        atomic_fetch_add_explicit(&v128->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v74 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v63, *(const unsigned __int8 **)(v57 + 16), *(int *)(v57 + 8));
      if (v128) {
        nitro::nitro_function::nitro_function(v128);
      }
      int v75 = [NSNumber numberWithInt:*(unsigned int *)(*((void *)this + 64) + 8)];
      [v67 setObject:v75 forKeyedSubscript:@"BiasCount"];

      uint64_t v76 = [NSNumber numberWithInt:v74];
      [v67 setObject:v76 forKeyedSubscript:@"BiasOffset"];

      int v77 = NSNumber;
      if (v127) {
        uint64_t v78 = 0;
      }
      else {
      int v79 = [v77 numberWithUnsignedLong:v78];
      }
      [v67 setObject:v79 forKeyedSubscript:@"BiasIndex"];

      [v67 setObject:@"Float16" forKeyedSubscript:@"BiasType"];
      BOOL v80 = [NSNumber numberWithInt:v126];
      [obja setObject:v80 forKeyedSubscript:@"BiasShift"];
    }
    [obja setObject:v67 forKeyedSubscript:@"BiasScaleGroupData"];
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)buf, a3);
    BOOL v81 = v141;
    if (v141 == v140) {
      goto LABEL_116;
    }
    int v82 = v141 - 6;
    uint64_t v83 = HIBYTE(v141[-6].__r_.__value_.__r.__words[2]);
    char v84 = v83;
    std::string::size_type size = v141[-6].__r_.__value_.__l.__size_;
    if ((v83 & 0x80u) == 0) {
      std::string::size_type v86 = HIBYTE(v141[-6].__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v86 = v141[-6].__r_.__value_.__l.__size_;
    }
    uint64_t v87 = HIBYTE(v160);
    if (v160 < 0) {
      uint64_t v87 = *(void *)&buf[8];
    }
    if (v86 != v87) {
      goto LABEL_110;
    }
    if (v160 >= 0) {
      uint64_t v88 = buf;
    }
    else {
      uint64_t v88 = *(unsigned __int8 **)buf;
    }
    if ((char)v83 < 0)
    {
      int v90 = (const std::string::value_type *)v82->__r_.__value_.__r.__words[0];
      if (memcmp(v82->__r_.__value_.__l.__data_, v88, v141[-6].__r_.__value_.__l.__size_)) {
        goto LABEL_113;
      }
    }
    else if ((_BYTE)v83)
    {
      BOOL v89 = v141 - 6;
      while (v89->__r_.__value_.__s.__data_[0] == *v88)
      {
        BOOL v89 = (std::string *)((char *)v89 + 1);
        ++v88;
        if (!--v83) {
          goto LABEL_109;
        }
      }
      goto LABEL_110;
    }
LABEL_109:
    std::string::append(v81 - 6, "__@pre_scale_bias");
    char v84 = HIBYTE(v81[-6].__r_.__value_.__r.__words[2]);
LABEL_110:
    if ((v84 & 0x80) == 0)
    {
      long long v91 = *(_OWORD *)&v82->__r_.__value_.__l.__data_;
      __str.__r_.__value_.__r.__words[2] = v81[-6].__r_.__value_.__r.__words[2];
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v91;
      goto LABEL_114;
    }
    int v90 = v81[-6].__r_.__value_.__l.__data_;
    std::string::size_type size = v81[-6].__r_.__value_.__l.__size_;
LABEL_113:
    std::string::__init_copy_ctor_external(&__str, v90, size);
LABEL_114:
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v163, &__str, &v180, 1uLL);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
LABEL_116:
    BOOL v92 = v167;
    uint64_t v167 = @"GOC";

    objc_storeStrong(&v168, obja);
    if (!*((unsigned char *)v135 + 121))
    {
      BOOL v93 = v141;
      if ((unint64_t)v141 >= v142)
      {
        unint64_t v95 = 0x8E38E38E38E38E39 * (((char *)v141 - (char *)v140) >> 4);
        if (v95 + 1 > 0x1C71C71C71C71C7) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v96 = 0x1C71C71C71C71C72 * ((uint64_t)(v142 - (void)v140) >> 4);
        if (v96 <= v95 + 1) {
          unint64_t v96 = v95 + 1;
        }
        if (0x8E38E38E38E38E39 * ((uint64_t)(v142 - (void)v140) >> 4) >= 0xE38E38E38E38E3) {
          unint64_t v97 = 0x1C71C71C71C71C7;
        }
        else {
          unint64_t v97 = v96;
        }
        *((void *)&v180 + 1) = &v142;
        if (v97) {
          unint64_t v97 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v97);
        }
        else {
          uint64_t v98 = 0;
        }
        __str.__r_.__value_.__r.__words[0] = v97;
        __str.__r_.__value_.__l.__size_ = v97 + 144 * v95;
        __str.__r_.__value_.__r.__words[2] = __str.__r_.__value_.__l.__size_;
        *(void *)&long long v180 = v97 + 144 * v98;
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)__str.__r_.__value_.__l.__size_, (uint64_t)buf);
        __str.__r_.__value_.__r.__words[2] += 144;
        std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer((uint64_t *)&v140, &__str);
        uint64_t v94 = v141;
        std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&__str);
      }
      else
      {
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v141, (uint64_t)buf);
        uint64_t v94 = v93 + 6;
      }
      long long v141 = v94;
    }

    if (v165 < 0) {
      operator delete(v164);
    }
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v163;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v161;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
    if (SHIBYTE(v160) < 0) {
      operator delete(*(void **)buf);
    }

    if (v128) {
      nitro::nitro_function::nitro_function(v128);
    }
    if (v148) {
      nitro::nitro_function::nitro_function(v148);
    }
    if (v154) {
      nitro::nitro_function::nitro_function(v154);
    }
    if (v152) {
      nitro::nitro_function::nitro_function(v152);
    }
  }
  if (v42) {
    nitro::nitro_function::nitro_function(v42);
  }

  if (v174 < 0) {
    operator delete(__p);
  }
  *(void *)long long buf = v172;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(void *)long long buf = v171;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (v170 < 0) {
    operator delete(v169[0]);
  }
  if (v138) {
    nitro::nitro_function::nitro_function(v138);
  }
  nitro::nitro_function::nitro_function(v137);
  (*(void (**)(char *, Espresso::ANECompilerEngine::compiler *, std::string **))(*((void *)this + 54) + 32))((char *)this + 432, v135, &v140);
  v169[0] = &v140;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)v169);
  if (v146[0])
  {
    v146[1] = v146[0];
    operator delete(v146[0]);
  }

  if (v133) {
    nitro::nitro_function::nitro_function(v133);
  }
  if (v134) {
    nitro::nitro_function::nitro_function(v134);
  }

  if (v138) {
    nitro::nitro_function::nitro_function(v138);
  }
  if (v136) {
    nitro::nitro_function::nitro_function(v136);
  }
  nitro::nitro_function::nitro_function(v137);
}

void sub_192AF6010(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, std::__shared_weak_count *a17, std::__shared_weak_count *a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21,std::__shared_weak_count *a22,std::__shared_weak_count *a23,void *a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47)
{
  if (a23) {
    nitro::nitro_function::nitro_function(a23);
  }
  nitro::nitro_function::nitro_function(a22);
  a47 = (uint64_t)&a25;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&a47);
  if (__p)
  {
    a32 = (uint64_t)__p;
    operator delete(__p);
  }

  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }

  if (a23) {
    nitro::nitro_function::nitro_function(a23);
  }
  if (a21) {
    nitro::nitro_function::nitro_function(a21);
  }
  nitro::nitro_function::nitro_function(a22);
  _Unwind_Resume(a1);
}

void sub_192AF6404(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void anonymous namespace'::get_anec_final_strides<Espresso::pool_params>(char *a1, _DWORD *a2, int a3, int a4, int a5, int a6)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  *((void *)a1 + 2) = 0;
  int v8 = a2[5];
  if (a2[14])
  {
    int v9 = a2[4];
    a4 = a2[5];
  }
  else
  {
    int v10 = a2[6];
    BOOL v12 = v8 == a4 && a2[4] == a4 && v10 == a3;
    int v9 = a4;
    if (!v12)
    {
      __src[0] = a2[4];
      __src[1] = v8;
      __src[2] = v10;
      std::vector<int>::__assign_with_size[abi:ne180100]<int const*,int const*>(a1, (char *)__src, (uint64_t)&v26, 3uLL);
      return;
    }
  }
  if (a4 > 2 && a5 == 1) {
    int v14 = 1;
  }
  else {
    int v14 = a4;
  }
  uint64_t v15 = operator new(4uLL);
  if (v9 > 2 && a6 == 1) {
    int v17 = 1;
  }
  else {
    int v17 = v9;
  }
  *uint64_t v15 = v17;
  *(void *)a1 = v15;
  *((void *)a1 + 1) = v15 + 1;
  *((void *)a1 + 2) = v15 + 1;
  uint64_t v19 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(2uLL);
  uint64_t v20 = *(char **)a1;
  uint64_t v21 = (char *)*((void *)a1 + 1);
  v19[1] = v14;
  unint64_t v22 = (char *)(v19 + 1);
  unint64_t v23 = (char *)(v19 + 2);
  while (v21 != v20)
  {
    int v24 = *((_DWORD *)v21 - 1);
    v21 -= 4;
    *((_DWORD *)v22 - 1) = v24;
    v22 -= 4;
  }
  *(void *)a1 = v22;
  *((void *)a1 + 1) = v23;
  *((void *)a1 + 2) = &v19[v18];
  if (v20) {
    operator delete(v20);
  }
  *((void *)a1 + 1) = v23;
}

void sub_192AF6550(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unsigned int *anonymous namespace'::get_anec_final_pad<Espresso::pool_params>(unsigned int *result, uint64_t a2, int a3, int a4, int a5, int a6)
{
  int v7 = *(_DWORD *)(a2 + 16);
  int v6 = *(_DWORD *)(a2 + 20);
  int v9 = *(_DWORD *)(a2 + 4);
  int v8 = *(_DWORD *)(a2 + 8);
  int v10 = *(__int16 *)(a2 + 36);
  int v11 = *(unsigned __int16 *)(a2 + 36);
  switch(v10)
  {
    case 4:
      goto LABEL_4;
    case 2:
      unsigned int v18 = 0;
      unsigned int v15 = 0;
      unsigned int v19 = 0;
      unsigned int v16 = 0;
      unsigned int v20 = 0;
      unsigned int v21 = 0;
      break;
    case 1:
LABEL_4:
      unsigned int v12 = (v6 * (a5 - 1) - a3 + v8) & ~((v6 * (a5 - 1) - a3 + v8) >> 31);
      unsigned int v13 = (v7 * (a6 - 1) - a4 + v9) & ~((v7 * (a6 - 1) - a4 + v9) >> 31);
      unsigned int v14 = v13 >> 1;
      unsigned int v15 = v13 - (v13 >> 1);
      unsigned int v16 = v12 >> 1;
      unsigned int v17 = v12 - (v12 >> 1);
      if (v11 == 1) {
        unsigned int v18 = v14;
      }
      else {
        unsigned int v18 = v15;
      }
      if (v11 == 1)
      {
        unsigned int v19 = v16;
      }
      else
      {
        unsigned int v15 = v14;
        unsigned int v19 = v17;
      }
      if (v11 == 1) {
        unsigned int v16 = v17;
      }
      unsigned int v20 = 0;
      unsigned int v21 = 0;
      break;
    default:
      unsigned int v18 = *(__int16 *)(a2 + 44);
      unsigned int v15 = *(__int16 *)(a2 + 46);
      unsigned int v19 = *(__int16 *)(a2 + 48);
      unsigned int v16 = *(__int16 *)(a2 + 50);
      unsigned int v21 = *(__int16 *)(a2 + 52);
      unsigned int v20 = *(__int16 *)(a2 + 54);
      break;
  }
  *double result = v18;
  result[1] = v15;
  result[2] = v19;
  result[3] = v16;
  result[4] = v20;
  result[5] = v21;
  if (v11 == 3 && *(_DWORD *)(a2 + 32) == 2)
  {
    result[1] = v7 * (a6 - 1) - a4 + v9;
    result[3] = v6 * (a5 - 1) - a3 + v8;
  }
  return result;
}

uint64_t Espresso::ANECompilerEngine::pool_kernel::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  if (Espresso::weight_key_supported_by_conv_quantized_weights_helper(a2, 1)) {
    return 1;
  }

  return Espresso::ANECompilerEngine::ane_kernel::supports_weight_key(a2);
}

BOOL Espresso::ANECompilerEngine::pool_kernel::is_valid_for_engine(uint64_t a1, int64x2_t **a2, Espresso::ANECompilerEngine *a3)
{
  v152[2] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *((void *)a3 + 6);
  int v7 = *(std::__shared_weak_count **)(v6 + 80);
  if (!v7)
  {
    int v8 = 0;
    goto LABEL_5;
  }
  int v8 = std::__shared_weak_count::lock(v7);
  if (!v8)
  {
LABEL_5:
    int v9 = 0;
    goto LABEL_6;
  }
  int v9 = *(const Espresso::base_kernel::validate_for_engine_args_t **)(v6 + 72);
LABEL_6:
  int v10 = Espresso::ANECompilerEngine::ane_arch_allow_network_override((uint64_t)v9 + 472);
  if (*((void *)a3 + 1) - *(void *)a3 != 64 || *((void *)a3 + 4) - *((void *)a3 + 3) != 64)
  {
    unsigned int v15 = *a2;
    unsigned int v16 = a2[1];
    v138[0] = v15;
    v138[1] = v16;
    if (v16) {
      atomic_fetch_add_explicit(&v16->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(&v101, "pool_kernel: expect only one input / output");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t((std::string *)__p, &v101, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v138, (Espresso::base_kernel::validate_for_engine_warning_t *)__p);
    if ((void)v136) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v136);
    }
    v149.__r_.__value_.__r.__words[0] = (std::string::size_type)v135;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v149);
    v149.__r_.__value_.__r.__words[0] = (std::string::size_type)&v133 + 8;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v149);
    if (SBYTE7(v133) < 0) {
      operator delete(__p[0]);
    }
    if (SBYTE7(v102) < 0) {
      operator delete((void *)v101);
    }
    goto LABEL_81;
  }
  uint64_t v11 = *((void *)a3 + 6);
  unsigned int v12 = *(std::__shared_weak_count **)(v11 + 80);
  if (v12)
  {
    unsigned int v13 = std::__shared_weak_count::lock(v12);
    if (v13) {
      unsigned int v14 = *(const Espresso::net **)(v11 + 72);
    }
    else {
      unsigned int v14 = 0;
    }
  }
  else
  {
    unsigned int v14 = 0;
    unsigned int v13 = 0;
  }
  uint64_t v17 = *(void *)a3;
  uint64_t v18 = *(void *)(*(void *)a3 + 32);
  long long v19 = *(_OWORD *)(*(void *)a3 + 16);
  v124[0] = *(_OWORD *)*(void *)a3;
  v124[1] = v19;
  uint64_t v125 = v18;
  unsigned int v126 = 0;
  int v127 = 0;
  uint64_t v128 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v126, *(const void **)(v17 + 40), *(void *)(v17 + 48), (uint64_t)(*(void *)(v17 + 48) - *(void *)(v17 + 40)) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v129, v14, (const Espresso::layer_shape *)v124, 1);
  if (v126)
  {
    int v127 = v126;
    operator delete(v126);
  }
  if (v13) {
    nitro::nitro_function::nitro_function(v13);
  }
  uint64_t v20 = *((void *)a3 + 6);
  unsigned int v21 = *(std::__shared_weak_count **)(v20 + 80);
  if (v21)
  {
    unint64_t v22 = std::__shared_weak_count::lock(v21);
    if (v22) {
      unint64_t v23 = *(const Espresso::net **)(v20 + 72);
    }
    else {
      unint64_t v23 = 0;
    }
  }
  else
  {
    unint64_t v23 = 0;
    unint64_t v22 = 0;
  }
  uint64_t v24 = *((void *)a3 + 3);
  uint64_t v25 = *(void *)(v24 + 32);
  long long v26 = *(_OWORD *)(v24 + 16);
  v116[0] = *(_OWORD *)v24;
  v116[1] = v26;
  uint64_t v117 = v25;
  float v118 = 0;
  unint64_t v119 = 0;
  uint64_t v120 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v118, *(const void **)(v24 + 40), *(void *)(v24 + 48), (uint64_t)(*(void *)(v24 + 48) - *(void *)(v24 + 40)) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v121, v23, (const Espresso::layer_shape *)v116, 1);
  if (v118)
  {
    unint64_t v119 = v118;
    operator delete(v118);
  }
  if (v22) {
    nitro::nitro_function::nitro_function(v22);
  }
  if (!Espresso::ANECompilerEngine::blob_shape_ane_compatible(v129, v10))
  {
    uint64_t v47 = *a2;
    unsigned int v16 = a2[1];
    v115[0] = v47;
    v115[1] = v16;
    if (v16) {
      atomic_fetch_add_explicit(&v16->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(&v101, "pool_kernel: Input tensor extents exceed ANE limits");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t((std::string *)__p, &v101, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v115, (Espresso::base_kernel::validate_for_engine_warning_t *)__p);
LABEL_76:
    if ((void)v136) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v136);
    }
    v149.__r_.__value_.__r.__words[0] = (std::string::size_type)v135;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v149);
    v149.__r_.__value_.__r.__words[0] = (std::string::size_type)&v133 + 8;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v149);
    if (SBYTE7(v133) < 0) {
      operator delete(__p[0]);
    }
    if (SBYTE7(v102) < 0)
    {
      operator delete((void *)v101);
      if (!v16) {
        goto LABEL_83;
      }
      goto LABEL_82;
    }
LABEL_81:
    if (!v16)
    {
LABEL_83:
      BOOL v49 = 0;
      goto LABEL_84;
    }
LABEL_82:
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v16);
    goto LABEL_83;
  }
  if (!Espresso::ANECompilerEngine::blob_shape_ane_compatible(v121, v10))
  {
    int v48 = *a2;
    unsigned int v16 = a2[1];
    v114[0] = v48;
    v114[1] = v16;
    if (v16) {
      atomic_fetch_add_explicit(&v16->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(&v101, "pool_kernel: Output tensor extents exceed ANE limits");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t((std::string *)__p, &v101, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v114, (Espresso::base_kernel::validate_for_engine_warning_t *)__p);
    goto LABEL_76;
  }
  long long v27 = *(_OWORD *)(a1 + 352);
  long long v28 = *(_OWORD *)(a1 + 384);
  long long v29 = *(_OWORD *)(a1 + 400);
  v135[1] = *(_OWORD *)(a1 + 368);
  long long v136 = v28;
  long long v137 = v29;
  long long v30 = *(_OWORD *)(a1 + 320);
  *(_OWORD *)std::string __p = *(_OWORD *)(a1 + 304);
  long long v133 = v30;
  long long v134 = *(_OWORD *)(a1 + 336);
  v135[0] = v27;
  if (*(_DWORD *)(a1 + 336) == 2 && !*(_WORD *)(a1 + 340)) {
    WORD2(v134) = 1;
  }
  unint64_t v97 = v10;
  Espresso::ANECompilerEngine::ane_kernel::get_ane_validator((Espresso::ANECompilerEngine::ane_kernel *)&v112, (NSString *)(a1 + 432), v10);
  if (!*(_DWORD *)(a1 + 360))
  {
    unint64_t v51 = (_DWORD *)*((void *)a3 + 3);
    if (*((_DWORD **)a3 + 4) == v51 || v51[1] != 1 || *v51 != 1) {
      goto LABEL_122;
    }
  }
  unsigned int v31 = *(_DWORD *)(a1 + 308);
  int v32 = *(_DWORD *)(a1 + 312);
  uint64_t v33 = a2[1];
  BOOL v92 = *a2;
  if (v33) {
    atomic_fetch_add_explicit(&v33->i64[1], 1uLL, memory_order_relaxed);
  }
  unint64_t v95 = v33;
  int v93 = *(_DWORD *)(a1 + 304);
  if (v93 == 1) {
    int v34 = 15;
  }
  else {
    int v34 = 29;
  }
  if (v93 == 1) {
    int v35 = 7;
  }
  else {
    int v35 = 13;
  }
  int v90 = v35;
  int v91 = v34;
  uint64_t v36 = *((void *)a3 + 6);
  uint64_t v37 = *(void *)v36 + 224 * *((void *)a3 + 9);
  uint64_t v38 = *(void **)(v37 + 136);
  if (*(void **)(v37 + 144) == v38) {
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  }
  unsigned int v39 = *((_DWORD *)a3 + 16);
  uint64_t v94 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(v36 + 80));
  int v40 = *(uint64_t ***)(v36 + 72);
  if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(v40[45], v38))
  {
    v149.__r_.__value_.__r.__words[0] = (std::string::size_type)v38;
    BOOL v42 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v40 + 44, v38, (uint64_t)&std::piecewise_construct, (long long **)&v149);
    long long v101 = *(_OWORD *)(v42 + 56);
    uint64_t v103 = 0;
    long long v102 = 0uLL;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v102, *((const void **)v42 + 9), *((void *)v42 + 10), (uint64_t)(*((void *)v42 + 10) - *((void *)v42 + 9)) >> 2);
    unsigned int v39 = DWORD2(v101) == -1 ? 1 : DWORD2(v101);
    if ((void)v102)
    {
      *((void *)&v102 + 1) = v102;
      operator delete((void *)v102);
    }
  }
  if (v39 <= 1) {
    int v43 = 1;
  }
  else {
    int v43 = v39;
  }
  if (!Espresso::ANECompilerEngine::can_handle_configuration_dependent_transforms((Espresso::ANECompilerEngine *)v40, v41))
  {
    if (v39 > 1)
    {
      if (v43 != 4 && v43 != 2) {
        Espresso::throw_exception_selector<Espresso::invalid_state_error,int &>("Wrong compute path for ANE: %d", *((unsigned int *)a3 + 16));
      }
      std::string::basic_string[abi:ne180100]<0>(&v101, "(dilated)kernel width");
      int v52 = v92;
      if (v95) {
        atomic_fetch_add_explicit(&v95->i64[1], 1uLL, memory_order_relaxed);
      }
      if (Espresso::ANECompilerEngine::validate_size(v31, v91, (uint64_t)&v101, (uint64_t)a3, v92, v95))
      {
        std::string::basic_string[abi:ne180100]<0>(&v149, "(dilated)kernel height");
        if (v95) {
          atomic_fetch_add_explicit(&v95->i64[1], 1uLL, memory_order_relaxed);
        }
        goto LABEL_107;
      }
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&v101, "(dilated)kernel width");
      int v52 = v92;
      if (v95) {
        atomic_fetch_add_explicit(&v95->i64[1], 1uLL, memory_order_relaxed);
      }
      if (Espresso::ANECompilerEngine::validate_size(v31, v90, (uint64_t)&v101, (uint64_t)a3, v92, v95))
      {
        std::string::basic_string[abi:ne180100]<0>(&v149, "(dilated)kernel height");
        if (v95) {
          atomic_fetch_add_explicit(&v95->i64[1], 1uLL, memory_order_relaxed);
        }
LABEL_107:
        BOOL v53 = Espresso::ANECompilerEngine::validate_size(v32, v91, (uint64_t)&v149, (uint64_t)a3, v52, v95);
        if (v95) {
          nitro::nitro_function::nitro_function((std::__shared_weak_count *)v95);
        }
        char v54 = !v53;
        if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v149.__r_.__value_.__l.__data_);
        }
LABEL_112:
        if (v95) {
          nitro::nitro_function::nitro_function((std::__shared_weak_count *)v95);
        }
        if (SBYTE7(v102) < 0) {
          operator delete((void *)v101);
        }
        if (v54)
        {
LABEL_117:
          BOOL v45 = 0;
          goto LABEL_119;
        }
        goto LABEL_118;
      }
    }
    char v54 = 1;
    goto LABEL_112;
  }
  if (v93 != 1) {
    goto LABEL_118;
  }
  if (v39 >= 2) {
    int v44 = 29;
  }
  else {
    int v44 = 13;
  }
  if (v44 < (int)v31)
  {
    while ((v31 & 1) == 0)
    {
      v31 >>= 1;
      if (v31 <= v44) {
        goto LABEL_66;
      }
    }
    goto LABEL_117;
  }
LABEL_66:
  if (v32 < 30)
  {
LABEL_118:
    BOOL v45 = 1;
    goto LABEL_119;
  }
  do
  {
    BOOL v45 = (v32 & 1) == 0;
    if (v32) {
      break;
    }
    BOOL v46 = v32 > 0x3B;
    int v32 = v32 >> 1;
  }
  while (v46);
LABEL_119:
  nitro::nitro_function::nitro_function(v94);
  if (v95) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v95);
  }
  int v10 = v97;
  if (!v45)
  {
    uint64_t v58 = *a2;
    int v59 = a2[1];
    v111[0] = v58;
    v111[1] = v59;
    if (v59) {
      atomic_fetch_add_explicit(&v59->i64[1], 1uLL, memory_order_relaxed);
    }
    std::to_string(&v148, *(_DWORD *)(a1 + 308));
    int v60 = std::string::insert(&v148, 0, "pool_kernel: Invalid kernel size, size_x = ");
    long long v61 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
    *(void *)&v99[16] = *((void *)&v60->__r_.__value_.__l + 2);
    *(_OWORD *)char v99 = v61;
    v60->__r_.__value_.__l.__size_ = 0;
    v60->__r_.__value_.__r.__words[2] = 0;
    v60->__r_.__value_.__r.__words[0] = 0;
    int v62 = std::string::append((std::string *)v99, " size_y = ");
    long long v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
    v144.__r_.__value_.__r.__words[2] = v62->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v144.__r_.__value_.__l.__data_ = v63;
    v62->__r_.__value_.__l.__size_ = 0;
    v62->__r_.__value_.__r.__words[2] = 0;
    v62->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v147, *(_DWORD *)(a1 + 312));
    if ((v147.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v64 = &v147;
    }
    else {
      uint64_t v64 = (std::string *)v147.__r_.__value_.__r.__words[0];
    }
    if ((v147.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v147.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v147.__r_.__value_.__l.__size_;
    }
    id v66 = std::string::append(&v144, (const std::string::value_type *)v64, size);
    std::string v149 = *v66;
    v66->__r_.__value_.__l.__size_ = 0;
    v66->__r_.__value_.__r.__words[2] = 0;
    v66->__r_.__value_.__r.__words[0] = 0;
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t((std::string *)&v101, (long long *)&v149, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v111, (Espresso::base_kernel::validate_for_engine_warning_t *)&v101);
    if (v110) {
      nitro::nitro_function::nitro_function(v110);
    }
    v143.__r_.__value_.__r.__words[0] = (std::string::size_type)&v105;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v143);
    v143.__r_.__value_.__r.__words[0] = (std::string::size_type)&v102 + 8;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v143);
    if (SBYTE7(v102) < 0) {
      operator delete((void *)v101);
    }
    if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v149.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v147.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v144.__r_.__value_.__l.__data_);
    }
    if ((v99[23] & 0x80000000) != 0) {
      operator delete(*(void **)v99);
    }
    if (SHIBYTE(v148.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v148.__r_.__value_.__l.__data_);
    }
    if (v59) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v59);
    }
    BOOL v49 = 0;
    goto LABEL_157;
  }
LABEL_122:
  unsigned int v55 = Espresso::ANECompilerEngine::bottom_compute_path(a3, v9, 0);
  if (v55 < 8 && ((0x97u >> v55) & 1) != 0)
  {
    unint64_t v67 = off_1E5747950[v55];
    ANECTensorDescInitialize();
    uint64_t v96 = v131;
    *(void *)&long long v68 = (int)v131;
    *((void *)&v68 + 1) = SHIDWORD(v131);
    long long v150 = v68;
    int v69 = v130;
    v149.__r_.__value_.__r.__words[0] = (std::string::size_type)v67;
    uint64_t v151 = v130;
    *(void *)&long long v68 = v129[0];
    *((void *)&v68 + 1) = v129[1];
    *(_OWORD *)&v149.__r_.__value_.__r.__words[1] = v68;
    ANECPoolLayerDescInitialize();
    int v70 = (int)__p[0];
    int v71 = v122;
    int v72 = v123;
    uint64_t v73 = *(void *)v148.__r_.__value_.__l.__data_;
    uint64_t v74 = @"Zero";
    if (v70 == 1) {
      uint64_t v74 = @"Negative";
    }
    *((void *)&v101 + 1) = v74;
    *(void *)&long long v75 = SHIDWORD(__p[0]);
    *((void *)&v75 + 1) = SLODWORD(__p[1]);
    long long v102 = v75;
    uint64_t v103 = 1;
    uint64_t v104 = v73;
    int v105 = 1;
    if (*(_OWORD *)&v147.__r_.__value_.__l.__data_ != 0)
    {
      long long v106 = *(_OWORD *)&v147.__r_.__value_.__l.__data_;
      int v107 = 0;
      int v108 = 0;
    }
    if (DWORD2(v135[0])) {
      BOOL v76 = HIDWORD(v147.__r_.__value_.__r.__words[1]) == 0;
    }
    else {
      BOOL v76 = 0;
    }
    char v78 = v76 && *(std::string::size_type *)((char *)v147.__r_.__value_.__r.__words + 4) == 0;
    if (!v70 && (v78 & 1) == 0)
    {
      BOOL v79 = !(LODWORD(v147.__r_.__value_.__r.__words[1]) | LODWORD(v147.__r_.__value_.__l.__data_))
         && (SHIDWORD(v147.__r_.__value_.__r.__words[1]) > 0 || SHIDWORD(v147.__r_.__value_.__r.__words[0]) >= 1)
         || HIDWORD(v133) != 0;
      BOOL v109 = v79;
    }
    uint64_t v146 = 0;
    uint64_t v145 = 0;
    int v80 = ANECValidatePoolLayer();
    if (v80)
    {
      Espresso::ANECompilerEngine::violations_from_alternates<ANECPoolLayerDescAlternate>((uint64_t)&v144, v146, v145);
      std::to_string(&v141, v80);
      BOOL v81 = std::string::insert(&v141, 0, "pool_kernel: ANECValidatePoolLayer failed with status ");
      long long v82 = *(_OWORD *)&v81->__r_.__value_.__l.__data_;
      v142.__r_.__value_.__r.__words[2] = v81->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v142.__r_.__value_.__l.__data_ = v82;
      v81->__r_.__value_.__l.__size_ = 0;
      v81->__r_.__value_.__r.__words[2] = 0;
      v81->__r_.__value_.__r.__words[0] = 0;
      uint64_t v83 = std::string::append(&v142, ". ");
      long long v84 = *(_OWORD *)&v83->__r_.__value_.__l.__data_;
      v143.__r_.__value_.__r.__words[2] = v83->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v143.__r_.__value_.__l.__data_ = v84;
      v83->__r_.__value_.__l.__size_ = 0;
      v83->__r_.__value_.__r.__words[2] = 0;
      v83->__r_.__value_.__r.__words[0] = 0;
      Espresso::ANECompilerEngine::format_validation_violations((uint64_t)v139, (uint64_t)&v144);
      if ((v140 & 0x80u) == 0) {
        uint64_t v85 = v139;
      }
      else {
        uint64_t v85 = (void **)v139[0];
      }
      if ((v140 & 0x80u) == 0) {
        std::string::size_type v86 = v140;
      }
      else {
        std::string::size_type v86 = (std::string::size_type)v139[1];
      }
      uint64_t v87 = std::string::append(&v143, (const std::string::value_type *)v85, v86);
      std::string::size_type v88 = v87->__r_.__value_.__r.__words[0];
      v152[0] = v87->__r_.__value_.__l.__size_;
      *(void *)((char *)v152 + 7) = *(std::string::size_type *)((char *)&v87->__r_.__value_.__r.__words[1] + 7);
      char v89 = HIBYTE(v87->__r_.__value_.__r.__words[2]);
      v87->__r_.__value_.__l.__size_ = 0;
      v87->__r_.__value_.__r.__words[2] = 0;
      v87->__r_.__value_.__r.__words[0] = 0;
      v99[0] = 0;
      *(void *)&v99[23] = *(void *)((char *)v152 + 7);
      *(void *)&v99[8] = v88;
      *(void *)&v99[16] = v152[0];
      char v100 = v89;
      if ((char)v140 < 0) {
        operator delete(v139[0]);
      }
      if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v143.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v142.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v141.__r_.__value_.__l.__data_);
      }
      std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&v144);
    }
    else
    {
      v99[0] = 1;
      std::string::basic_string[abi:ne180100]<0>(&v99[8], "Success");
    }
    if (v148.__r_.__value_.__r.__words[0])
    {
      v148.__r_.__value_.__l.__size_ = v148.__r_.__value_.__r.__words[0];
      operator delete(v148.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    v99[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(&v99[8], "pool_kernel: invalid compute path for input");
  }
  BOOL v49 = v99[0] != 0;
  if (!v99[0])
  {
    BOOL v56 = *a2;
    uint64_t v57 = a2[1];
    v98[0] = v56;
    v98[1] = v57;
    if (v57) {
      atomic_fetch_add_explicit(&v57->i64[1], 1uLL, memory_order_relaxed);
    }
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t((std::string *)&v101, (long long *)&v99[8], (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v98, (Espresso::base_kernel::validate_for_engine_warning_t *)&v101);
    Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((Espresso::base_kernel::validate_for_engine_warning_t *)&v101);
    if (v57) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v57);
    }
  }
  int v10 = v97;
  if (v100 < 0) {
    operator delete(*(void **)&v99[8]);
  }
LABEL_157:
  if (v113) {
    nitro::nitro_function::nitro_function(v113);
  }
LABEL_84:

  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  return v49;
}

void sub_192AF735C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,std::__shared_weak_count *a40)
{
  int v43 = *(void **)(v41 - 232);
  if (v43)
  {
    *(void *)(v41 - 224) = v43;
    operator delete(v43);
  }
  if (a40) {
    nitro::nitro_function::nitro_function(a40);
  }

  if (v40) {
    nitro::nitro_function::nitro_function(v40);
  }
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::violations_from_alternates<ANECPoolLayerDescAlternate>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a2)
  {
    uint64_t v6 = 0;
    int v7 = (CFTypeRef *)(a3 + 8);
    do
    {
      int v8 = (unint64_t *)(a3 + 680 * v6);
      if (*v8)
      {
        unint64_t v9 = 0;
        int v10 = v7;
        do
        {
          std::__hash_table<__CFString const*,Espresso::ANECompilerEngine::CFStringHasher,Espresso::ANECompilerEngine::CFStringEqualWrapper,std::allocator<__CFString const*>>::__emplace_unique_key_args<__CFString const*,__CFString const* const&>((float *)a1, v10, v10);
          ++v9;
          ++v10;
        }
        while (v9 < *v8);
      }
      ++v6;
      v7 += 85;
    }
    while (v6 != a2);
  }
}

void sub_192AF76EC(_Unwind_Exception *a1)
{
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::pool_kernel::__set_weight_raw_blob(void *a1, uint64_t a2, unsigned __int8 **a3, char *a4, unint64_t a5, uint64_t *a6)
{
  uint64_t v11 = a1 + 54;
  (*(void (**)(long long *__return_ptr, void *))(a1[54] + 128))(v18, a1 + 54);
  unsigned int v12 = (std::__shared_weak_count *)a1[2];
  v17[0] = a1[1];
  v17[1] = (uint64_t)v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = (*(uint64_t (**)(void *))(*v11 + 136))(v11);
  Espresso::set_conv_quantized_weight_helper(v14, v15, v16, v13, a3, a4, a5, a6, a1 + 52, v18, v17, v13, 1);
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
  if (__p)
  {
    uint64_t v20 = __p;
    operator delete(__p);
  }
  Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob(v11, (uint64_t *)a3, a4, a5);
}

void sub_192AF781C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (v19) {
    nitro::nitro_function::nitro_function(v19);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::ANECompilerEngine::pool_kernel::~pool_kernel(Espresso::ANECompilerEngine::pool_kernel *this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANECompilerEngine::pool_kernel *)((char *)this + 432));
  Espresso::generic_pool_kernel::~generic_pool_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t vars8;

  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANECompilerEngine::pool_kernel *)((char *)this + 432));

  Espresso::generic_pool_kernel::~generic_pool_kernel(this);
}

void non-virtual thunk to'Espresso::ANECompilerEngine::mix_pool3d_kernel::~mix_pool3d_kernel(Espresso::ANECompilerEngine::mix_pool3d_kernel *this)
{
  uint64_t v1 = (Espresso::ANECompilerEngine::mix_pool3d_kernel *)((char *)this - 344);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);

  JUMPOUT(0x192FF16B0);
}

{
  Espresso::base_kernel *v1;
  uint64_t vars8;

  uint64_t v1 = (Espresso::ANECompilerEngine::mix_pool3d_kernel *)((char *)this - 344);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);

  Espresso::base_kernel::~base_kernel(v1);
}

void non-virtual thunk to'Espresso::ANECompilerEngine::mix_pool3d_kernel::compile(Espresso::ANECompilerEngine::mix_pool3d_kernel *this, Espresso::ANECompilerEngine::compiler *a2, void **a3)
{
}

void Espresso::ANECompilerEngine::mix_pool3d_kernel::compile(Espresso::ANECompilerEngine::mix_pool3d_kernel *this, Espresso::ANECompilerEngine::compiler *a2, void **a3)
{
  uint64_t v183 = *MEMORY[0x1E4F143B8];
  id v4 = (std::__shared_weak_count *)*((void *)a2 + 2);
  if (!v4 || (v137 = std::__shared_weak_count::lock(v4)) == 0 || (uint64_t v6 = *((void *)a2 + 1)) == 0) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Inconsistent state: null network");
  }
  if (!*(void *)(v6 + 576)) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Inconsistent state: blob_storage");
  }
  uint64_t v7 = v6 + 136;
  v171[0] = a3[6];
  int v8 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v6 + 136, (unsigned __int8 *)v171[0], (long long **)v171);
  int v10 = (const void *)*((void *)v8 + 5);
  unint64_t v9 = (std::__shared_weak_count *)*((void *)v8 + 6);
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v136 = v9;
  v171[0] = a3;
  uint64_t v11 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7, (unsigned __int8 *)a3, (long long **)v171);
  unsigned int v12 = (float *)*((void *)v11 + 5);
  uint64_t v13 = (std::__shared_weak_count *)*((void *)v11 + 6);
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v10)
  {
    double v15 = v14;
    uint64_t v129 = 0;
    if (v136 && v14)
    {
      atomic_fetch_add_explicit(&v136->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v129 = v136;
    }
    if (v12) {
      goto LABEL_14;
    }
LABEL_18:
    uint64_t v17 = 0;
    uint64_t v128 = 0;
    goto LABEL_19;
  }
  double v15 = 0;
  uint64_t v129 = 0;
  if (!v12) {
    goto LABEL_18;
  }
LABEL_14:
  uint64_t v17 = v16;
  uint64_t v128 = 0;
  if (v13 && v16)
  {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v128 = v13;
  }
LABEL_19:
  uint64_t v139 = v13;
  unsigned __int8 v140 = objc_opt_new();
  uint64_t v18 = [NSNumber numberWithInt:*((unsigned int *)this + 71)];
  [v140 setObject:v18 forKeyedSubscript:@"KernelWidth"];

  long long v19 = [NSNumber numberWithInt:*((unsigned int *)this + 72)];
  [v140 setObject:v19 forKeyedSubscript:@"KernelHeight"];

  uint64_t v20 = [NSNumber numberWithInt:*((unsigned int *)this + 73)];
  [v140 setObject:v20 forKeyedSubscript:@"KernelDepth"];
  int v135 = a2;
  unsigned int v21 = v17 + 160;
  unint64_t v22 = (unsigned int *)((char *)this + 280);

  uint64_t v23 = *((unsigned int *)v148[0] + 1);
  uint64_t v24 = *((unsigned int *)v148[0] + 2);
  uint64_t v25 = [NSNumber numberWithInt:*(unsigned int *)v148[0]];
  v159[0] = v25;
  long long v26 = [NSNumber numberWithInt:v23];
  v159[1] = v26;
  long long v27 = [NSNumber numberWithInt:v24];
  v159[2] = v27;
  long long v28 = [MEMORY[0x1E4F1C978] arrayWithObjects:v159 count:3];
  [v140 setObject:v28 forKeyedSubscript:@"Step"];

  if (*((_DWORD *)this + 78) == 2 && !*((_WORD *)this + 158)) {
  int v127 = *((_WORD *)this + 158) = 1;
  }
  [v140 setObject:v127 forKeyedSubscript:@"Type"];
  uint64_t v29 = v146;
  obuint64_t j = v144;
  int32x2_t v130 = v147;
  if (v145
    || (v30.i64[0] = v144,
        v30.u64[1] = (unint64_t)vrev64_s32(v147),
        (vaddvq_s32((int32x4_t)vbicq_s8((int8x16_t)xmmword_192DCA330, (int8x16_t)vceqzq_s32(v30))) & 0xF) != 0)
    || v146)
  {
    unsigned int v31 = objc_msgSend(NSNumber, "numberWithInt:");
    [v140 setObject:v31 forKeyedSubscript:@"PadTop"];

    int v32 = [NSNumber numberWithInt:v29];
    [v140 setObject:v32 forKeyedSubscript:@"PadBot"];

    uint64_t v33 = [NSNumber numberWithInt:obj];
    [v140 setObject:v33 forKeyedSubscript:@"PadLeft"];

    int v34 = [NSNumber numberWithInt:HIDWORD(obj)];
    [v140 setObject:v34 forKeyedSubscript:@"PadRight"];

    int v35 = [NSNumber numberWithInt:v130.u32[1]];
    [v140 setObject:v35 forKeyedSubscript:@"PadFront"];

    uint64_t v36 = [NSNumber numberWithInt:v130.u32[0]];
    [v140 setObject:v36 forKeyedSubscript:@"PadBack"];
  }
  if (!*v22)
  {
    uint64_t v37 = [NSNumber numberWithBool:*((_DWORD *)this + 77) != 0];
    [v140 setObject:v37 forKeyedSubscript:@"AverageCountExcludePadding"];
  }
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t(v171, a3);
  std::string v141 = 0;
  std::string v142 = 0;
  unint64_t v143 = 0;
  *(void *)long long buf = &v141;
  buf[8] = 0;
  std::string v141 = (std::string *)operator new(0x90uLL);
  std::string v142 = v141;
  unint64_t v143 = (unint64_t)&v141[6];
  std::string v142 = (std::string *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>,Espresso::ANECompilerEngine::compiler::unit_t const*,Espresso::ANECompilerEngine::compiler::unit_t const*,Espresso::ANECompilerEngine::compiler::unit_t*>((uint64_t)&v143, (uint64_t)v171, (uint64_t)&__str, (uint64_t)v141);

  if (v176 < 0) {
    operator delete(__p);
  }
  *(void *)long long buf = v174;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(void *)long long buf = v173;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (v172 < 0) {
    operator delete(v171[0]);
  }
  std::string::pointer data = v141[5].__r_.__value_.__l.__data_;
  v141[5].__r_.__value_.__r.__words[0] = (std::string::size_type)@"Pooling";

  objc_storeStrong((id *)&v141[5].__r_.__value_.__l.__size_, v140);
  atomic_fetch_add_explicit(&v137->__shared_owners_, 1uLL, memory_order_relaxed);
  if (v139) {
    atomic_fetch_add_explicit(&v139->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::ANECompilerEngine::compiler::layer_graph_info_t::layer_graph_info_t((Espresso::ANECompilerEngine::compiler::layer_graph_info_t *)v171);
  id v179 = 0;
  id v178 = 0;
  uint64_t v180 = 0x100000000;
  uint64_t v39 = *((void *)this + 51);
  int v40 = (std::__shared_weak_count *)*((void *)this + 52);
  if (v40) {
    atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v39 && !*(unsigned char *)((*(uint64_t (**)(void))(*((void *)this + 43) + 104))() + 40))
  {
    float v41 = v12[28];
    v152[0] = v39;
    v152[1] = v40;
    if (v40) {
      atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    BOOL v42 = (std::__shared_weak_count *)*((void *)this + 54);
    v151[0] = *((void *)this + 53);
    v151[1] = (uint64_t)v42;
    if (v42) {
      atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    Espresso::ane_style_post_scale_bias((uint64_t)v152, v151, (uint64_t)&v153, v41);
    if (v42) {
      nitro::nitro_function::nitro_function(v42);
    }
    if (v40) {
      nitro::nitro_function::nitro_function(v40);
    }
    uint64_t v43 = *(unsigned int *)(v39 + 8);
    std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v149, 2 * v43, 1, 1, 1);
    uint64_t v44 = (int)v43;
    uint64_t v45 = *((void *)this + 53);
    int v46 = v43;
    if (v45) {
      int v46 = *(_DWORD *)(v45 + 8);
    }
    if (!*((unsigned char *)v135 + 384))
    {
      Espresso::blob<unsigned char,1>::make(&__str, 4 * v43);
      uint64_t v98 = *(int **)(__str.__r_.__value_.__r.__words[0] + 16);
      if ((int)v43 >= 1)
      {
        for (uint64_t i = 0; i != v43; ++i)
        {
          float v100 = *(float *)(*(void *)(v39 + 16) + i * 4);
          *(float *)&int v101 = ldexp(1.0, -v157) * v100;
          v98[i] = v101;
        }
      }
      if (v43)
      {
        long long v102 = *(_WORD **)(v149 + 16);
        do
        {
          int v103 = *v98++;
          _S0 = v103;
          __asm { FCVT            H0, S0 }
          *v102++ = _S0;
          --v44;
        }
        while (v44);
      }
      if (*((void *)this + 53))
      {
        Espresso::blob<unsigned char,1>::make(buf, 4 * v46);
        uint64_t v106 = *(void *)buf;
        Espresso::blob<unsigned char,1>::make(buf, 2 * v46);
        uint64_t objb = *(void *)buf;
        int v107 = *(int **)(v106 + 16);
        if (v46 >= 1)
        {
          for (uint64_t j = 0; j != v46; ++j)
          {
            if ((int)v43 - 1 >= (int)j) {
              int v109 = j;
            }
            else {
              int v109 = v43 - 1;
            }
            *(float *)&int v110 = *(float *)(*(void *)(v155 + 16) + 4 * j)
                            * *(float *)(*(void *)(v153 + 16) + 4 * v109);
            v107[j] = v110;
            int v111 = v158;
            unsigned int v112 = v157;
            *(float *)&int v113 = ldexp(1.0, v158 - v157) * *(float *)&v110;
            v107[j] = v113;
            float v116 = ldexp(1.0, v112 - v111) * *(float *)&v113;
            if (v116 < -127.0 || v116 > 255.0)
            {
              float v118 = Espresso::espresso_os_log_subsystem(v114, v115);
              if (os_log_type_enabled(v118, OS_LOG_TYPE_ERROR))
              {
                double v119 = *(float *)&v107[j];
                *(_DWORD *)long long buf = 134218752;
                *(double *)&uint8_t buf[4] = v116;
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = v158;
                __int16 v161 = 1024;
                int v162 = v157;
                __int16 v163 = 2048;
                double v164 = v119;
                _os_log_error_impl(&dword_1920CB000, v118, OS_LOG_TYPE_ERROR, "[ANEC::add_ane_scale_bias_unit] Shifted bias overflowing shifted_b=%f acc_bias_shift=%d post_right_shift=%d anebias=%f", buf, 0x22u);
              }
            }
          }
        }
        if (v46)
        {
          uint64_t v120 = v46;
          double v121 = *(_WORD **)(objb + 16);
          do
          {
            int v122 = *v107++;
            _S0 = v122;
            __asm { FCVT            H0, S0 }
            *v121++ = _S0;
            --v120;
          }
          while (v120);
        }
      }
      exception = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
      Espresso::not_implemented_error::not_implemented_error(exception);
    }
    LODWORD(v124) = v158;
    uint64_t v47 = v149;
    if (v43)
    {
      int v48 = *(int **)(v153 + 16);
      BOOL v49 = *(_WORD **)(v149 + 16);
      do
      {
        int v50 = *v48++;
        _S0 = v50;
        __asm { FCVT            H0, S0 }
        *v49++ = _S0;
        --v44;
      }
      while (v44);
    }
    if (v45)
    {
      std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(buf, 2 * v46, 1, 1, 1);
      uint64_t v56 = *(void *)buf;
      uint64_t v131 = *(std::__shared_weak_count **)&buf[8];
      if (v46)
      {
        uint64_t v57 = v46;
        uint64_t v58 = *(_WORD **)(*(void *)buf + 16);
        int v59 = *(int **)(v155 + 16);
        do
        {
          int v60 = *v59++;
          _S0 = v60;
          __asm { FCVT            H0, S0 }
          *v58++ = _S0;
          --v57;
        }
        while (v57);
      }
    }
    else
    {
      uint64_t v131 = 0;
      uint64_t v56 = 0;
    }
    HIDWORD(v124) = *((unsigned __int8 *)v135 + 552);
    int v62 = (Espresso::ANECompilerEngine::compiler *)((char *)v135 + 128);
    long long v63 = v150;
    if (v150) {
      atomic_fetch_add_explicit(&v150->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v64 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v62, *(const unsigned __int8 **)(v47 + 16), *(int *)(v47 + 8));
    if (v63) {
      nitro::nitro_function::nitro_function(v63);
    }
    obja = objc_opt_new();
    if (*((unsigned char *)v135 + 121))
    {
      id v65 = (id)v141[5].__r_.__value_.__l.__size_;

      obja = v65;
    }
    id v66 = objc_opt_new();
    unint64_t v67 = [NSNumber numberWithInt:v43];
    [v66 setObject:v67 forKeyedSubscript:@"ScaleCount"];

    long long v68 = [NSNumber numberWithInt:v64];
    [v66 setObject:v68 forKeyedSubscript:@"ScaleOffset"];

    int v69 = NSNumber;
    if (HIDWORD(v124)) {
      uint64_t weights_file_index = 0;
    }
    else {
    int v71 = objc_msgSend(v69, "numberWithUnsignedLong:", weights_file_index, v124);
    }
    [v66 setObject:v71 forKeyedSubscript:@"ScaleIndex"];

    [v66 setObject:@"Float16" forKeyedSubscript:@"ScaleType"];
    int v72 = [NSNumber numberWithInt:v157];
    [obja setObject:v72 forKeyedSubscript:@"ScaleShift"];

    if (*((void *)this + 53))
    {
      if (v131) {
        atomic_fetch_add_explicit(&v131->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v73 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v62, *(const unsigned __int8 **)(v56 + 16), *(int *)(v56 + 8));
      if (v131) {
        nitro::nitro_function::nitro_function(v131);
      }
      uint64_t v74 = [NSNumber numberWithInt:*(unsigned int *)(*((void *)this + 53) + 8)];
      [v66 setObject:v74 forKeyedSubscript:@"BiasCount"];

      long long v75 = [NSNumber numberWithInt:v73];
      [v66 setObject:v75 forKeyedSubscript:@"BiasOffset"];

      BOOL v76 = NSNumber;
      if (v126) {
        uint64_t v77 = 0;
      }
      else {
      char v78 = [v76 numberWithUnsignedLong:v77];
      }
      [v66 setObject:v78 forKeyedSubscript:@"BiasIndex"];

      [v66 setObject:@"Float16" forKeyedSubscript:@"BiasType"];
      BOOL v79 = [NSNumber numberWithInt:v125];
      [obja setObject:v79 forKeyedSubscript:@"BiasShift"];
    }
    [obja setObject:v66 forKeyedSubscript:@"BiasScaleGroupData"];
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)buf, a3);
    int v80 = v142;
    if (v142 == v141) {
      goto LABEL_100;
    }
    BOOL v81 = v142 - 6;
    uint64_t v82 = HIBYTE(v142[-6].__r_.__value_.__r.__words[2]);
    char v83 = v82;
    std::string::size_type size = v142[-6].__r_.__value_.__l.__size_;
    if ((v82 & 0x80u) == 0) {
      std::string::size_type v85 = HIBYTE(v142[-6].__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v85 = v142[-6].__r_.__value_.__l.__size_;
    }
    uint64_t v86 = HIBYTE(v162);
    if (v162 < 0) {
      uint64_t v86 = *(void *)&buf[8];
    }
    if (v85 != v86) {
      goto LABEL_94;
    }
    if (v162 >= 0) {
      uint64_t v87 = buf;
    }
    else {
      uint64_t v87 = *(unsigned __int8 **)buf;
    }
    if ((char)v82 < 0)
    {
      char v89 = (const std::string::value_type *)v81->__r_.__value_.__r.__words[0];
      if (memcmp(v81->__r_.__value_.__l.__data_, v87, v142[-6].__r_.__value_.__l.__size_)) {
        goto LABEL_97;
      }
    }
    else if ((_BYTE)v82)
    {
      std::string::size_type v88 = v142 - 6;
      while (v88->__r_.__value_.__s.__data_[0] == *v87)
      {
        std::string::size_type v88 = (std::string *)((char *)v88 + 1);
        ++v87;
        if (!--v82) {
          goto LABEL_93;
        }
      }
      goto LABEL_94;
    }
LABEL_93:
    std::string::append(v80 - 6, "__@pre_scale_bias");
    char v83 = HIBYTE(v80[-6].__r_.__value_.__r.__words[2]);
LABEL_94:
    if ((v83 & 0x80) == 0)
    {
      long long v90 = *(_OWORD *)&v81->__r_.__value_.__l.__data_;
      __str.__r_.__value_.__r.__words[2] = v80[-6].__r_.__value_.__r.__words[2];
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v90;
      goto LABEL_98;
    }
    char v89 = v80[-6].__r_.__value_.__l.__data_;
    std::string::size_type size = v80[-6].__r_.__value_.__l.__size_;
LABEL_97:
    std::string::__init_copy_ctor_external(&__str, v89, size);
LABEL_98:
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v165, &__str, &v182, 1uLL);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
LABEL_100:
    int v91 = v169;
    uint64_t v169 = @"GOC";

    objc_storeStrong(&v170, obja);
    if (!*((unsigned char *)v135 + 121))
    {
      BOOL v92 = v142;
      if ((unint64_t)v142 >= v143)
      {
        unint64_t v94 = 0x8E38E38E38E38E39 * (((char *)v142 - (char *)v141) >> 4);
        if (v94 + 1 > 0x1C71C71C71C71C7) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v95 = 0x1C71C71C71C71C72 * ((uint64_t)(v143 - (void)v141) >> 4);
        if (v95 <= v94 + 1) {
          unint64_t v95 = v94 + 1;
        }
        if (0x8E38E38E38E38E39 * ((uint64_t)(v143 - (void)v141) >> 4) >= 0xE38E38E38E38E3) {
          unint64_t v96 = 0x1C71C71C71C71C7;
        }
        else {
          unint64_t v96 = v95;
        }
        *((void *)&v182 + 1) = &v143;
        if (v96) {
          unint64_t v96 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v96);
        }
        else {
          uint64_t v97 = 0;
        }
        __str.__r_.__value_.__r.__words[0] = v96;
        __str.__r_.__value_.__l.__size_ = v96 + 144 * v94;
        __str.__r_.__value_.__r.__words[2] = __str.__r_.__value_.__l.__size_;
        *(void *)&long long v182 = v96 + 144 * v97;
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)__str.__r_.__value_.__l.__size_, (uint64_t)buf);
        __str.__r_.__value_.__r.__words[2] += 144;
        std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer((uint64_t *)&v141, &__str);
        int v93 = v142;
        std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&__str);
      }
      else
      {
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v142, (uint64_t)buf);
        int v93 = v92 + 6;
      }
      std::string v142 = v93;
    }

    if (v167 < 0) {
      operator delete(v166);
    }
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v165;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v163;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
    if (SHIBYTE(v162) < 0) {
      operator delete(*(void **)buf);
    }

    if (v131) {
      nitro::nitro_function::nitro_function(v131);
    }
    if (v150) {
      nitro::nitro_function::nitro_function(v150);
    }
    if (v156) {
      nitro::nitro_function::nitro_function(v156);
    }
    if (v154) {
      nitro::nitro_function::nitro_function(v154);
    }
  }
  if (v40) {
    nitro::nitro_function::nitro_function(v40);
  }

  if (v176 < 0) {
    operator delete(__p);
  }
  *(void *)long long buf = v174;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(void *)long long buf = v173;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (v172 < 0) {
    operator delete(v171[0]);
  }
  if (v139) {
    nitro::nitro_function::nitro_function(v139);
  }
  nitro::nitro_function::nitro_function(v137);
  (*(void (**)(char *, Espresso::ANECompilerEngine::compiler *, std::string **))(*((void *)this + 43) + 32))((char *)this + 344, v135, &v141);
  v171[0] = &v141;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)v171);

  if (v148[0])
  {
    v148[1] = v148[0];
    operator delete(v148[0]);
  }

  if (v128) {
    nitro::nitro_function::nitro_function(v128);
  }
  if (v129) {
    nitro::nitro_function::nitro_function(v129);
  }
  if (v139) {
    nitro::nitro_function::nitro_function(v139);
  }
  if (v136) {
    nitro::nitro_function::nitro_function(v136);
  }
  nitro::nitro_function::nitro_function(v137);
}

void sub_192AF8A24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, std::__shared_weak_count *a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19, std::__shared_weak_count *a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24,void *a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49)
{
  if (a24) {
    nitro::nitro_function::nitro_function(a24);
  }
  nitro::nitro_function::nitro_function(a20);
  a49 = (uint64_t)&a26;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&a49);

  if (__p)
  {
    a33 = (uint64_t)__p;
    operator delete(__p);
  }

  if (a11) {
    nitro::nitro_function::nitro_function(a11);
  }
  if (a12) {
    nitro::nitro_function::nitro_function(a12);
  }
  if (a24) {
    nitro::nitro_function::nitro_function(a24);
  }
  if (a19) {
    nitro::nitro_function::nitro_function(a19);
  }
  nitro::nitro_function::nitro_function(a20);
  _Unwind_Resume(a1);
}

BOOL Espresso::ANECompilerEngine::mix_pool3d_kernel::is_valid_for_engine(uint64_t a1, int64x2_t **a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 48);
  uint64_t v7 = *(std::__shared_weak_count **)(v6 + 80);
  if (v7)
  {
    int v8 = std::__shared_weak_count::lock(v7);
    if (v8) {
      uint64_t v9 = *(void *)(v6 + 72);
    }
    else {
      uint64_t v9 = 0;
    }
  }
  else
  {
    uint64_t v9 = 0;
    int v8 = 0;
  }
  Espresso::ANECompilerEngine::ane_arch_allow_network_override(v9 + 472);
  int v10 = (Espresso::ANECompilerEngine *)objc_claimAutoreleasedReturnValue();
  if (Espresso::ANECompilerEngine::is_mix(v10, v11))
  {
    unsigned int v12 = *a2;
    uint64_t v13 = a2[1];
    v61[0] = v12;
    v61[1] = v13;
    if (v13) {
      atomic_fetch_add_explicit(&v13->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v53, "pool3d_kernel: not supported on requested architecture.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v57, (long long *)v53, a3, 0);
    Espresso::emit_kernel_validation_warning(v61, (Espresso::base_kernel::validate_for_engine_warning_t *)&v57);
LABEL_33:
    if (v60) {
      nitro::nitro_function::nitro_function(v60);
    }
    v47[0] = (void **)v59;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v47);
    v47[0] = (void **)v58;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v47);
    if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v57.__r_.__value_.__l.__data_);
    }
    if ((v54 & 0x80000000) == 0) {
      goto LABEL_40;
    }
    uint64_t v24 = v53[0];
    goto LABEL_39;
  }
  if (!*(unsigned char *)(v9 + 1281))
  {
    uint64_t v23 = *a2;
    uint64_t v13 = a2[1];
    v56[0] = v23;
    v56[1] = v13;
    if (v13) {
      atomic_fetch_add_explicit(&v13->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v53, "pool3d_kernel: has_3d_operations is not set");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v57, (long long *)v53, a3, 0);
    Espresso::emit_kernel_validation_warning(v56, (Espresso::base_kernel::validate_for_engine_warning_t *)&v57);
    goto LABEL_33;
  }
  uint64_t v14 = *(void *)a3;
  if (*(void *)(a3 + 8) - *(void *)a3 != 64 || *(void *)(a3 + 32) - *(void *)(a3 + 24) != 64)
  {
    unint64_t v22 = *a2;
    uint64_t v13 = a2[1];
    v55[0] = v22;
    v55[1] = v13;
    if (v13) {
      atomic_fetch_add_explicit(&v13->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v53, "pool3d_kernel: expect only one input / output");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v57, (long long *)v53, a3, 0);
    Espresso::emit_kernel_validation_warning(v55, (Espresso::base_kernel::validate_for_engine_warning_t *)&v57);
    goto LABEL_33;
  }
  if (v8)
  {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v14 = *(void *)a3;
  }
  long long v15 = *(_OWORD *)(v14 + 16);
  uint64_t v16 = *(void *)(v14 + 32);
  v48[0] = *(_OWORD *)v14;
  v48[1] = v15;
  uint64_t v49 = v16;
  std::string __p = 0;
  unint64_t v51 = 0;
  uint64_t v52 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *(const void **)(v14 + 40), *(void *)(v14 + 48), (uint64_t)(*(void *)(v14 + 48) - *(void *)(v14 + 40)) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v53, (const Espresso::net *)v9, (const Espresso::layer_shape *)v48, 1);
  if (__p)
  {
    unint64_t v51 = __p;
    operator delete(__p);
  }
  if (v8)
  {
    nitro::nitro_function::nitro_function(v8);
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v17 = *(void *)(a3 + 24);
  uint64_t v18 = *(void *)(v17 + 32);
  long long v19 = *(_OWORD *)(v17 + 16);
  v42[0] = *(_OWORD *)v17;
  v42[1] = v19;
  uint64_t v43 = v18;
  uint64_t v44 = 0;
  uint64_t v45 = 0;
  uint64_t v46 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v44, *(const void **)(v17 + 40), *(void *)(v17 + 48), (uint64_t)(*(void *)(v17 + 48) - *(void *)(v17 + 40)) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v47, (const Espresso::net *)v9, (const Espresso::layer_shape *)v42, 1);
  if (v44)
  {
    uint64_t v45 = v44;
    operator delete(v44);
  }
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  if (!Espresso::ANECompilerEngine::blob_shape_ane_compatible(v53, v10))
  {
    long long v27 = *a2;
    uint64_t v13 = a2[1];
    v41[0] = v27;
    v41[1] = v13;
    if (v13) {
      atomic_fetch_add_explicit(&v13->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(&v34, "pool3d_kernel: Input tensor extents exceed ANE limits");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v57, &v34, a3, 0);
    Espresso::emit_kernel_validation_warning(v41, (Espresso::base_kernel::validate_for_engine_warning_t *)&v57);
    if (v60) {
      nitro::nitro_function::nitro_function(v60);
    }
    v39.__r_.__value_.__r.__words[0] = (std::string::size_type)v59;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v39);
    v39.__r_.__value_.__r.__words[0] = (std::string::size_type)v58;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v39);
    if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v57.__r_.__value_.__l.__data_);
    }
    goto LABEL_55;
  }
  if (!Espresso::ANECompilerEngine::blob_shape_ane_compatible(v47, v10))
  {
    long long v28 = *a2;
    uint64_t v13 = a2[1];
    v40[0] = v28;
    v40[1] = v13;
    if (v13) {
      atomic_fetch_add_explicit(&v13->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(&v34, "pool3d_kernel: Output tensor extents exceed ANE limits");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v57, &v34, a3, 0);
    Espresso::emit_kernel_validation_warning(v40, (Espresso::base_kernel::validate_for_engine_warning_t *)&v57);
    Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((Espresso::base_kernel::validate_for_engine_warning_t *)&v57);
LABEL_55:
    if ((v35 & 0x80000000) == 0) {
      goto LABEL_40;
    }
    uint64_t v24 = (void *)v34;
LABEL_39:
    operator delete(v24);
LABEL_40:
    if (v13) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v13);
    }
    BOOL v25 = 0;
    goto LABEL_43;
  }
  uint64_t v20 = *(long long **)(**(void **)(a3 + 48) + 224 * *(void *)(a3 + 72) + 136);
  if (*((char *)v20 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v39, *(const std::string::value_type **)v20, *((void *)v20 + 1));
  }
  else
  {
    long long v21 = *v20;
    v39.__r_.__value_.__r.__words[2] = *((void *)v20 + 2);
    *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v21;
  }
  unsigned int v29 = *(_DWORD *)(a3 + 64);
  if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(void **)(v9 + 360), &v39))
  {
    *(void *)&long long v34 = &v39;
    int32x4_t v30 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v9 + 352), &v39, (uint64_t)&std::piecewise_construct, (long long **)&v34);
    *(_OWORD *)&v57.__r_.__value_.__l.__data_ = *(_OWORD *)(v30 + 56);
    v58[0] = 0;
    v58[1] = 0;
    v57.__r_.__value_.__r.__words[2] = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v57.__r_.__value_.__r.__words[2], *((const void **)v30 + 9), *((void *)v30 + 10), (uint64_t)(*((void *)v30 + 10) - *((void *)v30 + 9)) >> 2);
    unsigned int v29 = LODWORD(v57.__r_.__value_.__r.__words[1]) == -1 ? 1 : LODWORD(v57.__r_.__value_.__r.__words[1]);
    if (v57.__r_.__value_.__r.__words[2])
    {
      v58[0] = *((void *)&v57.__r_.__value_.__l + 2);
      operator delete((void *)v57.__r_.__value_.__r.__words[2]);
    }
  }
  Espresso::ANECompilerEngine::ane_kernel::get_ane_validator((Espresso::ANECompilerEngine::ane_kernel *)v37, (NSString *)(a1 + 344), v10);
  BOOL v25 = (_BYTE)v34 != 0;
  if (!(_BYTE)v34)
  {
    unsigned int v31 = *a2;
    int v32 = a2[1];
    v33[0] = v31;
    v33[1] = v32;
    if (v32) {
      atomic_fetch_add_explicit(&v32->i64[1], 1uLL, memory_order_relaxed);
    }
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v57, (long long *)((char *)&v34 + 8), a3, 0);
    Espresso::emit_kernel_validation_warning(v33, (Espresso::base_kernel::validate_for_engine_warning_t *)&v57);
    Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((Espresso::base_kernel::validate_for_engine_warning_t *)&v57);
    if (v32) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v32);
    }
  }
  if (v36 < 0) {
    operator delete(*((void **)&v34 + 1));
  }
  if (v38) {
    nitro::nitro_function::nitro_function(v38);
  }
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v39.__r_.__value_.__l.__data_);
  }
LABEL_43:

  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  return v25;
}

void sub_192AF934C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *__p, int a13, __int16 a14, char a15, char a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,std::__shared_weak_count *a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((Espresso::base_kernel::validate_for_engine_warning_t *)(v62 - 208));
  if (v61) {
    nitro::nitro_function::nitro_function(v61);
  }
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a22) {
    nitro::nitro_function::nitro_function(a22);
  }
  if (a28 < 0) {
    operator delete(a23);
  }

  if (v59) {
    nitro::nitro_function::nitro_function(v59);
  }
  _Unwind_Resume(a1);
}

void sub_192AF949C()
{
  if (!v0) {
    JUMPOUT(0x192AF9494);
  }
  JUMPOUT(0x192AF948CLL);
}

void Espresso::ANECompilerEngine::mix_pool3d_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
}

void Espresso::ANECompilerEngine::mix_pool3d_kernel::~mix_pool3d_kernel(Espresso::ANECompilerEngine::mix_pool3d_kernel *this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANECompilerEngine::mix_pool3d_kernel *)((char *)this + 344));
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t vars8;

  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANECompilerEngine::mix_pool3d_kernel *)((char *)this + 344));

  Espresso::base_kernel::~base_kernel(this);
}

void non-virtual thunk to'Espresso::ANECompilerEngine::mix_pool_kernel::~mix_pool_kernel(Espresso::ANECompilerEngine::mix_pool_kernel *this)
{
  uint64_t v1 = (Espresso::ANECompilerEngine::mix_pool_kernel *)((char *)this - 432);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::generic_pool_kernel::~generic_pool_kernel(v1);

  JUMPOUT(0x192FF16B0);
}

{
  Espresso::generic_pool_kernel *v1;
  uint64_t vars8;

  uint64_t v1 = (Espresso::ANECompilerEngine::mix_pool_kernel *)((char *)this - 432);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);

  Espresso::generic_pool_kernel::~generic_pool_kernel(v1);
}

void non-virtual thunk to'Espresso::ANECompilerEngine::mix_pool_kernel::compile(Espresso::ANECompilerEngine::mix_pool_kernel *this, Espresso::ANECompilerEngine::compiler *a2, void **a3)
{
}

void Espresso::ANECompilerEngine::mix_pool_kernel::compile(Espresso::ANECompilerEngine::mix_pool_kernel *this, Espresso::ANECompilerEngine::compiler *a2, void **a3)
{
  v95[2] = *MEMORY[0x1E4F143B8];
  id v4 = (std::__shared_weak_count *)*((void *)a2 + 2);
  if (!v4 || (uint64_t v7 = std::__shared_weak_count::lock(v4)) == 0 || (v8 = *((void *)a2 + 1)) == 0) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Inconsistent state: null network");
  }
  if (!*(void *)(v8 + 576)) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Inconsistent state: blob_storage");
  }
  v80[0] = a3[6];
  uint64_t v9 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8 + 136, (unsigned __int8 *)v80[0], (long long **)v80);
  uint64_t v11 = (_DWORD *)*((void *)v9 + 5);
  int v10 = (std::__shared_weak_count *)*((void *)v9 + 6);
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v80[0] = a3;
  unsigned int v12 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8 + 136, (unsigned __int8 *)a3, (long long **)v80);
  uint64_t v14 = (const void *)*((void *)v12 + 5);
  uint64_t v13 = (std::__shared_weak_count *)*((void *)v12 + 6);
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::ANECompilerEngine::ane_arch_allow_network_override(v8 + 472);
  long long v15 = (Espresso::ANECompilerEngine *)objc_claimAutoreleasedReturnValue();
  if (Espresso::ANECompilerEngine::is_mix(v15, v16)) {
    goto LABEL_10;
  }
  if (v11) {
  uint64_t v18 = v14
  }
  if (!*((_DWORD *)this + 90)
    && (*((_DWORD *)this + 77) != v11[44] || *((_DWORD *)this + 78) != v11[43] || v18[43] != 1 || v18[44] != 1))
  {
LABEL_10:
    Espresso::ANECompilerEngine::pool_kernel::compile(this, a2, a3);
    goto LABEL_123;
  }
  unsigned int v19 = *((_DWORD *)this + 76);
  if (v19 < 2)
  {
    uint64_t v20 = objc_opt_new();
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t(v80, a3);
    int v91 = 0;
    BOOL v92 = 0;
    v93[0] = 0;
    long long v21 = v89;
    char v89 = @"Reduction";

    int v22 = *((_DWORD *)this + 76);
    if (v22 == 1)
    {
      uint64_t v23 = @"Max";
    }
    else
    {
      if (v22)
      {
LABEL_31:
        v95[0] = @"Width";
        v95[1] = @"Height";
        long long v26 = [MEMORY[0x1E4F1C978] arrayWithObjects:v95 count:2];
        [v20 setObject:v26 forKeyedSubscript:@"Dimension"];

        objc_storeStrong(v90, v20);
        long long v27 = v92;
        if ((unint64_t)v92 >= v93[0])
        {
          unint64_t v29 = 0x8E38E38E38E38E39 * (((char *)v92 - (char *)v91) >> 4);
          if (v29 + 1 > 0x1C71C71C71C71C7) {
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v30 = 0x1C71C71C71C71C72 * ((uint64_t)(v93[0] - (void)v91) >> 4);
          if (v30 <= v29 + 1) {
            unint64_t v30 = v29 + 1;
          }
          if (0x8E38E38E38E38E39 * ((uint64_t)(v93[0] - (void)v91) >> 4) >= 0xE38E38E38E38E3) {
            unint64_t v31 = 0x1C71C71C71C71C7;
          }
          else {
            unint64_t v31 = v30;
          }
          int v69 = v93;
          if (v31) {
            unint64_t v31 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v31);
          }
          else {
            uint64_t v32 = 0;
          }
          id v65 = (void *)v31;
          id v66 = (std::string *)(v31 + 144 * v29);
          unint64_t v67 = v66;
          unint64_t v68 = v31 + 144 * v32;
          std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v66, (uint64_t)v80);
          unint64_t v67 = v66 + 6;
          std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer((uint64_t *)&v91, &v65);
          long long v28 = v92;
          std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&v65);
        }
        else
        {
          std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v92, (uint64_t)v80);
          long long v28 = v27 + 6;
        }
        BOOL v92 = v28;
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
        v79[0] = v14;
        v79[1] = v13;
        if (v13) {
          atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        Espresso::ANECompilerEngine::add_ane_scale_bias_unit<Espresso::ANECompilerEngine::mix_pool_kernel *>(this, a2, a3, (uint64_t)v79, (uint64_t *)&v91);
        if (v13) {
          nitro::nitro_function::nitro_function(v13);
        }
        nitro::nitro_function::nitro_function(v7);
        (*(void (**)(char *, Espresso::ANECompilerEngine::compiler *, void ***))(*((void *)this + 54) + 32))((char *)this + 432, a2, &v91);
        id v65 = &v91;
        std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&v65);

        if (v87 < 0) {
          operator delete(__p);
        }
        id v65 = &v83;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v65);
        id v65 = v82;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v65);
        if (v81 < 0) {
          operator delete(v80[0]);
        }

        goto LABEL_123;
      }
      uint64_t v23 = @"Avg";
    }
    [v20 setObject:v23 forKeyedSubscript:@"Type"];
    goto LABEL_31;
  }
  if (v19 == 2)
  {
    uint64_t v76 = 0;
    uint64_t v77 = 0;
    unint64_t v78 = 0;
    if (Espresso::ANECompilerEngine::prefer_ne(v15, v17))
    {
      uint64_t v24 = objc_opt_new();
      Espresso::ANECompilerEngine::compiler::unit_t::unit_t(v80, a3);
      BOOL v25 = v89;
      char v89 = @"ElementWise";

      [v24 setObject:@"Square" forKeyedSubscript:@"Type"];
      objc_storeStrong(v90, v24);
      unint64_t v36 = 0x8E38E38E38E38E39 * (((uint64_t)v77 - v76) >> 4);
      if (v36 + 1 > 0x1C71C71C71C71C7) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v37 = 0x1C71C71C71C71C72 * ((uint64_t)(v78 - v76) >> 4);
      if (v37 <= v36 + 1) {
        unint64_t v37 = v36 + 1;
      }
      if (0x8E38E38E38E38E39 * ((uint64_t)(v78 - v76) >> 4) >= 0xE38E38E38E38E3) {
        unint64_t v38 = 0x1C71C71C71C71C7;
      }
      else {
        unint64_t v38 = v37;
      }
      int v69 = &v78;
      if (v38) {
        unint64_t v38 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v38);
      }
      else {
        uint64_t v39 = 0;
      }
      id v65 = (void *)v38;
      id v66 = (std::string *)(v38 + 16 * (((uint64_t)v77 - v76) >> 4));
      unint64_t v67 = v66;
      unint64_t v68 = v38 + 144 * v39;
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v66, (uint64_t)v80);
      unint64_t v67 = v66 + 6;
      std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v76, &v65);
      uint64_t v46 = v77;
      std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&v65);
      uint64_t v77 = v46;

      if (v87 < 0) {
        operator delete(__p);
      }
    }
    else
    {
      uint64_t v24 = objc_opt_new();
      Espresso::ANECompilerEngine::compiler::unit_t::unit_t(v80, a3);
      uint64_t v33 = v84;
      if ((unint64_t)v84 >= v85)
      {
        char v35 = std::vector<std::string>::__push_back_slow_path<std::string const&>(&v83, (uint64_t)v83);
      }
      else
      {
        if (v83[23] < 0)
        {
          std::string::__init_copy_ctor_external(v84, *(const std::string::value_type **)v83, *((void *)v83 + 1));
        }
        else
        {
          long long v34 = *(_OWORD *)v83;
          v84->__r_.__value_.__r.__words[2] = *((void *)v83 + 2);
          *(_OWORD *)&v33->__r_.__value_.__l.__data_ = v34;
        }
        char v35 = v33 + 1;
      }
      int v40 = v89;
      long long v84 = v35;
      char v89 = @"ScaledElementWise";

      [v24 setObject:@"Mult" forKeyedSubscript:@"Type"];
      objc_storeStrong(v90, v24);
      if ((unint64_t)v77 >= v78)
      {
        unint64_t v42 = 0x8E38E38E38E38E39 * (((uint64_t)v77 - v76) >> 4);
        if (v42 + 1 > 0x1C71C71C71C71C7) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v43 = 0x1C71C71C71C71C72 * ((uint64_t)(v78 - v76) >> 4);
        if (v43 <= v42 + 1) {
          unint64_t v43 = v42 + 1;
        }
        if (0x8E38E38E38E38E39 * ((uint64_t)(v78 - v76) >> 4) >= 0xE38E38E38E38E3) {
          unint64_t v44 = 0x1C71C71C71C71C7;
        }
        else {
          unint64_t v44 = v43;
        }
        int v69 = &v78;
        if (v44) {
          unint64_t v44 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v44);
        }
        else {
          uint64_t v45 = 0;
        }
        id v65 = (void *)v44;
        id v66 = (std::string *)(v44 + 16 * (((uint64_t)v77 - v76) >> 4));
        unint64_t v67 = v66;
        unint64_t v68 = v44 + 144 * v45;
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v66, (uint64_t)v80);
        unint64_t v67 = v66 + 6;
        std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v76, &v65);
        float v41 = v77;
        std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&v65);
      }
      else
      {
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v77, (uint64_t)v80);
        float v41 = v77 + 6;
      }
      uint64_t v77 = v41;

      if (v87 < 0) {
        operator delete(__p);
      }
    }
    id v65 = &v83;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v65);
    id v65 = v82;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v65);
    if (v81 < 0) {
      operator delete(v80[0]);
    }

    obuint64_t j = (id)objc_opt_new();
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t(v80, a3);
    uint64_t v47 = v89;
    char v89 = @"Reduction";

    [obj setObject:@"Avg" forKeyedSubscript:@"Type"];
    v94[0] = @"Width";
    v94[1] = @"Height";
    int v48 = [MEMORY[0x1E4F1C978] arrayWithObjects:v94 count:2];
    [obj setObject:v48 forKeyedSubscript:@"Dimension"];

    objc_storeStrong(v90, obj);
    uint64_t v49 = v77;
    if ((unint64_t)v77 >= v78)
    {
      unint64_t v51 = 0x8E38E38E38E38E39 * (((uint64_t)v77 - v76) >> 4);
      if (v51 + 1 > 0x1C71C71C71C71C7) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v52 = 0x1C71C71C71C71C72 * ((uint64_t)(v78 - v76) >> 4);
      if (v52 <= v51 + 1) {
        unint64_t v52 = v51 + 1;
      }
      if (0x8E38E38E38E38E39 * ((uint64_t)(v78 - v76) >> 4) >= 0xE38E38E38E38E3) {
        unint64_t v53 = 0x1C71C71C71C71C7;
      }
      else {
        unint64_t v53 = v52;
      }
      int v69 = &v78;
      if (v53) {
        unint64_t v53 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v53);
      }
      else {
        uint64_t v54 = 0;
      }
      id v65 = (void *)v53;
      id v66 = (std::string *)(v53 + 144 * v51);
      unint64_t v67 = v66;
      unint64_t v68 = v53 + 144 * v54;
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v66, (uint64_t)v80);
      v67 += 6;
      std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v76, &v65);
      int v50 = v77;
      std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&v65);
    }
    else
    {
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v77, (uint64_t)v80);
      int v50 = v49 + 6;
    }
    uint64_t v77 = v50;
    unsigned int v55 = objc_opt_new();
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t(&v65, a3);
    uint64_t v56 = v74;
    uint64_t v74 = @"Neuron";

    [v55 setObject:@"Sqrt" forKeyedSubscript:@"Type"];
    objc_storeStrong(&v75, v55);
    std::string v57 = v77;
    if ((unint64_t)v77 >= v78)
    {
      unint64_t v59 = 0x8E38E38E38E38E39 * (((uint64_t)v77 - v76) >> 4);
      if (v59 + 1 > 0x1C71C71C71C71C7) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v60 = 0x1C71C71C71C71C72 * ((uint64_t)(v78 - v76) >> 4);
      if (v60 <= v59 + 1) {
        unint64_t v60 = v59 + 1;
      }
      if (0x8E38E38E38E38E39 * ((uint64_t)(v78 - v76) >> 4) >= 0xE38E38E38E38E3) {
        unint64_t v61 = 0x1C71C71C71C71C7;
      }
      else {
        unint64_t v61 = v60;
      }
      v93[2] = &v78;
      if (v61) {
        unint64_t v61 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v61);
      }
      else {
        uint64_t v62 = 0;
      }
      int v91 = (void **)v61;
      BOOL v92 = (std::string *)(v61 + 144 * v59);
      v93[0] = v92;
      v93[1] = v61 + 144 * v62;
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v92, (uint64_t)&v65);
      v93[0] += 144;
      std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v76, &v91);
      uint64_t v58 = v77;
      std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&v91);
    }
    else
    {
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v77, (uint64_t)&v65);
      uint64_t v58 = v57 + 6;
    }
    uint64_t v77 = v58;
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    v64[0] = v14;
    v64[1] = v13;
    if (v13) {
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    Espresso::ANECompilerEngine::add_ane_scale_bias_unit<Espresso::ANECompilerEngine::mix_pool_kernel *>(this, a2, a3, (uint64_t)v64, &v76);
    if (v13) {
      nitro::nitro_function::nitro_function(v13);
    }
    nitro::nitro_function::nitro_function(v7);
    (*(void (**)(char *, Espresso::ANECompilerEngine::compiler *, uint64_t *))(*((void *)this + 54) + 32))((char *)this + 432, a2, &v76);

    if (v72 < 0) {
      operator delete(v71);
    }
    int v91 = (void **)&v70;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v91);
    int v91 = (void **)&v68;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v91);
    if (SHIBYTE(v67) < 0) {
      operator delete(v65);
    }

    if (v87 < 0) {
      operator delete(__p);
    }
    id v65 = &v83;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v65);
    id v65 = v82;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v65);
    if (v81 < 0) {
      operator delete(v80[0]);
    }

    v80[0] = &v76;
    std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)v80);
  }
LABEL_123:

  if (v13) {
    nitro::nitro_function::nitro_function(v13);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  nitro::nitro_function::nitro_function(v7);
}

void sub_192AFA2DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void **a36)
{
  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t((id *)&a36);

  a36 = (void **)&a31;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100](&a36);

  if (v38) {
    nitro::nitro_function::nitro_function(v38);
  }
  if (v37) {
    nitro::nitro_function::nitro_function(v37);
  }
  nitro::nitro_function::nitro_function(v36);
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::add_ane_scale_bias_unit<Espresso::ANECompilerEngine::mix_pool_kernel *>(void *a1, unsigned char *a2, id *a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v138 = *MEMORY[0x1E4F143B8];
  Espresso::ANECompilerEngine::compiler::layer_graph_info_t::layer_graph_info_t((Espresso::ANECompilerEngine::compiler::layer_graph_info_t *)&v115);
  id v122 = 0;
  id v123 = 0;
  uint64_t v124 = 0x100000000;
  uint64_t v10 = a1[62];
  uint64_t v9 = (std::__shared_weak_count *)a1[63];
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v10 && !*(unsigned char *)((*(uint64_t (**)(void))(a1[54] + 104))() + 40))
  {
    float v11 = *(float *)(*(void *)a4 + 112);
    v108[0] = v10;
    v108[1] = v9;
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    unsigned int v12 = (std::__shared_weak_count *)a1[65];
    v107[0] = a1[64];
    v107[1] = (uint64_t)v12;
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    Espresso::ane_style_post_scale_bias((uint64_t)v108, v107, (uint64_t)&v109, v11);
    if (v12) {
      nitro::nitro_function::nitro_function(v12);
    }
    if (v9) {
      nitro::nitro_function::nitro_function(v9);
    }
    uint64_t v13 = *(unsigned int *)(v10 + 8);
    std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v105, 2 * v13, 1, 1, 1);
    uint64_t v14 = (int)v13;
    uint64_t v15 = a1[64];
    int v16 = v13;
    if (v15) {
      int v16 = *(_DWORD *)(v15 + 8);
    }
    if (!a2[384])
    {
      Espresso::blob<unsigned char,1>::make(&__str, 4 * v13);
      int v71 = *(int **)(__str.__r_.__value_.__r.__words[0] + 16);
      int v72 = v13 - 1;
      if ((int)v13 >= 1)
      {
        for (uint64_t i = 0; i != v13; ++i)
        {
          float v74 = *(float *)(*(void *)(v10 + 16) + i * 4);
          *(float *)&int v75 = ldexp(1.0, -v113) * v74;
          v71[i] = v75;
        }
      }
      if (v13)
      {
        uint64_t v76 = *(_WORD **)(v105 + 16);
        do
        {
          int v77 = *v71++;
          _S0 = v77;
          __asm { FCVT            H0, S0 }
          *v76++ = _S0;
          --v14;
        }
        while (v14);
      }
      if (a1[64])
      {
        Espresso::blob<unsigned char,1>::make(buf, 4 * v16);
        uint64_t v80 = *(void *)buf;
        Espresso::blob<unsigned char,1>::make(buf, 2 * v16);
        uint64_t v101 = *(void *)buf;
        char v81 = *(int **)(v80 + 16);
        if (v16 >= 1)
        {
          for (uint64_t j = 0; j != v16; ++j)
          {
            if (v72 >= (int)j) {
              int v83 = j;
            }
            else {
              int v83 = v72;
            }
            float v84 = *(float *)(*(void *)(v111 + 16) + 4 * j) * *(float *)(*(void *)(v109 + 16) + 4 * v83);
            unint64_t v85 = (float *)&v81[j];
            *unint64_t v85 = v84;
            unsigned int v86 = v113;
            unsigned int v87 = v114;
            float v88 = ldexp(1.0, v114 - v113) * v84;
            *unint64_t v85 = v88;
            float v91 = ldexp(1.0, v86 - v87) * v88;
            if (v91 < -127.0 || v91 > 255.0)
            {
              int v93 = Espresso::espresso_os_log_subsystem(v89, v90);
              if (os_log_type_enabled(v93, OS_LOG_TYPE_ERROR))
              {
                double v94 = *(float *)&v81[j];
                *(_DWORD *)long long buf = 134218752;
                *(double *)&uint8_t buf[4] = v91;
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = v114;
                __int16 v126 = 1024;
                int v127 = v113;
                __int16 v128 = 2048;
                double v129 = v94;
                _os_log_error_impl(&dword_1920CB000, v93, OS_LOG_TYPE_ERROR, "[ANEC::add_ane_scale_bias_unit] Shifted bias overflowing shifted_b=%f acc_bias_shift=%d post_right_shift=%d anebias=%f", buf, 0x22u);
              }
            }
          }
        }
        if (v16)
        {
          uint64_t v95 = v16;
          unint64_t v96 = *(_WORD **)(v101 + 16);
          do
          {
            int v97 = *v81++;
            _S0 = v97;
            __asm { FCVT            H0, S0 }
            *v96++ = _S0;
            --v95;
          }
          while (v95);
        }
      }
      exception = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
      Espresso::not_implemented_error::not_implemented_error(exception);
    }
    unsigned int v17 = v114;
    uint64_t v18 = v105;
    if (v13)
    {
      unsigned int v19 = *(int **)(v109 + 16);
      uint64_t v20 = *(_WORD **)(v105 + 16);
      do
      {
        int v21 = *v19++;
        _S0 = v21;
        __asm { FCVT            H0, S0 }
        *v20++ = _S0;
        --v14;
      }
      while (v14);
    }
    unsigned int v99 = v17;
    if (v15)
    {
      std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(buf, 2 * v16, 1, 1, 1);
      uint64_t v27 = *(void *)buf;
      long long v102 = *(std::__shared_weak_count **)&buf[8];
      if (v16)
      {
        uint64_t v28 = v16;
        unint64_t v29 = *(_WORD **)(*(void *)buf + 16);
        unint64_t v30 = *(int **)(v111 + 16);
        do
        {
          int v31 = *v30++;
          _S0 = v31;
          __asm { FCVT            H0, S0 }
          *v29++ = _S0;
          --v28;
        }
        while (v28);
      }
    }
    else
    {
      long long v102 = 0;
      uint64_t v27 = 0;
    }
    int v100 = a2[552];
    uint64_t v33 = v106;
    if (v106) {
      atomic_fetch_add_explicit(&v106->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v34 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128), *(const unsigned __int8 **)(v18 + 16), *(int *)(v18 + 8));
    if (v33) {
      nitro::nitro_function::nitro_function(v33);
    }
    obuint64_t j = objc_opt_new();
    if (a5 && a2[121])
    {
      id v35 = *(id *)(*a5 + 128);

      obuint64_t j = v35;
    }
    unint64_t v36 = objc_opt_new();
    unint64_t v37 = [NSNumber numberWithInt:v13];
    [v36 setObject:v37 forKeyedSubscript:@"ScaleCount"];

    unint64_t v38 = [NSNumber numberWithInt:v34];
    [v36 setObject:v38 forKeyedSubscript:@"ScaleOffset"];

    uint64_t v39 = NSNumber;
    if (v100) {
      uint64_t weights_file_index = 0;
    }
    else {
    float v41 = [v39 numberWithUnsignedLong:weights_file_index];
    }
    [v36 setObject:v41 forKeyedSubscript:@"ScaleIndex"];

    [v36 setObject:@"Float16" forKeyedSubscript:@"ScaleType"];
    unint64_t v42 = [NSNumber numberWithInt:v113];
    [obj setObject:v42 forKeyedSubscript:@"ScaleShift"];

    if (a1[64])
    {
      if (v102) {
        atomic_fetch_add_explicit(&v102->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v43 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128), *(const unsigned __int8 **)(v27 + 16), *(int *)(v27 + 8));
      if (v102) {
        nitro::nitro_function::nitro_function(v102);
      }
      unint64_t v44 = [NSNumber numberWithInt:*(unsigned int *)(a1[64] + 8)];
      [v36 setObject:v44 forKeyedSubscript:@"BiasCount"];

      uint64_t v45 = [NSNumber numberWithInt:v43];
      [v36 setObject:v45 forKeyedSubscript:@"BiasOffset"];

      uint64_t v46 = NSNumber;
      if (v100) {
        uint64_t v47 = 0;
      }
      else {
      int v48 = [v46 numberWithUnsignedLong:v47];
      }
      [v36 setObject:v48 forKeyedSubscript:@"BiasIndex"];

      [v36 setObject:@"Float16" forKeyedSubscript:@"BiasType"];
      uint64_t v49 = [NSNumber numberWithInt:v99];
      [obj setObject:v49 forKeyedSubscript:@"BiasShift"];
    }
    [obj setObject:v36 forKeyedSubscript:@"BiasScaleGroupData"];
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)buf, a3);
    uint64_t v50 = a5[1];
    if (v50 == *a5) {
      goto LABEL_68;
    }
    unint64_t v51 = (const void **)(v50 - 144);
    uint64_t v52 = *(unsigned __int8 *)(v50 - 121);
    char v53 = v52;
    std::string::size_type v54 = *(void *)(v50 - 136);
    if ((v52 & 0x80u) == 0) {
      uint64_t v55 = *(unsigned __int8 *)(v50 - 121);
    }
    else {
      uint64_t v55 = *(void *)(v50 - 136);
    }
    uint64_t v56 = HIBYTE(v127);
    if (v127 < 0) {
      uint64_t v56 = *(void *)&buf[8];
    }
    if (v55 != v56) {
      goto LABEL_62;
    }
    if (v127 >= 0) {
      std::string v57 = buf;
    }
    else {
      std::string v57 = *(unsigned __int8 **)buf;
    }
    if ((char)v52 < 0)
    {
      unint64_t v59 = (const std::string::value_type *)*v51;
      if (memcmp(*v51, v57, *(void *)(v50 - 136))) {
        goto LABEL_65;
      }
    }
    else if ((_BYTE)v52)
    {
      uint64_t v58 = (unsigned __int8 *)(v50 - 144);
      while (*v58 == *v57)
      {
        ++v58;
        ++v57;
        if (!--v52) {
          goto LABEL_61;
        }
      }
      goto LABEL_62;
    }
LABEL_61:
    std::string::append((std::string *)(v50 - 144), "__@pre_scale_bias");
    char v53 = *(unsigned char *)(v50 - 121);
LABEL_62:
    if ((v53 & 0x80) == 0)
    {
      long long v60 = *(_OWORD *)v51;
      __str.__r_.__value_.__r.__words[2] = *(void *)(v50 - 128);
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v60;
      goto LABEL_66;
    }
    unint64_t v59 = *(const std::string::value_type **)(v50 - 144);
    std::string::size_type v54 = *(void *)(v50 - 136);
LABEL_65:
    std::string::__init_copy_ctor_external(&__str, v59, v54);
LABEL_66:
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v130, &__str, &v137, 1uLL);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
LABEL_68:
    unint64_t v61 = v134;
    long long v134 = @"GOC";

    objc_storeStrong(&v135, obj);
    if (a2[121]) {
      BOOL v62 = a5 != 0;
    }
    else {
      BOOL v62 = 0;
    }
    if (!v62)
    {
      if (a5)
      {
        unint64_t v63 = a5[2];
        unint64_t v64 = a5[1];
        if (v64 >= v63)
        {
          unint64_t v66 = 0x8E38E38E38E38E39 * ((uint64_t)(v64 - *a5) >> 4);
          if (v66 + 1 > 0x1C71C71C71C71C7) {
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v67 = 0x8E38E38E38E38E39 * ((uint64_t)(v63 - *a5) >> 4);
          uint64_t v68 = 2 * v67;
          if (2 * v67 <= v66 + 1) {
            uint64_t v68 = v66 + 1;
          }
          if (v67 >= 0xE38E38E38E38E3) {
            unint64_t v69 = 0x1C71C71C71C71C7;
          }
          else {
            unint64_t v69 = v68;
          }
          *((void *)&v137 + 1) = a5 + 2;
          if (v69) {
            unint64_t v69 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v69);
          }
          else {
            uint64_t v70 = 0;
          }
          __str.__r_.__value_.__r.__words[0] = v69;
          __str.__r_.__value_.__l.__size_ = v69 + 144 * v66;
          __str.__r_.__value_.__r.__words[2] = __str.__r_.__value_.__l.__size_;
          *(void *)&long long v137 = v69 + 144 * v70;
          std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)__str.__r_.__value_.__l.__size_, (uint64_t)buf);
          __str.__r_.__value_.__r.__words[2] += 144;
          std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(a5, &__str);
          uint64_t v65 = a5[1];
          std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&__str);
        }
        else
        {
          std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)a5[1], (uint64_t)buf);
          uint64_t v65 = v64 + 144;
          a5[1] = v65;
        }
        a5[1] = v65;
      }
      else
      {
        Espresso::ANECompilerEngine::compiler::add_unit((Espresso::ANECompilerEngine::compiler *)a2, (const Espresso::ANECompilerEngine::compiler::unit_t *)buf);
      }
    }

    if (v132 < 0) {
      operator delete(__p);
    }
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v130;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v128;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
    if (SHIBYTE(v127) < 0) {
      operator delete(*(void **)buf);
    }

    if (v102) {
      nitro::nitro_function::nitro_function(v102);
    }
    if (v106) {
      nitro::nitro_function::nitro_function(v106);
    }
    if (v112) {
      nitro::nitro_function::nitro_function(v112);
    }
    if (v110) {
      nitro::nitro_function::nitro_function(v110);
    }
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }

  if (v120 < 0) {
    operator delete(v119);
  }
  *(void *)long long buf = &v118;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(void *)long long buf = &v117;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (v116 < 0) {
    operator delete(v115);
  }
}

void sub_192AFAF4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,id a27)
{
  if (a12) {
    nitro::nitro_function::nitro_function(a12);
  }
  unint64_t v30 = *(std::__shared_weak_count **)(v28 - 152);
  if (v30) {
    nitro::nitro_function::nitro_function(v30);
  }
  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  Espresso::dropout_augment_lowmem::ret_t::~ret_t((Espresso::dropout_augment_lowmem::ret_t *)&a22);
  if (v27) {
    nitro::nitro_function::nitro_function(v27);
  }
  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t(&a27);
  _Unwind_Resume(a1);
}

BOOL Espresso::ANECompilerEngine::mix_pool_kernel::separated_pool_workaround_compatible(Espresso::ANECompilerEngine *a1, uint64_t a2)
{
  BOOL result = Espresso::ANECompilerEngine::can_handle_configuration_dependent_transforms(a1, (Espresso::net *)a2);
  if (result)
  {
    if (*(_DWORD *)a2) {
      return 0;
    }
    if (*(_DWORD *)(a2 + 28) != 1) {
      return 0;
    }
    if (*(_DWORD *)(a2 + 32)) {
      return 0;
    }
    int v4 = *(_DWORD *)(a2 + 16);
    if (v4 != *(_DWORD *)(a2 + 4)) {
      return 0;
    }
    BOOL result = 0;
    int v5 = *(_DWORD *)(a2 + 20);
    if (v5 != v4 || v5 != *(_DWORD *)(a2 + 8)) {
      return result;
    }
    if (*(_WORD *)(a2 + 36) != 1) {
      return 0;
    }
    return (v4 - 5) < 0x3B && *(_DWORD *)(a2 + 56) == 0;
  }
  return result;
}

void Espresso::ANECompilerEngine::mix_pool_kernel::~mix_pool_kernel(Espresso::ANECompilerEngine::mix_pool_kernel *this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANECompilerEngine::mix_pool_kernel *)((char *)this + 432));
  Espresso::generic_pool_kernel::~generic_pool_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t vars8;

  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANECompilerEngine::mix_pool_kernel *)((char *)this + 432));

  Espresso::generic_pool_kernel::~generic_pool_kernel(this);
}

__n128 Espresso::ANECompilerEngine::mix_pool3d_kernel::mix_pool3d_kernel(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = a1 + 280;
  uint64_t v6 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_OWORD *)uint64_t v5 = xmmword_192DC3600;
  *(_OWORD *)(v5 + 16) = xmmword_192DCA240;
  *(_DWORD *)(v5 + 32) = 0;
  *(_WORD *)(v6 + 316) = 1;
  *(_OWORD *)(v5 + 38) = 0u;
  *(void *)(v5 + 52) = 0;
  char v7 = *(unsigned char *)(*a2 + 123);
  *(_OWORD *)(v6 + 480) = 0u;
  *(_OWORD *)(v6 + 496) = 0u;
  *(_OWORD *)(v6 + 352) = 0u;
  *(_OWORD *)(v6 + 368) = 0u;
  *(_OWORD *)(v6 + 384) = 0u;
  *(unsigned char *)(v6 + 400) = 0;
  *(_OWORD *)(v6 + 408) = 0u;
  *(_OWORD *)(v6 + 424) = 0u;
  *(_OWORD *)(v6 + 440) = 0u;
  *(_OWORD *)(v6 + 456) = 0u;
  *(unsigned char *)(v6 + 472) = 0;
  *(_DWORD *)(v6 + 512) = 1065353216;
  *(_WORD *)(v6 + 520) = 0;
  *(unsigned char *)(v6 + 522) = 0;
  __asm { FMOV            V1.2S, #1.0 }
  *(void *)(v5 + 244) = _D1;
  *(unsigned char *)(v6 + 532) = 0;
  *(_OWORD *)(v6 + 536) = 0u;
  *(unsigned char *)(v6 + 552) = v7;
  *(void *)uint64_t v6 = &unk_1EE342378;
  *(void *)(v6 + 344) = &unk_1EE3424D8;
  __n128 result = *(__n128 *)a3;
  long long v14 = *(_OWORD *)(a3 + 16);
  long long v15 = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(v5 + 44) = *(_OWORD *)(a3 + 44);
  *(_OWORD *)(v5 + 16) = v14;
  *(_OWORD *)(v5 + 32) = v15;
  *(__n128 *)uint64_t v5 = result;
  return result;
}

void sub_192AFB3E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_192AFB44C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_192AFB59C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_192AFB664(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_192AFB6E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_192AFB9FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_192AFBB48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_192AFBBE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_192AFBE94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_192AFBFD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_192AFC070(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::transpose_unit_from_axis_pairs(uint64_t a1, uint64_t a2, const std::string *a3, int a4, int a5, void *a6, unsigned int **a7, std::string *a8)
{
  *((void *)&v36 + 1) = *MEMORY[0x1E4F143B8];
  id v26 = a6;
  Espresso::ANECompilerEngine::compiler::layer_graph_info_t::layer_graph_info_t((uint64_t)&v27, a8);
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __str = *(std::string *)a2;
  }
  std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v29, &__str, &v36, 1uLL);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  std::string::operator=(&v27, a3);
  int v30 = a4;
  int v33 = a5;
  objc_storeStrong(&v34, a6);
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)a1, (id *)&v27.__r_.__value_.__l.__data_);
  int v16 = objc_opt_new();
  unsigned int v17 = objc_opt_new();
  unsigned int v19 = *a7;
  uint64_t v18 = a7[1];
  if (*a7 != v18)
  {
    do
    {
      uint64_t v20 = objc_opt_new();
      int v21 = v20;
      uint64_t v22 = *v19;
      if (v22 >= 5
        || ([v20 setObject:off_1E57479A8[v22] forKeyedSubscript:@"TransposeSourceDimension"],
            uint64_t v23 = v19[1],
            v23 > 4))
      {
        Espresso::throw_exception_selector<Espresso::invalid_state_error>("Bad axis.");
      }
      [v21 setObject:off_1E57479A8[v23] forKeyedSubscript:@"TransposeDestinationDimension"];
      [v17 addObject:v21];

      v19 += 2;
    }
    while (v19 != v18);
  }
  [v16 setObject:v17 forKeyedSubscript:@"TransposeDimensions"];
  uint64_t v24 = *(void **)(a1 + 120);
  *(void *)(a1 + 120) = @"Transpose";

  BOOL v25 = *(void **)(a1 + 128);
  *(void *)(a1 + 128) = v16;

  if (v32 < 0) {
    operator delete(__p);
  }
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v28;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v27.__r_.__value_.__l.__data_);
  }
}

void sub_192AFC2F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void *a4, ...)
{
  va_start(va, a4);
  Espresso::ANECompilerEngine::compiler::layer_graph_info_t::~layer_graph_info_t((id *)va);

  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::fill_unpaired_transposes(uint64_t a1)
{
  uint64_t v63 = *MEMORY[0x1E4F143B8];
  if (*(void *)a1 != *(void *)(a1 + 8))
  {
    unint64_t v2 = 0;
    uint64_t v3 = 0;
    LODWORD(v54) = 0;
    WORD2(v54) = 0;
    int v55 = 1;
    __int16 v56 = 0;
    int v57 = 2;
    __int16 v58 = 0;
    int v59 = 3;
    __int16 v60 = 0;
    int v61 = 4;
    __int16 v62 = 0;
    uint64_t v52 = 0;
    uint64_t v53 = 0;
    int v4 = &v52;
    unint64_t v51 = &v52;
    while (1)
    {
      uint64_t v5 = &v54 + v3;
      uint64_t v6 = &v52;
      if (v4 == &v52) {
        goto LABEL_9;
      }
      char v7 = v2;
      uint64_t v8 = &v52;
      if (v2)
      {
        do
        {
          uint64_t v6 = (uint64_t **)v7;
          char v7 = (uint64_t *)v7[1];
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v6 = (uint64_t **)v8[2];
          BOOL v9 = *v6 == (uint64_t *)v8;
          uint64_t v8 = v6;
        }
        while (v9);
      }
      int v10 = *(_DWORD *)v5;
      if (*((_DWORD *)v6 + 7) < *(_DWORD *)v5)
      {
LABEL_9:
        float v11 = v2 ? v6 : &v52;
        unsigned int v12 = v2 ? v6 + 1 : &v52;
      }
      else
      {
        float v11 = &v52;
        unsigned int v12 = &v52;
        if (v2)
        {
          unsigned int v12 = &v52;
          while (1)
          {
            while (1)
            {
              float v11 = (uint64_t **)v2;
              int v14 = *((_DWORD *)v2 + 7);
              if (v10 >= v14) {
                break;
              }
              unint64_t v2 = *v11;
              unsigned int v12 = v11;
              if (!*v11) {
                goto LABEL_16;
              }
            }
            if (v14 >= v10) {
              break;
            }
            unsigned int v12 = v11 + 1;
            unint64_t v2 = v11[1];
            if (!v2) {
              goto LABEL_16;
            }
          }
        }
      }
      if (!*v12)
      {
LABEL_16:
        uint64_t v13 = (uint64_t *)operator new(0x28uLL);
        *(uint64_t *)((char *)v13 + 28) = *v5;
        *uint64_t v13 = 0;
        v13[1] = 0;
        v13[2] = (uint64_t)v11;
        *unsigned int v12 = v13;
        if (*v51)
        {
          unint64_t v51 = (uint64_t **)*v51;
          uint64_t v13 = *v12;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v52, v13);
        ++v53;
      }
      if (++v3 == 5) {
        break;
      }
      int v4 = v51;
      unint64_t v2 = v52;
    }
    long long v15 = *(uint64_t **)a1;
    int v16 = *(uint64_t **)(a1 + 8);
    if (*(uint64_t **)a1 != v16)
    {
      do
      {
        uint64_t v17 = *v15;
        uint64_t v54 = v17;
        *((unsigned char *)std::__tree<std::__value_type<Espresso::ANECompilerEngine::NamedAxis,std::pair<BOOL,BOOL>>,std::__map_value_compare<Espresso::ANECompilerEngine::NamedAxis,std::__value_type<Espresso::ANECompilerEngine::NamedAxis,std::pair<BOOL,BOOL>>,std::less<Espresso::ANECompilerEngine::NamedAxis>,true>,std::allocator<std::__value_type<Espresso::ANECompilerEngine::NamedAxis,std::pair<BOOL,BOOL>>>>::__emplace_unique_key_args<Espresso::ANECompilerEngine::NamedAxis,std::piecewise_construct_t const&,std::tuple<Espresso::ANECompilerEngine::NamedAxis const&>,std::tuple<>>((uint64_t **)&v51, v17, &v54)+ 32) = 1;
        *((unsigned char *)std::__tree<std::__value_type<Espresso::ANECompilerEngine::NamedAxis,std::pair<BOOL,BOOL>>,std::__map_value_compare<Espresso::ANECompilerEngine::NamedAxis,std::__value_type<Espresso::ANECompilerEngine::NamedAxis,std::pair<BOOL,BOOL>>,std::less<Espresso::ANECompilerEngine::NamedAxis>,true>,std::allocator<std::__value_type<Espresso::ANECompilerEngine::NamedAxis,std::pair<BOOL,BOOL>>>>::__emplace_unique_key_args<Espresso::ANECompilerEngine::NamedAxis,std::piecewise_construct_t const&,std::tuple<Espresso::ANECompilerEngine::NamedAxis const&>,std::tuple<>>((uint64_t **)&v51, SHIDWORD(v17), (_DWORD *)&v54 + 1)+ 33) = 1;
        ++v15;
      }
      while (v15 != v16);
    }
    uint64_t v18 = (uint64_t *)v51;
    if (v51 != &v52)
    {
      do
      {
        uint64_t v20 = (char *)v18 + 33;
        int v19 = *((unsigned __int8 *)v18 + 33);
        int v21 = *((unsigned __int8 *)v18 + 32);
        if (v21 | v19 && v21 != v19)
        {
          uint64_t v22 = (uint64_t *)v51;
          if (v51 == &v52) {
            goto LABEL_90;
          }
          uint64_t v23 = *((unsigned int *)v18 + 7);
          while (*((unsigned __int8 *)v22 + 32) == v21 || *((unsigned __int8 *)v22 + 33) == v19)
          {
            uint64_t v24 = (uint64_t *)v22[1];
            if (v24)
            {
              do
              {
                BOOL v25 = (uint64_t **)v24;
                uint64_t v24 = (uint64_t *)*v24;
              }
              while (v24);
            }
            else
            {
              do
              {
                BOOL v25 = (uint64_t **)v22[2];
                BOOL v9 = *v25 == v22;
                uint64_t v22 = (uint64_t *)v25;
              }
              while (!v9);
            }
            uint64_t v22 = (uint64_t *)v25;
            if (v25 == &v52) {
              goto LABEL_90;
            }
          }
          if (v22 == (uint64_t *)&v52) {
LABEL_90:
          }
            Espresso::throw_exception_selector<Espresso::invalid_state_error>("Flow conservation violated with requested transpose.");
          uint64_t v26 = *((unsigned int *)v22 + 7);
          uint64_t v28 = *(uint64_t **)(a1 + 8);
          unint64_t v27 = *(void *)(a1 + 16);
          if (*((unsigned char *)v18 + 32))
          {
            if ((unint64_t)v28 >= v27)
            {
              uint64_t v31 = ((uint64_t)v28 - *(void *)a1) >> 3;
              if ((unint64_t)(v31 + 1) >> 61) {
                std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v32 = v27 - *(void *)a1;
              uint64_t v33 = v32 >> 2;
              if (v32 >> 2 <= (unint64_t)(v31 + 1)) {
                uint64_t v33 = v31 + 1;
              }
              if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v34 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v34 = v33;
              }
              if (v34) {
                unint64_t v34 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v34);
              }
              else {
                uint64_t v35 = 0;
              }
              float v41 = (uint64_t *)(v34 + 8 * v31);
              uint64_t *v41 = v26 | (v23 << 32);
              std::vector<std::string> v29 = v41 + 1;
              uint64_t v43 = *(uint64_t **)a1;
              unint64_t v42 = *(uint64_t **)(a1 + 8);
              if (v42 != *(uint64_t **)a1)
              {
                do
                {
                  uint64_t v44 = *--v42;
                  *--float v41 = v44;
                }
                while (v42 != v43);
                unint64_t v42 = *(uint64_t **)a1;
              }
              *(void *)a1 = v41;
              *(void *)(a1 + 8) = v29;
              *(void *)(a1 + 16) = v34 + 8 * v35;
              if (v42) {
                operator delete(v42);
              }
            }
            else
            {
              *uint64_t v28 = v26 | (v23 << 32);
              std::vector<std::string> v29 = v28 + 1;
            }
            *(void *)(a1 + 8) = v29;
            *((unsigned char *)v22 + 32) = 1;
          }
          else
          {
            if ((unint64_t)v28 >= v27)
            {
              uint64_t v36 = ((uint64_t)v28 - *(void *)a1) >> 3;
              if ((unint64_t)(v36 + 1) >> 61) {
                std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v37 = v27 - *(void *)a1;
              uint64_t v38 = v37 >> 2;
              if (v37 >> 2 <= (unint64_t)(v36 + 1)) {
                uint64_t v38 = v36 + 1;
              }
              if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v39 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v39 = v38;
              }
              if (v39) {
                unint64_t v39 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v39);
              }
              else {
                uint64_t v40 = 0;
              }
              uint64_t v45 = (uint64_t *)(v39 + 8 * v36);
              *uint64_t v45 = v23 | (v26 << 32);
              int v30 = v45 + 1;
              uint64_t v47 = *(uint64_t **)a1;
              uint64_t v46 = *(uint64_t **)(a1 + 8);
              if (v46 != *(uint64_t **)a1)
              {
                do
                {
                  uint64_t v48 = *--v46;
                  *--uint64_t v45 = v48;
                }
                while (v46 != v47);
                uint64_t v46 = *(uint64_t **)a1;
              }
              *(void *)a1 = v45;
              *(void *)(a1 + 8) = v30;
              *(void *)(a1 + 16) = v39 + 8 * v40;
              if (v46) {
                operator delete(v46);
              }
            }
            else
            {
              *uint64_t v28 = v23 | (v26 << 32);
              int v30 = v28 + 1;
            }
            uint64_t v20 = (char *)v22 + 33;
            *(void *)(a1 + 8) = v30;
            *((unsigned char *)v18 + 32) = 1;
          }
          *uint64_t v20 = 1;
        }
        uint64_t v49 = (uint64_t *)v18[1];
        if (v49)
        {
          do
          {
            uint64_t v50 = (uint64_t **)v49;
            uint64_t v49 = (uint64_t *)*v49;
          }
          while (v49);
        }
        else
        {
          do
          {
            uint64_t v50 = (uint64_t **)v18[2];
            BOOL v9 = *v50 == v18;
            uint64_t v18 = (uint64_t *)v50;
          }
          while (!v9);
        }
        uint64_t v18 = (uint64_t *)v50;
      }
      while (v50 != &v52);
    }
    std::__tree<int>::destroy(v52);
  }
}

void sub_192AFC810(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
}

uint64_t **std::__tree<std::__value_type<Espresso::ANECompilerEngine::NamedAxis,std::pair<BOOL,BOOL>>,std::__map_value_compare<Espresso::ANECompilerEngine::NamedAxis,std::__value_type<Espresso::ANECompilerEngine::NamedAxis,std::pair<BOOL,BOOL>>,std::less<Espresso::ANECompilerEngine::NamedAxis>,true>,std::allocator<std::__value_type<Espresso::ANECompilerEngine::NamedAxis,std::pair<BOOL,BOOL>>>>::__emplace_unique_key_args<Espresso::ANECompilerEngine::NamedAxis,std::piecewise_construct_t const&,std::tuple<Espresso::ANECompilerEngine::NamedAxis const&>,std::tuple<>>(uint64_t **a1, int a2, _DWORD *a3)
{
  uint64_t v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        char v7 = (uint64_t **)v5;
        int v8 = *((_DWORD *)v5 + 7);
        if (v8 <= a2) {
          break;
        }
        uint64_t v5 = *v7;
        uint64_t v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      uint64_t v5 = v7[1];
      if (!v5)
      {
        uint64_t v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    char v7 = a1 + 1;
LABEL_9:
    BOOL v9 = operator new(0x28uLL);
    v9[7] = *a3;
    *((_WORD *)v9 + 16) = 0;
    std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at(a1, (uint64_t)v7, v6, (uint64_t *)v9);
    return (uint64_t **)v9;
  }
  return v7;
}

void Espresso::ANECompilerEngine::get_transpose_for_squeeze(uint64_t a1, uint64_t __val, unint64_t a3, unsigned int a4, uint64_t a5)
{
  void v14[2] = *MEMORY[0x1E4F143B8];
  if (a3 - 6 <= 0xFFFFFFFFFFFFFFFALL)
  {
    std::to_string(&__p, a3);
    uint64_t v6 = std::string::insert(&__p, 0, "get_transpose_for_squeeze: dynamic model or invalid input rank ");
    goto LABEL_3;
  }
  if (a3 == 5)
  {
    if (a4 < 2)
    {
      if (a4 != 1)
      {
        switch(__val)
        {
          case 0:
            *(_DWORD *)(a5 + 16) = 3;
            uint64_t v10 = 0x200000004;
            goto LABEL_15;
          case 1:
            *(_DWORD *)(a5 + 16) = 2;
            *(_DWORD *)(a5 + 8) = 4;
            goto LABEL_43;
          case 2:
            goto LABEL_43;
          case 3:
            *(_DWORD *)(a5 + 4) = 4;
            int v11 = 1;
            goto LABEL_39;
          case 4:
            *(void *)a5 = 0x400000001;
            goto LABEL_42;
          default:
            goto LABEL_34;
        }
      }
      switch(__val)
      {
        case 0:
          goto LABEL_43;
        case 1:
          *(void *)(a5 + 12) = 0x300000004;
          goto LABEL_43;
        case 2:
          *(void *)(a5 + 8) = 0x400000003;
          int v11 = 2;
LABEL_39:
          *(_DWORD *)(a5 + 16) = v11;
          goto LABEL_43;
        case 3:
          *(_OWORD *)(a5 + 4) = xmmword_192DCA7F0;
          goto LABEL_43;
        case 4:
          *(_OWORD *)a5 = xmmword_192DCA800;
LABEL_42:
          *(_DWORD *)(a5 + 16) = 0;
          goto LABEL_43;
        default:
          goto LABEL_34;
      }
    }
    std::to_string(&__p, a4);
    uint64_t v6 = std::string::insert(&__p, 0, "get_transpose_for_squeeze: dynamic model or invalid layout when squeeze rank 5 tensor, got ");
    goto LABEL_3;
  }
  if (__val && a3 == 4)
  {
    switch(__val)
    {
      case 3:
        *(_OWORD *)a5 = xmmword_192DCA7E0;
        break;
      case 2:
        *(void *)(a5 + 4) = 0x300000002;
        *(_DWORD *)(a5 + 12) = 1;
        break;
      case 1:
        uint64_t v10 = 0x200000003;
LABEL_15:
        *(void *)(a5 + 8) = v10;
        break;
      default:
LABEL_34:
        std::to_string(&__p, __val);
        uint64_t v6 = std::string::insert(&__p, 0, "get_transpose_for_squeeze: invalid dimensions ");
LABEL_3:
        std::string::size_type v7 = v6->__r_.__value_.__r.__words[0];
        v14[0] = v6->__r_.__value_.__l.__size_;
        *(void *)((char *)v14 + 7) = *(std::string::size_type *)((char *)&v6->__r_.__value_.__r.__words[1] + 7);
        char v8 = HIBYTE(v6->__r_.__value_.__r.__words[2]);
        v6->__r_.__value_.__l.__size_ = 0;
        v6->__r_.__value_.__r.__words[2] = 0;
        v6->__r_.__value_.__r.__words[0] = 0;
        *(unsigned char *)a1 = 0;
        *(void *)(a1 + 23) = *(void *)((char *)v14 + 7);
        uint64_t v9 = v14[0];
        *(void *)(a1 + 8) = v7;
        *(void *)(a1 + 16) = v9;
        *(unsigned char *)(a1 + 31) = v8;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        return;
    }
  }
  else
  {
    if (!__val || a3 != 3)
    {
      if (__val && a3 == 2)
      {
        if (__val != 1) {
          Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Invalid Squeeze Dimensions");
        }
        *(void *)a5 = 1;
      }
      goto LABEL_43;
    }
    if (__val == 2)
    {
      *(void *)a5 = 0x200000001;
      *(_DWORD *)(a5 + 8) = 0;
    }
    else
    {
      if (__val != 1) {
        goto LABEL_34;
      }
      *(void *)(a5 + 4) = 0x100000002;
    }
  }
LABEL_43:
  *(unsigned char *)a1 = 1;
  unsigned int v12 = (void *)(a1 + 8);

  std::string::basic_string[abi:ne180100]<0>(v12, "Success");
}

void sub_192AFCC80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::ANECompilerEngine::format_validation_violations(uint64_t a1, uint64_t a2)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v12);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Errors were: [", 14);
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v3 = (uint64_t **)(a2 + 16);
  while (1)
  {
    uint64_t v3 = (uint64_t **)*v3;
    if (!v3) {
      break;
    }
    if ((v11 & 0x80u) == 0) {
      int v4 = __p;
    }
    else {
      int v4 = (void **)__p[0];
    }
    if ((v11 & 0x80u) == 0) {
      uint64_t v5 = v11;
    }
    else {
      uint64_t v5 = (uint64_t)__p[1];
    }
    uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v4, v5);
    std::string::size_type v7 = (const char *)[v3[2] UTF8String];
    size_t v8 = strlen(v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v7, v8);
    MEMORY[0x192FF0F50](__p, ", ");
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"]", 1);
  std::stringbuf::str();
  if ((char)v11 < 0) {
    operator delete(__p[0]);
  }
  v12[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v12 + *(void *)(v12[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v12[1] = MEMORY[0x1E4FBA470] + 16;
  if (v13 < 0) {
    operator delete((void *)v12[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x192FF15B0](&v14);
}

void sub_192AFCED0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

void Espresso::ANECompilerEngine::CodegenTransposeUnit(uint64_t a1, unsigned int *a2, uint64_t a3, int a4)
{
  Espresso::ANECompilerEngine::DecomposeTranspose(v15, a2, a4);
  uint64_t v6 = *(unsigned int *)(a3 + 104);
  if (v6 >= 6 || ((0x37u >> v6) & 1) == 0)
  {
    std::to_string(&v12, *(_DWORD *)(a3 + 104));
    uint64_t v9 = std::string::insert(&v12, 0, "Unsupported argument for transpose compute path: ");
    long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    int64_t v14 = v9->__r_.__value_.__r.__words[2];
    long long v13 = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    if (v14 >= 0) {
      unsigned __int8 v11 = (const char *)&v13;
    }
    else {
      unsigned __int8 v11 = (const char *)v13;
    }
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>(v11);
  }
  uint64_t v7 = *(void *)(a3 + 48);
  if (*(void *)(a3 + 56) == v7) {
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  }
  Espresso::ANECompilerEngine::transpose_unit_from_axis_pairs(a1, v7, (const std::string *)a3, *(_DWORD *)(a3 + 72), v6, off_1E57479D0[v6], (unsigned int **)v15, (std::string *)(a3 + 80));
  size_t v8 = v15[0];
  if (v15[0])
  {
    operator delete(v8);
  }
}

void sub_192AFD068(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  uint64_t v23 = *(void **)(v21 - 40);
  if (v23) {
    operator delete(v23);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::ANECompilerEngine::get_constant_input(void *a1, uint64_t *a2, uint64_t a3, unsigned int a4)
{
  unint64_t v24 = 0;
  uint64_t v5 = *a2;
  if (*(void *)(*a2 + 40) == *(void *)(*a2 + 32)) {
    goto LABEL_32;
  }
  uint64_t v7 = a3 + 24 * a4;
  while (1)
  {
    BOOL v25 = &v24;
    size_t v8 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v5 + 96, &v24, (uint64_t)&std::piecewise_construct, (uint64_t **)&v25);
    uint64_t v9 = v8[3];
    uint64_t v10 = v8[4] - v9;
    if (v10) {
      break;
    }
LABEL_24:
    ++v24;
    uint64_t v5 = *a2;
    if (v24 >= (uint64_t)(*(void *)(*a2 + 40) - *(void *)(*a2 + 32)) >> 4) {
      goto LABEL_32;
    }
  }
  uint64_t v11 = 0;
  unint64_t v12 = v10 / 24;
  int v13 = *(char *)(v7 + 23);
  uint64_t v14 = v13 >= 0 ? *(unsigned __int8 *)(v7 + 23) : *(void *)(v7 + 8);
  uint64_t v15 = v12 <= 1 ? 1 : v12;
  while (1)
  {
    int v16 = (unsigned __int8 *)(v9 + 24 * v11);
    uint64_t v17 = v16[23];
    if ((v17 & 0x80u) == 0) {
      uint64_t v18 = v16[23];
    }
    else {
      uint64_t v18 = *((void *)v16 + 1);
    }
    if (v18 != v14) {
      goto LABEL_23;
    }
    int v19 = v13 >= 0 ? (unsigned __int8 *)v7 : *(unsigned __int8 **)v7;
    if ((v17 & 0x80) != 0) {
      break;
    }
    if (!v16[23]) {
      goto LABEL_26;
    }
    while (*v16 == *v19)
    {
      ++v16;
      ++v19;
      if (!--v17) {
        goto LABEL_26;
      }
    }
LABEL_23:
    if (++v11 == v15) {
      goto LABEL_24;
    }
  }
  if (memcmp(*(const void **)v16, v19, *((void *)v16 + 1))) {
    goto LABEL_23;
  }
LABEL_26:
  uint64_t v20 = *(void *)(*(void *)(*a2 + 32) + 16 * v24);
  uint64_t v21 = *(const void **)(v20 + 64);
  if (!v21
  {
LABEL_32:
    *a1 = 0;
    a1[1] = 0;
    return;
  }
  uint64_t v23 = *(std::__shared_weak_count **)(v20 + 72);
  if (v23) {
    atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(a1, v22 + 43);
  if (v23) {
    nitro::nitro_function::nitro_function(v23);
  }
}

void sub_192AFD2B8(_Unwind_Exception *exception_object)
{
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::ANECompilerEngine::get_primary_weights_file_index(id *this, Espresso::ANECompilerEngine::compiler *a2, const void *a3)
{
  v12[1] = *MEMORY[0x1E4F143B8];
  if (*((unsigned char *)this + 552))
  {
    int v4 = [MEMORY[0x1E4F1C9B8] dataWithBytesNoCopy:a2 length:a3 freeWhenDone:0];
    uint64_t v5 = [this[27] count];
    uint64_t v6 = objc_msgSend(NSString, "stringWithFormat:", @"net.weights.%lu", v5);
    uint64_t v11 = v6;
    v12[0] = v4;
    uint64_t v7 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v12 forKeys:&v11 count:1];
    id v8 = this[27];
    uint64_t v9 = [NSNumber numberWithUnsignedLong:v5];
    [v8 setObject:v7 forKeyedSubscript:v9];

    return v5;
  }
  else
  {
  }
}

void sub_192AFD450(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t Espresso::ANECompilerEngine::anonymous namespace'::get_weights_file_index(uint64_t a1)
{
  {
    unint64_t v2 = [MEMORY[0x1E4F1CB18] standardUserDefaults];
    uint64_t v3 = [v2 persistentDomainForName:*MEMORY[0x1E4F283E0]];

    int v4 = [v3 objectForKeyedSubscript:@"espresso.anecompiler.force_single_weight_file"];
  }
    return 0;
  else {
    return a1;
  }
}

void sub_192AFD538(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::add_lut_to_f16_weights(uint64_t a1, void *a2, uint64_t a3, char *a4, unsigned __int8 *a5, char a6, uint64_t a7)
{
  uint64_t v106 = *MEMORY[0x1E4F143B8];
  id v13 = a2;
  uint64_t v14 = *(void *)(a1 + 32);
  uint64_t v15 = *(std::__shared_weak_count **)(a1 + 40);
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v91, 2 * *(_DWORD *)(v14 + 8), 1, 1, 1);
  unint64_t v85 = a5;
  unsigned int v87 = v15;
  char v16 = a6;
  uint64_t v17 = v91;
  uint64_t v18 = *(int *)(v14 + 8);
  if (v18)
  {
    int v19 = *(_WORD **)(v91 + 16);
    uint64_t v20 = *(int **)(v14 + 16);
    do
    {
      int v21 = *v20++;
      _S0 = v21;
      __asm { FCVT            H0, S0 }
      *v19++ = _S0;
      --v18;
    }
    while (v18);
  }
  uint64_t v26 = v92;
  uint64_t v91 = 0;
  BOOL v92 = 0;
  std::__function::__value_func<std::pair<int,unsigned long> ()(unsigned char const*,unsigned long)>::__value_func[abi:ne180100]((uint64_t)v102, a3);
  id v90 = v13;
  uint64_t v28 = *(Espresso::bit_packer ***)a1;
  unint64_t v27 = *(std::__shared_weak_count **)(a1 + 8);
  if (v27) {
    atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v29 = *(_DWORD *)(a1 + 156);
  uint64_t v30 = *(int *)(a1 + 132) * (uint64_t)*(int *)(a1 + 128) * *(int *)(a1 + 136) * *(int *)(a1 + 140);
  uint64_t v88 = v30;
  char v89 = (unsigned __int8 *)v29;
  if (v29 == 8)
  {
    uint64_t v31 = v27;
  }
  else
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v104, *((_DWORD *)v28 + 2), 1, 1, 1);
    uint64_t v32 = (uint64_t)v28[2];
    uint64_t v28 = v104;
    Espresso::bit_packer::cast_indexes_to_n_bits_anec_format(v32, (const unsigned __int8 *)v29, v104[2], (unsigned __int8 *)v29, v30);
    uint64_t v31 = v105;
    if (v105) {
      atomic_fetch_add_explicit(&v105->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v27) {
      nitro::nitro_function::nitro_function(v27);
    }
    if (v31) {
      nitro::nitro_function::nitro_function(v31);
    }
  }
  uint64_t v100 = v17;
  uint64_t v101 = v26;
  if (v26) {
    atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  float v84 = a4;
  uint64_t v34 = (uint64_t)v104;
  uint64_t v33 = v105;
  if (v26) {
    nitro::nitro_function::nitro_function(v26);
  }
  if (v101) {
    nitro::nitro_function::nitro_function(v101);
  }
  uint64_t v98 = v28;
  unsigned int v99 = v31;
  if (v31) {
    atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v36 = v104;
  uint64_t v35 = v105;
  if (v31) {
    nitro::nitro_function::nitro_function(v31);
  }
  if (v99) {
    nitro::nitro_function::nitro_function(v99);
  }
  Espresso::swap_zero_to_first_position_anec_format(*(Espresso **)(v34 + 16), (unsigned __int8 *)2, v36[2], (unsigned __int8 *)v30, v29, 1);
  std::__function::__value_func<std::pair<int,unsigned long> ()(unsigned char const*,unsigned long)>::__value_func[abi:ne180100]((uint64_t)&v104, (uint64_t)v102);
  int v37 = Espresso::ANECompilerEngine::try_write_sparsified_lut_kernel((uint64_t)v36, v29, v30, v34, 2u, @"Float16", v85, a7, v90);
  uint64_t v39 = v38;
  std::__function::__value_func<std::pair<int,unsigned long> ()(unsigned char const*,unsigned long)>::~__value_func[abi:ne180100](&v104);
  if (v37 == 1)
  {
    uint64_t v44 = v30;
    if ((v16 & 1) == 0) {
      goto LABEL_66;
    }
    if ((v39 & 0x8000000000000000) == 0)
    {
      int v45 = v39 == 0;
      goto LABEL_63;
    }
LABEL_35:
    unsigned int v86 = v33;
    std::string __p = 0;
    unint64_t v96 = 0;
    int v97 = 0;
    std::vector<unsigned char>::reserve((unint64_t *)&__p, 2uLL);
    char v46 = 1;
    uint64_t v47 = (char *)v96;
    do
    {
      char v48 = v46;
      if (v47 >= v97)
      {
        unint64_t v50 = (unint64_t)__p;
        uint64_t v51 = v47 - (unsigned char *)__p;
        uint64_t v52 = v47 - (unsigned char *)__p + 1;
        if (v52 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v53 = v97 - (unsigned char *)__p;
        if (2 * (v97 - (unsigned char *)__p) > (unint64_t)v52) {
          uint64_t v52 = 2 * v53;
        }
        if (v53 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v54 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v54 = v52;
        }
        if (v54) {
          int v55 = (char *)operator new(v54);
        }
        else {
          int v55 = 0;
        }
        __int16 v56 = &v55[v51];
        int v57 = &v55[v51];
        *int v57 = 0;
        uint64_t v49 = v57 + 1;
        if (v47 != (char *)v50)
        {
          __int16 v58 = &v47[~v50];
          do
          {
            char v59 = *--v47;
            (v58--)[(void)v55] = v59;
          }
          while (v47 != (char *)v50);
          uint64_t v47 = (char *)__p;
          __int16 v56 = v55;
        }
        std::string __p = v56;
        unint64_t v96 = v49;
        int v97 = &v55[v54];
        if (v47) {
          operator delete(v47);
        }
      }
      else
      {
        *uint64_t v47 = 0;
        uint64_t v49 = v47 + 1;
      }
      char v46 = 0;
      unint64_t v96 = v49;
      uint64_t v47 = v49;
    }
    while ((v48 & 1) != 0);
    unint64_t v60 = *(int *)(v34 + 8);
    if (v60)
    {
      unint64_t v61 = 2;
      uint64_t v33 = v86;
      uint64_t v44 = v88;
      do
      {
        int v62 = *(unsigned __int16 *)(*(void *)(v34 + 16) + v61 - 2);
        int v63 = *(unsigned __int16 *)__p;
        int v45 = v62 != v63;
        _CF = v62 == v63 || v61 >= v60;
        v61 += 2;
      }
      while (!_CF);
      if (!__p) {
        goto LABEL_63;
      }
    }
    else
    {
      int v45 = 1;
      uint64_t v33 = v86;
      uint64_t v44 = v88;
      if (!__p)
      {
LABEL_63:
        if (v29 + v45 == 9) {
          int v29 = 8;
        }
        else {
          v29 += v45;
        }
        goto LABEL_66;
      }
    }
    unint64_t v96 = __p;
    operator delete(__p);
    goto LABEL_63;
  }
  if (v37 == 2)
  {
    uint64_t v40 = v33;
    float v41 = v35;
    unint64_t v42 = v90;
    uint64_t v43 = v87;
    goto LABEL_94;
  }
  uint64_t v44 = v30;
  if (v16) {
    goto LABEL_35;
  }
LABEL_66:
  [v90 setObject:@"Palette256" forKeyedSubscript:@"KernelMode"];
  if (v29 == 2)
  {
    char v65 = *v84;
    if ((*v84 & 2) != 0)
    {
      [v90 setObject:@"Palette4" forKeyedSubscript:@"KernelMode"];
      uint64_t v66 = 4;
      uint64_t v67 = 2;
      goto LABEL_81;
    }
LABEL_74:
    uint64_t v68 = v90;
    if ((v65 & 4) != 0)
    {
      [v90 setObject:@"Palette16" forKeyedSubscript:@"KernelMode"];
      uint64_t v66 = 16;
      uint64_t v67 = 4;
      goto LABEL_81;
    }
    goto LABEL_78;
  }
  if (v29 == 1)
  {
    char v65 = *v84;
    if (*v84)
    {
      [v90 setObject:@"Palette2" forKeyedSubscript:@"KernelMode"];
      uint64_t v66 = 2;
      uint64_t v67 = 1;
      goto LABEL_81;
    }
    goto LABEL_74;
  }
  if (v29 <= 4)
  {
    char v65 = *v84;
    goto LABEL_74;
  }
  uint64_t v68 = v90;
  if (v29 > 6)
  {
LABEL_79:
    [v68 setObject:@"Palette256" forKeyedSubscript:@"KernelMode"];
    uint64_t v66 = 256;
    uint64_t v67 = 8;
    goto LABEL_81;
  }
  char v65 = *v84;
LABEL_78:
  if ((v65 & 8) == 0) {
    goto LABEL_79;
  }
  [v68 setObject:@"Palette64" forKeyedSubscript:@"KernelMode"];
  uint64_t v66 = 64;
  uint64_t v67 = 6;
LABEL_81:
  unint64_t v42 = v90;
  uint64_t v69 = v34;
  if ((unsigned __int8 *)v67 != v89)
  {
    if (((v67 * v44) & 7) != 0) {
      int v70 = ((unint64_t)(v67 * v44) >> 3) + 1;
    }
    else {
      int v70 = (unint64_t)(v67 * v44) >> 3;
    }
    std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&__p, v70, 1, 1, 1);
    uint64_t v71 = v36[2];
    uint64_t v36 = __p;
    Espresso::bit_packer::change_index_bitwidth_anec_to_anec(v71, v89, *((Espresso::bit_packer **)__p + 2), (unsigned __int8 *)v67, v44);
    float v41 = (std::__shared_weak_count *)v96;
    if (v96) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)v96 + 1, 1uLL, memory_order_relaxed);
    }
    if (v35) {
      nitro::nitro_function::nitro_function(v35);
    }
    if (v66 == (unint64_t)*(int *)(v69 + 8) >> 1)
    {
      uint64_t v40 = v33;
      if (!v41) {
        goto LABEL_93;
      }
    }
    else
    {
      std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v93, 2 * v66, 1, 1, 1);
      uint64_t v82 = v93;
      unsigned int v83 = *(_DWORD *)(v93 + 8);
      if (*(_DWORD *)(v69 + 8) < v83) {
        unsigned int v83 = *(_DWORD *)(v69 + 8);
      }
      memcpy(*(void **)(v93 + 16), *(const void **)(v69 + 16), (int)v83);
      uint64_t v40 = v94;
      if (v94) {
        atomic_fetch_add_explicit(&v94->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v33) {
        nitro::nitro_function::nitro_function(v33);
      }
      if (v40) {
        nitro::nitro_function::nitro_function(v40);
      }
      uint64_t v69 = v82;
      if (!v41) {
        goto LABEL_93;
      }
    }
    nitro::nitro_function::nitro_function(v41);
    goto LABEL_93;
  }
  uint64_t v40 = v33;
  float v41 = v35;
LABEL_93:
  [v90 setObject:@"Float16" forKeyedSubscript:@"KernelType"];
  uint64_t v72 = std::function<std::pair<int,unsigned long> ()(unsigned char const*,unsigned long)>::operator()(v103, v36[2], *((int *)v36 + 2));
  uint64_t v74 = v73;
  uint64_t v43 = v87;
  int v75 = [NSNumber numberWithInt:v72];
  [v90 setObject:v75 forKeyedSubscript:@"KernelOffset"];

  uint64_t v76 = [NSNumber numberWithUnsignedLong:v74];
  [v90 setObject:v76 forKeyedSubscript:@"KernelIndex"];

  uint64_t v77 = std::function<std::pair<int,unsigned long> ()(unsigned char const*,unsigned long)>::operator()(v103, *(void *)(v69 + 16), *(int *)(v69 + 8));
  uint64_t v79 = v78;
  uint64_t v80 = [NSNumber numberWithInt:v77];
  [v90 setObject:v80 forKeyedSubscript:@"KernelPaletteLUTOffset"];

  char v81 = [NSNumber numberWithUnsignedLong:v79];
  [v90 setObject:v81 forKeyedSubscript:@"KernelPaletteLUTIndex"];

LABEL_94:
  if (v41) {
    nitro::nitro_function::nitro_function(v41);
  }

  std::__function::__value_func<std::pair<int,unsigned long> ()(unsigned char const*,unsigned long)>::~__value_func[abi:ne180100](v102);
  if (v40) {
    nitro::nitro_function::nitro_function(v40);
  }
  if (v92) {
    nitro::nitro_function::nitro_function(v92);
  }
  if (v43) {
    nitro::nitro_function::nitro_function(v43);
  }
}

void sub_192AFDCFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, std::__shared_weak_count *a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,std::__shared_weak_count *a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  if (v30)
  {
    nitro::nitro_function::nitro_function(v30);
    uint64_t v33 = v30;
  }
  else
  {
    uint64_t v33 = 0;
  }
  if (v33) {
    nitro::nitro_function::nitro_function(v33);
  }

  std::__function::__value_func<std::pair<int,unsigned long> ()(unsigned char const*,unsigned long)>::~__value_func[abi:ne180100]((void *)(v31 - 160));
  if (a15) {
    nitro::nitro_function::nitro_function(a15);
  }
  if (a21) {
    nitro::nitro_function::nitro_function(a21);
  }
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }

  _Unwind_Resume(a1);
}

uint64_t std::__function::__value_func<std::pair<int,unsigned long> ()(unsigned char const*,unsigned long)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  void *v3 = 0;
  return a1;
}

{
  uint64_t v3;

  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t Espresso::bit_packer::cast_indexes_to_n_bits_anec_format(uint64_t this, const unsigned __int8 *a2, Espresso::bit_packer *a3, unsigned __int8 *a4, uint64_t a5)
{
  if (a5)
  {
    uint64_t v9 = this;
    unint64_t v10 = 0;
    uint64_t v11 = 0;
    unint64_t v12 = a2;
    do
    {
      int v13 = v10 & 7;
      unint64_t v14 = (8 - v13);
      if (v14 >= v12) {
        unint64_t v15 = v12;
      }
      else {
        unint64_t v15 = (8 - v13);
      }
      if (v14 >= v12) {
        char v16 = v12;
      }
      else {
        char v16 = 8 - (v10 & 7);
      }
      unint64_t v17 = (((255 << (8 - v16)) >> v13) & *(unsigned __int8 *)(v9 + (v10 >> 3))) >> (8 - (v10 & 7) - v16);
      if (v12 > v14)
      {
        unsigned __int8 v18 = v12 - v16;
        unsigned int v19 = v18;
        unint64_t v20 = v15 + v10;
        int v21 = v17 << v18;
        unint64_t v22 = v20 >> 3;
        int v23 = v20 & 7;
        if (v19 >= 8 - v23) {
          LOBYTE(v19) = 8 - v23;
        }
        unint64_t v17 = ((((255 << (8 - v19)) >> v23) & *(unsigned __int8 *)(v9 + v22)) >> (8 - v23 - v19)) | v21;
      }
      if (a4 == (unsigned __int8 *)8) {
        *((unsigned char *)a3 + v11) = v17;
      }
      else {
        this = Espresso::bit_packer::set_pack_starts_from_lsb_val((uint64_t)a3, (unsigned __int8 *)v17, v11, (uint64_t)a4);
      }
      ++v11;
      v10 += (unint64_t)a2;
    }
    while (a5 != v11);
  }
  return this;
}

void *Espresso::ANECompilerEngine::anonymous namespace'::copy_blob_if_data_not_owned(void *result, void *a2)
{
  unint64_t v2 = result;
  uint64_t v3 = *a2;
  if (*(unsigned char *)(*a2 + 24))
  {
    uint64_t v4 = a2[1];
    *__n128 result = v3;
    result[1] = v4;
    *a2 = 0;
    a2[1] = 0;
  }
  else
  {
    uint64_t v5 = (char *)operator new(0x58uLL);
    *((void *)v5 + 1) = 0;
    *((void *)v5 + 2) = 0;
    *(void *)uint64_t v5 = &unk_1EE389A70;
    *((void *)v5 + 3) = &unk_1EE36BF70;
    *(_OWORD *)(v5 + 56) = 0u;
    *(_OWORD *)(v5 + 72) = 0u;
    size_t v6 = *(int *)(v3 + 8);
    *((_DWORD *)v5 + 8) = v6;
    uint64_t v7 = Espresso::kern_alloc_uninitialized((Espresso *)v6);
    bzero(v7, v6);
    *((void *)v5 + 5) = v7;
    v5[48] = 1;
    void *v2 = v5 + 24;
    v2[1] = v5;
    id v8 = *(const void **)(v3 + 16);
    size_t v9 = *(int *)(v3 + 8);
    return memcpy(v7, v8, v9);
  }
  return result;
}

void sub_192AFE100(_Unwind_Exception *a1)
{
  shared_owners = (std::__shared_weak_count *)v1[3].__shared_owners_;
  if (shared_owners) {
    nitro::nitro_function::nitro_function(shared_owners);
  }
  shared_weak_owners = (std::__shared_weak_count *)v1[2].__shared_weak_owners_;
  if (shared_weak_owners) {
    nitro::nitro_function::nitro_function(shared_weak_owners);
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v5);
  _Unwind_Resume(a1);
}

uint64_t Espresso::bit_packer::change_index_bitwidth_anec_to_anec(uint64_t this, const unsigned __int8 *a2, Espresso::bit_packer *a3, unsigned __int8 *a4, uint64_t a5)
{
  if (a5)
  {
    unsigned __int8 v8 = a2;
    uint64_t v9 = this;
    unint64_t v10 = 0;
    uint64_t v11 = 0;
    uint64_t v12 = a2;
    do
    {
      unsigned int v13 = 8 - (v10 & 7);
      unsigned __int8 v14 = v8;
      if (v13 < v8) {
        unsigned __int8 v14 = 8 - (v10 & 7);
      }
      unsigned int v15 = ((0xFFu >> (8 - v14) << (v10 & 7)) & *(unsigned __int8 *)(v9 + (v10 >> 3))) >> (v10 & 7);
      if (v13 < v8) {
        v15 |= ((0xFFu >> (8 - (v8 - v14))) & *(unsigned __int8 *)((v10 >> 3) + v9 + 1)) << v14;
      }
      this = Espresso::bit_packer::set_pack_starts_from_lsb_val((uint64_t)a3, (unsigned __int8 *)v15, v11++, (uint64_t)a4);
      v10 += v12;
    }
    while (a5 != v11);
  }
  return this;
}

void Espresso::ANECompilerEngine::add_lut_to_uint8_weights(uint64_t a1, void *a2, uint64_t a3, char *a4, unsigned __int8 *a5, char a6, uint64_t a7)
{
  uint64_t v81 = *MEMORY[0x1E4F143B8];
  id v12 = a2;
  uint64_t v13 = *(void *)(a1 + 64);
  unsigned __int8 v14 = *(std::__shared_weak_count **)(a1 + 72);
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::__function::__value_func<std::pair<int,unsigned long> ()(unsigned char const*,unsigned long)>::__value_func[abi:ne180100]((uint64_t)v73, a3);
  id v68 = v12;
  unint64_t v16 = *(void *)a1;
  unsigned int v15 = *(std::__shared_weak_count **)(a1 + 8);
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v17 = *(_DWORD *)(a1 + 156);
  uint64_t v67 = (unsigned __int8 *)v17;
  uint64_t v18 = *(int *)(a1 + 132) * (uint64_t)*(int *)(a1 + 128) * *(int *)(a1 + 136) * *(int *)(a1 + 140);
  if (v17 == 8)
  {
    unsigned int v19 = v15;
  }
  else
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v78, *(_DWORD *)(v16 + 8), 1, 1, 1);
    uint64_t v20 = *(void *)(v16 + 16);
    unint64_t v16 = (unint64_t)v78;
    Espresso::bit_packer::cast_indexes_to_n_bits_anec_format(v20, (const unsigned __int8 *)v17, v78[2], (unsigned __int8 *)v17, v18);
    unsigned int v19 = v79;
    if (v79) {
      atomic_fetch_add_explicit(&v79->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v15) {
      nitro::nitro_function::nitro_function(v15);
    }
    if (v19) {
      nitro::nitro_function::nitro_function(v19);
    }
  }
  uint64_t v71 = v13;
  uint64_t v72 = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v21 = (uint64_t)v78;
  uint64_t v66 = v79;
  if (v14) {
    nitro::nitro_function::nitro_function(v14);
  }
  if (v72) {
    nitro::nitro_function::nitro_function(v72);
  }
  unint64_t v69 = v16;
  int v70 = v19;
  if (v19) {
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v23 = (uint64_t)v78;
  unint64_t v22 = v79;
  if (v19) {
    nitro::nitro_function::nitro_function(v19);
  }
  if (v70) {
    nitro::nitro_function::nitro_function(v70);
  }
  Espresso::swap_zero_to_first_position_anec_format(*(Espresso **)(v21 + 16), (unsigned __int8 *)1, *(void *)(v23 + 16), (unsigned __int8 *)v18, v17, 0);
  std::__function::__value_func<std::pair<int,unsigned long> ()(unsigned char const*,unsigned long)>::__value_func[abi:ne180100]((uint64_t)v77, (uint64_t)v73);
  int v24 = Espresso::ANECompilerEngine::try_write_sparsified_lut_kernel(v23, v17, v18, v21, 1u, @"UInt8", a5, a7, v68);
  uint64_t v26 = v25;
  std::__function::__value_func<std::pair<int,unsigned long> ()(unsigned char const*,unsigned long)>::~__value_func[abi:ne180100](v77);
  if (v24 != 1)
  {
    if (v24 == 2)
    {
      unint64_t v27 = v66;
      uint64_t v28 = v22;
      int v29 = v68;
      goto LABEL_91;
    }
    if (a6) {
      goto LABEL_34;
    }
LABEL_36:
    int v29 = v68;
    goto LABEL_61;
  }
  if ((a6 & 1) == 0) {
    goto LABEL_36;
  }
  if ((v26 & 0x8000000000000000) == 0)
  {
    if (!v26) {
      ++v17;
    }
    int v29 = v68;
    goto LABEL_60;
  }
LABEL_34:
  uint64_t v78 = 0;
  uint64_t v79 = 0;
  uint64_t v80 = 0;
  std::vector<unsigned char>::reserve((unint64_t *)&v78, 1uLL);
  uint64_t v30 = (char *)v79;
  if (v79 >= (std::__shared_weak_count *)v80)
  {
    unint64_t v32 = (unint64_t)v78;
    int64_t v33 = (char *)v79 - (char *)v78;
    int64_t v34 = (char *)v79 - (char *)v78 + 1;
    if (v34 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v35 = v80 - (unsigned __int8 *)v78;
    if (2 * (v80 - (unsigned __int8 *)v78) > (unint64_t)v34) {
      int64_t v34 = 2 * v35;
    }
    if (v35 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v36 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v36 = v34;
    }
    if (v36) {
      int v37 = (Espresso::bit_packer **)operator new(v36);
    }
    else {
      int v37 = 0;
    }
    uint64_t v38 = (unsigned __int8 *)v37 + v33;
    uint64_t v39 = (unsigned __int8 *)v37 + v36;
    uint64_t v40 = (unsigned __int8 *)v37 + v33;
    *uint64_t v40 = 0;
    uint64_t v31 = (std::__shared_weak_count *)(v40 + 1);
    if (v30 == (char *)v32)
    {
      int v37 = (Espresso::bit_packer **)v38;
    }
    else
    {
      float v41 = &v30[~v32];
      do
      {
        unsigned __int8 v42 = *--v30;
        (v41--)[(void)v37] = v42;
      }
      while (v30 != (char *)v32);
      uint64_t v30 = (char *)v78;
    }
    uint64_t v78 = v37;
    uint64_t v79 = v31;
    uint64_t v80 = v39;
    int v29 = v68;
    if (!v30) {
      goto LABEL_54;
    }
    operator delete(v30);
  }
  else
  {
    LOBYTE(v79->__vftable) = 0;
    uint64_t v31 = (std::__shared_weak_count *)(v30 + 1);
    int v29 = v68;
  }
  int v37 = v78;
LABEL_54:
  uint64_t v79 = v31;
  uint64_t v43 = *(int *)(v21 + 8);
  if (v43)
  {
    uint64_t v44 = *(unsigned __int8 **)(v21 + 16);
    while (1)
    {
      int v45 = *v44++;
      if (v45 == *(unsigned __int8 *)v37) {
        break;
      }
      if (!--v43) {
        goto LABEL_58;
      }
    }
  }
  else
  {
LABEL_58:
    ++v17;
    if (!v37) {
      goto LABEL_60;
    }
  }
  uint64_t v79 = (std::__shared_weak_count *)v37;
  operator delete(v37);
LABEL_60:
  if (v17 == 9) {
    goto LABEL_62;
  }
LABEL_61:
  if (v17 == 8)
  {
LABEL_62:
    std::__function::__value_func<std::pair<int,unsigned long> ()(unsigned char const*,unsigned long)>::__value_func[abi:ne180100]((uint64_t)&v75, (uint64_t)v73);
    id v46 = v29;
    std::__function::__value_func<std::pair<int,unsigned long> ()(unsigned char const*,unsigned long)>::__value_func[abi:ne180100]((uint64_t)&v78, (uint64_t)&v75);
    id v47 = v46;
    operator new();
  }
  [v29 setObject:@"Palette256" forKeyedSubscript:@"KernelMode"];
  if (v17 == 2)
  {
    char v48 = *a4;
    if ((*a4 & 2) != 0)
    {
      [v29 setObject:@"Palette4" forKeyedSubscript:@"KernelMode"];
      uint64_t v49 = 4;
      uint64_t v50 = 2;
      goto LABEL_78;
    }
LABEL_71:
    if ((v48 & 4) != 0)
    {
      [v29 setObject:@"Palette16" forKeyedSubscript:@"KernelMode"];
      uint64_t v49 = 16;
      uint64_t v50 = 4;
      goto LABEL_78;
    }
    goto LABEL_75;
  }
  if (v17 == 1)
  {
    char v48 = *a4;
    if (*a4)
    {
      [v29 setObject:@"Palette2" forKeyedSubscript:@"KernelMode"];
      uint64_t v49 = 2;
      uint64_t v50 = 1;
      goto LABEL_78;
    }
    goto LABEL_71;
  }
  if (v17 <= 4)
  {
    char v48 = *a4;
    goto LABEL_71;
  }
  if (v17 > 6)
  {
LABEL_76:
    [v29 setObject:@"Palette256" forKeyedSubscript:@"KernelMode"];
    uint64_t v49 = 256;
    uint64_t v50 = 8;
    goto LABEL_78;
  }
  char v48 = *a4;
LABEL_75:
  if ((v48 & 8) == 0) {
    goto LABEL_76;
  }
  [v29 setObject:@"Palette64" forKeyedSubscript:@"KernelMode"];
  uint64_t v49 = 64;
  uint64_t v50 = 6;
LABEL_78:
  if ((unsigned __int8 *)v50 != v67)
  {
    if (((v50 * v18) & 7) != 0) {
      int v51 = ((unint64_t)(v50 * v18) >> 3) + 1;
    }
    else {
      int v51 = (unint64_t)(v50 * v18) >> 3;
    }
    std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v78, v51, 1, 1, 1);
    uint64_t v52 = *(void *)(v23 + 16);
    uint64_t v23 = (uint64_t)v78;
    Espresso::bit_packer::change_index_bitwidth_anec_to_anec(v52, v67, v78[2], (unsigned __int8 *)v50, v18);
    uint64_t v28 = v79;
    if (v79) {
      atomic_fetch_add_explicit(&v79->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v22) {
      nitro::nitro_function::nitro_function(v22);
    }
    if (v49 == *(_DWORD *)(v21 + 8))
    {
      unint64_t v27 = v66;
      if (!v28) {
        goto LABEL_90;
      }
    }
    else
    {
      std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v75, v49, 1, 1, 1);
      uint64_t v63 = v75;
      unsigned int v64 = *(_DWORD *)(v75 + 8);
      if (*(_DWORD *)(v21 + 8) < v64) {
        unsigned int v64 = *(_DWORD *)(v21 + 8);
      }
      memcpy(*(void **)(v75 + 16), *(const void **)(v21 + 16), (int)v64);
      unint64_t v27 = v76;
      if (v76) {
        atomic_fetch_add_explicit(&v76->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v66) {
        nitro::nitro_function::nitro_function(v66);
      }
      if (v27) {
        nitro::nitro_function::nitro_function(v27);
      }
      uint64_t v21 = v63;
      if (!v28) {
        goto LABEL_90;
      }
    }
    nitro::nitro_function::nitro_function(v28);
    goto LABEL_90;
  }
  unint64_t v27 = v66;
  uint64_t v28 = v22;
LABEL_90:
  [v29 setObject:@"UInt8" forKeyedSubscript:@"KernelType"];
  uint64_t v53 = std::function<std::pair<int,unsigned long> ()(unsigned char const*,unsigned long)>::operator()(v74, *(void *)(v23 + 16), *(int *)(v23 + 8));
  uint64_t v55 = v54;
  __int16 v56 = [NSNumber numberWithInt:v53];
  [v29 setObject:v56 forKeyedSubscript:@"KernelOffset"];

  int v57 = [NSNumber numberWithUnsignedLong:v55];
  [v29 setObject:v57 forKeyedSubscript:@"KernelIndex"];

  uint64_t v58 = std::function<std::pair<int,unsigned long> ()(unsigned char const*,unsigned long)>::operator()(v74, *(void *)(v21 + 16), *(int *)(v21 + 8));
  uint64_t v60 = v59;
  unint64_t v61 = [NSNumber numberWithInt:v58];
  [v29 setObject:v61 forKeyedSubscript:@"KernelPaletteLUTOffset"];

  int v62 = [NSNumber numberWithUnsignedLong:v60];
  [v29 setObject:v62 forKeyedSubscript:@"KernelPaletteLUTIndex"];

LABEL_91:
  if (v28) {
    nitro::nitro_function::nitro_function(v28);
  }

  std::__function::__value_func<std::pair<int,unsigned long> ()(unsigned char const*,unsigned long)>::~__value_func[abi:ne180100](v73);
  if (v27) {
    nitro::nitro_function::nitro_function(v27);
  }
}

void sub_192AFEB58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, std::__shared_weak_count *a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  if (v11)
  {
    nitro::nitro_function::nitro_function(v11);
    uint64_t v13 = v11;
  }
  else
  {
    uint64_t v13 = 0;
  }
  if (v13) {
    nitro::nitro_function::nitro_function(v13);
  }

  std::__function::__value_func<std::pair<int,unsigned long> ()(unsigned char const*,unsigned long)>::~__value_func[abi:ne180100](va);
  if (a5) {
    nitro::nitro_function::nitro_function(a5);
  }

  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::add_lut_to_int8_weights(uint64_t a1, void *a2, uint64_t a3, char *a4, unsigned __int8 *a5, char a6, uint64_t a7)
{
  uint64_t v81 = *MEMORY[0x1E4F143B8];
  id v11 = a2;
  uint64_t v12 = *(void *)(a1 + 48);
  int v13 = *(_DWORD *)(v12 + 8);
  unsigned __int8 v14 = (char *)operator new(0x58uLL);
  *((void *)v14 + 1) = 0;
  *((void *)v14 + 2) = 0;
  *(void *)unsigned __int8 v14 = &unk_1EE389A70;
  uint64_t v15 = *(void *)(v12 + 16);
  *((void *)v14 + 3) = &unk_1EE36BF70;
  *(_OWORD *)(v14 + 72) = 0u;
  *(_OWORD *)(v14 + 56) = 0u;
  *((_DWORD *)v14 + 8) = v13;
  *((void *)v14 + 5) = v15;
  v14[48] = 0;
  std::__function::__value_func<std::pair<int,unsigned long> ()(unsigned char const*,unsigned long)>::__value_func[abi:ne180100]((uint64_t)v73, a3);
  id v68 = v11;
  unint64_t v17 = *(void *)a1;
  unint64_t v16 = *(std::__shared_weak_count **)(a1 + 8);
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v18 = *(_DWORD *)(a1 + 156);
  unsigned int v19 = (const unsigned __int8 *)v18;
  uint64_t v20 = *(int *)(a1 + 132) * (uint64_t)*(int *)(a1 + 128) * *(int *)(a1 + 136) * *(int *)(a1 + 140);
  if (v18 == 8)
  {
    uint64_t v21 = v16;
  }
  else
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v78, *(_DWORD *)(v17 + 8), 1, 1, 1);
    uint64_t v22 = *(void *)(v17 + 16);
    unint64_t v17 = (unint64_t)v78;
    Espresso::bit_packer::cast_indexes_to_n_bits_anec_format(v22, (const unsigned __int8 *)v18, v78[2], (unsigned __int8 *)v18, v20);
    uint64_t v21 = v79;
    if (v79) {
      atomic_fetch_add_explicit(&v79->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v16) {
      nitro::nitro_function::nitro_function(v16);
    }
    if (v21) {
      nitro::nitro_function::nitro_function(v21);
    }
  }
  uint64_t v71 = v14 + 24;
  uint64_t v72 = (std::__shared_weak_count *)v14;
  atomic_fetch_add_explicit((atomic_ullong *volatile)v14 + 1, 1uLL, memory_order_relaxed);
  uint64_t v23 = (uint64_t)v78;
  uint64_t v67 = v79;
  nitro::nitro_function::nitro_function((std::__shared_weak_count *)v14);
  if (v72) {
    nitro::nitro_function::nitro_function(v72);
  }
  unint64_t v69 = v17;
  int v70 = v21;
  if (v21) {
    atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v24 = v68;
  uint64_t v26 = (uint64_t)v78;
  uint64_t v25 = v79;
  if (v21) {
    nitro::nitro_function::nitro_function(v21);
  }
  if (v70) {
    nitro::nitro_function::nitro_function(v70);
  }
  Espresso::swap_zero_to_first_position_anec_format(*(Espresso **)(v23 + 16), (unsigned __int8 *)1, *(void *)(v26 + 16), (unsigned __int8 *)v20, v18, 0);
  std::__function::__value_func<std::pair<int,unsigned long> ()(unsigned char const*,unsigned long)>::__value_func[abi:ne180100]((uint64_t)v77, (uint64_t)v73);
  int v27 = Espresso::ANECompilerEngine::try_write_sparsified_lut_kernel(v26, v18, v20, v23, 1u, @"Int8", a5, a7, v68);
  uint64_t v29 = v28;
  std::__function::__value_func<std::pair<int,unsigned long> ()(unsigned char const*,unsigned long)>::~__value_func[abi:ne180100](v77);
  if (v27 == 1)
  {
    if ((a6 & 1) == 0) {
      goto LABEL_54;
    }
    if ((v29 & 0x8000000000000000) == 0)
    {
      if (!v29) {
        ++v18;
      }
      goto LABEL_53;
    }
  }
  else
  {
    if (v27 == 2)
    {
      uint64_t v30 = v67;
      uint64_t v31 = v25;
      goto LABEL_84;
    }
    if ((a6 & 1) == 0) {
      goto LABEL_54;
    }
  }
  uint64_t v78 = 0;
  uint64_t v79 = 0;
  uint64_t v80 = 0;
  std::vector<unsigned char>::reserve((unint64_t *)&v78, 1uLL);
  unint64_t v32 = (char *)v79;
  if (v79 >= (std::__shared_weak_count *)v80)
  {
    unint64_t v34 = (unint64_t)v78;
    int64_t v35 = (char *)v79 - (char *)v78;
    int64_t v36 = (char *)v79 - (char *)v78 + 1;
    if (v36 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v37 = v80 - (unsigned __int8 *)v78;
    if (2 * (v80 - (unsigned __int8 *)v78) > (unint64_t)v36) {
      int64_t v36 = 2 * v37;
    }
    if (v37 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v38 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v38 = v36;
    }
    if (v38) {
      uint64_t v39 = (Espresso::bit_packer **)operator new(v38);
    }
    else {
      uint64_t v39 = 0;
    }
    uint64_t v40 = (unsigned __int8 *)v39 + v38;
    *((unsigned char *)v39 + v35) = 0;
    uint64_t v33 = (uint64_t)v39 + v35 + 1;
    if (v32 == (char *)v34)
    {
      uint64_t v39 = (Espresso::bit_packer **)((char *)v39 + v35);
      int v24 = v68;
    }
    else
    {
      float v41 = &v32[~v34];
      int v24 = v68;
      do
      {
        unsigned __int8 v42 = *--v32;
        (v41--)[(void)v39] = v42;
      }
      while (v32 != (char *)v34);
      unint64_t v32 = (char *)v78;
    }
    uint64_t v78 = v39;
    uint64_t v79 = (std::__shared_weak_count *)v33;
    uint64_t v80 = v40;
    if (!v32) {
      goto LABEL_47;
    }
    operator delete(v32);
  }
  else
  {
    LOBYTE(v79->__vftable) = 0;
    uint64_t v33 = (uint64_t)(v32 + 1);
  }
  uint64_t v39 = v78;
LABEL_47:
  uint64_t v79 = (std::__shared_weak_count *)v33;
  uint64_t v43 = *(int *)(v23 + 8);
  if (v43)
  {
    uint64_t v44 = *(unsigned __int8 **)(v23 + 16);
    while (1)
    {
      int v45 = *v44++;
      if (v45 == *(unsigned __int8 *)v39) {
        break;
      }
      if (!--v43) {
        goto LABEL_51;
      }
    }
  }
  else
  {
LABEL_51:
    ++v18;
    if (!v39) {
      goto LABEL_53;
    }
  }
  uint64_t v79 = (std::__shared_weak_count *)v39;
  operator delete(v39);
LABEL_53:
  if (v18 == 9) {
    goto LABEL_55;
  }
LABEL_54:
  if (v18 == 8)
  {
LABEL_55:
    std::__function::__value_func<std::pair<int,unsigned long> ()(unsigned char const*,unsigned long)>::__value_func[abi:ne180100]((uint64_t)&v75, (uint64_t)v73);
    id v46 = v24;
    std::__function::__value_func<std::pair<int,unsigned long> ()(unsigned char const*,unsigned long)>::__value_func[abi:ne180100]((uint64_t)&v78, (uint64_t)&v75);
    id v47 = v46;
    operator new();
  }
  [v24 setObject:@"Palette256" forKeyedSubscript:@"KernelMode"];
  if (v18 == 2)
  {
    char v48 = *a4;
    if ((*a4 & 2) != 0)
    {
      [v24 setObject:@"Palette4" forKeyedSubscript:@"KernelMode"];
      uint64_t v49 = 4;
      uint64_t v50 = 2;
      goto LABEL_71;
    }
LABEL_64:
    if ((v48 & 4) != 0)
    {
      [v24 setObject:@"Palette16" forKeyedSubscript:@"KernelMode"];
      uint64_t v49 = 16;
      uint64_t v50 = 4;
      goto LABEL_71;
    }
    goto LABEL_68;
  }
  if (v18 == 1)
  {
    char v48 = *a4;
    if (*a4)
    {
      [v24 setObject:@"Palette2" forKeyedSubscript:@"KernelMode"];
      uint64_t v49 = 2;
      uint64_t v50 = 1;
      goto LABEL_71;
    }
    goto LABEL_64;
  }
  if (v18 <= 4)
  {
    char v48 = *a4;
    goto LABEL_64;
  }
  if (v18 > 6)
  {
LABEL_69:
    [v24 setObject:@"Palette256" forKeyedSubscript:@"KernelMode"];
    uint64_t v49 = 256;
    uint64_t v50 = 8;
    goto LABEL_71;
  }
  char v48 = *a4;
LABEL_68:
  if ((v48 & 8) == 0) {
    goto LABEL_69;
  }
  [v24 setObject:@"Palette64" forKeyedSubscript:@"KernelMode"];
  uint64_t v49 = 64;
  uint64_t v50 = 6;
LABEL_71:
  if ((const unsigned __int8 *)v50 != v19)
  {
    if (((v50 * v20) & 7) != 0) {
      int v51 = ((unint64_t)(v50 * v20) >> 3) + 1;
    }
    else {
      int v51 = (unint64_t)(v50 * v20) >> 3;
    }
    std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v78, v51, 1, 1, 1);
    uint64_t v52 = *(void *)(v26 + 16);
    uint64_t v26 = (uint64_t)v78;
    Espresso::bit_packer::change_index_bitwidth_anec_to_anec(v52, v19, v78[2], (unsigned __int8 *)v50, v20);
    uint64_t v31 = v79;
    if (v79) {
      atomic_fetch_add_explicit(&v79->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v25) {
      nitro::nitro_function::nitro_function(v25);
    }
    if (v49 == *(_DWORD *)(v23 + 8))
    {
      uint64_t v30 = v67;
      if (!v31) {
        goto LABEL_83;
      }
    }
    else
    {
      std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v75, v49, 1, 1, 1);
      uint64_t v63 = v75;
      unsigned int v64 = *(_DWORD *)(v75 + 8);
      if (*(_DWORD *)(v23 + 8) < v64) {
        unsigned int v64 = *(_DWORD *)(v23 + 8);
      }
      memcpy(*(void **)(v75 + 16), *(const void **)(v23 + 16), (int)v64);
      uint64_t v30 = v76;
      if (v76) {
        atomic_fetch_add_explicit(&v76->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v67) {
        nitro::nitro_function::nitro_function(v67);
      }
      if (v30) {
        nitro::nitro_function::nitro_function(v30);
      }
      uint64_t v23 = v63;
      if (!v31) {
        goto LABEL_83;
      }
    }
    nitro::nitro_function::nitro_function(v31);
    goto LABEL_83;
  }
  uint64_t v30 = v67;
  uint64_t v31 = v25;
LABEL_83:
  [v24 setObject:@"Int8" forKeyedSubscript:@"KernelType"];
  uint64_t v53 = std::function<std::pair<int,unsigned long> ()(unsigned char const*,unsigned long)>::operator()(v74, *(void *)(v26 + 16), *(int *)(v26 + 8));
  uint64_t v55 = v54;
  __int16 v56 = [NSNumber numberWithInt:v53];
  [v24 setObject:v56 forKeyedSubscript:@"KernelOffset"];

  int v57 = [NSNumber numberWithUnsignedLong:v55];
  [v24 setObject:v57 forKeyedSubscript:@"KernelIndex"];

  uint64_t v58 = std::function<std::pair<int,unsigned long> ()(unsigned char const*,unsigned long)>::operator()(v74, *(void *)(v23 + 16), *(int *)(v23 + 8));
  uint64_t v60 = v59;
  unint64_t v61 = [NSNumber numberWithInt:v58];
  [v24 setObject:v61 forKeyedSubscript:@"KernelPaletteLUTOffset"];

  int v62 = [NSNumber numberWithUnsignedLong:v60];
  [v24 setObject:v62 forKeyedSubscript:@"KernelPaletteLUTIndex"];

LABEL_84:
  if (v31) {
    nitro::nitro_function::nitro_function(v31);
  }

  std::__function::__value_func<std::pair<int,unsigned long> ()(unsigned char const*,unsigned long)>::~__value_func[abi:ne180100](v73);
  if (v30) {
    nitro::nitro_function::nitro_function(v30);
  }
}

void sub_192AFF638(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, std::__shared_weak_count *a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  if (v13)
  {
    nitro::nitro_function::nitro_function(v13);
    uint64_t v15 = v13;
  }
  else
  {
    uint64_t v15 = 0;
  }
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }

  std::__function::__value_func<std::pair<int,unsigned long> ()(unsigned char const*,unsigned long)>::~__value_func[abi:ne180100](va);
  if (a8) {
    nitro::nitro_function::nitro_function(a8);
  }

  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::add_vector_broadcasting(uint64_t a1, id *a2, uint64_t a3, const std::string *a4, unsigned int *a5)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&v28.__r_.__value_.__l.__data_, a2);
  std::string::operator=(&v28, a4);
  uint64_t v43 = @"BroadcastInfo";
  v41[0] = @"Height";
  v40[0] = @"Dimension";
  v40[1] = @"Size";
  int v27 = [NSNumber numberWithInt:a5[1]];
  v41[1] = v27;
  uint64_t v9 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v41 forKeys:v40 count:2];
  v42[0] = v9;
  v38[1] = @"Size";
  v39[0] = @"Channel";
  v38[0] = @"Dimension";
  unint64_t v10 = [NSNumber numberWithInt:a5[2]];
  v39[1] = v10;
  id v11 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v39 forKeys:v38 count:2];
  v42[1] = v11;
  v36[1] = @"Size";
  v37[0] = @"Batch";
  v36[0] = @"Dimension";
  uint64_t v12 = [NSNumber numberWithInt:a5[4] * a5[3]];
  v37[1] = v12;
  int v13 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v37 forKeys:v36 count:2];
  _OWORD v42[2] = v13;
  unsigned __int8 v14 = [MEMORY[0x1E4F1C978] arrayWithObjects:v42 count:3];
  uint64_t v44 = v14;
  uint64_t v15 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v44 forKeys:&v43 count:1];
  unint64_t v16 = (void *)[v15 mutableCopy];
  id v17 = v35;
  id v35 = v16;

  int v18 = v34;
  unint64_t v34 = @"Broadcast";

  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string __str = *(std::string *)a3;
  }
  std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v30, &__str, &v46, 1uLL);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  unint64_t v19 = *(void *)(a1 + 16);
  unint64_t v20 = *(void *)(a1 + 8);
  if (v20 >= v19)
  {
    unint64_t v22 = 0x8E38E38E38E38E39 * ((uint64_t)(v20 - *(void *)a1) >> 4);
    if (v22 + 1 > 0x1C71C71C71C71C7) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v23 = 0x8E38E38E38E38E39 * ((uint64_t)(v19 - *(void *)a1) >> 4);
    uint64_t v24 = 2 * v23;
    if (2 * v23 <= v22 + 1) {
      uint64_t v24 = v22 + 1;
    }
    if (v23 >= 0xE38E38E38E38E3) {
      unint64_t v25 = 0x1C71C71C71C71C7;
    }
    else {
      unint64_t v25 = v24;
    }
    *((void *)&v46 + 1) = a1 + 16;
    if (v25) {
      unint64_t v25 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v25);
    }
    else {
      uint64_t v26 = 0;
    }
    __str.__r_.__value_.__r.__words[0] = v25;
    __str.__r_.__value_.__l.__size_ = v25 + 144 * v22;
    __str.__r_.__value_.__r.__words[2] = __str.__r_.__value_.__l.__size_;
    *(void *)&long long v46 = v25 + 144 * v26;
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)__str.__r_.__value_.__l.__size_, (uint64_t)&v28);
    __str.__r_.__value_.__r.__words[2] += 144;
    std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer((uint64_t *)a1, &__str);
    unint64_t v21 = *(void *)(a1 + 8);
    std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&__str);
  }
  else
  {
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(*(std::string **)(a1 + 8), (uint64_t)&v28);
    unint64_t v21 = v20 + 144;
    *(void *)(a1 + 8) = v21;
  }
  *(void *)(a1 + 8) = v21;

  if (v32 < 0) {
    operator delete(__p);
  }
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v30;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
}

void sub_192AFFBF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t((id *)va);
  _Unwind_Resume(a1);
}

uint64_t Espresso::MPSGraphEngine::Kernels::gather_nd_kernel::is_valid_for_engine(uint64_t a1, int64x2_t **a2, void *a3)
{
  uint64_t v4 = a3[1] - *a3;
  if (v4 == 128)
  {
    int v6 = *(_DWORD *)(a1 + 288);
    if (!v6) {
      return 1;
    }
    uint64_t v7 = a2[1];
    v11[0] = *a2;
    v11[1] = v7;
    if (v7)
    {
      atomic_fetch_add_explicit(&v7->i64[1], 1uLL, memory_order_relaxed);
      int v6 = *(_DWORD *)(a1 + 288);
    }
    std::to_string(&v12, v6);
    unsigned __int8 v8 = std::string::insert(&v12, 0, "[Dispatch::MPSGraph::gather_nd_kernel] unsupported: batch_dims must be 0, received ");
    std::string v13 = *v8;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)&v13, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v11, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
  }
  else
  {
    uint64_t v7 = a2[1];
    v18[0] = *a2;
    v18[1] = v7;
    if (v7)
    {
      atomic_fetch_add_explicit(&v7->i64[1], 1uLL, memory_order_relaxed);
      uint64_t v4 = a3[1] - *a3;
    }
    std::to_string(&v12, v4 >> 6);
    uint64_t v9 = std::string::insert(&v12, 0, "[Dispatch::MPSGraph::gather_nd_kernel] unsupported: number of inputs must be 2, received ");
    std::string v13 = *v9;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)&v13, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v18, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
  }
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
  unint64_t v19 = (void **)&v16;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v19);
  unint64_t v19 = (void **)&v15;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v19);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
  if (v7) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v7);
  }
  return 0;
}

void sub_192AFFE5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((Espresso::base_kernel::validate_for_engine_warning_t *)&a24);
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a17 < 0) {
    operator delete(a12);
  }
  if (v24) {
    nitro::nitro_function::nitro_function(v24);
  }
  _Unwind_Resume(a1);
}

void Espresso::MPSGraphEngine::Kernels::gather_nd_kernel::~gather_nd_kernel(Espresso::MPSGraphEngine::Kernels::gather_nd_kernel *this)
{
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

Espresso::sequential_builder *Espresso::sequential_builder::sequential_builder(Espresso::sequential_builder *this, uint64_t *a2, uint64_t *a3, int a4, uint64_t *a5)
{
  *((void *)this + 3) = 0;
  *((void *)this + 2) = (char *)this + 24;
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 4) = 0;
  *(_OWORD *)((char *)this + 136) = 0u;
  *((void *)this + 24) = 0;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((void *)this + 15) = 0;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *((unsigned char *)this + 184) = 0;
  uint64_t v9 = *a5;
  uint64_t v10 = a5[1];
  if (v10)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
    id v11 = (std::__shared_weak_count *)*((void *)this + 13);
    *((void *)this + 12) = v9;
    *((void *)this + 13) = v10;
    if (v11) {
      nitro::nitro_function::nitro_function(v11);
    }
  }
  else
  {
    *((void *)this + 13) = 0;
    *((void *)this + 12) = v9;
  }
  uint64_t v13 = *a3;
  uint64_t v12 = a3[1];
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  unsigned __int8 v14 = (std::__shared_weak_count *)*((void *)this + 15);
  *((void *)this + 14) = v13;
  *((void *)this + 15) = v12;
  if (v14) {
    nitro::nitro_function::nitro_function(v14);
  }
  *((_DWORD *)this + 32) = a4;
  if (*((char *)this + 79) < 0)
  {
    **((unsigned char **)this + 7) = 0;
    *((void *)this + 8) = 0;
  }
  else
  {
    *((unsigned char *)this + 56) = 0;
    *((unsigned char *)this + 79) = 0;
  }
  if (!*((void *)this + 12))
  {
    Espresso::abstract_engine_factory::shared(v21);
    uint64_t v15 = v21[1];
    uint64_t v16 = (std::__shared_weak_count *)*((void *)this + 13);
    *((void *)this + 12) = v21[0];
    *((void *)this + 13) = v15;
    if (v16) {
      nitro::nitro_function::nitro_function(v16);
    }
  }
  uint64_t v17 = *a2;
  uint64_t v18 = a2[1];
  if (v18) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v19 = (std::__shared_weak_count *)*((void *)this + 11);
  *((void *)this + 10) = v17;
  *((void *)this + 11) = v18;
  if (v19)
  {
    nitro::nitro_function::nitro_function(v19);
    uint64_t v17 = *((void *)this + 10);
  }
  if (v17) {
    Espresso::sequential_builder::init_net_shape(this);
  }
  return this;
}

void sub_192B0007C(_Unwind_Exception *a1)
{
  std::deque<std::pair<std::shared_ptr<Espresso::abstract_context>,Espresso::compute_path>>::~deque[abi:ne180100](v3);
  int v6 = *(std::__shared_weak_count **)(v1 + 120);
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }
  if (*v4) {
    nitro::nitro_function::nitro_function(*v4);
  }
  uint64_t v7 = *(std::__shared_weak_count **)(v1 + 88);
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  if (*(char *)(v1 + 79) < 0) {
    operator delete(*(void **)(v1 + 56));
  }
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy(v2, *(void **)(v1 + 24));
  unsigned __int8 v8 = *(std::__shared_weak_count **)(v1 + 8);
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  _Unwind_Resume(a1);
}

void Espresso::sequential_builder::init_net_shape(Espresso::sequential_builder *this)
{
  if (!*(void *)this)
  {
    uint64_t v2 = operator new(0x48uLL);
    v2[1] = 0;
    v2[2] = 0;
    void *v2 = &unk_1EE381D88;
    v2[8] = 0;
    v2[7] = 0;
    v2[5] = 0;
    v2[6] = v2 + 7;
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 1);
    *((void *)this + 1) = v2;
    v2[4] = 0;
    v2[3] = v2 + 4;
    *(void *)this = v2 + 3;
    if (v3) {
      nitro::nitro_function::nitro_function(v3);
    }
    for (uint64_t i = *(long long **)(*((void *)this + 10) + 152); i; uint64_t i = *(long long **)i)
    {
      std::pair<std::string const,std::shared_ptr<Espresso::blob<float,4>>>::pair[abi:ne180100](&__p, i + 1);
      Espresso::abstract_blob_container::shape((char *)v9, v14);
      uint64_t v5 = *(uint64_t ***)this;
      p_p = &__p;
      int v6 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v5, &__p, (long long **)&p_p);
      long long v7 = v9[1];
      *(_OWORD *)(v6 + 56) = v9[0];
      *(_OWORD *)(v6 + 72) = v7;
      *((void *)v6 + 11) = v10;
      unsigned __int8 v8 = (void *)*((void *)v6 + 12);
      if (v8)
      {
        *((void *)v6 + 13) = v8;
        operator delete(v8);
        *((void *)v6 + 12) = 0;
        *((void *)v6 + 13) = 0;
        *((void *)v6 + 14) = 0;
      }
      *((_OWORD *)v6 + 6) = v11;
      *((void *)v6 + 14) = v12;
      if (v15) {
        nitro::nitro_function::nitro_function(v15);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
  }
}

void sub_192B0021C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, char a17)
{
  if (__p) {
    operator delete(__p);
  }
  std::pair<std::string,std::shared_ptr<Espresso::abstract_blob_container>>::~pair((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::network_shape>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2 = a1 + 24;
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy(a1 + 48, *(char **)(a1 + 56));
  uint64_t v3 = *(char **)(a1 + 32);

  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy(v2, v3);
}

void std::__shared_ptr_emplace<Espresso::network_shape>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE381D88;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::network_shape>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE381D88;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::sequential_builder::build_from_data_shape(uint64_t a1@<X0>, char *a2@<X1>, void *a3@<X8>)
{
  v17[0] = 0;
  v17[1] = 0;
  uint64_t v16 = v17;
  uint64_t v5 = *(void *)(a1 + 80);
  if (*(void *)(v5 + 40) != *(void *)(v5 + 32))
  {
    unint64_t v7 = 0;
    while (1)
    {
      __p.__r_.__value_.__r.__words[0] = v7;
      unsigned __int8 v8 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v5 + 56, v7, &__p);
      if (v8[4] != v8[3]) {
        break;
      }
      ++v7;
      uint64_t v5 = *(void *)(a1 + 80);
      if (v7 >= (uint64_t)(*(void *)(v5 + 40) - *(void *)(v5 + 32)) >> 4) {
        goto LABEL_13;
      }
    }
    uint64_t v9 = *(void *)(a1 + 80) + 56;
    p_p = (std::string *)v7;
    uint64_t v10 = (long long *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v9, v7, &p_p)[3];
    if (*((char *)v10 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v10, *((void *)v10 + 1));
    }
    else
    {
      long long v11 = *v10;
      __p.__r_.__value_.__r.__words[2] = *((void *)v10 + 2);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v11;
    }
    p_p = &__p;
    uint64_t v12 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v16, &__p, (long long **)&p_p);
    long long v13 = *(_OWORD *)a2;
    long long v14 = *((_OWORD *)a2 + 1);
    *((void *)v12 + 11) = *((void *)a2 + 4);
    *(_OWORD *)(v12 + 72) = v14;
    *(_OWORD *)(v12 + 56) = v13;
    if (v12 + 56 != a2) {
      std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v12 + 96, *((char **)a2 + 5), *((void *)a2 + 6), (uint64_t)(*((void *)a2 + 6) - *((void *)a2 + 5)) >> 2);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
LABEL_13:
  Espresso::sequential_builder::build_from_shapes(a1, (uint64_t)&v16, a3);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v16, v17[0]);
}

void sub_192B00460(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, char *a17)
{
}

void Espresso::sequential_builder::infer_shapes_and_build(Espresso::sequential_builder *this@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  unsigned __int8 v42 = v43;
  v43[0] = 0;
  v45[0] = 0;
  v45[1] = 0;
  v43[1] = 0;
  uint64_t v44 = v45;
  int v6 = (void *)*((void *)this + 10);
  unint64_t v7 = (long long *)v6[19];
  char v32 = a3;
  if (v7)
  {
    do
    {
      std::pair<std::string const,std::shared_ptr<Espresso::blob<float,4>>>::pair[abi:ne180100](&__p, v7 + 1);
      Espresso::abstract_blob_container::shape((char *)&v34, v40);
      v47[0] = (long long *)&__p;
      unsigned __int8 v8 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v42, &__p, v47);
      long long v9 = v35;
      *(_OWORD *)(v8 + 56) = v34;
      *(_OWORD *)(v8 + 72) = v9;
      *((void *)v8 + 11) = v36;
      uint64_t v10 = (void *)*((void *)v8 + 12);
      if (v10)
      {
        *((void *)v8 + 13) = v10;
        operator delete(v10);
        *((void *)v8 + 12) = 0;
        *((void *)v8 + 13) = 0;
        *((void *)v8 + 14) = 0;
      }
      *((_OWORD *)v8 + 6) = v37;
      *((void *)v8 + 14) = v38;
      if (v41) {
        nitro::nitro_function::nitro_function(v41);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      unint64_t v7 = *(long long **)v7;
    }
    while (v7);
    int v6 = (void *)*((void *)this + 10);
  }
  for (i = a2; i < (uint64_t)(v6[5] - v6[4]) >> 4; int v6 = (void *)*((void *)this + 10))
  {
    *(void *)&long long v34 = &i;
    long long v11 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)(v6 + 12), &i, (uint64_t)&std::piecewise_construct, (uint64_t **)&v34);
    long long v13 = (void *)v11[3];
    uint64_t v12 = (void *)v11[4];
    while (v13 != v12)
    {
      if (v43 == std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>((uint64_t)&v42, v13))
      {
        long long v34 = 0uLL;
        *(void *)&long long v35 = 0;
        uint64_t v14 = *((void *)this + 10) + 56;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&i;
        uint64_t v15 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v14, &i, (uint64_t)&std::piecewise_construct, (uint64_t **)&__p);
        uint64_t v17 = (void *)v15[3];
        uint64_t v16 = (void *)v15[4];
        while (v17 != v16)
        {
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v17;
          uint64_t v18 = (long long *)(std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v42, v17, (long long **)&__p)+ 56);
          uint64_t v19 = *((void *)&v34 + 1);
          if (*((void *)&v34 + 1) >= (unint64_t)v35)
          {
            uint64_t v20 = std::vector<Espresso::layer_shape>::__push_back_slow_path<Espresso::layer_shape const&>((uint64_t *)&v34, v18);
          }
          else
          {
            std::vector<Espresso::layer_shape>::__construct_one_at_end[abi:ne180100]<Espresso::layer_shape const&>((uint64_t)&v34, v18);
            uint64_t v20 = v19 + 64;
          }
          *((void *)&v34 + 1) = v20;
          v17 += 3;
        }
        (*(void (**)(std::string *__return_ptr))(**(void **)(*(void *)(*(void *)(*((void *)this + 10)
                                                                                                + 32)
                                                                                    + 16 * i)
                                                                        + 64)
                                                          + 64))(&__p);
        uint64_t v21 = 0;
        uint64_t v22 = 0;
        for (unint64_t j = 0; ; ++j)
        {
          uint64_t v24 = *((void *)this + 10) + 96;
          p_unint64_t i = &i;
          unint64_t v25 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v24, &i, (uint64_t)&std::piecewise_construct, (uint64_t **)&p_i);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v25[4] - v25[3]) >> 3) <= j) {
            break;
          }
          uint64_t v26 = *((void *)this + 10) + 96;
          p_unint64_t i = &i;
          int v27 = (uint64_t *)(std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v26, &i, (uint64_t)&std::piecewise_construct, (uint64_t **)&p_i)[3]+ v22);
          if (v43 == std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>((uint64_t)&v42, v27))
          {
            std::string::size_type v28 = __p.__r_.__value_.__r.__words[0];
            p_unint64_t i = (unint64_t *)v27;
            uint64_t v29 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v42, v27, (long long **)&p_i);
            long long v30 = *(_OWORD *)(v28 + v21);
            long long v31 = *(_OWORD *)(v28 + v21 + 16);
            *((void *)v29 + 11) = *(void *)(v28 + v21 + 32);
            *(_OWORD *)(v29 + 72) = v31;
            *(_OWORD *)(v29 + 56) = v30;
            if ((char *)(v28 + v21) != v29 + 56) {
              std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v29 + 96, *(char **)(v28 + v21 + 40), *(void *)(v28 + v21 + 48), (uint64_t)(*(void *)(v28 + v21 + 48) - *(void *)(v28 + v21 + 40)) >> 2);
            }
          }
          v22 += 24;
          v21 += 64;
        }
        v47[0] = (long long *)&__p;
        std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v47);
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v34;
        std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
        break;
      }
      v13 += 3;
    }
    ++i;
  }
  Espresso::sequential_builder::build_from_shapes((uint64_t)this, (uint64_t)&v42, 1, v32);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v44, v45[0]);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v42, v43[0]);
}

void sub_192B0082C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char *a25)
{
}

void Espresso::sequential_builder::build_from_network_shape(Espresso::sequential_builder *this@<X0>, const Espresso::network_shape *a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = (Espresso *)*((void *)this + 10);
  int v6 = (std::__shared_weak_count *)*((void *)this + 11);
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::shape_network_recursive(v5, a2, 0, 0);
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }
  uint64_t v7 = *((void *)this + 11);
  *a3 = *((void *)this + 10);
  a3[1] = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
}

void sub_192B00920(_Unwind_Exception *exception_object)
{
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::sequential_builder::add_layer_from_network(uint64_t a1, void **a2, int a3, const std::string **a4)
{
}

void Espresso::sequential_builder::copy_layer_from_network(uint64_t a1, void *a2, unint64_t a3, const std::string **a4)
{
  long long v18 = 0uLL;
  uint64_t v19 = 0;
  Espresso::map_const_get<std::unordered_map<unsigned long,std::vector<std::string>>>(&v20, a2 + 7, a3, 0, 0);
  v17.__r_.__value_.__r.__words[0] = (std::string::size_type)&v18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v17);
  memset(&v17, 0, sizeof(v17));
  Espresso::map_const_get<std::unordered_map<unsigned long,std::vector<std::string>>>(&v18, a2 + 12, a3, 0, 0);
  uint64_t v22 = &v17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v22);
  uint64_t v8 = a2[4] + 16 * a3;
  uint64_t v9 = *(void *)v8;
  uint64_t v10 = *(std::__shared_weak_count **)(*(void *)v8 + 72);
  uint64_t v15 = *(void *)(*(void *)v8 + 64);
  uint64_t v16 = v10;
  if (v10)
  {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v9 = *(void *)v8;
  }
  if (*(char *)(v9 + 223) < 0) {
    std::string::__init_copy_ctor_external(&v17, *(const std::string::value_type **)(v9 + 200), *(void *)(v9 + 208));
  }
  else {
    std::string v17 = *(std::string *)(v9 + 200);
  }
  long long v13 = v20;
  uint64_t v14 = v21;
  uint64_t v21 = 0;
  long long v20 = 0uLL;
  long long v11 = v18;
  uint64_t v12 = v19;
  long long v18 = 0uLL;
  uint64_t v19 = 0;
  Espresso::sequential_builder::add_kernel_dbg(a1, &v15, v9 + 40, v9 + 16, (uint64_t)&v17, (std::string **)&v13, (std::string **)&v11);
  uint64_t v22 = (std::string *)&v11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v22);
  uint64_t v22 = (std::string *)&v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v22);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v17.__r_.__value_.__l.__data_);
  }
  if (v16) {
    nitro::nitro_function::nitro_function(v16);
  }
  v17.__r_.__value_.__r.__words[0] = (std::string::size_type)&v18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v17);
  *(void *)&long long v18 = &v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
}

void sub_192B00AF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  std::string __p = &a26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  a26 = v26 - 80;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a26);
  _Unwind_Resume(a1);
}

void Espresso::map_const_get<std::unordered_map<unsigned long,std::vector<std::string>>>(void *a1, void *a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::find<unsigned long>(a2, a3);
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (v8)
  {
    uint64_t v9 = v8[3];
    uint64_t v10 = v8[4];
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((v10 - v9) >> 3);
    uint64_t v12 = a1;
  }
  else
  {
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((a5 - a4) >> 3);
    uint64_t v12 = a1;
    uint64_t v9 = a4;
    uint64_t v10 = a5;
  }

  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v12, v9, v10, v11);
}

std::string *anonymous namespace'::perform_substitutions(std::string *this, std::string *a2, const std::string **a3, const char *a4)
{
  if (this != a2)
  {
    for (unint64_t i = this; i != a2; ++i)
    {
      uint64_t v8 = *a3;
      uint64_t v9 = (unsigned __int8 **)a3[1];
      while (v8 != (const std::string *)v9)
      {
        uint64_t v10 = HIBYTE(i->__r_.__value_.__r.__words[2]);
        if ((v10 & 0x80u) == 0) {
          std::string::size_type size = HIBYTE(i->__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = i->__r_.__value_.__l.__size_;
        }
        uint64_t v12 = (unsigned __int8 *)HIBYTE(v8->__r_.__value_.__r.__words[2]);
        int v13 = (char)v12;
        if ((char)v12 < 0) {
          uint64_t v12 = (unsigned __int8 *)v8->__r_.__value_.__l.__size_;
        }
        if ((unsigned __int8 *)size == v12)
        {
          if (v13 >= 0) {
            uint64_t v14 = v8;
          }
          else {
            uint64_t v14 = (const std::string *)v8->__r_.__value_.__r.__words[0];
          }
          if ((v10 & 0x80) != 0)
          {
            this = (std::string *)memcmp(i->__r_.__value_.__l.__data_, v14, i->__r_.__value_.__l.__size_);
            if (this) {
              goto LABEL_27;
            }
LABEL_21:
            uint64_t v16 = (const char *)&v8[1];
            this = std::string::operator=(i, v8 + 1);
            if (a4)
            {
              std::string v17 = (const char *)v8;
              if (SHIBYTE(v8->__r_.__value_.__r.__words[2]) < 0) {
                std::string v17 = (const char *)v8->__r_.__value_.__r.__words[0];
              }
              if (SHIBYTE(v8[1].__r_.__value_.__r.__words[2]) < 0) {
                uint64_t v16 = *(const char **)v16;
              }
              this = (std::string *)printf("[%s] %s -> %s\n", a4, v17, v16);
            }
            goto LABEL_27;
          }
          if (!*((unsigned char *)&i->__r_.__value_.__s + 23)) {
            goto LABEL_21;
          }
          uint64_t v15 = 0;
          while (i->__r_.__value_.__s.__data_[v15] == v14->__r_.__value_.__s.__data_[v15])
          {
            if (v10 == ++v15) {
              goto LABEL_21;
            }
          }
        }
LABEL_27:
        v8 += 2;
      }
    }
  }
  return this;
}

void Espresso::sequential_builder::add_layer_from_network(Espresso::sequential_builder *this, Espresso::net *a2, unint64_t a3)
{
  memset(v3, 0, sizeof(v3));
  Espresso::sequential_builder::add_layer_from_network((uint64_t)this, (uint64_t)a2, a3, v3);
  uint64_t v4 = v3;
  std::vector<Espresso::profiler_t::compiler_analytics_entry_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&v4);
}

void sub_192B00DA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<Espresso::profiler_t::compiler_analytics_entry_t>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

std::string *Espresso::sequential_builder::add_layer_from_network(uint64_t a1, uint64_t a2, unint64_t a3, const std::string **a4)
{
  unint64_t v30 = a3;
  uint64_t v7 = *(uint64_t **)(a1 + 80);
  uint64_t v8 = *(void *)(a2 + 32) + 16 * a3;
  uint64_t v9 = (_OWORD *)v7[5];
  unint64_t v10 = v7[6];
  if ((unint64_t)v9 >= v10)
  {
    uint64_t v12 = v7[4];
    uint64_t v13 = ((uint64_t)v9 - v12) >> 4;
    if ((unint64_t)(v13 + 1) >> 60) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v14 = v10 - v12;
    uint64_t v15 = v14 >> 3;
    if (v14 >> 3 <= (unint64_t)(v13 + 1)) {
      uint64_t v15 = v13 + 1;
    }
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v16 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v16 = v15;
    }
    v31[4] = v7 + 6;
    std::string v17 = (uint64_t *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v16);
    long long v18 = &v17[2 * v13];
    v31[0] = v17;
    v31[1] = v18;
    v31[3] = &v17[2 * v19];
    *(_OWORD *)long long v18 = *(_OWORD *)v8;
    *(void *)uint64_t v8 = 0;
    *(void *)(v8 + 8) = 0;
    void v31[2] = v18 + 2;
    std::vector<std::shared_ptr<Espresso::layer>>::__swap_out_circular_buffer(v7 + 4, v31);
    unint64_t v11 = (_OWORD *)v7[5];
    std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v31);
  }
  else
  {
    _OWORD *v9 = *(_OWORD *)v8;
    unint64_t v11 = v9 + 1;
    *(void *)uint64_t v8 = 0;
    *(void *)(v8 + 8) = 0;
  }
  v7[5] = (uint64_t)v11;
  uint64_t v20 = *(void *)(a1 + 80);
  uint64_t v29 = ((uint64_t)(*(void *)(v20 + 40) - *(void *)(v20 + 32)) >> 4) - 1;
  unint64_t v21 = v29;
  uint64_t v22 = v20 + 56;
  v31[0] = (uint64_t *)&v30;
  unint64_t v23 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(a2 + 56, &v30, (uint64_t)&std::piecewise_construct, v31);
  std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,unsigned long &,std::vector<std::string>>(v22, v21, v21, (uint64_t)(v23 + 3));
  uint64_t v24 = *(void *)(a1 + 80) + 96;
  v31[0] = (uint64_t *)&v30;
  unint64_t v25 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(a2 + 96, &v30, (uint64_t)&std::piecewise_construct, v31);
  std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,unsigned long &,std::vector<std::string>>(v24, v21, v21, (uint64_t)(v25 + 3));
  uint64_t v26 = *(void *)(a1 + 80) + 56;
  v31[0] = &v29;
  int v27 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v26, (unint64_t *)&v29, (uint64_t)&std::piecewise_construct, v31);
}

void std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,unsigned long &,std::vector<std::string>>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v4 = a2;
      if (v9 <= a2) {
        unint64_t v4 = a2 % v9;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & a2;
    }
    unint64_t v11 = *(void **)(*(void *)a1 + 8 * v4);
    if (v11)
    {
      for (unint64_t i = (void *)*v11; i; unint64_t i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == a2)
        {
          if (i[2] == a2) {
            return;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t v14 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v14 = 0;
  *((void *)v14 + 1) = a2;
  *((void *)v14 + 2) = a3;
  *(_OWORD *)(v14 + 24) = *(_OWORD *)a4;
  *((void *)v14 + 5) = *(void *)(a4 + 16);
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    BOOL v17 = 1;
    if (v9 >= 3) {
      BOOL v17 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v9);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__rehash<true>(a1, v20);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v9 <= a2) {
        unint64_t v4 = a2 % v9;
      }
      else {
        unint64_t v4 = a2;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & a2;
    }
  }
  uint64_t v21 = *(void *)a1;
  uint64_t v22 = *(void **)(*(void *)a1 + 8 * v4);
  if (v22)
  {
    *(void *)uint64_t v14 = *v22;
LABEL_38:
    *uint64_t v22 = v14;
    goto LABEL_39;
  }
  *(void *)uint64_t v14 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v14;
  *(void *)(v21 + 8 * v4) = a1 + 16;
  if (*(void *)v14)
  {
    unint64_t v23 = *(void *)(*(void *)v14 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v23 >= v9) {
        v23 %= v9;
      }
    }
    else
    {
      v23 &= v9 - 1;
    }
    uint64_t v22 = (void *)(*(void *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
}

void sub_192B011A0(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,std::vector<std::string>>,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

void Espresso::sequential_builder::add_network(uint64_t a1, void *a2, const std::string **a3)
{
  unint64_t v4 = (void *)*a2;
  if (v4[5] != v4[4])
  {
    unint64_t v7 = 0;
    do
    {
      uint64_t v8 = (std::__shared_weak_count *)a2[1];
      if (v8) {
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      Espresso::sequential_builder::copy_layer_from_network(a1, v4, v7, a3);
      if (v8) {
        nitro::nitro_function::nitro_function(v8);
      }
      ++v7;
      unint64_t v4 = (void *)*a2;
    }
    while (v7 < (uint64_t)(*(void *)(*a2 + 40) - *(void *)(*a2 + 32)) >> 4);
  }
}

void sub_192B0124C(_Unwind_Exception *exception_object)
{
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t **Espresso::sequential_builder::get_aux_elementwise_op_name@<X0>(int __val@<W1>, uint64_t a2@<X0>, std::string *a3@<X8>)
{
  int v26 = __val;
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t v5 = a2 + 24;
  uint64_t v6 = v7;
  uint64_t v8 = (uint64_t **)(v5 - 8);
  if (!v7) {
    goto LABEL_11;
  }
  uint64_t v9 = v5;
  do
  {
    int v10 = *(_DWORD *)(v6 + 32);
    BOOL v11 = v10 < __val;
    if (v10 >= __val) {
      uint64_t v12 = (uint64_t *)v6;
    }
    else {
      uint64_t v12 = (uint64_t *)(v6 + 8);
    }
    if (!v11) {
      uint64_t v9 = v6;
    }
    uint64_t v6 = *v12;
  }
  while (*v12);
  if (v9 == v5 || *(_DWORD *)(v9 + 32) > __val) {
LABEL_11:
  }
    std::__tree<std::__value_type<Espresso::platform,void *>,std::__map_value_compare<Espresso::platform,std::__value_type<Espresso::platform,void *>,std::less<Espresso::platform>,true>,std::allocator<std::__value_type<Espresso::platform,void *>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform&&>,std::tuple<>>((uint64_t **)(v5 - 8), __val, &v26)[5] = 0;
  std::to_string(&v23, __val);
  unint64_t v13 = std::string::insert(&v23, 0, "op_of_type_");
  long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v24.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  float v15 = std::string::append(&v24, "/");
  long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v25.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  BOOL v17 = std::__tree<std::__value_type<Espresso::platform,void *>,std::__map_value_compare<Espresso::platform,std::__value_type<Espresso::platform,void *>,std::less<Espresso::platform>,true>,std::allocator<std::__value_type<Espresso::platform,void *>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform&&>,std::tuple<>>(v8, __val, &v26);
  std::to_string(&__p, (unint64_t)v17[5]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  size_t v20 = std::string::append(&v25, (const std::string::value_type *)p_p, size);
  *a3 = *v20;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v24.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
  __n128 result = std::__tree<std::__value_type<Espresso::platform,void *>,std::__map_value_compare<Espresso::platform,std::__value_type<Espresso::platform,void *>,std::less<Espresso::platform>,true>,std::allocator<std::__value_type<Espresso::platform,void *>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform&&>,std::tuple<>>(v8, __val, &v26);
  result[5] = (uint64_t *)((char *)result[5] + 1);
  return result;
}

void sub_192B01404(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (*(char *)(v26 + 23) < 0) {
    operator delete(*(void **)v26);
  }
  _Unwind_Resume(exception_object);
}

__n128 Espresso::sequential_builder::elementwise_op@<Q0>(unsigned int __val@<W3>, uint64_t *a2@<X0>, uint64_t a3@<X1>, uint64_t a4@<X2>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  *((void *)&v35 + 1) = *MEMORY[0x1E4F143B8];
  if ((*(char *)(a5 + 23) & 0x80000000) == 0)
  {
    if (!*(unsigned char *)(a5 + 23)) {
      goto LABEL_7;
    }
LABEL_5:
    if (!*a2) {
      goto LABEL_10;
    }
    uint64_t v12 = *a2;
    if ((void *)(v12 + 8) == std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>(*a2, (void *)a5))goto LABEL_10; {
    goto LABEL_7;
    }
  }
  if (*(void *)(a5 + 8)) {
    goto LABEL_5;
  }
LABEL_7:
  Espresso::sequential_builder::get_aux_elementwise_op_name(__val, (uint64_t)a2, &v25);
  if (*(char *)(a5 + 23) < 0) {
    operator delete(*(void **)a5);
  }
  *(std::string *)a5 = v25;
LABEL_10:
  v25.__r_.__value_.__l.__size_ = 1065353216;
  v25.__r_.__value_.__r.__words[2] = 897988541;
  char v26 = 0;
  int v27 = 0;
  int v28 = 0;
  v25.__r_.__value_.__r.__words[0] = __val;
  std::string::basic_string[abi:ne180100]<0>(__p, "elementwise");
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v33, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string v33 = *(std::string *)a3;
  }
  if (*(char *)(a4 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v34, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
  }
  else {
    std::string v34 = *(std::string *)a4;
  }
  unint64_t v18 = 0;
  unint64_t v19 = 0;
  size_t v20 = 0;
  v31.__r_.__value_.__r.__words[0] = (std::string::size_type)&v18;
  v31.__r_.__value_.__s.__data_[8] = 0;
  unint64_t v18 = (std::string *)operator new(0x30uLL);
  unint64_t v19 = v18;
  size_t v20 = v18 + 2;
  unint64_t v19 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v20, (long long *)&v33, &v35, v18);
  if (*(char *)(a5 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v31, *(const std::string::value_type **)a5, *(void *)(a5 + 8));
  }
  else {
    std::string v31 = *(std::string *)a5;
  }
  float v15 = 0;
  long long v16 = 0;
  BOOL v17 = 0;
  uint64_t v29 = &v15;
  char v30 = 0;
  float v15 = (std::string *)operator new(0x18uLL);
  long long v16 = v15;
  BOOL v17 = v15 + 1;
  long long v16 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v17, (long long *)&v31, (long long *)&v32, v15);
  Espresso::sequential_builder::add<Espresso::elementwise_params>(&v23, a2, (uint64_t)__p, a5, (uint64_t)&v25, (uint64_t)v18, (uint64_t)v19, (uint64_t *)&v15);
  if (v24) {
    nitro::nitro_function::nitro_function(v24);
  }
  uint64_t v29 = &v15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v31.__r_.__value_.__l.__data_);
  }
  v31.__r_.__value_.__r.__words[0] = (std::string::size_type)&v18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v31);
  for (uint64_t i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v34.__r_.__value_.__r.__words[i + 2]) < 0) {
      operator delete(*(void **)((char *)&v33 + i * 8 + 24));
    }
  }
  if (v22 < 0) {
    operator delete(__p[0]);
  }
  __n128 result = *(__n128 *)a5;
  *(_OWORD *)a6 = *(_OWORD *)a5;
  *(void *)(a6 + 16) = *(void *)(a5 + 16);
  *(void *)(a5 + 8) = 0;
  *(void *)(a5 + 16) = 0;
  *(void *)a5 = 0;
  return result;
}

void sub_192B01758(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  a32 = &a12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a32);
  uint64_t v39 = 0;
  uint64_t v40 = v37 - 128;
  while (1)
  {
    if (*(char *)(v40 + v39 + 47) < 0) {
      operator delete(*(void **)(v40 + v39 + 24));
    }
    v39 -= 24;
    if (v39 == -48)
    {
      if (a20 < 0) {
        operator delete(__p);
      }
      _Unwind_Resume(a1);
    }
  }
}

void Espresso::sequential_builder::by_constant_op(unsigned int __val@<W2>, uint64_t *a2@<X0>, uint64_t a3@<X1>, uint64_t a4@<X3>, uint64_t a5@<X8>, float a6@<S0>)
{
  *(void *)&long long v32 = *MEMORY[0x1E4F143B8];
  if ((*(char *)(a4 + 23) & 0x80000000) == 0)
  {
    if (!*(unsigned char *)(a4 + 23)) {
      goto LABEL_7;
    }
LABEL_5:
    if (!*a2) {
      goto LABEL_10;
    }
    uint64_t v12 = *a2;
    if ((void *)(v12 + 8) == std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>(*a2, (void *)a4))goto LABEL_10; {
    goto LABEL_7;
    }
  }
  if (*(void *)(a4 + 8)) {
    goto LABEL_5;
  }
LABEL_7:
  Espresso::sequential_builder::get_aux_elementwise_op_name(__val, (uint64_t)a2, &v23);
  if (*(char *)(a4 + 23) < 0) {
    operator delete(*(void **)a4);
  }
  *(std::string *)a4 = v23;
LABEL_10:
  *(std::string::size_type *)((char *)&v23.__r_.__value_.__r.__words[1] + 4) = 0x358637BD00000000;
  HIDWORD(v23.__r_.__value_.__r.__words[2]) = 0;
  char v24 = 0;
  int v25 = 0;
  int v26 = 0;
  v23.__r_.__value_.__r.__words[0] = __val;
  *(float *)&v23.__r_.__value_.__r.__words[1] = a6;
  std::string::basic_string[abi:ne180100]<0>(__p, "elementwise");
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v31, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string v31 = *(std::string *)a3;
  }
  long long v16 = 0;
  BOOL v17 = 0;
  unint64_t v18 = 0;
  v29.__r_.__value_.__r.__words[0] = (std::string::size_type)&v16;
  v29.__r_.__value_.__s.__data_[8] = 0;
  long long v16 = (std::string *)operator new(0x18uLL);
  BOOL v17 = v16;
  unint64_t v18 = v16 + 1;
  BOOL v17 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v18, (long long *)&v31, &v32, v16);
  if (*(char *)(a4 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v29, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
  }
  else {
    std::string v29 = *(std::string *)a4;
  }
  unint64_t v13 = 0;
  long long v14 = 0;
  float v15 = 0;
  int v27 = &v13;
  char v28 = 0;
  unint64_t v13 = (std::string *)operator new(0x18uLL);
  long long v14 = v13;
  float v15 = v13 + 1;
  long long v14 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v15, (long long *)&v29, (long long *)&v30, v13);
  Espresso::sequential_builder::add<Espresso::elementwise_params>(&v21, a2, (uint64_t)__p, a4, (uint64_t)&v23, (uint64_t)v16, (uint64_t)v17, (uint64_t *)&v13);
  if (v22) {
    nitro::nitro_function::nitro_function(v22);
  }
  int v27 = &v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  v29.__r_.__value_.__r.__words[0] = (std::string::size_type)&v16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v31.__r_.__value_.__l.__data_);
  }
  if (v20 < 0) {
    operator delete(__p[0]);
  }
  *(_OWORD *)a5 = *(_OWORD *)a4;
  *(void *)(a5 + 16) = *(void *)(a4 + 16);
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  *(void *)a4 = 0;
}

void sub_192B01ABC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  *(void *)(v30 - 144) = &a12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v30 - 144));
  if (*(char *)(v30 - 89) < 0) {
    operator delete(*(void **)(v30 - 112));
  }
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::sequential_builder::rsqrt(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, unsigned int a5@<S0>)
{
  *(void *)&long long v30 = *MEMORY[0x1E4F143B8];
  if ((*(char *)(a3 + 23) & 0x80000000) == 0)
  {
    if (!*(unsigned char *)(a3 + 23)) {
      goto LABEL_7;
    }
LABEL_5:
    if (!*a1) {
      goto LABEL_10;
    }
    uint64_t v10 = *a1;
    if ((void *)(v10 + 8) == std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>(*a1, (void *)a3))goto LABEL_10; {
    goto LABEL_7;
    }
  }
  if (*(void *)(a3 + 8)) {
    goto LABEL_5;
  }
LABEL_7:
  Espresso::sequential_builder::get_aux_elementwise_op_name(12, (uint64_t)a1, &v21);
  if (*(char *)(a3 + 23) < 0) {
    operator delete(*(void **)a3);
  }
  *(std::string *)a3 = v21;
LABEL_10:
  char v22 = 0;
  int v23 = 0;
  int v24 = 0;
  v21.__r_.__value_.__r.__words[0] = 12;
  v21.__r_.__value_.__l.__size_ = 1065353216;
  v21.__r_.__value_.__r.__words[2] = a5;
  std::string::basic_string[abi:ne180100]<0>(__p, "elementwise");
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v29, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v29 = *(std::string *)a2;
  }
  long long v14 = 0;
  float v15 = 0;
  long long v16 = 0;
  v27.__r_.__value_.__r.__words[0] = (std::string::size_type)&v14;
  v27.__r_.__value_.__s.__data_[8] = 0;
  long long v14 = (std::string *)operator new(0x18uLL);
  float v15 = v14;
  long long v16 = v14 + 1;
  float v15 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v16, (long long *)&v29, &v30, v14);
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v27, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string v27 = *(std::string *)a3;
  }
  BOOL v11 = 0;
  uint64_t v12 = 0;
  unint64_t v13 = 0;
  int v25 = &v11;
  char v26 = 0;
  BOOL v11 = (std::string *)operator new(0x18uLL);
  uint64_t v12 = v11;
  unint64_t v13 = v11 + 1;
  uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v13, (long long *)&v27, (long long *)&v28, v11);
  Espresso::sequential_builder::add<Espresso::elementwise_params>(&v19, a1, (uint64_t)__p, a3, (uint64_t)&v21, (uint64_t)v14, (uint64_t)v15, (uint64_t *)&v11);
  if (v20) {
    nitro::nitro_function::nitro_function(v20);
  }
  int v25 = &v11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v27.__r_.__value_.__l.__data_);
  }
  v27.__r_.__value_.__r.__words[0] = (std::string::size_type)&v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  if (v18 < 0) {
    operator delete(__p[0]);
  }
  *(_OWORD *)a4 = *(_OWORD *)a3;
  *(void *)(a4 + 16) = *(void *)(a3 + 16);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
}

void sub_192B01DE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  *(void *)(v30 - 128) = &a12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v30 - 128));
  if (*(char *)(v30 - 73) < 0) {
    operator delete(*(void **)(v30 - 96));
  }
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::sequential_builder::constant_like(Espresso::sequential_builder *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, float a5@<S0>)
{
  v26[2] = *MEMORY[0x1E4F143B8];
  Espresso::sequential_builder::init_net_shape(a1);
  uint64_t v10 = *(uint64_t ***)a1;
  v25.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
  BOOL v11 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v10, a2, (long long **)&v25);
  if ((*(char *)(a3 + 23) & 0x80000000) == 0)
  {
    if (!*(unsigned char *)(a3 + 23)) {
      goto LABEL_6;
    }
LABEL_5:
    uint64_t v12 = *(uint64_t ***)a1;
    if (v12 + 1 == std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>(*(void *)a1, (void *)a3))goto LABEL_10; {
    goto LABEL_6;
    }
  }
  if (*(void *)(a3 + 8)) {
    goto LABEL_5;
  }
LABEL_6:
  unint64_t v13 = *((void *)a1 + 5);
  *((void *)a1 + 5) = v13 + 1;
  std::to_string(&v25, v13);
  long long v14 = std::string::insert(&v25, 0, "constant_like_op/");
  std::string::size_type v15 = v14->__r_.__value_.__r.__words[0];
  v26[0] = v14->__r_.__value_.__l.__size_;
  *(void *)((char *)v26 + 7) = *(std::string::size_type *)((char *)&v14->__r_.__value_.__r.__words[1] + 7);
  char v16 = HIBYTE(v14->__r_.__value_.__r.__words[2]);
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  if (*(char *)(a3 + 23) < 0) {
    operator delete(*(void **)a3);
  }
  uint64_t v17 = v26[0];
  *(void *)a3 = v15;
  *(void *)(a3 + 8) = v17;
  *(void *)(a3 + 15) = *(void *)((char *)v26 + 7);
  *(unsigned char *)(a3 + 23) = v16;
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
LABEL_10:
  long long v18 = *(_OWORD *)(v11 + 72);
  v20[0] = *(_OWORD *)(v11 + 56);
  v20[1] = v18;
  uint64_t v21 = *((void *)v11 + 11);
  char v22 = 0;
  int v23 = 0;
  uint64_t v24 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v22, *((const void **)v11 + 12), *((void *)v11 + 13), (uint64_t)(*((void *)v11 + 13) - *((void *)v11 + 12)) >> 2);
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string __p = *(std::string *)a3;
  }
  Espresso::sequential_builder::constant((uint64_t *)a1, v20, (uint64_t)&__p, a4, a5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v22)
  {
    int v23 = v22;
    operator delete(v22);
  }
}

void sub_192B02058(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

__n128 Espresso::sequential_builder::constant@<Q0>(uint64_t *a1@<X0>, long long *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, float a5@<S0>)
{
  *(void *)&long long v37 = *MEMORY[0x1E4F143B8];
  float v28 = a5;
  long long v8 = *a2;
  int v9 = *((_DWORD *)a2 + 4);
  int v10 = *((_DWORD *)a2 + 5);
  if (v9 == 1) {
    int v11 = 4;
  }
  else {
    int v11 = 5;
  }
  if (v10 == -1) {
    int v10 = v11;
  }
  int v31 = v10;
  int v32 = 0;
  long long v29 = v8;
  int v30 = v9;
  char v33 = 0;
  if ((*(char *)(a3 + 23) & 0x80000000) == 0)
  {
    if (!*(unsigned char *)(a3 + 23)) {
      goto LABEL_12;
    }
LABEL_10:
    if (!*a1) {
      goto LABEL_16;
    }
    uint64_t v12 = *a1;
    if ((void *)(v12 + 8) == std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>(*a1, (void *)a3))goto LABEL_16; {
    goto LABEL_12;
    }
  }
  if (*(void *)(a3 + 8)) {
    goto LABEL_10;
  }
LABEL_12:
  unint64_t v13 = a1[24];
  a1[24] = v13 + 1;
  std::to_string(&v27, v13);
  long long v14 = std::string::insert(&v27, 0, "constant_op/");
  std::string::size_type v15 = v14->__r_.__value_.__r.__words[0];
  v36.__r_.__value_.__r.__words[0] = v14->__r_.__value_.__l.__size_;
  *(std::string::size_type *)((char *)v36.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v14->__r_.__value_.__r.__words[1] + 7);
  char v16 = HIBYTE(v14->__r_.__value_.__r.__words[2]);
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  if (*(char *)(a3 + 23) < 0) {
    operator delete(*(void **)a3);
  }
  std::string::size_type v17 = v36.__r_.__value_.__r.__words[0];
  *(void *)a3 = v15;
  *(void *)(a3 + 8) = v17;
  *(void *)(a3 + 15) = *(std::string::size_type *)((char *)v36.__r_.__value_.__r.__words + 7);
  *(unsigned char *)(a3 + 23) = v16;
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v27.__r_.__value_.__l.__data_);
  }
LABEL_16:
  std::string::basic_string[abi:ne180100]<0>(&v27, "fill");
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v36, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string v36 = *(std::string *)a3;
  }
  uint64_t v19 = 0;
  char v20 = 0;
  uint64_t v21 = 0;
  std::string v34 = &v19;
  char v35 = 0;
  uint64_t v19 = (std::string *)operator new(0x18uLL);
  char v20 = v19;
  uint64_t v21 = v19 + 1;
  char v20 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v21, (long long *)&v36, &v37, v19);
  Espresso::sequential_builder::add<Espresso::fill_params_t>(&v25, a1, (uint64_t)&v27, a3, (uint64_t)&v28, v22, v23, (uint64_t *)&v19);
  if (v26) {
    nitro::nitro_function::nitro_function(v26);
  }
  std::string v34 = &v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v34);
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v36.__r_.__value_.__l.__data_);
  }
  v36.__r_.__value_.__r.__words[0] = (std::string::size_type)&v22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v36);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v27.__r_.__value_.__l.__data_);
  }
  __n128 result = *(__n128 *)a3;
  *(_OWORD *)a4 = *(_OWORD *)a3;
  *(void *)(a4 + 16) = *(void *)(a3 + 16);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  return result;
}

void sub_192B0230C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  *(void *)(v22 - 80) = &a12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v22 - 80));
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::sequential_builder::load_global_op(std::string *__str@<X2>, std::string *this@<X3>, uint64_t *a3@<X0>, uint64_t *a4@<X1>, uint64_t a5@<X8>)
{
  *(void *)&long long v30 = *MEMORY[0x1E4F143B8];
  if ((SHIBYTE(this->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (*((unsigned char *)&this->__r_.__value_.__s + 23)) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if (!this->__r_.__value_.__l.__size_) {
LABEL_3:
  }
    std::string::operator=(this, __str);
LABEL_4:
  Espresso::net::get_global(&v22, a3[10], (unsigned __int8 *)__str);
  std::string::size_type v10 = v22.__r_.__value_.__r.__words[0];
  if (v22.__r_.__value_.__l.__size_) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v22.__r_.__value_.__l.__size_);
  }
  if (v10)
  {
    if ((__str->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v11 = __str;
    }
    else {
      int v11 = (std::string *)__str->__r_.__value_.__r.__words[0];
    }
    v22.__r_.__value_.__r.__words[0] = (std::string::size_type)v11;
    Espresso::throw_exception_selector<Espresso::invalid_state_error,char const*>("global already exists: %s", &v22);
  }
  Espresso::net::set_global(a3[10], (long long *)__str, a4);
  memset(&v22, 0, sizeof(v22));
  char v23 = 0;
  long long v24 = xmmword_192DCA4C0;
  unint64_t v25 = 0xFFFFFFFF00000001;
  int v26 = 7;
  std::string::operator=(&v22, __str);
  std::string::basic_string[abi:ne180100]<0>(__p, "load_global");
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v29, this->__r_.__value_.__l.__data_, this->__r_.__value_.__l.__size_);
  }
  else {
    std::string v29 = *this;
  }
  uint64_t v12 = 0;
  unint64_t v13 = 0;
  long long v14 = 0;
  std::string v27 = &v12;
  char v28 = 0;
  uint64_t v12 = (std::string *)operator new(0x18uLL);
  unint64_t v13 = v12;
  long long v14 = v12 + 1;
  unint64_t v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v14, (long long *)&v29, &v30, v12);
  Espresso::sequential_builder::add<Espresso::load_global_params_t>(&v20, a3, (uint64_t)__p, (uint64_t)this, (uint64_t)&v22, v15, v16, (uint64_t *)&v12);
  if (v21) {
    nitro::nitro_function::nitro_function(v21);
  }
  std::string v27 = &v12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  v29.__r_.__value_.__r.__words[0] = (std::string::size_type)&v15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  if (v19 < 0) {
    operator delete(__p[0]);
  }
  *(_OWORD *)a5 = *(_OWORD *)&this->__r_.__value_.__l.__data_;
  *(void *)(a5 + 16) = *((void *)&this->__r_.__value_.__l + 2);
  this->__r_.__value_.__l.__size_ = 0;
  this->__r_.__value_.__r.__words[2] = 0;
  this->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
}

void sub_192B025D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  *(void *)(v28 - 96) = &a12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v28 - 96));
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  _Unwind_Resume(a1);
}

void Espresso::sequential_builder::store_global_op(std::string *__str@<X2>, uint64_t *a2@<X0>, uint64_t a3@<X1>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  *(void *)&long long v31 = *MEMORY[0x1E4F143B8];
  if (*(char *)(a4 + 23) < 0)
  {
    if (*(void *)(a4 + 8)) {
      goto LABEL_17;
    }
  }
  else if (*(unsigned char *)(a4 + 23))
  {
    goto LABEL_17;
  }
  std::operator+<char>();
  std::to_string(&v27, (uint64_t)(*(void *)(a2[10] + 40) - *(void *)(a2[10] + 32)) >> 4);
  if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v10 = &v27;
  }
  else {
    std::string::size_type v10 = (std::string *)v27.__r_.__value_.__r.__words[0];
  }
  if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v27.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v27.__r_.__value_.__l.__size_;
  }
  uint64_t v12 = std::string::append(&v22, (const std::string::value_type *)v10, size);
  std::string::size_type v13 = v12->__r_.__value_.__r.__words[0];
  v30.__r_.__value_.__r.__words[0] = v12->__r_.__value_.__l.__size_;
  *(std::string::size_type *)((char *)v30.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v12->__r_.__value_.__r.__words[1] + 7);
  char v14 = HIBYTE(v12->__r_.__value_.__r.__words[2]);
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if (*(char *)(a4 + 23) < 0) {
    operator delete(*(void **)a4);
  }
  std::string::size_type v15 = v30.__r_.__value_.__r.__words[0];
  *(void *)a4 = v13;
  *(void *)(a4 + 8) = v15;
  *(void *)(a4 + 15) = *(std::string::size_type *)((char *)v30.__r_.__value_.__r.__words + 7);
  *(unsigned char *)(a4 + 23) = v14;
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v27.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
LABEL_17:
  memset(&v22, 0, sizeof(v22));
  char v23 = 0;
  long long v24 = xmmword_192DC3600;
  uint64_t v25 = 0x100000001;
  int v26 = 0;
  std::string::operator=(&v22, __str);
  std::string::basic_string[abi:ne180100]<0>(&v27, "store_global");
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string v30 = *(std::string *)a3;
  }
  uint64_t v17 = 0;
  long long v18 = 0;
  char v19 = 0;
  uint64_t v28 = (void **)&v17;
  char v29 = 0;
  uint64_t v17 = (std::string *)operator new(0x18uLL);
  long long v18 = v17;
  char v19 = v17 + 1;
  long long v18 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v19, (long long *)&v30, &v31, v17);
  memset(v16, 0, sizeof(v16));
  Espresso::sequential_builder::add<Espresso::store_global_params_t>(&v20, a2, (uint64_t)&v27, a4, (uint64_t)&v22, (uint64_t)v17, (uint64_t)v18, v16);
  if (v21) {
    nitro::nitro_function::nitro_function(v21);
  }
  uint64_t v28 = (void **)v16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v28);
  uint64_t v28 = (void **)&v17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v28);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v30.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v27.__r_.__value_.__l.__data_);
  }
  *(_OWORD *)a5 = *(_OWORD *)a4;
  *(void *)(a5 + 16) = *(void *)(a4 + 16);
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  *(void *)a4 = 0;
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
}

void sub_192B02904(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

__n128 Espresso::sequential_builder::reduce@<Q0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, unsigned int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  *(void *)&long long v42 = *MEMORY[0x1E4F143B8];
  if (*(char *)(a5 + 23) < 0)
  {
    if (*(void *)(a5 + 8)) {
      goto LABEL_29;
    }
  }
  else if (*(unsigned char *)(a5 + 23))
  {
    goto LABEL_29;
  }
  if (*(char *)(a2 + 23) >= 0) {
    size_t v12 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    size_t v12 = *(void *)(a2 + 8);
  }
  std::string::size_type v13 = &v36;
  std::string::basic_string[abi:ne180100]((uint64_t)&v36, v12 + 9);
  if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v13 = (std::string *)v36.__r_.__value_.__r.__words[0];
  }
  if (v12)
  {
    if (*(char *)(a2 + 23) >= 0) {
      char v14 = (const std::string::value_type *)a2;
    }
    else {
      char v14 = *(const std::string::value_type **)a2;
    }
    memmove(v13, v14, v12);
  }
  strcpy((char *)v13 + v12, "/reduce_(");
  std::to_string(&v41, a3);
  if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v15 = &v41;
  }
  else {
    std::string::size_type v15 = (std::string *)v41.__r_.__value_.__r.__words[0];
  }
  if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v41.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v41.__r_.__value_.__l.__size_;
  }
  uint64_t v17 = std::string::append(&v36, (const std::string::value_type *)v15, size);
  long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v32.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  char v19 = std::string::append(&v32, ")");
  std::string::size_type v20 = v19->__r_.__value_.__r.__words[0];
  v39.__r_.__value_.__r.__words[0] = v19->__r_.__value_.__l.__size_;
  *(std::string::size_type *)((char *)v39.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v19->__r_.__value_.__r.__words[1] + 7);
  char v21 = HIBYTE(v19->__r_.__value_.__r.__words[2]);
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  if (*(char *)(a5 + 23) < 0) {
    operator delete(*(void **)a5);
  }
  std::string::size_type v22 = v39.__r_.__value_.__r.__words[0];
  *(void *)a5 = v20;
  *(void *)(a5 + 8) = v22;
  *(void *)(a5 + 15) = *(std::string::size_type *)((char *)v39.__r_.__value_.__r.__words + 7);
  *(unsigned char *)(a5 + 23) = v21;
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v32.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v41.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v36.__r_.__value_.__l.__data_);
  }
LABEL_29:
  uint64_t v33 = 0;
  unint64_t v34 = 0xFFFFFFFF00000000;
  char v35 = 0;
  v32.__r_.__value_.__r.__words[0] = a3 | 0x358637BD00000000;
  *(_OWORD *)&v32.__r_.__value_.__r.__words[1] = a4 | 0x100000000uLL;
  std::string::basic_string[abi:ne180100]<0>(&v36, "reduce");
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v41, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v41 = *(std::string *)a2;
  }
  std::string v27 = 0;
  uint64_t v28 = 0;
  char v29 = 0;
  v39.__r_.__value_.__r.__words[0] = (std::string::size_type)&v27;
  v39.__r_.__value_.__s.__data_[8] = 0;
  std::string v27 = (std::string *)operator new(0x18uLL);
  uint64_t v28 = v27;
  char v29 = v27 + 1;
  uint64_t v28 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v29, (long long *)&v41, &v42, v27);
  if (*(char *)(a5 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v39, *(const std::string::value_type **)a5, *(void *)(a5 + 8));
  }
  else {
    std::string v39 = *(std::string *)a5;
  }
  long long v24 = 0;
  uint64_t v25 = 0;
  int v26 = 0;
  long long v37 = &v24;
  char v38 = 0;
  long long v24 = (std::string *)operator new(0x18uLL);
  uint64_t v25 = v24;
  int v26 = v24 + 1;
  uint64_t v25 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v26, (long long *)&v39, (long long *)&v40, v24);
  Espresso::sequential_builder::add<Espresso::reduce_params_t>(&v30, a1, (uint64_t)&v36, a5, (uint64_t)&v32, (uint64_t)v27, (uint64_t)v28, (uint64_t *)&v24);
  if (v31) {
    nitro::nitro_function::nitro_function(v31);
  }
  long long v37 = &v24;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v37);
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v39.__r_.__value_.__l.__data_);
  }
  v39.__r_.__value_.__r.__words[0] = (std::string::size_type)&v27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v39);
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v41.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v36.__r_.__value_.__l.__data_);
  }
  __n128 result = *(__n128 *)a5;
  *(_OWORD *)a6 = *(_OWORD *)a5;
  *(void *)(a6 + 16) = *(void *)(a5 + 16);
  *(void *)(a5 + 8) = 0;
  *(void *)(a5 + 16) = 0;
  *(void *)a5 = 0;
  return result;
}

void sub_192B02D20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33)
{
  *(void *)(v33 - 144) = &a12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v33 - 144));
  if (*(char *)(v33 - 89) < 0) {
    operator delete(*(void **)(v33 - 112));
  }
  if (a32 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

__n128 Espresso::sequential_builder::placeholder@<Q0>(Espresso::sequential_builder *a1@<X0>, char *a2@<X1>, std::string::size_type a3@<X2>, uint64_t a4@<X8>)
{
  v19[2] = *MEMORY[0x1E4F143B8];
  Espresso::sequential_builder::init_net_shape(a1);
  if ((*(char *)(a3 + 23) & 0x80000000) == 0)
  {
    if (!*(unsigned char *)(a3 + 23)) {
      goto LABEL_7;
    }
LABEL_5:
    uint64_t v8 = *(void *)a1;
    if (!*(void *)a1
      || (void *)(v8 + 8) == std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>(*(void *)a1, (void *)a3))
    {
      goto LABEL_12;
    }
    goto LABEL_7;
  }
  if (*(void *)(a3 + 8)) {
    goto LABEL_5;
  }
LABEL_7:
  unint64_t v9 = *((void *)a1 + 6);
  *((void *)a1 + 6) = v9 + 1;
  std::to_string(&__p, v9);
  std::string::size_type v10 = std::string::insert(&__p, 0, "placeholder/");
  std::string::size_type v11 = v10->__r_.__value_.__r.__words[0];
  v19[0] = v10->__r_.__value_.__l.__size_;
  *(void *)((char *)v19 + 7) = *(std::string::size_type *)((char *)&v10->__r_.__value_.__r.__words[1] + 7);
  char v12 = HIBYTE(v10->__r_.__value_.__r.__words[2]);
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (*(char *)(a3 + 23) < 0) {
    operator delete(*(void **)a3);
  }
  uint64_t v13 = v19[0];
  *(void *)a3 = v11;
  *(void *)(a3 + 8) = v13;
  *(void *)(a3 + 15) = *(void *)((char *)v19 + 7);
  *(unsigned char *)(a3 + 23) = v12;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v8 = *(void *)a1;
LABEL_12:
  __p.__r_.__value_.__r.__words[0] = a3;
  char v14 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v8, (void *)a3, (long long **)&__p);
  long long v15 = *(_OWORD *)a2;
  long long v16 = *((_OWORD *)a2 + 1);
  *((void *)v14 + 11) = *((void *)a2 + 4);
  *(_OWORD *)(v14 + 72) = v16;
  *(_OWORD *)(v14 + 56) = v15;
  if (v14 + 56 != a2) {
    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v14 + 96, *((char **)a2 + 5), *((void *)a2 + 6), (uint64_t)(*((void *)a2 + 6) - *((void *)a2 + 5)) >> 2);
  }
  __n128 result = *(__n128 *)a3;
  *(_OWORD *)a4 = *(_OWORD *)a3;
  *(void *)(a4 + 16) = *(void *)(a3 + 16);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  return result;
}

void sub_192B02F68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::sequential_builder::add_shape_from_kernel(uint64_t *a1, uint64_t a2, long long **a3, uint64_t *a4)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  uint64_t v41 = 0;
  unint64_t v42 = 0;
  unint64_t v43 = 0;
  uint64_t v7 = *a3;
  uint64_t v8 = a3[1];
  while (v7 != v8)
  {
    unint64_t v9 = (uint64_t **)*a1;
    v40[0] = v7;
    std::string::size_type v10 = (long long *)(std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v9, v7, v40)+ 56);
    unint64_t v11 = v42;
    if (v42 >= v43)
    {
      uint64_t v12 = std::vector<Espresso::layer_shape>::__push_back_slow_path<Espresso::layer_shape const&>(&v41, v10);
    }
    else
    {
      std::vector<Espresso::layer_shape>::__construct_one_at_end[abi:ne180100]<Espresso::layer_shape const&>((uint64_t)&v41, v10);
      uint64_t v12 = v11 + 64;
    }
    unint64_t v42 = v12;
    uint64_t v7 = (long long *)((char *)v7 + 24);
  }
  (*(void (**)(long long **__return_ptr, uint64_t, uint64_t *))(*(void *)a2 + 64))(v40, a2, &v41);
  uint64_t v13 = *a4;
  if (a4[1] != *a4)
  {
    unint64_t v14 = 0;
    while (1)
    {
      long long v15 = (long long *)(v13 + 24 * v14);
      uint64_t v16 = *a1;
      if ((void *)(v16 + 8) != std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>(*a1, v15))break; {
LABEL_20:
      }
      long long v24 = v40[0];
      v38[0] = v15;
      uint64_t v25 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v16, v15, v38);
      int v26 = &v24[4 * v14];
      long long v27 = *v26;
      long long v28 = v26[1];
      *((void *)v25 + 11) = *((void *)v26 + 4);
      *(_OWORD *)(v25 + 72) = v28;
      *(_OWORD *)(v25 + 56) = v27;
      if (v25 + 56 != (char *)v26) {
        std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v25 + 96, *((char **)v26 + 5), *((void *)v26 + 6), (uint64_t)(*((void *)v26 + 6) - *((void *)v26 + 5)) >> 2);
      }
      ++v14;
      uint64_t v13 = *a4;
      if (v14 >= 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3)) {
        goto LABEL_34;
      }
    }
    v36[0] = v15;
    uint64_t v17 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v16, v15, v36);
    Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v38, (const Espresso::layer_shape *)(v17 + 56), 0);
    long long v18 = (Espresso *)Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v36, (const Espresso::layer_shape *)&v40[0][4 * v14], 0);
    if (v37 == v39)
    {
      if (!v39)
      {
LABEL_19:
        uint64_t v16 = *a1;
        goto LABEL_20;
      }
      if (LODWORD(v38[0]) == LODWORD(v36[0]))
      {
        unint64_t v20 = 0;
        while (v39 - 1 != v20)
        {
          int v21 = *((_DWORD *)v38 + v20 + 1);
          int v22 = *((_DWORD *)v36 + ++v20);
          if (v21 != v22)
          {
            if (v20 >= v39) {
              goto LABEL_19;
            }
            goto LABEL_17;
          }
        }
        goto LABEL_19;
      }
    }
LABEL_17:
    char v23 = Espresso::espresso_os_log_subsystem(v18, v19);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      char v29 = v15;
      if (*((char *)v15 + 23) < 0) {
        char v29 = *(long long **)v15;
      }
      Espresso::layer_nd_shape::repr(&v35, (uint64_t)v38);
      int v30 = SHIBYTE(v35.__r_.__value_.__r.__words[2]);
      std::string::size_type v31 = v35.__r_.__value_.__r.__words[0];
      Espresso::layer_nd_shape::repr(&__p, (uint64_t)v36);
      std::string v32 = &v35;
      if (v30 < 0) {
        std::string v32 = (std::string *)v31;
      }
      p_p = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)long long buf = 136315650;
      *(void *)&uint8_t buf[4] = v29;
      __int16 v45 = 2080;
      long long v46 = v32;
      __int16 v47 = 2080;
      char v48 = p_p;
      _os_log_error_impl(&dword_1920CB000, v23, OS_LOG_TYPE_ERROR, "Overwriting shape of blob %s: %s -> %s", buf, 0x20u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v35.__r_.__value_.__l.__data_);
      }
    }

    goto LABEL_19;
  }
LABEL_34:
  *(void *)long long buf = v40;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(void *)long long buf = &v41;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
}

void sub_192B032E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,char a29)
{
  *(void *)(v29 - 144) = &a29;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)(v29 - 144));
  _Unwind_Resume(a1);
}

char *Espresso::sequential_builder::blob_shape(Espresso::sequential_builder *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a1;
  if (!*(void *)a1)
  {
    Espresso::sequential_builder::init_net_shape(a1);
    uint64_t v3 = *(void *)a1;
  }
  if ((void *)(v3 + 8) == std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>(v3, (void *)a2))
  {
    if (*(char *)(a2 + 23) >= 0) {
      uint64_t v6 = (long long *)a2;
    }
    else {
      uint64_t v6 = *(long long **)a2;
    }
    uint64_t v7 = v6;
    Espresso::throw_exception_selector<Espresso::generic_error,char const*&>("shape of blob %s is missing", &v7);
  }
  uint64_t v7 = (long long *)a2;
  return std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v3, (void *)a2, &v7)+ 56;
}

void Espresso::sequential_builder::build_and_insert_in_network(Espresso::sequential_builder *a1, long long **a2, int a3, uint64_t a4)
{
  std::map<std::string,Espresso::layer_shape>::map[abi:ne180100]((uint64_t)v12, a2 + 23);
  std::map<std::string,Espresso::layer_shape>::map[abi:ne180100]((uint64_t)v13, a2 + 26);
  for (uint64_t i = *(long long **)(a4 + 16); i; uint64_t i = *(long long **)i)
  {
    unint64_t v14 = i + 1;
    unint64_t v9 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v12, (void *)i + 2, &v14);
    long long v10 = *(long long *)((char *)i + 40);
    long long v11 = *(long long *)((char *)i + 56);
    *((void *)v9 + 11) = *((void *)i + 9);
    *(_OWORD *)(v9 + 72) = v11;
    *(_OWORD *)(v9 + 56) = v10;
    if (v9 + 32 != (char *)(i + 1)) {
      std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v9 + 96, *((char **)i + 10), *((void *)i + 11), (uint64_t)(*((void *)i + 11) - *((void *)i + 10)) >> 2);
    }
  }
  Espresso::sequential_builder::build_and_insert_in_network(a1, (Espresso::net *)a2, a3, (Espresso::network_shape *)v12, 1);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)v13, v13[1]);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)v12, (char *)v12[1]);
}

void sub_192B034DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  Espresso::network_shape::~network_shape((char **)va);
  _Unwind_Resume(a1);
}

void Espresso::sequential_builder::build_and_insert_in_network(Espresso::sequential_builder *this, Espresso::net *a2, int a3, Espresso::network_shape *a4, int a5)
{
  Espresso::sequential_builder::build_from_network_shape(this, a4, &v10);
  insert_network_layers(a2, v10, a3);
  if (a5)
  {
    *((unsigned char *)a2 + 180) = 0;
    Espresso::shape_network_recursive(a2, a4, 0, 0);
  }
  unint64_t v9 = v11;
  if (v11)
  {
    nitro::nitro_function::nitro_function(v9);
  }
}

void sub_192B035A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  _Unwind_Resume(exception_object);
}

void insert_network_layers(Espresso::net *a1, Espresso::net *a2, int a3)
{
  int64x2_t v20 = 0uLL;
  unint64_t v21 = 0;
  unint64_t v19 = 0;
  if (*((void *)a2 + 5) != *((void *)a2 + 4))
  {
    unint64_t v4 = (char *)a2 + 96;
    uint64_t v5 = (char *)a2 + 56;
    do
    {
      LODWORD(v16) = 0;
      long long v17 = 0u;
      memset(v18, 0, sizeof(v18));
      int v22 = &v19;
      uint64_t v6 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v4, &v19, (uint64_t)&std::piecewise_construct, (uint64_t **)&v22);
      if ((void *)((char *)&v18[1] + 8) != v6 + 3) {
        std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v18[1] + 8, (std::string *)v6[3], (std::string *)v6[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6[4] - v6[3]) >> 3));
      }
      int v22 = &v19;
      uint64_t v7 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v5, &v19, (uint64_t)&std::piecewise_construct, (uint64_t **)&v22);
      if (v18 != (_OWORD *)(v7 + 3)) {
        std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)v18, (std::string *)v7[3], (std::string *)v7[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7[4] - v7[3]) >> 3));
      }
      uint64_t v8 = *((void *)a2 + 4);
      long long v9 = *(_OWORD *)(v8 + 16 * v19);
      uint64_t v10 = *(void *)(v8 + 16 * v19 + 8);
      if (v10) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
      }
      long long v11 = (std::__shared_weak_count *)*((void *)&v17 + 1);
      long long v17 = v9;
      if (v11) {
        nitro::nitro_function::nitro_function(v11);
      }
      uint64_t v12 = v20.i64[1];
      if (v20.i64[1] >= v21)
      {
        uint64_t v13 = std::vector<Espresso::net::new_layer_info>::__push_back_slow_path<Espresso::net::new_layer_info const&>(&v20, (uint64_t)&v16);
      }
      else
      {
        std::allocator<Espresso::net::new_layer_info>::construct[abi:ne180100]<Espresso::net::new_layer_info,Espresso::net::new_layer_info const&>(v20.i64[1], (uint64_t)&v16);
        uint64_t v13 = v12 + 72;
      }
      v20.i64[1] = v13;
      int v22 = (unint64_t *)&v18[1] + 1;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v22);
      int v22 = (unint64_t *)v18;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v22);
      if (*((void *)&v17 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v17 + 1));
      }
      ++v19;
    }
    while (v19 < (uint64_t)(*((void *)a2 + 5) - *((void *)a2 + 4)) >> 4);
  }
  LODWORD(v16) = a3;
  Espresso::net::insert_layers((uint64_t)a1, (int *)&v16, v20.i64);
  uint64_t v16 = &v20;
  std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&v16);
}

void sub_192B037A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  a12 = (void **)&a22;
  std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void Espresso::sequential_builder::insert_in_network_without_build(Espresso::net **this, Espresso::net *a2, int a3)
{
}

char *Espresso::sequential_builder::get_blob_numerical_properties(uint64_t a1, long long *a2)
{
  uint64_t v4 = *(void *)(a1 + 80);
  if ((void *)(v4 + 360) == std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>(v4 + 352, a2))
  {
    long long v9 = a2;
    uint64_t v5 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v4 + 352), a2, (uint64_t)&std::piecewise_construct, &v9);
    *((_DWORD *)v5 + 14) = 1065353216;
    *(void *)(v5 + 60) = 0xFFFFFFFF00000000;
    *((_DWORD *)v5 + 17) = 1;
    uint64_t v7 = v5 + 72;
    uint64_t v6 = (void *)*((void *)v5 + 9);
    if (v6)
    {
      *((void *)v5 + 10) = v6;
      operator delete(v6);
    }
    *uint64_t v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    uint64_t v4 = *(void *)(a1 + 80);
  }
  long long v9 = a2;
  return std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v4 + 352), a2, (uint64_t)&std::piecewise_construct, &v9)+ 56;
}

void Espresso::sequential_builder::clear_supported_4cc_formats(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 24) = *(void *)(a2 + 16);
}

void Espresso::sequential_builder::add_supported_4cc_format(uint64_t a1, void *a2, int a3)
{
  uint64_t v5 = (char *)a2[3];
  unint64_t v6 = a2[4];
  if ((unint64_t)v5 >= v6)
  {
    uint64_t v8 = (char *)a2[2];
    uint64_t v9 = (v5 - v8) >> 2;
    if ((unint64_t)(v9 + 1) >> 62) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = v6 - (void)v8;
    unint64_t v11 = (uint64_t)(v6 - (void)v8) >> 1;
    if (v11 <= v9 + 1) {
      unint64_t v11 = v9 + 1;
    }
    BOOL v12 = v10 >= 0x7FFFFFFFFFFFFFFCLL;
    unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v12) {
      unint64_t v13 = v11;
    }
    if (v13)
    {
      unint64_t v13 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v13);
      uint64_t v8 = (char *)a2[2];
      uint64_t v5 = (char *)a2[3];
    }
    else
    {
      uint64_t v14 = 0;
    }
    long long v15 = (_DWORD *)(v13 + 4 * v9);
    unint64_t v16 = v13 + 4 * v14;
    *long long v15 = a3;
    uint64_t v7 = v15 + 1;
    while (v5 != v8)
    {
      int v17 = *((_DWORD *)v5 - 1);
      v5 -= 4;
      *--long long v15 = v17;
    }
    a2[2] = v15;
    a2[3] = v7;
    a2[4] = v16;
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    *(_DWORD *)uint64_t v5 = a3;
    uint64_t v7 = v5 + 4;
  }
  a2[3] = v7;
}

void Espresso::CVAEngine::CVACompiler::__forward(uint64_t a1)
{
  void (***v62)(uint64_t *__return_ptr, void);
  std::runtime_error *exception;
  std::runtime_error *v64;
  std::string *v65;
  long long v66;
  std::string *v67;
  long long v68;
  std::string *v69;
  std::string::size_type size;
  std::string *v71;
  long long v72;
  std::runtime_error *v73;
  std::string *v74;
  long long v75;
  std::string *v76;
  long long v77;
  std::string *v78;
  std::string::size_type v79;
  std::string *v80;
  long long v81;
  uint64_t v82;
  std::__shared_weak_count *v83;
  char *v84;
  CFAllocatorRef alloc;
  void *v87;
  char *v88;
  void (***v89)(uint64_t *__return_ptr, void);
  void v90[5];
  long long v91;
  std::string v92;
  std::string v93;
  std::string v94;
  std::string v95;
  std::string v96;
  void v97[7];
  uint64_t v98;
  std::__shared_weak_count *v99;
  uint64_t v100;
  int v101;
  char *v102;
  char *v103;
  char *v104;
  std::string v105;
  uint64_t (*v106)(uint64_t, uint64_t);
  long long v107;
  uint64_t v108;
  std::__shared_weak_count *v109;

  if (!*(_DWORD *)(a1 + 80))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Network not built");
    goto LABEL_117;
  }
  uint64_t v1 = a1;
  uint64_t v2 = *(void *)(a1 + 32);
  if (!*(void *)(v2 + 144))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "HX context not setup");
    goto LABEL_117;
  }
  uint64_t v3 = *(void *)(v2 + 168);
  if (!v3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "netpipe not setup");
LABEL_117:
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v82 = v3;
  long long v102 = 0;
  uint64_t v103 = 0;
  uint64_t v104 = 0;
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v5 = *(void **)(v4 + 232);
  unsigned int v87 = (void *)(v4 + 240);
  if (v5 != (void *)(v4 + 240))
  {
    unint64_t v6 = 0;
    uint64_t v7 = 0;
    uint64_t v88 = 0;
    alloc = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    while (1)
    {
      if (*((char *)v5 + 55) < 0) {
        std::string::__init_copy_ctor_external(&v105, (const std::string::value_type *)v5[4], v5[5]);
      }
      else {
        uint64_t v105 = *(std::string *)(v5 + 4);
      }
      LOBYTE(v106) = *((unsigned char *)v5 + 56);
      uint64_t v8 = *(void *)(v1 + 48) + 136;
      v96.__r_.__value_.__r.__words[0] = (std::string::size_type)&v105;
      uint64_t v9 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8, (unsigned __int8 *)&v105, (long long **)&v96);
      unint64_t v11 = (std::__shared_weak_count *)*((void *)v9 + 5);
      unint64_t v10 = (std::__shared_weak_count *)*((void *)v9 + 6);
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      BOOL v12 = (v105.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &v105
          : (std::string *)v105.__r_.__value_.__r.__words[0];
      CFStringRef v13 = CFStringCreateWithCString(alloc, (const char *)v12, 0);
      uint64_t v14 = operator new(0x20uLL);
      int v22 = v14;
      v14[1] = 0;
      void v14[2] = 0;
      *uint64_t v14 = &unk_1EE38C6D8;
      void v14[3] = v13;
      char v23 = v14 + 3;
      long long v24 = v103;
      if (v103 >= v104)
      {
        unsigned int v83 = v10;
        float v84 = v6;
        int v26 = v102;
        uint64_t v27 = (v103 - v102) >> 4;
        unint64_t v28 = v27 + 1;
        if ((unint64_t)(v27 + 1) >> 60) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v29 = v104 - v102;
        if ((v104 - v102) >> 3 > v28) {
          unint64_t v28 = v29 >> 3;
        }
        if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v30 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v30 = v28;
        }
        if (v30 >> 60) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        std::string::size_type v31 = (char *)operator new(16 * v30);
        std::string v32 = &v31[16 * v27];
        uint64_t v33 = &v31[16 * v30];
        *(void *)std::string v32 = v23;
        *((void *)v32 + 1) = v22;
        uint64_t v25 = v32 + 16;
        if (v24 == v26)
        {
          long long v102 = &v31[16 * v27];
          uint64_t v103 = v32 + 16;
          uint64_t v104 = &v31[16 * v30];
          unint64_t v6 = v84;
        }
        else
        {
          unint64_t v6 = v84;
          do
          {
            long long v34 = *((_OWORD *)v24 - 1);
            v24 -= 16;
            *((_OWORD *)v32 - 1) = v34;
            v32 -= 16;
            *(void *)long long v24 = 0;
            *((void *)v24 + 1) = 0;
          }
          while (v24 != v26);
          long long v24 = v102;
          std::string v35 = v103;
          long long v102 = v32;
          uint64_t v103 = v25;
          uint64_t v104 = v33;
          while (v35 != v24)
          {
            std::string v36 = (std::__shared_weak_count *)*((void *)v35 - 1);
            if (v36) {
              nitro::nitro_function::nitro_function(v36);
            }
            v35 -= 16;
          }
        }
        unint64_t v10 = v83;
        if (v24) {
          operator delete(v24);
        }
      }
      else
      {
        *(void *)uint64_t v103 = v23;
        *((void *)v24 + 1) = v14;
        uint64_t v25 = v24 + 16;
      }
      uint64_t v103 = v25;
      if (v11)
      {
        char v38 = v37;
        unint64_t v11 = 0;
        if (v10 && v37)
        {
          atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
          unint64_t v11 = v10;
        }
      }
      else
      {
        char v38 = 0;
      }
      Espresso::CVAEngine::blob_container::force_allocate(v38, v15, v16, v17, v18, v19, v20, v21);
      CFStringRef v39 = (const __CFString *)*((void *)v38 + 21);
      if (v7 >= v88) {
        break;
      }
      *(void *)uint64_t v7 = v13;
      *((void *)v7 + 1) = v39;
      v7 += 16;
      uint64_t v1 = a1;
      if (v11) {
        goto LABEL_41;
      }
LABEL_42:
      if (v10) {
        nitro::nitro_function::nitro_function(v10);
      }
      if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v105.__r_.__value_.__l.__data_);
      }
      uint64_t v40 = (void *)v5[1];
      if (v40)
      {
        do
        {
          uint64_t v41 = v40;
          uint64_t v40 = (void *)*v40;
        }
        while (v40);
      }
      else
      {
        do
        {
          uint64_t v41 = (void *)v5[2];
          BOOL v42 = *v41 == (void)v5;
          uint64_t v5 = v41;
        }
        while (!v42);
      }
      uint64_t v5 = v41;
      if (v41 == v87) {
        goto LABEL_73;
      }
    }
    uint64_t v43 = (v7 - v6) >> 4;
    unint64_t v44 = v43 + 1;
    if ((unint64_t)(v43 + 1) >> 60) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    if ((v88 - v6) >> 3 > v44) {
      unint64_t v44 = (v88 - v6) >> 3;
    }
    if ((unint64_t)(v88 - v6) >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v45 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v45 = v44;
    }
    if (v45)
    {
      if (v45 >> 60) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      long long v46 = (char *)operator new(16 * v45);
    }
    else
    {
      long long v46 = 0;
    }
    __int16 v47 = v10;
    char v48 = (CFStringRef *)&v46[16 * v43];
    *char v48 = v13;
    v48[1] = v39;
    if (v7 == v6)
    {
      uint64_t v50 = &v46[16 * v43];
    }
    else
    {
      uint64_t v49 = &v46[16 * v43];
      do
      {
        uint64_t v50 = v49 - 16;
        *((_OWORD *)v49 - 1) = *((_OWORD *)v7 - 1);
        v7 -= 16;
        v49 -= 16;
      }
      while (v7 != v6);
    }
    uint64_t v88 = &v46[16 * v45];
    uint64_t v7 = (char *)(v48 + 2);
    if (v6) {
      operator delete(v6);
    }
    unint64_t v6 = v50;
    uint64_t v1 = a1;
    unint64_t v10 = v47;
    if (!v11) {
      goto LABEL_42;
    }
LABEL_41:
    nitro::nitro_function::nitro_function(v11);
    goto LABEL_42;
  }
  unint64_t v6 = 0;
  uint64_t v7 = 0;
LABEL_73:
  v105.__r_.__value_.__r.__words[0] = 0;
  v105.__r_.__value_.__l.__size_ = (std::string::size_type)&v105;
  v105.__r_.__value_.__r.__words[2] = 0x3032000000;
  uint64_t v106 = __Block_byref_object_copy__21354;
  *(void *)&int v107 = __Block_byref_object_dispose__21355;
  *((void *)&v107 + 1) = dispatch_semaphore_create(0);
  uint64_t v98 = 0;
  unsigned int v99 = (std::__shared_weak_count *)&v98;
  uint64_t v100 = 0x2020000000;
  uint64_t v101 = 0;
  v97[0] = MEMORY[0x1E4F143A8];
  v97[1] = 3221225472;
  v97[2] = ___ZN8Espresso9CVAEngine11CVACompiler9__forwardERKNSt3__110shared_ptrINS_14abstract_batchEEE_block_invoke;
  v97[3] = &unk_1E5747A30;
  v97[5] = &v105;
  v97[6] = v1;
  v97[4] = &v98;
  if (softLinkCVANetPipeProcessNetwork(v82, @"network", (unint64_t)(v7 - v6) >> 4, v6, v97))
  {
    unsigned int v64 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v93, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/CVAEngine/CVACompiler.mm");
    char v65 = std::string::insert(&v93, 0, "CVA EXPECT_EQ failed ");
    uint64_t v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
    v94.__r_.__value_.__r.__words[2] = v65->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v94.__r_.__value_.__l.__data_ = v66;
    v65->__r_.__value_.__l.__size_ = 0;
    v65->__r_.__value_.__r.__words[2] = 0;
    v65->__r_.__value_.__r.__words[0] = 0;
    uint64_t v67 = std::string::append(&v94, ":");
    id v68 = *(_OWORD *)&v67->__r_.__value_.__l.__data_;
    v95.__r_.__value_.__r.__words[2] = v67->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v95.__r_.__value_.__l.__data_ = v68;
    v67->__r_.__value_.__l.__size_ = 0;
    v67->__r_.__value_.__r.__words[2] = 0;
    v67->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v92, 412);
    if ((v92.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v69 = &v92;
    }
    else {
      unint64_t v69 = (std::string *)v92.__r_.__value_.__r.__words[0];
    }
    if ((v92.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v92.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v92.__r_.__value_.__l.__size_;
    }
    uint64_t v71 = std::string::append(&v95, (const std::string::value_type *)v69, size);
    uint64_t v72 = *(_OWORD *)&v71->__r_.__value_.__l.__data_;
    v96.__r_.__value_.__r.__words[2] = v71->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v96.__r_.__value_.__l.__data_ = v72;
    v71->__r_.__value_.__l.__size_ = 0;
    v71->__r_.__value_.__r.__words[2] = 0;
    v71->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v64, &v96);
    __cxa_throw(v64, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  dispatch_semaphore_wait(*(dispatch_semaphore_t *)(v105.__r_.__value_.__l.__size_ + 40), 0xFFFFFFFFFFFFFFFFLL);
  if (LODWORD(v99[1].__vftable))
  {
    uint64_t v73 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v93, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/CVAEngine/CVACompiler.mm");
    uint64_t v74 = std::string::insert(&v93, 0, "CVA EXPECT_EQ failed ");
    uint64_t v75 = *(_OWORD *)&v74->__r_.__value_.__l.__data_;
    v94.__r_.__value_.__r.__words[2] = v74->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v94.__r_.__value_.__l.__data_ = v75;
    v74->__r_.__value_.__l.__size_ = 0;
    v74->__r_.__value_.__r.__words[2] = 0;
    v74->__r_.__value_.__r.__words[0] = 0;
    uint64_t v76 = std::string::append(&v94, ":");
    uint64_t v77 = *(_OWORD *)&v76->__r_.__value_.__l.__data_;
    v95.__r_.__value_.__r.__words[2] = v76->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v95.__r_.__value_.__l.__data_ = v77;
    v76->__r_.__value_.__l.__size_ = 0;
    v76->__r_.__value_.__r.__words[2] = 0;
    v76->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v92, 416);
    if ((v92.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v78 = &v92;
    }
    else {
      uint64_t v78 = (std::string *)v92.__r_.__value_.__r.__words[0];
    }
    if ((v92.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v79 = HIBYTE(v92.__r_.__value_.__r.__words[2]);
    }
    else {
      uint64_t v79 = v92.__r_.__value_.__l.__size_;
    }
    uint64_t v80 = std::string::append(&v95, (const std::string::value_type *)v78, v79);
    uint64_t v81 = *(_OWORD *)&v80->__r_.__value_.__l.__data_;
    v96.__r_.__value_.__r.__words[2] = v80->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v96.__r_.__value_.__l.__data_ = v81;
    v80->__r_.__value_.__l.__size_ = 0;
    v80->__r_.__value_.__r.__words[2] = 0;
    v80->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v73, &v96);
    __cxa_throw(v73, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  _Block_object_dispose(&v98, 8);
  _Block_object_dispose(&v105, 8);

  uint64_t v51 = *(void *)(v1 + 192);
  if (*(void *)(v1 + 200) != v51)
  {
    uint64_t v52 = *(void *)(*(void *)v51 + 64);
    uint64_t v53 = *(std::__shared_weak_count **)(v52 + 16);
    char v89 = *(void (****)(uint64_t *__return_ptr, void))(v52 + 8);
    if (v53) {
      atomic_fetch_add_explicit(&v53->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v54 = *(void *)(*(void *)(v1 + 216) + 80);
    if (*(void *)(*(void *)(v1 + 216) + 88) != v54)
    {
      unint64_t v55 = 0;
      do
      {
        long long v56 = *(_OWORD *)(v54 + 16 * v55);
        uint64_t v91 = v56;
        if (*((void *)&v56 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v56 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        Espresso::sync_copy_to_host(&v98, &v91);
        if (*((void *)&v91 + 1)) {
          nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v91 + 1));
        }
        uint64_t v57 = *(void *)(*(void *)(v1 + 216) + 104);
        long long v58 = *(_OWORD *)(v57 + 16 * v55);
        uint64_t v59 = *(std::__shared_weak_count **)(v57 + 16 * v55 + 8);
        if (v59) {
          atomic_fetch_add_explicit(&v59->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v60 = v98;
        unint64_t v61 = v99;
        if (v99) {
          atomic_fetch_add_explicit(&v99->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        int v62 = *(void (****)(uint64_t *__return_ptr, void))(v58 + 72);
        v105.__r_.__value_.__r.__words[0] = MEMORY[0x1E4F143A8];
        v105.__r_.__value_.__l.__size_ = 3321888768;
        v105.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZN8Espresso19sync_copy_from_hostENSt3__110shared_ptrINS_23abstract_blob_containerEEENS1_INS_4blobIfLi4EEEEE_block_invoke_21360;
        uint64_t v106 = (uint64_t (*)(uint64_t, uint64_t))&__block_descriptor_64_ea8_32c62_ZTSNSt3__110shared_ptrIN8Espresso23abstract_blob_containerEEE48c49_ZTSNSt3__110shared_ptrIN8Espresso4blobIfLi4EEEEE_e10_v16__0r_v8l;
        int v107 = v58;
        if (v59) {
          atomic_fetch_add_explicit(&v59->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        int v108 = v60;
        uint64_t v109 = v61;
        if (v61) {
          atomic_fetch_add_explicit(&v61->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        Espresso::abstract_context::compute_batch_sync(v62, &v105);
        if (v109) {
          nitro::nitro_function::nitro_function(v109);
        }
        if (*((void *)&v107 + 1)) {
          nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v107 + 1));
        }
        if (v61) {
          nitro::nitro_function::nitro_function(v61);
        }
        if (v59) {
          nitro::nitro_function::nitro_function(v59);
        }
        if (v99) {
          nitro::nitro_function::nitro_function(v99);
        }
        ++v55;
        uint64_t v54 = *(void *)(*(void *)(v1 + 216) + 80);
      }
      while (v55 < (*(void *)(*(void *)(v1 + 216) + 88) - v54) >> 4);
    }
    v90[0] = MEMORY[0x1E4F143A8];
    v90[1] = 3221225472;
    id v90[2] = ___ZN8Espresso9CVAEngine11CVACompiler9__forwardERKNSt3__110shared_ptrINS_14abstract_batchEEE_block_invoke_2;
    v90[3] = &__block_descriptor_40_e10_v16__0r_v8l;
    v90[4] = v1;
    Espresso::abstract_context::compute_batch_sync(v89, v90);
    if (v53) {
      nitro::nitro_function::nitro_function(v53);
    }
  }
  if (*(int *)(v1 + 56) >= 1) {
    puts("[CVACompiler __forward]");
  }
  v105.__r_.__value_.__r.__words[0] = (std::string::size_type)&v102;
  std::vector<std::shared_ptr<Espresso::graph_optimization_rule>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v105);
  if (v6) {
    operator delete(v6);
  }
}

void sub_192B04350(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *__p,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (a54 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (a47 < 0) {
    operator delete(a42);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  if (a34 < 0)
  {
    operator delete(a29);
    if ((v55 & 1) == 0)
    {
LABEL_14:
      _Block_object_dispose((const void *)(v57 - 232), 8);
      _Block_object_dispose((const void *)(v57 - 176), 8);

      *(void *)(v57 - 232) = v57 - 200;
      std::vector<std::shared_ptr<Espresso::graph_optimization_rule>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v57 - 232));
      if (v56) {
        operator delete(v56);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v55)
  {
    goto LABEL_14;
  }
  __cxa_free_exception(v54);
  goto LABEL_14;
}

uint64_t __Block_byref_object_copy__21354(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__21355(uint64_t a1)
{
}

intptr_t ___ZN8Espresso9CVAEngine11CVACompiler9__forwardERKNSt3__110shared_ptrINS_14abstract_batchEEE_block_invoke(intptr_t result, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = *(void *)(result + 48);
  *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a2;
  if (!*(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24))
  {
    uint64_t v6 = a4;
    for (intptr_t i = result; v6; --v6)
    {
      uint64_t v9 = *(__CVBuffer **)(a5 + 24);
      id v10 = *(id *)a5;
      uint64_t v11 = *(void *)(v5 + 48);
      id v12 = v10;
      std::string::basic_string[abi:ne180100]<0>(__p, (char *)[v12 UTF8String]);
      int v22 = __p;
      CFStringRef v13 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v11 + 136, (unsigned __int8 *)__p, (long long **)&v22);
      uint64_t v15 = (std::__shared_weak_count *)*((void *)v13 + 5);
      uint64_t v14 = (std::__shared_weak_count *)*((void *)v13 + 6);
      if (v14) {
        atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v21 < 0)
      {
        operator delete(__p[0]);
        if (v15)
        {
LABEL_7:
          unsigned int v17 = v16;
          if (v14) {
            BOOL v18 = v16 == 0;
          }
          else {
            BOOL v18 = 1;
          }
          if (v18)
          {
            uint64_t v15 = 0;
          }
          else
          {
            atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v15 = v14;
          }
          goto LABEL_15;
        }
      }
      else if (v15)
      {
        goto LABEL_7;
      }
      unsigned int v17 = 0;
LABEL_15:
      CVPixelBufferRetain(v9);
      int v19 = (__CVBuffer *)*((void *)v17 + 21);
      if (v19) {
        CVPixelBufferRelease(v19);
      }
      *((void *)v17 + 21) = v9;
      if (v15) {
        nitro::nitro_function::nitro_function(v15);
      }
      if (v14) {
        nitro::nitro_function::nitro_function(v14);
      }

      a5 += 32;
    }
    return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(void *)(*(void *)(i + 40) + 8) + 40));
  }
  return result;
}

void sub_192B04724(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

uint64_t ___ZN8Espresso9CVAEngine11CVACompiler9__forwardERKNSt3__110shared_ptrINS_14abstract_batchEEE_block_invoke_2(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 32);
  uint64_t v3 = *(void *)(v2 + 192);
  if (*(void *)(v2 + 200) != v3)
  {
    uint64_t v5 = 0;
    unint64_t v6 = 0;
    do
    {
      *(void *)(*(void *)a2 + 48) = v6;
      __n128 result = (*(uint64_t (**)(void, uint64_t, unint64_t))(**(void **)(v3 + v5) + 8))(*(void *)(v3 + v5), a2, v6++);
      uint64_t v3 = *(void *)(v2 + 192);
      v5 += 16;
    }
    while (v6 < (*(void *)(v2 + 200) - v3) >> 4);
  }
  return result;
}

uint64_t ___ZN8Espresso19sync_copy_from_hostENSt3__110shared_ptrINS_23abstract_blob_containerEEENS1_INS_4blobIfLi4EEEEE_block_invoke_21360(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 32) + 48))(*(void *)(a1 + 32), a2, a1 + 48);
}

void std::__shared_ptr_emplace<Espresso::CVAEngine::CFAutoreleased<__CFString const*>>::__on_zero_shared(uint64_t a1)
{
}

void std::__shared_ptr_emplace<Espresso::CVAEngine::CFAutoreleased<__CFString const*>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38C6D8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::CVAEngine::CFAutoreleased<__CFString const*>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38C6D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t initCVANetPipeProcessNetwork(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v9 = a5;
  if (AppleCVALibrary(void)::sOnce != -1) {
    dispatch_once(&AppleCVALibrary(void)::sOnce, &__block_literal_global_21369);
  }
  softLinkCVANetPipeProcessNetworuint64_t k = (uint64_t (*)(void, void, void, void, void))dlsym((void *)AppleCVALibrary(void)::sLib, "CVANetPipeProcessNetwork");
  uint64_t v10 = softLinkCVANetPipeProcessNetwork(a1, a2, a3, a4, v9);

  return v10;
}

void sub_192B04AF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *___ZL15AppleCVALibraryv_block_invoke_21374()
{
  __n128 result = dlopen("/System/Library/PrivateFrameworks/AppleCVA.framework/AppleCVA", 2);
  AppleCVALibrary(void)::sLib = (uint64_t)result;
  return result;
}

void Espresso::CVAEngine::CVACompiler::build(Espresso::CVAEngine::CVACompiler *this, uint64_t a2, int a3, int a4)
{
  if (!*((_DWORD *)this + 20))
  {
    LODWORD(v4) = a4;
    if (*((int *)this + 14) >= 1) {
      printf("[CVACompiler::build] %d %d\n", a3, a4);
    }
    Espresso::CVAEngine::CVACompiler::reset(this);
    if ((v4 & 0x80000000) != 0) {
      uint64_t v4 = (*(void *)(*((void *)this + 6) + 40) - *(void *)(*((void *)this + 6) + 32)) >> 4;
    }
    *((_DWORD *)this + 23) = a3;
    *((_DWORD *)this + 24) = v4;
    *((_DWORD *)this + 30) = 0;
    uint64_t v102 = a2;
    if (*(void *)a2)
    {
      if (v8)
      {
        id v9 = *(std::__shared_weak_count **)(a2 + 8);
        if (v9) {
          atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        id v9 = 0;
      }
    }
    else
    {
      id v9 = 0;
      uint64_t v8 = 0;
    }
    v8[16] = this;
    if ((int)v4 > a3)
    {
      uint64_t v10 = (uint64_t *)((char *)this + 192);
      unint64_t v11 = a3;
      int v103 = v4;
      do
      {
        *((_DWORD *)this + 22) = v11;
        if (*((void *)this + 29))
        {
          uint64_t v12 = *(void *)(*((void *)this + 6) + 32);
          CFStringRef v13 = (_OWORD *)*((void *)this + 25);
          unint64_t v14 = *((void *)this + 26);
          if ((unint64_t)v13 >= v14)
          {
            uint64_t v18 = ((uint64_t)v13 - *v10) >> 4;
            unint64_t v19 = v18 + 1;
            if ((unint64_t)(v18 + 1) >> 60) {
              std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v20 = v14 - *v10;
            if (v20 >> 3 > v19) {
              unint64_t v19 = v20 >> 3;
            }
            if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v21 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v21 = v19;
            }
            uint64_t v117 = (void (*)(uint64_t))((char *)this + 208);
            int v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v21);
            char v23 = &v22[16 * v18];
            v115.__r_.__value_.__r.__words[0] = (std::string::size_type)v22;
            v115.__r_.__value_.__l.__size_ = (std::string::size_type)v23;
            char v116 = (uint64_t (*)(uint64_t, uint64_t))&v22[16 * v24];
            long long v25 = *(_OWORD *)(v12 + 16 * v11);
            *(_OWORD *)char v23 = v25;
            if (*((void *)&v25 + 1)) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v25 + 1) + 8), 1uLL, memory_order_relaxed);
            }
            v115.__r_.__value_.__r.__words[2] = (std::string::size_type)(v23 + 16);
            std::vector<std::shared_ptr<Espresso::layer>>::__swap_out_circular_buffer(v10, &v115);
            uint64_t v16 = (_OWORD *)*((void *)this + 25);
            std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v115);
          }
          else
          {
            long long v15 = *(_OWORD *)(v12 + 16 * v11);
            *CFStringRef v13 = v15;
            if (*((void *)&v15 + 1)) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v15 + 1) + 8), 1uLL, memory_order_relaxed);
            }
            uint64_t v16 = v13 + 1;
            *((void *)this + 25) = v13 + 1;
          }
          *((void *)this + 25) = v16;
          goto LABEL_63;
        }
        if (*((int *)this + 18) < 1)
        {
          int v17 = 1;
        }
        else if (*((_DWORD *)this + 17) == v11)
        {
          int v17 = *((_DWORD *)this + 18);
        }
        else
        {
          int v17 = 0;
        }
        uint64_t v26 = *((void *)this + 6) + 96;
        v115.__r_.__value_.__r.__words[0] = v11;
        *((void *)this + 13) = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v26, v11, &v115)+ 3;
        uint64_t v27 = *((void *)this + 6) + 56;
        v115.__r_.__value_.__r.__words[0] = v11;
        *((void *)this + 14) = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v27, v11, &v115)+ 3;
        uint64_t v28 = *((void *)this + 6) + 56;
        v115.__r_.__value_.__r.__words[0] = v11;
        uint64_t v29 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v28, v11, &v115);
        if (v29[4] == v29[3])
        {
LABEL_57:
          if (v17) {
            goto LABEL_58;
          }
          goto LABEL_63;
        }
        uint64_t v30 = *((void *)this + 6) + 56;
        v113.__r_.__value_.__r.__words[0] = v11;
        std::string::size_type v31 = (long long *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v30, v11, &v113)[3];
        if (*((char *)v31 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v115, *(const std::string::value_type **)v31, *((void *)v31 + 1));
        }
        else
        {
          long long v32 = *v31;
          v115.__r_.__value_.__r.__words[2] = *((void *)v31 + 2);
          *(_OWORD *)&v115.__r_.__value_.__l.__data_ = v32;
        }
        uint64_t v33 = *((void *)this + 6) + 136;
        v113.__r_.__value_.__r.__words[0] = (std::string::size_type)&v115;
        long long v34 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v33, (unsigned __int8 *)&v115, (long long **)&v113);
        uint64_t v35 = *((void *)v34 + 5);
        std::string v36 = (std::__shared_weak_count *)*((void *)v34 + 6);
        if (v36) {
          atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (v35 && *(_DWORD *)(v35 + 116))
        {
          uint64_t v37 = *(void *)(*(void *)(*((void *)this + 6) + 32) + 16 * v11);
          char v38 = *(const void **)(v37 + 64);
          CFStringRef v39 = *(std::__shared_weak_count **)(v37 + 72);
          if (v39) {
            atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (!v38)
          {
LABEL_52:
            LODWORD(v4) = v103;
            if (!v39) {
              goto LABEL_54;
            }
            goto LABEL_53;
          }
          if (v40)
          {
            LODWORD(v4) = v103;
            if (v39)
            {
              atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
              uint64_t v41 = v40 + 160;
              goto LABEL_51;
            }
            v40[160] = -128;
          }
          else
          {
            if (!v42) {
              goto LABEL_52;
            }
            if (v39)
            {
              atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
              uint64_t v41 = v42 + 116;
              LODWORD(v4) = v103;
LABEL_51:
              _DWORD *v41 = -128;
              nitro::nitro_function::nitro_function(v39);
LABEL_53:
              nitro::nitro_function::nitro_function(v39);
              goto LABEL_54;
            }
            v42[116] = -128;
            LODWORD(v4) = v103;
          }
        }
LABEL_54:
        if (v36) {
          nitro::nitro_function::nitro_function(v36);
        }
        uint64_t v10 = (uint64_t *)((char *)this + 192);
        if ((SHIBYTE(v115.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_57;
        }
        operator delete(v115.__r_.__value_.__l.__data_);
        for (; v17; --v17)
        {
LABEL_58:
          uint64_t v43 = *(void *)(*(void *)(*((void *)this + 6) + 32) + 16 * v11);
          v115.__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
          v115.__r_.__value_.__l.__size_ = (std::string::size_type)v9;
          if (v9) {
            atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          (*(void (**)(uint64_t, std::string *, unint64_t))(*(void *)v43 + 8))(v43, &v115, v11);
          if (v115.__r_.__value_.__l.__size_) {
            nitro::nitro_function::nitro_function((std::__shared_weak_count *)v115.__r_.__value_.__l.__size_);
          }
        }
LABEL_63:
        ++v11;
      }
      while (v4 != v11);
    }
    CFAllocatorRef v44 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    theDict = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    unint64_t v45 = (std::__shared_weak_count *)operator new(0x20uLL);
    v45->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38C6A0;
    v45->__shared_owners_ = 0;
    uint64_t v104 = v45;
    v45->__shared_weak_owners_ = 0;
    v45[1].__vftable = (std::__shared_weak_count_vtbl *)theDict;
    CFMutableArrayRef Mutable = CFArrayCreateMutable(v44, 0, MEMORY[0x1E4F1D510]);
    uint64_t v47 = *((void *)this + 6);
    char v48 = *(void **)(v47 + 232);
    uint64_t v105 = (void *)(v47 + 240);
    if (v48 != (void *)(v47 + 240))
    {
      uint64_t v49 = Mutable;
      do
      {
        if (*((char *)v48 + 55) < 0) {
          std::string::__init_copy_ctor_external(&v115, (const std::string::value_type *)v48[4], v48[5]);
        }
        else {
          std::string v115 = *(std::string *)(v48 + 4);
        }
        LOBYTE(v116) = *((unsigned char *)v48 + 56);
        if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v113, v115.__r_.__value_.__l.__data_, v115.__r_.__value_.__l.__size_);
        }
        else {
          std::string v113 = v115;
        }
        uint64_t v50 = *((void *)this + 6) + 136;
        valuePtr = &v113;
        uint64_t v51 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v50, (unsigned __int8 *)&v113, (long long **)&valuePtr);
        uint64_t v52 = (_DWORD *)*((void *)v51 + 5);
        uint64_t v53 = (std::__shared_weak_count *)*((void *)v51 + 6);
        if (v53) {
          atomic_fetch_add_explicit(&v53->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if ((v113.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v54 = &v113;
        }
        else {
          uint64_t v54 = (std::string *)v113.__r_.__value_.__r.__words[0];
        }
        CFStringRef v55 = CFStringCreateWithCString(v44, (const char *)v54, 0);
        CFArrayAppendValue(v49, v55);
        long long v56 = (const void *)getkCVANetInputs();
        CFDictionaryAddValue(theDict, v56, v49);
        CFRelease(v49);
        uint64_t v57 = (const void *)getkCVANetFormatUInt8();
        int v58 = v52[3];
        int v59 = v52[4];
        LODWORD(valuePtr) = v52[2];
        LODWORD(v107) = v58;
        v119[0] = v59;
        uint64_t v60 = CFDictionaryCreateMutable(v44, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        unint64_t v61 = (const void *)getkCVANetInputType[0]();
        CFDictionaryAddValue(v60, v61, v57);
        int v62 = (const void *)getkCVANetInputWidth[0]();
        CFNumberRef v63 = CFNumberCreate(v44, kCFNumberSInt32Type, &valuePtr);
        CFDictionaryAddValue(v60, v62, v63);
        CFRelease(v63);
        unsigned int v64 = (const void *)getkCVANetInputHeight[0]();
        CFNumberRef v65 = CFNumberCreate(v44, kCFNumberSInt32Type, &v107);
        CFDictionaryAddValue(v60, v64, v65);
        CFRelease(v65);
        uint64_t v66 = (const void *)getkCVANetInputChannels[0]();
        CFNumberRef v67 = CFNumberCreate(v44, kCFNumberSInt32Type, v119);
        CFDictionaryAddValue(v60, v66, v67);
        CFRelease(v67);
        CFDictionaryAddValue(theDict, v55, v60);
        CFRelease(v60);
        CFRelease(v55);
        if (v53) {
          nitro::nitro_function::nitro_function(v53);
        }
        if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v113.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v115.__r_.__value_.__l.__data_);
        }
        id v68 = (void *)v48[1];
        if (v68)
        {
          do
          {
            unint64_t v69 = v68;
            id v68 = (void *)*v68;
          }
          while (v68);
        }
        else
        {
          do
          {
            unint64_t v69 = (void *)v48[2];
            BOOL v70 = *v69 == (void)v48;
            char v48 = v69;
          }
          while (!v70);
        }
        char v48 = v69;
      }
      while (v69 != v105);
    }
    uint64_t v71 = CFArrayCreateMutable(v44, 0, MEMORY[0x1E4F1D510]);
    uint64_t v72 = (uint64_t *)*((void *)this + 18);
    for (intptr_t i = (uint64_t *)*((void *)this + 19); v72 != i; v72 += 2)
    {
      uint64_t v74 = *v72;
      uint64_t v75 = (std::__shared_weak_count *)v72[1];
      if (v75) {
        atomic_fetch_add_explicit(&v75->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      CFArrayAppendValue(v71, *(const void **)(v74 + 48));
      if (v75) {
        nitro::nitro_function::nitro_function(v75);
      }
    }
    uint64_t v76 = (const void *)getkCVANetUnits();
    CFDictionaryAddValue(theDict, v76, v71);
    CFRelease(v71);
    uint64_t v77 = (uint64_t *)*((void *)this + 18);
    for (unint64_t j = (uint64_t *)*((void *)this + 19); v77 != j; v77 += 2)
    {
      uint64_t v79 = *v77;
      uint64_t v80 = (std::__shared_weak_count *)v77[1];
      if (v80) {
        atomic_fetch_add_explicit(&v80->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      CFDictionaryAddValue(theDict, *(const void **)(v79 + 48), *(const void **)(v79 + 8));
      if (v80) {
        nitro::nitro_function::nitro_function(v80);
      }
    }
    uint64_t v81 = *(void *)(*((void *)this + 4) + 168);
    v115.__r_.__value_.__r.__words[0] = 0;
    v115.__r_.__value_.__l.__size_ = (std::string::size_type)&v115;
    v115.__r_.__value_.__r.__words[2] = 0x3032000000;
    char v116 = __Block_byref_object_copy__21354;
    uint64_t v117 = __Block_byref_object_dispose__21355;
    dispatch_semaphore_t v118 = dispatch_semaphore_create(0);
    v113.__r_.__value_.__r.__words[0] = 0;
    v113.__r_.__value_.__l.__size_ = (std::string::size_type)&v113;
    v113.__r_.__value_.__r.__words[2] = 0x2020000000;
    int v114 = 0;
    valuePtr = 0;
    p_valuePtr = &valuePtr;
    uint64_t v111 = 0x2020000000;
    uint64_t v112 = 0;
    v108[0] = MEMORY[0x1E4F143A8];
    v108[1] = 3221225472;
    void v108[2] = ___ZN8Espresso9CVAEngine11CVACompiler5buildERKNSt3__110shared_ptrINS_14abstract_batchEEEii_block_invoke;
    v108[3] = &unk_1E5747A08;
    v108[4] = &v113;
    v108[5] = &valuePtr;
    v108[6] = &v115;
    uint64_t v82 = (void *)MEMORY[0x192FF2250](v108);
    LODWORD(v81) = softLinkCVANetPipeAddNetwork(v81, @"network", theDict, v82);
    dispatch_semaphore_wait(*(dispatch_semaphore_t *)(v115.__r_.__value_.__l.__size_ + 40), 0xFFFFFFFFFFFFFFFFLL);
    unsigned int v83 = p_valuePtr[3];
    if (*(_DWORD *)(v113.__r_.__value_.__l.__size_ + 24) | v81)
    {
      uint64_t v101 = v83;
      uint64_t v107 = [NSString stringWithFormat:@"%@", v101];
      Espresso::throw_exception_selector<Espresso::invalid_state_error,char const*>("CVA Error: %s", &v107);
    }
    if (v83) {
      CFRelease(v83);
    }

    _Block_object_dispose(&valuePtr, 8);
    _Block_object_dispose(&v113, 8);
    _Block_object_dispose(&v115, 8);

    uint64_t v84 = *((void *)this + 6);
    unint64_t v85 = *(void **)(v84 + 232);
    unsigned int v86 = (void *)(v84 + 240);
    if (v85 != (void *)(v84 + 240))
    {
      while (1)
      {
        if (*((char *)v85 + 55) < 0) {
          std::string::__init_copy_ctor_external(&v115, (const std::string::value_type *)v85[4], v85[5]);
        }
        else {
          std::string v115 = *(std::string *)(v85 + 4);
        }
        LOBYTE(v116) = *((unsigned char *)v85 + 56);
        uint64_t v87 = *((void *)this + 6) + 136;
        v113.__r_.__value_.__r.__words[0] = (std::string::size_type)&v115;
        uint64_t v88 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v87, (unsigned __int8 *)&v115, (long long **)&v113);
        char v89 = (const void *)*((void *)v88 + 5);
        id v90 = (std::__shared_weak_count *)*((void *)v88 + 6);
        if (v90) {
          atomic_fetch_add_explicit(&v90->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (v89)
        {
          if (v91) {
            break;
          }
        }
        if (v90) {
          goto LABEL_122;
        }
LABEL_123:
        if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v115.__r_.__value_.__l.__data_);
        }
        unsigned int v99 = (void *)v85[1];
        if (v99)
        {
          do
          {
            uint64_t v100 = v99;
            unsigned int v99 = (void *)*v99;
          }
          while (v99);
        }
        else
        {
          do
          {
            uint64_t v100 = (void *)v85[2];
            BOOL v70 = *v100 == (void)v85;
            unint64_t v85 = v100;
          }
          while (!v70);
        }
        unint64_t v85 = v100;
        if (v100 == v86) {
          goto LABEL_131;
        }
      }
      if (v90) {
        atomic_fetch_add_explicit(&v90->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      Espresso::CVAEngine::blob_container::force_allocate(v91, v92, v93, v94, v95, v96, v97, v98);
      if (!v90) {
        goto LABEL_123;
      }
      nitro::nitro_function::nitro_function(v90);
LABEL_122:
      nitro::nitro_function::nitro_function(v90);
      goto LABEL_123;
    }
LABEL_131:
    *((void *)this + 10) = 1;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__clear[abi:ne180100]((uint64_t *)this + 18);
    (*(void (**)(Espresso::CVAEngine::CVACompiler *, uint64_t))(*(void *)this + 24))(this, v102);
    nitro::nitro_function::nitro_function(v104);
    if (v9) {
      nitro::nitro_function::nitro_function(v9);
    }
  }
}

void sub_192B056F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Block_object_dispose(&a25, 8);
  _Block_object_dispose(&a29, 8);
  _Block_object_dispose((const void *)(v33 - 144), 8);

  nitro::nitro_function::nitro_function(a14);
  if (v29) {
    nitro::nitro_function::nitro_function(v29);
  }
  _Unwind_Resume(a1);
}

void sub_192B05750()
{
  if (*(char *)(v0 - 121) < 0) {
    operator delete(*(void **)(v0 - 144));
  }
  JUMPOUT(0x192B05994);
}

void sub_192B05780()
{
}

void sub_192B05790(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  nitro::nitro_function::nitro_function(a14);
  if (v14) {
    nitro::nitro_function::nitro_function(v14);
  }
  _Unwind_Resume(a1);
}

void sub_192B05798()
{
  if (v0)
  {
    nitro::nitro_function::nitro_function(v0);
    nitro::nitro_function::nitro_function(v0);
  }
  if (*(char *)(v1 - 121) < 0) {
    operator delete(*(void **)(v1 - 144));
  }
  JUMPOUT(0x192B0598CLL);
}

void sub_192B057B4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a34 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v34 - 121) < 0) {
    operator delete(*(void **)(v34 - 144));
  }
  JUMPOUT(0x192B0598CLL);
}

void sub_192B057BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (*(char *)(v15 - 121) < 0) {
    operator delete(*(void **)(v15 - 144));
  }
  nitro::nitro_function::nitro_function(a14);
  if (v14) {
    nitro::nitro_function::nitro_function(v14);
  }
  _Unwind_Resume(a1);
}

void sub_192B057C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
  nitro::nitro_function::nitro_function(a14);
  if (v14) {
    nitro::nitro_function::nitro_function(v14);
  }
  _Unwind_Resume(a1);
}

void sub_192B057E0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,long long a29,int a30,__int16 a31,char a32,unsigned __int8 a33)
{
  CFStringRef v39 = *(std::__shared_weak_count **)(v36 - 136);
  if (v39) {
    nitro::nitro_function::nitro_function(v39);
  }
  if (a2 == 1)
  {
    uint64_t v40 = __cxa_begin_catch(a1);
    uint64_t v41 = (char *)(*(uint64_t (**)(void *))(*(void *)v40 + 16))(v40);
    BOOL v42 = (std::string *)std::string::basic_string[abi:ne180100]<0>((void *)(v36 - 144), v41);
    std::string::append(v42, "[Error layer: ");
    std::to_string((std::string *)&a29, v35);
    if ((a33 & 0x80u) == 0) {
      uint64_t v43 = (const std::string::value_type *)&a29;
    }
    else {
      uint64_t v43 = (const std::string::value_type *)a29;
    }
    if ((a33 & 0x80u) == 0) {
      std::string::size_type v44 = a33;
    }
    else {
      std::string::size_type v44 = *((void *)&a29 + 1);
    }
    std::string::append((std::string *)(v36 - 144), v43, v44);
    if ((char)a33 < 0) {
      operator delete((void *)a29);
    }
    std::string::append((std::string *)(v36 - 144), ": ");
    uint64_t v45 = *(void *)(*(void *)(*(void *)(v33 + 48) + 32) + v34);
    char v48 = *(const std::string::value_type **)(v45 + 16);
    uint64_t v46 = v45 + 16;
    uint64_t v47 = v48;
    int v49 = *(char *)(v46 + 23);
    if (v49 >= 0) {
      uint64_t v50 = (const std::string::value_type *)v46;
    }
    else {
      uint64_t v50 = v47;
    }
    if (v49 >= 0) {
      std::string::size_type v51 = *(unsigned __int8 *)(v46 + 23);
    }
    else {
      std::string::size_type v51 = *(void *)(v46 + 8);
    }
    std::string::append((std::string *)(v36 - 144), v50, v51);
    std::string::append((std::string *)(v36 - 144), "]");
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, (const std::string *)(v36 - 144));
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  JUMPOUT(0x192B05994);
}

void sub_192B05908(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  __cxa_free_exception(v34);
  if (*(char *)(v35 - 121) < 0) {
    operator delete(*(void **)(v35 - 144));
  }
  __cxa_end_catch();
  JUMPOUT(0x192B05994);
}

void sub_192B0595C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (v34) {
    nitro::nitro_function::nitro_function(v34);
  }
  if (a34 < 0) {
    operator delete(a29);
  }
  JUMPOUT(0x192B0597CLL);
}

void Espresso::CVAEngine::CVACompiler::reset(Espresso::CVAEngine::CVACompiler *this)
{
  long long v2 = 0uLL;
  long long v12 = 0u;
  uint64_t v13 = 0;
  unint64_t v14 = &v15;
  long long v15 = 0u;
  long long v16 = 0u;
  memset(v17, 0, sizeof(v17));
  uint64_t v4 = (void **)((char *)this + 144);
  uint64_t v3 = *((void *)this + 18);
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  if (v3)
  {
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__clear[abi:ne180100]((uint64_t *)this + 18);
    operator delete(*v4);
    long long v2 = v12;
    uint64_t v3 = v13;
  }
  unint64_t v6 = (char *)this + 176;
  uint64_t v5 = (void *)*((void *)this + 22);
  *((_OWORD *)this + 9) = v2;
  *((void *)this + 20) = v3;
  uint64_t v13 = 0;
  long long v12 = 0uLL;
  std::__tree<std::__value_type<std::shared_ptr<Espresso::HXEngine::blob_container>,unsigned int>,std::__map_value_compare<std::shared_ptr<Espresso::HXEngine::blob_container>,std::__value_type<std::shared_ptr<Espresso::HXEngine::blob_container>,unsigned int>,std::less<std::shared_ptr<Espresso::HXEngine::blob_container>>,true>,std::allocator<std::__value_type<std::shared_ptr<Espresso::HXEngine::blob_container>,unsigned int>>>::destroy(v5);
  uint64_t v7 = v15;
  *((void *)this + 21) = v14;
  *((void *)this + 22) = v7;
  uint64_t v8 = *((void *)&v15 + 1);
  *((void *)this + 23) = *((void *)&v15 + 1);
  if (v8)
  {
    *(void *)(v7 + 16) = v6;
    unint64_t v14 = &v15;
    long long v15 = 0uLL;
  }
  else
  {
    *((void *)this + 21) = v6;
  }
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__vdeallocate((uint64_t *)this + 24);
  *((_OWORD *)this + 12) = v16;
  *((void *)this + 26) = *(void *)v17;
  memset(v17, 0, 24);
  long long v16 = 0uLL;
  id v9 = (std::__shared_weak_count *)*((void *)this + 28);
  *(_OWORD *)((char *)this + 216) = *(_OWORD *)&v17[8];
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  long long v10 = *(_OWORD *)&v17[24];
  *(void *)&v17[24] = 0;
  *(void *)&v17[32] = 0;
  unint64_t v11 = (std::__shared_weak_count *)*((void *)this + 30);
  *(_OWORD *)((char *)this + 232) = v10;
  if (v11)
  {
    nitro::nitro_function::nitro_function(v11);
    if (*(void *)&v17[32]) {
      nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&v17[32]);
    }
  }
  if (*(void *)&v17[16]) {
    nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&v17[16]);
  }
  uint64_t v18 = (void **)&v16;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v18);
  std::__tree<std::__value_type<std::shared_ptr<Espresso::HXEngine::blob_container>,unsigned int>,std::__map_value_compare<std::shared_ptr<Espresso::HXEngine::blob_container>,std::__value_type<std::shared_ptr<Espresso::HXEngine::blob_container>,unsigned int>,std::less<std::shared_ptr<Espresso::HXEngine::blob_container>>,true>,std::allocator<std::__value_type<std::shared_ptr<Espresso::HXEngine::blob_container>,unsigned int>>>::destroy((void *)v15);
  uint64_t v18 = (void **)&v12;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v18);
}

intptr_t ___ZN8Espresso9CVAEngine11CVACompiler5buildERKNSt3__110shared_ptrINS_14abstract_batchEEEii_block_invoke(void *a1, int a2, uint64_t a3)
{
  *(_DWORD *)(*(void *)(a1[4] + 8) + 24) = a2;
  *(void *)(*(void *)(a1[5] + 8) + 24) = a3;
  uint64_t v4 = *(const void **)(*(void *)(a1[5] + 8) + 24);
  if (v4) {
    CFRetain(v4);
  }
  uint64_t v5 = *(NSObject **)(*(void *)(a1[6] + 8) + 40);

  return dispatch_semaphore_signal(v5);
}

uint64_t initCVANetPipeAddNetwork(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v7 = a4;
  if (AppleCVALibrary(void)::sOnce != -1) {
    dispatch_once(&AppleCVALibrary(void)::sOnce, &__block_literal_global_21369);
  }
  softLinkCVANetPipeAddNetworuint64_t k = (uint64_t (*)(void, void, void, void))dlsym((void *)AppleCVALibrary(void)::sLib, "CVANetPipeAddNetwork");
  uint64_t v8 = softLinkCVANetPipeAddNetwork(a1, a2, a3, v7);

  return v8;
}

void sub_192B05C10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t initValkCVANetUnits(void)
{
  if (AppleCVALibrary(void)::sOnce != -1) {
    dispatch_once(&AppleCVALibrary(void)::sOnce, &__block_literal_global_21369);
  }
  uint64_t v0 = (uint64_t *)dlsym((void *)AppleCVALibrary(void)::sLib, "kCVANetUnits");
  if (v0)
  {
    uint64_t result = *v0;
    constantValkCVANetUnits = result;
  }
  else
  {
    uint64_t result = constantValkCVANetUnits;
  }
  getkCVANetUnits = kCVANetUnitsFunction;
  return result;
}

uint64_t kCVANetUnitsFunction(void)
{
  return constantValkCVANetUnits;
}

uint64_t initValkCVANetFormatUInt8()
{
  if (AppleCVALibrary(void)::sOnce != -1) {
    dispatch_once(&AppleCVALibrary(void)::sOnce, &__block_literal_global_21369);
  }
  uint64_t v0 = (uint64_t *)dlsym((void *)AppleCVALibrary(void)::sLib, "kCVANetFormatUInt8");
  if (v0)
  {
    uint64_t result = *v0;
    constantValkCVANetFormatUInt8 = result;
  }
  else
  {
    uint64_t result = constantValkCVANetFormatUInt8;
  }
  getkCVANetFormatUInt8 = kCVANetFormatUInt8Function;
  return result;
}

uint64_t kCVANetFormatUInt8Function()
{
  return constantValkCVANetFormatUInt8;
}

uint64_t initValkCVANetInputs(void)
{
  if (AppleCVALibrary(void)::sOnce != -1) {
    dispatch_once(&AppleCVALibrary(void)::sOnce, &__block_literal_global_21369);
  }
  uint64_t v0 = (uint64_t *)dlsym((void *)AppleCVALibrary(void)::sLib, "kCVANetInputs");
  if (v0)
  {
    uint64_t result = *v0;
    constantValkCVANetInputs = result;
  }
  else
  {
    uint64_t result = constantValkCVANetInputs;
  }
  getkCVANetInputs = kCVANetInputsFunction;
  return result;
}

uint64_t kCVANetInputsFunction(void)
{
  return constantValkCVANetInputs;
}

void std::__shared_ptr_emplace<Espresso::CVAEngine::CFAutoreleased<__CFDictionary *>>::__on_zero_shared(uint64_t a1)
{
}

void std::__shared_ptr_emplace<Espresso::CVAEngine::CFAutoreleased<__CFDictionary *>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38C6A0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::CVAEngine::CFAutoreleased<__CFDictionary *>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38C6A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::CVAEngine::CVACompiler::~CVACompiler(std::__shared_weak_count **this)
{
  Espresso::CVAEngine::CVACompiler::~CVACompiler(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  void **v6;

  *this = (std::__shared_weak_count *)&unk_1EE3719E0;
  Espresso::CVAEngine::CVACompiler::reset((Espresso::CVAEngine::CVACompiler *)this);
  long long v2 = this[30];
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  uint64_t v3 = this[28];
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  unint64_t v6 = (void **)(this + 24);
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v6);
  std::__tree<std::__value_type<std::shared_ptr<Espresso::HXEngine::blob_container>,unsigned int>,std::__map_value_compare<std::shared_ptr<Espresso::HXEngine::blob_container>,std::__value_type<std::shared_ptr<Espresso::HXEngine::blob_container>,unsigned int>,std::less<std::shared_ptr<Espresso::HXEngine::blob_container>>,true>,std::allocator<std::__value_type<std::shared_ptr<Espresso::HXEngine::blob_container>,unsigned int>>>::destroy(this[22]);
  unint64_t v6 = (void **)(this + 18);
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v6);
  uint64_t v4 = this[5];
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  *this = (std::__shared_weak_count *)&unk_1EE32A8C8;
  uint64_t v5 = this[2];
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
}

void Espresso::CVAEngine::CVACompiler::add_operation(uint64_t a1, long long *a2)
{
  **(_DWORD **)a2 = *(_DWORD *)(a1 + 88);
  uint64_t v5 = *(char **)(a1 + 152);
  unint64_t v4 = *(void *)(a1 + 160);
  if ((unint64_t)v5 < v4)
  {
    uint64_t v6 = *((void *)a2 + 1);
    *(void *)uint64_t v5 = *(void *)a2;
    *((void *)v5 + 1) = v6;
    if (v6) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
    }
    id v7 = v5 + 16;
    goto LABEL_23;
  }
  uint64_t v8 = *(char **)(a1 + 144);
  uint64_t v9 = (v5 - v8) >> 4;
  unint64_t v10 = v9 + 1;
  if ((unint64_t)(v9 + 1) >> 60) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v11 = v4 - (void)v8;
  if (v11 >> 3 > v10) {
    unint64_t v10 = v11 >> 3;
  }
  if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v12 = v10;
  }
  if (v12 >> 60) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  uint64_t v13 = (char *)operator new(16 * v12);
  unint64_t v14 = &v13[16 * v9];
  long long v15 = *a2;
  *(_OWORD *)unint64_t v14 = *a2;
  if (*((void *)&v15 + 1))
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v15 + 1) + 8), 1uLL, memory_order_relaxed);
    uint64_t v8 = *(char **)(a1 + 144);
    uint64_t v5 = *(char **)(a1 + 152);
  }
  long long v16 = &v13[16 * v12];
  id v7 = v14 + 16;
  if (v5 == v8)
  {
    *(void *)(a1 + 144) = v14;
    *(void *)(a1 + 152) = v7;
    *(void *)(a1 + 160) = v16;
    if (!v8) {
      goto LABEL_23;
    }
    goto LABEL_22;
  }
  do
  {
    long long v17 = *((_OWORD *)v5 - 1);
    v5 -= 16;
    *((_OWORD *)v14 - 1) = v17;
    v14 -= 16;
    *(void *)uint64_t v5 = 0;
    *((void *)v5 + 1) = 0;
  }
  while (v5 != v8);
  uint64_t v18 = *(char **)(a1 + 144);
  uint64_t v8 = *(char **)(a1 + 152);
  *(void *)(a1 + 144) = v14;
  *(void *)(a1 + 152) = v7;
  *(void *)(a1 + 160) = v16;
  if (v8 != v18)
  {
    do
    {
      unint64_t v19 = (std::__shared_weak_count *)*((void *)v8 - 1);
      if (v19) {
        nitro::nitro_function::nitro_function(v19);
      }
      v8 -= 16;
    }
    while (v8 != v18);
    uint64_t v8 = v18;
  }
  if (v8) {
LABEL_22:
  }
    operator delete(v8);
LABEL_23:
  *(void *)(a1 + 152) = v7;
}

void non-virtual thunk to'Espresso::ANECompilerEngine::mix_conv3d_kernel::~mix_conv3d_kernel(Espresso::ANECompilerEngine::mix_conv3d_kernel *this)
{
  long long v2 = (Espresso::ANECompilerEngine::mix_conv3d_kernel *)((char *)this - 424);
  *((void *)this - 53) = &unk_1EE341EF0;
  *(void *)this = &unk_1EE3420D8;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 28);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::generic_conv3d_kernel::~generic_conv3d_kernel(v2);

  JUMPOUT(0x192FF16B0);
}

{
  Espresso::generic_conv3d_kernel *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  long long v2 = (Espresso::ANECompilerEngine::mix_conv3d_kernel *)((char *)this - 424);
  *((void *)this - 53) = &unk_1EE341EF0;
  *(void *)this = &unk_1EE3420D8;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 28);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);

  Espresso::generic_conv3d_kernel::~generic_conv3d_kernel(v2);
}

void non-virtual thunk to'Espresso::ANECompilerEngine::mix_conv3d_kernel::compile(Espresso::ANECompilerEngine::mix_conv3d_kernel *this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3)
{
}

void Espresso::ANECompilerEngine::mix_conv3d_kernel::compile(Espresso::ANECompilerEngine::mix_conv3d_kernel *this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3)
{
  unint64_t v4 = (std::__shared_weak_count *)*((void *)a2 + 2);
  if (!v4 || (id v7 = std::__shared_weak_count::lock(v4)) == 0 || (v8 = *((void *)a2 + 1)) == 0) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Inconsistent state: null network");
  }
  if (!*(void *)(v8 + 576)) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Inconsistent state: blob_storage");
  }
  uint64_t v29 = (unsigned __int8 *)*((void *)a3 + 6);
  uint64_t v9 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8 + 136, v29, (long long **)&v29);
  uint64_t v11 = (const void *)*((void *)v9 + 5);
  unint64_t v10 = (std::__shared_weak_count *)*((void *)v9 + 6);
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v29 = (unsigned __int8 *)a3;
  unint64_t v12 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8 + 136, (unsigned __int8 *)a3, (long long **)&v29);
  unint64_t v14 = (const void *)*((void *)v12 + 5);
  uint64_t v13 = (std::__shared_weak_count *)*((void *)v12 + 6);
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v28[0] = v8;
  v28[1] = (uint64_t)v7;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  long long v15 = *((_OWORD *)this + 24);
  v26[4] = *((_OWORD *)this + 23);
  v26[5] = v15;
  int v27 = *((_DWORD *)this + 100);
  long long v16 = *((_OWORD *)this + 20);
  v26[0] = *((_OWORD *)this + 19);
  v26[1] = v16;
  long long v17 = *((_OWORD *)this + 22);
  v26[2] = *((_OWORD *)this + 21);
  void v26[3] = v17;
  if (v11
  {
    uint64_t v24 = v18;
    long long v25 = v10;
    if (v10)
    {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      unint64_t v19 = v10;
      if (!v14) {
        goto LABEL_19;
      }
    }
    else
    {
      unint64_t v19 = 0;
      if (!v14) {
        goto LABEL_19;
      }
    }
  }
  else
  {
    unint64_t v19 = 0;
    uint64_t v24 = 0;
    long long v25 = 0;
    if (!v14)
    {
LABEL_19:
      unint64_t v21 = 0;
      int v22 = 0;
      char v23 = 0;
      goto LABEL_20;
    }
  }
  if (!v20) {
    goto LABEL_19;
  }
  int v22 = v20;
  char v23 = v13;
  if (v13)
  {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    unint64_t v21 = v13;
  }
  else
  {
    unint64_t v21 = 0;
  }
LABEL_20:
  mix_add_conv_3d<Espresso::ANECompilerEngine::mix_conv3d_kernel *>(this, a2, v28, (uint64_t)v26, (id *)a3, (uint64_t)&v24, &v22);
  if (v21) {
    nitro::nitro_function::nitro_function(v21);
  }
  if (v19) {
    nitro::nitro_function::nitro_function(v19);
  }
  nitro::nitro_function::nitro_function(v7);
  if (v13) {
    nitro::nitro_function::nitro_function(v13);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }

  nitro::nitro_function::nitro_function(v7);
}

void sub_192B0644C(_Unwind_Exception *a1)
{
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  nitro::nitro_function::nitro_function(v1);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  nitro::nitro_function::nitro_function(v1);
  _Unwind_Resume(a1);
}

void mix_add_conv_3d<Espresso::ANECompilerEngine::mix_conv3d_kernel *>(void *a1, unsigned char *a2, uint64_t *a3, uint64_t a4, id *a5, uint64_t a6, void *a7)
{
  uint64_t v464 = *MEMORY[0x1E4F143B8];
  int v408 = a2[552];
  int v10 = *(_DWORD *)(*a7 + 168);
  unsigned int v410 = *(_DWORD *)(*a7 + 164);
  int v12 = *(_DWORD *)(*a7 + 172);
  int v11 = *(_DWORD *)(*a7 + 176);
  int v13 = *(_DWORD *)(*(void *)a6 + 168);
  int v396 = *(_DWORD *)(*(void *)a6 + 172);
  int v397 = *(_DWORD *)(*(void *)a6 + 176);
  memset(v431, 0, 192);
  int v14 = *(_DWORD *)(a4 + 16);
  int v15 = *(__int16 *)(a4 + 70);
  if (v15 > 1) {
    int v14 = (v14 - 1) * v15 + 1;
  }
  unsigned int v406 = v14;
  int v16 = *(__int16 *)(a4 + 72);
  if (v16 > 1) {
    int v17 = (*(_DWORD *)(a4 + 20) - 1) * v16 + 1;
  }
  else {
    int v17 = *(_DWORD *)(a4 + 20);
  }
  unsigned int v404 = v17;
  int v18 = *(__int16 *)(a4 + 74);
  if (v18 > 1) {
    int v19 = (*(_DWORD *)(a4 + 24) - 1) * v18 + 1;
  }
  else {
    int v19 = *(_DWORD *)(a4 + 24);
  }
  unsigned int v402 = v19;
  uint64_t v20 = [MEMORY[0x1E4F1CB18] standardUserDefaults];
  v411 = [v20 persistentDomainForName:*MEMORY[0x1E4F283E0]];

  BOOL v22 = *(__int16 *)(a4 + 70) > 1 || *(__int16 *)(a4 + 72) > 1 || *(__int16 *)(a4 + 74) > 1;
  BOOL v409 = v22;
  BOOL v23 = Espresso::ANECompilerEngine::sparsity_options::force_dense_dilated_convs(v411, v21);
  BOOL v399 = Espresso::ANECompilerEngine::sparsity_options::scan_for_compress_sparse(*a3 + 472, v411);
  Espresso::ANECompilerEngine::sparsity_options::required_sparsity_for_compression(v411, v24);
  uint64_t v26 = (uint64_t)a5[6];
  if ((char *)a5[7] - v26 != (unsigned char *)24)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Inconsistent number of blobs");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (!*(void *)a6)
  {
    if (*(char *)(v26 + 23) < 0) {
      uint64_t v26 = *(void *)v26;
    }
    Espresso::throw_exception_selector<Espresso::unsupported_configuration_error,int &>("ANEC conv: cannot find input blobs. bottom=%s", v26);
  }
  if (!*a7)
  {
    if (*((char *)a5 + 23) >= 0) {
      uint64_t v357 = (uint64_t)a5;
    }
    else {
      uint64_t v357 = (uint64_t)*a5;
    }
    Espresso::throw_exception_selector<Espresso::unsupported_configuration_error,int &>("ANEC conv: cannot find output blobs. top=%s", v357);
  }
  float v27 = v25;
  int v392 = v12;
  int v393 = v11;
  int v394 = v13;
  int v395 = v10;
  Espresso::ANECompilerEngine::ane_arch_allow_network_override(*a3 + 472);
  v401 = (Espresso::ANECompilerEngine *)objc_claimAutoreleasedReturnValue();
  uint64_t v428 = 0;
  v429 = 0;
  unint64_t v430 = 0;
  uint64_t v28 = objc_opt_new();
  [v28 setObject:@"Dense" forKeyedSubscript:@"KernelMode"];
  uint64_t v29 = [NSNumber numberWithInt:v406];
  [v28 setObject:v29 forKeyedSubscript:@"KernelWidth"];

  uint64_t v30 = [NSNumber numberWithInt:v404];
  [v28 setObject:v30 forKeyedSubscript:@"KernelHeight"];

  std::string::size_type v31 = [NSNumber numberWithInt:v402];
  [v28 setObject:v31 forKeyedSubscript:@"KernelDepth"];

  int v32 = *(_DWORD *)(a4 + 80);
  if (v32 >= 2 && v32 == *(_DWORD *)(a4 + 12) && v32 == *(_DWORD *)(a4 + 8))
  {
    [v28 setObject:@"ChannelWiseConv" forKeyedSubscript:@"Type"];
    [v28 setObject:MEMORY[0x1E4F1CC28] forKeyedSubscript:@"KernelGroupReuse"];
    int v398 = 1;
  }
  else
  {
    [v28 setObject:@"Conv" forKeyedSubscript:@"Type"];
    int v398 = *(_DWORD *)(a4 + 80);
    [v28 setObject:MEMORY[0x1E4F1CC28] forKeyedSubscript:@"KernelGroupReuse"];
  }
  if (v23)
  {
    id v33 = v28;
    uint64_t v34 = v33;
    if (*(__int16 *)(a4 + 70) > 1 || *(__int16 *)(a4 + 72) > 1 || !*(_WORD *)(a4 + 74))
    {
      (*(void (**)(std::string *__return_ptr, void *))(*a1 + 416))(&__p, a1);
      if (!__p.__r_.__value_.__r.__words[0]) {
        Espresso::throw_exception_selector<Espresso::not_implemented_error>("<rdar://problem/36840916> Need proper way of expressing dilated conv to ANEC");
      }
      Espresso::dilated_conv_bloated_weights<float>(buf, (uint64_t)__p.__r_.__value_.__l.__data_, *(_DWORD *)(a4 + 16), *(_DWORD *)(a4 + 20), *(_DWORD *)(a4 + 24), (__int16 *)a4);
      Espresso::ANECompilerEngine::final_anec_weights_t::track_anec_weights_f32_d5((uint64_t)v431, (uint64_t *)buf);
      uint64_t v69 = *(void *)buf;
      unsigned int v70 = *(_DWORD *)(*(void *)buf + 8);
      int32x4_t v390 = *(int32x4_t *)(*(void *)buf + 12);
      uint64_t v71 = (char *)operator new(0x58uLL);
      v72.i64[1] = 0x100000001;
      v72.i64[0] = v70 | 0x100000000;
      int8x16_t v73 = (int8x16_t)vmulq_s32(v390, v72);
      *(int32x2_t *)v73.i8 = vmul_s32(*(int32x2_t *)v73.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v73, v73, 8uLL));
      __int32 v74 = 4 * v73.i32[0] * v73.i32[1];
      *((void *)v71 + 1) = 0;
      *((void *)v71 + 2) = 0;
      *(void *)uint64_t v71 = &unk_1EE389A70;
      uint64_t v75 = *(const unsigned __int8 **)(v69 + 32);
      *((void *)v71 + 3) = &unk_1EE36BF70;
      *(_OWORD *)(v71 + 72) = 0u;
      *(_OWORD *)(v71 + 56) = 0u;
      *((_DWORD *)v71 + 8) = v74;
      *((void *)v71 + 5) = v75;
      v71[48] = 0;
      atomic_fetch_add_explicit((atomic_ullong *volatile)v71 + 1, 1uLL, memory_order_relaxed);
      uint64_t v76 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128), v75, v74);
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v71);
      uint64_t v77 = [NSNumber numberWithInt:v76];
      [v34 setObject:v77 forKeyedSubscript:@"KernelOffset"];

      uint64_t v78 = NSNumber;
      if (a2[552]) {
        uint64_t weights_file_index = 0;
      }
      else {
      uint64_t v100 = [v78 numberWithUnsignedLong:weights_file_index];
      }
      [v34 setObject:v100 forKeyedSubscript:@"KernelIndex"];

      [v34 setObject:@"Float32" forKeyedSubscript:@"KernelType"];
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v71);
      if (*(void *)&buf[8]) {
        nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&buf[8]);
      }
      if (__p.__r_.__value_.__l.__size_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
      }
      char v83 = 0;
      goto LABEL_94;
    }
  }
  uint64_t v35 = (std::__shared_weak_count *)a3[1];
  uint64_t v426 = *a3;
  v427 = v35;
  if (v35) {
    atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "blob_weights");
  int v36 = (*(uint64_t (**)(void *, uint64_t *, void *, std::string *))(a1[53] + 88))(a1 + 53, &v426, a1, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v427) {
    nitro::nitro_function::nitro_function(v427);
  }
  if ((v36 & 0x80000000) == 0)
  {
    uint64_t v37 = (std::__shared_weak_count *)a3[1];
    uint64_t v424 = *a3;
    v425 = v37;
    if (v37) {
      atomic_fetch_add_explicit(&v37->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(buf, "blob_weights");
    (*(void (**)(std::string *__return_ptr, void *, uint64_t *, void *, unsigned char *))(a1[53] + 120))(&__p, a1 + 53, &v424, a1, buf);
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    if (v425) {
      nitro::nitro_function::nitro_function(v425);
    }
    uint64_t v38 = (*(uint64_t (**)(void *))(*a1 + 384))(a1);
    int v39 = *(_DWORD *)(v38 + 12);
    int v40 = *(_DWORD *)(a4 + 80);
    uint64_t v41 = (char *)operator new(0x68uLL);
    *((void *)v41 + 1) = 0;
    *((void *)v41 + 2) = 0;
    *(void *)uint64_t v41 = &unk_1EE389A00;
    std::string::size_type v42 = __p.__r_.__value_.__r.__words[0];
    int v43 = *(_DWORD *)(v38 + 24);
    int v44 = *(_DWORD *)(v38 + 8);
    *((void *)v41 + 3) = &unk_1EE36BF30;
    uint64_t v45 = *(void *)(v38 + 16);
    *(_OWORD *)(v41 + 72) = 0u;
    *(_OWORD *)(v41 + 88) = 0u;
    *((void *)v41 + 4) = v45;
    *((_DWORD *)v41 + 10) = v43;
    *((_DWORD *)v41 + 11) = v39 / v40;
    *((_DWORD *)v41 + 12) = v44;
    *((void *)v41 + 7) = v42;
    v41[64] = 0;
    *(void *)long long buf = v41 + 24;
    *(void *)&buf[8] = v41;
    Espresso::ANECompilerEngine::final_anec_weights_t::track_anec_weights_f32_d5((uint64_t)v431, (uint64_t *)buf);
    uint64_t v46 = *(void *)&v431[0];
    unsigned int v47 = *(_DWORD *)(*(void *)&v431[0] + 8);
    int32x4_t v388 = *(int32x4_t *)(*(void *)&v431[0] + 12);
    char v48 = (char *)operator new(0x58uLL);
    v49.i64[1] = 0x100000001;
    v49.i64[0] = v47 | 0x100000000;
    int8x16_t v50 = (int8x16_t)vmulq_s32(v388, v49);
    *(int32x2_t *)v50.i8 = vmul_s32(*(int32x2_t *)v50.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v50, v50, 8uLL));
    __int32 v51 = 4 * v50.i32[0] * v50.i32[1];
    *((void *)v48 + 1) = 0;
    *((void *)v48 + 2) = 0;
    *(void *)char v48 = &unk_1EE389A70;
    uint64_t v52 = *(const unsigned __int8 **)(v46 + 32);
    *((void *)v48 + 3) = &unk_1EE36BF70;
    *(_OWORD *)(v48 + 72) = 0u;
    *(_OWORD *)(v48 + 56) = 0u;
    *((_DWORD *)v48 + 8) = v51;
    *((void *)v48 + 5) = v52;
    v48[48] = 0;
    atomic_fetch_add_explicit((atomic_ullong *volatile)v48 + 1, 1uLL, memory_order_relaxed);
    uint64_t v53 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128), v52, v51);
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v48);
    uint64_t v54 = [NSNumber numberWithInt:v53];
    [v28 setObject:v54 forKeyedSubscript:@"KernelOffset"];

    CFStringRef v55 = NSNumber;
    if (v408) {
      uint64_t v56 = 0;
    }
    else {
    uint64_t v80 = [v55 numberWithUnsignedLong:v56];
    }
    [v28 setObject:v80 forKeyedSubscript:@"KernelIndex"];

    [v28 setObject:@"Float32" forKeyedSubscript:@"KernelType"];
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v48);
    std::string::size_type size = (std::__shared_weak_count *)v41;
LABEL_53:
    nitro::nitro_function::nitro_function(size);
    goto LABEL_54;
  }
  (*(void (**)(std::string *__return_ptr, void *))(*a1 + 416))(&__p, a1);
  std::string::size_type v57 = __p.__r_.__value_.__r.__words[0];
  if (__p.__r_.__value_.__l.__size_) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
  }
  if (!v57) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Cannot find the weights");
  }
  (*(void (**)(std::string *__return_ptr, void *))(*a1 + 416))(&__p, a1);
  Espresso::ANECompilerEngine::final_anec_weights_t::track_anec_weights_f32_d5((uint64_t)v431, (uint64_t *)&__p);
  uint64_t v58 = *(void *)&v431[0];
  unsigned int v59 = *(_DWORD *)(*(void *)&v431[0] + 8);
  int32x4_t v389 = *(int32x4_t *)(*(void *)&v431[0] + 12);
  uint64_t v60 = (char *)operator new(0x58uLL);
  v61.i64[1] = 0x100000001;
  v61.i64[0] = v59 | 0x100000000;
  int8x16_t v62 = (int8x16_t)vmulq_s32(v389, v61);
  *(int32x2_t *)v62.i8 = vmul_s32(*(int32x2_t *)v62.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v62, v62, 8uLL));
  __int32 v63 = 4 * v62.i32[0] * v62.i32[1];
  *((void *)v60 + 1) = 0;
  *((void *)v60 + 2) = 0;
  *(void *)uint64_t v60 = &unk_1EE389A70;
  unsigned int v64 = *(const unsigned __int8 **)(v58 + 32);
  *((void *)v60 + 3) = &unk_1EE36BF70;
  *(_OWORD *)(v60 + 72) = 0u;
  *(_OWORD *)(v60 + 56) = 0u;
  *((_DWORD *)v60 + 8) = v63;
  *((void *)v60 + 5) = v64;
  v60[48] = 0;
  atomic_fetch_add_explicit((atomic_ullong *volatile)v60 + 1, 1uLL, memory_order_relaxed);
  uint64_t v65 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128), v64, v63);
  nitro::nitro_function::nitro_function((std::__shared_weak_count *)v60);
  uint64_t v66 = [NSNumber numberWithInt:v65];
  [v28 setObject:v66 forKeyedSubscript:@"KernelOffset"];

  CFNumberRef v67 = NSNumber;
  if (v408) {
    uint64_t v68 = 0;
  }
  else {
  uint64_t v82 = [v67 numberWithUnsignedLong:v68];
  }
  [v28 setObject:v82 forKeyedSubscript:@"KernelIndex"];

  [v28 setObject:@"Float32" forKeyedSubscript:@"KernelType"];
  nitro::nitro_function::nitro_function((std::__shared_weak_count *)v60);
  std::string::size_type size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_) {
    goto LABEL_53;
  }
LABEL_54:
  if (v409 && !v23)
  {
    id v84 = v28;
    BOOL v86 = *(__int16 *)(a4 + 70) < 2 && *(__int16 *)(a4 + 72) < 2 && *(__int16 *)(a4 + 74) < 2;
    char v87 = v86;
    char v391 = v87;
    if (!v86)
    {
      uint64_t v88 = v84;
      int v387 = a2[552];
      id v386 = [v84 objectForKeyedSubscript:@"KernelType"];
      if (![v386 isEqualToString:@"Float32"])
      {
        if (v386) {
          v366 = (const char *)[v386 UTF8String];
        }
        else {
          v366 = "";
        }
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v366;
        Espresso::throw_exception_selector<Espresso::invalid_state_error,char const*>("Invalid kernel type %s", &__p);
      }
      long long v89 = v431[0];
      if (*((void *)&v431[0] + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v431[0] + 1) + 8), 1uLL, memory_order_relaxed);
      }
      if (!(void)v89) {
        Espresso::throw_exception_selector<Espresso::invalid_state_error>("Null final fp32 weights");
      }
      unsigned int v90 = *(_DWORD *)(v89 + 8);
      int32x4_t v385 = *(int32x4_t *)(v89 + 12);
      uint64_t v91 = (char *)operator new(0x58uLL);
      v92.i64[1] = 0x100000001;
      v92.i64[0] = v90 | 0x100000000;
      int8x16_t v93 = (int8x16_t)vmulq_s32(v385, v92);
      *(int32x2_t *)v93.i8 = vmul_s32(*(int32x2_t *)v93.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v93, v93, 8uLL));
      *((void *)v91 + 1) = 0;
      *((void *)v91 + 2) = 0;
      *(void *)uint64_t v91 = &unk_1EE389A70;
      uint64_t v94 = *(void *)(v89 + 32);
      *((void *)v91 + 3) = &unk_1EE36BF70;
      *(_OWORD *)(v91 + 56) = 0u;
      *(_OWORD *)(v91 + 72) = 0u;
      *((_DWORD *)v91 + 8) = 4 * v93.i32[0] * v93.i32[1];
      *((void *)v91 + 5) = v94;
      v91[48] = 0;
      uint64_t v95 = *(int *)(v89 + 8);
      for (uint64_t i = 12; i != 28; i += 4)
        v95 *= *(int *)(v89 + i);
      Espresso::compress_dilated_conv_sparse_kernel_mask<float>((uint64_t *)&__p, (_DWORD *)v89, a4);
      long long v97 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      if (*((void *)&v89 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v89 + 1));
      }
      unsigned int v98 = NSNumber;
      if (v387) {
        uint64_t v99 = 0;
      }
      else {
      uint64_t v101 = objc_msgSend(v98, "numberWithUnsignedLong:", v99, *(_OWORD *)&v385);
      }
      [v88 setObject:v101 forKeyedSubscript:@"KernelIndex"];

      uint64_t v102 = NSNumber;
      atomic_fetch_add_explicit((atomic_ullong *volatile)v91 + 1, 1uLL, memory_order_relaxed);
      int v103 = objc_msgSend(v102, "numberWithInt:", Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128), *((const unsigned __int8 **)v91 + 5), *((int *)v91 + 8)));
      [v88 setObject:v103 forKeyedSubscript:@"KernelOffset"];

      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v91);
      if (*((void *)&v97 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v97 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v104 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128), *(const unsigned __int8 **)(v97 + 16), *(int *)(v97 + 8));
      if (*((void *)&v97 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v97 + 1));
      }
      uint64_t v105 = [NSNumber numberWithInt:v104];
      [v88 setObject:v105 forKeyedSubscript:@"KernelMaskByteOffset"];

      uint64_t v106 = NSNumber;
      if (v387) {
        uint64_t v107 = 0;
      }
      else {
      int v108 = [v106 numberWithUnsignedLong:v107];
      }
      [v88 setObject:v108 forKeyedSubscript:@"KernelMaskIndex"];

      uint64_t v109 = [NSNumber numberWithUnsignedLong:v95];
      [v88 setObject:v109 forKeyedSubscript:@"KernelCoeffCount"];

      [v88 setObject:@"Sparse" forKeyedSubscript:@"KernelMode"];
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v91);
      if (*((void *)&v97 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v97 + 1));
      }
    }
    char v83 = v391 ^ 1;
LABEL_94:

    goto LABEL_95;
  }
  char v83 = 0;
LABEL_95:
  if (!v409 && v399 && (v83 & 1) == 0)
  {
    id v110 = v28;
    int v111 = a2[552];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
    *(void *)&buf[8] = 0;
    *(void *)long long buf = 0;
    if (*(void *)&v431[0])
    {
      uint64_t v112 = (std::__shared_weak_count *)*((void *)&v431[0] + 1);
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v431[0];
      if (*((void *)&v431[0] + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v431[0] + 1) + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v113 = Espresso::ANECompilerEngine::compress_sparse_weights<float,5>((uint64_t)&__str, (uint64_t *)&__p, (uint64_t *)buf, v27);
      if (v112) {
        nitro::nitro_function::nitro_function(v112);
      }
      std::string::size_type v114 = __p.__r_.__value_.__r.__words[0];
      if (__p.__r_.__value_.__r.__words[0] && (uint64_t v115 = *(void *)buf) != 0)
      {
        char v116 = (Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128);
        uint64_t v117 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
        if (__p.__r_.__value_.__l.__size_) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(__p.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
        }
        uint64_t v118 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v116, *(const unsigned __int8 **)(v114 + 16), *(int *)(v114 + 8));
        if (v117) {
          nitro::nitro_function::nitro_function(v117);
        }
        double v119 = NSNumber;
        if (v111) {
          uint64_t v120 = 0;
        }
        else {
        id v122 = [v119 numberWithUnsignedLong:v120];
        }
        [v110 setObject:v122 forKeyedSubscript:@"KernelIndex"];

        id v123 = [NSNumber numberWithInt:v118];
        [v110 setObject:v123 forKeyedSubscript:@"KernelOffset"];

        id v121 = *(std::__shared_weak_count **)&buf[8];
        if (*(void *)&buf[8]) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 1uLL, memory_order_relaxed);
        }
        uint64_t v124 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v116, *(const unsigned __int8 **)(v115 + 16), *(int *)(v115 + 8));
        if (v121) {
          nitro::nitro_function::nitro_function(v121);
        }
        unsigned int v125 = [NSNumber numberWithInt:v124];
        [v110 setObject:v125 forKeyedSubscript:@"KernelMaskByteOffset"];

        __int16 v126 = NSNumber;
        if (v111) {
          uint64_t v127 = 0;
        }
        else {
        __int16 v128 = [v126 numberWithUnsignedLong:v127];
        }
        [v110 setObject:v128 forKeyedSubscript:@"KernelMaskIndex"];

        double v129 = [NSNumber numberWithUnsignedLong:v113];
        [v110 setObject:v129 forKeyedSubscript:@"KernelCoeffCount"];

        [v110 setObject:@"Sparse" forKeyedSubscript:@"KernelMode"];
      }
      else
      {
        id v121 = *(std::__shared_weak_count **)&buf[8];
      }
      if (v121) {
        nitro::nitro_function::nitro_function(v121);
      }
    }
    if (__p.__r_.__value_.__l.__size_) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
    }
  }
  uint64_t v130 = *(__int16 *)(a4 + 66);
  uint64_t v131 = *(__int16 *)(a4 + 68);
  char v132 = [NSNumber numberWithInt:*(__int16 *)(a4 + 64)];
  v453[0] = v132;
  id v133 = [NSNumber numberWithInt:v130];
  v453[1] = v133;
  long long v134 = [NSNumber numberWithInt:v131];
  v453[2] = v134;
  id v135 = [MEMORY[0x1E4F1C978] arrayWithObjects:v453 count:3];
  [v28 setObject:v135 forKeyedSubscript:@"Step"];

  int v136 = *(__int16 *)(a4 + 44);
  if (v136 != 4)
  {
    if (v136 == 2)
    {
      uint64_t v147 = 0;
      int v148 = 0;
      uint64_t v144 = 0;
      uint64_t v149 = 0;
      uint64_t v146 = 0;
      uint64_t v143 = 0;
      goto LABEL_133;
    }
    if (v136 != 1)
    {
      uint64_t v143 = *(__int16 *)(a4 + 52);
      uint64_t v147 = *(__int16 *)(a4 + 54);
      int v148 = *(__int16 *)(a4 + 56);
      uint64_t v144 = *(__int16 *)(a4 + 58);
      uint64_t v146 = *(__int16 *)(a4 + 60);
      uint64_t v149 = *(__int16 *)(a4 + 62);
      goto LABEL_133;
    }
  }
  int v137 = v404 - v396 + (v392 - 1) * *(__int16 *)(a4 + 66);
  int v138 = v406 - v397 + (v393 - 1) * *(__int16 *)(a4 + 64);
  unsigned int v139 = v137 & ~(v137 >> 31);
  unsigned int v140 = v138 & ~(v138 >> 31);
  int v141 = v402 - v394 + (v395 - 1) * *(__int16 *)(a4 + 68);
  unsigned int v142 = v141 & ~(v141 >> 31);
  uint64_t v143 = v140 - (v140 >> 1);
  uint64_t v144 = v139 >> 1;
  uint64_t v145 = v139 - (v139 >> 1);
  uint64_t v146 = v142 - (v142 >> 1);
  if (*(_WORD *)(a4 + 44) == 1)
  {
    uint64_t v147 = v140 - (v140 >> 1);
    int v148 = v144;
    uint64_t v144 = v145;
    uint64_t v149 = v142 - (v142 >> 1);
    uint64_t v146 = v142 >> 1;
    uint64_t v143 = v140 >> 1;
  }
  else
  {
    uint64_t v147 = v140 >> 1;
    int v148 = v145;
    uint64_t v149 = v142 >> 1;
  }
LABEL_133:
  if (v148 || v144 || v143 || v147 || v149)
  {
    long long v150 = objc_msgSend(NSNumber, "numberWithInt:");
    [v28 setObject:v150 forKeyedSubscript:@"PadTop"];

    uint64_t v151 = [NSNumber numberWithInt:v144];
    [v28 setObject:v151 forKeyedSubscript:@"PadBot"];

    unint64_t v152 = [NSNumber numberWithInt:v143];
    [v28 setObject:v152 forKeyedSubscript:@"PadLeft"];

    uint64_t v153 = [NSNumber numberWithInt:v147];
    [v28 setObject:v153 forKeyedSubscript:@"PadRight"];

    unint64_t v154 = [NSNumber numberWithInt:v146];
    [v28 setObject:v154 forKeyedSubscript:@"PadFront"];

    uint64_t v155 = [NSNumber numberWithInt:v149];
    [v28 setObject:v155 forKeyedSubscript:@"PadBack"];

    if (*(_WORD *)(a4 + 46))
    {
      if (*(_WORD *)(a4 + 46) != 1) {
        goto LABEL_143;
      }
      unsigned int v156 = @"Replication";
    }
    else
    {
      unsigned int v156 = @"Zero";
    }
    [v28 setObject:v156 forKeyedSubscript:@"PaddingMode"];
  }
LABEL_143:
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&__p.__r_.__value_.__l.__data_, a5);
  unsigned int v157 = v450;
  v450 = @"Conv";

  objc_storeStrong(&v451, v28);
  unint64_t v452 = __PAIR64__(v398, v410);
  int v158 = v429;
  if ((unint64_t)v429 >= v430)
  {
    unint64_t v160 = 0x8E38E38E38E38E39 * (((uint64_t)v429 - v428) >> 4);
    if (v160 + 1 > 0x1C71C71C71C71C7) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v161 = 0x1C71C71C71C71C72 * ((uint64_t)(v430 - v428) >> 4);
    if (v161 <= v160 + 1) {
      unint64_t v161 = v160 + 1;
    }
    if (0x8E38E38E38E38E39 * ((uint64_t)(v430 - v428) >> 4) >= 0xE38E38E38E38E3) {
      unint64_t v162 = 0x1C71C71C71C71C7;
    }
    else {
      unint64_t v162 = v161;
    }
    *((void *)&v455 + 1) = &v430;
    if (v162) {
      unint64_t v162 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v162);
    }
    else {
      uint64_t v163 = 0;
    }
    *(void *)long long buf = v162;
    *(void *)&buf[8] = v162 + 144 * v160;
    *(void *)&buf[16] = *(void *)&buf[8];
    *(void *)&long long v455 = v162 + 144 * v163;
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(*(std::string **)&buf[8], (uint64_t)&__p);
    *(void *)&buf[16] += 144;
    std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v428, buf);
    __int16 v159 = v429;
    std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)buf);
  }
  else
  {
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v429, (uint64_t)&__p);
    __int16 v159 = v158 + 6;
  }
  v429 = v159;

  if (v448 < 0) {
    operator delete(v447);
  }
  *(void *)long long buf = &v444;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(void *)long long buf = v443;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }

  double v164 = (std::__shared_weak_count *)a3[1];
  if (v164) {
    atomic_fetch_add_explicit(&v164->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v166 = *a7;
  std::vector<std::string> v165 = (std::__shared_weak_count *)a7[1];
  if (v165) {
    atomic_fetch_add_explicit(&v165->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::ANECompilerEngine::compiler::layer_graph_info_t::layer_graph_info_t((Espresso::ANECompilerEngine::compiler::layer_graph_info_t *)&__p);
  id v451 = 0;
  v450 = 0;
  unint64_t v452 = 0x100000000;
  uint64_t v167 = a1[61];
  id v168 = (std::__shared_weak_count *)a1[62];
  if (v168) {
    atomic_fetch_add_explicit(&v168->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v167)
  {
LABEL_168:
    if (!v168) {
      goto LABEL_170;
    }
    goto LABEL_169;
  }
  if (*(unsigned char *)((*(uint64_t (**)(void))(a1[53] + 104))() + 40))
  {
    LOBYTE(v167) = 0;
    goto LABEL_168;
  }
  float v201 = *(float *)(v166 + 112);
  v435[0] = (void **)v167;
  v435[1] = (void **)&v168->__vftable;
  if (v168) {
    atomic_fetch_add_explicit(&v168->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v202 = (std::__shared_weak_count *)a1[64];
  v434[0] = a1[63];
  v434[1] = (uint64_t)v202;
  if (v202) {
    atomic_fetch_add_explicit(&v202->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::ane_style_post_scale_bias((uint64_t)v435, v434, (uint64_t)&v436, v201);
  if (v202) {
    nitro::nitro_function::nitro_function(v202);
  }
  if (v168) {
    nitro::nitro_function::nitro_function(v168);
  }
  uint64_t v203 = *(unsigned int *)(v167 + 8);
  std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v432, 2 * v203, 1, 1, 1);
  uint64_t v204 = (int)v203;
  uint64_t v205 = a1[63];
  int v206 = v203;
  if (v205) {
    int v206 = *(_DWORD *)(v205 + 8);
  }
  if (!a2[384])
  {
    Espresso::blob<unsigned char,1>::make(&__str, 4 * v203);
    v358 = *(int **)(__str.__r_.__value_.__r.__words[0] + 16);
    int v417 = v203 - 1;
    if ((int)v203 >= 1)
    {
      for (uint64_t j = 0; j != v203; ++j)
      {
        float v360 = *(float *)(*(void *)(v167 + 16) + j * 4);
        *(float *)&int v361 = ldexp(1.0, -v440) * v360;
        v358[j] = v361;
      }
    }
    if (v203)
    {
      v362 = *(_WORD **)(v432 + 16);
      do
      {
        int v363 = *v358++;
        _S0 = v363;
        __asm { FCVT            H0, S0 }
        *v362++ = _S0;
        --v204;
      }
      while (v204);
    }
    if (a1[63])
    {
      Espresso::blob<unsigned char,1>::make(buf, 4 * v206);
      uint64_t v367 = *(void *)buf;
      Espresso::blob<unsigned char,1>::make(buf, 2 * v206);
      uint64_t objb = *(void **)buf;
      v368 = *(int **)(v367 + 16);
      if (v206 >= 1)
      {
        for (uint64_t k = 0; k != v206; ++k)
        {
          int v370 = v417;
          if (v417 >= (int)k) {
            int v370 = k;
          }
          *(float *)&int v371 = *(float *)(*(void *)(v438 + 16) + 4 * k) * *(float *)(*(void *)(v436 + 16) + 4 * v370);
          v368[k] = v371;
          unsigned int v372 = v441;
          unsigned int v373 = v440;
          *(float *)&int v374 = ldexp(1.0, v441 - v440) * *(float *)&v371;
          v368[k] = v374;
          float v377 = ldexp(1.0, v373 - v372) * *(float *)&v374;
          if (v377 < -127.0 || v377 > 255.0)
          {
            v379 = Espresso::espresso_os_log_subsystem(v375, v376);
            if (os_log_type_enabled(v379, OS_LOG_TYPE_ERROR))
            {
              double v380 = *(float *)&v368[k];
              *(_DWORD *)long long buf = 134218752;
              *(double *)&uint8_t buf[4] = v377;
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = v441;
              *(_WORD *)&unsigned char buf[18] = 1024;
              *(_DWORD *)&buf[20] = v440;
              LOWORD(v455) = 2048;
              *(double *)((char *)&v455 + 2) = v380;
              _os_log_error_impl(&dword_1920CB000, v379, OS_LOG_TYPE_ERROR, "[ANEC::add_ane_scale_bias_unit] Shifted bias overflowing shifted_b=%f acc_bias_shift=%d post_right_shift=%d anebias=%f", buf, 0x22u);
            }
          }
        }
      }
      if (v206)
      {
        uint64_t v381 = v206;
        v382 = (_WORD *)objb[2];
        do
        {
          int v383 = *v368++;
          _S0 = v383;
          __asm { FCVT            H0, S0 }
          *v382++ = _S0;
          --v381;
        }
        while (v381);
      }
    }
    v365 = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
    Espresso::not_implemented_error::not_implemented_error(v365);
  }
  unsigned int v207 = v441;
  uint64_t v208 = v432;
  if (v203)
  {
    int v209 = *(int **)(v436 + 16);
    uint64_t v210 = *(_WORD **)(v432 + 16);
    do
    {
      int v211 = *v209++;
      _S0 = v211;
      __asm { FCVT            H0, S0 }
      *v210++ = _S0;
      --v204;
    }
    while (v204);
  }
  if (v205)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(buf, 2 * v206, 1, 1, 1);
    v407 = *(std::__shared_weak_count **)&buf[8];
    uint64_t v403 = *(void *)buf;
    if (v206)
    {
      uint64_t v213 = v206;
      uint64_t v214 = *(_WORD **)(*(void *)buf + 16);
      v215 = *(int **)(v438 + 16);
      do
      {
        int v216 = *v215++;
        _S0 = v216;
        __asm { FCVT            H0, S0 }
        *v214++ = _S0;
        --v213;
      }
      while (v213);
    }
  }
  else
  {
    v407 = 0;
    uint64_t v403 = 0;
  }
  int v405 = a2[552];
  int v233 = (Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128);
  int v234 = v433;
  if (v433) {
    atomic_fetch_add_explicit(&v433->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v235 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v233, *(const unsigned __int8 **)(v208 + 16), *(int *)(v208 + 8));
  if (v234) {
    nitro::nitro_function::nitro_function(v234);
  }
  id obja = (id)objc_opt_new();
  unsigned int v400 = v207;
  if (a2[121])
  {
    id v236 = *(id *)(v428 + 128);

    id obja = v236;
  }
  int v237 = objc_opt_new();
  long long v238 = [NSNumber numberWithInt:v203];
  [v237 setObject:v238 forKeyedSubscript:@"ScaleCount"];

  int v239 = [NSNumber numberWithInt:v235];
  [v237 setObject:v239 forKeyedSubscript:@"ScaleOffset"];

  int v240 = NSNumber;
  if (v405) {
    uint64_t v241 = 0;
  }
  else {
  int v242 = [v240 numberWithUnsignedLong:v241];
  }
  [v237 setObject:v242 forKeyedSubscript:@"ScaleIndex"];

  [v237 setObject:@"Float16" forKeyedSubscript:@"ScaleType"];
  v243 = [NSNumber numberWithInt:v440];
  [obja setObject:v243 forKeyedSubscript:@"ScaleShift"];

  if (a1[63])
  {
    if (v407) {
      atomic_fetch_add_explicit(&v407->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v244 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v233, *(const unsigned __int8 **)(v403 + 16), *(int *)(v403 + 8));
    if (v407) {
      nitro::nitro_function::nitro_function(v407);
    }
    uint64_t v245 = [NSNumber numberWithInt:*(unsigned int *)(a1[63] + 8)];
    [v237 setObject:v245 forKeyedSubscript:@"BiasCount"];

    v246 = [NSNumber numberWithInt:v244];
    [v237 setObject:v246 forKeyedSubscript:@"BiasOffset"];

    uint64_t v247 = NSNumber;
    if (v405) {
      uint64_t v248 = 0;
    }
    else {
    unint64_t v249 = [v247 numberWithUnsignedLong:v248];
    }
    [v237 setObject:v249 forKeyedSubscript:@"BiasIndex"];

    [v237 setObject:@"Float16" forKeyedSubscript:@"BiasType"];
    v250 = [NSNumber numberWithInt:v400];
    [obja setObject:v250 forKeyedSubscript:@"BiasShift"];
  }
  [obja setObject:v237 forKeyedSubscript:@"BiasScaleGroupData"];
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)buf, a5);
  unint64_t v251 = v429;
  if (v429 != (std::string *)v428)
  {
    long long v252 = v429 - 6;
    uint64_t v253 = HIBYTE(v429[-6].__r_.__value_.__r.__words[2]);
    char v254 = v253;
    std::string::size_type v255 = v429[-6].__r_.__value_.__l.__size_;
    if ((v253 & 0x80u) == 0) {
      std::string::size_type v256 = HIBYTE(v429[-6].__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v256 = v429[-6].__r_.__value_.__l.__size_;
    }
    uint64_t v257 = buf[23];
    if (buf[23] < 0) {
      uint64_t v257 = *(void *)&buf[8];
    }
    if (v256 == v257)
    {
      if (buf[23] >= 0) {
        std::string v258 = buf;
      }
      else {
        std::string v258 = *(unsigned __int8 **)buf;
      }
      if ((char)v253 < 0)
      {
        std::string::pointer data = (const std::string::value_type *)v252->__r_.__value_.__r.__words[0];
        if (memcmp(v252->__r_.__value_.__l.__data_, v258, v429[-6].__r_.__value_.__l.__size_)) {
          goto LABEL_368;
        }
      }
      else if ((_BYTE)v253)
      {
        unint64_t v259 = v429 - 6;
        while (v259->__r_.__value_.__s.__data_[0] == *v258)
        {
          unint64_t v259 = (std::string *)((char *)v259 + 1);
          ++v258;
          if (!--v253) {
            goto LABEL_364;
          }
        }
        goto LABEL_365;
      }
LABEL_364:
      std::string::append(v251 - 6, "__@pre_scale_bias");
      char v254 = HIBYTE(v251[-6].__r_.__value_.__r.__words[2]);
    }
LABEL_365:
    if ((v254 & 0x80) == 0)
    {
      long long v322 = *(_OWORD *)&v252->__r_.__value_.__l.__data_;
      __str.__r_.__value_.__r.__words[2] = v251[-6].__r_.__value_.__r.__words[2];
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v322;
      goto LABEL_369;
    }
    std::string::pointer data = v251[-6].__r_.__value_.__l.__data_;
    std::string::size_type v255 = v251[-6].__r_.__value_.__l.__size_;
LABEL_368:
    std::string::__init_copy_ctor_external(&__str, data, v255);
LABEL_369:
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v456, &__str, &v463, 1uLL);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
  }
  v323 = v460;
  v460 = @"GOC";

  objc_storeStrong(&v461, obja);
  if (!a2[121])
  {
    v324 = v429;
    if ((unint64_t)v429 >= v430)
    {
      unint64_t v326 = 0x8E38E38E38E38E39 * (((uint64_t)v429 - v428) >> 4);
      if (v326 + 1 > 0x1C71C71C71C71C7) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v327 = 0x1C71C71C71C71C72 * ((uint64_t)(v430 - v428) >> 4);
      if (v327 <= v326 + 1) {
        unint64_t v327 = v326 + 1;
      }
      if (0x8E38E38E38E38E39 * ((uint64_t)(v430 - v428) >> 4) >= 0xE38E38E38E38E3) {
        unint64_t v328 = 0x1C71C71C71C71C7;
      }
      else {
        unint64_t v328 = v327;
      }
      *((void *)&v463 + 1) = &v430;
      if (v328) {
        unint64_t v328 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v328);
      }
      else {
        uint64_t v329 = 0;
      }
      __str.__r_.__value_.__r.__words[0] = v328;
      __str.__r_.__value_.__l.__size_ = v328 + 144 * v326;
      __str.__r_.__value_.__r.__words[2] = __str.__r_.__value_.__l.__size_;
      *(void *)&long long v463 = v328 + 144 * v329;
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)__str.__r_.__value_.__l.__size_, (uint64_t)buf);
      __str.__r_.__value_.__r.__words[2] += 144;
      std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v428, &__str);
      v325 = v429;
      std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&__str);
    }
    else
    {
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v429, (uint64_t)buf);
      v325 = v324 + 6;
    }
    v429 = v325;
  }

  if (v458 < 0) {
    operator delete(v457);
  }
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v456;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v455;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }

  if (v407) {
    nitro::nitro_function::nitro_function(v407);
  }
  if (v433) {
    nitro::nitro_function::nitro_function(v433);
  }
  if (v439) {
    nitro::nitro_function::nitro_function(v439);
  }
  if (v437) {
    nitro::nitro_function::nitro_function(v437);
  }
  LOBYTE(v167) = 1;
  if (v168) {
LABEL_169:
  }
    nitro::nitro_function::nitro_function(v168);
LABEL_170:

  if (v448 < 0) {
    operator delete(v447);
  }
  *(void *)long long buf = &v444;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(void *)long long buf = v443;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v165) {
    nitro::nitro_function::nitro_function(v165);
  }
  if (v164) {
    nitro::nitro_function::nitro_function(v164);
  }
  if (v167)
  {
    if (*(_DWORD *)(a4 + 40)) {
LABEL_504:
    }
      Espresso::throw_exception_selector<Espresso::invalid_state_error>("Inconsistent fused bn state");
    goto LABEL_401;
  }
  uint64_t v169 = (void *)a1[51];
  if (v169 && *v169 && (v169[4] || v169[6] || v169[8] || v169[10]))
  {
    uint64_t v170 = v169[10];
    if (v170)
    {
      uint64_t v171 = *(int *)(v170 + 8);
      std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&__p, 2 * v171, 1, 1, 1);
      long long v172 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      v173 = *(const unsigned __int8 **)(__p.__r_.__value_.__r.__words[0] + 16);
      if (v171)
      {
        char v174 = *(int **)(*(void *)(a1[51] + 80) + 16);
        id v175 = *(_WORD **)(__p.__r_.__value_.__r.__words[0] + 16);
        uint64_t v176 = v171;
        do
        {
          int v177 = *v174++;
          _S0 = v177;
          __asm { FCVT            H0, S0 }
          *v175++ = _S0;
          --v176;
        }
        while (v176);
      }
      uint64_t v183 = (Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128);
      if (*((void *)&v172 + 1))
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v172 + 1) + 8), 1uLL, memory_order_relaxed);
        v173 = *(const unsigned __int8 **)(v172 + 16);
      }
      uint64_t v184 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v183, v173, *(int *)(v172 + 8));
      if (*((void *)&v172 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v172 + 1));
      }
      v185 = objc_opt_new();
      int v186 = [NSNumber numberWithUnsignedLong:v171];
      [v185 setObject:v186 forKeyedSubscript:@"ScaleCount"];

      uint64_t v187 = [NSNumber numberWithInt:v184];
      [v185 setObject:v187 forKeyedSubscript:@"ScaleOffset"];

      unint64_t v188 = NSNumber;
      if (v408) {
        uint64_t v189 = 0;
      }
      else {
      std::string v260 = [v188 numberWithUnsignedLong:v189];
      }
      [v185 setObject:v260 forKeyedSubscript:@"ScaleIndex"];

      [v185 setObject:@"Float16" forKeyedSubscript:@"ScaleType"];
      if (*(_DWORD *)(*(uint64_t (**)(void *))(*a1 + 384))(a1))
      {
        (*(void (**)(std::string *__return_ptr, void *))(*a1 + 408))(&__str, a1);
        if (!__str.__r_.__value_.__r.__words[0])
        {
          uint64_t v261 = (std::__shared_weak_count *)a3[1];
          uint64_t v422 = *a3;
          v423 = v261;
          if (v261) {
            atomic_fetch_add_explicit(&v261->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          std::string::basic_string[abi:ne180100]<0>(buf, "blob_biases");
          (*(void (**)(std::string *__return_ptr))(a1[53] + 120))(&__p);
          if ((buf[23] & 0x80000000) != 0) {
            operator delete(*(void **)buf);
          }
          if (v423) {
            nitro::nitro_function::nitro_function(v423);
          }
          unint64_t v262 = __p.__r_.__value_.__r.__words[2];
          uint64_t v263 = (char *)operator new(0x58uLL);
          *((void *)v263 + 1) = 0;
          *((void *)v263 + 2) = 0;
          *(void *)uint64_t v263 = &unk_1EE389920;
          std::string::size_type v264 = __p.__r_.__value_.__r.__words[0];
          *((void *)v263 + 3) = &unk_1EE36BEB0;
          *(_OWORD *)(v263 + 56) = 0u;
          *(_OWORD *)(v263 + 72) = 0u;
          *((_DWORD *)v263 + 8) = v262 >> 2;
          *((void *)v263 + 5) = v264;
          v263[48] = 0;
          uint64_t v265 = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
          __str.__r_.__value_.__r.__words[0] = (std::string::size_type)(v263 + 24);
          __str.__r_.__value_.__l.__size_ = (std::string::size_type)v263;
          if (v265)
          {
            nitro::nitro_function::nitro_function(v265);
            if (!__str.__r_.__value_.__r.__words[0]) {
              Espresso::throw_exception_selector<Espresso::invalid_state_error>("Missing biases");
            }
          }
        }
        std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&__p, 4 * v171, 1, 1, 1);
        std::string::size_type v266 = __p.__r_.__value_.__r.__words[0];
        if (v171)
        {
          uint64_t v267 = *(float **)(__p.__r_.__value_.__r.__words[0] + 16);
          v268 = *(float **)(__str.__r_.__value_.__r.__words[0] + 16);
          long long v269 = *(float **)(*(void *)(a1[51] + 80) + 16);
          uint64_t v270 = v171;
          do
          {
            float v271 = *v268++;
            float v272 = v271;
            float v273 = *v269++;
            *v267++ = v272 / v273;
            --v270;
          }
          while (v270);
        }
        std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(buf, 2 * v171, 1, 1, 1);
        uint64_t v274 = *(void *)buf;
        __int16 v275 = *(const unsigned __int8 **)(*(void *)buf + 16);
        if (v171)
        {
          v276 = *(int **)(v266 + 16);
          v277 = *(_WORD **)(*(void *)buf + 16);
          uint64_t v278 = v171;
          do
          {
            int v279 = *v276++;
            _S0 = v279;
            __asm { FCVT            H0, S0 }
            *v277++ = _S0;
            --v278;
          }
          while (v278);
        }
        v281 = *(std::__shared_weak_count **)&buf[8];
        if (*(void *)&buf[8])
        {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 1uLL, memory_order_relaxed);
          __int16 v275 = *(const unsigned __int8 **)(v274 + 16);
        }
        uint64_t v282 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v183, v275, *(int *)(v274 + 8));
        if (v281) {
          nitro::nitro_function::nitro_function(v281);
        }
        v283 = [NSNumber numberWithUnsignedLong:v171];
        [v185 setObject:v283 forKeyedSubscript:@"BiasCount"];

        v284 = [NSNumber numberWithInt:v282];
        [v185 setObject:v284 forKeyedSubscript:@"BiasOffset"];

        v285 = NSNumber;
        if (v408) {
          uint64_t v286 = 0;
        }
        else {
        v312 = [v285 numberWithUnsignedLong:v286];
        }
        [v185 setObject:v312 forKeyedSubscript:@"BiasIndex"];

        [v185 setObject:@"Float16" forKeyedSubscript:@"BiasType"];
        if (v281) {
          nitro::nitro_function::nitro_function(v281);
        }
        if (__p.__r_.__value_.__l.__size_) {
          nitro::nitro_function::nitro_function((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
        }
        if (__str.__r_.__value_.__l.__size_) {
          nitro::nitro_function::nitro_function((std::__shared_weak_count *)__str.__r_.__value_.__l.__size_);
        }
      }
      v313 = objc_opt_new();
      [v313 setObject:v185 forKeyedSubscript:@"BiasScaleGroupData"];
      Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&__p.__r_.__value_.__l.__data_, a5);
      v314 = v450;
      v450 = @"GOC";

      objc_storeStrong(&v451, v313);
      v315 = v429;
      if ((unint64_t)v429 >= v430)
      {
        unint64_t v317 = 0x8E38E38E38E38E39 * (((uint64_t)v429 - v428) >> 4);
        if (v317 + 1 > 0x1C71C71C71C71C7) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v318 = 0x1C71C71C71C71C72 * ((uint64_t)(v430 - v428) >> 4);
        if (v318 <= v317 + 1) {
          unint64_t v318 = v317 + 1;
        }
        if (0x8E38E38E38E38E39 * ((uint64_t)(v430 - v428) >> 4) >= 0xE38E38E38E38E3) {
          unint64_t v319 = 0x1C71C71C71C71C7;
        }
        else {
          unint64_t v319 = v318;
        }
        *((void *)&v455 + 1) = &v430;
        if (v319) {
          unint64_t v319 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v319);
        }
        else {
          uint64_t v320 = 0;
        }
        *(void *)long long buf = v319;
        *(void *)&buf[8] = v319 + 144 * v317;
        *(void *)&buf[16] = *(void *)&buf[8];
        *(void *)&long long v455 = v319 + 144 * v320;
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(*(std::string **)&buf[8], (uint64_t)&__p);
        *(void *)&buf[16] += 144;
        std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v428, buf);
        v316 = v429;
        std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)buf);
      }
      else
      {
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v429, (uint64_t)&__p);
        v316 = v315 + 6;
      }
      v429 = v316;

      if (v448 < 0) {
        operator delete(v447);
      }
      *(void *)long long buf = &v444;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
      *(void *)long long buf = v443;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }

      if (!*((void *)&v172 + 1)) {
        goto LABEL_401;
      }
      v287 = (std::__shared_weak_count *)*((void *)&v172 + 1);
      goto LABEL_390;
    }
  }
  if (!*(_DWORD *)(a4 + 40))
  {
    if (*(_DWORD *)a4)
    {
      if (a2[121])
      {
        id v218 = *(id *)(v428 + 128);
      }
      else
      {
        id v218 = (id)objc_opt_new();
      }
      v288 = objc_opt_new();
      v289 = [NSNumber numberWithInt:v410];
      [v288 setObject:v289 forKeyedSubscript:@"BiasCount"];

      (*(void (**)(std::string *__return_ptr, void *))(*a1 + 408))(&__str, a1);
      v290 = (std::__shared_weak_count *)a3[1];
      v419 = v290;
      if (v290) {
        atomic_fetch_add_explicit(&v290->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "blob_biases");
      (*(void (**)(unsigned char *__return_ptr))(a1[53] + 120))(buf);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (v419) {
        nitro::nitro_function::nitro_function(v419);
      }
      std::string::size_type v291 = __str.__r_.__value_.__r.__words[0];
      if (!__str.__r_.__value_.__r.__words[0])
      {
        unint64_t v292 = *(void *)&buf[16];
        v293 = (char *)operator new(0x58uLL);
        *((void *)v293 + 1) = 0;
        *((void *)v293 + 2) = 0;
        *(void *)v293 = &unk_1EE389920;
        std::string::size_type v291 = (std::string::size_type)(v293 + 24);
        uint64_t v294 = *(void *)buf;
        *((void *)v293 + 3) = &unk_1EE36BEB0;
        *(_OWORD *)(v293 + 56) = 0u;
        *(_OWORD *)(v293 + 72) = 0u;
        *((_DWORD *)v293 + 8) = v292 >> 2;
        *((void *)v293 + 5) = v294;
        v293[48] = 0;
        v295 = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)(v293 + 24);
        __str.__r_.__value_.__l.__size_ = (std::string::size_type)v293;
        if (v295)
        {
          nitro::nitro_function::nitro_function(v295);
          std::string::size_type v291 = __str.__r_.__value_.__r.__words[0];
          if (!__str.__r_.__value_.__r.__words[0]) {
            Espresso::throw_exception_selector<Espresso::invalid_state_error>("Missing biases");
          }
        }
      }
      v296 = *(int **)(v291 + 16);
      uint64_t v297 = *(int *)(v291 + 8);
      std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v436, 2 * v297, 1, 1, 1);
      uint64_t v298 = v436;
      v299 = *(const unsigned __int8 **)(v436 + 16);
      if (v297)
      {
        v300 = *(_WORD **)(v436 + 16);
        do
        {
          int v301 = *v296++;
          _S0 = v301;
          __asm { FCVT            H0, S0 }
          *v300++ = _S0;
          --v297;
        }
        while (v297);
      }
      v303 = v437;
      if (v437)
      {
        atomic_fetch_add_explicit(&v437->__shared_owners_, 1uLL, memory_order_relaxed);
        v299 = *(const unsigned __int8 **)(v298 + 16);
      }
      uint64_t v304 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128), v299, *(int *)(v298 + 8));
      if (v303) {
        nitro::nitro_function::nitro_function(v303);
      }
      v305 = NSNumber;
      if (v408) {
        uint64_t v306 = 0;
      }
      else {
      v307 = [v305 numberWithUnsignedLong:v306];
      }
      [v288 setObject:v307 forKeyedSubscript:@"BiasIndex"];

      v308 = [NSNumber numberWithInt:v304];
      [v288 setObject:v308 forKeyedSubscript:@"BiasOffset"];

      [v288 setObject:@"Float16" forKeyedSubscript:@"BiasType"];
      [v218 setObject:v288 forKeyedSubscript:@"BiasScaleGroupData"];
      if (!a2[121])
      {
        Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&__p.__r_.__value_.__l.__data_, a5);
        v309 = v450;
        v450 = @"GOC";

        objc_storeStrong(&v451, v218);
        v310 = v429;
        if ((unint64_t)v429 >= v430)
        {
          v311 = (std::string *)std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__push_back_slow_path<Espresso::ANECompilerEngine::compiler::unit_t const&>(&v428, (uint64_t)&__p);
        }
        else
        {
          std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v429, (uint64_t)&__p);
          v311 = v310 + 6;
        }
        v429 = v311;

        if (v448 < 0) {
          operator delete(v447);
        }
        v435[0] = (void **)&v444;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v435);
        v435[0] = (void **)v443;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v435);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      if (v303) {
        nitro::nitro_function::nitro_function(v303);
      }
      if (__str.__r_.__value_.__l.__size_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)__str.__r_.__value_.__l.__size_);
      }
    }
    goto LABEL_401;
  }
  if (a2[121]) {
    goto LABEL_504;
  }
  (*(void (**)(uint64_t *__return_ptr, void *))(*a1 + 408))(&v420, a1);
  Espresso::ANECompilerEngine::batchnorm_kernel::batchnorm_to_scale_bias((uint64_t)&__str, (uint64_t)&v420, v410, a2[384], 0, 0.0);
  if (v421) {
    nitro::nitro_function::nitro_function(v421);
  }
  long long v190 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
  if (__str.__r_.__value_.__l.__size_) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(__str.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
  }
  std::string::size_type v192 = __str.__r_.__value_.__r.__words[2];
  int v191 = (std::__shared_weak_count *)v463;
  if ((void)v463) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v463 + 8), 1uLL, memory_order_relaxed);
  }
  v193 = (Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128);
  if (*((void *)&v190 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v190 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v194 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v193, *(const unsigned __int8 **)(v190 + 16), *(int *)(v190 + 8));
  if (*((void *)&v190 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v190 + 1));
  }
  if (v191) {
    atomic_fetch_add_explicit(&v191->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v195 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v193, *(const unsigned __int8 **)(v192 + 16), *(int *)(v192 + 8));
  if (v191) {
    nitro::nitro_function::nitro_function(v191);
  }
  unint64_t v196 = objc_opt_new();
  v197 = [NSNumber numberWithInt:v410];
  [v196 setObject:v197 forKeyedSubscript:@"BiasCount"];

  long long v198 = [NSNumber numberWithInt:v195];
  [v196 setObject:v198 forKeyedSubscript:@"BiasOffset"];

  v199 = NSNumber;
  if (v408) {
    uint64_t v200 = 0;
  }
  else {
  v219 = [v199 numberWithUnsignedLong:v200];
  }
  [v196 setObject:v219 forKeyedSubscript:@"BiasIndex"];

  [v196 setObject:@"Float32" forKeyedSubscript:@"BiasType"];
  uint64_t v220 = [NSNumber numberWithInt:v410];
  [v196 setObject:v220 forKeyedSubscript:@"ScaleCount"];

  unint64_t v221 = [NSNumber numberWithInt:v194];
  [v196 setObject:v221 forKeyedSubscript:@"ScaleOffset"];

  char v222 = NSNumber;
  if (v408) {
    uint64_t v223 = 0;
  }
  else {
  v224 = [v222 numberWithUnsignedLong:v223];
  }
  [v196 setObject:v224 forKeyedSubscript:@"ScaleIndex"];

  [v196 setObject:@"Float32" forKeyedSubscript:@"ScaleType"];
  int v225 = objc_opt_new();
  [v225 setObject:v196 forKeyedSubscript:@"BiasScaleGroupData"];
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&__p.__r_.__value_.__l.__data_, a5);
  uint64_t v226 = v450;
  v450 = @"GOC";

  objc_storeStrong(&v451, v225);
  char v227 = v429;
  if ((unint64_t)v429 >= v430)
  {
    unint64_t v229 = 0x8E38E38E38E38E39 * (((uint64_t)v429 - v428) >> 4);
    if (v229 + 1 > 0x1C71C71C71C71C7) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v230 = 0x1C71C71C71C71C72 * ((uint64_t)(v430 - v428) >> 4);
    if (v230 <= v229 + 1) {
      unint64_t v230 = v229 + 1;
    }
    if (0x8E38E38E38E38E39 * ((uint64_t)(v430 - v428) >> 4) >= 0xE38E38E38E38E3) {
      unint64_t v231 = 0x1C71C71C71C71C7;
    }
    else {
      unint64_t v231 = v230;
    }
    *((void *)&v455 + 1) = &v430;
    if (v231) {
      unint64_t v231 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v231);
    }
    else {
      uint64_t v232 = 0;
    }
    *(void *)long long buf = v231;
    *(void *)&buf[8] = v231 + 144 * v229;
    *(void *)&buf[16] = *(void *)&buf[8];
    *(void *)&long long v455 = v231 + 144 * v232;
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(*(std::string **)&buf[8], (uint64_t)&__p);
    *(void *)&buf[16] += 144;
    std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v428, buf);
    v228 = v429;
    std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)buf);
  }
  else
  {
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v429, (uint64_t)&__p);
    v228 = v227 + 6;
  }
  v429 = v228;

  if (v448 < 0) {
    operator delete(v447);
  }
  *(void *)long long buf = &v444;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(void *)long long buf = v443;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }

  if (v191) {
    nitro::nitro_function::nitro_function(v191);
  }
  if (*((void *)&v190 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v190 + 1));
  }
  if ((void)v463) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v463);
  }
  v287 = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
  if (__str.__r_.__value_.__l.__size_) {
LABEL_390:
  }
    nitro::nitro_function::nitro_function(v287);
LABEL_401:
  int v330 = *(_DWORD *)(a4 + 28);
  if (v330 == -1)
  {
LABEL_485:
    (*(void (**)(void *, unsigned char *, uint64_t *))(a1[53] + 32))(a1 + 53, a2, &v428);
    goto LABEL_486;
  }
  if (v330 != 1)
  {
    if (v330) {
      Espresso::throw_exception_selector<Espresso::not_implemented_error>("Custom activation not implemented");
    }
    if (a2[121])
    {
      id v331 = *(id *)(v428 + 128);
    }
    else
    {
      id v331 = (id)objc_opt_new();
    }
    [v331 setObject:@"ReLU" forKeyedSubscript:@"Type"];
    if (a2[121]) {
      goto LABEL_484;
    }
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&__p.__r_.__value_.__l.__data_, a5);
    v335 = v450;
    v450 = @"Neuron";

    objc_storeStrong(&v451, v331);
    v336 = v429;
    if ((unint64_t)v429 >= v430)
    {
      unint64_t v338 = 0x8E38E38E38E38E39 * (((uint64_t)v429 - v428) >> 4);
      if (v338 + 1 > 0x1C71C71C71C71C7) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v339 = 0x1C71C71C71C71C72 * ((uint64_t)(v430 - v428) >> 4);
      if (v339 <= v338 + 1) {
        unint64_t v339 = v338 + 1;
      }
      v340 = (char *)(0x8E38E38E38E38E39 * ((uint64_t)(v430 - v428) >> 4) >= 0xE38E38E38E38E3
                    ? 0x1C71C71C71C71C7
                    : v339);
      *((void *)&v455 + 1) = &v430;
      if (v340) {
        v340 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>((unint64_t)v340);
      }
      else {
        uint64_t v341 = 0;
      }
      *(void *)long long buf = v340;
      *(void *)&buf[8] = &v340[144 * v338];
      *(void *)&buf[16] = *(void *)&buf[8];
      *(void *)&long long v455 = &v340[144 * v341];
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(*(std::string **)&buf[8], (uint64_t)&__p);
      *(void *)&buf[16] += 144;
      std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v428, buf);
      v337 = v429;
      std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)buf);
    }
    else
    {
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v429, (uint64_t)&__p);
      v337 = v336 + 6;
    }
    v429 = v337;

    if (v448 < 0) {
      operator delete(v447);
    }
    *(void *)long long buf = &v444;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    *(void *)long long buf = v443;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_484;
    }
    v354 = (void *)__p.__r_.__value_.__r.__words[0];
    goto LABEL_483;
  }
  if (a2[121])
  {
    id v331 = *(id *)(v428 + 128);
  }
  else
  {
    id v331 = (id)objc_opt_new();
  }
  [v331 setObject:@"Tanh" forKeyedSubscript:@"Type"];
  if (a2[121]) {
    goto LABEL_484;
  }
  uint64_t v332 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&__p, "experimental.ane.use_high_precision_activations");
  std::string::basic_string[abi:ne180100]<0>(buf, "1");
  Espresso::map_const_get<std::map<std::string,std::string>>(v332 + 472, (uint64_t)&__p, (uint64_t)buf, &__str);
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    if (__str.__r_.__value_.__l.__size_ != 1) {
      goto LABEL_432;
    }
    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) != 1) {
      goto LABEL_432;
    }
    p_str = &__str;
  }
  if (p_str->__r_.__value_.__s.__data_[0] == 48)
  {
LABEL_438:
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&__p.__r_.__value_.__l.__data_, a5);
    v346 = v450;
    v450 = @"Neuron";

    objc_storeStrong(&v451, v331);
    v347 = v429;
    if ((unint64_t)v429 >= v430)
    {
      unint64_t v350 = 0x8E38E38E38E38E39 * (((uint64_t)v429 - v428) >> 4);
      if (v350 + 1 > 0x1C71C71C71C71C7) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v351 = 0x1C71C71C71C71C72 * ((uint64_t)(v430 - v428) >> 4);
      if (v351 <= v350 + 1) {
        unint64_t v351 = v350 + 1;
      }
      if (0x8E38E38E38E38E39 * ((uint64_t)(v430 - v428) >> 4) >= 0xE38E38E38E38E3) {
        unint64_t v352 = 0x1C71C71C71C71C7;
      }
      else {
        unint64_t v352 = v351;
      }
      *((void *)&v455 + 1) = &v430;
      if (v352) {
        unint64_t v352 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v352);
      }
      else {
        uint64_t v353 = 0;
      }
      *(void *)long long buf = v352;
      *(void *)&buf[8] = v352 + 144 * v350;
      *(void *)&buf[16] = *(void *)&buf[8];
      *(void *)&long long v455 = v352 + 144 * v353;
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(*(std::string **)&buf[8], (uint64_t)&__p);
      *(void *)&buf[16] += 144;
      std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v428, buf);
      v348 = v429;
      std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)buf);
    }
    else
    {
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v429, (uint64_t)&__p);
      v348 = v347 + 6;
    }
    v429 = v348;

    if (v448 < 0) {
      operator delete(v447);
    }
    *(void *)long long buf = &v444;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    *(void *)long long buf = v443;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_484;
    }
    v354 = (void *)__str.__r_.__value_.__r.__words[0];
LABEL_483:
    operator delete(v354);
LABEL_484:

    goto LABEL_485;
  }
LABEL_432:
  if (!Espresso::ANECompilerEngine::is_mix(v401, v333)) {
    goto LABEL_438;
  }
  v342 = v429;
  v343 = v429 - 6;
  std::string::append(v429 - 6, "_pre_tanh");
  (*(void (**)(void *, unsigned char *, uint64_t *))(a1[53] + 32))(a1 + 53, a2, &v428);
  Espresso::ANECompilerEngine::compiler::layer_graph_info_t::layer_graph_info_t(&__p, (const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *)a5);
  v344 = v444;
  for (m = v445; m != v344; --m)
  {
    if (SHIBYTE(m[-1].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(m[-1].__r_.__value_.__l.__data_);
    }
  }
  v445 = v344;
  if ((unint64_t)v344 >= v446)
  {
    v355 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v444, (uint64_t)v343);
  }
  else
  {
    if (SHIBYTE(v342[-6].__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(v344, v342[-6].__r_.__value_.__l.__data_, v342[-6].__r_.__value_.__l.__size_);
    }
    else
    {
      long long v349 = *(_OWORD *)&v343->__r_.__value_.__l.__data_;
      v344->__r_.__value_.__r.__words[2] = v343->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v344->__r_.__value_.__l.__data_ = v349;
    }
    v355 = v344 + 1;
  }
  v445 = v355;
  (*(void (**)(void *, unsigned char *, std::string *))(a1[53] + 48))(a1 + 53, a2, &__p);

  if (v448 < 0) {
    operator delete(v447);
  }
  *(void *)long long buf = &v444;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(void *)long long buf = v443;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }

LABEL_486:
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v428;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);

  Espresso::ANECompilerEngine::final_anec_weights_t::~final_anec_weights_t((Espresso::ANECompilerEngine::final_anec_weights_t *)v431);
}

void sub_192B09A98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (v73) {
    nitro::nitro_function::nitro_function(v73);
  }
  if (v72) {
    nitro::nitro_function::nitro_function(v72);
  }
  a72 = (uint64_t)&a44;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&a72);

  Espresso::ANECompilerEngine::final_anec_weights_t::~final_anec_weights_t((Espresso::ANECompilerEngine::final_anec_weights_t *)&a47);
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::final_anec_weights_t::track_anec_weights_f32_d5(uint64_t a1, uint64_t *a2)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = (char *)operator new(0x14uLL);
  uint64_t v5 = v4;
  uint64_t v6 = 0;
  *((_DWORD *)v4 + 4) = 4;
  *(_OWORD *)unint64_t v4 = xmmword_192DF67F8;
  uint64_t v7 = *a2;
  do
  {
    *(_DWORD *)&v38[v6] = *(_DWORD *)(v7 + 4 * *(int *)&v4[v6] + 8);
    v6 += 4;
  }
  while (v6 != 20);
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,5>,std::allocator<Espresso::blob<float,5>>,int const*&,void>(&v28, (uint64_t)v38);
  uint64_t v8 = 0;
  *(void *)&long long v36 = 0;
  long long v34 = 0u;
  long long v35 = 0u;
  uint64_t v9 = 1;
  do
  {
    *((void *)&v34 + v8) = (int)v9;
    v9 *= *(int *)(v7 + 8 + 4 * v8++);
  }
  while (v8 != 5);
  uint64_t v10 = 0;
  *((void *)&v36 + 1) = v9;
  *(void *)&long long v33 = 0;
  long long v31 = 0u;
  long long v32 = 0u;
  uint64_t v11 = v28;
  uint64_t v12 = v28 + 8;
  uint64_t v13 = 1;
  do
  {
    *((void *)&v31 + v10) = (int)v13;
    v13 *= *(int *)(v12 + 4 * v10++);
  }
  while (v10 != 5);
  unint64_t v14 = 0;
  *((void *)&v33 + 1) = v13;
  unint64_t v15 = *(int *)(v7 + 8);
  while (1)
  {
    uint64_t v16 = 0;
    unint64_t v17 = v15;
    do
    {
      v17 *= *(int *)(v7 + 12 + v16);
      v16 += 4;
    }
    while (v16 != 16);
    if (v17 <= v14) {
      break;
    }
    v30[0] = v34;
    v30[1] = v35;
    v30[2] = v36;
    uint64_t v18 = 4;
    LODWORD(v19) = v14;
    do
    {
      unint64_t v20 = *((void *)v30 + v18);
      *(_DWORD *)&v37[4 * v18 + 20] = (int)v19 / v20;
      unint64_t v19 = (int)v19 % v20;
      --v18;
    }
    while (v18 != -1);
    for (uint64_t i = 0; i != 20; i += 4)
      *(_DWORD *)&v37[i] = *(_DWORD *)&v37[4 * *(int *)&v5[i] + 20];
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    v29[0] = v31;
    v29[1] = v32;
    v29[2] = v33;
    do
    {
      v23 += *((void *)v29 + v22) * *(int *)&v37[4 * v22];
      ++v22;
    }
    while (v22 != 5);
    *(_DWORD *)(*(void *)(v11 + 32) + 4 * v23) = *(_DWORD *)(*(void *)(v7 + 32) + 4 * v14++);
  }
  uint64_t v24 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v28;
  if (v24) {
    nitro::nitro_function::nitro_function(v24);
  }
  uint64_t v26 = *a2;
  uint64_t v25 = a2[1];
  if (v25) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v25 + 8), 1uLL, memory_order_relaxed);
  }
  float v27 = *(std::__shared_weak_count **)(a1 + 120);
  *(void *)(a1 + 112) = v26;
  *(void *)(a1 + 120) = v25;
  if (v27) {
    nitro::nitro_function::nitro_function(v27);
  }
  operator delete(v5);
}

void sub_192B0A6E4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t Espresso::ANECompilerEngine::compress_sparse_weights<float,5>(uint64_t a1, uint64_t *a2, uint64_t *a3, float a4)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  __src = 0;
  long long v34 = 0;
  uint64_t v35 = 0;
  long long v31 = 0;
  uint64_t v32 = 0;
  std::string __p = 0;
  v8.i32[1] = 1;
  v8.i64[1] = 0x100000001;
  v8.i32[0] = *(_DWORD *)(*(void *)a1 + 8);
  int8x16_t v9 = (int8x16_t)vmulq_s32(*(int32x4_t *)(*(void *)a1 + 12), v8);
  *(int32x2_t *)v9.i8 = vmul_s32(*(int32x2_t *)v9.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v9, v9, 8uLL));
  int v10 = v9.i32[0] * v9.i32[1];
  Espresso::compress_sparse_kernel<float>(*(float **)(*(void *)a1 + 32), v9.i32[0] * v9.i32[1], &__p, &__src);
  uint64_t v12 = __src;
  uint64_t v11 = v34;
  unint64_t v13 = v34 - (unsigned char *)__src;
  uint64_t v14 = (v34 - (unsigned char *)__src) >> 2;
  float v15 = 1.0 - (float)((float)(unint64_t)v14 / (float)v10);
  uint64_t v18 = Espresso::espresso_os_log_subsystem(v16, v17);
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
  {
    if (*(void *)a1) {
      int v29 = v10;
    }
    else {
      int v29 = 0;
    }
    *(_DWORD *)long long buf = 67109632;
    *(_DWORD *)&uint8_t buf[4] = v13 >> 2;
    *(_WORD *)&buf[8] = 1024;
    *(_DWORD *)&buf[10] = v29;
    *(_WORD *)&buf[14] = 2048;
    double v37 = v15;
    _os_log_debug_impl(&dword_1920CB000, v18, OS_LOG_TYPE_DEBUG, "[add_sparse_mask_for_sparse_kernel] %d %d %.3f\n", buf, 0x18u);
  }

  if (v15 < a4) {
    goto LABEL_9;
  }
  if (v11 == v12)
  {
    uint64_t v24 = Espresso::espresso_os_log_subsystem(v19, v20);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_1920CB000, v24, OS_LOG_TYPE_ERROR, "[add_sparse_mask_for_sparse_kernel] WARNING: All weights in this layer are zero. Training issue?", buf, 2u);
    }

LABEL_9:
    uint64_t v14 = 0;
    goto LABEL_15;
  }
  std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(buf, v13 & 0xFFFFFFFC, 1, 1, 1);
  uint64_t v21 = *(void *)buf;
  uint64_t v22 = (std::__shared_weak_count *)a2[1];
  *(_OWORD *)a2 = *(_OWORD *)buf;
  if (v22)
  {
    nitro::nitro_function::nitro_function(v22);
    uint64_t v23 = *a2;
  }
  else
  {
    uint64_t v23 = v21;
  }
  memcpy(*(void **)(v23 + 16), __src, *(int *)(v23 + 8));
  std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(buf, v31 - __p, 1, 1, 1);
  uint64_t v25 = *(void *)buf;
  uint64_t v26 = (std::__shared_weak_count *)a3[1];
  *(_OWORD *)a3 = *(_OWORD *)buf;
  if (v26)
  {
    nitro::nitro_function::nitro_function(v26);
    uint64_t v27 = *a3;
  }
  else
  {
    uint64_t v27 = v25;
  }
  memcpy(*(void **)(v27 + 16), __p, v31 - (unsigned char *)__p);
LABEL_15:
  if (__p)
  {
    long long v31 = __p;
    operator delete(__p);
  }
  if (__src)
  {
    long long v34 = __src;
    operator delete(__src);
  }
  return v14;
}

void sub_192B0A98C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::compress_dilated_conv_sparse_kernel_mask<float>(uint64_t *a1, _DWORD *a2, uint64_t a3)
{
  int v5 = *(__int16 *)(a3 + 70);
  if (v5 <= 1) {
    int v6 = 1;
  }
  else {
    int v6 = *(__int16 *)(a3 + 70);
  }
  if (v5 > 1) {
    int v7 = (*(_DWORD *)(a3 + 16) - 1) * v5 + 1;
  }
  else {
    int v7 = *(_DWORD *)(a3 + 16);
  }
  int v8 = *(__int16 *)(a3 + 72);
  if (v8 > 1) {
    int v9 = (*(_DWORD *)(a3 + 20) - 1) * v8 + 1;
  }
  else {
    int v9 = *(_DWORD *)(a3 + 20);
  }
  int v10 = *(__int16 *)(a3 + 74);
  if (v10 <= 1) {
    int v11 = 1;
  }
  else {
    int v11 = *(__int16 *)(a3 + 74);
  }
  if (v10 > 1) {
    int v12 = (*(_DWORD *)(a3 + 24) - 1) * v10 + 1;
  }
  else {
    int v12 = *(_DWORD *)(a3 + 24);
  }
  std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(a1, ((a2[6] * a2[5] * v9 * v12 * v7 - 1) >> 3) + 1, 1, 1, 1);
  int v13 = a2[6] * a2[5];
  if (v13 >= 1)
  {
    unsigned int v14 = 0;
    int v15 = 0;
    int v16 = a2[2];
    int v17 = a2[3];
    int v18 = a2[4];
    if (v8 <= 1) {
      int v19 = 1;
    }
    else {
      int v19 = v8;
    }
    int v20 = v12 * v7 * v19;
    do
    {
      if (v18 >= 1)
      {
        int v21 = 0;
        unsigned int v22 = v14;
        do
        {
          if (v17 >= 1)
          {
            int v23 = 0;
            unsigned int v24 = v22;
            do
            {
              if (v16 >= 1)
              {
                uint64_t v25 = *a1;
                unsigned int v26 = v24;
                int v27 = v16;
                do
                {
                  *(unsigned char *)(*(void *)(v25 + 16) + ((unint64_t)v26 >> 3)) |= 1 << (v26 & 7);
                  v26 += v11;
                  --v27;
                }
                while (v27);
              }
              ++v23;
              v24 += v12 * v6;
            }
            while (v23 != v17);
          }
          ++v21;
          v22 += v20;
        }
        while (v21 != v18);
      }
      ++v15;
      v14 += v9 * v7 * v12;
    }
    while (v15 != v13);
  }
}

void Espresso::dilated_conv_bloated_weights<float>(void *a1, uint64_t a2, int a3, int a4, int a5, __int16 *a6)
{
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,5>,std::allocator<Espresso::blob<float,5>>,int &,int &,int &,int &,int &,void>(a1, a3, a4, a5, *(_DWORD *)(a2 + 20), *(_DWORD *)(a2 + 24));
  if (a6[36] <= 1) {
    int v9 = 1;
  }
  else {
    int v9 = a6[36];
  }
  if (a6[37] <= 1) {
    int v10 = 1;
  }
  else {
    int v10 = a6[37];
  }
  int v11 = *(_DWORD *)(a2 + 24) * *(_DWORD *)(a2 + 20);
  if (v11 >= 1)
  {
    int v12 = 0;
    int v13 = 0;
    int v14 = 0;
    uint64_t v15 = *a1;
    int v16 = *(_DWORD *)(*a1 + 8);
    int v17 = *(_DWORD *)(*a1 + 12) * v16;
    int v18 = v17 * *(_DWORD *)(*a1 + 16);
    int v19 = v17 * v10;
    int v20 = v16 * v9;
    int v22 = *(_DWORD *)(a2 + 12);
    int v21 = *(_DWORD *)(a2 + 16);
    uint64_t v23 = *(unsigned int *)(a2 + 8);
    int v24 = a6[35];
    if (v24 <= 1) {
      int v24 = 1;
    }
    do
    {
      if (v21 >= 1)
      {
        int v25 = 0;
        int v26 = v12;
        do
        {
          if (v22 >= 1)
          {
            int v27 = 0;
            int v28 = v26;
            do
            {
              if ((int)v23 >= 1)
              {
                uint64_t v29 = *(void *)(a2 + 32);
                uint64_t v30 = *(void *)(v15 + 32);
                uint64_t v31 = v14;
                int v32 = v28;
                uint64_t v33 = v23;
                do
                {
                  int v34 = *(_DWORD *)(v29 + 4 * v31++);
                  *(_DWORD *)(v30 + 4 * v32) = v34;
                  v32 += v24;
                  --v33;
                }
                while (v33);
                int v14 = v31;
              }
              ++v27;
              v28 += v20;
            }
            while (v27 != v22);
          }
          ++v25;
          v26 += v19;
        }
        while (v25 != v21);
      }
      ++v13;
      v12 += v18;
    }
    while (v13 != v11);
  }
}

uint64_t Espresso::ANECompilerEngine::mix_conv3d_kernel::get_weights@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 648);
  *a2 = *(void *)(this + 640);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

uint64_t Espresso::ANECompilerEngine::mix_conv3d_kernel::get_biases@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 512);
  *a2 = *(void *)(this + 504);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

void Espresso::ANECompilerEngine::mix_conv3d_kernel::set_weights(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 640) = v2;
  unint64_t v4 = *(std::__shared_weak_count **)(a1 + 648);
  *(void *)(a1 + 648) = v3;
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
}

void Espresso::ANECompilerEngine::mix_conv3d_kernel::set_biases(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v4 = *(std::__shared_weak_count **)(a1 + 512);
  *(void *)(a1 + 504) = v3;
  *(void *)(a1 + 512) = v2;
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
}

uint64_t Espresso::ANECompilerEngine::mix_conv3d_kernel::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v3 = *((char *)a2 + 23);
  if (v3 < 0)
  {
    if (a2[1] != 1) {
      goto LABEL_8;
    }
    int v4 = *(unsigned __int8 *)*a2;
  }
  else
  {
    if (v3 != 1) {
      goto LABEL_8;
    }
    int v4 = *(unsigned __int8 *)a2;
  }
  if (v4 == 87 || v4 == 98) {
    return 1;
  }
LABEL_8:
  if (Espresso::weight_key_supported_by_conv_quantized_weights_helper(a2, 1)) {
    return 1;
  }

  return Espresso::ANECompilerEngine::ane_kernel::supports_weight_key(a2);
}

int64x2_t *Espresso::ANECompilerEngine::mix_conv3d_kernel::is_valid_for_engine(uint64_t a1, int64x2_t **a2, void *a3)
{
  v77[2] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = a3[6];
  int v7 = *(std::__shared_weak_count **)(v6 + 80);
  if (v7)
  {
    int v8 = std::__shared_weak_count::lock(v7);
    if (v8) {
      int v9 = *(uint64_t ***)(v6 + 72);
    }
    else {
      int v9 = 0;
    }
  }
  else
  {
    int v9 = 0;
    int v8 = 0;
  }
  Espresso::ANECompilerEngine::ane_arch_allow_network_override((uint64_t)(v9 + 59));
  int v10 = (Espresso::ANECompilerEngine *)objc_claimAutoreleasedReturnValue();
  if (Espresso::ANECompilerEngine::is_mix(v10, v11))
  {
    int v12 = *a2;
    int v13 = a2[1];
    v74[0] = v12;
    v74[1] = v13;
    if (v13) {
      atomic_fetch_add_explicit(&v13->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(&v67, "conv3d not supported on requested architecture.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, &v67, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v74, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    if (v73) {
      nitro::nitro_function::nitro_function(v73);
    }
    uint64_t v58 = (void **)v72;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v58);
    uint64_t v58 = (void **)v71;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v58);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v69 < 0) {
      operator delete((void *)v67);
    }
    if (v13) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v13);
    }
    int v14 = 0;
    goto LABEL_68;
  }
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v15 = *a3;
  uint64_t v16 = *(void *)(*a3 + 32);
  long long v17 = *(_OWORD *)(*a3 + 16);
  v62[0] = *(_OWORD *)*a3;
  v62[1] = v17;
  uint64_t v63 = v16;
  unsigned int v64 = 0;
  uint64_t v65 = 0;
  uint64_t v66 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v64, *(const void **)(v15 + 40), *(void *)(v15 + 48), (uint64_t)(*(void *)(v15 + 48) - *(void *)(v15 + 40)) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)&v67, (const Espresso::net *)v9, (const Espresso::layer_shape *)v62, 1);
  if (v64)
  {
    uint64_t v65 = v64;
    operator delete(v64);
  }
  if (v8)
  {
    nitro::nitro_function::nitro_function(v8);
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v18 = a3[3];
  uint64_t v19 = *(void *)(v18 + 32);
  long long v20 = *(_OWORD *)(v18 + 16);
  v53[0] = *(_OWORD *)v18;
  v53[1] = v20;
  uint64_t v54 = v19;
  CFStringRef v55 = 0;
  uint64_t v56 = 0;
  uint64_t v57 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v55, *(const void **)(v18 + 40), *(void *)(v18 + 48), (uint64_t)(*(void *)(v18 + 48) - *(void *)(v18 + 40)) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)&v58, (const Espresso::net *)v9, (const Espresso::layer_shape *)v53, 1);
  if (v55)
  {
    uint64_t v56 = v55;
    operator delete(v55);
  }
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  int v21 = *(long long **)(*(void *)a3[6] + 224 * a3[9] + 136);
  if (*((char *)v21 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v52, *(const std::string::value_type **)v21, *((void *)v21 + 1));
  }
  else
  {
    long long v22 = *v21;
    v52.__r_.__value_.__r.__words[2] = *((void *)v21 + 2);
    *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v22;
  }
  uint64_t v23 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(v9[45], &v52);
  if (*((_DWORD *)a3 + 16) <= 1u) {
    int v24 = 1;
  }
  else {
    int v24 = *((_DWORD *)a3 + 16);
  }
  if (v23)
  {
    char v48 = &v52;
    int v25 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v9 + 44, &v52, (uint64_t)&std::piecewise_construct, (long long **)&v48);
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)(v25 + 56);
    v71[0] = 0;
    v71[1] = 0;
    __p.__r_.__value_.__r.__words[2] = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p.__r_.__value_.__r.__words[2], *((const void **)v25 + 9), *((void *)v25 + 10), (uint64_t)(*((void *)v25 + 10) - *((void *)v25 + 9)) >> 2);
    int v24 = LODWORD(__p.__r_.__value_.__r.__words[1]) == -1 ? 1 : LODWORD(__p.__r_.__value_.__r.__words[1]);
    if (__p.__r_.__value_.__r.__words[2])
    {
      v71[0] = *((void *)&__p.__r_.__value_.__l + 2);
      operator delete((void *)__p.__r_.__value_.__r.__words[2]);
    }
  }
  int v26 = v10;
  if (Espresso::ANECompilerEngine::blob_shape_ane_compatible(&v67, v26))
  {
    if (Espresso::ANECompilerEngine::blob_shape_ane_compatible(&v58, v26))
    {
      unsigned int v27 = *(unsigned __int16 *)(a1 + 368);
      if (v27 <= 2)
      {
        unsigned int v28 = *(unsigned __int16 *)(a1 + 370);
        if (v28 <= 2)
        {
          unsigned int v29 = *(unsigned __int16 *)(a1 + 372);
          if (v29 < 3)
          {
            int v35 = 29;
            if (v24 != 4 && v24 != 2)
            {
              if (v24 != 1)
              {
                LOBYTE(v48) = 0;
                std::string::basic_string[abi:ne180100]<0>(&v49, "Unsupported compute path");
                goto LABEL_48;
              }
              int v35 = 13;
            }
            if (v29 == 1) {
              int v36 = 15;
            }
            else {
              int v36 = 16;
            }
            int v37 = *(_DWORD *)(a1 + 320);
            if (v37 <= v35 && (int v38 = *(_DWORD *)(a1 + 324), v38 <= 29) && (v39 = *(_DWORD *)(a1 + 328), v39 <= v36))
            {
              int v76 = *(_DWORD *)(a1 + 364);
              long long v75 = *(_OWORD *)(a1 + 348);
              int v40 = v68;
              uint64_t v45 = *((void *)&v67 + 1);
              Espresso::padding_params_t::get_final_lrtbfb((int32x4_t *)&__p, (int16x4_t *)&v75, v68, SHIDWORD(v67), SDWORD2(v67), v61, v60, v59, v27, v28, v29, v37, v38, v39);
              if (SLODWORD(__p.__r_.__value_.__l.__data_) >= v37
                || SHIDWORD(__p.__r_.__value_.__r.__words[0]) >= v37
                || SLODWORD(__p.__r_.__value_.__r.__words[1]) >= v38
                || SHIDWORD(__p.__r_.__value_.__r.__words[1]) >= v38
                || SHIDWORD(__p.__r_.__value_.__r.__words[2]) >= v39
                || (HIDWORD(__p.__r_.__value_.__r.__words[0]) | LODWORD(__p.__r_.__value_.__l.__data_) | LODWORD(__p.__r_.__value_.__r.__words[1]) | HIDWORD(__p.__r_.__value_.__r.__words[1]) | LODWORD(__p.__r_.__value_.__r.__words[2]) | HIDWORD(__p.__r_.__value_.__r.__words[2])) < 0
                || SLODWORD(__p.__r_.__value_.__r.__words[2]) >= v39)
              {
                LOBYTE(v48) = 0;
                std::string::basic_string[abi:ne180100]<0>(&v49, "Padding size exceed ANE limit");
              }
              else if (*(_WORD *)(a1 + 350) || *(float *)(a1 + 352) == 0.0)
              {
                int v41 = *(_DWORD *)(a1 + 384);
                if ((v41 - 4097) > 0xFFFFEFFF)
                {
                  if (v41 >= 2 && SDWORD1(v67) % v41)
                  {
                    LOBYTE(v48) = 0;
                    std::string::basic_string[abi:ne180100]<0>(&v49, "Number of input channels is not uniformly distributed across all input groups.");
                  }
                  else if (HIDWORD(__p.__r_.__value_.__r.__words[0]) + LODWORD(__p.__r_.__value_.__l.__data_) + v40 >= v37 {
                         && HIDWORD(__p.__r_.__value_.__r.__words[1])
                  }
                          + LODWORD(__p.__r_.__value_.__r.__words[1])
                          + HIDWORD(v45) >= v38
                         && HIDWORD(__p.__r_.__value_.__r.__words[2])
                          + LODWORD(__p.__r_.__value_.__r.__words[2])
                          + (int)v45 >= v39)
                  {
                    LOBYTE(v48) = 1;
                    std::string::basic_string[abi:ne180100]<0>(&v49, "Success");
                  }
                  else
                  {
                    LOBYTE(v48) = 0;
                    std::string::basic_string[abi:ne180100]<0>(&v49, "Kernel size is larger than input plus padding.");
                  }
                }
                else
                {
                  std::to_string(&__p, v41);
                  std::string::size_type v42 = std::string::insert(&__p, 0, "Unsupported number of groups : ");
                  int v43 = (void *)v42->__r_.__value_.__r.__words[0];
                  v77[0] = v42->__r_.__value_.__l.__size_;
                  *(void *)((char *)v77 + 7) = *(std::string::size_type *)((char *)&v42->__r_.__value_.__r.__words[1]
                                                                           + 7);
                  char v44 = HIBYTE(v42->__r_.__value_.__r.__words[2]);
                  v42->__r_.__value_.__l.__size_ = 0;
                  v42->__r_.__value_.__r.__words[2] = 0;
                  v42->__r_.__value_.__r.__words[0] = 0;
                  LOBYTE(v48) = 0;
                  *(void *)&v50[7] = *(void *)((char *)v77 + 7);
                  int32x4_t v49 = v43;
                  *(void *)int8x16_t v50 = v77[0];
                  char v51 = v44;
                  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(__p.__r_.__value_.__l.__data_);
                  }
                }
              }
              else
              {
                LOBYTE(v48) = 0;
                std::string::basic_string[abi:ne180100]<0>(&v49, "Constnt Pad fill mode with non-zero values is not supported on ANE.");
              }
            }
            else
            {
              LOBYTE(v48) = 0;
              std::string::basic_string[abi:ne180100]<0>(&v49, "Kernel size exceed ANE limit.");
            }
            goto LABEL_48;
          }
        }
      }
      LOBYTE(v48) = 0;
      std::string::basic_string[abi:ne180100]<0>(&v49, "Stride size should be no larger than 2");
    }
    else
    {
      LOBYTE(v48) = 0;
      std::string::basic_string[abi:ne180100]<0>(&v49, "Output blob dimensions exceed ANE limit.");
    }
  }
  else
  {
    LOBYTE(v48) = 0;
    std::string::basic_string[abi:ne180100]<0>(&v49, "Input blob dimensions exceed ANE limit.");
  }
LABEL_48:

  if ((_BYTE)v48)
  {
    Espresso::ANECompilerEngine::ane_kernel::get_ane_validator((Espresso::ANECompilerEngine::ane_kernel *)&__p, (NSString *)(a1 + 424), v26);
    uint64_t v30 = *a2;
    uint64_t v31 = a2[1];
    v46[0] = v30;
    v46[1] = v31;
    if (v31) {
      atomic_fetch_add_explicit(&v31->i64[1], 1uLL, memory_order_relaxed);
    }
    int v14 = mix_is_valid_for_engine_conv(a1 + 304, a3, v46);
    if (v31) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v31);
    }
    if (__p.__r_.__value_.__l.__size_) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
    }
  }
  else
  {
    int v32 = *a2;
    uint64_t v33 = a2[1];
    v47[0] = v32;
    v47[1] = v33;
    if (v33) {
      atomic_fetch_add_explicit(&v33->i64[1], 1uLL, memory_order_relaxed);
    }
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)&v49, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v47, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    if (v73) {
      nitro::nitro_function::nitro_function(v73);
    }
    *(void *)&long long v75 = v72;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v75);
    *(void *)&long long v75 = v71;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v75);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v33) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v33);
    }
    int v14 = 0;
  }
  if (v51 < 0) {
    operator delete(v49);
  }
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v52.__r_.__value_.__l.__data_);
  }
LABEL_68:

  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  return v14;
}

void sub_192B0B52C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,uint64_t a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  if (a29 < 0) {
    operator delete(__p);
  }

  if (v63) {
    nitro::nitro_function::nitro_function(v63);
  }
  _Unwind_Resume(a1);
}

int64x2_t *mix_is_valid_for_engine_conv(uint64_t a1, void *a2, int64x2_t **a3)
{
  int v6 = *(__int16 *)(a1 + 70);
  int v7 = *(_DWORD *)(a1 + 16);
  int v8 = *(_DWORD *)(a1 + 20);
  int v9 = *(__int16 *)(a1 + 72);
  int v10 = *(_DWORD *)(a1 + 24);
  int v11 = *(__int16 *)(a1 + 74);
  uint64_t v12 = a2[6];
  int v13 = *(std::__shared_weak_count **)(v12 + 80);
  if (v13)
  {
    long long v198 = std::__shared_weak_count::lock(v13);
    if (v198)
    {
      int v14 = *(const Espresso::net **)(v12 + 72);
      if (*((unsigned char *)v14 + 1281))
      {
        int v194 = v10;
        char v15 = 0;
        atomic_fetch_add_explicit(&v198->__shared_owners_, 1uLL, memory_order_relaxed);
        goto LABEL_7;
      }
      uint64_t v112 = v198;
LABEL_143:
      long long v67 = a3[1];
      v267[0] = *a3;
      v267[1] = v67;
      if (v67) {
        atomic_fetch_add_explicit(&v67->i64[1], 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(&v260, "Cannot dispatch conv3D to ANE: no 3D operation detected in the network.");
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v263, &v260, (uint64_t)a2, 1);
      Espresso::emit_kernel_validation_warning(v267, (Espresso::base_kernel::validate_for_engine_warning_t *)&v263);
      if (v266) {
        nitro::nitro_function::nitro_function(v266);
      }
      unint64_t v251 = (void **)v265;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v251);
      unint64_t v251 = (void **)v264;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v251);
      if (SHIBYTE(v263.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v263.__r_.__value_.__l.__data_);
      }
      if (v262 < 0)
      {
        operator delete((void *)v260);
        if (!v67) {
          goto LABEL_334;
        }
      }
      else if (!v67)
      {
        goto LABEL_334;
      }
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v67);
      long long v67 = 0;
      if (!v112) {
        return v67;
      }
      goto LABEL_335;
    }
  }
  if (!MEMORY[0x501])
  {
    uint64_t v112 = 0;
    goto LABEL_143;
  }
  int v194 = v10;
  long long v198 = 0;
  int v14 = 0;
  char v15 = 1;
LABEL_7:
  uint64_t v16 = *a2;
  uint64_t v17 = *(void *)(*a2 + 32);
  long long v18 = *(_OWORD *)(*a2 + 16);
  v255[0] = *(_OWORD *)*a2;
  v255[1] = v18;
  uint64_t v256 = v17;
  std::string __p = 0;
  uint64_t v259 = 0;
  std::string v258 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *(const void **)(v16 + 40), *(void *)(v16 + 48), (uint64_t)(*(void *)(v16 + 48) - *(void *)(v16 + 40)) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)&v260, v14, (const Espresso::layer_shape *)v255, 1);
  if (__p)
  {
    std::string v258 = __p;
    operator delete(__p);
  }
  if (v198) {
    nitro::nitro_function::nitro_function(v198);
  }
  if ((v15 & 1) == 0) {
    atomic_fetch_add_explicit(&v198->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v19 = a2[3];
  uint64_t v20 = *(void *)(v19 + 32);
  long long v21 = *(_OWORD *)(v19 + 16);
  v246[0] = *(_OWORD *)v19;
  v246[1] = v21;
  uint64_t v247 = v20;
  uint64_t v248 = 0;
  uint64_t v250 = 0;
  unint64_t v249 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v248, *(const void **)(v19 + 40), *(void *)(v19 + 48), (uint64_t)(*(void *)(v19 + 48) - *(void *)(v19 + 40)) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)&v251, v14, (const Espresso::layer_shape *)v246, 1);
  if (v248)
  {
    unint64_t v249 = v248;
    operator delete(v248);
  }
  if (v198) {
    nitro::nitro_function::nitro_function(v198);
  }
  std::string::basic_string[abi:ne180100]<0>(v244, "W");
  int v22 = *(__int16 *)(a1 + 64);
  int v23 = *(_DWORD *)(a1 + 12);
  int v192 = (v7 - 1) * v6;
  int v197 = v192 + 1;
  int v24 = *(_DWORD *)(a1 + 80);
  int v25 = v261;
  int v26 = *(__int16 *)(a1 + 54);
  int v27 = *(__int16 *)(a1 + 52);
  int v193 = v254;
  int v28 = v253;
  unsigned int v29 = a3[1];
  v243[0] = *a3;
  v243[1] = v29;
  if (v29) {
    atomic_fetch_add_explicit(&v29->i64[1], 1uLL, memory_order_relaxed);
  }
  int v188 = v25;
  unsigned int is_valid_for_engine_conv_single_dimension = mix_is_valid_for_engine_conv_single_dimension((unsigned __int8 **)v244, v197, v22, v23, v24, v25, v193, v26, v27, v193, v28, (uint64_t)a2, v243);
  if (v29) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v29);
  }
  if (v245 < 0) {
    operator delete(v244[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v241, "H");
  int v31 = (v8 - 1) * v9;
  int __val = v31 + 1;
  int v32 = *(__int16 *)(a1 + 66);
  int v33 = *(_DWORD *)(a1 + 12);
  int v34 = *(_DWORD *)(a1 + 80);
  int v35 = HIDWORD(v260);
  int v36 = *(__int16 *)(a1 + 58);
  int v37 = *(__int16 *)(a1 + 56);
  int v38 = a3[1];
  v240[0] = *a3;
  v240[1] = v38;
  if (v38) {
    atomic_fetch_add_explicit(&v38->i64[1], 1uLL, memory_order_relaxed);
  }
  int v187 = v35;
  int v39 = mix_is_valid_for_engine_conv_single_dimension((unsigned __int8 **)v241, __val, v32, v33, v34, v35, v28, v36, v37, v193, v28, (uint64_t)a2, v240);
  if (v38) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v38);
  }
  if (v242 < 0) {
    operator delete(v241[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v238, "D");
  int v40 = *(__int16 *)(a1 + 68);
  int v189 = (v194 - 1) * v11;
  int v195 = v189 + 1;
  int v41 = *(_DWORD *)(a1 + 12);
  int v42 = *(_DWORD *)(a1 + 80);
  int v43 = DWORD2(v260);
  int v44 = v252;
  int v45 = *(__int16 *)(a1 + 62);
  int v46 = *(__int16 *)(a1 + 60);
  unsigned int v47 = a3;
  char v48 = a3[1];
  v237[0] = *a3;
  v237[1] = v48;
  if (v48) {
    atomic_fetch_add_explicit(&v48->i64[1], 1uLL, memory_order_relaxed);
  }
  int v186 = v43;
  int v190 = v44;
  int v49 = mix_is_valid_for_engine_conv_single_dimension((unsigned __int8 **)v238, v195, v40, v41, v42, v43, v44, v45, v46, v193, v28, (uint64_t)a2, v237);
  if (v48) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v48);
  }
  if (v239 < 0) {
    operator delete(v238[0]);
  }
  if (*a2 == a2[1])
  {
    BOOL v53 = 0;
  }
  else
  {
    uint64_t v50 = Espresso::layer_shape::total_dim((Espresso::layer_shape *)*a2);
    int v51 = *(_DWORD *)(a1 + 80);
    if (v51 <= 1) {
      int v51 = 1;
    }
    double v52 = (double)v197 * (double)(*(_DWORD *)(a1 + 12) / v51) * (double)__val * (double)v195 * (double)v50;
    *(float *)&double v52 = (v52 + v52) * 0.000000001;
    BOOL v53 = *(float *)&v52 < 0.004;
  }
  int v54 = *((_DWORD *)a2 + 16);
  char v191 = v53;
  if (v54 == 4 || v54 == 2)
  {
    int v59 = *(_DWORD *)(a1 + 8);
    char v60 = (v59 & 0xF) == 0 || v53;
    if (v60) {
      goto LABEL_66;
    }
    uint64_t v57 = v47[1];
    v233[0] = *v47;
    v233[1] = v57;
    if (v57)
    {
      atomic_fetch_add_explicit(&v57->i64[1], 1uLL, memory_order_relaxed);
      int v59 = *(_DWORD *)(a1 + 8);
    }
    std::to_string(&v234, v59);
    int v61 = std::string::insert(&v234, 0, "HW utilization loss: Number of channels should be multiple of 16 for best performance. Instead: oc/groups= ");
    std::string v235 = *v61;
    v61->__r_.__value_.__l.__size_ = 0;
    v61->__r_.__value_.__r.__words[2] = 0;
    v61->__r_.__value_.__r.__words[0] = 0;
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v263, (long long *)&v235, (uint64_t)a2, 1);
    Espresso::emit_kernel_validation_warning(v233, (Espresso::base_kernel::validate_for_engine_warning_t *)&v263);
    goto LABEL_56;
  }
  if (v54 == 1)
  {
    int v55 = *(_DWORD *)(a1 + 8);
    char v56 = v53;
    if ((v55 & 0x1F) == 0) {
      char v56 = 1;
    }
    if ((v56 & 1) == 0)
    {
      uint64_t v57 = v47[1];
      v236[0] = *v47;
      v236[1] = v57;
      if (v57)
      {
        atomic_fetch_add_explicit(&v57->i64[1], 1uLL, memory_order_relaxed);
        int v55 = *(_DWORD *)(a1 + 8);
      }
      std::to_string(&v234, v55);
      uint64_t v58 = std::string::insert(&v234, 0, "HW utilization loss: Number of channels should be multiple of 32 for best performance. Instead: oc/groups= ");
      std::string v235 = *v58;
      v58->__r_.__value_.__l.__size_ = 0;
      v58->__r_.__value_.__r.__words[2] = 0;
      v58->__r_.__value_.__r.__words[0] = 0;
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v263, (long long *)&v235, (uint64_t)a2, 1);
      Espresso::emit_kernel_validation_warning(v236, (Espresso::base_kernel::validate_for_engine_warning_t *)&v263);
LABEL_56:
      if (v266) {
        nitro::nitro_function::nitro_function(v266);
      }
      v229.__r_.__value_.__r.__words[0] = (std::string::size_type)v265;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v229);
      v229.__r_.__value_.__r.__words[0] = (std::string::size_type)v264;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v229);
      if (SHIBYTE(v263.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v263.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v235.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v234.__r_.__value_.__l.__data_);
      }
      if (v57) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v57);
      }
    }
  }
LABEL_66:
  int v62 = *(_DWORD *)(a1 + 80);
  if (v62 <= 1) {
    int v62 = 1;
  }
  int v63 = (*(_DWORD *)(a1 + 12) - 1) / v62 + 1;
  int v64 = __val * v197 * v195 * v63;
  uint64_t v65 = (std::__shared_weak_count *)v47[1];
  if (v65)
  {
    atomic_fetch_add_explicit(&v65->__shared_owners_, 1uLL, memory_order_relaxed);
    int v66 = *(_DWORD *)(a1 + 80);
    if (v66 <= 1) {
      int v66 = 1;
    }
    int v63 = (*(_DWORD *)(a1 + 12) - 1) / v66 + 1;
  }
  long long v67 = (int64x2_t *)(v49 & v39 & is_valid_for_engine_conv_single_dimension);
  unint64_t v68 = v64;
  unsigned int v69 = *((_DWORD *)a2 + 16);
  int v70 = (*(_DWORD *)(a1 + 16) - 1) * *(__int16 *)(a1 + 70);
  int v71 = (*(_DWORD *)(a1 + 20) - 1) * *(__int16 *)(a1 + 72);
  int v72 = (*(_DWORD *)(a1 + 24) - 1) * *(__int16 *)(a1 + 74);
  int v73 = *(__int16 *)(a1 + 68);
  if (v72 <= 7)
  {
    int v74 = 1;
  }
  else
  {
    int v73 = 2;
    int v74 = 2;
  }
  BOOL v75 = v69 >= 2;
  if (v69 >= 2) {
    int v76 = 15;
  }
  else {
    int v76 = 7;
  }
  if (v75) {
    char v77 = 3;
  }
  else {
    char v77 = 4;
  }
  BOOL v78 = v70 < v76;
  unsigned __int8 v79 = v70 >= v76;
  int v80 = *(__int16 *)(a1 + 64);
  if (v78)
  {
    char v81 = 1;
  }
  else
  {
    int v80 = 2;
    char v81 = 2;
  }
  if ((v79 & ((((_BYTE)v70 + 1) & 1) == 0)) != 0) {
    int v82 = v70 + 2;
  }
  else {
    int v82 = v70 + 1;
  }
  char v83 = v71 > 14;
  if (v71 <= 14) {
    int v84 = *(__int16 *)(a1 + 66);
  }
  else {
    int v84 = 2;
  }
  if (v71 > 14) {
    ++v81;
  }
  if (v71 > 14 && (((_BYTE)v71 + 1) & 1) == 0) {
    int v85 = v71 + 2;
  }
  else {
    int v85 = v71 + 1;
  }
  int v86 = v72 + 2;
  if (v72 <= 7 || (((_BYTE)v72 + 1) & 1) != 0) {
    int v86 = v72 + 1;
  }
  int v87 = ((((v85 % v84 + v85) * (v82 % v80 + v82) * (v86 % v73 + v86)) << v79 << v83 << (v72 > 7)) * v63) << v77;
  int v88 = v87 + 7;
  BOOL v78 = v87 < -7;
  int v89 = v87 + 14;
  if (!v78) {
    int v89 = v88;
  }
  int v90 = (v74 << v81) + (v89 >> 3) + 2;
  int v91 = v90 & 0x1F;
  if (v90 <= 0) {
    int v91 = -(-v90 & 0x1F);
  }
  if (v91) {
    int v92 = v90 - v91 + 32;
  }
  else {
    int v92 = v90;
  }
  if (v65) {
    nitro::nitro_function::nitro_function(v65);
  }
  if (v92 > 0x10000)
  {
    long long v67 = v47[1];
    v232[0] = *v47;
    v232[1] = v67;
    if (v67) {
      atomic_fetch_add_explicit(&v67->i64[1], 1uLL, memory_order_relaxed);
    }
    std::to_string(&v234, v68);
    int8x16_t v93 = std::string::insert(&v234, 0, "At least one output channel should fit in HW kernel memory. Roughly, size_oc=Kw*Kh*Cin should be less than 65536 for INT8, 32768 for FP16. Instead size_oc=");
    std::string v235 = *v93;
    v93->__r_.__value_.__l.__size_ = 0;
    v93->__r_.__value_.__r.__words[2] = 0;
    v93->__r_.__value_.__r.__words[0] = 0;
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v263, (long long *)&v235, (uint64_t)a2, 0);
    Espresso::emit_kernel_validation_warning(v232, (Espresso::base_kernel::validate_for_engine_warning_t *)&v263);
    if (v266) {
      nitro::nitro_function::nitro_function(v266);
    }
    v229.__r_.__value_.__r.__words[0] = (std::string::size_type)v265;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v229);
    v229.__r_.__value_.__r.__words[0] = (std::string::size_type)v264;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v229);
    if (SHIBYTE(v263.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v263.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v235.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v234.__r_.__value_.__l.__data_);
    }
    if (v67)
    {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v67);
      long long v67 = 0;
    }
  }
  unint64_t v94 = 0x10000;
  if (*((_DWORD *)a2 + 16) < 2u) {
    unint64_t v94 = 0x8000;
  }
  if (v94 <= v68)
  {
    long long v67 = v47[1];
    v231[0] = *v47;
    v231[1] = v67;
    if (v67) {
      atomic_fetch_add_explicit(&v67->i64[1], 1uLL, memory_order_relaxed);
    }
    std::to_string(&v234, v68);
    uint64_t v95 = std::string::insert(&v234, 0, "At least one output channel should fit in HW kernel memory. Roughly, size_oc=Kw*Kh*Cin should be less than 65536 for INT8, 32768 for FP16. Instead size_oc=");
    std::string v235 = *v95;
    v95->__r_.__value_.__l.__size_ = 0;
    v95->__r_.__value_.__r.__words[2] = 0;
    v95->__r_.__value_.__r.__words[0] = 0;
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v263, (long long *)&v235, (uint64_t)a2, 0);
    Espresso::emit_kernel_validation_warning(v231, (Espresso::base_kernel::validate_for_engine_warning_t *)&v263);
    if (v266) {
      nitro::nitro_function::nitro_function(v266);
    }
    v229.__r_.__value_.__r.__words[0] = (std::string::size_type)v265;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v229);
    v229.__r_.__value_.__r.__words[0] = (std::string::size_type)v264;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v229);
    if (SHIBYTE(v263.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v263.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v235.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v234.__r_.__value_.__l.__data_);
    }
    if (v67)
    {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v67);
      long long v67 = 0;
    }
  }
  int v96 = *(__int16 *)(a1 + 52);
  signed int v97 = *(__int16 *)(a1 + 54);
  int v98 = *(__int16 *)(a1 + 56);
  signed int v99 = *(__int16 *)(a1 + 58);
  int v100 = *(__int16 *)(a1 + 62);
  int v101 = *(__int16 *)(a1 + 60);
  if (*a2 == a2[1] || a2[3] == a2[4]) {
    goto LABEL_157;
  }
  int v102 = *(__int16 *)(a1 + 44);
  switch(v102)
  {
    case 4:
      goto LABEL_139;
    case 2:
      int v96 = 0;
      signed int v97 = 0;
      int v98 = 0;
      signed int v99 = 0;
      int v100 = 0;
      int v101 = 0;
      break;
    case 1:
LABEL_139:
      int v103 = __val + (v28 - 1) * *(__int16 *)(a1 + 66) - v187;
      int v104 = v197 + (v193 - 1) * *(__int16 *)(a1 + 64) - v188;
      unsigned int v105 = v103 & ~(v103 >> 31);
      unsigned int v106 = v104 & ~(v104 >> 31);
      int v107 = v195 + (v190 - 1) * *(__int16 *)(a1 + 68) - v186;
      unsigned int v108 = v107 & ~(v107 >> 31);
      unsigned int v109 = v106 - (v106 >> 1);
      signed int v97 = v106 >> 1;
      signed int v99 = v105 >> 1;
      unsigned int v110 = v105 - (v105 >> 1);
      unsigned int v111 = v108 >> 1;
      int v101 = v108 - (v108 >> 1);
      if (*(_WORD *)(a1 + 44) == 1)
      {
        int v96 = v97;
        signed int v97 = v109;
        int v98 = v99;
        signed int v99 = v110;
        int v100 = v101;
        int v101 = v111;
      }
      else
      {
        int v96 = v109;
        int v98 = v110;
        int v100 = v111;
      }
      break;
  }
LABEL_157:
  if (v96 >= v192 + 33
    || v97 >= v192 + 33
    || v98 >= v31 + 33
    || v99 >= v31 + 33
    || v100 >= v189 + 33
    || (v97 | v96 | v98 | v99 | v100 | v101) < 0
    || v101 >= v189 + 33)
  {
    uint64_t v113 = v47[1];
    v230[0] = *v47;
    v230[1] = v113;
    if (v113) {
      atomic_fetch_add_explicit(&v113->i64[1], 1uLL, memory_order_relaxed);
    }
    std::to_string(&v210, 32);
    std::string::size_type v114 = std::string::insert(&v210, 0, "Padding size at left, right, top, bottom should all < (kernel_size + ");
    long long v115 = *(_OWORD *)&v114->__r_.__value_.__l.__data_;
    v211.__r_.__value_.__r.__words[2] = v114->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v211.__r_.__value_.__l.__data_ = v115;
    v114->__r_.__value_.__l.__size_ = 0;
    v114->__r_.__value_.__r.__words[2] = 0;
    v114->__r_.__value_.__r.__words[0] = 0;
    char v116 = std::string::append(&v211, ") size. ");
    long long v117 = *(_OWORD *)&v116->__r_.__value_.__l.__data_;
    v212.__r_.__value_.__r.__words[2] = v116->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v212.__r_.__value_.__l.__data_ = v117;
    v116->__r_.__value_.__l.__size_ = 0;
    v116->__r_.__value_.__r.__words[2] = 0;
    v116->__r_.__value_.__r.__words[0] = 0;
    uint64_t v118 = std::string::append(&v212, "Instead get padding size (");
    long long v119 = *(_OWORD *)&v118->__r_.__value_.__l.__data_;
    v213.__r_.__value_.__r.__words[2] = v118->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v213.__r_.__value_.__l.__data_ = v119;
    v118->__r_.__value_.__l.__size_ = 0;
    v118->__r_.__value_.__r.__words[2] = 0;
    v118->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v209, *(__int16 *)(a1 + 52));
    if ((v209.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v120 = &v209;
    }
    else {
      uint64_t v120 = (std::string *)v209.__r_.__value_.__r.__words[0];
    }
    if ((v209.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v209.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v209.__r_.__value_.__l.__size_;
    }
    id v122 = std::string::append(&v213, (const std::string::value_type *)v120, size);
    long long v123 = *(_OWORD *)&v122->__r_.__value_.__l.__data_;
    v214.__r_.__value_.__r.__words[2] = v122->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v214.__r_.__value_.__l.__data_ = v123;
    v122->__r_.__value_.__l.__size_ = 0;
    v122->__r_.__value_.__r.__words[2] = 0;
    v122->__r_.__value_.__r.__words[0] = 0;
    uint64_t v124 = std::string::append(&v214, ", ");
    long long v125 = *(_OWORD *)&v124->__r_.__value_.__l.__data_;
    v215.__r_.__value_.__r.__words[2] = v124->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v215.__r_.__value_.__l.__data_ = v125;
    v124->__r_.__value_.__l.__size_ = 0;
    v124->__r_.__value_.__r.__words[2] = 0;
    v124->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v208, *(__int16 *)(a1 + 54));
    if ((v208.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      __int16 v126 = &v208;
    }
    else {
      __int16 v126 = (std::string *)v208.__r_.__value_.__r.__words[0];
    }
    if ((v208.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v127 = HIBYTE(v208.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v127 = v208.__r_.__value_.__l.__size_;
    }
    __int16 v128 = std::string::append(&v215, (const std::string::value_type *)v126, v127);
    long long v129 = *(_OWORD *)&v128->__r_.__value_.__l.__data_;
    v216.__r_.__value_.__r.__words[2] = v128->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v216.__r_.__value_.__l.__data_ = v129;
    v128->__r_.__value_.__l.__size_ = 0;
    v128->__r_.__value_.__r.__words[2] = 0;
    v128->__r_.__value_.__r.__words[0] = 0;
    uint64_t v130 = std::string::append(&v216, ", ");
    long long v131 = *(_OWORD *)&v130->__r_.__value_.__l.__data_;
    v217.__r_.__value_.__r.__words[2] = v130->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v217.__r_.__value_.__l.__data_ = v131;
    v130->__r_.__value_.__l.__size_ = 0;
    v130->__r_.__value_.__r.__words[2] = 0;
    v130->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v207, *(__int16 *)(a1 + 56));
    if ((v207.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      char v132 = &v207;
    }
    else {
      char v132 = (std::string *)v207.__r_.__value_.__r.__words[0];
    }
    if ((v207.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v133 = HIBYTE(v207.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v133 = v207.__r_.__value_.__l.__size_;
    }
    long long v134 = std::string::append(&v217, (const std::string::value_type *)v132, v133);
    long long v135 = *(_OWORD *)&v134->__r_.__value_.__l.__data_;
    v218.__r_.__value_.__r.__words[2] = v134->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v218.__r_.__value_.__l.__data_ = v135;
    v134->__r_.__value_.__l.__size_ = 0;
    v134->__r_.__value_.__r.__words[2] = 0;
    v134->__r_.__value_.__r.__words[0] = 0;
    int v136 = std::string::append(&v218, ", ");
    long long v137 = *(_OWORD *)&v136->__r_.__value_.__l.__data_;
    v219.__r_.__value_.__r.__words[2] = v136->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v219.__r_.__value_.__l.__data_ = v137;
    v136->__r_.__value_.__l.__size_ = 0;
    v136->__r_.__value_.__r.__words[2] = 0;
    v136->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v206, *(__int16 *)(a1 + 58));
    if ((v206.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v138 = &v206;
    }
    else {
      int v138 = (std::string *)v206.__r_.__value_.__r.__words[0];
    }
    if ((v206.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v139 = HIBYTE(v206.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v139 = v206.__r_.__value_.__l.__size_;
    }
    unsigned int v140 = std::string::append(&v219, (const std::string::value_type *)v138, v139);
    long long v141 = *(_OWORD *)&v140->__r_.__value_.__l.__data_;
    v220.__r_.__value_.__r.__words[2] = v140->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v220.__r_.__value_.__l.__data_ = v141;
    v140->__r_.__value_.__l.__size_ = 0;
    v140->__r_.__value_.__r.__words[2] = 0;
    v140->__r_.__value_.__r.__words[0] = 0;
    unsigned int v142 = std::string::append(&v220, ", ");
    long long v143 = *(_OWORD *)&v142->__r_.__value_.__l.__data_;
    v221.__r_.__value_.__r.__words[2] = v142->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v221.__r_.__value_.__l.__data_ = v143;
    v142->__r_.__value_.__l.__size_ = 0;
    v142->__r_.__value_.__r.__words[2] = 0;
    v142->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v205, *(__int16 *)(a1 + 60));
    if ((v205.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v144 = &v205;
    }
    else {
      uint64_t v144 = (std::string *)v205.__r_.__value_.__r.__words[0];
    }
    if ((v205.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v145 = HIBYTE(v205.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v145 = v205.__r_.__value_.__l.__size_;
    }
    uint64_t v146 = std::string::append(&v221, (const std::string::value_type *)v144, v145);
    long long v147 = *(_OWORD *)&v146->__r_.__value_.__l.__data_;
    v222.__r_.__value_.__r.__words[2] = v146->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v222.__r_.__value_.__l.__data_ = v147;
    v146->__r_.__value_.__l.__size_ = 0;
    v146->__r_.__value_.__r.__words[2] = 0;
    v146->__r_.__value_.__r.__words[0] = 0;
    int v148 = std::string::append(&v222, ", ");
    long long v149 = *(_OWORD *)&v148->__r_.__value_.__l.__data_;
    v223.__r_.__value_.__r.__words[2] = v148->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v223.__r_.__value_.__l.__data_ = v149;
    v148->__r_.__value_.__l.__size_ = 0;
    v148->__r_.__value_.__r.__words[2] = 0;
    v148->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v204, *(__int16 *)(a1 + 62));
    if ((v204.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v150 = &v204;
    }
    else {
      long long v150 = (std::string *)v204.__r_.__value_.__r.__words[0];
    }
    if ((v204.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v151 = HIBYTE(v204.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v151 = v204.__r_.__value_.__l.__size_;
    }
    unint64_t v152 = std::string::append(&v223, (const std::string::value_type *)v150, v151);
    long long v153 = *(_OWORD *)&v152->__r_.__value_.__l.__data_;
    v224.__r_.__value_.__r.__words[2] = v152->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v224.__r_.__value_.__l.__data_ = v153;
    v152->__r_.__value_.__l.__size_ = 0;
    v152->__r_.__value_.__r.__words[2] = 0;
    v152->__r_.__value_.__r.__words[0] = 0;
    unint64_t v154 = std::string::append(&v224, ") and kernel size ((kernel_size - 1) * dilation_rate) (");
    long long v155 = *(_OWORD *)&v154->__r_.__value_.__l.__data_;
    v225.__r_.__value_.__r.__words[2] = v154->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v225.__r_.__value_.__l.__data_ = v155;
    v154->__r_.__value_.__l.__size_ = 0;
    v154->__r_.__value_.__r.__words[2] = 0;
    v154->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v203, __val);
    if ((v203.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unsigned int v156 = &v203;
    }
    else {
      unsigned int v156 = (std::string *)v203.__r_.__value_.__r.__words[0];
    }
    if ((v203.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v157 = HIBYTE(v203.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v157 = v203.__r_.__value_.__l.__size_;
    }
    int v158 = std::string::append(&v225, (const std::string::value_type *)v156, v157);
    long long v159 = *(_OWORD *)&v158->__r_.__value_.__l.__data_;
    v226.__r_.__value_.__r.__words[2] = v158->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v226.__r_.__value_.__l.__data_ = v159;
    v158->__r_.__value_.__l.__size_ = 0;
    v158->__r_.__value_.__r.__words[2] = 0;
    v158->__r_.__value_.__r.__words[0] = 0;
    unint64_t v160 = std::string::append(&v226, ", ");
    long long v161 = *(_OWORD *)&v160->__r_.__value_.__l.__data_;
    v227.__r_.__value_.__r.__words[2] = v160->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v227.__r_.__value_.__l.__data_ = v161;
    v160->__r_.__value_.__l.__size_ = 0;
    v160->__r_.__value_.__r.__words[2] = 0;
    v160->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v202, v197);
    if ((v202.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v162 = &v202;
    }
    else {
      unint64_t v162 = (std::string *)v202.__r_.__value_.__r.__words[0];
    }
    if ((v202.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v163 = HIBYTE(v202.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v163 = v202.__r_.__value_.__l.__size_;
    }
    double v164 = std::string::append(&v227, (const std::string::value_type *)v162, v163);
    long long v165 = *(_OWORD *)&v164->__r_.__value_.__l.__data_;
    v228.__r_.__value_.__r.__words[2] = v164->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v228.__r_.__value_.__l.__data_ = v165;
    v164->__r_.__value_.__l.__size_ = 0;
    v164->__r_.__value_.__r.__words[2] = 0;
    v164->__r_.__value_.__r.__words[0] = 0;
    uint64_t v166 = std::string::append(&v228, ",");
    long long v167 = *(_OWORD *)&v166->__r_.__value_.__l.__data_;
    v229.__r_.__value_.__r.__words[2] = v166->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v229.__r_.__value_.__l.__data_ = v167;
    v166->__r_.__value_.__l.__size_ = 0;
    v166->__r_.__value_.__r.__words[2] = 0;
    v166->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v201, v195);
    if ((v201.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      id v168 = &v201;
    }
    else {
      id v168 = (std::string *)v201.__r_.__value_.__r.__words[0];
    }
    if ((v201.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v169 = HIBYTE(v201.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v169 = v201.__r_.__value_.__l.__size_;
    }
    uint64_t v170 = std::string::append(&v229, (const std::string::value_type *)v168, v169);
    long long v171 = *(_OWORD *)&v170->__r_.__value_.__l.__data_;
    v234.__r_.__value_.__r.__words[2] = v170->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v234.__r_.__value_.__l.__data_ = v171;
    v170->__r_.__value_.__l.__size_ = 0;
    v170->__r_.__value_.__r.__words[2] = 0;
    v170->__r_.__value_.__r.__words[0] = 0;
    long long v172 = std::string::append(&v234, ")");
    std::string v235 = *v172;
    v172->__r_.__value_.__l.__size_ = 0;
    v172->__r_.__value_.__r.__words[2] = 0;
    v172->__r_.__value_.__r.__words[0] = 0;
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v263, (long long *)&v235, (uint64_t)a2, 0);
    Espresso::emit_kernel_validation_warning(v230, (Espresso::base_kernel::validate_for_engine_warning_t *)&v263);
    if (v266) {
      nitro::nitro_function::nitro_function(v266);
    }
    v268[0] = (void **)v265;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v268);
    v268[0] = (void **)v264;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v268);
    if (SHIBYTE(v263.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v263.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v235.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v234.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v201.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v201.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v229.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v229.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v228.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v228.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v202.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v202.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v227.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v227.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v226.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v226.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v203.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v203.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v225.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v225.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v224.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v224.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v204.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v204.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v223.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v223.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v222.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v205.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v205.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v221.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v220.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v206.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v206.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v219.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v218.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v218.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v207.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v207.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v217.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v217.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v216.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v216.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v208.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v208.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v215.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v215.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v214.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v214.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v209.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v209.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v213.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v213.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v212.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v212.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v211.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v211.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v210.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v210.__r_.__value_.__l.__data_);
    }
    if (v113) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v113);
    }
    long long v67 = 0;
  }
  if (*(_WORD *)(a1 + 46) != 1 && (*(_WORD *)(a1 + 46) || fabsf(*(float *)(a1 + 48)) >= 1.1755e-38))
  {
    int v177 = v47[1];
    v200[0] = *v47;
    v200[1] = v177;
    if (v177) {
      atomic_fetch_add_explicit(&v177->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(&v235, "only fill mode of constant with 0 value is supported for padding");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v263, (long long *)&v235, (uint64_t)a2, 0);
    uint64_t v112 = v198;
    Espresso::emit_kernel_validation_warning(v200, (Espresso::base_kernel::validate_for_engine_warning_t *)&v263);
    if (v266) {
      nitro::nitro_function::nitro_function(v266);
    }
    v234.__r_.__value_.__r.__words[0] = (std::string::size_type)v265;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v234);
    v234.__r_.__value_.__r.__words[0] = (std::string::size_type)v264;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v234);
    if (SHIBYTE(v263.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v263.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v235.__r_.__value_.__l.__data_);
    }
    long long v67 = 0;
  }
  else
  {
    char v173 = v191;
    if (a2[3] == a2[4]) {
      char v173 = 1;
    }
    if (v173) {
      goto LABEL_337;
    }
    int v174 = v254;
    if (v254 < 2) {
      goto LABEL_337;
    }
    int v175 = v253;
    if (v253 < 2 || !v190) {
      goto LABEL_337;
    }
    int v176 = v190 - 1;
    if (v190 < 1) {
      int v176 = v190 + 6;
    }
    if ((float)((float)((float)(int)((((v254 << 6) - 64) & 0xFFFFFE00)
                                    + 512
                                    + ((((v254 << 6) - 64) & 0xFFFFFE00) + 512) * ((v253 - 1) >> 3)
                                    + ((((v254 << 6) - 64) & 0xFFFFFE00)
                                     + 512
                                     + ((((v254 << 6) - 64) & 0xFFFFFE00) + 512) * ((v253 - 1) >> 3))
                                    * (v176 >> 3))
                       + 1.0)
               / (float)((float)(v253 * v254 * v190) + 1.0)) <= 1.9)
    {
LABEL_337:
      uint64_t v112 = v198;
      if (!v198) {
        return v67;
      }
      goto LABEL_335;
    }
    int v177 = v47[1];
    v199[0] = *v47;
    v199[1] = v177;
    if (v177) {
      atomic_fetch_add_explicit(&v177->i64[1], 1uLL, memory_order_relaxed);
    }
    std::to_string(&v228, v174);
    id v178 = std::string::insert(&v228, 0, "HW utilization loss: HW may round up computation of output sizes to multiple of 8 or 16, but the output size is ");
    long long v179 = *(_OWORD *)&v178->__r_.__value_.__l.__data_;
    v229.__r_.__value_.__r.__words[2] = v178->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v229.__r_.__value_.__l.__data_ = v179;
    v178->__r_.__value_.__l.__size_ = 0;
    v178->__r_.__value_.__r.__words[2] = 0;
    v178->__r_.__value_.__r.__words[0] = 0;
    uint64_t v180 = std::string::append(&v229, "x");
    long long v181 = *(_OWORD *)&v180->__r_.__value_.__l.__data_;
    v234.__r_.__value_.__r.__words[2] = v180->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v234.__r_.__value_.__l.__data_ = v181;
    v180->__r_.__value_.__l.__size_ = 0;
    v180->__r_.__value_.__r.__words[2] = 0;
    v180->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v227, v175);
    if ((v227.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v182 = &v227;
    }
    else {
      long long v182 = (std::string *)v227.__r_.__value_.__r.__words[0];
    }
    if ((v227.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v183 = HIBYTE(v227.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v183 = v227.__r_.__value_.__l.__size_;
    }
    uint64_t v112 = v198;
    uint64_t v184 = std::string::append(&v234, (const std::string::value_type *)v182, v183);
    std::string v235 = *v184;
    v184->__r_.__value_.__l.__size_ = 0;
    v184->__r_.__value_.__r.__words[2] = 0;
    v184->__r_.__value_.__r.__words[0] = 0;
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v263, (long long *)&v235, (uint64_t)a2, 1);
    Espresso::emit_kernel_validation_warning(v199, (Espresso::base_kernel::validate_for_engine_warning_t *)&v263);
    if (v266) {
      nitro::nitro_function::nitro_function(v266);
    }
    v226.__r_.__value_.__r.__words[0] = (std::string::size_type)v265;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v226);
    v226.__r_.__value_.__r.__words[0] = (std::string::size_type)v264;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v226);
    if (SHIBYTE(v263.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v263.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v235.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v227.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v227.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v234.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v229.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v229.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v228.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v228.__r_.__value_.__l.__data_);
    }
  }
  if (v177) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v177);
  }
LABEL_334:
  if (v112) {
LABEL_335:
  }
    nitro::nitro_function::nitro_function(v112);
  return v67;
}

void sub_192B0CC44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20)
{
  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((Espresso::base_kernel::validate_for_engine_warning_t *)(v21 - 224));
  if (SLOBYTE(STACK[0x447]) < 0) {
    operator delete((void *)STACK[0x430]);
  }
  if (SLOBYTE(STACK[0x387]) < 0) {
    operator delete((void *)STACK[0x370]);
  }
  if (SLOBYTE(STACK[0x427]) < 0) {
    operator delete((void *)STACK[0x410]);
  }
  if (SLOBYTE(STACK[0x3C7]) < 0) {
    operator delete((void *)STACK[0x3B0]);
  }
  if (SLOBYTE(STACK[0x3A7]) < 0) {
    operator delete((void *)STACK[0x390]);
  }
  if (v20) {
    nitro::nitro_function::nitro_function(v20);
  }
  if (a20) {
    nitro::nitro_function::nitro_function(a20);
  }
  _Unwind_Resume(a1);
}

void sub_192B0D050()
{
}

void sub_192B0D058()
{
}

void sub_192B0D060()
{
}

void sub_192B0D068()
{
}

void sub_192B0D070()
{
}

void sub_192B0D078()
{
}

void sub_192B0D080()
{
}

void sub_192B0D088()
{
}

void sub_192B0D090()
{
}

void sub_192B0D098()
{
}

void sub_192B0D0A0()
{
}

void sub_192B0D0A8()
{
}

void sub_192B0D0B0()
{
}

void sub_192B0D0B8()
{
}

void sub_192B0D0C0()
{
}

void sub_192B0D0C8()
{
}

void sub_192B0D0D0()
{
}

void sub_192B0D0D8()
{
}

void sub_192B0D0E0()
{
}

void sub_192B0D0E8()
{
}

void sub_192B0D0F0()
{
}

void sub_192B0D0F8()
{
}

void sub_192B0D100()
{
}

void sub_192B0D108()
{
}

void sub_192B0D110()
{
  if (!v0) {
    JUMPOUT(0x192B0D038);
  }
  JUMPOUT(0x192B0D030);
}

void sub_192B0D11C()
{
  if (v0) {
    nitro::nitro_function::nitro_function(v0);
  }
  if (SLOBYTE(STACK[0x47F]) < 0) {
    operator delete((void *)STACK[0x468]);
  }
  JUMPOUT(0x192B0D038);
}

void sub_192B0D180(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20 = (void *)STACK[0x4F8];
  if (STACK[0x4F8])
  {
    STACK[0x500] = (unint64_t)v20;
    operator delete(v20);
  }
  if (a20) {
    JUMPOUT(0x192B0D034);
  }
  JUMPOUT(0x192B0D038);
}

void sub_192B0D1C4()
{
}

uint64_t mix_is_valid_for_engine_conv_single_dimension(unsigned __int8 **a1, int a2, int a3, int a4, int a5, int __val, int a7, int a8, int a9, int a10, int a11, uint64_t a12, int64x2_t **a13)
{
  if ((a7 - 1) * a3 >= a9 + __val)
  {
    uint64_t v17 = a13[1];
    v126[0] = *a13;
    v126[1] = v17;
    if (v17) {
      atomic_fetch_add_explicit(&v17->i64[1], 1uLL, memory_order_relaxed);
    }
    std::to_string(&v112, __val);
    int v33 = std::string::insert(&v112, 0, "Invalid configuration of src=");
    long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
    v113.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v113.__r_.__value_.__l.__data_ = v34;
    v33->__r_.__value_.__l.__size_ = 0;
    v33->__r_.__value_.__r.__words[2] = 0;
    v33->__r_.__value_.__r.__words[0] = 0;
    int v35 = std::string::append(&v113, " dst=");
    long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
    v114.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v114.__r_.__value_.__l.__data_ = v36;
    v35->__r_.__value_.__l.__size_ = 0;
    v35->__r_.__value_.__r.__words[2] = 0;
    v35->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v111, a7);
    if ((v111.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v37 = &v111;
    }
    else {
      int v37 = (std::string *)v111.__r_.__value_.__r.__words[0];
    }
    if ((v111.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v111.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v111.__r_.__value_.__l.__size_;
    }
    int v39 = std::string::append(&v114, (const std::string::value_type *)v37, size);
    long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
    v115.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v115.__r_.__value_.__l.__data_ = v40;
    v39->__r_.__value_.__l.__size_ = 0;
    v39->__r_.__value_.__r.__words[2] = 0;
    v39->__r_.__value_.__r.__words[0] = 0;
    int v41 = std::string::append(&v115, " stride=");
    long long v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
    v116.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v116.__r_.__value_.__l.__data_ = v42;
    v41->__r_.__value_.__l.__size_ = 0;
    v41->__r_.__value_.__r.__words[2] = 0;
    v41->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v110, a3);
    if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v43 = &v110;
    }
    else {
      int v43 = (std::string *)v110.__r_.__value_.__r.__words[0];
    }
    if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v44 = HIBYTE(v110.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v44 = v110.__r_.__value_.__l.__size_;
    }
    int v45 = std::string::append(&v116, (const std::string::value_type *)v43, v44);
    long long v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
    v117.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v117.__r_.__value_.__l.__data_ = v46;
    v45->__r_.__value_.__l.__size_ = 0;
    v45->__r_.__value_.__r.__words[2] = 0;
    v45->__r_.__value_.__r.__words[0] = 0;
    unsigned int v47 = std::string::append(&v117, " N=");
    long long v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
    v118.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v118.__r_.__value_.__l.__data_ = v48;
    v47->__r_.__value_.__l.__size_ = 0;
    v47->__r_.__value_.__r.__words[2] = 0;
    v47->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v109, a2);
    if ((v109.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v49 = &v109;
    }
    else {
      int v49 = (std::string *)v109.__r_.__value_.__r.__words[0];
    }
    if ((v109.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v50 = HIBYTE(v109.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v50 = v109.__r_.__value_.__l.__size_;
    }
    int v51 = std::string::append(&v118, (const std::string::value_type *)v49, v50);
    long long v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
    v119.__r_.__value_.__r.__words[2] = v51->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v119.__r_.__value_.__l.__data_ = v52;
    v51->__r_.__value_.__l.__size_ = 0;
    v51->__r_.__value_.__r.__words[2] = 0;
    v51->__r_.__value_.__r.__words[0] = 0;
    BOOL v53 = std::string::append(&v119, " pad=");
    long long v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
    v120.__r_.__value_.__r.__words[2] = v53->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v120.__r_.__value_.__l.__data_ = v54;
    v53->__r_.__value_.__l.__size_ = 0;
    v53->__r_.__value_.__r.__words[2] = 0;
    v53->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v108, a9);
    if ((v108.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v55 = &v108;
    }
    else {
      int v55 = (std::string *)v108.__r_.__value_.__r.__words[0];
    }
    if ((v108.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v56 = HIBYTE(v108.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v56 = v108.__r_.__value_.__l.__size_;
    }
    uint64_t v57 = std::string::append(&v120, (const std::string::value_type *)v55, v56);
    std::string v121 = *v57;
    v57->__r_.__value_.__l.__size_ = 0;
    v57->__r_.__value_.__r.__words[2] = 0;
    v57->__r_.__value_.__r.__words[0] = 0;
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v122, (long long *)&v121, a12, 0);
    Espresso::emit_kernel_validation_warning(v126, (Espresso::base_kernel::validate_for_engine_warning_t *)&v122);
    if (v125) {
      nitro::nitro_function::nitro_function(v125);
    }
    v127[0] = (void **)v124;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v127);
    v127[0] = (void **)v123;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v127);
    if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v122.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v121.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v108.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v120.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v119.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v109.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v118.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v117.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v117.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v110.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v116.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v115.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v111.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v114.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v113.__r_.__value_.__l.__data_);
    }
    if ((SHIBYTE(v112.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_217;
    }
    int v31 = (void *)v112.__r_.__value_.__r.__words[0];
    goto LABEL_216;
  }
  if (a9 + __val + a8 < a2)
  {
    uint64_t v17 = a13[1];
    v107[0] = *a13;
    v107[1] = v17;
    if (v17) {
      atomic_fetch_add_explicit(&v17->i64[1], 1uLL, memory_order_relaxed);
    }
    std::to_string(&v116, __val);
    long long v18 = std::string::insert(&v116, 0, "Input width ");
    long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v117.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v117.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    uint64_t v20 = std::string::append(&v117, " plus horizontal padding ");
    long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v118.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v118.__r_.__value_.__l.__data_ = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v115, a9 + a8);
    if ((v115.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v22 = &v115;
    }
    else {
      int v22 = (std::string *)v115.__r_.__value_.__r.__words[0];
    }
    if ((v115.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v23 = HIBYTE(v115.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v23 = v115.__r_.__value_.__l.__size_;
    }
    int v24 = std::string::append(&v118, (const std::string::value_type *)v22, v23);
    long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v119.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v119.__r_.__value_.__l.__data_ = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    int v26 = std::string::append(&v119, " is less than the kernel width ");
    long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
    v120.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v120.__r_.__value_.__l.__data_ = v27;
    v26->__r_.__value_.__l.__size_ = 0;
    v26->__r_.__value_.__r.__words[2] = 0;
    v26->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v114, a2);
    if ((v114.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v28 = &v114;
    }
    else {
      int v28 = (std::string *)v114.__r_.__value_.__r.__words[0];
    }
    if ((v114.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v29 = HIBYTE(v114.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v29 = v114.__r_.__value_.__l.__size_;
    }
    uint64_t v30 = std::string::append(&v120, (const std::string::value_type *)v28, v29);
    std::string v121 = *v30;
    v30->__r_.__value_.__l.__size_ = 0;
    v30->__r_.__value_.__r.__words[2] = 0;
    v30->__r_.__value_.__r.__words[0] = 0;
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v122, (long long *)&v121, a12, 0);
    Espresso::emit_kernel_validation_warning(v107, (Espresso::base_kernel::validate_for_engine_warning_t *)&v122);
    if (v125) {
      nitro::nitro_function::nitro_function(v125);
    }
    v113.__r_.__value_.__r.__words[0] = (std::string::size_type)v124;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v113);
    v113.__r_.__value_.__r.__words[0] = (std::string::size_type)v123;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v113);
    if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v122.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v121.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v114.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v120.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v119.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v115.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v118.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v117.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v117.__r_.__value_.__l.__data_);
    }
    if ((SHIBYTE(v116.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_217;
    }
    int v31 = (void *)v116.__r_.__value_.__r.__words[0];
    goto LABEL_216;
  }
  int v60 = *((char *)a1 + 23);
  if (v60 < 0)
  {
    if (a1[1] != (unsigned __int8 *)1) {
      goto LABEL_221;
    }
    int v61 = **a1;
  }
  else
  {
    if (v60 != 1) {
      goto LABEL_221;
    }
    int v61 = *(unsigned __int8 *)a1;
  }
  if (v61 == 72)
  {
    int v63 = 29;
    int v62 = 29;
    goto LABEL_117;
  }
  if (v61 == 87)
  {
    int v62 = 29;
    int v63 = 13;
    goto LABEL_117;
  }
  if (v61 != 68) {
LABEL_221:
  }
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Dimension has to be H, W, or D");
  if (a11 < 9 && a10 < 9) {
    int v65 = 15;
  }
  else {
    int v65 = 8;
  }
  if (a3 == 2) {
    int v63 = 16;
  }
  else {
    int v63 = 15;
  }
  if (a3 == 2) {
    int v62 = 16;
  }
  else {
    int v62 = v65;
  }
LABEL_117:
  uint64_t v66 = *(unsigned int *)(a12 + 64);
  if (v66 < 2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v122, "(dilated)kernel size");
    int v70 = *a13;
    int v71 = a13[1];
    if (v71) {
      atomic_fetch_add_explicit(&v71->i64[1], 1uLL, memory_order_relaxed);
    }
    BOOL v72 = Espresso::ANECompilerEngine::validate_size(a2, v63, (uint64_t)&v122, a12, v70, v71);
    if (v71) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v71);
    }
    if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v122.__r_.__value_.__l.__data_);
      if (v72) {
        goto LABEL_145;
      }
    }
    else if (v72)
    {
      goto LABEL_145;
    }
    uint64_t v17 = a13[1];
    v106[0] = *a13;
    v106[1] = v17;
    if (v17) {
      atomic_fetch_add_explicit(&v17->i64[1], 1uLL, memory_order_relaxed);
    }
    std::to_string(&v118, a2);
    int v88 = std::string::insert(&v118, 0, "Invalid size Neff = ");
    long long v89 = *(_OWORD *)&v88->__r_.__value_.__l.__data_;
    v119.__r_.__value_.__r.__words[2] = v88->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v119.__r_.__value_.__l.__data_ = v89;
    v88->__r_.__value_.__l.__size_ = 0;
    v88->__r_.__value_.__r.__words[2] = 0;
    v88->__r_.__value_.__r.__words[0] = 0;
    int v90 = std::string::append(&v119, " Exceeds kernel size limit = ");
    long long v91 = *(_OWORD *)&v90->__r_.__value_.__l.__data_;
    v120.__r_.__value_.__r.__words[2] = v90->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v120.__r_.__value_.__l.__data_ = v91;
    v90->__r_.__value_.__l.__size_ = 0;
    v90->__r_.__value_.__r.__words[2] = 0;
    v90->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v117, v63);
    if ((v117.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v92 = &v117;
    }
    else {
      int v92 = (std::string *)v117.__r_.__value_.__r.__words[0];
    }
    if ((v117.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v93 = HIBYTE(v117.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v93 = v117.__r_.__value_.__l.__size_;
    }
    unint64_t v94 = std::string::append(&v120, (const std::string::value_type *)v92, v93);
    std::string v121 = *v94;
    v94->__r_.__value_.__l.__size_ = 0;
    v94->__r_.__value_.__r.__words[2] = 0;
    v94->__r_.__value_.__r.__words[0] = 0;
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v122, (long long *)&v121, a12, 0);
    Espresso::emit_kernel_validation_warning(v106, (Espresso::base_kernel::validate_for_engine_warning_t *)&v122);
LABEL_167:
    if (v125) {
      nitro::nitro_function::nitro_function(v125);
    }
    v116.__r_.__value_.__r.__words[0] = (std::string::size_type)v124;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v116);
    v116.__r_.__value_.__r.__words[0] = (std::string::size_type)v123;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v116);
    if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v122.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v121.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v117.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v117.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v120.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v119.__r_.__value_.__l.__data_);
    }
    if ((SHIBYTE(v118.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_217;
    }
    int v31 = (void *)v118.__r_.__value_.__r.__words[0];
    goto LABEL_216;
  }
  if (v66 != 2 && v66 != 4) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error,int &>("Wrong compute path for ANE: %d", v66);
  }
  std::string::basic_string[abi:ne180100]<0>(&v122, "(dilated)kernel size");
  long long v67 = *a13;
  unint64_t v68 = a13[1];
  if (v68) {
    atomic_fetch_add_explicit(&v68->i64[1], 1uLL, memory_order_relaxed);
  }
  BOOL v69 = Espresso::ANECompilerEngine::validate_size(a2, v62, (uint64_t)&v122, a12, v67, v68);
  if (v68) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v68);
  }
  if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v122.__r_.__value_.__l.__data_);
    if (v69) {
      goto LABEL_145;
    }
    goto LABEL_135;
  }
  if (!v69)
  {
LABEL_135:
    uint64_t v17 = a13[1];
    v105[0] = *a13;
    v105[1] = v17;
    if (v17) {
      atomic_fetch_add_explicit(&v17->i64[1], 1uLL, memory_order_relaxed);
    }
    std::to_string(&v118, a2);
    int v73 = std::string::insert(&v118, 0, "Invalid size Neff = ");
    long long v74 = *(_OWORD *)&v73->__r_.__value_.__l.__data_;
    v119.__r_.__value_.__r.__words[2] = v73->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v119.__r_.__value_.__l.__data_ = v74;
    v73->__r_.__value_.__l.__size_ = 0;
    v73->__r_.__value_.__r.__words[2] = 0;
    v73->__r_.__value_.__r.__words[0] = 0;
    BOOL v75 = std::string::append(&v119, " Exceeds kernel size limit = ");
    long long v76 = *(_OWORD *)&v75->__r_.__value_.__l.__data_;
    v120.__r_.__value_.__r.__words[2] = v75->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v120.__r_.__value_.__l.__data_ = v76;
    v75->__r_.__value_.__l.__size_ = 0;
    v75->__r_.__value_.__r.__words[2] = 0;
    v75->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v117, v62);
    if ((v117.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      char v77 = &v117;
    }
    else {
      char v77 = (std::string *)v117.__r_.__value_.__r.__words[0];
    }
    if ((v117.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v78 = HIBYTE(v117.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v78 = v117.__r_.__value_.__l.__size_;
    }
    unsigned __int8 v79 = std::string::append(&v120, (const std::string::value_type *)v77, v78);
    std::string v121 = *v79;
    v79->__r_.__value_.__l.__size_ = 0;
    v79->__r_.__value_.__r.__words[2] = 0;
    v79->__r_.__value_.__r.__words[0] = 0;
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v122, (long long *)&v121, a12, 0);
    Espresso::emit_kernel_validation_warning(v105, (Espresso::base_kernel::validate_for_engine_warning_t *)&v122);
    goto LABEL_167;
  }
LABEL_145:
  std::string::basic_string[abi:ne180100]<0>(&v122, "stride");
  int v80 = *a13;
  char v81 = a13[1];
  if (v81) {
    atomic_fetch_add_explicit(&v81->i64[1], 1uLL, memory_order_relaxed);
  }
  BOOL v82 = Espresso::ANECompilerEngine::validate_size(a3, 2, (uint64_t)&v122, a12, v80, v81);
  if (v81) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v81);
  }
  if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v122.__r_.__value_.__l.__data_);
    if (v82) {
      goto LABEL_151;
    }
LABEL_182:
    uint64_t v17 = a13[1];
    v104[0] = *a13;
    v104[1] = v17;
    if (v17) {
      atomic_fetch_add_explicit(&v17->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(&v121, "Invalid size");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v122, (long long *)&v121, a12, 0);
    Espresso::emit_kernel_validation_warning(v104, (Espresso::base_kernel::validate_for_engine_warning_t *)&v122);
    if (v125) {
      nitro::nitro_function::nitro_function(v125);
    }
    v120.__r_.__value_.__r.__words[0] = (std::string::size_type)v124;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v120);
    v120.__r_.__value_.__r.__words[0] = (std::string::size_type)v123;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v120);
    if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v122.__r_.__value_.__l.__data_);
    }
    goto LABEL_214;
  }
  if (!v82) {
    goto LABEL_182;
  }
LABEL_151:
  if (a5 <= 1) {
    int v83 = 1;
  }
  else {
    int v83 = a5;
  }
  int v84 = (a4 - 1) / v83;
  if (v84 >= 0x10000)
  {
    uint64_t v17 = a13[1];
    v103[0] = *a13;
    v103[1] = v17;
    if (v17) {
      atomic_fetch_add_explicit(&v17->i64[1], 1uLL, memory_order_relaxed);
    }
    std::to_string(&v119, v84 + 1);
    int v85 = std::string::insert(&v119, 0, "Unsupported: input channel = ");
    long long v86 = *(_OWORD *)&v85->__r_.__value_.__l.__data_;
    v120.__r_.__value_.__r.__words[2] = v85->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v120.__r_.__value_.__l.__data_ = v86;
    v85->__r_.__value_.__l.__size_ = 0;
    v85->__r_.__value_.__r.__words[2] = 0;
    v85->__r_.__value_.__r.__words[0] = 0;
    int v87 = std::string::append(&v120, " > 65536");
    std::string v121 = *v87;
    v87->__r_.__value_.__l.__size_ = 0;
    v87->__r_.__value_.__r.__words[2] = 0;
    v87->__r_.__value_.__r.__words[0] = 0;
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v122, (long long *)&v121, a12, 0);
    Espresso::emit_kernel_validation_warning(v103, (Espresso::base_kernel::validate_for_engine_warning_t *)&v122);
LABEL_192:
    if (v125) {
      nitro::nitro_function::nitro_function(v125);
    }
    v118.__r_.__value_.__r.__words[0] = (std::string::size_type)v124;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v118);
    v118.__r_.__value_.__r.__words[0] = (std::string::size_type)v123;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v118);
    if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v122.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v121.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v120.__r_.__value_.__l.__data_);
    }
    if ((SHIBYTE(v119.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_217;
    }
    int v31 = (void *)v119.__r_.__value_.__r.__words[0];
    goto LABEL_216;
  }
  if (__val > 0x4000)
  {
    uint64_t v17 = a13[1];
    v102[0] = *a13;
    v102[1] = v17;
    if (v17) {
      atomic_fetch_add_explicit(&v17->i64[1], 1uLL, memory_order_relaxed);
    }
    std::to_string(&v119, __val);
    uint64_t v95 = std::string::insert(&v119, 0, "Unsupported: input size = ");
    long long v96 = *(_OWORD *)&v95->__r_.__value_.__l.__data_;
    v120.__r_.__value_.__r.__words[2] = v95->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v120.__r_.__value_.__l.__data_ = v96;
    v95->__r_.__value_.__l.__size_ = 0;
    v95->__r_.__value_.__r.__words[2] = 0;
    v95->__r_.__value_.__r.__words[0] = 0;
    signed int v97 = std::string::append(&v120, " > 16384");
    std::string v121 = *v97;
    v97->__r_.__value_.__l.__size_ = 0;
    v97->__r_.__value_.__r.__words[2] = 0;
    v97->__r_.__value_.__r.__words[0] = 0;
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v122, (long long *)&v121, a12, 0);
    Espresso::emit_kernel_validation_warning(v102, (Espresso::base_kernel::validate_for_engine_warning_t *)&v122);
    goto LABEL_192;
  }
  if (a5 >= 2 && *(void *)(a12 + 8) - *(void *)a12 == 128)
  {
    int v98 = a13[1];
    v101[0] = *a13;
    v101[1] = v98;
    if (v98) {
      atomic_fetch_add_explicit(&v98->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(&v121, "Dynamic weights not supported for group/depthwise convolutions");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v122, (long long *)&v121, a12, 0);
    Espresso::emit_kernel_validation_warning(v101, (Espresso::base_kernel::validate_for_engine_warning_t *)&v122);
    Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((Espresso::base_kernel::validate_for_engine_warning_t *)&v122);
    if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v121.__r_.__value_.__l.__data_);
    }
    if (v98) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v98);
    }
  }
  if (*(void *)(a12 + 8) - *(void *)a12 != 192) {
    return 1;
  }
  uint64_t v17 = a13[1];
  v100[0] = *a13;
  v100[1] = v17;
  if (v17) {
    atomic_fetch_add_explicit(&v17->i64[1], 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(&v121, "Dynamic biases not supported");
  Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v122, (long long *)&v121, a12, 0);
  Espresso::emit_kernel_validation_warning(v100, (Espresso::base_kernel::validate_for_engine_warning_t *)&v122);
  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((Espresso::base_kernel::validate_for_engine_warning_t *)&v122);
LABEL_214:
  if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0)
  {
    int v31 = (void *)v121.__r_.__value_.__r.__words[0];
LABEL_216:
    operator delete(v31);
  }
LABEL_217:
  if (v17) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v17);
  }
  return 0;
}

void sub_192B0DF84(_Unwind_Exception *a1)
{
  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((Espresso::base_kernel::validate_for_engine_warning_t *)(v2 - 232));
  if (*(char *)(v2 - 233) < 0) {
    operator delete(*(void **)(v2 - 256));
  }
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(a1);
}

void sub_192B0E328()
{
}

void sub_192B0E330()
{
}

void sub_192B0E338()
{
}

void sub_192B0E340()
{
}

void sub_192B0E348()
{
}

void sub_192B0E350()
{
}

int32x4_t *Espresso::padding_params_t::get_final_lrtbfb(int32x4_t *this, int16x4_t *a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, int a11, int a12, int a13, int a14)
{
  *this = vmovl_s16(a2[1]);
  __int32 v14 = a2[2].i16[0];
  this[1].i32[0] = a2[2].i16[1];
  this[1].i32[1] = v14;
  int v15 = a2->i16[0];
  if (v15 != 4)
  {
    if (v15 == 2)
    {
      this->i64[0] = 0;
      this->i64[1] = 0;
      this[1].i64[0] = 0;
      return this;
    }
    if (v15 != 1) {
      return this;
    }
  }
  unsigned int v16 = ((a7 - 1) * a10 - a4 + a13) & ~(((a7 - 1) * a10 - a4 + a13) >> 31);
  unsigned int v17 = ((a6 - 1) * a9 - a3 + a12) & ~(((a6 - 1) * a9 - a3 + a12) >> 31);
  unsigned int v18 = ((a8 - 1) * a11 - a5 + a14) & ~(((a8 - 1) * a11 - a5 + a14) >> 31);
  unsigned int v19 = v17 - (v17 >> 1);
  unsigned int v20 = v17 >> 1;
  unsigned int v21 = v16 >> 1;
  unsigned int v22 = v16 - (v16 >> 1);
  unsigned int v23 = v18 >> 1;
  unsigned int v24 = v18 - (v18 >> 1);
  if (a2->i16[0] == 1)
  {
    this->i32[0] = v20;
    this->i32[1] = v19;
    this->i32[2] = v21;
    this->i32[3] = v22;
    this[1].i32[0] = v24;
    this[1].i32[1] = v23;
  }
  else
  {
    this->i32[0] = v19;
    this->i32[1] = v20;
    this->i32[2] = v22;
    this->i32[3] = v21;
    this[1].i32[0] = v23;
    this[1].i32[1] = v24;
  }
  return this;
}

void Espresso::ANECompilerEngine::mix_conv3d_kernel::__set_weight_raw_blob(void *a1, uint64_t a2, const std::string::value_type **a3, void *a4, unint64_t a5, uint64_t *a6)
{
  Espresso::generic_conv3d_kernel::__set_weight_raw_blob((uint64_t)a1, a2, a3, a4, a5, a6);
  (*(void (**)(long long *__return_ptr, void *))(a1[53] + 128))(v17, a1 + 53);
  int v11 = (std::__shared_weak_count *)a1[2];
  v16[0] = a1[1];
  v16[1] = (uint64_t)v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = (*(uint64_t (**)(void *))(a1[53] + 136))(a1 + 53);
  Espresso::set_conv_quantized_weight_helper(v13, v14, v15, v12, (unsigned __int8 **)a3, (char *)a4, a5, a6, a1 + 51, v17, v16, v12, 1);
  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
  if (__p)
  {
    unsigned int v19 = __p;
    operator delete(__p);
  }
  Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob(a1 + 53, (uint64_t *)a3, a4, a5);
}

void sub_192B0E550(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (v19) {
    nitro::nitro_function::nitro_function(v19);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::ANECompilerEngine::mix_conv3d_kernel::~mix_conv3d_kernel(Espresso::ANECompilerEngine::mix_conv3d_kernel *this)
{
  *(void *)this = &unk_1EE341EF0;
  uint64_t v2 = (Espresso::ANECompilerEngine::mix_conv3d_kernel *)((char *)this + 424);
  *((void *)this + 53) = &unk_1EE3420D8;
  int v3 = (std::__shared_weak_count *)*((void *)this + 81);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(v2);
  Espresso::generic_conv3d_kernel::~generic_conv3d_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  Espresso::ANECompilerEngine::ane_kernel *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EE341EF0;
  uint64_t v2 = (Espresso::ANECompilerEngine::mix_conv3d_kernel *)((char *)this + 424);
  *((void *)this + 53) = &unk_1EE3420D8;
  int v3 = (std::__shared_weak_count *)*((void *)this + 81);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(v2);

  Espresso::generic_conv3d_kernel::~generic_conv3d_kernel(this);
}

void non-virtual thunk to'Espresso::ANECompilerEngine::mix_broadcast_kernel::~mix_broadcast_kernel(Espresso::ANECompilerEngine::mix_broadcast_kernel *this)
{
  uint64_t v1 = (Espresso::ANECompilerEngine::mix_broadcast_kernel *)((char *)this - 320);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);

  JUMPOUT(0x192FF16B0);
}

{
  Espresso::base_kernel *v1;
  uint64_t vars8;

  uint64_t v1 = (Espresso::ANECompilerEngine::mix_broadcast_kernel *)((char *)this - 320);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);

  Espresso::base_kernel::~base_kernel(v1);
}

void non-virtual thunk to'Espresso::ANECompilerEngine::mix_broadcast_kernel::compile(Espresso::ANECompilerEngine::mix_broadcast_kernel *this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3)
{
}

void Espresso::ANECompilerEngine::mix_broadcast_kernel::compile(Espresso::ANECompilerEngine::mix_broadcast_kernel *this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3)
{
  uint64_t v174 = *MEMORY[0x1E4F143B8];
  int v3 = (std::__shared_weak_count *)*((void *)a2 + 2);
  if (!v3 || (v122 = std::__shared_weak_count::lock(v3)) == 0 || (uint64_t v5 = *((void *)a2 + 1)) == 0) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Inconsistent state: null network");
  }
  if (!*(void *)(v5 + 576)) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Inconsistent state: blob_storage");
  }
  v163.__r_.__value_.__r.__words[0] = *((void *)a3 + 6);
  int v6 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v5 + 136, (unsigned __int8 *)v163.__r_.__value_.__l.__data_, (long long **)&v163);
  int v8 = (const void *)*((void *)v6 + 5);
  int v7 = (std::__shared_weak_count *)*((void *)v6 + 6);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string v121 = v7;
  v163.__r_.__value_.__r.__words[0] = (std::string::size_type)a3;
  int v9 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v5 + 136, (unsigned __int8 *)a3, (long long **)&v163);
  int v10 = (std::__shared_weak_count *)*((void *)v9 + 6);
  uint64_t v116 = *((void *)v9 + 5);
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v123 = v10;
  Espresso::ANECompilerEngine::ane_arch_allow_network_override(v5 + 472);
  std::string v120 = (Espresso::ANECompilerEngine *)objc_claimAutoreleasedReturnValue();
  if (Espresso::ANECompilerEngine::is_mix(v120, v11))
  {
    Espresso::ANECompilerEngine::broadcast_kernel::compile(this, a2, a3);
    goto LABEL_156;
  }
  obuint64_t j = (id)objc_opt_new();
  std::string v118 = a2;
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t(v133, (id *)a3);
  uint64_t v12 = v140;
  unsigned int v140 = @"Broadcast";

  __int16 v126 = objc_opt_new();
  if (v8)
  {
    double v14 = v13;
    if (v121 && v13)
    {
      atomic_fetch_add_explicit(&v121->__shared_owners_, 1uLL, memory_order_relaxed);
      std::string v115 = v121;
    }
    else
    {
      std::string v115 = 0;
    }
  }
  else
  {
    double v14 = 0;
    std::string v115 = 0;
  }
  int v15 = *(unsigned __int8 *)(v5 + 1281);
  *(_OWORD *)__int16 v128 = *(_OWORD *)((char *)this + 280);
  unsigned int v16 = *((_DWORD *)this + 74);
  unsigned int v17 = (unsigned int *)operator new(0x14uLL);
  unsigned int v18 = 0;
  *(_OWORD *)unsigned int v17 = *(_OWORD *)v128;
  long long v129 = v17;
  v17[4] = v16;
  do
  {
    uint64_t v19 = v129[(void)v18];
    if ((int)v19 < 2) {
      goto LABEL_41;
    }
    if (!*((_DWORD *)this + 77))
    {
      int v22 = v14[46];
      switch((int)v18)
      {
        case 0:
          goto LABEL_27;
        case 1:
          goto LABEL_28;
        case 2:
          if (v15 && v22 == 5) {
            goto LABEL_34;
          }
          goto LABEL_37;
        case 3:
          if (v15 && v22 == 5) {
            goto LABEL_37;
          }
          goto LABEL_38;
        case 4:
          if (!v15 || v22 != 5) {
            goto LABEL_34;
          }
          goto LABEL_38;
        default:
          Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Invalid axis or rank specified.");
      }
    }
    ANECAxisForNDAxis = Espresso::ANECompilerEngine::GetANECAxisForNDAxis(v18, (int)v14[46], v15 != 0);
    unsigned int v21 = ANECAxisForNDAxis;
    if (ANECAxisForNDAxis == @"Width")
    {
LABEL_27:
      int v23 = v14[44];
      unsigned int v21 = @"Width";
      goto LABEL_39;
    }
    if (ANECAxisForNDAxis == @"Height")
    {
LABEL_28:
      int v23 = v14[43];
      unsigned int v21 = @"Height";
      goto LABEL_39;
    }
    if (ANECAxisForNDAxis == @"Channel")
    {
LABEL_37:
      int v23 = v14[41];
      unsigned int v21 = @"Channel";
      goto LABEL_39;
    }
    if (ANECAxisForNDAxis == @"Batch")
    {
LABEL_38:
      int v23 = v14[40];
      unsigned int v21 = @"Batch";
LABEL_39:
      if (v19 == v23) {
        goto LABEL_41;
      }
      goto LABEL_40;
    }
    if (ANECAxisForNDAxis == @"Depth")
    {
LABEL_34:
      int v23 = v14[42];
      unsigned int v21 = @"Depth";
      goto LABEL_39;
    }
LABEL_40:
    unsigned int v24 = objc_opt_new();
    [v24 setObject:v21 forKeyedSubscript:@"Dimension"];
    long long v25 = [NSNumber numberWithInt:v19];
    [v24 setObject:v25 forKeyedSubscript:@"Size"];

    [v126 addObject:v24];
LABEL_41:
    unsigned int v18 = (Espresso::ANECompilerEngine *)((char *)v18 + 1);
  }
  while (v18 != (Espresso::ANECompilerEngine *)5);
  if (![v126 count]) {
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("dst_blob and src_blob shapes are the same, this broadcast layer should have been removed");
  }
  [obj setObject:v126 forKeyedSubscript:@"BroadcastInfo"];
  objc_storeStrong(v141, obj);
  Espresso::ANECompilerEngine::compiler::layer_graph_info_t::layer_graph_info_t(&v163, (const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *)v133);
  std::string::size_type v169 = v140;
  id v170 = v141[0];
  uint64_t v171 = (uint64_t)v141[1];
  long long v131 = 0;
  unint64_t v132 = 0;
  uint64_t v130 = 0;
  *(void *)long long buf = &v130;
  buf[8] = 0;
  uint64_t v130 = (std::string *)operator new(0x90uLL);
  long long v131 = v130;
  unint64_t v132 = (unint64_t)&v130[6];
  long long v131 = (std::string *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>,Espresso::ANECompilerEngine::compiler::unit_t const*,Espresso::ANECompilerEngine::compiler::unit_t const*,Espresso::ANECompilerEngine::compiler::unit_t*>((uint64_t)&v132, (uint64_t)&v163, (uint64_t)&__str, (uint64_t)v130);

  if (v167 < 0) {
    operator delete(__p);
  }
  *(void *)long long buf = v165;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(void *)long long buf = v164;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v163.__r_.__value_.__l.__data_);
  }
  atomic_fetch_add_explicit(&v122->__shared_owners_, 1uLL, memory_order_relaxed);
  if (v123) {
    atomic_fetch_add_explicit(&v123->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::ANECompilerEngine::compiler::layer_graph_info_t::layer_graph_info_t((Espresso::ANECompilerEngine::compiler::layer_graph_info_t *)&v163);
  id v170 = 0;
  std::string::size_type v169 = 0;
  uint64_t v171 = 0x100000000;
  uint64_t v26 = *((void *)this + 48);
  long long v27 = (std::__shared_weak_count *)*((void *)this + 49);
  if (v27) {
    atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v26 || *(unsigned char *)((*(uint64_t (**)(void))(*((void *)this + 40) + 104))() + 40)) {
    goto LABEL_141;
  }
  float v28 = *(float *)(v116 + 112);
  v145[0] = v26;
  v145[1] = v27;
  if (v27) {
    atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::size_type v29 = (std::__shared_weak_count *)*((void *)this + 51);
  v144[0] = *((void *)this + 50);
  v144[1] = (uint64_t)v29;
  if (v29) {
    atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::ane_style_post_scale_bias((uint64_t)v145, v144, (uint64_t)&v146, v28);
  if (v29) {
    nitro::nitro_function::nitro_function(v29);
  }
  if (v27) {
    nitro::nitro_function::nitro_function(v27);
  }
  uint64_t v30 = *(unsigned int *)(v26 + 8);
  std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v142, 2 * v30, 1, 1, 1);
  uint64_t v31 = (int)v30;
  uint64_t v32 = *((void *)this + 50);
  int v33 = v30;
  if (v32) {
    int v33 = *(_DWORD *)(v32 + 8);
  }
  if (!*((unsigned char *)v118 + 384))
  {
    Espresso::blob<unsigned char,1>::make(&__str, 4 * v30);
    int v88 = *(int **)(__str.__r_.__value_.__r.__words[0] + 16);
    if ((int)v30 >= 1)
    {
      for (uint64_t i = 0; i != v30; ++i)
      {
        float v90 = *(float *)(*(void *)(v26 + 16) + i * 4);
        *(float *)&int v91 = ldexp(1.0, -v150) * v90;
        v88[i] = v91;
      }
    }
    if (v30)
    {
      int v92 = *(_WORD **)(v142 + 16);
      do
      {
        int v93 = *v88++;
        _S0 = v93;
        __asm { FCVT            H0, S0 }
        *v92++ = _S0;
        --v31;
      }
      while (v31);
    }
    if (*((void *)this + 50))
    {
      Espresso::blob<unsigned char,1>::make(buf, 4 * v33);
      uint64_t v96 = *(void *)buf;
      Espresso::blob<unsigned char,1>::make(buf, 2 * v33);
      long long v125 = *(Espresso::ANECompilerEngine::compiler::layer_graph_info_t **)buf;
      signed int v97 = *(int **)(v96 + 16);
      if (v33 >= 1)
      {
        for (uint64_t j = 0; j != v33; ++j)
        {
          if ((int)v30 - 1 >= (int)j) {
            int v99 = j;
          }
          else {
            int v99 = v30 - 1;
          }
          *(float *)&int v100 = *(float *)(*(void *)(v148 + 16) + 4 * j) * *(float *)(*(void *)(v146 + 16) + 4 * v99);
          v97[j] = v100;
          unsigned int v101 = v151;
          unsigned int v102 = v150;
          *(float *)&int v103 = ldexp(1.0, v151 - v150) * *(float *)&v100;
          v97[j] = v103;
          float v106 = ldexp(1.0, v102 - v101) * *(float *)&v103;
          if (v106 < -127.0 || v106 > 255.0)
          {
            std::string v108 = Espresso::espresso_os_log_subsystem(v104, v105);
            if (os_log_type_enabled(v108, OS_LOG_TYPE_ERROR))
            {
              double v109 = *(float *)&v97[j];
              *(_DWORD *)long long buf = 134218752;
              *(double *)&uint8_t buf[4] = v106;
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = v151;
              __int16 v153 = 1024;
              int v154 = v150;
              __int16 v155 = 2048;
              double v156 = v109;
              _os_log_error_impl(&dword_1920CB000, v108, OS_LOG_TYPE_ERROR, "[ANEC::add_ane_scale_bias_unit] Shifted bias overflowing shifted_b=%f acc_bias_shift=%d post_right_shift=%d anebias=%f", buf, 0x22u);
            }
          }
        }
      }
      if (v33)
      {
        uint64_t v110 = v33;
        std::string v111 = (_WORD *)*((void *)v125 + 2);
        do
        {
          int v112 = *v97++;
          _S0 = v112;
          __asm { FCVT            H0, S0 }
          *v111++ = _S0;
          --v110;
        }
        while (v110);
      }
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
    Espresso::not_implemented_error::not_implemented_error(exception);
  }
  unsigned int v34 = v151;
  uint64_t v35 = v142;
  if (v30)
  {
    long long v36 = *(int **)(v146 + 16);
    int v37 = *(_WORD **)(v142 + 16);
    do
    {
      int v38 = *v36++;
      _S0 = v38;
      __asm { FCVT            H0, S0 }
      *v37++ = _S0;
      --v31;
    }
    while (v31);
  }
  unsigned int v114 = v34;
  if (v32)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(buf, 2 * v33, 1, 1, 1);
    uint64_t v44 = *(void *)buf;
    std::string v117 = *(std::__shared_weak_count **)&buf[8];
    if (v33)
    {
      uint64_t v45 = v33;
      long long v46 = *(_WORD **)(*(void *)buf + 16);
      unsigned int v47 = *(int **)(v148 + 16);
      do
      {
        int v48 = *v47++;
        _S0 = v48;
        __asm { FCVT            H0, S0 }
        *v46++ = _S0;
        --v45;
      }
      while (v45);
    }
  }
  else
  {
    std::string v117 = 0;
    uint64_t v44 = 0;
  }
  int v50 = *((unsigned __int8 *)v118 + 552);
  int v51 = (Espresso::ANECompilerEngine::compiler *)((char *)v118 + 128);
  long long v52 = v143;
  if (v143) {
    atomic_fetch_add_explicit(&v143->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v53 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v51, *(const unsigned __int8 **)(v35 + 16), *(int *)(v35 + 8));
  if (v52) {
    nitro::nitro_function::nitro_function(v52);
  }
  long long v54 = objc_opt_new();
  if (*((unsigned char *)v118 + 121))
  {
    id v55 = (id)v130[5].__r_.__value_.__l.__size_;

    long long v54 = v55;
  }
  std::string::size_type v56 = objc_opt_new();
  uint64_t v57 = [NSNumber numberWithInt:v30];
  [v56 setObject:v57 forKeyedSubscript:@"ScaleCount"];

  uint64_t v58 = [NSNumber numberWithInt:v53];
  [v56 setObject:v58 forKeyedSubscript:@"ScaleOffset"];

  int v59 = NSNumber;
  if (v50) {
    uint64_t weights_file_index = 0;
  }
  else {
  int v61 = [v59 numberWithUnsignedLong:weights_file_index];
  }
  [v56 setObject:v61 forKeyedSubscript:@"ScaleIndex"];

  [v56 setObject:@"Float16" forKeyedSubscript:@"ScaleType"];
  int v62 = [NSNumber numberWithInt:v150];
  [v54 setObject:v62 forKeyedSubscript:@"ScaleShift"];

  if (*((void *)this + 50))
  {
    if (v117) {
      atomic_fetch_add_explicit(&v117->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v63 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v51, *(const unsigned __int8 **)(v44 + 16), *(int *)(v44 + 8));
    if (v117) {
      nitro::nitro_function::nitro_function(v117);
    }
    int v64 = [NSNumber numberWithInt:*(unsigned int *)(*((void *)this + 50) + 8)];
    [v56 setObject:v64 forKeyedSubscript:@"BiasCount"];

    int v65 = [NSNumber numberWithInt:v63];
    [v56 setObject:v65 forKeyedSubscript:@"BiasOffset"];

    uint64_t v66 = NSNumber;
    if (v50) {
      uint64_t v67 = 0;
    }
    else {
    unint64_t v68 = [v66 numberWithUnsignedLong:v67];
    }
    [v56 setObject:v68 forKeyedSubscript:@"BiasIndex"];

    [v56 setObject:@"Float16" forKeyedSubscript:@"BiasType"];
    BOOL v69 = [NSNumber numberWithInt:v114];
    [v54 setObject:v69 forKeyedSubscript:@"BiasShift"];
  }
  [v54 setObject:v56 forKeyedSubscript:@"BiasScaleGroupData"];
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)buf, (id *)a3);
  int v70 = v131;
  if (v131 == v130) {
    goto LABEL_115;
  }
  int v71 = v131 - 6;
  uint64_t v72 = HIBYTE(v131[-6].__r_.__value_.__r.__words[2]);
  char v73 = v72;
  std::string::size_type size = v131[-6].__r_.__value_.__l.__size_;
  if ((v72 & 0x80u) == 0) {
    std::string::size_type v75 = HIBYTE(v131[-6].__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v75 = v131[-6].__r_.__value_.__l.__size_;
  }
  uint64_t v76 = HIBYTE(v154);
  if (v154 < 0) {
    uint64_t v76 = *(void *)&buf[8];
  }
  if (v75 != v76) {
    goto LABEL_109;
  }
  if (v154 >= 0) {
    char v77 = buf;
  }
  else {
    char v77 = *(unsigned __int8 **)buf;
  }
  if ((char)v72 < 0)
  {
    std::string::pointer data = (const std::string::value_type *)v71->__r_.__value_.__r.__words[0];
    if (memcmp(v71->__r_.__value_.__l.__data_, v77, v131[-6].__r_.__value_.__l.__size_))
    {
LABEL_112:
      std::string::__init_copy_ctor_external(&__str, data, size);
      goto LABEL_113;
    }
LABEL_108:
    std::string::append(v70 - 6, "__@pre_scale_bias");
    char v73 = HIBYTE(v70[-6].__r_.__value_.__r.__words[2]);
    goto LABEL_109;
  }
  if (!(_BYTE)v72) {
    goto LABEL_108;
  }
  std::string::size_type v78 = v131 - 6;
  while (v78->__r_.__value_.__s.__data_[0] == *v77)
  {
    std::string::size_type v78 = (std::string *)((char *)v78 + 1);
    ++v77;
    if (!--v72) {
      goto LABEL_108;
    }
  }
LABEL_109:
  if (v73 < 0)
  {
    std::string::pointer data = v70[-6].__r_.__value_.__l.__data_;
    std::string::size_type size = v70[-6].__r_.__value_.__l.__size_;
    goto LABEL_112;
  }
  long long v80 = *(_OWORD *)&v71->__r_.__value_.__l.__data_;
  __str.__r_.__value_.__r.__words[2] = v70[-6].__r_.__value_.__r.__words[2];
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v80;
LABEL_113:
  std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v157, &__str, &v173, 1uLL);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
LABEL_115:
  char v81 = v161;
  long long v161 = @"GOC";

  objc_storeStrong(&v162, v54);
  if (!*((unsigned char *)v118 + 121))
  {
    BOOL v82 = v131;
    if ((unint64_t)v131 >= v132)
    {
      unint64_t v84 = 0x8E38E38E38E38E39 * (((char *)v131 - (char *)v130) >> 4);
      if (v84 + 1 > 0x1C71C71C71C71C7) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v85 = 0x1C71C71C71C71C72 * ((uint64_t)(v132 - (void)v130) >> 4);
      if (v85 <= v84 + 1) {
        unint64_t v85 = v84 + 1;
      }
      if (0x8E38E38E38E38E39 * ((uint64_t)(v132 - (void)v130) >> 4) >= 0xE38E38E38E38E3) {
        unint64_t v86 = 0x1C71C71C71C71C7;
      }
      else {
        unint64_t v86 = v85;
      }
      *((void *)&v173 + 1) = &v132;
      if (v86) {
        unint64_t v86 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v86);
      }
      else {
        uint64_t v87 = 0;
      }
      __str.__r_.__value_.__r.__words[0] = v86;
      __str.__r_.__value_.__l.__size_ = v86 + 144 * v84;
      __str.__r_.__value_.__r.__words[2] = __str.__r_.__value_.__l.__size_;
      *(void *)&long long v173 = v86 + 144 * v87;
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)__str.__r_.__value_.__l.__size_, (uint64_t)buf);
      __str.__r_.__value_.__r.__words[2] += 144;
      std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer((uint64_t *)&v130, &__str);
      int v83 = v131;
      std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&__str);
    }
    else
    {
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v131, (uint64_t)buf);
      int v83 = v82 + 6;
    }
    long long v131 = v83;
  }

  if (v159 < 0) {
    operator delete(v158);
  }
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v157;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v155;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  if (SHIBYTE(v154) < 0) {
    operator delete(*(void **)buf);
  }

  if (v117) {
    nitro::nitro_function::nitro_function(v117);
  }
  if (v143) {
    nitro::nitro_function::nitro_function(v143);
  }
  if (v149) {
    nitro::nitro_function::nitro_function(v149);
  }
  if (v147) {
    nitro::nitro_function::nitro_function(v147);
  }
LABEL_141:
  if (v27) {
    nitro::nitro_function::nitro_function(v27);
  }

  if (v167 < 0) {
    operator delete(__p);
  }
  *(void *)long long buf = v165;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(void *)long long buf = v164;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v163.__r_.__value_.__l.__data_);
  }
  if (v123) {
    nitro::nitro_function::nitro_function(v123);
  }
  nitro::nitro_function::nitro_function(v122);
  (*(void (**)(char *, Espresso::ANECompilerEngine::compiler *, std::string **))(*((void *)this + 40) + 32))((char *)this + 320, v118, &v130);
  v163.__r_.__value_.__r.__words[0] = (std::string::size_type)&v130;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&v163);
  operator delete(v129);
  if (v115) {
    nitro::nitro_function::nitro_function(v115);
  }

  if (v138 < 0) {
    operator delete(v137);
  }
  v163.__r_.__value_.__r.__words[0] = (std::string::size_type)&v136;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v163);
  v163.__r_.__value_.__r.__words[0] = (std::string::size_type)&v135;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v163);
  if (v134 < 0) {
    operator delete(v133[0]);
  }

LABEL_156:
  if (v123) {
    nitro::nitro_function::nitro_function(v123);
  }
  if (v121) {
    nitro::nitro_function::nitro_function(v121);
  }
  nitro::nitro_function::nitro_function(v122);
}

void sub_192B0F750(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, void *a14, void *a15, std::__shared_weak_count *a16, std::__shared_weak_count *a17, std::__shared_weak_count *a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,char a25,uint64_t a26,uint64_t a27,id a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  nitro::nitro_function::nitro_function(a17);
  a57 = (uint64_t)&a25;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&a57);
  operator delete(__p);
  if (a11) {
    nitro::nitro_function::nitro_function(a11);
  }

  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t(&a28);
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  _Unwind_Resume(a1);
}

uint64_t Espresso::ANECompilerEngine::mix_broadcast_kernel::is_valid_for_engine(uint64_t a1, int64x2_t **a2, _OWORD **a3)
{
  int v6 = a3[6];
  int v7 = (std::__shared_weak_count *)*((void *)v6 + 10);
  if (v7)
  {
    int v8 = std::__shared_weak_count::lock(v7);
    if (v8) {
      int v9 = (const Espresso::net *)*((void *)v6 + 9);
    }
    else {
      int v9 = 0;
    }
  }
  else
  {
    int v9 = 0;
    int v8 = 0;
  }
  int v10 = Espresso::ANECompilerEngine::ane_arch_allow_network_override((uint64_t)v9 + 472);
  if (Espresso::ANECompilerEngine::is_mix((Espresso::ANECompilerEngine *)v10, v11))
  {
    long long v44 = *(_OWORD *)a2;
    uint64_t v12 = (std::__shared_weak_count *)*((void *)&v44 + 1);
    *a2 = 0;
    a2[1] = 0;
    __n128 v13 = v12;
    uint64_t is_valid_for_engine = Espresso::ANECompilerEngine::broadcast_kernel::is_valid_for_engine((int *)a1, (uint64_t)&v44, a3);
    if (v13) {
      nitro::nitro_function::nitro_function(v13);
    }
  }
  else
  {
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v15 = *a3;
    uint64_t v16 = *((void *)*a3 + 4);
    long long v17 = (*a3)[1];
    v38[0] = **a3;
    v38[1] = v17;
    uint64_t v39 = v16;
    long long v40 = 0;
    int v41 = 0;
    uint64_t v42 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v40, *((const void **)v15 + 5), *((void *)v15 + 6), (uint64_t)(*((void *)v15 + 6) - *((void *)v15 + 5)) >> 2);
    Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v43, v9, (const Espresso::layer_shape *)v38, 1);
    if (v40)
    {
      int v41 = v40;
      operator delete(v40);
    }
    if (v8)
    {
      nitro::nitro_function::nitro_function(v8);
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    unsigned int v18 = a3[3];
    uint64_t v19 = *((void *)v18 + 4);
    long long v20 = v18[1];
    v32[0] = *v18;
    v32[1] = v20;
    uint64_t v33 = v19;
    std::string __p = 0;
    uint64_t v35 = 0;
    uint64_t v36 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *((const void **)v18 + 5), *((void *)v18 + 6), (uint64_t)(*((void *)v18 + 6) - *((void *)v18 + 5)) >> 2);
    Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v37, v9, (const Espresso::layer_shape *)v32, 1);
    if (__p)
    {
      uint64_t v35 = __p;
      operator delete(__p);
    }
    if (v8) {
      nitro::nitro_function::nitro_function(v8);
    }
    Espresso::ANECompilerEngine::mix_broadcast_kernel::supported_by_hw((uint64_t)v29, v10, v43, v37, (long long *)(a1 + 280));
    if (!v29[0])
    {
      unsigned int v21 = *a2;
      int v22 = a2[1];
      v28[0] = v21;
      v28[1] = v22;
      if (v22) {
        atomic_fetch_add_explicit(&v22->i64[1], 1uLL, memory_order_relaxed);
      }
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v24, &v30, (uint64_t)a3, 0);
      Espresso::emit_kernel_validation_warning(v28, (Espresso::base_kernel::validate_for_engine_warning_t *)&v24);
      if (v27) {
        nitro::nitro_function::nitro_function(v27);
      }
      uint64_t v45 = (void **)&v26;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v45);
      uint64_t v45 = (void **)&v25;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v45);
      if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v24.__r_.__value_.__l.__data_);
      }
      if (v22) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v22);
      }
    }
    uint64_t is_valid_for_engine = v29[0] != 0;
    if (v31 < 0) {
      operator delete((void *)v30);
    }
  }

  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  return is_valid_for_engine;
}

void sub_192B0FD00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38)
{
  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((Espresso::base_kernel::validate_for_engine_warning_t *)&a9);
  if (v40) {
    nitro::nitro_function::nitro_function(v40);
  }
  if (a31 < 0) {
    operator delete(__p);
  }

  if (v38) {
    nitro::nitro_function::nitro_function(v38);
  }
  _Unwind_Resume(a1);
}

void sub_192B0FDA8()
{
  if (!v0) {
    JUMPOUT(0x192B0FDA0);
  }
  JUMPOUT(0x192B0FD98);
}

void Espresso::ANECompilerEngine::mix_broadcast_kernel::~mix_broadcast_kernel(Espresso::ANECompilerEngine::mix_broadcast_kernel *this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANECompilerEngine::mix_broadcast_kernel *)((char *)this + 320));
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t vars8;

  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANECompilerEngine::mix_broadcast_kernel *)((char *)this + 320));

  Espresso::base_kernel::~base_kernel(this);
}

void non-virtual thunk to'Espresso::ANECompilerEngine::mix_reduce_kernel::~mix_reduce_kernel(Espresso::ANECompilerEngine::mix_reduce_kernel *this)
{
  uint64_t v1 = (Espresso::ANECompilerEngine::mix_reduce_kernel *)((char *)this - 328);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);

  JUMPOUT(0x192FF16B0);
}

{
  Espresso::base_kernel *v1;
  uint64_t vars8;

  uint64_t v1 = (Espresso::ANECompilerEngine::mix_reduce_kernel *)((char *)this - 328);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);

  Espresso::base_kernel::~base_kernel(v1);
}

void non-virtual thunk to'Espresso::ANECompilerEngine::mix_reduce_kernel::compile(Espresso::ANECompilerEngine::mix_reduce_kernel *this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3)
{
}

void Espresso::ANECompilerEngine::mix_reduce_kernel::compile(Espresso::ANECompilerEngine::mix_reduce_kernel *this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3)
{
  _OWORD v158[2] = *(id *)MEMORY[0x1E4F143B8];
  int v3 = (std::__shared_weak_count *)*((void *)a2 + 2);
  if (!v3 || (v125 = std::__shared_weak_count::lock(v3)) == 0 || (uint64_t v6 = *((void *)a2 + 1)) == 0) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Inconsistent state: null network");
  }
  if (!*(void *)(v6 + 576)) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Inconsistent state: blob_storage");
  }
  long long v123 = a2;
  uint64_t v7 = v6 + 136;
  v133.__r_.__value_.__r.__words[0] = *((void *)a3 + 6);
  int v8 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v6 + 136, (unsigned __int8 *)v133.__r_.__value_.__l.__data_, (long long **)&v133);
  int v10 = (const void *)*((void *)v8 + 5);
  int v9 = (std::__shared_weak_count *)*((void *)v8 + 6);
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v124 = v9;
  v133.__r_.__value_.__r.__words[0] = (std::string::size_type)a3;
  int v11 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v6 + 136, (unsigned __int8 *)a3, (long long **)&v133);
  uint64_t v12 = (std::__shared_weak_count *)*((void *)v11 + 6);
  uint64_t v121 = *((void *)v11 + 5);
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::ANECompilerEngine::ane_arch_allow_network_override(v6 + 472);
  std::string v122 = (Espresso::ANECompilerEngine *)objc_claimAutoreleasedReturnValue();
  if (Espresso::ANECompilerEngine::is_mix(v122, v13))
  {
    Espresso::ANECompilerEngine::reduce_kernel::compile(this, v123, (void **)a3);
    goto LABEL_183;
  }
  int v14 = *((_DWORD *)this + 70);
  if (v10)
  {
    if (v124 && v15)
    {
      atomic_fetch_add_explicit(&v124->__shared_owners_, 1uLL, memory_order_relaxed);
      long long v16 = v15[11];
      long long v148 = v15[10];
      long long v149 = v16;
      nitro::nitro_function::nitro_function(v124);
      goto LABEL_17;
    }
  }
  else
  {
    int v15 = 0;
  }
  long long v17 = v15[11];
  long long v148 = v15[10];
  long long v149 = v17;
LABEL_17:
  unsigned int v18 = (long long *)((char *)this + 280);
  if ((v14 - 11) <= 1)
  {
    uint64_t v145 = 0;
    uint64_t v146 = 0;
    unint64_t v147 = 0;
    long long v19 = *(_OWORD *)((char *)this + 296);
    long long v143 = *v18;
    v144[0] = v19;
    *(_OWORD *)((char *)v144 + 12) = *(_OWORD *)((char *)this + 308);
    long long v20 = get_reduce_axes((uint64_t)&v143, DWORD2(v149), *(unsigned __int8 *)(v6 + 1281));
    char v142 = 0;
    unsigned int v21 = [v20 objectAtIndexedSubscript:0];
    int v22 = (*(uint64_t (**)(const void *))(*(void *)v10 + 32))(v10);
    std::string v120 = spatial_argmax_valid_only_after_transpose(v122, &v148, v21, v22, &v142);

    if (v142)
    {
      memset(&v141, 0, sizeof(v141));
      obuint64_t j = (id)objc_opt_new();
      Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&v133.__r_.__value_.__l.__data_, (id *)a3);
      int v23 = v20;
      std::string::append(&v133, "__@reduce_transpose_to_c_");
      std::string v24 = v139;
      id v139 = @"Transpose";

      uint64_t v25 = objc_opt_new();
      uint64_t v26 = objc_opt_new();
      [v26 setObject:@"Channel" forKeyedSubscript:@"TransposeSourceDimension"];
      [v26 setObject:v120 forKeyedSubscript:@"TransposeDestinationDimension"];
      [v25 addObject:v26];
      long long v27 = objc_opt_new();
      [v27 setObject:v120 forKeyedSubscript:@"TransposeSourceDimension"];
      [v27 setObject:@"Channel" forKeyedSubscript:@"TransposeDestinationDimension"];
      [v25 addObject:v27];
      [obj setObject:v25 forKeyedSubscript:@"TransposeDimensions"];
      objc_storeStrong(v140, obj);
      float v28 = v146;
      if ((unint64_t)v146 >= v147)
      {
        unint64_t v45 = 0x8E38E38E38E38E39 * (((uint64_t)v146 - v145) >> 4);
        if (v45 + 1 > 0x1C71C71C71C71C7) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v46 = 0x1C71C71C71C71C72 * ((uint64_t)(v147 - v145) >> 4);
        if (v46 <= v45 + 1) {
          unint64_t v46 = v45 + 1;
        }
        if (0x8E38E38E38E38E39 * ((uint64_t)(v147 - v145) >> 4) >= 0xE38E38E38E38E3) {
          unint64_t v47 = 0x1C71C71C71C71C7;
        }
        else {
          unint64_t v47 = v46;
        }
        *((void *)&v152 + 1) = &v147;
        if (v47) {
          unint64_t v47 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v47);
        }
        else {
          uint64_t v48 = 0;
        }
        __str.__r_.__value_.__r.__words[0] = v47;
        __str.__r_.__value_.__l.__size_ = v47 + 144 * v45;
        __str.__r_.__value_.__r.__words[2] = __str.__r_.__value_.__l.__size_;
        *(void *)&long long v152 = v47 + 144 * v48;
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)__str.__r_.__value_.__l.__size_, (uint64_t)&v133);
        __str.__r_.__value_.__r.__words[2] += 144;
        std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v145, &__str);
        std::string::size_type v29 = v146;
        std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&__str);
      }
      else
      {
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v146, (uint64_t)&v133);
        std::string::size_type v29 = v28 + 6;
      }
      uint64_t v146 = v29;
      if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&__str, v133.__r_.__value_.__l.__data_, v133.__r_.__value_.__l.__size_);
      }
      else {
        std::string __str = v133;
      }
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v141, &__str, &v152, 1uLL);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }

      if (v137 < 0) {
        operator delete(__p);
      }
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v135;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v134;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
      if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v133.__r_.__value_.__l.__data_);
      }

      int v70 = objc_opt_new();
      Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&v133.__r_.__value_.__l.__data_, (id *)a3);
      if (v14 == 11) {
        int v71 = "__@argmax";
      }
      else {
        int v71 = "__@argmin";
      }
      std::string::append(&v133, v71);
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)v135, v141.__begin_, v141.__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v141.__end_ - (char *)v141.__begin_) >> 3));
      uint64_t v72 = v139;
      id v139 = @"ArgMinMax";

      char v73 = [v23 objectAtIndexedSubscript:0];
      int v74 = [v120 isEqualToString:v73];

      if (v74)
      {
        if (v14 == 11) {
          std::string::size_type v75 = @"ChannelArgMax";
        }
        else {
          std::string::size_type v75 = @"ChannelArgMin";
        }
        uint64_t v76 = @"Mode";
      }
      else
      {
        char v77 = [v23 objectAtIndex:0];
        BOOL v78 = v77 == @"Width";

        if (v78)
        {
          if (v14 == 11) {
            unint64_t v86 = @"SpatialArgMax";
          }
          else {
            unint64_t v86 = @"SpatialArgMin";
          }
          [v70 setObject:v86 forKeyedSubscript:@"Mode"];
          uint64_t v87 = NSNumber;
          unsigned int v150 = (unsigned __int8 *)*((void *)a3 + 6);
          int v88 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7, v150, (long long **)&v150);
          Espresso::abstract_blob_container::shape((char *)&__str, *((void *)v88 + 5));
          long long v89 = [v87 numberWithInt:LODWORD(__str.__r_.__value_.__l.__data_)];
          [v70 setObject:v89 forKeyedSubscript:@"KernelWidth"];

          if (v153)
          {
            v154[0] = v153;
            operator delete(v153);
          }
          [v70 setObject:&unk_1EE3AEF80 forKeyedSubscript:@"KernelHeight"];
          unint64_t v85 = &unk_1EE3AF1A8;
        }
        else
        {
          unsigned __int8 v79 = [v23 objectAtIndex:0];
          BOOL v80 = v79 == @"Height";

          if (!v80)
          {
LABEL_107:
            objc_storeStrong(v140, v70);
            float v90 = v146;
            if ((unint64_t)v146 >= v147)
            {
              unint64_t v92 = 0x8E38E38E38E38E39 * (((uint64_t)v146 - v145) >> 4);
              if (v92 + 1 > 0x1C71C71C71C71C7) {
                std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v93 = 0x1C71C71C71C71C72 * ((uint64_t)(v147 - v145) >> 4);
              if (v93 <= v92 + 1) {
                unint64_t v93 = v92 + 1;
              }
              if (0x8E38E38E38E38E39 * ((uint64_t)(v147 - v145) >> 4) >= 0xE38E38E38E38E3) {
                unint64_t v94 = 0x1C71C71C71C71C7;
              }
              else {
                unint64_t v94 = v93;
              }
              *((void *)&v152 + 1) = &v147;
              if (v94) {
                unint64_t v94 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v94);
              }
              else {
                uint64_t v95 = 0;
              }
              __str.__r_.__value_.__r.__words[0] = v94;
              __str.__r_.__value_.__l.__size_ = v94 + 144 * v92;
              __str.__r_.__value_.__r.__words[2] = __str.__r_.__value_.__l.__size_;
              *(void *)&long long v152 = v94 + 144 * v95;
              std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)__str.__r_.__value_.__l.__size_, (uint64_t)&v133);
              __str.__r_.__value_.__r.__words[2] += 144;
              std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v145, &__str);
              int v91 = v146;
              std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&__str);
            }
            else
            {
              std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v146, (uint64_t)&v133);
              int v91 = v90 + 6;
            }
            uint64_t v146 = v91;
            if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0) {
              std::string::__init_copy_ctor_external(&__str, v133.__r_.__value_.__l.__data_, v133.__r_.__value_.__l.__size_);
            }
            else {
              std::string __str = v133;
            }
            std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v141, &__str, &v152, 1uLL);
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__str.__r_.__value_.__l.__data_);
            }

            if (v137 < 0) {
              operator delete(__p);
            }
            __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v135;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
            __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v134;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
            if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v133.__r_.__value_.__l.__data_);
            }

            uint64_t v96 = objc_opt_new();
            Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&v133.__r_.__value_.__l.__data_, (id *)a3);
            std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)v135, v141.__begin_, v141.__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v141.__end_ - (char *)v141.__begin_) >> 3));
            signed int v97 = v139;
            id v139 = @"Transpose";

            int v98 = objc_opt_new();
            int v99 = objc_opt_new();
            [v99 setObject:@"Channel" forKeyedSubscript:@"TransposeSourceDimension"];
            [v99 setObject:v120 forKeyedSubscript:@"TransposeDestinationDimension"];
            [v98 addObject:v99];
            int v100 = objc_opt_new();
            [v100 setObject:v120 forKeyedSubscript:@"TransposeSourceDimension"];
            [v100 setObject:@"Channel" forKeyedSubscript:@"TransposeDestinationDimension"];
            [v98 addObject:v100];
            [v96 setObject:v98 forKeyedSubscript:@"TransposeDimensions"];
            objc_storeStrong(v140, v96);
            unsigned int v101 = v146;
            if ((unint64_t)v146 >= v147)
            {
              unint64_t v103 = 0x8E38E38E38E38E39 * (((uint64_t)v146 - v145) >> 4);
              if (v103 + 1 > 0x1C71C71C71C71C7) {
                std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v104 = 0x1C71C71C71C71C72 * ((uint64_t)(v147 - v145) >> 4);
              if (v104 <= v103 + 1) {
                unint64_t v104 = v103 + 1;
              }
              if (0x8E38E38E38E38E39 * ((uint64_t)(v147 - v145) >> 4) >= 0xE38E38E38E38E3) {
                unint64_t v105 = 0x1C71C71C71C71C7;
              }
              else {
                unint64_t v105 = v104;
              }
              *((void *)&v152 + 1) = &v147;
              if (v105) {
                unint64_t v105 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v105);
              }
              else {
                uint64_t v106 = 0;
              }
              __str.__r_.__value_.__r.__words[0] = v105;
              __str.__r_.__value_.__l.__size_ = v105 + 144 * v103;
              __str.__r_.__value_.__r.__words[2] = __str.__r_.__value_.__l.__size_;
              *(void *)&long long v152 = v105 + 144 * v106;
              std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)__str.__r_.__value_.__l.__size_, (uint64_t)&v133);
              __str.__r_.__value_.__r.__words[2] += 144;
              std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v145, &__str);
              unsigned int v102 = v146;
              std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&__str);
            }
            else
            {
              std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v146, (uint64_t)&v133);
              unsigned int v102 = v101 + 6;
            }
            uint64_t v146 = v102;
            if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0) {
              std::string::__init_copy_ctor_external(&__str, v133.__r_.__value_.__l.__data_, v133.__r_.__value_.__l.__size_);
            }
            else {
              std::string __str = v133;
            }
            std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v141, &__str, &v152, 1uLL);
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__str.__r_.__value_.__l.__data_);
            }

            if (v137 < 0) {
              operator delete(__p);
            }
            __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v135;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
            __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v134;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
            if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v133.__r_.__value_.__l.__data_);
            }

            atomic_fetch_add_explicit(&v125->__shared_owners_, 1uLL, memory_order_relaxed);
            v132[0] = v121;
            v132[1] = v12;
            if (v12) {
              atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            Espresso::ANECompilerEngine::add_ane_scale_bias_unit<Espresso::ANECompilerEngine::mix_reduce_kernel *>(this, v123, (id *)a3, (uint64_t)v132, &v145);
            if (v12) {
              nitro::nitro_function::nitro_function(v12);
            }
            nitro::nitro_function::nitro_function(v125);
            (*(void (**)(char *, Espresso::ANECompilerEngine::compiler *, uint64_t *))(*((void *)this + 41)
                                                                                               + 32))((char *)this + 328, v123, &v145);
            v133.__r_.__value_.__r.__words[0] = (std::string::size_type)&v141;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v133);

            v133.__r_.__value_.__r.__words[0] = (std::string::size_type)&v145;
            std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&v133);
            goto LABEL_183;
          }
          if (v14 == 11) {
            char v81 = @"SpatialArgMax";
          }
          else {
            char v81 = @"SpatialArgMin";
          }
          [v70 setObject:v81 forKeyedSubscript:@"Mode"];
          [v70 setObject:&unk_1EE3AEF80 forKeyedSubscript:@"KernelWidth"];
          BOOL v82 = NSNumber;
          unsigned int v150 = (unsigned __int8 *)*((void *)a3 + 6);
          int v83 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7, v150, (long long **)&v150);
          Espresso::abstract_blob_container::shape((char *)&__str, *((void *)v83 + 5));
          unint64_t v84 = [v82 numberWithInt:HIDWORD(__str.__r_.__value_.__r.__words[0])];
          [v70 setObject:v84 forKeyedSubscript:@"KernelHeight"];

          if (v153)
          {
            v154[0] = v153;
            operator delete(v153);
          }
          unint64_t v85 = &unk_1EE3AF1C0;
        }
        [v70 setObject:v85 forKeyedSubscript:@"Step"];
        [v70 setObject:&unk_1EE3AEF98 forKeyedSubscript:@"PadTop"];
        [v70 setObject:&unk_1EE3AEF98 forKeyedSubscript:@"PadBot"];
        std::string::size_type v75 = (__CFString *)&unk_1EE3AEF98;
        [v70 setObject:&unk_1EE3AEF98 forKeyedSubscript:@"PadLeft"];
        uint64_t v76 = @"PadRight";
      }
      [v70 setObject:v75 forKeyedSubscript:v76];
      goto LABEL_107;
    }

    v133.__r_.__value_.__r.__words[0] = (std::string::size_type)&v145;
    std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&v133);
  }
  long long v30 = objc_opt_new();
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&v133.__r_.__value_.__l.__data_, (id *)a3);
  uint64_t v145 = 0;
  uint64_t v146 = 0;
  unint64_t v147 = 0;
  char v31 = v139;
  if ((v14 - 11) > 1)
  {
    id v139 = @"Reduction";

    uint64_t v42 = @"Min";
    switch(v14)
    {
      case 0:
        uint64_t v42 = @"Sum";
        goto LABEL_46;
      case 1:
        uint64_t v42 = @"Avg";
        goto LABEL_46;
      case 4:
        int v50 = objc_opt_new();
        Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&__str.__r_.__value_.__l.__data_, (id *)a3);
        int v51 = v157;
        std::vector<std::string> v157 = @"ElementWise";

        [v50 setObject:@"Square" forKeyedSubscript:@"Type"];
        objc_storeStrong(v158, v50);
        long long v52 = v146;
        if ((unint64_t)v146 >= v147)
        {
          uint64_t v53 = (std::string *)std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__push_back_slow_path<Espresso::ANECompilerEngine::compiler::unit_t const&>(&v145, (uint64_t)&__str);
        }
        else
        {
          std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v146, (uint64_t)&__str);
          uint64_t v53 = v52 + 6;
        }
        uint64_t v146 = v53;
        std::string v117 = v139;
        id v139 = @"Reduction";

        [v30 setObject:@"Sum" forKeyedSubscript:@"Type"];
        if (v155 < 0) {
          operator delete((void *)v154[4]);
        }
        v141.__begin_ = (std::vector<std::string>::pointer)v154;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v141);
        v141.__begin_ = (std::vector<std::string>::pointer)&v152;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v141);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }

        goto LABEL_47;
      case 9:
        uint64_t v42 = @"Max";
        goto LABEL_46;
      case 10:
LABEL_46:
        [v30 setObject:v42 forKeyedSubscript:@"Type"];
LABEL_47:
        long long v49 = *(_OWORD *)((char *)this + 296);
        long long v128 = *v18;
        v129[0] = v49;
        *(_OWORD *)((char *)v129 + 12) = *(_OWORD *)((char *)this + 308);
        uint64_t v33 = get_reduce_axes((uint64_t)&v128, DWORD2(v149), *(unsigned __int8 *)(v6 + 1281));
        [v30 setObject:v33 forKeyedSubscript:@"Dimension"];
        break;
      default:
        Espresso::throw_exception_selector<Espresso::unsupported_configuration_error>("Unsupported reduce mode for reduce operation.");
    }
    goto LABEL_162;
  }
  id v139 = @"ArgMinMax";

  long long v32 = *(_OWORD *)((char *)this + 296);
  long long v130 = *v18;
  v131[0] = v32;
  *(_OWORD *)((char *)v131 + 12) = *(_OWORD *)((char *)this + 308);
  uint64_t v33 = get_reduce_axes((uint64_t)&v130, DWORD2(v149), *(unsigned __int8 *)(v6 + 1281));
  if ([v33 count] != 1)
  {
    if ([v33 count] != 2)
    {
      std::string v118 = "Unsupported reduce axis mode for arg max or arg min.";
      goto LABEL_203;
    }
    int v43 = [v33 objectAtIndex:0];
    if (v43 == @"Width")
    {
      int v59 = [v33 objectAtIndex:1];
      BOOL v44 = v59 == @"Height";
    }
    else
    {
      BOOL v44 = 0;
    }

    int v60 = [v33 objectAtIndex:0];
    if (v60 == @"Height")
    {
      unint64_t v68 = [v33 objectAtIndex:1];
      char v69 = v68 == @"Width" || v44;

      if (v69) {
        goto LABEL_59;
      }
    }
    else
    {

      if (v44)
      {
LABEL_59:
        if (v14 == 11) {
          int v61 = @"SpatialArgMax";
        }
        else {
          int v61 = @"SpatialArgMin";
        }
        [v30 setObject:v61 forKeyedSubscript:@"Mode"];
        int v62 = NSNumber;
        unsigned int v150 = (unsigned __int8 *)*((void *)a3 + 6);
        uint64_t v63 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7, v150, (long long **)&v150);
        Espresso::abstract_blob_container::shape((char *)&__str, *((void *)v63 + 5));
        int v64 = [v62 numberWithInt:LODWORD(__str.__r_.__value_.__l.__data_)];
        [v30 setObject:v64 forKeyedSubscript:@"KernelWidth"];

        if (v153)
        {
          v154[0] = v153;
          operator delete(v153);
        }
        int v65 = NSNumber;
        unsigned int v150 = (unsigned __int8 *)*((void *)a3 + 6);
        uint64_t v66 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7, v150, (long long **)&v150);
        Espresso::abstract_blob_container::shape((char *)&__str, *((void *)v66 + 5));
        uint64_t v67 = [v65 numberWithInt:HIDWORD(__str.__r_.__value_.__r.__words[0])];
        [v30 setObject:v67 forKeyedSubscript:@"KernelHeight"];

        if (v153)
        {
          v154[0] = v153;
          operator delete(v153);
        }
        [v30 setObject:&unk_1EE3AF208 forKeyedSubscript:@"Step"];
        [v30 setObject:&unk_1EE3AEF98 forKeyedSubscript:@"PadTop"];
        [v30 setObject:&unk_1EE3AEF98 forKeyedSubscript:@"PadBot"];
        [v30 setObject:&unk_1EE3AEF98 forKeyedSubscript:@"PadLeft"];
        [v30 setObject:&unk_1EE3AEF98 forKeyedSubscript:@"PadRight"];
        goto LABEL_162;
      }
    }
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Unsupported reduce axis mode for arg max.");
  }
  unsigned int v34 = [v33 objectAtIndex:0];
  BOOL v35 = v34 == @"Width";

  if (v35)
  {
    if (v14 == 11) {
      long long v54 = @"SpatialArgMax";
    }
    else {
      long long v54 = @"SpatialArgMin";
    }
    [v30 setObject:v54 forKeyedSubscript:@"Mode"];
    id v55 = NSNumber;
    unsigned int v150 = (unsigned __int8 *)*((void *)a3 + 6);
    std::string::size_type v56 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v6 + 136, v150, (long long **)&v150);
    Espresso::abstract_blob_container::shape((char *)&__str, *((void *)v56 + 5));
    uint64_t v57 = [v55 numberWithInt:LODWORD(__str.__r_.__value_.__l.__data_)];
    [v30 setObject:v57 forKeyedSubscript:@"KernelWidth"];

    if (v153)
    {
      v154[0] = v153;
      operator delete(v153);
    }
    [v30 setObject:&unk_1EE3AEF80 forKeyedSubscript:@"KernelHeight"];
    uint64_t v58 = &unk_1EE3AF1D8;
  }
  else
  {
    uint64_t v36 = [v33 objectAtIndex:0];
    BOOL v37 = v36 == @"Height";

    if (!v37)
    {
      int v38 = [v33 objectAtIndex:0];
      BOOL v39 = v38 == @"Channel";

      if (v39)
      {
        if (v14 == 11) {
          long long v40 = @"ChannelArgMax";
        }
        else {
          long long v40 = @"ChannelArgMin";
        }
        int v41 = @"Mode";
        goto LABEL_161;
      }
      std::string v118 = "Unsupported reduce axis mode for arg max.";
LABEL_203:
      Espresso::throw_exception_selector<Espresso::invalid_state_error>(v118);
    }
    if (v14 == 11) {
      int v107 = @"SpatialArgMax";
    }
    else {
      int v107 = @"SpatialArgMin";
    }
    [v30 setObject:v107 forKeyedSubscript:@"Mode"];
    [v30 setObject:&unk_1EE3AEF80 forKeyedSubscript:@"KernelWidth"];
    std::string v108 = NSNumber;
    unsigned int v150 = (unsigned __int8 *)*((void *)a3 + 6);
    double v109 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v6 + 136, v150, (long long **)&v150);
    Espresso::abstract_blob_container::shape((char *)&__str, *((void *)v109 + 5));
    uint64_t v110 = [v108 numberWithInt:HIDWORD(__str.__r_.__value_.__r.__words[0])];
    [v30 setObject:v110 forKeyedSubscript:@"KernelHeight"];

    if (v153)
    {
      v154[0] = v153;
      operator delete(v153);
    }
    uint64_t v58 = &unk_1EE3AF1F0;
  }
  [v30 setObject:v58 forKeyedSubscript:@"Step"];
  [v30 setObject:&unk_1EE3AEF98 forKeyedSubscript:@"PadTop"];
  [v30 setObject:&unk_1EE3AEF98 forKeyedSubscript:@"PadBot"];
  long long v40 = (__CFString *)&unk_1EE3AEF98;
  [v30 setObject:&unk_1EE3AEF98 forKeyedSubscript:@"PadLeft"];
  int v41 = @"PadRight";
LABEL_161:
  [v30 setObject:v40 forKeyedSubscript:v41];
LABEL_162:

  objc_storeStrong(v140, v30);
  std::string v111 = v146;
  if ((unint64_t)v146 >= v147)
  {
    unint64_t v113 = 0x8E38E38E38E38E39 * (((uint64_t)v146 - v145) >> 4);
    if (v113 + 1 > 0x1C71C71C71C71C7) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v114 = 0x1C71C71C71C71C72 * ((uint64_t)(v147 - v145) >> 4);
    if (v114 <= v113 + 1) {
      unint64_t v114 = v113 + 1;
    }
    if (0x8E38E38E38E38E39 * ((uint64_t)(v147 - v145) >> 4) >= 0xE38E38E38E38E3) {
      unint64_t v115 = 0x1C71C71C71C71C7;
    }
    else {
      unint64_t v115 = v114;
    }
    *((void *)&v152 + 1) = &v147;
    if (v115) {
      unint64_t v115 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v115);
    }
    else {
      uint64_t v116 = 0;
    }
    __str.__r_.__value_.__r.__words[0] = v115;
    __str.__r_.__value_.__l.__size_ = v115 + 144 * v113;
    __str.__r_.__value_.__r.__words[2] = __str.__r_.__value_.__l.__size_;
    *(void *)&long long v152 = v115 + 144 * v116;
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)__str.__r_.__value_.__l.__size_, (uint64_t)&v133);
    __str.__r_.__value_.__r.__words[2] += 144;
    std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v145, &__str);
    int v112 = v146;
    std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&__str);
  }
  else
  {
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v146, (uint64_t)&v133);
    int v112 = v111 + 6;
  }
  uint64_t v146 = v112;
  atomic_fetch_add_explicit(&v125->__shared_owners_, 1uLL, memory_order_relaxed);
  v127[0] = v121;
  v127[1] = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::ANECompilerEngine::add_ane_scale_bias_unit<Espresso::ANECompilerEngine::mix_reduce_kernel *>(this, v123, (id *)a3, (uint64_t)v127, &v145);
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
  nitro::nitro_function::nitro_function(v125);
  (*(void (**)(char *, Espresso::ANECompilerEngine::compiler *, uint64_t *))(*((void *)this + 41) + 32))((char *)this + 328, v123, &v145);
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v145;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);

  if (v137 < 0) {
    operator delete(__p);
  }
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v135;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v134;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v133.__r_.__value_.__l.__data_);
  }

LABEL_183:
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
  if (v124) {
    nitro::nitro_function::nitro_function(v124);
  }
  nitro::nitro_function::nitro_function(v125);
}

void sub_192B1156C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, std::__shared_weak_count *a16, std::__shared_weak_count *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,id a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void **a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t((id *)(v67 - 240));

  a53 = (void **)&a64;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100](&a53);
  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t(&a35);

  if (v65) {
    nitro::nitro_function::nitro_function(v65);
  }
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::add_ane_scale_bias_unit<Espresso::ANECompilerEngine::mix_reduce_kernel *>(void *a1, unsigned char *a2, id *a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v138 = *MEMORY[0x1E4F143B8];
  Espresso::ANECompilerEngine::compiler::layer_graph_info_t::layer_graph_info_t((Espresso::ANECompilerEngine::compiler::layer_graph_info_t *)&v115);
  id v122 = 0;
  id v123 = 0;
  uint64_t v124 = 0x100000000;
  uint64_t v10 = a1[49];
  int v9 = (std::__shared_weak_count *)a1[50];
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v10 && !*(unsigned char *)((*(uint64_t (**)(void))(a1[41] + 104))() + 40))
  {
    float v11 = *(float *)(*(void *)a4 + 112);
    v108[0] = v10;
    v108[1] = v9;
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v12 = (std::__shared_weak_count *)a1[52];
    v107[0] = a1[51];
    v107[1] = (uint64_t)v12;
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    Espresso::ane_style_post_scale_bias((uint64_t)v108, v107, (uint64_t)&v109, v11);
    if (v12) {
      nitro::nitro_function::nitro_function(v12);
    }
    if (v9) {
      nitro::nitro_function::nitro_function(v9);
    }
    uint64_t v13 = *(unsigned int *)(v10 + 8);
    std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v105, 2 * v13, 1, 1, 1);
    uint64_t v14 = (int)v13;
    uint64_t v15 = a1[51];
    int v16 = v13;
    if (v15) {
      int v16 = *(_DWORD *)(v15 + 8);
    }
    if (!a2[384])
    {
      Espresso::blob<unsigned char,1>::make(&__str, 4 * v13);
      int v71 = *(int **)(__str.__r_.__value_.__r.__words[0] + 16);
      int v72 = v13 - 1;
      if ((int)v13 >= 1)
      {
        for (uint64_t i = 0; i != v13; ++i)
        {
          float v74 = *(float *)(*(void *)(v10 + 16) + i * 4);
          *(float *)&int v75 = ldexp(1.0, -v113) * v74;
          v71[i] = v75;
        }
      }
      if (v13)
      {
        uint64_t v76 = *(_WORD **)(v105 + 16);
        do
        {
          int v77 = *v71++;
          _S0 = v77;
          __asm { FCVT            H0, S0 }
          *v76++ = _S0;
          --v14;
        }
        while (v14);
      }
      if (a1[51])
      {
        Espresso::blob<unsigned char,1>::make(buf, 4 * v16);
        uint64_t v80 = *(void *)buf;
        Espresso::blob<unsigned char,1>::make(buf, 2 * v16);
        uint64_t v101 = *(void *)buf;
        char v81 = *(int **)(v80 + 16);
        if (v16 >= 1)
        {
          for (uint64_t j = 0; j != v16; ++j)
          {
            if (v72 >= (int)j) {
              int v83 = j;
            }
            else {
              int v83 = v72;
            }
            float v84 = *(float *)(*(void *)(v111 + 16) + 4 * j) * *(float *)(*(void *)(v109 + 16) + 4 * v83);
            unint64_t v85 = (float *)&v81[j];
            *unint64_t v85 = v84;
            unsigned int v86 = v113;
            unsigned int v87 = v114;
            float v88 = ldexp(1.0, v114 - v113) * v84;
            *unint64_t v85 = v88;
            float v91 = ldexp(1.0, v86 - v87) * v88;
            if (v91 < -127.0 || v91 > 255.0)
            {
              unint64_t v93 = Espresso::espresso_os_log_subsystem(v89, v90);
              if (os_log_type_enabled(v93, OS_LOG_TYPE_ERROR))
              {
                double v94 = *(float *)&v81[j];
                *(_DWORD *)long long buf = 134218752;
                *(double *)&uint8_t buf[4] = v91;
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = v114;
                __int16 v126 = 1024;
                int v127 = v113;
                __int16 v128 = 2048;
                double v129 = v94;
                _os_log_error_impl(&dword_1920CB000, v93, OS_LOG_TYPE_ERROR, "[ANEC::add_ane_scale_bias_unit] Shifted bias overflowing shifted_b=%f acc_bias_shift=%d post_right_shift=%d anebias=%f", buf, 0x22u);
              }
            }
          }
        }
        if (v16)
        {
          uint64_t v95 = v16;
          uint64_t v96 = *(_WORD **)(v101 + 16);
          do
          {
            int v97 = *v81++;
            _S0 = v97;
            __asm { FCVT            H0, S0 }
            *v96++ = _S0;
            --v95;
          }
          while (v95);
        }
      }
      exception = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
      Espresso::not_implemented_error::not_implemented_error(exception);
    }
    unsigned int v17 = v114;
    uint64_t v18 = v105;
    if (v13)
    {
      long long v19 = *(int **)(v109 + 16);
      long long v20 = *(_WORD **)(v105 + 16);
      do
      {
        int v21 = *v19++;
        _S0 = v21;
        __asm { FCVT            H0, S0 }
        *v20++ = _S0;
        --v14;
      }
      while (v14);
    }
    unsigned int v99 = v17;
    if (v15)
    {
      std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(buf, 2 * v16, 1, 1, 1);
      uint64_t v27 = *(void *)buf;
      unsigned int v102 = *(std::__shared_weak_count **)&buf[8];
      if (v16)
      {
        uint64_t v28 = v16;
        std::string::size_type v29 = *(_WORD **)(*(void *)buf + 16);
        long long v30 = *(int **)(v111 + 16);
        do
        {
          int v31 = *v30++;
          _S0 = v31;
          __asm { FCVT            H0, S0 }
          *v29++ = _S0;
          --v28;
        }
        while (v28);
      }
    }
    else
    {
      unsigned int v102 = 0;
      uint64_t v27 = 0;
    }
    int v100 = a2[552];
    uint64_t v33 = v106;
    if (v106) {
      atomic_fetch_add_explicit(&v106->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v34 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128), *(const unsigned __int8 **)(v18 + 16), *(int *)(v18 + 8));
    if (v33) {
      nitro::nitro_function::nitro_function(v33);
    }
    obuint64_t j = objc_opt_new();
    if (a5 && a2[121])
    {
      id v35 = *(id *)(*a5 + 128);

      obuint64_t j = v35;
    }
    uint64_t v36 = objc_opt_new();
    BOOL v37 = [NSNumber numberWithInt:v13];
    [v36 setObject:v37 forKeyedSubscript:@"ScaleCount"];

    int v38 = [NSNumber numberWithInt:v34];
    [v36 setObject:v38 forKeyedSubscript:@"ScaleOffset"];

    BOOL v39 = NSNumber;
    if (v100) {
      uint64_t weights_file_index = 0;
    }
    else {
    int v41 = [v39 numberWithUnsignedLong:weights_file_index];
    }
    [v36 setObject:v41 forKeyedSubscript:@"ScaleIndex"];

    [v36 setObject:@"Float16" forKeyedSubscript:@"ScaleType"];
    uint64_t v42 = [NSNumber numberWithInt:v113];
    [obj setObject:v42 forKeyedSubscript:@"ScaleShift"];

    if (a1[51])
    {
      if (v102) {
        atomic_fetch_add_explicit(&v102->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v43 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128), *(const unsigned __int8 **)(v27 + 16), *(int *)(v27 + 8));
      if (v102) {
        nitro::nitro_function::nitro_function(v102);
      }
      BOOL v44 = [NSNumber numberWithInt:*(unsigned int *)(a1[51] + 8)];
      [v36 setObject:v44 forKeyedSubscript:@"BiasCount"];

      unint64_t v45 = [NSNumber numberWithInt:v43];
      [v36 setObject:v45 forKeyedSubscript:@"BiasOffset"];

      unint64_t v46 = NSNumber;
      if (v100) {
        uint64_t v47 = 0;
      }
      else {
      uint64_t v48 = [v46 numberWithUnsignedLong:v47];
      }
      [v36 setObject:v48 forKeyedSubscript:@"BiasIndex"];

      [v36 setObject:@"Float16" forKeyedSubscript:@"BiasType"];
      long long v49 = [NSNumber numberWithInt:v99];
      [obj setObject:v49 forKeyedSubscript:@"BiasShift"];
    }
    [obj setObject:v36 forKeyedSubscript:@"BiasScaleGroupData"];
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)buf, a3);
    uint64_t v50 = a5[1];
    if (v50 == *a5) {
      goto LABEL_68;
    }
    int v51 = (const void **)(v50 - 144);
    uint64_t v52 = *(unsigned __int8 *)(v50 - 121);
    char v53 = v52;
    std::string::size_type v54 = *(void *)(v50 - 136);
    if ((v52 & 0x80u) == 0) {
      uint64_t v55 = *(unsigned __int8 *)(v50 - 121);
    }
    else {
      uint64_t v55 = *(void *)(v50 - 136);
    }
    uint64_t v56 = HIBYTE(v127);
    if (v127 < 0) {
      uint64_t v56 = *(void *)&buf[8];
    }
    if (v55 != v56) {
      goto LABEL_62;
    }
    if (v127 >= 0) {
      uint64_t v57 = buf;
    }
    else {
      uint64_t v57 = *(unsigned __int8 **)buf;
    }
    if ((char)v52 < 0)
    {
      int v59 = (const std::string::value_type *)*v51;
      if (memcmp(*v51, v57, *(void *)(v50 - 136))) {
        goto LABEL_65;
      }
    }
    else if ((_BYTE)v52)
    {
      uint64_t v58 = (unsigned __int8 *)(v50 - 144);
      while (*v58 == *v57)
      {
        ++v58;
        ++v57;
        if (!--v52) {
          goto LABEL_61;
        }
      }
      goto LABEL_62;
    }
LABEL_61:
    std::string::append((std::string *)(v50 - 144), "__@pre_scale_bias");
    char v53 = *(unsigned char *)(v50 - 121);
LABEL_62:
    if ((v53 & 0x80) == 0)
    {
      long long v60 = *(_OWORD *)v51;
      __str.__r_.__value_.__r.__words[2] = *(void *)(v50 - 128);
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v60;
      goto LABEL_66;
    }
    int v59 = *(const std::string::value_type **)(v50 - 144);
    std::string::size_type v54 = *(void *)(v50 - 136);
LABEL_65:
    std::string::__init_copy_ctor_external(&__str, v59, v54);
LABEL_66:
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v130, &__str, &v137, 1uLL);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
LABEL_68:
    int v61 = v134;
    char v134 = @"GOC";

    objc_storeStrong(&v135, obj);
    if (a2[121]) {
      BOOL v62 = a5 != 0;
    }
    else {
      BOOL v62 = 0;
    }
    if (!v62)
    {
      if (a5)
      {
        unint64_t v63 = a5[2];
        unint64_t v64 = a5[1];
        if (v64 >= v63)
        {
          unint64_t v66 = 0x8E38E38E38E38E39 * ((uint64_t)(v64 - *a5) >> 4);
          if (v66 + 1 > 0x1C71C71C71C71C7) {
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v67 = 0x8E38E38E38E38E39 * ((uint64_t)(v63 - *a5) >> 4);
          uint64_t v68 = 2 * v67;
          if (2 * v67 <= v66 + 1) {
            uint64_t v68 = v66 + 1;
          }
          if (v67 >= 0xE38E38E38E38E3) {
            unint64_t v69 = 0x1C71C71C71C71C7;
          }
          else {
            unint64_t v69 = v68;
          }
          *((void *)&v137 + 1) = a5 + 2;
          if (v69) {
            unint64_t v69 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v69);
          }
          else {
            uint64_t v70 = 0;
          }
          __str.__r_.__value_.__r.__words[0] = v69;
          __str.__r_.__value_.__l.__size_ = v69 + 144 * v66;
          __str.__r_.__value_.__r.__words[2] = __str.__r_.__value_.__l.__size_;
          *(void *)&long long v137 = v69 + 144 * v70;
          std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)__str.__r_.__value_.__l.__size_, (uint64_t)buf);
          __str.__r_.__value_.__r.__words[2] += 144;
          std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(a5, &__str);
          uint64_t v65 = a5[1];
          std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&__str);
        }
        else
        {
          std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)a5[1], (uint64_t)buf);
          uint64_t v65 = v64 + 144;
          a5[1] = v65;
        }
        a5[1] = v65;
      }
      else
      {
        Espresso::ANECompilerEngine::compiler::add_unit((Espresso::ANECompilerEngine::compiler *)a2, (const Espresso::ANECompilerEngine::compiler::unit_t *)buf);
      }
    }

    if (v132 < 0) {
      operator delete(__p);
    }
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v130;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v128;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
    if (SHIBYTE(v127) < 0) {
      operator delete(*(void **)buf);
    }

    if (v102) {
      nitro::nitro_function::nitro_function(v102);
    }
    if (v106) {
      nitro::nitro_function::nitro_function(v106);
    }
    if (v112) {
      nitro::nitro_function::nitro_function(v112);
    }
    if (v110) {
      nitro::nitro_function::nitro_function(v110);
    }
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }

  if (v120 < 0) {
    operator delete(v119);
  }
  *(void *)long long buf = &v118;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(void *)long long buf = &v117;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (v116 < 0) {
    operator delete(v115);
  }
}

void sub_192B123D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,id a27)
{
  if (a12) {
    nitro::nitro_function::nitro_function(a12);
  }
  long long v30 = *(std::__shared_weak_count **)(v28 - 152);
  if (v30) {
    nitro::nitro_function::nitro_function(v30);
  }
  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  Espresso::dropout_augment_lowmem::ret_t::~ret_t((Espresso::dropout_augment_lowmem::ret_t *)&a22);
  if (v27) {
    nitro::nitro_function::nitro_function(v27);
  }
  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t(&a27);
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::mix_reduce_kernel::~mix_reduce_kernel(Espresso::ANECompilerEngine::mix_reduce_kernel *this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANECompilerEngine::mix_reduce_kernel *)((char *)this + 328));
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t vars8;

  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANECompilerEngine::mix_reduce_kernel *)((char *)this + 328));

  Espresso::base_kernel::~base_kernel(this);
}

void non-virtual thunk to'Espresso::ANECompilerEngine::mix_reshape_kernel::~mix_reshape_kernel(Espresso::ANECompilerEngine::mix_reshape_kernel *this)
{
  uint64_t v1 = (Espresso::ANECompilerEngine::mix_reshape_kernel *)((char *)this - 320);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);

  JUMPOUT(0x192FF16B0);
}

{
  Espresso::base_kernel *v1;
  uint64_t vars8;

  uint64_t v1 = (Espresso::ANECompilerEngine::mix_reshape_kernel *)((char *)this - 320);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);

  Espresso::base_kernel::~base_kernel(v1);
}

void non-virtual thunk to'Espresso::ANECompilerEngine::mix_reshape_kernel::compile(NSString *this, Espresso::ANECompilerEngine::compiler *a2, void **a3)
{
}

void Espresso::ANECompilerEngine::mix_reshape_kernel::compile(NSString *this, Espresso::ANECompilerEngine::compiler *a2, void **a3)
{
  v204[3] = *(id *)MEMORY[0x1E4F143B8];
  int v4 = (std::__shared_weak_count *)*((void *)a2 + 2);
  if (!v4 || (v157 = std::__shared_weak_count::lock(v4)) == 0 || (uint64_t v7 = *((void *)a2 + 1)) == 0) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Inconsistent state: null network");
  }
  if (!*(void *)(v7 + 576)) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Inconsistent state: blob_storage");
  }
  v179[0] = a3[6];
  int v8 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7 + 136, (unsigned __int8 *)v179[0], (long long **)v179);
  uint64_t v10 = (int32x4_t *)*((void *)v8 + 5);
  int v9 = (std::__shared_weak_count *)*((void *)v8 + 6);
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  id v156 = v9;
  v179[0] = a3;
  float v11 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7 + 136, (unsigned __int8 *)a3, (long long **)v179);
  uint64_t v13 = (float *)*((void *)v11 + 5);
  uint64_t v12 = (std::__shared_weak_count *)*((void *)v11 + 6);
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::ANECompilerEngine::ane_arch_allow_network_override(v7 + 472);
  char v155 = (Espresso::ANECompilerEngine *)objc_claimAutoreleasedReturnValue();
  if (Espresso::ANECompilerEngine::is_mix(v155, v14))
  {
    Espresso::ANECompilerEngine::reshape_kernel::compile(this, a2, a3);
    goto LABEL_261;
  }
  if (v10)
  {
    uint64_t v10 = v15;
    if (v156 && v15)
    {
      atomic_fetch_add_explicit(&v156->__shared_owners_, 1uLL, memory_order_relaxed);
      int v154 = v156;
    }
    else
    {
      int v154 = 0;
    }
  }
  else
  {
    int v154 = 0;
  }
  unsigned int v17 = 0;
  if (v12 && v16)
  {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    unsigned int v17 = v12;
  }
  __int16 v153 = v17;
  __int32 v18 = v10[11].i32[0];
  __int32 v19 = v10[11].i32[2];
  __int32 v20 = v10[11].i32[3];
  uint64_t v21 = v16[44];
  int v22 = v16[46];
  int v23 = v16[47];
  int v24 = *(unsigned __int8 *)(v7 + 1281);
  uint64_t v174 = 0;
  int v175 = 0;
  v176[0] = 0;
  *(_OWORD *)obuint64_t j = *((_OWORD *)v16 + 10);
  if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vceqq_s32(v10[10], *(int32x4_t *)obj)), 0xFuLL))) & 1) != 0
    && v18 == v21
    && v20 == v23
    && v19 == v22
    || ((int v25 = *((_DWORD *)this + 76)) != 0 ? (v26 = 1) : (v26 = (v20 & v23) != -1), !v26))
  {
    Espresso::ANECompilerEngine::mix_reshape_kernel::compile(Espresso::ANECompilerEngine::compiler *,Espresso::ANECompilerEngine::compiler::layer_graph_info_t const&)::$_0::operator()((uint64_t)v179, a3, LODWORD(obj[0]), LODWORD(obj[1]), HIDWORD(obj[0]), HIDWORD(obj[1]), v21);
    unint64_t v29 = 0x8E38E38E38E38E39 * (((uint64_t)v175 - v174) >> 4);
    if (v29 + 1 > 0x1C71C71C71C71C7) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v30 = 0x1C71C71C71C71C72 * ((v176[0] - v174) >> 4);
    if (v30 <= v29 + 1) {
      unint64_t v30 = v29 + 1;
    }
    if (0x8E38E38E38E38E39 * ((v176[0] - v174) >> 4) >= 0xE38E38E38E38E3) {
      unint64_t v31 = 0x1C71C71C71C71C7;
    }
    else {
      unint64_t v31 = v30;
    }
    *((void *)&v198 + 1) = v176;
    if (v31) {
      unint64_t v31 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v31);
    }
    else {
      uint64_t v32 = 0;
    }
    *(void *)long long buf = v31;
    *(void *)&buf[8] = v31 + 16 * (((uint64_t)v175 - v174) >> 4);
    *(void *)&uint8_t buf[16] = *(void *)&buf[8];
    *(void *)&long long v198 = v31 + 144 * v32;
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(*(std::string **)&buf[8], (uint64_t)v179);
    *(void *)&buf[16] += 144;
    std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v174, buf);
    uint64_t v33 = v175;
    std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)buf);
    int v175 = v33;

    goto LABEL_47;
  }
  if (!v25 && !v24 && (v20 & v23) != 0xFFFFFFFF)
  {
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t(v179, a3);
    long long v171 = 0u;
    long long v172 = 0u;
    int v173 = 1065353216;
    *(void *)long long buf = @"Batch";
    std::__hash_table<std::__hash_value_type<__CFString const*,__CFString const*>,std::__unordered_map_hasher<__CFString const*,std::__hash_value_type<__CFString const*,__CFString const*>,std::hash<__CFString const*>,std::equal_to<__CFString const*>,true>,std::__unordered_map_equal<__CFString const*,std::__hash_value_type<__CFString const*,__CFString const*>,std::equal_to<__CFString const*>,std::hash<__CFString const*>,true>,std::allocator<std::__hash_value_type<__CFString const*,__CFString const*>>>::__emplace_unique_key_args<__CFString const*,std::piecewise_construct_t const&,std::tuple<__CFString const*&&>,std::tuple<>>((float *)&v171, (unint64_t)@"Batch", buf)[3] = @"Depth";
    *(void *)long long buf = @"Depth";
    std::__hash_table<std::__hash_value_type<__CFString const*,__CFString const*>,std::__unordered_map_hasher<__CFString const*,std::__hash_value_type<__CFString const*,__CFString const*>,std::hash<__CFString const*>,std::equal_to<__CFString const*>,true>,std::__unordered_map_equal<__CFString const*,std::__hash_value_type<__CFString const*,__CFString const*>,std::equal_to<__CFString const*>,std::hash<__CFString const*>,true>,std::allocator<std::__hash_value_type<__CFString const*,__CFString const*>>>::__emplace_unique_key_args<__CFString const*,std::piecewise_construct_t const&,std::tuple<__CFString const*&&>,std::tuple<>>((float *)&v171, (unint64_t)@"Depth", buf)[3] = @"Batch";
    Espresso::ANECompilerEngine::mix_reshape_kernel::compile(Espresso::ANECompilerEngine::compiler *,Espresso::ANECompilerEngine::compiler::layer_graph_info_t const&)::$_1::operator()((uint64_t)buf, a3, (uint64_t)&v171);
    Espresso::ANECompilerEngine::compiler::unit_t::operator=((uint64_t)v179, (long long *)buf);

    if (v201 < 0) {
      operator delete(__p);
    }
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v199;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v198;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    uint64_t v27 = v175;
    if ((unint64_t)v175 >= v176[0])
    {
      unint64_t v79 = 0x8E38E38E38E38E39 * (((uint64_t)v175 - v174) >> 4);
      if (v79 + 1 > 0x1C71C71C71C71C7) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v80 = 0x1C71C71C71C71C72 * ((v176[0] - v174) >> 4);
      if (v80 <= v79 + 1) {
        unint64_t v80 = v79 + 1;
      }
      if (0x8E38E38E38E38E39 * ((v176[0] - v174) >> 4) >= 0xE38E38E38E38E3) {
        unint64_t v81 = 0x1C71C71C71C71C7;
      }
      else {
        unint64_t v81 = v80;
      }
      *((void *)&v198 + 1) = v176;
      if (v81) {
        unint64_t v81 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v81);
      }
      else {
        uint64_t v82 = 0;
      }
      *(void *)long long buf = v81;
      *(void *)&buf[8] = v81 + 144 * v79;
      *(void *)&uint8_t buf[16] = *(void *)&buf[8];
      *(void *)&long long v198 = v81 + 144 * v82;
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(*(std::string **)&buf[8], (uint64_t)v179);
      *(void *)&buf[16] += 144;
      std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v174, buf);
      uint64_t v28 = v175;
      std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)buf);
    }
    else
    {
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v175, (uint64_t)v179);
      uint64_t v28 = v27 + 6;
    }
    int v175 = v28;
    Espresso::ANECompilerEngine::mix_reshape_kernel::compile(Espresso::ANECompilerEngine::compiler *,Espresso::ANECompilerEngine::compiler::layer_graph_info_t const&)::$_0::operator()((uint64_t)buf, a3, LODWORD(obj[1]), LODWORD(obj[0]), HIDWORD(obj[0]), HIDWORD(obj[1]), v21);
    int v107 = v175;
    if ((unint64_t)v175 >= v176[0])
    {
      unint64_t v109 = 0x8E38E38E38E38E39 * (((uint64_t)v175 - v174) >> 4);
      if (v109 + 1 > 0x1C71C71C71C71C7) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v110 = 0x1C71C71C71C71C72 * ((v176[0] - v174) >> 4);
      if (v110 <= v109 + 1) {
        unint64_t v110 = v109 + 1;
      }
      if (0x8E38E38E38E38E39 * ((v176[0] - v174) >> 4) >= 0xE38E38E38E38E3) {
        unint64_t v111 = 0x1C71C71C71C71C7;
      }
      else {
        unint64_t v111 = v110;
      }
      *((void *)&v190 + 1) = v176;
      if (v111) {
        unint64_t v111 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v111);
      }
      else {
        uint64_t v112 = 0;
      }
      __str.__r_.__value_.__r.__words[0] = v111;
      __str.__r_.__value_.__l.__size_ = v111 + 144 * v109;
      __str.__r_.__value_.__r.__words[2] = __str.__r_.__value_.__l.__size_;
      *(void *)&long long v190 = v111 + 144 * v112;
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)__str.__r_.__value_.__l.__size_, (uint64_t)buf);
      __str.__r_.__value_.__r.__words[2] += 144;
      std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v174, &__str);
      std::string v108 = v175;
      std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&__str);
    }
    else
    {
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v175, (uint64_t)buf);
      std::string v108 = v107 + 6;
    }
    int v175 = v108;
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&__str.__r_.__value_.__l.__data_, a3);
    long long v168 = 0u;
    long long v169 = 0u;
    int v170 = 1065353216;
    *(void *)&long long v158 = @"Batch";
    std::__hash_table<std::__hash_value_type<__CFString const*,__CFString const*>,std::__unordered_map_hasher<__CFString const*,std::__hash_value_type<__CFString const*,__CFString const*>,std::hash<__CFString const*>,std::equal_to<__CFString const*>,true>,std::__unordered_map_equal<__CFString const*,std::__hash_value_type<__CFString const*,__CFString const*>,std::equal_to<__CFString const*>,std::hash<__CFString const*>,true>,std::allocator<std::__hash_value_type<__CFString const*,__CFString const*>>>::__emplace_unique_key_args<__CFString const*,std::piecewise_construct_t const&,std::tuple<__CFString const*&&>,std::tuple<>>((float *)&v168, (unint64_t)@"Batch", &v158)[3] = @"Depth";
    *(void *)&long long v158 = @"Depth";
    std::__hash_table<std::__hash_value_type<__CFString const*,__CFString const*>,std::__unordered_map_hasher<__CFString const*,std::__hash_value_type<__CFString const*,__CFString const*>,std::hash<__CFString const*>,std::equal_to<__CFString const*>,true>,std::__unordered_map_equal<__CFString const*,std::__hash_value_type<__CFString const*,__CFString const*>,std::equal_to<__CFString const*>,std::hash<__CFString const*>,true>,std::allocator<std::__hash_value_type<__CFString const*,__CFString const*>>>::__emplace_unique_key_args<__CFString const*,std::piecewise_construct_t const&,std::tuple<__CFString const*&&>,std::tuple<>>((float *)&v168, (unint64_t)@"Depth", &v158)[3] = @"Batch";
    Espresso::ANECompilerEngine::mix_reshape_kernel::compile(Espresso::ANECompilerEngine::compiler *,Espresso::ANECompilerEngine::compiler::layer_graph_info_t const&)::$_1::operator()((uint64_t)&v158, a3, (uint64_t)&v168);
    Espresso::ANECompilerEngine::compiler::unit_t::operator=((uint64_t)&__str, &v158);

    if (v164 < 0) {
      operator delete(v163);
    }
    int v177 = (std::__shared_weak_count **)v162;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v177);
    int v177 = &v160;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v177);
    if (SHIBYTE(v159) < 0) {
      operator delete((void *)v158);
    }
    unsigned int v113 = v175;
    if ((unint64_t)v175 >= v176[0])
    {
      unint64_t v115 = 0x8E38E38E38E38E39 * (((uint64_t)v175 - v174) >> 4);
      if (v115 + 1 > 0x1C71C71C71C71C7) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v116 = 0x1C71C71C71C71C72 * ((v176[0] - v174) >> 4);
      if (v116 <= v115 + 1) {
        unint64_t v116 = v115 + 1;
      }
      if (0x8E38E38E38E38E39 * ((v176[0] - v174) >> 4) >= 0xE38E38E38E38E3) {
        unint64_t v117 = 0x1C71C71C71C71C7;
      }
      else {
        unint64_t v117 = v116;
      }
      long long v161 = v176;
      if (v117) {
        unint64_t v117 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v117);
      }
      else {
        uint64_t v118 = 0;
      }
      *(void *)&long long v158 = v117;
      *((void *)&v158 + 1) = v117 + 144 * v115;
      uint64_t v159 = *((void *)&v158 + 1);
      id v160 = (std::__shared_weak_count *)(v117 + 144 * v118);
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(*((std::string **)&v158 + 1), (uint64_t)&__str);
      v159 += 144;
      std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v174, &v158);
      unsigned int v114 = v175;
      std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&v158);
    }
    else
    {
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v175, (uint64_t)&__str);
      unsigned int v114 = v113 + 6;
    }
    int v175 = v114;
    std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&v168);

    if (v193 < 0) {
      operator delete(v192);
    }
    *(void *)&long long v158 = v191;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v158);
    *(void *)&long long v158 = &v190;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v158);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }

    if (v201 < 0) {
      operator delete(__p);
    }
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v199;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v198;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&v171);

LABEL_47:
    if (v184 < 0) {
      operator delete(v183);
    }
    *(void *)long long buf = v182;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    *(void *)long long buf = v181;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    if (v180 < 0) {
      operator delete(v179[0]);
    }
    goto LABEL_51;
  }
  if (v24) {
    _ZF = v25 == 0;
  }
  else {
    _ZF = 0;
  }
  if (!_ZF || (v20 & v23) == -1)
  {
    if (v24) {
      BOOL v58 = (v20 & v23) == -1;
    }
    else {
      BOOL v58 = 1;
    }
    if (v25 == 1 && v58)
    {
      Espresso::ANECompilerEngine::compiler::unit_t::unit_t(v179, a3);
      long long v171 = 0u;
      long long v172 = 0u;
      int v173 = 1065353216;
      *(void *)long long buf = @"Height";
      std::__hash_table<std::__hash_value_type<__CFString const*,__CFString const*>,std::__unordered_map_hasher<__CFString const*,std::__hash_value_type<__CFString const*,__CFString const*>,std::hash<__CFString const*>,std::equal_to<__CFString const*>,true>,std::__unordered_map_equal<__CFString const*,std::__hash_value_type<__CFString const*,__CFString const*>,std::equal_to<__CFString const*>,std::hash<__CFString const*>,true>,std::allocator<std::__hash_value_type<__CFString const*,__CFString const*>>>::__emplace_unique_key_args<__CFString const*,std::piecewise_construct_t const&,std::tuple<__CFString const*&&>,std::tuple<>>((float *)&v171, (unint64_t)@"Height", buf)[3] = @"Channel";
      *(void *)long long buf = @"Width";
      std::__hash_table<std::__hash_value_type<__CFString const*,__CFString const*>,std::__unordered_map_hasher<__CFString const*,std::__hash_value_type<__CFString const*,__CFString const*>,std::hash<__CFString const*>,std::equal_to<__CFString const*>,true>,std::__unordered_map_equal<__CFString const*,std::__hash_value_type<__CFString const*,__CFString const*>,std::equal_to<__CFString const*>,std::hash<__CFString const*>,true>,std::allocator<std::__hash_value_type<__CFString const*,__CFString const*>>>::__emplace_unique_key_args<__CFString const*,std::piecewise_construct_t const&,std::tuple<__CFString const*&&>,std::tuple<>>((float *)&v171, (unint64_t)@"Width", buf)[3] = @"Height";
      *(void *)long long buf = @"Channel";
      std::__hash_table<std::__hash_value_type<__CFString const*,__CFString const*>,std::__unordered_map_hasher<__CFString const*,std::__hash_value_type<__CFString const*,__CFString const*>,std::hash<__CFString const*>,std::equal_to<__CFString const*>,true>,std::__unordered_map_equal<__CFString const*,std::__hash_value_type<__CFString const*,__CFString const*>,std::equal_to<__CFString const*>,std::hash<__CFString const*>,true>,std::allocator<std::__hash_value_type<__CFString const*,__CFString const*>>>::__emplace_unique_key_args<__CFString const*,std::piecewise_construct_t const&,std::tuple<__CFString const*&&>,std::tuple<>>((float *)&v171, (unint64_t)@"Channel", buf)[3] = @"Width";
      if (v20 == 1)
      {
        *(void *)long long buf = @"Batch";
        std::__hash_table<std::__hash_value_type<__CFString const*,__CFString const*>,std::__unordered_map_hasher<__CFString const*,std::__hash_value_type<__CFString const*,__CFString const*>,std::hash<__CFString const*>,std::equal_to<__CFString const*>,true>,std::__unordered_map_equal<__CFString const*,std::__hash_value_type<__CFString const*,__CFString const*>,std::equal_to<__CFString const*>,std::hash<__CFString const*>,true>,std::allocator<std::__hash_value_type<__CFString const*,__CFString const*>>>::__emplace_unique_key_args<__CFString const*,std::piecewise_construct_t const&,std::tuple<__CFString const*&&>,std::tuple<>>((float *)&v171, (unint64_t)@"Batch", buf)[3] = @"Depth";
        *(void *)long long buf = @"Depth";
        std::__hash_table<std::__hash_value_type<__CFString const*,__CFString const*>,std::__unordered_map_hasher<__CFString const*,std::__hash_value_type<__CFString const*,__CFString const*>,std::hash<__CFString const*>,std::equal_to<__CFString const*>,true>,std::__unordered_map_equal<__CFString const*,std::__hash_value_type<__CFString const*,__CFString const*>,std::equal_to<__CFString const*>,std::hash<__CFString const*>,true>,std::allocator<std::__hash_value_type<__CFString const*,__CFString const*>>>::__emplace_unique_key_args<__CFString const*,std::piecewise_construct_t const&,std::tuple<__CFString const*&&>,std::tuple<>>((float *)&v171, (unint64_t)@"Depth", buf)[3] = @"Batch";
      }
      Espresso::ANECompilerEngine::mix_reshape_kernel::compile(Espresso::ANECompilerEngine::compiler *,Espresso::ANECompilerEngine::compiler::layer_graph_info_t const&)::$_1::operator()((uint64_t)buf, a3, (uint64_t)&v171);
      Espresso::ANECompilerEngine::compiler::unit_t::operator=((uint64_t)v179, (long long *)buf);
      Espresso::ANECompilerEngine::compiler::unit_t::~unit_t((id *)buf);
      std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::push_back[abi:ne180100]((uint64_t)&v174, (uint64_t)v179);
      if (v23 == 1) {
        uint64_t v59 = LODWORD(obj[0]);
      }
      else {
        uint64_t v59 = LODWORD(obj[1]);
      }
      if (v23 == 1) {
        uint64_t v60 = LODWORD(obj[1]);
      }
      else {
        uint64_t v60 = LODWORD(obj[0]);
      }
      Espresso::ANECompilerEngine::mix_reshape_kernel::compile(Espresso::ANECompilerEngine::compiler *,Espresso::ANECompilerEngine::compiler::layer_graph_info_t const&)::$_0::operator()((uint64_t)buf, a3, v60, v59, HIDWORD(obj[1]), v21, HIDWORD(obj[0]));
      std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::push_back[abi:ne180100]((uint64_t)&v174, (uint64_t)buf);
      Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&__str.__r_.__value_.__l.__data_, a3);
      long long v168 = 0u;
      long long v169 = 0u;
      int v170 = 1065353216;
      *(void *)&long long v158 = @"Channel";
      std::__hash_table<std::__hash_value_type<__CFString const*,__CFString const*>,std::__unordered_map_hasher<__CFString const*,std::__hash_value_type<__CFString const*,__CFString const*>,std::hash<__CFString const*>,std::equal_to<__CFString const*>,true>,std::__unordered_map_equal<__CFString const*,std::__hash_value_type<__CFString const*,__CFString const*>,std::equal_to<__CFString const*>,std::hash<__CFString const*>,true>,std::allocator<std::__hash_value_type<__CFString const*,__CFString const*>>>::__emplace_unique_key_args<__CFString const*,std::piecewise_construct_t const&,std::tuple<__CFString const*&&>,std::tuple<>>((float *)&v168, (unint64_t)@"Channel", &v158)[3] = @"Height";
      *(void *)&long long v158 = @"Height";
      std::__hash_table<std::__hash_value_type<__CFString const*,__CFString const*>,std::__unordered_map_hasher<__CFString const*,std::__hash_value_type<__CFString const*,__CFString const*>,std::hash<__CFString const*>,std::equal_to<__CFString const*>,true>,std::__unordered_map_equal<__CFString const*,std::__hash_value_type<__CFString const*,__CFString const*>,std::equal_to<__CFString const*>,std::hash<__CFString const*>,true>,std::allocator<std::__hash_value_type<__CFString const*,__CFString const*>>>::__emplace_unique_key_args<__CFString const*,std::piecewise_construct_t const&,std::tuple<__CFString const*&&>,std::tuple<>>((float *)&v168, (unint64_t)@"Height", &v158)[3] = @"Width";
      *(void *)&long long v158 = @"Width";
      std::__hash_table<std::__hash_value_type<__CFString const*,__CFString const*>,std::__unordered_map_hasher<__CFString const*,std::__hash_value_type<__CFString const*,__CFString const*>,std::hash<__CFString const*>,std::equal_to<__CFString const*>,true>,std::__unordered_map_equal<__CFString const*,std::__hash_value_type<__CFString const*,__CFString const*>,std::equal_to<__CFString const*>,std::hash<__CFString const*>,true>,std::allocator<std::__hash_value_type<__CFString const*,__CFString const*>>>::__emplace_unique_key_args<__CFString const*,std::piecewise_construct_t const&,std::tuple<__CFString const*&&>,std::tuple<>>((float *)&v168, (unint64_t)@"Width", &v158)[3] = @"Channel";
      if (v23 == 1)
      {
        *(void *)&long long v158 = @"Batch";
        std::__hash_table<std::__hash_value_type<__CFString const*,__CFString const*>,std::__unordered_map_hasher<__CFString const*,std::__hash_value_type<__CFString const*,__CFString const*>,std::hash<__CFString const*>,std::equal_to<__CFString const*>,true>,std::__unordered_map_equal<__CFString const*,std::__hash_value_type<__CFString const*,__CFString const*>,std::equal_to<__CFString const*>,std::hash<__CFString const*>,true>,std::allocator<std::__hash_value_type<__CFString const*,__CFString const*>>>::__emplace_unique_key_args<__CFString const*,std::piecewise_construct_t const&,std::tuple<__CFString const*&&>,std::tuple<>>((float *)&v168, (unint64_t)@"Batch", &v158)[3] = @"Depth";
        *(void *)&long long v158 = @"Depth";
        std::__hash_table<std::__hash_value_type<__CFString const*,__CFString const*>,std::__unordered_map_hasher<__CFString const*,std::__hash_value_type<__CFString const*,__CFString const*>,std::hash<__CFString const*>,std::equal_to<__CFString const*>,true>,std::__unordered_map_equal<__CFString const*,std::__hash_value_type<__CFString const*,__CFString const*>,std::equal_to<__CFString const*>,std::hash<__CFString const*>,true>,std::allocator<std::__hash_value_type<__CFString const*,__CFString const*>>>::__emplace_unique_key_args<__CFString const*,std::piecewise_construct_t const&,std::tuple<__CFString const*&&>,std::tuple<>>((float *)&v168, (unint64_t)@"Depth", &v158)[3] = @"Batch";
      }
      Espresso::ANECompilerEngine::mix_reshape_kernel::compile(Espresso::ANECompilerEngine::compiler *,Espresso::ANECompilerEngine::compiler::layer_graph_info_t const&)::$_1::operator()((uint64_t)&v158, a3, (uint64_t)&v168);
      Espresso::ANECompilerEngine::compiler::unit_t::operator=((uint64_t)&__str, &v158);
      Espresso::ANECompilerEngine::compiler::unit_t::~unit_t((id *)&v158);
      std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::push_back[abi:ne180100]((uint64_t)&v174, (uint64_t)&__str);
      std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&v168);
      Espresso::ANECompilerEngine::compiler::unit_t::~unit_t((id *)&__str.__r_.__value_.__l.__data_);
      Espresso::ANECompilerEngine::compiler::unit_t::~unit_t((id *)buf);
      std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&v171);
      Espresso::ANECompilerEngine::compiler::unit_t::~unit_t(v179);
    }
  }
  else
  {
    long long v171 = 0u;
    long long v172 = 0u;
    int v173 = 1065353216;
    v179[0] = @"Channel";
    std::__hash_table<std::__hash_value_type<__CFString const*,__CFString const*>,std::__unordered_map_hasher<__CFString const*,std::__hash_value_type<__CFString const*,__CFString const*>,std::hash<__CFString const*>,std::equal_to<__CFString const*>,true>,std::__unordered_map_equal<__CFString const*,std::__hash_value_type<__CFString const*,__CFString const*>,std::equal_to<__CFString const*>,std::hash<__CFString const*>,true>,std::allocator<std::__hash_value_type<__CFString const*,__CFString const*>>>::__emplace_unique_key_args<__CFString const*,std::piecewise_construct_t const&,std::tuple<__CFString const*&&>,std::tuple<>>((float *)&v171, (unint64_t)@"Channel", v179)[3] = @"Depth";
    v179[0] = @"Depth";
    std::__hash_table<std::__hash_value_type<__CFString const*,__CFString const*>,std::__unordered_map_hasher<__CFString const*,std::__hash_value_type<__CFString const*,__CFString const*>,std::hash<__CFString const*>,std::equal_to<__CFString const*>,true>,std::__unordered_map_equal<__CFString const*,std::__hash_value_type<__CFString const*,__CFString const*>,std::equal_to<__CFString const*>,std::hash<__CFString const*>,true>,std::allocator<std::__hash_value_type<__CFString const*,__CFString const*>>>::__emplace_unique_key_args<__CFString const*,std::piecewise_construct_t const&,std::tuple<__CFString const*&&>,std::tuple<>>((float *)&v171, (unint64_t)@"Depth", v179)[3] = @"Channel";
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t(v179, a3);
    Espresso::ANECompilerEngine::mix_reshape_kernel::compile(Espresso::ANECompilerEngine::compiler *,Espresso::ANECompilerEngine::compiler::layer_graph_info_t const&)::$_1::operator()((uint64_t)buf, a3, (uint64_t)&v171);
    Espresso::ANECompilerEngine::compiler::unit_t::operator=((uint64_t)v179, (long long *)buf);

    if (v201 < 0) {
      operator delete(__p);
    }
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v199;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v198;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    int v77 = v175;
    if ((unint64_t)v175 >= v176[0])
    {
      BOOL v78 = (std::string *)std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__push_back_slow_path<Espresso::ANECompilerEngine::compiler::unit_t const&>(&v174, (uint64_t)v179);
    }
    else
    {
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v175, (uint64_t)v179);
      BOOL v78 = v77 + 6;
    }
    int v175 = v78;
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)buf, a3);
    Espresso::ANECompilerEngine::mix_reshape_kernel::compile(Espresso::ANECompilerEngine::compiler *,Espresso::ANECompilerEngine::compiler::layer_graph_info_t const&)::$_0::operator()((uint64_t)&__str, a3, LODWORD(obj[0]), HIDWORD(obj[0]), LODWORD(obj[1]), HIDWORD(obj[1]), v21);
    Espresso::ANECompilerEngine::compiler::unit_t::operator=((uint64_t)buf, (long long *)&__str);

    if (v193 < 0) {
      operator delete(v192);
    }
    *(void *)&long long v158 = v191;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v158);
    *(void *)&long long v158 = &v190;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v158);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    double v94 = v175;
    if ((unint64_t)v175 >= v176[0])
    {
      uint64_t v95 = (std::string *)std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__push_back_slow_path<Espresso::ANECompilerEngine::compiler::unit_t const&>(&v174, (uint64_t)buf);
    }
    else
    {
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v175, (uint64_t)buf);
      uint64_t v95 = v94 + 6;
    }
    int v175 = v95;
    long long v168 = 0u;
    long long v169 = 0u;
    int v170 = 1065353216;
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)@"Channel";
    std::__hash_table<std::__hash_value_type<__CFString const*,__CFString const*>,std::__unordered_map_hasher<__CFString const*,std::__hash_value_type<__CFString const*,__CFString const*>,std::hash<__CFString const*>,std::equal_to<__CFString const*>,true>,std::__unordered_map_equal<__CFString const*,std::__hash_value_type<__CFString const*,__CFString const*>,std::equal_to<__CFString const*>,std::hash<__CFString const*>,true>,std::allocator<std::__hash_value_type<__CFString const*,__CFString const*>>>::__emplace_unique_key_args<__CFString const*,std::piecewise_construct_t const&,std::tuple<__CFString const*&&>,std::tuple<>>((float *)&v168, (unint64_t)@"Channel", &__str)[3] = @"Depth";
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)@"Depth";
    std::__hash_table<std::__hash_value_type<__CFString const*,__CFString const*>,std::__unordered_map_hasher<__CFString const*,std::__hash_value_type<__CFString const*,__CFString const*>,std::hash<__CFString const*>,std::equal_to<__CFString const*>,true>,std::__unordered_map_equal<__CFString const*,std::__hash_value_type<__CFString const*,__CFString const*>,std::equal_to<__CFString const*>,std::hash<__CFString const*>,true>,std::allocator<std::__hash_value_type<__CFString const*,__CFString const*>>>::__emplace_unique_key_args<__CFString const*,std::piecewise_construct_t const&,std::tuple<__CFString const*&&>,std::tuple<>>((float *)&v168, (unint64_t)@"Depth", &__str)[3] = @"Channel";
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&__str.__r_.__value_.__l.__data_, a3);
    Espresso::ANECompilerEngine::mix_reshape_kernel::compile(Espresso::ANECompilerEngine::compiler *,Espresso::ANECompilerEngine::compiler::layer_graph_info_t const&)::$_1::operator()((uint64_t)&v158, a3, (uint64_t)&v168);
    Espresso::ANECompilerEngine::compiler::unit_t::operator=((uint64_t)&__str, &v158);

    if (v164 < 0) {
      operator delete(v163);
    }
    int v177 = (std::__shared_weak_count **)v162;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v177);
    int v177 = &v160;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v177);
    if (SHIBYTE(v159) < 0) {
      operator delete((void *)v158);
    }
    uint64_t v96 = v175;
    if ((unint64_t)v175 >= v176[0])
    {
      int v97 = (std::string *)std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__push_back_slow_path<Espresso::ANECompilerEngine::compiler::unit_t const&>(&v174, (uint64_t)&__str);
    }
    else
    {
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v175, (uint64_t)&__str);
      int v97 = v96 + 6;
    }
    int v175 = v97;

    if (v193 < 0) {
      operator delete(v192);
    }
    *(void *)&long long v158 = v191;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v158);
    *(void *)&long long v158 = &v190;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v158);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&v168);

    if (v201 < 0) {
      operator delete(__p);
    }
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v199;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v198;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }

    if (v184 < 0) {
      operator delete(v183);
    }
    *(void *)long long buf = v182;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    *(void *)long long buf = v181;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    if (v180 < 0) {
      operator delete(v179[0]);
    }
    std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&v171);
  }
LABEL_51:
  atomic_fetch_add_explicit(&v157->__shared_owners_, 1uLL, memory_order_relaxed);
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::ANECompilerEngine::compiler::layer_graph_info_t::layer_graph_info_t((Espresso::ANECompilerEngine::compiler::layer_graph_info_t *)v179);
  id v187 = 0;
  id v186 = 0;
  uint64_t v188 = 0x100000000;
  id v35 = this[48];
  uint64_t v34 = (std::__shared_weak_count *)this[49];
  if (v34) {
    atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v35 || *(unsigned char *)((*((uint64_t (**)(void))this[40] + 13))() + 40)) {
    goto LABEL_249;
  }
  float v36 = v13[28];
  *(void *)&long long v171 = v35;
  *((void *)&v171 + 1) = v34;
  if (v34) {
    atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  BOOL v37 = (std::__shared_weak_count *)this[51];
  *(void *)&long long v168 = this[50];
  *((void *)&v168 + 1) = v37;
  if (v37) {
    atomic_fetch_add_explicit(&v37->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::ane_style_post_scale_bias((uint64_t)&v171, (uint64_t *)&v168, (uint64_t)&v158, v36);
  if (v37) {
    nitro::nitro_function::nitro_function(v37);
  }
  if (v34) {
    nitro::nitro_function::nitro_function(v34);
  }
  uint64_t v38 = *((unsigned int *)v35 + 2);
  std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v177, 2 * v38, 1, 1, 1);
  uint64_t v39 = (int)v38;
  long long v40 = this[50];
  int v41 = v38;
  if (v40) {
    int v41 = v40[2];
  }
  if (!*((unsigned char *)a2 + 384))
  {
    Espresso::blob<unsigned char,1>::make(&__str, 4 * v38);
    std::string v119 = *(int **)(__str.__r_.__value_.__r.__words[0] + 16);
    if ((int)v38 >= 1)
    {
      for (uint64_t i = 0; i != v38; ++i)
      {
        float v121 = *(float *)(v35[2] + i * 4);
        *(float *)&int v122 = ldexp(1.0, -(int)v161) * v121;
        v119[i] = v122;
      }
    }
    if (v38)
    {
      id v123 = v177[2];
      do
      {
        int v124 = *v119++;
        _S0 = v124;
        __asm { FCVT            H0, S0 }
        LOWORD(v123->__vftable) = _S0;
        id v123 = (std::__shared_weak_count *)((char *)v123 + 2);
        --v39;
      }
      while (v39);
    }
    if (this[50])
    {
      Espresso::blob<unsigned char,1>::make(buf, 4 * v41);
      uint64_t v127 = *(void *)buf;
      Espresso::blob<unsigned char,1>::make(buf, 2 * v41);
      uint64_t v147 = *(void *)buf;
      __int16 v128 = *(int **)(v127 + 16);
      if (v41 >= 1)
      {
        for (uint64_t j = 0; j != v41; ++j)
        {
          int v130 = v38 - 1;
          if ((int)v38 - 1 >= (int)j) {
            int v130 = j;
          }
          *(float *)&int v131 = *(float *)(*(void *)(v159 + 16) + 4 * j) * *(float *)(*(void *)(v158 + 16) + 4 * v130);
          v128[j] = v131;
          int v133 = (int)v161;
          int v132 = HIDWORD(v161);
          *(float *)&int v134 = ldexp(1.0, HIDWORD(v161) - (int)v161) * *(float *)&v131;
          v128[j] = v134;
          float v137 = ldexp(1.0, v133 - v132) * *(float *)&v134;
          if (v137 < -127.0 || v137 > 255.0)
          {
            id v139 = Espresso::espresso_os_log_subsystem(v135, v136);
            if (os_log_type_enabled(v139, OS_LOG_TYPE_ERROR))
            {
              double v140 = *(float *)&v128[j];
              *(_DWORD *)long long buf = 134218752;
              *(double *)&uint8_t buf[4] = v137;
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = HIDWORD(v161);
              *(_WORD *)&unsigned char buf[18] = 1024;
              *(_DWORD *)&buf[20] = v161;
              LOWORD(v198) = 2048;
              *(double *)((char *)&v198 + 2) = v140;
              _os_log_error_impl(&dword_1920CB000, v139, OS_LOG_TYPE_ERROR, "[ANEC::add_ane_scale_bias_unit] Shifted bias overflowing shifted_b=%f acc_bias_shift=%d post_right_shift=%d anebias=%f", buf, 0x22u);
            }
          }
        }
      }
      if (v41)
      {
        uint64_t v141 = v41;
        char v142 = *(_WORD **)(v147 + 16);
        do
        {
          int v143 = *v128++;
          _S0 = v143;
          __asm { FCVT            H0, S0 }
          *v142++ = _S0;
          --v141;
        }
        while (v141);
      }
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
    Espresso::not_implemented_error::not_implemented_error(exception);
  }
  int v42 = HIDWORD(v161);
  uint64_t v43 = (void **)v177;
  if (v38)
  {
    BOOL v44 = *(int **)(v158 + 16);
    unint64_t v45 = v177[2];
    do
    {
      int v46 = *v44++;
      _S0 = v46;
      __asm { FCVT            H0, S0 }
      LOWORD(v45->__vftable) = _S0;
      unint64_t v45 = (std::__shared_weak_count *)((char *)v45 + 2);
      --v39;
    }
    while (v39);
  }
  LODWORD(v145) = v42;
  if (v40)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(buf, 2 * v41, 1, 1, 1);
    unsigned int v150 = *(std::__shared_weak_count **)&buf[8];
    uint64_t v148 = *(void *)buf;
    if (v41)
    {
      uint64_t v51 = v41;
      uint64_t v52 = *(_WORD **)(*(void *)buf + 16);
      char v53 = *(int **)(v159 + 16);
      do
      {
        int v54 = *v53++;
        _S0 = v54;
        __asm { FCVT            H0, S0 }
        *v52++ = _S0;
        --v51;
      }
      while (v51);
    }
  }
  else
  {
    unsigned int v150 = 0;
    uint64_t v148 = 0;
  }
  int v61 = *((unsigned __int8 *)a2 + 552);
  long long v149 = (Espresso::ANECompilerEngine::compiler *)((char *)a2 + 128);
  BOOL v62 = v178;
  if (v178) {
    atomic_fetch_add_explicit(&v178->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v63 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v149, (const unsigned __int8 *)v43[2], *((int *)v43 + 2));
  if (v62) {
    nitro::nitro_function::nitro_function(v62);
  }
  id obja = objc_opt_new();
  if (*((unsigned char *)a2 + 121))
  {
    id v64 = *(id *)(v174 + 128);

    id obja = v64;
  }
  uint64_t v65 = objc_opt_new();
  unint64_t v66 = [NSNumber numberWithInt:v38];
  [v65 setObject:v66 forKeyedSubscript:@"ScaleCount"];

  unint64_t v67 = [NSNumber numberWithInt:v63];
  [v65 setObject:v67 forKeyedSubscript:@"ScaleOffset"];

  uint64_t v68 = NSNumber;
  if (v61) {
    uint64_t weights_file_index = 0;
  }
  else {
  uint64_t v70 = objc_msgSend(v68, "numberWithUnsignedLong:", weights_file_index, v145);
  }
  [v65 setObject:v70 forKeyedSubscript:@"ScaleIndex"];

  [v65 setObject:@"Float16" forKeyedSubscript:@"ScaleType"];
  int v71 = [NSNumber numberWithInt:v161];
  [obja setObject:v71 forKeyedSubscript:@"ScaleShift"];

  if (this[50])
  {
    if (v150) {
      atomic_fetch_add_explicit(&v150->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v72 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v149, *(const unsigned __int8 **)(v148 + 16), *(int *)(v148 + 8));
    if (v150) {
      nitro::nitro_function::nitro_function(v150);
    }
    char v73 = [NSNumber numberWithInt:*((unsigned int *)this[50] + 2)];
    [v65 setObject:v73 forKeyedSubscript:@"BiasCount"];

    float v74 = [NSNumber numberWithInt:v72];
    [v65 setObject:v74 forKeyedSubscript:@"BiasOffset"];

    int v75 = NSNumber;
    if (v61) {
      uint64_t v76 = 0;
    }
    else {
    int v83 = [v75 numberWithUnsignedLong:v76];
    }
    [v65 setObject:v83 forKeyedSubscript:@"BiasIndex"];

    [v65 setObject:@"Float16" forKeyedSubscript:@"BiasType"];
    float v84 = [NSNumber numberWithInt:v146];
    [obja setObject:v84 forKeyedSubscript:@"BiasShift"];
  }
  [obja setObject:v65 forKeyedSubscript:@"BiasScaleGroupData"];
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)buf, a3);
  unint64_t v85 = v175;
  if (v175 != (std::string *)v174)
  {
    unsigned int v86 = v175 - 6;
    uint64_t v87 = HIBYTE(v175[-6].__r_.__value_.__r.__words[2]);
    char v88 = v87;
    std::string::size_type size = v175[-6].__r_.__value_.__l.__size_;
    if ((v87 & 0x80u) == 0) {
      std::string::size_type v90 = HIBYTE(v175[-6].__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v90 = v175[-6].__r_.__value_.__l.__size_;
    }
    uint64_t v91 = buf[23];
    if (buf[23] < 0) {
      uint64_t v91 = *(void *)&buf[8];
    }
    if (v90 == v91)
    {
      if (buf[23] >= 0) {
        unint64_t v92 = buf;
      }
      else {
        unint64_t v92 = *(unsigned __int8 **)buf;
      }
      if ((char)v87 < 0)
      {
        std::string::pointer data = (const std::string::value_type *)v86->__r_.__value_.__r.__words[0];
        if (memcmp(v86->__r_.__value_.__l.__data_, v92, v175[-6].__r_.__value_.__l.__size_)) {
          goto LABEL_181;
        }
      }
      else if ((_BYTE)v87)
      {
        unint64_t v93 = v175 - 6;
        while (v93->__r_.__value_.__s.__data_[0] == *v92)
        {
          unint64_t v93 = (std::string *)((char *)v93 + 1);
          ++v92;
          if (!--v87) {
            goto LABEL_177;
          }
        }
        goto LABEL_178;
      }
LABEL_177:
      std::string::append(v85 - 6, "__@pre_scale_bias");
      char v88 = HIBYTE(v85[-6].__r_.__value_.__r.__words[2]);
    }
LABEL_178:
    if ((v88 & 0x80) == 0)
    {
      long long v99 = *(_OWORD *)&v86->__r_.__value_.__l.__data_;
      __str.__r_.__value_.__r.__words[2] = v85[-6].__r_.__value_.__r.__words[2];
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v99;
      goto LABEL_182;
    }
    std::string::pointer data = v85[-6].__r_.__value_.__l.__data_;
    std::string::size_type size = v85[-6].__r_.__value_.__l.__size_;
LABEL_181:
    std::string::__init_copy_ctor_external(&__str, data, size);
LABEL_182:
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v199, &__str, &v190, 1uLL);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
  }
  int v100 = v203;
  std::string v203 = @"GOC";

  objc_storeStrong(v204, obja);
  if (!*((unsigned char *)a2 + 121))
  {
    uint64_t v101 = v175;
    if ((unint64_t)v175 >= v176[0])
    {
      unint64_t v103 = 0x8E38E38E38E38E39 * (((uint64_t)v175 - v174) >> 4);
      if (v103 + 1 > 0x1C71C71C71C71C7) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v104 = 0x1C71C71C71C71C72 * ((v176[0] - v174) >> 4);
      if (v104 <= v103 + 1) {
        unint64_t v104 = v103 + 1;
      }
      if (0x8E38E38E38E38E39 * ((v176[0] - v174) >> 4) >= 0xE38E38E38E38E3) {
        unint64_t v105 = 0x1C71C71C71C71C7;
      }
      else {
        unint64_t v105 = v104;
      }
      *((void *)&v190 + 1) = v176;
      if (v105) {
        unint64_t v105 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v105);
      }
      else {
        uint64_t v106 = 0;
      }
      __str.__r_.__value_.__r.__words[0] = v105;
      __str.__r_.__value_.__l.__size_ = v105 + 144 * v103;
      __str.__r_.__value_.__r.__words[2] = __str.__r_.__value_.__l.__size_;
      *(void *)&long long v190 = v105 + 144 * v106;
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)__str.__r_.__value_.__l.__size_, (uint64_t)buf);
      __str.__r_.__value_.__r.__words[2] += 144;
      std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v174, &__str);
      unsigned int v102 = v175;
      std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&__str);
    }
    else
    {
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v175, (uint64_t)buf);
      unsigned int v102 = v101 + 6;
    }
    int v175 = v102;
  }

  if (v201 < 0) {
    operator delete(__p);
  }
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v199;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v198;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }

  if (v150) {
    nitro::nitro_function::nitro_function(v150);
  }
  if (v178) {
    nitro::nitro_function::nitro_function(v178);
  }
  if (v160) {
    nitro::nitro_function::nitro_function(v160);
  }
  if (*((void *)&v158 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v158 + 1));
  }
LABEL_249:
  if (v34) {
    nitro::nitro_function::nitro_function(v34);
  }

  if (v184 < 0) {
    operator delete(v183);
  }
  *(void *)long long buf = v182;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(void *)long long buf = v181;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (v180 < 0) {
    operator delete(v179[0]);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
  nitro::nitro_function::nitro_function(v157);
  (*((void (**)(char *, Espresso::ANECompilerEngine::compiler *, uint64_t *))this[40] + 4))((char *)this + 320, a2, &v174);
  v179[0] = &v174;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)v179);
  if (v153) {
    nitro::nitro_function::nitro_function(v153);
  }
  if (v154) {
    nitro::nitro_function::nitro_function(v154);
  }
LABEL_261:

  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
  if (v156) {
    nitro::nitro_function::nitro_function(v156);
  }
  nitro::nitro_function::nitro_function(v157);
}

void sub_192B14150(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, std::__shared_weak_count *a19, void *a20,std::__shared_weak_count *a21,std::__shared_weak_count *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56)
{
  if (v56) {
    nitro::nitro_function::nitro_function(v56);
  }
  nitro::nitro_function::nitro_function(a22);
  a56 = (uint64_t)&a53;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&a56);
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  if (a19) {
    nitro::nitro_function::nitro_function(a19);
  }

  if (v56) {
    nitro::nitro_function::nitro_function(v56);
  }
  if (a21) {
    nitro::nitro_function::nitro_function(a21);
  }
  nitro::nitro_function::nitro_function(a22);
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::mix_reshape_kernel::compile(Espresso::ANECompilerEngine::compiler *,Espresso::ANECompilerEngine::compiler::layer_graph_info_t const&)::$_0::operator()(uint64_t a1, id *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)a1, a2);
  id v14 = v13[15];
  v13[15] = @"Reshape";

  uint64_t v15 = objc_opt_new();
  int v16 = [NSNumber numberWithInt:a3];
  [v15 setObject:v16 forKeyedSubscript:@"ReshapedBatch"];

  unsigned int v17 = [NSNumber numberWithInt:a4];
  [v15 setObject:v17 forKeyedSubscript:@"ReshapedDepth"];

  __int32 v18 = [NSNumber numberWithInt:a5];
  [v15 setObject:v18 forKeyedSubscript:@"ReshapedChannel"];

  __int32 v19 = [NSNumber numberWithInt:a6];
  [v15 setObject:v19 forKeyedSubscript:@"ReshapedHeight"];

  __int32 v20 = [NSNumber numberWithInt:a7];
  [v15 setObject:v20 forKeyedSubscript:@"ReshapedWidth"];

  uint64_t v21 = *(void **)(a1 + 128);
  *(void *)(a1 + 128) = v15;
}

void sub_192B1471C(_Unwind_Exception *a1)
{
  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<__CFString const*,__CFString const*>,std::__unordered_map_hasher<__CFString const*,std::__hash_value_type<__CFString const*,__CFString const*>,std::hash<__CFString const*>,std::equal_to<__CFString const*>,true>,std::__unordered_map_equal<__CFString const*,std::__hash_value_type<__CFString const*,__CFString const*>,std::equal_to<__CFString const*>,std::hash<__CFString const*>,true>,std::allocator<std::__hash_value_type<__CFString const*,__CFString const*>>>::__emplace_unique_key_args<__CFString const*,std::piecewise_construct_t const&,std::tuple<__CFString const*&&>,std::tuple<>>(float *a1, unint64_t a2, void *a3)
{
  unint64_t v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  unint64_t v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  unint64_t v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  unint64_t v9 = *((void *)a1 + 1);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }
    else
    {
      unint64_t v3 = v8 & (v9 - 1);
    }
    float v11 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      for (uint64_t i = *v11; i; uint64_t i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == a2) {
            return i;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x20uLL);
  void *i = 0;
  i[1] = v8;
  i[2] = *a3;
  i[3] = 0;
  float v14 = (float)(unint64_t)(*((void *)a1 + 3) + 1);
  float v15 = a1[8];
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    BOOL v16 = 1;
    if (v9 >= 3) {
      BOOL v16 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v9);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      int8x8_t prime = (int8x8_t)v18;
    }
    else {
      int8x8_t prime = (int8x8_t)v17;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v9 = *((void *)a1 + 1);
    }
    if (*(void *)&prime > v9) {
      goto LABEL_30;
    }
    if (*(void *)&prime < v9)
    {
      unint64_t v26 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v9 < 3 || (uint8x8_t v27 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
      {
        unint64_t v26 = std::__next_prime(v26);
      }
      else
      {
        uint64_t v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2) {
          unint64_t v26 = v28;
        }
      }
      if (*(void *)&prime <= v26) {
        int8x8_t prime = (int8x8_t)v26;
      }
      if (*(void *)&prime >= v9)
      {
        unint64_t v9 = *((void *)a1 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          __int32 v20 = operator new(8 * *(void *)&prime);
          uint64_t v21 = *(void **)a1;
          *(void *)a1 = v20;
          if (v21) {
            operator delete(v21);
          }
          uint64_t v22 = 0;
          *((int8x8_t *)a1 + 1) = prime;
          do
            *(void *)(*(void *)a1 + 8 * v22++) = 0;
          while (*(void *)&prime != v22);
          int v23 = (void *)*((void *)a1 + 2);
          if (v23)
          {
            unint64_t v24 = v23[1];
            uint8x8_t v25 = (uint8x8_t)vcnt_s8(prime);
            v25.i16[0] = vaddlv_u8(v25);
            if (v25.u32[0] > 1uLL)
            {
              if (v24 >= *(void *)&prime) {
                v24 %= *(void *)&prime;
              }
            }
            else
            {
              v24 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)a1 + 8 * v24) = a1 + 4;
            unint64_t v29 = (void *)*v23;
            if (*v23)
            {
              do
              {
                unint64_t v30 = v29[1];
                if (v25.u32[0] > 1uLL)
                {
                  if (v30 >= *(void *)&prime) {
                    v30 %= *(void *)&prime;
                  }
                }
                else
                {
                  v30 &= *(void *)&prime - 1;
                }
                if (v30 != v24)
                {
                  if (!*(void *)(*(void *)a1 + 8 * v30))
                  {
                    *(void *)(*(void *)a1 + 8 * v30) = v23;
                    goto LABEL_55;
                  }
                  *int v23 = *v29;
                  *unint64_t v29 = **(void **)(*(void *)a1 + 8 * v30);
                  **(void **)(*(void *)a1 + 8 * v30) = v29;
                  unint64_t v29 = v23;
                }
                unint64_t v30 = v24;
LABEL_55:
                int v23 = v29;
                unint64_t v29 = (void *)*v29;
                unint64_t v24 = v30;
              }
              while (v29);
            }
          }
          unint64_t v9 = (unint64_t)prime;
          goto LABEL_59;
        }
        id v35 = *(void **)a1;
        *(void *)a1 = 0;
        if (v35) {
          operator delete(v35);
        }
        unint64_t v9 = 0;
        *((void *)a1 + 1) = 0;
      }
    }
LABEL_59:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  unint64_t v31 = *(void **)a1;
  uint64_t v32 = *(void **)(*(void *)a1 + 8 * v3);
  if (v32)
  {
    void *i = *v32;
LABEL_72:
    *uint64_t v32 = i;
    goto LABEL_73;
  }
  void *i = *((void *)a1 + 2);
  *((void *)a1 + 2) = i;
  v31[v3] = a1 + 4;
  if (*i)
  {
    unint64_t v33 = *(void *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v33 >= v9) {
        v33 %= v9;
      }
    }
    else
    {
      v33 &= v9 - 1;
    }
    uint64_t v32 = (void *)(*(void *)a1 + 8 * v33);
    goto LABEL_72;
  }
LABEL_73:
  ++*((void *)a1 + 3);
  return i;
}

void sub_192B14B7C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::mix_reshape_kernel::compile(Espresso::ANECompilerEngine::compiler *,Espresso::ANECompilerEngine::compiler::layer_graph_info_t const&)::$_1::operator()(uint64_t a1, id *a2, uint64_t a3)
{
  uint64_t v5 = Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)a1, a2);
  id v6 = v5[15];
  v5[15] = @"Transpose";

  unint64_t v7 = objc_opt_new();
  id v11 = (id)objc_opt_new();
  for (uint64_t i = *(void **)(a3 + 16); i; uint64_t i = (void *)*i)
  {
    unint64_t v9 = objc_opt_new();
    [v9 setObject:i[2] forKeyedSubscript:@"TransposeSourceDimension"];
    [v9 setObject:i[3] forKeyedSubscript:@"TransposeDestinationDimension"];
    [v11 addObject:v9];
  }
  [v7 setObject:v11 forKeyedSubscript:@"TransposeDimensions"];
  uint8x8_t v10 = *(void **)(a1 + 128);
  *(void *)(a1 + 128) = v7;
}

void sub_192B14C98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t(v10);
  _Unwind_Resume(a1);
}

void *std::vector<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>>::vector[abi:ne180100](void *a1, uint64_t *a2, unint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    std::vector<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>>::__vallocate[abi:ne180100](a1, a3);
    id v6 = (void *)a1[1];
    uint64_t v7 = 8 * a3;
    do
    {
      uint64_t v8 = *a2++;
      *v6++ = v8;
      v7 -= 8;
    }
    while (v7);
    a1[1] = v6;
  }
  return a1;
}

void sub_192B14D40(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::ANECompilerEngine::mix_reshape_kernel::~mix_reshape_kernel(Espresso::ANECompilerEngine::mix_reshape_kernel *this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANECompilerEngine::mix_reshape_kernel *)((char *)this + 320));
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t vars8;

  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANECompilerEngine::mix_reshape_kernel *)((char *)this + 320));

  Espresso::base_kernel::~base_kernel(this);
}

void non-virtual thunk to'Espresso::ANECompilerEngine::mix_reshape_like_kernel::~mix_reshape_like_kernel(Espresso::ANECompilerEngine::mix_reshape_like_kernel *this)
{
  uint64_t v1 = (Espresso::ANECompilerEngine::mix_reshape_like_kernel *)((char *)this - 328);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);

  JUMPOUT(0x192FF16B0);
}

{
  Espresso::base_kernel *v1;
  uint64_t vars8;

  uint64_t v1 = (Espresso::ANECompilerEngine::mix_reshape_like_kernel *)((char *)this - 328);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);

  Espresso::base_kernel::~base_kernel(v1);
}

void non-virtual thunk to'Espresso::ANECompilerEngine::mix_reshape_like_kernel::compile(Espresso::ANECompilerEngine::mix_reshape_like_kernel *this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3)
{
}

void Espresso::ANECompilerEngine::mix_reshape_like_kernel::compile(Espresso::ANECompilerEngine::mix_reshape_like_kernel *this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3)
{
}

int64x2_t *Espresso::ANECompilerEngine::mix_reshape_like_kernel::is_valid_for_engine(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 48);
  uint64_t v7 = *(std::__shared_weak_count **)(v6 + 80);
  if (v7)
  {
    uint64_t v8 = std::__shared_weak_count::lock(v7);
    if (v8)
    {
      unint64_t v9 = *(Espresso::net **)(v6 + 72);
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v8 = 0;
  }
  unint64_t v9 = 0;
LABEL_6:
  v43.__r_.__value_.__r.__words[0] = a3 + 72;
  uint8x8_t v10 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v9 + 56, (unint64_t *)(a3 + 72), (uint64_t)&std::piecewise_construct, (uint64_t **)&v43);
  uint64_t v11 = v10[3];
  if (0xAAAAAAAAAAAAAAABLL * ((v10[4] - v11) >> 3) < 2)
  {
LABEL_12:
    BOOL v16 = *(long long **)(a3 + 24);
    uint64_t v17 = *((void *)v16 + 4);
    long long v18 = v16[1];
    long long v37 = *v16;
    long long v38 = v18;
    uint64_t v39 = v17;
    std::string __p = 0;
    int v41 = 0;
    uint64_t v42 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *((const void **)v16 + 5), *((void *)v16 + 6), (uint64_t)(*((void *)v16 + 6) - *((void *)v16 + 5)) >> 2);
    uint64_t v31 = 0;
    LOWORD(v32) = 1;
    HIDWORD(v32) = 2;
    *(_OWORD *)unint64_t v29 = v37;
    uint64_t v30 = v38;
    Espresso::ANECompilerEngine::reshape_kernel::reshape_kernel((uint64_t)&v43, (uint64_t *)(a1 + 8), (uint64_t)v29);
    v43.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1EE3430B8;
    uint64_t v47 = &unk_1EE343218;
    if (__p)
    {
      int v41 = __p;
      operator delete(__p);
    }
    v29[0] = 0;
    v29[1] = 0;
    uint64_t v30 = 0;
    std::vector<Espresso::layer_shape>::__init_with_size[abi:ne180100]<Espresso::layer_shape*,Espresso::layer_shape*>(v29, *(long long **)a3, *(long long **)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 6);
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    std::vector<Espresso::layer_shape>::__init_with_size[abi:ne180100]<Espresso::layer_shape*,Espresso::layer_shape*>(&v31, *(long long **)(a3 + 24), *(long long **)(a3 + 32), (uint64_t)(*(void *)(a3 + 32) - *(void *)(a3 + 24)) >> 6);
    __int32 v19 = *(std::__shared_weak_count **)(a3 + 56);
    uint64_t v34 = *(void *)(a3 + 48);
    id v35 = v19;
    if (v19) {
      atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v36 = *(_OWORD *)(a3 + 64);
    __int32 v20 = (char *)v29[1];
    uint64_t v21 = (char *)v29[0] + 64;
    if ((char *)v29[0] + 64 != v29[1])
    {
      while (v20 != v21)
      {
        uint64_t v22 = (void *)*((void *)v20 - 3);
        if (v22)
        {
          *((void *)v20 - 2) = v22;
          operator delete(v22);
        }
        v20 -= 64;
      }
      v29[1] = v21;
    }
    int v23 = *(std::__shared_weak_count **)(a2 + 8);
    uint8x8_t v27 = *(int64x2_t **)a2;
    uint64_t v28 = v23;
    if (v23) {
      atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t is_valid_for_engine = (int64x2_t *)Espresso::ANECompilerEngine::mix_reshape_kernel::is_valid_for_engine((uint64_t)&v43, &v27, (Espresso::ANECompilerEngine *)v29);
    if (v28) {
      nitro::nitro_function::nitro_function(v28);
    }
    if (v35) {
      nitro::nitro_function::nitro_function(v35);
    }
    long long v49 = (void **)&v31;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v49);
    long long v49 = v29;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v49);
    Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANECompilerEngine::ane_kernel *)&v47);
    Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)&v43);
  }
  else
  {
    uint64_t v12 = 0;
    unint64_t v13 = 1;
    while (1)
    {
      uint64_t v14 = v11 + v12;
      float v15 = (char *)(v14 + 24);
      if (*(char *)(v14 + 47) < 0) {
        float v15 = *(char **)v15;
      }
      if (Espresso::net::is_blob_dynamic(v9, v15)) {
        break;
      }
      ++v13;
      uint64_t v11 = v10[3];
      v12 += 24;
      if (0xAAAAAAAAAAAAAAABLL * ((v10[4] - v11) >> 3) <= v13) {
        goto LABEL_12;
      }
    }
    unint64_t v26 = *(int64x2_t **)a2;
    uint64_t is_valid_for_engine = *(int64x2_t **)(a2 + 8);
    v48[0] = v26;
    v48[1] = is_valid_for_engine;
    if (is_valid_for_engine) {
      atomic_fetch_add_explicit(&is_valid_for_engine->i64[1], 1uLL, memory_order_relaxed);
    }
    std::operator+<char>();
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v43, (long long *)v29, a3, 0);
    Espresso::emit_kernel_validation_warning(v48, (Espresso::base_kernel::validate_for_engine_warning_t *)&v43);
    if (v46) {
      nitro::nitro_function::nitro_function(v46);
    }
    long long v49 = (void **)&v45;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v49);
    long long v49 = (void **)&v44;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v49);
    if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v43.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v30) < 0) {
      operator delete(v29[0]);
    }
    if (is_valid_for_engine)
    {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)is_valid_for_engine);
      uint64_t is_valid_for_engine = 0;
    }
  }
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  return is_valid_for_engine;
}

void sub_192B152B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,char a32)
{
  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((Espresso::base_kernel::validate_for_engine_warning_t *)&a32);
  if (a16 < 0) {
    operator delete(__p);
  }
  if (v33) {
    nitro::nitro_function::nitro_function(v33);
  }
  if (v32) {
    nitro::nitro_function::nitro_function(v32);
  }
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::mix_reshape_like_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
}

void Espresso::ANECompilerEngine::mix_reshape_like_kernel::~mix_reshape_like_kernel(Espresso::ANECompilerEngine::mix_reshape_like_kernel *this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANECompilerEngine::mix_reshape_like_kernel *)((char *)this + 328));
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t vars8;

  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANECompilerEngine::mix_reshape_like_kernel *)((char *)this + 328));

  Espresso::base_kernel::~base_kernel(this);
}

void non-virtual thunk to'Espresso::ANECompilerEngine::mix_softmax_kernel::~mix_softmax_kernel(Espresso::ANECompilerEngine::mix_softmax_kernel *this)
{
  uint64_t v1 = (Espresso::ANECompilerEngine::mix_softmax_kernel *)((char *)this - 312);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);

  JUMPOUT(0x192FF16B0);
}

{
  Espresso::base_kernel *v1;
  uint64_t vars8;

  uint64_t v1 = (Espresso::ANECompilerEngine::mix_softmax_kernel *)((char *)this - 312);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);

  Espresso::base_kernel::~base_kernel(v1);
}

void non-virtual thunk to'Espresso::ANECompilerEngine::mix_softmax_kernel::compile(Espresso::ANECompilerEngine::mix_softmax_kernel *this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3)
{
}

void Espresso::ANECompilerEngine::mix_softmax_kernel::compile(Espresso::ANECompilerEngine::mix_softmax_kernel *this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3)
{
  uint64_t v156 = *MEMORY[0x1E4F143B8];
  int v4 = (std::__shared_weak_count *)*((void *)a2 + 2);
  if (!v4 || (std::string v108 = std::__shared_weak_count::lock(v4)) == 0 || (v7 = *((void *)a2 + 1)) == 0) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Inconsistent state: null network");
  }
  if (!*(void *)(v7 + 576)) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Inconsistent state: blob_storage");
  }
  v144.__r_.__value_.__r.__words[0] = *((void *)a3 + 6);
  uint64_t v8 = (std::__shared_weak_count *)*((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7 + 136, (unsigned __int8 *)v144.__r_.__value_.__l.__data_, (long long **)&v144)+ 6);
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v107 = v8;
  v144.__r_.__value_.__r.__words[0] = (std::string::size_type)a3;
  unint64_t v9 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7 + 136, (unsigned __int8 *)a3, (long long **)&v144);
  uint64_t v11 = *((void *)v9 + 5);
  uint8x8_t v10 = (std::__shared_weak_count *)*((void *)v9 + 6);
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::ANECompilerEngine::ane_arch_allow_network_override(v7 + 472);
  uint64_t v106 = (Espresso::ANECompilerEngine *)objc_claimAutoreleasedReturnValue();
  if (Espresso::ANECompilerEngine::is_mix(v106, v12)) {
    Espresso::throw_exception_selector<Espresso::generic_error>("softmax_kernel::compile should not be called: The layer should have been transformed");
  }
  unint64_t v109 = objc_opt_new();
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t(v113, (id *)a3);
  unint64_t v13 = v121;
  float v121 = @"Softmax";

  Espresso::abstract_blob_container::shape((char *)&v144, v11);
  if ((SHIDWORD(v144.__r_.__value_.__r.__words[2]) >= 4 || HIDWORD(v144.__r_.__value_.__r.__words[2]) == -1)
    && *((unsigned char *)this + 307) == 0)
  {
    BOOL v16 = @"Channel";
  }
  else
  {
    BOOL v16 = @"Width";
  }
  [v109 setObject:v16 forKeyedSubscript:@"Dimension"];
  if (__p)
  {
    v147[0] = __p;
    operator delete(__p);
  }
  [v109 setObject:MEMORY[0x1E4F1CC38] forKeyedSubscript:@"SubtractMax"];
  objc_storeStrong(v122, v109);
  int v119 = 1;
  uint64_t v17 = v120;
  char v120 = @"Float16";

  Espresso::ANECompilerEngine::compiler::layer_graph_info_t::layer_graph_info_t(&v144, (const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *)v113);
  unsigned int v151 = v121;
  id v152 = v122[0];
  uint64_t v153 = (uint64_t)v122[1];
  unint64_t v111 = 0;
  unint64_t v112 = 0;
  unint64_t v110 = 0;
  *(void *)long long buf = &v110;
  buf[8] = 0;
  unint64_t v110 = (std::string *)operator new(0x90uLL);
  unint64_t v111 = v110;
  unint64_t v112 = (unint64_t)&v110[6];
  unint64_t v111 = (std::string *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>,Espresso::ANECompilerEngine::compiler::unit_t const*,Espresso::ANECompilerEngine::compiler::unit_t const*,Espresso::ANECompilerEngine::compiler::unit_t*>((uint64_t)&v112, (uint64_t)&v144, (uint64_t)&__str, (uint64_t)v110);

  if (v149 < 0) {
    operator delete(v148);
  }
  *(void *)long long buf = v147;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(void *)long long buf = v145;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v144.__r_.__value_.__l.__data_);
  }
  atomic_fetch_add_explicit(&v108->__shared_owners_, 1uLL, memory_order_relaxed);
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::ANECompilerEngine::compiler::layer_graph_info_t::layer_graph_info_t((Espresso::ANECompilerEngine::compiler::layer_graph_info_t *)&v144);
  id v152 = 0;
  unsigned int v151 = 0;
  uint64_t v153 = 0x100000000;
  uint64_t v18 = *((void *)this + 47);
  __int32 v19 = (std::__shared_weak_count *)*((void *)this + 48);
  if (v19) {
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v18 && !*(unsigned char *)((*(uint64_t (**)(void))(*((void *)this + 39) + 104))() + 40))
  {
    float v20 = *(float *)(v11 + 112);
    v126[0] = v18;
    v126[1] = v19;
    if (v19) {
      atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v21 = (std::__shared_weak_count *)*((void *)this + 50);
    v125[0] = *((void *)this + 49);
    v125[1] = (uint64_t)v21;
    if (v21) {
      atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    Espresso::ane_style_post_scale_bias((uint64_t)v126, v125, (uint64_t)&v127, v20);
    if (v21) {
      nitro::nitro_function::nitro_function(v21);
    }
    if (v19) {
      nitro::nitro_function::nitro_function(v19);
    }
    uint64_t v22 = *(unsigned int *)(v18 + 8);
    std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v123, 2 * v22, 1, 1, 1);
    uint64_t v23 = (int)v22;
    uint64_t v24 = *((void *)this + 49);
    int v25 = v22;
    if (v24) {
      int v25 = *(_DWORD *)(v24 + 8);
    }
    if (!*((unsigned char *)a2 + 384))
    {
      Espresso::blob<unsigned char,1>::make(&__str, 4 * v22);
      float v74 = *(int **)(__str.__r_.__value_.__r.__words[0] + 16);
      if ((int)v22 >= 1)
      {
        for (uint64_t i = 0; i != v22; ++i)
        {
          float v76 = *(float *)(*(void *)(v18 + 16) + i * 4);
          *(float *)&int v77 = ldexp(1.0, -v131) * v76;
          v74[i] = v77;
        }
      }
      if (v22)
      {
        BOOL v78 = *(_WORD **)(v123 + 16);
        do
        {
          int v79 = *v74++;
          _S0 = v79;
          __asm { FCVT            H0, S0 }
          *v78++ = _S0;
          --v23;
        }
        while (v23);
      }
      if (*((void *)this + 49))
      {
        Espresso::blob<unsigned char,1>::make(buf, 4 * v25);
        uint64_t v82 = *(void *)buf;
        Espresso::blob<unsigned char,1>::make(buf, 2 * v25);
        uint64_t v102 = *(void *)buf;
        int v83 = *(int **)(v82 + 16);
        if (v25 >= 1)
        {
          for (uint64_t j = 0; j != v25; ++j)
          {
            int v85 = v22 - 1;
            if ((int)v22 - 1 >= (int)j) {
              int v85 = j;
            }
            *(float *)&int v86 = *(float *)(*(void *)(v129 + 16) + 4 * j) * *(float *)(*(void *)(v127 + 16) + 4 * v85);
            v83[j] = v86;
            unsigned int v87 = v132;
            unsigned int v88 = v131;
            *(float *)&int v89 = ldexp(1.0, v132 - v131) * *(float *)&v86;
            v83[j] = v89;
            float v92 = ldexp(1.0, v88 - v87) * *(float *)&v89;
            if (v92 < -127.0 || v92 > 255.0)
            {
              double v94 = Espresso::espresso_os_log_subsystem(v90, v91);
              if (os_log_type_enabled(v94, OS_LOG_TYPE_ERROR))
              {
                double v95 = *(float *)&v83[j];
                *(_DWORD *)long long buf = 134218752;
                *(double *)&uint8_t buf[4] = v92;
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = v132;
                __int16 v134 = 1024;
                int v135 = v131;
                __int16 v136 = 2048;
                double v137 = v95;
                _os_log_error_impl(&dword_1920CB000, v94, OS_LOG_TYPE_ERROR, "[ANEC::add_ane_scale_bias_unit] Shifted bias overflowing shifted_b=%f acc_bias_shift=%d post_right_shift=%d anebias=%f", buf, 0x22u);
              }
            }
          }
        }
        if (v25)
        {
          uint64_t v96 = v25;
          int v97 = *(_WORD **)(v102 + 16);
          do
          {
            int v98 = *v83++;
            _S0 = v98;
            __asm { FCVT            H0, S0 }
            *v97++ = _S0;
            --v96;
          }
          while (v96);
        }
      }
      exception = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
      Espresso::not_implemented_error::not_implemented_error(exception);
    }
    unsigned int v100 = v132;
    uint64_t v26 = v123;
    if (v22)
    {
      uint8x8_t v27 = *(int **)(v127 + 16);
      uint64_t v28 = *(_WORD **)(v123 + 16);
      do
      {
        int v29 = *v27++;
        _S0 = v29;
        __asm { FCVT            H0, S0 }
        *v28++ = _S0;
        --v23;
      }
      while (v23);
    }
    if (v24)
    {
      std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(buf, 2 * v25, 1, 1, 1);
      unint64_t v104 = *(std::__shared_weak_count **)&buf[8];
      uint64_t v101 = *(void *)buf;
      if (v25)
      {
        uint64_t v34 = v25;
        id v35 = *(_WORD **)(*(void *)buf + 16);
        long long v36 = *(int **)(v129 + 16);
        do
        {
          int v37 = *v36++;
          _S0 = v37;
          __asm { FCVT            H0, S0 }
          *v35++ = _S0;
          --v34;
        }
        while (v34);
      }
    }
    else
    {
      unint64_t v104 = 0;
      uint64_t v101 = 0;
    }
    int v103 = *((unsigned __int8 *)a2 + 552);
    uint64_t v39 = v124;
    if (v124) {
      atomic_fetch_add_explicit(&v124->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v40 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler *)((char *)a2 + 128), *(const unsigned __int8 **)(v26 + 16), *(int *)(v26 + 8));
    if (v39) {
      nitro::nitro_function::nitro_function(v39);
    }
    obuint64_t j = (id)objc_opt_new();
    if (*((unsigned char *)a2 + 121))
    {
      id v41 = (id)v110[5].__r_.__value_.__l.__size_;

      obuint64_t j = v41;
    }
    uint64_t v42 = objc_opt_new();
    std::string v43 = [NSNumber numberWithInt:v22];
    [v42 setObject:v43 forKeyedSubscript:@"ScaleCount"];

    uint64_t v44 = [NSNumber numberWithInt:v40];
    [v42 setObject:v44 forKeyedSubscript:@"ScaleOffset"];

    uint64_t v45 = NSNumber;
    if (v103) {
      uint64_t weights_file_index = 0;
    }
    else {
    uint64_t v47 = [v45 numberWithUnsignedLong:weights_file_index];
    }
    [v42 setObject:v47 forKeyedSubscript:@"ScaleIndex"];

    [v42 setObject:@"Float16" forKeyedSubscript:@"ScaleType"];
    uint64_t v48 = [NSNumber numberWithInt:v131];
    [obj setObject:v48 forKeyedSubscript:@"ScaleShift"];

    if (*((void *)this + 49))
    {
      if (v104) {
        atomic_fetch_add_explicit(&v104->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v49 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler *)((char *)a2 + 128), *(const unsigned __int8 **)(v101 + 16), *(int *)(v101 + 8));
      if (v104) {
        nitro::nitro_function::nitro_function(v104);
      }
      uint64_t v50 = [NSNumber numberWithInt:*(unsigned int *)(*((void *)this + 49) + 8)];
      [v42 setObject:v50 forKeyedSubscript:@"BiasCount"];

      uint64_t v51 = [NSNumber numberWithInt:v49];
      [v42 setObject:v51 forKeyedSubscript:@"BiasOffset"];

      uint64_t v52 = NSNumber;
      if (v103) {
        uint64_t v53 = 0;
      }
      else {
      int v54 = [v52 numberWithUnsignedLong:v53];
      }
      [v42 setObject:v54 forKeyedSubscript:@"BiasIndex"];

      [v42 setObject:@"Float16" forKeyedSubscript:@"BiasType"];
      uint64_t v55 = [NSNumber numberWithInt:v100];
      [obj setObject:v55 forKeyedSubscript:@"BiasShift"];
    }
    [obj setObject:v42 forKeyedSubscript:@"BiasScaleGroupData"];
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)buf, (id *)a3);
    uint64_t v56 = v111;
    if (v111 == v110) {
      goto LABEL_93;
    }
    uint64_t v57 = v111 - 6;
    uint64_t v58 = HIBYTE(v111[-6].__r_.__value_.__r.__words[2]);
    char v59 = v58;
    std::string::size_type size = v111[-6].__r_.__value_.__l.__size_;
    if ((v58 & 0x80u) == 0) {
      std::string::size_type v61 = HIBYTE(v111[-6].__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v61 = v111[-6].__r_.__value_.__l.__size_;
    }
    uint64_t v62 = HIBYTE(v135);
    if (v135 < 0) {
      uint64_t v62 = *(void *)&buf[8];
    }
    if (v61 != v62) {
      goto LABEL_87;
    }
    if (v135 >= 0) {
      uint64_t v63 = buf;
    }
    else {
      uint64_t v63 = *(unsigned __int8 **)buf;
    }
    if ((char)v58 < 0)
    {
      std::string::pointer data = (const std::string::value_type *)v57->__r_.__value_.__r.__words[0];
      if (memcmp(v57->__r_.__value_.__l.__data_, v63, v111[-6].__r_.__value_.__l.__size_)) {
        goto LABEL_90;
      }
    }
    else if ((_BYTE)v58)
    {
      id v64 = v111 - 6;
      while (v64->__r_.__value_.__s.__data_[0] == *v63)
      {
        id v64 = (std::string *)((char *)v64 + 1);
        ++v63;
        if (!--v58) {
          goto LABEL_86;
        }
      }
      goto LABEL_87;
    }
LABEL_86:
    std::string::append(v56 - 6, "__@pre_scale_bias");
    char v59 = HIBYTE(v56[-6].__r_.__value_.__r.__words[2]);
LABEL_87:
    if ((v59 & 0x80) == 0)
    {
      long long v66 = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
      __str.__r_.__value_.__r.__words[2] = v56[-6].__r_.__value_.__r.__words[2];
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v66;
      goto LABEL_91;
    }
    std::string::pointer data = v56[-6].__r_.__value_.__l.__data_;
    std::string::size_type size = v56[-6].__r_.__value_.__l.__size_;
LABEL_90:
    std::string::__init_copy_ctor_external(&__str, data, size);
LABEL_91:
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v138, &__str, &v155, 1uLL);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
LABEL_93:
    unint64_t v67 = v142;
    char v142 = @"GOC";

    objc_storeStrong(&v143, obj);
    if (!*((unsigned char *)a2 + 121))
    {
      uint64_t v68 = v111;
      if ((unint64_t)v111 >= v112)
      {
        unint64_t v70 = 0x8E38E38E38E38E39 * (((char *)v111 - (char *)v110) >> 4);
        if (v70 + 1 > 0x1C71C71C71C71C7) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v71 = 0x1C71C71C71C71C72 * ((uint64_t)(v112 - (void)v110) >> 4);
        if (v71 <= v70 + 1) {
          unint64_t v71 = v70 + 1;
        }
        if (0x8E38E38E38E38E39 * ((uint64_t)(v112 - (void)v110) >> 4) >= 0xE38E38E38E38E3) {
          unint64_t v72 = 0x1C71C71C71C71C7;
        }
        else {
          unint64_t v72 = v71;
        }
        *((void *)&v155 + 1) = &v112;
        if (v72) {
          unint64_t v72 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v72);
        }
        else {
          uint64_t v73 = 0;
        }
        __str.__r_.__value_.__r.__words[0] = v72;
        __str.__r_.__value_.__l.__size_ = v72 + 144 * v70;
        __str.__r_.__value_.__r.__words[2] = __str.__r_.__value_.__l.__size_;
        *(void *)&long long v155 = v72 + 144 * v73;
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)__str.__r_.__value_.__l.__size_, (uint64_t)buf);
        __str.__r_.__value_.__r.__words[2] += 144;
        std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer((uint64_t *)&v110, &__str);
        unint64_t v69 = v111;
        std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&__str);
      }
      else
      {
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v111, (uint64_t)buf);
        unint64_t v69 = v68 + 6;
      }
      unint64_t v111 = v69;
    }

    if (v140 < 0) {
      operator delete(v139);
    }
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v138;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v136;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
    if (SHIBYTE(v135) < 0) {
      operator delete(*(void **)buf);
    }

    if (v104) {
      nitro::nitro_function::nitro_function(v104);
    }
    if (v124) {
      nitro::nitro_function::nitro_function(v124);
    }
    if (v130) {
      nitro::nitro_function::nitro_function(v130);
    }
    if (v128) {
      nitro::nitro_function::nitro_function(v128);
    }
  }
  if (v19) {
    nitro::nitro_function::nitro_function(v19);
  }

  if (v149 < 0) {
    operator delete(v148);
  }
  *(void *)long long buf = v147;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(void *)long long buf = v145;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v144.__r_.__value_.__l.__data_);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  nitro::nitro_function::nitro_function(v108);
  (*(void (**)(char *, Espresso::ANECompilerEngine::compiler *, std::string **))(*((void *)this + 39) + 32))((char *)this + 312, a2, &v110);
  v144.__r_.__value_.__r.__words[0] = (std::string::size_type)&v110;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&v144);

  if (v118 < 0) {
    operator delete(v117);
  }
  v144.__r_.__value_.__r.__words[0] = (std::string::size_type)&v116;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v144);
  v144.__r_.__value_.__r.__words[0] = (std::string::size_type)&v115;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v144);
  if (v114 < 0) {
    operator delete(v113[0]);
  }

  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  if (v107) {
    nitro::nitro_function::nitro_function(v107);
  }
  nitro::nitro_function::nitro_function(v108);
}

void sub_192B16244(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, std::__shared_weak_count *a18, std::__shared_weak_count *a19, void *a20,char a21,uint64_t a22,uint64_t a23,id a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53)
{
  if (v53) {
    nitro::nitro_function::nitro_function(v53);
  }
  nitro::nitro_function::nitro_function(a19);
  a53 = (uint64_t)&a21;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&a53);
  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t(&a24);

  if (v53) {
    nitro::nitro_function::nitro_function(v53);
  }
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  nitro::nitro_function::nitro_function(a19);
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::violations_from_alternates<ANECSoftmaxLayerDescAlternate>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = (CFTypeRef *)(a3 + 8);
    do
    {
      uint64_t v8 = (unint64_t *)(a3 + 632 * v6);
      if (*v8)
      {
        unint64_t v9 = 0;
        uint8x8_t v10 = v7;
        do
        {
          std::__hash_table<__CFString const*,Espresso::ANECompilerEngine::CFStringHasher,Espresso::ANECompilerEngine::CFStringEqualWrapper,std::allocator<__CFString const*>>::__emplace_unique_key_args<__CFString const*,__CFString const* const&>((float *)a1, v10, v10);
          ++v9;
          ++v10;
        }
        while (v9 < *v8);
      }
      ++v6;
      v7 += 79;
    }
    while (v6 != a2);
  }
}

void sub_192B165E0(_Unwind_Exception *a1)
{
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::mix_softmax_kernel::~mix_softmax_kernel(Espresso::ANECompilerEngine::mix_softmax_kernel *this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANECompilerEngine::mix_softmax_kernel *)((char *)this + 312));
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t vars8;

  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANECompilerEngine::mix_softmax_kernel *)((char *)this + 312));

  Espresso::base_kernel::~base_kernel(this);
}

void non-virtual thunk to'Espresso::ANECompilerEngine::mix_softmax_nd_kernel::~mix_softmax_nd_kernel(Espresso::ANECompilerEngine::mix_softmax_nd_kernel *this)
{
  uint64_t v1 = (Espresso::ANECompilerEngine::mix_softmax_nd_kernel *)((char *)this - 288);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);

  JUMPOUT(0x192FF16B0);
}

{
  Espresso::base_kernel *v1;
  uint64_t vars8;

  uint64_t v1 = (Espresso::ANECompilerEngine::mix_softmax_nd_kernel *)((char *)this - 288);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);

  Espresso::base_kernel::~base_kernel(v1);
}

void non-virtual thunk to'Espresso::ANECompilerEngine::mix_softmax_nd_kernel::compile(Espresso::ANECompilerEngine::mix_softmax_nd_kernel *this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3)
{
}

void Espresso::ANECompilerEngine::mix_softmax_nd_kernel::compile(Espresso::ANECompilerEngine::mix_softmax_nd_kernel *this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3)
{
  uint64_t v164 = *MEMORY[0x1E4F143B8];
  int v4 = (std::__shared_weak_count *)*((void *)a2 + 2);
  if (!v4 || (unint64_t v117 = std::__shared_weak_count::lock(v4)) == 0 || (v7 = *((void *)a2 + 1)) == 0) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Inconsistent state: null network");
  }
  if (!*(void *)(v7 + 576)) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Inconsistent state: blob_storage");
  }
  uint64_t v8 = v7 + 136;
  v152.__r_.__value_.__r.__words[0] = *((void *)a3 + 6);
  unint64_t v9 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7 + 136, (unsigned __int8 *)v152.__r_.__value_.__l.__data_, (long long **)&v152);
  uint8x8_t v10 = (const void *)*((void *)v9 + 5);
  uint64_t v11 = (std::__shared_weak_count *)*((void *)v9 + 6);
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v152.__r_.__value_.__r.__words[0] = (std::string::size_type)a3;
  uint64_t v12 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8, (unsigned __int8 *)a3, (long long **)&v152);
  uint64_t v14 = *((void *)v12 + 5);
  unint64_t v13 = (std::__shared_weak_count *)*((void *)v12 + 6);
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v116 = objc_opt_new();
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t(v121, (id *)a3);
  float v15 = v129;
  uint64_t v129 = @"Softmax";

  if (!v10
  {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Invalid blob container type.");
  }
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::abstract_blob_container::shape((char *)&v152, (uint64_t)v16);
  if (LODWORD(v152.__r_.__value_.__r.__words[2]) == 1) {
    unsigned int v17 = 4;
  }
  else {
    unsigned int v17 = 5;
  }
  if (HIDWORD(v152.__r_.__value_.__r.__words[2]) == -1) {
    uint64_t v18 = v17;
  }
  else {
    uint64_t v18 = HIDWORD(v152.__r_.__value_.__r.__words[2]);
  }
  if (__p)
  {
    v155[0] = __p;
    operator delete(__p);
  }
  int v19 = *((_DWORD *)this + 70);
  int v20 = v18 & (v19 >> 31);
  uint64_t v21 = (Espresso::ANECompilerEngine *)(v20 + v19);
  if (v20 + v19 < 0 || (int)v21 >= (int)v18) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Invalid value of the argument 'axis'.");
  }
  objc_msgSend(v116, "setObject:forKeyedSubscript:", Espresso::ANECompilerEngine::GetANECAxisForNDAxis(v21, v18, 0), @"Dimension");
  [v116 setObject:MEMORY[0x1E4F1CC38] forKeyedSubscript:@"SubtractMax"];
  objc_storeStrong(v130, v116);
  int v127 = 1;
  uint64_t v22 = v128;
  __int16 v128 = @"Float16";

  Espresso::ANECompilerEngine::compiler::layer_graph_info_t::layer_graph_info_t(&v152, (const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *)v121);
  uint64_t v159 = v129;
  id v160 = v130[0];
  uint64_t v161 = (uint64_t)v130[1];
  int v119 = 0;
  unint64_t v120 = 0;
  char v118 = 0;
  *(void *)long long buf = &v118;
  buf[8] = 0;
  char v118 = (std::string *)operator new(0x90uLL);
  int v119 = v118;
  unint64_t v120 = (unint64_t)&v118[6];
  int v119 = (std::string *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>,Espresso::ANECompilerEngine::compiler::unit_t const*,Espresso::ANECompilerEngine::compiler::unit_t const*,Espresso::ANECompilerEngine::compiler::unit_t*>((uint64_t)&v120, (uint64_t)&v152, (uint64_t)&__str, (uint64_t)v118);

  if (v157 < 0) {
    operator delete(v156);
  }
  *(void *)long long buf = v155;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(void *)long long buf = v153;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v152.__r_.__value_.__l.__data_);
  }
  atomic_fetch_add_explicit(&v117->__shared_owners_, 1uLL, memory_order_relaxed);
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::ANECompilerEngine::compiler::layer_graph_info_t::layer_graph_info_t((Espresso::ANECompilerEngine::compiler::layer_graph_info_t *)&v152);
  id v160 = 0;
  uint64_t v159 = 0;
  uint64_t v161 = 0x100000000;
  uint64_t v24 = *((void *)this + 44);
  uint64_t v23 = (std::__shared_weak_count *)*((void *)this + 45);
  if (v23) {
    atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v24 && !*(unsigned char *)((*(uint64_t (**)(void))(*((void *)this + 36) + 104))() + 40))
  {
    float v25 = *(float *)(v14 + 112);
    v134[0] = v24;
    v134[1] = v23;
    if (v23) {
      atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v26 = (std::__shared_weak_count *)*((void *)this + 47);
    v133[0] = *((void *)this + 46);
    v133[1] = (uint64_t)v26;
    if (v26) {
      atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    Espresso::ane_style_post_scale_bias((uint64_t)v134, v133, (uint64_t)&v135, v25);
    if (v26) {
      nitro::nitro_function::nitro_function(v26);
    }
    if (v23) {
      nitro::nitro_function::nitro_function(v23);
    }
    uint64_t v27 = *(unsigned int *)(v24 + 8);
    std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v131, 2 * v27, 1, 1, 1);
    uint64_t v28 = (int)v27;
    uint64_t v29 = *((void *)this + 46);
    int v30 = v27;
    if (v29) {
      int v30 = *(_DWORD *)(v29 + 8);
    }
    if (!*((unsigned char *)a2 + 384))
    {
      int v112 = v30;
      Espresso::blob<unsigned char,1>::make(&__str, 4 * v27);
      unint64_t v81 = *(int **)(__str.__r_.__value_.__r.__words[0] + 16);
      int v115 = v27 - 1;
      if ((int)v27 >= 1)
      {
        for (uint64_t i = 0; i != v27; ++i)
        {
          float v83 = *(float *)(*(void *)(v24 + 16) + i * 4);
          *(float *)&int v84 = ldexp(1.0, -v139) * v83;
          v81[i] = v84;
        }
      }
      if (v27)
      {
        int v85 = *(_WORD **)(v131 + 16);
        do
        {
          int v86 = *v81++;
          _S0 = v86;
          __asm { FCVT            H0, S0 }
          *v85++ = _S0;
          --v28;
        }
        while (v28);
      }
      if (*((void *)this + 46))
      {
        Espresso::blob<unsigned char,1>::make(buf, 4 * v112);
        uint64_t v89 = *(void *)buf;
        Espresso::blob<unsigned char,1>::make(buf, 2 * v112);
        uint64_t v109 = *(void *)buf;
        std::string::size_type v90 = *(int **)(v89 + 16);
        if (v112 >= 1)
        {
          for (uint64_t j = 0; j != v112; ++j)
          {
            int v92 = v115;
            if (v115 >= (int)j) {
              int v92 = j;
            }
            *(float *)&int v93 = *(float *)(*(void *)(v137 + 16) + 4 * j) * *(float *)(*(void *)(v135 + 16) + 4 * v92);
            v90[j] = v93;
            unsigned int v94 = v140;
            unsigned int v95 = v139;
            *(float *)&int v96 = ldexp(1.0, v140 - v139) * *(float *)&v93;
            v90[j] = v96;
            float v99 = ldexp(1.0, v95 - v94) * *(float *)&v96;
            if (v99 < -127.0 || v99 > 255.0)
            {
              uint64_t v101 = Espresso::espresso_os_log_subsystem(v97, v98);
              if (os_log_type_enabled(v101, OS_LOG_TYPE_ERROR))
              {
                double v102 = *(float *)&v90[j];
                *(_DWORD *)long long buf = 134218752;
                *(double *)&uint8_t buf[4] = v99;
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = v140;
                __int16 v142 = 1024;
                int v143 = v139;
                __int16 v144 = 2048;
                double v145 = v102;
                _os_log_error_impl(&dword_1920CB000, v101, OS_LOG_TYPE_ERROR, "[ANEC::add_ane_scale_bias_unit] Shifted bias overflowing shifted_b=%f acc_bias_shift=%d post_right_shift=%d anebias=%f", buf, 0x22u);
              }
            }
          }
        }
        if (v112)
        {
          uint64_t v103 = v112;
          unint64_t v104 = *(_WORD **)(v109 + 16);
          do
          {
            int v105 = *v90++;
            _S0 = v105;
            __asm { FCVT            H0, S0 }
            *v104++ = _S0;
            --v103;
          }
          while (v103);
        }
      }
      exception = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
      Espresso::not_implemented_error::not_implemented_error(exception);
    }
    unsigned int v31 = v140;
    uint64_t v32 = v131;
    if (v27)
    {
      uint64_t v33 = *(int **)(v135 + 16);
      uint64_t v34 = *(_WORD **)(v131 + 16);
      do
      {
        int v35 = *v33++;
        _S0 = v35;
        __asm { FCVT            H0, S0 }
        *v34++ = _S0;
        --v28;
      }
      while (v28);
    }
    unsigned int v107 = v31;
    if (v29)
    {
      int v41 = v30;
      std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(buf, 2 * v30, 1, 1, 1);
      unint64_t v111 = *(std::__shared_weak_count **)&buf[8];
      uint64_t v108 = *(void *)buf;
      if (v41)
      {
        uint64_t v42 = v41;
        std::string v43 = *(_WORD **)(*(void *)buf + 16);
        uint64_t v44 = *(int **)(v137 + 16);
        do
        {
          int v45 = *v44++;
          _S0 = v45;
          __asm { FCVT            H0, S0 }
          *v43++ = _S0;
          --v42;
        }
        while (v42);
      }
    }
    else
    {
      unint64_t v111 = 0;
      uint64_t v108 = 0;
    }
    int v110 = *((unsigned __int8 *)a2 + 552);
    uint64_t v47 = v132;
    if (v132) {
      atomic_fetch_add_explicit(&v132->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v48 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler *)((char *)a2 + 128), *(const unsigned __int8 **)(v32 + 16), *(int *)(v32 + 8));
    if (v47) {
      nitro::nitro_function::nitro_function(v47);
    }
    obuint64_t j = objc_opt_new();
    if (*((unsigned char *)a2 + 121))
    {
      id v49 = (id)v118[5].__r_.__value_.__l.__size_;

      obuint64_t j = v49;
    }
    char v114 = objc_opt_new();
    uint64_t v50 = [NSNumber numberWithInt:v27];
    [v114 setObject:v50 forKeyedSubscript:@"ScaleCount"];

    uint64_t v51 = [NSNumber numberWithInt:v48];
    [v114 setObject:v51 forKeyedSubscript:@"ScaleOffset"];

    uint64_t v52 = NSNumber;
    if (v110) {
      uint64_t weights_file_index = 0;
    }
    else {
    int v54 = [v52 numberWithUnsignedLong:weights_file_index];
    }
    [v114 setObject:v54 forKeyedSubscript:@"ScaleIndex"];

    [v114 setObject:@"Float16" forKeyedSubscript:@"ScaleType"];
    uint64_t v55 = [NSNumber numberWithInt:v139];
    [obj setObject:v55 forKeyedSubscript:@"ScaleShift"];

    if (*((void *)this + 46))
    {
      if (v111) {
        atomic_fetch_add_explicit(&v111->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v56 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler *)((char *)a2 + 128), *(const unsigned __int8 **)(v108 + 16), *(int *)(v108 + 8));
      if (v111) {
        nitro::nitro_function::nitro_function(v111);
      }
      uint64_t v57 = [NSNumber numberWithInt:*(unsigned int *)(*((void *)this + 46) + 8)];
      [v114 setObject:v57 forKeyedSubscript:@"BiasCount"];

      uint64_t v58 = [NSNumber numberWithInt:v56];
      [v114 setObject:v58 forKeyedSubscript:@"BiasOffset"];

      char v59 = NSNumber;
      if (v110) {
        uint64_t v60 = 0;
      }
      else {
      std::string::size_type v61 = [v59 numberWithUnsignedLong:v60];
      }
      [v114 setObject:v61 forKeyedSubscript:@"BiasIndex"];

      [v114 setObject:@"Float16" forKeyedSubscript:@"BiasType"];
      uint64_t v62 = [NSNumber numberWithInt:v107];
      [obj setObject:v62 forKeyedSubscript:@"BiasShift"];
    }
    [obj setObject:v114 forKeyedSubscript:@"BiasScaleGroupData"];
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)buf, (id *)a3);
    uint64_t v63 = v119;
    if (v119 == v118) {
      goto LABEL_95;
    }
    id v64 = v119 - 6;
    uint64_t v65 = HIBYTE(v119[-6].__r_.__value_.__r.__words[2]);
    char v66 = v65;
    std::string::size_type size = v119[-6].__r_.__value_.__l.__size_;
    if ((v65 & 0x80u) == 0) {
      std::string::size_type v68 = HIBYTE(v119[-6].__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v68 = v119[-6].__r_.__value_.__l.__size_;
    }
    uint64_t v69 = HIBYTE(v143);
    if (v143 < 0) {
      uint64_t v69 = *(void *)&buf[8];
    }
    if (v68 != v69) {
      goto LABEL_89;
    }
    if (v143 >= 0) {
      unint64_t v70 = buf;
    }
    else {
      unint64_t v70 = *(unsigned __int8 **)buf;
    }
    if ((char)v65 < 0)
    {
      std::string::pointer data = (const std::string::value_type *)v64->__r_.__value_.__r.__words[0];
      if (memcmp(v64->__r_.__value_.__l.__data_, v70, v119[-6].__r_.__value_.__l.__size_)) {
        goto LABEL_92;
      }
    }
    else if ((_BYTE)v65)
    {
      unint64_t v71 = v119 - 6;
      while (v71->__r_.__value_.__s.__data_[0] == *v70)
      {
        unint64_t v71 = (std::string *)((char *)v71 + 1);
        ++v70;
        if (!--v65) {
          goto LABEL_88;
        }
      }
      goto LABEL_89;
    }
LABEL_88:
    std::string::append(v63 - 6, "__@pre_scale_bias");
    char v66 = HIBYTE(v63[-6].__r_.__value_.__r.__words[2]);
LABEL_89:
    if ((v66 & 0x80) == 0)
    {
      long long v73 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
      __str.__r_.__value_.__r.__words[2] = v63[-6].__r_.__value_.__r.__words[2];
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v73;
      goto LABEL_93;
    }
    std::string::pointer data = v63[-6].__r_.__value_.__l.__data_;
    std::string::size_type size = v63[-6].__r_.__value_.__l.__size_;
LABEL_92:
    std::string::__init_copy_ctor_external(&__str, data, size);
LABEL_93:
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v146, &__str, &v163, 1uLL);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
LABEL_95:
    float v74 = v150;
    id v150 = @"GOC";

    objc_storeStrong(&v151, obj);
    if (!*((unsigned char *)a2 + 121))
    {
      int v75 = v119;
      if ((unint64_t)v119 >= v120)
      {
        unint64_t v77 = 0x8E38E38E38E38E39 * (((char *)v119 - (char *)v118) >> 4);
        if (v77 + 1 > 0x1C71C71C71C71C7) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v78 = 0x1C71C71C71C71C72 * ((uint64_t)(v120 - (void)v118) >> 4);
        if (v78 <= v77 + 1) {
          unint64_t v78 = v77 + 1;
        }
        if (0x8E38E38E38E38E39 * ((uint64_t)(v120 - (void)v118) >> 4) >= 0xE38E38E38E38E3) {
          unint64_t v79 = 0x1C71C71C71C71C7;
        }
        else {
          unint64_t v79 = v78;
        }
        *((void *)&v163 + 1) = &v120;
        if (v79) {
          unint64_t v79 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v79);
        }
        else {
          uint64_t v80 = 0;
        }
        __str.__r_.__value_.__r.__words[0] = v79;
        __str.__r_.__value_.__l.__size_ = v79 + 144 * v77;
        __str.__r_.__value_.__r.__words[2] = __str.__r_.__value_.__l.__size_;
        *(void *)&long long v163 = v79 + 144 * v80;
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)__str.__r_.__value_.__l.__size_, (uint64_t)buf);
        __str.__r_.__value_.__r.__words[2] += 144;
        std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer((uint64_t *)&v118, &__str);
        float v76 = v119;
        std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&__str);
      }
      else
      {
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v119, (uint64_t)buf);
        float v76 = v75 + 6;
      }
      int v119 = v76;
    }

    if (v148 < 0) {
      operator delete(v147);
    }
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v146;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v144;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
    if (SHIBYTE(v143) < 0) {
      operator delete(*(void **)buf);
    }

    if (v111) {
      nitro::nitro_function::nitro_function(v111);
    }
    if (v132) {
      nitro::nitro_function::nitro_function(v132);
    }
    if (v138) {
      nitro::nitro_function::nitro_function(v138);
    }
    if (v136) {
      nitro::nitro_function::nitro_function(v136);
    }
  }
  if (v23) {
    nitro::nitro_function::nitro_function(v23);
  }

  if (v157 < 0) {
    operator delete(v156);
  }
  *(void *)long long buf = v155;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(void *)long long buf = v153;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v152.__r_.__value_.__l.__data_);
  }
  if (v13) {
    nitro::nitro_function::nitro_function(v13);
  }
  nitro::nitro_function::nitro_function(v117);
  (*(void (**)(char *, Espresso::ANECompilerEngine::compiler *, std::string **))(*((void *)this + 36) + 32))((char *)this + 288, a2, &v118);
  v152.__r_.__value_.__r.__words[0] = (std::string::size_type)&v118;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&v152);
  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }

  if (v126 < 0) {
    operator delete(v125);
  }
  v152.__r_.__value_.__r.__words[0] = (std::string::size_type)&v124;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v152);
  v152.__r_.__value_.__r.__words[0] = (std::string::size_type)&v123;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v152);
  if (v122 < 0) {
    operator delete(v121[0]);
  }

  if (v13) {
    nitro::nitro_function::nitro_function(v13);
  }
  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
  nitro::nitro_function::nitro_function(v117);
}

void sub_192B1754C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, std::__shared_weak_count *a20,char a21,uint64_t a22,uint64_t a23,id a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void **a53)
{
  if (v54) {
    nitro::nitro_function::nitro_function(v54);
  }
  nitro::nitro_function::nitro_function(a20);
  a53 = (void **)&a21;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100](&a53);
  if (v53) {
    nitro::nitro_function::nitro_function(v53);
  }
  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t(&a24);

  if (v54) {
    nitro::nitro_function::nitro_function(v54);
  }
  if (v53) {
    nitro::nitro_function::nitro_function(v53);
  }
  nitro::nitro_function::nitro_function(a20);
  _Unwind_Resume(a1);
}

BOOL Espresso::ANECompilerEngine::mix_softmax_nd_kernel::is_valid_for_engine(uint64_t a1, int64x2_t **a2, Espresso::ANECompilerEngine *a3)
{
  uint64_t v6 = *((void *)a3 + 6);
  uint64_t v7 = *(std::__shared_weak_count **)(v6 + 80);
  if (v7)
  {
    uint64_t v8 = std::__shared_weak_count::lock(v7);
    if (v8) {
      unint64_t v9 = *(const Espresso::net **)(v6 + 72);
    }
    else {
      unint64_t v9 = 0;
    }
  }
  else
  {
    unint64_t v9 = 0;
    uint64_t v8 = 0;
  }
  Espresso::ANECompilerEngine::ane_arch_allow_network_override((uint64_t)v9 + 472);
  uint8x8_t v10 = (Espresso::ANECompilerEngine *)objc_claimAutoreleasedReturnValue();
  if (Espresso::ANECompilerEngine::is_mix(v10, v11))
  {
    uint64_t v12 = *a2;
    unint64_t v13 = a2[1];
    v70[0] = v12;
    v70[1] = v13;
    if (v13) {
      atomic_fetch_add_explicit(&v13->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "Softmax-ND not supported ");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v66, (long long *)&__p, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v70, (Espresso::base_kernel::validate_for_engine_warning_t *)&v66);
    if (v69) {
      nitro::nitro_function::nitro_function(v69);
    }
    v49[0] = (void **)v68;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v49);
    v49[0] = (void **)v67;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v49);
    if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v66.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v45) < 0) {
      operator delete(__p);
    }
    if (v13) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v13);
    }
    BOOL v14 = 0;
    goto LABEL_60;
  }
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v15 = *(void *)a3;
  uint64_t v16 = *(void *)(*(void *)a3 + 32);
  long long v17 = *(_OWORD *)(*(void *)a3 + 16);
  v60[0] = *(_OWORD *)*(void *)a3;
  v60[1] = v17;
  uint64_t v61 = v16;
  uint64_t v62 = 0;
  uint64_t v63 = 0;
  uint64_t v64 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v62, *(const void **)(v15 + 40), *(void *)(v15 + 48), (uint64_t)(*(void *)(v15 + 48) - *(void *)(v15 + 40)) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v65, v9, (const Espresso::layer_shape *)v60, 1);
  if (v62)
  {
    uint64_t v63 = v62;
    operator delete(v62);
  }
  if (v8)
  {
    nitro::nitro_function::nitro_function(v8);
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v18 = *((void *)a3 + 3);
  uint64_t v19 = *(void *)(v18 + 32);
  long long v20 = *(_OWORD *)(v18 + 16);
  v54[0] = *(_OWORD *)v18;
  v54[1] = v20;
  uint64_t v55 = v19;
  uint64_t v56 = 0;
  uint64_t v57 = 0;
  uint64_t v58 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v56, *(const void **)(v18 + 40), *(void *)(v18 + 48), (uint64_t)(*(void *)(v18 + 48) - *(void *)(v18 + 40)) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v59, v9, (const Espresso::layer_shape *)v54, 1);
  if (v56)
  {
    uint64_t v57 = v56;
    operator delete(v56);
  }
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  int v21 = *(_DWORD *)(*(void *)a3 + 20);
  if (v21 == -1)
  {
    if (*(_DWORD *)(*(void *)a3 + 16) == 1) {
      int v21 = 4;
    }
    else {
      int v21 = 5;
    }
  }
  int v22 = *(_DWORD *)(a1 + 280);
  int v23 = v21 & (v22 >> 31);
  uint64_t v24 = (Espresso::ANECompilerEngine *)(v23 + v22);
  if (v23 + v22 < 0 || (int)v24 >= v21) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Invalid value of the argument 'axis'.");
  }
  float v25 = v10;
  if (Espresso::ANECompilerEngine::blob_shape_ane_compatible(v65, v25))
  {
    if (Espresso::ANECompilerEngine::blob_shape_ane_compatible(v59, v25))
    {
      char v51 = 1;
      std::string::basic_string[abi:ne180100]<0>(v52, "Success");
    }
    else
    {
      char v51 = 0;
      std::string::basic_string[abi:ne180100]<0>(v52, "Output blob dimensions exceed ANE limit.");
    }
  }
  else
  {
    char v51 = 0;
    std::string::basic_string[abi:ne180100]<0>(v52, "Input blob dimensions exceed ANE limit.");
  }

  if (v51)
  {
    ANECSoftmaxLayerDescInitialize();
    v49[0] = (void **)1;
    v49[1] = (void **)Espresso::ANECompilerEngine::GetANECAxisForNDAxis(v24, v21, 0);
    unsigned int v26 = Espresso::ANECompilerEngine::bottom_compute_path(a3, v9, 0);
    if (v26 < 8 && ((0x97u >> v26) & 1) != 0)
    {
      unsigned int v31 = (void *)*((void *)&off_1E5747A70 + v26);
      ANECTensorDescInitialize();
      uint64_t v43 = 0;
      std::string __p = v31;
      *(void *)&long long v32 = v65[3];
      *((void *)&v32 + 1) = v65[4];
      long long v46 = v32;
      uint64_t v47 = v65[2];
      *(void *)&long long v32 = v65[0];
      *((void *)&v32 + 1) = v65[1];
      long long v45 = v32;
      uint64_t v42 = 0;
      Espresso::ANECompilerEngine::ane_kernel::get_ane_validator((Espresso::ANECompilerEngine::ane_kernel *)&v40, (NSString *)(a1 + 288), v25);
      int v33 = ANECValidateSoftmaxLayer();
      BOOL v14 = v33 == 0;
      if (v33)
      {
        uint64_t v34 = *a2;
        int v35 = a2[1];
        v39[0] = v34;
        v39[1] = v35;
        if (v35) {
          atomic_fetch_add_explicit(&v35->i64[1], 1uLL, memory_order_relaxed);
        }
        std::to_string(&v37, v33);
        long long v36 = std::string::insert(&v37, 0, "mix_softmax_nd_kernel: ANECValidateSoftmaxLayer failed with status ");
        std::string v38 = *v36;
        v36->__r_.__value_.__l.__size_ = 0;
        v36->__r_.__value_.__r.__words[2] = 0;
        v36->__r_.__value_.__r.__words[0] = 0;
        Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v66, (long long *)&v38, (uint64_t)a3, 0);
        Espresso::emit_kernel_validation_warning(v39, (Espresso::base_kernel::validate_for_engine_warning_t *)&v66);
        if (v69) {
          nitro::nitro_function::nitro_function(v69);
        }
        v71[0] = (void **)v68;
        std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v71);
        v71[0] = (void **)v67;
        std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v71);
        if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v66.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v38.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v37.__r_.__value_.__l.__data_);
        }
        if (v35) {
          nitro::nitro_function::nitro_function((std::__shared_weak_count *)v35);
        }
      }
      if (v41) {
        nitro::nitro_function::nitro_function(v41);
      }
      goto LABEL_58;
    }
    uint64_t v27 = *a2;
    uint64_t v28 = a2[1];
    v48[0] = v27;
    v48[1] = v28;
    if (v28) {
      atomic_fetch_add_explicit(&v28->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "Invalid compute path for softmax-nd input");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v66, (long long *)&__p, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v48, (Espresso::base_kernel::validate_for_engine_warning_t *)&v66);
    if (v69) {
      nitro::nitro_function::nitro_function(v69);
    }
    v38.__r_.__value_.__r.__words[0] = (std::string::size_type)v68;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v38);
    v38.__r_.__value_.__r.__words[0] = (std::string::size_type)v67;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v38);
    if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v66.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v45) < 0) {
      operator delete(__p);
    }
  }
  else
  {
    uint64_t v29 = *a2;
    uint64_t v28 = a2[1];
    v50[0] = v29;
    v50[1] = v28;
    if (v28) {
      atomic_fetch_add_explicit(&v28->i64[1], 1uLL, memory_order_relaxed);
    }
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v66, (long long *)v52, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v50, (Espresso::base_kernel::validate_for_engine_warning_t *)&v66);
    if (v69) {
      nitro::nitro_function::nitro_function(v69);
    }
    std::string __p = v68;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    std::string __p = v67;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v66.__r_.__value_.__l.__data_);
      if (!v28) {
        goto LABEL_57;
      }
      goto LABEL_56;
    }
  }
  if (v28) {
LABEL_56:
  }
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v28);
LABEL_57:
  BOOL v14 = 0;
LABEL_58:
  if (v53 < 0) {
    operator delete(v52[0]);
  }
LABEL_60:

  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  return v14;
}

void sub_192B17E18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,std::__shared_weak_count *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53)
{
  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((Espresso::base_kernel::validate_for_engine_warning_t *)(v56 - 232));
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (v55) {
    nitro::nitro_function::nitro_function(v55);
  }
  if (a26) {
    nitro::nitro_function::nitro_function(a26);
  }
  if (a53 < 0) {
    operator delete(a48);
  }

  if (v53) {
    nitro::nitro_function::nitro_function(v53);
  }
  _Unwind_Resume(a1);
}

void sub_192B17FA4()
{
  if (!v0) {
    JUMPOUT(0x192B17F9CLL);
  }
  JUMPOUT(0x192B17F94);
}

void Espresso::ANECompilerEngine::mix_softmax_nd_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
}

void Espresso::ANECompilerEngine::mix_softmax_nd_kernel::~mix_softmax_nd_kernel(Espresso::ANECompilerEngine::mix_softmax_nd_kernel *this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANECompilerEngine::mix_softmax_nd_kernel *)((char *)this + 288));
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t vars8;

  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANECompilerEngine::mix_softmax_nd_kernel *)((char *)this + 288));

  Espresso::base_kernel::~base_kernel(this);
}

void non-virtual thunk to'Espresso::ANECompilerEngine::mix_tile_kernel::~mix_tile_kernel(Espresso::ANECompilerEngine::mix_tile_kernel *this)
{
  uint64_t v2 = (Espresso::ANECompilerEngine::mix_tile_kernel *)((char *)this - 304);
  *((void *)this - 38) = &unk_1EE340A40;
  *(void *)this = &unk_1EE340BA0;
  unint64_t v3 = (std::__shared_weak_count *)*((void *)this + 28);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v2);

  JUMPOUT(0x192FF16B0);
}

{
  Espresso::base_kernel *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  uint64_t v2 = (Espresso::ANECompilerEngine::mix_tile_kernel *)((char *)this - 304);
  *((void *)this - 38) = &unk_1EE340A40;
  *(void *)this = &unk_1EE340BA0;
  unint64_t v3 = (std::__shared_weak_count *)*((void *)this + 28);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);

  Espresso::base_kernel::~base_kernel(v2);
}

void non-virtual thunk to'Espresso::ANECompilerEngine::mix_tile_kernel::compile(Espresso::ANECompilerEngine::mix_tile_kernel *this, Espresso::ANECompilerEngine::compiler *a2, void **a3)
{
}

void Espresso::ANECompilerEngine::mix_tile_kernel::compile(Espresso::ANECompilerEngine::mix_tile_kernel *this, Espresso::ANECompilerEngine::compiler *a2, void **a3)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  int v4 = (std::__shared_weak_count *)*((void *)a2 + 2);
  if (!v4 || (unsigned int v31 = std::__shared_weak_count::lock(v4)) == 0 || (v7 = *((void *)a2 + 1)) == 0) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Inconsistent state: null network");
  }
  if (!*(void *)(v7 + 576)) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Inconsistent state: blob_storage");
  }
  v38[0] = a3[6];
  uint64_t v8 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7 + 136, (unsigned __int8 *)v38[0], (long long **)v38);
  uint64_t v10 = *((void *)v8 + 5);
  unint64_t v9 = (std::__shared_weak_count *)*((void *)v8 + 6);
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v38[0] = a3;
  int v30 = v9;
  uint64_t v11 = (std::__shared_weak_count *)*((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7 + 136, (unsigned __int8 *)a3, (long long **)v38)+ 6);
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::ANECompilerEngine::ane_arch_allow_network_override(v7 + 472);
  uint64_t v29 = (Espresso::ANECompilerEngine *)objc_claimAutoreleasedReturnValue();
  if (Espresso::ANECompilerEngine::is_mix(v29, v12))
  {
    (*(void (**)(void, Espresso::ANECompilerEngine::compiler *, void **))(**((void **)this + 65) + 328))(*((void *)this + 65), a2, a3);
  }
  else
  {
    uint64_t v27 = v11;
    long long v32 = objc_opt_new();
    Espresso::abstract_blob_container::shape((char *)v38, v10);
    if (v39 == 1) {
      int v13 = 4;
    }
    else {
      int v13 = 5;
    }
    if (v40 == -1) {
      unsigned int v14 = v13;
    }
    else {
      unsigned int v14 = v40;
    }
    if (__p)
    {
      v43[0] = __p;
      operator delete(__p);
    }
    uint64_t v15 = objc_msgSend(NSNumber, "numberWithInt:", *((unsigned int *)this + 70), v27, v29);
    if (v14 >= 6) {
      Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Invalid axis or rank specified.");
    }
    [v32 setObject:v15 forKeyedSubscript:@"Width"];

    uint64_t v16 = [NSNumber numberWithInt:*((unsigned int *)this + 71)];
    [v32 setObject:v16 forKeyedSubscript:@"Height"];

    long long v17 = [NSNumber numberWithInt:*((unsigned int *)this + 72)];
    if (*(unsigned char *)(v7 + 1281)) {
      BOOL v18 = v14 == 5;
    }
    else {
      BOOL v18 = 0;
    }
    if (v18) {
      uint64_t v19 = @"Depth";
    }
    else {
      uint64_t v19 = @"Channel";
    }
    [v32 setObject:v17 forKeyedSubscript:v19];

    long long v20 = [NSNumber numberWithInt:*((unsigned int *)this + 73)];
    if (*(unsigned char *)(v7 + 1281)) {
      BOOL v21 = v14 == 5;
    }
    else {
      BOOL v21 = 0;
    }
    if (v21) {
      int v22 = @"Channel";
    }
    else {
      int v22 = @"Batch";
    }
    [v32 setObject:v20 forKeyedSubscript:v22];

    int v23 = [NSNumber numberWithInt:*((unsigned int *)this + 74)];
    if (*(unsigned char *)(v7 + 1281)) {
      BOOL v24 = v14 == 5;
    }
    else {
      BOOL v24 = 0;
    }
    if (v24) {
      float v25 = @"Batch";
    }
    else {
      float v25 = @"Depth";
    }
    [v32 setObject:v23 forKeyedSubscript:v25];

    Espresso::ANECompilerEngine::compiler::unit_t::unit_t(v38, a3);
    int v33 = 0;
    uint64_t v34 = 0;
    int v35 = 0;
    long long v36 = &v33;
    char v37 = 0;
    int v33 = (id *)operator new(0x90uLL);
    uint64_t v34 = (uint64_t)v33;
    int v35 = (char *)(v33 + 18);
    uint64_t v34 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>,Espresso::ANECompilerEngine::compiler::unit_t const*,Espresso::ANECompilerEngine::compiler::unit_t const*,Espresso::ANECompilerEngine::compiler::unit_t*>((uint64_t)&v35, (uint64_t)v38, (uint64_t)&v48, (uint64_t)v33);

    if (v44 < 0) {
      operator delete((void *)v43[4]);
    }
    long long v36 = (id **)v43;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v36);
    long long v36 = (id **)&v41;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v36);
    if (SHIBYTE(v40) < 0) {
      operator delete(v38[0]);
    }
    id v26 = v33[15];
    v33[15] = @"Tile";

    objc_storeStrong(v33 + 16, v32);
    (*(void (**)(char *, Espresso::ANECompilerEngine::compiler *, id **))(*((void *)this + 38) + 32))((char *)this + 304, a2, &v33);
    v38[0] = &v33;
    std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)v38);

    uint64_t v11 = v28;
  }

  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
  if (v30) {
    nitro::nitro_function::nitro_function(v30);
  }
  nitro::nitro_function::nitro_function(v31);
}

void sub_192B185A8(_Unwind_Exception *a1, std::__shared_weak_count *a2, void *a3, std::__shared_weak_count *a4, std::__shared_weak_count *a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)va);

  if (a2) {
    nitro::nitro_function::nitro_function(a2);
  }
  if (a4) {
    nitro::nitro_function::nitro_function(a4);
  }
  nitro::nitro_function::nitro_function(a5);
  _Unwind_Resume(a1);
}

uint64_t Espresso::ANECompilerEngine::mix_tile_kernel::is_valid_for_engine(uint64_t a1, int64x2_t **a2, Espresso::ANECompilerEngine *a3)
{
  uint64_t v6 = (_OWORD *)*((void *)a3 + 6);
  uint64_t v7 = (std::__shared_weak_count *)*((void *)v6 + 10);
  if (v7)
  {
    uint64_t v8 = std::__shared_weak_count::lock(v7);
    if (v8)
    {
      unint64_t v9 = (unsigned __int8 *)*((void *)v6 + 9);
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v8 = 0;
  }
  unint64_t v9 = 0;
LABEL_6:
  Espresso::ANECompilerEngine::ane_arch_allow_network_override((uint64_t)(v9 + 472));
  uint64_t v10 = (Espresso::ANECompilerEngine *)objc_claimAutoreleasedReturnValue();
  if (Espresso::ANECompilerEngine::is_mix(v10, v11))
  {
    uint64_t v12 = *(void *)(a1 + 520);
    int v13 = (std::__shared_weak_count *)a2[1];
    uint64_t v80 = *a2;
    unint64_t v81 = v13;
    if (v13) {
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v14 = (*(uint64_t (**)(uint64_t, int64x2_t **, Espresso::ANECompilerEngine *))(*(void *)v12 + 200))(v12, &v80, a3);
    uint64_t v15 = v81;
    if (!v81) {
      goto LABEL_167;
    }
LABEL_166:
    nitro::nitro_function::nitro_function(v15);
    goto LABEL_167;
  }
  if (*((void *)a3 + 1) - *(void *)a3 < 0x41uLL)
  {
    int v18 = v9[1281];
    unsigned int v19 = Espresso::ANECompilerEngine::bottom_compute_path(a3, (const Espresso::base_kernel::validate_for_engine_args_t *)v9, 0);
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v20 = *(void *)a3;
    uint64_t v21 = *(void *)(*(void *)a3 + 32);
    long long v22 = *(_OWORD *)(*(void *)a3 + 16);
    v69[0] = *(_OWORD *)*(void *)a3;
    v69[1] = v22;
    uint64_t v70 = v21;
    unint64_t v71 = 0;
    unint64_t v72 = 0;
    uint64_t v73 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v71, *(const void **)(v20 + 40), *(void *)(v20 + 48), (uint64_t)(*(void *)(v20 + 48) - *(void *)(v20 + 40)) >> 2);
    Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v74, (const Espresso::net *)v9, (const Espresso::layer_shape *)v69, 1);
    if (v71)
    {
      unint64_t v72 = v71;
      operator delete(v71);
    }
    if (v8) {
      nitro::nitro_function::nitro_function(v8);
    }
    Espresso::ANECompilerEngine::ane_kernel::get_ane_validator((Espresso::ANECompilerEngine::ane_kernel *)&v67, (NSString *)(a1 + 304), v10);
    unsigned int v48 = v19;
    ANECTileLayerDescInitialize();
    if ((*(_DWORD *)(*(void *)a3 + 20) + 1) > 6) {
LABEL_105:
    }
      Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Invalid axis or rank specified.");
    int v23 = (void **)*(int *)(a1 + 280);
    if (CFStringCompare(@"Width", @"Width", 0))
    {
      if (CFStringCompare(@"Width", @"Height", 0))
      {
        if (CFStringCompare(@"Width", @"Depth", 0))
        {
          if (CFStringCompare(@"Width", @"Channel", 0))
          {
            if (CFStringCompare(@"Width", @"Batch", 0))
            {
              int v50 = 0;
              goto LABEL_42;
            }
            uint64_t v62 = v23;
          }
          else
          {
            uint64_t v63 = v23;
          }
        }
        else
        {
          std::string v66 = v23;
        }
      }
      else
      {
        uint64_t v64 = v23;
      }
    }
    else
    {
      uint64_t v65 = v23;
    }
    int v50 = 1;
LABEL_42:
    if ((*(_DWORD *)(*(void *)a3 + 20) + 1) > 6) {
      goto LABEL_105;
    }
    BOOL v24 = (void **)*(int *)(a1 + 284);
    if (CFStringCompare(@"Height", @"Width", 0))
    {
      if (CFStringCompare(@"Height", @"Height", 0))
      {
        if (CFStringCompare(@"Height", @"Depth", 0))
        {
          if (CFStringCompare(@"Height", @"Channel", 0))
          {
            if (CFStringCompare(@"Height", @"Batch", 0))
            {
              int v49 = 0;
              goto LABEL_55;
            }
            uint64_t v62 = v24;
          }
          else
          {
            uint64_t v63 = v24;
          }
        }
        else
        {
          std::string v66 = v24;
        }
      }
      else
      {
        uint64_t v64 = v24;
      }
    }
    else
    {
      uint64_t v65 = v24;
    }
    int v49 = 1;
LABEL_55:
    unsigned int v25 = *(_DWORD *)(*(void *)a3 + 20);
    if (v25 == -1)
    {
      if (*(_DWORD *)(*(void *)a3 + 16) == 1) {
        unsigned int v25 = 4;
      }
      else {
        unsigned int v25 = 5;
      }
    }
    else if (v25 > 5)
    {
      goto LABEL_105;
    }
    if (v25 != 5 || v18 == 0) {
      CFStringRef v27 = @"Channel";
    }
    else {
      CFStringRef v27 = @"Depth";
    }
    uint64_t v28 = (void **)*(int *)(a1 + 288);
    if (CFStringCompare(v27, @"Width", 0))
    {
      if (CFStringCompare(v27, @"Height", 0))
      {
        if (CFStringCompare(v27, @"Depth", 0))
        {
          if (CFStringCompare(v27, @"Channel", 0))
          {
            if (CFStringCompare(v27, @"Batch", 0))
            {
              int v29 = 0;
              goto LABEL_79;
            }
            uint64_t v62 = v28;
          }
          else
          {
            uint64_t v63 = v28;
          }
        }
        else
        {
          std::string v66 = v28;
        }
      }
      else
      {
        uint64_t v64 = v28;
      }
    }
    else
    {
      uint64_t v65 = v28;
    }
    int v29 = 1;
LABEL_79:
    unsigned int v30 = *(_DWORD *)(*(void *)a3 + 20);
    if (v30 == -1)
    {
      if (*(_DWORD *)(*(void *)a3 + 16) == 1) {
        unsigned int v30 = 4;
      }
      else {
        unsigned int v30 = 5;
      }
    }
    else if (v30 > 5)
    {
      goto LABEL_105;
    }
    if (v30 != 5 || v18 == 0) {
      CFStringRef v32 = @"Batch";
    }
    else {
      CFStringRef v32 = @"Channel";
    }
    int v33 = (void **)*(int *)(a1 + 292);
    if (CFStringCompare(v32, @"Width", 0))
    {
      if (CFStringCompare(v32, @"Height", 0))
      {
        if (CFStringCompare(v32, @"Depth", 0))
        {
          if (CFStringCompare(v32, @"Channel", 0))
          {
            if (CFStringCompare(v32, @"Batch", 0))
            {
              int v34 = 0;
              goto LABEL_103;
            }
            uint64_t v62 = v33;
          }
          else
          {
            uint64_t v63 = v33;
          }
        }
        else
        {
          std::string v66 = v33;
        }
      }
      else
      {
        uint64_t v64 = v33;
      }
    }
    else
    {
      uint64_t v65 = v33;
    }
    int v34 = 1;
LABEL_103:
    unsigned int v35 = *(_DWORD *)(*(void *)a3 + 20);
    if (v35 == -1)
    {
      if (*(_DWORD *)(*(void *)a3 + 16) == 1) {
        unsigned int v35 = 4;
      }
      else {
        unsigned int v35 = 5;
      }
    }
    else if (v35 > 5)
    {
      goto LABEL_105;
    }
    if (v35 != 5 || v18 == 0) {
      CFStringRef v37 = @"Depth";
    }
    else {
      CFStringRef v37 = @"Batch";
    }
    std::string v38 = (void **)*(int *)(a1 + 296);
    if (CFStringCompare(v37, @"Width", 0))
    {
      if (CFStringCompare(v37, @"Height", 0))
      {
        if (CFStringCompare(v37, @"Depth", 0))
        {
          if (CFStringCompare(v37, @"Channel", 0))
          {
            if (CFStringCompare(v37, @"Batch", 0)) {
              goto LABEL_154;
            }
            uint64_t v62 = v38;
          }
          else
          {
            uint64_t v63 = v38;
          }
        }
        else
        {
          std::string v66 = v38;
        }
      }
      else
      {
        uint64_t v64 = v38;
      }
    }
    else
    {
      uint64_t v65 = v38;
    }
    if (v50 & v49 & v29 & v34)
    {
      uint64_t v59 = 0;
      uint64_t v60 = 0;
      ANECTensorDescInitialize();
      if (v48 < 8 && ((0x97u >> v48) & 1) != 0)
      {
        std::string __p = (void *)*((void *)&off_1E5747A70 + v48);
        *(void *)&long long v39 = v74[3];
        *((void *)&v39 + 1) = v74[4];
        long long v57 = v39;
        uint64_t v58 = v74[2];
        *(void *)&long long v39 = v74[0];
        *((void *)&v39 + 1) = v74[1];
        long long v56 = v39;
        int v40 = ANECValidateTileLayer();
        if (!v40)
        {
          uint64_t v14 = 1;
LABEL_165:
          uint64_t v15 = v68;
          if (!v68) {
            goto LABEL_167;
          }
          goto LABEL_166;
        }
        uint64_t v41 = a2[1];
        v54[0] = *a2;
        v54[1] = v41;
        if (v41) {
          atomic_fetch_add_explicit(&v41->i64[1], 1uLL, memory_order_relaxed);
        }
        std::to_string(&v53, v40);
        uint64_t v42 = std::string::insert(&v53, 0, "tile_kernel: ANECValidateTileLayer returned status ");
        v52[0] = *v42;
        v42->__r_.__value_.__l.__size_ = 0;
        v42->__r_.__value_.__r.__words[2] = 0;
        v42->__r_.__value_.__r.__words[0] = 0;
        Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v75, (long long *)v52, (uint64_t)a3, 0);
        Espresso::emit_kernel_validation_warning(v54, (Espresso::base_kernel::validate_for_engine_warning_t *)&v75);
        if (v78) {
          nitro::nitro_function::nitro_function(v78);
        }
        v82[0] = (void **)v77;
        std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v82);
        v82[0] = (void **)v76;
        std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v82);
        if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v75.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v52[0].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v52[0].__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v53.__r_.__value_.__l.__data_);
        }
        if (v41) {
          nitro::nitro_function::nitro_function((std::__shared_weak_count *)v41);
        }
        Espresso::ANECompilerEngine::violations_from_alternates<ANECTileLayerDescAlternate>((uint64_t)v52, v60, v59);
        uint64_t v43 = (uint64_t **)v52[0].__r_.__value_.__r.__words[2];
        if (v52[0].__r_.__value_.__r.__words[2])
        {
          do
          {
            char v44 = a2[1];
            v51[0] = *a2;
            v51[1] = v44;
            if (v44) {
              atomic_fetch_add_explicit(&v44->i64[1], 1uLL, memory_order_relaxed);
            }
            std::string::basic_string[abi:ne180100]<0>(&v53, (char *)[v43[2] UTF8String]);
            Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v75, (long long *)&v53, (uint64_t)a3, 0);
            Espresso::emit_kernel_validation_warning(v51, (Espresso::base_kernel::validate_for_engine_warning_t *)&v75);
            if (v78) {
              nitro::nitro_function::nitro_function(v78);
            }
            v82[0] = (void **)v77;
            std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v82);
            v82[0] = (void **)v76;
            std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v82);
            if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v75.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v53.__r_.__value_.__l.__data_);
            }
            if (v44) {
              nitro::nitro_function::nitro_function((std::__shared_weak_count *)v44);
            }
            uint64_t v43 = (uint64_t **)*v43;
          }
          while (v43);
        }
        std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)v52);
      }
LABEL_164:
      uint64_t v14 = 0;
      goto LABEL_165;
    }
LABEL_154:
    id v45 = *a2;
    id v46 = a2[1];
    v61[0] = v45;
    v61[1] = v46;
    if (v46) {
      atomic_fetch_add_explicit(&v46->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "tile_kernel: tile axis is not supported");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v75, (long long *)&__p, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v61, (Espresso::base_kernel::validate_for_engine_warning_t *)&v75);
    if (v78) {
      nitro::nitro_function::nitro_function(v78);
    }
    v52[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v77;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v52);
    v52[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v76;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v52);
    if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v75.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v56) < 0) {
      operator delete(__p);
    }
    if (v46) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v46);
    }
    goto LABEL_164;
  }
  uint64_t v16 = *a2;
  long long v17 = a2[1];
  v79[0] = v16;
  v79[1] = v17;
  if (v17) {
    atomic_fetch_add_explicit(&v17->i64[1], 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "tile_kernel: dynamic tiling is not supported");
  Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v75, (long long *)&__p, (uint64_t)a3, 0);
  Espresso::emit_kernel_validation_warning(v79, (Espresso::base_kernel::validate_for_engine_warning_t *)&v75);
  if (v78) {
    nitro::nitro_function::nitro_function(v78);
  }
  uint64_t v62 = (void **)v77;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v62);
  uint64_t v62 = (void **)v76;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v62);
  if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v75.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v56) < 0) {
    operator delete(__p);
  }
  if (v17) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v17);
  }
  uint64_t v14 = 0;
LABEL_167:

  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  return v14;
}

void sub_192B1907C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,std::__shared_weak_count *a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58)
{
  if (a51) {
    nitro::nitro_function::nitro_function(a51);
  }

  if (v58) {
    nitro::nitro_function::nitro_function(v58);
  }
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::violations_from_alternates<ANECTileLayerDescAlternate>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = (CFTypeRef *)(a3 + 8);
    do
    {
      uint64_t v8 = (unint64_t *)(a3 + 624 * v6);
      if (*v8)
      {
        unint64_t v9 = 0;
        uint64_t v10 = v7;
        do
        {
          std::__hash_table<__CFString const*,Espresso::ANECompilerEngine::CFStringHasher,Espresso::ANECompilerEngine::CFStringEqualWrapper,std::allocator<__CFString const*>>::__emplace_unique_key_args<__CFString const*,__CFString const* const&>((float *)a1, v10, v10);
          ++v9;
          ++v10;
        }
        while (v9 < *v8);
      }
      ++v6;
      v7 += 78;
    }
    while (v6 != a2);
  }
}

void sub_192B192BC(_Unwind_Exception *a1)
{
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::mix_tile_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
}

void Espresso::ANECompilerEngine::mix_tile_kernel::~mix_tile_kernel(Espresso::ANECompilerEngine::mix_tile_kernel *this)
{
  *(void *)this = &unk_1EE340A40;
  uint64_t v2 = (Espresso::ANECompilerEngine::mix_tile_kernel *)((char *)this + 304);
  *((void *)this + 38) = &unk_1EE340BA0;
  unint64_t v3 = (std::__shared_weak_count *)*((void *)this + 66);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(v2);
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  Espresso::ANECompilerEngine::ane_kernel *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EE340A40;
  uint64_t v2 = (Espresso::ANECompilerEngine::mix_tile_kernel *)((char *)this + 304);
  *((void *)this + 38) = &unk_1EE340BA0;
  unint64_t v3 = (std::__shared_weak_count *)*((void *)this + 66);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(v2);

  Espresso::base_kernel::~base_kernel(this);
}

void non-virtual thunk to'Espresso::ANECompilerEngine::mix_instancenorm_1d_kernel::~mix_instancenorm_1d_kernel(Espresso::ANECompilerEngine::mix_instancenorm_1d_kernel *this)
{
  uint64_t v1 = (Espresso::ANECompilerEngine::mix_instancenorm_1d_kernel *)((char *)this - 336);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::generic_instancenorm_1d_kernel::~generic_instancenorm_1d_kernel(v1);

  JUMPOUT(0x192FF16B0);
}

{
  Espresso::generic_instancenorm_1d_kernel *v1;
  uint64_t vars8;

  uint64_t v1 = (Espresso::ANECompilerEngine::mix_instancenorm_1d_kernel *)((char *)this - 336);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);

  Espresso::generic_instancenorm_1d_kernel::~generic_instancenorm_1d_kernel(v1);
}

void non-virtual thunk to'Espresso::ANECompilerEngine::mix_instancenorm_1d_kernel::compile(Espresso::ANECompilerEngine::mix_instancenorm_1d_kernel *this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3)
{
}

void Espresso::ANECompilerEngine::mix_instancenorm_1d_kernel::compile(Espresso::ANECompilerEngine::mix_instancenorm_1d_kernel *this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3)
{
  v219[3] = *(id *)MEMORY[0x1E4F143B8];
  int v4 = (std::__shared_weak_count *)*((void *)a2 + 2);
  if (!v4 || (v170 = std::__shared_weak_count::lock(v4)) == 0 || (uint64_t v7 = *((void *)a2 + 1)) == 0) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Inconsistent state: null network");
  }
  if (!*(void *)(v7 + 576)) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Inconsistent state: blob_storage");
  }
  uint64_t v8 = v7 + 136;
  v195.__r_.__value_.__r.__words[0] = *((void *)a3 + 6);
  unint64_t v9 = (std::__shared_weak_count *)*((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7 + 136, (unsigned __int8 *)v195.__r_.__value_.__l.__data_, (long long **)&v195)+ 6);
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v195.__r_.__value_.__r.__words[0] = (std::string::size_type)a3;
  long long v169 = v9;
  uint64_t v10 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8, (unsigned __int8 *)a3, (long long **)&v195);
  uint64_t v11 = (std::__shared_weak_count *)*((void *)v10 + 6);
  id v167 = (float *)*((void *)v10 + 5);
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v171 = v11;
  obuint64_t j = (id)objc_opt_new();
  uint64_t v183 = 0;
  char v184 = 0;
  unint64_t v185 = 0;
  *((void *)&v207 + 1) = @"Width";
  uint64_t v12 = [MEMORY[0x1E4F1C978] arrayWithObjects:(char *)&v207 + 8 count:1];
  [obj setObject:v12 forKeyedSubscript:@"Dimension"];

  if (*((_DWORD *)this + 70))
  {
    _S0 = *((_DWORD *)this + 71);
    __asm { FCVT            H0, S0 }
    [NSNumber numberWithShort:(__int16)_S0];
  }
  else
  {
    [NSNumber numberWithShort:0];
  int v18 = };
  [obj setObject:v18 forKeyedSubscript:@"Epsilon"];

  Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&__p.__r_.__value_.__l.__data_, (id *)a3);
  unsigned int v19 = v181;
  long long v181 = @"InstanceNormalization";

  objc_storeStrong(&v182, obj);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__str, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string __str = __p;
  }
  std::string::basic_string[abi:ne180100]<0>(&v173, "");
  if (*((void *)this + 38) || *((void *)this + 40))
  {
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t size = __str.__r_.__value_.__l.__size_;
    }
    uint64_t v21 = &v195;
    std::string::basic_string[abi:ne180100]((uint64_t)&v195, size + 13);
    if ((v195.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v21 = (std::string *)v195.__r_.__value_.__r.__words[0];
    }
    if (size)
    {
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_str = &__str;
      }
      else {
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      }
      memmove(v21, p_str, size);
    }
    strcpy((char *)v21 + size, "_instancenorm");
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::string __p = v195;
    std::string::operator=(&v173, &__p);
  }
  int v23 = v184;
  if ((unint64_t)v184 >= v185)
  {
    unint64_t v25 = 0x8E38E38E38E38E39 * (((uint64_t)v184 - v183) >> 4);
    if (v25 + 1 > 0x1C71C71C71C71C7) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v26 = 0x1C71C71C71C71C72 * ((uint64_t)(v185 - v183) >> 4);
    if (v26 <= v25 + 1) {
      unint64_t v26 = v25 + 1;
    }
    if (0x8E38E38E38E38E39 * ((uint64_t)(v185 - v183) >> 4) >= 0xE38E38E38E38E3) {
      unint64_t v27 = 0x1C71C71C71C71C7;
    }
    else {
      unint64_t v27 = v26;
    }
    int v197 = (std::__shared_weak_count *)&v185;
    if (v27) {
      unint64_t v27 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v27);
    }
    else {
      uint64_t v28 = 0;
    }
    v195.__r_.__value_.__r.__words[0] = v27;
    v195.__r_.__value_.__l.__size_ = v27 + 144 * v25;
    v195.__r_.__value_.__r.__words[2] = v195.__r_.__value_.__l.__size_;
    unint64_t v196 = v27 + 144 * v28;
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)v195.__r_.__value_.__l.__size_, (uint64_t)&__p);
    v195.__r_.__value_.__r.__words[2] += 144;
    std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v183, &v195);
    BOOL v24 = v184;
    std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&v195);
  }
  else
  {
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v184, (uint64_t)&__p);
    BOOL v24 = v23 + 6;
  }
  char v184 = v24;
  if (*((void *)this + 38))
  {
    v195.__r_.__value_.__r.__words[0] = *((void *)a3 + 6);
    int v29 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8, (unsigned __int8 *)v195.__r_.__value_.__l.__data_, (long long **)&v195);
    Espresso::abstract_blob_container::shape(buf, *((void *)v29 + 5));
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v189, *(_DWORD *)(*((void *)this + 38) + 8), 1, 1, 1);
    unint64_t v30 = v189;
    memcpy(*(void **)(v189 + 24), *(const void **)(*((void *)this + 38) + 16), 4 * *(int *)(*((void *)this + 38) + 8));
    if (*((char *)this + 199) >= 0) {
      size_t v31 = *((unsigned __int8 *)this + 199);
    }
    else {
      size_t v31 = *((void *)this + 23);
    }
    CFStringRef v32 = &v191;
    std::string::basic_string[abi:ne180100]((uint64_t)&v191, v31 + 13);
    if ((v191.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      CFStringRef v32 = (std::string *)v191.__r_.__value_.__r.__words[0];
    }
    if (v31)
    {
      if (*((char *)this + 199) >= 0) {
        int v33 = (char *)this + 176;
      }
      else {
        int v33 = (char *)*((void *)this + 22);
      }
      memmove(v32, v33, v31);
    }
    strcpy((char *)v32 + v31, "_gamma_vector");
    if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v195, v191.__r_.__value_.__l.__data_, v191.__r_.__value_.__l.__size_);
    }
    else {
      std::string v195 = v191;
    }
    unint64_t v196 = v30;
    int v197 = v190;
    if (v190) {
      atomic_fetch_add_explicit(&v190->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::__tree<std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>>>::__emplace_unique_key_args<std::string,std::string&,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>((uint64_t **)a2 + 34, &v191, (uint64_t)&v191, (uint64_t)&v195);
    if (v197) {
      nitro::nitro_function::nitro_function(v197);
    }
    if (SHIBYTE(v195.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v195.__r_.__value_.__l.__data_);
    }
    if (*((char *)this + 199) >= 0) {
      size_t v34 = *((unsigned __int8 *)this + 199);
    }
    else {
      size_t v34 = *((void *)this + 23);
    }
    unsigned int v35 = &v195;
    std::string::basic_string[abi:ne180100]((uint64_t)&v195, v34 + 13);
    if ((v195.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      unsigned int v35 = (std::string *)v195.__r_.__value_.__r.__words[0];
    }
    if (v34)
    {
      if (*((char *)this + 199) >= 0) {
        long long v36 = (char *)this + 176;
      }
      else {
        long long v36 = (char *)*((void *)this + 22);
      }
      memmove(v35, v36, v34);
    }
    strcpy((char *)v35 + v34, "_gamma_vector");
    if (*((char *)this + 199) >= 0) {
      size_t v37 = *((unsigned __int8 *)this + 199);
    }
    else {
      size_t v37 = *((void *)this + 23);
    }
    std::string v38 = &v204;
    std::string::basic_string[abi:ne180100]((uint64_t)&v204, v37 + 6);
    if ((v204.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string v38 = (std::string *)v204.__r_.__value_.__r.__words[0];
    }
    if (v37)
    {
      if (*((char *)this + 199) >= 0) {
        long long v39 = (char *)this + 176;
      }
      else {
        long long v39 = (char *)*((void *)this + 22);
      }
      memmove(v38, v39, v37);
    }
    strcpy((char *)v38 + v37, "_gamma");
    Espresso::ANECompilerEngine::add_vector_broadcasting((uint64_t)&v183, (id *)a3, (uint64_t)&v195, &v204, (unsigned int *)buf);
    if (SHIBYTE(v204.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v204.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v195.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v195.__r_.__value_.__l.__data_);
    }
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&v195.__r_.__value_.__l.__data_, (id *)a3);
    int v40 = objc_opt_new();
    uint64_t v41 = v202;
    id v202 = @"ScaledElementWise";

    [v40 setObject:@"Mult" forKeyedSubscript:@"Type"];
    if (SHIBYTE(v173.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v204, v173.__r_.__value_.__l.__data_, v173.__r_.__value_.__l.__size_);
    }
    else {
      std::string v204 = v173;
    }
    if (*((char *)this + 199) >= 0) {
      size_t v42 = *((unsigned __int8 *)this + 199);
    }
    else {
      size_t v42 = *((void *)this + 23);
    }
    uint64_t v43 = std::string::basic_string[abi:ne180100]((uint64_t)&v205, v42 + 6);
    if (v206[0] >= 0) {
      char v44 = (void *)v43;
    }
    else {
      char v44 = (void *)v205;
    }
    if (v42)
    {
      if (*((char *)this + 199) >= 0) {
        id v45 = (char *)this + 176;
      }
      else {
        id v45 = (char *)*((void *)this + 22);
      }
      memmove(v44, v45, v42);
    }
    strcpy((char *)v44 + v42, "_gamma");
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v198, &v204, &v207, 2uLL);
    for (uint64_t i = 0; i != -48; i -= 24)
    {
      if ((char)v206[i] < 0) {
        operator delete(*(void **)((char *)&v204 + i + 24));
      }
    }
    if (*((void *)this + 40))
    {
      if (*((char *)this + 199) >= 0) {
        size_t v47 = *((unsigned __int8 *)this + 199);
      }
      else {
        size_t v47 = *((void *)this + 23);
      }
      unsigned int v48 = &v204;
      std::string::basic_string[abi:ne180100]((uint64_t)&v204, v47 + 13);
      if ((v204.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        unsigned int v48 = (std::string *)v204.__r_.__value_.__r.__words[0];
      }
      if (v47)
      {
        if (*((char *)this + 199) >= 0) {
          int v49 = (char *)this + 176;
        }
        else {
          int v49 = (char *)*((void *)this + 22);
        }
        memmove(v48, v49, v47);
      }
      strcpy((char *)v48 + v47, "_gamma_scaled");
      if (SHIBYTE(v195.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v195.__r_.__value_.__l.__data_);
      }
      std::string v195 = v204;
      int v50 = &v195;
      char v51 = &v173;
    }
    else
    {
      int v50 = &__str;
      char v51 = &v195;
    }
    std::string::operator=(v51, v50);
    objc_storeStrong(v203, v40);
    uint64_t v52 = v184;
    if ((unint64_t)v184 >= v185)
    {
      unint64_t v54 = 0x8E38E38E38E38E39 * (((uint64_t)v184 - v183) >> 4);
      if (v54 + 1 > 0x1C71C71C71C71C7) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v55 = 0x1C71C71C71C71C72 * ((uint64_t)(v185 - v183) >> 4);
      if (v55 <= v54 + 1) {
        unint64_t v55 = v54 + 1;
      }
      if (0x8E38E38E38E38E39 * ((uint64_t)(v185 - v183) >> 4) >= 0xE38E38E38E38E3) {
        unint64_t v56 = 0x1C71C71C71C71C7;
      }
      else {
        unint64_t v56 = v55;
      }
      *((void *)&v205 + 1) = &v185;
      if (v56) {
        unint64_t v56 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v56);
      }
      else {
        uint64_t v57 = 0;
      }
      v204.__r_.__value_.__r.__words[0] = v56;
      v204.__r_.__value_.__l.__size_ = v56 + 144 * v54;
      v204.__r_.__value_.__r.__words[2] = v204.__r_.__value_.__l.__size_;
      *(void *)&long long v205 = v56 + 144 * v57;
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)v204.__r_.__value_.__l.__size_, (uint64_t)&v195);
      v204.__r_.__value_.__r.__words[2] += 144;
      std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v183, &v204);
      std::string v53 = v184;
      std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&v204);
    }
    else
    {
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v184, (uint64_t)&v195);
      std::string v53 = v52 + 6;
    }
    char v184 = v53;

    if (v200 < 0) {
      operator delete(v199);
    }
    v204.__r_.__value_.__r.__words[0] = (std::string::size_type)&v198;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v204);
    v204.__r_.__value_.__r.__words[0] = (std::string::size_type)&v196;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v204);
    if (SHIBYTE(v195.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v195.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v191.__r_.__value_.__l.__data_);
    }
    if (v190) {
      nitro::nitro_function::nitro_function(v190);
    }
    if (v213)
    {
      v214.__begin_ = (std::vector<std::string>::pointer)v213;
      operator delete(v213);
    }
  }
  if (*((void *)this + 40))
  {
    v195.__r_.__value_.__r.__words[0] = *((void *)a3 + 6);
    uint64_t v58 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8, (unsigned __int8 *)v195.__r_.__value_.__l.__data_, (long long **)&v195);
    Espresso::abstract_blob_container::shape(buf, *((void *)v58 + 5));
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v189, *(_DWORD *)(*((void *)this + 40) + 8), 1, 1, 1);
    unint64_t v59 = v189;
    memcpy(*(void **)(v189 + 24), *(const void **)(*((void *)this + 40) + 16), 4 * *(int *)(*((void *)this + 40) + 8));
    if (*((char *)this + 199) >= 0) {
      size_t v60 = *((unsigned __int8 *)this + 199);
    }
    else {
      size_t v60 = *((void *)this + 23);
    }
    uint64_t v61 = &v191;
    std::string::basic_string[abi:ne180100]((uint64_t)&v191, v60 + 12);
    if ((v191.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v61 = (std::string *)v191.__r_.__value_.__r.__words[0];
    }
    if (v60)
    {
      if (*((char *)this + 199) >= 0) {
        uint64_t v62 = (char *)this + 176;
      }
      else {
        uint64_t v62 = (char *)*((void *)this + 22);
      }
      memmove(v61, v62, v60);
    }
    strcpy((char *)v61 + v60, "_beta_vector");
    if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v195, v191.__r_.__value_.__l.__data_, v191.__r_.__value_.__l.__size_);
    }
    else {
      std::string v195 = v191;
    }
    unint64_t v196 = v59;
    int v197 = v190;
    if (v190) {
      atomic_fetch_add_explicit(&v190->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::__tree<std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>>>::__emplace_unique_key_args<std::string,std::string&,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>((uint64_t **)a2 + 34, &v191, (uint64_t)&v191, (uint64_t)&v195);
    if (v197) {
      nitro::nitro_function::nitro_function(v197);
    }
    if (SHIBYTE(v195.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v195.__r_.__value_.__l.__data_);
    }
    if (*((char *)this + 199) >= 0) {
      size_t v63 = *((unsigned __int8 *)this + 199);
    }
    else {
      size_t v63 = *((void *)this + 23);
    }
    uint64_t v64 = &v195;
    std::string::basic_string[abi:ne180100]((uint64_t)&v195, v63 + 12);
    if ((v195.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v64 = (std::string *)v195.__r_.__value_.__r.__words[0];
    }
    if (v63)
    {
      if (*((char *)this + 199) >= 0) {
        uint64_t v65 = (char *)this + 176;
      }
      else {
        uint64_t v65 = (char *)*((void *)this + 22);
      }
      memmove(v64, v65, v63);
    }
    strcpy((char *)v64 + v63, "_beta_vector");
    if (*((char *)this + 199) >= 0) {
      size_t v66 = *((unsigned __int8 *)this + 199);
    }
    else {
      size_t v66 = *((void *)this + 23);
    }
    uint64_t v67 = &v204;
    std::string::basic_string[abi:ne180100]((uint64_t)&v204, v66 + 5);
    if ((v204.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v67 = (std::string *)v204.__r_.__value_.__r.__words[0];
    }
    if (v66)
    {
      if (*((char *)this + 199) >= 0) {
        std::string::size_type v68 = (char *)this + 176;
      }
      else {
        std::string::size_type v68 = (char *)*((void *)this + 22);
      }
      memmove(v67, v68, v66);
    }
    strcpy((char *)v67 + v66, "_beta");
    Espresso::ANECompilerEngine::add_vector_broadcasting((uint64_t)&v183, (id *)a3, (uint64_t)&v195, &v204, (unsigned int *)buf);
    if (SHIBYTE(v204.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v204.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v195.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v195.__r_.__value_.__l.__data_);
    }
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&v195.__r_.__value_.__l.__data_, (id *)a3);
    uint64_t v69 = objc_opt_new();
    uint64_t v70 = v202;
    id v202 = @"ScaledElementWise";

    [v69 setObject:@"Add" forKeyedSubscript:@"Type"];
    if (SHIBYTE(v173.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v204, v173.__r_.__value_.__l.__data_, v173.__r_.__value_.__l.__size_);
    }
    else {
      std::string v204 = v173;
    }
    if (*((char *)this + 199) >= 0) {
      size_t v71 = *((unsigned __int8 *)this + 199);
    }
    else {
      size_t v71 = *((void *)this + 23);
    }
    uint64_t v72 = std::string::basic_string[abi:ne180100]((uint64_t)&v205, v71 + 5);
    if (v206[0] >= 0) {
      uint64_t v73 = (void *)v72;
    }
    else {
      uint64_t v73 = (void *)v205;
    }
    if (v71)
    {
      if (*((char *)this + 199) >= 0) {
        float v74 = (char *)this + 176;
      }
      else {
        float v74 = (char *)*((void *)this + 22);
      }
      memmove(v73, v74, v71);
    }
    strcpy((char *)v73 + v71, "_beta");
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v198, &v204, &v207, 2uLL);
    for (uint64_t j = 0; j != -48; j -= 24)
    {
      if ((char)v206[j] < 0) {
        operator delete(*(void **)((char *)&v204 + j + 24));
      }
    }
    std::string::operator=(&v195, &__str);
    objc_storeStrong(v203, v69);
    float v76 = v184;
    if ((unint64_t)v184 >= v185)
    {
      unint64_t v78 = 0x8E38E38E38E38E39 * (((uint64_t)v184 - v183) >> 4);
      if (v78 + 1 > 0x1C71C71C71C71C7) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v79 = 0x1C71C71C71C71C72 * ((uint64_t)(v185 - v183) >> 4);
      if (v79 <= v78 + 1) {
        unint64_t v79 = v78 + 1;
      }
      if (0x8E38E38E38E38E39 * ((uint64_t)(v185 - v183) >> 4) >= 0xE38E38E38E38E3) {
        unint64_t v80 = 0x1C71C71C71C71C7;
      }
      else {
        unint64_t v80 = v79;
      }
      *((void *)&v205 + 1) = &v185;
      if (v80) {
        unint64_t v80 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v80);
      }
      else {
        uint64_t v81 = 0;
      }
      v204.__r_.__value_.__r.__words[0] = v80;
      v204.__r_.__value_.__l.__size_ = v80 + 144 * v78;
      v204.__r_.__value_.__r.__words[2] = v204.__r_.__value_.__l.__size_;
      *(void *)&long long v205 = v80 + 144 * v81;
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)v204.__r_.__value_.__l.__size_, (uint64_t)&v195);
      v204.__r_.__value_.__r.__words[2] += 144;
      std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v183, &v204);
      unint64_t v77 = v184;
      std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&v204);
    }
    else
    {
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v184, (uint64_t)&v195);
      unint64_t v77 = v76 + 6;
    }
    char v184 = v77;

    if (v200 < 0) {
      operator delete(v199);
    }
    v204.__r_.__value_.__r.__words[0] = (std::string::size_type)&v198;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v204);
    v204.__r_.__value_.__r.__words[0] = (std::string::size_type)&v196;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v204);
    if (SHIBYTE(v195.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v195.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v191.__r_.__value_.__l.__data_);
    }
    if (v190) {
      nitro::nitro_function::nitro_function(v190);
    }
    if (v213)
    {
      v214.__begin_ = (std::vector<std::string>::pointer)v213;
      operator delete(v213);
    }
  }
  atomic_fetch_add_explicit(&v170->__shared_owners_, 1uLL, memory_order_relaxed);
  if (v171) {
    atomic_fetch_add_explicit(&v171->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::ANECompilerEngine::compiler::layer_graph_info_t::layer_graph_info_t((Espresso::ANECompilerEngine::compiler::layer_graph_info_t *)&v195);
  id v202 = 0;
  v203[0] = 0;
  v203[1] = (id)0x100000000;
  unint64_t v82 = *((void *)this + 50);
  float v83 = (std::__shared_weak_count *)*((void *)this + 51);
  if (v83) {
    atomic_fetch_add_explicit(&v83->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v82 && !*(unsigned char *)((*(uint64_t (**)(void))(*((void *)this + 42) + 104))() + 40))
  {
    float v84 = v167[28];
    unint64_t v189 = v82;
    long long v190 = v83;
    if (v83) {
      atomic_fetch_add_explicit(&v83->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v85 = (std::__shared_weak_count *)*((void *)this + 53);
    v188[0] = *((void *)this + 52);
    v188[1] = (uint64_t)v85;
    if (v85) {
      atomic_fetch_add_explicit(&v85->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    Espresso::ane_style_post_scale_bias((uint64_t)&v189, v188, (uint64_t)&v191, v84);
    if (v85) {
      nitro::nitro_function::nitro_function(v85);
    }
    if (v83) {
      nitro::nitro_function::nitro_function(v83);
    }
    uint64_t v86 = *(unsigned int *)(v82 + 8);
    std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v186, 2 * v86, 1, 1, 1);
    uint64_t v87 = (int)v86;
    uint64_t v88 = *((void *)this + 52);
    int v89 = v86;
    if (v88) {
      int v89 = *(_DWORD *)(v88 + 8);
    }
    if (!*((unsigned char *)a2 + 384))
    {
      Espresso::blob<unsigned char,1>::make(&v204, 4 * v86);
      uint64_t v137 = *(int **)(v204.__r_.__value_.__r.__words[0] + 16);
      if ((int)v86 >= 1)
      {
        for (uint64_t k = 0; k != v86; ++k)
        {
          float v139 = *(float *)(*(void *)(v82 + 16) + k * 4);
          *(float *)&int v140 = ldexp(1.0, -v193) * v139;
          v137[k] = v140;
        }
      }
      if (v86)
      {
        id v141 = *(_WORD **)(v186 + 16);
        do
        {
          int v142 = *v137++;
          _S0 = v142;
          __asm { FCVT            H0, S0 }
          *v141++ = _S0;
          --v87;
        }
        while (v87);
      }
      if (*((void *)this + 52))
      {
        Espresso::blob<unsigned char,1>::make(buf, 4 * v89);
        uint64_t v145 = *(void *)buf;
        Espresso::blob<unsigned char,1>::make(buf, 2 * v89);
        uint64_t v165 = *(void *)buf;
        std::vector<std::string> v146 = *(int **)(v145 + 16);
        if (v89 >= 1)
        {
          for (uint64_t m = 0; m != v89; ++m)
          {
            if ((int)v86 - 1 >= (int)m) {
              int v148 = m;
            }
            else {
              int v148 = v86 - 1;
            }
            *(float *)&int v149 = *(float *)(*(void *)(v191.__r_.__value_.__r.__words[2] + 16) + 4 * m)
                            * *(float *)(*(void *)(v191.__r_.__value_.__r.__words[0] + 16) + 4 * v148);
            v146[m] = v149;
            int v150 = v194;
            unsigned int v151 = v193;
            *(float *)&int v152 = ldexp(1.0, v194 - v193) * *(float *)&v149;
            v146[m] = v152;
            float v155 = ldexp(1.0, v151 - v150) * *(float *)&v152;
            if (v155 < -127.0 || v155 > 255.0)
            {
              char v157 = Espresso::espresso_os_log_subsystem(v153, v154);
              if (os_log_type_enabled(v157, OS_LOG_TYPE_ERROR))
              {
                double v158 = *(float *)&v146[m];
                *(_DWORD *)long long buf = 134218752;
                *(double *)&uint8_t buf[4] = v155;
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = v194;
                __int16 v209 = 1024;
                int v210 = v193;
                __int16 v211 = 2048;
                double v212 = v158;
                _os_log_error_impl(&dword_1920CB000, v157, OS_LOG_TYPE_ERROR, "[ANEC::add_ane_scale_bias_unit] Shifted bias overflowing shifted_b=%f acc_bias_shift=%d post_right_shift=%d anebias=%f", buf, 0x22u);
              }
            }
          }
        }
        if (v89)
        {
          uint64_t v159 = v89;
          id v160 = *(_WORD **)(v165 + 16);
          do
          {
            int v161 = *v146++;
            _S0 = v161;
            __asm { FCVT            H0, S0 }
            *v160++ = _S0;
            --v159;
          }
          while (v159);
        }
      }
      exception = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
      Espresso::not_implemented_error::not_implemented_error(exception);
    }
    LODWORD(v163) = v194;
    uint64_t v90 = v186;
    if (v86)
    {
      uint64_t v91 = *(int **)(v191.__r_.__value_.__r.__words[0] + 16);
      int v92 = *(_WORD **)(v186 + 16);
      do
      {
        int v93 = *v91++;
        _S0 = v93;
        __asm { FCVT            H0, S0 }
        *v92++ = _S0;
        --v87;
      }
      while (v87);
    }
    if (v88)
    {
      std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(buf, 2 * v89, 1, 1, 1);
      uint64_t v95 = *(void *)buf;
      id v166 = *(std::__shared_weak_count **)&buf[8];
      if (v89)
      {
        uint64_t v96 = v89;
        int v97 = *(_WORD **)(*(void *)buf + 16);
        int v98 = *(int **)(v191.__r_.__value_.__r.__words[2] + 16);
        do
        {
          int v99 = *v98++;
          _S0 = v99;
          __asm { FCVT            H0, S0 }
          *v97++ = _S0;
          --v96;
        }
        while (v96);
      }
    }
    else
    {
      id v166 = 0;
      uint64_t v95 = 0;
    }
    int v101 = *((unsigned __int8 *)a2 + 552);
    double v102 = v187;
    if (v187) {
      atomic_fetch_add_explicit(&v187->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v103 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler *)((char *)a2 + 128), *(const unsigned __int8 **)(v90 + 16), *(int *)(v90 + 8));
    if (v102) {
      nitro::nitro_function::nitro_function(v102);
    }
    id v168 = (id)objc_opt_new();
    if (*((unsigned char *)a2 + 121))
    {
      id v104 = *(id *)(v183 + 128);

      id v168 = v104;
    }
    int v105 = objc_opt_new();
    uint64_t v106 = [NSNumber numberWithInt:v86];
    [v105 setObject:v106 forKeyedSubscript:@"ScaleCount"];

    unsigned int v107 = [NSNumber numberWithInt:v103];
    [v105 setObject:v107 forKeyedSubscript:@"ScaleOffset"];

    uint64_t v108 = NSNumber;
    if (v101) {
      uint64_t weights_file_index = 0;
    }
    else {
    int v110 = objc_msgSend(v108, "numberWithUnsignedLong:", weights_file_index, v163);
    }
    [v105 setObject:v110 forKeyedSubscript:@"ScaleIndex"];

    [v105 setObject:@"Float16" forKeyedSubscript:@"ScaleType"];
    unint64_t v111 = [NSNumber numberWithInt:v193];
    [v168 setObject:v111 forKeyedSubscript:@"ScaleShift"];

    if (*((void *)this + 52))
    {
      if (v166) {
        atomic_fetch_add_explicit(&v166->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v112 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler *)((char *)a2 + 128), *(const unsigned __int8 **)(v95 + 16), *(int *)(v95 + 8));
      if (v166) {
        nitro::nitro_function::nitro_function(v166);
      }
      unsigned int v113 = [NSNumber numberWithInt:*(unsigned int *)(*((void *)this + 52) + 8)];
      [v105 setObject:v113 forKeyedSubscript:@"BiasCount"];

      char v114 = [NSNumber numberWithInt:v112];
      [v105 setObject:v114 forKeyedSubscript:@"BiasOffset"];

      int v115 = NSNumber;
      if (v101) {
        uint64_t v116 = 0;
      }
      else {
      unint64_t v117 = [v115 numberWithUnsignedLong:v116];
      }
      [v105 setObject:v117 forKeyedSubscript:@"BiasIndex"];

      [v105 setObject:@"Float16" forKeyedSubscript:@"BiasType"];
      char v118 = [NSNumber numberWithInt:v164];
      [v168 setObject:v118 forKeyedSubscript:@"BiasShift"];
    }
    [v168 setObject:v105 forKeyedSubscript:@"BiasScaleGroupData"];
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)buf, (id *)a3);
    int v119 = v184;
    if (v184 == (std::string *)v183) {
      goto LABEL_293;
    }
    unint64_t v120 = v184 - 6;
    uint64_t v121 = HIBYTE(v184[-6].__r_.__value_.__r.__words[2]);
    char v122 = v121;
    std::string::size_type v123 = v184[-6].__r_.__value_.__l.__size_;
    if ((v121 & 0x80u) == 0) {
      std::string::size_type v124 = HIBYTE(v184[-6].__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v124 = v184[-6].__r_.__value_.__l.__size_;
    }
    uint64_t v125 = HIBYTE(v210);
    if (v210 < 0) {
      uint64_t v125 = *(void *)&buf[8];
    }
    if (v124 != v125) {
      goto LABEL_287;
    }
    if (v210 >= 0) {
      char v126 = buf;
    }
    else {
      char v126 = *(unsigned __int8 **)buf;
    }
    if ((char)v121 < 0)
    {
      std::string::pointer data = (const std::string::value_type *)v120->__r_.__value_.__r.__words[0];
      if (memcmp(v120->__r_.__value_.__l.__data_, v126, v184[-6].__r_.__value_.__l.__size_)) {
        goto LABEL_290;
      }
    }
    else if ((_BYTE)v121)
    {
      int v127 = v184 - 6;
      while (v127->__r_.__value_.__s.__data_[0] == *v126)
      {
        int v127 = (std::string *)((char *)v127 + 1);
        ++v126;
        if (!--v121) {
          goto LABEL_286;
        }
      }
      goto LABEL_287;
    }
LABEL_286:
    std::string::append(v119 - 6, "__@pre_scale_bias");
    char v122 = HIBYTE(v119[-6].__r_.__value_.__r.__words[2]);
LABEL_287:
    if ((v122 & 0x80) == 0)
    {
      long long v129 = *(_OWORD *)&v120->__r_.__value_.__l.__data_;
      v204.__r_.__value_.__r.__words[2] = v119[-6].__r_.__value_.__r.__words[2];
      *(_OWORD *)&v204.__r_.__value_.__l.__data_ = v129;
      goto LABEL_291;
    }
    std::string::pointer data = v119[-6].__r_.__value_.__l.__data_;
    std::string::size_type v123 = v119[-6].__r_.__value_.__l.__size_;
LABEL_290:
    std::string::__init_copy_ctor_external(&v204, data, v123);
LABEL_291:
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v214, &v204, &v205, 1uLL);
    if (SHIBYTE(v204.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v204.__r_.__value_.__l.__data_);
    }
LABEL_293:
    int v130 = v218;
    std::string v218 = @"GOC";

    objc_storeStrong(v219, v168);
    if (!*((unsigned char *)a2 + 121))
    {
      uint64_t v131 = v184;
      if ((unint64_t)v184 >= v185)
      {
        unint64_t v133 = 0x8E38E38E38E38E39 * (((uint64_t)v184 - v183) >> 4);
        if (v133 + 1 > 0x1C71C71C71C71C7) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v134 = 0x1C71C71C71C71C72 * ((uint64_t)(v185 - v183) >> 4);
        if (v134 <= v133 + 1) {
          unint64_t v134 = v133 + 1;
        }
        if (0x8E38E38E38E38E39 * ((uint64_t)(v185 - v183) >> 4) >= 0xE38E38E38E38E3) {
          unint64_t v135 = 0x1C71C71C71C71C7;
        }
        else {
          unint64_t v135 = v134;
        }
        *((void *)&v205 + 1) = &v185;
        if (v135) {
          unint64_t v135 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v135);
        }
        else {
          uint64_t v136 = 0;
        }
        v204.__r_.__value_.__r.__words[0] = v135;
        v204.__r_.__value_.__l.__size_ = v135 + 144 * v133;
        v204.__r_.__value_.__r.__words[2] = v204.__r_.__value_.__l.__size_;
        *(void *)&long long v205 = v135 + 144 * v136;
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)v204.__r_.__value_.__l.__size_, (uint64_t)buf);
        v204.__r_.__value_.__r.__words[2] += 144;
        std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v183, &v204);
        unsigned int v132 = v184;
        std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&v204);
      }
      else
      {
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v184, (uint64_t)buf);
        unsigned int v132 = v131 + 6;
      }
      char v184 = v132;
    }

    if (v216 < 0) {
      operator delete(v215);
    }
    v204.__r_.__value_.__r.__words[0] = (std::string::size_type)&v214;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v204);
    v204.__r_.__value_.__r.__words[0] = (std::string::size_type)&v211;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v204);
    if (SHIBYTE(v210) < 0) {
      operator delete(*(void **)buf);
    }

    if (v166) {
      nitro::nitro_function::nitro_function(v166);
    }
    if (v187) {
      nitro::nitro_function::nitro_function(v187);
    }
    if (v192) {
      nitro::nitro_function::nitro_function(v192);
    }
    if (v191.__r_.__value_.__l.__size_) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v191.__r_.__value_.__l.__size_);
    }
  }
  if (v83) {
    nitro::nitro_function::nitro_function(v83);
  }

  if (v200 < 0) {
    operator delete(v199);
  }
  *(void *)long long buf = &v198;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(void *)long long buf = &v196;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (SHIBYTE(v195.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v195.__r_.__value_.__l.__data_);
  }
  if (v171) {
    nitro::nitro_function::nitro_function(v171);
  }
  nitro::nitro_function::nitro_function(v170);
  (*(void (**)(char *, Espresso::ANECompilerEngine::compiler *, uint64_t *))(*((void *)this + 42) + 24))((char *)this + 336, a2, &v183);
  if (SHIBYTE(v173.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v173.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }

  if (v179 < 0) {
    operator delete(v178);
  }
  v195.__r_.__value_.__r.__words[0] = (std::string::size_type)&v177;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v195);
  v195.__r_.__value_.__r.__words[0] = (std::string::size_type)&v176;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v195);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  v195.__r_.__value_.__r.__words[0] = (std::string::size_type)&v183;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&v195);

  if (v171) {
    nitro::nitro_function::nitro_function(v171);
  }
  if (v169) {
    nitro::nitro_function::nitro_function(v169);
  }
  nitro::nitro_function::nitro_function(v170);
}

void sub_192B1AE80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, std::__shared_weak_count *a16, void *a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,id a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  nitro::nitro_function::nitro_function(a15);
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t(&a31);
  STACK[0x250] = (unint64_t)&a49;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x250]);

  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  if (a12) {
    nitro::nitro_function::nitro_function(a12);
  }
  if (a15) {
    nitro::nitro_function::nitro_function(a15);
  }
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>>>::__emplace_unique_key_args<std::string,std::string&,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>(uint64_t **a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = (uint64_t **)std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__find_equal<std::string>((uint64_t)a1, &v13, a2);
  if (!*v7)
  {
    uint64_t v8 = v7;
    unint64_t v9 = (char *)operator new(0x60uLL);
    v11[0] = v9;
    v11[1] = a1 + 1;
    char v12 = 0;
    uint64_t v10 = (std::string *)(v9 + 32);
    if (*(char *)(a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
    }
    else
    {
      *(_OWORD *)&v10->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
      *((void *)v9 + 6) = *(void *)(a3 + 16);
    }
    *(_OWORD *)(v9 + 56) = *(_OWORD *)a4;
    *((void *)v9 + 9) = *(void *)(a4 + 16);
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *((_OWORD *)v9 + 5) = *(_OWORD *)(a4 + 24);
    *(void *)(a4 + 16) = 0;
    *(void *)(a4 + 24) = 0;
    *(void *)(a4 + 32) = 0;
    char v12 = 1;
    std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at(a1, v13, v8, (uint64_t *)v9);
    v11[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>,void *>>>>::reset[abi:ne180100]((uint64_t)v11);
  }
}

void sub_192B1B418(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL Espresso::ANECompilerEngine::mix_instancenorm_1d_kernel::is_valid_for_engine(_DWORD *a1, int64x2_t **a2, void *a3)
{
  uint64_t v6 = a3[6];
  uint64_t v7 = *(std::__shared_weak_count **)(v6 + 80);
  if (v7)
  {
    uint64_t v8 = std::__shared_weak_count::lock(v7);
    if (v8) {
      unint64_t v9 = *(const Espresso::net **)(v6 + 72);
    }
    else {
      unint64_t v9 = 0;
    }
  }
  else
  {
    unint64_t v9 = 0;
    uint64_t v8 = 0;
  }
  Espresso::ANECompilerEngine::ane_arch_allow_network_override((uint64_t)v9 + 472);
  uint64_t v10 = (Espresso::ANECompilerEngine *)objc_claimAutoreleasedReturnValue();
  if (Espresso::ANECompilerEngine::is_mix(v10, v11))
  {
    char v12 = *a2;
    uint64_t v13 = a2[1];
    v46[0] = v12;
    v46[1] = v13;
    if (v13) {
      atomic_fetch_add_explicit(&v13->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "Instance norm not supported on requested architecture.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v42, (long long *)__p, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v46, (Espresso::base_kernel::validate_for_engine_warning_t *)&v42);
    if (v45) {
      nitro::nitro_function::nitro_function(v45);
    }
    v34[0] = (void **)v44;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v34);
    v34[0] = (void **)v43;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v34);
    if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v42.__r_.__value_.__l.__data_);
    }
    if (v41 < 0) {
      operator delete(__p[0]);
    }
    if (v13) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v13);
    }
    BOOL v14 = 0;
    goto LABEL_51;
  }
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v15 = *a3;
  uint64_t v16 = *(void *)(*a3 + 32);
  long long v17 = *(_OWORD *)(*a3 + 16);
  v35[0] = *(_OWORD *)*a3;
  v35[1] = v17;
  uint64_t v36 = v16;
  size_t v37 = 0;
  std::string v38 = 0;
  uint64_t v39 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v37, *(const void **)(v15 + 40), *(void *)(v15 + 48), (uint64_t)(*(void *)(v15 + 48) - *(void *)(v15 + 40)) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)__p, v9, (const Espresso::layer_shape *)v35, 1);
  if (v37)
  {
    std::string v38 = v37;
    operator delete(v37);
  }
  if (v8)
  {
    nitro::nitro_function::nitro_function(v8);
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v18 = a3[3];
  uint64_t v19 = *(void *)(v18 + 32);
  long long v20 = *(_OWORD *)(v18 + 16);
  v29[0] = *(_OWORD *)v18;
  v29[1] = v20;
  uint64_t v30 = v19;
  size_t v31 = 0;
  CFStringRef v32 = 0;
  uint64_t v33 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v31, *(const void **)(v18 + 40), *(void *)(v18 + 48), (uint64_t)(*(void *)(v18 + 48) - *(void *)(v18 + 40)) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v34, v9, (const Espresso::layer_shape *)v29, 1);
  if (v31)
  {
    CFStringRef v32 = v31;
    operator delete(v31);
  }
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  uint64_t v21 = v10;
  if (!Espresso::ANECompilerEngine::blob_shape_ane_compatible(__p, v21))
  {
    char v26 = 0;
    std::string::basic_string[abi:ne180100]<0>(v27, "Input blob dimensions exceed ANE limit.");
    goto LABEL_40;
  }
  if (!Espresso::ANECompilerEngine::blob_shape_ane_compatible(v34, v21))
  {
    char v26 = 0;
    std::string::basic_string[abi:ne180100]<0>(v27, "Output blob dimensions exceed ANE limit.");
    goto LABEL_40;
  }
  if (!a1[70])
  {
LABEL_36:
    if (a1[74])
    {
      char v26 = 0;
      std::string::basic_string[abi:ne180100]<0>(v27, "tf_layernorm_transposed with biased std deviation is not implemented on ANE.");
    }
    else
    {
      char v26 = 1;
      std::string::basic_string[abi:ne180100]<0>(v27, "Success");
    }
    goto LABEL_40;
  }
  if (!a1[72])
  {
    if (!a1[73])
    {
      char v26 = 0;
      std::string::basic_string[abi:ne180100]<0>(v27, "Instancenorm_1d with epsilon to std deviation is not supported on ANE.");
      goto LABEL_40;
    }
    goto LABEL_36;
  }
  char v26 = 0;
  std::string::basic_string[abi:ne180100]<0>(v27, "Instancenorm_1d with biased std deviation is not supported on ANE.");
LABEL_40:

  BOOL v14 = v26 != 0;
  if (!v26)
  {
    long long v22 = *a2;
    int v23 = a2[1];
    v25[0] = v22;
    v25[1] = v23;
    if (v23) {
      atomic_fetch_add_explicit(&v23->i64[1], 1uLL, memory_order_relaxed);
    }
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v42, (long long *)v27, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v25, (Espresso::base_kernel::validate_for_engine_warning_t *)&v42);
    if (v45) {
      nitro::nitro_function::nitro_function(v45);
    }
    size_t v47 = (void **)v44;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v47);
    size_t v47 = (void **)v43;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v47);
    if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v42.__r_.__value_.__l.__data_);
    }
    if (v23) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v23);
    }
  }
  if (v28 < 0) {
    operator delete(v27[0]);
  }
LABEL_51:

  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  return v14;
}

void sub_192B1B7F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  if (v44) {
    nitro::nitro_function::nitro_function(v44);
  }
  _Unwind_Resume(a1);
}

void sub_192B1B8E4()
{
  if (!v0) {
    JUMPOUT(0x192B1B8DCLL);
  }
  JUMPOUT(0x192B1B8D4);
}

void Espresso::ANECompilerEngine::mix_instancenorm_1d_kernel::__set_weight_raw_blob(void *a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  Espresso::generic_instancenorm_1d_kernel::__set_weight_raw_blob(a1, a2, a3, a4, a5);

  Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob(a1 + 42, a3, a4, a5);
}

void Espresso::ANECompilerEngine::mix_instancenorm_1d_kernel::~mix_instancenorm_1d_kernel(Espresso::ANECompilerEngine::mix_instancenorm_1d_kernel *this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANECompilerEngine::mix_instancenorm_1d_kernel *)((char *)this + 336));
  Espresso::generic_instancenorm_1d_kernel::~generic_instancenorm_1d_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t vars8;

  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANECompilerEngine::mix_instancenorm_1d_kernel *)((char *)this + 336));

  Espresso::generic_instancenorm_1d_kernel::~generic_instancenorm_1d_kernel(this);
}

void non-virtual thunk to'Espresso::ANECompilerEngine::mix_l2_normalize_kernel::~mix_l2_normalize_kernel(Espresso::ANECompilerEngine::mix_l2_normalize_kernel *this)
{
  uint64_t v1 = (Espresso::ANECompilerEngine::mix_l2_normalize_kernel *)((char *)this - 296);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);

  JUMPOUT(0x192FF16B0);
}

{
  Espresso::base_kernel *v1;
  uint64_t vars8;

  uint64_t v1 = (Espresso::ANECompilerEngine::mix_l2_normalize_kernel *)((char *)this - 296);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);

  Espresso::base_kernel::~base_kernel(v1);
}

void non-virtual thunk to'Espresso::ANECompilerEngine::mix_l2_normalize_kernel::compile(Espresso::ANECompilerEngine::mix_l2_normalize_kernel *this, Espresso::ANECompilerEngine::compiler *a2, void **a3)
{
}

void Espresso::ANECompilerEngine::mix_l2_normalize_kernel::compile(Espresso::ANECompilerEngine::mix_l2_normalize_kernel *this, Espresso::ANECompilerEngine::compiler *a2, void **a3)
{
  int v4 = (std::__shared_weak_count *)*((void *)a2 + 2);
  if (!v4 || (uint64_t v7 = std::__shared_weak_count::lock(v4)) == 0 || (v8 = *((void *)a2 + 1)) == 0) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Inconsistent state: null network");
  }
  if (!*(void *)(v8 + 576)) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Inconsistent state: blob_storage");
  }
  v42[0] = a3[6];
  unint64_t v9 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8 + 136, (unsigned __int8 *)v42[0], (long long **)v42);
  uint64_t v11 = *((void *)v9 + 5);
  uint64_t v10 = (std::__shared_weak_count *)*((void *)v9 + 6);
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v42[0] = a3;
  char v12 = (std::__shared_weak_count *)*((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8 + 136, (unsigned __int8 *)a3, (long long **)v42)+ 6);
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v51 = 0;
  uint64_t v52 = 0;
  unint64_t v53 = 0;
  uint64_t v13 = objc_opt_new();
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t(v42, a3);
  BOOL v14 = v49;
  int v49 = @"L2Normalization";

  _S0 = *((_DWORD *)this + 70);
  __asm { FCVT            H0, S0 }
  uint64_t v19 = [NSNumber numberWithShort:(__int16)_S0];
  [v13 setObject:v19 forKeyedSubscript:@"Epsilon"];

  long long v20 = objc_opt_new();
  unsigned int v21 = *((_DWORD *)this + 72);
  Espresso::abstract_blob_container::shape((char *)&v35, v11);
  if (v37 == 1) {
    int v22 = 4;
  }
  else {
    int v22 = 5;
  }
  if (HIDWORD(v37) == -1) {
    unsigned int v23 = v22;
  }
  else {
    unsigned int v23 = HIDWORD(v37);
  }
  if (v23 <= 5 && (int v24 = *(unsigned __int8 *)(v8 + 1281), v21 <= 4))
  {
    int v25 = 4;
    switch(v21)
    {
      case 0u:
        break;
      case 1u:
        int v25 = 3;
        break;
      case 2u:
        if (v23 != 5 || v24 == 0) {
          int v25 = 2;
        }
        else {
          int v25 = 1;
        }
        break;
      case 3u:
        if (v23 != 5 || v24 == 0) {
          int v25 = 0;
        }
        else {
          int v25 = 2;
        }
        break;
      case 4u:
        int v25 = v23 != 5 || *(unsigned char *)(v8 + 1281) == 0;
        break;
      default:
        goto LABEL_17;
    }
    char v26 = 1;
  }
  else
  {
LABEL_17:
    int v25 = 0;
    char v26 = 0;
  }
  if (__p)
  {
    char v41 = __p;
    operator delete(__p);
  }
  if ((v26 & 1) == 0) {
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Unknown axis.");
  }
  if (v25 == 1)
  {
    [v20 addObject:@"Depth"];
  }
  else if ((v25 & 0xFFFFFFFD) != 1)
  {
    goto LABEL_43;
  }
  [v20 addObject:@"Height"];
LABEL_43:
  [v20 addObject:@"Width"];
  [v13 setObject:v20 forKeyedSubscript:@"Dimension"];
  objc_storeStrong(&v50, v13);
  int v29 = v52;
  if ((unint64_t)v52 >= v53)
  {
    unint64_t v31 = 0x8E38E38E38E38E39 * (((uint64_t)v52 - v51) >> 4);
    if (v31 + 1 > 0x1C71C71C71C71C7) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v32 = 0x1C71C71C71C71C72 * ((uint64_t)(v53 - v51) >> 4);
    if (v32 <= v31 + 1) {
      unint64_t v32 = v31 + 1;
    }
    if (0x8E38E38E38E38E39 * ((uint64_t)(v53 - v51) >> 4) >= 0xE38E38E38E38E3) {
      unint64_t v33 = 0x1C71C71C71C71C7;
    }
    else {
      unint64_t v33 = v32;
    }
    uint64_t v39 = &v53;
    if (v33) {
      unint64_t v33 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v33);
    }
    else {
      uint64_t v34 = 0;
    }
    unsigned int v35 = (void **)v33;
    uint64_t v36 = (std::string *)(v33 + 144 * v31);
    size_t v37 = v36;
    unint64_t v38 = v33 + 144 * v34;
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v36, (uint64_t)v42);
    v37 += 6;
    std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v51, &v35);
    uint64_t v30 = v52;
    std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&v35);
  }
  else
  {
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v52, (uint64_t)v42);
    uint64_t v30 = v29 + 6;
  }
  uint64_t v52 = v30;
  (*(void (**)(char *, Espresso::ANECompilerEngine::compiler *, uint64_t *))(*((void *)this + 37) + 24))((char *)this + 296, a2, &v51);

  if (v47 < 0) {
    operator delete(v46);
  }
  unsigned int v35 = (void **)&v45;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v35);
  unsigned int v35 = (void **)&v44;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v35);
  if (v43 < 0) {
    operator delete(v42[0]);
  }

  v42[0] = &v51;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)v42);
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  nitro::nitro_function::nitro_function(v7);
}

void sub_192B1BEDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void **a17)
{
  std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&a9);

  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t((id *)&a17);
  a17 = (void **)(v22 - 112);
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100](&a17);
  if (v19) {
    nitro::nitro_function::nitro_function(v19);
  }
  if (v18) {
    nitro::nitro_function::nitro_function(v18);
  }
  nitro::nitro_function::nitro_function(v17);
  _Unwind_Resume(a1);
}

BOOL Espresso::ANECompilerEngine::mix_l2_normalize_kernel::is_valid_for_engine(uint64_t a1, int64x2_t **a2, _OWORD **a3)
{
  uint64_t v6 = a3[6];
  uint64_t v7 = (std::__shared_weak_count *)*((void *)v6 + 10);
  if (v7)
  {
    uint64_t v8 = std::__shared_weak_count::lock(v7);
    if (v8) {
      unint64_t v9 = (unsigned __int8 *)*((void *)v6 + 9);
    }
    else {
      unint64_t v9 = 0;
    }
  }
  else
  {
    unint64_t v9 = 0;
    uint64_t v8 = 0;
  }
  Espresso::ANECompilerEngine::ane_arch_allow_network_override((uint64_t)(v9 + 472));
  uint64_t v10 = (Espresso::ANECompilerEngine *)objc_claimAutoreleasedReturnValue();
  if (Espresso::ANECompilerEngine::is_mix(v10, v11))
  {
    char v12 = *a2;
    uint64_t v13 = a2[1];
    v56[0] = v12;
    v56[1] = v13;
    if (v13) {
      atomic_fetch_add_explicit(&v13->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "l2 normalize not supported on requested architecture.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v52, (long long *)__p, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v56, (Espresso::base_kernel::validate_for_engine_warning_t *)&v52);
LABEL_17:
    if (v55) {
      nitro::nitro_function::nitro_function(v55);
    }
    v42[0] = (void **)v54;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v42);
    v42[0] = (void **)v53;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v42);
    if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v52.__r_.__value_.__l.__data_);
    }
    if (v49 < 0) {
      operator delete(__p[0]);
    }
    if (v13) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v13);
    }
    goto LABEL_29;
  }
  int v14 = *(_DWORD *)(a1 + 284);
  if ((v14 | 2) != 3)
  {
    uint64_t v16 = *a2;
    uint64_t v13 = a2[1];
    v51[0] = v16;
    v51[1] = v13;
    if (v13) {
      atomic_fetch_add_explicit(&v13->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "Only MVA_L2 and MVA_SUBTRACT_MEAN_NORM_VARIANCE normalization modes are supported");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v52, (long long *)__p, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v51, (Espresso::base_kernel::validate_for_engine_warning_t *)&v52);
    goto LABEL_17;
  }
  unsigned int v15 = *((_DWORD *)*a3 + 5);
  if (v15 == -1)
  {
    if (*((_DWORD *)*a3 + 4) == 1) {
      unsigned int v15 = 4;
    }
    else {
      unsigned int v15 = 5;
    }
LABEL_28:
    int v17 = v9[1281];
    switch(*(_DWORD *)(a1 + 288))
    {
      case 0:
      case 1:
        goto LABEL_54;
      case 2:
        if (v15 != 5 || v17 == 0) {
          char v21 = 2;
        }
        else {
          char v21 = 1;
        }
        goto LABEL_49;
      case 3:
        if (v15 != 5 || v17 == 0) {
          char v21 = 0;
        }
        else {
          char v21 = 2;
        }
        goto LABEL_49;
      case 4:
        char v21 = v15 != 5 || v9[1281] == 0;
LABEL_49:
        if (v14 != 3 || (v21 & 1) != 0)
        {
LABEL_54:
          if (v8) {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          int v24 = a3[3];
          uint64_t v25 = *((void *)v24 + 4);
          long long v26 = v24[1];
          v43[0] = *v24;
          v43[1] = v26;
          uint64_t v44 = v25;
          uint64_t v45 = 0;
          id v46 = 0;
          uint64_t v47 = 0;
          std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v45, *((const void **)v24 + 5), *((void *)v24 + 6), (uint64_t)(*((void *)v24 + 6) - *((void *)v24 + 5)) >> 2);
          Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)__p, (const Espresso::net *)v9, (const Espresso::layer_shape *)v43, 1);
          if (v45)
          {
            id v46 = v45;
            operator delete(v45);
          }
          if (v8)
          {
            nitro::nitro_function::nitro_function(v8);
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v27 = (uint64_t)*a3;
          uint64_t v28 = *((void *)*a3 + 4);
          long long v29 = (*a3)[1];
          v37[0] = **a3;
          v37[1] = v29;
          uint64_t v38 = v28;
          uint64_t v39 = 0;
          int v40 = 0;
          uint64_t v41 = 0;
          std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v39, *(const void **)(v27 + 40), *(void *)(v27 + 48), (uint64_t)(*(void *)(v27 + 48) - *(void *)(v27 + 40)) >> 2);
          Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v42, (const Espresso::net *)v9, (const Espresso::layer_shape *)v37, 1);
          if (v39)
          {
            int v40 = v39;
            operator delete(v39);
          }
          if (v8) {
            nitro::nitro_function::nitro_function(v8);
          }
          uint64_t v30 = v10;
          if (Espresso::ANECompilerEngine::blob_shape_ane_compatible(v42, v30))
          {
            if (Espresso::ANECompilerEngine::blob_shape_ane_compatible(__p, v30))
            {
              char v34 = 1;
              std::string::basic_string[abi:ne180100]<0>(v35, "Success");
            }
            else
            {
              char v34 = 0;
              std::string::basic_string[abi:ne180100]<0>(v35, "Output blob dimensions exceed ANE limit.");
            }
          }
          else
          {
            char v34 = 0;
            std::string::basic_string[abi:ne180100]<0>(v35, "Input blob dimensions exceed ANE limit.");
          }

          BOOL v18 = v34 != 0;
          if (!v34)
          {
            unint64_t v31 = *a2;
            unint64_t v32 = a2[1];
            v33[0] = v31;
            v33[1] = v32;
            if (v32) {
              atomic_fetch_add_explicit(&v32->i64[1], 1uLL, memory_order_relaxed);
            }
            Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v52, (long long *)v35, (uint64_t)a3, 0);
            Espresso::emit_kernel_validation_warning(v33, (Espresso::base_kernel::validate_for_engine_warning_t *)&v52);
            if (v55) {
              nitro::nitro_function::nitro_function(v55);
            }
            uint64_t v57 = (void **)v54;
            std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v57);
            uint64_t v57 = (void **)v53;
            std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v57);
            if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v52.__r_.__value_.__l.__data_);
            }
            if (v32) {
              nitro::nitro_function::nitro_function((std::__shared_weak_count *)v32);
            }
          }
          if (v36 < 0) {
            operator delete(v35[0]);
          }
          goto LABEL_30;
        }
        unsigned int v23 = *a2;
        uint64_t v13 = a2[1];
        v50[0] = v23;
        v50[1] = v13;
        if (v13) {
          atomic_fetch_add_explicit(&v13->i64[1], 1uLL, memory_order_relaxed);
        }
        std::string::basic_string[abi:ne180100]<0>(__p, "Only height, width, and depth can be used for L2 normalization on requested architecture.");
        Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v52, (long long *)__p, (uint64_t)a3, 0);
        Espresso::emit_kernel_validation_warning(v50, (Espresso::base_kernel::validate_for_engine_warning_t *)&v52);
        break;
      default:
        goto LABEL_29;
    }
    goto LABEL_17;
  }
  if (v15 <= 5) {
    goto LABEL_28;
  }
LABEL_29:
  BOOL v18 = 0;
LABEL_30:

  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  return v18;
}

void sub_192B1C450(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  if (v44) {
    nitro::nitro_function::nitro_function(v44);
  }
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::mix_l2_normalize_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
}

void Espresso::ANECompilerEngine::mix_l2_normalize_kernel::~mix_l2_normalize_kernel(Espresso::ANECompilerEngine::mix_l2_normalize_kernel *this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANECompilerEngine::mix_l2_normalize_kernel *)((char *)this + 296));
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t vars8;

  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANECompilerEngine::mix_l2_normalize_kernel *)((char *)this + 296));

  Espresso::base_kernel::~base_kernel(this);
}

void non-virtual thunk to'Espresso::ANECompilerEngine::mix_deconv3d_kernel::~mix_deconv3d_kernel(Espresso::ANECompilerEngine::mix_deconv3d_kernel *this)
{
  uint64_t v2 = (Espresso::ANECompilerEngine::mix_deconv3d_kernel *)((char *)this - 424);
  *((void *)this - 53) = &unk_1EE3438B8;
  *(void *)this = &unk_1EE343AA0;
  unint64_t v3 = (std::__shared_weak_count *)*((void *)this + 28);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::generic_conv3d_kernel::~generic_conv3d_kernel(v2);

  JUMPOUT(0x192FF16B0);
}

{
  Espresso::generic_conv3d_kernel *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  uint64_t v2 = (Espresso::ANECompilerEngine::mix_deconv3d_kernel *)((char *)this - 424);
  *((void *)this - 53) = &unk_1EE3438B8;
  *(void *)this = &unk_1EE343AA0;
  unint64_t v3 = (std::__shared_weak_count *)*((void *)this + 28);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);

  Espresso::generic_conv3d_kernel::~generic_conv3d_kernel(v2);
}

void non-virtual thunk to'Espresso::ANECompilerEngine::mix_deconv3d_kernel::compile(Espresso::ANECompilerEngine::mix_deconv3d_kernel *this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3)
{
}

void Espresso::ANECompilerEngine::mix_deconv3d_kernel::compile(Espresso::ANECompilerEngine::mix_deconv3d_kernel *this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3)
{
  int v4 = (std::__shared_weak_count *)*((void *)a2 + 2);
  if (!v4 || (uint64_t v7 = std::__shared_weak_count::lock(v4)) == 0 || (v8 = *((void *)a2 + 1)) == 0) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Inconsistent state: null network");
  }
  if (!*(void *)(v8 + 576)) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Inconsistent state: blob_storage");
  }
  long long v29 = (unsigned __int8 *)*((void *)a3 + 6);
  unint64_t v9 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8 + 136, v29, (long long **)&v29);
  uint64_t v11 = (const void *)*((void *)v9 + 5);
  uint64_t v10 = (std::__shared_weak_count *)*((void *)v9 + 6);
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v29 = (unsigned __int8 *)a3;
  char v12 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8 + 136, (unsigned __int8 *)a3, (long long **)&v29);
  int v14 = (const void *)*((void *)v12 + 5);
  uint64_t v13 = (std::__shared_weak_count *)*((void *)v12 + 6);
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v28[0] = v8;
  v28[1] = (uint64_t)v7;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  long long v15 = *((_OWORD *)this + 24);
  v26[4] = *((_OWORD *)this + 23);
  v26[5] = v15;
  int v27 = *((_DWORD *)this + 100);
  long long v16 = *((_OWORD *)this + 20);
  v26[0] = *((_OWORD *)this + 19);
  v26[1] = v16;
  long long v17 = *((_OWORD *)this + 22);
  v26[2] = *((_OWORD *)this + 21);
  void v26[3] = v17;
  if (v11
  {
    int v24 = v18;
    uint64_t v25 = v10;
    if (v10)
    {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v19 = v10;
      if (!v14) {
        goto LABEL_19;
      }
    }
    else
    {
      uint64_t v19 = 0;
      if (!v14) {
        goto LABEL_19;
      }
    }
  }
  else
  {
    uint64_t v19 = 0;
    int v24 = 0;
    uint64_t v25 = 0;
    if (!v14)
    {
LABEL_19:
      char v21 = 0;
      uint64_t v22 = 0;
      unsigned int v23 = 0;
      goto LABEL_20;
    }
  }
  if (!v20) {
    goto LABEL_19;
  }
  uint64_t v22 = v20;
  unsigned int v23 = v13;
  if (v13)
  {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    char v21 = v13;
  }
  else
  {
    char v21 = 0;
  }
LABEL_20:
  mix_add_conv_3d<Espresso::ANECompilerEngine::mix_deconv3d_kernel *>(this, a2, v28, (uint64_t)v26, (id *)a3, (uint64_t)&v24, &v22);
  if (v21) {
    nitro::nitro_function::nitro_function(v21);
  }
  if (v19) {
    nitro::nitro_function::nitro_function(v19);
  }
  nitro::nitro_function::nitro_function(v7);
  if (v13) {
    nitro::nitro_function::nitro_function(v13);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }

  nitro::nitro_function::nitro_function(v7);
}

void sub_192B1C9AC(_Unwind_Exception *a1)
{
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  nitro::nitro_function::nitro_function(v1);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  nitro::nitro_function::nitro_function(v1);
  _Unwind_Resume(a1);
}

void mix_add_conv_3d<Espresso::ANECompilerEngine::mix_deconv3d_kernel *>(void *a1, unsigned char *a2, uint64_t *a3, uint64_t a4, id *a5, uint64_t a6, void *a7)
{
  uint64_t v452 = *MEMORY[0x1E4F143B8];
  int v391 = a2[552];
  unsigned int v395 = *(_DWORD *)(*a7 + 164);
  memset(v419, 0, 192);
  unsigned int v10 = *(_DWORD *)(a4 + 16);
  unsigned int v11 = *(_DWORD *)(a4 + 20);
  unsigned int v12 = *(_DWORD *)(a4 + 24);
  int v13 = *(__int16 *)(a4 + 70);
  if (v13 > 1) {
    uint64_t v14 = (v10 - 1) * v13 + 1;
  }
  else {
    uint64_t v14 = v10;
  }
  int v15 = *(__int16 *)(a4 + 72);
  if (v15 > 1) {
    uint64_t v16 = (v11 - 1) * v15 + 1;
  }
  else {
    uint64_t v16 = v11;
  }
  int v17 = *(__int16 *)(a4 + 74);
  if (v17 > 1) {
    uint64_t v18 = (v12 - 1) * v17 + 1;
  }
  else {
    uint64_t v18 = v12;
  }
  uint64_t v19 = [MEMORY[0x1E4F1CB18] standardUserDefaults];
  int v398 = [v19 persistentDomainForName:*MEMORY[0x1E4F283E0]];

  BOOL v21 = *(__int16 *)(a4 + 70) > 1 || *(__int16 *)(a4 + 72) > 1 || *(__int16 *)(a4 + 74) > 1;
  BOOL v392 = v21;
  BOOL v22 = Espresso::ANECompilerEngine::sparsity_options::force_dense_dilated_convs(v398, v20);
  BOOL v388 = Espresso::ANECompilerEngine::sparsity_options::scan_for_compress_sparse(*a3 + 472, v398);
  Espresso::ANECompilerEngine::sparsity_options::required_sparsity_for_compression(v398, v23);
  uint64_t v25 = (uint64_t)a5[6];
  if ((char *)a5[7] - v25 != (unsigned char *)24)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Inconsistent number of blobs");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (!*(void *)a6)
  {
    if (*(char *)(v25 + 23) < 0) {
      uint64_t v25 = *(void *)v25;
    }
    Espresso::throw_exception_selector<Espresso::unsupported_configuration_error,int &>("ANEC conv: cannot find input blobs. bottom=%s", v25);
  }
  if (!*a7)
  {
    if (*((char *)a5 + 23) >= 0) {
      uint64_t v351 = (uint64_t)a5;
    }
    else {
      uint64_t v351 = (uint64_t)*a5;
    }
    Espresso::throw_exception_selector<Espresso::unsupported_configuration_error,int &>("ANEC conv: cannot find output blobs. top=%s", v351);
  }
  float v26 = v24;
  obuint64_t j = a7;
  Espresso::ANECompilerEngine::ane_arch_allow_network_override(*a3 + 472);
  int32x4_t v390 = (Espresso::ANECompilerEngine *)objc_claimAutoreleasedReturnValue();
  uint64_t v416 = 0;
  int v417 = 0;
  unint64_t v418 = 0;
  int v27 = objc_opt_new();
  [v27 setObject:@"Dense" forKeyedSubscript:@"KernelMode"];
  uint64_t v28 = [NSNumber numberWithInt:v14];
  [v27 setObject:v28 forKeyedSubscript:@"KernelWidth"];

  long long v29 = [NSNumber numberWithInt:v16];
  [v27 setObject:v29 forKeyedSubscript:@"KernelHeight"];

  uint64_t v30 = [NSNumber numberWithInt:v18];
  [v27 setObject:v30 forKeyedSubscript:@"KernelDepth"];

  int v31 = *(_DWORD *)(a4 + 80);
  if (v31 >= 2 && v31 == *(_DWORD *)(a4 + 12) && v31 == *(_DWORD *)(a4 + 8))
  {
    [v27 setObject:@"ChannelWiseDeConv" forKeyedSubscript:@"Type"];
    [v27 setObject:MEMORY[0x1E4F1CC28] forKeyedSubscript:@"KernelGroupReuse"];
    int v386 = 1;
  }
  else
  {
    [v27 setObject:@"DeConv" forKeyedSubscript:@"Type"];
    int v386 = *(_DWORD *)(a4 + 80);
    [v27 setObject:MEMORY[0x1E4F1CC28] forKeyedSubscript:@"KernelGroupReuse"];
  }
  if (v22)
  {
    id v32 = v27;
    unint64_t v33 = v32;
    if (*(__int16 *)(a4 + 70) > 1 || *(__int16 *)(a4 + 72) > 1 || !*(_WORD *)(a4 + 74))
    {
      (*(void (**)(std::string *__return_ptr, void *))(*a1 + 416))(&__p, a1);
      if (!__p.__r_.__value_.__r.__words[0]) {
        Espresso::throw_exception_selector<Espresso::not_implemented_error>("<rdar://problem/36840916> Need proper way of expressing dilated conv to ANEC");
      }
      Espresso::dilated_conv_bloated_weights<float>(buf, (uint64_t)__p.__r_.__value_.__l.__data_, *(_DWORD *)(a4 + 16), *(_DWORD *)(a4 + 20), *(_DWORD *)(a4 + 24), (__int16 *)a4);
      Espresso::ANECompilerEngine::final_anec_weights_t::track_anec_weights_f32_d5((uint64_t)v419, (uint64_t *)buf);
      uint64_t v68 = *(void *)buf;
      unsigned int v69 = *(_DWORD *)(*(void *)buf + 8);
      int32x4_t v384 = *(int32x4_t *)(*(void *)buf + 12);
      uint64_t v70 = (char *)operator new(0x58uLL);
      v71.i64[1] = 0x100000001;
      v71.i64[0] = v69 | 0x100000000;
      int8x16_t v72 = (int8x16_t)vmulq_s32(v384, v71);
      *(int32x2_t *)v72.i8 = vmul_s32(*(int32x2_t *)v72.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v72, v72, 8uLL));
      __int32 v73 = 4 * v72.i32[0] * v72.i32[1];
      *((void *)v70 + 1) = 0;
      *((void *)v70 + 2) = 0;
      *(void *)uint64_t v70 = &unk_1EE389A70;
      float v74 = *(const unsigned __int8 **)(v68 + 32);
      *((void *)v70 + 3) = &unk_1EE36BF70;
      *(_OWORD *)(v70 + 72) = 0u;
      *(_OWORD *)(v70 + 56) = 0u;
      *((_DWORD *)v70 + 8) = v73;
      *((void *)v70 + 5) = v74;
      v70[48] = 0;
      atomic_fetch_add_explicit((atomic_ullong *volatile)v70 + 1, 1uLL, memory_order_relaxed);
      uint64_t v75 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128), v74, v73);
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v70);
      float v76 = [NSNumber numberWithInt:v75];
      [v33 setObject:v76 forKeyedSubscript:@"KernelOffset"];

      unint64_t v77 = NSNumber;
      if (a2[552]) {
        uint64_t weights_file_index = 0;
      }
      else {
      int v99 = [v77 numberWithUnsignedLong:weights_file_index];
      }
      [v33 setObject:v99 forKeyedSubscript:@"KernelIndex"];

      [v33 setObject:@"Float32" forKeyedSubscript:@"KernelType"];
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v70);
      if (*(void *)&buf[8]) {
        nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&buf[8]);
      }
      if (__p.__r_.__value_.__l.__size_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
      }
      char v82 = 0;
      goto LABEL_95;
    }
  }
  char v34 = (std::__shared_weak_count *)a3[1];
  uint64_t v414 = *a3;
  v415 = v34;
  if (v34) {
    atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "blob_weights");
  int v35 = (*(uint64_t (**)(void *, uint64_t *, void *, std::string *))(a1[53] + 88))(a1 + 53, &v414, a1, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v415) {
    nitro::nitro_function::nitro_function(v415);
  }
  if ((v35 & 0x80000000) == 0)
  {
    char v36 = (std::__shared_weak_count *)a3[1];
    uint64_t v412 = *a3;
    v413 = v36;
    if (v36) {
      atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(buf, "blob_weights");
    (*(void (**)(std::string *__return_ptr, void *, uint64_t *, void *, unsigned char *))(a1[53] + 120))(&__p, a1 + 53, &v412, a1, buf);
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    if (v413) {
      nitro::nitro_function::nitro_function(v413);
    }
    uint64_t v37 = (*(uint64_t (**)(void *))(*a1 + 384))(a1);
    int v38 = *(_DWORD *)(v37 + 12);
    int v39 = *(_DWORD *)(a4 + 80);
    int v40 = (char *)operator new(0x68uLL);
    *((void *)v40 + 1) = 0;
    *((void *)v40 + 2) = 0;
    *(void *)int v40 = &unk_1EE389A00;
    std::string::size_type v41 = __p.__r_.__value_.__r.__words[0];
    int v42 = *(_DWORD *)(v37 + 24);
    int v43 = *(_DWORD *)(v37 + 8);
    *((void *)v40 + 3) = &unk_1EE36BF30;
    uint64_t v44 = *(void *)(v37 + 16);
    *(_OWORD *)(v40 + 72) = 0u;
    *(_OWORD *)(v40 + 88) = 0u;
    *((void *)v40 + 4) = v44;
    *((_DWORD *)v40 + 10) = v42;
    *((_DWORD *)v40 + 11) = v38 / v39;
    *((_DWORD *)v40 + 12) = v43;
    *((void *)v40 + 7) = v41;
    v40[64] = 0;
    *(void *)long long buf = v40 + 24;
    *(void *)&buf[8] = v40;
    Espresso::ANECompilerEngine::final_anec_weights_t::track_anec_weights_f32_d5((uint64_t)v419, (uint64_t *)buf);
    uint64_t v45 = *(void *)&v419[0];
    unsigned int v46 = *(_DWORD *)(*(void *)&v419[0] + 8);
    int32x4_t v382 = *(int32x4_t *)(*(void *)&v419[0] + 12);
    uint64_t v47 = (char *)operator new(0x58uLL);
    v48.i64[1] = 0x100000001;
    v48.i64[0] = v46 | 0x100000000;
    int8x16_t v49 = (int8x16_t)vmulq_s32(v382, v48);
    *(int32x2_t *)v49.i8 = vmul_s32(*(int32x2_t *)v49.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v49, v49, 8uLL));
    __int32 v50 = 4 * v49.i32[0] * v49.i32[1];
    *((void *)v47 + 1) = 0;
    *((void *)v47 + 2) = 0;
    *(void *)uint64_t v47 = &unk_1EE389A70;
    uint64_t v51 = *(const unsigned __int8 **)(v45 + 32);
    *((void *)v47 + 3) = &unk_1EE36BF70;
    *(_OWORD *)(v47 + 72) = 0u;
    *(_OWORD *)(v47 + 56) = 0u;
    *((_DWORD *)v47 + 8) = v50;
    *((void *)v47 + 5) = v51;
    v47[48] = 0;
    atomic_fetch_add_explicit((atomic_ullong *volatile)v47 + 1, 1uLL, memory_order_relaxed);
    uint64_t v52 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128), v51, v50);
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v47);
    unint64_t v53 = [NSNumber numberWithInt:v52];
    [v27 setObject:v53 forKeyedSubscript:@"KernelOffset"];

    unint64_t v54 = NSNumber;
    if (v391) {
      uint64_t v55 = 0;
    }
    else {
    unint64_t v79 = [v54 numberWithUnsignedLong:v55];
    }
    [v27 setObject:v79 forKeyedSubscript:@"KernelIndex"];

    [v27 setObject:@"Float32" forKeyedSubscript:@"KernelType"];
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v47);
    size_t size = (std::__shared_weak_count *)v40;
LABEL_54:
    nitro::nitro_function::nitro_function(size);
    goto LABEL_55;
  }
  (*(void (**)(std::string *__return_ptr, void *))(*a1 + 416))(&__p, a1);
  std::string::size_type v56 = __p.__r_.__value_.__r.__words[0];
  if (__p.__r_.__value_.__l.__size_) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
  }
  if (!v56) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Cannot find the weights");
  }
  (*(void (**)(std::string *__return_ptr, void *))(*a1 + 416))(&__p, a1);
  Espresso::ANECompilerEngine::final_anec_weights_t::track_anec_weights_f32_d5((uint64_t)v419, (uint64_t *)&__p);
  uint64_t v57 = *(void *)&v419[0];
  unsigned int v58 = *(_DWORD *)(*(void *)&v419[0] + 8);
  int32x4_t v383 = *(int32x4_t *)(*(void *)&v419[0] + 12);
  unint64_t v59 = (char *)operator new(0x58uLL);
  v60.i64[1] = 0x100000001;
  v60.i64[0] = v58 | 0x100000000;
  int8x16_t v61 = (int8x16_t)vmulq_s32(v383, v60);
  *(int32x2_t *)v61.i8 = vmul_s32(*(int32x2_t *)v61.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v61, v61, 8uLL));
  __int32 v62 = 4 * v61.i32[0] * v61.i32[1];
  *((void *)v59 + 1) = 0;
  *((void *)v59 + 2) = 0;
  *(void *)unint64_t v59 = &unk_1EE389A70;
  size_t v63 = *(const unsigned __int8 **)(v57 + 32);
  *((void *)v59 + 3) = &unk_1EE36BF70;
  *(_OWORD *)(v59 + 72) = 0u;
  *(_OWORD *)(v59 + 56) = 0u;
  *((_DWORD *)v59 + 8) = v62;
  *((void *)v59 + 5) = v63;
  v59[48] = 0;
  atomic_fetch_add_explicit((atomic_ullong *volatile)v59 + 1, 1uLL, memory_order_relaxed);
  uint64_t v64 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128), v63, v62);
  nitro::nitro_function::nitro_function((std::__shared_weak_count *)v59);
  uint64_t v65 = [NSNumber numberWithInt:v64];
  [v27 setObject:v65 forKeyedSubscript:@"KernelOffset"];

  size_t v66 = NSNumber;
  if (v391) {
    uint64_t v67 = 0;
  }
  else {
  uint64_t v81 = [v66 numberWithUnsignedLong:v67];
  }
  [v27 setObject:v81 forKeyedSubscript:@"KernelIndex"];

  [v27 setObject:@"Float32" forKeyedSubscript:@"KernelType"];
  nitro::nitro_function::nitro_function((std::__shared_weak_count *)v59);
  size_t size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_) {
    goto LABEL_54;
  }
LABEL_55:
  if (v392 && !v22)
  {
    id v83 = v27;
    BOOL v85 = *(__int16 *)(a4 + 70) < 2 && *(__int16 *)(a4 + 72) < 2 && *(__int16 *)(a4 + 74) < 2;
    char v86 = v85;
    char v385 = v86;
    if (!v85)
    {
      uint64_t v87 = v83;
      int v381 = a2[552];
      id v380 = [v83 objectForKeyedSubscript:@"KernelType"];
      if (![v380 isEqualToString:@"Float32"])
      {
        if (v380) {
          float v360 = (const char *)[v380 UTF8String];
        }
        else {
          float v360 = "";
        }
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v360;
        Espresso::throw_exception_selector<Espresso::invalid_state_error,char const*>("Invalid kernel type %s", &__p);
      }
      long long v88 = v419[0];
      if (*((void *)&v419[0] + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v419[0] + 1) + 8), 1uLL, memory_order_relaxed);
      }
      if (!(void)v88) {
        Espresso::throw_exception_selector<Espresso::invalid_state_error>("Null final fp32 weights");
      }
      unsigned int v89 = *(_DWORD *)(v88 + 8);
      int32x4_t v379 = *(int32x4_t *)(v88 + 12);
      uint64_t v90 = (char *)operator new(0x58uLL);
      v91.i64[1] = 0x100000001;
      v91.i64[0] = v89 | 0x100000000;
      int8x16_t v92 = (int8x16_t)vmulq_s32(v379, v91);
      *(int32x2_t *)v92.i8 = vmul_s32(*(int32x2_t *)v92.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v92, v92, 8uLL));
      *((void *)v90 + 1) = 0;
      *((void *)v90 + 2) = 0;
      *(void *)uint64_t v90 = &unk_1EE389A70;
      uint64_t v93 = *(void *)(v88 + 32);
      *((void *)v90 + 3) = &unk_1EE36BF70;
      *(_OWORD *)(v90 + 56) = 0u;
      *(_OWORD *)(v90 + 72) = 0u;
      *((_DWORD *)v90 + 8) = 4 * v92.i32[0] * v92.i32[1];
      *((void *)v90 + 5) = v93;
      v90[48] = 0;
      uint64_t v94 = *(int *)(v88 + 8);
      for (uint64_t i = 12; i != 28; i += 4)
        v94 *= *(int *)(v88 + i);
      Espresso::compress_dilated_conv_sparse_kernel_mask<float>((uint64_t *)&__p, (_DWORD *)v88, a4);
      long long v96 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      if (*((void *)&v88 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v88 + 1));
      }
      int v97 = NSNumber;
      if (v381) {
        uint64_t v98 = 0;
      }
      else {
      unsigned int v100 = objc_msgSend(v97, "numberWithUnsignedLong:", v98, *(_OWORD *)&v379);
      }
      [v87 setObject:v100 forKeyedSubscript:@"KernelIndex"];

      int v101 = NSNumber;
      atomic_fetch_add_explicit((atomic_ullong *volatile)v90 + 1, 1uLL, memory_order_relaxed);
      double v102 = objc_msgSend(v101, "numberWithInt:", Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128), *((const unsigned __int8 **)v90 + 5), *((int *)v90 + 8)));
      [v87 setObject:v102 forKeyedSubscript:@"KernelOffset"];

      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v90);
      if (*((void *)&v96 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v96 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v103 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128), *(const unsigned __int8 **)(v96 + 16), *(int *)(v96 + 8));
      if (*((void *)&v96 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v96 + 1));
      }
      id v104 = [NSNumber numberWithInt:v103];
      [v87 setObject:v104 forKeyedSubscript:@"KernelMaskByteOffset"];

      int v105 = NSNumber;
      if (v381) {
        uint64_t v106 = 0;
      }
      else {
      unsigned int v107 = [v105 numberWithUnsignedLong:v106];
      }
      [v87 setObject:v107 forKeyedSubscript:@"KernelMaskIndex"];

      uint64_t v108 = [NSNumber numberWithUnsignedLong:v94];
      [v87 setObject:v108 forKeyedSubscript:@"KernelCoeffCount"];

      [v87 setObject:@"Sparse" forKeyedSubscript:@"KernelMode"];
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v90);
      if (*((void *)&v96 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v96 + 1));
      }
    }
    char v82 = v385 ^ 1;
LABEL_95:

    goto LABEL_96;
  }
  char v82 = 0;
LABEL_96:
  if (!v392 && v388 && (v82 & 1) == 0)
  {
    id v109 = v27;
    int v110 = a2[552];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
    *(void *)&buf[8] = 0;
    *(void *)long long buf = 0;
    if (*(void *)&v419[0])
    {
      unint64_t v111 = (std::__shared_weak_count *)*((void *)&v419[0] + 1);
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v419[0];
      if (*((void *)&v419[0] + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v419[0] + 1) + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v112 = Espresso::ANECompilerEngine::compress_sparse_weights<float,5>((uint64_t)&__str, (uint64_t *)&__p, (uint64_t *)buf, v26);
      if (v111) {
        nitro::nitro_function::nitro_function(v111);
      }
      std::string::size_type v113 = __p.__r_.__value_.__r.__words[0];
      if (__p.__r_.__value_.__r.__words[0] && (uint64_t v114 = *(void *)buf) != 0)
      {
        uint64_t v393 = v112;
        int v115 = (Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128);
        uint64_t v116 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
        if (__p.__r_.__value_.__l.__size_) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(__p.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
        }
        uint64_t v117 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v115, *(const unsigned __int8 **)(v113 + 16), *(int *)(v113 + 8));
        if (v116) {
          nitro::nitro_function::nitro_function(v116);
        }
        char v118 = NSNumber;
        if (v110) {
          uint64_t v119 = 0;
        }
        else {
        uint64_t v121 = [v118 numberWithUnsignedLong:v119];
        }
        [v109 setObject:v121 forKeyedSubscript:@"KernelIndex"];

        char v122 = [NSNumber numberWithInt:v117];
        [v109 setObject:v122 forKeyedSubscript:@"KernelOffset"];

        unint64_t v120 = *(std::__shared_weak_count **)&buf[8];
        if (*(void *)&buf[8]) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 1uLL, memory_order_relaxed);
        }
        uint64_t v123 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v115, *(const unsigned __int8 **)(v114 + 16), *(int *)(v114 + 8));
        if (v120) {
          nitro::nitro_function::nitro_function(v120);
        }
        std::string::size_type v124 = [NSNumber numberWithInt:v123];
        [v109 setObject:v124 forKeyedSubscript:@"KernelMaskByteOffset"];

        uint64_t v125 = NSNumber;
        if (v110) {
          uint64_t v126 = 0;
        }
        else {
        int v127 = [v125 numberWithUnsignedLong:v126];
        }
        [v109 setObject:v127 forKeyedSubscript:@"KernelMaskIndex"];

        __int16 v128 = [NSNumber numberWithUnsignedLong:v393];
        [v109 setObject:v128 forKeyedSubscript:@"KernelCoeffCount"];

        [v109 setObject:@"Sparse" forKeyedSubscript:@"KernelMode"];
      }
      else
      {
        unint64_t v120 = *(std::__shared_weak_count **)&buf[8];
      }
      if (v120) {
        nitro::nitro_function::nitro_function(v120);
      }
    }
    if (__p.__r_.__value_.__l.__size_) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
    }
  }
  uint64_t v129 = *(__int16 *)(a4 + 66);
  uint64_t v130 = *(__int16 *)(a4 + 68);
  uint64_t v131 = [NSNumber numberWithInt:*(__int16 *)(a4 + 64)];
  v441[0] = v131;
  unsigned int v132 = [NSNumber numberWithInt:v129];
  v441[1] = v132;
  unint64_t v133 = [NSNumber numberWithInt:v130];
  v441[2] = v133;
  unint64_t v134 = [MEMORY[0x1E4F1C978] arrayWithObjects:v441 count:3];
  [v27 setObject:v134 forKeyedSubscript:@"Step"];

  long long v135 = *(_OWORD *)(*(void *)a6 + 176);
  v411[0] = *(_OWORD *)(*(void *)a6 + 160);
  v411[1] = v135;
  long long v136 = *(_OWORD *)(*obj + 176);
  v410[0] = *(_OWORD *)(*obj + 160);
  v410[1] = v136;
  Espresso::ANECompilerEngine::mix_deconv3d_kernel::get_padding((unsigned int *)&__p, a4, v411, v410);
  uint64_t data_low = LODWORD(__p.__r_.__value_.__l.__data_);
  uint64_t v138 = HIDWORD(__p.__r_.__value_.__r.__words[0]);
  uint64_t v139 = HIDWORD(__p.__r_.__value_.__r.__words[1]);
  uint64_t v140 = LODWORD(__p.__r_.__value_.__r.__words[2]);
  uint64_t v141 = HIDWORD(__p.__r_.__value_.__r.__words[2]);
  if (*(_OWORD *)&__p.__r_.__value_.__l.__data_ != 0 || LODWORD(__p.__r_.__value_.__r.__words[2]))
  {
    int v142 = objc_msgSend(NSNumber, "numberWithInt:");
    [v27 setObject:v142 forKeyedSubscript:@"PadTop"];

    int v143 = [NSNumber numberWithInt:v139];
    [v27 setObject:v143 forKeyedSubscript:@"PadBot"];

    __int16 v144 = [NSNumber numberWithInt:data_low];
    [v27 setObject:v144 forKeyedSubscript:@"PadLeft"];

    uint64_t v145 = [NSNumber numberWithInt:v138];
    [v27 setObject:v145 forKeyedSubscript:@"PadRight"];

    std::vector<std::string> v146 = [NSNumber numberWithInt:v141];
    [v27 setObject:v146 forKeyedSubscript:@"PadFront"];

    uint64_t v147 = [NSNumber numberWithInt:v140];
    [v27 setObject:v147 forKeyedSubscript:@"PadBack"];

    if (*(_WORD *)(a4 + 46))
    {
      if (*(_WORD *)(a4 + 46) != 1) {
        goto LABEL_133;
      }
      int v148 = @"Replication";
    }
    else
    {
      int v148 = @"Zero";
    }
    [v27 setObject:v148 forKeyedSubscript:@"PaddingMode"];
  }
LABEL_133:
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&__p.__r_.__value_.__l.__data_, a5);
  int v149 = v438;
  uint64_t v438 = @"Conv";

  objc_storeStrong(&v439, v27);
  unint64_t v440 = __PAIR64__(v386, v395);
  int v150 = v417;
  if ((unint64_t)v417 >= v418)
  {
    unint64_t v152 = 0x8E38E38E38E38E39 * (((uint64_t)v417 - v416) >> 4);
    if (v152 + 1 > 0x1C71C71C71C71C7) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v153 = 0x1C71C71C71C71C72 * ((uint64_t)(v418 - v416) >> 4);
    if (v153 <= v152 + 1) {
      unint64_t v153 = v152 + 1;
    }
    if (0x8E38E38E38E38E39 * ((uint64_t)(v418 - v416) >> 4) >= 0xE38E38E38E38E3) {
      unint64_t v154 = 0x1C71C71C71C71C7;
    }
    else {
      unint64_t v154 = v153;
    }
    *((void *)&v443 + 1) = &v418;
    if (v154) {
      unint64_t v154 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v154);
    }
    else {
      uint64_t v155 = 0;
    }
    *(void *)long long buf = v154;
    *(void *)&buf[8] = v154 + 144 * v152;
    *(void *)&uint8_t buf[16] = *(void *)&buf[8];
    *(void *)&long long v443 = v154 + 144 * v155;
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(*(std::string **)&buf[8], (uint64_t)&__p);
    *(void *)&buf[16] += 144;
    std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v416, buf);
    unsigned int v151 = v417;
    std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)buf);
  }
  else
  {
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v417, (uint64_t)&__p);
    unsigned int v151 = v150 + 6;
  }
  int v417 = v151;

  if (v436 < 0) {
    operator delete(v435);
  }
  *(void *)long long buf = &v432;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(void *)long long buf = v431;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }

  uint64_t v156 = (std::__shared_weak_count *)a3[1];
  if (v156) {
    atomic_fetch_add_explicit(&v156->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v157 = *obj;
  double v158 = (std::__shared_weak_count *)obj[1];
  if (v158) {
    atomic_fetch_add_explicit(&v158->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::ANECompilerEngine::compiler::layer_graph_info_t::layer_graph_info_t((Espresso::ANECompilerEngine::compiler::layer_graph_info_t *)&__p);
  id v439 = 0;
  uint64_t v438 = 0;
  unint64_t v440 = 0x100000000;
  uint64_t v159 = a1[61];
  id v160 = (std::__shared_weak_count *)a1[62];
  if (v160) {
    atomic_fetch_add_explicit(&v160->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v159 || *(unsigned char *)((*(uint64_t (**)(void))(a1[53] + 104))() + 40))
  {
    char v161 = 0;
    if (!v160) {
      goto LABEL_159;
    }
    goto LABEL_158;
  }
  float v194 = *(float *)(v157 + 112);
  v423[0] = (void **)v159;
  v423[1] = (void **)&v160->__vftable;
  if (v160) {
    atomic_fetch_add_explicit(&v160->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string v195 = (std::__shared_weak_count *)a1[64];
  v422[0] = a1[63];
  v422[1] = (uint64_t)v195;
  if (v195) {
    atomic_fetch_add_explicit(&v195->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::ane_style_post_scale_bias((uint64_t)v423, v422, (uint64_t)&v424, v194);
  if (v195) {
    nitro::nitro_function::nitro_function(v195);
  }
  if (v160) {
    nitro::nitro_function::nitro_function(v160);
  }
  uint64_t v196 = *(unsigned int *)(v159 + 8);
  std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v420, 2 * v196, 1, 1, 1);
  uint64_t v197 = (int)v196;
  uint64_t v198 = a1[63];
  int v199 = v196;
  if (v198) {
    int v199 = *(_DWORD *)(v198 + 8);
  }
  if (!a2[384])
  {
    Espresso::blob<unsigned char,1>::make(&__str, 4 * v196);
    unint64_t v352 = *(int **)(__str.__r_.__value_.__r.__words[0] + 16);
    int v403 = v196 - 1;
    if ((int)v196 >= 1)
    {
      for (uint64_t j = 0; j != v196; ++j)
      {
        float v354 = *(float *)(*(void *)(v159 + 16) + j * 4);
        *(float *)&int v355 = ldexp(1.0, -v428) * v354;
        v352[j] = v355;
      }
    }
    if (v196)
    {
      v356 = *(_WORD **)(v420 + 16);
      do
      {
        int v357 = *v352++;
        _S0 = v357;
        __asm { FCVT            H0, S0 }
        *v356++ = _S0;
        --v197;
      }
      while (v197);
    }
    if (a1[63])
    {
      Espresso::blob<unsigned char,1>::make(buf, 4 * v199);
      uint64_t v361 = *(void *)buf;
      Espresso::blob<unsigned char,1>::make(buf, 2 * v199);
      uint64_t v400 = *(void *)buf;
      v362 = *(int **)(v361 + 16);
      if (v199 >= 1)
      {
        for (uint64_t k = 0; k != v199; ++k)
        {
          int v364 = v403;
          if (v403 >= (int)k) {
            int v364 = k;
          }
          *(float *)&int v365 = *(float *)(*(void *)(v426 + 16) + 4 * k) * *(float *)(*(void *)(v424 + 16) + 4 * v364);
          v362[k] = v365;
          unsigned int v366 = v429;
          unsigned int v367 = v428;
          *(float *)&int v368 = ldexp(1.0, v429 - v428) * *(float *)&v365;
          v362[k] = v368;
          float v371 = ldexp(1.0, v367 - v366) * *(float *)&v368;
          if (v371 < -127.0 || v371 > 255.0)
          {
            unsigned int v373 = Espresso::espresso_os_log_subsystem(v369, v370);
            if (os_log_type_enabled(v373, OS_LOG_TYPE_ERROR))
            {
              double v374 = *(float *)&v362[k];
              *(_DWORD *)long long buf = 134218752;
              *(double *)&uint8_t buf[4] = v371;
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = v429;
              *(_WORD *)&unsigned char buf[18] = 1024;
              *(_DWORD *)&buf[20] = v428;
              LOWORD(v443) = 2048;
              *(double *)((char *)&v443 + 2) = v374;
              _os_log_error_impl(&dword_1920CB000, v373, OS_LOG_TYPE_ERROR, "[ANEC::add_ane_scale_bias_unit] Shifted bias overflowing shifted_b=%f acc_bias_shift=%d post_right_shift=%d anebias=%f", buf, 0x22u);
            }
          }
        }
      }
      if (v199)
      {
        uint64_t v375 = v199;
        v376 = *(_WORD **)(v400 + 16);
        do
        {
          int v377 = *v362++;
          _S0 = v377;
          __asm { FCVT            H0, S0 }
          *v376++ = _S0;
          --v375;
        }
        while (v375);
      }
    }
    v359 = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
    Espresso::not_implemented_error::not_implemented_error(v359);
  }
  unsigned int v387 = v429;
  uint64_t v200 = v420;
  if (v196)
  {
    id v201 = *(int **)(v424 + 16);
    id v202 = *(_WORD **)(v420 + 16);
    do
    {
      int v203 = *v201++;
      _S0 = v203;
      __asm { FCVT            H0, S0 }
      *v202++ = _S0;
      --v197;
    }
    while (v197);
  }
  if (v198)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(buf, 2 * v199, 1, 1, 1);
    int v394 = *(std::__shared_weak_count **)&buf[8];
    uint64_t v389 = *(void *)buf;
    if (v199)
    {
      uint64_t v205 = v199;
      std::string v206 = *(_WORD **)(*(void *)buf + 16);
      long long v207 = *(int **)(v426 + 16);
      do
      {
        int v208 = *v207++;
        _S0 = v208;
        __asm { FCVT            H0, S0 }
        *v206++ = _S0;
        --v205;
      }
      while (v205);
    }
  }
  else
  {
    int v394 = 0;
    uint64_t v389 = 0;
  }
  int v225 = a2[552];
  std::string v226 = (Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128);
  std::string v227 = v421;
  if (v421) {
    atomic_fetch_add_explicit(&v421->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v228 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v226, *(const unsigned __int8 **)(v200 + 16), *(int *)(v200 + 8));
  if (v227) {
    nitro::nitro_function::nitro_function(v227);
  }
  id obja = (id)objc_opt_new();
  if (a2[121])
  {
    id v229 = *(id *)(v416 + 128);

    id obja = v229;
  }
  unint64_t v230 = objc_opt_new();
  unint64_t v231 = [NSNumber numberWithInt:v196];
  [v230 setObject:v231 forKeyedSubscript:@"ScaleCount"];

  uint64_t v232 = [NSNumber numberWithInt:v228];
  [v230 setObject:v232 forKeyedSubscript:@"ScaleOffset"];

  int v233 = NSNumber;
  if (v225) {
    uint64_t v234 = 0;
  }
  else {
  std::string v235 = [v233 numberWithUnsignedLong:v234];
  }
  [v230 setObject:v235 forKeyedSubscript:@"ScaleIndex"];

  [v230 setObject:@"Float16" forKeyedSubscript:@"ScaleType"];
  id v236 = [NSNumber numberWithInt:v428];
  [obja setObject:v236 forKeyedSubscript:@"ScaleShift"];

  if (a1[63])
  {
    if (v394) {
      atomic_fetch_add_explicit(&v394->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v237 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v226, *(const unsigned __int8 **)(v389 + 16), *(int *)(v389 + 8));
    if (v394) {
      nitro::nitro_function::nitro_function(v394);
    }
    long long v238 = [NSNumber numberWithInt:*(unsigned int *)(a1[63] + 8)];
    [v230 setObject:v238 forKeyedSubscript:@"BiasCount"];

    char v239 = [NSNumber numberWithInt:v237];
    [v230 setObject:v239 forKeyedSubscript:@"BiasOffset"];

    int v240 = NSNumber;
    if (v225) {
      uint64_t v241 = 0;
    }
    else {
    char v242 = [v240 numberWithUnsignedLong:v241];
    }
    [v230 setObject:v242 forKeyedSubscript:@"BiasIndex"];

    [v230 setObject:@"Float16" forKeyedSubscript:@"BiasType"];
    v243 = [NSNumber numberWithInt:v387];
    [obja setObject:v243 forKeyedSubscript:@"BiasShift"];
  }
  [obja setObject:v230 forKeyedSubscript:@"BiasScaleGroupData"];
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)buf, a5);
  uint64_t v244 = v417;
  if (v417 != (std::string *)v416)
  {
    char v245 = v417 - 6;
    uint64_t v246 = HIBYTE(v417[-6].__r_.__value_.__r.__words[2]);
    char v247 = v246;
    std::string::size_type v248 = v417[-6].__r_.__value_.__l.__size_;
    if ((v246 & 0x80u) == 0) {
      std::string::size_type v249 = HIBYTE(v417[-6].__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v249 = v417[-6].__r_.__value_.__l.__size_;
    }
    uint64_t v250 = buf[23];
    if (buf[23] < 0) {
      uint64_t v250 = *(void *)&buf[8];
    }
    if (v249 == v250)
    {
      if (buf[23] >= 0) {
        unint64_t v251 = buf;
      }
      else {
        unint64_t v251 = *(unsigned __int8 **)buf;
      }
      if ((char)v246 < 0)
      {
        std::string::pointer data = (const std::string::value_type *)v245->__r_.__value_.__r.__words[0];
        if (memcmp(v245->__r_.__value_.__l.__data_, v251, v417[-6].__r_.__value_.__l.__size_)) {
          goto LABEL_357;
        }
      }
      else if ((_BYTE)v246)
      {
        int v252 = v417 - 6;
        while (v252->__r_.__value_.__s.__data_[0] == *v251)
        {
          int v252 = (std::string *)((char *)v252 + 1);
          ++v251;
          if (!--v246) {
            goto LABEL_353;
          }
        }
        goto LABEL_354;
      }
LABEL_353:
      std::string::append(v244 - 6, "__@pre_scale_bias");
      char v247 = HIBYTE(v244[-6].__r_.__value_.__r.__words[2]);
    }
LABEL_354:
    if ((v247 & 0x80) == 0)
    {
      long long v315 = *(_OWORD *)&v245->__r_.__value_.__l.__data_;
      __str.__r_.__value_.__r.__words[2] = v244[-6].__r_.__value_.__r.__words[2];
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v315;
      goto LABEL_358;
    }
    std::string::pointer data = v244[-6].__r_.__value_.__l.__data_;
    std::string::size_type v248 = v244[-6].__r_.__value_.__l.__size_;
LABEL_357:
    std::string::__init_copy_ctor_external(&__str, data, v248);
LABEL_358:
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v444, &__str, &v451, 1uLL);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
  }
  v316 = v448;
  char v448 = @"GOC";

  objc_storeStrong(&v449, obja);
  if (!a2[121])
  {
    unint64_t v317 = v417;
    if ((unint64_t)v417 >= v418)
    {
      unint64_t v319 = 0x8E38E38E38E38E39 * (((uint64_t)v417 - v416) >> 4);
      if (v319 + 1 > 0x1C71C71C71C71C7) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v320 = 0x1C71C71C71C71C72 * ((uint64_t)(v418 - v416) >> 4);
      if (v320 <= v319 + 1) {
        unint64_t v320 = v319 + 1;
      }
      if (0x8E38E38E38E38E39 * ((uint64_t)(v418 - v416) >> 4) >= 0xE38E38E38E38E3) {
        unint64_t v321 = 0x1C71C71C71C71C7;
      }
      else {
        unint64_t v321 = v320;
      }
      *((void *)&v451 + 1) = &v418;
      if (v321) {
        unint64_t v321 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v321);
      }
      else {
        uint64_t v322 = 0;
      }
      __str.__r_.__value_.__r.__words[0] = v321;
      __str.__r_.__value_.__l.__size_ = v321 + 144 * v319;
      __str.__r_.__value_.__r.__words[2] = __str.__r_.__value_.__l.__size_;
      *(void *)&long long v451 = v321 + 144 * v322;
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)__str.__r_.__value_.__l.__size_, (uint64_t)buf);
      __str.__r_.__value_.__r.__words[2] += 144;
      std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v416, &__str);
      unint64_t v318 = v417;
      std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&__str);
    }
    else
    {
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v417, (uint64_t)buf);
      unint64_t v318 = v317 + 6;
    }
    int v417 = v318;
  }

  if (v446 < 0) {
    operator delete(v445);
  }
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v444;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v443;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }

  if (v394) {
    nitro::nitro_function::nitro_function(v394);
  }
  if (v421) {
    nitro::nitro_function::nitro_function(v421);
  }
  if (v427) {
    nitro::nitro_function::nitro_function(v427);
  }
  if (v425) {
    nitro::nitro_function::nitro_function(v425);
  }
  char v161 = 1;
  if (v160) {
LABEL_158:
  }
    nitro::nitro_function::nitro_function(v160);
LABEL_159:

  if (v436 < 0) {
    operator delete(v435);
  }
  *(void *)long long buf = &v432;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(void *)long long buf = v431;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v158) {
    nitro::nitro_function::nitro_function(v158);
  }
  if (v156) {
    nitro::nitro_function::nitro_function(v156);
  }
  if (v161)
  {
    if (*(_DWORD *)(a4 + 40)) {
LABEL_493:
    }
      Espresso::throw_exception_selector<Espresso::invalid_state_error>("Inconsistent fused bn state");
    goto LABEL_390;
  }
  id v162 = (void *)a1[51];
  if (v162 && *v162 && (v162[4] || v162[6] || v162[8] || v162[10]))
  {
    uint64_t v163 = v162[10];
    if (v163)
    {
      uint64_t v164 = *(int *)(v163 + 8);
      std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&__p, 2 * v164, 1, 1, 1);
      long long v165 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      id v166 = *(const unsigned __int8 **)(__p.__r_.__value_.__r.__words[0] + 16);
      if (v164)
      {
        id v167 = *(int **)(*(void *)(a1[51] + 80) + 16);
        id v168 = *(_WORD **)(__p.__r_.__value_.__r.__words[0] + 16);
        uint64_t v169 = v164;
        do
        {
          int v170 = *v167++;
          _S0 = v170;
          __asm { FCVT            H0, S0 }
          *v168++ = _S0;
          --v169;
        }
        while (v169);
      }
      uint64_t v176 = (Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128);
      if (*((void *)&v165 + 1))
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v165 + 1) + 8), 1uLL, memory_order_relaxed);
        id v166 = *(const unsigned __int8 **)(v165 + 16);
      }
      uint64_t v177 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v176, v166, *(int *)(v165 + 8));
      if (*((void *)&v165 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v165 + 1));
      }
      id v178 = objc_opt_new();
      char v179 = [NSNumber numberWithUnsignedLong:v164];
      [v178 setObject:v179 forKeyedSubscript:@"ScaleCount"];

      id v180 = [NSNumber numberWithInt:v177];
      [v178 setObject:v180 forKeyedSubscript:@"ScaleOffset"];

      long long v181 = NSNumber;
      if (v391) {
        uint64_t v182 = 0;
      }
      else {
      int v253 = [v181 numberWithUnsignedLong:v182];
      }
      [v178 setObject:v253 forKeyedSubscript:@"ScaleIndex"];

      [v178 setObject:@"Float16" forKeyedSubscript:@"ScaleType"];
      if (*(_DWORD *)(*(uint64_t (**)(void *))(*a1 + 384))(a1))
      {
        (*(void (**)(std::string *__return_ptr, void *))(*a1 + 408))(&__str, a1);
        if (!__str.__r_.__value_.__r.__words[0])
        {
          int v254 = (std::__shared_weak_count *)a3[1];
          uint64_t v408 = *a3;
          BOOL v409 = v254;
          if (v254) {
            atomic_fetch_add_explicit(&v254->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          std::string::basic_string[abi:ne180100]<0>(buf, "blob_biases");
          (*(void (**)(std::string *__return_ptr))(a1[53] + 120))(&__p);
          if ((buf[23] & 0x80000000) != 0) {
            operator delete(*(void **)buf);
          }
          if (v409) {
            nitro::nitro_function::nitro_function(v409);
          }
          unint64_t v255 = __p.__r_.__value_.__r.__words[2];
          uint64_t v256 = (char *)operator new(0x58uLL);
          *((void *)v256 + 1) = 0;
          *((void *)v256 + 2) = 0;
          *(void *)uint64_t v256 = &unk_1EE389920;
          std::string::size_type v257 = __p.__r_.__value_.__r.__words[0];
          *((void *)v256 + 3) = &unk_1EE36BEB0;
          *(_OWORD *)(v256 + 56) = 0u;
          *(_OWORD *)(v256 + 72) = 0u;
          *((_DWORD *)v256 + 8) = v255 >> 2;
          *((void *)v256 + 5) = v257;
          v256[48] = 0;
          std::string v258 = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
          __str.__r_.__value_.__r.__words[0] = (std::string::size_type)(v256 + 24);
          __str.__r_.__value_.__l.__size_ = (std::string::size_type)v256;
          if (v258)
          {
            nitro::nitro_function::nitro_function(v258);
            if (!__str.__r_.__value_.__r.__words[0]) {
              Espresso::throw_exception_selector<Espresso::invalid_state_error>("Missing biases");
            }
          }
        }
        std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&__p, 4 * v164, 1, 1, 1);
        std::string::size_type v259 = __p.__r_.__value_.__r.__words[0];
        if (v164)
        {
          long long v260 = *(float **)(__p.__r_.__value_.__r.__words[0] + 16);
          int v261 = *(float **)(__str.__r_.__value_.__r.__words[0] + 16);
          char v262 = *(float **)(*(void *)(a1[51] + 80) + 16);
          uint64_t v263 = v164;
          do
          {
            float v264 = *v261++;
            float v265 = v264;
            float v266 = *v262++;
            *v260++ = v265 / v266;
            --v263;
          }
          while (v263);
        }
        std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(buf, 2 * v164, 1, 1, 1);
        uint64_t v267 = *(void *)buf;
        v268 = *(const unsigned __int8 **)(*(void *)buf + 16);
        if (v164)
        {
          long long v269 = *(int **)(v259 + 16);
          uint64_t v270 = *(_WORD **)(*(void *)buf + 16);
          uint64_t v271 = v164;
          do
          {
            int v272 = *v269++;
            _S0 = v272;
            __asm { FCVT            H0, S0 }
            *v270++ = _S0;
            --v271;
          }
          while (v271);
        }
        uint64_t v274 = *(std::__shared_weak_count **)&buf[8];
        if (*(void *)&buf[8])
        {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 1uLL, memory_order_relaxed);
          v268 = *(const unsigned __int8 **)(v267 + 16);
        }
        uint64_t v275 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v176, v268, *(int *)(v267 + 8));
        if (v274) {
          nitro::nitro_function::nitro_function(v274);
        }
        v276 = [NSNumber numberWithUnsignedLong:v164];
        [v178 setObject:v276 forKeyedSubscript:@"BiasCount"];

        v277 = [NSNumber numberWithInt:v275];
        [v178 setObject:v277 forKeyedSubscript:@"BiasOffset"];

        uint64_t v278 = NSNumber;
        if (v391) {
          uint64_t v279 = 0;
        }
        else {
        v305 = [v278 numberWithUnsignedLong:v279];
        }
        [v178 setObject:v305 forKeyedSubscript:@"BiasIndex"];

        [v178 setObject:@"Float16" forKeyedSubscript:@"BiasType"];
        if (v274) {
          nitro::nitro_function::nitro_function(v274);
        }
        if (__p.__r_.__value_.__l.__size_) {
          nitro::nitro_function::nitro_function((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
        }
        if (__str.__r_.__value_.__l.__size_) {
          nitro::nitro_function::nitro_function((std::__shared_weak_count *)__str.__r_.__value_.__l.__size_);
        }
      }
      uint64_t v306 = objc_opt_new();
      [v306 setObject:v178 forKeyedSubscript:@"BiasScaleGroupData"];
      Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&__p.__r_.__value_.__l.__data_, a5);
      v307 = v438;
      uint64_t v438 = @"GOC";

      objc_storeStrong(&v439, v306);
      v308 = v417;
      if ((unint64_t)v417 >= v418)
      {
        unint64_t v310 = 0x8E38E38E38E38E39 * (((uint64_t)v417 - v416) >> 4);
        if (v310 + 1 > 0x1C71C71C71C71C7) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v311 = 0x1C71C71C71C71C72 * ((uint64_t)(v418 - v416) >> 4);
        if (v311 <= v310 + 1) {
          unint64_t v311 = v310 + 1;
        }
        if (0x8E38E38E38E38E39 * ((uint64_t)(v418 - v416) >> 4) >= 0xE38E38E38E38E3) {
          unint64_t v312 = 0x1C71C71C71C71C7;
        }
        else {
          unint64_t v312 = v311;
        }
        *((void *)&v443 + 1) = &v418;
        if (v312) {
          unint64_t v312 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v312);
        }
        else {
          uint64_t v313 = 0;
        }
        *(void *)long long buf = v312;
        *(void *)&buf[8] = v312 + 144 * v310;
        *(void *)&uint8_t buf[16] = *(void *)&buf[8];
        *(void *)&long long v443 = v312 + 144 * v313;
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(*(std::string **)&buf[8], (uint64_t)&__p);
        *(void *)&buf[16] += 144;
        std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v416, buf);
        v309 = v417;
        std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)buf);
      }
      else
      {
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v417, (uint64_t)&__p);
        v309 = v308 + 6;
      }
      int v417 = v309;

      if (v436 < 0) {
        operator delete(v435);
      }
      *(void *)long long buf = &v432;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
      *(void *)long long buf = v431;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }

      if (!*((void *)&v165 + 1)) {
        goto LABEL_390;
      }
      uint64_t v280 = (std::__shared_weak_count *)*((void *)&v165 + 1);
      goto LABEL_379;
    }
  }
  if (!*(_DWORD *)(a4 + 40))
  {
    if (*(_DWORD *)a4)
    {
      if (a2[121])
      {
        id v210 = *(id *)(v416 + 128);
      }
      else
      {
        id v210 = (id)objc_opt_new();
      }
      v281 = objc_opt_new();
      uint64_t v282 = [NSNumber numberWithInt:v395];
      [v281 setObject:v282 forKeyedSubscript:@"BiasCount"];

      (*(void (**)(std::string *__return_ptr, void *))(*a1 + 408))(&__str, a1);
      v283 = (std::__shared_weak_count *)a3[1];
      int v405 = v283;
      if (v283) {
        atomic_fetch_add_explicit(&v283->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "blob_biases");
      (*(void (**)(unsigned char *__return_ptr))(a1[53] + 120))(buf);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (v405) {
        nitro::nitro_function::nitro_function(v405);
      }
      std::string::size_type v284 = __str.__r_.__value_.__r.__words[0];
      if (!__str.__r_.__value_.__r.__words[0])
      {
        unint64_t v285 = *(void *)&buf[16];
        uint64_t v286 = (char *)operator new(0x58uLL);
        *((void *)v286 + 1) = 0;
        *((void *)v286 + 2) = 0;
        *(void *)uint64_t v286 = &unk_1EE389920;
        std::string::size_type v284 = (std::string::size_type)(v286 + 24);
        uint64_t v287 = *(void *)buf;
        *((void *)v286 + 3) = &unk_1EE36BEB0;
        *(_OWORD *)(v286 + 56) = 0u;
        *(_OWORD *)(v286 + 72) = 0u;
        *((_DWORD *)v286 + 8) = v285 >> 2;
        *((void *)v286 + 5) = v287;
        v286[48] = 0;
        v288 = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)(v286 + 24);
        __str.__r_.__value_.__l.__size_ = (std::string::size_type)v286;
        if (v288)
        {
          nitro::nitro_function::nitro_function(v288);
          std::string::size_type v284 = __str.__r_.__value_.__r.__words[0];
          if (!__str.__r_.__value_.__r.__words[0]) {
            Espresso::throw_exception_selector<Espresso::invalid_state_error>("Missing biases");
          }
        }
      }
      v289 = *(int **)(v284 + 16);
      uint64_t v290 = *(int *)(v284 + 8);
      std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v424, 2 * v290, 1, 1, 1);
      uint64_t v291 = v424;
      unint64_t v292 = *(const unsigned __int8 **)(v424 + 16);
      if (v290)
      {
        v293 = *(_WORD **)(v424 + 16);
        do
        {
          int v294 = *v289++;
          _S0 = v294;
          __asm { FCVT            H0, S0 }
          *v293++ = _S0;
          --v290;
        }
        while (v290);
      }
      v296 = v425;
      if (v425)
      {
        atomic_fetch_add_explicit(&v425->__shared_owners_, 1uLL, memory_order_relaxed);
        unint64_t v292 = *(const unsigned __int8 **)(v291 + 16);
      }
      uint64_t v297 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128), v292, *(int *)(v291 + 8));
      if (v296) {
        nitro::nitro_function::nitro_function(v296);
      }
      uint64_t v298 = NSNumber;
      if (v391) {
        uint64_t v299 = 0;
      }
      else {
      v300 = [v298 numberWithUnsignedLong:v299];
      }
      [v281 setObject:v300 forKeyedSubscript:@"BiasIndex"];

      int v301 = [NSNumber numberWithInt:v297];
      [v281 setObject:v301 forKeyedSubscript:@"BiasOffset"];

      [v281 setObject:@"Float16" forKeyedSubscript:@"BiasType"];
      [v210 setObject:v281 forKeyedSubscript:@"BiasScaleGroupData"];
      if (!a2[121])
      {
        Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&__p.__r_.__value_.__l.__data_, a5);
        v302 = v438;
        uint64_t v438 = @"GOC";

        objc_storeStrong(&v439, v210);
        v303 = v417;
        if ((unint64_t)v417 >= v418)
        {
          uint64_t v304 = (std::string *)std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__push_back_slow_path<Espresso::ANECompilerEngine::compiler::unit_t const&>(&v416, (uint64_t)&__p);
        }
        else
        {
          std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v417, (uint64_t)&__p);
          uint64_t v304 = v303 + 6;
        }
        int v417 = v304;

        if (v436 < 0) {
          operator delete(v435);
        }
        v423[0] = (void **)&v432;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v423);
        v423[0] = (void **)v431;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v423);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      if (v296) {
        nitro::nitro_function::nitro_function(v296);
      }
      if (__str.__r_.__value_.__l.__size_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)__str.__r_.__value_.__l.__size_);
      }
    }
    goto LABEL_390;
  }
  if (a2[121]) {
    goto LABEL_493;
  }
  (*(void (**)(uint64_t *__return_ptr, void *))(*a1 + 408))(&v406, a1);
  Espresso::ANECompilerEngine::batchnorm_kernel::batchnorm_to_scale_bias((uint64_t)&__str, (uint64_t)&v406, v395, a2[384], 0, 0.0);
  if (v407) {
    nitro::nitro_function::nitro_function(v407);
  }
  long long v183 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
  if (__str.__r_.__value_.__l.__size_) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(__str.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
  }
  std::string::size_type v185 = __str.__r_.__value_.__r.__words[2];
  char v184 = (std::__shared_weak_count *)v451;
  if ((void)v451) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v451 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v186 = (Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128);
  if (*((void *)&v183 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v183 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v187 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v186, *(const unsigned __int8 **)(v183 + 16), *(int *)(v183 + 8));
  if (*((void *)&v183 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v183 + 1));
  }
  if (v184) {
    atomic_fetch_add_explicit(&v184->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v188 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v186, *(const unsigned __int8 **)(v185 + 16), *(int *)(v185 + 8));
  if (v184) {
    nitro::nitro_function::nitro_function(v184);
  }
  unint64_t v189 = objc_opt_new();
  long long v190 = [NSNumber numberWithInt:v395];
  [v189 setObject:v190 forKeyedSubscript:@"BiasCount"];

  std::string v191 = [NSNumber numberWithInt:v188];
  [v189 setObject:v191 forKeyedSubscript:@"BiasOffset"];

  int v192 = NSNumber;
  if (v391) {
    uint64_t v193 = 0;
  }
  else {
  __int16 v211 = [v192 numberWithUnsignedLong:v193];
  }
  [v189 setObject:v211 forKeyedSubscript:@"BiasIndex"];

  [v189 setObject:@"Float32" forKeyedSubscript:@"BiasType"];
  double v212 = [NSNumber numberWithInt:v395];
  [v189 setObject:v212 forKeyedSubscript:@"ScaleCount"];

  std::string v213 = [NSNumber numberWithInt:v187];
  [v189 setObject:v213 forKeyedSubscript:@"ScaleOffset"];

  std::vector<std::string> v214 = NSNumber;
  if (v391) {
    uint64_t v215 = 0;
  }
  else {
  char v216 = [v214 numberWithUnsignedLong:v215];
  }
  [v189 setObject:v216 forKeyedSubscript:@"ScaleIndex"];

  [v189 setObject:@"Float32" forKeyedSubscript:@"ScaleType"];
  id v217 = objc_opt_new();
  [v217 setObject:v189 forKeyedSubscript:@"BiasScaleGroupData"];
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&__p.__r_.__value_.__l.__data_, a5);
  std::string v218 = v438;
  uint64_t v438 = @"GOC";

  objc_storeStrong(&v439, v217);
  std::string v219 = v417;
  if ((unint64_t)v417 >= v418)
  {
    unint64_t v221 = 0x8E38E38E38E38E39 * (((uint64_t)v417 - v416) >> 4);
    if (v221 + 1 > 0x1C71C71C71C71C7) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v222 = 0x1C71C71C71C71C72 * ((uint64_t)(v418 - v416) >> 4);
    if (v222 <= v221 + 1) {
      unint64_t v222 = v221 + 1;
    }
    if (0x8E38E38E38E38E39 * ((uint64_t)(v418 - v416) >> 4) >= 0xE38E38E38E38E3) {
      unint64_t v223 = 0x1C71C71C71C71C7;
    }
    else {
      unint64_t v223 = v222;
    }
    *((void *)&v443 + 1) = &v418;
    if (v223) {
      unint64_t v223 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v223);
    }
    else {
      uint64_t v224 = 0;
    }
    *(void *)long long buf = v223;
    *(void *)&buf[8] = v223 + 144 * v221;
    *(void *)&uint8_t buf[16] = *(void *)&buf[8];
    *(void *)&long long v443 = v223 + 144 * v224;
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(*(std::string **)&buf[8], (uint64_t)&__p);
    *(void *)&buf[16] += 144;
    std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v416, buf);
    std::string v220 = v417;
    std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)buf);
  }
  else
  {
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v417, (uint64_t)&__p);
    std::string v220 = v219 + 6;
  }
  int v417 = v220;

  if (v436 < 0) {
    operator delete(v435);
  }
  *(void *)long long buf = &v432;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(void *)long long buf = v431;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }

  if (v184) {
    nitro::nitro_function::nitro_function(v184);
  }
  if (*((void *)&v183 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v183 + 1));
  }
  if ((void)v451) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v451);
  }
  uint64_t v280 = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
  if (__str.__r_.__value_.__l.__size_) {
LABEL_379:
  }
    nitro::nitro_function::nitro_function(v280);
LABEL_390:
  int v323 = *(_DWORD *)(a4 + 28);
  if (v323 == -1)
  {
LABEL_474:
    (*(void (**)(void *, unsigned char *, uint64_t *))(a1[53] + 32))(a1 + 53, a2, &v416);
    goto LABEL_475;
  }
  if (v323 != 1)
  {
    if (v323) {
      Espresso::throw_exception_selector<Espresso::not_implemented_error>("Custom activation not implemented");
    }
    if (a2[121])
    {
      id v324 = *(id *)(v416 + 128);
    }
    else
    {
      id v324 = (id)objc_opt_new();
    }
    [v324 setObject:@"ReLU" forKeyedSubscript:@"Type"];
    if (a2[121]) {
      goto LABEL_473;
    }
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&__p.__r_.__value_.__l.__data_, a5);
    unint64_t v328 = v438;
    uint64_t v438 = @"Neuron";

    objc_storeStrong(&v439, v324);
    uint64_t v329 = v417;
    if ((unint64_t)v417 >= v418)
    {
      unint64_t v331 = 0x8E38E38E38E38E39 * (((uint64_t)v417 - v416) >> 4);
      if (v331 + 1 > 0x1C71C71C71C71C7) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v332 = 0x1C71C71C71C71C72 * ((uint64_t)(v418 - v416) >> 4);
      if (v332 <= v331 + 1) {
        unint64_t v332 = v331 + 1;
      }
      v333 = (char *)(0x8E38E38E38E38E39 * ((uint64_t)(v418 - v416) >> 4) >= 0xE38E38E38E38E3
                    ? 0x1C71C71C71C71C7
                    : v332);
      *((void *)&v443 + 1) = &v418;
      if (v333) {
        v333 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>((unint64_t)v333);
      }
      else {
        uint64_t v334 = 0;
      }
      *(void *)long long buf = v333;
      *(void *)&buf[8] = &v333[144 * v331];
      *(void *)&uint8_t buf[16] = *(void *)&buf[8];
      *(void *)&long long v443 = &v333[144 * v334];
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(*(std::string **)&buf[8], (uint64_t)&__p);
      *(void *)&buf[16] += 144;
      std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v416, buf);
      int v330 = v417;
      std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)buf);
    }
    else
    {
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v417, (uint64_t)&__p);
      int v330 = v329 + 6;
    }
    int v417 = v330;

    if (v436 < 0) {
      operator delete(v435);
    }
    *(void *)long long buf = &v432;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    *(void *)long long buf = v431;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_473;
    }
    v348 = (void *)__p.__r_.__value_.__r.__words[0];
    goto LABEL_472;
  }
  if (a2[121])
  {
    id v324 = *(id *)(v416 + 128);
  }
  else
  {
    id v324 = (id)objc_opt_new();
  }
  [v324 setObject:@"Tanh" forKeyedSubscript:@"Type"];
  if (a2[121]) {
    goto LABEL_473;
  }
  uint64_t v325 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&__p, "experimental.ane.use_high_precision_activations");
  std::string::basic_string[abi:ne180100]<0>(buf, "1");
  Espresso::map_const_get<std::map<std::string,std::string>>(v325 + 472, (uint64_t)&__p, (uint64_t)buf, &__str);
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    if (__str.__r_.__value_.__l.__size_ != 1) {
      goto LABEL_421;
    }
    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) != 1) {
      goto LABEL_421;
    }
    p_str = &__str;
  }
  if (p_str->__r_.__value_.__s.__data_[0] == 48)
  {
LABEL_427:
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&__p.__r_.__value_.__l.__data_, a5);
    v340 = v438;
    uint64_t v438 = @"Neuron";

    objc_storeStrong(&v439, v324);
    uint64_t v341 = v417;
    if ((unint64_t)v417 >= v418)
    {
      unint64_t v344 = 0x8E38E38E38E38E39 * (((uint64_t)v417 - v416) >> 4);
      if (v344 + 1 > 0x1C71C71C71C71C7) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v345 = 0x1C71C71C71C71C72 * ((uint64_t)(v418 - v416) >> 4);
      if (v345 <= v344 + 1) {
        unint64_t v345 = v344 + 1;
      }
      if (0x8E38E38E38E38E39 * ((uint64_t)(v418 - v416) >> 4) >= 0xE38E38E38E38E3) {
        unint64_t v346 = 0x1C71C71C71C71C7;
      }
      else {
        unint64_t v346 = v345;
      }
      *((void *)&v443 + 1) = &v418;
      if (v346) {
        unint64_t v346 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v346);
      }
      else {
        uint64_t v347 = 0;
      }
      *(void *)long long buf = v346;
      *(void *)&buf[8] = v346 + 144 * v344;
      *(void *)&uint8_t buf[16] = *(void *)&buf[8];
      *(void *)&long long v443 = v346 + 144 * v347;
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(*(std::string **)&buf[8], (uint64_t)&__p);
      *(void *)&buf[16] += 144;
      std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v416, buf);
      v342 = v417;
      std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)buf);
    }
    else
    {
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v417, (uint64_t)&__p);
      v342 = v341 + 6;
    }
    int v417 = v342;

    if (v436 < 0) {
      operator delete(v435);
    }
    *(void *)long long buf = &v432;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    *(void *)long long buf = v431;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_473;
    }
    v348 = (void *)__str.__r_.__value_.__r.__words[0];
LABEL_472:
    operator delete(v348);
LABEL_473:

    goto LABEL_474;
  }
LABEL_421:
  if (!Espresso::ANECompilerEngine::is_mix(v390, v326)) {
    goto LABEL_427;
  }
  v335 = v417;
  v336 = v417 - 6;
  std::string::append(v417 - 6, "_pre_tanh");
  v337 = a1 + 53;
  (*(void (**)(void *, unsigned char *, uint64_t *))(a1[53] + 32))(a1 + 53, a2, &v416);
  Espresso::ANECompilerEngine::compiler::layer_graph_info_t::layer_graph_info_t(&__p, (const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *)a5);
  unint64_t v338 = v432;
  for (uint64_t m = v433; m != v338; --m)
  {
    if (SHIBYTE(m[-1].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(m[-1].__r_.__value_.__l.__data_);
    }
  }
  v433 = v338;
  if ((unint64_t)v338 >= v434)
  {
    long long v349 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v432, (uint64_t)v336);
  }
  else
  {
    if (SHIBYTE(v335[-6].__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(v338, v335[-6].__r_.__value_.__l.__data_, v335[-6].__r_.__value_.__l.__size_);
    }
    else
    {
      long long v343 = *(_OWORD *)&v336->__r_.__value_.__l.__data_;
      v338->__r_.__value_.__r.__words[2] = v336->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v338->__r_.__value_.__l.__data_ = v343;
    }
    long long v349 = v338 + 1;
  }
  v433 = v349;
  (*(void (**)(void *, unsigned char *, std::string *))(*v337 + 48))(v337, a2, &__p);

  if (v436 < 0) {
    operator delete(v435);
  }
  *(void *)long long buf = &v432;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(void *)long long buf = v431;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }

LABEL_475:
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v416;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);

  Espresso::ANECompilerEngine::final_anec_weights_t::~final_anec_weights_t((Espresso::ANECompilerEngine::final_anec_weights_t *)v419);
}

void sub_192B1FF14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48,uint64_t a49,uint64_t a50,char a51)
{
  if (v52) {
    nitro::nitro_function::nitro_function(v52);
  }
  if (v51) {
    nitro::nitro_function::nitro_function(v51);
  }
  STACK[0x218] = (unint64_t)&a48;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x218]);

  Espresso::ANECompilerEngine::final_anec_weights_t::~final_anec_weights_t((Espresso::ANECompilerEngine::final_anec_weights_t *)&a51);
  _Unwind_Resume(a1);
}

uint64_t Espresso::ANECompilerEngine::mix_deconv3d_kernel::get_weights@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 648);
  *a2 = *(void *)(this + 640);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

uint64_t Espresso::ANECompilerEngine::mix_deconv3d_kernel::get_biases@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 512);
  *a2 = *(void *)(this + 504);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

void Espresso::ANECompilerEngine::mix_deconv3d_kernel::set_weights(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 640) = v2;
  int v4 = *(std::__shared_weak_count **)(a1 + 648);
  *(void *)(a1 + 648) = v3;
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
}

void Espresso::ANECompilerEngine::mix_deconv3d_kernel::set_biases(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  int v4 = *(std::__shared_weak_count **)(a1 + 512);
  *(void *)(a1 + 504) = v3;
  *(void *)(a1 + 512) = v2;
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
}

uint64_t Espresso::ANECompilerEngine::mix_deconv3d_kernel::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v3 = *((char *)a2 + 23);
  if (v3 < 0)
  {
    if (a2[1] != 1) {
      goto LABEL_8;
    }
    int v4 = *(unsigned __int8 *)*a2;
  }
  else
  {
    if (v3 != 1) {
      goto LABEL_8;
    }
    int v4 = *(unsigned __int8 *)a2;
  }
  if (v4 == 87 || v4 == 98) {
    return 1;
  }
LABEL_8:
  if (Espresso::weight_key_supported_by_conv_quantized_weights_helper(a2, 1)) {
    return 1;
  }

  return Espresso::ANECompilerEngine::ane_kernel::supports_weight_key(a2);
}

BOOL Espresso::ANECompilerEngine::mix_deconv3d_kernel::is_valid_for_engine(uint64_t a1, int64x2_t **a2, Espresso::ANECompilerEngine *a3)
{
  v114[2] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *((void *)a3 + 6);
  uint64_t v7 = *(std::__shared_weak_count **)(v6 + 80);
  if (v7)
  {
    uint64_t v8 = std::__shared_weak_count::lock(v7);
    if (v8) {
      unint64_t v9 = *(const Espresso::net **)(v6 + 72);
    }
    else {
      unint64_t v9 = 0;
    }
  }
  else
  {
    unint64_t v9 = 0;
    uint64_t v8 = 0;
  }
  unsigned int v10 = Espresso::ANECompilerEngine::ane_arch_allow_network_override((uint64_t)v9 + 472);
  if (Espresso::ANECompilerEngine::is_mix((Espresso::ANECompilerEngine *)v10, v11))
  {
    unsigned int v12 = a2[1];
    v83[0] = *a2;
    v83[1] = v12;
    if (v12) {
      atomic_fetch_add_explicit(&v12->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(&v93, "deconv3d not supported on requested architecture.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)&v93, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v83, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    if (v106) {
      nitro::nitro_function::nitro_function(v106);
    }
    *(void *)&v89[0] = &v103;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v89);
    *(void *)&v89[0] = v102;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v89);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v94) < 0) {
      operator delete(v93);
    }
    if (v12) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v12);
    }
    BOOL v13 = 0;
  }
  else
  {
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v14 = *(void *)a3;
    uint64_t v15 = *(void *)(*(void *)a3 + 32);
    long long v16 = *(_OWORD *)(*(void *)a3 + 16);
    v76[0] = *(_OWORD *)*(void *)a3;
    v76[1] = v16;
    uint64_t v77 = v15;
    unint64_t v78 = 0;
    unint64_t v79 = 0;
    uint64_t v80 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v78, *(const void **)(v14 + 40), *(void *)(v14 + 48), (uint64_t)(*(void *)(v14 + 48) - *(void *)(v14 + 40)) >> 2);
    Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)&v81, v9, (const Espresso::layer_shape *)v76, 1);
    if (v78)
    {
      unint64_t v79 = v78;
      operator delete(v78);
    }
    if (v8)
    {
      nitro::nitro_function::nitro_function(v8);
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v17 = *((void *)a3 + 3);
    uint64_t v18 = *(void *)(v17 + 32);
    long long v19 = *(_OWORD *)(v17 + 16);
    v70[0] = *(_OWORD *)v17;
    v70[1] = v19;
    uint64_t v71 = v18;
    int8x16_t v72 = 0;
    __int32 v73 = 0;
    uint64_t v74 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v72, *(const void **)(v17 + 40), *(void *)(v17 + 48), (uint64_t)(*(void *)(v17 + 48) - *(void *)(v17 + 40)) >> 2);
    Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v75, v9, (const Espresso::layer_shape *)v70, 1);
    if (v72)
    {
      __int32 v73 = v72;
      operator delete(v72);
    }
    if (v8) {
      nitro::nitro_function::nitro_function(v8);
    }
    uint64_t v20 = *((void *)a3 + 6);
    BOOL v21 = *(long long **)(*(void *)v20 + 224 * *((void *)a3 + 9) + 136);
    if (*((char *)v21 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v69, *(const std::string::value_type **)v21, *((void *)v21 + 1));
      uint64_t v20 = *((void *)a3 + 6);
    }
    else
    {
      long long v22 = *v21;
      v69.__r_.__value_.__r.__words[2] = *((void *)v21 + 2);
      *(_OWORD *)&v69.__r_.__value_.__l.__data_ = v22;
    }
    unsigned int v23 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(v20 + 80));
    unsigned int v24 = Espresso::ANECompilerEngine::bottom_compute_path(a3, *(const Espresso::base_kernel::validate_for_engine_args_t **)(v20 + 72), 0);
    Espresso::ANECompilerEngine::ane_kernel::get_ane_validator((Espresso::ANECompilerEngine::ane_kernel *)&v63, (NSString *)(a1 + 424), v10);
    id v25 = v10;
    if (Espresso::ANECompilerEngine::blob_shape_ane_compatible(&v81, v25))
    {
      if (Espresso::ANECompilerEngine::blob_shape_ane_compatible(v75, v25))
      {
        id v60 = v25;
        int8x16_t v61 = v23;
        ANECConvLayerDescInitialize();
        uint64_t v26 = *(int *)(a1 + 312);
        int v27 = *(_DWORD *)(a1 + 316);
        uint64_t v28 = *(int *)(a1 + 384);
        BOOL v29 = v27 == v28 && v26 == v27;
        uint64_t v30 = @"ChannelWiseDeConv";
        if (!v29) {
          uint64_t v30 = @"DeConv";
        }
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v30;
        uint64_t v31 = *(void *)(a1 + 408);
        __p.__r_.__value_.__l.__size_ = (std::string::size_type)Espresso::ANECompilerEngine::ane_conv_kernel_mode(v31, 0);
        __p.__r_.__value_.__r.__words[2] = (std::string::size_type)Espresso::ANECompilerEngine::ane_conv_kernel_format(v31);
        v102[1] = v26;
        v102[2] = v28;
        char v103 = 0;
        ANECKernelSizeInitialize();
        uint64_t v32 = *(void *)(a1 + 320);
        *(void *)&long long v33 = (int)v32;
        *((void *)&v33 + 1) = SHIDWORD(v32);
        long long v104 = v33;
        uint64_t v105 = *(int *)(a1 + 328);
        ANECStepInitialize();
        int v34 = *(__int16 *)(a1 + 370);
        LODWORD(v106) = *(__int16 *)(a1 + 368);
        HIDWORD(v106) = v34;
        int v107 = *(__int16 *)(a1 + 372);
        char v110 = 0;
        ANECKernelDilationRateInitialize();
        uint64_t v35 = *(__int16 *)(a1 + 376);
        uint64_t v111 = *(__int16 *)(a1 + 374);
        uint64_t v112 = v35;
        uint64_t v113 = *(__int16 *)(a1 + 378);
        ANECPaddingInitialize();
        v98[0] = v81;
        v98[1] = v82;
        v97[0] = v75[0];
        v97[1] = v75[1];
        Espresso::ANECompilerEngine::mix_deconv3d_kernel::get_padding((unsigned int *)&v99, a1 + 304, v98, v97);
        long long v108 = v99;
        int32x2_t v109 = vrev64_s32(v100);
        unsigned int v23 = v61;
        if (v24 < 8 && ((0x97u >> v24) & 1) != 0)
        {
          int v39 = (void *)*((void *)&off_1E5747A70 + v24);
          unint64_t v59 = v10;
          ANECTensorDescInitialize();
          *(void *)&long long v40 = SHIDWORD(v81);
          *((void *)&v40 + 1) = (int)v82;
          long long v95 = v40;
          uint64_t v92 = 0;
          uint64_t v93 = v39;
          uint64_t v96 = SDWORD2(v81);
          *(void *)&long long v40 = (int)v81;
          *((void *)&v40 + 1) = SDWORD1(v81);
          long long v94 = v40;
          uint64_t v91 = 0;
          int v41 = ANECValidateConvLayer();
          if (v41)
          {
            int __val = v41;
            uint64_t v42 = v91;
            uint64_t v43 = v92;
            memset(v89, 0, sizeof(v89));
            int v90 = 1065353216;
            if (v92)
            {
              uint64_t v44 = 0;
              uint64_t v45 = (CFTypeRef *)(v91 + 8);
              do
              {
                unsigned int v46 = (unint64_t *)(v42 + 760 * v44);
                if (*v46)
                {
                  unint64_t v47 = 0;
                  int32x4_t v48 = v45;
                  do
                  {
                    std::__hash_table<__CFString const*,Espresso::ANECompilerEngine::CFStringHasher,Espresso::ANECompilerEngine::CFStringEqualWrapper,std::allocator<__CFString const*>>::__emplace_unique_key_args<__CFString const*,__CFString const* const&>((float *)v89, v48, v48);
                    ++v47;
                    ++v48;
                  }
                  while (v47 < *v46);
                }
                ++v44;
                v45 += 95;
              }
              while (v44 != v43);
            }
            std::to_string(&v86, __val);
            unsigned int v10 = v59;
            int8x16_t v49 = std::string::insert(&v86, 0, "ANECValidateConvLayer check failed with status ");
            long long v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
            v87.__r_.__value_.__r.__words[2] = v49->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v87.__r_.__value_.__l.__data_ = v50;
            v49->__r_.__value_.__l.__size_ = 0;
            v49->__r_.__value_.__r.__words[2] = 0;
            v49->__r_.__value_.__r.__words[0] = 0;
            uint64_t v51 = std::string::append(&v87, ". ");
            long long v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
            v88.__r_.__value_.__r.__words[2] = v51->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v52;
            v51->__r_.__value_.__l.__size_ = 0;
            v51->__r_.__value_.__r.__words[2] = 0;
            v51->__r_.__value_.__r.__words[0] = 0;
            id v25 = v60;
            unsigned int v23 = v61;
            Espresso::ANECompilerEngine::format_validation_violations((uint64_t)v84, (uint64_t)v89);
            if ((v85 & 0x80u) == 0) {
              unint64_t v53 = v84;
            }
            else {
              unint64_t v53 = (void **)v84[0];
            }
            if ((v85 & 0x80u) == 0) {
              std::string::size_type v54 = v85;
            }
            else {
              std::string::size_type v54 = (std::string::size_type)v84[1];
            }
            uint64_t v55 = std::string::append(&v88, (const std::string::value_type *)v53, v54);
            std::string::size_type v56 = (void *)v55->__r_.__value_.__r.__words[0];
            v114[0] = v55->__r_.__value_.__l.__size_;
            *(void *)((char *)v114 + 7) = *(std::string::size_type *)((char *)&v55->__r_.__value_.__r.__words[1] + 7);
            char v57 = HIBYTE(v55->__r_.__value_.__r.__words[2]);
            v55->__r_.__value_.__l.__size_ = 0;
            v55->__r_.__value_.__r.__words[2] = 0;
            v55->__r_.__value_.__r.__words[0] = 0;
            char v65 = 0;
            *(void *)&v67[7] = *(void *)((char *)v114 + 7);
            size_t v66 = v56;
            *(void *)uint64_t v67 = v114[0];
            char v68 = v57;
            if ((char)v85 < 0) {
              operator delete(v84[0]);
            }
            if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v88.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v87.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v86.__r_.__value_.__l.__data_);
            }
            std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)v89);
          }
          else
          {
            char v65 = 1;
            std::string::basic_string[abi:ne180100]<0>(&v66, "Success");
          }
        }
        else
        {
          char v65 = 0;
          std::string::basic_string[abi:ne180100]<0>(&v66, "Invalid compute path for deconv3d input.");
        }
      }
      else
      {
        char v65 = 0;
        std::string::basic_string[abi:ne180100]<0>(&v66, "Output blob dimensions exceed ANE limit.");
      }
    }
    else
    {
      char v65 = 0;
      std::string::basic_string[abi:ne180100]<0>(&v66, "Input blob dimensions exceed ANE limit.");
    }

    if (v64) {
      nitro::nitro_function::nitro_function(v64);
    }
    BOOL v13 = v65 != 0;
    if (!v65)
    {
      char v36 = *a2;
      uint64_t v37 = a2[1];
      v62[0] = v36;
      v62[1] = v37;
      if (v37) {
        atomic_fetch_add_explicit(&v37->i64[1], 1uLL, memory_order_relaxed);
      }
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)&v66, (uint64_t)a3, 0);
      Espresso::emit_kernel_validation_warning(v62, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
      if (v106) {
        nitro::nitro_function::nitro_function(v106);
      }
      uint64_t v93 = &v103;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v93);
      uint64_t v93 = v102;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v93);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (v37) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v37);
      }
    }
    if (v68 < 0) {
      operator delete(v66);
    }
    nitro::nitro_function::nitro_function(v23);
    if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v69.__r_.__value_.__l.__data_);
    }
  }

  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  return v13;
}

void sub_192B211BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  nitro::nitro_function::nitro_function(a12);
  if (a26 < 0) {
    operator delete(__p);
  }

  if (v26) {
    nitro::nitro_function::nitro_function(v26);
  }
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::mix_deconv3d_kernel::__set_weight_raw_blob(void *a1, uint64_t a2, const std::string::value_type **a3, void *a4, unint64_t a5, uint64_t *a6)
{
  Espresso::generic_deconv3d_kernel::__set_weight_raw_blob((uint64_t)a1, a2, a3, a4, a5, a6);
  (*(void (**)(long long *__return_ptr, void *))(a1[53] + 128))(v17, a1 + 53);
  unsigned int v11 = (std::__shared_weak_count *)a1[2];
  v16[0] = a1[1];
  v16[1] = (uint64_t)v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = (*(uint64_t (**)(void *))(a1[53] + 136))(a1 + 53);
  Espresso::set_conv_quantized_weight_helper(v13, v14, v15, v12, (unsigned __int8 **)a3, (char *)a4, a5, a6, a1 + 51, v17, v16, v12, 1);
  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
  if (__p)
  {
    long long v19 = __p;
    operator delete(__p);
  }
  Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob(a1 + 53, (uint64_t *)a3, a4, a5);
}

void sub_192B214A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (v19) {
    nitro::nitro_function::nitro_function(v19);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::ANECompilerEngine::mix_deconv3d_kernel::~mix_deconv3d_kernel(Espresso::ANECompilerEngine::mix_deconv3d_kernel *this)
{
  *(void *)this = &unk_1EE3438B8;
  uint64_t v2 = (Espresso::ANECompilerEngine::mix_deconv3d_kernel *)((char *)this + 424);
  *((void *)this + 53) = &unk_1EE343AA0;
  int v3 = (std::__shared_weak_count *)*((void *)this + 81);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(v2);
  Espresso::generic_conv3d_kernel::~generic_conv3d_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  Espresso::ANECompilerEngine::ane_kernel *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EE3438B8;
  uint64_t v2 = (Espresso::ANECompilerEngine::mix_deconv3d_kernel *)((char *)this + 424);
  *((void *)this + 53) = &unk_1EE343AA0;
  int v3 = (std::__shared_weak_count *)*((void *)this + 81);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(v2);

  Espresso::generic_conv3d_kernel::~generic_conv3d_kernel(this);
}

void non-virtual thunk to'Espresso::ANECompilerEngine::mix_batch_matmul_kernel::~mix_batch_matmul_kernel(Espresso::ANECompilerEngine::mix_batch_matmul_kernel *this)
{
  uint64_t v1 = (Espresso::ANECompilerEngine::mix_batch_matmul_kernel *)((char *)this - 288);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);

  JUMPOUT(0x192FF16B0);
}

{
  Espresso::base_kernel *v1;
  uint64_t vars8;

  uint64_t v1 = (Espresso::ANECompilerEngine::mix_batch_matmul_kernel *)((char *)this - 288);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);

  Espresso::base_kernel::~base_kernel(v1);
}

void non-virtual thunk to'Espresso::ANECompilerEngine::mix_batch_matmul_kernel::compile(Espresso::ANECompilerEngine::mix_batch_matmul_kernel *this, Espresso::ANECompilerEngine::compiler *a2, std::string *a3)
{
}

void Espresso::ANECompilerEngine::mix_batch_matmul_kernel::compile(Espresso::ANECompilerEngine::mix_batch_matmul_kernel *this, Espresso::ANECompilerEngine::compiler *a2, std::string *a3)
{
  uint64_t v245 = *MEMORY[0x1E4F143B8];
  int v4 = (std::__shared_weak_count *)*((void *)a2 + 2);
  if (!v4 || (v171 = std::__shared_weak_count::lock(v4)) == 0 || (uint64_t v7 = *((void *)a2 + 1)) == 0) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Inconsistent state: null network");
  }
  if (!*(void *)(v7 + 576)) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Inconsistent state: blob_storage");
  }
  __str.__r_.__value_.__r.__words[0] = a3[2].__r_.__value_.__r.__words[0];
  uint64_t v8 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7 + 136, (unsigned __int8 *)__str.__r_.__value_.__l.__data_, (long long **)&__str);
  unsigned int v10 = (const void *)*((void *)v8 + 5);
  unint64_t v9 = (std::__shared_weak_count *)*((void *)v8 + 6);
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v170 = v9;
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)a3;
  unsigned int v11 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7 + 136, (unsigned __int8 *)a3, (long long **)&__str);
  __n128 v13 = (float *)*((void *)v11 + 5);
  uint64_t v12 = (std::__shared_weak_count *)*((void *)v11 + 6);
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v172 = v12;
  std::string v213 = 0;
  uint64_t v212 = 0;
  unint64_t v214 = 0;
  if (v10)
  {
    int32x2_t v15 = 0;
    if (v170 && v14)
    {
      int32x2_t v15 = v170;
      atomic_fetch_add_explicit(&v170->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    int32x2_t v15 = 0;
  }
  id v168 = v15;
  __str.__r_.__value_.__r.__words[0] = a3[2].__r_.__value_.__r.__words[0] + 24;
  long long v16 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7 + 136, (unsigned __int8 *)__str.__r_.__value_.__l.__data_, (long long **)&__str);
  uint64_t v17 = (const void *)*((void *)v16 + 5);
  if (!v17)
  {
    uint64_t v18 = 0;
    goto LABEL_19;
  }
  if (!v18)
  {
LABEL_19:
    long long v19 = 0;
    goto LABEL_20;
  }
  long long v19 = (std::__shared_weak_count *)*((void *)v16 + 6);
  if (v19) {
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_20:
  id v167 = v19;
  if (v13)
  {
    BOOL v21 = v20;
    if (v172 && v20)
    {
      atomic_fetch_add_explicit(&v172->__shared_owners_, 1uLL, memory_order_relaxed);
      id v166 = v172;
    }
    else
    {
      id v166 = 0;
    }
  }
  else
  {
    BOOL v21 = 0;
    id v166 = 0;
  }
  uint64_t v169 = a2;
  uint64_t v211 = 0x400000003;
  BOOL v22 = *((unsigned char *)this + 281) == 0;
  v210[0] = *((unsigned __int8 *)this + 281);
  v210[1] = 2;
  v210[2] = v22;
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&__p.__r_.__value_.__l.__data_, (id *)&a3->__r_.__value_.__l.__data_);
  if ((a3->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t size = HIBYTE(a3->__r_.__value_.__r.__words[2]);
  }
  else {
    size_t size = a3->__r_.__value_.__l.__size_;
  }
  p_str = &__str;
  std::string::basic_string[abi:ne180100]((uint64_t)&__str, size + 13);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
  }
  if (size)
  {
    if ((a3->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      id v25 = a3;
    }
    else {
      id v25 = (std::string *)a3->__r_.__value_.__r.__words[0];
    }
    memmove(p_str, v25, size);
  }
  strcpy((char *)p_str + size, "_transposed_x");
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string __p = __str;
  std::string::pointer data = a3[2].__r_.__value_.__l.__data_;
  if (data[23] < 0)
  {
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)data, *((void *)data + 1));
  }
  else
  {
    long long v27 = *(_OWORD *)data;
    __str.__r_.__value_.__r.__words[2] = *((void *)data + 2);
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v27;
  }
  std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v203, &__str, (long long *)&v235, 1uLL);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  uint64_t v28 = a3[2].__r_.__value_.__l.__data_;
  if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(void **)(v7 + 360), v28))
  {
    v225.__r_.__value_.__r.__words[0] = (std::string::size_type)v28;
    BOOL v29 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v7 + 352), v28, (uint64_t)&std::piecewise_construct, (long long **)&v225);
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *(_OWORD *)(v29 + 56);
    __str.__r_.__value_.__r.__words[2] = 0;
    *(_OWORD *)&v235.__r_.__value_.__l.__data_ = 0uLL;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__str.__r_.__value_.__r.__words[2], *((const void **)v29 + 9), *((void *)v29 + 10), (uint64_t)(*((void *)v29 + 10) - *((void *)v29 + 9)) >> 2);
    if (LODWORD(__str.__r_.__value_.__r.__words[1]) == -1) {
      int v30 = 1;
    }
    else {
      int v30 = __str.__r_.__value_.__r.__words[1];
    }
    if (__str.__r_.__value_.__r.__words[2])
    {
      v235.__r_.__value_.__r.__words[0] = __str.__r_.__value_.__r.__words[2];
      operator delete((void *)__str.__r_.__value_.__r.__words[2]);
    }
  }
  else
  {
    int v30 = 1;
  }
  int v206 = v30;
  Espresso::abstract_blob_container::shape((char *)&v225, (uint64_t)v10);
  int v31 = HIDWORD(v225.__r_.__value_.__r.__words[2]);
  if (LODWORD(v225.__r_.__value_.__r.__words[2]) == 1) {
    int v32 = 4;
  }
  else {
    int v32 = 5;
  }
  if (HIDWORD(v225.__r_.__value_.__r.__words[2]) == -1) {
    int v31 = v32;
  }
  if (v31 == 5) {
    int v33 = 1;
  }
  else {
    int v33 = -1;
  }
  Espresso::ANECompilerEngine::CodegenTransposeUnit((uint64_t)&__str, v210, (uint64_t)&__p, v33);
  Espresso::ANECompilerEngine::compiler::unit_t::operator=((uint64_t)&__p, (long long *)&__str);

  if (v238 < 0) {
    operator delete(v237);
  }
  v190.__r_.__value_.__r.__words[0] = (std::string::size_type)&v236;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v190);
  v190.__r_.__value_.__r.__words[0] = (std::string::size_type)&v235;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v190);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (v227)
  {
    v228.__begin_ = (std::vector<std::string>::pointer)v227;
    operator delete(v227);
  }
  int v34 = v213;
  if ((unint64_t)v213 >= v214)
  {
    unint64_t v36 = 0x8E38E38E38E38E39 * (((uint64_t)v213 - v212) >> 4);
    if (v36 + 1 > 0x1C71C71C71C71C7) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v37 = 0x1C71C71C71C71C72 * ((uint64_t)(v214 - v212) >> 4);
    if (v37 <= v36 + 1) {
      unint64_t v37 = v36 + 1;
    }
    if (0x8E38E38E38E38E39 * ((uint64_t)(v214 - v212) >> 4) >= 0xE38E38E38E38E3) {
      unint64_t v38 = 0x1C71C71C71C71C7;
    }
    else {
      unint64_t v38 = v37;
    }
    v235.__r_.__value_.__l.__size_ = (std::string::size_type)&v214;
    if (v38) {
      unint64_t v38 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v38);
    }
    else {
      uint64_t v39 = 0;
    }
    __str.__r_.__value_.__r.__words[0] = v38;
    __str.__r_.__value_.__l.__size_ = v38 + 144 * v36;
    __str.__r_.__value_.__r.__words[2] = __str.__r_.__value_.__l.__size_;
    v235.__r_.__value_.__r.__words[0] = v38 + 144 * v39;
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)__str.__r_.__value_.__l.__size_, (uint64_t)&__p);
    __str.__r_.__value_.__r.__words[2] += 144;
    std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v212, &__str);
    uint64_t v35 = v213;
    std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&__str);
  }
  else
  {
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v213, (uint64_t)&__p);
    uint64_t v35 = v34 + 6;
  }
  std::string v213 = v35;
  uint64_t v200 = 0x400000003;
  BOOL v40 = *((unsigned char *)this + 282) == 0;
  v199[0] = *((unsigned __int8 *)this + 282);
  v199[1] = 2;
  v199[2] = v40;
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&v190.__r_.__value_.__l.__data_, (id *)&a3->__r_.__value_.__l.__data_);
  std::string::pointer v41 = a3[2].__r_.__value_.__l.__data_;
  if (v41[47] < 0) {
    std::string::__init_copy_ctor_external(&__str, *((const std::string::value_type **)v41 + 3), *((void *)v41 + 4));
  }
  else {
    std::string __str = *(std::string *)(v41 + 1);
  }
  std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v192, &__str, (long long *)&v235, 1uLL);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if ((a3->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v42 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
  }
  else {
    size_t v42 = a3->__r_.__value_.__l.__size_;
  }
  uint64_t v43 = &__str;
  std::string::basic_string[abi:ne180100]((uint64_t)&__str, v42 + 13);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    uint64_t v43 = (std::string *)__str.__r_.__value_.__r.__words[0];
  }
  if (v42)
  {
    if ((a3->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v44 = a3;
    }
    else {
      uint64_t v44 = (std::string *)a3->__r_.__value_.__r.__words[0];
    }
    memmove(v43, v44, v42);
  }
  strcpy((char *)v43 + v42, "_transposed_y");
  if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v190.__r_.__value_.__l.__data_);
  }
  std::string v190 = __str;
  uint64_t v45 = (void *)(a3[2].__r_.__value_.__r.__words[0] + 24);
  if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(void **)(v7 + 360), v45))
  {
    v225.__r_.__value_.__r.__words[0] = (std::string::size_type)v45;
    unsigned int v46 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v7 + 352), v45, (uint64_t)&std::piecewise_construct, (long long **)&v225);
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *(_OWORD *)(v46 + 56);
    __str.__r_.__value_.__r.__words[2] = 0;
    *(_OWORD *)&v235.__r_.__value_.__l.__data_ = 0uLL;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__str.__r_.__value_.__r.__words[2], *((const void **)v46 + 9), *((void *)v46 + 10), (uint64_t)(*((void *)v46 + 10) - *((void *)v46 + 9)) >> 2);
    if (LODWORD(__str.__r_.__value_.__r.__words[1]) == -1) {
      int v47 = 1;
    }
    else {
      int v47 = __str.__r_.__value_.__r.__words[1];
    }
    if (__str.__r_.__value_.__r.__words[2])
    {
      v235.__r_.__value_.__r.__words[0] = __str.__r_.__value_.__r.__words[2];
      operator delete((void *)__str.__r_.__value_.__r.__words[2]);
    }
  }
  else
  {
    int v47 = 1;
  }
  int v195 = v47;
  Espresso::abstract_blob_container::shape((char *)&v225, (uint64_t)v18);
  int v48 = HIDWORD(v225.__r_.__value_.__r.__words[2]);
  if (LODWORD(v225.__r_.__value_.__r.__words[2]) == 1) {
    int v49 = 4;
  }
  else {
    int v49 = 5;
  }
  if (HIDWORD(v225.__r_.__value_.__r.__words[2]) == -1) {
    int v48 = v49;
  }
  if (v48 == 5) {
    int v50 = 1;
  }
  else {
    int v50 = -1;
  }
  Espresso::ANECompilerEngine::CodegenTransposeUnit((uint64_t)&__str, v199, (uint64_t)&v190, v50);
  Espresso::ANECompilerEngine::compiler::unit_t::operator=((uint64_t)&v190, (long long *)&__str);

  if (v238 < 0) {
    operator delete(v237);
  }
  v181.__r_.__value_.__r.__words[0] = (std::string::size_type)&v236;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v181);
  v181.__r_.__value_.__r.__words[0] = (std::string::size_type)&v235;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v181);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (v227)
  {
    v228.__begin_ = (std::vector<std::string>::pointer)v227;
    operator delete(v227);
  }
  uint64_t v51 = v213;
  if ((unint64_t)v213 >= v214)
  {
    unint64_t v53 = 0x8E38E38E38E38E39 * (((uint64_t)v213 - v212) >> 4);
    if (v53 + 1 > 0x1C71C71C71C71C7) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v54 = 0x1C71C71C71C71C72 * ((uint64_t)(v214 - v212) >> 4);
    if (v54 <= v53 + 1) {
      unint64_t v54 = v53 + 1;
    }
    if (0x8E38E38E38E38E39 * ((uint64_t)(v214 - v212) >> 4) >= 0xE38E38E38E38E3) {
      unint64_t v55 = 0x1C71C71C71C71C7;
    }
    else {
      unint64_t v55 = v54;
    }
    v235.__r_.__value_.__l.__size_ = (std::string::size_type)&v214;
    if (v55) {
      unint64_t v55 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v55);
    }
    else {
      uint64_t v56 = 0;
    }
    __str.__r_.__value_.__r.__words[0] = v55;
    __str.__r_.__value_.__l.__size_ = v55 + 144 * v53;
    __str.__r_.__value_.__r.__words[2] = __str.__r_.__value_.__l.__size_;
    v235.__r_.__value_.__r.__words[0] = v55 + 144 * v56;
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)__str.__r_.__value_.__l.__size_, (uint64_t)&v190);
    __str.__r_.__value_.__r.__words[2] += 144;
    std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v212, &__str);
    long long v52 = v213;
    std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&__str);
  }
  else
  {
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v213, (uint64_t)&v190);
    long long v52 = v51 + 6;
  }
  std::string v213 = v52;
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&v181.__r_.__value_.__l.__data_, (id *)&a3->__r_.__value_.__l.__data_);
  char v57 = v187;
  uint64_t v187 = @"MatrixMultiplication";

  int v189 = v21[43];
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__str, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string __str = __p;
  }
  if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v235, v190.__r_.__value_.__l.__data_, v190.__r_.__value_.__l.__size_);
  }
  else {
    std::string v235 = v190;
  }
  std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v183, &__str, (long long *)&v236, 2uLL);
  for (uint64_t i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v235.__r_.__value_.__r.__words[i + 2]) < 0) {
      operator delete(*(void **)((char *)&__str + i * 8 + 24));
    }
  }
  std::string::append(&v181, "matmult");
  unint64_t v59 = v213;
  if ((unint64_t)v213 >= v214)
  {
    unint64_t v61 = 0x8E38E38E38E38E39 * (((uint64_t)v213 - v212) >> 4);
    if (v61 + 1 > 0x1C71C71C71C71C7) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v62 = 0x1C71C71C71C71C72 * ((uint64_t)(v214 - v212) >> 4);
    if (v62 <= v61 + 1) {
      unint64_t v62 = v61 + 1;
    }
    if (0x8E38E38E38E38E39 * ((uint64_t)(v214 - v212) >> 4) >= 0xE38E38E38E38E3) {
      unint64_t v63 = 0x1C71C71C71C71C7;
    }
    else {
      unint64_t v63 = v62;
    }
    v235.__r_.__value_.__l.__size_ = (std::string::size_type)&v214;
    if (v63) {
      unint64_t v63 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v63);
    }
    else {
      uint64_t v64 = 0;
    }
    __str.__r_.__value_.__r.__words[0] = v63;
    __str.__r_.__value_.__l.__size_ = v63 + 144 * v61;
    __str.__r_.__value_.__r.__words[2] = __str.__r_.__value_.__l.__size_;
    v235.__r_.__value_.__r.__words[0] = v63 + 144 * v64;
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)__str.__r_.__value_.__l.__size_, (uint64_t)&v181);
    __str.__r_.__value_.__r.__words[2] += 144;
    std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v212, &__str);
    id v60 = v213;
    std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&__str);
  }
  else
  {
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v213, (uint64_t)&v181);
    id v60 = v59 + 6;
  }
  std::string v213 = v60;
  char v65 = (char *)this + 288;
  if (*((void *)this + 44))
  {
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&v173.__r_.__value_.__l.__data_, (id *)&a3->__r_.__value_.__l.__data_);
    std::string::append(&v173, "_goc");
    atomic_fetch_add_explicit(&v171->__shared_owners_, 1uLL, memory_order_relaxed);
    if (v172) {
      atomic_fetch_add_explicit(&v172->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    Espresso::ANECompilerEngine::compiler::layer_graph_info_t::layer_graph_info_t((Espresso::ANECompilerEngine::compiler::layer_graph_info_t *)&__str);
    id v241 = 0;
    id v240 = 0;
    uint64_t v242 = 0x100000000;
    uint64_t v67 = *((void *)this + 44);
    size_t v66 = (std::__shared_weak_count *)*((void *)this + 45);
    if (v66) {
      atomic_fetch_add_explicit(&v66->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (!v67 || *(unsigned char *)((*(uint64_t (**)(char *))(*(void *)v65 + 104))((char *)this + 288) + 40)) {
      goto LABEL_243;
    }
    float v68 = v13[28];
    v218[0] = v67;
    v218[1] = v66;
    if (v66) {
      atomic_fetch_add_explicit(&v66->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string v69 = (std::__shared_weak_count *)*((void *)this + 47);
    v217[0] = *((void *)this + 46);
    v217[1] = (uint64_t)v69;
    if (v69) {
      atomic_fetch_add_explicit(&v69->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    Espresso::ane_style_post_scale_bias((uint64_t)v218, v217, (uint64_t)&v219, v68);
    if (v69) {
      nitro::nitro_function::nitro_function(v69);
    }
    if (v66) {
      nitro::nitro_function::nitro_function(v66);
    }
    uint64_t v70 = *(unsigned int *)(v67 + 8);
    std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v215, 2 * v70, 1, 1, 1);
    uint64_t v71 = (int)v70;
    uint64_t v72 = *((void *)this + 46);
    int v73 = v70;
    if (v72) {
      int v73 = *(_DWORD *)(v72 + 8);
    }
    if (!*((unsigned char *)v169 + 384))
    {
      Espresso::blob<unsigned char,1>::make(&v243, 4 * v70);
      unsigned int v132 = *(int **)(v243.__r_.__value_.__r.__words[0] + 16);
      if ((int)v70 >= 1)
      {
        for (uint64_t j = 0; j != v70; ++j)
        {
          float v134 = *(float *)(*(void *)(v67 + 16) + j * 4);
          *(float *)&int v135 = ldexp(1.0, -v223) * v134;
          v132[j] = v135;
        }
      }
      if (v70)
      {
        long long v136 = *(_WORD **)(v215 + 16);
        do
        {
          int v137 = *v132++;
          _S0 = v137;
          __asm { FCVT            H0, S0 }
          *v136++ = _S0;
          --v71;
        }
        while (v71);
      }
      if (*((void *)this + 46))
      {
        Espresso::blob<unsigned char,1>::make(&v225, 4 * v73);
        long long v140 = *(_OWORD *)&v225.__r_.__value_.__l.__data_;
        Espresso::blob<unsigned char,1>::make(&v225, 2 * v73);
        std::string::size_type v165 = v225.__r_.__value_.__r.__words[0];
        uint64_t v141 = *(int **)(v140 + 16);
        if (v73 >= 1)
        {
          for (uint64_t k = 0; k != v73; ++k)
          {
            int v143 = v70 - 1;
            if ((int)v70 - 1 >= (int)k) {
              int v143 = k;
            }
            *(float *)&int v144 = *(float *)(*(void *)(v221 + 16) + 4 * k) * *((float *)v219[2] + v143);
            v141[k] = v144;
            unsigned int v145 = v224;
            unsigned int v146 = v223;
            *(float *)&int v147 = ldexp(1.0, v224 - v223) * *(float *)&v144;
            v141[k] = v147;
            float v150 = ldexp(1.0, v146 - v145) * *(float *)&v147;
            if (v150 < -127.0 || v150 > 255.0)
            {
              unint64_t v152 = Espresso::espresso_os_log_subsystem(v148, v149);
              if (os_log_type_enabled(v152, OS_LOG_TYPE_ERROR))
              {
                double v153 = *(float *)&v141[k];
                LODWORD(v225.__r_.__value_.__l.__data_) = 134218752;
                *(double *)((char *)v225.__r_.__value_.__r.__words + 4) = v150;
                WORD2(v225.__r_.__value_.__r.__words[1]) = 1024;
                *(_DWORD *)((char *)&v225.__r_.__value_.__r.__words[1] + 6) = v224;
                WORD1(v225.__r_.__value_.__r.__words[2]) = 1024;
                HIDWORD(v225.__r_.__value_.__r.__words[2]) = v223;
                LOWORD(v226) = 2048;
                *(double *)((char *)&v226 + 2) = v153;
                _os_log_error_impl(&dword_1920CB000, v152, OS_LOG_TYPE_ERROR, "[ANEC::add_ane_scale_bias_unit] Shifted bias overflowing shifted_b=%f acc_bias_shift=%d post_right_shift=%d anebias=%f", (uint8_t *)&v225, 0x22u);
              }
            }
          }
        }
        if (v73)
        {
          uint64_t v154 = v73;
          uint64_t v155 = *(_WORD **)(v165 + 16);
          do
          {
            int v156 = *v141++;
            _S0 = v156;
            __asm { FCVT            H0, S0 }
            *v155++ = _S0;
            --v154;
          }
          while (v154);
        }
      }
      exception = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
      Espresso::not_implemented_error::not_implemented_error(exception);
    }
    unsigned int v158 = v224;
    uint64_t v74 = v215;
    if (v70)
    {
      uint64_t v75 = (int *)v219[2];
      float v76 = *(_WORD **)(v215 + 16);
      do
      {
        int v77 = *v75++;
        _S0 = v77;
        __asm { FCVT            H0, S0 }
        *v76++ = _S0;
        --v71;
      }
      while (v71);
    }
    if (v72)
    {
      std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v225, 2 * v73, 1, 1, 1);
      id v162 = (std::__shared_weak_count *)v225.__r_.__value_.__l.__size_;
      std::string::size_type v159 = v225.__r_.__value_.__r.__words[0];
      if (v73)
      {
        uint64_t v83 = v73;
        float v84 = *(_WORD **)(v225.__r_.__value_.__r.__words[0] + 16);
        unsigned __int8 v85 = *(int **)(v221 + 16);
        do
        {
          int v86 = *v85++;
          _S0 = v86;
          __asm { FCVT            H0, S0 }
          *v84++ = _S0;
          --v83;
        }
        while (v83);
      }
    }
    else
    {
      id v162 = 0;
      std::string::size_type v159 = 0;
    }
    int v160 = *((unsigned __int8 *)v169 + 552);
    char v161 = (Espresso::ANECompilerEngine::compiler *)((char *)v169 + 128);
    std::string v88 = v216;
    if (v216) {
      atomic_fetch_add_explicit(&v216->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v89 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v161, *(const unsigned __int8 **)(v74 + 16), *(int *)(v74 + 8));
    if (v88) {
      nitro::nitro_function::nitro_function(v88);
    }
    obuint64_t j = (id)objc_opt_new();
    if (*((unsigned char *)v169 + 121))
    {
      id v90 = *(id *)(v212 + 128);

      obuint64_t j = v90;
    }
    uint64_t v164 = objc_opt_new();
    uint64_t v91 = [NSNumber numberWithInt:v70];
    [v164 setObject:v91 forKeyedSubscript:@"ScaleCount"];

    uint64_t v92 = [NSNumber numberWithInt:v89];
    [v164 setObject:v92 forKeyedSubscript:@"ScaleOffset"];

    uint64_t v93 = NSNumber;
    if (v160) {
      uint64_t weights_file_index = 0;
    }
    else {
    long long v95 = [v93 numberWithUnsignedLong:weights_file_index];
    }
    [v164 setObject:v95 forKeyedSubscript:@"ScaleIndex"];

    [v164 setObject:@"Float16" forKeyedSubscript:@"ScaleType"];
    uint64_t v96 = [NSNumber numberWithInt:v223];
    [obj setObject:v96 forKeyedSubscript:@"ScaleShift"];

    if (*((void *)this + 46))
    {
      if (v162) {
        atomic_fetch_add_explicit(&v162->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v97 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v161, *(const unsigned __int8 **)(v159 + 16), *(int *)(v159 + 8));
      if (v162) {
        nitro::nitro_function::nitro_function(v162);
      }
      uint64_t v98 = [NSNumber numberWithInt:*(unsigned int *)(*((void *)this + 46) + 8)];
      [v164 setObject:v98 forKeyedSubscript:@"BiasCount"];

      long long v99 = [NSNumber numberWithInt:v97];
      [v164 setObject:v99 forKeyedSubscript:@"BiasOffset"];

      int32x2_t v100 = NSNumber;
      if (v160) {
        uint64_t v101 = 0;
      }
      else {
      double v102 = [v100 numberWithUnsignedLong:v101];
      }
      [v164 setObject:v102 forKeyedSubscript:@"BiasIndex"];

      [v164 setObject:@"Float16" forKeyedSubscript:@"BiasType"];
      char v103 = [NSNumber numberWithInt:v158];
      [obj setObject:v103 forKeyedSubscript:@"BiasShift"];
    }
    [obj setObject:v164 forKeyedSubscript:@"BiasScaleGroupData"];
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&v225.__r_.__value_.__l.__data_, (id *)&v173.__r_.__value_.__l.__data_);
    long long v104 = v213;
    if (v213 == (std::string *)v212)
    {
LABEL_217:
      int v115 = v232;
      uint64_t v232 = @"GOC";

      objc_storeStrong(&v233, obj);
      if (!*((unsigned char *)v169 + 121))
      {
        uint64_t v116 = v213;
        if ((unint64_t)v213 >= v214)
        {
          unint64_t v118 = 0x8E38E38E38E38E39 * (((uint64_t)v213 - v212) >> 4);
          if (v118 + 1 > 0x1C71C71C71C71C7) {
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v119 = 0x1C71C71C71C71C72 * ((uint64_t)(v214 - v212) >> 4);
          if (v119 <= v118 + 1) {
            unint64_t v119 = v118 + 1;
          }
          if (0x8E38E38E38E38E39 * ((uint64_t)(v214 - v212) >> 4) >= 0xE38E38E38E38E3) {
            unint64_t v120 = 0x1C71C71C71C71C7;
          }
          else {
            unint64_t v120 = v119;
          }
          *((void *)&v244 + 1) = &v214;
          if (v120) {
            unint64_t v120 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v120);
          }
          else {
            uint64_t v121 = 0;
          }
          v243.__r_.__value_.__r.__words[0] = v120;
          v243.__r_.__value_.__l.__size_ = v120 + 144 * v118;
          v243.__r_.__value_.__r.__words[2] = v243.__r_.__value_.__l.__size_;
          *(void *)&long long v244 = v120 + 144 * v121;
          std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)v243.__r_.__value_.__l.__size_, (uint64_t)&v225);
          v243.__r_.__value_.__r.__words[2] += 144;
          std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v212, &v243);
          uint64_t v117 = v213;
          std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&v243);
        }
        else
        {
          std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v213, (uint64_t)&v225);
          uint64_t v117 = v116 + 6;
        }
        std::string v213 = v117;
      }

      if (v230 < 0) {
        operator delete(v229);
      }
      v243.__r_.__value_.__r.__words[0] = (std::string::size_type)&v228;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v243);
      v243.__r_.__value_.__r.__words[0] = (std::string::size_type)&v226;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v243);
      if (SHIBYTE(v225.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v225.__r_.__value_.__l.__data_);
      }

      if (v162) {
        nitro::nitro_function::nitro_function(v162);
      }
      if (v216) {
        nitro::nitro_function::nitro_function(v216);
      }
      if (v222) {
        nitro::nitro_function::nitro_function(v222);
      }
      if (v220) {
        nitro::nitro_function::nitro_function(v220);
      }
LABEL_243:
      if (v66) {
        nitro::nitro_function::nitro_function(v66);
      }

      if (v238 < 0) {
        operator delete(v237);
      }
      v225.__r_.__value_.__r.__words[0] = (std::string::size_type)&v236;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v225);
      v225.__r_.__value_.__r.__words[0] = (std::string::size_type)&v235;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v225);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      if (v172) {
        nitro::nitro_function::nitro_function(v172);
      }
      nitro::nitro_function::nitro_function(v171);

      if (v177 < 0) {
        operator delete((void *)v176[4]);
      }
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v176;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v174;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
      if (SHIBYTE(v173.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v173.__r_.__value_.__l.__data_);
      }
      goto LABEL_255;
    }
    uint64_t v105 = v213 - 6;
    uint64_t v106 = HIBYTE(v213[-6].__r_.__value_.__r.__words[2]);
    char v107 = v106;
    std::string::size_type v108 = v213[-6].__r_.__value_.__l.__size_;
    if ((v106 & 0x80u) == 0) {
      std::string::size_type v109 = HIBYTE(v213[-6].__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v109 = v213[-6].__r_.__value_.__l.__size_;
    }
    std::string::size_type v110 = HIBYTE(v225.__r_.__value_.__r.__words[2]);
    if ((v225.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v110 = v225.__r_.__value_.__l.__size_;
    }
    if (v109 != v110) {
      goto LABEL_211;
    }
    if ((v225.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v111 = &v225;
    }
    else {
      uint64_t v111 = (std::string *)v225.__r_.__value_.__r.__words[0];
    }
    if ((char)v106 < 0)
    {
      uint64_t v113 = (const std::string::value_type *)v105->__r_.__value_.__r.__words[0];
      if (memcmp(v105->__r_.__value_.__l.__data_, v111, v213[-6].__r_.__value_.__l.__size_)) {
        goto LABEL_214;
      }
    }
    else if ((_BYTE)v106)
    {
      uint64_t v112 = v213 - 6;
      while (v112->__r_.__value_.__s.__data_[0] == v111->__r_.__value_.__s.__data_[0])
      {
        uint64_t v112 = (std::string *)((char *)v112 + 1);
        uint64_t v111 = (std::string *)((char *)v111 + 1);
        if (!--v106) {
          goto LABEL_210;
        }
      }
      goto LABEL_211;
    }
LABEL_210:
    std::string::append(v104 - 6, "__@pre_scale_bias");
    char v107 = HIBYTE(v104[-6].__r_.__value_.__r.__words[2]);
LABEL_211:
    if ((v107 & 0x80) == 0)
    {
      long long v114 = *(_OWORD *)&v105->__r_.__value_.__l.__data_;
      v243.__r_.__value_.__r.__words[2] = v104[-6].__r_.__value_.__r.__words[2];
      *(_OWORD *)&v243.__r_.__value_.__l.__data_ = v114;
      goto LABEL_215;
    }
    uint64_t v113 = v104[-6].__r_.__value_.__l.__data_;
    std::string::size_type v108 = v104[-6].__r_.__value_.__l.__size_;
LABEL_214:
    std::string::__init_copy_ctor_external(&v243, v113, v108);
LABEL_215:
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v228, &v243, &v244, 1uLL);
    if (SHIBYTE(v243.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v243.__r_.__value_.__l.__data_);
    }
    goto LABEL_217;
  }
LABEL_255:
  LODWORD(v243.__r_.__value_.__r.__words[2]) = 4;
  *(_OWORD *)&v243.__r_.__value_.__l.__data_ = xmmword_192DCA410;
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&__str.__r_.__value_.__l.__data_, (id *)&a3->__r_.__value_.__l.__data_);
  if (SHIBYTE(v213[-6].__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v225, v213[-6].__r_.__value_.__l.__data_, v213[-6].__r_.__value_.__l.__size_);
  }
  else
  {
    long long v122 = *(_OWORD *)&v213[-6].__r_.__value_.__l.__data_;
    v225.__r_.__value_.__r.__words[2] = v213[-6].__r_.__value_.__r.__words[2];
    *(_OWORD *)&v225.__r_.__value_.__l.__data_ = v122;
  }
  std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v236, &v225, &v226, 1uLL);
  if (SHIBYTE(v225.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v225.__r_.__value_.__l.__data_);
  }
  std::string::operator=(&__str, a3);
  Espresso::abstract_blob_container::shape((char *)&v173, (uint64_t)v10);
  int v123 = HIDWORD(v173.__r_.__value_.__r.__words[2]);
  if (LODWORD(v173.__r_.__value_.__r.__words[2]) == 1) {
    int v124 = 4;
  }
  else {
    int v124 = 5;
  }
  if (HIDWORD(v173.__r_.__value_.__r.__words[2]) == -1) {
    int v123 = v124;
  }
  if (v123 == 5) {
    int v125 = 1;
  }
  else {
    int v125 = -1;
  }
  Espresso::ANECompilerEngine::CodegenTransposeUnit((uint64_t)&v225, (unsigned int *)&v243, (uint64_t)&__str, v125);
  Espresso::ANECompilerEngine::compiler::unit_t::operator=((uint64_t)&__str, (long long *)&v225);

  if (v230 < 0) {
    operator delete(v229);
  }
  std::string v219 = (void **)&v228;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v219);
  std::string v219 = (void **)&v226;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v219);
  if (SHIBYTE(v225.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v225.__r_.__value_.__l.__data_);
  }
  if (v175)
  {
    v176[0] = v175;
    operator delete(v175);
  }
  uint64_t v126 = v213;
  if ((unint64_t)v213 >= v214)
  {
    unint64_t v128 = 0x8E38E38E38E38E39 * (((uint64_t)v213 - v212) >> 4);
    if (v128 + 1 > 0x1C71C71C71C71C7) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v129 = 0x1C71C71C71C71C72 * ((uint64_t)(v214 - v212) >> 4);
    if (v129 <= v128 + 1) {
      unint64_t v129 = v128 + 1;
    }
    if (0x8E38E38E38E38E39 * ((uint64_t)(v214 - v212) >> 4) >= 0xE38E38E38E38E3) {
      unint64_t v130 = 0x1C71C71C71C71C7;
    }
    else {
      unint64_t v130 = v129;
    }
    *((void *)&v226 + 1) = &v214;
    if (v130) {
      unint64_t v130 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v130);
    }
    else {
      uint64_t v131 = 0;
    }
    v225.__r_.__value_.__r.__words[0] = v130;
    v225.__r_.__value_.__l.__size_ = v130 + 144 * v128;
    v225.__r_.__value_.__r.__words[2] = v225.__r_.__value_.__l.__size_;
    *(void *)&long long v226 = v130 + 144 * v131;
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)v225.__r_.__value_.__l.__size_, (uint64_t)&__str);
    v225.__r_.__value_.__r.__words[2] += 144;
    std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v212, &v225);
    int v127 = v213;
    std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&v225);
  }
  else
  {
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v213, (uint64_t)&__str);
    int v127 = v126 + 6;
  }
  std::string v213 = v127;
  (*(void (**)(char *, Espresso::ANECompilerEngine::compiler *, uint64_t *))(*(void *)v65 + 24))((char *)this + 288, v169, &v212);

  if (v238 < 0) {
    operator delete(v237);
  }
  v225.__r_.__value_.__r.__words[0] = (std::string::size_type)&v236;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v225);
  v225.__r_.__value_.__r.__words[0] = (std::string::size_type)&v235;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v225);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }

  if (v185 < 0) {
    operator delete(v184);
  }
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v183;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v182;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  if (SHIBYTE(v181.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v181.__r_.__value_.__l.__data_);
  }

  if (v194 < 0) {
    operator delete(v193);
  }
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v192;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v191;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v190.__r_.__value_.__l.__data_);
  }

  if (v205 < 0) {
    operator delete(v204);
  }
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v203;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v202;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v166) {
    nitro::nitro_function::nitro_function(v166);
  }
  if (v167) {
    nitro::nitro_function::nitro_function(v167);
  }
  if (v168) {
    nitro::nitro_function::nitro_function(v168);
  }
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v212;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  if (v172) {
    nitro::nitro_function::nitro_function(v172);
  }
  if (v170) {
    nitro::nitro_function::nitro_function(v170);
  }
  nitro::nitro_function::nitro_function(v171);
}

void sub_192B230C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20,std::__shared_weak_count *a21,std::__shared_weak_count *a22,uint64_t a23,uint64_t a24,std::__shared_weak_count *a25,uint64_t a26,std::__shared_weak_count *a27,std::__shared_weak_count *a28,id a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,id a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a28) {
    nitro::nitro_function::nitro_function(a28);
  }
  nitro::nitro_function::nitro_function(a27);
  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t(&a29);
  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t(&a47);
  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t(&a65);
  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t((id *)&STACK[0x270]);
  if (a20) {
    nitro::nitro_function::nitro_function(a20);
  }
  if (a21) {
    nitro::nitro_function::nitro_function(a21);
  }
  if (a22) {
    nitro::nitro_function::nitro_function(a22);
  }
  STACK[0x270] = (unint64_t)&STACK[0x320];
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x270]);
  if (a28) {
    nitro::nitro_function::nitro_function(a28);
  }
  if (a25) {
    nitro::nitro_function::nitro_function(a25);
  }
  if (a27) {
    nitro::nitro_function::nitro_function(a27);
  }
  _Unwind_Resume(a1);
}

BOOL Espresso::ANECompilerEngine::mix_batch_matmul_kernel::is_valid_for_engine(uint64_t a1, int64x2_t **a2, void *a3)
{
  uint64_t v6 = a3[6];
  uint64_t v7 = *(std::__shared_weak_count **)(v6 + 80);
  if (v7)
  {
    uint64_t v8 = std::__shared_weak_count::lock(v7);
    if (v8) {
      unint64_t v9 = *(const Espresso::net **)(v6 + 72);
    }
    else {
      unint64_t v9 = 0;
    }
  }
  else
  {
    unint64_t v9 = 0;
    uint64_t v8 = 0;
  }
  unsigned int v10 = Espresso::ANECompilerEngine::ane_arch_allow_network_override((uint64_t)v9 + 472);
  if (Espresso::ANECompilerEngine::is_mix((Espresso::ANECompilerEngine *)v10, v11))
  {
    uint64_t v12 = *a2;
    __n128 v13 = a2[1];
    v58[0] = v12;
    v58[1] = v13;
    if (v13) {
      atomic_fetch_add_explicit(&v13->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(&v50, "batch matmul not supported on requested architecture.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v54, &v50, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v58, (Espresso::base_kernel::validate_for_engine_warning_t *)&v54);
    if (v57) {
      nitro::nitro_function::nitro_function(v57);
    }
    v43[0] = (void **)v56;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v43);
    v43[0] = (void **)v55;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v43);
    if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v54.__r_.__value_.__l.__data_);
    }
    if (v51 < 0) {
      operator delete((void *)v50);
    }
    if (v13) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v13);
    }
    BOOL v14 = 0;
  }
  else
  {
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v15 = *a3;
    uint64_t v16 = *(void *)(*a3 + 32);
    long long v17 = *(_OWORD *)(*a3 + 16);
    v45[0] = *(_OWORD *)*a3;
    v45[1] = v17;
    uint64_t v46 = v16;
    std::string __p = 0;
    int v48 = 0;
    uint64_t v49 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *(const void **)(v15 + 40), *(void *)(v15 + 48), (uint64_t)(*(void *)(v15 + 48) - *(void *)(v15 + 40)) >> 2);
    Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)&v50, v9, (const Espresso::layer_shape *)v45, 1);
    if (__p)
    {
      int v48 = __p;
      operator delete(__p);
    }
    if (v8)
    {
      nitro::nitro_function::nitro_function(v8);
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v18 = (void *)*a3;
    long long v19 = *(_OWORD *)(*a3 + 80);
    v38[0] = *(_OWORD *)(*a3 + 64);
    v38[1] = v19;
    uint64_t v20 = (const void *)v18[13];
    uint64_t v39 = v18[12];
    BOOL v40 = 0;
    std::string::pointer v41 = 0;
    uint64_t v42 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v40, v20, v18[14], (uint64_t)(v18[14] - (void)v20) >> 2);
    Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v43, v9, (const Espresso::layer_shape *)v38, 1);
    if (v40)
    {
      std::string::pointer v41 = v40;
      operator delete(v40);
    }
    if (v8)
    {
      nitro::nitro_function::nitro_function(v8);
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v21 = a3[3];
    uint64_t v22 = *(void *)(v21 + 32);
    long long v23 = *(_OWORD *)(v21 + 16);
    v32[0] = *(_OWORD *)v21;
    v32[1] = v23;
    uint64_t v33 = v22;
    int v34 = 0;
    uint64_t v35 = 0;
    uint64_t v36 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v34, *(const void **)(v21 + 40), *(void *)(v21 + 48), (uint64_t)(*(void *)(v21 + 48) - *(void *)(v21 + 40)) >> 2);
    Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v37, v9, (const Espresso::layer_shape *)v32, 1);
    if (v34)
    {
      uint64_t v35 = v34;
      operator delete(v34);
    }
    if (v8) {
      nitro::nitro_function::nitro_function(v8);
    }
    id v24 = v10;
    if (*(unsigned char *)(a1 + 280))
    {
      char v29 = 0;
      std::string::basic_string[abi:ne180100]<0>(v30, "channel mode for batch matmul not supported.");
    }
    else if (v52 == v44 && v52 == v37[6])
    {
      if ((v52 - 2) >= 3)
      {
        char v29 = 0;
        std::string::basic_string[abi:ne180100]<0>(v30, "Rank5 batch matmul is not supported");
      }
      else if (v53)
      {
        if (Espresso::ANECompilerEngine::blob_shape_ane_compatible(&v50, v24))
        {
          if (Espresso::ANECompilerEngine::blob_shape_ane_compatible(v43, v24))
          {
            if (Espresso::ANECompilerEngine::blob_shape_ane_compatible(v37, v24))
            {
              char v29 = 1;
              std::string::basic_string[abi:ne180100]<0>(v30, "Success");
            }
            else
            {
              char v29 = 0;
              std::string::basic_string[abi:ne180100]<0>(v30, "Output blob dimensions exceed ANE limit.");
            }
          }
          else
          {
            char v29 = 0;
            std::string::basic_string[abi:ne180100]<0>(v30, "Input1 blob dimensions exceed ANE limit.");
          }
        }
        else
        {
          char v29 = 0;
          std::string::basic_string[abi:ne180100]<0>(v30, "Input0 blob dimensions exceed ANE limit.");
        }
      }
      else
      {
        char v29 = 0;
        std::string::basic_string[abi:ne180100]<0>(v30, "NCDHW layout not supported with batch matmul.");
      }
    }
    else
    {
      char v29 = 0;
      std::string::basic_string[abi:ne180100]<0>(v30, "Varied I/O ranks for batch matmul not supported");
    }

    BOOL v14 = v29 != 0;
    if (!v29)
    {
      id v25 = *a2;
      uint64_t v26 = a2[1];
      v28[0] = v25;
      v28[1] = v26;
      if (v26) {
        atomic_fetch_add_explicit(&v26->i64[1], 1uLL, memory_order_relaxed);
      }
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v54, (long long *)v30, (uint64_t)a3, 0);
      Espresso::emit_kernel_validation_warning(v28, (Espresso::base_kernel::validate_for_engine_warning_t *)&v54);
      if (v57) {
        nitro::nitro_function::nitro_function(v57);
      }
      unint64_t v59 = (void **)v56;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v59);
      unint64_t v59 = (void **)v55;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v59);
      if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v54.__r_.__value_.__l.__data_);
      }
      if (v26) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v26);
      }
    }
    if (v31 < 0) {
      operator delete(v30[0]);
    }
  }

  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  return v14;
}

void sub_192B239C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48)
{
  if (v48) {
    nitro::nitro_function::nitro_function(v48);
  }
  _Unwind_Resume(a1);
}

void sub_192B23AD8()
{
  if (!v0) {
    JUMPOUT(0x192B23AD0);
  }
  JUMPOUT(0x192B23AC8);
}

void Espresso::ANECompilerEngine::mix_batch_matmul_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
}

void Espresso::ANECompilerEngine::mix_batch_matmul_kernel::~mix_batch_matmul_kernel(Espresso::ANECompilerEngine::mix_batch_matmul_kernel *this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANECompilerEngine::mix_batch_matmul_kernel *)((char *)this + 288));
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t vars8;

  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANECompilerEngine::mix_batch_matmul_kernel *)((char *)this + 288));

  Espresso::base_kernel::~base_kernel(this);
}

void non-virtual thunk to'Espresso::ANECompilerEngine::mix_furthest_point_sampling_kernel::~mix_furthest_point_sampling_kernel(Espresso::ANECompilerEngine::mix_furthest_point_sampling_kernel *this)
{
  uint64_t v1 = (Espresso::ANECompilerEngine::mix_furthest_point_sampling_kernel *)((char *)this - 296);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);

  JUMPOUT(0x192FF16B0);
}

{
  Espresso::base_kernel *v1;
  uint64_t vars8;

  uint64_t v1 = (Espresso::ANECompilerEngine::mix_furthest_point_sampling_kernel *)((char *)this - 296);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);

  Espresso::base_kernel::~base_kernel(v1);
}

void non-virtual thunk to'Espresso::ANECompilerEngine::mix_furthest_point_sampling_kernel::compile(Espresso::ANECompilerEngine::mix_furthest_point_sampling_kernel *this, Espresso::ANECompilerEngine::compiler *a2, void **a3)
{
}

void Espresso::ANECompilerEngine::mix_furthest_point_sampling_kernel::compile(Espresso::ANECompilerEngine::mix_furthest_point_sampling_kernel *this, Espresso::ANECompilerEngine::compiler *a2, void **a3)
{
  int v4 = (std::__shared_weak_count *)*((void *)a2 + 2);
  if (!v4 || (uint64_t v7 = std::__shared_weak_count::lock(v4)) == 0 || (v8 = *((void *)a2 + 1)) == 0) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Inconsistent state: null network");
  }
  if (!*(void *)(v8 + 576)) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Inconsistent state: blob_storage");
  }
  uint64_t v9 = v8 + 136;
  v23[0] = a3[6];
  unsigned int v10 = (std::__shared_weak_count *)*((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8 + 136, (unsigned __int8 *)v23[0], (long long **)v23)+ 6);
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v23[0] = a3;
  unsigned int v11 = (std::__shared_weak_count *)*((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v9, (unsigned __int8 *)a3, (long long **)v23)+ 6);
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = objc_opt_new();
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  unint64_t v34 = 0;
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t(v23, a3);
  __n128 v13 = v30;
  int v30 = @"FurthestPointSampling";

  BOOL v14 = [NSNumber numberWithInt:*((unsigned int *)this + 70)];
  [v12 setObject:v14 forKeyedSubscript:@"CentroidCount"];

  int v15 = *((_DWORD *)this + 71);
  if (v15 == 1)
  {
    uint64_t v16 = @"L1";
  }
  else
  {
    if (v15) {
      Espresso::throw_exception_selector<Espresso::invalid_state_error>("Unknown furthest point sampling metric.");
    }
    uint64_t v16 = @"L2";
  }
  [v12 setObject:v16 forKeyedSubscript:@"DistanceMetric"];
  objc_storeStrong(&v31, v12);
  long long v17 = v33;
  if ((unint64_t)v33 >= v34)
  {
    unint64_t v19 = 0x8E38E38E38E38E39 * (((uint64_t)v33 - v32) >> 4);
    if (v19 + 1 > 0x1C71C71C71C71C7) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v20 = 0x1C71C71C71C71C72 * ((uint64_t)(v34 - v32) >> 4);
    if (v20 <= v19 + 1) {
      unint64_t v20 = v19 + 1;
    }
    if (0x8E38E38E38E38E39 * ((uint64_t)(v34 - v32) >> 4) >= 0xE38E38E38E38E3) {
      unint64_t v21 = 0x1C71C71C71C71C7;
    }
    else {
      unint64_t v21 = v20;
    }
    uint64_t v39 = &v34;
    if (v21) {
      unint64_t v21 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v21);
    }
    else {
      uint64_t v22 = 0;
    }
    uint64_t v35 = (void **)v21;
    uint64_t v36 = (std::string *)(v21 + 144 * v19);
    unint64_t v37 = v36;
    unint64_t v38 = v21 + 144 * v22;
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v36, (uint64_t)v23);
    v37 += 6;
    std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v32, &v35);
    uint64_t v18 = v33;
    std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&v35);
  }
  else
  {
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v33, (uint64_t)v23);
    uint64_t v18 = v17 + 6;
  }
  uint64_t v33 = v18;
  (*(void (**)(char *, Espresso::ANECompilerEngine::compiler *, uint64_t *))(*((void *)this + 37) + 32))((char *)this + 296, a2, &v32);

  if (v28 < 0) {
    operator delete(__p);
  }
  uint64_t v35 = (void **)&v26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v35);
  uint64_t v35 = (void **)&v25;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v35);
  if (v24 < 0) {
    operator delete(v23[0]);
  }
  v23[0] = &v32;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)v23);

  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  nitro::nitro_function::nitro_function(v7);
}

void sub_192B23F6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer(v13 - 104);
  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t((id *)&a9);
  a9 = (void **)(v13 - 128);
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100](&a9);

  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  nitro::nitro_function::nitro_function(v9);
  _Unwind_Resume(a1);
}

BOOL Espresso::ANECompilerEngine::mix_furthest_point_sampling_kernel::is_valid_for_engine(uint64_t a1, int64x2_t **a2, void *a3)
{
  uint64_t v6 = a3[6];
  uint64_t v7 = *(std::__shared_weak_count **)(v6 + 80);
  if (v7)
  {
    uint64_t v8 = std::__shared_weak_count::lock(v7);
    if (v8) {
      uint64_t v9 = *(const Espresso::net **)(v6 + 72);
    }
    else {
      uint64_t v9 = 0;
    }
  }
  else
  {
    uint64_t v9 = 0;
    uint64_t v8 = 0;
  }
  unsigned int v10 = Espresso::ANECompilerEngine::ane_arch_allow_network_override((uint64_t)v9 + 472);
  if (Espresso::ANECompilerEngine::is_mix((Espresso::ANECompilerEngine *)v10, v11))
  {
    uint64_t v12 = *a2;
    uint64_t v13 = a2[1];
    v51[0] = v12;
    v51[1] = v13;
    if (v13) {
      atomic_fetch_add_explicit(&v13->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "furthest point sampling not supported on requested architecture.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v47, (long long *)__p, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v51, (Espresso::base_kernel::validate_for_engine_warning_t *)&v47);
    if (v50) {
      nitro::nitro_function::nitro_function(v50);
    }
    unint64_t v34 = (void **)v49;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v34);
    unint64_t v34 = (void **)v48;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v34);
    if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v47.__r_.__value_.__l.__data_);
    }
    if (v45 < 0) {
      operator delete(__p[0]);
    }
    if (v13) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v13);
    }
    BOOL v14 = 0;
  }
  else
  {
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v15 = *a3;
    uint64_t v16 = *(void *)(*a3 + 32);
    long long v17 = *(_OWORD *)(*a3 + 16);
    v39[0] = *(_OWORD *)*a3;
    v39[1] = v17;
    uint64_t v40 = v16;
    std::string::pointer v41 = 0;
    uint64_t v42 = 0;
    uint64_t v43 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v41, *(const void **)(v15 + 40), *(void *)(v15 + 48), (uint64_t)(*(void *)(v15 + 48) - *(void *)(v15 + 40)) >> 2);
    Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)__p, v9, (const Espresso::layer_shape *)v39, 1);
    if (v41)
    {
      uint64_t v42 = v41;
      operator delete(v41);
    }
    if (v8)
    {
      nitro::nitro_function::nitro_function(v8);
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v18 = a3[3];
    uint64_t v19 = *(void *)(v18 + 32);
    long long v20 = *(_OWORD *)(v18 + 16);
    v29[0] = *(_OWORD *)v18;
    v29[1] = v20;
    uint64_t v30 = v19;
    id v31 = 0;
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v31, *(const void **)(v18 + 40), *(void *)(v18 + 48), (uint64_t)(*(void *)(v18 + 48) - *(void *)(v18 + 40)) >> 2);
    Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)&v34, v9, (const Espresso::layer_shape *)v29, 1);
    if (v31)
    {
      uint64_t v32 = v31;
      operator delete(v31);
    }
    if (v8) {
      nitro::nitro_function::nitro_function(v8);
    }
    id v21 = v10;
    if (Espresso::ANECompilerEngine::blob_shape_ane_compatible(__p, v21))
    {
      if (Espresso::ANECompilerEngine::blob_shape_ane_compatible(&v34, v21))
      {
        if ((v46 - 6) > 0xFFFFFFFC)
        {
          if (HIDWORD(__p[1]) == 1 && LODWORD(__p[0]) == 1 && LODWORD(__p[1]) == 1)
          {
            if (HIDWORD(__p[0]) == 3)
            {
              if ((v38 - 6) > 0xFFFFFFFC)
              {
                if (v36 == 1 && v34 == 1 && v35 == 1)
                {
                  if (HIDWORD(v34) == 3)
                  {
                    if (v37 == *(_DWORD *)(a1 + 280))
                    {
                      if (v37 <= 0x4000)
                      {
                        char v26 = 1;
                        std::string::basic_string[abi:ne180100]<0>(v27, "Success");
                      }
                      else
                      {
                        char v26 = 0;
                        std::string::basic_string[abi:ne180100]<0>(v27, "Num centroids exceeds hardware bounds.");
                      }
                    }
                    else
                    {
                      char v26 = 0;
                      std::string::basic_string[abi:ne180100]<0>(v27, "Output blob width dimension must be equivalent to num_centroids.");
                    }
                  }
                  else
                  {
                    char v26 = 0;
                    std::string::basic_string[abi:ne180100]<0>(v27, "Output blob channel dimension must be 3 for furthest point sampling.");
                  }
                }
                else
                {
                  char v26 = 0;
                  std::string::basic_string[abi:ne180100]<0>(v27, "Output blob height, depth, and batch dimension must all be 1 for furthest point sampling");
                }
              }
              else
              {
                char v26 = 0;
                std::string::basic_string[abi:ne180100]<0>(v27, "Output blob must be rank 3, 4, or 5 for furthest point sampling");
              }
            }
            else
            {
              char v26 = 0;
              std::string::basic_string[abi:ne180100]<0>(v27, "Input blob channel dimension must be 3 for furthest point sampling.");
            }
          }
          else
          {
            char v26 = 0;
            std::string::basic_string[abi:ne180100]<0>(v27, "Input blob height, depth, and batch dimension must all be 1 for furthest point sampling");
          }
        }
        else
        {
          char v26 = 0;
          std::string::basic_string[abi:ne180100]<0>(v27, "Input blob must be rank 3, 4, or 5 for furthest point sampling");
        }
      }
      else
      {
        char v26 = 0;
        std::string::basic_string[abi:ne180100]<0>(v27, "Output blob dimensions exceed ANE limit.");
      }
    }
    else
    {
      char v26 = 0;
      std::string::basic_string[abi:ne180100]<0>(v27, "Input blob dimensions exceed ANE limit.");
    }

    BOOL v14 = v26 != 0;
    if (!v26)
    {
      uint64_t v22 = *a2;
      long long v23 = a2[1];
      v25[0] = v22;
      v25[1] = v23;
      if (v23) {
        atomic_fetch_add_explicit(&v23->i64[1], 1uLL, memory_order_relaxed);
      }
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v47, (long long *)v27, (uint64_t)a3, 0);
      Espresso::emit_kernel_validation_warning(v25, (Espresso::base_kernel::validate_for_engine_warning_t *)&v47);
      if (v50) {
        nitro::nitro_function::nitro_function(v50);
      }
      int v52 = (void **)v49;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v52);
      int v52 = (void **)v48;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v52);
      if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v47.__r_.__value_.__l.__data_);
      }
      if (v23) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v23);
      }
    }
    if (v28 < 0) {
      operator delete(v27[0]);
    }
  }

  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  return v14;
}

void sub_192B244D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  if (v44) {
    nitro::nitro_function::nitro_function(v44);
  }
  _Unwind_Resume(a1);
}

void sub_192B245D4()
{
  if (!v0) {
    JUMPOUT(0x192B245CCLL);
  }
  JUMPOUT(0x192B245C4);
}

void Espresso::ANECompilerEngine::mix_furthest_point_sampling_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
}

void Espresso::ANECompilerEngine::mix_furthest_point_sampling_kernel::~mix_furthest_point_sampling_kernel(Espresso::ANECompilerEngine::mix_furthest_point_sampling_kernel *this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANECompilerEngine::mix_furthest_point_sampling_kernel *)((char *)this + 296));
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t vars8;

  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANECompilerEngine::mix_furthest_point_sampling_kernel *)((char *)this + 296));

  Espresso::base_kernel::~base_kernel(this);
}

void non-virtual thunk to'Espresso::ANECompilerEngine::mix_stack_nd_kernel::~mix_stack_nd_kernel(Espresso::ANECompilerEngine::mix_stack_nd_kernel *this)
{
  uint64_t v1 = (Espresso::ANECompilerEngine::mix_stack_nd_kernel *)((char *)this - 288);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);

  JUMPOUT(0x192FF16B0);
}

{
  Espresso::base_kernel *v1;
  uint64_t vars8;

  uint64_t v1 = (Espresso::ANECompilerEngine::mix_stack_nd_kernel *)((char *)this - 288);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);

  Espresso::base_kernel::~base_kernel(v1);
}

void non-virtual thunk to'Espresso::ANECompilerEngine::mix_stack_nd_kernel::compile(Espresso::ANECompilerEngine::mix_stack_nd_kernel *this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3)
{
}

void Espresso::ANECompilerEngine::mix_stack_nd_kernel::compile(Espresso::ANECompilerEngine::mix_stack_nd_kernel *this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3)
{
}

uint64_t Espresso::ANECompilerEngine::mix_stack_nd_kernel::is_valid_for_engine(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  *((void *)&v65[0] + 1) = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)(a3 + 48);
  uint64_t v7 = *(std::__shared_weak_count **)(v6 + 80);
  if (!v7)
  {
    uint64_t v8 = 0;
    goto LABEL_5;
  }
  uint64_t v8 = std::__shared_weak_count::lock(v7);
  if (!v8)
  {
LABEL_5:
    uint64_t v9 = 0;
    goto LABEL_6;
  }
  uint64_t v9 = *(void *)(v6 + 72);
LABEL_6:
  Espresso::ANECompilerEngine::ane_arch_allow_network_override(v9 + 472);
  unsigned int v10 = (Espresso::ANECompilerEngine *)objc_claimAutoreleasedReturnValue();
  if (Espresso::ANECompilerEngine::is_mix(v10, v11)) {
    goto LABEL_32;
  }
  uint64_t v12 = *(long long **)a3;
  if (*(void *)a3 == *(void *)(a3 + 8)) {
    goto LABEL_32;
  }
  int v13 = *((_DWORD *)v12 + 5);
  if (v13 == -1)
  {
    if (*((_DWORD *)v12 + 4) != 1)
    {
LABEL_32:
      uint64_t v28 = 0;
      goto LABEL_33;
    }
    int v13 = 4;
  }
  else if (v13 > 4)
  {
    goto LABEL_32;
  }
  uint64_t v33 = (long long *)(a3 + 64);
  Espresso::ANECompilerEngine::mix_stack_nd_kernel::decomposition_to_expand_dims_concat(&v54, *(_DWORD *)(a1 + 280), a1 + 8, v13, *(_DWORD *)(a3 + 64));
  char v51 = 0;
  int v52 = 0;
  unint64_t v53 = 0;
  BOOL v14 = *(long long **)a3;
  uint64_t v15 = *(long long **)(a3 + 8);
  if (*(long long **)a3 == v15)
  {
    long long v27 = *(long long **)a3;
LABEL_37:
    uint64_t v43 = 0;
    uint64_t v44 = 0;
    uint64_t v45 = 0;
    std::vector<Espresso::layer_shape>::__init_with_size[abi:ne180100]<Espresso::layer_shape*,Espresso::layer_shape*>(&v43, v27, v14, ((char *)v14 - (char *)v27) >> 6);
    long long v46 = 0uLL;
    uint64_t v47 = 0;
    std::vector<Espresso::layer_shape>::__init_with_size[abi:ne180100]<Espresso::layer_shape*,Espresso::layer_shape*>(&v46, *(long long **)(a3 + 24), *(long long **)(a3 + 32), (uint64_t)(*(void *)(a3 + 32) - *(void *)(a3 + 24)) >> 6);
    uint64_t v30 = *(std::__shared_weak_count **)(a3 + 56);
    uint64_t v48 = *(void *)(a3 + 48);
    uint64_t v49 = v30;
    if (v30) {
      atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v50 = *v33;
    std::vector<Espresso::layer_shape>::__assign_with_size[abi:ne180100]<Espresso::layer_shape*,Espresso::layer_shape*>((uint64_t *)&v43, v51, v52, ((char *)v52 - (char *)v51) >> 6);
    (*(void (**)(long long *__return_ptr))(*(void *)v55 + 64))(&v59);
    std::vector<Espresso::layer_shape>::__vdeallocate((uint64_t *)&v46);
    long long v46 = v59;
    uint64_t v47 = v60;
    *(void *)&long long v60 = 0;
    long long v59 = 0uLL;
    *(void *)&long long v41 = &v59;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v41);
    uint64_t v31 = v55;
    uint64_t v32 = (std::__shared_weak_count *)a2[1];
    uint64_t v34 = *a2;
    int v35 = v32;
    if (v32) {
      atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v28 = (*(uint64_t (**)(uint64_t, uint64_t *, long long ***))(*(void *)v31 + 200))(v31, &v34, &v43);
    if (v35) {
      nitro::nitro_function::nitro_function(v35);
    }
    if (v49) {
      nitro::nitro_function::nitro_function(v49);
    }
    *(void *)&long long v59 = &v46;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v59);
    *(void *)&long long v59 = &v43;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v59);
  }
  else
  {
    while (1)
    {
      uint64_t v43 = 0;
      uint64_t v44 = 0;
      uint64_t v45 = 0;
      std::vector<Espresso::layer_shape>::__init_with_size[abi:ne180100]<Espresso::layer_shape*,Espresso::layer_shape*>(&v43, *(long long **)a3, *(long long **)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 6);
      long long v46 = 0uLL;
      uint64_t v47 = 0;
      std::vector<Espresso::layer_shape>::__init_with_size[abi:ne180100]<Espresso::layer_shape*,Espresso::layer_shape*>(&v46, *(long long **)(a3 + 24), *(long long **)(a3 + 32), (uint64_t)(*(void *)(a3 + 32) - *(void *)(a3 + 24)) >> 6);
      uint64_t v16 = *(std::__shared_weak_count **)(a3 + 56);
      uint64_t v48 = *(void *)(a3 + 48);
      uint64_t v49 = v16;
      if (v16) {
        atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v50 = *v33;
      long long v17 = *v14;
      long long v18 = v14[1];
      uint64_t v61 = *((void *)v14 + 4);
      long long v59 = v17;
      long long v60 = v18;
      unint64_t v63 = 0;
      uint64_t v64 = 0;
      unint64_t v62 = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v62, *((const void **)v14 + 5), *((void *)v14 + 6), (uint64_t)(*((void *)v14 + 6) - *((void *)v14 + 5)) >> 2);
      std::vector<Espresso::layer_shape>::__assign_with_size[abi:ne180100]<Espresso::layer_shape const*,Espresso::layer_shape const*>((uint64_t *)&v43, &v59, v65, 1uLL);
      if (v62)
      {
        unint64_t v63 = v62;
        operator delete(v62);
      }
      uint64_t v19 = v54;
      long long v20 = *v14;
      long long v21 = v14[1];
      uint64_t v61 = *((void *)v14 + 4);
      long long v59 = v20;
      long long v60 = v21;
      unint64_t v63 = 0;
      uint64_t v64 = 0;
      unint64_t v62 = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v62, *((const void **)v14 + 5), *((void *)v14 + 6), (uint64_t)(*((void *)v14 + 6) - *((void *)v14 + 5)) >> 2);
      int v38 = 0;
      uint64_t v39 = 0;
      uint64_t v40 = 0;
      char v57 = (void **)&v38;
      char v58 = 0;
      int v38 = (char *)operator new(0x40uLL);
      uint64_t v39 = (uint64_t)v38;
      uint64_t v40 = v38 + 64;
      uint64_t v39 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)&v40, &v59, v65, (uint64_t)v38);
      (*(void (**)(long long *__return_ptr, uint64_t, char **))(*(void *)v19 + 64))(&v41, v19, &v38);
      std::vector<Espresso::layer_shape>::__vdeallocate((uint64_t *)&v46);
      long long v46 = v41;
      uint64_t v47 = v42;
      uint64_t v42 = 0;
      long long v41 = 0uLL;
      char v57 = (void **)&v41;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v57);
      char v57 = (void **)&v38;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v57);
      if (v62)
      {
        unint64_t v63 = v62;
        operator delete(v62);
      }
      uint64_t v22 = v52;
      if ((unint64_t)v52 >= v53)
      {
        long long v23 = (long long *)std::vector<Espresso::layer_shape>::__push_back_slow_path<Espresso::layer_shape const&>((uint64_t *)&v51, (long long *)v46);
      }
      else
      {
        std::vector<Espresso::layer_shape>::__construct_one_at_end[abi:ne180100]<Espresso::layer_shape const&>((uint64_t)&v51, (long long *)v46);
        long long v23 = v22 + 4;
      }
      int v52 = v23;
      uint64_t v24 = v54;
      uint64_t v25 = (std::__shared_weak_count *)a2[1];
      uint64_t v36 = *a2;
      int v37 = v25;
      if (v25) {
        atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      char v26 = (*(uint64_t (**)(uint64_t, uint64_t *, long long ***))(*(void *)v24 + 200))(v24, &v36, &v43);
      if (v37) {
        nitro::nitro_function::nitro_function(v37);
      }
      if (v49) {
        nitro::nitro_function::nitro_function(v49);
      }
      *(void *)&long long v59 = &v46;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v59);
      *(void *)&long long v59 = &v43;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v59);
      if ((v26 & 1) == 0) {
        break;
      }
      v14 += 4;
      if (v14 == v15)
      {
        long long v27 = *(long long **)a3;
        BOOL v14 = *(long long **)(a3 + 8);
        goto LABEL_37;
      }
    }
    uint64_t v28 = 0;
  }
  uint64_t v43 = &v51;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v43);
  if (v56) {
    nitro::nitro_function::nitro_function(v56);
  }
  if (*((void *)&v54 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v54 + 1));
  }
LABEL_33:

  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  return v28;
}

void sub_192B24C9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void **a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,char a37)
{
  if (a15) {
    nitro::nitro_function::nitro_function(a15);
  }
  Espresso::base_kernel::validate_for_engine_args_t::~validate_for_engine_args_t((Espresso::base_kernel::validate_for_engine_args_t *)&a24);
  a24 = (void **)&a34;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&a24);
  Espresso::dropout_augment_lowmem::ret_t::~ret_t((Espresso::dropout_augment_lowmem::ret_t *)&a37);

  if (v37) {
    nitro::nitro_function::nitro_function(v37);
  }
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::mix_stack_nd_kernel::decomposition_to_expand_dims_concat(_OWORD *a1, int a2, uint64_t a3, int a4, int a5)
{
  int v30 = a5;
  *a1 = 0u;
  a1[1] = 0u;
  int v29 = 0;
  long long v28 = 0u;
  int v7 = ((a4 + 1) & (a2 >> 31)) + a2;
  long long v27 = 0u;
  long long v26 = 0u;
  long long v25 = 0u;
  long long v24 = 0u;
  long long v23 = 0u;
  long long v22 = 0u;
  long long v21 = 0u;
  int v20 = v7;
  Espresso::abstract_engine_factory::shared(&v17);
  uint64_t v8 = v17;
  std::string::basic_string[abi:ne180100]<0>(__p, "expand_dims");
  int v13 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v8, a3, (uint64_t)__p, (uint64_t)&v20, &v13);
  long long v9 = v19;
  long long v19 = 0uLL;
  *a1 = v9;
  if (v16 < 0) {
    operator delete(__p[0]);
  }
  if (v18) {
    nitro::nitro_function::nitro_function(v18);
  }
  int v13 = v7;
  __int16 v14 = 1;
  Espresso::abstract_engine_factory::shared(&v17);
  uint64_t v10 = v17;
  std::string::basic_string[abi:ne180100]<0>(__p, "general_concat");
  int v12 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v10, a3, (uint64_t)__p, (uint64_t)&v13, &v12);
  long long v11 = v19;
  long long v19 = 0uLL;
  a1[1] = v11;
  if (v16 < 0) {
    operator delete(__p[0]);
  }
  if (v18) {
    nitro::nitro_function::nitro_function(v18);
  }
}

void sub_192B24F64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, std::__shared_weak_count *a19)
{
  if (a19) {
    nitro::nitro_function::nitro_function(a19);
  }
  Espresso::dropout_augment_lowmem::ret_t::~ret_t(v19);
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::mix_stack_nd_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
}

void Espresso::ANECompilerEngine::mix_stack_nd_kernel::~mix_stack_nd_kernel(Espresso::ANECompilerEngine::mix_stack_nd_kernel *this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANECompilerEngine::mix_stack_nd_kernel *)((char *)this + 288));
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t vars8;

  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANECompilerEngine::mix_stack_nd_kernel *)((char *)this + 288));

  Espresso::base_kernel::~base_kernel(this);
}

void non-virtual thunk to'Espresso::ANECompilerEngine::mix_space_to_depth_kernel::~mix_space_to_depth_kernel(Espresso::ANECompilerEngine::mix_space_to_depth_kernel *this)
{
  uint64_t v1 = (Espresso::ANECompilerEngine::mix_space_to_depth_kernel *)((char *)this - 296);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);

  JUMPOUT(0x192FF16B0);
}

{
  Espresso::base_kernel *v1;
  uint64_t vars8;

  uint64_t v1 = (Espresso::ANECompilerEngine::mix_space_to_depth_kernel *)((char *)this - 296);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);

  Espresso::base_kernel::~base_kernel(v1);
}

void non-virtual thunk to'Espresso::ANECompilerEngine::mix_space_to_depth_kernel::compile(Espresso::ANECompilerEngine::mix_space_to_depth_kernel *this, Espresso::ANECompilerEngine::compiler *a2, void **a3)
{
}

void Espresso::ANECompilerEngine::mix_space_to_depth_kernel::compile(Espresso::ANECompilerEngine::mix_space_to_depth_kernel *this, Espresso::ANECompilerEngine::compiler *a2, void **a3)
{
  int v4 = (std::__shared_weak_count *)*((void *)a2 + 2);
  if (!v4 || (int v7 = std::__shared_weak_count::lock(v4)) == 0 || (v8 = *((void *)a2 + 1)) == 0) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Inconsistent state: null network");
  }
  if (!*(void *)(v8 + 576)) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Inconsistent state: blob_storage");
  }
  uint64_t v9 = v8 + 136;
  v26[0] = a3[6];
  uint64_t v10 = (std::__shared_weak_count *)*((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8 + 136, (unsigned __int8 *)v26[0], (long long **)v26)+ 6);
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v26[0] = a3;
  long long v11 = (std::__shared_weak_count *)*((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v9, (unsigned __int8 *)a3, (long long **)v26)+ 6);
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v12 = objc_opt_new();
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  unint64_t v37 = 0;
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t(v26, a3);
  if (*(void *)((char *)this + 284))
  {
    if (*((_DWORD *)this + 72) || *((_DWORD *)this + 71) != 1)
    {
      Espresso::ANECompilerEngine::space_to_depth_kernel::compile(this, a2, a3);
      goto LABEL_37;
    }
    uint64_t v17 = v33;
    uint64_t v33 = @"ChannelToSpace";

    long long v18 = [NSNumber numberWithInt:*((unsigned int *)this + 70)];
    [v12 setObject:v18 forKeyedSubscript:@"FactorX"];

    long long v19 = [NSNumber numberWithInt:*((unsigned int *)this + 70)];
    [v12 setObject:v19 forKeyedSubscript:@"FactorY"];

    [v12 setObject:&unk_1EE3AEF80 forKeyedSubscript:@"FactorZ"];
    objc_storeStrong(v34, v12);
    char v16 = v36;
    if ((unint64_t)v36 < v37) {
      goto LABEL_15;
    }
    unint64_t v21 = 0x8E38E38E38E38E39 * (((uint64_t)v36 - v35) >> 4);
    if (v21 + 1 <= 0x1C71C71C71C71C7)
    {
      unint64_t v24 = 0x1C71C71C71C71C72 * ((uint64_t)(v37 - v35) >> 4);
      if (v24 <= v21 + 1) {
        unint64_t v24 = v21 + 1;
      }
      if (0x8E38E38E38E38E39 * ((uint64_t)(v37 - v35) >> 4) >= 0xE38E38E38E38E3) {
        unint64_t v23 = 0x1C71C71C71C71C7;
      }
      else {
        unint64_t v23 = v24;
      }
      uint64_t v42 = &v37;
      if (!v23)
      {
        uint64_t v25 = 0;
        goto LABEL_35;
      }
      goto LABEL_32;
    }
LABEL_48:
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  int v13 = v33;
  uint64_t v33 = @"SpaceToChannel";

  __int16 v14 = [NSNumber numberWithInt:*((unsigned int *)this + 70)];
  [v12 setObject:v14 forKeyedSubscript:@"FactorX"];

  uint64_t v15 = [NSNumber numberWithInt:*((unsigned int *)this + 70)];
  [v12 setObject:v15 forKeyedSubscript:@"FactorY"];

  [v12 setObject:&unk_1EE3AEF80 forKeyedSubscript:@"FactorZ"];
  objc_storeStrong(v34, v12);
  char v16 = v36;
  if ((unint64_t)v36 >= v37)
  {
    unint64_t v21 = 0x8E38E38E38E38E39 * (((uint64_t)v36 - v35) >> 4);
    if (v21 + 1 <= 0x1C71C71C71C71C7)
    {
      unint64_t v22 = 0x1C71C71C71C71C72 * ((uint64_t)(v37 - v35) >> 4);
      if (v22 <= v21 + 1) {
        unint64_t v22 = v21 + 1;
      }
      if (0x8E38E38E38E38E39 * ((uint64_t)(v37 - v35) >> 4) >= 0xE38E38E38E38E3) {
        unint64_t v23 = 0x1C71C71C71C71C7;
      }
      else {
        unint64_t v23 = v22;
      }
      uint64_t v42 = &v37;
      if (!v23)
      {
        uint64_t v25 = 0;
        goto LABEL_35;
      }
LABEL_32:
      unint64_t v23 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v23);
LABEL_35:
      int v38 = (void **)v23;
      uint64_t v39 = (std::string *)(v23 + 144 * v21);
      uint64_t v40 = v39;
      unint64_t v41 = v23 + 144 * v25;
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v39, (uint64_t)v26);
      v40 += 6;
      std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v35, &v38);
      int v20 = v36;
      std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&v38);
      goto LABEL_36;
    }
    goto LABEL_48;
  }
LABEL_15:
  std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v36, (uint64_t)v26);
  int v20 = v16 + 6;
LABEL_36:
  uint64_t v36 = v20;
  (*(void (**)(char *, Espresso::ANECompilerEngine::compiler *, uint64_t *))(*((void *)this + 37) + 32))((char *)this + 296, a2, &v35);
LABEL_37:

  if (v31 < 0) {
    operator delete(__p);
  }
  int v38 = (void **)&v29;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v38);
  int v38 = (void **)&v28;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v38);
  if (v27 < 0) {
    operator delete(v26[0]);
  }
  v26[0] = &v35;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)v26);

  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  nitro::nitro_function::nitro_function(v7);
}

void sub_192B255C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer(v31 - 120);
  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t((id *)&a9);
  a9 = (void **)&a27;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100](&a9);

  if (v29) {
    nitro::nitro_function::nitro_function(v29);
  }
  if (v28) {
    nitro::nitro_function::nitro_function(v28);
  }
  nitro::nitro_function::nitro_function(v27);
  _Unwind_Resume(a1);
}

BOOL Espresso::ANECompilerEngine::mix_space_to_depth_kernel::is_valid_for_engine(uint64_t a1, int64x2_t **a2, Espresso::ANECompilerEngine *a3)
{
  uint64_t v6 = (_OWORD *)*((void *)a3 + 6);
  int v7 = (std::__shared_weak_count *)*((void *)v6 + 10);
  if (v7)
  {
    uint64_t v8 = std::__shared_weak_count::lock(v7);
    if (v8) {
      uint64_t v9 = (const Espresso::net *)*((void *)v6 + 9);
    }
    else {
      uint64_t v9 = 0;
    }
  }
  else
  {
    uint64_t v9 = 0;
    uint64_t v8 = 0;
  }
  Espresso::ANECompilerEngine::ane_arch_allow_network_override((uint64_t)v9 + 472);
  uint64_t v10 = (Espresso::ANECompilerEngine *)objc_claimAutoreleasedReturnValue();
  if (Espresso::ANECompilerEngine::is_mix(v10, v11))
  {
    long long v52 = *(_OWORD *)a2;
    int v12 = (std::__shared_weak_count *)*((void *)&v52 + 1);
    *a2 = 0;
    a2[1] = 0;
    int v13 = v12;
    BOOL is_valid_for_engine = Espresso::ANECompilerEngine::space_to_depth_kernel::is_valid_for_engine(a1, (int64x2_t **)&v52, a3);
    if (!v13) {
      goto LABEL_56;
    }
    uint64_t v15 = v13;
    goto LABEL_55;
  }
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v16 = *(void *)a3;
  uint64_t v17 = *(void *)(*(void *)a3 + 32);
  long long v18 = *(_OWORD *)(*(void *)a3 + 16);
  v45[0] = *(_OWORD *)*(void *)a3;
  v45[1] = v18;
  uint64_t v46 = v17;
  uint64_t v47 = 0;
  uint64_t v48 = 0;
  uint64_t v49 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v47, *(const void **)(v16 + 40), *(void *)(v16 + 48), (uint64_t)(*(void *)(v16 + 48) - *(void *)(v16 + 40)) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v50, v9, (const Espresso::layer_shape *)v45, 1);
  if (v47)
  {
    uint64_t v48 = v47;
    operator delete(v47);
  }
  if (v8)
  {
    nitro::nitro_function::nitro_function(v8);
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v19 = (_OWORD *)*((void *)a3 + 3);
  uint64_t v20 = *((void *)v19 + 4);
  long long v21 = v19[1];
  v39[0] = *v19;
  v39[1] = v21;
  uint64_t v40 = v20;
  std::string __p = 0;
  uint64_t v42 = 0;
  uint64_t v43 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *((const void **)v19 + 5), *((void *)v19 + 6), (uint64_t)(*((void *)v19 + 6) - *((void *)v19 + 5)) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v44, v9, (const Espresso::layer_shape *)v39, 1);
  if (__p)
  {
    uint64_t v42 = __p;
    operator delete(__p);
  }
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  unsigned int v22 = Espresso::ANECompilerEngine::bottom_compute_path(a3, v9, 0);
  Espresso::ANECompilerEngine::ane_kernel::get_ane_validator((Espresso::ANECompilerEngine::ane_kernel *)v37, (NSString *)(a1 + 296), v10);
  unint64_t v23 = v10;
  if (!Espresso::ANECompilerEngine::blob_shape_ane_compatible(v50, v23))
  {
    v34[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(v35, "Input blob dimensions exceed ANE limit.");
    goto LABEL_43;
  }
  if (!Espresso::ANECompilerEngine::blob_shape_ane_compatible(v44, v23))
  {
    v34[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(v35, "Output blob dimensions exceed ANE limit.");
    goto LABEL_43;
  }
  unint64_t v24 = (int *)(a1 + 280);
  if (!*(void *)(a1 + 284))
  {
    if (!v51)
    {
      v34[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v35, "NCDHW layout is not supported for SpaceToDepth");
      goto LABEL_43;
    }
    int v25 = *v24;
    if ((*v24 & 1) != 0 && v25 % 3)
    {
      v34[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v35, "SpaceToDepth only supports block sizes that are multiples of 2 or 3");
      goto LABEL_43;
    }
    if (v50[4] % v25 || v50[3] % v25)
    {
      v34[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v35, "SpaceToDepth only supports input width and height that are divisible by the block size");
      goto LABEL_43;
    }
    goto LABEL_41;
  }
  if (*(_DWORD *)(a1 + 288) || *(_DWORD *)(a1 + 284) != 1)
  {
    Espresso::ANECompilerEngine::space_to_depth_kernel::pixel_shuffle_or_unshuffle_supported((uint64_t)v34, (uint64_t)v37, v22, v23, (uint64_t)v50, v44, v24);
    if (!v34[0]) {
      goto LABEL_43;
    }
    if (v36 < 0) {
      operator delete(v35[0]);
    }
    goto LABEL_41;
  }
  if (v51)
  {
    if ((*v24 & 1) != 0 && *v24 % 3)
    {
      v34[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v35, "DepthToSpace only supports block sizes that are multiples of 2 or 3");
      goto LABEL_43;
    }
LABEL_41:
    v34[0] = 1;
    std::string::basic_string[abi:ne180100]<0>(v35, "Success");
    goto LABEL_43;
  }
  v34[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(v35, "NCDHW layout is not supported for DepthToSpace");
LABEL_43:

  BOOL is_valid_for_engine = v34[0] != 0;
  if (!v34[0])
  {
    long long v26 = *a2;
    char v27 = a2[1];
    v33[0] = v26;
    v33[1] = v27;
    if (v27) {
      atomic_fetch_add_explicit(&v27->i64[1], 1uLL, memory_order_relaxed);
    }
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v29, (long long *)v35, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v33, (Espresso::base_kernel::validate_for_engine_warning_t *)&v29);
    if (v32) {
      nitro::nitro_function::nitro_function(v32);
    }
    unint64_t v53 = (void **)&v31;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v53);
    unint64_t v53 = (void **)&v30;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v53);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v29.__r_.__value_.__l.__data_);
    }
    if (v27) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v27);
    }
  }
  if (v36 < 0) {
    operator delete(v35[0]);
  }
  uint64_t v15 = v38;
  if (v38) {
LABEL_55:
  }
    nitro::nitro_function::nitro_function(v15);
LABEL_56:

  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  return is_valid_for_engine;
}

void sub_192B25AF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,std::__shared_weak_count *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40)
{
  if (a33) {
    nitro::nitro_function::nitro_function(a33);
  }

  if (v40) {
    nitro::nitro_function::nitro_function(v40);
  }
  _Unwind_Resume(a1);
}

void sub_192B25BD0()
{
  if (!v0) {
    JUMPOUT(0x192B25BC8);
  }
  JUMPOUT(0x192B25BC0);
}

void Espresso::ANECompilerEngine::mix_space_to_depth_kernel::~mix_space_to_depth_kernel(Espresso::ANECompilerEngine::mix_space_to_depth_kernel *this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANECompilerEngine::mix_space_to_depth_kernel *)((char *)this + 296));
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t vars8;

  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANECompilerEngine::mix_space_to_depth_kernel *)((char *)this + 296));

  Espresso::base_kernel::~base_kernel(this);
}

void non-virtual thunk to'Espresso::ANECompilerEngine::mix_sequence_repeat_kernel::~mix_sequence_repeat_kernel(Espresso::ANECompilerEngine::mix_sequence_repeat_kernel *this)
{
  uint64_t v1 = (Espresso::ANECompilerEngine::mix_sequence_repeat_kernel *)((char *)this - 288);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);

  JUMPOUT(0x192FF16B0);
}

{
  Espresso::base_kernel *v1;
  uint64_t vars8;

  uint64_t v1 = (Espresso::ANECompilerEngine::mix_sequence_repeat_kernel *)((char *)this - 288);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);

  Espresso::base_kernel::~base_kernel(v1);
}

void non-virtual thunk to'Espresso::ANECompilerEngine::mix_sequence_repeat_kernel::compile(Espresso::ANECompilerEngine::mix_sequence_repeat_kernel *this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3)
{
}

void Espresso::ANECompilerEngine::mix_sequence_repeat_kernel::compile(Espresso::ANECompilerEngine::mix_sequence_repeat_kernel *this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3)
{
}

uint64_t Espresso::ANECompilerEngine::mix_sequence_repeat_kernel::is_valid_for_engine(uint64_t a1, uint64_t *a2, long long **a3)
{
  *((void *)&v56 + 1) = *MEMORY[0x1E4F143B8];
  uint64_t v6 = a3[6];
  int v7 = (std::__shared_weak_count *)*((void *)v6 + 10);
  if (v7)
  {
    uint64_t v8 = std::__shared_weak_count::lock(v7);
    if (v8) {
      uint64_t v9 = *((void *)v6 + 9);
    }
    else {
      uint64_t v9 = 0;
    }
  }
  else
  {
    uint64_t v9 = 0;
    uint64_t v8 = 0;
  }
  Espresso::ANECompilerEngine::ane_arch_allow_network_override(v9 + 472);
  uint64_t v10 = (Espresso::ANECompilerEngine *)objc_claimAutoreleasedReturnValue();
  if ((Espresso::ANECompilerEngine::is_mix(v10, v11) & 1) != 0 || (int v12 = *a3, (char *)a3[1] - (char *)*a3 != 64))
  {
    uint64_t v25 = 0;
  }
  else
  {
    int v13 = *((_DWORD *)v12 + 5);
    if (v13 == -1)
    {
      if (*((_DWORD *)v12 + 4) == 1) {
        int v13 = 4;
      }
      else {
        int v13 = 5;
      }
    }
    __int16 v14 = (long long *)(a3 + 8);
    Espresso::ANECompilerEngine::mix_sequence_repeat_kernel::decomposition_to_expand_dims_tile((uint64_t)&v45, a1, a1 + 8, v13, *((_DWORD *)a3 + 16));
    if (v45)
    {
      memset(v39, 0, sizeof(v39));
      std::vector<Espresso::layer_shape>::__init_with_size[abi:ne180100]<Espresso::layer_shape*,Espresso::layer_shape*>(v39, *a3, a3[1], ((char *)a3[1] - (char *)*a3) >> 6);
      long long v40 = 0uLL;
      uint64_t v41 = 0;
      std::vector<Espresso::layer_shape>::__init_with_size[abi:ne180100]<Espresso::layer_shape*,Espresso::layer_shape*>(&v40, a3[3], a3[4], ((char *)a3[4] - (char *)a3[3]) >> 6);
      uint64_t v15 = (std::__shared_weak_count *)a3[7];
      uint64_t v42 = a3[6];
      uint64_t v43 = v15;
      if (v15) {
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v44 = *v14;
      memset(v35, 0, sizeof(v35));
      std::vector<Espresso::layer_shape>::__init_with_size[abi:ne180100]<Espresso::layer_shape*,Espresso::layer_shape*>(v35, *a3, a3[1], ((char *)a3[1] - (char *)*a3) >> 6);
      memset(v36, 0, 24);
      std::vector<Espresso::layer_shape>::__init_with_size[abi:ne180100]<Espresso::layer_shape*,Espresso::layer_shape*>(v36, a3[3], a3[4], ((char *)a3[4] - (char *)a3[3]) >> 6);
      uint64_t v16 = (std::__shared_weak_count *)a3[7];
      v36[3] = a3[6];
      unint64_t v37 = v16;
      if (v16) {
        atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v38 = *v14;
      uint64_t v17 = *a3;
      uint64_t v18 = *((void *)*a3 + 4);
      long long v19 = (*a3)[1];
      long long v50 = **a3;
      long long v51 = v19;
      uint64_t v52 = v18;
      unint64_t v53 = 0;
      long long v54 = 0;
      uint64_t v55 = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v53, *((const void **)v17 + 5), *((void *)v17 + 6), (uint64_t)(*((void *)v17 + 6) - *((void *)v17 + 5)) >> 2);
      std::vector<Espresso::layer_shape>::__assign_with_size[abi:ne180100]<Espresso::layer_shape const*,Espresso::layer_shape const*>(v39, &v50, &v56, 1uLL);
      if (v53)
      {
        long long v54 = v53;
        operator delete(v53);
      }
      (*(void (**)(long long *__return_ptr))(*(void *)v45 + 64))(&v50);
      std::vector<Espresso::layer_shape>::__vdeallocate((uint64_t *)&v40);
      long long v40 = v50;
      uint64_t v41 = v51;
      *(void *)&long long v51 = 0;
      uint64_t v49 = (void **)&v50;
      long long v50 = 0uLL;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v49);
      std::vector<Espresso::layer_shape>::__assign_with_size[abi:ne180100]<Espresso::layer_shape*,Espresso::layer_shape*>((uint64_t *)v35, (long long *)v40, *((long long **)&v40 + 1), (uint64_t)(*((void *)&v40 + 1) - v40) >> 6);
      uint64_t v20 = v45;
      long long v21 = (std::__shared_weak_count *)a2[1];
      uint64_t v33 = *a2;
      uint64_t v34 = v21;
      if (v21) {
        atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      char v22 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v20 + 200))(v20, &v33, v39);
      if (v34) {
        nitro::nitro_function::nitro_function(v34);
      }
      if (v22)
      {
        uint64_t v23 = v47;
        unint64_t v24 = (std::__shared_weak_count *)a2[1];
        uint64_t v31 = *a2;
        id v32 = v24;
        if (v24) {
          atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v25 = (*(uint64_t (**)(uint64_t, uint64_t *, void ***))(*(void *)v23 + 200))(v23, &v31, v35);
        if (v32) {
          nitro::nitro_function::nitro_function(v32);
        }
      }
      else
      {
        uint64_t v25 = 0;
      }
      if (v37) {
        nitro::nitro_function::nitro_function(v37);
      }
      *(void *)&long long v50 = v36;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v50);
      *(void *)&long long v50 = v35;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v50);
      if (v43) {
        nitro::nitro_function::nitro_function(v43);
      }
      v35[0] = (void **)&v40;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v35);
      v35[0] = (void **)v39;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v35);
    }
    else
    {
      uint64_t v27 = v47;
      uint64_t v28 = (std::__shared_weak_count *)a2[1];
      uint64_t v29 = *a2;
      uint64_t v30 = v28;
      if (v28) {
        atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v25 = (*(uint64_t (**)(uint64_t, uint64_t *, long long **))(*(void *)v27 + 200))(v27, &v29, a3);
      if (v30) {
        nitro::nitro_function::nitro_function(v30);
      }
    }
    if (v48) {
      nitro::nitro_function::nitro_function(v48);
    }
    if (v46) {
      nitro::nitro_function::nitro_function(v46);
    }
  }

  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  return v25;
}

void sub_192B26154(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  if (a13) {
    nitro::nitro_function::nitro_function(a13);
  }
  Espresso::base_kernel::validate_for_engine_args_t::~validate_for_engine_args_t((Espresso::base_kernel::validate_for_engine_args_t *)&a16);
  Espresso::base_kernel::validate_for_engine_args_t::~validate_for_engine_args_t((Espresso::base_kernel::validate_for_engine_args_t *)&a26);
  Espresso::dropout_augment_lowmem::ret_t::~ret_t((Espresso::dropout_augment_lowmem::ret_t *)(v28 - 200));

  if (v26) {
    nitro::nitro_function::nitro_function(v26);
  }
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::mix_sequence_repeat_kernel::decomposition_to_expand_dims_tile(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  int v24 = a5;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  uint64_t v23 = 0;
  memset(v22, 0, sizeof(v22));
  if (a4 > 4)
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
  }
  else
  {
    if (5 - a4 <= 1) {
      unsigned int v8 = 1;
    }
    else {
      unsigned int v8 = 5 - a4;
    }
    bzero((char *)v22 + 8, 4 * v8);
    DWORD1(v22[0]) = v8;
    Espresso::abstract_engine_factory::shared(&v21);
    uint64_t v9 = v21;
    std::string::basic_string[abi:ne180100]<0>(__p, "expand_dims");
    LODWORD(v15) = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
    Espresso::abstract_engine_factory::make_kernel_priv(v9, a3, (uint64_t)__p, (uint64_t)v22, (int *)&v15);
    long long v10 = v17;
    long long v17 = 0uLL;
    *(_OWORD *)a1 = v10;
    if (v20 < 0) {
      operator delete(__p[0]);
    }
    if (*((void *)&v21 + 1)) {
      nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v21 + 1));
    }
  }
  *(void *)&long long v11 = 0x100000001;
  *((void *)&v11 + 1) = 0x100000001;
  long long v17 = v11;
  int v18 = *(_DWORD *)(a2 + 280);
  Espresso::abstract_engine_factory::shared(&v15);
  uint64_t v12 = v15;
  std::string::basic_string[abi:ne180100]<0>(__p, "tile");
  int v14 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v12, a3, (uint64_t)__p, (uint64_t)&v17, &v14);
  long long v13 = v21;
  long long v21 = 0uLL;
  *(_OWORD *)(a1 + 16) = v13;
  if (v20 < 0) {
    operator delete(__p[0]);
  }
  if (v16) {
    nitro::nitro_function::nitro_function(v16);
  }
}

void sub_192B2640C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,std::__shared_weak_count *a23)
{
  if (a23) {
    nitro::nitro_function::nitro_function(a23);
  }
  Espresso::dropout_augment_lowmem::ret_t::~ret_t(v23);
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::mix_sequence_repeat_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
}

void Espresso::ANECompilerEngine::mix_sequence_repeat_kernel::~mix_sequence_repeat_kernel(Espresso::ANECompilerEngine::mix_sequence_repeat_kernel *this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANECompilerEngine::mix_sequence_repeat_kernel *)((char *)this + 288));
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t vars8;

  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANECompilerEngine::mix_sequence_repeat_kernel *)((char *)this + 288));

  Espresso::base_kernel::~base_kernel(this);
}

void non-virtual thunk to'Espresso::ANECompilerEngine::mix_expand_dims_kernel::~mix_expand_dims_kernel(Espresso::ANECompilerEngine::mix_expand_dims_kernel *this)
{
  uint64_t v1 = (Espresso::ANECompilerEngine::mix_expand_dims_kernel *)((char *)this - 416);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);

  JUMPOUT(0x192FF16B0);
}

{
  Espresso::base_kernel *v1;
  uint64_t vars8;

  uint64_t v1 = (Espresso::ANECompilerEngine::mix_expand_dims_kernel *)((char *)this - 416);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);

  Espresso::base_kernel::~base_kernel(v1);
}

void non-virtual thunk to'Espresso::ANECompilerEngine::mix_expand_dims_kernel::compile(Espresso::ANECompilerEngine::mix_expand_dims_kernel *this, Espresso::ANECompilerEngine::compiler *a2, void **a3)
{
}

void Espresso::ANECompilerEngine::mix_expand_dims_kernel::compile(Espresso::ANECompilerEngine::mix_expand_dims_kernel *this, Espresso::ANECompilerEngine::compiler *a2, void **a3)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  int v4 = (std::__shared_weak_count *)*((void *)a2 + 2);
  if (!v4 || (int v7 = std::__shared_weak_count::lock(v4)) == 0 || (v8 = *((void *)a2 + 1)) == 0) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Inconsistent state: null network");
  }
  if (!*(void *)(v8 + 576)) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Inconsistent state: blob_storage");
  }
  uint64_t v9 = v8 + 136;
  v35[0] = a3[6];
  long long v10 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8 + 136, (unsigned __int8 *)v35[0], (long long **)v35);
  uint64_t v12 = *((void *)v10 + 5);
  long long v11 = (std::__shared_weak_count *)*((void *)v10 + 6);
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v35[0] = a3;
  long long v13 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v9, (unsigned __int8 *)a3, (long long **)v35);
  uint64_t v15 = (const void *)*((void *)v13 + 5);
  int v14 = (std::__shared_weak_count *)*((void *)v13 + 6);
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::abstract_blob_container::shape((char *)v35, v12);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v32, (const Espresso::layer_shape *)v35, 0);
  if (__p)
  {
    v40[0] = __p;
    operator delete(__p);
  }
  if (v14 && v16)
  {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    unsigned int v17 = v16[47];
    nitro::nitro_function::nitro_function(v14);
  }
  else
  {
    unsigned int v17 = v16[47];
  }
  unsigned int v31 = v17;
  Espresso::abstract_blob_container::shape((char *)v35, v12);
  int v18 = v37;
  if (v36 == 1) {
    int v19 = 4;
  }
  else {
    int v19 = 5;
  }
  if (v37 == -1) {
    int v18 = v19;
  }
  unint64_t v20 = v18;
  if (__p)
  {
    v40[0] = __p;
    operator delete(__p);
  }
  long long v29 = xmmword_192DAF430;
  int v30 = 4;
  Espresso::ANECompilerEngine::mix_expand_dims_kernel::gen_transpose_params_for_expand_dims((uint64_t)v26, (uint64_t)this, (uint64_t)v32, &v31, v20, (uint64_t)&v29);
  if (!v26[0])
  {
    if (v28 >= 0) {
      char v22 = (const char *)&v27;
    }
    else {
      char v22 = (const char *)v27;
    }
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>(v22);
  }
  LODWORD(v21) = *((_DWORD *)this + 71);
  if ((int)v21 <= 1) {
    uint64_t v21 = 1;
  }
  else {
    uint64_t v21 = v21;
  }
  if (v21 + v20 >= 6) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("expand_dims kernel: Requested expand_dims would generate a tensor with >5 dims.");
  }
  Espresso::ANECompilerEngine::CodegenTransposeUnit((uint64_t)v35, (unsigned int *)&v29, (uint64_t)a3, 1);
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  uint64_t v33 = &v23;
  char v34 = 0;
  uint64_t v23 = (char *)operator new(0x90uLL);
  uint64_t v24 = (uint64_t)v23;
  uint64_t v25 = v23 + 144;
  uint64_t v24 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>,Espresso::ANECompilerEngine::compiler::unit_t const*,Espresso::ANECompilerEngine::compiler::unit_t const*,Espresso::ANECompilerEngine::compiler::unit_t*>((uint64_t)&v25, (uint64_t)v35, (uint64_t)&v45, (uint64_t)v23);

  if (v41 < 0) {
    operator delete((void *)v40[4]);
  }
  uint64_t v33 = (char **)v40;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v33);
  uint64_t v33 = (char **)&v38;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v33);
  if (SHIBYTE(v37) < 0) {
    operator delete(v35[0]);
  }
  (*(void (**)(char *, Espresso::ANECompilerEngine::compiler *, char **))(*((void *)this + 52) + 32))((char *)this + 416, a2, &v23);
  v35[0] = &v23;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)v35);
  if (v28 < 0) {
    operator delete(v27);
  }
  if (v14) {
    nitro::nitro_function::nitro_function(v14);
  }
  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
  nitro::nitro_function::nitro_function(v7);
}

void sub_192B2692C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&a29);
  if (a19 < 0) {
    operator delete(__p);
  }
  if (v37) {
    nitro::nitro_function::nitro_function(v37);
  }
  if (v36) {
    nitro::nitro_function::nitro_function(v36);
  }
  nitro::nitro_function::nitro_function(v35);
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::mix_expand_dims_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
}

void Espresso::ANECompilerEngine::mix_expand_dims_kernel::~mix_expand_dims_kernel(Espresso::ANECompilerEngine::mix_expand_dims_kernel *this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANECompilerEngine::mix_expand_dims_kernel *)((char *)this + 416));
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t vars8;

  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANECompilerEngine::mix_expand_dims_kernel *)((char *)this + 416));

  Espresso::base_kernel::~base_kernel(this);
}

void non-virtual thunk to'Espresso::ANECompilerEngine::mix_squeeze_kernel::~mix_squeeze_kernel(Espresso::ANECompilerEngine::mix_squeeze_kernel *this)
{
  uint64_t v1 = (Espresso::ANECompilerEngine::mix_squeeze_kernel *)((char *)this - 424);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);

  JUMPOUT(0x192FF16B0);
}

{
  Espresso::base_kernel *v1;
  uint64_t vars8;

  uint64_t v1 = (Espresso::ANECompilerEngine::mix_squeeze_kernel *)((char *)this - 424);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);

  Espresso::base_kernel::~base_kernel(v1);
}

void non-virtual thunk to'Espresso::ANECompilerEngine::mix_squeeze_kernel::compile(Espresso::ANECompilerEngine::mix_squeeze_kernel *this, Espresso::ANECompilerEngine::compiler *a2, void **a3)
{
}

void Espresso::ANECompilerEngine::mix_squeeze_kernel::compile(Espresso::ANECompilerEngine::mix_squeeze_kernel *this, Espresso::ANECompilerEngine::compiler *a2, void **a3)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  int v4 = (std::__shared_weak_count *)*((void *)a2 + 2);
  if (!v4 || (int v7 = std::__shared_weak_count::lock(v4)) == 0 || (v8 = *((void *)a2 + 1)) == 0) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Inconsistent state: null network");
  }
  if (!*(void *)(v8 + 576)) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Inconsistent state: blob_storage");
  }
  uint64_t v9 = v8 + 136;
  v31[0] = a3[6];
  long long v10 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8 + 136, (unsigned __int8 *)v31[0], (long long **)v31);
  uint64_t v12 = (const void *)*((void *)v10 + 5);
  long long v11 = (std::__shared_weak_count *)*((void *)v10 + 6);
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v31[0] = a3;
  long long v13 = (std::__shared_weak_count *)*((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v9, (unsigned __int8 *)a3, (long long **)v31)+ 6);
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::abstract_blob_container::shape((char *)v31, (uint64_t)v12);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v28, (const Espresso::layer_shape *)v31, 0);
  if (__p)
  {
    v36[0] = __p;
    operator delete(__p);
  }
  if (v11 && v14)
  {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    unsigned int v15 = v14[47];
    nitro::nitro_function::nitro_function(v11);
  }
  else
  {
    unsigned int v15 = v14[47];
  }
  unsigned int v27 = v15;
  Espresso::abstract_blob_container::shape((char *)v31, (uint64_t)v12);
  if (v32 == 1) {
    int v16 = 4;
  }
  else {
    int v16 = 5;
  }
  if (v33 == -1) {
    int v17 = v16;
  }
  else {
    int v17 = v33;
  }
  if (__p)
  {
    v36[0] = __p;
    operator delete(__p);
  }
  long long v25 = xmmword_192DAF430;
  int v26 = 4;
  Espresso::ANECompilerEngine::mix_squeeze_kernel::gen_transpose_params_for_squeeze((uint64_t)v22, (uint64_t)this, (uint64_t)v28, &v27, v17, (uint64_t)&v25);
  if (!v22[0])
  {
    if (v24 >= 0) {
      int v18 = (const char *)&v23;
    }
    else {
      int v18 = (const char *)v23;
    }
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>(v18);
  }
  Espresso::ANECompilerEngine::CodegenTransposeUnit((uint64_t)v31, (unsigned int *)&v25, (uint64_t)a3, 1);
  int v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  long long v29 = &v19;
  char v30 = 0;
  int v19 = (char *)operator new(0x90uLL);
  uint64_t v20 = (uint64_t)v19;
  uint64_t v21 = v19 + 144;
  uint64_t v20 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>,Espresso::ANECompilerEngine::compiler::unit_t const*,Espresso::ANECompilerEngine::compiler::unit_t const*,Espresso::ANECompilerEngine::compiler::unit_t*>((uint64_t)&v21, (uint64_t)v31, (uint64_t)&v41, (uint64_t)v19);

  if (v37 < 0) {
    operator delete((void *)v36[4]);
  }
  long long v29 = (char **)v36;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  long long v29 = (char **)&v34;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  if (SHIBYTE(v33) < 0) {
    operator delete(v31[0]);
  }
  (*(void (**)(char *, Espresso::ANECompilerEngine::compiler *, char **))(*((void *)this + 53) + 32))((char *)this + 424, a2, &v19);
  v31[0] = &v19;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)v31);
  if (v24 < 0) {
    operator delete(v23);
  }
  if (v13) {
    nitro::nitro_function::nitro_function(v13);
  }
  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
  nitro::nitro_function::nitro_function(v7);
}

void sub_192B26EB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&a29);
  if (a19 < 0) {
    operator delete(__p);
  }
  if (v37) {
    nitro::nitro_function::nitro_function(v37);
  }
  if (v36) {
    nitro::nitro_function::nitro_function(v36);
  }
  nitro::nitro_function::nitro_function(v35);
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::mix_squeeze_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
}

void Espresso::ANECompilerEngine::mix_squeeze_kernel::~mix_squeeze_kernel(Espresso::ANECompilerEngine::mix_squeeze_kernel *this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANECompilerEngine::mix_squeeze_kernel *)((char *)this + 424));
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t vars8;

  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANECompilerEngine::mix_squeeze_kernel *)((char *)this + 424));

  Espresso::base_kernel::~base_kernel(this);
}

void non-virtual thunk to'Espresso::ANECompilerEngine::mix_crop_kernel::~mix_crop_kernel(Espresso::ANECompilerEngine::mix_crop_kernel *this)
{
  uint64_t v2 = (Espresso::ANECompilerEngine::mix_crop_kernel *)((char *)this - 296);
  *((void *)this - 37) = &unk_1EE33E8E0;
  *(void *)this = &unk_1EE33EA40;
  int v3 = (std::__shared_weak_count *)*((void *)this + 28);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v2);

  JUMPOUT(0x192FF16B0);
}

{
  Espresso::base_kernel *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  uint64_t v2 = (Espresso::ANECompilerEngine::mix_crop_kernel *)((char *)this - 296);
  *((void *)this - 37) = &unk_1EE33E8E0;
  *(void *)this = &unk_1EE33EA40;
  int v3 = (std::__shared_weak_count *)*((void *)this + 28);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);

  Espresso::base_kernel::~base_kernel(v2);
}

void non-virtual thunk to'Espresso::ANECompilerEngine::mix_crop_kernel::compile(Espresso::ANECompilerEngine::mix_crop_kernel *this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3)
{
}

void Espresso::ANECompilerEngine::mix_crop_kernel::compile(Espresso::ANECompilerEngine::mix_crop_kernel *this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3)
{
  uint64_t v6 = (std::__shared_weak_count *)*((void *)a2 + 2);
  if (v6)
  {
    int v7 = std::__shared_weak_count::lock(v6);
    if (v7) {
      uint64_t v8 = *((void *)a2 + 1);
    }
    else {
      uint64_t v8 = 0;
    }
  }
  else
  {
    uint64_t v8 = 0;
    int v7 = 0;
  }
  Espresso::ANECompilerEngine::ane_arch_allow_network_override(v8 + 472);
  uint64_t v9 = (Espresso::ANECompilerEngine *)objc_claimAutoreleasedReturnValue();
  if (!Espresso::ANECompilerEngine::is_mix(v9, v10)) {
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("h13 crop kernel should have been mapped to slice");
  }
  Espresso::ANECompilerEngine::crop_kernel::compile(this, a2, a3);

  if (v7)
  {
    nitro::nitro_function::nitro_function(v7);
  }
}

void sub_192B27210(_Unwind_Exception *exception_object)
{
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::ANECompilerEngine::mix_crop_kernel::is_valid_for_engine(_DWORD *a1, int64x2_t **a2, _OWORD **a3)
{
  uint64_t v6 = a3[6];
  int v7 = (std::__shared_weak_count *)*((void *)v6 + 10);
  if (v7)
  {
    uint64_t v8 = std::__shared_weak_count::lock(v7);
    if (v8) {
      uint64_t v9 = *((void *)v6 + 9);
    }
    else {
      uint64_t v9 = 0;
    }
  }
  else
  {
    uint64_t v9 = 0;
    uint64_t v8 = 0;
  }
  Espresso::ANECompilerEngine::ane_arch_allow_network_override(v9 + 472);
  long long v10 = (Espresso::ANECompilerEngine *)objc_claimAutoreleasedReturnValue();
  if (Espresso::ANECompilerEngine::is_mix(v10, v11))
  {
    long long v68 = *(_OWORD *)a2;
    uint64_t v12 = (std::__shared_weak_count *)*((void *)&v68 + 1);
    *a2 = 0;
    a2[1] = 0;
    long long v13 = v12;
    uint64_t is_valid_for_engine = Espresso::ANECompilerEngine::crop_kernel::is_valid_for_engine(a1, (int64x2_t **)&v68, a3);
    if (v13) {
      nitro::nitro_function::nitro_function(v13);
    }
    goto LABEL_63;
  }
  unsigned int v15 = a3[6];
  if (*(void *)(*v15 + 224 * (void)a3[9] + 144) - *(void *)(*v15 + 224 * (void)a3[9] + 136) != 24)
  {
    int v19 = *a2;
    uint64_t v20 = a2[1];
    v67[0] = v19;
    v67[1] = v20;
    if (v20) {
      atomic_fetch_add_explicit(&v20->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "ANE crop kernel doesn't support more than 1 input.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v63, &__p, (uint64_t)a3, 1);
    Espresso::emit_kernel_validation_warning(v67, (Espresso::base_kernel::validate_for_engine_warning_t *)&v63);
    if (v66) {
      nitro::nitro_function::nitro_function(v66);
    }
    v54[0] = (void **)v65;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v54);
    v54[0] = (void **)v64;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v54);
    if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v63.__r_.__value_.__l.__data_);
    }
    if (v62 < 0) {
      operator delete((void *)__p);
    }
    if (v20) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v20);
    }
    goto LABEL_62;
  }
  int v16 = (std::__shared_weak_count *)v15[10];
  if (v16)
  {
    int v17 = std::__shared_weak_count::lock(v16);
    if (v17) {
      int v18 = (const Espresso::net *)v15[9];
    }
    else {
      int v18 = 0;
    }
  }
  else
  {
    int v18 = 0;
    int v17 = 0;
  }
  uint64_t v21 = *a3;
  uint64_t v22 = *((void *)*a3 + 4);
  long long v23 = (*a3)[1];
  v55[0] = **a3;
  v55[1] = v23;
  uint64_t v56 = v22;
  char v57 = 0;
  char v58 = 0;
  uint64_t v59 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v57, *((const void **)v21 + 5), *((void *)v21 + 6), (uint64_t)(*((void *)v21 + 6) - *((void *)v21 + 5)) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)&__p, v18, (const Espresso::layer_shape *)v55, 1);
  if (v57)
  {
    char v58 = v57;
    operator delete(v57);
  }
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
  char v24 = a3[6];
  long long v25 = (std::__shared_weak_count *)*((void *)v24 + 10);
  if (v25)
  {
    int v26 = std::__shared_weak_count::lock(v25);
    if (v26) {
      unsigned int v27 = (const Espresso::net *)*((void *)v24 + 9);
    }
    else {
      unsigned int v27 = 0;
    }
  }
  else
  {
    unsigned int v27 = 0;
    int v26 = 0;
  }
  char v28 = a3[3];
  uint64_t v29 = *((void *)v28 + 4);
  long long v30 = v28[1];
  v49[0] = *v28;
  v49[1] = v30;
  uint64_t v50 = v29;
  long long v51 = 0;
  uint64_t v52 = 0;
  uint64_t v53 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v51, *((const void **)v28 + 5), *((void *)v28 + 6), (uint64_t)(*((void *)v28 + 6) - *((void *)v28 + 5)) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v54, v27, (const Espresso::layer_shape *)v49, 1);
  if (v51)
  {
    uint64_t v52 = v51;
    operator delete(v51);
  }
  if (v26) {
    nitro::nitro_function::nitro_function(v26);
  }
  int v31 = a1[70];
  int v32 = a1[71];
  if (v31 > 0 || v32 >= 1)
  {
    uint64_t v47 = 1;
    int v48 = 1;
    int v44 = 0;
    int v45 = v31;
    int v46 = v61 - v32;
    Espresso::ANECompilerEngine::mix_slice_kernel::supported_by_hw((uint64_t)v41, v10, (uint64_t)&__p, (uint64_t)v54, &v44, (NSString *)*((unsigned int *)a3 + 16));
    if (!v41[0])
    {
      uint64_t v35 = *a2;
      int v36 = a2[1];
      v40[0] = v35;
      v40[1] = v36;
      if (v36) {
        atomic_fetch_add_explicit(&v36->i64[1], 1uLL, memory_order_relaxed);
      }
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v63, (long long *)v42, (uint64_t)a3, 0);
      Espresso::emit_kernel_validation_warning(v40, (Espresso::base_kernel::validate_for_engine_warning_t *)&v63);
      goto LABEL_54;
    }
    if (v43 < 0) {
      operator delete(v42[0]);
    }
  }
  int v33 = a1[72];
  int v34 = a1[73];
  uint64_t is_valid_for_engine = 1;
  if (v33 <= 0 && v34 < 1) {
    goto LABEL_63;
  }
  uint64_t v47 = 1;
  int v48 = 1;
  int v44 = 1;
  int v45 = v33;
  int v46 = HIDWORD(__p) - v34;
  Espresso::ANECompilerEngine::mix_slice_kernel::supported_by_hw((uint64_t)v41, v10, (uint64_t)&__p, (uint64_t)v54, &v44, (NSString *)*((unsigned int *)a3 + 16));
  if (!v41[0])
  {
    char v37 = *a2;
    int v36 = a2[1];
    v39[0] = v37;
    v39[1] = v36;
    if (v36) {
      atomic_fetch_add_explicit(&v36->i64[1], 1uLL, memory_order_relaxed);
    }
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v63, (long long *)v42, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v39, (Espresso::base_kernel::validate_for_engine_warning_t *)&v63);
LABEL_54:
    if (v66) {
      nitro::nitro_function::nitro_function(v66);
    }
    std::string v69 = (void **)v65;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v69);
    std::string v69 = (void **)v64;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v69);
    if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v63.__r_.__value_.__l.__data_);
    }
    if (v36) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v36);
    }
    if (v43 < 0) {
      operator delete(v42[0]);
    }
LABEL_62:
    uint64_t is_valid_for_engine = 0;
    goto LABEL_63;
  }
  if (v43 < 0) {
    operator delete(v42[0]);
  }
LABEL_63:

  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  return is_valid_for_engine;
}

void sub_192B276CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((Espresso::base_kernel::validate_for_engine_warning_t *)(v52 - 240));
  if (v51) {
    nitro::nitro_function::nitro_function(v51);
  }
  if (a20 < 0) {
    operator delete(__p);
  }

  if (v49) {
    nitro::nitro_function::nitro_function(v49);
  }
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::mix_crop_kernel::~mix_crop_kernel(Espresso::ANECompilerEngine::mix_crop_kernel *this)
{
  *(void *)this = &unk_1EE33E8E0;
  uint64_t v2 = (Espresso::ANECompilerEngine::mix_crop_kernel *)((char *)this + 296);
  *((void *)this + 37) = &unk_1EE33EA40;
  int v3 = (std::__shared_weak_count *)*((void *)this + 65);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(v2);
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  Espresso::ANECompilerEngine::ane_kernel *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EE33E8E0;
  uint64_t v2 = (Espresso::ANECompilerEngine::mix_crop_kernel *)((char *)this + 296);
  *((void *)this + 37) = &unk_1EE33EA40;
  int v3 = (std::__shared_weak_count *)*((void *)this + 65);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(v2);

  Espresso::base_kernel::~base_kernel(this);
}

void non-virtual thunk to'Espresso::ANECompilerEngine::mix_flatten_kernel::~mix_flatten_kernel(Espresso::ANECompilerEngine::mix_flatten_kernel *this)
{
  uint64_t v1 = (Espresso::ANECompilerEngine::mix_flatten_kernel *)((char *)this - 288);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);

  JUMPOUT(0x192FF16B0);
}

{
  Espresso::base_kernel *v1;
  uint64_t vars8;

  uint64_t v1 = (Espresso::ANECompilerEngine::mix_flatten_kernel *)((char *)this - 288);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);

  Espresso::base_kernel::~base_kernel(v1);
}

void non-virtual thunk to'Espresso::ANECompilerEngine::mix_flatten_kernel::compile(std::__shared_weak_count **this, Espresso::ANECompilerEngine::compiler *a2, void **a3)
{
}

void Espresso::ANECompilerEngine::mix_flatten_kernel::compile(std::__shared_weak_count **this, Espresso::ANECompilerEngine::compiler *a2, void **a3)
{
  uint64_t v178 = *MEMORY[0x1E4F143B8];
  int v4 = (std::__shared_weak_count *)*((void *)a2 + 2);
  if (!v4 || (v144 = std::__shared_weak_count::lock(v4)) == 0 || (uint64_t v7 = *((void *)a2 + 1)) == 0) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Inconsistent state: null network");
  }
  if (!*(void *)(v7 + 576)) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Inconsistent state: blob_storage");
  }
  v159[0] = a3[6];
  uint64_t v8 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7 + 136, (unsigned __int8 *)v159[0], (long long **)v159);
  long long v10 = (int32x4_t *)*((void *)v8 + 5);
  uint64_t v9 = (std::__shared_weak_count *)*((void *)v8 + 6);
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v143 = v9;
  v159[0] = a3;
  long long v11 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7 + 136, (unsigned __int8 *)a3, (long long **)v159);
  long long v13 = (float *)*((void *)v11 + 5);
  uint64_t v12 = (std::__shared_weak_count *)*((void *)v11 + 6);
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unsigned int v145 = v12;
  Espresso::ANECompilerEngine::ane_arch_allow_network_override(v7 + 472);
  int v142 = (Espresso::ANECompilerEngine *)objc_claimAutoreleasedReturnValue();
  if (Espresso::ANECompilerEngine::is_mix(v142, v14))
  {
    Espresso::ANECompilerEngine::flatten_kernel::compile((Espresso::ANECompilerEngine::flatten_kernel *)this, a2, (const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *)a3);
    goto LABEL_161;
  }
  uint64_t v146 = 0;
  int v147 = 0;
  v148[0] = 0;
  if (v10)
  {
    long long v10 = v15;
    if (v143 && v15)
    {
      atomic_fetch_add_explicit(&v143->__shared_owners_, 1uLL, memory_order_relaxed);
      long long v136 = v143;
    }
    else
    {
      long long v136 = 0;
    }
  }
  else
  {
    long long v136 = 0;
  }
  int v137 = 0;
  uint64_t v138 = a2;
  if (v145 && v16)
  {
    atomic_fetch_add_explicit(&v145->__shared_owners_, 1uLL, memory_order_relaxed);
    int v137 = v145;
  }
  uint64_t v17 = v16[44];
  *(_OWORD *)long long v140 = *((_OWORD *)v16 + 10);
  if (*((_DWORD *)this + 70) == 2)
  {
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t(v159, a3);
    int v18 = objc_opt_new();
    int v19 = v166;
    id v166 = @"Reshape";

    uint64_t v20 = [NSNumber numberWithInt:v17];
    [v18 setObject:v20 forKeyedSubscript:@"ReshapedWidth"];

    uint64_t v21 = [NSNumber numberWithInt:HIDWORD(v140[1])];
    [v18 setObject:v21 forKeyedSubscript:@"ReshapedHeight"];

    uint64_t v22 = [NSNumber numberWithInt:LODWORD(v140[1])];
    [v18 setObject:v22 forKeyedSubscript:@"ReshapedDepth"];

    long long v23 = [NSNumber numberWithInt:HIDWORD(v140[0])];
    [v18 setObject:v23 forKeyedSubscript:@"ReshapedChannel"];

    char v24 = [NSNumber numberWithInt:LODWORD(v140[0])];
    [v18 setObject:v24 forKeyedSubscript:@"ReshapedBatch"];

    objc_storeStrong(v167, v18);
    unint64_t v34 = 0x8E38E38E38E38E39 * (((uint64_t)v147 - v146) >> 4);
    if (v34 + 1 > 0x1C71C71C71C71C7) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v35 = 0x1C71C71C71C71C72 * ((v148[0] - v146) >> 4);
    if (v35 <= v34 + 1) {
      unint64_t v35 = v34 + 1;
    }
    if (0x8E38E38E38E38E39 * ((v148[0] - v146) >> 4) >= 0xE38E38E38E38E3) {
      unint64_t v36 = 0x1C71C71C71C71C7;
    }
    else {
      unint64_t v36 = v35;
    }
    *((void *)&v169 + 1) = v148;
    if (v36) {
      unint64_t v36 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v36);
    }
    else {
      uint64_t v37 = 0;
    }
    *(void *)long long buf = v36;
    *(void *)&buf[8] = v36 + 16 * (((uint64_t)v147 - v146) >> 4);
    *(void *)&uint8_t buf[16] = *(void *)&buf[8];
    *(void *)&long long v169 = v36 + 144 * v37;
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(*(std::string **)&buf[8], (uint64_t)v159);
    *(void *)&buf[16] += 144;
    std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v146, buf);
    char v43 = v147;
    std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)buf);
    int v147 = v43;
  }
  else
  {
    unsigned int v25 = v16[46];
    unsigned int v26 = v16[47];
    int32x4_t v134 = v10[10];
    __int32 v27 = v10[11].i32[0];
    __int32 v29 = v10[11].i32[2];
    __int32 v28 = v10[11].i32[3];
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t(v159, a3);
    long long v30 = objc_opt_new();
    int v31 = v166;
    id v166 = @"Flatten";

    int v32 = *((_DWORD *)this + 70);
    if (!v32
      || (vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vceqq_s32(v134, *(int32x4_t *)v140)), 0xFuLL))) & 1) != 0
      && v27 == v17
      && v28 == v26
      && v29 == v25)
    {
      int v33 = @"NCHW";
    }
    else
    {
      if (v32 != 1) {
        Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Unsupported flatten mode");
      }
      int v33 = @"NHWC";
    }
    [v30 setObject:v33 forKeyedSubscript:@"Mode"];
    objc_storeStrong(v167, v30);
    unint64_t v38 = 0x8E38E38E38E38E39 * (((uint64_t)v147 - v146) >> 4);
    if (v38 + 1 > 0x1C71C71C71C71C7) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v39 = 0x1C71C71C71C71C72 * ((v148[0] - v146) >> 4);
    if (v39 <= v38 + 1) {
      unint64_t v39 = v38 + 1;
    }
    if (0x8E38E38E38E38E39 * ((v148[0] - v146) >> 4) >= 0xE38E38E38E38E3) {
      unint64_t v40 = 0x1C71C71C71C71C7;
    }
    else {
      unint64_t v40 = v39;
    }
    *((void *)&v169 + 1) = v148;
    if (v40) {
      unint64_t v40 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v40);
    }
    else {
      uint64_t v41 = 0;
    }
    *(void *)long long buf = v40;
    *(void *)&buf[8] = v40 + 16 * (((uint64_t)v147 - v146) >> 4);
    *(void *)&uint8_t buf[16] = *(void *)&buf[8];
    *(void *)&long long v169 = v40 + 144 * v41;
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(*(std::string **)&buf[8], (uint64_t)v159);
    *(void *)&buf[16] += 144;
    std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v146, buf);
    id v42 = v147;
    std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)buf);
    int v147 = v42;
  }
  if (v164 < 0) {
    operator delete(__p);
  }
  *(void *)long long buf = v162;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(void *)long long buf = v161;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (v160 < 0) {
    operator delete(v159[0]);
  }
  atomic_fetch_add_explicit(&v144->__shared_owners_, 1uLL, memory_order_relaxed);
  if (v145) {
    atomic_fetch_add_explicit(&v145->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::ANECompilerEngine::compiler::layer_graph_info_t::layer_graph_info_t((Espresso::ANECompilerEngine::compiler::layer_graph_info_t *)v159);
  id v166 = 0;
  v167[0] = 0;
  v167[1] = (id)0x100000000;
  int v44 = this[44];
  int v45 = this[45];
  if (v45) {
    atomic_fetch_add_explicit(&v45->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v44 && !*(unsigned char *)(((uint64_t (*)(void))this[36][4].__shared_owners_)() + 40))
  {
    float v46 = v13[28];
    v152[0] = v44;
    v152[1] = v45;
    if (v45) {
      atomic_fetch_add_explicit(&v45->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v47 = this[47];
    v151[0] = (uint64_t)this[46];
    v151[1] = (uint64_t)v47;
    if (v47) {
      atomic_fetch_add_explicit(&v47->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    Espresso::ane_style_post_scale_bias((uint64_t)v152, v151, (uint64_t)&v153, v46);
    if (v47) {
      nitro::nitro_function::nitro_function(v47);
    }
    if (v45) {
      nitro::nitro_function::nitro_function(v45);
    }
    uint64_t shared_owners_low = LODWORD(v44->__shared_owners_);
    std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v149, 2 * shared_owners_low, 1, 1, 1);
    uint64_t v49 = (int)shared_owners_low;
    uint64_t v50 = this[46];
    int shared_owners = shared_owners_low;
    if (v50) {
      int shared_owners = v50->__shared_owners_;
    }
    if (!*((unsigned char *)v138 + 384))
    {
      int v139 = shared_owners;
      Espresso::blob<unsigned char,1>::make(&__str, 4 * shared_owners_low);
      long long v104 = *(int **)(__str.__r_.__value_.__r.__words[0] + 16);
      if ((int)shared_owners_low >= 1)
      {
        for (uint64_t i = 0; i != shared_owners_low; ++i)
        {
          float v106 = *(float *)(v44->__shared_weak_owners_ + i * 4);
          *(float *)&int v107 = ldexp(1.0, -v157) * v106;
          v104[i] = v107;
        }
      }
      if (shared_owners_low)
      {
        std::string::size_type v108 = *(_WORD **)(v149 + 16);
        do
        {
          int v109 = *v104++;
          _S0 = v109;
          __asm { FCVT            H0, S0 }
          *v108++ = _S0;
          --v49;
        }
        while (v49);
      }
      if (this[46])
      {
        Espresso::blob<unsigned char,1>::make(buf, 4 * shared_owners);
        uint64_t v112 = *(void *)buf;
        Espresso::blob<unsigned char,1>::make(buf, 2 * shared_owners);
        uint64_t v132 = *(void *)buf;
        uint64_t v113 = *(int **)(v112 + 16);
        if (v139 >= 1)
        {
          for (uint64_t j = 0; j != v139; ++j)
          {
            if ((int)shared_owners_low - 1 >= (int)j) {
              int v115 = j;
            }
            else {
              int v115 = shared_owners_low - 1;
            }
            *(float *)&int v116 = *(float *)(*(void *)(v155 + 16) + 4 * j)
                            * *(float *)(*(void *)(v153 + 16) + 4 * v115);
            v113[j] = v116;
            unsigned int v118 = v157;
            int v117 = v158;
            *(float *)&int v119 = ldexp(1.0, v158 - v157) * *(float *)&v116;
            v113[j] = v119;
            float v122 = ldexp(1.0, v118 - v117) * *(float *)&v119;
            if (v122 < -127.0 || v122 > 255.0)
            {
              int v124 = Espresso::espresso_os_log_subsystem(v120, v121);
              if (os_log_type_enabled(v124, OS_LOG_TYPE_ERROR))
              {
                double v125 = *(float *)&v113[j];
                *(_DWORD *)long long buf = 134218752;
                *(double *)&uint8_t buf[4] = v122;
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = v158;
                *(_WORD *)&unsigned char buf[18] = 1024;
                *(_DWORD *)&buf[20] = v157;
                LOWORD(v169) = 2048;
                *(double *)((char *)&v169 + 2) = v125;
                _os_log_error_impl(&dword_1920CB000, v124, OS_LOG_TYPE_ERROR, "[ANEC::add_ane_scale_bias_unit] Shifted bias overflowing shifted_b=%f acc_bias_shift=%d post_right_shift=%d anebias=%f", buf, 0x22u);
              }
            }
          }
        }
        if (v139)
        {
          uint64_t v126 = v139;
          int v127 = *(_WORD **)(v132 + 16);
          do
          {
            int v128 = *v113++;
            _S0 = v128;
            __asm { FCVT            H0, S0 }
            *v127++ = _S0;
            --v126;
          }
          while (v126);
        }
      }
      exception = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
      Espresso::not_implemented_error::not_implemented_error(exception);
    }
    int v52 = v158;
    uint64_t v53 = v149;
    if (shared_owners_low)
    {
      long long v54 = *(int **)(v153 + 16);
      uint64_t v55 = *(_WORD **)(v149 + 16);
      do
      {
        int v56 = *v54++;
        _S0 = v56;
        __asm { FCVT            H0, S0 }
        *v55++ = _S0;
        --v49;
      }
      while (v49);
    }
    if (v50)
    {
      std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(buf, 2 * shared_owners, 1, 1, 1);
      uint64_t v62 = *(void *)buf;
      int v135 = *(std::__shared_weak_count **)&buf[8];
      if (shared_owners)
      {
        uint64_t v63 = shared_owners;
        uint64_t v64 = *(_WORD **)(*(void *)buf + 16);
        char v65 = *(int **)(v155 + 16);
        do
        {
          int v66 = *v65++;
          _S0 = v66;
          __asm { FCVT            H0, S0 }
          *v64++ = _S0;
          --v63;
        }
        while (v63);
      }
    }
    else
    {
      int v135 = 0;
      uint64_t v62 = 0;
    }
    int v133 = *((unsigned __int8 *)v138 + 552);
    uint64_t v141 = (Espresso::ANECompilerEngine::compiler *)((char *)v138 + 128);
    long long v68 = v150;
    if (v150) {
      atomic_fetch_add_explicit(&v150->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v69 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v141, *(const unsigned __int8 **)(v53 + 16), *(int *)(v53 + 8));
    LODWORD(v130) = v52;
    if (v68) {
      nitro::nitro_function::nitro_function(v68);
    }
    uint64_t v70 = objc_opt_new();
    if (*((unsigned char *)v138 + 121))
    {
      id v71 = *(id *)(v146 + 128);

      uint64_t v70 = v71;
    }
    uint64_t v72 = objc_opt_new();
    int v73 = [NSNumber numberWithInt:shared_owners_low];
    [v72 setObject:v73 forKeyedSubscript:@"ScaleCount"];

    uint64_t v74 = [NSNumber numberWithInt:v69];
    [v72 setObject:v74 forKeyedSubscript:@"ScaleOffset"];

    uint64_t v75 = NSNumber;
    if (v133) {
      uint64_t weights_file_index = 0;
    }
    else {
    int v77 = objc_msgSend(v75, "numberWithUnsignedLong:", weights_file_index, v130);
    }
    [v72 setObject:v77 forKeyedSubscript:@"ScaleIndex"];

    [v72 setObject:@"Float16" forKeyedSubscript:@"ScaleType"];
    unint64_t v78 = [NSNumber numberWithInt:v157];
    [v70 setObject:v78 forKeyedSubscript:@"ScaleShift"];

    if (this[46])
    {
      if (v135) {
        atomic_fetch_add_explicit(&v135->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v79 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v141, *(const unsigned __int8 **)(v62 + 16), *(int *)(v62 + 8));
      if (v135) {
        nitro::nitro_function::nitro_function(v135);
      }
      uint64_t v80 = [NSNumber numberWithInt:LODWORD(this[46]->__shared_owners_)];
      [v72 setObject:v80 forKeyedSubscript:@"BiasCount"];

      long long v81 = [NSNumber numberWithInt:v79];
      [v72 setObject:v81 forKeyedSubscript:@"BiasOffset"];

      long long v82 = NSNumber;
      if (v133) {
        uint64_t v83 = 0;
      }
      else {
      float v84 = [v82 numberWithUnsignedLong:v83];
      }
      [v72 setObject:v84 forKeyedSubscript:@"BiasIndex"];

      [v72 setObject:@"Float16" forKeyedSubscript:@"BiasType"];
      unsigned __int8 v85 = [NSNumber numberWithInt:v131];
      [v70 setObject:v85 forKeyedSubscript:@"BiasShift"];
    }
    [v70 setObject:v72 forKeyedSubscript:@"BiasScaleGroupData"];
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)buf, a3);
    int v86 = v147;
    if (v147 == (std::string *)v146) {
      goto LABEL_122;
    }
    std::string v87 = v147 - 6;
    uint64_t v88 = HIBYTE(v147[-6].__r_.__value_.__r.__words[2]);
    char v89 = v88;
    std::string::size_type size = v147[-6].__r_.__value_.__l.__size_;
    if ((v88 & 0x80u) == 0) {
      std::string::size_type v91 = HIBYTE(v147[-6].__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v91 = v147[-6].__r_.__value_.__l.__size_;
    }
    uint64_t v92 = buf[23];
    if (buf[23] < 0) {
      uint64_t v92 = *(void *)&buf[8];
    }
    if (v91 != v92) {
      goto LABEL_116;
    }
    if (buf[23] >= 0) {
      uint64_t v93 = buf;
    }
    else {
      uint64_t v93 = *(unsigned __int8 **)buf;
    }
    if ((char)v88 < 0)
    {
      std::string::pointer data = (const std::string::value_type *)v87->__r_.__value_.__r.__words[0];
      if (memcmp(v87->__r_.__value_.__l.__data_, v93, v147[-6].__r_.__value_.__l.__size_)) {
        goto LABEL_119;
      }
    }
    else if ((_BYTE)v88)
    {
      long long v94 = v147 - 6;
      while (v94->__r_.__value_.__s.__data_[0] == *v93)
      {
        long long v94 = (std::string *)((char *)v94 + 1);
        ++v93;
        if (!--v88) {
          goto LABEL_115;
        }
      }
      goto LABEL_116;
    }
LABEL_115:
    std::string::append(v86 - 6, "__@pre_scale_bias");
    char v89 = HIBYTE(v86[-6].__r_.__value_.__r.__words[2]);
LABEL_116:
    if ((v89 & 0x80) == 0)
    {
      long long v96 = *(_OWORD *)&v87->__r_.__value_.__l.__data_;
      __str.__r_.__value_.__r.__words[2] = v86[-6].__r_.__value_.__r.__words[2];
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v96;
      goto LABEL_120;
    }
    std::string::pointer data = v86[-6].__r_.__value_.__l.__data_;
    std::string::size_type size = v86[-6].__r_.__value_.__l.__size_;
LABEL_119:
    std::string::__init_copy_ctor_external(&__str, data, size);
LABEL_120:
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v170, &__str, &v177, 1uLL);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
LABEL_122:
    uint64_t v97 = v174;
    uint64_t v174 = @"GOC";

    objc_storeStrong(&v175, v70);
    if (!*((unsigned char *)v138 + 121))
    {
      uint64_t v98 = v147;
      if ((unint64_t)v147 >= v148[0])
      {
        unint64_t v100 = 0x8E38E38E38E38E39 * (((uint64_t)v147 - v146) >> 4);
        if (v100 + 1 > 0x1C71C71C71C71C7) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v101 = 0x1C71C71C71C71C72 * ((v148[0] - v146) >> 4);
        if (v101 <= v100 + 1) {
          unint64_t v101 = v100 + 1;
        }
        if (0x8E38E38E38E38E39 * ((v148[0] - v146) >> 4) >= 0xE38E38E38E38E3) {
          unint64_t v102 = 0x1C71C71C71C71C7;
        }
        else {
          unint64_t v102 = v101;
        }
        *((void *)&v177 + 1) = v148;
        if (v102) {
          unint64_t v102 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v102);
        }
        else {
          uint64_t v103 = 0;
        }
        __str.__r_.__value_.__r.__words[0] = v102;
        __str.__r_.__value_.__l.__size_ = v102 + 144 * v100;
        __str.__r_.__value_.__r.__words[2] = __str.__r_.__value_.__l.__size_;
        *(void *)&long long v177 = v102 + 144 * v103;
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)__str.__r_.__value_.__l.__size_, (uint64_t)buf);
        __str.__r_.__value_.__r.__words[2] += 144;
        std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v146, &__str);
        long long v99 = v147;
        std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&__str);
      }
      else
      {
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v147, (uint64_t)buf);
        long long v99 = v98 + 6;
      }
      int v147 = v99;
    }

    if (v172 < 0) {
      operator delete(v171);
    }
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v170;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v169;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }

    if (v135) {
      nitro::nitro_function::nitro_function(v135);
    }
    if (v150) {
      nitro::nitro_function::nitro_function(v150);
    }
    if (v156) {
      nitro::nitro_function::nitro_function(v156);
    }
    if (v154) {
      nitro::nitro_function::nitro_function(v154);
    }
  }
  if (v45) {
    nitro::nitro_function::nitro_function(v45);
  }

  if (v164 < 0) {
    operator delete(__p);
  }
  *(void *)long long buf = v162;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(void *)long long buf = v161;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (v160 < 0) {
    operator delete(v159[0]);
  }
  if (v145) {
    nitro::nitro_function::nitro_function(v145);
  }
  nitro::nitro_function::nitro_function(v144);
  ((void (*)(char *, Espresso::ANECompilerEngine::compiler *, uint64_t *))this[36][1].__shared_owners_)((char *)this + 288, v138, &v146);
  if (v137) {
    nitro::nitro_function::nitro_function(v137);
  }
  if (v136) {
    nitro::nitro_function::nitro_function(v136);
  }
  v159[0] = &v146;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)v159);
LABEL_161:

  if (v145) {
    nitro::nitro_function::nitro_function(v145);
  }
  if (v143) {
    nitro::nitro_function::nitro_function(v143);
  }
  nitro::nitro_function::nitro_function(v144);
}

void sub_192B28AC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,std::__shared_weak_count *a21,std::__shared_weak_count *a22,std::__shared_weak_count *a23,char a24,uint64_t a25,uint64_t a26,void **a27)
{
  if (a23) {
    nitro::nitro_function::nitro_function(a23);
  }
  nitro::nitro_function::nitro_function(a22);
  if (a15) {
    nitro::nitro_function::nitro_function(a15);
  }
  if (a14) {
    nitro::nitro_function::nitro_function(a14);
  }
  a27 = (void **)&a24;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100](&a27);

  if (a23) {
    nitro::nitro_function::nitro_function(a23);
  }
  if (a21) {
    nitro::nitro_function::nitro_function(a21);
  }
  nitro::nitro_function::nitro_function(a22);
  _Unwind_Resume(a1);
}

uint64_t Espresso::ANECompilerEngine::mix_flatten_kernel::is_valid_for_engine(uint64_t a1, int64x2_t **a2, _OWORD **a3)
{
  uint64_t v6 = a3[6];
  uint64_t v7 = (std::__shared_weak_count *)*((void *)v6 + 10);
  if (v7)
  {
    uint64_t v8 = std::__shared_weak_count::lock(v7);
    if (v8) {
      uint64_t v9 = *((void *)v6 + 9);
    }
    else {
      uint64_t v9 = 0;
    }
  }
  else
  {
    uint64_t v9 = 0;
    uint64_t v8 = 0;
  }
  long long v10 = Espresso::ANECompilerEngine::ane_arch_allow_network_override(v9 + 472);
  if (Espresso::ANECompilerEngine::is_mix((Espresso::ANECompilerEngine *)v10, v11))
  {
    long long v53 = *(_OWORD *)a2;
    uint64_t v12 = (std::__shared_weak_count *)*((void *)&v53 + 1);
    *a2 = 0;
    a2[1] = 0;
    long long v13 = v12;
    uint64_t is_valid_for_engine = Espresso::ANECompilerEngine::flatten_kernel::is_valid_for_engine(a1, (int64x2_t **)&v53, (uint64_t)a3);
    if (v13) {
      nitro::nitro_function::nitro_function(v13);
    }
  }
  else
  {
    unsigned int v15 = a3[6];
    int v16 = (std::__shared_weak_count *)*((void *)v15 + 10);
    if (v16)
    {
      uint64_t v17 = std::__shared_weak_count::lock(v16);
      if (v17) {
        int v18 = (const Espresso::net *)*((void *)v15 + 9);
      }
      else {
        int v18 = 0;
      }
    }
    else
    {
      int v18 = 0;
      uint64_t v17 = 0;
    }
    int v19 = a3[3];
    uint64_t v20 = *((void *)v19 + 4);
    long long v21 = v19[1];
    v47[0] = *v19;
    v47[1] = v21;
    uint64_t v48 = v20;
    uint64_t v49 = 0;
    uint64_t v50 = 0;
    uint64_t v51 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v49, *((const void **)v19 + 5), *((void *)v19 + 6), (uint64_t)(*((void *)v19 + 6) - *((void *)v19 + 5)) >> 2);
    Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v52, v18, (const Espresso::layer_shape *)v47, 1);
    if (v49)
    {
      uint64_t v50 = v49;
      operator delete(v49);
    }
    if (v17) {
      nitro::nitro_function::nitro_function(v17);
    }
    uint64_t v22 = a3[6];
    long long v23 = (std::__shared_weak_count *)*((void *)v22 + 10);
    if (v23)
    {
      char v24 = std::__shared_weak_count::lock(v23);
      if (v24) {
        unsigned int v25 = (const Espresso::net *)*((void *)v22 + 9);
      }
      else {
        unsigned int v25 = 0;
      }
    }
    else
    {
      unsigned int v25 = 0;
      char v24 = 0;
    }
    unsigned int v26 = *a3;
    uint64_t v27 = *((void *)*a3 + 4);
    long long v28 = (*a3)[1];
    v41[0] = **a3;
    v41[1] = v28;
    uint64_t v42 = v27;
    long long __p = 0;
    int v44 = 0;
    uint64_t v45 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *((const void **)v26 + 5), *((void *)v26 + 6), (uint64_t)(*((void *)v26 + 6) - *((void *)v26 + 5)) >> 2);
    Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v46, v25, (const Espresso::layer_shape *)v41, 1);
    if (__p)
    {
      int v44 = __p;
      operator delete(__p);
    }
    if (v24) {
      nitro::nitro_function::nitro_function(v24);
    }
    id v29 = v10;
    if (*(_DWORD *)(a1 + 284))
    {
      char v38 = 0;
      std::string::basic_string[abi:ne180100]<0>(v39, "Only support flatten into innermost dimension");
    }
    else if (v46[7] == -1)
    {
      if (Espresso::ANECompilerEngine::blob_shape_ane_compatible(v46, v29)
        && Espresso::ANECompilerEngine::blob_shape_ane_compatible(v52, v29))
      {
        if (*(_DWORD *)(a1 + 280) >= 3u)
        {
          char v38 = 0;
          std::string::basic_string[abi:ne180100]<0>(v39, "Unsupported flatten mode");
        }
        else
        {
          char v38 = 1;
          std::string::basic_string[abi:ne180100]<0>(v39, "Success");
        }
      }
      else
      {
        char v38 = 0;
        std::string::basic_string[abi:ne180100]<0>(v39, "Output blob dimensions exceed ANE limit.");
      }
    }
    else
    {
      char v38 = 0;
      std::string::basic_string[abi:ne180100]<0>(v39, "Only 4D tensor is supported");
    }

    uint64_t is_valid_for_engine = v38 != 0;
    if (!v38)
    {
      long long v30 = *a2;
      int v31 = a2[1];
      v37[0] = v30;
      v37[1] = v31;
      if (v31) {
        atomic_fetch_add_explicit(&v31->i64[1], 1uLL, memory_order_relaxed);
      }
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v33, (long long *)v39, (uint64_t)a3, 0);
      Espresso::emit_kernel_validation_warning(v37, (Espresso::base_kernel::validate_for_engine_warning_t *)&v33);
      if (v36) {
        nitro::nitro_function::nitro_function(v36);
      }
      long long v54 = (void **)&v35;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v54);
      long long v54 = (void **)&v34;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v54);
      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v33.__r_.__value_.__l.__data_);
      }
      if (v31) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v31);
      }
    }
    if (v40 < 0) {
      operator delete(v39[0]);
    }
  }

  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  return is_valid_for_engine;
}

void sub_192B291C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38)
{
  if (v38) {
    nitro::nitro_function::nitro_function(v38);
  }
  _Unwind_Resume(a1);
}

void sub_192B2928C()
{
  if (!v0) {
    JUMPOUT(0x192B29284);
  }
  JUMPOUT(0x192B2927CLL);
}

void Espresso::ANECompilerEngine::mix_flatten_kernel::~mix_flatten_kernel(Espresso::ANECompilerEngine::mix_flatten_kernel *this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANECompilerEngine::mix_flatten_kernel *)((char *)this + 288));
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t vars8;

  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANECompilerEngine::mix_flatten_kernel *)((char *)this + 288));

  Espresso::base_kernel::~base_kernel(this);
}

__n128 Espresso::ANECompilerEngine::mix_conv3d_kernel::mix_conv3d_kernel(uint64_t a1, uint64_t *a2, long long *a3)
{
  Espresso::kernel_with_uniforms_<Espresso::conv3d_params_t,Espresso::abstract_kernel_with_weights_>::kernel_with_uniforms_(a1, a2);
  *(_OWORD *)(v5 + 408) = 0u;
  char v6 = *(unsigned char *)(*a2 + 123);
  *(_OWORD *)(v5 + 560) = 0u;
  *(_OWORD *)(v5 + 576) = 0u;
  *(_OWORD *)(v5 + 432) = 0u;
  *(_OWORD *)(v5 + 448) = 0u;
  *(_OWORD *)(v5 + 464) = 0u;
  *(unsigned char *)(v5 + 480) = 0;
  *(_OWORD *)(v5 + 488) = 0u;
  *(_OWORD *)(v5 + 504) = 0u;
  *(_OWORD *)(v5 + 520) = 0u;
  *(_OWORD *)(v5 + 536) = 0u;
  *(unsigned char *)(v5 + 552) = 0;
  *(_DWORD *)(v5 + 592) = 1065353216;
  *(_WORD *)(v5 + 600) = 0;
  *(unsigned char *)(v5 + 602) = 0;
  __asm { FMOV            V1.2S, #1.0 }
  *(void *)(v5 + 604) = _D1;
  *(unsigned char *)(v5 + 612) = 0;
  *(_OWORD *)(v5 + 616) = 0u;
  *(unsigned char *)(v5 + 632) = v6;
  *(void *)uint64_t v5 = &unk_1EE341EF0;
  *(void *)(v5 + 424) = &unk_1EE3420D8;
  *(_OWORD *)(v5 + 640) = 0u;
  long long v12 = *a3;
  long long v13 = a3[2];
  *(_OWORD *)(v5 + 320) = a3[1];
  *(_OWORD *)(v5 + 336) = v13;
  *(_OWORD *)(v5 + 304) = v12;
  __n128 result = (__n128)a3[3];
  long long v15 = a3[4];
  long long v16 = a3[5];
  *(_DWORD *)(v5 + 400) = *((_DWORD *)a3 + 24);
  *(_OWORD *)(v5 + 368) = v15;
  *(_OWORD *)(v5 + 384) = v16;
  *(__n128 *)(v5 + 352) = result;
  return result;
}

__n128 Espresso::ANECompilerEngine::mix_reshape_like_kernel::mix_reshape_like_kernel(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_OWORD *)(v5 + 309) = 0u;
  *(_OWORD *)(v5 + 280) = 0u;
  *(_OWORD *)(v5 + 296) = 0u;
  char v6 = *(unsigned char *)(*a2 + 123);
  *(_OWORD *)(v5 + 464) = 0u;
  *(_OWORD *)(v5 + 480) = 0u;
  *(_OWORD *)(v5 + 336) = 0u;
  *(_OWORD *)(v5 + 352) = 0u;
  *(_OWORD *)(v5 + 368) = 0u;
  *(unsigned char *)(v5 + 384) = 0;
  *(_OWORD *)(v5 + 392) = 0u;
  *(_OWORD *)(v5 + 408) = 0u;
  *(_OWORD *)(v5 + 424) = 0u;
  *(_OWORD *)(v5 + 440) = 0u;
  *(unsigned char *)(v5 + 456) = 0;
  *(_DWORD *)(v5 + 496) = 1065353216;
  *(_WORD *)(v5 + 504) = 0;
  *(unsigned char *)(v5 + 506) = 0;
  __asm { FMOV            V1.2S, #1.0 }
  *(void *)(v5 + 508) = _D1;
  *(unsigned char *)(v5 + 516) = 0;
  *(_OWORD *)(v5 + 520) = 0u;
  *(unsigned char *)(v5 + 536) = v6;
  *(void *)uint64_t v5 = &unk_1EE346808;
  *(void *)(v5 + 328) = &unk_1EE346968;
  __n128 result = *(__n128 *)a3;
  long long v13 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(v5 + 309) = *(_OWORD *)(a3 + 29);
  *(__n128 *)(v5 + 280) = result;
  *(_OWORD *)(v5 + 296) = v13;
  return result;
}

double Espresso::ANECompilerEngine::mix_softmax_nd_kernel::mix_softmax_nd_kernel(uint64_t a1, uint64_t *a2, _DWORD *a3)
{
  uint64_t v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_DWORD *)(v5 + 280) = 0;
  char v6 = *(unsigned char *)(*a2 + 123);
  *(_OWORD *)(v5 + 424) = 0u;
  *(_OWORD *)(v5 + 440) = 0u;
  *(_OWORD *)(v5 + 296) = 0u;
  *(_OWORD *)(v5 + 312) = 0u;
  *(_OWORD *)(v5 + 328) = 0u;
  *(unsigned char *)(v5 + 344) = 0;
  *(unsigned char *)(v5 + 416) = 0;
  *(_OWORD *)(v5 + 384) = 0u;
  *(_OWORD *)(v5 + 400) = 0u;
  *(_OWORD *)(v5 + 352) = 0u;
  *(_OWORD *)(v5 + 368) = 0u;
  *(_DWORD *)(v5 + 456) = 1065353216;
  *(_WORD *)(v5 + 464) = 0;
  *(unsigned char *)(v5 + 466) = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *(double *)(v5 + 468) = result;
  *(unsigned char *)(v5 + 476) = 0;
  *(void *)(v5 + 480) = 0;
  *(void *)(v5 + 488) = 0;
  *(unsigned char *)(v5 + 496) = v6;
  *(void *)uint64_t v5 = &unk_1EE344FF0;
  *(void *)(v5 + 288) = &unk_1EE345150;
  *(_DWORD *)(v5 + 280) = *a3;
  return result;
}

uint64_t Espresso::ANECompilerEngine::mix_tile_kernel::mix_tile_kernel(uint64_t a1, uint64_t *a2, uint64_t a3, long long *a4)
{
  uint64_t v7 = a1 + 280;
  uint64_t v8 = Espresso::base_kernel::base_kernel(a1, a2);
  *(void *)&long long v9 = 0x100000001;
  *((void *)&v9 + 1) = 0x100000001;
  *(_OWORD *)uint64_t v7 = v9;
  *(_DWORD *)(v8 + 296) = 1;
  char v10 = *(unsigned char *)(*a2 + 123);
  *(_OWORD *)(v8 + 440) = 0u;
  *(_OWORD *)(v8 + 456) = 0u;
  *(_OWORD *)(v8 + 312) = 0u;
  *(_OWORD *)(v8 + 328) = 0u;
  *(_OWORD *)(v8 + 344) = 0u;
  *(unsigned char *)(v8 + 360) = 0;
  *(_OWORD *)(v8 + 368) = 0u;
  *(_OWORD *)(v8 + 384) = 0u;
  *(_OWORD *)(v8 + 400) = 0u;
  *(_OWORD *)(v8 + 416) = 0u;
  *(unsigned char *)(v8 + 432) = 0;
  *(_DWORD *)(v8 + 472) = 1065353216;
  *(_WORD *)(v8 + 480) = 0;
  *(unsigned char *)(v8 + 482) = 0;
  __asm { FMOV            V8.2S, #1.0 }
  *(void *)(v7 + 204) = _D8;
  *(unsigned char *)(v8 + 492) = 0;
  *(void *)(v8 + 496) = 0;
  *(void *)(v8 + 504) = 0;
  *(unsigned char *)(v8 + 512) = v10;
  *(void *)uint64_t v8 = &unk_1EE340A40;
  *(void *)(v8 + 304) = &unk_1EE340BA0;
  *(void *)(v8 + 520) = 0;
  *(void *)(v8 + 528) = 0;
  long long v16 = *a4;
  *(_DWORD *)(v8 + 296) = *((_DWORD *)a4 + 4);
  *(_OWORD *)uint64_t v7 = v16;
  uint64_t v17 = operator new(0x220uLL);
  v17[1] = 0;
  long long v17[2] = 0;
  void *v17 = &unk_1EE384A98;
  int v18 = (_OWORD *)Espresso::base_kernel::base_kernel((uint64_t)(v17 + 3), a2);
  *(void *)&long long v19 = 0x100000001;
  *((void *)&v19 + 1) = 0x100000001;
  *((_OWORD *)v17 + 19) = v19;
  *((_DWORD *)v17 + 80) = 1;
  char v20 = *(unsigned char *)(*a2 + 123);
  *((_OWORD *)v17 + 29) = 0u;
  *((_OWORD *)v17 + 30) = 0u;
  *((unsigned char *)v17 + 384) = 0;
  *((_OWORD *)v17 + 22) = 0u;
  *((_OWORD *)v17 + 23) = 0u;
  *((_OWORD *)v17 + 21) = 0u;
  *((unsigned char *)v17 + 456) = 0;
  v18[25] = 0u;
  v18[26] = 0u;
  v18[23] = 0u;
  v18[24] = 0u;
  *((_DWORD *)v17 + 124) = 1065353216;
  *((_WORD *)v17 + 252) = 0;
  *((unsigned char *)v17 + 506) = 0;
  *(void *)((char *)v17 + 508) = _D8;
  *((unsigned char *)v17 + 516) = 0;
  v17[65] = 0;
  v17[66] = 0;
  *((unsigned char *)v17 + 536) = v20;
  v17[3] = &unk_1EE33EF20;
  v17[41] = &unk_1EE33F080;
  *((_OWORD *)v17 + 19) = *a4;
  *((_DWORD *)v17 + 80) = *((_DWORD *)a4 + 4);
  *(void *)&long long v19 = v18;
  *((void *)&v19 + 1) = v17;
  long long v21 = *(std::__shared_weak_count **)(a1 + 528);
  *(_OWORD *)(a1 + 520) = v19;
  if (v21) {
    nitro::nitro_function::nitro_function(v21);
  }
  return a1;
}

void sub_192B297B4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v3);
  operator delete(v5);
  char v6 = (std::__shared_weak_count *)*((void *)v1 + 66);
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(v2);
  Espresso::base_kernel::~base_kernel(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANECompilerEngine::tile_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::tile_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE384A98;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::tile_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE384A98;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 Espresso::ANECompilerEngine::mix_instancenorm_1d_kernel::mix_instancenorm_1d_kernel(uint64_t a1, uint64_t *a2, __n128 *a3)
{
  uint64_t v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(void *)(v5 + 280) = 0x358637BD00000000;
  *(void *)(v5 + 288) = 0;
  *(_DWORD *)(v5 + 296) = 0;
  *(_OWORD *)(v5 + 304) = 0u;
  *(_OWORD *)(v5 + 320) = 0u;
  char v6 = *(unsigned char *)(*a2 + 123);
  *(_OWORD *)(v5 + 472) = 0u;
  *(_OWORD *)(v5 + 488) = 0u;
  *(_OWORD *)(v5 + 344) = 0u;
  *(_OWORD *)(v5 + 360) = 0u;
  *(_OWORD *)(v5 + 376) = 0u;
  *(unsigned char *)(v5 + 392) = 0;
  *(_OWORD *)(v5 + 400) = 0u;
  *(_OWORD *)(v5 + 416) = 0u;
  *(_OWORD *)(v5 + 432) = 0u;
  *(_OWORD *)(v5 + 448) = 0u;
  *(unsigned char *)(v5 + 464) = 0;
  *(_DWORD *)(v5 + 504) = 1065353216;
  *(_WORD *)(v5 + 512) = 0;
  *(unsigned char *)(v5 + 514) = 0;
  __asm { FMOV            V1.2S, #1.0 }
  *(void *)(v5 + 516) = _D1;
  *(unsigned char *)(v5 + 524) = 0;
  *(_OWORD *)(v5 + 528) = 0u;
  *(unsigned char *)(v5 + 544) = v6;
  *(void *)uint64_t v5 = &unk_1EE3474D8;
  *(void *)(v5 + 336) = &unk_1EE347638;
  __n128 result = *a3;
  *(_DWORD *)(v5 + 296) = a3[1].n128_u32[0];
  *(__n128 *)(v5 + 280) = result;
  return result;
}

double Espresso::ANECompilerEngine::mix_l2_normalize_kernel::mix_l2_normalize_kernel(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(void *)(v5 + 280) = 0x3358637BDLL;
  *(_DWORD *)(v5 + 288) = 2;
  char v6 = *(unsigned char *)(*a2 + 123);
  *(_OWORD *)(v5 + 432) = 0u;
  *(_OWORD *)(v5 + 448) = 0u;
  *(_OWORD *)(v5 + 304) = 0u;
  *(_OWORD *)(v5 + 320) = 0u;
  *(_OWORD *)(v5 + 336) = 0u;
  *(unsigned char *)(v5 + 352) = 0;
  *(_OWORD *)(v5 + 360) = 0u;
  *(_OWORD *)(v5 + 376) = 0u;
  *(_OWORD *)(v5 + 392) = 0u;
  *(_OWORD *)(v5 + 408) = 0u;
  *(unsigned char *)(v5 + 424) = 0;
  *(_DWORD *)(v5 + 464) = 1065353216;
  *(_WORD *)(v5 + 472) = 0;
  *(unsigned char *)(v5 + 474) = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *(double *)(v5 + 476) = result;
  *(unsigned char *)(v5 + 484) = 0;
  *(void *)(v5 + 488) = 0;
  *(void *)(v5 + 496) = 0;
  *(unsigned char *)(v5 + 504) = v6;
  *(void *)uint64_t v5 = &unk_1EE346608;
  *(void *)(v5 + 296) = &unk_1EE346768;
  uint64_t v12 = *a3;
  *(_DWORD *)(v5 + 288) = *((_DWORD *)a3 + 2);
  *(void *)(v5 + 280) = v12;
  return result;
}

__n128 Espresso::ANECompilerEngine::mix_deconv3d_kernel::mix_deconv3d_kernel(uint64_t a1, uint64_t *a2, long long *a3)
{
  Espresso::kernel_with_uniforms_<Espresso::conv3d_params_t,Espresso::abstract_kernel_with_weights_>::kernel_with_uniforms_(a1, a2);
  *(_OWORD *)(v5 + 408) = 0u;
  char v6 = *(unsigned char *)(*a2 + 123);
  *(_OWORD *)(v5 + 560) = 0u;
  *(_OWORD *)(v5 + 576) = 0u;
  *(_OWORD *)(v5 + 432) = 0u;
  *(_OWORD *)(v5 + 448) = 0u;
  *(_OWORD *)(v5 + 464) = 0u;
  *(unsigned char *)(v5 + 480) = 0;
  *(_OWORD *)(v5 + 488) = 0u;
  *(_OWORD *)(v5 + 504) = 0u;
  *(_OWORD *)(v5 + 520) = 0u;
  *(_OWORD *)(v5 + 536) = 0u;
  *(unsigned char *)(v5 + 552) = 0;
  *(_DWORD *)(v5 + 592) = 1065353216;
  *(_WORD *)(v5 + 600) = 0;
  *(unsigned char *)(v5 + 602) = 0;
  __asm { FMOV            V1.2S, #1.0 }
  *(void *)(v5 + 604) = _D1;
  *(unsigned char *)(v5 + 612) = 0;
  *(_OWORD *)(v5 + 616) = 0u;
  *(unsigned char *)(v5 + 632) = v6;
  *(void *)uint64_t v5 = &unk_1EE3438B8;
  *(void *)(v5 + 424) = &unk_1EE343AA0;
  *(_OWORD *)(v5 + 640) = 0u;
  long long v12 = *a3;
  long long v13 = a3[2];
  *(_OWORD *)(v5 + 320) = a3[1];
  *(_OWORD *)(v5 + 336) = v13;
  *(_OWORD *)(v5 + 304) = v12;
  __n128 result = (__n128)a3[3];
  long long v15 = a3[4];
  long long v16 = a3[5];
  *(_DWORD *)(v5 + 400) = *((_DWORD *)a3 + 24);
  *(_OWORD *)(v5 + 368) = v15;
  *(_OWORD *)(v5 + 384) = v16;
  *(__n128 *)(v5 + 352) = result;
  return result;
}

double Espresso::ANECompilerEngine::mix_batch_matmul_kernel::mix_batch_matmul_kernel(uint64_t a1, uint64_t *a2, __int16 *a3)
{
  uint64_t v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_WORD *)(v5 + 280) = 1;
  *(unsigned char *)(v5 + 282) = 0;
  char v6 = *(unsigned char *)(*a2 + 123);
  *(_OWORD *)(v5 + 424) = 0u;
  *(_OWORD *)(v5 + 440) = 0u;
  *(_OWORD *)(v5 + 296) = 0u;
  *(_OWORD *)(v5 + 312) = 0u;
  *(_OWORD *)(v5 + 328) = 0u;
  *(unsigned char *)(v5 + 344) = 0;
  *(_OWORD *)(v5 + 352) = 0u;
  *(_OWORD *)(v5 + 368) = 0u;
  *(_OWORD *)(v5 + 384) = 0u;
  *(_OWORD *)(v5 + 400) = 0u;
  *(unsigned char *)(v5 + 416) = 0;
  *(_DWORD *)(v5 + 456) = 1065353216;
  *(_WORD *)(v5 + 464) = 0;
  *(unsigned char *)(v5 + 466) = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *(double *)(v5 + 468) = result;
  *(unsigned char *)(v5 + 476) = 0;
  *(void *)(v5 + 480) = 0;
  *(void *)(v5 + 488) = 0;
  *(unsigned char *)(v5 + 496) = v6;
  *(void *)uint64_t v5 = &unk_1EE346408;
  *(void *)(v5 + 288) = &unk_1EE346568;
  __int16 v12 = *a3;
  *(unsigned char *)(v5 + 282) = *((unsigned char *)a3 + 2);
  *(_WORD *)(v5 + 280) = v12;
  return result;
}

double Espresso::ANECompilerEngine::mix_furthest_point_sampling_kernel::mix_furthest_point_sampling_kernel(uint64_t a1, uint64_t *a2, uint64_t a3, int a4)
{
  uint64_t v7 = Espresso::base_kernel::base_kernel(a1, a2);
  *(void *)(v7 + 280) = 2;
  char v8 = *(unsigned char *)(*a2 + 123);
  *(_OWORD *)(v7 + 432) = 0u;
  *(_OWORD *)(v7 + 448) = 0u;
  *(_OWORD *)(v7 + 304) = 0u;
  *(_OWORD *)(v7 + 320) = 0u;
  *(_OWORD *)(v7 + 336) = 0u;
  *(unsigned char *)(v7 + 352) = 0;
  *(_OWORD *)(v7 + 360) = 0u;
  *(_OWORD *)(v7 + 376) = 0u;
  *(_OWORD *)(v7 + 392) = 0u;
  *(_OWORD *)(v7 + 408) = 0u;
  *(unsigned char *)(v7 + 424) = 0;
  *(_DWORD *)(v7 + 464) = 1065353216;
  *(_WORD *)(v7 + 472) = 0;
  *(unsigned char *)(v7 + 474) = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *(double *)(v7 + 476) = result;
  *(unsigned char *)(v7 + 484) = 0;
  *(void *)(v7 + 488) = 0;
  *(void *)(v7 + 496) = 0;
  *(unsigned char *)(v7 + 504) = v8;
  *(void *)uint64_t v7 = &unk_1EE3478D8;
  *(void *)(v7 + 296) = &unk_1EE347A38;
  *(void *)(v7 + 280) = a3;
  *(_DWORD *)(v7 + 288) = a4;
  return result;
}

double Espresso::ANECompilerEngine::mix_stack_nd_kernel::mix_stack_nd_kernel(uint64_t a1, uint64_t *a2, _DWORD *a3)
{
  uint64_t v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_DWORD *)(v5 + 280) = 0;
  char v6 = *(unsigned char *)(*a2 + 123);
  *(_OWORD *)(v5 + 424) = 0u;
  *(_OWORD *)(v5 + 440) = 0u;
  *(_OWORD *)(v5 + 296) = 0u;
  *(_OWORD *)(v5 + 312) = 0u;
  *(_OWORD *)(v5 + 328) = 0u;
  *(unsigned char *)(v5 + 344) = 0;
  *(unsigned char *)(v5 + 416) = 0;
  *(_OWORD *)(v5 + 384) = 0u;
  *(_OWORD *)(v5 + 400) = 0u;
  *(_OWORD *)(v5 + 352) = 0u;
  *(_OWORD *)(v5 + 368) = 0u;
  *(_DWORD *)(v5 + 456) = 1065353216;
  *(_WORD *)(v5 + 464) = 0;
  *(unsigned char *)(v5 + 466) = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *(double *)(v5 + 468) = result;
  *(unsigned char *)(v5 + 476) = 0;
  *(void *)(v5 + 480) = 0;
  *(void *)(v5 + 488) = 0;
  *(unsigned char *)(v5 + 496) = v6;
  *(void *)uint64_t v5 = &unk_1EE343B40;
  *(void *)(v5 + 288) = &unk_1EE343CA0;
  *(_DWORD *)(v5 + 280) = *a3;
  return result;
}

void ___ZN8Espresso17ANECompilerEngine19mix_stack_nd_kernel9decomposeEPNS_3netEPNS_16abstract_contextE_block_invoke(uint64_t a1, int64x2_t *a2)
{
  *(void *)&long long v76 = *MEMORY[0x1E4F143B8];
  if (*(void *)(a2->i64[0] + 8) == *(void *)(a1 + 32))
  {
    long long v65 = 0u;
    long long __p = 0u;
    *(_DWORD *)uint64_t v63 = a2[3].i32[2];
    memset(&v63[8], 0, 32);
    unint64_t v4 = a2[2].u64[1];
    if (v4 >= a2[3].i64[0])
    {
      uint64_t v5 = std::vector<Espresso::net::new_layer_info>::__push_back_slow_path<Espresso::net::new_layer_info const&>(a2 + 2, (uint64_t)v63);
    }
    else
    {
      std::allocator<Espresso::net::new_layer_info>::construct[abi:ne180100]<Espresso::net::new_layer_info,Espresso::net::new_layer_info const&>(v4, (uint64_t)v63);
      uint64_t v5 = v4 + 72;
      a2[2].i64[1] = v4 + 72;
    }
    a2[2].i64[1] = v5;
    *(void *)int v66 = (char *)&__p + 8;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v66);
    *(void *)int v66 = &v63[24];
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v66);
    if (*(void *)&v63[16]) {
      nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&v63[16]);
    }
    uint64_t v6 = *(void *)(a1 + 40);
    *(void *)int v66 = a2[3].i32[2];
    *(void *)uint64_t v63 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v6 + 56, *(unint64_t *)v66, v66)[3];
    uint64_t v7 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v6 + 184), *(void **)v63, (long long **)v63);
    int v47 = *((_DWORD *)v7 + 19);
    if (v47 == -1)
    {
      if (*((_DWORD *)v7 + 18) == 1) {
        int v8 = 4;
      }
      else {
        int v8 = 5;
      }
      int v47 = v8;
    }
    uint64_t v9 = *(void *)(a1 + 40);
    unint64_t v10 = a2[3].i32[2];
    uint64_t v11 = *(void *)(*(void *)(v9 + 32) + 16 * v10);
    if (*(char *)(v11 + 39) < 0)
    {
      std::string::__init_copy_ctor_external(&v60, *(const std::string::value_type **)(v11 + 16), *(void *)(v11 + 24));
      uint64_t v9 = *(void *)(a1 + 40);
      unint64_t v10 = a2[3].i32[2];
    }
    else
    {
      std::string v60 = *(std::string *)(v11 + 16);
    }
    char v57 = 0;
    char v58 = 0;
    unint64_t v59 = 0;
    *(void *)uint64_t v63 = v10;
    __int16 v12 = (long long *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v9 + 96, v10, v63)[3];
    if (*((char *)v12 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v56, *(const std::string::value_type **)v12, *((void *)v12 + 1));
    }
    else
    {
      long long v13 = *v12;
      v56.__r_.__value_.__r.__words[2] = *((void *)v12 + 2);
      *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v13;
    }
    uint64_t v14 = *(void *)(a1 + 40) + 56;
    unint64_t v15 = a2[3].i32[2];
    *(void *)uint64_t v63 = v15;
    long long v16 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v14, v15, v63);
    uint64_t v17 = (long long *)v16[3];
    float v46 = (long long *)v16[4];
    if (v17 != v46)
    {
      unint64_t v18 = 0;
      while (1)
      {
        if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          size_t size = HIBYTE(v56.__r_.__value_.__r.__words[2]);
        }
        else {
          size_t size = v56.__r_.__value_.__l.__size_;
        }
        std::string::basic_string[abi:ne180100]((uint64_t)v63, size + 26);
        if (v63[23] >= 0) {
          char v20 = v63;
        }
        else {
          char v20 = *(unsigned char **)v63;
        }
        if (size)
        {
          if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            long long v21 = &v56;
          }
          else {
            long long v21 = (std::string *)v56.__r_.__value_.__r.__words[0];
          }
          memmove(v20, v21, size);
        }
        strcpy(&v20[size], "__@expand_dims_for_bottom_");
        std::to_string((std::string *)v66, v18);
        if (v66[23] >= 0) {
          uint64_t v22 = v66;
        }
        else {
          uint64_t v22 = *(const std::string::value_type **)v66;
        }
        if (v66[23] >= 0) {
          std::string::size_type v23 = v66[23];
        }
        else {
          std::string::size_type v23 = *(void *)&v66[8];
        }
        char v24 = std::string::append((std::string *)v63, v22, v23);
        long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
        v75.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v75.__r_.__value_.__l.__data_ = v25;
        v24->__r_.__value_.__l.__size_ = 0;
        v24->__r_.__value_.__r.__words[2] = 0;
        v24->__r_.__value_.__r.__words[0] = 0;
        if ((v66[23] & 0x80000000) != 0) {
          operator delete(*(void **)v66);
        }
        if ((v63[23] & 0x80000000) != 0) {
          operator delete(*(void **)v63);
        }
        Espresso::ANECompilerEngine::mix_stack_nd_kernel::decomposition_to_expand_dims_concat(&v53, *(_DWORD *)(a2->i64[0] + 280), a2->i64[0] + 8, v47, *(_DWORD *)(*(void *)(*(void *)(*(void *)(a1 + 40) + 32) + 16 * a2[3].i32[2]) + 12));
        unsigned int v26 = (std::__shared_weak_count *)*((void *)&v53 + 1);
        long long v52 = v53;
        if (*((void *)&v53 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v53 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        std::string::basic_string[abi:ne180100]<0>(v63, "expand_dims");
        if (*((char *)v17 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v73, *(const std::string::value_type **)v17, *((void *)v17 + 1));
        }
        else
        {
          long long v27 = *v17;
          v73.__r_.__value_.__r.__words[2] = *((void *)v17 + 2);
          *(_OWORD *)&v73.__r_.__value_.__l.__data_ = v27;
        }
        memset(v66, 0, 24);
        uint64_t v49 = (std::string *)v66;
        LOBYTE(p_data) = 0;
        *(void *)int v66 = operator new(0x18uLL);
        *(void *)&v66[8] = *(void *)v66;
        *(void *)&v66[16] = *(void *)v66 + 24;
        *(void *)&v66[8] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v66[16], (long long *)&v73, (long long *)&v74, *(std::string **)v66);
        if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v71, v75.__r_.__value_.__l.__data_, v75.__r_.__value_.__l.__size_);
        }
        else {
          std::string v71 = v75;
        }
        uint64_t v49 = 0;
        p_std::string::pointer data = 0;
        uint64_t v51 = 0;
        int v61 = (std::string *)&v49;
        char v62 = 0;
        uint64_t v49 = (std::string *)operator new(0x18uLL);
        p_std::string::pointer data = (void **)&v49->__r_.__value_.__l.__data_;
        uint64_t v51 = (void **)&v49[1].__r_.__value_.__l.__data_;
        p_std::string::pointer data = (void **)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v51, (long long *)&v71, (long long *)&v72, v49);
        Espresso::single_match_state<Espresso::ANECompilerEngine::mix_stack_nd_kernel>::add_kernel(a2, &v52, (const std::string *)v63, &v75, (std::string **)v66, &v49);
        int v61 = (std::string *)&v49;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v61);
        if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v71.__r_.__value_.__l.__data_);
        }
        uint64_t v49 = (std::string *)v66;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v49);
        if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v73.__r_.__value_.__l.__data_);
        }
        if ((v63[23] & 0x80000000) != 0) {
          break;
        }
        if (v26) {
          goto LABEL_55;
        }
LABEL_56:
        long long v28 = v58;
        if ((unint64_t)v58 >= v59)
        {
          long long v30 = std::vector<std::string>::__push_back_slow_path<std::string const&>(&v57, (uint64_t)&v75);
        }
        else
        {
          if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(v58, v75.__r_.__value_.__l.__data_, v75.__r_.__value_.__l.__size_);
          }
          else
          {
            long long v29 = *(_OWORD *)&v75.__r_.__value_.__l.__data_;
            v58->__r_.__value_.__r.__words[2] = v75.__r_.__value_.__r.__words[2];
            *(_OWORD *)&v28->__r_.__value_.__l.__data_ = v29;
          }
          long long v30 = v28 + 1;
        }
        char v58 = v30;
        int v31 = (uint64_t **)(*(void *)(a1 + 40) + 184);
        *(void *)int v66 = v17;
        int v32 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v31, v17, (long long **)v66);
        long long v33 = *(_OWORD *)(v32 + 72);
        *(_OWORD *)uint64_t v63 = *(_OWORD *)(v32 + 56);
        *(_OWORD *)&v63[16] = v33;
        uint64_t v34 = (const void *)*((void *)v32 + 12);
        *(void *)&v63[32] = *((void *)v32 + 11);
        long long __p = 0uLL;
        *(void *)&long long v65 = 0;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v34, *((void *)v32 + 13), (uint64_t)(*((void *)v32 + 13) - (void)v34) >> 2);
        uint64_t v35 = v53;
        *(_OWORD *)int v66 = *(_OWORD *)v63;
        *(_OWORD *)&v66[16] = *(_OWORD *)&v63[16];
        uint64_t v67 = *(void *)&v63[32];
        uint64_t v69 = 0;
        uint64_t v70 = 0;
        long long v68 = 0;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v68, (const void *)__p, *((uint64_t *)&__p + 1), (uint64_t)(*((void *)&__p + 1) - __p) >> 2);
        uint64_t v49 = 0;
        p_std::string::pointer data = 0;
        uint64_t v51 = 0;
        v71.__r_.__value_.__r.__words[0] = (std::string::size_type)&v49;
        v71.__r_.__value_.__s.__data_[8] = 0;
        uint64_t v49 = (std::string *)operator new(0x40uLL);
        p_std::string::pointer data = (void **)&v49->__r_.__value_.__l.__data_;
        uint64_t v51 = (void **)&v49[2].__r_.__value_.__r.__words[2];
        p_std::string::pointer data = (void **)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)&v51, (long long *)v66, (long long *)&v71, (uint64_t)v49);
        (*(void (**)(std::string *__return_ptr, uint64_t, std::string **))(*(void *)v35 + 64))(&v73, v35, &v49);
        std::string::size_type v36 = v73.__r_.__value_.__r.__words[0];
        uint64_t v37 = (uint64_t **)(*(void *)(a1 + 40) + 184);
        int v61 = &v75;
        char v38 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v37, &v75, (long long **)&v61);
        long long v39 = *(_OWORD *)v36;
        long long v40 = *(_OWORD *)(v36 + 16);
        *((void *)v38 + 11) = *(void *)(v36 + 32);
        *(_OWORD *)(v38 + 72) = v40;
        *(_OWORD *)(v38 + 56) = v39;
        if (v38 + 56 != (char *)v36) {
          std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v38 + 96, *(char **)(v36 + 40), *(void *)(v36 + 48), (uint64_t)(*(void *)(v36 + 48) - *(void *)(v36 + 40)) >> 2);
        }
        v71.__r_.__value_.__r.__words[0] = (std::string::size_type)&v73;
        std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v71);
        v71.__r_.__value_.__r.__words[0] = (std::string::size_type)&v49;
        std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v71);
        if (v68)
        {
          uint64_t v69 = v68;
          operator delete(v68);
        }
        uint64_t v41 = *(void *)(a1 + 40);
        if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(void **)(v41 + 360), v17))
        {
          *(void *)int v66 = v17;
          uint64_t v42 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v41 + 352), v17, (uint64_t)&std::piecewise_construct, (long long **)v66);
          char v43 = (uint64_t **)(*(void *)(a1 + 40) + 352);
          *(void *)int v66 = &v75;
          int v44 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v43, &v75, (uint64_t)&std::piecewise_construct, (long long **)v66);
          *(_OWORD *)(v44 + 56) = *(_OWORD *)(v42 + 56);
          if (v44 != v42) {
            std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v44 + 72, *((char **)v42 + 9), *((void *)v42 + 10), (uint64_t)(*((void *)v42 + 10) - *((void *)v42 + 9)) >> 2);
          }
        }
        if ((void)__p)
        {
          *((void *)&__p + 1) = __p;
          operator delete((void *)__p);
        }
        if (v55) {
          nitro::nitro_function::nitro_function(v55);
        }
        if (*((void *)&v53 + 1)) {
          nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v53 + 1));
        }
        if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v75.__r_.__value_.__l.__data_);
        }
        uint64_t v17 = (long long *)((char *)v17 + 24);
        ++v18;
        if (v17 == v46) {
          goto LABEL_80;
        }
      }
      operator delete(*(void **)v63);
      if (!v26) {
        goto LABEL_56;
      }
LABEL_55:
      nitro::nitro_function::nitro_function(v26);
      goto LABEL_56;
    }
LABEL_80:
    Espresso::ANECompilerEngine::mix_stack_nd_kernel::decomposition_to_expand_dims_concat(v63, *(_DWORD *)(a2->i64[0] + 280), a2->i64[0] + 8, v47, *(_DWORD *)(*(void *)(*(void *)(*(void *)(a1 + 40) + 32) + 16 * a2[3].i32[2]) + 12));
    uint64_t v45 = *(std::__shared_weak_count **)&v63[24];
    v48[0] = *(void *)&v63[16];
    v48[1] = *(void *)&v63[24];
    if (*(void *)&v63[24]) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&v63[24] + 8), 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v66, "general_concat");
    if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v75, v56.__r_.__value_.__l.__data_, v56.__r_.__value_.__l.__size_);
    }
    else {
      std::string v75 = v56;
    }
    long long v53 = 0uLL;
    uint64_t v54 = 0;
    v73.__r_.__value_.__r.__words[0] = (std::string::size_type)&v53;
    v73.__r_.__value_.__s.__data_[8] = 0;
    *(void *)&long long v53 = operator new(0x18uLL);
    *((void *)&v53 + 1) = v53;
    uint64_t v54 = v53 + 24;
    *((void *)&v53 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v54, (long long *)&v75, &v76, (std::string *)v53);
    Espresso::single_match_state<Espresso::ANECompilerEngine::mix_stack_nd_kernel>::add_kernel(a2, v48, (const std::string *)v66, &v60, (std::string **)&v57, (std::string **)&v53);
    v73.__r_.__value_.__r.__words[0] = (std::string::size_type)&v53;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v73);
    if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v75.__r_.__value_.__l.__data_);
    }
    if ((v66[23] & 0x80000000) != 0) {
      operator delete(*(void **)v66);
    }
    if (v45) {
      nitro::nitro_function::nitro_function(v45);
    }
    if (*(void *)&v63[24]) {
      nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&v63[24]);
    }
    if (*(void *)&v63[8]) {
      nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&v63[8]);
    }
    if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v56.__r_.__value_.__l.__data_);
    }
    *(void *)uint64_t v63 = &v57;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v63);
    if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v60.__r_.__value_.__l.__data_);
    }
  }
}

void sub_192B2A68C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,char *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54)
{
  if (*(char *)(v55 - 233) < 0) {
    operator delete(*(void **)(v55 - 256));
  }
  if (v54) {
    nitro::nitro_function::nitro_function(v54);
  }
  Espresso::dropout_augment_lowmem::ret_t::~ret_t((Espresso::dropout_augment_lowmem::ret_t *)&a45);
  if (a32 < 0) {
    operator delete(__p);
  }
  a45 = &a33;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a45);
  if (a41 < 0) {
    operator delete(a36);
  }
  _Unwind_Resume(a1);
}

void Espresso::single_match_state<Espresso::ANECompilerEngine::mix_stack_nd_kernel>::add_kernel(int64x2_t *a1, void *a2, const std::string *a3, const std::string *a4, std::string **a5, std::string **a6)
{
  __int32 v23 = 0;
  memset(v26, 0, sizeof(v26));
  __int16 v12 = (char *)operator new(0xF8uLL);
  *((void *)v12 + 1) = 0;
  *((void *)v12 + 2) = 0;
  *(void *)__int16 v12 = &unk_1EE389DF0;
  *((void *)v12 + 3) = &unk_1EE36C758;
  *(_OWORD *)(v12 + 40) = 0u;
  *(_OWORD *)(v12 + 56) = 0u;
  *(_OWORD *)(v12 + 72) = 0u;
  *(_OWORD *)(v12 + 88) = 0u;
  *(_OWORD *)(v12 + 104) = 0u;
  *(_OWORD *)(v12 + 120) = 0u;
  *(_OWORD *)(v12 + 136) = 0u;
  *(_OWORD *)(v12 + 152) = 0u;
  *(_OWORD *)(v12 + 161) = 0u;
  *((_OWORD *)v12 + 13) = 0u;
  *((_OWORD *)v12 + 14) = 0u;
  *((void *)v12 + 30) = 0;
  char v24 = v12 + 24;
  long long v25 = (std::__shared_weak_count *)v12;
  uint64_t v13 = *a2;
  uint64_t v14 = a2[1];
  if (v14)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
    unint64_t v15 = (std::__shared_weak_count *)*((void *)v12 + 12);
    *((void *)v12 + 11) = v13;
    *((void *)v12 + 12) = v14;
    if (v15) {
      nitro::nitro_function::nitro_function(v15);
    }
  }
  else
  {
    *((void *)v12 + 11) = v13;
    *((void *)v12 + 12) = 0;
  }
  std::string::operator=((std::string *)(v24 + 16), a4);
  std::string::operator=((std::string *)(v24 + 40), a3);
  long long v16 = *(uint64_t (****)(void))(*(void *)(*a2 + 8) + 8);
  uint64_t v17 = v24;
  *((_DWORD *)v24 + 2) = (**v16)(v16);
  uint64_t v18 = a1[1].i64[0];
  if (v18)
  {
    *((_DWORD *)v17 + 3) = *(_DWORD *)(v18 + 12);
    if (*(char *)(v18 + 223) < 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v18 + 200), *(void *)(v18 + 208));
    }
    else {
      std::string __p = *(std::string *)(v18 + 200);
    }
    std::string::operator=((std::string *)(v17 + 200), &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    uint64_t v19 = *(void *)(a1[4].i64[0] + 32);
    if (*(void *)(a1[4].i64[0] + 40) != v19) {
      *((_DWORD *)v17 + 3) = *(_DWORD *)(*(void *)v19 + 12);
    }
  }
  if (v26 != (_OWORD *)a5) {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)v26, *a5, a5[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a5[1] - (char *)*a5) >> 3));
  }
  if ((std::string **)((char *)&v26[1] + 8) != a6) {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v26[1] + 8, *a6, a6[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a6[1] - (char *)*a6) >> 3));
  }
  __int32 v23 = a1[3].i32[2];
  unint64_t v20 = a1[2].u64[1];
  if (v20 >= a1[3].i64[0])
  {
    uint64_t v21 = std::vector<Espresso::net::new_layer_info>::__push_back_slow_path<Espresso::net::new_layer_info const&>(a1 + 2, (uint64_t)&v23);
  }
  else
  {
    std::allocator<Espresso::net::new_layer_info>::construct[abi:ne180100]<Espresso::net::new_layer_info,Espresso::net::new_layer_info const&>(a1[2].i64[1], (uint64_t)&v23);
    uint64_t v21 = v20 + 72;
    a1[2].i64[1] = v20 + 72;
  }
  a1[2].i64[1] = v21;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v26[1] + 8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
}

void sub_192B2AB70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

double Espresso::ANECompilerEngine::mix_sequence_repeat_kernel::mix_sequence_repeat_kernel(uint64_t a1, uint64_t *a2, _DWORD *a3)
{
  uint64_t v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_DWORD *)(v5 + 280) = 1;
  *(_DWORD *)(v5 + 280) = *a3;
  char v6 = *(unsigned char *)(*a2 + 123);
  *(_OWORD *)(v5 + 424) = 0u;
  *(_OWORD *)(v5 + 440) = 0u;
  *(_OWORD *)(v5 + 296) = 0u;
  *(_OWORD *)(v5 + 312) = 0u;
  *(_OWORD *)(v5 + 328) = 0u;
  *(unsigned char *)(v5 + 344) = 0;
  *(unsigned char *)(v5 + 416) = 0;
  *(_OWORD *)(v5 + 384) = 0u;
  *(_OWORD *)(v5 + 400) = 0u;
  *(_OWORD *)(v5 + 352) = 0u;
  *(_OWORD *)(v5 + 368) = 0u;
  *(_DWORD *)(v5 + 456) = 1065353216;
  *(_WORD *)(v5 + 464) = 0;
  *(unsigned char *)(v5 + 466) = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *(double *)(v5 + 468) = result;
  *(unsigned char *)(v5 + 476) = 0;
  *(void *)(v5 + 480) = 0;
  *(void *)(v5 + 488) = 0;
  *(unsigned char *)(v5 + 496) = v6;
  *(void *)uint64_t v5 = &unk_1EE3476D8;
  *(void *)(v5 + 288) = &unk_1EE347838;
  *(_DWORD *)(v5 + 280) = *a3;
  return result;
}

void ___ZN8Espresso17ANECompilerEngine26mix_sequence_repeat_kernel9decomposeEPNS_3netEPNS_16abstract_contextE_block_invoke(uint64_t a1, int64x2_t *a2)
{
  *(void *)&long long v74 = *MEMORY[0x1E4F143B8];
  if (*(void *)(a2->i64[0] + 8) == *(void *)(a1 + 32))
  {
    long long v62 = 0u;
    long long __p = 0u;
    *(_DWORD *)std::string v60 = a2[3].i32[2];
    memset(&v60[8], 0, 32);
    unint64_t v4 = a2[2].u64[1];
    if (v4 >= a2[3].i64[0])
    {
      uint64_t v5 = std::vector<Espresso::net::new_layer_info>::__push_back_slow_path<Espresso::net::new_layer_info const&>(a2 + 2, (uint64_t)v60);
    }
    else
    {
      std::allocator<Espresso::net::new_layer_info>::construct[abi:ne180100]<Espresso::net::new_layer_info,Espresso::net::new_layer_info const&>(v4, (uint64_t)v60);
      uint64_t v5 = v4 + 72;
      a2[2].i64[1] = v4 + 72;
    }
    a2[2].i64[1] = v5;
    *(void *)&long long v65 = (char *)&__p + 8;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v65);
    *(void *)&long long v65 = &v60[24];
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v65);
    if (*(void *)&v60[16]) {
      nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&v60[16]);
    }
    uint64_t v6 = *(void *)(a1 + 40);
    unint64_t v7 = a2[3].i32[2];
    int v8 = *(_DWORD *)(*(void *)(*(void *)(v6 + 32) + 16 * v7) + 12);
    *(void *)&long long v65 = v7;
    *(void *)std::string v60 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v6 + 56, v7, &v65)[3];
    uint64_t v9 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v6 + 184), *(void **)v60, (long long **)v60);
    int v10 = *((_DWORD *)v9 + 19);
    if (v10 == -1)
    {
      if (*((_DWORD *)v9 + 18) == 1) {
        int v10 = 4;
      }
      else {
        int v10 = 5;
      }
    }
    Espresso::ANECompilerEngine::mix_sequence_repeat_kernel::decomposition_to_expand_dims_tile((uint64_t)&v54, a2->i64[0], a2->i64[0] + 8, v10, v8);
    uint64_t v11 = *(void *)(a1 + 40) + 56;
    unint64_t v12 = a2[3].i32[2];
    *(void *)std::string v60 = v12;
    uint64_t v13 = (const std::string::value_type **)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v11, v12, v60)[3];
    uint64_t v14 = *(void *)(a1 + 40) + 96;
    unint64_t v15 = a2[3].i32[2];
    *(void *)std::string v60 = v15;
    long long v16 = (long long *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v14, v15, v60)[3];
    if (*((char *)v13 + 23) >= 0) {
      size_t v17 = *((unsigned __int8 *)v13 + 23);
    }
    else {
      size_t v17 = (size_t)v13[1];
    }
    uint64_t v18 = &v53;
    std::string::basic_string[abi:ne180100]((uint64_t)&v53, v17 + 5);
    if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v18 = (std::string *)v53.__r_.__value_.__r.__words[0];
    }
    if (v17)
    {
      if (*((char *)v13 + 23) >= 0) {
        uint64_t v19 = (const std::string::value_type *)v13;
      }
      else {
        uint64_t v19 = *v13;
      }
      memmove(v18, v19, v17);
    }
    strcpy((char *)v18 + v17, "_tile");
    if (v54)
    {
      if (*((char *)v13 + 23) >= 0) {
        size_t v20 = *((unsigned __int8 *)v13 + 23);
      }
      else {
        size_t v20 = (size_t)v13[1];
      }
      uint64_t v21 = &v73;
      std::string::basic_string[abi:ne180100]((uint64_t)&v73, v20 + 12);
      if ((v73.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t v21 = (std::string *)v73.__r_.__value_.__r.__words[0];
      }
      if (v20)
      {
        if (*((char *)v13 + 23) >= 0) {
          uint64_t v22 = v13;
        }
        else {
          uint64_t v22 = *v13;
        }
        memmove(v21, v22, v20);
      }
      strcpy((char *)v21 + v20, "_expand_dims");
      __int32 v23 = (uint64_t **)(*(void *)(a1 + 40) + 184);
      *(void *)&long long v65 = v13;
      char v24 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v23, v13, (long long **)&v65);
      long long v25 = *(_OWORD *)(v24 + 72);
      *(_OWORD *)std::string v60 = *(_OWORD *)(v24 + 56);
      *(_OWORD *)&v60[16] = v25;
      unsigned int v26 = (const void *)*((void *)v24 + 12);
      *(void *)&v60[32] = *((void *)v24 + 11);
      long long __p = 0uLL;
      *(void *)&long long v62 = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v26, *((void *)v24 + 13), (uint64_t)(*((void *)v24 + 13) - (void)v26) >> 2);
      uint64_t v27 = v54;
      long long v65 = *(_OWORD *)v60;
      long long v66 = *(_OWORD *)&v60[16];
      uint64_t v67 = *(void *)&v60[32];
      long long v68 = 0;
      uint64_t v69 = 0;
      uint64_t v70 = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v68, (const void *)__p, *((uint64_t *)&__p + 1), (uint64_t)(*((void *)&__p + 1) - __p) >> 2);
      memset(&v71, 0, sizeof(v71));
      float v46 = &v71;
      LOBYTE(v47) = 0;
      v71.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x40uLL);
      v71.__r_.__value_.__l.__size_ = v71.__r_.__value_.__r.__words[0];
      v71.__r_.__value_.__r.__words[2] = v71.__r_.__value_.__r.__words[0] + 64;
      v71.__r_.__value_.__l.__size_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)&v71.__r_.__value_.__r.__words[2], &v65, (long long *)&v71, (uint64_t)v71.__r_.__value_.__l.__data_);
      (*(void (**)(std::string **__return_ptr, uint64_t, std::string *))(*(void *)v27 + 64))(&v50, v27, &v71);
      p_std::string::pointer data = (void **)&v50->__r_.__value_.__l.__data_;
      long long v29 = (uint64_t **)(*(void *)(a1 + 40) + 184);
      v63.__r_.__value_.__r.__words[0] = (std::string::size_type)&v73;
      long long v30 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v29, &v73, (long long **)&v63);
      long long v31 = *(_OWORD *)p_data;
      long long v32 = *((_OWORD *)p_data + 1);
      *((void *)v30 + 11) = p_data[4];
      *(_OWORD *)(v30 + 72) = v32;
      *(_OWORD *)(v30 + 56) = v31;
      if (v30 + 56 != (char *)p_data) {
        std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v30 + 96, (char *)p_data[5], (uint64_t)p_data[6], ((unsigned char *)p_data[6] - (unsigned char *)p_data[5]) >> 2);
      }
      float v46 = (std::string *)&v50;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v46);
      float v46 = &v71;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v46);
      if (v68)
      {
        uint64_t v69 = v68;
        operator delete(v68);
      }
      uint64_t v33 = *(void *)(a1 + 40);
      if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(void **)(v33 + 360), v13))
      {
        *(void *)&long long v65 = v13;
        uint64_t v34 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v33 + 352), v13, (uint64_t)&std::piecewise_construct, (long long **)&v65);
        uint64_t v35 = (uint64_t **)(*(void *)(a1 + 40) + 352);
        *(void *)&long long v65 = &v73;
        std::string::size_type v36 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v35, &v73, (uint64_t)&std::piecewise_construct, (long long **)&v65);
        *(_OWORD *)(v36 + 56) = *(_OWORD *)(v34 + 56);
        if (v36 != v34) {
          std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v36 + 72, *((char **)v34 + 9), *((void *)v34 + 10), (uint64_t)(*((void *)v34 + 10) - *((void *)v34 + 9)) >> 2);
        }
      }
      uint64_t v37 = v55;
      v49[0] = v54;
      v49[1] = v55;
      if (v55) {
        atomic_fetch_add_explicit(&v55->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(&v65, "expand_dims");
      if (*((char *)v13 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v71, *v13, (std::string::size_type)v13[1]);
      }
      else
      {
        long long v38 = *(_OWORD *)v13;
        v71.__r_.__value_.__r.__words[2] = (std::string::size_type)v13[2];
        *(_OWORD *)&v71.__r_.__value_.__l.__data_ = v38;
      }
      uint64_t v50 = 0;
      uint64_t v51 = 0;
      long long v52 = 0;
      float v46 = (std::string *)&v50;
      LOBYTE(v47) = 0;
      uint64_t v50 = (std::string *)operator new(0x18uLL);
      uint64_t v51 = v50;
      long long v52 = (void **)&v50[1].__r_.__value_.__l.__data_;
      uint64_t v51 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v52, (long long *)&v71, (long long *)&v72, v50);
      if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v63, v73.__r_.__value_.__l.__data_, v73.__r_.__value_.__l.__size_);
      }
      else {
        std::string v63 = v73;
      }
      float v46 = 0;
      int v47 = 0;
      uint64_t v48 = 0;
      char v58 = (void ***)&v46;
      char v59 = 0;
      float v46 = (std::string *)operator new(0x18uLL);
      int v47 = v46;
      uint64_t v48 = (void **)&v46[1].__r_.__value_.__l.__data_;
      int v47 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v48, (long long *)&v63, (long long *)&v64, v46);
      Espresso::single_match_state<Espresso::ANECompilerEngine::mix_sequence_repeat_kernel>::add_kernel(a2, v49, (const std::string *)&v65, &v73, &v50, &v46);
      char v58 = (void ***)&v46;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v58);
      if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v63.__r_.__value_.__l.__data_);
      }
      float v46 = (std::string *)&v50;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v46);
      if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v71.__r_.__value_.__l.__data_);
      }
      if (SBYTE7(v66) < 0) {
        operator delete((void *)v65);
      }
      if (v37) {
        nitro::nitro_function::nitro_function(v37);
      }
      uint64_t v41 = v57;
      v45[0] = v56;
      v45[1] = v57;
      if (v57) {
        atomic_fetch_add_explicit(&v57->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(&v65, "tile");
      if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v71, v73.__r_.__value_.__l.__data_, v73.__r_.__value_.__l.__size_);
      }
      else {
        std::string v71 = v73;
      }
      uint64_t v50 = 0;
      uint64_t v51 = 0;
      long long v52 = 0;
      float v46 = (std::string *)&v50;
      LOBYTE(v47) = 0;
      uint64_t v50 = (std::string *)operator new(0x18uLL);
      uint64_t v51 = v50;
      long long v52 = (void **)&v50[1].__r_.__value_.__l.__data_;
      uint64_t v51 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v52, (long long *)&v71, (long long *)&v72, v50);
      if (*((char *)v16 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v63, *(const std::string::value_type **)v16, *((void *)v16 + 1));
      }
      else
      {
        long long v42 = *v16;
        v63.__r_.__value_.__r.__words[2] = *((void *)v16 + 2);
        *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v42;
      }
      float v46 = 0;
      int v47 = 0;
      uint64_t v48 = 0;
      char v58 = (void ***)&v46;
      char v59 = 0;
      float v46 = (std::string *)operator new(0x18uLL);
      int v47 = v46;
      uint64_t v48 = (void **)&v46[1].__r_.__value_.__l.__data_;
      int v47 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v48, (long long *)&v63, (long long *)&v64, v46);
      Espresso::single_match_state<Espresso::ANECompilerEngine::mix_sequence_repeat_kernel>::add_kernel(a2, v45, (const std::string *)&v65, &v53, &v50, &v46);
      char v58 = (void ***)&v46;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v58);
      if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v63.__r_.__value_.__l.__data_);
      }
      float v46 = (std::string *)&v50;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v46);
      if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v71.__r_.__value_.__l.__data_);
      }
      if (SBYTE7(v66) < 0) {
        operator delete((void *)v65);
      }
      if (v41) {
        nitro::nitro_function::nitro_function(v41);
      }
      if ((void)__p)
      {
        *((void *)&__p + 1) = __p;
        operator delete((void *)__p);
      }
      if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v73.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      long long v39 = v57;
      v44[0] = v56;
      v44[1] = v57;
      if (v57) {
        atomic_fetch_add_explicit(&v57->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(v60, "tile");
      if (*((char *)v13 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v73, *v13, (std::string::size_type)v13[1]);
      }
      else
      {
        long long v40 = *(_OWORD *)v13;
        v73.__r_.__value_.__r.__words[2] = (std::string::size_type)v13[2];
        *(_OWORD *)&v73.__r_.__value_.__l.__data_ = v40;
      }
      long long v65 = 0uLL;
      *(void *)&long long v66 = 0;
      uint64_t v50 = (std::string *)&v65;
      LOBYTE(v51) = 0;
      *(void *)&long long v65 = operator new(0x18uLL);
      *((void *)&v65 + 1) = v65;
      *(void *)&long long v66 = v65 + 24;
      *((void *)&v65 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v66, (long long *)&v73, &v74, (std::string *)v65);
      if (*((char *)v16 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v71, *(const std::string::value_type **)v16, *((void *)v16 + 1));
      }
      else
      {
        long long v43 = *v16;
        v71.__r_.__value_.__r.__words[2] = *((void *)v16 + 2);
        *(_OWORD *)&v71.__r_.__value_.__l.__data_ = v43;
      }
      uint64_t v50 = 0;
      uint64_t v51 = 0;
      long long v52 = 0;
      float v46 = (std::string *)&v50;
      LOBYTE(v47) = 0;
      uint64_t v50 = (std::string *)operator new(0x18uLL);
      uint64_t v51 = v50;
      long long v52 = (void **)&v50[1].__r_.__value_.__l.__data_;
      uint64_t v51 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v52, (long long *)&v71, (long long *)&v72, v50);
      Espresso::single_match_state<Espresso::ANECompilerEngine::mix_sequence_repeat_kernel>::add_kernel(a2, v44, (const std::string *)v60, &v53, (std::string **)&v65, &v50);
      float v46 = (std::string *)&v50;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v46);
      if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v71.__r_.__value_.__l.__data_);
      }
      uint64_t v50 = (std::string *)&v65;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v50);
      if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v73.__r_.__value_.__l.__data_);
      }
      if ((v60[23] & 0x80000000) != 0) {
        operator delete(*(void **)v60);
      }
      if (v39) {
        nitro::nitro_function::nitro_function(v39);
      }
    }
    if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v53.__r_.__value_.__l.__data_);
    }
    if (v57) {
      nitro::nitro_function::nitro_function(v57);
    }
    if (v55) {
      nitro::nitro_function::nitro_function(v55);
    }
  }
}

void sub_192B2B5F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43)
{
  a19 = v44 - 208;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  if (*(char *)(v44 - 89) < 0) {
    operator delete(*(void **)(v44 - 112));
  }
  if (a39 < 0) {
    operator delete(__p);
  }
  if (v43) {
    nitro::nitro_function::nitro_function(v43);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  Espresso::dropout_augment_lowmem::ret_t::~ret_t((Espresso::dropout_augment_lowmem::ret_t *)&a28);
  _Unwind_Resume(a1);
}

void sub_192B2B89C()
{
}

void sub_192B2B8A4()
{
}

void Espresso::single_match_state<Espresso::ANECompilerEngine::mix_sequence_repeat_kernel>::add_kernel(int64x2_t *a1, void *a2, const std::string *a3, const std::string *a4, std::string **a5, std::string **a6)
{
  __int32 v23 = 0;
  memset(v26, 0, sizeof(v26));
  unint64_t v12 = (char *)operator new(0xF8uLL);
  *((void *)v12 + 1) = 0;
  *((void *)v12 + 2) = 0;
  *(void *)unint64_t v12 = &unk_1EE389DF0;
  *((void *)v12 + 3) = &unk_1EE36C758;
  *(_OWORD *)(v12 + 40) = 0u;
  *(_OWORD *)(v12 + 56) = 0u;
  *(_OWORD *)(v12 + 72) = 0u;
  *(_OWORD *)(v12 + 88) = 0u;
  *(_OWORD *)(v12 + 104) = 0u;
  *(_OWORD *)(v12 + 120) = 0u;
  *(_OWORD *)(v12 + 136) = 0u;
  *(_OWORD *)(v12 + 152) = 0u;
  *(_OWORD *)(v12 + 161) = 0u;
  *((_OWORD *)v12 + 13) = 0u;
  *((_OWORD *)v12 + 14) = 0u;
  *((void *)v12 + 30) = 0;
  char v24 = v12 + 24;
  long long v25 = (std::__shared_weak_count *)v12;
  uint64_t v13 = *a2;
  uint64_t v14 = a2[1];
  if (v14)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
    unint64_t v15 = (std::__shared_weak_count *)*((void *)v12 + 12);
    *((void *)v12 + 11) = v13;
    *((void *)v12 + 12) = v14;
    if (v15) {
      nitro::nitro_function::nitro_function(v15);
    }
  }
  else
  {
    *((void *)v12 + 11) = v13;
    *((void *)v12 + 12) = 0;
  }
  std::string::operator=((std::string *)(v24 + 16), a4);
  std::string::operator=((std::string *)(v24 + 40), a3);
  long long v16 = *(uint64_t (****)(void))(*(void *)(*a2 + 8) + 8);
  size_t v17 = v24;
  *((_DWORD *)v24 + 2) = (**v16)(v16);
  uint64_t v18 = a1[1].i64[0];
  if (v18)
  {
    *((_DWORD *)v17 + 3) = *(_DWORD *)(v18 + 12);
    if (*(char *)(v18 + 223) < 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v18 + 200), *(void *)(v18 + 208));
    }
    else {
      std::string __p = *(std::string *)(v18 + 200);
    }
    std::string::operator=((std::string *)(v17 + 200), &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    uint64_t v19 = *(void *)(a1[4].i64[0] + 32);
    if (*(void *)(a1[4].i64[0] + 40) != v19) {
      *((_DWORD *)v17 + 3) = *(_DWORD *)(*(void *)v19 + 12);
    }
  }
  if (v26 != (_OWORD *)a5) {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)v26, *a5, a5[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a5[1] - (char *)*a5) >> 3));
  }
  if ((std::string **)((char *)&v26[1] + 8) != a6) {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v26[1] + 8, *a6, a6[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a6[1] - (char *)*a6) >> 3));
  }
  __int32 v23 = a1[3].i32[2];
  unint64_t v20 = a1[2].u64[1];
  if (v20 >= a1[3].i64[0])
  {
    uint64_t v21 = std::vector<Espresso::net::new_layer_info>::__push_back_slow_path<Espresso::net::new_layer_info const&>(a1 + 2, (uint64_t)&v23);
  }
  else
  {
    std::allocator<Espresso::net::new_layer_info>::construct[abi:ne180100]<Espresso::net::new_layer_info,Espresso::net::new_layer_info const&>(a1[2].i64[1], (uint64_t)&v23);
    uint64_t v21 = v20 + 72;
    a1[2].i64[1] = v20 + 72;
  }
  a1[2].i64[1] = v21;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v26[1] + 8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
}

void sub_192B2BB3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

void sub_192B2BBF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t Espresso::zephyr_passes::fold_constants(Espresso::zephyr_passes *this, Espresso::zephyr::function_t *a2)
{
  v4[4] = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EE37B0F0;
  v4[1] = this;
  v4[3] = v4;
  uint64_t v2 = Espresso::zephyr::function_t::foreach_block((uint64_t)this, (uint64_t)v4);
  std::__function::__value_func<BOOL ()(Espresso::zephyr::ordered_block_t *)>::~__value_func[abi:ne180100](v4);
  return v2;
}

void sub_192B2BC90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<BOOL ()(Espresso::zephyr::ordered_block_t *)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *std::__function::__func<Espresso::zephyr_passes::fold_constants(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::fold_constants(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::ordered_block_t *)>::target_type()
{
}

uint64_t std::__function::__func<Espresso::zephyr_passes::fold_constants(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::fold_constants(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::ordered_block_t *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN8Espresso13zephyr_passes14fold_constantsERNS_6zephyr10function_tEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<Espresso::zephyr_passes::fold_constants(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::fold_constants(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::ordered_block_t *)>::operator()(Espresso *a1, const char *a2)
{
  uint64_t v147 = *MEMORY[0x1E4F143B8];
  int v3 = *(Espresso::zephyr::ordered_block_t **)a2;
  unint64_t v4 = Espresso::espresso_os_log_subsystem(a1, a2);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v51 = *((void *)v3 + 13);
    *(_DWORD *)long long buf = 134218240;
    *(void *)&uint8_t buf[4] = v3;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&buf[14] = v51;
    _os_log_debug_impl(&dword_1920CB000, v4, OS_LOG_TYPE_DEBUG, "zephyr_passes::fold_constants block=%llu n=%zu", buf, 0x16u);
  }

  uint64_t v111 = a1;
  uint64_t v5 = *((void *)a1 + 1);
  uint64_t v6 = *(atomic_ullong **)(v5 + 24);
  *(void *)&buf[8] = 0;
  *(void *)&uint8_t buf[16] = 0;
  long long v136 = v6;
  unint64_t add = atomic_fetch_add(v6, 1uLL);
  uint64_t v137 = v5;
  uint64_t v138 = v139;
  v139[0] = 0;
  v140[0] = 0;
  v140[1] = 0;
  v139[1] = 0;
  v139[2] = v140;
  int v142 = 0;
  uint64_t v143 = 0;
  uint64_t v141 = &v142;
  *(void *)long long buf = &unk_1EE36EE50;
  *(void *)&buf[8] = add;
  v144[0] = v144;
  v144[1] = v144;
  _OWORD v144[2] = 0;
  long long v121 = 0u;
  long long v122 = 0u;
  int v123 = 1065353216;
  int v8 = (void *)*((void *)v3 + 15);
  if (v8 == (void *)((char *)v3 + 112)) {
    goto LABEL_189;
  }
  do
  {
    uint64_t v9 = (Espresso::zephyr::node_t *)v8[2];
    if (v9
      && (uint64_t v10 = *((void *)v9 + 1)) != 0
      && (uint64_t v11 = *(const void **)(v10 + 8)) != 0
              0)))))
    {
      unint64_t v12 = *(std::__shared_weak_count **)(v10 + 16);
      if (v12)
      {
        atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
        nitro::nitro_function::nitro_function(v12);
      }
      int v13 = 0;
    }
    else
    {
      int v13 = 1;
    }
    uint64_t v18 = *((void *)v9 + 15);
    uint64_t v17 = *((void *)v9 + 16);
    if (v18 != v17)
    {
      uint64_t v19 = v142;
      while (1)
      {
        if (!v19) {
          goto LABEL_39;
        }
        unint64_t v20 = *(unint64_t **)(*(void *)v18 + 80);
        uint64_t v21 = v19;
        while (1)
        {
          if (v20) {
            unint64_t v22 = *v20;
          }
          else {
            unint64_t v22 = 0;
          }
          __int32 v23 = (void *)v21[4];
          if (v23)
          {
            __int32 v23 = (void *)*v23;
            if (v22 < (unint64_t)v23) {
              goto LABEL_32;
            }
          }
          unint64_t v24 = v20 ? *v20 : 0;
          if ((unint64_t)v23 >= v24) {
            break;
          }
          ++v21;
LABEL_32:
          uint64_t v21 = (void *)*v21;
          if (!v21) {
            goto LABEL_39;
          }
        }
        uint64_t v25 = std::__tree<Espresso::zephyr::node_t *,Espresso::zephyr::ir_object_set_compare<Espresso::zephyr::node_t *>,std::allocator<Espresso::zephyr::node_t *>>::__count_unique<Espresso::zephyr::node_t *>(*((void *)v3 + 12), v20);
        int v13 = (v25 != 0) & v13;
        if (v25)
        {
          v18 += 8;
          if (v18 != v17) {
            continue;
          }
        }
        break;
      }
    }
    if (v13)
    {
      Espresso::zephyr::ordered_block_t::insert_node((Espresso::zephyr::ordered_block_t *)buf, v9);
      if (Espresso::zephyr::cast_kernel<Espresso::generic_load_constant_kernel>((uint64_t)v9)) {
        std::__hash_table<Espresso::zephyr::node_t *,std::hash<Espresso::zephyr::node_t *>,std::equal_to<Espresso::zephyr::node_t *>,std::allocator<Espresso::zephyr::node_t *>>::__emplace_unique_key_args<Espresso::zephyr::node_t *,Espresso::zephyr::node_t * const&>((uint64_t)&v121, (unint64_t)v9, (uint64_t)v9);
      }
    }
LABEL_39:
    int v8 = (void *)v8[1];
  }
  while (v8 != (void *)((char *)v3 + 112));
  if (!*((void *)&v122 + 1) || *((void *)&v122 + 1) == v143) {
    goto LABEL_189;
  }
  unsigned int v26 = *(atomic_ullong **)(*((void *)v111 + 1) + 24);
  uint64_t v27 = (std::__shared_weak_count *)operator new(0xC0uLL);
  v27->__shared_owners_ = 0;
  v27->__shared_weak_owners_ = 0;
  v27->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38BD38;
  uint64_t v112 = v27;
  long long v28 = (Espresso::zephyr::function_t *)&v27[1];
  Espresso::zephyr::function_t::function_t((uint64_t)&v27[1], v26);
  *(void *)long long v28 = &unk_1EE36EDF0;
  Espresso::zephyr::ordered_block_t::copy_to_standalone_function((Espresso::zephyr::graph_t *)buf, v28);
  {
    if (!v29) {
      __cxa_bad_cast();
    }
    Espresso::zephyr::es_function_t::dump_to_net((Espresso::zephyr::es_function_t *)&v119, v29);
    long long v30 = v119;
    if (Espresso::net::needs_interpreter(v119))
    {
      *(void *)std::string __p = 0;
      *(void *)&__p[8] = 0;
      Espresso::net::setup_script((uint64_t)v30, (uint64_t *)__p, 0);
    }
    *((unsigned char *)v30 + 180) = 0;
    Espresso::shape_network_recursive(v30, (Espresso::net *)((char *)v30 + 184), 0, 0);
  }
  else
  {
    long long v30 = 0;
    int v119 = 0;
    unint64_t v120 = 0;
  }
  (***((void (****)(unsigned char *__return_ptr))v30 + 2))(__p);
  Espresso::net::__forward((uint64_t)v30, __p, 0, 0xFFFFFFFFLL);
  if (*(void *)&__p[8]) {
    nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&__p[8]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  v134[3] = 0;
  Espresso::net::pprint((uint64_t)v30, (uint64_t)__p, (uint64_t)v134);
  std::__function::__value_func<std::string ()(unsigned long const*,std::string const*)>::~__value_func[abi:ne180100](v134);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  long long v31 = (Espresso *)Espresso::zephyr::graph_t::live_inputs((Espresso::zephyr::graph_t *)buf);
  if (*((void *)v31 + 2))
  {
    if (Espresso::zephyr::match_verbose)
    {
      uint64_t v33 = Espresso::espresso_os_log_subsystem(v31, v32);
      if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)std::string __p = 136315394;
        *(void *)&__p[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_classic_compiler.mm";
        *(_WORD *)&__p[12] = 1024;
        *(_DWORD *)&__p[14] = 126;
        _os_log_impl(&dword_1920CB000, v33, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d\n", __p, 0x12u);
      }
    }
    goto LABEL_186;
  }
  uint64_t v34 = (Espresso *)Espresso::zephyr::graph_t::live_outputs((Espresso::zephyr::graph_t *)buf);
  uint64_t v37 = (void *)((char *)v34 + 8);
  std::string::size_type v36 = *(void **)v34;
  if (*(Espresso **)v34 == (Espresso *)((char *)v34 + 8))
  {
LABEL_76:
    long long v52 = Espresso::espresso_os_log_subsystem(v34, v35);
    if (os_log_type_enabled(v52, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v108 = v143;
      uint64_t v109 = *((void *)&v122 + 1);
      uint64_t v110 = Espresso::zephyr::graph_t::live_outputs((Espresso::zephyr::graph_t *)buf)[2];
      *(_DWORD *)std::string __p = 134218496;
      *(void *)&__p[4] = v108;
      *(_WORD *)&__p[12] = 2048;
      *(void *)&__p[14] = v109;
      *(_WORD *)&__p[22] = 2048;
      uint64_t v131 = v110;
      _os_log_debug_impl(&dword_1920CB000, v52, OS_LOG_TYPE_DEBUG, "zephyr_passes::fold_constants: transform constant_subgraph.size=%zu constant_kernels=%zu outputs=%zu", __p, 0x20u);
    }

    std::string v53 = Espresso::zephyr::graph_t::live_outputs((Espresso::zephyr::graph_t *)buf);
    uint64_t v54 = v53 + 1;
    uint64_t v55 = (void *)*v53;
    if ((void *)*v53 == v53 + 1)
    {
LABEL_129:
      *(void *)&__p[8] = 0;
      *(void *)&__p[16] = 0;
      *(void *)std::string __p = &__p[8];
      long long v82 = v141;
      if (v141 != &v142)
      {
        do
        {
          uint64_t v83 = &__p[8];
          if (*(unsigned char **)__p == &__p[8]) {
            goto LABEL_141;
          }
          float v84 = *(void **)&__p[8];
          unsigned __int8 v85 = &__p[8];
          if (*(void *)&__p[8])
          {
            do
            {
              uint64_t v83 = v84;
              float v84 = (void *)v84[1];
            }
            while (v84);
          }
          else
          {
            do
            {
              uint64_t v83 = (void *)*((void *)v85 + 2);
              BOOL v48 = *v83 == (void)v85;
              unsigned __int8 v85 = v83;
            }
            while (v48);
          }
          int v86 = (void *)v83[4];
          if (v86) {
            int v86 = (void *)*v86;
          }
          std::string v87 = (unint64_t *)v82[4];
          unint64_t v88 = v87 ? *v87 : 0;
          if ((unint64_t)v86 < v88)
          {
LABEL_141:
            if (*(void *)&__p[8])
            {
              *(void *)&long long v145 = v83;
              char v89 = (uint64_t **)(v83 + 1);
            }
            else
            {
              *(void *)&long long v145 = &__p[8];
              char v89 = (uint64_t **)&__p[8];
            }
          }
          else
          {
            char v89 = (uint64_t **)std::__tree<Espresso::zephyr::value_t *,Espresso::zephyr::ir_object_set_compare<Espresso::zephyr::value_t *>,std::allocator<Espresso::zephyr::value_t *>>::__find_equal<Espresso::zephyr::value_t *>((uint64_t)__p, &v145, v87);
          }
          if (!*v89)
          {
            id v90 = (uint64_t *)operator new(0x28uLL);
            v90[4] = v82[4];
            uint64_t v91 = v145;
            *id v90 = 0;
            v90[1] = 0;
            id v90[2] = v91;
            *char v89 = v90;
            if (**(void **)__p)
            {
              *(void *)std::string __p = **(void **)__p;
              id v90 = *v89;
            }
            std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)&__p[8], v90);
            ++*(void *)&__p[16];
          }
          uint64_t v92 = (void *)v82[1];
          if (v92)
          {
            do
            {
              uint64_t v93 = v92;
              uint64_t v92 = (void *)*v92;
            }
            while (v92);
          }
          else
          {
            do
            {
              uint64_t v93 = (void *)v82[2];
              BOOL v48 = *v93 == (void)v82;
              long long v82 = v93;
            }
            while (!v48);
          }
          long long v82 = v93;
        }
        while (v93 != &v142);
        long long v94 = *(void **)__p;
        if (*(unsigned char **)__p != &__p[8])
        {
          char v95 = 0;
          while (1)
          {
            long long v96 = (char *)v94[4];
            uint64_t v97 = (Espresso *)Espresso::zephyr::node_t::remove_if_unused((Espresso::zephyr::node_t *)v96);
            char v99 = (char)v97;
            if (v97)
            {
              unint64_t v100 = Espresso::espresso_os_log_subsystem(v97, v98);
              if (os_log_type_enabled(v100, OS_LOG_TYPE_DEBUG))
              {
                long long v104 = v96 + 144;
                if (v96[167] < 0) {
                  long long v104 = (void *)*v104;
                }
                LODWORD(v145) = 136315138;
                *(void *)((char *)&v145 + 4) = v104;
                _os_log_debug_impl(&dword_1920CB000, v100, OS_LOG_TYPE_DEBUG, "zephyr_passes::fold_constants: remove: %s", (uint8_t *)&v145, 0xCu);
              }
            }
            unint64_t v101 = (void *)v94[1];
            if (v101)
            {
              do
              {
                unint64_t v102 = v101;
                unint64_t v101 = (void *)*v101;
              }
              while (v101);
            }
            else
            {
              do
              {
                unint64_t v102 = (unsigned char *)v94[2];
                BOOL v48 = *(void *)v102 == (void)v94;
                long long v94 = v102;
              }
              while (!v48);
            }
            v95 |= v99;
            long long v94 = v102;
            if (v102 == &__p[8])
            {
              long long v94 = *(void **)__p;
              char v103 = v95 & (*(void *)__p != (void)&__p[8]);
              char v95 = 0;
              if ((v103 & 1) == 0) {
                break;
              }
            }
          }
        }
      }
      std::__tree<int>::destroy(*(void **)&__p[8]);
      goto LABEL_186;
    }
    while (1)
    {
      uint64_t v56 = v55[4];
      unint64_t v57 = *(void *)(v56 + 80);
      if (!std::__tree<Espresso::zephyr::node_t *,Espresso::zephyr::ir_object_set_compare<Espresso::zephyr::node_t *>,std::allocator<Espresso::zephyr::node_t *>>::__count_unique<Espresso::zephyr::node_t *>(*((void *)v3 + 12), (unint64_t *)v57))
      {
        if (Espresso::zephyr::match_verbose)
        {
          float v106 = Espresso::espresso_os_log_subsystem(0, v58);
          if (os_log_type_enabled(v106, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)std::string __p = 136315394;
            *(void *)&__p[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_c"
                                 "lassic_compiler.mm";
            *(_WORD *)&__p[12] = 1024;
            *(_DWORD *)&__p[14] = 154;
            _os_log_impl(&dword_1920CB000, v106, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d\n", __p, 0x12u);
          }
        }
        goto LABEL_186;
      }
      if (!std::__hash_table<Espresso::zephyr::node_t *,std::hash<Espresso::zephyr::node_t *>,std::equal_to<Espresso::zephyr::node_t *>,std::allocator<Espresso::zephyr::node_t *>>::find<Espresso::zephyr::node_t *>(&v121, v57))break; {
LABEL_119:
      }
      uint64_t v79 = (void *)v55[1];
      if (v79)
      {
        do
        {
          uint64_t v80 = v79;
          uint64_t v79 = (void *)*v79;
        }
        while (v79);
      }
      else
      {
        do
        {
          uint64_t v80 = (void *)v55[2];
          BOOL v48 = *v80 == (void)v55;
          uint64_t v55 = v80;
        }
        while (!v48);
      }
      uint64_t v55 = v80;
      if (v80 == v54) {
        goto LABEL_129;
      }
    }
    std::string v60 = Espresso::espresso_os_log_subsystem(0, v59);
    if (os_log_type_enabled(v60, OS_LOG_TYPE_DEBUG))
    {
      long long v81 = (void *)(v56 + 32);
      if (*(char *)(v56 + 55) < 0) {
        long long v81 = (void *)*v81;
      }
      *(_DWORD *)std::string __p = 136315138;
      *(void *)&__p[4] = v81;
      _os_log_debug_impl(&dword_1920CB000, v60, OS_LOG_TYPE_DEBUG, "zephyr_passes::fold_constants: constant: %s", __p, 0xCu);
    }

    uint64_t v61 = *((void *)v3 + 4);
    std::operator+<char>();
    long long v62 = Espresso::zephyr::function_t::new_detached_node(v61, (uint64_t)__p);
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    uint64_t v64 = *(void **)(v57 + 96);
    std::string v63 = *(char **)(v57 + 104);
    uint64_t v65 = *v64;
    int64_t v66 = v63 - (char *)(v64 + 1);
    if (v63 != (char *)(v64 + 1)) {
      memmove(*(void **)(v57 + 96), v64 + 1, v63 - (char *)(v64 + 1));
    }
    *(void *)(v57 + 104) = (char *)v64 + v66;
    if (*(void *)(v65 + 80) == v57) {
      *(void *)(v65 + 80) = 0;
    }
    Espresso::zephyr::node_t::add_output((Espresso::zephyr::node_t *)v62, (Espresso::zephyr::value_t *)v56);
    *(void *)std::string __p = v56 + 32;
    uint64_t v67 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v119 + 136, (unsigned __int8 *)(v56 + 32), (long long **)__p);
    Espresso::abstract_blob_container::shape(__p, *((void *)v67 + 5));
    long long v116 = *(_OWORD *)__p;
    int v68 = *(_DWORD *)&__p[20];
    if (*(_DWORD *)&__p[16] == 1) {
      int v69 = 4;
    }
    else {
      int v69 = 5;
    }
    if (*(_DWORD *)&__p[20] == -1) {
      int v68 = v69;
    }
    int v117 = *(_DWORD *)&__p[16];
    int v118 = v68;
    uint64_t v70 = *(void *)(*(void *)(v57 + 8) + 8);
    Espresso::abstract_engine_factory::shared(&v126);
    uint64_t v71 = v126;
    std::string::basic_string[abi:ne180100]<0>(&v145, "load_constant");
    int v72 = (***(uint64_t (****)(void))(*(void *)(v70 + 8) + 8))(*(void *)(*(void *)(v70 + 8) + 8));
    int v124 = 0;
    int v125 = v72;
    Espresso::abstract_engine_factory::make_kernel_priv(v71, v70 + 8, (uint64_t)&v145, (uint64_t)&v116, &v125);
    if (v146 < 0) {
      operator delete((void *)v145);
    }
    if (v127) {
      nitro::nitro_function::nitro_function(v127);
    }
    if (lpsrc)
    {
      if (v73)
      {
        long long v74 = v129;
        if (!v129)
        {
LABEL_105:
          uint64_t v75 = *((void *)v67 + 5);
          long long v76 = (std::__shared_weak_count *)*((void *)v67 + 6);
          v113[0] = v75;
          v113[1] = v76;
          if (v76) {
            atomic_fetch_add_explicit(&v76->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          Espresso::sync_copy_to_host(&v114, v113);
          Espresso::generic_load_constant_kernel::set_constant_blob(v73, (uint64_t)&v114);
          if (v115) {
            nitro::nitro_function::nitro_function(v115);
          }
          if (v76) {
            nitro::nitro_function::nitro_function(v76);
          }
          uint64_t v77 = *((void *)v62 + 1);
          if (v74) {
            atomic_fetch_add_explicit(&v74->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          unint64_t v78 = *(std::__shared_weak_count **)(v77 + 16);
          *(void *)(v77 + 8) = v73;
          *(void *)(v77 + 16) = v74;
          if (v78) {
            nitro::nitro_function::nitro_function(v78);
          }
          Espresso::zephyr::ordered_block_t::insert_node_after(v3, (Espresso::zephyr::node_t *)v62, (Espresso::zephyr::node_t *)v57);
          if (v74) {
            nitro::nitro_function::nitro_function(v74);
          }
          if (v132)
          {
            int v133 = v132;
            operator delete(v132);
          }
          goto LABEL_119;
        }
        atomic_fetch_add_explicit(&v129->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_103:
        if (v129) {
          nitro::nitro_function::nitro_function(v129);
        }
        goto LABEL_105;
      }
    }
    else
    {
      std::string v73 = 0;
    }
    long long v74 = 0;
    goto LABEL_103;
  }
  uint64_t v38 = (uint64_t)v30 + 136;
  while (1)
  {
    uint64_t v39 = v36[4];
    Espresso::zephyr::need_shape((Espresso::zephyr *)&v145, (Espresso::zephyr::value_t *)v39);
    long long v42 = (Espresso::layer_shape *)v145;
    if (!(void)v145) {
      break;
    }
    if (!std::__hash_table<Espresso::zephyr::node_t *,std::hash<Espresso::zephyr::node_t *>,std::equal_to<Espresso::zephyr::node_t *>,std::allocator<Espresso::zephyr::node_t *>>::find<Espresso::zephyr::node_t *>(&v121, *(void *)(v39 + 80)))
    {
      uint64_t v44 = Espresso::espresso_os_log_subsystem(0, v43);
      if (os_log_type_enabled(v44, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v49 = (void *)(v39 + 32);
        if (*(char *)(v39 + 55) < 0) {
          uint64_t v49 = (void *)*v49;
        }
        uint64_t v50 = Espresso::layer_shape::total_dim(v42);
        *(_DWORD *)std::string __p = 136315394;
        *(void *)&__p[4] = v49;
        *(_WORD *)&__p[12] = 2048;
        *(void *)&__p[14] = v50;
        _os_log_debug_impl(&dword_1920CB000, v44, OS_LOG_TYPE_DEBUG, "zephyr_passes::fold_constants: constant: %s tot_dim=%lld", __p, 0x16u);
      }
    }
    *(void *)std::string __p = v39 + 32;
    uint64_t v45 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v38, (unsigned __int8 *)(v39 + 32), (long long **)__p);
    if (!*((void *)v45 + 5))
    {
      if (!Espresso::zephyr::match_verbose) {
        goto LABEL_180;
      }
      uint64_t v105 = Espresso::espresso_os_log_subsystem((Espresso *)v45, v35);
      if (os_log_type_enabled(v105, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)std::string __p = 136315394;
        *(void *)&__p[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_classic_compiler.mm";
        *(_WORD *)&__p[12] = 1024;
        *(_DWORD *)&__p[14] = 139;
        goto LABEL_178;
      }
      goto LABEL_179;
    }
    uint64_t v34 = (Espresso *)*((void *)&v145 + 1);
    if (*((void *)&v145 + 1)) {
      nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v145 + 1));
    }
    float v46 = (void *)v36[1];
    if (v46)
    {
      do
      {
        int v47 = v46;
        float v46 = (void *)*v46;
      }
      while (v46);
    }
    else
    {
      do
      {
        int v47 = (void *)v36[2];
        BOOL v48 = *v47 == (void)v36;
        std::string::size_type v36 = v47;
      }
      while (!v48);
    }
    std::string::size_type v36 = v47;
    if (v47 == v37) {
      goto LABEL_76;
    }
  }
  if (!Espresso::zephyr::match_verbose) {
    goto LABEL_180;
  }
  uint64_t v105 = Espresso::espresso_os_log_subsystem(v40, v41);
  if (os_log_type_enabled(v105, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string __p = 136315394;
    *(void *)&__p[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_classic_compiler.mm";
    *(_WORD *)&__p[12] = 1024;
    *(_DWORD *)&__p[14] = 132;
LABEL_178:
    _os_log_impl(&dword_1920CB000, v105, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d\n", __p, 0x12u);
  }
LABEL_179:

LABEL_180:
  if (*((void *)&v145 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v145 + 1));
  }
LABEL_186:
  if (v120) {
    nitro::nitro_function::nitro_function(v120);
  }
  nitro::nitro_function::nitro_function(v112);
LABEL_189:
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&v121);
  *(void *)long long buf = &unk_1EE36EE50;
  std::__list_imp<int>::clear(v144);
  Espresso::zephyr::graph_t::~graph_t((Espresso::zephyr::graph_t *)buf);
  return 0;
}

void sub_192B2CBD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,std::__shared_weak_count *a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52)
{
  if (a26) {
    nitro::nitro_function::nitro_function(a26);
  }
  nitro::nitro_function::nitro_function(a14);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&a27);
  a52 = a15;
  std::__list_imp<int>::clear(a16);
  Espresso::zephyr::graph_t::~graph_t((Espresso::zephyr::graph_t *)&a52);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::zephyr::es_function_t>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::zephyr::es_function_t>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38BD38;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::zephyr::es_function_t>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38BD38;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__function::__func<Espresso::zephyr_passes::fold_constants(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::fold_constants(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::ordered_block_t *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE37B0F0;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<Espresso::zephyr_passes::fold_constants(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::fold_constants(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::ordered_block_t *)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = &unk_1EE37B0F0;
  result[1] = v3;
  return result;
}

void std::__function::__func<Espresso::zephyr_passes::fold_constants(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::fold_constants(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::ordered_block_t *)>::~__func()
{
}

uint64_t Espresso::MPSGraphEngine::Kernels::upsample_kernel::is_valid_for_engine(uint64_t a1, int64x2_t **a2, void *a3)
{
  if (*(_DWORD *)(a1 + 292) == 1 && *(_DWORD *)(a1 + 300))
  {
    unint64_t v4 = a2[1];
    v13[0] = *a2;
    v13[1] = v4;
    if (v4) {
      atomic_fetch_add_explicit(&v4->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v7, "[Dispatch::MPSGraph::upsample_kernel] unsupported: is_legacy_mode");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)v7, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v13, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
  }
  else
  {
    if (a3[1] - *a3 == 64) {
      return 1;
    }
    unint64_t v4 = a2[1];
    v6[0] = *a2;
    v6[1] = v4;
    if (v4) {
      atomic_fetch_add_explicit(&v4->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v7, "[Dispatch::MPSGraph::upsample_kernel] unsupported: expected one input.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)v7, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v6, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
  uint64_t v14 = (void **)&v11;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v14);
  uint64_t v14 = (void **)&v10;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v14);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  if (v4) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v4);
  }
  return 0;
}

void sub_192B2CFD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((Espresso::base_kernel::validate_for_engine_warning_t *)&a17);
  if (a16 < 0) {
    operator delete(__p);
  }
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
  _Unwind_Resume(a1);
}

void Espresso::MPSGraphEngine::Kernels::upsample_kernel::~upsample_kernel(Espresso::MPSGraphEngine::Kernels::upsample_kernel *this)
{
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

void sub_192B2D228(_Unwind_Exception *a1)
{
  nitro::nitro_function::nitro_function(v1);
  _Unwind_Resume(a1);
}

void Espresso::pass_debug_mode::run_on_network(Espresso::net *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v5 = getenv("ESPRESSO_PASS_DEBUG_MODE_LAYERS");
  if (v5) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = "";
  }
  std::string::basic_string[abi:ne180100]<0>(v28, v6);
  unsigned int v26 = 0;
  uint64_t v27 = 0;
  uint64_t v25 = &v26;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v22, (uint64_t)v28, 24);
  v20[0] = 0;
  v20[1] = 0;
  uint64_t v21 = 0;
  while (1)
  {
    unint64_t v7 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v22, (uint64_t)v20, 0x2Cu);
    if ((*((unsigned char *)v7 + *(void *)(*v7 - 24) + 32) & 5) != 0) {
      break;
    }
    if (v21 >= 0) {
      char v8 = v20;
    }
    else {
      char v8 = (void **)v20[0];
    }
    int v9 = atoi((const char *)v8);
    std::__tree<int>::__emplace_unique_key_args<int,int const&>((uint64_t *)&v25, v9, v9);
  }
  uint64_t v11 = *((void *)a1 + 4);
  uint64_t v10 = *((void *)a1 + 5);
  if (v10 != v11)
  {
    unint64_t v12 = 0;
    uint64_t v13 = v27;
    do
    {
      if (v13)
      {
        for (uint64_t i = v26; i; uint64_t i = (void *)*i)
        {
          int v15 = *((_DWORD *)i + 7);
          if (v15 <= (int)v12)
          {
            if (v15 >= (int)v12) {
              goto LABEL_19;
            }
            ++i;
          }
        }
      }
      else
      {
LABEL_19:
        uint64_t v16 = *(void *)(*(void *)(v11 + 16 * v12) + 64);
        std::string::basic_string[abi:ne180100]<0>(__p, "is_output");
        long long v30 = __p;
        *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v16 + 240, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (long long **)&v30)+ 10) = 1;
        if (v19 < 0) {
          operator delete(__p[0]);
        }
        uint64_t v11 = *((void *)a1 + 4);
        uint64_t v10 = *((void *)a1 + 5);
      }
      ++v12;
    }
    while (v12 < (v10 - v11) >> 4);
  }
  *((unsigned char *)a1 + 180) = 0;
  Espresso::shape_network_recursive(a1, (Espresso::net *)((char *)a1 + 184), 0, 0);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(unsigned char *)a2 = 1;
  if (SHIBYTE(v21) < 0) {
    operator delete(v20[0]);
  }
  v22[0] = *MEMORY[0x1E4FBA408];
  uint64_t v17 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v22 + *(void *)(v22[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  void v22[2] = v17;
  v22[3] = MEMORY[0x1E4FBA470] + 16;
  if (v23 < 0) {
    operator delete((void *)v22[11]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x192FF15B0](&v24);
  std::__tree<int>::destroy(v26);
  if (v29 < 0) {
    operator delete(v28[0]);
  }
}

void sub_192B2D564(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a22);
  std::__tree<int>::destroy(*(void **)(v22 - 136));
  if (*(char *)(v22 - 97) < 0) {
    operator delete(*(void **)(v22 - 120));
  }
  _Unwind_Resume(a1);
}

void Espresso::pass_debug_mode::get_analysis_usage(uint64_t a1, unsigned char *a2)
{
  *a2 = 0;
}

void Espresso::pass_debug_mode::~pass_debug_mode(Espresso::pass_debug_mode *this)
{
  *(void *)this = &unk_1EE3719B0;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v1;

  *(void *)this = &unk_1EE3719B0;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
}

uint64_t std::__shared_ptr_emplace<Espresso::pass_debug_mode>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::pass_debug_mode>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE383100;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::pass_debug_mode>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE383100;
  std::__shared_weak_count::~__shared_weak_count(this);
}

BOOL Espresso::MPSGraphEngine::Kernels::pool3d_kernel::is_valid_for_engine(uint64_t a1, int64x2_t **a2, uint64_t a3)
{
  unint64_t v4 = *(const Espresso::layer_shape **)a3;
  if (*(void *)(a3 + 8) - *(void *)a3 != 64 || *(void *)(a3 + 32) - *(void *)(a3 + 24) != 64)
  {
    uint64_t v6 = a2[1];
    v19[0] = *a2;
    v19[1] = v6;
    if (v6) {
      atomic_fetch_add_explicit(&v6->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v13, "[Dispatch::MPSGraph::pool3d_kernel] unsupported: expected exactly 1 input and 1 output.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)v13, a3, 0);
    Espresso::emit_kernel_validation_warning(v19, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    goto LABEL_14;
  }
  int v5 = *(_DWORD *)(a1 + 312);
  if ((v5 | 2) != 2)
  {
    uint64_t v6 = a2[1];
    v12[0] = *a2;
    v12[1] = v6;
    if (v6) {
      atomic_fetch_add_explicit(&v6->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v13, "[Dispatch::MPSGraph::pool3d_kernel] unsupported: unexpected top_shape_style.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)v13, a3, 0);
    Espresso::emit_kernel_validation_warning(v12, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    goto LABEL_14;
  }
  if (*(_WORD *)(a1 + 318))
  {
    uint64_t v6 = a2[1];
    v11[0] = *a2;
    v11[1] = v6;
    if (v6) {
      atomic_fetch_add_explicit(&v6->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v13, "[Dispatch::MPSGraph::pool3d_kernel] unsupported: pad.fill_mode must be constant.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)v13, a3, 0);
    Espresso::emit_kernel_validation_warning(v11, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
LABEL_14:
    if (v18) {
      nitro::nitro_function::nitro_function(v18);
    }
    unint64_t v20 = (void **)&v17;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v20);
    unint64_t v20 = (void **)&v16;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v20);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    goto LABEL_18;
  }
  if (!*(_DWORD *)(a1 + 336)) {
    goto LABEL_47;
  }
  if (*(_DWORD *)(a1 + 280) >= 2u)
  {
    uint64_t v6 = a2[1];
    v10[0] = *a2;
    v10[1] = v6;
    if (v6) {
      atomic_fetch_add_explicit(&v6->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v13, "[Dispatch::MPSGraph::pool3d_kernel] unsupported: global pooling must be average or max.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)v13, a3, 0);
    Espresso::emit_kernel_validation_warning(v10, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    goto LABEL_14;
  }
  if (v5 != 2)
  {
    if (*(_WORD *)(a1 + 316) != 2
      && (*(_WORD *)(a1 + 316)
       || *(_WORD *)(a1 + 328)
       || *(_WORD *)(a1 + 330)
       || *(_WORD *)(a1 + 324)
       || *(_WORD *)(a1 + 326)
       || *(_WORD *)(a1 + 332)
       || *(_WORD *)(a1 + 334)))
    {
      uint64_t v6 = a2[1];
      v8[0] = *a2;
      v8[1] = v6;
      if (v6) {
        atomic_fetch_add_explicit(&v6->i64[1], 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(v13, "[Dispatch::MPSGraph::pool3d_kernel] unsupported: incompatible paddings for global pooling.");
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)v13, a3, 0);
      Espresso::emit_kernel_validation_warning(v8, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
      goto LABEL_46;
    }
LABEL_47:
    Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&__p, *(const Espresso::layer_shape **)a3, 0);
    return HIDWORD(__p.__r_.__value_.__r.__words[2]) == 5;
  }
  if (*(_DWORD *)(a1 + 284) == *(_DWORD *)v4 && *(_DWORD *)(a1 + 288) == *((_DWORD *)v4 + 1)) {
    goto LABEL_47;
  }
  uint64_t v6 = a2[1];
  v9[0] = *a2;
  v9[1] = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->i64[1], 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(v13, "[Dispatch::MPSGraph::pool3d_kernel] unsupported: incompatible size_x / size_y with input shape for CAFFE_LEGACY global pooling.");
  Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)v13, a3, 0);
  Espresso::emit_kernel_validation_warning(v9, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
LABEL_46:
  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
LABEL_18:
  if (v14 < 0) {
    operator delete(v13[0]);
  }
  if (v6) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v6);
  }
  return 0;
}

void sub_192B2DA68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25)
{
  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((Espresso::base_kernel::validate_for_engine_warning_t *)&a25);
  if (a24 < 0) {
    operator delete(__p);
  }
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
  _Unwind_Resume(a1);
}

void Espresso::MPSGraphEngine::Kernels::pool3d_kernel::~pool3d_kernel(Espresso::MPSGraphEngine::Kernels::pool3d_kernel *this)
{
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

double Espresso::ANECompilerEngine::precompilation_settings_t::precompilation_settings_t(Espresso::ANECompilerEngine::precompilation_settings_t *this)
{
  uint64_t v1 = std::string::basic_string[abi:ne180100]<0>(this, "");
  v1[3] = 850045863;
  double result = 0.0;
  *((_OWORD *)v1 + 2) = 0u;
  *((_OWORD *)v1 + 3) = 0u;
  *((_OWORD *)v1 + 4) = 0u;
  v1[10] = 0;
  return result;
}

{
  void *v1;
  double result;

  uint64_t v1 = std::string::basic_string[abi:ne180100]<0>(this, "");
  v1[3] = 850045863;
  double result = 0.0;
  *((_OWORD *)v1 + 2) = 0u;
  *((_OWORD *)v1 + 3) = 0u;
  *((_OWORD *)v1 + 4) = 0u;
  v1[10] = 0;
  return result;
}

uint64_t Espresso::ANECompilerEngine::precompilation_settings_t::shared(Espresso::ANECompilerEngine::precompilation_settings_t *this)
{
  if (Espresso::ANECompilerEngine::precompilation_settings_t::shared(void)::onceToken != -1) {
    dispatch_once(&Espresso::ANECompilerEngine::precompilation_settings_t::shared(void)::onceToken, &__block_literal_global_22303);
  }
  return Espresso::ANECompilerEngine::precompilation_settings_t::global;
}

void Espresso::ANECompilerEngine::precompilation_settings_t::set_ane_arch(uint64_t a1, const std::string *a2)
{
  unint64_t v4 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  std::string::operator=((std::string *)a1, a2);

  std::mutex::unlock(v4);
}

void sub_192B2DC38(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::zin_compiler_helper::temporary_plist_folder(const void **a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  int v5 = *((char *)a1 + 23);
  if (v5 >= 0) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *a1;
  }
  if (v5 >= 0) {
    LODWORD(v7) = *((unsigned __int8 *)a1 + 23);
  }
  else {
    unint64_t v7 = a1[1];
  }
  Espresso::sha_hash(&__p, v6, (CC_LONG)v7, 1);
  char v8 = (void *)(a2 + 56);
  if ((*(char *)(a2 + 79) & 0x80000000) == 0)
  {
    if (!*(unsigned char *)(a2 + 79)) {
      goto LABEL_13;
    }
LABEL_12:
    int v9 = [NSString stringWithUTF8String:v8];
    goto LABEL_14;
  }
  if (*(void *)(a2 + 64))
  {
    char v8 = (void *)*v8;
    goto LABEL_12;
  }
LABEL_13:
  int v9 = NSTemporaryDirectory();
LABEL_14:
  uint64_t v10 = v9;
  p_p = &__p;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  unint64_t v12 = objc_msgSend(v9, "stringByAppendingFormat:", @"/%s", p_p);

  id v13 = v12;
  std::string::basic_string[abi:ne180100]<0>(a3, (char *)[v13 UTF8String]);

  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_192B2DD44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::ANECompilerEngine::zin_compiler_helper::precompile(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void Espresso::ANECompilerEngine::zin_compiler_helper::anec_compile(char *a1, uint64_t a2, uint64_t a3)
{
  v167[1] = *MEMORY[0x1E4F143B8];
  espresso_initialize_was_called = 1;
  initialize_static_memory();
  if (*(char *)(a3 + 31) >= 0) {
    uint64_t v5 = a3 + 8;
  }
  else {
    uint64_t v5 = *(void *)(a3 + 8);
  }
  uint64_t v6 = [NSString stringWithUTF8String:v5];
  unint64_t v7 = [v6 componentsSeparatedByString:@","];

  obuint64_t j = v7;
  if (![v7 count])
  {
    char v8 = [NSString stringWithUTF8String:Espresso::ANECompilerEngine::zin_compiler_helper::arch_h11_suffix];
    v167[0] = v8;
    unint64_t v7 = [MEMORY[0x1E4F1C978] arrayWithObjects:v167 count:1];
  }
  long long v161 = 0u;
  long long v162 = 0u;
  long long v159 = 0u;
  long long v160 = 0u;
  id obja = v7;
  int v9 = (Espresso::abstract_engine_factory *)[obja countByEnumeratingWithState:&v159 objects:v166 count:16];
  if (v9)
  {
    uint64_t v124 = *(void *)v160;
    do
    {
      int v123 = v9;
      uint64_t v11 = 0;
      do
      {
        if (*(void *)v160 != v124) {
          objc_enumerationMutation(obja);
        }
        unint64_t v12 = *(void **)(*((void *)&v159 + 1) + 8 * v11);
        espresso_deinitialize(v9, v10);
        espresso_initialize_was_called = 1;
        initialize_static_memory();
        uint64_t v127 = v11;
        if (Espresso::ANECompilerEngine::precompilation_settings_t::shared(void)::onceToken != -1) {
          dispatch_once(&Espresso::ANECompilerEngine::precompilation_settings_t::shared(void)::onceToken, &__block_literal_global_22303);
        }
        uint64_t v13 = Espresso::ANECompilerEngine::precompilation_settings_t::global;
        id v129 = v12;
        std::string::basic_string[abi:ne180100]<0>(&__p, (char *)[v129 UTF8String]);
        Espresso::ANECompilerEngine::precompilation_settings_t::set_ane_arch(v13, &__p);
        unint64_t v14 = 0x1E4F29000uLL;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        context = (void *)espresso_create_context(0x2718u, -1);
        unint64_t v15 = 0;
        do
        {
          unint64_t __val = v15;
          id v142 = [*(id *)(v14 + 24) stringWithFormat:@"{\"isegment\" : %zu, \"arch\" : \"%@\"}", v15, v129];
          plan = (uint64_t *)espresso_create_plan(context, 0);
          if (a1[23] >= 0) {
            uint64_t v17 = a1;
          }
          else {
            uint64_t v17 = *(char **)a1;
          }
          long long v140 = plan;
          if (espresso_plan_add_network(plan, v17, 65552, (uint64_t)&v156))
          {
            exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            espresso_plan_get_error_info((uint64_t)v140);
            std::runtime_error::runtime_error(exception, v120);
            __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          uint64_t v18 = v156;
          int v19 = v157;
          id v143 = v142;
          if (espresso_network_compiler_set_metadata_key(v18, v19, [v143 UTF8String]))
          {
            int v117 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            espresso_plan_get_error_info((uint64_t)v140);
            std::runtime_error::runtime_error(v117, v118);
            __cxa_throw(v117, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          if (espresso_plan_build(v140))
          {
            int v115 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            espresso_plan_get_error_info((uint64_t)v140);
            std::runtime_error::runtime_error(v115, v116);
            __cxa_throw(v115, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          uint64_t v20 = a2;
          if (*(char *)(a2 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
            uint64_t v20 = a2;
          }
          else
          {
            std::string __p = *(std::string *)a2;
          }
          if (__val)
          {
            size_t v21 = *(unsigned __int8 *)(v20 + 23);
            size_t v22 = *(void *)(v20 + 8);
            if ((v21 & 0x80u) == 0) {
              size_t v23 = v21;
            }
            else {
              size_t v23 = v22;
            }
            std::string::basic_string[abi:ne180100]((uint64_t)&v154, v23 + 9);
            if ((v154.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v24 = &v154;
            }
            else {
              uint64_t v24 = (std::string *)v154.__r_.__value_.__r.__words[0];
            }
            if (v23)
            {
              if (*(char *)(a2 + 23) >= 0) {
                uint64_t v25 = (const std::string::value_type *)a2;
              }
              else {
                uint64_t v25 = *(const std::string::value_type **)a2;
              }
              memmove(v24, v25, v23);
            }
            strcpy((char *)v24 + v23, "/segment_");
            std::to_string(&v153, __val);
            if ((v153.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              unsigned int v26 = &v153;
            }
            else {
              unsigned int v26 = (std::string *)v153.__r_.__value_.__r.__words[0];
            }
            if ((v153.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type size = HIBYTE(v153.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type size = v153.__r_.__value_.__l.__size_;
            }
            long long v28 = std::string::append(&v154, (const std::string::value_type *)v26, size);
            long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
            v155.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v155.__r_.__value_.__l.__data_ = v29;
            v28->__r_.__value_.__l.__size_ = 0;
            v28->__r_.__value_.__r.__words[2] = 0;
            v28->__r_.__value_.__r.__words[0] = 0;
            long long v30 = std::string::append(&v155, "/");
            std::string::size_type v31 = v30->__r_.__value_.__r.__words[0];
            v164.__r_.__value_.__r.__words[0] = v30->__r_.__value_.__l.__size_;
            *(std::string::size_type *)((char *)v164.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v30->__r_.__value_.__r.__words[1] + 7);
            char v32 = HIBYTE(v30->__r_.__value_.__r.__words[2]);
            v30->__r_.__value_.__l.__size_ = 0;
            v30->__r_.__value_.__r.__words[2] = 0;
            v30->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            __p.__r_.__value_.__r.__words[0] = v31;
            __p.__r_.__value_.__l.__size_ = v164.__r_.__value_.__r.__words[0];
            *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v164.__r_.__value_.__r.__words + 7);
            *((unsigned char *)&__p.__r_.__value_.__s + 23) = v32;
            if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v155.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v153.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v154.__r_.__value_.__l.__data_);
            }
          }
          p_p = &__p;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          NSLog(&cfstr_DumpingAnecIrT.isa, p_p);
          Espresso::get_internal_network((uint64_t)v156, v157, (uint64_t)&v151);
          uint64_t v34 = v151;
          unsigned int v35 = (***(uint64_t (****)(void))(*(void *)(v151 + 16) + 8))();
          std::string::size_type v36 = std::__hash_table<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::__unordered_map_hasher<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::hash<Espresso::platform>,std::equal_to<Espresso::platform>,true>,std::__unordered_map_equal<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::equal_to<Espresso::platform>,std::hash<Espresso::platform>,true>,std::allocator<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>>>::find<Espresso::platform>((void *)(v34 + 528), v35);
          if (!v36)
          {
            int v135 = 0;
LABEL_67:
            uint64_t v41 = 0;
            int v133 = 0;
            goto LABEL_68;
          }
          uint64_t v37 = v36;
          uint64_t v38 = (const void *)v36[3];
          uint64_t v39 = (std::__shared_weak_count *)v37[4];
          if (v39) {
            atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          int v135 = v39;
          if (!v38) {
            goto LABEL_67;
          }
          uint64_t v41 = v40;
          if (v40) {
            long long v42 = 0;
          }
          else {
            long long v42 = v135;
          }
          if (v40) {
            BOOL v43 = v135 == 0;
          }
          else {
            BOOL v43 = 1;
          }
          if (v43)
          {
            int v133 = 0;
            int v135 = v42;
          }
          else
          {
            atomic_fetch_add_explicit(&v135->__shared_owners_, 1uLL, memory_order_relaxed);
            int v133 = v135;
          }
LABEL_68:
          std::string::operator=(v41 + 19, (const std::string *)(a3 + 104));
          uint64_t v44 = &__p;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            uint64_t v44 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          v150[0] = v44;
          v150[1] = 0;
          espresso_dump_ir(v140, (uint64_t)v150);
          std::string::size_type v131 = v41[1].__r_.__value_.__l.__size_;
          std::string::size_type v132 = v41[1].__r_.__value_.__r.__words[2];
          if (*(unsigned char *)a3)
          {
            id v134 = v129;
            std::string::basic_string[abi:ne180100]<0>(&v154, (char *)[v134 UTF8String]);
            Espresso::ANECompilerEngine::zin_compiler_helper::precompiled_filename_for_segment_and_arch(__val, (uint64_t *)a1, (uint64_t *)&v154, &v155);
            if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v154.__r_.__value_.__l.__data_);
            }
            if (a1[23] >= 0) {
              uint64_t v45 = (uint64_t)a1;
            }
            else {
              uint64_t v45 = *(void *)a1;
            }
            float v46 = [NSString stringWithUTF8String:v45];
            int v47 = [NSString stringWithFormat:@".%@.espresso.precompilation_info", v134];
            id v48 = [v46 stringByReplacingOccurrencesOfString:@".espresso.net" withString:v47];
            std::string::basic_string[abi:ne180100]<0>(&v154, (char *)[v48 UTF8String]);

            int v139 = [NSString stringWithUTF8String:v150[0]];
            if (*(char *)(a3 + 103) < 0)
            {
              if (!*(void *)(a3 + 88)) {
                goto LABEL_134;
              }
            }
            else if (!*(unsigned char *)(a3 + 103))
            {
              goto LABEL_134;
            }
            if ((v155.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v49 = &v155;
            }
            else {
              uint64_t v49 = (std::string *)v155.__r_.__value_.__r.__words[0];
            }
            uint64_t v50 = [NSString stringWithUTF8String:v49];
            id v136 = [v50 lastPathComponent];

            uint64_t v51 = [MEMORY[0x1E4F28CB8] defaultManager];
            if (*(char *)(a3 + 103) >= 0) {
              uint64_t v52 = a3 + 80;
            }
            else {
              uint64_t v52 = *(void *)(a3 + 80);
            }
            std::string v53 = [NSString stringWithUTF8String:v52];
            [v51 createDirectoryAtPath:v53 withIntermediateDirectories:1 attributes:0 error:0];

            if (*(char *)(a3 + 103) >= 0) {
              size_t v54 = *(unsigned __int8 *)(a3 + 103);
            }
            else {
              size_t v54 = *(void *)(a3 + 88);
            }
            std::string::basic_string[abi:ne180100]((uint64_t)&v153, v54 + 1);
            if ((v153.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v55 = &v153;
            }
            else {
              uint64_t v55 = (std::string *)v153.__r_.__value_.__r.__words[0];
            }
            if (v54)
            {
              if (*(char *)(a3 + 103) >= 0) {
                uint64_t v56 = (const void *)(a3 + 80);
              }
              else {
                uint64_t v56 = *(const void **)(a3 + 80);
              }
              memmove(v55, v56, v54);
            }
            *(_WORD *)((char *)&v55->__r_.__value_.__l.__data_ + v54) = 47;
            id v137 = v136;
            unint64_t v57 = std::string::append(&v153, (const std::string::value_type *)[v137 UTF8String]);
            std::string::size_type v58 = v57->__r_.__value_.__r.__words[0];
            v164.__r_.__value_.__r.__words[0] = v57->__r_.__value_.__l.__size_;
            *(std::string::size_type *)((char *)v164.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v57->__r_.__value_.__r.__words[1] + 7);
            char v59 = HIBYTE(v57->__r_.__value_.__r.__words[2]);
            v57->__r_.__value_.__l.__size_ = 0;
            v57->__r_.__value_.__r.__words[2] = 0;
            v57->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v155.__r_.__value_.__l.__data_);
            }
            v155.__r_.__value_.__r.__words[0] = v58;
            v155.__r_.__value_.__l.__size_ = v164.__r_.__value_.__r.__words[0];
            *(std::string::size_type *)((char *)&v155.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v164.__r_.__value_.__r.__words + 7);
            *((unsigned char *)&v155.__r_.__value_.__s + 23) = v59;
            if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v153.__r_.__value_.__l.__data_);
            }
            long long v146 = 0u;
            long long v147 = 0u;
            long long v148 = 0u;
            long long v149 = 0u;
            uint64_t v60 = [&unk_1EE3AF220 countByEnumeratingWithState:&v146 objects:v165 count:16];
            if (v60)
            {
              uint64_t v61 = *(void *)v147;
              do
              {
                for (uint64_t i = 0; i != v60; ++i)
                {
                  if (*(void *)v147 != v61) {
                    objc_enumerationMutation(&unk_1EE3AF220);
                  }
                  uint64_t v63 = *(void *)(*((void *)&v146 + 1) + 8 * i);
                  if (a1[23] >= 0) {
                    uint64_t v64 = (uint64_t)a1;
                  }
                  else {
                    uint64_t v64 = *(void *)a1;
                  }
                  uint64_t v65 = [NSString stringWithUTF8String:v64];
                  int64_t v66 = [v65 stringByReplacingOccurrencesOfString:@".espresso.net" withString:v63];

                  if (*(char *)(a3 + 103) >= 0) {
                    uint64_t v67 = a3 + 80;
                  }
                  else {
                    uint64_t v67 = *(void *)(a3 + 80);
                  }
                  int v68 = [NSString stringWithUTF8String:v67];
                  int v69 = [v66 lastPathComponent];
                  uint64_t v70 = [v68 stringByAppendingPathComponent:v69];

                  uint64_t v71 = [MEMORY[0x1E4F28CB8] defaultManager];
                  [v71 removeItemAtPath:v70 error:0];

                  int v72 = [MEMORY[0x1E4F28CB8] defaultManager];
                  id v145 = 0;
                  [v72 copyItemAtPath:v66 toPath:v70 error:&v145];
                  id v73 = v145;

                  if (v73)
                  {
                    uint64_t v112 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                    std::string::basic_string[abi:ne180100]<0>(&v164, (char *)[v70 UTF8String]);
                    uint64_t v113 = std::string::insert(&v164, 0, "Cannot copy to ");
                    long long v114 = *(_OWORD *)&v113->__r_.__value_.__l.__data_;
                    v153.__r_.__value_.__r.__words[2] = v113->__r_.__value_.__r.__words[2];
                    *(_OWORD *)&v153.__r_.__value_.__l.__data_ = v114;
                    v113->__r_.__value_.__l.__size_ = 0;
                    v113->__r_.__value_.__r.__words[2] = 0;
                    v113->__r_.__value_.__r.__words[0] = 0;
                    std::runtime_error::runtime_error(v112, &v153);
                    __cxa_throw(v112, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                  }
                }
                uint64_t v60 = [&unk_1EE3AF220 countByEnumeratingWithState:&v146 objects:v165 count:16];
              }
              while (v60);
            }
            if ((v154.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              long long v74 = &v154;
            }
            else {
              long long v74 = (std::string *)v154.__r_.__value_.__r.__words[0];
            }
            uint64_t v75 = [NSString stringWithUTF8String:v74];
            long long v76 = [v75 lastPathComponent];

            if (*(char *)(a3 + 103) >= 0) {
              size_t v77 = *(unsigned __int8 *)(a3 + 103);
            }
            else {
              size_t v77 = *(void *)(a3 + 88);
            }
            std::string::basic_string[abi:ne180100]((uint64_t)&v153, v77 + 1);
            if ((v153.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              unint64_t v78 = &v153;
            }
            else {
              unint64_t v78 = (std::string *)v153.__r_.__value_.__r.__words[0];
            }
            if (v77)
            {
              if (*(char *)(a3 + 103) >= 0) {
                uint64_t v79 = (const void *)(a3 + 80);
              }
              else {
                uint64_t v79 = *(const void **)(a3 + 80);
              }
              memmove(v78, v79, v77);
            }
            *(_WORD *)((char *)&v78->__r_.__value_.__l.__data_ + v77) = 47;
            id v80 = v76;
            long long v81 = std::string::append(&v153, (const std::string::value_type *)[v80 UTF8String]);
            std::string::size_type v82 = v81->__r_.__value_.__r.__words[0];
            v164.__r_.__value_.__r.__words[0] = v81->__r_.__value_.__l.__size_;
            *(std::string::size_type *)((char *)v164.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v81->__r_.__value_.__r.__words[1] + 7);
            char v83 = HIBYTE(v81->__r_.__value_.__r.__words[2]);
            v81->__r_.__value_.__l.__size_ = 0;
            v81->__r_.__value_.__r.__words[2] = 0;
            v81->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v154.__r_.__value_.__l.__data_);
            }
            v154.__r_.__value_.__r.__words[0] = v82;
            v154.__r_.__value_.__l.__size_ = v164.__r_.__value_.__r.__words[0];
            *(std::string::size_type *)((char *)&v154.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v164.__r_.__value_.__r.__words + 7);
            *((unsigned char *)&v154.__r_.__value_.__s + 23) = v83;
            if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v153.__r_.__value_.__l.__data_);
            }

LABEL_134:
            id v138 = [v139 stringByAppendingPathComponent:@"net_options.plist"];
            float v84 = [MEMORY[0x1E4F28CB8] defaultManager];
            [v84 removeItemAtPath:v138 error:0];

            unsigned __int8 v85 = [MEMORY[0x1E4F28CB8] defaultManager];
            if ((v154.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              int v86 = &v154;
            }
            else {
              int v86 = (std::string *)v154.__r_.__value_.__r.__words[0];
            }
            std::string v87 = [NSString stringWithUTF8String:v86];
            [v85 removeItemAtPath:v87 error:0];

            unint64_t v88 = [MEMORY[0x1E4F28CB8] defaultManager];
            char v89 = [v139 stringByAppendingPathComponent:@"net.precompilation_info"];
            if ((v154.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              id v90 = &v154;
            }
            else {
              id v90 = (std::string *)v154.__r_.__value_.__r.__words[0];
            }
            uint64_t v91 = [NSString stringWithUTF8String:v90];
            id v144 = 0;
            [v88 copyItemAtPath:v89 toPath:v91 error:&v144];
            id v92 = v144;

            if (v92)
            {
              long long v121 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v121, "Cannot copy net.precompilation_info");
              __cxa_throw(v121, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
            }
            if (*(char *)(a3 + 55) >= 0) {
              uint64_t v93 = a3 + 32;
            }
            else {
              uint64_t v93 = *(void *)(a3 + 32);
            }
            long long v94 = [NSString stringWithUTF8String:v93];
            char v95 = v94;
            if (*(char *)(a3 + 55) < 0)
            {
              if (!*(void *)(a3 + 40)) {
                goto LABEL_148;
              }
            }
            else if (!*(unsigned char *)(a3 + 55))
            {
LABEL_148:

              char v95 = @"/usr/local/bin/zin_ane_compiler";
            }
            long long v96 = getenv("ZIN_ANE_COMPILER_PATH");
            if (v96)
            {
              uint64_t v97 = [NSString stringWithUTF8String:v96];

              char v95 = (__CFString *)v97;
            }
            v163[0] = @"-i";
            uint64_t v98 = [v139 stringByAppendingPathComponent:@"net.plist"];
            v163[1] = v98;
            v163[2] = @"-w";
            char v99 = [v139 stringByAppendingPathComponent:@"net.additional.weights"];
            v163[3] = v99;
            v163[4] = @"--Wl-undefined=fvmlib";
            v163[5] = @"-t";
            unint64_t v100 = [v134 lowercaseString];
            v163[6] = v100;
            v163[7] = @"-o";
            if ((v155.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              unint64_t v101 = &v155;
            }
            else {
              unint64_t v101 = (std::string *)v155.__r_.__value_.__r.__words[0];
            }
            unint64_t v102 = [NSString stringWithUTF8String:v101];
            v163[8] = v102;
            char v103 = [MEMORY[0x1E4F1C978] arrayWithObjects:v163 count:9];
            long long v104 = (void *)[v103 mutableCopy];

            uint64_t v105 = [MEMORY[0x1E4F28CB8] defaultManager];
            int v106 = [v105 fileExistsAtPath:v138];

            if (v106)
            {
              [v104 addObject:@"-p"];
              [v104 addObject:v138];
            }
            int v107 = [v104 componentsJoinedByString:@" "];
            NSLog(&cfstr_CallingZinAneC.isa, v95, v107);

            uint64_t v108 = v95;
            id v109 = v104;
            id v110 = objc_alloc_init(MEMORY[0x1E4F29038]);
            [v110 setLaunchPath:v108];
            [v110 setArguments:v109];
            [v110 launch];
            [v110 waitUntilExit];
            uint64_t v111 = [v110 terminationStatus];

            if (v111)
            {
              NSLog(&cfstr_ZinAneCompiler_0.isa, v111);
              espresso_plan_destroy((std::string::size_type)v140);
              espresso_context_destroy(context);
              long long v122 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v122, "zin_ane_compiler failed");
              __cxa_throw(v122, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
            }

            if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v154.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v155.__r_.__value_.__l.__data_);
            }
          }
          espresso_plan_destroy((std::string::size_type)v140);
          if (v133) {
            nitro::nitro_function::nitro_function(v133);
          }
          if (v135) {
            nitro::nitro_function::nitro_function(v135);
          }
          if (v152) {
            nitro::nitro_function::nitro_function(v152);
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }

          unint64_t v15 = __val + 1;
          unint64_t v14 = 0x1E4F29000;
        }
        while (__val + 1 < 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v132 - v131) >> 3));
        int v9 = (Espresso::abstract_engine_factory *)espresso_context_destroy(context);
        uint64_t v11 = v127 + 1;
      }
      while ((Espresso::abstract_engine_factory *)(v127 + 1) != v123);
      int v9 = (Espresso::abstract_engine_factory *)[obja countByEnumeratingWithState:&v159 objects:v166 count:16];
    }
    while (v9);
  }

  Espresso::ANECompilerEngine::zin_compiler_helper::anec_compile(std::string const&,std::string const&,Espresso::ANECompilerEngine::zin_compiler_helper::opts_t const&)::raii_reset_settings_overrides::~raii_reset_settings_overrides();
}

void sub_192B2EE6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  Espresso::ANECompilerEngine::zin_compiler_helper::anec_compile(std::string const&,std::string const&,Espresso::ANECompilerEngine::zin_compiler_helper::opts_t const&)::raii_reset_settings_overrides::~raii_reset_settings_overrides();
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::zin_compiler_helper::precompiled_filename_for_segment_and_arch(int __val@<W1>, uint64_t *a2@<X0>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  if (__val < 1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "");
  }
  else
  {
    std::to_string(&v16, __val);
    unint64_t v7 = std::string::insert(&v16, 0, ".S");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    int64_t v18 = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v16.__r_.__value_.__l.__data_);
    }
  }
  if (*((char *)a2 + 23) >= 0) {
    int v9 = a2;
  }
  else {
    int v9 = (uint64_t *)*a2;
  }
  uint64_t v10 = [NSString stringWithUTF8String:v9];
  uint64_t v11 = __p;
  if (v18 < 0) {
    uint64_t v11 = (void **)__p[0];
  }
  if (*((char *)a3 + 23) >= 0) {
    unint64_t v12 = a3;
  }
  else {
    unint64_t v12 = (uint64_t *)*a3;
  }
  uint64_t v13 = objc_msgSend(NSString, "stringWithFormat:", @"%s.%s.espresso.hwx", v11, v12);
  unint64_t v14 = [v10 stringByReplacingOccurrencesOfString:@".espresso.net" withString:v13];

  id v15 = v14;
  std::string::basic_string[abi:ne180100]<0>(a4, (char *)[v15 UTF8String]);

  if (SHIBYTE(v18) < 0) {
    operator delete(__p[0]);
  }
}

void sub_192B2F408(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::ANECompilerEngine::zin_compiler_helper::anec_compile(std::string const&,std::string const&,Espresso::ANECompilerEngine::zin_compiler_helper::opts_t const&)::raii_reset_settings_overrides::~raii_reset_settings_overrides()
{
  if (Espresso::ANECompilerEngine::precompilation_settings_t::shared(void)::onceToken != -1) {
    dispatch_once(&Espresso::ANECompilerEngine::precompilation_settings_t::shared(void)::onceToken, &__block_literal_global_22303);
  }
  uint64_t v0 = Espresso::ANECompilerEngine::precompilation_settings_t::global;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  Espresso::ANECompilerEngine::precompilation_settings_t::set_ane_arch(v0, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  espresso_deinitialize(v1, v2);
  espresso_initialize_was_called = 1;
  initialize_static_memory();
}

void *Espresso::ANECompilerEngine::zin_compiler_helper::zin_compiler_helper(void *this, Espresso::net *a2)
{
  *this = a2;
  return this;
}

{
  *this = a2;
  return this;
}

void splitted_filename_for_segment_and_arch(void *a1, uint64_t *a2, int a3, uint64_t *a4, const void **a5)
{
  if (*((char *)a2 + 23) >= 0) {
    int v9 = a2;
  }
  else {
    int v9 = (uint64_t *)*a2;
  }
  uint64_t v10 = [NSString stringWithUTF8String:v9];
  id v11 = [v10 lastPathComponent];
  std::string::basic_string[abi:ne180100]<0>(v24, (char *)[v11 UTF8String]);

  std::to_string(&v21, a3);
  unint64_t v12 = std::string::insert(&v21, 0, ".S");
  long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  std::string::size_type v23 = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)__p, a5, (uint64_t)&v21);
  if (v25 >= 0) {
    unint64_t v14 = v24;
  }
  else {
    unint64_t v14 = (void **)v24[0];
  }
  id v15 = [NSString stringWithUTF8String:v14];
  std::string v16 = &v21;
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string v16 = (std::string *)v21.__r_.__value_.__r.__words[0];
  }
  if (*((char *)a4 + 23) >= 0) {
    uint64_t v17 = a4;
  }
  else {
    uint64_t v17 = (uint64_t *)*a4;
  }
  int64_t v18 = objc_msgSend(NSString, "stringWithFormat:", @"%s.%s.espresso.net", v16, v17);
  int v19 = [v15 stringByReplacingOccurrencesOfString:@".espresso.net" withString:v18];

  id v20 = v19;
  std::string::basic_string[abi:ne180100]<0>(a1, (char *)[v20 UTF8String]);

  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v23) < 0) {
    operator delete(__p[0]);
  }
  if (v25 < 0) {
    operator delete(v24[0]);
  }
}

void sub_192B2F6D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::zin_compiler_helper::anec_split(char *a1, uint64_t a2, uint64_t a3)
{
  v138[1] = *MEMORY[0x1E4F143B8];
  espresso_initialize_was_called = 1;
  initialize_static_memory();
  uint64_t v106 = a3;
  uint64_t v6 = *(void *)(a3 + 8);
  uint64_t v5 = a3 + 8;
  uint64_t v4 = v6;
  if (*(char *)(v5 + 23) >= 0) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = v4;
  }
  long long v8 = [NSString stringWithUTF8String:v7];
  int v9 = [v8 componentsSeparatedByString:@","];

  if ([v9 count])
  {
    uint64_t v10 = v9;
  }
  else
  {
    id v11 = [NSString stringWithUTF8String:Espresso::ANECompilerEngine::zin_compiler_helper::arch_h11_suffix];
    v138[0] = v11;
    uint64_t v10 = [MEMORY[0x1E4F1C978] arrayWithObjects:v138 count:1];
  }
  long long v135 = 0u;
  long long v136 = 0u;
  long long v133 = 0u;
  long long v134 = 0u;
  obuint64_t j = v10;
  uint64_t v98 = [obj countByEnumeratingWithState:&v133 objects:v137 count:16];
  if (v98)
  {
    uint64_t v111 = (const void **)(v106 + 80);
    uint64_t v97 = *(void *)v134;
    do
    {
      uint64_t v103 = 0;
      do
      {
        if (*(void *)v134 != v97) {
          objc_enumerationMutation(obj);
        }
        id v102 = *(id *)(*((void *)&v133 + 1) + 8 * v103);
        std::string::basic_string[abi:ne180100]<0>(&v132, (char *)[v102 UTF8String]);
        if (Espresso::ANECompilerEngine::precompilation_settings_t::shared(void)::onceToken != -1) {
          dispatch_once(&Espresso::ANECompilerEngine::precompilation_settings_t::shared(void)::onceToken, &__block_literal_global_22303);
        }
        Espresso::ANECompilerEngine::precompilation_settings_t::set_ane_arch(Espresso::ANECompilerEngine::precompilation_settings_t::global, &v132);
        context = (void *)espresso_create_context(0x2718u, -1);
        plan = (uint64_t *)espresso_create_plan(context, 0);
        unint64_t v14 = plan;
        if (a1[23] >= 0) {
          id v15 = a1;
        }
        else {
          id v15 = *(char **)a1;
        }
        if (espresso_plan_add_network(plan, v15, 65552, (uint64_t)&v130))
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          espresso_plan_get_error_info((uint64_t)v14);
          std::runtime_error::runtime_error(exception, v92);
          __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        if (espresso_plan_build(v14))
        {
          long long v94 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          espresso_plan_get_error_info((uint64_t)v14);
          std::runtime_error::runtime_error(v94, v95);
          __cxa_throw(v94, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        Espresso::get_internal_network(v130, v131, (uint64_t)&v128);
        uint64_t v16 = v128;
        unsigned int v17 = (***(uint64_t (****)(void))(*(void *)(v128 + 16) + 8))();
        int64_t v18 = std::__hash_table<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::__unordered_map_hasher<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::hash<Espresso::platform>,std::equal_to<Espresso::platform>,true>,std::__unordered_map_equal<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::equal_to<Espresso::platform>,std::hash<Espresso::platform>,true>,std::allocator<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>>>::find<Espresso::platform>((void *)(v16 + 528), v17);
        int v19 = (const void *)v18[3];
        id v20 = (std::__shared_weak_count *)v18[4];
        if (v20) {
          atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        size_t v22 = v21;
        if (v20) {
          atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v126 = 0;
        uint64_t v127 = 0;
        std::string::size_type v23 = (std::__shared_weak_count *)*((void *)v21 + 2);
        if (v23)
        {
          uint64_t v127 = std::__shared_weak_count::lock(v23);
          if (v127) {
            uint64_t v126 = v22[1];
          }
        }
        (*(void (**)(void *, uint64_t *))(*v22 + 88))(v22, &v126);
        char v99 = context;
        std::string::size_type v100 = (std::string::size_type)v14;
        if (v127) {
          nitro::nitro_function::nitro_function(v127);
        }
        uint64_t v25 = v22[4];
        uint64_t v24 = v22[5];
        unint64_t v26 = 0xEEEEEEEEEEEEEEEFLL * ((v24 - v25) >> 3);
        NSLog(&cfstr_NSegmentsZu.isa, v26);
        if (v24 == v25)
        {
          uint64_t v93 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v93, "Error: Found zero ANE segments in this network");
          __cxa_throw(v93, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        unint64_t v101 = v20;
        uint64_t v27 = (std::__shared_weak_count *)v22[2];
        if (v27)
        {
          long long v28 = std::__shared_weak_count::lock(v27);
          if (v28) {
            long long v29 = (const Espresso::net *)v22[1];
          }
          else {
            long long v29 = 0;
          }
        }
        else
        {
          long long v29 = 0;
          long long v28 = 0;
        }
        unint64_t __val = 0;
        id v110 = objc_opt_new();
        uint64_t v108 = v22;
        uint64_t v30 = 0;
        uint64_t v31 = 0;
        if (v26 <= 1) {
          uint64_t v32 = 1;
        }
        else {
          uint64_t v32 = v26;
        }
        uint64_t v104 = v32;
        unint64_t v105 = v26 - 1;
        do
        {
          uint64_t v33 = [MEMORY[0x1E4F28CB8] defaultManager];
          if (*(char *)(v106 + 103) >= 0) {
            uint64_t v34 = v106 + 80;
          }
          else {
            uint64_t v34 = *(void *)(v106 + 80);
          }
          unsigned int v35 = [NSString stringWithUTF8String:v34];
          [v33 createDirectoryAtPath:v35 withIntermediateDirectories:1 attributes:0 error:0];

          uint64_t v36 = v108[4];
          uint64_t v37 = (uint64_t *)(v36 + 120 * SHIDWORD(v30));
          uint64_t v38 = *((void *)v29 + 4);
          uint64_t v107 = *((void *)v29 + 5);
          int v39 = __val;
          if (!v31)
          {
            std::string::basic_string[abi:ne180100]<0>(&__p, "");
            splitted_filename_for_segment_and_arch(&v124, (uint64_t *)a1, v39, (uint64_t *)&v132, (const void **)&__p.__r_.__value_.__l.__data_);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            if (*v37) {
              unint64_t v40 = *v37 - 1;
            }
            else {
              unint64_t v40 = 0;
            }
            long long v121 = v29;
            long long v122 = v28;
            if (v28) {
              atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            uint64_t v41 = cut_network(&v121, (void *)(v36 + 120 * SHIDWORD(v30)), v111, 1uLL, v40, &__val, (const std::string::value_type *)&v124);
            if (v122) {
              nitro::nitro_function::nitro_function(v122);
            }
            if (v41)
            {
              long long v42 = NSString;
              std::to_string(&__p, __val);
              BOOL v43 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                  ? &__p
                  : (std::string *)__p.__r_.__value_.__r.__words[0];
              uint64_t v44 = [v42 stringWithUTF8String:v43];
              [v110 setObject:v41 forKeyedSubscript:v44];

              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__p.__r_.__value_.__l.__data_);
              }
            }

            if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v124.__r_.__value_.__l.__data_);
            }
            int v39 = __val;
          }
          std::string::basic_string[abi:ne180100]<0>(&__p, "");
          splitted_filename_for_segment_and_arch(&v124, (uint64_t *)a1, v39, (uint64_t *)&v132, (const void **)&__p.__r_.__value_.__l.__data_);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          uint64_t v45 = *v37;
          uint64_t v46 = v36 + 120 * SHIDWORD(v30);
          uint64_t v49 = *(void *)(v46 + 8);
          id v48 = (uint64_t *)(v46 + 8);
          int v47 = v49;
          int v119 = v29;
          unint64_t v120 = v28;
          if (v28) {
            atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v50 = cut_network(&v119, (void *)(v36 + 120 * SHIDWORD(v30)), v111, (int)v45, v47, &__val, (const std::string::value_type *)&v124);
          if (v120) {
            nitro::nitro_function::nitro_function(v120);
          }
          if (v50)
          {
            uint64_t v51 = NSString;
            std::to_string(&__p, __val);
            uint64_t v52 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                ? &__p
                : (std::string *)__p.__r_.__value_.__r.__words[0];
            std::string v53 = [v51 stringWithUTF8String:v52];
            [v110 setObject:v50 forKeyedSubscript:v53];

            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
          }

          if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v124.__r_.__value_.__l.__data_);
          }
          int v54 = __val;
          std::string::basic_string[abi:ne180100]<0>(&__p, "");
          splitted_filename_for_segment_and_arch(&v124, (uint64_t *)a1, v54, (uint64_t *)&v132, (const void **)&__p.__r_.__value_.__l.__data_);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          uint64_t v55 = *v48;
          if (v105 == v31) {
            unint64_t v56 = (v107 - v38) >> 4;
          }
          else {
            unint64_t v56 = *(void *)(v108[4] + 120 * (int)((unint64_t)(v30 + 0x100000000) >> 32)) - 1;
          }
          int v117 = v29;
          int v118 = v28;
          if (v28) {
            atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          unint64_t v57 = cut_network(&v117, (void *)(v36 + 120 * SHIDWORD(v30)), v111, v55 + 1, v56, &__val, (const std::string::value_type *)&v124);
          if (v118) {
            nitro::nitro_function::nitro_function(v118);
          }
          if (v57)
          {
            std::string::size_type v58 = NSString;
            std::to_string(&__p, __val);
            char v59 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                ? &__p
                : (std::string *)__p.__r_.__value_.__r.__words[0];
            uint64_t v60 = [v58 stringWithUTF8String:v59];
            [v110 setObject:v57 forKeyedSubscript:v60];

            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
          }

          if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v124.__r_.__value_.__l.__data_);
          }
          ++v31;
          v30 += 0x100000000;
        }
        while (v104 != v31);
        id v61 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
        [v110 setObject:v61 forKeyedSubscript:@"inputs"];

        long long v62 = (void *)*((void *)v29 + 29);
        if (v62 != (void *)((char *)v29 + 240))
        {
          do
          {
            if (*((char *)v62 + 55) < 0) {
              std::string::__init_copy_ctor_external(&v124, (const std::string::value_type *)v62[4], v62[5]);
            }
            else {
              std::string v124 = *(std::string *)(v62 + 4);
            }
            int v115 = v29;
            long long v116 = v28;
            if (v28) {
              atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            uint64_t v63 = get_blob_info((long long *)&v124, &v115);
            if (v116) {
              nitro::nitro_function::nitro_function(v116);
            }
            uint64_t v64 = [v110 objectForKeyedSubscript:@"inputs"];
            if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v65 = &v124;
            }
            else {
              uint64_t v65 = (std::string *)v124.__r_.__value_.__r.__words[0];
            }
            int64_t v66 = [NSString stringWithUTF8String:v65];
            [v64 setObject:v63 forKeyedSubscript:v66];

            if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v124.__r_.__value_.__l.__data_);
            }
            uint64_t v67 = (void *)v62[1];
            if (v67)
            {
              do
              {
                int v68 = v67;
                uint64_t v67 = (void *)*v67;
              }
              while (v67);
            }
            else
            {
              do
              {
                int v68 = (void *)v62[2];
                BOOL v69 = *v68 == (void)v62;
                long long v62 = v68;
              }
              while (!v69);
            }
            long long v62 = v68;
          }
          while (v68 != (void *)((char *)v29 + 240));
        }
        id v70 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
        [v110 setObject:v70 forKeyedSubscript:@"outputs"];

        uint64_t v71 = (void *)*((void *)v29 + 32);
        if (v71 != (void *)((char *)v29 + 264))
        {
          do
          {
            if (*((char *)v71 + 55) < 0) {
              std::string::__init_copy_ctor_external(&v124, (const std::string::value_type *)v71[4], v71[5]);
            }
            else {
              std::string v124 = *(std::string *)(v71 + 4);
            }
            uint64_t v113 = v29;
            long long v114 = v28;
            if (v28) {
              atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            int v72 = get_blob_info((long long *)&v124, &v113);
            if (v114) {
              nitro::nitro_function::nitro_function(v114);
            }
            id v73 = [v110 objectForKeyedSubscript:@"outputs"];
            if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              long long v74 = &v124;
            }
            else {
              long long v74 = (std::string *)v124.__r_.__value_.__r.__words[0];
            }
            uint64_t v75 = [NSString stringWithUTF8String:v74];
            [v73 setObject:v72 forKeyedSubscript:v75];

            if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v124.__r_.__value_.__l.__data_);
            }
            long long v76 = (void *)v71[1];
            if (v76)
            {
              do
              {
                size_t v77 = v76;
                long long v76 = (void *)*v76;
              }
              while (v76);
            }
            else
            {
              do
              {
                size_t v77 = (void *)v71[2];
                BOOL v69 = *v77 == (void)v71;
                uint64_t v71 = v77;
              }
              while (!v69);
            }
            uint64_t v71 = v77;
          }
          while (v77 != (void *)((char *)v29 + 264));
        }
        unint64_t v78 = NSString;
        if (*(char *)(v106 + 103) >= 0) {
          size_t v79 = *(unsigned __int8 *)(v106 + 103);
        }
        else {
          size_t v79 = *(void *)(v106 + 88);
        }
        std::string::basic_string[abi:ne180100]((uint64_t)&v112, v79 + 11);
        if ((v112.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          id v80 = &v112;
        }
        else {
          id v80 = (std::string *)v112.__r_.__value_.__r.__words[0];
        }
        if (v79)
        {
          if (*(char *)(v106 + 103) >= 0) {
            long long v81 = (const void *)(v106 + 80);
          }
          else {
            long long v81 = *(const void **)(v106 + 80);
          }
          memmove(v80, v81, v79);
        }
        strcpy((char *)v80 + v79, "/meta_data.");
        if ((v132.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v82 = &v132;
        }
        else {
          std::string::size_type v82 = (std::string *)v132.__r_.__value_.__r.__words[0];
        }
        if ((v132.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v132.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v132.__r_.__value_.__l.__size_;
        }
        float v84 = std::string::append(&v112, (const std::string::value_type *)v82, size);
        long long v85 = *(_OWORD *)&v84->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v84->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v85;
        v84->__r_.__value_.__l.__size_ = 0;
        v84->__r_.__value_.__r.__words[2] = 0;
        v84->__r_.__value_.__r.__words[0] = 0;
        int v86 = std::string::append(&__p, ".info");
        long long v87 = *(_OWORD *)&v86->__r_.__value_.__l.__data_;
        v124.__r_.__value_.__r.__words[2] = v86->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v124.__r_.__value_.__l.__data_ = v87;
        v86->__r_.__value_.__l.__size_ = 0;
        v86->__r_.__value_.__r.__words[2] = 0;
        v86->__r_.__value_.__r.__words[0] = 0;
        if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          unint64_t v88 = &v124;
        }
        else {
          unint64_t v88 = (std::string *)v124.__r_.__value_.__r.__words[0];
        }
        char v89 = [v78 stringWithUTF8String:v88];
        if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v124.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v112.__r_.__value_.__l.__data_);
        }
        id v90 = [MEMORY[0x1E4F28D90] dataWithJSONObject:v110 options:1 error:0];
        [v90 writeToFile:v89 atomically:1];
        espresso_plan_destroy(v100);
        espresso_context_destroy(v99);

        if (v28) {
          nitro::nitro_function::nitro_function(v28);
        }
        if (v101)
        {
          nitro::nitro_function::nitro_function(v101);
          nitro::nitro_function::nitro_function(v101);
        }
        if (v129) {
          nitro::nitro_function::nitro_function(v129);
        }
        if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v132.__r_.__value_.__l.__data_);
        }

        ++v103;
      }
      while (v103 != v98);
      uint64_t v98 = [obj countByEnumeratingWithState:&v133 objects:v137 count:16];
    }
    while (v98);
  }
}

void sub_192B304A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

id cut_network(void *a1, void *a2, const void **a3, unint64_t a4, unint64_t a5, unint64_t *a6, const std::string::value_type *a7)
{
  v132[6] = *MEMORY[0x1E4F143B8];
  if (a5 <= a4)
  {
    id v66 = 0;
  }
  else
  {
    if (*((char *)a3 + 23) >= 0) {
      size_t v11 = *((unsigned __int8 *)a3 + 23);
    }
    else {
      size_t v11 = (size_t)a3[1];
    }
    std::string::basic_string[abi:ne180100]((uint64_t)&v121, v11 + 1);
    if ((v121.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v12 = &v121;
    }
    else {
      unint64_t v12 = (std::string *)v121.__r_.__value_.__r.__words[0];
    }
    if (v11)
    {
      if (*((char *)a3 + 23) >= 0) {
        long long v13 = a3;
      }
      else {
        long long v13 = *a3;
      }
      memmove(v12, v13, v11);
    }
    *(_WORD *)((char *)&v12->__r_.__value_.__l.__data_ + v11) = 47;
    int v14 = a7[23];
    if (v14 >= 0) {
      id v15 = a7;
    }
    else {
      id v15 = *(const std::string::value_type **)a7;
    }
    if (v14 >= 0) {
      std::string::size_type v16 = *((unsigned __int8 *)a7 + 23);
    }
    else {
      std::string::size_type v16 = *((void *)a7 + 1);
    }
    unsigned int v17 = std::string::append(&v121, v15, v16);
    int v19 = (std::string::value_type *)v17->__r_.__value_.__r.__words[0];
    std::string::size_type size = v17->__r_.__value_.__l.__size_;
    *(_DWORD *)id v129 = v17->__r_.__value_.__r.__words[2];
    *(_DWORD *)&v129[3] = *(_DWORD *)((char *)&v17->__r_.__value_.__r.__words[2] + 3);
    int v20 = SHIBYTE(v17->__r_.__value_.__r.__words[2]);
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v121.__r_.__value_.__l.__data_);
    }
    std::string v21 = *(std::__shared_weak_count **)(*a1 + 24);
    v120[0] = *(void *)(*a1 + 16);
    v120[1] = (uint64_t)v21;
    if (v21) {
      atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v119[0] = 0;
    v119[1] = 0;
    __s = v19;
    int v99 = v20;
    Espresso::sequential_builder::sequential_builder((uint64_t)&v121, v120, 0, v119);
    char v95 = (uint64_t *)a7;
    std::string::size_type __sz = size;
    if (v21) {
      nitro::nitro_function::nitro_function(v21);
    }
    uint64_t v22 = a4 << 32;
    unint64_t v23 = a5;
    do
    {
      uint64_t v24 = (void *)*a1;
      uint64_t v25 = (std::__shared_weak_count *)a1[1];
      if (v25) {
        atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      memset(&__p, 0, sizeof(__p));
      Espresso::sequential_builder::copy_layer_from_network((uint64_t)&v121, v24, v22 >> 32, (const std::string **)&__p);
      v114.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
      std::vector<Espresso::profiler_t::compiler_analytics_entry_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&v114);
      if (v25) {
        nitro::nitro_function::nitro_function(v25);
      }
      v22 += 0x100000000;
      --v23;
    }
    while (a4 != v23);
    Espresso::sequential_builder::build_from_shapes((uint64_t)&v121, *a1 + 184, &v116);
    v113.__r_.__value_.__r.__words[0] = 0;
    uint64_t i = v116;
    uint64_t v28 = *(void *)(v116 + 32);
    uint64_t v27 = *(void *)(v116 + 40);
    if (v27 != v28)
    {
      if (*a2 == a4 && a2[1] == a5)
      {
        do
        {
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v113;
          long long v29 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(i + 96, (unint64_t *)&v113, (uint64_t)&std::piecewise_construct, (uint64_t **)&__p);
          uint64_t v31 = v29[3];
          uint64_t v30 = v29[4];
          uint64_t i = v116;
          while (v31 != v30)
          {
            if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(a2 + 7, v31))
            {
              uint64_t v32 = *(void *)(*(void *)(*(void *)(i + 32) + 16 * v113.__r_.__value_.__r.__words[0]) + 64);
              std::string::basic_string[abi:ne180100]<0>(&__p, "is_output");
              v114.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
              *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v32 + 240, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (long long **)&v114)+ 10) = 1;
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__p.__r_.__value_.__l.__data_);
              }
            }
            v31 += 24;
          }
          ++v113.__r_.__value_.__r.__words[0];
          uint64_t v28 = *(void *)(i + 32);
          uint64_t v27 = *(void *)(i + 40);
        }
        while (v113.__r_.__value_.__r.__words[0] < (v27 - v28) >> 4 && *a2 == a4 && a2[1] == a5);
      }
      unint64_t v115 = 0;
      if (v27 != v28)
      {
        do
        {
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v115;
          uint64_t v33 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(i + 96, &v115, (uint64_t)&std::piecewise_construct, (uint64_t **)&__p);
          memset(&__p, 0, sizeof(__p));
          unsigned int v35 = (long long *)v33[3];
          uint64_t v34 = (long long *)v33[4];
          for (i = v116; v35 != v34; unsigned int v35 = (long long *)((char *)v35 + 24))
          {
            if (*((char *)v35 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&v114, *(const std::string::value_type **)v35, *((void *)v35 + 1));
            }
            else
            {
              long long v36 = *v35;
              v114.__r_.__value_.__r.__words[2] = *((void *)v35 + 2);
              *(_OWORD *)&v114.__r_.__value_.__l.__data_ = v36;
            }
            if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(void **)(i + 264), &v114))
            {
              int64_t v37 = HIBYTE(v114.__r_.__value_.__r.__words[2]);
              if ((v114.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              {
                uint64_t v38 = &v114;
              }
              else
              {
                int64_t v37 = v114.__r_.__value_.__l.__size_;
                uint64_t v38 = (std::string *)v114.__r_.__value_.__r.__words[0];
              }
              if (v37 >= 18)
              {
                int v39 = (char *)v38 + v37;
                unint64_t v40 = v38;
                do
                {
                  uint64_t v41 = (char *)memchr(v40, 95, v37 - 17);
                  if (!v41) {
                    break;
                  }
                  BOOL v42 = *(void *)v41 == 0x5F78745F7874635FLL && *((void *)v41 + 1) == 0x6B6361626C6C6166;
                  if (v42 && *((_WORD *)v41 + 8) == 24415)
                  {
                    if (v41 != v39)
                    {
                      std::string::size_type v44 = v41 - (char *)v38;
                      if (v44 != -1)
                      {
                        std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__erase_unique<std::string>((void *)(i + 256), &v114);
                        std::string::erase(&v114, v44, 1uLL);
                        v113.__r_.__value_.__r.__words[0] = (std::string::size_type)&v114;
                        std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(i + 256), &v114, (long long **)&v113)[56] = 1;
                      }
                    }
                    break;
                  }
                  unint64_t v40 = (std::string *)(v41 + 1);
                  int64_t v37 = v39 - (char *)v40;
                }
                while (v39 - (char *)v40 >= 18);
              }
            }
            uint64_t v45 = (_OWORD *)__p.__r_.__value_.__l.__size_;
            if (__p.__r_.__value_.__l.__size_ >= __p.__r_.__value_.__r.__words[2])
            {
              int v47 = std::vector<std::string>::__push_back_slow_path<std::string const&>(&__p.__r_.__value_.__l.__data_, (uint64_t)&v114);
            }
            else
            {
              if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0)
              {
                std::string::__init_copy_ctor_external((std::string *)__p.__r_.__value_.__l.__size_, v114.__r_.__value_.__l.__data_, v114.__r_.__value_.__l.__size_);
              }
              else
              {
                long long v46 = *(_OWORD *)&v114.__r_.__value_.__l.__data_;
                *(void *)(__p.__r_.__value_.__l.__size_ + 16) = *((void *)&v114.__r_.__value_.__l + 2);
                *uint64_t v45 = v46;
              }
              int v47 = (std::string *)((char *)v45 + 24);
            }
            __p.__r_.__value_.__l.__size_ = (std::string::size_type)v47;
            if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v114.__r_.__value_.__l.__data_);
            }
          }
          v113.__r_.__value_.__r.__words[0] = (std::string::size_type)&v115;
          id v48 = (std::string *)(std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(i + 96, &v115, (uint64_t)&std::piecewise_construct, (uint64_t **)&v113)+ 3);
          if (v48 != &__p) {
            std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)v48, (std::string *)__p.__r_.__value_.__l.__data_, (std::string *)__p.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 3));
          }
          v113.__r_.__value_.__r.__words[0] = (std::string::size_type)&v115;
          uint64_t v49 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(i + 56, &v115, (uint64_t)&std::piecewise_construct, (uint64_t **)&v113);
          memset(&v114, 0, sizeof(v114));
          uint64_t v50 = (long long *)v49[3];
          uint64_t v51 = (long long *)v49[4];
          if (v50 != v51)
          {
            unint64_t v101 = (uint64_t **)(i + 232);
            do
            {
              if (*((char *)v50 + 23) < 0)
              {
                std::string::__init_copy_ctor_external(&v113, *(const std::string::value_type **)v50, *((void *)v50 + 1));
              }
              else
              {
                long long v52 = *v50;
                v113.__r_.__value_.__r.__words[2] = *((void *)v50 + 2);
                *(_OWORD *)&v113.__r_.__value_.__l.__data_ = v52;
              }
              if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(void **)(i + 240), &v113))
              {
                int64_t v53 = HIBYTE(v113.__r_.__value_.__r.__words[2]);
                if ((v113.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                {
                  int v54 = &v113;
                }
                else
                {
                  int64_t v53 = v113.__r_.__value_.__l.__size_;
                  int v54 = (std::string *)v113.__r_.__value_.__r.__words[0];
                }
                if (v53 >= 18)
                {
                  uint64_t v55 = (char *)v54 + v53;
                  unint64_t v56 = v54;
                  do
                  {
                    unint64_t v57 = (char *)memchr(v56, 95, v53 - 17);
                    if (!v57) {
                      break;
                    }
                    if (*(void *)v57 == 0x5F78745F7874635FLL
                      && *((void *)v57 + 1) == 0x6B6361626C6C6166
                      && *((_WORD *)v57 + 8) == 24415)
                    {
                      if (v57 != v55)
                      {
                        std::string::size_type v60 = v57 - (char *)v54;
                        if (v60 != -1)
                        {
                          std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__erase_unique<std::string>(v101, &v113);
                          std::string::erase(&v113, v60, 0xFFFFFFFFFFFFFFFFLL);
                          uint64_t v130 = &v113;
                          std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v101, &v113, (long long **)&v130)[56] = 1;
                        }
                      }
                      break;
                    }
                    unint64_t v56 = (std::string *)(v57 + 1);
                    int64_t v53 = v55 - (char *)v56;
                  }
                  while (v55 - (char *)v56 >= 18);
                }
              }
              id v61 = (_OWORD *)v114.__r_.__value_.__l.__size_;
              if (v114.__r_.__value_.__l.__size_ >= v114.__r_.__value_.__r.__words[2])
              {
                uint64_t v63 = std::vector<std::string>::__push_back_slow_path<std::string const&>(&v114.__r_.__value_.__l.__data_, (uint64_t)&v113);
              }
              else
              {
                if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0)
                {
                  std::string::__init_copy_ctor_external((std::string *)v114.__r_.__value_.__l.__size_, v113.__r_.__value_.__l.__data_, v113.__r_.__value_.__l.__size_);
                }
                else
                {
                  long long v62 = *(_OWORD *)&v113.__r_.__value_.__l.__data_;
                  *(void *)(v114.__r_.__value_.__l.__size_ + 16) = *((void *)&v113.__r_.__value_.__l + 2);
                  *id v61 = v62;
                }
                uint64_t v63 = (std::string *)((char *)v61 + 24);
              }
              v114.__r_.__value_.__l.__size_ = (std::string::size_type)v63;
              if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v113.__r_.__value_.__l.__data_);
              }
              uint64_t v50 = (long long *)((char *)v50 + 24);
            }
            while (v50 != v51);
          }
          uint64_t v130 = (std::string *)&v115;
          uint64_t v64 = (std::string *)(std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(i + 56, &v115, (uint64_t)&std::piecewise_construct, (uint64_t **)&v130)+ 3);
          if (v64 != &v114) {
            std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)v64, (std::string *)v114.__r_.__value_.__l.__data_, (std::string *)v114.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(v114.__r_.__value_.__l.__size_ - v114.__r_.__value_.__r.__words[0]) >> 3));
          }
          v113.__r_.__value_.__r.__words[0] = (std::string::size_type)&v114;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v113);
          v114.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v114);
          ++v115;
        }
        while (v115 < (uint64_t)(*(void *)(i + 40) - *(void *)(i + 32)) >> 4);
      }
    }
    uint64_t v65 = v117;
    v112[0] = i;
    v112[1] = (uint64_t)v117;
    if (v117) {
      atomic_fetch_add_explicit(&v117->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v99 < 0)
    {
      std::string::__init_copy_ctor_external(&__str, __s, __sz);
    }
    else
    {
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)__s;
      __str.__r_.__value_.__l.__size_ = __sz;
      LODWORD(__str.__r_.__value_.__r.__words[2]) = *(_DWORD *)v129;
      *(_DWORD *)((char *)&__str.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)&v129[3];
      *((unsigned char *)&__str.__r_.__value_.__s + 23) = v99;
    }
    std::string::basic_string[abi:ne180100]<0>(v109, "");
    std::string::basic_string[abi:ne180100]<0>(v107, "");
    Espresso::dump_network(v112, &__str, (uint64_t)v109, (uint64_t)v107);
    if (v108 < 0) {
      operator delete(v107[0]);
    }
    if (v110 < 0) {
      operator delete(v109[0]);
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    if (v65) {
      nitro::nitro_function::nitro_function(v65);
    }
    v131[0] = @"index";
    uint64_t v67 = NSString;
    std::to_string(&__p, *a6);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    BOOL v69 = [v67 stringWithUTF8String:p_p];
    v132[0] = v69;
    v131[1] = @"path";
    if (*((char *)v95 + 23) >= 0) {
      id v70 = v95;
    }
    else {
      id v70 = (uint64_t *)*v95;
    }
    uint64_t v71 = [NSString stringWithUTF8String:v70];
    v132[1] = v71;
    _OWORD v131[2] = @"compute_path";
    int v72 = [NSNumber numberWithInt:*(unsigned int *)(*(void *)(*(void *)(*a1 + 32) + 16 * a4) + 12)];
    void v132[2] = v72;
    v131[3] = @"engine";
    id v73 = [NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(*(void *)(*a1 + 32) + 16 * a4) + 8)];
    v132[3] = v73;
    v131[4] = @"inputs";
    id v74 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    v132[4] = v74;
    v131[5] = @"outputs";
    id v75 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    v132[5] = v75;
    long long v76 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v132 forKeys:v131 count:6];

    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    size_t v77 = *(void **)(i + 232);
    if (v77 != (void *)(i + 240))
    {
      do
      {
        unint64_t v78 = (std::__shared_weak_count *)a1[1];
        unint64_t v105 = (const Espresso::net *)*a1;
        uint64_t v106 = v78;
        if (v78) {
          atomic_fetch_add_explicit(&v78->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        size_t v79 = v77 + 4;
        id v80 = get_blob_info((long long *)v77 + 2, &v105);
        if (v106) {
          nitro::nitro_function::nitro_function(v106);
        }
        long long v81 = [v76 objectForKeyedSubscript:@"inputs"];
        if (*((char *)v77 + 55) < 0) {
          size_t v79 = (void *)*v79;
        }
        std::string::size_type v82 = [NSString stringWithUTF8String:v79];
        [v81 setObject:v80 forKeyedSubscript:v82];

        char v83 = (void *)v77[1];
        if (v83)
        {
          do
          {
            float v84 = v83;
            char v83 = (void *)*v83;
          }
          while (v83);
        }
        else
        {
          do
          {
            float v84 = (void *)v77[2];
            BOOL v42 = *v84 == (void)v77;
            size_t v77 = v84;
          }
          while (!v42);
        }
        size_t v77 = v84;
      }
      while (v84 != (void *)(i + 240));
      uint64_t i = v116;
    }
    long long v85 = *(void **)(i + 256);
    int v86 = (void *)(i + 264);
    if (v85 != v86)
    {
      do
      {
        long long v87 = (std::__shared_weak_count *)a1[1];
        uint64_t v103 = (const Espresso::net *)*a1;
        uint64_t v104 = v87;
        if (v87) {
          atomic_fetch_add_explicit(&v87->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        unint64_t v88 = v85 + 4;
        char v89 = get_blob_info((long long *)v85 + 2, &v103);
        if (v104) {
          nitro::nitro_function::nitro_function(v104);
        }
        id v90 = [v76 objectForKeyedSubscript:@"outputs"];
        if (*((char *)v85 + 55) < 0) {
          unint64_t v88 = (void *)*v88;
        }
        uint64_t v91 = [NSString stringWithUTF8String:v88];
        [v90 setObject:v89 forKeyedSubscript:v91];

        id v92 = (void *)v85[1];
        if (v92)
        {
          do
          {
            uint64_t v93 = v92;
            id v92 = (void *)*v92;
          }
          while (v92);
        }
        else
        {
          do
          {
            uint64_t v93 = (void *)v85[2];
            BOOL v42 = *v93 == (void)v85;
            long long v85 = v93;
          }
          while (!v42);
        }
        long long v85 = v93;
      }
      while (v93 != v86);
    }
    ++*a6;
    id v66 = v76;

    if (v117) {
      nitro::nitro_function::nitro_function(v117);
    }
    std::deque<std::pair<std::shared_ptr<Espresso::abstract_context>,Espresso::compute_path>>::~deque[abi:ne180100]((uint64_t)&v128);
    if (v127) {
      nitro::nitro_function::nitro_function(v127);
    }
    if (v126) {
      nitro::nitro_function::nitro_function(v126);
    }
    if (v125) {
      nitro::nitro_function::nitro_function(v125);
    }
    if (v124 < 0) {
      operator delete(v123);
    }
    std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v121.__r_.__value_.__r.__words[2], v122);
    if (v121.__r_.__value_.__l.__size_) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v121.__r_.__value_.__l.__size_);
    }
    if (v99 < 0) {
      operator delete(__s);
    }
  }

  return v66;
}

void sub_192B313F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, int a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,std::__shared_weak_count *a44,void *__p,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52)
{
  if (v52) {
    nitro::nitro_function::nitro_function(v52);
  }
  if (a44) {
    nitro::nitro_function::nitro_function(a44);
  }
  Espresso::sequential_builder::~sequential_builder((Espresso::sequential_builder *)&a52);
  if (a15 < 0) {
    operator delete(a12);
  }
  _Unwind_Resume(a1);
}

id get_blob_info(long long *a1, const Espresso::net **a2)
{
  v50[11] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (uint64_t)*a2 + 136;
  v31[0] = a1;
  uint64_t v5 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v4, (unsigned __int8 *)a1, v31);
  Espresso::abstract_blob_container::shape((char *)v45, *((void *)v5 + 5));
  uint64_t v7 = *a2;
  uint64_t v6 = (std::__shared_weak_count *)a2[1];
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v38[0] = v45[0];
  v38[1] = v45[1];
  uint64_t v39 = v46;
  std::string __p = 0;
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v47, (uint64_t)v48, (v48 - (unsigned char *)v47) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v43, v7, (const Espresso::layer_shape *)v38, 1);
  if (__p)
  {
    uint64_t v41 = __p;
    operator delete(__p);
  }
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }
  long long v8 = (uint64_t **)((char *)*a2 + 352);
  v31[0] = a1;
  int v9 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8, a1, (uint64_t)&std::piecewise_construct, v31);
  long long v34 = *(_OWORD *)(v9 + 56);
  long long v36 = 0;
  uint64_t v37 = 0;
  unsigned int v35 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v35, *((const void **)v9 + 9), *((void *)v9 + 10), (uint64_t)(*((void *)v9 + 10) - *((void *)v9 + 9)) >> 2);
  uint64_t v10 = (uint64_t)*a2 + 136;
  v31[0] = a1;
  size_t v11 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v10, (unsigned __int8 *)a1, v31);
  unsigned int v12 = (*(uint64_t (**)(void))(**((void **)v11 + 5) + 32))(*((void *)v11 + 5));
  uint64_t v13 = HIDWORD(v34);
  compute_for_iosurface_params((uint64_t)v31, v43, v12, SHIDWORD(v34), v35, (uint64_t)v36);
  v29[0] = 0;
  v29[1] = 0;
  uint64_t v30 = 0;
  if ((v44 + 1) >= 3) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Unrecognized layout");
  }
  MEMORY[0x192FF0F50](v29, off_1E5747AE8[v44 + 1]);
  v49[0] = @"name";
  if (*((char *)a1 + 23) >= 0) {
    int v14 = (uint64_t *)a1;
  }
  else {
    int v14 = *(uint64_t **)a1;
  }
  uint64_t v28 = [NSString stringWithUTF8String:v14];
  v50[0] = v28;
  v50[1] = @"iosurface";
  v49[1] = @"type";
  void v49[2] = @"n";
  id v15 = [NSNumber numberWithInt:v43[0]];
  void v50[2] = v15;
  v49[3] = @"k";
  std::string::size_type v16 = [NSNumber numberWithInt:v43[1]];
  v50[3] = v16;
  v49[4] = @"d";
  unsigned int v17 = [NSNumber numberWithInt:v43[2]];
  v50[4] = v17;
  v49[5] = @"h";
  int64_t v18 = [NSNumber numberWithInt:v43[3]];
  v50[5] = v18;
  v49[6] = @"w";
  int v19 = [NSNumber numberWithInt:v43[4]];
  v50[6] = v19;
  v49[7] = @"interleave";
  int v20 = [NSNumber numberWithInt:v13];
  _DWORD v50[7] = v20;
  v49[8] = @"layout";
  if (v30 >= 0) {
    std::string v21 = v29;
  }
  else {
    std::string v21 = (void **)v29[0];
  }
  uint64_t v22 = [NSString stringWithUTF8String:v21];
  v50[8] = v22;
  v49[9] = @"bytes_per_row";
  unint64_t v23 = [NSNumber numberWithUnsignedLong:v31[2]];
  v50[9] = v23;
  v49[10] = @"compute_path";
  if (DWORD2(v34) == -1) {
    uint64_t v24 = v12;
  }
  else {
    uint64_t v24 = DWORD2(v34);
  }
  uint64_t v25 = [NSNumber numberWithInt:v24];
  v50[10] = v25;
  unint64_t v26 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v50 forKeys:v49 count:11];

  if (SHIBYTE(v30) < 0) {
    operator delete(v29[0]);
  }
  if (v32)
  {
    uint64_t v33 = v32;
    operator delete(v32);
  }
  if (v35)
  {
    long long v36 = v35;
    operator delete(v35);
  }
  if (v47)
  {
    id v48 = v47;
    operator delete(v47);
  }

  return v26;
}

void sub_192B31AB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22) {
    operator delete(a22);
  }
  if (a28) {
    operator delete(a28);
  }
  if (a50) {
    operator delete(a50);
  }
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__erase_unique<std::string>(void *a1, void *a2)
{
  uint64_t v3 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>((uint64_t)a1, a2);
  if (a1 + 1 != v3)
  {
    std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::erase(a1, (uint64_t)v3);
  }
}

uint64_t Espresso::zephyr::node_t::on_removed_input(uint64_t this, uint64_t a2, Espresso::zephyr::value_t *a3)
{
  uint64_t v4 = (void *)*((void *)a3 + 7);
  uint64_t v3 = (void *)*((void *)a3 + 8);
  if (v4 != v3)
  {
    while (*v4 != this || v4[1] != a2)
    {
      v4 += 2;
      if (v4 == v3) {
        return this;
      }
    }
  }
  uint64_t v5 = v4 + 2;
  if (v4 != v3 && v5 != v3)
  {
    do
    {
      if (*v5 != this || v5[1] != a2)
      {
        *(_OWORD *)uint64_t v4 = *(_OWORD *)v5;
        v4 += 2;
      }
      v5 += 2;
    }
    while (v5 != v3);
    uint64_t v3 = (void *)*((void *)a3 + 8);
  }
  if (v4 != v3) {
    *((void *)a3 + 8) = v4;
  }
  return this;
}

uint64_t Espresso::zephyr::node_t::on_removed_output(uint64_t this, unint64_t a2, Espresso::zephyr::value_t *a3)
{
  if (*((void *)a3 + 10) == this) {
    *((void *)a3 + 10) = 0;
  }
  return this;
}

void Espresso::zephyr::node_t::on_added_input(Espresso::zephyr::node_t *this, uint64_t a2, Espresso::zephyr::value_t *a3)
{
  uint64_t v7 = (void *)*((void *)a3 + 8);
  unint64_t v6 = *((void *)a3 + 9);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = *((void *)a3 + 7);
    uint64_t v10 = ((uint64_t)v7 - v9) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v6 - v9;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    if (v13) {
      unint64_t v13 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v13);
    }
    else {
      uint64_t v14 = 0;
    }
    id v15 = (void *)(v13 + 16 * v10);
    unint64_t v16 = v13 + 16 * v14;
    *id v15 = this;
    v15[1] = a2;
    long long v8 = v15 + 2;
    int64_t v18 = (char *)*((void *)a3 + 7);
    unsigned int v17 = (char *)*((void *)a3 + 8);
    if (v17 != v18)
    {
      do
      {
        *((_OWORD *)v15 - 1) = *((_OWORD *)v17 - 1);
        v15 -= 2;
        v17 -= 16;
      }
      while (v17 != v18);
      unsigned int v17 = (char *)*((void *)a3 + 7);
    }
    *((void *)a3 + 7) = v15;
    *((void *)a3 + 8) = v8;
    *((void *)a3 + 9) = v16;
    if (v17) {
      operator delete(v17);
    }
  }
  else
  {
    *uint64_t v7 = this;
    v7[1] = a2;
    long long v8 = v7 + 2;
  }
  *((void *)a3 + 8) = v8;
}

uint64_t Espresso::zephyr::node_t::on_added_output(uint64_t this, unint64_t a2, Espresso::zephyr::value_t *a3)
{
  *((void *)a3 + 10) = this;
  return this;
}

uint64_t Espresso::zephyr::node_t::replace_input_with(Espresso::zephyr::node_t *this, Espresso::zephyr::value_t *a2, Espresso::zephyr::value_t *a3)
{
  uint64_t v4 = *((void *)this + 15);
  uint64_t v3 = *((void *)this + 16);
  if (v3 == v4)
  {
    char v9 = 0;
  }
  else
  {
    unint64_t v8 = 0;
    char v9 = 0;
    do
    {
      if (*(Espresso::zephyr::value_t **)(v4 + 8 * v8) == a2)
      {
        Espresso::zephyr::node_t::replace_input_at(this, v8, a3);
        uint64_t v4 = *((void *)this + 15);
        uint64_t v3 = *((void *)this + 16);
        char v9 = 1;
      }
      ++v8;
    }
    while (v8 < (v3 - v4) >> 3);
  }
  return v9 & 1;
}

void Espresso::zephyr::node_t::replace_input_at(Espresso::zephyr::node_t *this, unint64_t a2, Espresso::zephyr::value_t *a3)
{
  uint64_t v3 = *((void *)this + 15);
  if (a2 >= (*((void *)this + 16) - v3) >> 3) {
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v7 = *(Espresso::zephyr::value_t **)(v3 + 8 * a2);
  *(void *)(v3 + 8 * a2) = a3;
  Espresso::zephyr::node_t::on_removed_input((uint64_t)this, a2, v7);

  Espresso::zephyr::node_t::on_added_input(this, a2, a3);
}

uint64_t Espresso::zephyr::node_t::replace_output_with(Espresso::zephyr::node_t *this, Espresso::zephyr::value_t *a2, Espresso::zephyr::value_t *a3)
{
  uint64_t v4 = *((void *)this + 12);
  uint64_t v3 = *((void *)this + 13);
  if (v3 == v4)
  {
    char v9 = 0;
  }
  else
  {
    unint64_t v8 = 0;
    char v9 = 0;
    do
    {
      if (*(Espresso::zephyr::value_t **)(v4 + 8 * v8) == a2)
      {
        Espresso::zephyr::node_t::replace_output_at((uint64_t)this, v8, a3);
        uint64_t v4 = *((void *)this + 12);
        uint64_t v3 = *((void *)this + 13);
        char v9 = 1;
      }
      ++v8;
    }
    while (v8 < (v3 - v4) >> 3);
  }
  return v9 & 1;
}

uint64_t Espresso::zephyr::node_t::replace_output_at(uint64_t this, unint64_t a2, Espresso::zephyr::value_t *a3)
{
  uint64_t v3 = *(void *)(this + 96);
  if (a2 >= (*(void *)(this + 104) - v3) >> 3) {
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v4 = *(void *)(v3 + 8 * a2);
  *(void *)(v3 + 8 * a2) = a3;
  if (*(void *)(v4 + 80) == this) {
    *(void *)(v4 + 80) = 0;
  }
  *((void *)a3 + 10) = this;
  return this;
}

void Espresso::zephyr::node_t::add_input(Espresso::zephyr::node_t *this, Espresso::zephyr::value_t *a2)
{
  uint64_t v5 = (void *)*((void *)this + 16);
  unint64_t v4 = *((void *)this + 17);
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v7 = *((void *)this + 15);
    uint64_t v8 = ((uint64_t)v5 - v7) >> 3;
    if ((unint64_t)(v8 + 1) >> 61) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v9 = v4 - v7;
    uint64_t v10 = v9 >> 2;
    if (v9 >> 2 <= (unint64_t)(v8 + 1)) {
      uint64_t v10 = v8 + 1;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    if (v11) {
      unint64_t v11 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v11);
    }
    else {
      uint64_t v12 = 0;
    }
    unint64_t v13 = (void *)(v11 + 8 * v8);
    unint64_t v14 = v11 + 8 * v12;
    *unint64_t v13 = a2;
    unint64_t v6 = v13 + 1;
    unint64_t v16 = (char *)*((void *)this + 15);
    id v15 = (char *)*((void *)this + 16);
    if (v15 != v16)
    {
      do
      {
        uint64_t v17 = *((void *)v15 - 1);
        v15 -= 8;
        *--unint64_t v13 = v17;
      }
      while (v15 != v16);
      id v15 = (char *)*((void *)this + 15);
    }
    *((void *)this + 15) = v13;
    *((void *)this + 16) = v6;
    *((void *)this + 17) = v14;
    if (v15) {
      operator delete(v15);
    }
  }
  else
  {
    *uint64_t v5 = a2;
    unint64_t v6 = v5 + 1;
  }
  *((void *)this + 16) = v6;
  uint64_t v18 = (((uint64_t)v6 - *((void *)this + 15)) >> 3) - 1;

  Espresso::zephyr::node_t::on_added_input(this, v18, a2);
}

void Espresso::zephyr::node_t::add_output(Espresso::zephyr::node_t *this, Espresso::zephyr::value_t *a2)
{
  uint64_t v5 = (void *)*((void *)this + 13);
  unint64_t v4 = *((void *)this + 14);
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v7 = *((void *)this + 12);
    uint64_t v8 = ((uint64_t)v5 - v7) >> 3;
    if ((unint64_t)(v8 + 1) >> 61) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v9 = v4 - v7;
    uint64_t v10 = v9 >> 2;
    if (v9 >> 2 <= (unint64_t)(v8 + 1)) {
      uint64_t v10 = v8 + 1;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    if (v11) {
      unint64_t v11 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v11);
    }
    else {
      uint64_t v12 = 0;
    }
    unint64_t v13 = (void *)(v11 + 8 * v8);
    unint64_t v14 = v11 + 8 * v12;
    *unint64_t v13 = a2;
    unint64_t v6 = v13 + 1;
    unint64_t v16 = (char *)*((void *)this + 12);
    id v15 = (char *)*((void *)this + 13);
    if (v15 != v16)
    {
      do
      {
        uint64_t v17 = *((void *)v15 - 1);
        v15 -= 8;
        *--unint64_t v13 = v17;
      }
      while (v15 != v16);
      id v15 = (char *)*((void *)this + 12);
    }
    *((void *)this + 12) = v13;
    *((void *)this + 13) = v6;
    *((void *)this + 14) = v14;
    if (v15) {
      operator delete(v15);
    }
  }
  else
  {
    *uint64_t v5 = a2;
    unint64_t v6 = v5 + 1;
  }
  *((void *)this + 13) = v6;
  *((void *)a2 + 10) = this;
}

uint64_t Espresso::zephyr::node_t::erase_input_at(Espresso::zephyr::node_t *this, uint64_t a2)
{
  unint64_t v4 = (char *)*((void *)this + 16);
  uint64_t v5 = (Espresso::zephyr::value_t **)(*((void *)this + 15) + 8 * a2);
  unint64_t v6 = *v5;
  int64_t v7 = v4 - (char *)(v5 + 1);
  if (v4 != (char *)(v5 + 1)) {
    memmove(v5, v5 + 1, v4 - (char *)(v5 + 1));
  }
  *((void *)this + 16) = (char *)v5 + v7;

  return Espresso::zephyr::node_t::on_removed_input((uint64_t)this, a2, v6);
}

void *Espresso::zephyr::node_t::erase_output_at(void *this, uint64_t a2)
{
  uint64_t v2 = this;
  uint64_t v3 = (char *)this[13];
  unint64_t v4 = (char *)(this[12] + 8 * a2);
  uint64_t v5 = *(void *)v4;
  int64_t v6 = v3 - (v4 + 8);
  if (v3 != v4 + 8) {
    this = memmove(v4, v4 + 8, v3 - (v4 + 8));
  }
  v2[13] = &v4[v6];
  if (*(void **)(v5 + 80) == v2) {
    *(void *)(v5 + 80) = 0;
  }
  return this;
}

double Espresso::zephyr::node_t::node_t(Espresso::zephyr::node_t *this, Espresso::zephyr::function_t *a2)
{
  uint64_t v2 = (atomic_ullong *)*((void *)a2 + 3);
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = v2;
  *(void *)this = atomic_fetch_add(v2, 1uLL);
  *((void *)this + 3) = a2;
  double result = 0.0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((void *)this + 10) = 0;
  *((_DWORD *)this + 22) = 1065353216;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((void *)this + 20) = 0;
  return result;
}

{
  atomic_ullong *v2;
  double result;

  uint64_t v2 = (atomic_ullong *)*((void *)a2 + 3);
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = v2;
  *(void *)this = atomic_fetch_add(v2, 1uLL);
  *((void *)this + 3) = a2;
  double result = 0.0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((void *)this + 10) = 0;
  *((_DWORD *)this + 22) = 1065353216;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((void *)this + 20) = 0;
  return result;
}

uint64_t Espresso::zephyr::node_t::node_t(uint64_t a1, uint64_t a2, uint64_t *a3, std::string *__str)
{
  int64_t v6 = *(atomic_ullong **)(a2 + 24);
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = v6;
  unint64_t add = atomic_fetch_add(v6, 1uLL);
  *(void *)(a1 + 24) = a2;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(void *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_DWORD *)(a1 + 88) = 1065353216;
  *(_OWORD *)(a1 + 144) = 0u;
  uint64_t v8 = (std::string *)(a1 + 144);
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(void *)(a1 + 160) = 0;
  uint64_t v9 = *a3;
  *a3 = 0;
  uint64_t v10 = *(void *)(a1 + 8);
  *(void *)a1 = add;
  *(void *)(a1 + 8) = v9;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  std::string::operator=(v8, __str);
  return a1;
}

void sub_192B323A0(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 167) < 0) {
    operator delete(*v3);
  }
  int64_t v7 = *(void **)(v1 + 120);
  if (v7)
  {
    *(void *)(v1 + 128) = v7;
    operator delete(v7);
  }
  uint64_t v8 = *v5;
  if (*v5)
  {
    *(void *)(v1 + 104) = v8;
    operator delete(v8);
  }
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100](v2);
  if (*(char *)(v1 + 55) < 0) {
    operator delete(*v4);
  }
  uint64_t v9 = *(void *)(v1 + 8);
  *(void *)(v1 + 8) = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  _Unwind_Resume(a1);
}

uint64_t Espresso::zephyr::node_t::remove_from_graphs(Espresso::zephyr::node_t *this)
{
  long long v25 = 0u;
  long long v26 = 0u;
  float v27 = *((float *)this + 22);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__rehash<true>((uint64_t)&v25, *((void *)this + 8));
  uint64_t v3 = (void *)*((void *)this + 9);
  if (v3)
  {
    unint64_t v4 = *((void *)&v25 + 1);
    do
    {
      unint64_t v5 = v3[2];
      unint64_t v6 = 0x9DDFEA08EB382D69 * (((8 * v5) + 8) ^ HIDWORD(v5));
      unint64_t v7 = 0x9DDFEA08EB382D69 * (HIDWORD(v5) ^ (v6 >> 47) ^ v6);
      unint64_t v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v4)
      {
        uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v4);
        v9.i16[0] = vaddlv_u8(v9);
        if (v9.u32[0] > 1uLL)
        {
          unint64_t v1 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
          if (v8 >= v4) {
            unint64_t v1 = v8 % v4;
          }
        }
        else
        {
          unint64_t v1 = v8 & (v4 - 1);
        }
        uint64_t v10 = *(void **)(v25 + 8 * v1);
        if (v10)
        {
          for (uint64_t i = (void *)*v10; i; uint64_t i = (void *)*i)
          {
            unint64_t v12 = i[1];
            if (v12 == v8)
            {
              if (i[2] == v5) {
                goto LABEL_41;
              }
            }
            else
            {
              if (v9.u32[0] > 1uLL)
              {
                if (v12 >= v4) {
                  v12 %= v4;
                }
              }
              else
              {
                v12 &= v4 - 1;
              }
              if (v12 != v1) {
                break;
              }
            }
          }
        }
      }
      unint64_t v13 = operator new(0x18uLL);
      *unint64_t v13 = 0;
      v13[1] = v8;
      v13[2] = v3[2];
      float v14 = (float)(unint64_t)(*((void *)&v26 + 1) + 1);
      if (!v4 || (float)(v27 * (float)v4) < v14)
      {
        BOOL v15 = (v4 & (v4 - 1)) != 0;
        if (v4 < 3) {
          BOOL v15 = 1;
        }
        unint64_t v16 = v15 | (2 * v4);
        unint64_t v17 = vcvtps_u32_f32(v14 / v27);
        if (v16 <= v17) {
          size_t v18 = v17;
        }
        else {
          size_t v18 = v16;
        }
        std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__rehash<true>((uint64_t)&v25, v18);
        unint64_t v4 = *((void *)&v25 + 1);
        if ((*((void *)&v25 + 1) & (*((void *)&v25 + 1) - 1)) != 0)
        {
          if (v8 >= *((void *)&v25 + 1)) {
            unint64_t v1 = v8 % *((void *)&v25 + 1);
          }
          else {
            unint64_t v1 = v8;
          }
        }
        else
        {
          unint64_t v1 = (*((void *)&v25 + 1) - 1) & v8;
        }
      }
      uint64_t v19 = v25;
      int v20 = *(void **)(v25 + 8 * v1);
      if (v20)
      {
        *unint64_t v13 = *v20;
      }
      else
      {
        *unint64_t v13 = v26;
        *(void *)&long long v26 = v13;
        *(void *)(v19 + 8 * v1) = &v26;
        if (!*v13) {
          goto LABEL_40;
        }
        unint64_t v21 = *(void *)(*v13 + 8);
        if ((v4 & (v4 - 1)) != 0)
        {
          if (v21 >= v4) {
            v21 %= v4;
          }
        }
        else
        {
          v21 &= v4 - 1;
        }
        int v20 = (void *)(v25 + 8 * v21);
      }
      *int v20 = v13;
LABEL_40:
      ++*((void *)&v26 + 1);
LABEL_41:
      uint64_t v3 = (void *)*v3;
    }
    while (v3);
  }
  uint64_t v22 = (uint64_t **)v26;
  if ((void)v26)
  {
    int v23 = 0;
    do
    {
      v23 |= (*(uint64_t (**)(uint64_t *, Espresso::zephyr::node_t *))(*v22[2] + 24))(v22[2], this);
      uint64_t v22 = (uint64_t **)*v22;
    }
    while (v22);
  }
  else
  {
    LOBYTE(v23) = 0;
  }
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&v25);
  return v23 & 1;
}

void sub_192B326F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t Espresso::zephyr::node_t::remove_if_unused(Espresso::zephyr::node_t *this)
{
  for (uint64_t i = *((void *)this + 12); ; i += 8)
  {
    if (i == *((void *)this + 13)) {
      return Espresso::zephyr::node_t::remove_from_graphs(this);
    }
    if (*(void *)(*(void *)i + 56) != *(void *)(*(void *)i + 64)) {
      break;
    }
  }
  return 0;
}

void non-virtual thunk to'Espresso::ANECompilerEngine::split_kernel::~split_kernel(Espresso::ANECompilerEngine::split_kernel *this)
{
  uint64_t v2 = (Espresso::ANECompilerEngine::split_kernel *)((char *)this - 336);
  *((void *)this - 42) = &unk_1EE33F320;
  *(void *)this = &unk_1EE33F480;
  uint64_t v3 = (void *)*((void *)this + 27);
  if (v3)
  {
    *((void *)this + 28) = v3;
    operator delete(v3);
  }
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v2);

  JUMPOUT(0x192FF16B0);
}

{
  Espresso::base_kernel *v2;
  void *v3;
  uint64_t vars8;

  uint64_t v2 = (Espresso::ANECompilerEngine::split_kernel *)((char *)this - 336);
  *((void *)this - 42) = &unk_1EE33F320;
  *(void *)this = &unk_1EE33F480;
  uint64_t v3 = (void *)*((void *)this + 27);
  if (v3)
  {
    *((void *)this + 28) = v3;
    operator delete(v3);
  }
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);

  Espresso::base_kernel::~base_kernel(v2);
}

void non-virtual thunk to'Espresso::ANECompilerEngine::split_kernel::compile(Espresso::ANECompilerEngine::split_kernel *this, Espresso::ANECompilerEngine::compiler *a2, void **a3)
{
}

void Espresso::ANECompilerEngine::split_kernel::compile(Espresso::ANECompilerEngine::split_kernel *this, Espresso::ANECompilerEngine::compiler *a2, void **a3)
{
  unint64_t v4 = (std::__shared_weak_count *)*((void *)a2 + 2);
  if (!v4 || (unint64_t v7 = std::__shared_weak_count::lock(v4)) == 0 || (v8 = *((void *)a2 + 1)) == 0) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Inconsistent state: null network");
  }
  if (!*(void *)(v8 + 576)) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Inconsistent state: blob_storage");
  }
  uint64_t v9 = v8 + 136;
  v32[0] = a3[6];
  uint64_t v10 = (std::__shared_weak_count *)*((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8 + 136, (unsigned __int8 *)v32[0], (long long **)v32)+ 6);
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v32[0] = a3;
  unint64_t v11 = (std::__shared_weak_count *)*((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v9, (unsigned __int8 *)a3, (long long **)v32)+ 6);
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v47 = 0;
  id v48 = 0;
  unint64_t v49 = 0;
  Espresso::ANECompilerEngine::compiler::layer_graph_info_t::layer_graph_info_t(&v41, (const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *)a3);
  long long v29 = a2;
  uint64_t v30 = v11;
  uint64_t v31 = v10;
  uint64_t v12 = *((int *)this + 70);
  if (0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a3[4] - (unsigned char *)a3[3]) >> 3) + 1 != v12) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Number of top blobs doesn't match num split outputs");
  }
  if ((int)v12 >= 1)
  {
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = -24;
    do
    {
      if (v13) {
        unint64_t v16 = (const std::string *)((char *)a3[3] + v15);
      }
      else {
        unint64_t v16 = (const std::string *)a3;
      }
      std::string::operator=(&v41, v16);
      unint64_t v17 = objc_opt_new();
      Espresso::ANECompilerEngine::compiler::unit_t::unit_t(v32, (id *)&v41.__r_.__value_.__l.__data_);
      size_t v18 = v39;
      uint64_t v39 = @"InputView";

      uint64_t v19 = *((unsigned int *)this + 71);
      if (v19 != 2) {
        Espresso::throw_exception_selector<Espresso::invalid_state_error,int &>("unsupported split axis %s", v19);
      }
      [v17 setObject:@"Channel" forKeyedSubscript:@"Dimension"];
      int v20 = [NSNumber numberWithInt:v14];
      [v17 setObject:v20 forKeyedSubscript:@"Offset"];

      unint64_t v21 = [NSNumber numberWithInt:*(unsigned int *)(*((void *)this + 69) + 4 * v13)];
      [v17 setObject:v21 forKeyedSubscript:@"Size"];

      int v22 = *(_DWORD *)(*((void *)this + 69) + 4 * v13);
      objc_storeStrong(&v40, v17);
      int v23 = v48;
      if ((unint64_t)v48 >= v49)
      {
        unint64_t v25 = 0x8E38E38E38E38E39 * (((uint64_t)v48 - v47) >> 4);
        unint64_t v26 = v25 + 1;
        if (v25 + 1 > 0x1C71C71C71C71C7) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        if (0x1C71C71C71C71C72 * ((uint64_t)(v49 - v47) >> 4) > v26) {
          unint64_t v26 = 0x1C71C71C71C71C72 * ((uint64_t)(v49 - v47) >> 4);
        }
        if (0x8E38E38E38E38E39 * ((uint64_t)(v49 - v47) >> 4) >= 0xE38E38E38E38E3) {
          unint64_t v27 = 0x1C71C71C71C71C7;
        }
        else {
          unint64_t v27 = v26;
        }
        int v54 = &v49;
        if (v27) {
          unint64_t v27 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v27);
        }
        else {
          uint64_t v28 = 0;
        }
        uint64_t v50 = (void **)v27;
        uint64_t v51 = (std::string *)(v27 + 144 * v25);
        long long v52 = v51;
        unint64_t v53 = v27 + 144 * v28;
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v51, (uint64_t)v32);
        v52 += 6;
        std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v47, &v50);
        uint64_t v24 = v48;
        std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&v50);
      }
      else
      {
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v48, (uint64_t)v32);
        uint64_t v24 = v23 + 6;
      }
      id v48 = v24;

      if (v37 < 0) {
        operator delete(__p);
      }
      uint64_t v50 = (void **)&v35;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v50);
      uint64_t v50 = (void **)&v34;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v50);
      if (v33 < 0) {
        operator delete(v32[0]);
      }
      uint64_t v14 = (v22 + v14);

      ++v13;
      v15 += 24;
    }
    while (v13 < *((int *)this + 70));
  }
  (*(void (**)(char *, Espresso::ANECompilerEngine::compiler *, uint64_t *))(*((void *)this + 42) + 24))((char *)this + 336, v29, &v47);

  if (v45 < 0) {
    operator delete(v44);
  }
  v32[0] = &v43;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v32);
  v32[0] = &v42;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v32);
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v41.__r_.__value_.__l.__data_);
  }
  v32[0] = &v47;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)v32);
  if (v30) {
    nitro::nitro_function::nitro_function(v30);
  }
  if (v31) {
    nitro::nitro_function::nitro_function(v31);
  }
  nitro::nitro_function::nitro_function(v7);
}

void sub_192B32CF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void **a17)
{
  a17 = (void **)(v20 - 152);
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100](&a17);
  if (v19)
  {
    nitro::nitro_function::nitro_function(v19);
    if (!v18)
    {
LABEL_3:
      if (!v17) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if (!v18)
  {
    goto LABEL_3;
  }
  nitro::nitro_function::nitro_function(v18);
  if (!v17) {
LABEL_5:
  }
    _Unwind_Resume(a1);
LABEL_4:
  nitro::nitro_function::nitro_function(v17);
  goto LABEL_5;
}

void Espresso::ANECompilerEngine::split_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
}

void Espresso::ANECompilerEngine::split_kernel::~split_kernel(Espresso::ANECompilerEngine::split_kernel *this)
{
  *(void *)this = &unk_1EE33F320;
  uint64_t v2 = (Espresso::ANECompilerEngine::split_kernel *)((char *)this + 336);
  *((void *)this + 42) = &unk_1EE33F480;
  uint64_t v3 = (void *)*((void *)this + 69);
  if (v3)
  {
    *((void *)this + 70) = v3;
    operator delete(v3);
  }
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(v2);
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  Espresso::ANECompilerEngine::ane_kernel *v2;
  void *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EE33F320;
  uint64_t v2 = (Espresso::ANECompilerEngine::split_kernel *)((char *)this + 336);
  *((void *)this + 42) = &unk_1EE33F480;
  uint64_t v3 = (void *)*((void *)this + 69);
  if (v3)
  {
    *((void *)this + 70) = v3;
    operator delete(v3);
  }
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(v2);

  Espresso::base_kernel::~base_kernel(this);
}

void non-virtual thunk to'Espresso::ANECompilerEngine::split_nd_kernel::~split_nd_kernel(Espresso::ANECompilerEngine::split_nd_kernel *this)
{
  unint64_t v1 = (Espresso::ANECompilerEngine::split_nd_kernel *)((char *)this - 800);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);

  JUMPOUT(0x192FF16B0);
}

{
  Espresso::base_kernel *v1;
  uint64_t vars8;

  unint64_t v1 = (Espresso::ANECompilerEngine::split_nd_kernel *)((char *)this - 800);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);

  Espresso::base_kernel::~base_kernel(v1);
}

void non-virtual thunk to'Espresso::ANECompilerEngine::split_nd_kernel::compile(Espresso::ANECompilerEngine::split_nd_kernel *this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3)
{
}

void Espresso::ANECompilerEngine::split_nd_kernel::compile(Espresso::ANECompilerEngine::split_nd_kernel *this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3)
{
  unint64_t v4 = (std::__shared_weak_count *)*((void *)a2 + 2);
  if (!v4 || (unint64_t v7 = std::__shared_weak_count::lock(v4)) == 0 || (v8 = *((void *)a2 + 1)) == 0) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Inconsistent state: null network");
  }
  if (!*(void *)(v8 + 576)) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Inconsistent state: blob_storage");
  }
  v55.__r_.__value_.__r.__words[0] = *((void *)a3 + 6);
  uint64_t v9 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8 + 136, (unsigned __int8 *)v55.__r_.__value_.__l.__data_, (long long **)&v55);
  uint64_t v10 = (const void *)*((void *)v9 + 5);
  unint64_t v11 = (std::__shared_weak_count *)*((void *)v9 + 6);
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v53 = this;
  v55.__r_.__value_.__r.__words[0] = (std::string::size_type)a3;
  uint64_t v12 = (std::__shared_weak_count *)*((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8 + 136, (unsigned __int8 *)a3, (long long **)&v55)+ 6);
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ANECAxisForNDAxis = Espresso::ANECompilerEngine::GetANECAxisForNDAxis((Espresso::ANECompilerEngine *)(*((_DWORD *)v53 + 70) + (v13[46] & (*((int *)v53 + 70) >> 31))), (int)v13[46], *(unsigned char *)(v8 + 1281));
  uint64_t v63 = 0;
  uint64_t v64 = 0;
  unint64_t v65 = 0;
  Espresso::ANECompilerEngine::ane_arch_allow_network_override(v8 + 472);
  uint64_t v15 = (Espresso::ANECompilerEngine *)objc_claimAutoreleasedReturnValue();
  unint64_t v17 = v15;
  if (ANECAxisForNDAxis == @"Width")
  {
    size_t v18 = v13 + 44;
  }
  else if (ANECAxisForNDAxis == @"Height")
  {
    size_t v18 = v13 + 43;
  }
  else if (ANECAxisForNDAxis == @"Channel")
  {
    size_t v18 = v13 + 41;
  }
  else
  {
    if (ANECAxisForNDAxis != @"Batch")
    {
      if (ANECAxisForNDAxis != @"Depth") {
        Espresso::throw_exception_selector<Espresso::generic_error>("Unrecognized ANEC axis.");
      }
      if (!Espresso::ANECompilerEngine::is_mix(v15, v16))
      {
        size_t v18 = v13 + 42;
        goto LABEL_21;
      }
LABEL_77:
      Espresso::throw_exception_selector<Espresso::unsupported_configuration_error>("Unsupported axis for split_nd.");
    }
    if (Espresso::ANECompilerEngine::is_mix(v15, v16)) {
      goto LABEL_77;
    }
    size_t v18 = v13 + 40;
  }
LABEL_21:
  int v54 = ANECAxisForNDAxis;
  unint64_t v49 = v17;
  uint64_t v50 = v12;
  uint64_t v51 = v11;
  long long v52 = v7;
  if (*((_DWORD *)v53 + 72))
  {
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    unint64_t v21 = (char *)v53 + 288;
    do
    {
      if (!*(_DWORD *)&v21[4 * v19]) {
        break;
      }
      int v22 = objc_opt_new();
      Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&v55.__r_.__value_.__l.__data_, (id *)a3);
      int v23 = v61;
      id v61 = @"InputView";

      [v22 setObject:v54 forKeyedSubscript:@"Dimension"];
      uint64_t v24 = [NSNumber numberWithInt:v20];
      [v22 setObject:v24 forKeyedSubscript:@"Offset"];

      unint64_t v25 = [NSNumber numberWithInt:*(unsigned int *)&v21[4 * v19]];
      [v22 setObject:v25 forKeyedSubscript:@"Size"];

      int v26 = *(_DWORD *)&v21[4 * v19];
      objc_storeStrong(v62, v22);
      if (v19) {
        std::string::operator=(&v55, (const std::string *)(*((void *)a3 + 3) + 24 * (v19 - 1)));
      }
      unint64_t v27 = v64;
      if ((unint64_t)v64 >= v65)
      {
        unint64_t v29 = 0x8E38E38E38E38E39 * (((uint64_t)v64 - v63) >> 4);
        unint64_t v30 = v29 + 1;
        if (v29 + 1 > 0x1C71C71C71C71C7) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        if (0x1C71C71C71C71C72 * ((uint64_t)(v65 - v63) >> 4) > v30) {
          unint64_t v30 = 0x1C71C71C71C71C72 * ((uint64_t)(v65 - v63) >> 4);
        }
        uint64_t v31 = (void **)(0x8E38E38E38E38E39 * ((uint64_t)(v65 - v63) >> 4) >= 0xE38E38E38E38E3
                      ? 0x1C71C71C71C71C7
                      : v30);
        id v70 = &v65;
        if (v31) {
          uint64_t v31 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>((unint64_t)v31);
        }
        else {
          uint64_t v32 = 0;
        }
        id v66 = v31;
        uint64_t v67 = (std::string *)&v31[18 * v29];
        int v68 = v67;
        BOOL v69 = &v31[18 * v32];
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v67, (uint64_t)&v55);
        v68 += 6;
        std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v63, &v66);
        uint64_t v28 = v64;
        std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&v66);
      }
      else
      {
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v64, (uint64_t)&v55);
        uint64_t v28 = v27 + 6;
      }
      uint64_t v64 = v28;

      if (v59 < 0) {
        operator delete(__p);
      }
      id v66 = (void **)v57;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v66);
      id v66 = (void **)v56;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v66);
      if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v55.__r_.__value_.__l.__data_);
      }
      uint64_t v20 = (v26 + v20);

      ++v19;
    }
    while (v19 != 128);
  }
  else
  {
    int v33 = *((_DWORD *)v53 + 71);
    if (v33 >= 1)
    {
      uint64_t v34 = 0;
      uint64_t v35 = 0;
      uint64_t v36 = *v18;
      uint64_t v37 = -24;
      uint64_t v38 = ((int)v36 / v33);
      do
      {
        uint64_t v39 = objc_opt_new();
        Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&v55.__r_.__value_.__l.__data_, (id *)a3);
        id v40 = v61;
        id v61 = @"InputView";

        [v39 setObject:v54 forKeyedSubscript:@"Dimension"];
        std::string v41 = [NSNumber numberWithInt:v34];
        [v39 setObject:v41 forKeyedSubscript:@"Offset"];

        if (v35 == *((_DWORD *)v53 + 71) - 1) {
          [NSNumber numberWithInt:v36];
        }
        else {
        uint64_t v42 = [NSNumber numberWithInt:v38];
        }
        [v39 setObject:v42 forKeyedSubscript:@"Size"];

        objc_storeStrong(v62, v39);
        if (v35) {
          std::string::operator=(&v55, (const std::string *)(*((void *)a3 + 3) + v37));
        }
        uint64_t v43 = v64;
        if ((unint64_t)v64 >= v65)
        {
          unint64_t v45 = 0x8E38E38E38E38E39 * (((uint64_t)v64 - v63) >> 4);
          unint64_t v46 = v45 + 1;
          if (v45 + 1 > 0x1C71C71C71C71C7) {
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          if (0x1C71C71C71C71C72 * ((uint64_t)(v65 - v63) >> 4) > v46) {
            unint64_t v46 = 0x1C71C71C71C71C72 * ((uint64_t)(v65 - v63) >> 4);
          }
          if (0x8E38E38E38E38E39 * ((uint64_t)(v65 - v63) >> 4) >= 0xE38E38E38E38E3) {
            unint64_t v47 = 0x1C71C71C71C71C7;
          }
          else {
            unint64_t v47 = v46;
          }
          id v70 = &v65;
          if (v47) {
            unint64_t v47 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v47);
          }
          else {
            uint64_t v48 = 0;
          }
          id v66 = (void **)v47;
          uint64_t v67 = (std::string *)(v47 + 144 * v45);
          int v68 = v67;
          BOOL v69 = (void **)(v47 + 144 * v48);
          std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v67, (uint64_t)&v55);
          v68 += 6;
          std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v63, &v66);
          int v44 = v64;
          std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&v66);
        }
        else
        {
          std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v64, (uint64_t)&v55);
          int v44 = v43 + 6;
        }
        uint64_t v64 = v44;

        if (v59 < 0) {
          operator delete(__p);
        }
        id v66 = (void **)v57;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v66);
        id v66 = (void **)v56;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v66);
        if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v55.__r_.__value_.__l.__data_);
        }

        ++v35;
        v37 += 24;
        uint64_t v36 = (v36 - v38);
        uint64_t v34 = (v34 + v38);
      }
      while (v35 < *((int *)v53 + 71));
    }
  }
  (*(void (**)(uint64_t, Espresso::ANECompilerEngine::compiler *, uint64_t *))(*((void *)v53 + 100) + 24))((uint64_t)v53 + 800, a2, &v63);

  v55.__r_.__value_.__r.__words[0] = (std::string::size_type)&v63;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&v55);
  if (v50) {
    nitro::nitro_function::nitro_function(v50);
  }
  if (v51) {
    nitro::nitro_function::nitro_function(v51);
  }
  nitro::nitro_function::nitro_function(v52);
}

void sub_192B33750(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void **a20)
{
  a20 = (void **)(v23 - 152);
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100](&a20);
  if (v22)
  {
    nitro::nitro_function::nitro_function(v22);
    if (!v21)
    {
LABEL_3:
      if (!v20) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if (!v21)
  {
    goto LABEL_3;
  }
  nitro::nitro_function::nitro_function(v21);
  if (!v20) {
LABEL_5:
  }
    _Unwind_Resume(a1);
LABEL_4:
  nitro::nitro_function::nitro_function(v20);
  goto LABEL_5;
}

uint64_t Espresso::ANECompilerEngine::split_nd_kernel::is_valid_for_engine(int *a1, uint64_t a2, void *a3)
{
  uint64_t v6 = a3[6];
  unint64_t v7 = *(std::__shared_weak_count **)(v6 + 80);
  if (v7 && (uint64_t v8 = std::__shared_weak_count::lock(v7)) != 0)
  {
    uint64_t v9 = v8;
    char v10 = 0;
    unint64_t v11 = *(uint64_t ***)(v6 + 72);
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    unint64_t v11 = 0;
    uint64_t v9 = 0;
    char v10 = 1;
  }
  uint64_t v12 = *a3;
  uint64_t v13 = *(void *)(*a3 + 32);
  long long v14 = *(_OWORD *)(*a3 + 16);
  v45[0] = *(_OWORD *)*a3;
  v45[1] = v14;
  uint64_t v46 = v13;
  unint64_t v47 = 0;
  uint64_t v48 = 0;
  uint64_t v49 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v47, *(const void **)(v12 + 40), *(void *)(v12 + 48), (uint64_t)(*(void *)(v12 + 48) - *(void *)(v12 + 40)) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v50, (const Espresso::net *)v11, (const Espresso::layer_shape *)v45, 1);
  if (v47)
  {
    uint64_t v48 = v47;
    operator delete(v47);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  uint64_t v15 = Espresso::ANECompilerEngine::ane_arch_allow_network_override((uint64_t)(v11 + 59));
  if (!Espresso::ANECompilerEngine::blob_shape_ane_compatible(v50, v15))
  {
    int v22 = *(int64x2_t **)a2;
    uint64_t v21 = *(void *)(a2 + 8);
    v44[0] = v22;
    v44[1] = (int64x2_t *)v21;
    if (v21) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v21 + 8), 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v38, "[Unsupported Split_nd] Incompatible Input Size");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)v38, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v44, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    goto LABEL_19;
  }
  unint64_t v16 = *(void **)(*(void *)a3[6] + 224 * a3[9] + 136);
  ANECAxisForNDAxis = Espresso::ANECompilerEngine::GetANECAxisForNDAxis((Espresso::ANECompilerEngine *)((v51 & (a1[70] >> 31)) + a1[70]), v51, 0);
  uint64_t v19 = ANECAxisForNDAxis;
  if (ANECAxisForNDAxis != @"Depth" && ANECAxisForNDAxis != @"Batch"
    || !Espresso::ANECompilerEngine::is_mix((Espresso::ANECompilerEngine *)v15, v18))
  {
    int is_mix = Espresso::ANECompilerEngine::is_mix((Espresso::ANECompilerEngine *)v15, v18);
    if (v19 == @"Width") {
      int v24 = is_mix;
    }
    else {
      int v24 = 0;
    }
    if (v24 == 1)
    {
      if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(v11[45], v16))
      {
        v38[0] = v16;
        unint64_t v25 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v11 + 44, v16, (uint64_t)&std::piecewise_construct, (long long **)v38);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)(v25 + 56);
        v41[0] = 0;
        v41[1] = 0;
        __p.__r_.__value_.__r.__words[2] = 0;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p.__r_.__value_.__r.__words[2], *((const void **)v25 + 9), *((void *)v25 + 10), (uint64_t)(*((void *)v25 + 10) - *((void *)v25 + 9)) >> 2);
        int v26 = __p.__r_.__value_.__r.__words[1];
        if (LODWORD(__p.__r_.__value_.__r.__words[1]) == -1) {
          int v26 = a1[253];
        }
        if (__p.__r_.__value_.__r.__words[2])
        {
          v41[0] = *((void *)&__p.__r_.__value_.__l + 2);
          operator delete((void *)__p.__r_.__value_.__r.__words[2]);
        }
      }
      else
      {
        int v26 = a1[253];
      }
      if (v26 == 4 || v26 == 2) {
        int v28 = 64;
      }
      else {
        int v28 = 32;
      }
      if (a1[72])
      {
        uint64_t v29 = 0;
        int v30 = v28 - 1;
        do
        {
          int v31 = a1[v29 + 72];
          if (!v31) {
            break;
          }
          if ((v31 & v30) != 0)
          {
            uint64_t v34 = *(int64x2_t **)a2;
            uint64_t v21 = *(void *)(a2 + 8);
            v35[0] = v34;
            v35[1] = (int64x2_t *)v21;
            if (v21) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v21 + 8), 1uLL, memory_order_relaxed);
            }
            std::string::basic_string[abi:ne180100]<0>(v38, "[Unsupported Split_nd] Invalid Width alignment");
            Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)v38, (uint64_t)a3, 0);
            Espresso::emit_kernel_validation_warning(v35, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
            goto LABEL_19;
          }
          ++v29;
        }
        while (v29 != 128);
      }
      else if (((v50[4] / a1[71]) & (v28 - 1)) != 0)
      {
        uint64_t v32 = *(int64x2_t **)a2;
        uint64_t v21 = *(void *)(a2 + 8);
        v36[0] = v32;
        v36[1] = (int64x2_t *)v21;
        if (v21) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v21 + 8), 1uLL, memory_order_relaxed);
        }
        std::string::basic_string[abi:ne180100]<0>(v38, "[Unsupported Split_nd] Invalid Width alignment");
        Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)v38, (uint64_t)a3, 0);
        Espresso::emit_kernel_validation_warning(v36, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
        goto LABEL_19;
      }
    }
    uint64_t v21 = 1;
    goto LABEL_54;
  }
  uint64_t v20 = *(int64x2_t **)a2;
  uint64_t v21 = *(void *)(a2 + 8);
  v37[0] = v20;
  v37[1] = (int64x2_t *)v21;
  if (v21) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v21 + 8), 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(v38, "[Unsupported Split_nd] Split along Batch and Depth not supported on pre-H13");
  Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)v38, (uint64_t)a3, 0);
  Espresso::emit_kernel_validation_warning(v37, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
LABEL_19:
  if (v43) {
    nitro::nitro_function::nitro_function(v43);
  }
  long long v52 = (void **)&v42;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v52);
  long long v52 = (void **)v41;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v52);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v39 < 0) {
    operator delete(v38[0]);
  }
  if (v21)
  {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v21);
    uint64_t v21 = 0;
  }
LABEL_54:

  if ((v10 & 1) == 0) {
    nitro::nitro_function::nitro_function(v9);
  }
  return v21;
}

void sub_192B33CAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((Espresso::base_kernel::validate_for_engine_warning_t *)&a22);
  if (a21 < 0) {
    operator delete(__p);
  }
  if (v24) {
    nitro::nitro_function::nitro_function(v24);
  }

  if ((v25 & 1) == 0) {
    nitro::nitro_function::nitro_function(v22);
  }
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::split_nd_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
}

void Espresso::ANECompilerEngine::split_nd_kernel::~split_nd_kernel(Espresso::ANECompilerEngine::split_nd_kernel *this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANECompilerEngine::split_nd_kernel *)((char *)this + 800));
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t vars8;

  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANECompilerEngine::split_nd_kernel *)((char *)this + 800));

  Espresso::base_kernel::~base_kernel(this);
}

uint64_t Espresso::ANECompilerEngine::split_nd_kernel::split_nd_kernel(uint64_t a1, uint64_t *a2, int a3, const void *a4)
{
  uint64_t v8 = Espresso::base_kernel::base_kernel(a1, a2);
  *(void *)(a1 + 280) = 0x200000000;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_OWORD *)(a1 + 720) = 0u;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  char v9 = *(unsigned char *)(*a2 + 123);
  *(_OWORD *)(a1 + 936) = 0u;
  *(_OWORD *)(a1 + 952) = 0u;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_OWORD *)(a1 + 840) = 0u;
  *(unsigned char *)(a1 + 856) = 0;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_OWORD *)(a1 + 880) = 0u;
  *(_OWORD *)(a1 + 896) = 0u;
  *(_OWORD *)(a1 + 912) = 0u;
  *(unsigned char *)(a1 + 928) = 0;
  *(_DWORD *)(a1 + 968) = 1065353216;
  *(_WORD *)(a1 + 976) = 0;
  *(unsigned char *)(a1 + 978) = 0;
  __asm { FMOV            V1.2S, #1.0 }
  *(void *)(a1 + 980) = _D1;
  *(unsigned char *)(a1 + 988) = 0;
  *(_OWORD *)(a1 + 992) = 0u;
  *(unsigned char *)(a1 + 1008) = v9;
  *(void *)a1 = &unk_1EE341040;
  *(void *)(a1 + 800) = &unk_1EE3411A0;
  *(_DWORD *)(a1 + 1012) = a3;
  memcpy((void *)(v8 + 280), a4, 0x208uLL);
  return a1;
}

BOOL Espresso::zephyr::ordered_block_t::remove_node(Espresso::zephyr::ordered_block_t *this, Espresso::zephyr::node_t *a2)
{
  BOOL v4 = Espresso::zephyr::graph_t::remove_node(this, a2);
  unint64_t v5 = (void *)((char *)this + 112);
  v17[0] = v17;
  v17[1] = v17;
  uint64_t v18 = 0;
  uint64_t v6 = (void *)*((void *)this + 15);
  if (v6 != (void *)((char *)this + 112))
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = (void *)v6[1];
      if ((Espresso::zephyr::node_t *)v6[2] == a2)
      {
        while (v8 != v5)
        {
          BOOL v9 = v8[2] == (void)a2;
          if ((Espresso::zephyr::node_t *)v8[2] != a2) {
            goto LABEL_10;
          }
          uint64_t v8 = (void *)v8[1];
        }
        BOOL v9 = 1;
        uint64_t v8 = (void *)((char *)this + 112);
LABEL_10:
        if (v6 != v8)
        {
          char v10 = (void *)*v8;
          if (v17 != v5)
          {
            if (v10 == v6)
            {
              uint64_t v13 = 1;
            }
            else
            {
              uint64_t v11 = -1;
              uint64_t v12 = v6;
              do
              {
                uint64_t v12 = (void *)v12[1];
                ++v11;
              }
              while (v12 != v10);
              uint64_t v13 = v11 + 2;
            }
            *((void *)this + 16) -= v13;
            v7 += v13;
            uint64_t v18 = v7;
          }
          uint64_t v14 = *v6;
          *(void *)(v14 + 8) = v10[1];
          *(void *)v10[1] = v14;
          uint64_t v15 = v17[0];
          *(void *)(v17[0] + 8) = v6;
          void *v6 = v15;
          v17[0] = v10;
          v10[1] = v17;
        }
        if (!v9) {
          uint64_t v8 = (void *)v8[1];
        }
      }
      uint64_t v6 = v8;
    }
    while (v8 != v5);
  }
  std::__list_imp<int>::clear(v17);
  return v4;
}

void *Espresso::zephyr::ordered_block_t::insert_node(Espresso::zephyr::ordered_block_t *this, Espresso::zephyr::node_t *a2)
{
  uint64_t v3 = this;
  Espresso::zephyr::graph_t::insert_node((unint64_t)this, a2);
  double result = operator new(0x18uLL);
  uint64_t v5 = *((void *)v3 + 14);
  uint64_t v3 = (Espresso::zephyr::ordered_block_t *)((char *)v3 + 112);
  result[1] = v3;
  result[2] = a2;
  *double result = v5;
  *(void *)(v5 + 8) = result;
  *(void *)uint64_t v3 = result;
  ++*((void *)v3 + 2);
  return result;
}

void Espresso::zephyr::ordered_block_t::~ordered_block_t(Espresso::zephyr::ordered_block_t *this)
{
  *(void *)this = &unk_1EE36EE50;
  std::__list_imp<int>::clear((void *)this + 14);
  Espresso::zephyr::graph_t::~graph_t(this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1EE36EE50;
  std::__list_imp<int>::clear((void *)this + 14);

  Espresso::zephyr::graph_t::~graph_t(this);
}

Espresso::zephyr::graph_t *Espresso::zephyr::ordered_block_t::copy_to_standalone_function(Espresso::zephyr::graph_t *this, Espresso::zephyr::function_t *a2)
{
  if (*((void *)this + 16))
  {
    uint64_t v3 = this;
    BOOL v4 = (void *)((char *)this + 112);
    long long v52 = 0u;
    long long v53 = 0u;
    int v54 = 1065353216;
    uint64_t v5 = (void *)*((void *)this + 15);
    if (v5 == (void *)((char *)this + 112))
    {
      uint64_t v50 = 0;
      uint64_t v51 = 0;
      uint64_t i = &v50;
    }
    else
    {
      do
      {
        uint64_t v6 = (void *)v5[2];
        uint64_t v7 = (unint64_t *)v6[15];
        uint64_t v8 = (unint64_t *)v6[16];
        while (v7 != v8)
        {
          std::__hash_table<Espresso::zephyr::value_t *,std::hash<Espresso::zephyr::value_t *>,std::equal_to<Espresso::zephyr::value_t *>,std::allocator<Espresso::zephyr::value_t *>>::__emplace_unique_key_args<Espresso::zephyr::value_t *,Espresso::zephyr::value_t * const&>((float *)&v52, *v7, *v7);
          ++v7;
        }
        char v10 = (unint64_t *)v6[12];
        BOOL v9 = (unint64_t *)v6[13];
        while (v10 != v9)
        {
          std::__hash_table<Espresso::zephyr::value_t *,std::hash<Espresso::zephyr::value_t *>,std::equal_to<Espresso::zephyr::value_t *>,std::allocator<Espresso::zephyr::value_t *>>::__emplace_unique_key_args<Espresso::zephyr::value_t *,Espresso::zephyr::value_t * const&>((float *)&v52, *v10, *v10);
          ++v10;
        }
        uint64_t v5 = (void *)v5[1];
      }
      while (v5 != v4);
      uint64_t v11 = (void *)v53;
      uint64_t v50 = 0;
      uint64_t v51 = 0;
      for (i = &v50; v11; uint64_t v11 = (void *)*v11)
      {
        unint64_t v12 = v11[2];
        uint64_t v13 = Espresso::zephyr::function_t::new_value((uint64_t)a2, v12 + 32);
        (*(void (**)(void, void))(**((void **)v13 + 1) + 16))(*((void *)v13 + 1), *(void *)(v12 + 8));
        uint64_t v14 = v50;
        uint64_t v15 = &v50;
        unint64_t v16 = &v50;
        if (v50)
        {
          while (1)
          {
            while (1)
            {
              unint64_t v16 = (uint64_t **)v14;
              unint64_t v17 = v14[4];
              if (v12 >= v17) {
                break;
              }
              uint64_t v14 = *v16;
              uint64_t v15 = v16;
              if (!*v16) {
                goto LABEL_18;
              }
            }
            if (v17 >= v12) {
              break;
            }
            uint64_t v14 = v16[1];
            if (!v14)
            {
              uint64_t v15 = v16 + 1;
              goto LABEL_18;
            }
          }
          uint64_t v18 = (uint64_t *)v16;
        }
        else
        {
LABEL_18:
          uint64_t v18 = (uint64_t *)operator new(0x30uLL);
          v18[4] = v12;
          v18[5] = 0;
          *uint64_t v18 = 0;
          v18[1] = 0;
          long long v18[2] = (uint64_t)v16;
          *uint64_t v15 = v18;
          uint64_t v19 = v18;
          if (*i)
          {
            uint64_t i = (uint64_t **)*i;
            uint64_t v19 = *v15;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v50, v19);
          ++v51;
        }
        v18[5] = (uint64_t)v13;
      }
    }
    uint64_t v20 = Espresso::zephyr::graph_t::live_inputs(v3);
    uint64_t v21 = v20 + 1;
    int v22 = (void *)*v20;
    if ((void *)*v20 != v20 + 1)
    {
      do
      {
        uint64_t v23 = (Espresso::zephyr::node_t *)*((void *)a2 + 4);
        int v24 = (Espresso::zephyr::value_t **)std::map<unsigned long,unsigned long>::at(v50, v22[4]);
        Espresso::zephyr::node_t::add_output(v23, *v24);
        char v25 = (void *)v22[1];
        if (v25)
        {
          do
          {
            int v26 = v25;
            char v25 = (void *)*v25;
          }
          while (v25);
        }
        else
        {
          do
          {
            int v26 = (void *)v22[2];
            BOOL v27 = *v26 == (void)v22;
            int v22 = v26;
          }
          while (!v27);
        }
        int v22 = v26;
      }
      while (v26 != v21);
    }
    int v28 = Espresso::zephyr::graph_t::live_outputs(v3);
    uint64_t v29 = v28 + 1;
    int v30 = (void *)*v28;
    if ((void *)*v28 != v28 + 1)
    {
      do
      {
        int v31 = (Espresso::zephyr::node_t *)*((void *)a2 + 6);
        uint64_t v32 = (Espresso::zephyr::value_t **)std::map<unsigned long,unsigned long>::at(v50, v30[4]);
        Espresso::zephyr::node_t::add_output(v31, *v32);
        int v33 = (void *)v30[1];
        if (v33)
        {
          do
          {
            uint64_t v34 = v33;
            int v33 = (void *)*v33;
          }
          while (v33);
        }
        else
        {
          do
          {
            uint64_t v34 = (void *)v30[2];
            BOOL v27 = *v34 == (void)v30;
            int v30 = v34;
          }
          while (!v27);
        }
        int v30 = v34;
      }
      while (v34 != v29);
    }
    std::allocate_shared[abi:ne180100]<Espresso::zephyr::ordered_block_t,std::allocator<Espresso::zephyr::ordered_block_t>,Espresso::zephyr::es_function_t *,void>(&v47, (uint64_t)a2);
    uint64_t v35 = (uint64_t *)((char *)a2 + 64);
    uint64_t v37 = v47;
    uint64_t v36 = v48;
    std::list<std::shared_ptr<Espresso::zephyr::ordered_block_t>>::push_back(v35, (uint64_t)v47, (uint64_t)v48);
    for (uint64_t j = (void *)*((void *)v3 + 15); j != v4; uint64_t j = (void *)j[1])
    {
      char v39 = (void *)j[2];
      id v40 = Espresso::zephyr::function_t::new_detached_node(v39[3], (uint64_t)(v39 + 18));
      (*(void (**)(void, void))(**((void **)v40 + 1) + 16))(*((void *)v40 + 1), v39[1]);
      std::string v41 = (unint64_t *)v39[15];
      uint64_t v42 = (unint64_t *)v39[16];
      while (v41 != v42)
      {
        uint64_t v43 = (Espresso::zephyr::value_t **)std::map<unsigned long,unsigned long>::at(v50, *v41);
        Espresso::zephyr::node_t::add_input((Espresso::zephyr::node_t *)v40, *v43);
        ++v41;
      }
      unint64_t v45 = (unint64_t *)v39[12];
      int v44 = (unint64_t *)v39[13];
      while (v45 != v44)
      {
        uint64_t v46 = (Espresso::zephyr::value_t **)std::map<unsigned long,unsigned long>::at(v50, *v45);
        Espresso::zephyr::node_t::add_output((Espresso::zephyr::node_t *)v40, *v46);
        ++v45;
      }
      Espresso::zephyr::ordered_block_t::insert_node_after(v37, (Espresso::zephyr::node_t *)v40, 0);
    }
    if (v36) {
      nitro::nitro_function::nitro_function(v36);
    }
    std::__tree<int>::destroy(v50);
    return (Espresso::zephyr::graph_t *)std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&v52);
  }
  return this;
}

void sub_192B34534(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, ...)
{
  va_start(va, a7);
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  std::__tree<int>::destroy(a6);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void *Espresso::zephyr::ordered_block_t::insert_node_after(Espresso::zephyr::ordered_block_t *this, Espresso::zephyr::node_t *a2, Espresso::zephyr::node_t *a3)
{
  Espresso::zephyr::graph_t::insert_node((unint64_t)this, a2);
  uint64_t v6 = (uint64_t *)((char *)this + 112);
  for (uint64_t i = *((void *)this + 15); (uint64_t *)i != v6; uint64_t i = *(void *)(i + 8))
  {
    if (*(Espresso::zephyr::node_t **)(i + 16) == a3)
    {
      if (a3 && (uint64_t *)i != v6)
      {
        uint64_t v8 = *(uint64_t **)(i + 8);
        double result = operator new(0x18uLL);
        result[2] = a2;
        uint64_t v10 = *v8;
        *(void *)(v10 + 8) = result;
        *double result = v10;
        *uint64_t v8 = (uint64_t)result;
        result[1] = v8;
        goto LABEL_9;
      }
      break;
    }
  }
  double result = operator new(0x18uLL);
  result[1] = v6;
  result[2] = a2;
  uint64_t v11 = *v6;
  *double result = *v6;
  *(void *)(v11 + 8) = result;
  uint64_t *v6 = (uint64_t)result;
LABEL_9:
  ++*((void *)this + 16);
  return result;
}

void *Espresso::zephyr::ordered_block_t::insert_node_before(Espresso::zephyr::ordered_block_t *this, Espresso::zephyr::node_t *a2, Espresso::zephyr::node_t *a3)
{
  Espresso::zephyr::graph_t::insert_node((unint64_t)this, a2);
  uint64_t v6 = (char *)this + 112;
  uint64_t v7 = (Espresso::zephyr::ordered_block_t *)*((void *)this + 15);
  if (v7 == (Espresso::zephyr::ordered_block_t *)((char *)this + 112)) {
    goto LABEL_9;
  }
  uint64_t v8 = (char *)*((void *)this + 15);
  while (*((Espresso::zephyr::node_t **)v8 + 2) != a3)
  {
    uint64_t v8 = (char *)*((void *)v8 + 1);
    if (v8 == v6) {
      goto LABEL_9;
    }
  }
  if (!a3 || v8 == v6)
  {
LABEL_9:
    double result = operator new(0x18uLL);
    result[1] = v7;
    result[2] = a2;
    *double result = v6;
    *(void *)uint64_t v7 = result;
    *((void *)this + 15) = result;
  }
  else
  {
    double result = operator new(0x18uLL);
    result[2] = a2;
    uint64_t v10 = *(void *)v8;
    *(void *)(v10 + 8) = result;
    *double result = v10;
    *(void *)uint64_t v8 = result;
    result[1] = v8;
  }
  ++*((void *)this + 16);
  return result;
}

uint64_t Espresso::zephyr::ordered_block_t::first_use(Espresso::zephyr::ordered_block_t *this, Espresso::zephyr::value_t *a2)
{
  uint64_t v2 = (char *)this + 112;
  for (uint64_t i = *((void *)this + 15); ; uint64_t i = *(void *)(i + 8))
  {
    if ((char *)i == v2) {
      return 0;
    }
    uint64_t result = *(void *)(i + 16);
    uint64_t v6 = *(void *)(result + 120);
    uint64_t v5 = *(void *)(result + 128);
    uint64_t v7 = v5 - v6;
    if (v5 != v6) {
      break;
    }
LABEL_8:
    ;
  }
  uint64_t v8 = 0;
  unint64_t v9 = v7 >> 3;
  if (v9 <= 1) {
    unint64_t v9 = 1;
  }
  while (*(Espresso::zephyr::value_t **)(v6 + 8 * v8) != a2)
  {
    if (v9 == ++v8) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t Espresso::zephyr::ordered_block_t::match_transform(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 120);
  uint64_t v3 = *(void *)(a1 + 120);
  uint64_t v4 = a1 + 112;
  if (v3 == a1 + 112)
  {
    char v6 = 0;
  }
  else
  {
    char v6 = 0;
    do
    {
      int v7 = std::function<BOOL ()(Espresso::zephyr::node_t *)>::operator()(*(void *)(a2 + 24), *(void *)(v3 + 16));
      uint64_t v8 = (uint64_t *)(v3 + 8);
      if (v7) {
        uint64_t v8 = v2;
      }
      v6 |= v7;
      uint64_t v3 = *v8;
    }
    while (*v8 != v4);
  }
  return v6 & 1;
}

uint64_t Espresso::zephyr::ordered_block_t::match_simple_chain(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v15 = a2;
  int v7 = operator new(0x20uLL);
  *int v7 = &unk_1EE37D9D8;
  v7[1] = a3;
  v7[2] = a4;
  v7[3] = &v15;
  unint64_t v17 = v7;
  uint64_t v10 = *(void **)(a1 + 120);
  uint64_t v8 = (void *)(a1 + 120);
  unint64_t v9 = v10;
  if (v10 == v8 - 1)
  {
    char v11 = 0;
  }
  else
  {
    char v11 = 0;
    do
    {
      int v12 = std::function<BOOL ()(Espresso::zephyr::node_t *)>::operator()((uint64_t)v17, v9[2]);
      uint64_t v13 = v9 + 1;
      if (v12) {
        uint64_t v13 = v8;
      }
      v11 |= v12;
      unint64_t v9 = (void *)*v13;
    }
    while ((void *)*v13 != v8 - 1);
  }
  std::__function::__value_func<BOOL ()(Espresso::zephyr::node_t *)>::~__value_func[abi:ne180100](v16);
  return v11 & 1;
}

void sub_192B348C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<BOOL ()(Espresso::zephyr::node_t *)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *std::__function::__func<Espresso::zephyr::ordered_block_t::match_simple_chain(unsigned long,std::function<BOOL ()(unsigned long,Espresso::zephyr::node_t *)>,std::function<BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>)::$_0,std::allocator<Espresso::zephyr::ordered_block_t::match_simple_chain(unsigned long,std::function<BOOL ()(unsigned long,Espresso::zephyr::node_t *)>,std::function<BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::target_type()
{
}

uint64_t std::__function::__func<Espresso::zephyr::ordered_block_t::match_simple_chain(unsigned long,std::function<BOOL ()(unsigned long,Espresso::zephyr::node_t *)>,std::function<BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>)::$_0,std::allocator<Espresso::zephyr::ordered_block_t::match_simple_chain(unsigned long,std::function<BOOL ()(unsigned long,Espresso::zephyr::node_t *)>,std::function<BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN8Espresso6zephyr15ordered_block_t18match_simple_chainEmNSt3__18functionIFbmPNS0_6node_tEEEENS3_IFbRKNS2_6vectorIS5_NS2_9allocatorIS5_EEEEEEEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<Espresso::zephyr::ordered_block_t::match_simple_chain(unsigned long,std::function<BOOL ()(unsigned long,Espresso::zephyr::node_t *)>,std::function<BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>)::$_0,std::allocator<Espresso::zephyr::ordered_block_t::match_simple_chain(unsigned long,std::function<BOOL ()(unsigned long,Espresso::zephyr::node_t *)>,std::function<BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  std::string __p = 0;
  int v26 = 0;
  unint64_t v27 = 0;
  std::vector<Espresso::net *>::reserve(&__p, **(void **)(a1 + 24));
  if (**(void **)(a1 + 24))
  {
    uint64_t v4 = 0;
    while (1)
    {
      uint64_t v5 = *(void *)(a1 + 8);
      uint64_t v28 = v3;
      uint64_t v29 = v4;
      uint64_t v6 = *(void *)(v5 + 24);
      if (!v6) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      if (((*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v6 + 48))(v6, &v29, &v28) & 1) == 0) {
        break;
      }
      int v7 = v26;
      if ((unint64_t)v26 >= v27)
      {
        unint64_t v9 = (char *)__p;
        uint64_t v10 = (v26 - (unsigned char *)__p) >> 3;
        unint64_t v11 = v10 + 1;
        if ((unint64_t)(v10 + 1) >> 61) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v12 = v27 - (void)__p;
        if ((uint64_t)(v27 - (void)__p) >> 2 > v11) {
          unint64_t v11 = v12 >> 2;
        }
        if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v13 = v11;
        }
        if (v13) {
          unint64_t v13 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v13);
        }
        else {
          uint64_t v14 = 0;
        }
        uint64_t v15 = (char *)(v13 + 8 * v10);
        *(void *)uint64_t v15 = v3;
        uint64_t v8 = v15 + 8;
        if (v7 != v9)
        {
          do
          {
            uint64_t v16 = *((void *)v7 - 1);
            v7 -= 8;
            *((void *)v15 - 1) = v16;
            v15 -= 8;
          }
          while (v7 != v9);
          int v7 = (char *)__p;
        }
        std::string __p = v15;
        unint64_t v27 = v13 + 8 * v14;
        if (v7) {
          operator delete(v7);
        }
      }
      else
      {
        *(void *)int v26 = v3;
        uint64_t v8 = v7 + 8;
      }
      int v26 = v8;
      unint64_t v17 = **(void **)(a1 + 24);
      if (v4 == v17 - 1) {
        goto LABEL_26;
      }
      uint64_t v18 = *(char **)(v3 + 96);
      uint64_t v19 = *(char **)(v3 + 104);
      if (v19 - v18 != 8) {
        break;
      }
      if (v19 == v18) {
        std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
      }
      uint64_t v21 = (uint64_t **)(*(void *)v18 + 56);
      uint64_t v20 = *v21;
      if ((char *)v21[1] - (char *)*v21 != 16) {
        break;
      }
      uint64_t v3 = *v20;
      if (++v4 >= v17) {
        goto LABEL_26;
      }
    }
    uint64_t v23 = 0;
  }
  else
  {
LABEL_26:
    uint64_t v22 = *(void *)(*(void *)(a1 + 16) + 24);
    if (!v22) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    uint64_t v23 = (*(uint64_t (**)(uint64_t, void **))(*(void *)v22 + 48))(v22, &__p);
  }
  if (__p)
  {
    int v26 = (char *)__p;
    operator delete(__p);
  }
  return v23;
}

void sub_192B34B38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

__n128 std::__function::__func<Espresso::zephyr::ordered_block_t::match_simple_chain(unsigned long,std::function<BOOL ()(unsigned long,Espresso::zephyr::node_t *)>,std::function<BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>)::$_0,std::allocator<Espresso::zephyr::ordered_block_t::match_simple_chain(unsigned long,std::function<BOOL ()(unsigned long,Espresso::zephyr::node_t *)>,std::function<BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE37D9D8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<Espresso::zephyr::ordered_block_t::match_simple_chain(unsigned long,std::function<BOOL ()(unsigned long,Espresso::zephyr::node_t *)>,std::function<BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>)::$_0,std::allocator<Espresso::zephyr::ordered_block_t::match_simple_chain(unsigned long,std::function<BOOL ()(unsigned long,Espresso::zephyr::node_t *)>,std::function<BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1EE37D9D8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

void std::__function::__func<Espresso::zephyr::ordered_block_t::match_simple_chain(unsigned long,std::function<BOOL ()(unsigned long,Espresso::zephyr::node_t *)>,std::function<BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>)::$_0,std::allocator<Espresso::zephyr::ordered_block_t::match_simple_chain(unsigned long,std::function<BOOL ()(unsigned long,Espresso::zephyr::node_t *)>,std::function<BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::~__func()
{
}

void *Espresso::zephyr::ordered_block_t::topological_order_coalescing_predicate(Espresso::zephyr::graph_t *a1, uint64_t a2)
{
  _OWORD v75[2] = *MEMORY[0x1E4F143B8];
  uint64_t v71 = &v71;
  int v72 = &v71;
  uint64_t v73 = 0;
  BOOL v69 = 0;
  unint64_t v70 = 0;
  int v68 = &v69;
  unint64_t v63 = *((void *)a1 + 13);
  uint64_t v4 = Espresso::zephyr::graph_t::live_inputs(a1);
  id v66 = 0;
  uint64_t v67 = 0;
  unint64_t v65 = &v66;
  uint64_t v5 = v4 + 1;
  uint64_t v6 = (void *)*v4;
  if ((void *)*v4 != v4 + 1)
  {
    do
    {
      int v7 = &v66;
      if (v65 == &v66) {
        goto LABEL_13;
      }
      uint64_t v8 = v66;
      unint64_t v9 = &v66;
      if (v66)
      {
        do
        {
          int v7 = (uint64_t **)v8;
          uint64_t v8 = (uint64_t *)v8[1];
        }
        while (v8);
      }
      else
      {
        do
        {
          int v7 = (uint64_t **)v9[2];
          BOOL v43 = *v7 == (uint64_t *)v9;
          unint64_t v9 = v7;
        }
        while (v43);
      }
      uint64_t v10 = v7[4];
      if (v10) {
        uint64_t v10 = (uint64_t *)*v10;
      }
      unint64_t v11 = (unint64_t *)v6[4];
      unint64_t v12 = v11 ? *v11 : 0;
      if ((unint64_t)v10 < v12)
      {
LABEL_13:
        if (v66)
        {
          uint64_t v74 = (uint64_t)v7;
          unint64_t v13 = v7 + 1;
        }
        else
        {
          uint64_t v74 = (uint64_t)&v66;
          unint64_t v13 = &v66;
        }
      }
      else
      {
        unint64_t v13 = (uint64_t **)std::__tree<Espresso::zephyr::value_t *,Espresso::zephyr::ir_object_set_compare<Espresso::zephyr::value_t *>,std::allocator<Espresso::zephyr::value_t *>>::__find_equal<Espresso::zephyr::value_t *>((uint64_t)&v65, &v74, v11);
      }
      if (!*v13)
      {
        uint64_t v14 = (uint64_t *)operator new(0x28uLL);
        v14[4] = v6[4];
        uint64_t v15 = v74;
        *uint64_t v14 = 0;
        v14[1] = 0;
        void v14[2] = v15;
        *unint64_t v13 = v14;
        if (*v65)
        {
          unint64_t v65 = (uint64_t **)*v65;
          uint64_t v14 = *v13;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v66, v14);
        ++v67;
      }
      uint64_t v16 = (void *)v6[1];
      if (v16)
      {
        do
        {
          unint64_t v17 = v16;
          uint64_t v16 = (void *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          unint64_t v17 = (void *)v6[2];
          BOOL v43 = *v17 == (void)v6;
          uint64_t v6 = v17;
        }
        while (!v43);
      }
      uint64_t v6 = v17;
    }
    while (v17 != v5);
  }
  if (v70 < v63)
  {
    uint64_t v18 = (void *)((char *)a1 + 112);
    do
    {
      char v19 = 0;
      uint64_t v20 = 0;
      uint64_t v74 = 1;
      do
      {
        char v21 = v19;
        uint64_t v22 = (void *)*((void *)a1 + 15);
        if (v22 == v18) {
          goto LABEL_61;
        }
        int v23 = *((_DWORD *)&v75[-1] + v20);
        do
        {
          int v24 = (void *)v22[2];
          for (uint64_t i = v69; i; uint64_t i = (void *)*i)
          {
            unint64_t v26 = i[4];
            if ((unint64_t)v24 >= v26)
            {
              if (v26 >= (unint64_t)v24) {
                goto LABEL_60;
              }
              ++i;
            }
          }
          unint64_t v27 = (unint64_t **)v24[15];
          uint64_t v28 = (unint64_t **)v24[16];
          if (v27 == v28)
          {
LABEL_56:
            if (v23 == std::function<BOOL ()(Espresso::zephyr::node_t *)>::operator()(*(void *)(a2 + 24), v22[2]))
            {
              uint64_t v36 = operator new(0x18uLL);
              v36[1] = &v71;
              void v36[2] = v24;
              uint64_t v37 = v71;
              *uint64_t v36 = v71;
              v37[1] = v36;
              uint64_t v71 = v36;
              ++v73;
              std::__tree<unsigned long>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t *)&v68, (unint64_t)v24, (uint64_t)v24);
              char v39 = (unint64_t **)v24[12];
              uint64_t v38 = (unint64_t **)v24[13];
              while (v39 != v38)
              {
                uint64_t v64 = *v39;
                std::__tree<Espresso::zephyr::value_t *,Espresso::zephyr::ir_object_set_compare<Espresso::zephyr::value_t *>,std::allocator<Espresso::zephyr::value_t *>>::__emplace_unique_key_args<Espresso::zephyr::value_t *,Espresso::zephyr::value_t * const&>((uint64_t **)&v65, v64, (uint64_t *)&v64);
                ++v39;
              }
            }
            goto LABEL_60;
          }
          char v29 = 1;
          do
          {
            if (!v66)
            {
LABEL_52:
              char v35 = 0;
              goto LABEL_54;
            }
            int v30 = *v27;
            int v31 = v66;
            while (1)
            {
              if (v30) {
                unint64_t v32 = *v30;
              }
              else {
                unint64_t v32 = 0;
              }
              int v33 = (void *)v31[4];
              if (v33)
              {
                int v33 = (void *)*v33;
                if (v32 < (unint64_t)v33) {
                  goto LABEL_51;
                }
              }
              unint64_t v34 = v30 ? *v30 : 0;
              if ((unint64_t)v33 >= v34) {
                break;
              }
              ++v31;
LABEL_51:
              int v31 = (uint64_t *)*v31;
              if (!v31) {
                goto LABEL_52;
              }
            }
            char v35 = 1;
LABEL_54:
            v29 &= v35;
            ++v27;
          }
          while (v27 != v28);
          if (v29) {
            goto LABEL_56;
          }
LABEL_60:
          uint64_t v22 = (void *)v22[1];
        }
        while (v22 != v18);
LABEL_61:
        char v19 = 1;
        uint64_t v20 = 1;
      }
      while ((v21 & 1) == 0);
    }
    while (v70 < v63);
  }
  id v40 = (uint64_t *)((char *)a1 + 112);
  if ((void **)((char *)a1 + 112) != &v71)
  {
    std::string v41 = v72;
    uint64_t v42 = (uint64_t *)*((void *)a1 + 15);
    if (v72 != &v71 && v42 != v40)
    {
      do
      {
        _OWORD v42[2] = v41[2];
        std::string v41 = (void *)v41[1];
        uint64_t v42 = (uint64_t *)v42[1];
        BOOL v43 = v41 == &v71 || v42 == v40;
      }
      while (!v43);
    }
    if (v42 == v40)
    {
      if (v41 != &v71)
      {
        unint64_t v47 = operator new(0x18uLL);
        uint64_t v48 = v47;
        *unint64_t v47 = 0;
        v47[1] = 0;
        _OWORD v47[2] = v41[2];
        uint64_t v49 = (void *)v41[1];
        uint64_t v50 = 1;
        if (v49 != &v71)
        {
          uint64_t v51 = v47;
          do
          {
            unint64_t v47 = operator new(0x18uLL);
            *unint64_t v47 = v51;
            v47[1] = 0;
            _OWORD v47[2] = v49[2];
            v51[1] = v47;
            ++v50;
            uint64_t v49 = (void *)v49[1];
            uint64_t v51 = v47;
          }
          while (v49 != &v71);
        }
        uint64_t v52 = *((void *)a1 + 14);
        *(void *)(v52 + 8) = v48;
        *uint64_t v48 = v52;
        *((void *)a1 + 14) = v47;
        v47[1] = v40;
        *((void *)a1 + 16) += v50;
      }
    }
    else
    {
      uint64_t v44 = *((void *)a1 + 14);
      uint64_t v45 = *v42;
      *(void *)(v45 + 8) = *(void *)(v44 + 8);
      **(void **)(v44 + 8) = v45;
      do
      {
        uint64_t v46 = (uint64_t *)v42[1];
        --*((void *)a1 + 16);
        operator delete(v42);
        uint64_t v42 = v46;
      }
      while (v46 != v40);
    }
  }
  v75[0] = 0;
  v75[1] = 0;
  uint64_t v74 = (uint64_t)v75;
  uint64_t v53 = *((void *)a1 + 15);
  if ((uint64_t *)v53 == v40)
  {
    id v61 = 0;
  }
  else
  {
    do
    {
      int v54 = *(Espresso::zephyr::node_t **)(v53 + 16);
      if (*((void *)v54 + 15) != *((void *)v54 + 16)) {
        goto LABEL_91;
      }
      std::string v55 = (Espresso::zephyr::value_t **)*((void *)v54 + 12);
      unint64_t v56 = (Espresso::zephyr::value_t **)*((void *)v54 + 13);
      if ((char *)v56 - (char *)v55 != 8) {
        goto LABEL_91;
      }
      if (v56 == v55) {
        std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
      }
      unint64_t v57 = *v55;
      if (*((void *)*v55 + 7) != *((void *)*v55 + 8))
      {
        std::string::size_type v58 = (void *)v75[0];
        if (v75[0])
        {
          do
          {
            unint64_t v59 = v58[4];
            if ((unint64_t)v54 >= v59)
            {
              if (v59 >= (unint64_t)v54) {
                goto LABEL_91;
              }
              ++v58;
            }
            std::string::size_type v58 = (void *)*v58;
          }
          while (v58);
        }
        use = (Espresso::zephyr::node_t *)Espresso::zephyr::ordered_block_t::first_use(a1, v57);
        (*(void (**)(Espresso::zephyr::graph_t *, Espresso::zephyr::node_t *))(*(void *)a1 + 24))(a1, v54);
        Espresso::zephyr::ordered_block_t::insert_node_before(a1, v54, use);
        Espresso::zephyr::node_t::add_output(v54, v57);
        std::__tree<unsigned long>::__emplace_unique_key_args<unsigned long,unsigned long const&>(&v74, (unint64_t)v54, (uint64_t)v54);
        uint64_t v53 = *((void *)a1 + 15);
      }
      else
      {
LABEL_91:
        uint64_t v53 = *(void *)(v53 + 8);
      }
    }
    while ((uint64_t *)v53 != v40);
    id v61 = (void *)v75[0];
  }
  std::__tree<int>::destroy(v61);
  std::__tree<int>::destroy(v66);
  std::__tree<int>::destroy(v69);
  return std::__list_imp<int>::clear(&v71);
}

void sub_192B351C8()
{
}

void sub_192B351D0(void *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    do
    {
      uint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
    __cxa_rethrow();
  }
  JUMPOUT(0x192B35250);
}

void sub_192B351FC()
{
}

void sub_192B35208(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x192B35250);
}

void sub_192B35218(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22)
{
}

void sub_192B35234(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, ...)
{
  va_start(va, a10);
  std::__tree<int>::destroy(a6);
  std::__tree<int>::destroy(a9);
  std::__list_imp<int>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

void Espresso::MPSGraphEngine::blob_container::resize(uint64_t a1, const Espresso::layer_shape *a2, uint64_t a3)
{
  Espresso::abstract_blob_container::set_shape((Espresso::abstract_blob_container *)a1, a2);
  uint64_t v6 = *(_DWORD **)a3;
  if (*(void *)a3 && *((unsigned char *)v6 + 8)) {
    *(_DWORD *)(a1 + 160) = v6[3];
  }
  uint64_t v7 = *(void *)(a3 + 8);
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 96);
  *(void *)(a1 + 88) = v6;
  *(void *)(a1 + 96) = v7;
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  if (!*(void *)a3)
  {
    uint64_t v10 = 0;
    goto LABEL_13;
  }
  uint64_t v10 = v9;
  if (!v9)
  {
LABEL_13:
    unint64_t v12 = 0;
    BOOL v11 = 0;
    goto LABEL_14;
  }
  BOOL v11 = *((unsigned char *)v9 + 88) != 0;
  unint64_t v12 = v9[14];
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_14:
  Espresso::MPSBuffersEngine::blob_container::setup_shape((Espresso::MPSBuffersEngine::blob_container *)v14, (const Espresso::layer_shape *)a1, a2);
  if (*(_DWORD *)(a1 + 16) * *(_DWORD *)(a1 + 20) * *(_DWORD *)(a1 + 12) * *(_DWORD *)(a1 + 8) * *(_DWORD *)(a1 + 24))
  {
    if (!v11) {
      goto LABEL_20;
    }
    unint64_t v13 = v15;
  }
  else
  {
    if (!v11) {
      goto LABEL_20;
    }
    unint64_t v13 = 0;
  }
  v10[12] = v13;
LABEL_20:
  if (v12)
  {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192B353D0(_Unwind_Exception *exception_object)
{
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::MPSGraphEngine::blob_container::~blob_container(id *this)
{
  Espresso::MPSBuffersEngine::blob_container::~blob_container(this);

  JUMPOUT(0x192FF16B0);
}

void Espresso::MPSGraphEngine::blob_container_options::~blob_container_options(Espresso::MPSGraphEngine::blob_container_options *this)
{
  Espresso::abstract_blob_container_options_aliasing::~abstract_blob_container_options_aliasing(this);

  JUMPOUT(0x192FF16B0);
}

void Espresso::MPSGraphEngine::blob_container::force_allocate(Espresso::MPSGraphEngine::blob_container *this)
{
  Espresso::abstract_blob_container::shape(v4, (uint64_t)this);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 12);
  v3[0] = *((void *)this + 11);
  v3[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::MPSBuffersEngine::blob_container::resize((uint64_t)this, (const Espresso::layer_shape *)v4, (uint64_t)v3);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  if (__p)
  {
    uint64_t v6 = __p;
    operator delete(__p);
  }
}

void sub_192B354D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::compress_net_weights_kmeans(long long *a1, uint64_t a2, int a3)
{
  int v3 = a3;
  v570[1] = 0;
  v570[0] = 0;
  v569 = (uint64_t *)v570;
  uint64_t v4 = *(void **)(*(void *)a2 + 32);
  v515 = *(void **)(*(void *)a2 + 40);
  if (v4 != v515)
  {
    uint64_t v5 = a1;
    unint64_t v469 = 0;
    v478 = (std::string *)((char *)a1 + 40);
    double v6 = 1.0e-10;
    double v7 = 20.0;
    uint64_t v8 = &qword_192DCA000;
    float v9 = -0.5;
    while (1)
    {
      uint64_t v10 = *v4;
      BOOL v11 = (std::__shared_weak_count *)v4[1];
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      char v568 = 0;
      unint64_t v12 = *(const void **)(v10 + 64);
      v517 = v4;
      uint64_t v518 = v10;
      if (!v12)
      {
        int v28 = 0;
        uint64_t v16 = 0;
        char v29 = 0;
        float v14 = 0.0;
        goto LABEL_30;
      }
      float v14 = 0.0;
      if (!v13)
      {
        uint64_t v16 = 0;
LABEL_24:
        int v28 = 0;
        goto LABEL_25;
      }
      uint64_t v15 = v13;
      uint64_t v16 = *(std::__shared_weak_count **)(v10 + 72);
      if (v16) {
        atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (*((unsigned char *)v5 + 28)) {
        goto LABEL_24;
      }
      unint64_t v17 = (int *)(*(uint64_t (**)(void *))(*v13 + 384))(v13);
      uint64_t v18 = (*(uint64_t (**)(void *))(*v15 + 384))(v15);
      if (v3 >= 2)
      {
        char v19 = (const char *)(v518 + 16);
        if (*(char *)(v518 + 39) < 0) {
          char v19 = *(const char **)v19;
        }
        printf("Quantizing FC %s (%d x %d = %.2fk)\n", v19, v17[1], *v17, (float)((float)(*v17 * v17[1]) * 0.00097656));
      }
      int v20 = *((unsigned __int8 *)v5 + 29);
      (*(void (**)(std::string *__return_ptr, void *))(*v15 + 416))(&__B, v15);
      v508 = v16;
      v511 = v17;
      if (!v20 || __B.__r_.__value_.__r.__words[0]) {
        break;
      }
      (*(void (**)(vImage_Buffer *__return_ptr, void *))(*v15 + 472))(&src, v15);
      std::string::pointer data = src.data;
      if (src.height) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)src.height);
      }
      if (!data) {
        goto LABEL_69;
      }
      (*(void (**)(std::string *__return_ptr, void *))(*v15 + 472))(&__x, v15);
      uint64_t v22 = v18;
      std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&src, *(_DWORD *)(__x.__r_.__value_.__r.__words[0] + 8), *(_DWORD *)(__x.__r_.__value_.__r.__words[0] + 12), 1, 1);
      vImagePixelCount height = src.height;
      int v24 = (int *)src.data;
      char v25 = (void *)*((void *)src.data + 3);
      vImagePixelCount v26 = *(int *)(__x.__r_.__value_.__r.__words[0] + 12) * (uint64_t)*(int *)(__x.__r_.__value_.__r.__words[0] + 8);
      src.std::string::pointer data = *(void **)(__x.__r_.__value_.__r.__words[0] + 16);
      src.vImagePixelCount height = 1;
      src.width = v26;
      src.rowBytes = 2 * v26;
      dest.std::string::pointer data = v25;
      dest.vImagePixelCount height = 1;
      dest.width = v26;
      dest.rowBytes = 4 * v26;
      vImageConvert_Planar16FtoPlanarF(&src, &dest, 0);
      char v568 = 1;
      if (__x.__r_.__value_.__l.__size_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)__x.__r_.__value_.__l.__size_);
      }
      char v27 = 0;
LABEL_70:
      v513 = v24;
      if (__B.__r_.__value_.__l.__size_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)__B.__r_.__value_.__l.__size_);
      }
      if (!v24)
      {
        char v48 = 0;
        uint64_t v45 = (std::__shared_weak_count *)height;
        if (!height) {
          goto LABEL_101;
        }
        goto LABEL_100;
      }
      uint64_t v43 = 0;
      unint64_t v44 = v24[2];
      do
      {
        v44 *= v24[v43 + 3];
        ++v43;
      }
      while (v43 != 3);
      uint64_t v45 = (std::__shared_weak_count *)height;
      if (v44 >= *((int *)v5 + 5))
      {
        char v472 = v27;
        std::string::basic_string[abi:ne180100]<0>(&src, "dont_quantize");
        uint64_t v46 = v22;
        if (std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>(v15 + 30, (unsigned __int8 *)&src))
        {
          std::string::basic_string[abi:ne180100]<0>(&dest, "dont_quantize");
          __B.__r_.__value_.__r.__words[0] = (std::string::size_type)&dest;
          BOOL v47 = *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)(v15 + 30), (unsigned __int8 *)&dest, (uint64_t)&std::piecewise_construct, (long long **)&__B)+ 10) != 0;
          if (SHIBYTE(dest.width) < 0) {
            operator delete(dest.data);
          }
        }
        else
        {
          BOOL v47 = 0;
        }
        if (SHIBYTE(src.width) < 0)
        {
          operator delete(src.data);
          if (!v47)
          {
LABEL_106:
            std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&src, *v511, 1, 1, 1);
            std::string v55 = (std::__shared_weak_count *)v15[81];
            *((_OWORD *)v15 + 40) = *(_OWORD *)&src.data;
            if (v55) {
              nitro::nitro_function::nitro_function(v55);
            }
            std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&src, *v511, 1, 1, 1);
            unint64_t v56 = (std::__shared_weak_count *)v15[83];
            *((_OWORD *)v15 + 41) = *(_OWORD *)&src.data;
            if (v56) {
              nitro::nitro_function::nitro_function(v56);
            }
            std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v566, *v511, 1, 1, 1);
            if (a3 >= 2)
            {
              unint64_t v57 = (const char *)(v518 + 16);
              if (*(char *)(v518 + 39) < 0) {
                unint64_t v57 = *(const char **)v57;
              }
              printf("ip: %s\n", v57);
            }
            std::string::size_type v58 = getenv("FC_INT8_INT8");
            if (v58)
            {
              int v59 = atoi(v58) != 0;
              *((unsigned char *)v5 + 31) = v59;
            }
            else
            {
              int v59 = *((unsigned __int8 *)v5 + 31);
            }
            v479 = v15;
            if (v59)
            {
              id v60 = v511;
              std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,2>,std::allocator<Espresso::blob<unsigned char,2>>,int &,int &,int &,int &,void>(&src, v511[1], *v511, 1, 1);
              id v61 = (std::__shared_weak_count *)src.height;
              v474 = (int *)src.data;
              uint64_t v62 = *((void *)src.data + 2);
              uint64_t v63 = *(void *)(v15[82] + 16);
              uint64_t v64 = *(void *)(v15[80] + 16);
              int v65 = v511[1];
              uint64_t v66 = *((void *)v513 + 3);
              int v67 = *v511 * v65;
              *(_DWORD *)(v22 + 36) = 3;
              Espresso::range_quantizer<signed char>::quantize_chunks(v66, v67, v65, v64, v63, v62);
              std::vector<float>::vector(&src, (*v60 * v60[1]));
              std::vector<float>::vector(&dest, *v511);
              Espresso::range_quantizer<signed char>::dequantize_chunks((float *)src.data, *v60 * v60[1], v60[1], *(float **)(v15[80] + 16), *(float **)(v15[82] + 16), *((char **)v474 + 2));
              int v69 = *v511;
              int v68 = v511[1];
              int v502 = *v511 * v68;
              int v70 = (v502 - 1) / v68;
              if (v70 < 0)
              {
                float v14 = 0.0;
                if (!v69) {
                  goto LABEL_188;
                }
              }
              else
              {
                v460 = v61;
                uint64_t v464 = v22;
                v466 = v45;
                v475 = v11;
                int v71 = 0;
                uint64_t v72 = 0;
                uint64_t v73 = *((void *)v513 + 3);
                uint64_t v74 = (float *)src.data;
                uint64_t v496 = v68;
                uint64_t v499 = v73;
                uint64_t v481 = 4 * v68;
                uint64_t v484 = (v70 + 1);
                float v14 = 0.0;
                v490 = (char *)src.data;
                int v493 = v511[1];
                int v75 = v493;
                v487 = (float *)dest.data;
                do
                {
                  if (v75 >= v502) {
                    int v76 = v502;
                  }
                  else {
                    int v76 = v75;
                  }
                  int v505 = v76;
                  uint64_t v519 = v72 + 1;
                  if (v68 * ((int)v72 + 1) >= v502) {
                    int v77 = v502;
                  }
                  else {
                    int v77 = v68 * (v72 + 1);
                  }
                  unint64_t v78 = (char *)operator new(0x58uLL);
                  *((void *)v78 + 1) = 0;
                  *((void *)v78 + 2) = 0;
                  uint64_t v79 = v72;
                  uint64_t v80 = v72 * v496;
                  *(void *)unint64_t v78 = &unk_1EE389920;
                  *((void *)v78 + 3) = &unk_1EE36BEB0;
                  int v81 = v77 - v72 * v496;
                  *(_OWORD *)(v78 + 56) = 0u;
                  *(_OWORD *)(v78 + 72) = 0u;
                  *((_DWORD *)v78 + 8) = v81;
                  *((void *)v78 + 5) = v499 + 4 * v72 * v496;
                  v78[48] = 0;
                  std::string::size_type v82 = (char *)operator new(0x58uLL);
                  *((void *)v82 + 1) = 0;
                  *((void *)v82 + 2) = 0;
                  *(void *)std::string::size_type v82 = &unk_1EE389920;
                  *((void *)v82 + 3) = &unk_1EE36BEB0;
                  *(_OWORD *)(v82 + 56) = 0u;
                  *(_OWORD *)(v82 + 72) = 0u;
                  *((_DWORD *)v82 + 8) = v81;
                  *((void *)v82 + 5) = &v490[4 * v80];
                  v82[48] = 0;
                  double v83 = 0.0;
                  double v84 = 0.00001;
                  if (v77 != v80)
                  {
                    uint64_t v85 = 0;
                    float v86 = 0.0;
                    do
                    {
                      float v87 = *(float *)(v73 + 4 * v85);
                      double v83 = v83 + (float)((float)(v74[v85] - v87) * (float)(v74[v85] - v87));
                      float v88 = fabsf(v87);
                      BOOL v89 = v88 > v86 || v85 == 0;
                      if (v89) {
                        float v86 = v88;
                      }
                      ++v85;
                    }
                    while (v505 + v71 != v85);
                    double v84 = v86 + 0.00001;
                  }
                  float v90 = log10(v84 / (sqrt(v83 / (double)(unint64_t)v81) + v6)) * v7;
                  if (v487) {
                    v487[v79] = v90;
                  }
                  if (v14 > v90 || v79 == 0) {
                    float v14 = v90;
                  }
                  nitro::nitro_function::nitro_function((std::__shared_weak_count *)v82);
                  nitro::nitro_function::nitro_function((std::__shared_weak_count *)v78);
                  int v68 = v493;
                  v75 += v493;
                  v71 -= v493;
                  v73 += v481;
                  uint64_t v74 = (float *)((char *)v74 + v481);
                  uint64_t v72 = v519;
                }
                while (v519 != v484);
                int v69 = *v511;
                BOOL v11 = v475;
                uint64_t v16 = v508;
                uint64_t v5 = a1;
                uint64_t v8 = &qword_192DCA000;
                uint64_t v46 = v464;
                uint64_t v45 = v466;
                id v61 = v460;
                uint64_t v15 = v479;
                if (!*v511)
                {
LABEL_188:
                  if (dest.data)
                  {
                    dest.vImagePixelCount height = (vImagePixelCount)dest.data;
                    operator delete(dest.data);
                  }
                  if (src.data)
                  {
                    src.vImagePixelCount height = (vImagePixelCount)src.data;
                    operator delete(src.data);
                  }
                  uint64_t v151 = 0;
                  vImagePixelCount v471 = 0;
                  goto LABEL_618;
                }
              }
              uint64_t v138 = 0;
              signed int v139 = 0;
              uint64_t v140 = *(void *)(v15[80] + 16);
              uint64_t v141 = *(void *)(v15[82] + 16);
              int v142 = v511[1];
              uint64_t v143 = *(void *)(v566 + 16);
              do
              {
                uint64_t v144 = v138 + 1;
                unsigned int v145 = v142 * (v138 + 1);
                double v146 = 0.0;
                if (v142 * (int)v138 < v145)
                {
                  long long v147 = (float *)(*((void *)v513 + 3) + 4 * v139);
                  unsigned int v148 = v139;
                  do
                  {
                    float v149 = *v147++;
                    double v146 = v146 + v149;
                    ++v148;
                  }
                  while (v145 > v148);
                }
                float v150 = (v146 - *(float *)(v141 + 4 * v138)) / *(float *)(v140 + 4 * v138);
                *(float *)(v143 + 4 * v138) = v150;
                v139 += v142;
                ++v138;
              }
              while (v144 != v69);
              goto LABEL_188;
            }
            v476 = v11;
            if (*((unsigned char *)v5 + 32))
            {
              v467 = v45;
              std::allocate_shared[abi:ne180100]<Espresso::blob<short,2>,std::allocator<Espresso::blob<short,2>>,int &,int &,int &,int &,void>(&src, v511[1], *v511, 1, 1);
              id v92 = (const __int16 **)src.data;
              vImagePixelCount v471 = src.height;
              uint64_t v93 = *((void *)src.data + 2);
              uint64_t v94 = *(void *)(v15[82] + 16);
              uint64_t v95 = *(void *)(v15[80] + 16);
              int v96 = v511[1];
              uint64_t v97 = *((void *)v513 + 3);
              int v98 = *v511 * v96;
              *(_DWORD *)(v22 + 36) = 4;
              Espresso::range_quantizer<short>::quantize_chunks(v97, v98, v96, v95, v94, v93);
              std::vector<float>::vector(&src, (*v511 * v511[1]));
              uint64_t v465 = v22;
              std::vector<float>::vector(&dest, *v511);
              int v99 = (float *)src.data;
              int v100 = v511[1];
              int v101 = *v511 * v100;
              id v102 = *(_DWORD **)(v15[80] + 16);
              uint64_t v103 = *(_DWORD **)(v15[82] + 16);
              id v461 = v92;
              vDSP_vflt16(v92[2], 1, (float *)src.data, 1, v101);
              int v520 = v100;
              int v104 = (v101 - 1) / v100;
              if ((v104 & 0x80000000) == 0)
              {
                uint64_t v105 = 0;
                uint64_t v106 = (v104 + 1);
                uint64_t v107 = v101;
                int v108 = v520;
                do
                {
                  uint64_t v109 = v108;
                  if (v108 >= v107) {
                    uint64_t v109 = v107;
                  }
                  vDSP_Length v110 = v109 + v105;
                  LODWORD(__B.__r_.__value_.__l.__data_) = *v102;
                  LODWORD(__x.__r_.__value_.__l.__data_) = *v103;
                  vDSP_vsmul(v99, 1, (const float *)&__B, v99, 1, v109 + v105);
                  vDSP_vsadd(v99, 1, (const float *)&__x, v99, 1, v110);
                  ++v103;
                  ++v102;
                  v108 += v520;
                  v105 -= v520;
                  v99 += v520;
                  --v106;
                }
                while (v106);
              }
              int v112 = *v511;
              int v111 = v511[1];
              int v503 = *v511 * v111;
              int v113 = (v503 - 1) / v111;
              if (v113 < 0)
              {
                float v14 = 0.0;
                uint64_t v16 = v508;
                uint64_t v8 = &qword_192DCA000;
                uint64_t v15 = v479;
              }
              else
              {
                int v114 = 0;
                uint64_t v115 = 0;
                uint64_t v116 = *((void *)v513 + 3);
                int v117 = (float *)src.data;
                uint64_t v497 = v111;
                uint64_t v500 = v116;
                uint64_t v482 = 4 * v111;
                uint64_t v485 = (v113 + 1);
                float v14 = 0.0;
                v491 = (char *)src.data;
                int v494 = v511[1];
                int v118 = v494;
                v488 = (float *)dest.data;
                do
                {
                  int v119 = v114;
                  if (v118 >= v503) {
                    int v120 = v503;
                  }
                  else {
                    int v120 = v118;
                  }
                  uint64_t v521 = v115 + 1;
                  if (v111 * ((int)v115 + 1) >= v503) {
                    int v121 = v503;
                  }
                  else {
                    int v121 = v111 * (v115 + 1);
                  }
                  long long v122 = (char *)operator new(0x58uLL);
                  *((void *)v122 + 1) = 0;
                  *((void *)v122 + 2) = 0;
                  uint64_t v506 = v115;
                  uint64_t v123 = v115 * v497;
                  *(void *)long long v122 = &unk_1EE389920;
                  *((void *)v122 + 3) = &unk_1EE36BEB0;
                  int v124 = v121 - v115 * v497;
                  *(_OWORD *)(v122 + 56) = 0u;
                  *(_OWORD *)(v122 + 72) = 0u;
                  *((_DWORD *)v122 + 8) = v124;
                  *((void *)v122 + 5) = v500 + 4 * v115 * v497;
                  v122[48] = 0;
                  int v125 = (char *)operator new(0x58uLL);
                  *((void *)v125 + 1) = 0;
                  *((void *)v125 + 2) = 0;
                  *(void *)int v125 = &unk_1EE389920;
                  *((void *)v125 + 3) = &unk_1EE36BEB0;
                  *(_OWORD *)(v125 + 56) = 0u;
                  *(_OWORD *)(v125 + 72) = 0u;
                  *((_DWORD *)v125 + 8) = v124;
                  *((void *)v125 + 5) = &v491[4 * v123];
                  v125[48] = 0;
                  if (v121 == v123)
                  {
                    double v126 = 0.0;
                    double v127 = 0.00001;
                    uint64_t v8 = &qword_192DCA000;
                    uint64_t v15 = v479;
                    int v128 = v119;
                  }
                  else
                  {
                    uint64_t v129 = 0;
                    int v128 = v119;
                    double v126 = 0.0;
                    float v130 = 0.0;
                    uint64_t v8 = &qword_192DCA000;
                    do
                    {
                      float v131 = *(float *)(v116 + 4 * v129);
                      double v126 = v126 + (float)((float)(v117[v129] - v131) * (float)(v117[v129] - v131));
                      float v132 = fabsf(v131);
                      if (v132 > v130 || v129 == 0) {
                        float v130 = v132;
                      }
                      ++v129;
                    }
                    while (v120 + v119 != v129);
                    double v127 = v130 + 0.00001;
                    uint64_t v15 = v479;
                  }
                  float v134 = log10(v127 / (sqrt(v126 / (double)(unint64_t)v124) + v6)) * v7;
                  if (v488) {
                    v488[v506] = v134;
                  }
                  if (v14 > v134 || v506 == 0) {
                    float v14 = v134;
                  }
                  nitro::nitro_function::nitro_function((std::__shared_weak_count *)v125);
                  nitro::nitro_function::nitro_function((std::__shared_weak_count *)v122);
                  int v111 = v494;
                  v118 += v494;
                  int v114 = v128 - v494;
                  v116 += v482;
                  int v117 = (float *)((char *)v117 + v482);
                  uint64_t v115 = v521;
                  uint64_t v16 = v508;
                }
                while (v521 != v485);
                int v112 = *v511;
              }
              BOOL v11 = v476;
              uint64_t v5 = a1;
              uint64_t v46 = v465;
              uint64_t v45 = v467;
              uint64_t v151 = v461;
              if (v112)
              {
                uint64_t v419 = 0;
                signed int v420 = 0;
                uint64_t v421 = *(void *)(v15[80] + 16);
                uint64_t v422 = *(void *)(v15[82] + 16);
                int v423 = v511[1];
                uint64_t v424 = *(void *)(v566 + 16);
                do
                {
                  uint64_t v425 = v419 + 1;
                  unsigned int v426 = v423 * (v419 + 1);
                  double v427 = 0.0;
                  if (v423 * (int)v419 < v426)
                  {
                    unsigned int v428 = (float *)(*((void *)v513 + 3) + 4 * v420);
                    unsigned int v429 = v420;
                    do
                    {
                      float v430 = *v428++;
                      double v427 = v427 + v430;
                      ++v429;
                    }
                    while (v426 > v429);
                  }
                  float v431 = (v427 - *(float *)(v422 + 4 * v419)) / *(float *)(v421 + 4 * v419);
                  *(float *)(v424 + 4 * v419) = v431;
                  v420 += v423;
                  ++v419;
                }
                while (v425 != v112);
              }
              if (dest.data)
              {
                dest.vImagePixelCount height = (vImagePixelCount)dest.data;
                operator delete(dest.data);
              }
              if (src.data)
              {
                src.vImagePixelCount height = (vImagePixelCount)src.data;
                operator delete(src.data);
              }
              v474 = 0;
              id v61 = 0;
LABEL_618:
              int v328 = 0;
LABEL_619:
              if (a3 >= 2) {
                printf("\tMin PSNR=%.2f\n", v14);
              }
              if (v14 < *((float *)v5 + 4))
              {
                uint64_t v432 = (std::__shared_weak_count *)v15[81];
                *((_OWORD *)v15 + 40) = 0u;
                if (v432) {
                  nitro::nitro_function::nitro_function(v432);
                }
                v433 = (std::__shared_weak_count *)v15[83];
                *((_OWORD *)v15 + 41) = 0u;
                if (v433) {
                  nitro::nitro_function::nitro_function(v433);
                }
                *(_DWORD *)(v46 + 36) = 0;
                unint64_t v434 = (std::__shared_weak_count *)v471;
                goto LABEL_685;
              }
              std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&dest, *(_DWORD *)(v15[82] + 8), 1, 1, 1);
              std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&__B, *(_DWORD *)(v15[80] + 8), 1, 1, 1);
              v435 = v15;
              char v436 = (int *)dest.data;
              memcpy(*((void **)dest.data + 2), *(const void **)(v435[82] + 16), 4 * *(int *)(v435[82] + 8));
              std::string::size_type v437 = __B.__r_.__value_.__r.__words[0];
              memcpy(*(void **)(__B.__r_.__value_.__r.__words[0] + 16), *(const void **)(v435[80] + 16), 4 * *(int *)(v435[80] + 8));
              if ((v472 & 1) == 0)
              {
                v560 = 0;
                uint64_t v559 = 0;
                src.vImagePixelCount height = 0;
                src.std::string::pointer data = 0;
                (*(void (**)(void *, uint64_t *, vImage_Buffer *))(*v479 + 464))(v479, &v559, &src);
                if (src.height) {
                  nitro::nitro_function::nitro_function((std::__shared_weak_count *)src.height);
                }
                if (v560) {
                  nitro::nitro_function::nitro_function(v560);
                }
              }
              if (v328)
              {
                if (v474)
                {
                  std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,2>,std::allocator<Espresso::blob<unsigned char,2>>,int const*&,void>(&__x, v474 + 2);
                  std::string::size_type v438 = __x.__r_.__value_.__r.__words[0];
                  memcpy(*(void **)(__x.__r_.__value_.__r.__words[0] + 16), *((const void **)v474 + 2), v474[3] * (uint64_t)v474[2]);
                  *(_OWORD *)&v572.__r_.__value_.__l.__data_ = 0uLL;
                  std::string::basic_string[abi:ne180100]<0>(&src, "W_U8");
                  (*(void (**)(void *, std::string *, vImage_Buffer *, void, uint64_t, void))(*v479 + 168))(v479, &v572, &src, *(void *)(v438 + 16), *(int *)(v438 + 12) * (uint64_t)*(int *)(v438 + 8), 0);
                  if (SHIBYTE(src.width) < 0) {
                    operator delete(src.data);
                  }
                  if (v572.__r_.__value_.__l.__size_) {
                    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v572.__r_.__value_.__l.__size_);
                  }
                  if (__x.__r_.__value_.__l.__size_) {
                    nitro::nitro_function::nitro_function((std::__shared_weak_count *)__x.__r_.__value_.__l.__size_);
                  }
                }
                *(_OWORD *)&__x.__r_.__value_.__l.__data_ = 0uLL;
                std::string::basic_string[abi:ne180100]<0>(&src, "per_ch_qscale");
                (*(void (**)(void *, std::string *, vImage_Buffer *, void, uint64_t, void))(*v479 + 168))(v479, &__x, &src, *(void *)(v437 + 16), 4 * *(int *)(v437 + 8), 0);
                uint64_t v5 = a1;
                if (SHIBYTE(src.width) < 0) {
                  operator delete(src.data);
                }
                if (__x.__r_.__value_.__l.__size_) {
                  nitro::nitro_function::nitro_function((std::__shared_weak_count *)__x.__r_.__value_.__l.__size_);
                }
                *(_OWORD *)&__x.__r_.__value_.__l.__data_ = 0uLL;
                std::string::basic_string[abi:ne180100]<0>(&src, "per_ch_qbias");
                (*(void (**)(void *, std::string *, vImage_Buffer *, void, uint64_t, void))(*v479 + 168))(v479, &__x, &src, *((void *)v436 + 2), 4 * v436[2], 0);
                if (SHIBYTE(src.width) < 0) {
                  operator delete(src.data);
                }
                if (__x.__r_.__value_.__l.__size_) {
                  nitro::nitro_function::nitro_function((std::__shared_weak_count *)__x.__r_.__value_.__l.__size_);
                }
                v558 = 0;
                uint64_t v557 = 0;
                (*(void (**)(void *, uint64_t *))(*v479 + 400))(v479, &v557);
                id v439 = v558;
                if (!v558) {
                  goto LABEL_681;
                }
                goto LABEL_680;
              }
              if (v61) {
                atomic_fetch_add_explicit(&v61->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              v479[72] = v474;
              unint64_t v440 = (std::__shared_weak_count *)v479[73];
              v479[73] = v61;
              if (v440) {
                nitro::nitro_function::nitro_function(v440);
              }
              if (v474)
              {
                std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,2>,std::allocator<Espresso::blob<unsigned char,2>>,int const*&,void>(&__x, v474 + 2);
                std::string::size_type v441 = __x.__r_.__value_.__r.__words[0];
                memcpy(*(void **)(__x.__r_.__value_.__r.__words[0] + 16), *((const void **)v474 + 2), v474[3] * (uint64_t)v474[2]);
                *(_OWORD *)&v572.__r_.__value_.__l.__data_ = 0uLL;
                std::string::basic_string[abi:ne180100]<0>(&src, "W_8bit");
                (*(void (**)(void *, std::string *, vImage_Buffer *, void, uint64_t, void))(*v479 + 168))(v479, &v572, &src, *(void *)(v441 + 16), *(int *)(v441 + 12) * (uint64_t)*(int *)(v441 + 8), 0);
                if (SHIBYTE(src.width) < 0) {
                  operator delete(src.data);
                }
                if (v572.__r_.__value_.__l.__size_) {
                  nitro::nitro_function::nitro_function((std::__shared_weak_count *)v572.__r_.__value_.__l.__size_);
                }
                std::string::size_type size = (std::__shared_weak_count *)__x.__r_.__value_.__l.__size_;
                if (!__x.__r_.__value_.__l.__size_)
                {
LABEL_668:
                  *(_OWORD *)&__x.__r_.__value_.__l.__data_ = 0uLL;
                  std::string::basic_string[abi:ne180100]<0>(&src, "Qbias");
                  (*(void (**)(void *, std::string *, vImage_Buffer *, void, uint64_t, void))(*v479 + 168))(v479, &__x, &src, *((void *)v436 + 2), 4 * v436[2], 0);
                  if (SHIBYTE(src.width) < 0) {
                    operator delete(src.data);
                  }
                  if (__x.__r_.__value_.__l.__size_) {
                    nitro::nitro_function::nitro_function((std::__shared_weak_count *)__x.__r_.__value_.__l.__size_);
                  }
                  *(_OWORD *)&__x.__r_.__value_.__l.__data_ = 0uLL;
                  std::string::basic_string[abi:ne180100]<0>(&src, "Qscale");
                  (*(void (**)(void *, std::string *, vImage_Buffer *, void, uint64_t, void))(*v479 + 168))(v479, &__x, &src, *(void *)(v437 + 16), 4 * *(int *)(v437 + 8), 0);
                  uint64_t v5 = a1;
                  if (SHIBYTE(src.width) < 0) {
                    operator delete(src.data);
                  }
                  if (__x.__r_.__value_.__l.__size_) {
                    nitro::nitro_function::nitro_function((std::__shared_weak_count *)__x.__r_.__value_.__l.__size_);
                  }
                  uint64_t v448 = v566;
                  if (!v566) {
                    goto LABEL_681;
                  }
                  *(_OWORD *)&__x.__r_.__value_.__l.__data_ = 0uLL;
                  std::string::basic_string[abi:ne180100]<0>(&src, "Qrow_sums");
                  (*(void (**)(void *, std::string *, vImage_Buffer *, void, uint64_t, void))(*v479 + 168))(v479, &__x, &src, *(void *)(v448 + 16), 4 * *(int *)(v448 + 8), 0);
                  if (SHIBYTE(src.width) < 0) {
                    operator delete(src.data);
                  }
                  id v439 = (std::__shared_weak_count *)__x.__r_.__value_.__l.__size_;
                  if (!__x.__r_.__value_.__l.__size_) {
                    goto LABEL_681;
                  }
LABEL_680:
                  nitro::nitro_function::nitro_function(v439);
LABEL_681:
                  if (__B.__r_.__value_.__l.__size_) {
                    nitro::nitro_function::nitro_function((std::__shared_weak_count *)__B.__r_.__value_.__l.__size_);
                  }
                  unint64_t v434 = (std::__shared_weak_count *)v471;
                  if (dest.height) {
                    nitro::nitro_function::nitro_function((std::__shared_weak_count *)dest.height);
                  }
LABEL_685:
                  if (v567) {
                    nitro::nitro_function::nitro_function(v567);
                  }
                  if (v434) {
                    nitro::nitro_function::nitro_function(v434);
                  }
                  if (v61) {
                    nitro::nitro_function::nitro_function(v61);
                  }
                  char v48 = 1;
                  if (!v45) {
                    goto LABEL_101;
                  }
LABEL_100:
                  nitro::nitro_function::nitro_function(v45);
                  goto LABEL_101;
                }
              }
              else
              {
                long long v463 = v61;
                if (!v151)
                {
                  exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(exception, "invalid state");
                  __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                }
                long long v443 = (char *)operator new(0x58uLL);
                *((void *)v443 + 1) = 0;
                *((void *)v443 + 2) = 0;
                *(void *)long long v443 = &unk_1EE389CA0;
                *((void *)v443 + 3) = &unk_1EE36C0B0;
                *(_OWORD *)(v443 + 56) = 0u;
                *(_OWORD *)(v443 + 72) = 0u;
                int v444 = *((_DWORD *)v151 + 2);
                *((_DWORD *)v443 + 8) = v444;
                int v445 = *((_DWORD *)v151 + 3);
                *((_DWORD *)v443 + 9) = v445;
                char v446 = (Espresso *)(2 * v444 * (uint64_t)v445);
                id v447 = Espresso::kern_alloc_uninitialized(v446);
                bzero(v447, (size_t)v446);
                *((void *)v443 + 5) = v447;
                v443[48] = 1;
                memcpy(v447, v151[2], 2 * *((int *)v151 + 2) * (uint64_t)*((int *)v151 + 3));
                *(_OWORD *)&__x.__r_.__value_.__l.__data_ = 0uLL;
                std::string::basic_string[abi:ne180100]<0>(&src, "W_int16");
                uint64_t v16 = v508;
                id v61 = v463;
                (*(void (**)(void *, std::string *, vImage_Buffer *, void, uint64_t, void))(*v479 + 168))(v479, &__x, &src, *((void *)v443 + 5), 2 * *((int *)v443 + 8) * (uint64_t)*((int *)v443 + 9), 0);
                if (SHIBYTE(src.width) < 0) {
                  operator delete(src.data);
                }
                if (__x.__r_.__value_.__l.__size_) {
                  nitro::nitro_function::nitro_function((std::__shared_weak_count *)__x.__r_.__value_.__l.__size_);
                }
                std::string::size_type size = (std::__shared_weak_count *)v443;
              }
              nitro::nitro_function::nitro_function(size);
              goto LABEL_668;
            }
            std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,2>,std::allocator<Espresso::blob<unsigned char,2>>,int &,int &,int &,int &,void>(&src, v511[1], *v511, 1, 1);
            v474 = (int *)src.data;
            id v61 = (std::__shared_weak_count *)src.height;
            int v327 = *v511;
            int v328 = 1;
            *(_DWORD *)(v22 + 36) = 1;
            uint64_t v329 = v513;
            if (!v327)
            {
              uint64_t v151 = 0;
              vImagePixelCount v471 = 0;
              float v14 = 0.0;
              goto LABEL_619;
            }
            v462 = v61;
            v468 = v45;
            unint64_t v330 = 0;
            float v14 = 0.0;
            unint64_t v331 = v511;
            while (2)
            {
              uint64_t v332 = *((void *)v329 + 3);
              int v333 = v331[1];
              uint64_t v334 = (v333 * v330);
              uint64_t v335 = v332 + 4 * v334;
              v336 = (unsigned __int8 *)(*((void *)v474 + 2) + v334);
              float v573 = 0.0;
              float v565 = 0.0;
              Espresso::range_quantizer<unsigned char>::quantize_chunks(v335, v333, v333, (uint64_t)&v573, (uint64_t)&v565, (uint64_t)v336, *((unsigned char *)a1 + 33) == 0);
              v337 = (char *)operator new(0x58uLL);
              *((void *)v337 + 1) = 0;
              *((void *)v337 + 2) = 0;
              *(void *)v337 = &unk_1EE389920;
              uint64_t v338 = v331[1];
              *((void *)v337 + 3) = &unk_1EE36BEB0;
              *(_OWORD *)(v337 + 56) = 0u;
              *(_OWORD *)(v337 + 72) = 0u;
              *((_DWORD *)v337 + 8) = v338;
              size_t v339 = 4 * v338;
              v340 = Espresso::kern_alloc_uninitialized((Espresso *)(4 * v338));
              bzero(v340, v339);
              *((void *)v337 + 5) = v340;
              v337[48] = 1;
              Espresso::range_quantizer<unsigned char>::dequantize_chunks((float *)v340, v331[1], v331[1], &v573, &v565, v336);
              uint64_t v16 = v508;
              uint64_t v341 = (char *)operator new(0x58uLL);
              *((void *)v341 + 1) = 0;
              *((void *)v341 + 2) = 0;
              *(void *)uint64_t v341 = &unk_1EE389920;
              unsigned int v342 = v511[1];
              *((void *)v341 + 3) = &unk_1EE36BEB0;
              *(_OWORD *)(v341 + 56) = 0u;
              *(_OWORD *)(v341 + 72) = 0u;
              *((_DWORD *)v341 + 8) = v342;
              *((void *)v341 + 5) = v335;
              v341[48] = 0;
              unint64_t v343 = *((int *)v337 + 8);
              if (v342 >= v343) {
                unsigned int v344 = *((_DWORD *)v337 + 8);
              }
              else {
                unsigned int v344 = v342;
              }
              if (v344)
              {
                uint64_t v345 = 0;
                uint64_t v346 = 4 * v344;
                double v347 = 0.0;
                float v348 = 0.0;
                do
                {
                  float v349 = *(float *)(v335 + v345);
                  double v347 = v347
                       + (float)((float)(*(float *)(*((void *)v337 + 5) + v345) - v349)
                               * (float)(*(float *)(*((void *)v337 + 5) + v345) - v349));
                  float v350 = fabsf(v349);
                  if (v350 > v348 || v345 == 0) {
                    float v348 = v350;
                  }
                  v345 += 4;
                }
                while (v346 != v345);
                double v352 = v348 + 0.00001;
              }
              else
              {
                double v347 = 0.0;
                double v352 = 0.00001;
              }
              float v353 = log10(v352 / (sqrt(v347 / (double)v343) + v6)) * v7;
              float v354 = v565;
              float v355 = v573;
              if (a3 >= 2) {
                printf(" PSNR=%.2f (s %e b %e)\n", v353, v573, v565);
              }
              *(float *)(*(void *)(v15[82] + 16) + 4 * v330) = v354;
              *(float *)(*(void *)(v15[80] + 16) + 4 * v330) = v355;
              if (v14 > v353 || v330 == 0) {
                float v14 = v353;
              }
              if (*((char *)a1 + 63) < 0)
              {
                double v7 = 20.0;
                float v9 = -0.5;
                if (!*((void *)a1 + 6)) {
                  goto LABEL_569;
                }
              }
              else
              {
                double v7 = 20.0;
                float v9 = -0.5;
                if (!*((unsigned char *)a1 + 63)) {
                  goto LABEL_569;
                }
              }
              uint64_t v357 = v518 + 16;
              if (*(char *)(v518 + 39) < 0) {
                uint64_t v357 = *(void *)(v518 + 16);
              }
              v358 = [NSString stringWithUTF8String:v357];
              id v359 = [v358 stringByReplacingOccurrencesOfString:@"/" withString:&stru_1EE39BDB0];
              std::string::basic_string[abi:ne180100]<0>(&src, (char *)[v359 UTF8String]);

              if (*((char *)a1 + 63) >= 0) {
                size_t v360 = *((unsigned __int8 *)a1 + 63);
              }
              else {
                size_t v360 = *((void *)a1 + 6);
              }
              std::string::basic_string[abi:ne180100]((uint64_t)&v562, v360 + 1);
              if ((v562.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                uint64_t v361 = &v562;
              }
              else {
                uint64_t v361 = (std::string *)v562.__r_.__value_.__r.__words[0];
              }
              if (v360)
              {
                if (*((char *)a1 + 63) >= 0) {
                  v362 = v478;
                }
                else {
                  v362 = (std::string *)*((void *)a1 + 5);
                }
                memmove(v361, v362, v360);
              }
              *(_WORD *)((char *)&v361->__r_.__value_.__l.__data_ + v360) = 47;
              int v363 = *(char *)(*(void *)a2 + 447);
              if (v363 >= 0) {
                int v364 = (const std::string::value_type *)(*(void *)a2 + 424);
              }
              else {
                int v364 = *(const std::string::value_type **)(*(void *)a2 + 424);
              }
              if (v363 >= 0) {
                std::string::size_type v365 = *(unsigned __int8 *)(*(void *)a2 + 447);
              }
              else {
                std::string::size_type v365 = *(void *)(*(void *)a2 + 432);
              }
              unsigned int v366 = std::string::append(&v562, v364, v365);
              long long v367 = *(_OWORD *)&v366->__r_.__value_.__l.__data_;
              v563.__r_.__value_.__r.__words[2] = v366->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v563.__r_.__value_.__l.__data_ = v367;
              v366->__r_.__value_.__l.__size_ = 0;
              v366->__r_.__value_.__r.__words[2] = 0;
              v366->__r_.__value_.__r.__words[0] = 0;
              int v368 = std::string::append(&v563, "_");
              long long v369 = *(_OWORD *)&v368->__r_.__value_.__l.__data_;
              v564.__r_.__value_.__r.__words[2] = v368->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v564.__r_.__value_.__l.__data_ = v369;
              v368->__r_.__value_.__l.__size_ = 0;
              v368->__r_.__value_.__r.__words[2] = 0;
              v368->__r_.__value_.__r.__words[0] = 0;
              if ((src.width & 0x8000000000000000) == 0) {
                p_vImage_Buffer src = (const std::string::value_type *)&src;
              }
              else {
                p_vImage_Buffer src = (const std::string::value_type *)src.data;
              }
              if ((src.width & 0x8000000000000000) == 0) {
                vImagePixelCount width_high = HIBYTE(src.width);
              }
              else {
                vImagePixelCount width_high = src.height;
              }
              unsigned int v372 = std::string::append(&v564, p_src, width_high);
              long long v373 = *(_OWORD *)&v372->__r_.__value_.__l.__data_;
              v572.__r_.__value_.__r.__words[2] = v372->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v572.__r_.__value_.__l.__data_ = v373;
              v372->__r_.__value_.__l.__size_ = 0;
              v372->__r_.__value_.__r.__words[2] = 0;
              v372->__r_.__value_.__r.__words[0] = 0;
              double v374 = std::string::append(&v572, "_");
              long long v375 = *(_OWORD *)&v374->__r_.__value_.__l.__data_;
              __x.__r_.__value_.__r.__words[2] = v374->__r_.__value_.__r.__words[2];
              *(_OWORD *)&__x.__r_.__value_.__l.__data_ = v375;
              v374->__r_.__value_.__l.__size_ = 0;
              v374->__r_.__value_.__r.__words[2] = 0;
              v374->__r_.__value_.__r.__words[0] = 0;
              std::to_string(&v561, v330);
              if ((v561.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                v376 = &v561;
              }
              else {
                v376 = (std::string *)v561.__r_.__value_.__r.__words[0];
              }
              if ((v561.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type v377 = HIBYTE(v561.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type v377 = v561.__r_.__value_.__l.__size_;
              }
              v378 = std::string::append(&__x, (const std::string::value_type *)v376, v377);
              long long v379 = *(_OWORD *)&v378->__r_.__value_.__l.__data_;
              __B.__r_.__value_.__r.__words[2] = v378->__r_.__value_.__r.__words[2];
              *(_OWORD *)&__B.__r_.__value_.__l.__data_ = v379;
              v378->__r_.__value_.__l.__size_ = 0;
              v378->__r_.__value_.__r.__words[2] = 0;
              v378->__r_.__value_.__r.__words[0] = 0;
              id v380 = std::string::append(&__B, ".bin");
              long long v381 = *(_OWORD *)&v380->__r_.__value_.__l.__data_;
              dest.width = v380->__r_.__value_.__r.__words[2];
              *(_OWORD *)&dest.std::string::pointer data = v381;
              v380->__r_.__value_.__l.__size_ = 0;
              v380->__r_.__value_.__r.__words[2] = 0;
              v380->__r_.__value_.__r.__words[0] = 0;
              if (SHIBYTE(__B.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__B.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v561.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v561.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(__x.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__x.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v572.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v572.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v564.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v564.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v563.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v563.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v562.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v562.__r_.__value_.__l.__data_);
              }
              std::operator+<char>();
              int32x4_t v382 = std::string::append(&__x, "/");
              long long v383 = *(_OWORD *)&v382->__r_.__value_.__l.__data_;
              __B.__r_.__value_.__r.__words[2] = v382->__r_.__value_.__r.__words[2];
              *(_OWORD *)&__B.__r_.__value_.__l.__data_ = v383;
              v382->__r_.__value_.__l.__size_ = 0;
              v382->__r_.__value_.__r.__words[2] = 0;
              v382->__r_.__value_.__r.__words[0] = 0;
              if ((__B.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                p_B = &__B;
              }
              else {
                p_B = (std::string *)__B.__r_.__value_.__r.__words[0];
              }
              system((const char *)p_B);
              if (SHIBYTE(__B.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__B.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(__x.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__x.__r_.__value_.__l.__data_);
              }
              if (a3)
              {
                if ((dest.width & 0x8000000000000000) == 0) {
                  p_vImage_Buffer dest = (const char *)&dest;
                }
                else {
                  p_vImage_Buffer dest = (const char *)dest.data;
                }
                printf("dump: %s\n", p_dest);
              }
              if ((dest.width & 0x8000000000000000) == 0) {
                int v386 = (const char *)&dest;
              }
              else {
                int v386 = (const char *)dest.data;
              }
              unsigned int v387 = fopen(v386, "wb");
              fwrite(v336, 1uLL, v511[1], v387);
              fclose(v387);
              if (SHIBYTE(dest.width) < 0) {
                operator delete(dest.data);
              }
              uint64_t v16 = v508;
              if (SHIBYTE(src.width) < 0) {
                operator delete(src.data);
              }
LABEL_569:
              nitro::nitro_function::nitro_function((std::__shared_weak_count *)v341);
              nitro::nitro_function::nitro_function((std::__shared_weak_count *)v337);
              ++v330;
              unint64_t v331 = v511;
              uint64_t v329 = v513;
              if (v330 >= *v511)
              {
                uint64_t v151 = 0;
                vImagePixelCount v471 = 0;
                int v328 = 1;
                BOOL v11 = v476;
                uint64_t v5 = a1;
                uint64_t v45 = v468;
                id v61 = v462;
                goto LABEL_619;
              }
              continue;
            }
          }
        }
        else if (!v47)
        {
          goto LABEL_106;
        }
      }
      char v48 = 0;
      if (v45) {
        goto LABEL_100;
      }
LABEL_101:
      if ((v48 & 1) == 0)
      {
        uint64_t v36 = v517;
        int v3 = a3;
        if (!v16) {
          goto LABEL_50;
        }
        goto LABEL_49;
      }
      int v28 = 1;
      int v3 = a3;
LABEL_25:
      char v29 = *(const void **)(v518 + 64);
      if (v29)
      {
        if (v30)
        {
          int v31 = v30;
          std::string::size_type v32 = *(void *)(v518 + 72);
          v564.__r_.__value_.__r.__words[0] = (std::string::size_type)v30;
          v564.__r_.__value_.__l.__size_ = v32;
          if (v32)
          {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v32 + 8), 1uLL, memory_order_relaxed);
            char v29 = *(const void **)(v518 + 64);
            if (!v29) {
              goto LABEL_34;
            }
          }
          goto LABEL_31;
        }
      }
LABEL_30:
      int v31 = 0;
      *(_OWORD *)&v564.__r_.__value_.__l.__data_ = 0uLL;
      if (!v29) {
        goto LABEL_34;
      }
LABEL_31:
      {
        int v33 = *(std::__shared_weak_count **)(v518 + 72);
        uint64_t v5 = a1;
        if (v33) {
          atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_37;
      }
LABEL_34:
      uint64_t v5 = a1;
      if (!v31 || *((unsigned char *)a1 + 30))
      {
        int v33 = 0;
        goto LABEL_37;
      }
      if (*((int *)a1 + 2) < 1)
      {
        if (v3 > 1)
        {
          uint64_t v49 = (const char *)(v518 + 16);
          if (*(char *)(v518 + 39) < 0) {
            uint64_t v49 = *(const char **)v49;
          }
          printf("conv: %s\n", v49);
        }
        if (*(int *)((*(uint64_t (**)(void *))(*(void *)v31 + 384))(v31) + 44) >= 4)
        {
          get_weights_for_quantization<Espresso::generic_convolution_kernel>((void **)&__B.__r_.__value_.__l.__data_, (uint64_t)&v564, *((unsigned char *)a1 + 29), &v568);
          std::string::size_type v50 = __B.__r_.__value_.__r.__words[0];
          if (!__B.__r_.__value_.__r.__words[0]) {
            goto LABEL_90;
          }
          uint64_t v51 = 0;
          unint64_t v52 = *(int *)(__B.__r_.__value_.__r.__words[0] + 8);
          do
          {
            v52 *= *(int *)(__B.__r_.__value_.__r.__words[0] + 12 + v51);
            v51 += 4;
          }
          while (v51 != 12);
          if (v52 < *((int *)a1 + 5))
          {
LABEL_90:
            uint64_t v53 = v16;
            goto LABEL_91;
          }
          long long v136 = (void *)v564.__r_.__value_.__r.__words[0];
          std::string::basic_string[abi:ne180100]<0>(&src, "dont_quantize");
          if (std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>(v136 + 30, (unsigned __int8 *)&src))
          {
            std::string::basic_string[abi:ne180100]<0>(&dest, "dont_quantize");
            uint64_t v53 = v16;
            __x.__r_.__value_.__r.__words[0] = (std::string::size_type)&dest;
            BOOL v137 = *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)(v136 + 30), (unsigned __int8 *)&dest, (uint64_t)&std::piecewise_construct, (long long **)&__x)+ 10) != 0;
            if (SHIBYTE(dest.width) < 0) {
              operator delete(dest.data);
            }
          }
          else
          {
            uint64_t v53 = v16;
            BOOL v137 = 0;
          }
          if (SHIBYTE(src.width) < 0) {
            operator delete(src.data);
          }
          if (v137)
          {
LABEL_91:
            char v54 = 0;
          }
          else
          {
            (*(void (**)(std::string *__return_ptr, void *))(*v136 + 472))(&__x, v136);
            uint64_t v388 = 0;
            unint64_t v389 = *(int *)(v50 + 20);
            int v390 = *(_DWORD *)(v50 + 8);
            int v391 = v390;
            do
            {
              v391 *= *(_DWORD *)(v50 + 12 + v388);
              v388 += 4;
            }
            while (v388 != 12);
            int v392 = *(_DWORD *)(v50 + 12);
            int v393 = *(_DWORD *)(v50 + 16);
            (*(void (**)(std::string *__return_ptr, void *))(*v136 + 512))(&v572, v136);
            (*(void (**)(std::string *__return_ptr, void *))(*v136 + 496))(&v563, v136);
            std::vector<float>::vector(&src, v389);
            std::vector<float>::vector(&dest, v389);
            int v394 = v392 * v390 * v393;
            Espresso::range_quantizer<unsigned char>::quantize_chunks(*(void *)(v50 + 24), v391, v394, (uint64_t)src.data, (uint64_t)dest.data, *(void *)(v563.__r_.__value_.__r.__words[0] + 24), *((unsigned char *)a1 + 33) == 0);
            Espresso::range_quantizer<unsigned char>::dequantize_chunks(*(float **)(__x.__r_.__value_.__r.__words[0] + 24), v391, v394, (float *)src.data, (float *)dest.data, *(unsigned __int8 **)(v563.__r_.__value_.__r.__words[0] + 24));
            int v3 = a3;
            uint64_t v8 = &qword_192DCA000;
            if ((int)v389 >= 1)
            {
              unsigned int v395 = (float *)dest.data;
              int v396 = (float *)src.data;
              int v397 = *(float **)(v572.__r_.__value_.__r.__words[0] + 16);
              uint64_t v398 = v389;
              do
              {
                float v399 = *v395++;
                float v400 = v399;
                float v401 = *v396++;
                *int v397 = v400;
                v397[v389] = v400 + (float)(v401 * 255.0);
                ++v397;
                --v398;
              }
              while (v398);
            }
            unint64_t v402 = 0;
            unint64_t v403 = *(int *)(__x.__r_.__value_.__r.__words[0] + 8);
            std::string::size_type v404 = __x.__r_.__value_.__r.__words[0] + 12;
            float v405 = 0.0;
            double v406 = 0.0;
            while (1)
            {
              uint64_t v407 = 0;
              unint64_t v408 = *(int *)(__x.__r_.__value_.__r.__words[0] + 8);
              do
              {
                v408 *= *(int *)(v404 + v407);
                v407 += 4;
              }
              while (v407 != 12);
              uint64_t v409 = 0;
              unint64_t v410 = *(int *)(v50 + 8);
              do
              {
                v410 *= *(int *)(v50 + 12 + v409);
                v409 += 4;
              }
              while (v409 != 12);
              if (v410 < v408) {
                unint64_t v408 = v410;
              }
              if (v408 <= v402) {
                break;
              }
              float v411 = *(float *)(*(void *)(v50 + 24) + 4 * v402);
              float v412 = *(float *)(*(void *)(__x.__r_.__value_.__r.__words[0] + 24) + 4 * v402) - v411;
              double v406 = v406 + (float)(v412 * v412);
              float v413 = fabsf(v411);
              if (v402) {
                BOOL v414 = v413 <= v405;
              }
              else {
                BOOL v414 = 0;
              }
              if (!v414) {
                float v405 = v413;
              }
              ++v402;
            }
            for (uint64_t i = 0; i != 12; i += 4)
              v403 *= *(int *)(v404 + i);
            double v416 = log10((v405 + 0.00001) / (sqrt(v406 / (double)v403) + v6));
            if (a3 >= 2)
            {
              int v417 = (char *)(v518 + 16);
              if (*(char *)(v518 + 39) < 0) {
                int v417 = *(char **)v417;
              }
              std::string::basic_string[abi:ne180100]<0>(&v533, v417);
              if (v534 < 0) {
                operator delete(v533);
              }
            }
            float v14 = v416 * v7;
            if (*(int *)((*(uint64_t (**)(void *))(*v136 + 384))(v136) + 44) >= 2
              && (int v418 = *(_DWORD *)((*(uint64_t (**)(void *))(*v136 + 384))(v136) + 116),
                  v418 == *(_DWORD *)((*(uint64_t (**)(void *))(*v136 + 384))(v136) + 44)))
            {
              puts("Skipping quantization for depth-wise convs. workaround for rdr38565288");
              uint64_t v5 = a1;
            }
            else if (*((float *)a1 + 4) < v14)
            {
              if (*((int *)a1 + 2) <= 0)
              {
                if (a3 >= 2) {
                  printf("setting ranges %d\n", v389);
                }
                long long v532 = *(_OWORD *)&v572.__r_.__value_.__l.__data_;
                if (v572.__r_.__value_.__l.__size_) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(v572.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
                }
                uint64_t v530 = 0;
                v531 = 0;
                (*(void (**)(void *, long long *, uint64_t *))(*v136 + 592))(v136, &v532, &v530);
                if (v531) {
                  nitro::nitro_function::nitro_function(v531);
                }
                if (*((void *)&v532 + 1)) {
                  nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v532 + 1));
                }
                long long v529 = *(_OWORD *)&v563.__r_.__value_.__l.__data_;
                if (v563.__r_.__value_.__l.__size_) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(v563.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
                }
                uint64_t v527 = 0;
                v528 = 0;
                (*(void (**)(void *, long long *, uint64_t *))(*v136 + 560))(v136, &v529, &v527);
                if (v528) {
                  nitro::nitro_function::nitro_function(v528);
                }
                if (*((void *)&v529 + 1)) {
                  nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v529 + 1));
                }
                v469 += 4 * *(int *)(v572.__r_.__value_.__r.__words[0] + 8);
              }
              id v449 = std::__tree<std::__value_type<std::shared_ptr<Espresso::generic_convolution_kernel>,std::shared_ptr<Espresso::blob<float,4>>>,std::__map_value_compare<std::shared_ptr<Espresso::generic_convolution_kernel>,std::__value_type<std::shared_ptr<Espresso::generic_convolution_kernel>,std::shared_ptr<Espresso::blob<float,4>>>,std::less<std::shared_ptr<Espresso::generic_convolution_kernel>>,true>,std::allocator<std::__value_type<std::shared_ptr<Espresso::generic_convolution_kernel>,std::shared_ptr<Espresso::blob<float,4>>>>>::__emplace_unique_key_args<std::shared_ptr<Espresso::generic_convolution_kernel>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<Espresso::generic_convolution_kernel> const&>,std::tuple<>>(&v569, (unint64_t)v136, (uint64_t *)&v564);
              long long v450 = *(_OWORD *)&__x.__r_.__value_.__l.__data_;
              if (__x.__r_.__value_.__l.__size_) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(__x.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
              }
              long long v451 = (std::__shared_weak_count *)v449[7];
              *((_OWORD *)v449 + 3) = v450;
              uint64_t v5 = a1;
              if (v451) {
                nitro::nitro_function::nitro_function(v451);
              }
              if (v568)
              {
                uint64_t v525 = 0;
                v526 = 0;
                *(_OWORD *)&v562.__r_.__value_.__l.__data_ = 0uLL;
                (*(void (**)(void *, uint64_t *, std::string *))(*v136 + 544))(v136, &v525, &v562);
                if (v562.__r_.__value_.__l.__size_) {
                  nitro::nitro_function::nitro_function((std::__shared_weak_count *)v562.__r_.__value_.__l.__size_);
                }
                if (v526) {
                  nitro::nitro_function::nitro_function(v526);
                }
              }
            }
            else
            {
              uint64_t v5 = a1;
            }
            if (dest.data)
            {
              dest.vImagePixelCount height = (vImagePixelCount)dest.data;
              operator delete(dest.data);
            }
            if (src.data)
            {
              src.vImagePixelCount height = (vImagePixelCount)src.data;
              operator delete(src.data);
            }
            if (v563.__r_.__value_.__l.__size_) {
              nitro::nitro_function::nitro_function((std::__shared_weak_count *)v563.__r_.__value_.__l.__size_);
            }
            if (v572.__r_.__value_.__l.__size_) {
              nitro::nitro_function::nitro_function((std::__shared_weak_count *)v572.__r_.__value_.__l.__size_);
            }
            if (__x.__r_.__value_.__l.__size_) {
              nitro::nitro_function::nitro_function((std::__shared_weak_count *)__x.__r_.__value_.__l.__size_);
            }
            int v28 = 1;
            char v54 = 1;
          }
          if (__B.__r_.__value_.__l.__size_) {
            nitro::nitro_function::nitro_function((std::__shared_weak_count *)__B.__r_.__value_.__l.__size_);
          }
          if ((v54 & 1) == 0)
          {
            uint64_t v16 = v53;
            goto LABEL_46;
          }
          int v33 = 0;
          uint64_t v16 = v53;
LABEL_37:
          if (v3 >= 1 && v28)
          {
            unint64_t v34 = (const char *)(v518 + 16);
            if (*(char *)(v518 + 39) < 0) {
              unint64_t v34 = *(const char **)v34;
            }
            char v35 = (const char *)(v518 + 40);
            if (*(char *)(v518 + 63) < 0) {
              char v35 = *(const char **)v35;
            }
            printf("[Quant] PSNR %s (%s): %.3f (min=%.3f)\n", v34, v35, v14, *((float *)v5 + 4));
          }
          if (v33) {
            nitro::nitro_function::nitro_function(v33);
          }
        }
      }
      else
      {
        if (v3 >= 2)
        {
          uint64_t v37 = (const char *)(v518 + 16);
          if (*(char *)(v518 + 39) < 0) {
            uint64_t v37 = *(const char **)v37;
          }
          printf("conv: %s\n", v37);
        }
        if (*(int *)((*(uint64_t (**)(void *))(*(void *)v31 + 384))(v31) + 44) >= 4)
        {
          v509 = v16;
          get_weights_for_quantization<Espresso::generic_convolution_kernel>((void **)&v563.__r_.__value_.__l.__data_, (uint64_t)&v564, *((unsigned char *)a1 + 29), &v568);
          std::string::size_type v38 = v563.__r_.__value_.__r.__words[0];
          if (!v563.__r_.__value_.__r.__words[0]) {
            goto LABEL_474;
          }
          unint64_t v39 = *(int *)(v563.__r_.__value_.__r.__words[0] + 8);
          for (uint64_t j = 12; j != 24; j += 4)
            v39 *= *(int *)(v563.__r_.__value_.__r.__words[0] + j);
          if (v39 >= *((int *)a1 + 5))
          {
            std::string v41 = (void *)v564.__r_.__value_.__r.__words[0];
            std::string::basic_string[abi:ne180100]<0>(&src, "dont_quantize");
            if (std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>(v41 + 30, (unsigned __int8 *)&src))
            {
              std::string::basic_string[abi:ne180100]<0>(&dest, "dont_quantize");
              __B.__r_.__value_.__r.__words[0] = (std::string::size_type)&dest;
              BOOL v42 = *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)(v41 + 30), (unsigned __int8 *)&dest, (uint64_t)&std::piecewise_construct, (long long **)&__B)+ 10) != 0;
              if (SHIBYTE(dest.width) < 0) {
                operator delete(dest.data);
              }
            }
            else
            {
              BOOL v42 = 0;
            }
            if ((SHIBYTE(src.width) & 0x80000000) == 0)
            {
              if (v42) {
                goto LABEL_196;
              }
LABEL_198:
              (*(void (**)(std::string *__return_ptr, void *))(*v41 + 472))(&v562, v41);
              if (v3 >= 2)
              {
                unint64_t v152 = (const char *)(v518 + 16);
                if (*(char *)(v518 + 39) < 0) {
                  unint64_t v152 = *(const char **)v152;
                }
                uint64_t v153 = 0;
                uint64_t v154 = *(int *)(v38 + 8);
                do
                {
                  v154 *= *(int *)(v38 + 12 + v153);
                  v153 += 4;
                }
                while (v153 != 12);
                printf("compressing %s (%ld)\n", v152, v154);
              }
              int v155 = *(_DWORD *)(v38 + 8);
              int v156 = *(_DWORD *)(v38 + 12);
              int v157 = *(_DWORD *)(v38 + 16);
              uint64_t v158 = *(int *)(v38 + 20);
              if (*(int *)a1 >= 1) {
                int v159 = (*(_DWORD *)a1 - 1) / (v156 * v155 * v157) + 1;
              }
              else {
                int v159 = *(_DWORD *)(v38 + 20);
              }
              if (!*((_DWORD *)a1 + 2)) {
                int v159 = 1;
              }
              if (v159 >= (int)v158) {
                int v160 = *(_DWORD *)(v38 + 20);
              }
              else {
                int v160 = v159;
              }
              if (v3 >= 2)
              {
                printf("\tchannels_per_chunk=%d\n  ", v160);
                int v155 = *(_DWORD *)(v38 + 8);
                int v156 = *(_DWORD *)(v38 + 12);
                int v157 = *(_DWORD *)(v38 + 16);
              }
              uint64_t v486 = v158;
              int v495 = v160;
              int v161 = v155 * v160 * v156;
              uint64_t v162 = v155;
              uint64_t v163 = 12;
              unint64_t v164 = v155;
              do
              {
                v164 *= *(int *)(v38 + v163);
                v163 += 4;
              }
              while (v163 != 24);
              int v165 = v161 * v157;
              if (v164 < v161 * v157)
              {
                uint64_t v166 = 0;
                int v165 = v155;
                do
                {
                  v165 *= *(_DWORD *)(v38 + 12 + v166);
                  v166 += 4;
                }
                while (v166 != 12);
              }
              for (uint64_t k = 12; k != 24; k += 4)
                v162 *= *(int *)(v38 + k);
              (*(void (**)(std::string *__return_ptr, void *))(*v41 + 512))(&v561, v41);
              (*(void (**)(uint64_t *__return_ptr, void *))(*v41 + 496))(&v566, v41);
              std::vector<int>::size_type v168 = v165;
              unint64_t v483 = (v162 - 1) / (unint64_t)v165;
              int v169 = v486;
              if (v483 != -1)
              {
                std::vector<int>::size_type v170 = 0;
                uint64_t v504 = 0;
                uint64_t v512 = 0;
                uint64_t v514 = 0;
                int v171 = 0;
                uint64_t v473 = 4 * v168;
                v477 = v11;
                std::vector<int>::size_type v480 = v168;
                while (1)
                {
                  uint64_t v172 = 0;
                  std::vector<int>::size_type v507 = v170;
                  uint64_t v489 = (int)v170;
                  uint64_t v498 = v171;
                  std::string::size_type v173 = v563.__r_.__value_.__r.__words[0];
                  std::vector<int>::size_type v174 = *(int *)(v563.__r_.__value_.__r.__words[0] + 8);
                  std::vector<int>::size_type v175 = v174;
                  do
                  {
                    v175 *= *(int *)(v563.__r_.__value_.__r.__words[0] + 12 + v172);
                    v172 += 4;
                  }
                  while (v172 != 12);
                  std::vector<int>::size_type v176 = v512 * v168;
                  if (v512 * v168 + v168 >= v175)
                  {
                    for (uint64_t m = 0; m != 12; m += 4)
                      v174 *= *(int *)(v563.__r_.__value_.__r.__words[0] + 12 + m);
                    std::vector<int>::size_type v168 = v174 - v176;
                  }
                  long long v178 = v5[1];
                  long long v546 = *v5;
                  long long v547 = v178;
                  __int16 v548 = *((_WORD *)v5 + 16);
                  std::vector<int>::size_type v501 = v176;
                  if (*((char *)v5 + 63) < 0)
                  {
                    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v5 + 5), *((void *)v5 + 6));
                    std::vector<int>::size_type v176 = v501;
                  }
                  else
                  {
                    std::string __p = *v478;
                  }
                  double v179 = v6;
                  uint64_t v180 = *(void *)(v173 + 24);
                  std::string v181 = (float *)(v180 + 4 * v176);
                  float v182 = *v181;
                  if (v168)
                  {
                    std::vector<std::string> v183 = (float *)(v180 + v514);
                    std::vector<int>::size_type v184 = v168;
                    float v185 = *v181;
                    do
                    {
                      float v186 = *v183++;
                      float v187 = v186;
                      if (v186 < v182) {
                        float v182 = v187;
                      }
                      if (v187 > v185) {
                        float v185 = v187;
                      }
                      --v184;
                    }
                    while (v184);
                  }
                  else
                  {
                    float v185 = *v181;
                  }
                  unint64_t v188 = *((int *)v5 + 1);
                  uint64_t v189 = *((unsigned int *)v5 + 1);
                  if (v189)
                  {
                    if ((v188 & 0x80000000) != 0) {
                      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                    }
                    std::string v190 = (float *)operator new(16 * v188);
                    uint64_t v191 = v190;
                    std::vector<std::string> v192 = (char *)v190;
                    do
                    {
                      *(_DWORD *)std::vector<std::string> v192 = 0;
                      *((void *)v192 + 1) = 0;
                      v192 += 16;
                    }
                    while (v192 != (char *)&v190[4 * v188]);
                    v492 = &v190[4 * v188];
                    if (!HIDWORD(v546))
                    {
                      if ((int)v189 >= 1)
                      {
                        uint64_t v193 = 0;
                        char v194 = v190 + 2;
                        do
                        {
                          *(v194 - 2) = v182
                                      + (float)((float)((float)(v185 - v182) * (float)(int)v193)
                                              / (float)((float)(int)v189 + -1.0));
                          *(void *)char v194 = 0;
                          v194 += 4;
                          ++v193;
                        }
                        while (v189 != v193);
                      }
                      goto LABEL_299;
                    }
                  }
                  else
                  {
                    v492 = 0;
                    uint64_t v191 = 0;
                    if (!HIDWORD(v546)) {
                      goto LABEL_299;
                    }
                  }
                  LODWORD(__B.__r_.__value_.__l.__data_) = 0;
                  std::vector<float>::vector(&dest, v188, &__B);
                  LODWORD(__x.__r_.__value_.__l.__data_) = 0;
                  std::vector<int>::vector((std::vector<int> *)&__B, v188, (const std::vector<int>::value_type *)&__x);
                  float v573 = 0.0;
                  std::vector<float>::vector(&__x, v188, &v573);
                  float v195 = *v181;
                  if (v168)
                  {
                    uint64_t v196 = 0;
                    float v198 = *v181;
                    do
                    {
                      uint64_t v197 = v180 + v514;
                      float v199 = *(float *)(v180 + v514 + 4 * v196);
                      if (v199 < v198) {
                        float v198 = *(float *)(v197 + 4 * v196);
                      }
                      if (v199 > v195) {
                        float v195 = *(float *)(v197 + 4 * v196);
                      }
                      ++v196;
                    }
                    while (v168 != v196);
                    float v200 = v195 - v198;
                    std::string::size_type v201 = __B.__r_.__value_.__r.__words[0];
                    uint64_t v202 = v180;
                    std::vector<int>::size_type v203 = v168;
                    do
                    {
                      float v204 = (float)((float)(*(float *)(v202 + v514) - v198) / v200) * (float)(v189 - 1);
                      ++*(_DWORD *)(v201 + 4 * (int)v204);
                      v202 += 4;
                      --v203;
                    }
                    while (v203);
                    float v205 = v200 / (float)(int)v189;
                  }
                  else
                  {
                    float v205 = (float)(v195 - v195) / (float)(int)v189;
                  }
                  unint64_t v522 = v188;
                  if ((int)v189 >= 1)
                  {
                    uint64_t v206 = 0;
                    std::string::size_type v207 = __B.__r_.__value_.__r.__words[0];
                    std::string::size_type v208 = __x.__r_.__value_.__r.__words[0];
                    id v209 = (float *)dest.data;
                    do
                    {
                      *(float *)(v208 + 4 * v206) = (float)*(int *)(v207 + 4 * v206) / (float)v168;
                      v209[v206] = v205 * (float)((float)(int)v206 + 0.5);
                      ++v206;
                    }
                    while (v189 != v206);
                  }
                  memset(&v572, 0, sizeof(v572));
                  if (v189)
                  {
                    id v210 = 0;
                    std::string::size_type v211 = 0;
                    uint64_t v212 = 0;
                    do
                    {
                      int v213 = rand();
                      int v214 = rand();
                      float v215 = (float)v213 * 4.6566e-10;
                      unint64_t v216 = (unint64_t)(float)(v214 % (int)v522);
                      if (v215 < *(float *)(__x.__r_.__value_.__r.__words[0] + 4 * v216))
                      {
                        float v217 = *((float *)dest.data + v216)
                             + (float)((float)((float)((float)rand() * 4.6566e-10) + v9) * v205);
                        if ((unint64_t)v212 >= v211)
                        {
                          uint64_t v219 = v212 - v210;
                          unint64_t v220 = v219 + 1;
                          if ((unint64_t)(v219 + 1) >> 62) {
                            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                          }
                          if ((uint64_t)(v211 - (void)v210) >> 1 > v220) {
                            unint64_t v220 = (uint64_t)(v211 - (void)v210) >> 1;
                          }
                          if (v211 - (unint64_t)v210 >= 0x7FFFFFFFFFFFFFFCLL) {
                            unint64_t v221 = 0x3FFFFFFFFFFFFFFFLL;
                          }
                          else {
                            unint64_t v221 = v220;
                          }
                          if (v221) {
                            unint64_t v221 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v221);
                          }
                          else {
                            uint64_t v222 = 0;
                          }
                          unsigned int v223 = (float *)(v221 + 4 * v219);
                          float *v223 = v217;
                          std::string::size_type v218 = (std::string::size_type)(v223 + 1);
                          while (v212 != v210)
                          {
                            int v224 = *((_DWORD *)v212-- - 1);
                            *((_DWORD *)v223-- - 1) = v224;
                          }
                          std::string::size_type v211 = v221 + 4 * v222;
                          v572.__r_.__value_.__r.__words[0] = (std::string::size_type)v223;
                          v572.__r_.__value_.__r.__words[2] = v211;
                          if (v210) {
                            operator delete(v210);
                          }
                          id v210 = v223;
                        }
                        else
                        {
                          float *v212 = v217;
                          std::string::size_type v218 = (std::string::size_type)(v212 + 1);
                        }
                        v572.__r_.__value_.__l.__size_ = v218;
                        uint64_t v212 = (float *)v218;
                        uint64_t v8 = &qword_192DCA000;
                      }
                    }
                    while (v522 != v212 - v210);
                  }
                  if (__x.__r_.__value_.__r.__words[0])
                  {
                    __x.__r_.__value_.__l.__size_ = __x.__r_.__value_.__r.__words[0];
                    operator delete(__x.__r_.__value_.__l.__data_);
                  }
                  if (__B.__r_.__value_.__r.__words[0])
                  {
                    __B.__r_.__value_.__l.__size_ = __B.__r_.__value_.__r.__words[0];
                    operator delete(__B.__r_.__value_.__l.__data_);
                  }
                  if (dest.data)
                  {
                    dest.vImagePixelCount height = (vImagePixelCount)dest.data;
                    operator delete(dest.data);
                  }
                  std::string v225 = (void *)v572.__r_.__value_.__r.__words[0];
                  if ((int)v189 < 1)
                  {
                    if (!v572.__r_.__value_.__r.__words[0]) {
                      goto LABEL_299;
                    }
                  }
                  else
                  {
                    long long v226 = v191 + 2;
                    std::string v227 = (int *)v572.__r_.__value_.__r.__words[0];
                    uint64_t v228 = v189;
                    do
                    {
                      int v229 = *v227++;
                      *((_DWORD *)v226 - 2) = v229;
                      *long long v226 = 0;
                      v226 += 2;
                      --v228;
                    }
                    while (v228);
                  }
                  v572.__r_.__value_.__l.__size_ = (std::string::size_type)v225;
                  operator delete(v225);
LABEL_299:
                  LODWORD(__B.__r_.__value_.__l.__data_) = -1;
                  std::vector<int>::vector((std::vector<int> *)&dest, v168, (const std::vector<int>::value_type *)&__B);
                  if (SDWORD2(v546) < 1)
                  {
LABEL_357:
                    if (!v168) {
                      goto LABEL_377;
                    }
                  }
                  else
                  {
                    int v230 = 0;
                    while (v168)
                    {
                      uint64_t v231 = 0;
                      int v232 = 0;
                      id v233 = (int *)dest.data;
                      do
                      {
                        if ((int)v189 < 1)
                        {
                          int v236 = -1;
                        }
                        else
                        {
                          uint64_t v234 = 0;
                          float v235 = 0.0;
                          int v236 = -1;
                          uint64_t v237 = v191;
                          do
                          {
                            float v238 = *v237;
                            v237 += 4;
                            float v239 = (float)(v181[v231] - v238) * (float)(v181[v231] - v238);
                            if (v239 < v235 || v236 == -1)
                            {
                              float v235 = v239;
                              int v236 = v234;
                            }
                            ++v234;
                          }
                          while (v189 != v234);
                        }
                        if (v233[v231] != v236) {
                          ++v232;
                        }
                        v233[v231++] = v236;
                      }
                      while (v231 != v168);
                      if (!v232) {
                        goto LABEL_376;
                      }
                      id v241 = v191 + 2;
                      uint64_t v242 = v189;
                      if ((int)v189 >= 1)
                      {
                        do
                        {
                          *((_DWORD *)v241 - 2) = 0;
                          void *v241 = 0;
                          v241 += 2;
                          --v242;
                        }
                        while (v242);
                      }
                      for (uint64_t n = 0; n != v168; ++n)
                      {
                        long long v244 = &v191[4 * v233[n]];
                        *long long v244 = *(float *)(v180 + v514 + 4 * n) + *v244;
                        ++*((void *)v244 + 1);
                      }
                      uint64_t v245 = v191;
                      uint64_t v246 = v189;
                      if ((int)v189 < 1)
                      {
                        unint64_t v248 = 0;
                        int v249 = -1;
                      }
                      else
                      {
                        do
                        {
                          *uint64_t v245 = *v245 / (float)*((unint64_t *)v245 + 1);
                          v245 += 4;
                          --v246;
                        }
                        while (v246);
                        uint64_t v247 = 0;
                        unint64_t v248 = 0;
                        int v249 = -1;
                        uint64_t v250 = (unint64_t *)(v191 + 2);
                        do
                        {
                          unint64_t v252 = *v250;
                          v250 += 2;
                          unint64_t v251 = v252;
                          BOOL v253 = v252 > v248;
                          if (v252 >= v248) {
                            int v249 = v247;
                          }
                          if (v253) {
                            unint64_t v248 = v251;
                          }
                          ++v247;
                        }
                        while (v189 != v247);
                      }
                      memset(&__B, 0, sizeof(__B));
                      std::vector<unsigned long>::reserve((void **)&__B.__r_.__value_.__l.__data_, v248);
                      for (iuint64_t i = 0; ii != v168; ++ii)
                      {
                        if (*((_DWORD *)dest.data + ii) == v249)
                        {
                          std::string::size_type v255 = __B.__r_.__value_.__l.__size_;
                          if (__B.__r_.__value_.__l.__size_ >= __B.__r_.__value_.__r.__words[2])
                          {
                            std::string::size_type v257 = (void *)__B.__r_.__value_.__r.__words[0];
                            uint64_t v258 = (uint64_t)(__B.__r_.__value_.__l.__size_ - __B.__r_.__value_.__r.__words[0]) >> 3;
                            unint64_t v259 = v258 + 1;
                            if ((unint64_t)(v258 + 1) >> 61) {
                              std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                            }
                            int64_t v260 = __B.__r_.__value_.__r.__words[2] - __B.__r_.__value_.__r.__words[0];
                            if ((uint64_t)(__B.__r_.__value_.__r.__words[2] - __B.__r_.__value_.__r.__words[0]) >> 2 > v259) {
                              unint64_t v259 = v260 >> 2;
                            }
                            BOOL v261 = (unint64_t)v260 >= 0x7FFFFFFFFFFFFFF8;
                            unint64_t v262 = 0x1FFFFFFFFFFFFFFFLL;
                            if (!v261) {
                              unint64_t v262 = v259;
                            }
                            if (v262)
                            {
                              unint64_t v262 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v262);
                              std::string::size_type v255 = __B.__r_.__value_.__l.__size_;
                              std::string::size_type v257 = (void *)__B.__r_.__value_.__r.__words[0];
                            }
                            else
                            {
                              uint64_t v263 = 0;
                            }
                            float v264 = (void *)(v262 + 8 * v258);
                            *float v264 = ii;
                            std::string::size_type v256 = (std::string::size_type)(v264 + 1);
                            while ((void *)v255 != v257)
                            {
                              uint64_t v265 = *(void *)(v255 - 8);
                              v255 -= 8;
                              *--float v264 = v265;
                            }
                            __B.__r_.__value_.__r.__words[0] = (std::string::size_type)v264;
                            __B.__r_.__value_.__l.__size_ = v256;
                            __B.__r_.__value_.__r.__words[2] = v262 + 8 * v263;
                            if (v257) {
                              operator delete(v257);
                            }
                          }
                          else
                          {
                            *(void *)__B.__r_.__value_.__l.__size_ = ii;
                            std::string::size_type v256 = v255 + 8;
                          }
                          __B.__r_.__value_.__l.__size_ = v256;
                        }
                      }
                      uint64_t v266 = v189;
                      uint64_t v267 = v191 + 2;
                      if ((int)v189 >= 1)
                      {
                        do
                        {
                          if (!*(void *)v267) {
                            *(v267 - 2) = v181[rand() % v168];
                          }
                          v267 += 4;
                          --v266;
                        }
                        while (v266);
                      }
                      if (__B.__r_.__value_.__r.__words[0])
                      {
                        __B.__r_.__value_.__l.__size_ = __B.__r_.__value_.__r.__words[0];
                        operator delete(__B.__r_.__value_.__l.__data_);
                      }
                      ++v230;
                      uint64_t v8 = &qword_192DCA000;
                      if (v230 >= SDWORD2(v546)) {
                        goto LABEL_357;
                      }
                    }
                    int v230 = 0;
LABEL_376:
                    printf("\tearly exit iter=%d\n", v230);
                    if (!v168)
                    {
LABEL_377:
                      float v277 = 0.0;
                      int v3 = a3;
                      goto LABEL_378;
                    }
                  }
                  uint64_t v268 = 0;
                  long long v269 = (int *)dest.data;
                  int v3 = a3;
                  do
                  {
                    if ((int)v189 < 1)
                    {
                      int v272 = -1;
                    }
                    else
                    {
                      uint64_t v270 = 0;
                      float v271 = 0.0;
                      int v272 = -1;
                      float v273 = v191;
                      do
                      {
                        float v274 = *v273;
                        v273 += 4;
                        float v275 = (float)(v181[v268] - v274) * (float)(v181[v268] - v274);
                        if (v275 < v271 || v272 == -1)
                        {
                          float v271 = v275;
                          int v272 = v270;
                        }
                        ++v270;
                      }
                      while (v189 != v270);
                    }
                    v269[v268++] = v272;
                  }
                  while (v268 != v168);
                  float v277 = 0.0;
                  std::vector<int>::size_type v278 = v168;
                  do
                  {
                    uint64_t v279 = *v269++;
                    float v280 = sqrtf((float)(*(float *)(v180 + v514) - v191[4 * v279])* (float)(*(float *)(v180 + v514) - v191[4 * v279]));
                    if (v280 > v277) {
                      float v277 = v280;
                    }
                    v180 += 4;
                    --v278;
                  }
                  while (v278);
LABEL_378:
                  float v281 = *v191;
                  float v282 = *v191;
                  v283 = v191;
                  BOOL v11 = v477;
                  if ((int)v189 >= 1)
                  {
                    do
                    {
                      float v284 = *v283;
                      v283 += 4;
                      float v285 = v284;
                      if (v284 < v281) {
                        float v281 = v285;
                      }
                      if (v285 > v282) {
                        float v282 = v285;
                      }
                      --v189;
                    }
                    while (v189);
                  }
                  long long v551 = 0u;
                  memset(&src, 0, sizeof(src));
                  std::vector<float>::resize(&src, ((char *)v492 - (char *)v191) >> 4);
                  int v169 = v486;
                  if (v492 != v191)
                  {
                    uint64_t v286 = src.data;
                    if ((unint64_t)(((char *)v492 - (char *)v191) >> 4) <= 1) {
                      uint64_t v287 = 1;
                    }
                    else {
                      uint64_t v287 = ((char *)v492 - (char *)v191) >> 4;
                    }
                    v288 = v191;
                    do
                    {
                      int v289 = *(_DWORD *)v288;
                      v288 += 4;
                      *v286++ = v289;
                      --v287;
                    }
                    while (v287);
                  }
                  std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)&src.rowBytes, (char *)dest.data, dest.height, (uint64_t)(dest.height - (unint64_t)dest.data) >> 2);
                  float v552 = v277;
                  float v553 = v182;
                  float v554 = v185;
                  float v555 = v281;
                  float v556 = v282;
                  if (dest.data)
                  {
                    dest.vImagePixelCount height = (vImagePixelCount)dest.data;
                    operator delete(dest.data);
                  }
                  operator delete(v191);
                  double v6 = v179;
                  double v7 = 20.0;
                  float v9 = -0.5;
                  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(__p.__r_.__value_.__l.__data_);
                  }
                  uint64_t v5 = a1;
                  if (v3 >= 2) {
                    printf("\tmaxerr=%e mM=%e %e cmM=%e %e\n", v552, v553, v554, v555, v556);
                  }
                  std::vector<int>::size_type v290 = v501;
                  if (v168 + v501 > v501)
                  {
                    rowBytes = (int *)src.rowBytes;
                    unint64_t v292 = src.data;
                    uint64_t v293 = *(void *)(v562.__r_.__value_.__r.__words[0] + 24);
                    std::vector<int>::size_type v294 = v168 + v504 + v489;
                    do
                    {
                      uint64_t v295 = *rowBytes++;
                      *(_DWORD *)(v293 + v514) = v292[v295];
                      v293 += 4;
                      --v294;
                    }
                    while (v294);
                  }
                  if (v3 > 1)
                  {
                    printf("\tChannel for chunk %d/%d: %d - %d. C=%d %e - %e\n", v512, v483 + 1, v495 * v512, v495 + v495 * v512, v486, *(float *)src.data, *(float *)(src.height - 4));
                    std::vector<int>::size_type v290 = v501;
                  }
                  if (v512 * v495 < (v512 + 1) * v495)
                  {
                    std::string::size_type v296 = v561.__r_.__value_.__r.__words[0];
                    uint64_t v297 = src.data;
                    uint64_t v298 = ((uint64_t)(src.height - (unint64_t)src.data) >> 2) - 1;
                    int v299 = v495;
                    uint64_t v300 = v498;
                    do
                    {
                      if (v300 < v486)
                      {
                        int v301 = (_DWORD *)(*(void *)(v296 + 16) + 4 * v300);
                        *int v301 = *v297;
                        v301[v486] = v297[v298];
                      }
                      ++v300;
                      --v299;
                    }
                    while (v299);
                  }
                  v302 = (_DWORD *)src.rowBytes;
                  if (*((int *)a1 + 2) <= 0 && v168 + v501 > v290)
                  {
                    uint64_t v305 = 0;
                    std::vector<int>::size_type v306 = v168 + v504 + v489;
                    std::vector<int>::size_type v168 = v480;
                    do
                    {
                      *(unsigned char *)(*(void *)(v566 + 24) + v507 + v305) = v302[v305];
                      v302 = (_DWORD *)src.rowBytes;
                      *(float *)(*(void *)(v562.__r_.__value_.__r.__words[0] + 24) + v514 + 4 * v305) = *(float *)src.data + (float)((float)((float)(*(float *)(src.height - 4) - *(float *)src.data) * (float)*(int *)(src.rowBytes + 4 * v305)) * *((float *)v8 + 646));
                      ++v305;
                    }
                    while (v306 != v305);
                  }
                  else
                  {
                    std::vector<int>::size_type v168 = v480;
                    std::vector<int>::size_type v304 = v507;
                    if (!src.rowBytes) {
                      goto LABEL_415;
                    }
                  }
                  *(void *)&long long v551 = v302;
                  operator delete(v302);
                  std::vector<int>::size_type v304 = v507;
LABEL_415:
                  if (src.data)
                  {
                    src.vImagePixelCount height = (vImagePixelCount)src.data;
                    operator delete(src.data);
                    std::vector<int>::size_type v304 = v507;
                  }
                  std::vector<int>::size_type v170 = v304 + v168;
                  int v171 = v498 + v495;
                  v514 += v473;
                  v504 -= v168;
                  BOOL v89 = v512++ == v483;
                  if (v89)
                  {
                    std::string::size_type v38 = v563.__r_.__value_.__r.__words[0];
                    break;
                  }
                }
              }
              unint64_t v307 = 0;
              unint64_t v308 = *(int *)(v562.__r_.__value_.__r.__words[0] + 8);
              std::string::size_type v309 = v562.__r_.__value_.__r.__words[0] + 12;
              float v310 = 0.0;
              double v311 = 0.0;
              while (1)
              {
                uint64_t v312 = 0;
                unint64_t v313 = *(int *)(v562.__r_.__value_.__r.__words[0] + 8);
                do
                {
                  v313 *= *(int *)(v309 + v312);
                  v312 += 4;
                }
                while (v312 != 12);
                uint64_t v314 = 0;
                unint64_t v315 = *(int *)(v38 + 8);
                do
                {
                  v315 *= *(int *)(v38 + 12 + v314);
                  v314 += 4;
                }
                while (v314 != 12);
                if (v315 < v313) {
                  unint64_t v313 = v315;
                }
                if (v313 <= v307) {
                  break;
                }
                float v316 = *(float *)(*(void *)(v38 + 24) + 4 * v307);
                float v317 = *(float *)(*(void *)(v562.__r_.__value_.__r.__words[0] + 24) + 4 * v307) - v316;
                double v311 = v311 + (float)(v317 * v317);
                float v318 = fabsf(v316);
                if (v307) {
                  BOOL v319 = v318 <= v310;
                }
                else {
                  BOOL v319 = 0;
                }
                if (!v319) {
                  float v310 = v318;
                }
                ++v307;
              }
              for (juint64_t j = 0; jj != 12; jj += 4)
                v308 *= *(int *)(v309 + jj);
              double v321 = log10((v310 + 0.00001) / (sqrt(v311 / (double)v308) + v6));
              if (v3 >= 2)
              {
                uint64_t v322 = (char *)(v518 + 16);
                if (*(char *)(v518 + 39) < 0) {
                  uint64_t v322 = *(char **)v322;
                }
                std::string::basic_string[abi:ne180100]<0>(&v544, v322);
                if (v545 < 0) {
                  operator delete(v544);
                }
              }
              float v14 = v321 * v7;
              if (*((float *)v5 + 4) < v14)
              {
                if (*((int *)v5 + 2) <= 0)
                {
                  if (v3 >= 2) {
                    printf("setting ranges %d\n", v169);
                  }
                  std::string::size_type v323 = v564.__r_.__value_.__r.__words[0];
                  long long v543 = *(_OWORD *)&v561.__r_.__value_.__l.__data_;
                  if (v561.__r_.__value_.__l.__size_) {
                    atomic_fetch_add_explicit((atomic_ullong *volatile)(v561.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
                  }
                  uint64_t v541 = 0;
                  v542 = 0;
                  (*(void (**)(std::string::size_type, long long *, uint64_t *))(*(void *)v323 + 592))(v323, &v543, &v541);
                  if (v542) {
                    nitro::nitro_function::nitro_function(v542);
                  }
                  if (*((void *)&v543 + 1)) {
                    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v543 + 1));
                  }
                  uint64_t v539 = v566;
                  v540 = v567;
                  if (v567) {
                    atomic_fetch_add_explicit(&v567->__shared_owners_, 1uLL, memory_order_relaxed);
                  }
                  uint64_t v537 = 0;
                  v538 = 0;
                  (*(void (**)(std::string::size_type, uint64_t *, uint64_t *))(*(void *)v323 + 560))(v323, &v539, &v537);
                  if (v538) {
                    nitro::nitro_function::nitro_function(v538);
                  }
                  if (v540) {
                    nitro::nitro_function::nitro_function(v540);
                  }
                  if (v568)
                  {
                    uint64_t v535 = 0;
                    v536 = 0;
                    src.vImagePixelCount height = 0;
                    src.std::string::pointer data = 0;
                    (*(void (**)(std::string::size_type, uint64_t *, vImage_Buffer *))(*(void *)v323 + 544))(v323, &v535, &src);
                    if (src.height) {
                      nitro::nitro_function::nitro_function((std::__shared_weak_count *)src.height);
                    }
                    if (v536) {
                      nitro::nitro_function::nitro_function(v536);
                    }
                  }
                  v469 += 4 * *(int *)(v561.__r_.__value_.__r.__words[0] + 8);
                }
                id v324 = std::__tree<std::__value_type<std::shared_ptr<Espresso::generic_convolution_kernel>,std::shared_ptr<Espresso::blob<float,4>>>,std::__map_value_compare<std::shared_ptr<Espresso::generic_convolution_kernel>,std::__value_type<std::shared_ptr<Espresso::generic_convolution_kernel>,std::shared_ptr<Espresso::blob<float,4>>>,std::less<std::shared_ptr<Espresso::generic_convolution_kernel>>,true>,std::allocator<std::__value_type<std::shared_ptr<Espresso::generic_convolution_kernel>,std::shared_ptr<Espresso::blob<float,4>>>>>::__emplace_unique_key_args<std::shared_ptr<Espresso::generic_convolution_kernel>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<Espresso::generic_convolution_kernel> const&>,std::tuple<>>(&v569, v564.__r_.__value_.__r.__words[0], (uint64_t *)&v564);
                long long v325 = *(_OWORD *)&v562.__r_.__value_.__l.__data_;
                if (v562.__r_.__value_.__l.__size_) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(v562.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
                }
                unint64_t v326 = (std::__shared_weak_count *)v324[7];
                *((_OWORD *)v324 + 3) = v325;
                if (v326) {
                  nitro::nitro_function::nitro_function(v326);
                }
              }
              if (v567) {
                nitro::nitro_function::nitro_function(v567);
              }
              if (v561.__r_.__value_.__l.__size_) {
                nitro::nitro_function::nitro_function((std::__shared_weak_count *)v561.__r_.__value_.__l.__size_);
              }
              if (v562.__r_.__value_.__l.__size_) {
                nitro::nitro_function::nitro_function((std::__shared_weak_count *)v562.__r_.__value_.__l.__size_);
              }
              int v28 = 1;
              LOBYTE(v38) = 1;
LABEL_474:
              if (v563.__r_.__value_.__l.__size_) {
                nitro::nitro_function::nitro_function((std::__shared_weak_count *)v563.__r_.__value_.__l.__size_);
              }
              if ((v38 & 1) == 0)
              {
                uint64_t v16 = v509;
                goto LABEL_46;
              }
              int v33 = 0;
              uint64_t v16 = v509;
              goto LABEL_37;
            }
            operator delete(src.data);
            if (!v42) {
              goto LABEL_198;
            }
          }
LABEL_196:
          LOBYTE(v38) = 0;
          goto LABEL_474;
        }
      }
LABEL_46:
      uint64_t v36 = v517;
      if (v564.__r_.__value_.__l.__size_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v564.__r_.__value_.__l.__size_);
      }
      if (!v16) {
        goto LABEL_50;
      }
LABEL_49:
      nitro::nitro_function::nitro_function(v16);
LABEL_50:
      if (v11) {
        nitro::nitro_function::nitro_function(v11);
      }
      uint64_t v4 = v36 + 2;
      if (v4 == v515) {
        goto LABEL_731;
      }
    }
    if (__B.__r_.__value_.__r.__words[0])
    {
      uint64_t v22 = v18;
      std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&src, *(_DWORD *)(__B.__r_.__value_.__r.__words[0] + 8), *(_DWORD *)(__B.__r_.__value_.__r.__words[0] + 12), 1, 1);
      int v24 = (int *)src.data;
      vImagePixelCount height = src.height;
      memcpy(*((void **)src.data + 3), *(const void **)(__B.__r_.__value_.__r.__words[0] + 16), 4 * *(int *)(__B.__r_.__value_.__r.__words[0] + 8) * (uint64_t)*(int *)(__B.__r_.__value_.__r.__words[0] + 12));
      char v27 = 1;
      goto LABEL_70;
    }
LABEL_69:
    uint64_t v22 = v18;
    int v24 = 0;
    vImagePixelCount height = 0;
    char v27 = 1;
    goto LABEL_70;
  }
  unint64_t v469 = 0;
LABEL_731:
  if (v3 > 1) {
    printf("Total size of AUX lut tables/ranges %.4f MB\n", (float)((float)v469 * 0.00000095367));
  }
  uint64_t v452 = v569;
  if (v569 != (uint64_t *)v570)
  {
    do
    {
      v453 = (void *)v452[4];
      v454 = (std::__shared_weak_count *)v452[5];
      src.std::string::pointer data = v453;
      src.vImagePixelCount height = (vImagePixelCount)v454;
      if (v454) {
        atomic_fetch_add_explicit(&v454->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      vImagePixelCount v455 = v452[6];
      std::vector<std::string> v456 = (std::__shared_weak_count *)v452[7];
      src.width = v455;
      src.rowBytes = (size_t)v456;
      if (v456)
      {
        atomic_fetch_add_explicit(&v456->__shared_owners_, 1uLL, memory_order_relaxed);
        v524 = v456;
        atomic_fetch_add_explicit(&v456->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      else
      {
        v524 = 0;
      }
      vImagePixelCount v523 = v455;
      (*(void (**)(void *, vImagePixelCount *))(*(void *)v453 + 400))(v453, &v523);
      if (v524) {
        nitro::nitro_function::nitro_function(v524);
      }
      if (v456) {
        nitro::nitro_function::nitro_function(v456);
      }
      if (v454) {
        nitro::nitro_function::nitro_function(v454);
      }
      v457 = (uint64_t *)v452[1];
      if (v457)
      {
        do
        {
          char v458 = v457;
          v457 = (uint64_t *)*v457;
        }
        while (v457);
      }
      else
      {
        do
        {
          char v458 = (uint64_t *)v452[2];
          BOOL v89 = *v458 == (void)v452;
          uint64_t v452 = v458;
        }
        while (!v89);
      }
      uint64_t v452 = v458;
    }
    while (v458 != (uint64_t *)v570);
  }
  std::__tree<std::__value_type<std::shared_ptr<Espresso::generic_convolution_kernel>,std::shared_ptr<Espresso::blob<float,4>>>,std::__map_value_compare<std::shared_ptr<Espresso::generic_convolution_kernel>,std::__value_type<std::shared_ptr<Espresso::generic_convolution_kernel>,std::shared_ptr<Espresso::blob<float,4>>>,std::less<std::shared_ptr<Espresso::generic_convolution_kernel>>,true>,std::allocator<std::__value_type<std::shared_ptr<Espresso::generic_convolution_kernel>,std::shared_ptr<Espresso::blob<float,4>>>>>::destroy(v570[0]);
}