Espresso::network_optimization_graph *Espresso::network_optimization_graph::network_optimization_graph(Espresso::network_optimization_graph *this, Espresso::net *a2)
{
  uint64_t **v2;
  uint64_t **v3;
  unint64_t v5;
  char *v6;
  char *v7;
  void *v8;
  long long *v9;
  long long *v10;
  long long v11;
  void *v12;
  long long *v13;
  long long *v14;
  long long v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  int v23;
  uint64_t v24;
  const void *v25;
  std::__shared_weak_count *v26;
  uint64_t **v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  BOOL v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  int v41;
  char *v42;
  uint64_t **v43;
  uint64_t **v44;
  char *v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  int v55;
  uint64_t v58;
  std::string v59;
  char **v60;
  char *v61[2];
  uint64_t *v62;
  void *v63[2];
  std::string *v64;

  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 2) = (char *)this + 24;
  v2 = (uint64_t **)((char *)this + 16);
  *((void *)this + 6) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = (char *)this + 48;
  v3 = (uint64_t **)((char *)this + 40);
  *((void *)this + 7) = 0;
  v63[0] = 0;
  v63[1] = 0;
  v61[1] = 0;
  v62 = (uint64_t *)v63;
  v60 = v61;
  v61[0] = 0;
  if (*((void *)a2 + 5) != *((void *)a2 + 4))
  {
    v5 = 0;
    v6 = (char *)a2 + 96;
    v7 = (char *)a2 + 56;
    do
    {
      v59.__r_.__value_.__r.__words[0] = v5;
      v8 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)v6, v5, &v59);
      v9 = (long long *)v8[3];
      v10 = (long long *)v8[4];
      while (v9 != v10)
      {
        if (*((char *)v9 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v59, *(const std::string::value_type **)v9, *((void *)v9 + 1));
        }
        else
        {
          v11 = *v9;
          v59.__r_.__value_.__r.__words[2] = *((void *)v9 + 2);
          *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v11;
        }
        v64 = &v59;
        *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v62, &v59, (long long **)&v64)+ 14) = v5;
        if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v59.__r_.__value_.__l.__data_);
        }
        v9 = (long long *)((char *)v9 + 24);
      }
      v59.__r_.__value_.__r.__words[0] = v5;
      v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)v7, v5, &v59);
      v13 = (long long *)v12[3];
      v14 = (long long *)v12[4];
      while (v13 != v14)
      {
        if (*((char *)v13 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v59, *(const std::string::value_type **)v13, *((void *)v13 + 1));
        }
        else
        {
          v15 = *v13;
          v59.__r_.__value_.__r.__words[2] = *((void *)v13 + 2);
          *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v15;
        }
        v64 = &v59;
        *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v60, &v59, (long long **)&v64)+ 14) = v5;
        if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v59.__r_.__value_.__l.__data_);
        }
        v13 = (long long *)((char *)v13 + 24);
      }
      ++v5;
      v17 = *((void *)a2 + 4);
      v16 = *((void *)a2 + 5);
    }
    while (v5 < (v16 - v17) >> 4);
    v58 = (uint64_t)v7;
    LODWORD(v64) = 0;
    if (v16 != v17)
    {
      v18 = 0;
      v19 = 0;
      do
      {
        v59.__r_.__value_.__r.__words[0] = v19;
        v20 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v58, v19, &v59);
        v22 = (void *)v20[3];
        v21 = (void *)v20[4];
        if (v22 != v21)
        {
          do
          {
            v23 = (int)v64;
            v24 = *(void *)(*((void *)a2 + 4) + 16 * (int)v64);
            v25 = *(const void **)(v24 + 64);
            if (v25
            {
              v26 = *(std::__shared_weak_count **)(v24 + 72);
              if (v26)
              {
                atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
                nitro::nitro_function::nitro_function(v26);
              }
            }
            else if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(v63[0], v22))
            {
              v27 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v3, v23, &v64);
              v59.__r_.__value_.__r.__words[0] = (std::string::size_type)v22;
              v28 = std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v62, v22, (long long **)&v59);
              v29 = v28;
              v30 = (char *)v27[6];
              v31 = v27[7];
              if (v30 >= (char *)v31)
              {
                v33 = v27[5];
                v34 = (v30 - (char *)v33) >> 2;
                if ((unint64_t)(v34 + 1) >> 62) {
                  goto LABEL_63;
                }
                v35 = (char *)v31 - (char *)v33;
                v36 = ((char *)v31 - (char *)v33) >> 1;
                if (v36 <= v34 + 1) {
                  v36 = v34 + 1;
                }
                v37 = v35 >= 0x7FFFFFFFFFFFFFFCLL;
                v38 = 0x3FFFFFFFFFFFFFFFLL;
                if (!v37) {
                  v38 = v36;
                }
                if (v38)
                {
                  v38 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v38);
                  v33 = v27[5];
                  v30 = (char *)v27[6];
                }
                else
                {
                  v39 = 0;
                }
                v40 = (uint64_t *)(v38 + 4 * v34);
                *(_DWORD *)v40 = *((_DWORD *)v29 + 14);
                v32 = (uint64_t *)((char *)v40 + 4);
                while (v30 != (char *)v33)
                {
                  v41 = *((_DWORD *)v30 - 1);
                  v30 -= 4;
                  *((_DWORD *)v40 - 1) = v41;
                  v40 = (uint64_t *)((char *)v40 - 4);
                }
                v27[5] = v40;
                v27[6] = v32;
                v27[7] = (uint64_t *)(v38 + 4 * v39);
                if (v33) {
                  operator delete(v33);
                }
              }
              else
              {
                *(_DWORD *)v30 = *((_DWORD *)v28 + 14);
                v32 = (uint64_t *)(v30 + 4);
              }
              v27[6] = v32;
              v59.__r_.__value_.__r.__words[0] = (std::string::size_type)v22;
              v42 = std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v62, v22, (long long **)&v59);
              v43 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v2, *((_DWORD *)v42 + 14), (_DWORD *)v42 + 14);
              v44 = v43;
              v45 = (char *)v43[6];
              v46 = v43[7];
              if (v45 >= (char *)v46)
              {
                v48 = v43[5];
                v49 = (v45 - (char *)v48) >> 2;
                if ((unint64_t)(v49 + 1) >> 62) {
LABEL_63:
                }
                  std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                v50 = (char *)v46 - (char *)v48;
                v51 = ((char *)v46 - (char *)v48) >> 1;
                if (v51 <= v49 + 1) {
                  v51 = v49 + 1;
                }
                v37 = v50 >= 0x7FFFFFFFFFFFFFFCLL;
                v52 = 0x3FFFFFFFFFFFFFFFLL;
                if (!v37) {
                  v52 = v51;
                }
                if (v52)
                {
                  v52 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v52);
                  v48 = v44[5];
                  v45 = (char *)v44[6];
                }
                else
                {
                  v53 = 0;
                }
                v54 = (uint64_t *)(v52 + 4 * v49);
                *(_DWORD *)v54 = v64;
                v47 = (uint64_t *)((char *)v54 + 4);
                while (v45 != (char *)v48)
                {
                  v55 = *((_DWORD *)v45 - 1);
                  v45 -= 4;
                  *((_DWORD *)v54 - 1) = v55;
                  v54 = (uint64_t *)((char *)v54 - 4);
                }
                v44[5] = v54;
                v44[6] = v47;
                v44[7] = (uint64_t *)(v52 + 4 * v53);
                if (v48) {
                  operator delete(v48);
                }
              }
              else
              {
                *(_DWORD *)v45 = v64;
                v47 = (uint64_t *)(v45 + 4);
              }
              v44[6] = v47;
            }
            v22 += 3;
          }
          while (v22 != v21);
          v18 = (int)v64;
        }
        LODWORD(v64) = ++v18;
        v19 = v18;
      }
      while (v18 < (unint64_t)((uint64_t)(*((void *)a2 + 5) - *((void *)a2 + 4)) >> 4));
    }
  }
  std::__tree<std::string>::destroy((uint64_t)&v60, v61[0]);
  std::__tree<std::string>::destroy((uint64_t)&v62, (char *)v63[0]);
  return this;
}

void sub_1920CD1D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, char *a18, uint64_t a19, char a20,char *a21)
{
  std::__tree<std::string>::destroy((uint64_t)&a17, a18);
  std::__tree<std::string>::destroy((uint64_t)&a20, a21);
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(*(void **)(a9 + 48));
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(*(void **)(a9 + 24));
  v22 = *(std::__shared_weak_count **)(a9 + 8);
  if (v22) {
    nitro::nitro_function::nitro_function(v22);
  }
  _Unwind_Resume(a1);
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17) {
      std::string::size_type v6 = __sz | 7;
    }
    std::string::size_type v7 = v6 + 1;
    v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    v5 = v8;
  }
  else
  {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = __sz;
  }

  memmove(v5, __s, __sz + 1);
}

char *std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void *a2, long long **a3)
{
  v5 = (void **)std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__find_equal<std::string>((uint64_t)a1, &v12, a2);
  std::string::size_type v6 = (char *)*v5;
  if (!*v5)
  {
    std::string::size_type v7 = (uint64_t **)v5;
    std::string::size_type v6 = (char *)operator new(0x40uLL);
    v8 = (std::string *)(v6 + 32);
    v9 = *a3;
    if (*((char *)*a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)v9, *((void *)v9 + 1));
    }
    else
    {
      long long v10 = *v9;
      *((void *)v6 + 6) = *((void *)v9 + 2);
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v10;
    }
    *((_DWORD *)v6 + 14) = 0;
    std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at(a1, v12, v7, (uint64_t *)v6);
  }
  return v6;
}

void sub_1920CD38C(_Unwind_Exception *a1)
{
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,int>,void *>>>::operator()[abi:ne180100](0, v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  *((unsigned char *)a2 + 24) = a2 == result;
  if (a2 == result) {
    return result;
  }
  while (1)
  {
    uint64_t v2 = a2[2];
    if (*(unsigned char *)(v2 + 24)) {
      return result;
    }
    v3 = *(uint64_t **)(v2 + 16);
    uint64_t v4 = *v3;
    if (*v3 != v2) {
      break;
    }
    uint64_t v7 = v3[1];
    if (!v7 || (int v8 = *(unsigned __int8 *)(v7 + 24), v5 = (unsigned char *)(v7 + 24), v8))
    {
      if (*(uint64_t **)v2 == a2)
      {
        *(unsigned char *)(v2 + 24) = 1;
        *((unsigned char *)v3 + 24) = 0;
        uint64_t v11 = *(void *)(v2 + 8);
        uint64_t *v3 = v11;
        if (v11) {
          goto LABEL_15;
        }
      }
      else
      {
        v9 = *(uint64_t **)(v2 + 8);
        uint64_t v10 = *v9;
        *(void *)(v2 + 8) = *v9;
        if (v10)
        {
          *(void *)(v10 + 16) = v2;
          v3 = *(uint64_t **)(v2 + 16);
        }
        v9[2] = (uint64_t)v3;
        *(void *)(*(void *)(v2 + 16) + 8 * (**(void **)(v2 + 16) != v2)) = v9;
        uint64_t *v9 = v2;
        *(void *)(v2 + 16) = v9;
        v3 = (uint64_t *)v9[2];
        uint64_t v2 = *v3;
        *((unsigned char *)v9 + 24) = 1;
        *((unsigned char *)v3 + 24) = 0;
        uint64_t v11 = *(void *)(v2 + 8);
        uint64_t *v3 = v11;
        if (v11) {
LABEL_15:
        }
          *(void *)(v11 + 16) = v3;
      }
      *(void *)(v2 + 16) = v3[2];
      *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
      *(void *)(v2 + 8) = v3;
      v3[2] = v2;
      return result;
    }
LABEL_3:
    *(unsigned char *)(v2 + 24) = 1;
    a2 = v3;
    *((unsigned char *)v3 + 24) = v3 == result;
    unsigned char *v5 = 1;
    if (v3 == result) {
      return result;
    }
  }
  if (v4)
  {
    int v6 = *(unsigned __int8 *)(v4 + 24);
    v5 = (unsigned char *)(v4 + 24);
    if (!v6) {
      goto LABEL_3;
    }
  }
  if (*(uint64_t **)v2 == a2)
  {
    uint64_t v12 = a2[1];
    *(void *)uint64_t v2 = v12;
    if (v12)
    {
      *(void *)(v12 + 16) = v2;
      v3 = *(uint64_t **)(v2 + 16);
    }
    a2[2] = (uint64_t)v3;
    *(void *)(*(void *)(v2 + 16) + 8 * (**(void **)(v2 + 16) != v2)) = a2;
    a2[1] = v2;
    *(void *)(v2 + 16) = a2;
    v3 = (uint64_t *)a2[2];
  }
  else
  {
    a2 = (uint64_t *)a2[2];
  }
  *((unsigned char *)a2 + 24) = 1;
  *((unsigned char *)v3 + 24) = 0;
  v13 = (uint64_t *)v3[1];
  uint64_t v14 = *v13;
  v3[1] = *v13;
  if (v14) {
    *(void *)(v14 + 16) = v3;
  }
  v13[2] = v3[2];
  *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v13;
  uint64_t *v13 = (uint64_t)v3;
  v3[2] = (uint64_t)v13;
  return result;
}

void std::__tree<std::string>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::string>::destroy(a1, *(void *)a2);
    std::__tree<std::string>::destroy(a1, *((void *)a2 + 1));
    if (a2[55] < 0)
    {
      operator delete(*((void **)a2 + 4));
      uint64_t v4 = a2;
    }
    else
    {
      uint64_t v4 = a2;
    }
    operator delete(v4);
  }
}

void *std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(uint64_t a1, unint64_t a2, void *a3)
{
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (void *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == a2)
        {
          if (i[2] == a2) {
            return i;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  i = operator new(0x30uLL);
  void *i = 0;
  i[1] = a2;
  i[2] = *a3;
  i[3] = 0;
  i[4] = 0;
  i[5] = 0;
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__rehash<true>(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
      else {
        unint64_t v3 = a2;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
  }
  uint64_t v18 = *(void *)a1;
  v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    void *i = *v19;
LABEL_38:
    void *v19 = i;
    goto LABEL_39;
  }
  void *i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v18 + 8 * v3) = a1 + 16;
  if (*i)
  {
    unint64_t v20 = *(void *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7) {
        v20 %= v7;
      }
    }
    else
    {
      v20 &= v7 - 1;
    }
    v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_1920CD834(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,std::vector<std::string>>,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(uint64_t **a1, int a2, _DWORD *a3)
{
  int v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        unint64_t v7 = (uint64_t **)v5;
        int v8 = *((_DWORD *)v5 + 8);
        if (v8 <= a2) {
          break;
        }
        v5 = *v7;
        int v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      v5 = v7[1];
      if (!v5)
      {
        int v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    unint64_t v7 = a1 + 1;
LABEL_9:
    v9 = operator new(0x40uLL);
    v9[8] = *a3;
    *((void *)v9 + 6) = 0;
    *((void *)v9 + 7) = 0;
    *((void *)v9 + 5) = 0;
    std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at(a1, (uint64_t)v7, v6, (uint64_t *)v9);
    return (uint64_t **)v9;
  }
  return v7;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(unint64_t a1)
{
  if (a1 >> 62) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(4 * a1);
}

uint64_t std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(void *a1, void *a2)
{
  if (a1)
  {
    unint64_t v3 = a1;
    uint64_t v4 = 1;
    do
    {
      if (!std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, v3 + 4))
      {
        if (!std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3 + 4, a2)) {
          return v4;
        }
        ++v3;
      }
      unint64_t v3 = (void *)*v3;
    }
    while (v3);
  }
  return 0;
}

void Espresso::SerDes::params_io<Espresso::convolution_uniforms>(uint64_t a1, uint64_t a2, int a3)
{
  v5 = (__int16 *)(a2 + 72);
  int v6 = *(unsigned __int16 *)(a2 + 72);
  if (a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v35, "C");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v35, &v37);
    (*(void (**)(void *, void **, uint64_t))(*(void *)v37 + 160))(v37, __p, a2 + 40);
    if (v40 < 0) {
      operator delete(__p[0]);
    }
    if (v38) {
      nitro::nitro_function::nitro_function(v38);
    }
    if (v36 < 0) {
      operator delete(v35[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v35, "K");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v35, &v37);
    (*(void (**)(void *, void **, uint64_t))(*(void *)v37 + 160))(v37, __p, a2 + 44);
    if (v40 < 0) {
      operator delete(__p[0]);
    }
    if (v38) {
      nitro::nitro_function::nitro_function(v38);
    }
    if (v36 < 0) {
      operator delete(v35[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v35, "Nx");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v35, &v37);
    (*(void (**)(void *, void **, uint64_t))(*(void *)v37 + 160))(v37, __p, a2 + 48);
    if (v40 < 0) {
      operator delete(__p[0]);
    }
    if (v38) {
      nitro::nitro_function::nitro_function(v38);
    }
    if (v36 < 0) {
      operator delete(v35[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v35, "Ny");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v35, &v37);
    (*(void (**)(void *, void **, uint64_t))(*(void *)v37 + 160))(v37, __p, a2 + 52);
    if (v40 < 0) {
      operator delete(__p[0]);
    }
    if (v38) {
      nitro::nitro_function::nitro_function(v38);
    }
    if (v36 < 0) {
      operator delete(v35[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v35, "fused_relu");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v35, &v37);
    (*(void (**)(void *, void **, uint64_t))(*(void *)v37 + 160))(v37, __p, a2 + 24);
    if (v40 < 0) {
      operator delete(__p[0]);
    }
    if (v38) {
      nitro::nitro_function::nitro_function(v38);
    }
    if (v36 < 0) {
      operator delete(v35[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v35, "fused_tanh");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v35, &v37);
    (*(void (**)(void *, void **, uint64_t))(*(void *)v37 + 160))(v37, __p, a2 + 28);
    if (v40 < 0) {
      operator delete(__p[0]);
    }
    if (v38) {
      nitro::nitro_function::nitro_function(v38);
    }
    if (v36 < 0) {
      operator delete(v35[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v35, "has_biases");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v35, &v37);
    (*(void (**)(void *, void **, uint64_t))(*(void *)v37 + 160))(v37, __p, a2 + 32);
    if (v40 < 0) {
      operator delete(__p[0]);
    }
    if (v38) {
      nitro::nitro_function::nitro_function(v38);
    }
    if (v36 < 0) {
      operator delete(v35[0]);
    }
    if (*(_DWORD *)(a2 + 104))
    {
      std::string::basic_string[abi:ne180100]<0>(v35, "has_8bit_weights");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v35, &v37);
      (*(void (**)(void *, void **, uint64_t))(*(void *)v37 + 160))(v37, __p, a2 + 104);
      if (v40 < 0) {
        operator delete(__p[0]);
      }
      if (v38) {
        nitro::nitro_function::nitro_function(v38);
      }
      if (v36 < 0) {
        operator delete(v35[0]);
      }
    }
    if (*(_DWORD *)(a2 + 108))
    {
      std::string::basic_string[abi:ne180100]<0>(v35, "do_ncc");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v35, &v37);
      (*(void (**)(void *, void **, uint64_t))(*(void *)v37 + 160))(v37, __p, a2 + 108);
      if (v40 < 0) {
        operator delete(__p[0]);
      }
      if (v38) {
        nitro::nitro_function::nitro_function(v38);
      }
      if (v36 < 0) {
        operator delete(v35[0]);
      }
    }
    std::string::basic_string[abi:ne180100]<0>(v35, "has_batch_norm");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v35, &v37);
    (*(void (**)(void *, void **, uint64_t))(*(void *)v37 + 160))(v37, __p, a2 + 112);
    if (v40 < 0) {
      operator delete(__p[0]);
    }
    if (v38) {
      nitro::nitro_function::nitro_function(v38);
    }
    if (v36 < 0) {
      operator delete(v35[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v35, "n_groups");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v35, &v37);
    (*(void (**)(void *, void **, uint64_t))(*(void *)v37 + 160))(v37, __p, a2 + 116);
    if (v40 < 0) {
      operator delete(__p[0]);
    }
    if (v38) {
      nitro::nitro_function::nitro_function(v38);
    }
    if (v36 < 0) {
      operator delete(v35[0]);
    }
    if (*(_DWORD *)(a2 + 120))
    {
      std::string::basic_string[abi:ne180100]<0>(v35, "n_parallel");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v35, &v37);
      (*(void (**)(void *, void **, uint64_t))(*(void *)v37 + 160))(v37, __p, a2 + 120);
      if (v40 < 0) {
        operator delete(__p[0]);
      }
      if (v38) {
        nitro::nitro_function::nitro_function(v38);
      }
      if (v36 < 0) {
        operator delete(v35[0]);
      }
    }
    if (*(_WORD *)(a2 + 124))
    {
      std::string::basic_string[abi:ne180100]<0>(v35, "start_channel_bottom");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v35, &v37);
      (*(void (**)(void *, void **, uint64_t))(*(void *)v37 + 184))(v37, __p, a2 + 124);
      if (v40 < 0) {
        operator delete(__p[0]);
      }
      if (v38) {
        nitro::nitro_function::nitro_function(v38);
      }
      if (v36 < 0) {
        operator delete(v35[0]);
      }
    }
    if (*(_WORD *)(a2 + 126))
    {
      std::string::basic_string[abi:ne180100]<0>(v35, "start_channel_top");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v35, &v37);
      (*(void (**)(void *, void **, uint64_t))(*(void *)v37 + 184))(v37, __p, a2 + 126);
      if (v40 < 0) {
        operator delete(__p[0]);
      }
      if (v38) {
        nitro::nitro_function::nitro_function(v38);
      }
      if (v36 < 0) {
        operator delete(v35[0]);
      }
    }
    if (*(_WORD *)(a2 + 130))
    {
      std::string::basic_string[abi:ne180100]<0>(v35, "total_channel_top");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v35, &v37);
      (*(void (**)(void *, void **, uint64_t))(*(void *)v37 + 184))(v37, __p, a2 + 130);
      if (v40 < 0) {
        operator delete(__p[0]);
      }
      if (v38) {
        nitro::nitro_function::nitro_function(v38);
      }
      if (v36 < 0) {
        operator delete(v35[0]);
      }
    }
    if (*(_WORD *)(a2 + 92) != 1)
    {
      std::string::basic_string[abi:ne180100]<0>(v35, "stride_x");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v35, &v37);
      (*(void (**)(void *, void **, uint64_t))(*(void *)v37 + 176))(v37, __p, a2 + 92);
      if (v40 < 0) {
        operator delete(__p[0]);
      }
      if (v38) {
        nitro::nitro_function::nitro_function(v38);
      }
      if (v36 < 0) {
        operator delete(v35[0]);
      }
    }
    if (*(_WORD *)(a2 + 94) != 1)
    {
      std::string::basic_string[abi:ne180100]<0>(v35, "stride_y");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v35, &v37);
      (*(void (**)(void *, void **, uint64_t))(*(void *)v37 + 176))(v37, __p, a2 + 94);
      if (v40 < 0) {
        operator delete(__p[0]);
      }
      if (v38) {
        nitro::nitro_function::nitro_function(v38);
      }
      if (v36 < 0) {
        operator delete(v35[0]);
      }
    }
    if (v6 != 0xFFFF)
    {
      std::string::basic_string[abi:ne180100]<0>(v35, "pad_l");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v35, &v37);
      (*(void (**)(void *, void **, uint64_t))(*(void *)v37 + 176))(v37, __p, a2 + 80);
      if (v40 < 0) {
        operator delete(__p[0]);
      }
      if (v38) {
        nitro::nitro_function::nitro_function(v38);
      }
      if (v36 < 0) {
        operator delete(v35[0]);
      }
      std::string::basic_string[abi:ne180100]<0>(v35, "pad_r");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v35, &v37);
      (*(void (**)(void *, void **, uint64_t))(*(void *)v37 + 176))(v37, __p, a2 + 82);
      if (v40 < 0) {
        operator delete(__p[0]);
      }
      if (v38) {
        nitro::nitro_function::nitro_function(v38);
      }
      if (v36 < 0) {
        operator delete(v35[0]);
      }
      std::string::basic_string[abi:ne180100]<0>(v35, "pad_t");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v35, &v37);
      (*(void (**)(void *, void **, uint64_t))(*(void *)v37 + 176))(v37, __p, a2 + 84);
      if (v40 < 0) {
        operator delete(__p[0]);
      }
      if (v38) {
        nitro::nitro_function::nitro_function(v38);
      }
      if (v36 < 0) {
        operator delete(v35[0]);
      }
      std::string::basic_string[abi:ne180100]<0>(v35, "pad_b");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v35, &v37);
      (*(void (**)(void *, void **, uint64_t))(*(void *)v37 + 176))(v37, __p, a2 + 86);
      if (v40 < 0) {
        operator delete(__p[0]);
      }
      if (v38) {
        nitro::nitro_function::nitro_function(v38);
      }
      if (v36 < 0) {
        operator delete(v35[0]);
      }
      std::string::basic_string[abi:ne180100]<0>(v35, "pad_value");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v35, &v37);
      (*(void (**)(void *, void **, uint64_t))(*(void *)v37 + 216))(v37, __p, a2 + 76);
      if (v40 < 0) {
        operator delete(__p[0]);
      }
      if (v38) {
        nitro::nitro_function::nitro_function(v38);
      }
      if (v36 < 0) {
        operator delete(v35[0]);
      }
      std::string::basic_string[abi:ne180100]<0>(v35, "pad_mode");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v35, &v37);
      (*(void (**)(void *, void **, __int16 *))(*(void *)v37 + 176))(v37, __p, v5);
      if (v40 < 0) {
        operator delete(__p[0]);
      }
      if (v38) {
        nitro::nitro_function::nitro_function(v38);
      }
      if (v36 < 0) {
        operator delete(v35[0]);
      }
      std::string::basic_string[abi:ne180100]<0>(v35, "pad_fill_mode");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v35, &v37);
      (*(void (**)(void *, void **, uint64_t))(*(void *)v37 + 176))(v37, __p, a2 + 74);
      if (v40 < 0) {
        operator delete(__p[0]);
      }
      if (v38) {
        nitro::nitro_function::nitro_function(v38);
      }
      if (v36 < 0) {
        operator delete(v35[0]);
      }
    }
    if (*(_DWORD *)(a2 + 24) == 2)
    {
      std::string::basic_string[abi:ne180100]<0>(v35, "leaky_relu_alpha");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v35, &v37);
      (*(void (**)(void *, void **, uint64_t))(*(void *)v37 + 216))(v37, __p, a2 + 36);
      if (v40 < 0) {
        operator delete(__p[0]);
      }
      if (v38) {
        nitro::nitro_function::nitro_function(v38);
      }
      if (v36 < 0) {
        operator delete(v35[0]);
      }
    }
    if (*(_DWORD *)(a2 + 136))
    {
      std::string::basic_string[abi:ne180100]<0>(v35, "deconv_out_width");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v35, &v37);
      (*(void (**)(void *, void **, uint64_t))(*(void *)v37 + 160))(v37, __p, a2 + 136);
      if (v40 < 0) {
        operator delete(__p[0]);
      }
      if (v38) {
        nitro::nitro_function::nitro_function(v38);
      }
      if (v36 < 0) {
        operator delete(v35[0]);
      }
    }
    if (*(_DWORD *)(a2 + 140))
    {
      std::string::basic_string[abi:ne180100]<0>(v35, "deconv_out_height");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v35, &v37);
      (*(void (**)(void *, void **, uint64_t))(*(void *)v37 + 160))(v37, __p, a2 + 140);
      if (v40 < 0) {
        operator delete(__p[0]);
      }
      if (v38) {
        nitro::nitro_function::nitro_function(v38);
      }
      if (v36 < 0) {
        operator delete(v35[0]);
      }
    }
    if (*(__int16 *)(a2 + 96) >= 2)
    {
      std::string::basic_string[abi:ne180100]<0>(v35, "dilation_x");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v35, &v37);
      (*(void (**)(void *, void **, uint64_t))(*(void *)v37 + 176))(v37, __p, a2 + 96);
      if (v40 < 0) {
        operator delete(__p[0]);
      }
      if (v38) {
        nitro::nitro_function::nitro_function(v38);
      }
      if (v36 < 0) {
        operator delete(v35[0]);
      }
    }
    if (*(__int16 *)(a2 + 98) >= 2)
    {
      std::string::basic_string[abi:ne180100]<0>(v35, "dilation_y");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v35, &v37);
      (*(void (**)(void *, void **, uint64_t))(*(void *)v37 + 176))(v37, __p, a2 + 98);
      if (v40 < 0) {
        operator delete(__p[0]);
      }
      if (v38) {
        nitro::nitro_function::nitro_function(v38);
      }
      if (v36 < 0) {
        operator delete(v35[0]);
      }
    }
    if (*(_DWORD *)(a2 + 144))
    {
      std::string::basic_string[abi:ne180100]<0>(v35, "low_precision_accumulation");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v35, &v37);
      (*(void (**)(void *, void **, uint64_t))(*(void *)v37 + 160))(v37, __p, a2 + 144);
      if (v40 < 0) {
        operator delete(__p[0]);
      }
      if (v38) {
        nitro::nitro_function::nitro_function(v38);
      }
      if (v36 < 0) {
        operator delete(v35[0]);
      }
    }
    if (*(_DWORD *)(a2 + 148))
    {
      std::string::basic_string[abi:ne180100]<0>(v35, "hint_use_winograd_win_size");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v35, &v37);
      (*(void (**)(void *, void **, uint64_t))(*(void *)v37 + 160))(v37, __p, a2 + 148);
      if (v40 < 0) {
        operator delete(__p[0]);
      }
      if (v38) {
        nitro::nitro_function::nitro_function(v38);
      }
      if (v36 < 0) {
        operator delete(v35[0]);
      }
    }
    if (*(_DWORD *)(a2 + 152))
    {
      std::string::basic_string[abi:ne180100]<0>(v35, "Nt");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v35, &v37);
      (*(void (**)(void *, void **, uint64_t))(*(void *)v37 + 160))(v37, __p, a2 + 152);
      if (v40 < 0) {
        operator delete(__p[0]);
      }
      if (v38) {
        nitro::nitro_function::nitro_function(v38);
      }
      if (v36 < 0) {
        operator delete(v35[0]);
      }
    }
    if (*(_WORD *)(a2 + 156) != 1)
    {
      std::string::basic_string[abi:ne180100]<0>(v35, "stride_t");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v35, &v37);
      (*(void (**)(void *, void **, uint64_t))(*(void *)v37 + 176))(v37, __p, a2 + 156);
      if (v40 < 0) {
        operator delete(__p[0]);
      }
      if (v38) {
        nitro::nitro_function::nitro_function(v38);
      }
      if (v36 < 0) {
        operator delete(v35[0]);
      }
    }
    if (*(_DWORD *)(a2 + 60) != -1)
    {
      std::string::basic_string[abi:ne180100]<0>(v35, "fused_activation_mode");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v35, &v37);
      (*(void (**)(void *, void **, uint64_t))(*(void *)v37 + 160))(v37, __p, a2 + 60);
      if (v40 < 0) {
        operator delete(__p[0]);
      }
      if (v38) {
        nitro::nitro_function::nitro_function(v38);
      }
      if (v36 < 0) {
        operator delete(v35[0]);
      }
    }
    if (*(float *)(a2 + 64) != 1.0)
    {
      std::string::basic_string[abi:ne180100]<0>(v35, "fused_activation_alpha");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v35, &v37);
      (*(void (**)(void *, void **, uint64_t))(*(void *)v37 + 216))(v37, __p, a2 + 64);
      if (v40 < 0) {
        operator delete(__p[0]);
      }
      if (v38) {
        nitro::nitro_function::nitro_function(v38);
      }
      if (v36 < 0) {
        operator delete(v35[0]);
      }
    }
    float v8 = *(float *)(a2 + 68);
    uint64_t v7 = a2 + 68;
    if (v8 != 1.0)
    {
      std::string::basic_string[abi:ne180100]<0>(v35, "fused_activation_beta");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v35, &v37);
      (*(void (**)(void *, void **, uint64_t))(*(void *)v37 + 216))(v37, __p, v7);
      if (v40 < 0) {
        operator delete(__p[0]);
      }
      if (v38) {
        nitro::nitro_function::nitro_function(v38);
      }
      if (v36 < 0) {
        operator delete(v35[0]);
      }
    }
    return;
  }
  std::string::basic_string[abi:ne180100]<0>(v35, "C");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v35, &v37);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v37, (_DWORD *)(a2 + 40));
  if (v40 < 0) {
    operator delete(__p[0]);
  }
  if (v38) {
    nitro::nitro_function::nitro_function(v38);
  }
  if (v36 < 0) {
    operator delete(v35[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v35, "K");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v35, &v37);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v37, (_DWORD *)(a2 + 44));
  if (v40 < 0) {
    operator delete(__p[0]);
  }
  if (v38) {
    nitro::nitro_function::nitro_function(v38);
  }
  if (v36 < 0) {
    operator delete(v35[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v35, "Nx");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v35, &v37);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v37, (_DWORD *)(a2 + 48));
  if (v40 < 0) {
    operator delete(__p[0]);
  }
  if (v38) {
    nitro::nitro_function::nitro_function(v38);
  }
  if (v36 < 0) {
    operator delete(v35[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v35, "Ny");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v35, &v37);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v37, (_DWORD *)(a2 + 52));
  if (v40 < 0) {
    operator delete(__p[0]);
  }
  if (v38) {
    nitro::nitro_function::nitro_function(v38);
  }
  if (v36 < 0) {
    operator delete(v35[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v35, "fused_relu");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v35, &v37);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v37, (_DWORD *)(a2 + 24));
  if (v40 < 0) {
    operator delete(__p[0]);
  }
  if (v38) {
    nitro::nitro_function::nitro_function(v38);
  }
  if (v36 < 0) {
    operator delete(v35[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v35, "fused_tanh");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v35, &v37);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v37, (_DWORD *)(a2 + 28));
  if (v40 < 0) {
    operator delete(__p[0]);
  }
  if (v38) {
    nitro::nitro_function::nitro_function(v38);
  }
  if (v36 < 0) {
    operator delete(v35[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v35, "has_biases");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v35, &v37);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v37, (_DWORD *)(a2 + 32));
  if (v40 < 0) {
    operator delete(__p[0]);
  }
  if (v38) {
    nitro::nitro_function::nitro_function(v38);
  }
  if (v36 < 0) {
    operator delete(v35[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v35, "has_8bit_weights");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v35, &v37);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v37, (_DWORD *)(a2 + 104));
  if (v40 < 0) {
    operator delete(__p[0]);
  }
  if (v38) {
    nitro::nitro_function::nitro_function(v38);
  }
  if (v36 < 0) {
    operator delete(v35[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v35, "do_ncc");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v35, &v37);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v37, (_DWORD *)(a2 + 108));
  if (v40 < 0) {
    operator delete(__p[0]);
  }
  if (v38) {
    nitro::nitro_function::nitro_function(v38);
  }
  if (v36 < 0) {
    operator delete(v35[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v35, "has_batch_norm");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v35, &v37);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v37, (_DWORD *)(a2 + 112));
  if (v40 < 0) {
    operator delete(__p[0]);
  }
  if (v38) {
    nitro::nitro_function::nitro_function(v38);
  }
  if (v36 < 0) {
    operator delete(v35[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v35, "n_groups");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v35, &v37);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v37, (_DWORD *)(a2 + 116));
  if (v40 < 0) {
    operator delete(__p[0]);
  }
  if (v38) {
    nitro::nitro_function::nitro_function(v38);
  }
  if (v36 < 0) {
    operator delete(v35[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v35, "n_parallel");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v35, &v37);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v37, (_DWORD *)(a2 + 120));
  if (v40 < 0) {
    operator delete(__p[0]);
  }
  if (v38) {
    nitro::nitro_function::nitro_function(v38);
  }
  if (v36 < 0) {
    operator delete(v35[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v35, "start_channel_bottom");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v35, &v37);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v37, (_WORD *)(a2 + 124));
  if (v40 < 0) {
    operator delete(__p[0]);
  }
  if (v38) {
    nitro::nitro_function::nitro_function(v38);
  }
  if (v36 < 0) {
    operator delete(v35[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v35, "start_channel_top");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v35, &v37);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v37, (_WORD *)(a2 + 126));
  if (v40 < 0) {
    operator delete(__p[0]);
  }
  if (v38) {
    nitro::nitro_function::nitro_function(v38);
  }
  if (v36 < 0) {
    operator delete(v35[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v35, "total_channel_top");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v35, &v37);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v37, (_WORD *)(a2 + 130));
  if (v40 < 0) {
    operator delete(__p[0]);
  }
  if (v38) {
    nitro::nitro_function::nitro_function(v38);
  }
  if (v36 < 0) {
    operator delete(v35[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v35, "stride_x");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v35, &v37);
  v9 = (_WORD *)(a2 + 92);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v37, (_WORD *)(a2 + 92));
  if (v40 < 0) {
    operator delete(__p[0]);
  }
  if (v38) {
    nitro::nitro_function::nitro_function(v38);
  }
  if (v36 < 0) {
    operator delete(v35[0]);
  }
  v34 = (int *)(a2 + 52);
  std::string::basic_string[abi:ne180100]<0>(v35, "stride_y");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v35, &v37);
  uint64_t v10 = (_WORD *)(a2 + 94);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v37, (_WORD *)(a2 + 94));
  if (v40 < 0) {
    operator delete(__p[0]);
  }
  if (v38) {
    nitro::nitro_function::nitro_function(v38);
  }
  if (v36 < 0) {
    operator delete(v35[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v35, "pad_l");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v35, &v37);
  unint64_t v11 = (int16x4_t *)(a2 + 80);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v37, (_WORD *)(a2 + 80));
  if (v40 < 0) {
    operator delete(__p[0]);
  }
  if (v38) {
    nitro::nitro_function::nitro_function(v38);
  }
  if (v36 < 0) {
    operator delete(v35[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v35, "pad_r");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v35, &v37);
  float v12 = (_WORD *)(a2 + 82);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v37, (_WORD *)(a2 + 82));
  if (v40 < 0) {
    operator delete(__p[0]);
  }
  if (v38) {
    nitro::nitro_function::nitro_function(v38);
  }
  if (v36 < 0) {
    operator delete(v35[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v35, "pad_t");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v35, &v37);
  float v13 = (_WORD *)(a2 + 84);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v37, (_WORD *)(a2 + 84));
  if (v40 < 0) {
    operator delete(__p[0]);
  }
  if (v38) {
    nitro::nitro_function::nitro_function(v38);
  }
  if (v36 < 0) {
    operator delete(v35[0]);
  }
  v33 = (int *)(a2 + 48);
  std::string::basic_string[abi:ne180100]<0>(v35, "pad_b");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v35, &v37);
  BOOL v14 = (_WORD *)(a2 + 86);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v37, (_WORD *)(a2 + 86));
  if (v40 < 0) {
    operator delete(__p[0]);
  }
  if (v38) {
    nitro::nitro_function::nitro_function(v38);
  }
  if (v36 < 0) {
    operator delete(v35[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v35, "pad_value");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v35, &v37);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v37, (float *)(a2 + 76));
  if (v40 < 0) {
    operator delete(__p[0]);
  }
  if (v38) {
    nitro::nitro_function::nitro_function(v38);
  }
  if (v36 < 0) {
    operator delete(v35[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v35, "pad_mode");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v35, &v37);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v37, v5);
  if (v40 < 0) {
    operator delete(__p[0]);
  }
  if (v38) {
    nitro::nitro_function::nitro_function(v38);
  }
  if (v36 < 0) {
    operator delete(v35[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v35, "pad_fill_mode");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v35, &v37);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v37, (_WORD *)(a2 + 74));
  if (v40 < 0) {
    operator delete(__p[0]);
  }
  if (v38) {
    nitro::nitro_function::nitro_function(v38);
  }
  if (v36 < 0) {
    operator delete(v35[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v35, "leaky_relu_alpha");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v35, &v37);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v37, (float *)(a2 + 36));
  if (v40 < 0) {
    operator delete(__p[0]);
  }
  if (v38) {
    nitro::nitro_function::nitro_function(v38);
  }
  if (v36 < 0) {
    operator delete(v35[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v35, "deconv_out_width");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v35, &v37);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v37, (_DWORD *)(a2 + 136));
  if (v40 < 0) {
    operator delete(__p[0]);
  }
  if (v38) {
    nitro::nitro_function::nitro_function(v38);
  }
  if (v36 < 0) {
    operator delete(v35[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v35, "deconv_out_height");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v35, &v37);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v37, (_DWORD *)(a2 + 140));
  if (v40 < 0) {
    operator delete(__p[0]);
  }
  if (v38) {
    nitro::nitro_function::nitro_function(v38);
  }
  if (v36 < 0) {
    operator delete(v35[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v35, "dilation_x");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v35, &v37);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v37, (_WORD *)(a2 + 96));
  if (v40 < 0) {
    operator delete(__p[0]);
  }
  if (v38) {
    nitro::nitro_function::nitro_function(v38);
  }
  if (v36 < 0) {
    operator delete(v35[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v35, "dilation_y");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v35, &v37);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v37, (_WORD *)(a2 + 98));
  if (v40 < 0) {
    operator delete(__p[0]);
  }
  if (v38) {
    nitro::nitro_function::nitro_function(v38);
  }
  if (v36 < 0) {
    operator delete(v35[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v35, "low_precision_accumulation");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v35, &v37);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v37, (_DWORD *)(a2 + 144));
  if (v40 < 0) {
    operator delete(__p[0]);
  }
  if (v38) {
    nitro::nitro_function::nitro_function(v38);
  }
  if (v36 < 0) {
    operator delete(v35[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v35, "hint_use_winograd_win_size");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v35, &v37);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v37, (_DWORD *)(a2 + 148));
  if (v40 < 0) {
    operator delete(__p[0]);
  }
  if (v38) {
    nitro::nitro_function::nitro_function(v38);
  }
  if (v36 < 0) {
    operator delete(v35[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v35, "Nt");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v35, &v37);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v37, (_DWORD *)(a2 + 152));
  if (v40 < 0) {
    operator delete(__p[0]);
  }
  if (v38) {
    nitro::nitro_function::nitro_function(v38);
  }
  if (v36 < 0) {
    operator delete(v35[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v35, "stride_t");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v35, &v37);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v37, (_WORD *)(a2 + 156));
  if (v40 < 0) {
    operator delete(__p[0]);
  }
  if (v38) {
    nitro::nitro_function::nitro_function(v38);
  }
  if (v36 < 0) {
    operator delete(v35[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v35, "fused_activation_mode");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v35, &v37);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v37, (_DWORD *)(a2 + 60));
  if (v40 < 0) {
    operator delete(__p[0]);
  }
  if (v38) {
    nitro::nitro_function::nitro_function(v38);
  }
  if (v36 < 0) {
    operator delete(v35[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v35, "fused_activation_alpha");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v35, &v37);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v37, (float *)(a2 + 64));
  if (v40 < 0) {
    operator delete(__p[0]);
  }
  if (v38) {
    nitro::nitro_function::nitro_function(v38);
  }
  if (v36 < 0) {
    operator delete(v35[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v35, "fused_activation_beta");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v35, &v37);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v37, (float *)(a2 + 68));
  if (v40 < 0) {
    operator delete(__p[0]);
  }
  if (v38) {
    nitro::nitro_function::nitro_function(v38);
  }
  if (v36 < 0) {
    operator delete(v35[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(&v37, "pad_pad_mode");
  int v15 = (*(uint64_t (**)(uint64_t, void **))(*(void *)a1 + 24))(a1, &v37);
  int v16 = v15;
  if (SHIBYTE(__p[0]) < 0)
  {
    operator delete(v37);
    if (!v16) {
      goto LABEL_461;
    }
  }
  else if (!v15)
  {
    goto LABEL_461;
  }
  std::string::basic_string[abi:ne180100]<0>(&v37, "pad_pad_mode");
  __int16 *v5 = (*(uint64_t (**)(uint64_t, void **))(*(void *)a1 + 40))(a1, &v37);
  if (SHIBYTE(__p[0]) < 0) {
    operator delete(v37);
  }
LABEL_461:
  std::string::basic_string[abi:ne180100]<0>(&v37, "no_padding");
  int v17 = (*(uint64_t (**)(uint64_t, void **))(*(void *)a1 + 24))(a1, &v37);
  int v18 = v17;
  if (SHIBYTE(__p[0]) < 0)
  {
    operator delete(v37);
    if (!v18) {
      goto LABEL_474;
    }
  }
  else if (!v17)
  {
    goto LABEL_474;
  }
  std::string::basic_string[abi:ne180100]<0>(&v37, "no_padding");
  int v19 = (*(uint64_t (**)(uint64_t, void **))(*(void *)a1 + 40))(a1, &v37);
  int v20 = v19;
  if ((SHIBYTE(__p[0]) & 0x80000000) == 0)
  {
    if (v19) {
      goto LABEL_467;
    }
LABEL_470:
    __int16 v21 = 4;
    goto LABEL_471;
  }
  operator delete(v37);
  if (!v20) {
    goto LABEL_470;
  }
LABEL_467:
  if (v20 == 1)
  {
    __int16 v21 = 3;
LABEL_471:
    __int16 *v5 = v21;
    goto LABEL_474;
  }
  if (v20 < 0)
  {
    __int16 *v5 = 0;
    *unint64_t v11 = vdup_n_s16(-v20);
  }
LABEL_474:
  std::string::basic_string[abi:ne180100]<0>(&v37, "total_pad_w");
  int v22 = (*(uint64_t (**)(uint64_t, void **))(*(void *)a1 + 24))(a1, &v37);
  int v23 = v22;
  if (SHIBYTE(__p[0]) < 0)
  {
    operator delete(v37);
    if (!v23) {
      goto LABEL_484;
    }
  }
  else if (!v22)
  {
    goto LABEL_484;
  }
  std::string::basic_string[abi:ne180100]<0>(&v37, "total_pad_w");
  int v24 = (*(uint64_t (**)(uint64_t, void **))(*(void *)a1 + 40))(a1, &v37);
  if (SHIBYTE(__p[0]) < 0) {
    operator delete(v37);
  }
  int v18 = 0;
  __int16 *v5 = 0;
  if (v24 >= 0) {
    int v25 = v24;
  }
  else {
    int v25 = v24 + 1;
  }
  v11->i16[0] = v25 >> 1;
  *float v12 = v24 - (v25 >> 1);
LABEL_484:
  std::string::basic_string[abi:ne180100]<0>(&v37, "total_pad_h");
  int v26 = (*(uint64_t (**)(uint64_t, void **))(*(void *)a1 + 24))(a1, &v37);
  int v27 = v26;
  if (SHIBYTE(__p[0]) < 0)
  {
    operator delete(v37);
    if (!v27) {
      goto LABEL_494;
    }
  }
  else if (!v26)
  {
    goto LABEL_494;
  }
  std::string::basic_string[abi:ne180100]<0>(&v37, "total_pad_h");
  int v28 = (*(uint64_t (**)(uint64_t, void **))(*(void *)a1 + 40))(a1, &v37);
  if (SHIBYTE(__p[0]) < 0) {
    operator delete(v37);
  }
  int v18 = 0;
  __int16 *v5 = 0;
  if (v28 >= 0) {
    int v29 = v28;
  }
  else {
    int v29 = v28 + 1;
  }
  _WORD *v13 = v29 >> 1;
  *BOOL v14 = v28 - (v29 >> 1);
LABEL_494:
  std::string::basic_string[abi:ne180100]<0>(&v37, "stride");
  int v30 = (*(uint64_t (**)(uint64_t, void **))(*(void *)a1 + 24))(a1, &v37);
  int v31 = v30;
  if ((SHIBYTE(__p[0]) & 0x80000000) == 0)
  {
    if (v30) {
      goto LABEL_496;
    }
LABEL_501:
    if (!v18) {
      return;
    }
    goto LABEL_502;
  }
  operator delete(v37);
  if (!v31) {
    goto LABEL_501;
  }
LABEL_496:
  std::string::basic_string[abi:ne180100]<0>(&v37, "stride");
  __int16 v32 = (*(uint64_t (**)(uint64_t, void **))(*(void *)a1 + 40))(a1, &v37);
  if (SHIBYTE(__p[0]) < 0) {
    operator delete(v37);
  }
  _WORD *v9 = v32;
  *uint64_t v10 = v32;
  if (v18) {
LABEL_502:
  }
    Espresso::padding_params_t::simplify_legacy(v5, *v33, *v34);
}

void sub_1920CFD9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void nitro::nitro_function::nitro_function(std::__shared_weak_count *a1)
{
  if (!atomic_fetch_add(&a1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a1->__on_zero_shared)(a1);
    std::__shared_weak_count::__release_weak(a1);
  }
}

void *std::string::basic_string[abi:ne180100]<0>(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    int v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v4;
    int v6 = a1;
    if (!v4) {
      goto LABEL_9;
    }
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((unsigned char *)v6 + v5) = 0;
  return a1;
}

void *std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__find_equal<std::string>(uint64_t a1, void *a2, void *a3)
{
  size_t v5 = (void *)(a1 + 8);
  size_t v4 = *(void **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        uint64_t v7 = v4;
        uint64_t v8 = v4 + 4;
        if (!std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a3, v4 + 4)) {
          break;
        }
        size_t v4 = (void *)*v7;
        size_t v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (!std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v8, a3)) {
        break;
      }
      size_t v5 = v7 + 1;
      size_t v4 = (void *)v7[1];
    }
    while (v4);
  }
  else
  {
    uint64_t v7 = (void *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

BOOL std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(void *a1, void *a2)
{
  int v2 = *((char *)a2 + 23);
  int v3 = *((char *)a1 + 23);
  if (v3 >= 0) {
    size_t v4 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v4 = a1[1];
  }
  if (v3 < 0) {
    a1 = (void *)*a1;
  }
  if (v2 >= 0) {
    size_t v5 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v5 = a2[1];
  }
  if (v2 < 0) {
    a2 = (void *)*a2;
  }
  if (v5 >= v4) {
    size_t v6 = v4;
  }
  else {
    size_t v6 = v5;
  }
  int v7 = memcmp(a1, a2, v6);
  if (v7) {
    return v7 < 0;
  }
  else {
    return v4 < v5;
  }
}

void Espresso::SerDes::generic_serdes_object::operator[](uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 8);
  size_t v4 = *(std::__shared_weak_count **)(a1 + 16);
  *a3 = v5;
  if (!v4)
  {
    a3[1] = 0;
LABEL_7:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  int v7 = std::__shared_weak_count::lock(v4);
  a3[1] = v7;
  if (!v7) {
    goto LABEL_7;
  }
  uint64_t v8 = (std::string *)(a3 + 2);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    a3[4] = *(void *)(a2 + 16);
  }
}

void sub_1920D02CC(_Unwind_Exception *exception_object)
{
  int v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::SerDes::serdes_object_json_objc::get_int(uint64_t a1, uint64_t a2)
{
  int v2 = Espresso::SerDes::fast_dict_lookup(*(void **)(a1 + 24), a2);
  int v3 = v2;
  if (!v2)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    int v7 = std::string::append(&v9, "\" not found");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v10.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v10.__r_.__value_.__l.__data_ = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    std::logic_error::logic_error(exception, &v10);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
    __cxa_throw(exception, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
  }
  uint64_t v4 = [v2 intValue];

  return v4;
}

void sub_1920D03D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v23 & 1) == 0)
    {
LABEL_8:

      _Unwind_Resume(a1);
    }
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

uint64_t Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(void *a1, _DWORD *a2)
{
  uint64_t v4 = a1 + 2;
  uint64_t result = (*(uint64_t (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2);
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(void, void *))(*(void *)*a1 + 40))(*a1, v4);
    *a2 = result;
  }
  return result;
}

{
  void *v4;
  uint64_t result;

  uint64_t v4 = a1 + 2;
  uint64_t result = (*(uint64_t (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2);
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(void, void *))(*(void *)*a1 + 48))(*a1, v4);
    *a2 = result;
  }
  return result;
}

BOOL Espresso::SerDes::serdes_object_json_objc::has_key(uint64_t a1, uint64_t a2)
{
  int v2 = Espresso::SerDes::fast_dict_lookup(*(void **)(a1 + 24), a2);
  BOOL v3 = v2 != 0;

  return v3;
}

id Espresso::SerDes::fast_dict_lookup(void *a1, uint64_t a2)
{
  CFDictionaryRef v3 = a1;
  int v4 = *(char *)(a2 + 23);
  if (v4 >= 0) {
    uint64_t v5 = (const UInt8 *)a2;
  }
  else {
    uint64_t v5 = *(const UInt8 **)a2;
  }
  if (v4 >= 0) {
    CFIndex v6 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    CFIndex v6 = *(void *)(a2 + 8);
  }
  CFStringRef v7 = CFStringCreateWithBytesNoCopy(0, v5, v6, 0x8000100u, 0, (CFAllocatorRef)*MEMORY[0x1E4F1CFA0]);
  if (v7)
  {
    id Value = (id)CFDictionaryGetValue(v3, v7);
    CFRelease(v7);

    if (Value) {
      id Value = Value;
    }
  }
  else
  {

    id Value = 0;
  }

  return Value;
}

void sub_1920D05CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(void *a1, _WORD *a2)
{
  int v4 = a1 + 2;
  uint64_t result = (*(uint64_t (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2);
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(void, void *))(*(void *)*a1 + 56))(*a1, v4);
    *a2 = result;
  }
  return result;
}

{
  void *v4;
  uint64_t result;

  int v4 = a1 + 2;
  uint64_t result = (*(uint64_t (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2);
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(void, void *))(*(void *)*a1 + 64))(*a1, v4);
    *a2 = result;
  }
  return result;
}

void Espresso::SerDes::serdes_object_json_objc::~serdes_object_json_objc(id *this)
{
  int v2 = (std::__shared_weak_count *)this[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  int v2 = (std::__shared_weak_count *)this[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  JUMPOUT(0x192FF16B0);
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::serdes_object_json_objc>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(void *a1, float *a2)
{
  int v4 = a1 + 2;
  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2)) {
    *a2 = (*(float (**)(void, void *))(*(void *)*a1 + 96))(*a1, v4);
  }
}

uint64_t Espresso::SerDes::serdes_object_json_objc::get_short(uint64_t a1, uint64_t a2)
{
  int v2 = Espresso::SerDes::fast_dict_lookup(*(void **)(a1 + 24), a2);
  CFDictionaryRef v3 = v2;
  if (!v2)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    CFStringRef v7 = std::string::append(&v9, "\" not found");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v10.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v10.__r_.__value_.__l.__data_ = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    std::logic_error::logic_error(exception, &v10);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
    __cxa_throw(exception, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
  }
  uint64_t v4 = [v2 shortValue];

  return v4;
}

void sub_1920D0854(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v23 & 1) == 0)
    {
LABEL_8:

      _Unwind_Resume(a1);
    }
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

float Espresso::SerDes::serdes_object_json_objc::get_float(uint64_t a1, uint64_t a2)
{
  CFDictionaryRef v3 = Espresso::SerDes::fast_dict_lookup(*(void **)(a1 + 24), a2);
  if (!v3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::string v10 = std::string::append(&v12, "\" not found");
    long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v13.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v13.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    std::logic_error::logic_error(exception, &v13);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
    __cxa_throw(exception, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    uint64_t v4 = (const char *)[v3 UTF8String];
    size_t v5 = strlen(v4);
    float v6 = Espresso::SerDes::generic_serdes_object::try_parse_special_float_val(a2, (uint64_t)v4, v5);
  }
  else
  {
    [v3 floatValue];
  }
  float v7 = v6;

  return v7;
}

void sub_1920D0A00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v23 & 1) == 0)
    {
LABEL_8:

      _Unwind_Resume(a1);
    }
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

void Espresso::abstract_blob_container_options::~abstract_blob_container_options(Espresso::abstract_blob_container_options *this)
{
  *(void *)this = &unk_1EE3661F8;
  int v2 = (std::__shared_weak_count *)*((void *)this + 10);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  CFDictionaryRef v3 = (void *)*((void *)this + 5);
  if (v3)
  {
    *((void *)this + 6) = v3;
    operator delete(v3);
  }
}

{
  uint64_t vars8;

  Espresso::abstract_blob_container_options::~abstract_blob_container_options(this);

  JUMPOUT(0x192FF16B0);
}

void Espresso::abstract_blob_container_options_aliasing::~abstract_blob_container_options_aliasing(Espresso::abstract_blob_container_options_aliasing *this)
{
  *(void *)this = &unk_1EE36B910;
  int v2 = (std::__shared_weak_count *)*((void *)this + 14);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }

  Espresso::abstract_blob_container_options::~abstract_blob_container_options(this);
}

{
  uint64_t vars8;

  Espresso::abstract_blob_container_options_aliasing::~abstract_blob_container_options_aliasing(this);

  JUMPOUT(0x192FF16B0);
}

uint64_t std::__shared_ptr_emplace<Espresso::abstract_blob_container_options_aliasing>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void Espresso::base_kernel::~base_kernel(Espresso::base_kernel *this)
{
  *(void *)this = &unk_1EE32A3F8;
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::~__hash_table((uint64_t)this + 240);
  int v2 = (std::__shared_weak_count *)*((void *)this + 29);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  CFDictionaryRef v3 = (void *)*((void *)this + 25);
  if (v3)
  {
    *((void *)this + 26) = v3;
    operator delete(v3);
  }
  if (*((char *)this + 199) < 0) {
    operator delete(*((void **)this + 22));
  }
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*((void **)this + 20));
  if (*((char *)this + 127) < 0) {
    operator delete(*((void **)this + 13));
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob_cpu>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob_cpu>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob_cpu>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob_cpu>>>>::~__hash_table((uint64_t)this + 64);
  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<Espresso::blob_file_metadata>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<Espresso::blob_file_metadata>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<Espresso::blob_file_metadata>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<Espresso::blob_file_metadata>>>>::~__hash_table((uint64_t)this + 24);
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__deallocate_node(*(void ***)(a1 + 16));
  int v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__deallocate_node(void **__p)
{
  if (__p)
  {
    uint64_t v1 = __p;
    do
    {
      int v2 = (void **)*v1;
      if (*((char *)v1 + 39) < 0) {
        operator delete(v1[2]);
      }
      operator delete(v1);
      uint64_t v1 = v2;
    }
    while (v2);
  }
}

void std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<Espresso::abstract_blob_container>>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob_cpu>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob_cpu>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob_cpu>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob_cpu>>>>::~__hash_table(uint64_t a1)
{
  int v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      CFDictionaryRef v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<Espresso::abstract_blob_container>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      int v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<Espresso::blob_file_metadata>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<Espresso::blob_file_metadata>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<Espresso::blob_file_metadata>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<Espresso::blob_file_metadata>>>>::~__hash_table(uint64_t a1)
{
  int v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      CFDictionaryRef v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unique_ptr<Espresso::blob_file_metadata>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      int v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void Espresso::abstract_blob_container::~abstract_blob_container(Espresso::abstract_blob_container *this)
{
  *(void *)this = &unk_1EE359E28;
  int v2 = (void *)*((void *)this + 16);
  if (v2)
  {
    *((void *)this + 17) = v2;
    operator delete(v2);
  }
  CFDictionaryRef v3 = (std::__shared_weak_count *)*((void *)this + 12);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 10);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  size_t v5 = (void *)*((void *)this + 6);
  if (v5)
  {
    *((void *)this + 7) = v5;
    operator delete(v5);
  }
}

void std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v4 = operator new(8 * a2);
    size_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0;
    *(void *)(a1 + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    float v7 = *(void **)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v8) = a1 + 16;
      long long v11 = (void *)*v7;
      if (*v7)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2) {
              v12 %= a2;
            }
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(void *)(*(void *)a1 + 8 * v12))
            {
              *(void *)(*(void *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }
            *float v7 = *v11;
            *long long v11 = **(void **)(*(void *)a1 + 8 * v12);
            **(void **)(*(void *)a1 + 8 * v12) = v11;
            long long v11 = v7;
          }
          unint64_t v12 = v8;
LABEL_24:
          float v7 = v11;
          long long v11 = (void *)*v11;
          unint64_t v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    std::string v10 = *(void **)a1;
    *(void *)a1 = 0;
    if (v10) {
      operator delete(v10);
    }
    *(void *)(a1 + 8) = 0;
  }
}

uint64_t std::__shared_ptr_pointer<void *,int (*)(void *),std::allocator<void>>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))(*(void *)(a1 + 24));
}

uint64_t Espresso::blob<float,4>::~blob(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_1EE36BF10;
  if (*(unsigned char *)(a1 + 32))
  {
    CFDictionaryRef v3 = *(void **)(a1 + 24);
    if (v3)
    {
      Espresso::on_dealloc(*(Espresso **)(a1 + 24), a2);
      free(v3);
    }
  }
  *(void *)(a1 + 24) = 0;
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 64);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  size_t v5 = *(std::__shared_weak_count **)(a1 + 48);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<Espresso::blob<float,4>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__rehash<true>(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }
    else
    {
      uint64_t v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }
    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4)
    {
LABEL_16:
      std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::__do_rehash<true>(a1, prime);
    }
  }
}

void Espresso::generic_convolution_kernel::~generic_convolution_kernel(void **this)
{
  *this = &unk_1EE35E508;
  if (*((char *)this + 559) < 0) {
    operator delete(this[67]);
  }
  int v2 = (std::__shared_weak_count *)this[66];
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  CFDictionaryRef v3 = (std::__shared_weak_count *)this[64];
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  int8x8_t v4 = (std::__shared_weak_count *)this[62];
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  *this = &unk_1EE362050;
  unint64_t v5 = (std::__shared_weak_count *)this[60];
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
  *this = &unk_1EE363ED8;
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(this[36]);

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

uint64_t std::__shared_ptr_emplace<Espresso::blob_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::blob_container>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::convolution_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_elementwise_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t std::__shared_ptr_emplace<Espresso::IREngine::blob_container>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void Espresso::dummy_blob_container::~dummy_blob_container(Espresso::dummy_blob_container *this)
{
  *(void *)this = &unk_1EE351078;
  int v2 = (std::__shared_weak_count *)*((void *)this + 34);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  *(void *)this = &unk_1EE3718A0;
  CFDictionaryRef v3 = (std::__shared_weak_count *)*((void *)this + 29);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  int8x8_t v4 = (std::__shared_weak_count *)*((void *)this + 27);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  unint64_t v5 = (std::__shared_weak_count *)*((void *)this + 25);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
  uint8x8_t v6 = (std::__shared_weak_count *)*((void *)this + 23);
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }
  uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 21);
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }

  Espresso::abstract_blob_container::~abstract_blob_container(this);
}

{
  uint64_t vars8;

  Espresso::dummy_blob_container::~dummy_blob_container(this);

  JUMPOUT(0x192FF16B0);
}

uint64_t std::__shared_ptr_emplace<Espresso::abstract_blob_container_options>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void Espresso::abstract_batch::~abstract_batch(Espresso::abstract_batch *this)
{
  *(void *)this = &unk_1EE331C18;
  int v2 = (std::__shared_weak_count *)*((void *)this + 14);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  CFDictionaryRef v3 = (std::__shared_weak_count *)*((void *)this + 9);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

uint64_t std::__shared_ptr_emplace<Espresso::batch_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t std::__shared_ptr_emplace<Espresso::convolution_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void Espresso::convolution_kernel_cpu::~convolution_kernel_cpu(Espresso::convolution_kernel_cpu *this)
{
  *(void *)this = &unk_1EE357C78;
  int v2 = (std::__shared_weak_count *)*((void *)this + 79);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  CFDictionaryRef v3 = (std::__shared_weak_count *)*((void *)this + 77);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  *(void *)this = &unk_1EE3600B8;
  int8x8_t v4 = (std::__shared_weak_count *)*((void *)this + 75);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  unint64_t v5 = (std::__shared_weak_count *)*((void *)this + 73);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
  uint8x8_t v6 = (std::__shared_weak_count *)*((void *)this + 71);
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }

  Espresso::generic_convolution_kernel::~generic_convolution_kernel((void **)this);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t vars8;

  *(void *)this = &unk_1EE357C78;
  int v2 = (std::__shared_weak_count *)*((void *)this + 79);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  CFDictionaryRef v3 = (std::__shared_weak_count *)*((void *)this + 77);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  *(void *)this = &unk_1EE3600B8;
  int8x8_t v4 = (std::__shared_weak_count *)*((void *)this + 75);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  unint64_t v5 = (std::__shared_weak_count *)*((void *)this + 73);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
  uint8x8_t v6 = (std::__shared_weak_count *)*((void *)this + 71);
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }
  Espresso::generic_convolution_kernel::~generic_convolution_kernel((void **)this);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::DummyMPSEngine::elementwise_kernel>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_emplace<Espresso::layer>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 32))();
}

uint64_t std::__shared_ptr_emplace<Espresso::graph_optimization_rule_status>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::stir_slice_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t std::__shared_ptr_emplace<Espresso::analysis_pass_graph_coloring>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void Espresso::analysis_pass_graph_coloring::~analysis_pass_graph_coloring(Espresso::analysis_pass_graph_coloring *this)
{
  *(void *)this = &unk_1EE362848;
  int v2 = (void *)*((void *)this + 6);
  if (v2)
  {
    *((void *)this + 7) = v2;
    operator delete(v2);
  }
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::~__hash_table((uint64_t)this + 8);
}

{
  uint64_t vars8;

  Espresso::analysis_pass_graph_coloring::~analysis_pass_graph_coloring(this);

  JUMPOUT(0x192FF16B0);
}

uint64_t std::__shared_ptr_emplace<Espresso::pass_update_absolute_indexes_after_transform>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void Espresso::pass_update_absolute_indexes_after_transform::~pass_update_absolute_indexes_after_transform(Espresso::pass_update_absolute_indexes_after_transform *this)
{
  *(void *)this = &unk_1EE3719B0;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
}

{
  std::__shared_weak_count *v1;
  uint64_t vars8;

  *(void *)this = &unk_1EE3719B0;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }

  JUMPOUT(0x192FF16B0);
}

uint64_t std::__shared_ptr_emplace<Espresso::blob<unsigned short,4>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t Espresso::blob<unsigned short,4>::~blob(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_1EE36C130;
  if (*(unsigned char *)(a1 + 32))
  {
    CFDictionaryRef v3 = *(void **)(a1 + 24);
    if (v3)
    {
      Espresso::on_dealloc(*(Espresso **)(a1 + 24), a2);
      free(v3);
    }
  }
  *(void *)(a1 + 24) = 0;
  int8x8_t v4 = *(std::__shared_weak_count **)(a1 + 64);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  unint64_t v5 = *(std::__shared_weak_count **)(a1 + 48);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<Espresso::pass_params_graph_coloring>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t std::__shared_ptr_emplace<Espresso::pass_blob_name_indexing>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void Espresso::pass_blob_name_indexing::~pass_blob_name_indexing(Espresso::pass_blob_name_indexing *this)
{
  *(void *)this = &unk_1EE3719B0;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
}

{
  std::__shared_weak_count *v1;
  uint64_t vars8;

  *(void *)this = &unk_1EE3719B0;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }

  JUMPOUT(0x192FF16B0);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::concat_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t std::__shared_ptr_emplace<Espresso::pass_blob_name_indexing_result>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void Espresso::generic_activation_kernel::~generic_activation_kernel(Espresso::generic_activation_kernel *this)
{
  *(void *)this = &unk_1EE35D308;
  int v2 = (std::__shared_weak_count *)*((void *)this + 48);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  CFDictionaryRef v3 = (std::__shared_weak_count *)*((void *)this + 46);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  int8x8_t v4 = (std::__shared_weak_count *)*((void *)this + 44);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  *(void *)this = &unk_1EE363ED8;
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*((void **)this + 36));

  Espresso::base_kernel::~base_kernel(this);
}

void Espresso::context_cpu::~context_cpu(Espresso::context_cpu *this)
{
  *(void *)this = &unk_1EE32A5A8;
  int v2 = (std::__shared_weak_count *)*((void *)this + 19);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }

  Espresso::abstract_context::~abstract_context((id *)this);
}

{
  uint64_t vars8;

  Espresso::context_cpu::~context_cpu(this);

  JUMPOUT(0x192FF16B0);
}

uint64_t std::__shared_ptr_emplace<Espresso::pass_unpack_layers>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void Espresso::pass_unpack_layers::~pass_unpack_layers(Espresso::pass_unpack_layers *this)
{
  *(void *)this = &unk_1EE34EA00;
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::~__hash_table((uint64_t)this + 24);
  *(void *)this = &unk_1EE3719B0;
  int v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = &unk_1EE34EA00;
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::~__hash_table((uint64_t)this + 24);
  *(void *)this = &unk_1EE3719B0;
  int v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }

  JUMPOUT(0x192FF16B0);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::deconvolution_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::cpu_context_transfer_algo_t>::__on_zero_shared(uint64_t a1)
{
  std::mutex::~mutex((std::mutex *)(a1 + 112));
  int v2 = *(std::__shared_weak_count **)(a1 + 104);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  CFDictionaryRef v3 = *(std::__shared_weak_count **)(a1 + 88);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  unint64_t v5 = (void **)(a1 + 48);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v5);
  int8x8_t v4 = *(std::__shared_weak_count **)(a1 + 32);
  if (v4)
  {
    nitro::nitro_function::nitro_function(v4);
  }
}

void std::__shared_ptr_emplace<Espresso::DummyMPSEngine::slice_kernel>::__on_zero_shared(uint64_t a1)
{
}

void std::__shared_ptr_emplace<Espresso::interpreter_state_t>::__on_zero_shared(uint64_t a1)
{
}

void Espresso::interpreter_state_t::~interpreter_state_t(Espresso::interpreter_state_t *this)
{
  int v2 = (void *)*((void *)this + 11);
  if (v2)
  {
    *((void *)this + 12) = v2;
    operator delete(v2);
  }
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)this + 48);
  CFDictionaryRef v3 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
}

void Espresso::context_metal::~context_metal(id *this)
{
  Espresso::abstract_context::~abstract_context(this);
}

{
  uint64_t vars8;

  Espresso::context_metal::~context_metal(this);

  JUMPOUT(0x192FF16B0);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::batch>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t std::__shared_ptr_emplace<Espresso::context_cpu>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 48))();
}

void std::__shared_ptr_emplace<Espresso::DummyMPSEngine::activation_kernel>::__on_zero_shared(uint64_t a1)
{
}

void std::__shared_ptr_emplace<Espresso::DummyMPSEngine::concat_kernel>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_emplace<Espresso::blob<int,4>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_activation_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void Espresso::generic_inner_product_kernel::~generic_inner_product_kernel(Espresso::generic_inner_product_kernel *this)
{
  *(void *)this = &unk_1EE363058;
  int v2 = (std::__shared_weak_count *)*((void *)this + 67);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  CFDictionaryRef v3 = (std::__shared_weak_count *)*((void *)this + 65);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  int8x8_t v4 = (std::__shared_weak_count *)*((void *)this + 63);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  unint64_t v5 = (std::__shared_weak_count *)*((void *)this + 61);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
  uint8x8_t v6 = (std::__shared_weak_count *)*((void *)this + 59);
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }
  *(void *)this = &unk_1EE362380;
  uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 56);
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  *(void *)this = &unk_1EE363ED8;
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*((void **)this + 36));

  Espresso::base_kernel::~base_kernel(this);
}

void std::__shared_ptr_emplace<Espresso::BNNSEngine::context>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = (Espresso::context_cpu *)(a1 + 24);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a1 + 200);

  Espresso::context_cpu::~context_cpu(v1);
}

uint64_t std::__shared_ptr_emplace<Espresso::deconvolution_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void Espresso::deconvolution_kernel_cpu::~deconvolution_kernel_cpu(Espresso::deconvolution_kernel_cpu *this)
{
  *(void *)this = &unk_1EE35B870;
  int v2 = (std::__shared_weak_count *)*((void *)this + 77);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  *(void *)this = &unk_1EE360338;
  CFDictionaryRef v3 = (std::__shared_weak_count *)*((void *)this + 75);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  int8x8_t v4 = (std::__shared_weak_count *)*((void *)this + 73);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  unint64_t v5 = (std::__shared_weak_count *)*((void *)this + 71);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }

  Espresso::generic_convolution_kernel::~generic_convolution_kernel((void **)this);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t vars8;

  *(void *)this = &unk_1EE35B870;
  int v2 = (std::__shared_weak_count *)*((void *)this + 77);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  *(void *)this = &unk_1EE360338;
  CFDictionaryRef v3 = (std::__shared_weak_count *)*((void *)this + 75);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  int8x8_t v4 = (std::__shared_weak_count *)*((void *)this + 73);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  unint64_t v5 = (std::__shared_weak_count *)*((void *)this + 71);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
  Espresso::generic_convolution_kernel::~generic_convolution_kernel((void **)this);

  JUMPOUT(0x192FF16B0);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSEngine::context>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 48))();
}

uint64_t std::__shared_ptr_emplace<Espresso::elementwise_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSBuffersEngine::context>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 48))();
}

void std::string::__throw_length_error[abi:ne180100]()
{
}

void Espresso::MPSEngine::context::~context(Espresso::MPSEngine::context *this)
{
  *(void *)this = &unk_1EE3774A0;
  int v2 = (std::__shared_weak_count *)*((void *)this + 29);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }

  Espresso::context_metal::~context_metal((id *)this);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = &unk_1EE3774A0;
  int v2 = (std::__shared_weak_count *)*((void *)this + 29);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  Espresso::context_metal::~context_metal((id *)this);

  JUMPOUT(0x192FF16B0);
}

void Espresso::MPSBuffersEngine::context::~context(Espresso::MPSBuffersEngine::context *this)
{
  *(void *)this = &unk_1EE3774A0;
  int v2 = (std::__shared_weak_count *)*((void *)this + 29);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }

  Espresso::context_metal::~context_metal((id *)this);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = &unk_1EE3774A0;
  int v2 = (std::__shared_weak_count *)*((void *)this + 29);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  Espresso::context_metal::~context_metal((id *)this);

  JUMPOUT(0x192FF16B0);
}

void Espresso::generic_load_constant_kernel::~generic_load_constant_kernel(Espresso::generic_load_constant_kernel *this)
{
  *(void *)this = &unk_1EE363278;
  int v2 = (std::__shared_weak_count *)*((void *)this + 44);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  *(void *)this = &unk_1EE3621E8;
  CFDictionaryRef v3 = (std::__shared_weak_count *)*((void *)this + 42);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  *(void *)this = &unk_1EE363ED8;
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*((void **)this + 36));

  Espresso::base_kernel::~base_kernel(this);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_expand_dims_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::copy_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::load_constant_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_reshape_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void Espresso::generic_pool_kernel::~generic_pool_kernel(Espresso::generic_pool_kernel *this)
{
  *(void *)this = &unk_1EE361858;
  int v2 = (std::__shared_weak_count *)*((void *)this + 53);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  *(void *)this = &unk_1EE363ED8;
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*((void **)this + 36));

  Espresso::base_kernel::~base_kernel(this);
}

uint64_t std::__shared_ptr_emplace<std::ifstream>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::net>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::transpose_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::batchnorm_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t std::__shared_ptr_emplace<Espresso::cast_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void Espresso::generic_batchnorm_kernel::~generic_batchnorm_kernel(Espresso::generic_batchnorm_kernel *this)
{
  *(void *)this = &unk_1EE361B88;
  int v2 = (std::__shared_weak_count *)*((void *)this + 49);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  *(void *)this = &unk_1EE363ED8;
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*((void **)this + 36));

  Espresso::base_kernel::~base_kernel(this);
}

void Espresso::ANERuntimeEngine::transpose_kernel::~transpose_kernel(Espresso::ANERuntimeEngine::transpose_kernel *this)
{
  *(void *)this = &unk_1EE341A98;
  int v2 = (Espresso::ANERuntimeEngine::transpose_kernel *)((char *)this + 304);
  *((void *)this + 38) = &unk_1EE341BF8;
  CFDictionaryRef v3 = (std::__shared_weak_count *)*((void *)this + 66);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(v2);

  Espresso::base_kernel::~base_kernel(this);
}

{
  Espresso::ANECompilerEngine::ane_kernel *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EE341A98;
  int v2 = (Espresso::ANERuntimeEngine::transpose_kernel *)((char *)this + 304);
  *((void *)this + 38) = &unk_1EE341BF8;
  CFDictionaryRef v3 = (std::__shared_weak_count *)*((void *)this + 66);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(v2);
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_pool_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t std::__shared_ptr_emplace<Espresso::expand_dims_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::general_concat_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void Espresso::generic_dev_op_kernel::~generic_dev_op_kernel(void **this)
{
  *this = &unk_1EE3554A8;
  int8x8_t v4 = this + 49;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  int8x8_t v4 = this + 46;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  if (*((char *)this + 367) < 0) {
    operator delete(this[43]);
  }
  int v2 = this[40];
  if (v2)
  {
    this[41] = v2;
    operator delete(v2);
  }
  CFDictionaryRef v3 = this[37];
  if (v3)
  {
    this[38] = v3;
    operator delete(v3);
  }

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

uint64_t std::__shared_ptr_emplace<Espresso::reduce_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_inner_product_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_squeeze_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::dev_op_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::split_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void Espresso::ANERuntimeEngine::mix_inner_product_kernel::~mix_inner_product_kernel(Espresso::ANERuntimeEngine::mix_inner_product_kernel *this)
{
  *(void *)this = &unk_1EE344278;
  int v2 = (Espresso::ANERuntimeEngine::mix_inner_product_kernel *)((char *)this + 544);
  *((void *)this + 68) = &unk_1EE3444A8;
  CFDictionaryRef v3 = (std::__shared_weak_count *)*((void *)this + 104);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  int8x8_t v4 = (std::__shared_weak_count *)*((void *)this + 102);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  unint64_t v5 = (std::__shared_weak_count *)*((void *)this + 100);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
  uint8x8_t v6 = (std::__shared_weak_count *)*((void *)this + 98);
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }
  uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 96);
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(v2);

  Espresso::generic_inner_product_kernel::~generic_inner_product_kernel(this);
}

{
  Espresso::ANECompilerEngine::ane_kernel *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t vars8;

  *(void *)this = &unk_1EE344278;
  int v2 = (Espresso::ANERuntimeEngine::mix_inner_product_kernel *)((char *)this + 544);
  *((void *)this + 68) = &unk_1EE3444A8;
  CFDictionaryRef v3 = (std::__shared_weak_count *)*((void *)this + 104);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  int8x8_t v4 = (std::__shared_weak_count *)*((void *)this + 102);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  unint64_t v5 = (std::__shared_weak_count *)*((void *)this + 100);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
  uint8x8_t v6 = (std::__shared_weak_count *)*((void *)this + 98);
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }
  uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 96);
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(v2);
  Espresso::generic_inner_product_kernel::~generic_inner_product_kernel(this);

  JUMPOUT(0x192FF16B0);
}

void Espresso::ANERuntimeEngine::mix_squeeze_kernel::~mix_squeeze_kernel(Espresso::ANERuntimeEngine::mix_squeeze_kernel *this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANERuntimeEngine::mix_squeeze_kernel *)((char *)this + 424));

  Espresso::base_kernel::~base_kernel(this);
}

{
  uint64_t vars8;

  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANERuntimeEngine::mix_squeeze_kernel *)((char *)this + 424));
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

void Espresso::ANERuntimeEngine::dev_op_kernel::~dev_op_kernel(void **this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANECompilerEngine::ane_kernel *)(this + 52));

  Espresso::generic_dev_op_kernel::~generic_dev_op_kernel(this);
}

{
  uint64_t vars8;

  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANECompilerEngine::ane_kernel *)(this + 52));
  Espresso::generic_dev_op_kernel::~generic_dev_op_kernel(this);

  JUMPOUT(0x192FF16B0);
}

void Espresso::ANERuntimeEngine::split_kernel::~split_kernel(Espresso::ANERuntimeEngine::split_kernel *this)
{
  *(void *)this = &unk_1EE33F320;
  int v2 = (Espresso::ANERuntimeEngine::split_kernel *)((char *)this + 336);
  *((void *)this + 42) = &unk_1EE33F480;
  CFDictionaryRef v3 = (void *)*((void *)this + 69);
  if (v3)
  {
    *((void *)this + 70) = v3;
    operator delete(v3);
  }
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(v2);

  Espresso::base_kernel::~base_kernel(this);
}

{
  Espresso::ANECompilerEngine::ane_kernel *v2;
  void *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EE33F320;
  int v2 = (Espresso::ANERuntimeEngine::split_kernel *)((char *)this + 336);
  *((void *)this + 42) = &unk_1EE33F480;
  CFDictionaryRef v3 = (void *)*((void *)this + 69);
  if (v3)
  {
    *((void *)this + 70) = v3;
    operator delete(v3);
  }
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(v2);
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

uint64_t std::__shared_ptr_emplace<Espresso::pass_params_insert_casts>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unique_ptr<Espresso::blob_file_metadata>>,0>(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v2) {
    std::default_delete<Espresso::blob_file_metadata>::operator()[abi:ne180100](v2);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    CFDictionaryRef v3 = *(void **)a1;
    operator delete(v3);
  }
}

void std::default_delete<Espresso::blob_file_metadata>::operator()[abi:ne180100](uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }

  JUMPOUT(0x192FF16B0);
}

void Espresso::inner_product_kernel_cpu::~inner_product_kernel_cpu(Espresso::inner_product_kernel_cpu *this)
{
  *(void *)this = &unk_1EE35CA18;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 117);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  CFDictionaryRef v3 = (std::__shared_weak_count *)*((void *)this + 113);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  int8x8_t v4 = (std::__shared_weak_count *)*((void *)this + 111);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  unint64_t v5 = (std::__shared_weak_count *)*((void *)this + 109);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
  uint8x8_t v6 = (std::__shared_weak_count *)*((void *)this + 107);
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }
  uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 105);
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  unint64_t v8 = (std::__shared_weak_count *)*((void *)this + 103);
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  uint8x8_t v9 = (std::__shared_weak_count *)*((void *)this + 101);
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  std::string v10 = (std::__shared_weak_count *)*((void *)this + 99);
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  long long v11 = (std::__shared_weak_count *)*((void *)this + 97);
  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
  unint64_t v12 = (std::__shared_weak_count *)*((void *)this + 95);
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
  std::string v13 = (std::__shared_weak_count *)*((void *)this + 93);
  if (v13) {
    nitro::nitro_function::nitro_function(v13);
  }
  BOOL v14 = (std::__shared_weak_count *)*((void *)this + 91);
  if (v14) {
    nitro::nitro_function::nitro_function(v14);
  }
  int v15 = (std::__shared_weak_count *)*((void *)this + 89);
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
  int v16 = (std::__shared_weak_count *)*((void *)this + 87);
  if (v16) {
    nitro::nitro_function::nitro_function(v16);
  }
  int v17 = (std::__shared_weak_count *)*((void *)this + 85);
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
  int v18 = (std::__shared_weak_count *)*((void *)this + 83);
  if (v18) {
    nitro::nitro_function::nitro_function(v18);
  }
  int v19 = (std::__shared_weak_count *)*((void *)this + 81);
  if (v19) {
    nitro::nitro_function::nitro_function(v19);
  }
  int v20 = (std::__shared_weak_count *)*((void *)this + 79);
  if (v20) {
    nitro::nitro_function::nitro_function(v20);
  }
  __int16 v21 = (std::__shared_weak_count *)*((void *)this + 77);
  if (v21) {
    nitro::nitro_function::nitro_function(v21);
  }
  int v22 = (std::__shared_weak_count *)*((void *)this + 75);
  if (v22) {
    nitro::nitro_function::nitro_function(v22);
  }
  int v23 = (std::__shared_weak_count *)*((void *)this + 73);
  if (v23) {
    nitro::nitro_function::nitro_function(v23);
  }
  int v24 = (std::__shared_weak_count *)*((void *)this + 71);
  if (v24) {
    nitro::nitro_function::nitro_function(v24);
  }
  int v25 = (std::__shared_weak_count *)*((void *)this + 69);
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }

  Espresso::generic_inner_product_kernel::~generic_inner_product_kernel(this);
}

{
  uint64_t vars8;

  Espresso::inner_product_kernel_cpu::~inner_product_kernel_cpu(this);

  JUMPOUT(0x192FF16B0);
}

uint64_t std::__shared_ptr_emplace<Espresso::pass_constant_if_conditions>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::network_optimization_graph>::__on_zero_shared(uint64_t a1)
{
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(*(void **)(a1 + 72));
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(*(void **)(a1 + 48));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
  {
    nitro::nitro_function::nitro_function(v2);
  }
}

void std::__shared_ptr_emplace<Espresso::quantized_weights_helper>::__on_zero_shared(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[25];
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  CFDictionaryRef v3 = (std::__shared_weak_count *)a1[18];
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  int8x8_t v4 = (std::__shared_weak_count *)a1[16];
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  unint64_t v5 = (std::__shared_weak_count *)a1[14];
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
  uint8x8_t v6 = (std::__shared_weak_count *)a1[12];
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }
  uint64_t v7 = (std::__shared_weak_count *)a1[10];
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  unint64_t v8 = (std::__shared_weak_count *)a1[8];
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  uint8x8_t v9 = (std::__shared_weak_count *)a1[6];
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  std::string v10 = (std::__shared_weak_count *)a1[4];
  if (v10)
  {
    nitro::nitro_function::nitro_function(v10);
  }
}

uint64_t std::__shared_ptr_emplace<Espresso::inner_product_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t std::__shared_ptr_emplace<Espresso::blob_storage_memory>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::sequential_builder>::__on_zero_shared(uint64_t a1)
{
  std::deque<std::pair<std::shared_ptr<Espresso::abstract_context>,Espresso::compute_path>>::~deque[abi:ne180100](a1 + 160);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 144);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  CFDictionaryRef v3 = *(std::__shared_weak_count **)(a1 + 128);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  int8x8_t v4 = *(std::__shared_weak_count **)(a1 + 112);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy(a1 + 40, *(void **)(a1 + 48));
  unint64_t v5 = *(std::__shared_weak_count **)(a1 + 32);
  if (v5)
  {
    nitro::nitro_function::nitro_function(v5);
  }
}

uint64_t std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::context>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 48))();
}

uint64_t std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_reduce_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<rule_input_underflow>::__on_zero_shared(uint64_t a1)
{
}

void Espresso::pass_constant_if_conditions::~pass_constant_if_conditions(Espresso::pass_constant_if_conditions *this)
{
  *(void *)this = &unk_1EE3719B0;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
}

{
  std::__shared_weak_count *v1;
  uint64_t vars8;

  *(void *)this = &unk_1EE3719B0;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }

  JUMPOUT(0x192FF16B0);
}

void Espresso::graph_optimization_rule::~graph_optimization_rule(Espresso::graph_optimization_rule *this)
{
  *(void *)this = &unk_1EE35AF00;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  CFDictionaryRef v3 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
}

void Espresso::ANERuntimeEngine::mix_reduce_kernel::~mix_reduce_kernel(Espresso::ANERuntimeEngine::mix_reduce_kernel *this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANERuntimeEngine::mix_reduce_kernel *)((char *)this + 328));

  Espresso::base_kernel::~base_kernel(this);
}

{
  uint64_t vars8;

  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANERuntimeEngine::mix_reduce_kernel *)((char *)this + 328));
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_store_global_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_load_global_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_cf_loop_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_cf_if_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_alloc_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t std::__shared_ptr_emplace<Espresso::upsample_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t std::__shared_ptr_emplace<Espresso::squeeze_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::upsample_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void Espresso::ANERuntimeEngine::upsample_kernel::~upsample_kernel(Espresso::ANERuntimeEngine::upsample_kernel *this)
{
  *(void *)this = &unk_1EE341240;
  uint64_t v2 = (Espresso::ANERuntimeEngine::upsample_kernel *)((char *)this + 352);
  *((void *)this + 44) = &unk_1EE3413A0;
  CFDictionaryRef v3 = (std::__shared_weak_count *)*((void *)this + 72);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(v2);

  Espresso::base_kernel::~base_kernel(this);
}

{
  Espresso::ANECompilerEngine::ane_kernel *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EE341240;
  uint64_t v2 = (Espresso::ANERuntimeEngine::upsample_kernel *)((char *)this + 352);
  *((void *)this + 44) = &unk_1EE3413A0;
  CFDictionaryRef v3 = (std::__shared_weak_count *)*((void *)this + 72);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(v2);
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

uint64_t std::__shared_ptr_pointer<Espresso::blob_cpu  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSEngine::meta_texarray_kernel<Espresso::MPSEngine::general_concat_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSEngine::meta_texarray_kernel<Espresso::MPSEngine::activation_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSEngine::meta_texarray_kernel<Espresso::MetalLowmemEngine::elementwise_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::MPSEngine::inner_product_kernel>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 592);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }

  Espresso::generic_inner_product_kernel::~generic_inner_product_kernel((Espresso::generic_inner_product_kernel *)(a1 + 24));
}

uint64_t std::__shared_ptr_emplace<Espresso::blob<float,1>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t std::__shared_ptr_emplace<Espresso::generic_context_transfer_kernel_impl>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t std::__shared_ptr_emplace<Espresso::generic_load_constant_kernel_impl>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t std::__shared_ptr_emplace<Espresso::general_concat_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t std::__shared_ptr_emplace<Espresso::general_slice_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t std::__shared_ptr_emplace<Espresso::activation_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t std::__shared_ptr_emplace<Espresso::gather_nd_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t std::__shared_ptr_emplace<Espresso::dev_op_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t std::__shared_ptr_emplace<Espresso::slice_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t std::__shared_ptr_emplace<Espresso::ANERuntimeEngine::mix_non_maximum_suppression_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t std::__shared_ptr_emplace<Espresso::topk_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::DummyMPSEngine::general_concat_kernel>::__on_zero_shared(uint64_t a1)
{
}

void std::__shared_ptr_emplace<Espresso::DummyMPSEngine::inner_product_kernel>::__on_zero_shared(uint64_t a1)
{
}

void std::__shared_ptr_emplace<Espresso::DummyMPSEngine::split_kernel>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_emplace<Espresso::BNNSEngine::inner_product_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t std::__shared_ptr_emplace<Espresso::BNNSEngine::elementwise_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void Espresso::MPSEngine::meta_texarray_kernel<Espresso::MPSEngine::general_concat_kernel>::~meta_texarray_kernel(uint64_t a1)
{
  *(void *)a1 = &unk_1EE374738;
  CFDictionaryRef v3 = (void **)(a1 + 400);
  std::vector<Espresso::layer_data>::__destroy_vector::operator()[abi:ne180100](&v3);
  CFDictionaryRef v3 = (void **)(a1 + 376);
  std::vector<Espresso::layer_data>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 304);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)a1);
}

{
  std::__shared_weak_count *v2;
  void **v3;
  uint64_t vars8;

  *(void *)a1 = &unk_1EE374738;
  CFDictionaryRef v3 = (void **)(a1 + 400);
  std::vector<Espresso::layer_data>::__destroy_vector::operator()[abi:ne180100](&v3);
  CFDictionaryRef v3 = (void **)(a1 + 376);
  std::vector<Espresso::layer_data>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 304);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)a1);

  JUMPOUT(0x192FF16B0);
}

void Espresso::MPSEngine::activation_kernel::~activation_kernel(Espresso::MPSEngine::activation_kernel *this)
{
  *(void *)this = &unk_1EE3735E0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 54);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }

  CFDictionaryRef v3 = (std::__shared_weak_count *)*((void *)this + 51);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }

  Espresso::generic_activation_kernel::~generic_activation_kernel(this);
}

{
  uint64_t vars8;

  Espresso::MPSEngine::activation_kernel::~activation_kernel(this);

  JUMPOUT(0x192FF16B0);
}

void Espresso::blob_cpu::~blob_cpu(Espresso::blob_cpu *this)
{
  *(void *)this = &unk_1EE3718A0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 29);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  CFDictionaryRef v3 = (std::__shared_weak_count *)*((void *)this + 27);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  int8x8_t v4 = (std::__shared_weak_count *)*((void *)this + 25);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  unint64_t v5 = (std::__shared_weak_count *)*((void *)this + 23);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
  uint8x8_t v6 = (std::__shared_weak_count *)*((void *)this + 21);
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }
  Espresso::abstract_blob_container::~abstract_blob_container(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t vars8;

  *(void *)this = &unk_1EE3718A0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 29);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  CFDictionaryRef v3 = (std::__shared_weak_count *)*((void *)this + 27);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  int8x8_t v4 = (std::__shared_weak_count *)*((void *)this + 25);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  unint64_t v5 = (std::__shared_weak_count *)*((void *)this + 23);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
  uint8x8_t v6 = (std::__shared_weak_count *)*((void *)this + 21);
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }

  Espresso::abstract_blob_container::~abstract_blob_container(this);
}

void Espresso::generic_non_maximum_suppression_kernel::~generic_non_maximum_suppression_kernel(Espresso::generic_non_maximum_suppression_kernel *this)
{
  *(void *)this = &unk_1EE356AF8;
  uint64_t v2 = (void *)*((void *)this + 39);
  if (v2)
  {
    *((void *)this + 40) = v2;
    operator delete(v2);
  }

  Espresso::base_kernel::~base_kernel(this);
}

void Espresso::generic_context_transfer_kernel::~generic_context_transfer_kernel(Espresso::generic_context_transfer_kernel *this)
{
  *(void *)this = &unk_1EE366678;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 42);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  CFDictionaryRef v3 = (std::__shared_weak_count *)*((void *)this + 40);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }

  Espresso::base_kernel::~base_kernel(this);
}

void Espresso::general_slice_kernel_cpu::~general_slice_kernel_cpu(Espresso::general_slice_kernel_cpu *this)
{
  *(void *)this = &unk_1EE35BAF0;
  uint64_t v2 = (void *)*((void *)this + 63);
  if (v2) {
    operator delete(v2);
  }
  CFDictionaryRef v3 = (void *)*((void *)this + 60);
  if (v3) {
    operator delete(v3);
  }
  int8x8_t v4 = (void *)*((void *)this + 57);
  if (v4) {
    operator delete(v4);
  }
  unint64_t v5 = (void *)*((void *)this + 54);
  if (v5)
  {
    *((void *)this + 55) = v5;
    operator delete(v5);
  }
  uint8x8_t v6 = (void *)*((void *)this + 51);
  if (v6)
  {
    *((void *)this + 52) = v6;
    operator delete(v6);
  }
  uint64_t v7 = (void *)*((void *)this + 48);
  if (v7)
  {
    *((void *)this + 49) = v7;
    operator delete(v7);
  }

  Espresso::base_kernel::~base_kernel(this);
}

{
  uint64_t vars8;

  Espresso::general_slice_kernel_cpu::~general_slice_kernel_cpu(this);

  JUMPOUT(0x192FF16B0);
}

void Espresso::activation_kernel_cpu::~activation_kernel_cpu(Espresso::activation_kernel_cpu *this)
{
  *(void *)this = &unk_1EE353E58;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 52);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  CFDictionaryRef v3 = (std::__shared_weak_count *)*((void *)this + 50);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }

  Espresso::generic_activation_kernel::~generic_activation_kernel(this);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EE353E58;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 52);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  CFDictionaryRef v3 = (std::__shared_weak_count *)*((void *)this + 50);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::generic_activation_kernel::~generic_activation_kernel(this);

  JUMPOUT(0x192FF16B0);
}

void Espresso::gather_nd_kernel_cpu::~gather_nd_kernel_cpu(Espresso::gather_nd_kernel_cpu *this)
{
  *(void *)this = &unk_1EE351158;
  uint64_t v2 = (void *)*((void *)this + 37);
  if (v2)
  {
    *((void *)this + 38) = v2;
    operator delete(v2);
  }

  Espresso::base_kernel::~base_kernel(this);
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_1EE351158;
  uint64_t v2 = (void *)*((void *)this + 37);
  if (v2)
  {
    *((void *)this + 38) = v2;
    operator delete(v2);
  }
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

void Espresso::dev_op_kernel_cpu::~dev_op_kernel_cpu(Espresso::dev_op_kernel_cpu *this)
{
  *(void *)this = &unk_1EE34CA10;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 56);
  *((void *)this + 55) = 0;
  *((void *)this + 56) = 0;
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  uint64_t v3 = *((void *)this + 57);
  *((void *)this + 57) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  int8x8_t v4 = (std::__shared_weak_count *)*((void *)this + 59);
  *((void *)this + 58) = 0;
  *((void *)this + 59) = 0;
  if (v4)
  {
    nitro::nitro_function::nitro_function(v4);
    unint64_t v5 = (std::__shared_weak_count *)*((void *)this + 59);
    if (v5) {
      nitro::nitro_function::nitro_function(v5);
    }
  }
  uint64_t v6 = *((void *)this + 57);
  *((void *)this + 57) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 56);
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  if (*((char *)this + 439) < 0) {
    operator delete(*((void **)this + 52));
  }

  Espresso::generic_dev_op_kernel::~generic_dev_op_kernel((void **)this);
}

{
  uint64_t vars8;

  Espresso::dev_op_kernel_cpu::~dev_op_kernel_cpu(this);

  JUMPOUT(0x192FF16B0);
}

void Espresso::ANERuntimeEngine::mix_non_maximum_suppression_kernel::~mix_non_maximum_suppression_kernel(Espresso::ANERuntimeEngine::mix_non_maximum_suppression_kernel *this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANERuntimeEngine::mix_non_maximum_suppression_kernel *)((char *)this + 336));

  Espresso::generic_non_maximum_suppression_kernel::~generic_non_maximum_suppression_kernel(this);
}

{
  uint64_t vars8;

  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANERuntimeEngine::mix_non_maximum_suppression_kernel *)((char *)this + 336));
  Espresso::generic_non_maximum_suppression_kernel::~generic_non_maximum_suppression_kernel(this);

  JUMPOUT(0x192FF16B0);
}

void Espresso::BNNSEngine::inner_product_kernel::~inner_product_kernel(void **this)
{
  *this = &unk_1EE328CF8;
  BNNSFilterDestroy(this[114]);
  uint64_t v2 = (std::__shared_weak_count *)this[120];
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }

  Espresso::inner_product_kernel_cpu::~inner_product_kernel_cpu((Espresso::inner_product_kernel_cpu *)this);
}

{
  uint64_t vars8;

  Espresso::BNNSEngine::inner_product_kernel::~inner_product_kernel(this);

  JUMPOUT(0x192FF16B0);
}

void Espresso::BNNSEngine::elementwise_kernel::~elementwise_kernel(Espresso::BNNSEngine::elementwise_kernel *this)
{
  *(void *)this = &unk_1EE3287C8;
  uint64_t v2 = (void **)*((void *)this + 44);
  uint64_t v3 = (void **)*((void *)this + 45);
  if (v2 != v3)
  {
    do
    {
      if (*v2) {
        BNNSFilterDestroy(*v2);
      }
      ++v2;
    }
    while (v2 != v3);
    uint64_t v2 = (void **)*((void *)this + 44);
  }
  *((void *)this + 45) = v2;
  int8x8_t v4 = (std::__shared_weak_count *)*((void *)this + 43);
  *((void *)this + 42) = 0;
  *((void *)this + 43) = 0;
  if (v4)
  {
    nitro::nitro_function::nitro_function(v4);
    uint64_t v2 = (void **)*((void *)this + 44);
  }
  if (v2)
  {
    *((void *)this + 45) = v2;
    operator delete(v2);
  }
  unint64_t v5 = (std::__shared_weak_count *)*((void *)this + 43);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }

  Espresso::base_kernel::~base_kernel(this);
}

{
  uint64_t vars8;

  Espresso::BNNSEngine::elementwise_kernel::~elementwise_kernel(this);

  JUMPOUT(0x192FF16B0);
}

uint64_t Espresso::cpu_context_transfer_algo_t::reorder_load_constants(uint64_t a1, uint64_t **a2, unsigned char *a3)
{
  uint64_t v120 = a1;
  uint64_t v140 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *a2;
  memset(v134, 0, sizeof(v134));
  int v135 = 1065353216;
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  v122 = a2;
  v123 = v3;
  if (v5 == *v3)
  {
    uint64_t v4 = v3[1];
    goto LABEL_63;
  }
  unint64_t v6 = 0;
  do
  {
    uint64_t v8 = v4 + 224 * v6;
    uint64_t v7 = (void *)(v8 + 48);
    LODWORD(v8) = *(char *)(v8 + 71);
    uint64_t v9 = v8;
    if ((v8 & 0x80000000) != 0)
    {
      std::string v10 = (void *)*v7;
      uint64_t v8 = v7[1];
    }
    else
    {
      std::string v10 = v7;
      uint64_t v8 = v8;
    }
    if (v8 >= 3)
    {
      long long v11 = (char *)v10 + v8;
      a1 = (uint64_t)v10;
      do
      {
        a1 = (uint64_t)memchr((void *)a1, 99, v8 - 2);
        if (!a1) {
          break;
        }
        if (*(_WORD *)a1 == 26211 && *(unsigned char *)(a1 + 2) == 95)
        {
          if ((char *)a1 != v11 && (void *)a1 == v10) {
            return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v134);
          }
          break;
        }
        uint64_t v8 = (uint64_t)&v11[-++a1];
      }
      while ((uint64_t)&v11[-a1] >= 3);
    }
    if ((v9 & 0x80) != 0)
    {
      std::string v13 = (void *)*v7;
      uint64_t v14 = v7[1];
    }
    else
    {
      std::string v13 = v7;
      uint64_t v14 = v9;
    }
    if (v14 >= 7)
    {
      int v15 = (char *)v13 + v14;
      a1 = (uint64_t)v13;
      do
      {
        a1 = (uint64_t)memchr((void *)a1, 95, v14 - 6);
        if (!a1) {
          break;
        }
        if (*(_DWORD *)a1 == 1869375327 && *(_DWORD *)(a1 + 3) == 1818321519)
        {
          if ((char *)a1 != v15 && a1 - (void)v13 != -1) {
            return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v134);
          }
          break;
        }
        uint64_t v14 = (uint64_t)&v15[-++a1];
      }
      while ((uint64_t)&v15[-a1] >= 7);
    }
    if ((v9 & 0x80) != 0)
    {
      if (v7[1] == 11)
      {
        uint64_t v7 = (void *)*v7;
LABEL_36:
        if (*v7 == 0x747269765F696870 && *(void *)((char *)v7 + 3) == 0x6C6175747269765FLL) {
          goto LABEL_43;
        }
      }
    }
    else if (v9 == 11)
    {
      goto LABEL_36;
    }
    a1 = *(void *)(v4 + 224 * v6 + 88);
    if (a1)
    {
      a1 = (*(uint64_t (**)(uint64_t, unint64_t))(*(void *)a1 + 264))(a1, 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(*(void *)(v4 + 224 * v6 + 144) - *(void *)(v4 + 224 * v6 + 136)) >> 3));
      if (a1) {
        return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v134);
      }
      uint64_t v4 = *v123;
      uint64_t v5 = v123[1];
    }
LABEL_43:
    ++v6;
  }
  while (v6 < 0x6DB6DB6DB6DB6DB7 * ((v5 - v4) >> 5));
  if (v5 != v4)
  {
    uint64_t v18 = 0;
    while (1)
    {
      uint64_t v19 = v4 + 224 * v18;
      int v20 = (void *)(v19 + 48);
      int v21 = *(char *)(v19 + 71);
      if (v21 < 0)
      {
        if (v20[1] == 13)
        {
          int v20 = (void *)*v20;
LABEL_51:
          int v22 = (void *)*v20;
          uint64_t v23 = *(void *)((char *)v20 + 5);
          if (v22 == (void *)0x6E6F635F64616F6CLL && v23 == 0x746E6174736E6F63)
          {
            uint64_t v25 = v4 + 224 * v18;
            uint64_t v26 = *(void *)(v25 + 112);
            uint64_t v27 = *(void *)(v25 + 120);
            if (v26 != v27)
            {
              do
              {
                if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v134, v26))
                {
                  return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v134);
                }
                a1 = (uint64_t)std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v134, v26, v26);
                v26 += 24;
              }
              while (v26 != v27);
              uint64_t v4 = *v123;
              uint64_t v5 = v123[1];
            }
          }
        }
      }
      else if (v21 == 13)
      {
        goto LABEL_51;
      }
      if (++v18 >= (unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v5 - v4) >> 5))) {
        goto LABEL_63;
      }
    }
  }
  uint64_t v5 = v4;
LABEL_63:
  int v28 = *(void **)(v120 + 56);
  v121 = (void **)(v28 + 3);
  v28[4] = v28[3];
  long long v29 = 0uLL;
  memset(v132, 0, sizeof(v132));
  int v133 = 1065353216;
  if (v5 == v4)
  {
    long long v129 = 0uLL;
    long long v130 = 0uLL;
    int v131 = 1065353216;
    v34 = v122;
LABEL_158:
    unint64_t v86 = 0;
    long long v126 = v29;
    long long v127 = v29;
    int v128 = 1065353216;
    goto LABEL_159;
  }
  unint64_t v30 = 0;
  do
  {
    uint64_t v31 = v4 + 224 * v30;
    uint64_t v33 = *(void *)(v31 + 112);
    uint64_t v32 = *(void *)(v31 + 120);
    if (v33 != v32)
    {
      do
      {
        a1 = (uint64_t)std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v132, v33, v33);
        v33 += 24;
      }
      while (v33 != v32);
      uint64_t v4 = *v123;
      uint64_t v5 = v123[1];
    }
    ++v30;
  }
  while (v30 < 0x6DB6DB6DB6DB6DB7 * ((v5 - v4) >> 5));
  long long v29 = 0uLL;
  long long v129 = 0u;
  long long v130 = 0u;
  int v131 = 1065353216;
  v34 = v122;
  if (v4 == v5) {
    goto LABEL_158;
  }
  do
  {
    uint64_t v36 = *(void *)(v4 + 136);
    uint64_t v35 = *(void *)(v4 + 144);
    while (v36 != v35)
    {
      a1 = (uint64_t)std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v132, v36);
      if (!a1) {
        a1 = (uint64_t)std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)&v129, v36, v36);
      }
      v36 += 24;
    }
    v4 += 224;
  }
  while (v4 != v5);
  uint64_t v38 = *v123;
  uint64_t v37 = v123[1];
  long long v126 = 0u;
  long long v127 = 0u;
  int v128 = 1065353216;
  *(void *)&long long v124 = 0;
  if (v37 == v38)
  {
    unint64_t v86 = 0;
    goto LABEL_159;
  }
  unint64_t v39 = 0;
  while (2)
  {
    uint64_t v40 = v38 + 224 * v39;
    v41 = (void *)(v40 + 48);
    int v42 = *(char *)(v40 + 71);
    if (v42 < 0)
    {
      if (v41[1] == 13)
      {
        v41 = (void *)*v41;
        goto LABEL_83;
      }
    }
    else
    {
      if (v42 != 13) {
        goto LABEL_87;
      }
LABEL_83:
      v43 = (void *)*v41;
      uint64_t v44 = *(void *)((char *)v41 + 5);
      if (v43 == (void *)0x6E6F635F64616F6CLL && v44 == 0x746E6174736E6F63)
      {
        uint64_t v75 = v38 + 224 * v39;
        v78 = *(void **)(v75 + 112);
        v76 = (void *)(v75 + 112);
        v77 = v78;
        if (v78 == (void *)v76[1]
          || (v79 = *v122,
              !std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>((void *)(*v122)[7], v77))|| (*(void *)buf = v77, a1 = (uint64_t)std::__tree<std::__value_type<std::string,std::vector<unsigned long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<unsigned long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<unsigned long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v79 + 6), v77, (long long **)buf), *(void *)(a1 + 56) == *(void *)(a1 + 64))|| *(void *)(v38 + 224 * v39 + 144) != *(void *)(v38 + 224 * v39 + 136)|| 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v76[1] - *v76) >> 3) >= 2)
        {
          int v80 = v124;
          v82 = (char *)v28[4];
          unint64_t v81 = v28[5];
          if ((unint64_t)v82 >= v81)
          {
            v87 = (char *)*v121;
            uint64_t v88 = (v82 - (unsigned char *)*v121) >> 2;
            unint64_t v89 = v88 + 1;
            if ((unint64_t)(v88 + 1) >> 62) {
              std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v90 = v81 - (void)v87;
            if (v90 >> 1 > v89) {
              unint64_t v89 = v90 >> 1;
            }
            BOOL v63 = (unint64_t)v90 >= 0x7FFFFFFFFFFFFFFCLL;
            unint64_t v91 = 0x3FFFFFFFFFFFFFFFLL;
            if (!v63) {
              unint64_t v91 = v89;
            }
            if (v91)
            {
              unint64_t v91 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v91);
              v87 = (char *)v28[3];
              v82 = (char *)v28[4];
            }
            else
            {
              uint64_t v92 = 0;
            }
            v93 = (_DWORD *)(v91 + 4 * v88);
            _DWORD *v93 = v80;
            v83 = v93 + 1;
            while (v82 != v87)
            {
              int v94 = *((_DWORD *)v82 - 1);
              v82 -= 4;
              *--v93 = v94;
            }
            v28[3] = v93;
            v28[4] = v83;
            v28[5] = v91 + 4 * v92;
            if (v87) {
              operator delete(v87);
            }
          }
          else
          {
            *(_DWORD *)v82 = v124;
            v83 = v82 + 4;
          }
          v28[4] = v83;
          a1 = (uint64_t)std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)&v126, (unint64_t *)&v124, &v124);
        }
        goto LABEL_141;
      }
    }
LABEL_87:
    uint64_t v46 = v38 + 224 * v39;
    v48 = *(void **)(v46 + 136);
    v47 = *(void **)(v46 + 144);
    if (v48 == v47) {
      goto LABEL_118;
    }
    while (2)
    {
      a1 = (uint64_t)std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(&v129, (uint64_t)v48);
      if (!a1)
      {
        unint64_t v136 = 0;
        *(void *)buf = v48;
        a1 = (uint64_t)std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(*v34 + 3), v48, (long long **)buf);
        unint64_t v49 = *(void *)(a1 + 56);
        unint64_t v136 = v49;
        uint64_t v50 = *v123 + 224 * v49;
        v51 = (void *)(v50 + 48);
        int v52 = *(char *)(v50 + 71);
        if (v52 < 0)
        {
          if (v51[1] != 13) {
            goto LABEL_89;
          }
          v51 = (void *)*v51;
        }
        else if (v52 != 13)
        {
          goto LABEL_89;
        }
        v53 = (void *)*v51;
        uint64_t v54 = *(void *)((char *)v51 + 5);
        if (v53 == (void *)0x6E6F635F64616F6CLL && v54 == 0x746E6174736E6F63)
        {
          a1 = (uint64_t)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::find<unsigned long>(&v126, v49);
          if (!a1)
          {
            *a3 = 1;
            v57 = (char *)v28[4];
            unint64_t v56 = v28[5];
            if ((unint64_t)v57 >= v56)
            {
              v59 = (char *)*v121;
              uint64_t v60 = (v57 - (unsigned char *)*v121) >> 2;
              unint64_t v61 = v60 + 1;
              if ((unint64_t)(v60 + 1) >> 62) {
                std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v62 = v56 - (void)v59;
              if (v62 >> 1 > v61) {
                unint64_t v61 = v62 >> 1;
              }
              BOOL v63 = (unint64_t)v62 >= 0x7FFFFFFFFFFFFFFCLL;
              unint64_t v64 = 0x3FFFFFFFFFFFFFFFLL;
              if (!v63) {
                unint64_t v64 = v61;
              }
              if (v64)
              {
                unint64_t v64 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v64);
                v59 = (char *)v28[3];
                v57 = (char *)v28[4];
              }
              else
              {
                uint64_t v65 = 0;
              }
              v66 = (_DWORD *)(v64 + 4 * v60);
              _DWORD *v66 = v49;
              v58 = v66 + 1;
              while (v57 != v59)
              {
                int v67 = *((_DWORD *)v57 - 1);
                v57 -= 4;
                *--v66 = v67;
              }
              v28[3] = v66;
              v28[4] = v58;
              v28[5] = v64 + 4 * v65;
              if (v59) {
                operator delete(v59);
              }
            }
            else
            {
              *(_DWORD *)v57 = v49;
              v58 = v57 + 4;
            }
            v28[4] = v58;
            a1 = (uint64_t)std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)&v126, &v136, &v136);
          }
        }
      }
LABEL_89:
      v48 += 3;
      if (v48 != v47) {
        continue;
      }
      break;
    }
    LODWORD(v39) = v124;
LABEL_118:
    v69 = (char *)v28[4];
    unint64_t v68 = v28[5];
    if ((unint64_t)v69 >= v68)
    {
      a1 = (uint64_t)*v121;
      uint64_t v71 = (v69 - (unsigned char *)*v121) >> 2;
      unint64_t v72 = v71 + 1;
      if ((unint64_t)(v71 + 1) >> 62) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v73 = v68 - a1;
      if (v73 >> 1 > v72) {
        unint64_t v72 = v73 >> 1;
      }
      BOOL v63 = (unint64_t)v73 >= 0x7FFFFFFFFFFFFFFCLL;
      unint64_t v74 = 0x3FFFFFFFFFFFFFFFLL;
      if (!v63) {
        unint64_t v74 = v72;
      }
      if (v74)
      {
        unint64_t v74 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v74);
        a1 = v28[3];
        v69 = (char *)v28[4];
      }
      else
      {
        a2 = 0;
      }
      v84 = (_DWORD *)(v74 + 4 * v71);
      _DWORD *v84 = v39;
      v70 = v84 + 1;
      while (v69 != (char *)a1)
      {
        int v85 = *((_DWORD *)v69 - 1);
        v69 -= 4;
        *--v84 = v85;
      }
      v28[3] = v84;
      v28[4] = v70;
      v28[5] = v74 + 4 * (void)a2;
      if (a1) {
        operator delete((void *)a1);
      }
    }
    else
    {
      *(_DWORD *)v69 = v39;
      v70 = v69 + 4;
    }
    v28[4] = v70;
LABEL_141:
    unint64_t v39 = v124 + 1;
    *(void *)&long long v124 = v39;
    uint64_t v38 = *v123;
    unint64_t v86 = 0x6DB6DB6DB6DB6DB7 * ((v123[1] - *v123) >> 5);
    v34 = v122;
    if (v39 < v86) {
      continue;
    }
    break;
  }
LABEL_159:
  if (v86 == (uint64_t)(v28[4] - v28[3]) >> 2)
  {
    v95 = *v34;
    long long v124 = *(_OWORD *)*v34;
    uint64_t v125 = v95[2];
    uint64_t *v95 = 0;
    v95[1] = 0;
    v95[2] = 0;
    v96 = *v34;
    uint64_t v97 = v28[3];
    uint64_t v98 = v28[4];
    uint64_t v99 = v98 - v97;
    v100 = *v34 + 2;
    uint64_t v101 = **v34;
    if (0x6DB6DB6DB6DB6DB7 * ((*v100 - v101) >> 5) < (unint64_t)((v98 - v97) >> 2))
    {
      if ((unint64_t)v99 >= 0x492492492492491) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v102 = v96[1];
      v139 = v100;
      *(void *)buf = std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::kernel_info_t>>(v99 >> 2);
      *(void *)&buf[8] = *(void *)buf + v102 - v101;
      *(void *)&buf[16] = *(void *)&buf[8];
      uint64_t v138 = *(void *)buf + 224 * v103;
      std::vector<Espresso::kernel_info_t>::__swap_out_circular_buffer(v96, buf);
      a1 = std::__split_buffer<Espresso::kernel_info_t>::~__split_buffer((uint64_t)buf);
      uint64_t v97 = v28[3];
      uint64_t v98 = v28[4];
      v34 = v122;
    }
    if (v98 != v97)
    {
      unint64_t v104 = 0;
      do
      {
        v105 = *v34;
        v106 = (const Espresso::kernel_info_t *)(v124 + 224 * *(int *)(v97 + 4 * v104));
        unint64_t v107 = v105[1];
        unint64_t v108 = v105[2];
        if (v107 >= v108)
        {
          uint64_t v110 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v107 - *v105) >> 5);
          unint64_t v111 = v110 + 1;
          if ((unint64_t)(v110 + 1) > 0x124924924924924) {
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v112 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v108 - *v105) >> 5);
          if (2 * v112 > v111) {
            unint64_t v111 = 2 * v112;
          }
          if (v112 >= 0x92492492492492) {
            unint64_t v113 = 0x124924924924924;
          }
          else {
            unint64_t v113 = v111;
          }
          v139 = v105 + 2;
          if (v113) {
            unint64_t v113 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::kernel_info_t>>(v113);
          }
          else {
            uint64_t v114 = 0;
          }
          *(void *)buf = v113;
          *(void *)&buf[8] = v113 + 224 * v110;
          *(void *)&buf[16] = *(void *)&buf[8];
          uint64_t v138 = v113 + 224 * v114;
          Espresso::kernel_info_t::kernel_info_t(*(std::string **)&buf[8], v106);
          *(void *)&buf[16] += 224;
          std::vector<Espresso::kernel_info_t>::__swap_out_circular_buffer(v105, buf);
          uint64_t v109 = v105[1];
          a1 = std::__split_buffer<Espresso::kernel_info_t>::~__split_buffer((uint64_t)buf);
        }
        else
        {
          a1 = (uint64_t)Espresso::kernel_info_t::kernel_info_t((std::string *)v105[1], v106);
          uint64_t v109 = v107 + 224;
          v105[1] = v107 + 224;
        }
        v105[1] = v109;
        ++v104;
        uint64_t v97 = v28[3];
        v34 = v122;
      }
      while (v104 < (v28[4] - v97) >> 2);
    }
    Espresso::cpu_context_transfer_algo_t::assemble_producers_and_consumers(a1, v34);
    *(void *)buf = &v124;
    std::vector<Espresso::kernel_info_t>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  }
  else
  {
    v115 = Espresso::espresso_os_log_subsystem((Espresso *)a1, (const char *)a2);
    if (os_log_type_enabled(v115, OS_LOG_TYPE_ERROR))
    {
      uint64_t v117 = (uint64_t)(v28[4] - v28[3]) >> 2;
      uint64_t v118 = 0x6DB6DB6DB6DB6DB7 * ((v123[1] - *v123) >> 5);
      *(_DWORD *)buf = 134218240;
      *(void *)&buf[4] = v117;
      *(_WORD *)&buf[12] = 2048;
      *(void *)&buf[14] = v118;
      _os_log_error_impl(&dword_1920CB000, v115, OS_LOG_TYPE_ERROR, "reorder_load_constants %zu != %zu", buf, 0x16u);
    }

    v28[4] = v28[3];
    *a3 = 0;
  }
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&v126);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v129);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v132);
  return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v134);
}

void sub_1920D41E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&a17);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&a23);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v29 - 192);
  _Unwind_Resume(a1);
}

uint64_t *std::vector<Espresso::kernel_info_t>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  if (v2 != *result)
  {
    uint64_t v5 = 0;
    do
    {
      uint64_t v6 = v2 + v5;
      long long v7 = *(_OWORD *)(v2 + v5 - 224);
      uint64_t v8 = v4 + v5;
      *(void *)(v8 - 208) = *(void *)(v2 + v5 - 208);
      *(_OWORD *)(v8 - 224) = v7;
      *(void *)(v6 - 216) = 0;
      *(void *)(v6 - 208) = 0;
      *(void *)(v6 - 224) = 0;
      long long v9 = *(_OWORD *)(v2 + v5 - 200);
      *(void *)(v8 - 184) = *(void *)(v2 + v5 - 184);
      *(_OWORD *)(v8 - 200) = v9;
      *(void *)(v6 - 192) = 0;
      *(void *)(v6 - 184) = 0;
      *(void *)(v6 - 200) = 0;
      long long v10 = *(_OWORD *)(v2 + v5 - 176);
      *(void *)(v8 - 160) = *(void *)(v2 + v5 - 160);
      *(_OWORD *)(v8 - 176) = v10;
      *(void *)(v6 - 168) = 0;
      *(void *)(v6 - 160) = 0;
      *(void *)(v6 - 176) = 0;
      uint64_t v11 = *(void *)(v2 + v5 - 152);
      *(_DWORD *)(v8 - 144) = *(_DWORD *)(v2 + v5 - 144);
      *(void *)(v8 - 152) = v11;
      *(_OWORD *)(v8 - 136) = *(_OWORD *)(v2 + v5 - 136);
      *(void *)(v6 - 136) = 0;
      *(void *)(v6 - 128) = 0;
      LOWORD(v11) = *(_WORD *)(v2 + v5 - 120);
      *(unsigned char *)(v8 - 118) = *(unsigned char *)(v2 + v5 - 118);
      *(_WORD *)(v8 - 120) = v11;
      *(void *)(v8 - 104) = 0;
      *(void *)(v8 - 96) = 0;
      *(void *)(v8 - 112) = 0;
      *(_OWORD *)(v8 - 112) = *(_OWORD *)(v2 + v5 - 112);
      *(void *)(v8 - 96) = *(void *)(v2 + v5 - 96);
      *(void *)(v6 - 112) = 0;
      *(void *)(v6 - 104) = 0;
      *(void *)(v6 - 96) = 0;
      *(void *)(v8 - 88) = 0;
      *(void *)(v8 - 80) = 0;
      *(void *)(v8 - 72) = 0;
      *(_OWORD *)(v8 - 88) = *(_OWORD *)(v2 + v5 - 88);
      *(void *)(v8 - 72) = *(void *)(v2 + v5 - 72);
      *(void *)(v6 - 88) = 0;
      *(void *)(v6 - 80) = 0;
      *(void *)(v6 - 72) = 0;
      *(void *)(v8 - 64) = 0;
      *(void *)(v8 - 56) = 0;
      *(void *)(v8 - 48) = 0;
      *(_OWORD *)(v8 - 64) = *(_OWORD *)(v2 + v5 - 64);
      *(void *)(v8 - 48) = *(void *)(v2 + v5 - 48);
      *(void *)(v6 - 64) = 0;
      *(void *)(v6 - 56) = 0;
      *(void *)(v6 - 48) = 0;
      *(void *)(v8 - 40) = 0;
      *(void *)(v8 - 32) = 0;
      *(void *)(v8 - 24) = 0;
      *(_OWORD *)(v8 - 40) = *(_OWORD *)(v2 + v5 - 40);
      *(void *)(v8 - 24) = *(void *)(v2 + v5 - 24);
      *(void *)(v6 - 40) = 0;
      *(void *)(v6 - 32) = 0;
      long long v12 = *(_OWORD *)(v2 + v5 - 16);
      *(void *)(v6 - 24) = 0;
      *(_OWORD *)(v8 - 16) = v12;
      *(void *)(v6 - 16) = 0;
      *(void *)(v6 - 8) = 0;
      v5 -= 224;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  uint64_t v13 = *result;
  uint64_t *result = v4;
  a2[1] = v13;
  uint64_t v14 = result[1];
  result[1] = a2[2];
  a2[2] = v14;
  uint64_t v15 = result[2];
  result[2] = a2[3];
  a2[3] = v15;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::kernel_info_t>>(unint64_t a1)
{
  if (a1 >= 0x124924924924925) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(224 * a1);
}

uint64_t std::__split_buffer<Espresso::kernel_info_t>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 224;
    Espresso::kernel_info_t::~kernel_info_t((Espresso::kernel_info_t *)(i - 224));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__shared_ptr_emplace<Espresso::net_info_ir_t>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 104);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::destroy(*(void **)(a1 + 80));
  std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::destroy(*(char **)(a1 + 56));
  uint64_t v3 = (void **)(a1 + 24);
  std::vector<Espresso::kernel_info_t>::__destroy_vector::operator()[abi:ne180100](&v3);
}

void std::vector<Espresso::kernel_info_t>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = v2;
    if (v4 != v2)
    {
      do
        Espresso::kernel_info_t::~kernel_info_t((Espresso::kernel_info_t *)(v4 - 224));
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t Espresso::net_compiler_segment_based::identify_segment_input_output(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  memset(v47, 0, sizeof(v47));
  int v48 = 1065353216;
  memset(v45, 0, sizeof(v45));
  int v46 = 1065353216;
  long long v42 = 0u;
  long long v43 = 0u;
  int v44 = 1065353216;
  unint64_t v5 = a3[1];
  unint64_t v41 = *a3;
  if (v41 < v5)
  {
    do
    {
      uint64_t v6 = *(void *)a2 + 96;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v41;
      long long v7 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v6, &v41, (uint64_t)&std::piecewise_construct, (uint64_t **)&__p);
      uint64_t v8 = v7[3];
      uint64_t v9 = v7[4];
      while (v8 != v9)
      {
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v47, v8, v8);
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)&v42, v8, v8);
        v8 += 24;
      }
      uint64_t v10 = *(void *)a2 + 56;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v41;
      uint64_t v11 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v10, &v41, (uint64_t)&std::piecewise_construct, (uint64_t **)&__p);
      uint64_t v12 = v11[3];
      uint64_t v13 = v11[4];
      while (v12 != v13)
      {
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v45, v12, v12);
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)&v42, v12, v12);
        v12 += 24;
      }
      ++v41;
    }
    while (v41 < a3[1]);
    uint64_t v14 = (void *)v43;
    if ((void)v43)
    {
      do
      {
        if (!std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v47, (uint64_t)(v14 + 2)))std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)(a3 + 2), (uint64_t)(v14 + 2), (uint64_t)(v14 + 2)); {
        uint64_t v14 = (void *)*v14;
        }
      }
      while (v14);
      uint64_t v15 = (uint64_t *)v43;
      if ((void)v43)
      {
        while (1)
        {
          if (!std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v45, (uint64_t)(v15 + 2))&& !std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(a3 + 2, (uint64_t)(v15 + 2)))
          {
            std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)(a3 + 7), (uint64_t)(v15 + 2), (uint64_t)(v15 + 2));
          }
          unint64_t v16 = a3[1];
LABEL_18:
          unint64_t v41 = v16;
          int v17 = *(void **)a2;
          if (v16 < (uint64_t)(*(void *)(*(void *)a2 + 40) - *(void *)(*(void *)a2 + 32)) >> 4) {
            break;
          }
          uint64_t v15 = (uint64_t *)*v15;
          if (!v15) {
            goto LABEL_44;
          }
        }
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v41;
        uint64_t v18 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)(v17 + 7), &v41, (uint64_t)&std::piecewise_construct, (uint64_t **)&__p);
        uint64_t v19 = v18[3];
        uint64_t v20 = v18[4];
        while (1)
        {
          if (v19 == v20)
          {
            unint64_t v16 = v41 + 1;
            goto LABEL_18;
          }
          uint64_t v21 = *(unsigned __int8 *)(v19 + 23);
          if ((v21 & 0x80u) == 0) {
            uint64_t v22 = *(unsigned __int8 *)(v19 + 23);
          }
          else {
            uint64_t v22 = *(void *)(v19 + 8);
          }
          uint64_t v23 = *((unsigned __int8 *)v15 + 39);
          int v24 = (char)v23;
          if ((v23 & 0x80u) != 0) {
            uint64_t v23 = v15[3];
          }
          if (v22 == v23)
          {
            if (v24 >= 0) {
              uint64_t v25 = (unsigned __int8 *)(v15 + 2);
            }
            else {
              uint64_t v25 = (unsigned __int8 *)v15[2];
            }
            if ((v21 & 0x80) != 0)
            {
              if (memcmp(*(const void **)v19, v25, *(void *)(v19 + 8))) {
                goto LABEL_39;
              }
LABEL_37:
              if (!std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(a3 + 2, (uint64_t)(v15 + 2)))std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)(a3 + 7), (uint64_t)(v15 + 2), (uint64_t)(v15 + 2)); {
              goto LABEL_39;
              }
            }
            if (!*(unsigned char *)(v19 + 23)) {
              goto LABEL_37;
            }
            uint64_t v26 = 0;
            while (*(unsigned __int8 *)(v19 + v26) == v25[v26])
            {
              if (v21 == ++v26) {
                goto LABEL_37;
              }
            }
          }
LABEL_39:
          v19 += 24;
        }
      }
    }
  }
  int v17 = *(void **)a2;
LABEL_44:
  uint64_t v27 = (void *)v17[35];
  int v28 = v17 + 36;
  if (v27 != v17 + 36)
  {
    do
    {
      if (*((char *)v27 + 55) < 0) {
        std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)v27[4], v27[5]);
      }
      else {
        std::string __p = *(std::string *)(v27 + 4);
      }
      char v40 = *((unsigned char *)v27 + 56);
      if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(&v42, (uint64_t)&__p))
      {
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)(a3 + 2), (uint64_t)&__p, (uint64_t)&__p);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      uint64_t v29 = (void *)v27[1];
      if (v29)
      {
        do
        {
          unint64_t v30 = v29;
          uint64_t v29 = (void *)*v29;
        }
        while (v29);
      }
      else
      {
        do
        {
          unint64_t v30 = (void *)v27[2];
          BOOL v31 = *v30 == (void)v27;
          uint64_t v27 = v30;
        }
        while (!v31);
      }
      uint64_t v27 = v30;
    }
    while (v30 != v28);
    int v17 = *(void **)a2;
  }
  uint64_t v32 = (void *)v17[38];
  uint64_t v33 = v17 + 39;
  if (v32 != v17 + 39)
  {
    v34 = a3 + 2;
    uint64_t v35 = (uint64_t)(a3 + 7);
    do
    {
      if (*((char *)v32 + 55) < 0) {
        std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)v32[4], v32[5]);
      }
      else {
        std::string __p = *(std::string *)(v32 + 4);
      }
      char v40 = *((unsigned char *)v32 + 56);
      if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(&v42, (uint64_t)&__p)&& !std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v34, (uint64_t)&__p))
      {
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(v35, (uint64_t)&__p, (uint64_t)&__p);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      uint64_t v36 = (void *)v32[1];
      if (v36)
      {
        do
        {
          uint64_t v37 = v36;
          uint64_t v36 = (void *)*v36;
        }
        while (v36);
      }
      else
      {
        do
        {
          uint64_t v37 = (void *)v32[2];
          BOOL v31 = *v37 == (void)v32;
          uint64_t v32 = v37;
        }
        while (!v31);
      }
      uint64_t v32 = v37;
    }
    while (v37 != v33);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v42);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v45);
  return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v47);
}

void sub_1920D49D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
}

uint64_t Espresso::net::_tag_inputs_and_outputs(Espresso::net *this)
{
  uint64_t v3 = *((void *)this + 4);
  uint64_t v2 = *((void *)this + 5);
  if (v2 != v3)
  {
    uint64_t v4 = 0;
    unint64_t v5 = 0;
    do
    {
      uint64_t v6 = *(void *)(*(void *)(v3 + v4) + 64);
      if (v6)
      {
        std::string::operator=((std::string *)(v6 + 104), (const std::string *)((char *)this + 424));
        int v7 = *((_DWORD *)this + 124);
        uint64_t v8 = *(void *)(*(void *)(v3 + v4) + 64);
        *(_DWORD *)(v8 + 128) = v5;
        *(_DWORD *)(v8 + 132) = v7;
        uint64_t v3 = *((void *)this + 4);
        uint64_t v2 = *((void *)this + 5);
      }
      ++v5;
      v4 += 16;
    }
    while (v5 < (v2 - v3) >> 4);
  }
  uint64_t v9 = (void *)((char *)this + 240);
  uint64_t v10 = (char *)this + 232;
  std::__tree<std::string>::destroy((uint64_t)this + 232, *((char **)this + 30));
  *((void *)this + 29) = (char *)this + 240;
  *((void *)this + 30) = 0;
  *((void *)this + 31) = 0;
  unint64_t v91 = (uint64_t **)((char *)this + 256);
  std::__tree<std::string>::destroy((uint64_t)this + 256, *((char **)this + 33));
  *((void *)this + 33) = 0;
  *((void *)this + 34) = 0;
  uint64_t v90 = (void **)((char *)this + 264);
  *((void *)this + 32) = (char *)this + 264;
  unint64_t v89 = (char **)((char *)this + 664);
  std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)this + 83);
  uint64_t v88 = (char **)((char *)this + 640);
  std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)this + 80);
  uint64_t v92 = (char **)((char *)this + 688);
  std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)this + 86);
  memset(v103, 0, sizeof(v103));
  int v104 = 1065353216;
  long long v100 = 0u;
  long long v101 = 0u;
  int v102 = 1065353216;
  memset(v98, 0, sizeof(v98));
  int v99 = 1065353216;
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__rehash<true>((uint64_t)v103, (unint64_t)(float)*((unint64_t *)this + 25));
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__rehash<true>((uint64_t)&v100, vcvtps_u32_f32((float)*((unint64_t *)this + 25) / 1.0));
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__rehash<true>((uint64_t)v98, vcvtps_u32_f32((float)*((unint64_t *)this + 25) / 1.0));
  unint64_t v94 = 0;
  uint64_t v11 = *((void *)this + 5);
  if (v11 == *((void *)this + 4))
  {
    uint64_t v19 = *((void *)this + 5);
  }
  else
  {
    do
    {
      __s1.__r_.__value_.__r.__words[0] = (std::string::size_type)&v94;
      uint64_t v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)this + 56, &v94, (uint64_t)&std::piecewise_construct, (uint64_t **)&__s1);
      __s1.__r_.__value_.__r.__words[0] = (std::string::size_type)&v94;
      uint64_t v13 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)this + 96, &v94, (uint64_t)&std::piecewise_construct, (uint64_t **)&__s1);
      uint64_t v14 = v12[3];
      uint64_t v15 = v12[4];
      while (v14 != v15)
      {
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v98, v14, v14);
        v14 += 24;
      }
      uint64_t v16 = v13[3];
      uint64_t v17 = v13[4];
      while (v16 != v17)
      {
        if (!std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::find<std::string>(&v100, v16))
        {
          uint64_t v18 = v94;
          __s1.__r_.__value_.__r.__words[0] = v16;
          std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v100, v16, (uint64_t)&std::piecewise_construct, (long long **)&__s1)[5] = v18;
        }
        v16 += 24;
      }
      ++v94;
      uint64_t v11 = *((void *)this + 4);
      uint64_t v19 = *((void *)this + 5);
    }
    while (v94 < (v19 - v11) >> 4);
  }
  uint64_t v93 = *((void *)this + 121);
  uint64_t v20 = (std::__shared_weak_count *)*((void *)this + 122);
  if (v20)
  {
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v11 = *((void *)this + 4);
    uint64_t v19 = *((void *)this + 5);
  }
  v87 = v20;
  unint64_t v97 = 0;
  if (v19 != v11)
  {
    unint64_t v21 = 0;
    while (1)
    {
      uint64_t v22 = (uint64_t *)(v11 + 16 * v21);
      uint64_t v23 = *v22;
      int v24 = (std::__shared_weak_count *)v22[1];
      if (v24) {
        atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      __s1.__r_.__value_.__r.__words[0] = (std::string::size_type)&v97;
      uint64_t v25 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)this + 56, &v97, (uint64_t)&std::piecewise_construct, (uint64_t **)&__s1);
      __s1.__r_.__value_.__r.__words[0] = (std::string::size_type)&v97;
      uint64_t v26 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)this + 96, &v97, (uint64_t)&std::piecewise_construct, (uint64_t **)&__s1);
      uint64_t v27 = v25[3];
      uint64_t v28 = v25[4];
      uint64_t v29 = v24;
      while (v27 != v28)
      {
        if (*(char *)(v27 + 23) < 0)
        {
          if (!*(void *)(v27 + 8)) {
            goto LABEL_75;
          }
        }
        else if (!*(unsigned char *)(v27 + 23))
        {
          goto LABEL_75;
        }
        if (!std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v103, v27))
        {
          unint64_t v30 = (std::string *)*((void *)this + 87);
          if ((unint64_t)v30 >= *((void *)this + 88))
          {
            BOOL v31 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v92, v27);
          }
          else
          {
            std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v92, (long long *)v27);
            BOOL v31 = v30 + 1;
          }
          *((void *)this + 87) = v31;
          std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v103, v27, v27);
        }
        BOOL v32 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*((void **)this + 36), (void *)v27)|| (v33 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::find<std::string>(&v100, v27)) == 0|| v33[5] >= v97;
        if (!v93)
        {
          if (v32) {
            goto LABEL_69;
          }
          goto LABEL_75;
        }
        Espresso::map_const_get<std::unordered_map<std::string,std::string>>(&__s1, (void *)(v93 + 184), v27, v27);
        if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = __s1.__r_.__value_.__l.__size_;
        }
        uint64_t v35 = *(unsigned __int8 *)(v27 + 23);
        int v36 = (char)v35;
        if ((v35 & 0x80u) != 0) {
          uint64_t v35 = *(void *)(v27 + 8);
        }
        if (size == v35)
        {
          if (v36 >= 0) {
            uint64_t v37 = (unsigned __int8 *)v27;
          }
          else {
            uint64_t v37 = *(unsigned __int8 **)v27;
          }
          if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
          {
            std::string::size_type v48 = __s1.__r_.__value_.__r.__words[0];
            if (memcmp(__s1.__r_.__value_.__l.__data_, v37, __s1.__r_.__value_.__l.__size_)) {
              LOBYTE(v32) = 0;
            }
            v47 = (void *)v48;
            uint64_t v29 = v24;
            goto LABEL_68;
          }
          if (!*((unsigned char *)&__s1.__r_.__value_.__s + 23)) {
            goto LABEL_62;
          }
          uint64_t v38 = HIBYTE(__s1.__r_.__value_.__r.__words[2]) - 1;
          p_s1 = &__s1;
          do
          {
            int v41 = p_s1->__r_.__value_.__s.__data_[0];
            p_s1 = (std::string *)((char *)p_s1 + 1);
            int v40 = v41;
            int v43 = *v37++;
            int v42 = v43;
            BOOL v45 = v38-- != 0;
            BOOL v46 = v40 == v42;
          }
          while (v46 && v45);
        }
        else
        {
          BOOL v46 = 0;
        }
        LOBYTE(v32) = v32 && v46;
        if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) == 0)
        {
LABEL_62:
          if (v32) {
            goto LABEL_69;
          }
          goto LABEL_75;
        }
        v47 = (void *)__s1.__r_.__value_.__r.__words[0];
LABEL_68:
        operator delete(v47);
        if (v32)
        {
LABEL_69:
          if (!std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>((void *)*v9, (void *)v27))
          {
            unint64_t v49 = (std::string *)*((void *)this + 81);
            if ((unint64_t)v49 >= *((void *)this + 82))
            {
              uint64_t v50 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v88, v27);
            }
            else
            {
              std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v88, (long long *)v27);
              uint64_t v50 = v49 + 1;
            }
            *((void *)this + 81) = v50;
          }
          __s1.__r_.__value_.__r.__words[0] = v27;
          std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this + 29, (void *)v27, (long long **)&__s1)[56] = 1;
        }
LABEL_75:
        v27 += 24;
      }
      uint64_t v51 = v26[3];
      uint64_t v52 = v26[4];
      if (v51 != v52) {
        break;
      }
LABEL_113:
      if (v29) {
        nitro::nitro_function::nitro_function(v29);
      }
      unint64_t v21 = v97 + 1;
      unint64_t v97 = v21;
      uint64_t v11 = *((void *)this + 4);
      if (v21 >= (*((void *)this + 5) - v11) >> 4) {
        goto LABEL_116;
      }
    }
    int v53 = 0;
    while (*(char *)(v51 + 23) < 0)
    {
      if (*(void *)(v51 + 8)) {
        goto LABEL_82;
      }
LABEL_112:
      v51 += 24;
      if (v51 == v52) {
        goto LABEL_113;
      }
    }
    if (!*(unsigned char *)(v51 + 23)) {
      goto LABEL_112;
    }
LABEL_82:
    if (!std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v103, v51))
    {
      uint64_t v54 = (std::string *)*((void *)this + 87);
      if ((unint64_t)v54 >= *((void *)this + 88))
      {
        v55 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v92, v51);
      }
      else
      {
        std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v92, (long long *)v51);
        v55 = v54 + 1;
      }
      *((void *)this + 87) = v55;
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v103, v51, v51);
    }
    if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*((void **)this + 39), (void *)v51))
    {
      uint64_t v56 = *(void *)(v23 + 64);
      if (v56)
      {
        BOOL v57 = 1;
LABEL_91:
        (*(void (**)(unint64_t *__return_ptr))(*(void *)v56 + 24))(&v94);
        if (v94 && *(unsigned char *)(v94 + 64)) {
          BOOL v57 = 0;
        }
        uint64_t v59 = *(void *)(v23 + 64);
        std::string::basic_string[abi:ne180100]<0>(&__s1, "is_output");
        uint64_t v60 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>((void *)(v59 + 240), (unsigned __int8 *)&__s1);
        unint64_t v61 = v60;
        if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__s1.__r_.__value_.__l.__data_);
          if (v61)
          {
LABEL_96:
            int v62 = *((_DWORD *)v61 + 10);
            uint64_t v29 = v24;
            if (v62)
            {
              __s1.__r_.__value_.__r.__words[0] = v51;
              BOOL v57 = 1;
              std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this + 38, (void *)v51, (long long **)&__s1)[56] = 1;
            }
LABEL_100:
            if (v95) {
              nitro::nitro_function::nitro_function(v95);
            }
            if (!v57) {
              goto LABEL_111;
            }
            goto LABEL_103;
          }
        }
        else if (v60)
        {
          goto LABEL_96;
        }
        uint64_t v29 = v24;
        goto LABEL_100;
      }
    }
    else
    {
      v58 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v98, v51);
      BOOL v57 = v58 == 0;
      uint64_t v56 = *(void *)(v23 + 64);
      if (v56) {
        goto LABEL_91;
      }
      if (v58)
      {
LABEL_111:
        ++v53;
        goto LABEL_112;
      }
    }
LABEL_103:
    if (!std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*v90, (void *)v51))
    {
      BOOL v63 = (std::string *)*((void *)this + 84);
      if ((unint64_t)v63 >= *((void *)this + 85))
      {
        unint64_t v64 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v89, v51);
      }
      else
      {
        std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v89, (long long *)v51);
        unint64_t v64 = v63 + 1;
      }
      *((void *)this + 84) = v64;
    }
    __s1.__r_.__value_.__r.__words[0] = v51;
    std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v91, (void *)v51, (long long **)&__s1)[56] = 1;
    goto LABEL_111;
  }
LABEL_116:
  uint64_t v65 = (long long *)*((void *)this + 35);
  if (v65 != (long long *)((char *)this + 288))
  {
    do
    {
      if (!std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>((void *)*v9, (void *)v65 + 4)|| (__s1.__r_.__value_.__r.__words[0] = (std::string::size_type)(v65 + 2), !std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this + 29, (void *)v65 + 4, (long long **)&__s1)[56]))
      {
        if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v98, (uint64_t)(v65 + 2))|| std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::find<std::string>(&v100, (uint64_t)(v65 + 2)))
        {
          __s1.__r_.__value_.__r.__words[0] = (std::string::size_type)(v65 + 2);
          std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this + 29, (void *)v65 + 4, (long long **)&__s1)[56] = 1;
          v66 = (std::string *)*((void *)this + 81);
          if ((unint64_t)v66 >= *((void *)this + 82))
          {
            int v67 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v88, (uint64_t)(v65 + 2));
          }
          else
          {
            std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v88, v65 + 2);
            int v67 = v66 + 1;
          }
          *((void *)this + 81) = v67;
        }
      }
      unint64_t v68 = (Espresso::net *)*((void *)v65 + 1);
      if (v68)
      {
        do
        {
          v69 = v68;
          unint64_t v68 = *(Espresso::net **)v68;
        }
        while (v68);
      }
      else
      {
        do
        {
          v69 = (Espresso::net *)*((void *)v65 + 2);
          BOOL v70 = *(void *)v69 == (void)v65;
          uint64_t v65 = (long long *)v69;
        }
        while (!v70);
      }
      uint64_t v65 = (long long *)v69;
    }
    while (v69 != (Espresso::net *)((char *)this + 288));
  }
  uint64_t v71 = (long long *)*((void *)this + 38);
  if (v71 != (long long *)((char *)this + 312))
  {
    do
    {
      if (!std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*v90, (void *)v71 + 4)|| (__s1.__r_.__value_.__r.__words[0] = (std::string::size_type)(v71 + 2), !std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v91, (void *)v71 + 4, (long long **)&__s1)[56]))
      {
        if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v98, (uint64_t)(v71 + 2))|| std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::find<std::string>(&v100, (uint64_t)(v71 + 2)))
        {
          __s1.__r_.__value_.__r.__words[0] = (std::string::size_type)(v71 + 2);
          std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v91, (void *)v71 + 4, (long long **)&__s1)[56] = 1;
          unint64_t v72 = (std::string *)*((void *)this + 84);
          if ((unint64_t)v72 >= *((void *)this + 85))
          {
            uint64_t v73 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v89, (uint64_t)(v71 + 2));
          }
          else
          {
            std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v89, v71 + 2);
            uint64_t v73 = v72 + 1;
          }
          *((void *)this + 84) = v73;
        }
      }
      unint64_t v74 = (Espresso::net *)*((void *)v71 + 1);
      if (v74)
      {
        do
        {
          uint64_t v75 = v74;
          unint64_t v74 = *(Espresso::net **)v74;
        }
        while (v74);
      }
      else
      {
        do
        {
          uint64_t v75 = (Espresso::net *)*((void *)v71 + 2);
          BOOL v70 = *(void *)v75 == (void)v71;
          uint64_t v71 = (long long *)v75;
        }
        while (!v70);
      }
      uint64_t v71 = (long long *)v75;
    }
    while (v75 != (Espresso::net *)((char *)this + 312));
  }
  v76 = (void *)*((void *)this + 97);
  v77 = (char *)this + 784;
  if (v76 != (void *)((char *)this + 784))
  {
    do
    {
      v78 = (void *)v76[10];
      if (v78 != v76 + 11)
      {
        do
        {
          v79 = v78 + 4;
          if (v9 == std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>((uint64_t)v10, v78 + 4))
          {
            unint64_t v86 = v76 + 4;
            if (*((char *)v76 + 55) < 0) {
              unint64_t v86 = (void *)*v86;
            }
            if (*((char *)v78 + 55) < 0) {
              v79 = (void *)*v79;
            }
            Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,unsigned long>("Configuration: %s, the blob %s is not an input", (uint64_t)v86, (uint64_t)v79);
          }
          int v80 = (void *)v78[1];
          if (v80)
          {
            do
            {
              unint64_t v81 = v80;
              int v80 = (void *)*v80;
            }
            while (v80);
          }
          else
          {
            do
            {
              unint64_t v81 = (void *)v78[2];
              BOOL v70 = *v81 == (void)v78;
              v78 = v81;
            }
            while (!v70);
          }
          v78 = v81;
        }
        while (v81 != v76 + 11);
      }
      v82 = (char *)v76[1];
      if (v82)
      {
        do
        {
          v83 = v82;
          v82 = *(char **)v82;
        }
        while (v82);
      }
      else
      {
        do
        {
          v83 = (char *)v76[2];
          BOOL v70 = *(void *)v83 == (void)v76;
          v76 = v83;
        }
        while (!v70);
      }
      v76 = v83;
    }
    while (v83 != v77);
  }
  if (v87) {
    nitro::nitro_function::nitro_function(v87);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v98);
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__deallocate_node((void **)v101);
  v84 = (void *)v100;
  *(void *)&long long v100 = 0;
  if (v84) {
    operator delete(v84);
  }
  return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v103);
}

void sub_1920D544C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,char a30)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::~__hash_table(v30 - 176);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v30 - 128);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    uint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      for (uint64_t i = *v10; i; uint64_t i = (void *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7) {
            return i;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x30uLL);
  void *i = 0;
  i[1] = v7;
  uint64_t v13 = **a4;
  i[4] = 0;
  i[5] = 0;
  i[2] = v13;
  i[3] = 0;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    BOOL v16 = 1;
    if (v8 >= 3) {
      BOOL v16 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v8);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__rehash<true>(a1, v19);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v20 = *(void *)a1;
  unint64_t v21 = *(void **)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    void *i = *v21;
LABEL_38:
    *unint64_t v21 = i;
    goto LABEL_39;
  }
  void *i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v20 + 8 * v4) = a1 + 16;
  if (*i)
  {
    unint64_t v22 = *(void *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8) {
        v22 %= v8;
      }
    }
    else
    {
      v22 &= v8 - 1;
    }
    unint64_t v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_1920D5724(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,std::vector<std::string>>,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(void *a1, uint64_t a2)
{
  uint64_t v2 = (unsigned char *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v5 = v4;
  }
  unint64_t v6 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v25, (uint64_t *)a2, v5);
  int8x8_t v7 = (int8x8_t)a1[1];
  if (!*(void *)&v7) {
    return 0;
  }
  unint64_t v8 = v6;
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v10 = v6;
    if (v6 >= *(void *)&v7) {
      unint64_t v10 = v6 % *(void *)&v7;
    }
  }
  else
  {
    unint64_t v10 = (*(void *)&v7 - 1) & v6;
  }
  unint64_t v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    uint64_t v13 = *v12;
    if (*v12)
    {
      char v14 = v2[23];
      if (v14 >= 0) {
        uint64_t v15 = v2[23];
      }
      else {
        uint64_t v15 = *((void *)v2 + 1);
      }
      if (v14 < 0) {
        uint64_t v2 = *(unsigned char **)v2;
      }
      if (v9.u32[0] < 2uLL)
      {
        uint64_t v16 = *(void *)&v7 - 1;
        while (1)
        {
          uint64_t v21 = v13[1];
          if (v8 == v21)
          {
            uint64_t v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0) {
              uint64_t v23 = *((unsigned __int8 *)v13 + 39);
            }
            else {
              uint64_t v23 = v13[3];
            }
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3])) {
                  return v13;
                }
              }
              else
              {
                if (!*((unsigned char *)v13 + 39)) {
                  return v13;
                }
                uint64_t v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24) {
                    return v13;
                  }
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          uint64_t result = 0;
          uint64_t v13 = (uint64_t *)*v13;
          if (!v13) {
            return result;
          }
        }
      }
      while (1)
      {
        unint64_t v17 = v13[1];
        if (v8 == v17)
        {
          uint64_t v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0) {
            uint64_t v19 = *((unsigned __int8 *)v13 + 39);
          }
          else {
            uint64_t v19 = v13[3];
          }
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3])) {
                return v13;
              }
            }
            else
            {
              if (!*((unsigned char *)v13 + 39)) {
                return v13;
              }
              uint64_t v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20) {
                  return v13;
                }
              }
            }
          }
        }
        else
        {
          if (v17 >= *(void *)&v7) {
            v17 %= *(void *)&v7;
          }
          if (v17 != v10) {
            return 0;
          }
        }
        uint64_t result = 0;
        uint64_t v13 = (uint64_t *)*v13;
        if (!v13) {
          return result;
        }
      }
    }
  }
  return 0;
}

{
  unsigned char *v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t *result;
  uint64_t **v12;
  uint64_t *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  uint64_t v2 = (unsigned char *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v5 = v4;
  }
  unint64_t v6 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v25, (uint64_t *)a2, v5);
  int8x8_t v7 = (int8x8_t)a1[1];
  if (!*(void *)&v7) {
    return 0;
  }
  unint64_t v8 = v6;
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v10 = v6;
    if (v6 >= *(void *)&v7) {
      unint64_t v10 = v6 % *(void *)&v7;
    }
  }
  else
  {
    unint64_t v10 = (*(void *)&v7 - 1) & v6;
  }
  unint64_t v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    uint64_t v13 = *v12;
    if (*v12)
    {
      char v14 = v2[23];
      if (v14 >= 0) {
        uint64_t v15 = v2[23];
      }
      else {
        uint64_t v15 = *((void *)v2 + 1);
      }
      if (v14 < 0) {
        uint64_t v2 = *(unsigned char **)v2;
      }
      if (v9.u32[0] < 2uLL)
      {
        uint64_t v16 = *(void *)&v7 - 1;
        while (1)
        {
          uint64_t v21 = v13[1];
          if (v21 == v8)
          {
            uint64_t v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0) {
              uint64_t v23 = *((unsigned __int8 *)v13 + 39);
            }
            else {
              uint64_t v23 = v13[3];
            }
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3])) {
                  return v13;
                }
              }
              else
              {
                if (!*((unsigned char *)v13 + 39)) {
                  return v13;
                }
                uint64_t v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24) {
                    return v13;
                  }
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          uint64_t result = 0;
          uint64_t v13 = (uint64_t *)*v13;
          if (!v13) {
            return result;
          }
        }
      }
      while (1)
      {
        unint64_t v17 = v13[1];
        if (v17 == v8)
        {
          uint64_t v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0) {
            uint64_t v19 = *((unsigned __int8 *)v13 + 39);
          }
          else {
            uint64_t v19 = v13[3];
          }
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3])) {
                return v13;
              }
            }
            else
            {
              if (!*((unsigned char *)v13 + 39)) {
                return v13;
              }
              uint64_t v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20) {
                  return v13;
                }
              }
            }
          }
        }
        else
        {
          if (v17 >= *(void *)&v7) {
            v17 %= *(void *)&v7;
          }
          if (v17 != v10) {
            return 0;
          }
        }
        uint64_t result = 0;
        uint64_t v13 = (uint64_t *)*v13;
        if (!v13) {
          return result;
        }
      }
    }
  }
  return 0;
}

uint64_t *std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = (unsigned char *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v8 = v7;
  }
  unint64_t v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v42, (uint64_t *)a2, v8);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v3 = v9;
      if (v9 >= v11) {
        unint64_t v3 = v9 % v11;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v9;
    }
    uint64_t v13 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      char v14 = *v13;
      if (*v13)
      {
        char v15 = v5[23];
        if (v15 >= 0) {
          uint64_t v16 = v5[23];
        }
        else {
          uint64_t v16 = *((void *)v5 + 1);
        }
        if (v15 < 0) {
          unint64_t v5 = *(unsigned char **)v5;
        }
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v21 = v14[1];
            if (v21 == v10)
            {
              uint64_t v22 = *((unsigned __int8 *)v14 + 39);
              if ((v22 & 0x80u) == 0) {
                uint64_t v23 = *((unsigned __int8 *)v14 + 39);
              }
              else {
                uint64_t v23 = v14[3];
              }
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v14[2], v5, v14[3])) {
                    return v14;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v14 + 39)) {
                    return v14;
                  }
                  uint64_t v24 = 0;
                  while (*((unsigned __int8 *)v14 + v24 + 16) == v5[v24])
                  {
                    if (v22 == ++v24) {
                      return v14;
                    }
                  }
                }
              }
            }
            else if ((v21 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            char v14 = (uint64_t *)*v14;
            if (!v14) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v17 = v14[1];
          if (v17 == v10)
          {
            uint64_t v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0) {
              uint64_t v19 = *((unsigned __int8 *)v14 + 39);
            }
            else {
              uint64_t v19 = v14[3];
            }
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp((const void *)v14[2], v5, v14[3])) {
                  return v14;
                }
              }
              else
              {
                if (!*((unsigned char *)v14 + 39)) {
                  return v14;
                }
                uint64_t v20 = 0;
                while (*((unsigned __int8 *)v14 + v20 + 16) == v5[v20])
                {
                  if (v18 == ++v20) {
                    return v14;
                  }
                }
              }
            }
          }
          else
          {
            if (v17 >= v11) {
              v17 %= v11;
            }
            if (v17 != v3) {
              break;
            }
          }
          char v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  char v25 = operator new(0x28uLL);
  v42[0] = v25;
  v42[1] = a1 + 16;
  char v43 = 0;
  *char v25 = 0;
  v25[1] = v10;
  uint64_t v26 = (std::string *)(v25 + 2);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v26, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v26->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    v26->__r_.__value_.__r.__words[2] = *(void *)(a3 + 16);
  }
  char v43 = 1;
  float v27 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v28 = *(float *)(a1 + 32);
  if (!v11 || (float)(v28 * (float)v11) < v27)
  {
    BOOL v31 = 1;
    if (v11 >= 3) {
      BOOL v31 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v32 = v31 | (2 * v11);
    unint64_t v33 = vcvtps_u32_f32(v27 / v28);
    if (v32 <= v33) {
      size_t prime = v33;
    }
    else {
      size_t prime = v32;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v35 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v35) {
      goto LABEL_68;
    }
    if (prime < *(void *)&v35)
    {
      unint64_t v36 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v35 < 3uLL || (uint8x8_t v37 = (uint8x8_t)vcnt_s8(v35), v37.i16[0] = vaddlv_u8(v37), v37.u32[0] > 1uLL))
      {
        unint64_t v36 = std::__next_prime(v36);
      }
      else
      {
        uint64_t v38 = 1 << -(char)__clz(v36 - 1);
        if (v36 >= 2) {
          unint64_t v36 = v38;
        }
      }
      if (prime <= v36) {
        size_t prime = v36;
      }
      if (prime < *(void *)&v35) {
LABEL_68:
      }
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    unint64_t v39 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        unint64_t v3 = v10 % v11;
        uint64_t v29 = *(void **)(*(void *)a1 + 8 * (v10 % v11));
        uint64_t v30 = (void *)v42[0];
        if (v29) {
          goto LABEL_57;
        }
      }
      else
      {
        unint64_t v3 = v10;
        uint64_t v29 = *(void **)(*(void *)a1 + 8 * v10);
        uint64_t v30 = (void *)v42[0];
        if (v29) {
          goto LABEL_57;
        }
      }
    }
    else
    {
      unint64_t v3 = v39 & v10;
      uint64_t v29 = *(void **)(*(void *)a1 + 8 * (v39 & v10));
      uint64_t v30 = (void *)v42[0];
      if (v29) {
        goto LABEL_57;
      }
    }
LABEL_81:
    *uint64_t v30 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v42[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v42[0])
    {
      unint64_t v40 = *(void *)(*(void *)v42[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v40 >= v11) {
          v40 %= v11;
        }
      }
      else
      {
        v40 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v40) = v42[0];
    }
    goto LABEL_92;
  }
  uint64_t v29 = *(void **)(*(void *)a1 + 8 * v3);
  uint64_t v30 = (void *)v42[0];
  if (!v29) {
    goto LABEL_81;
  }
LABEL_57:
  *uint64_t v30 = *v29;
  *uint64_t v29 = v42[0];
LABEL_92:
  char v14 = (uint64_t *)v42[0];
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_1920D5DA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1920D5DBC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void Espresso::base_kernel::blob_options(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>(void *a1, unsigned __int8 *a2)
{
  unint64_t v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  unint64_t v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  for (uint64_t i = *v10; i; uint64_t i = *(unsigned __int8 **)i)
  {
    unint64_t v12 = *((void *)i + 1);
    if (v12 == v6)
    {
      if (std::equal_to<std::string>::operator()[abi:ne180100](i + 16, a2)) {
        return i;
      }
    }
    else
    {
      if (v8 > 1)
      {
        if (v12 >= *(void *)&v5) {
          v12 %= *(void *)&v5;
        }
      }
      else
      {
        v12 &= *(void *)&v5 - 1;
      }
      if (v12 != v9) {
        return 0;
      }
    }
  }
  return i;
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::find<std::string>(void *a1, uint64_t a2)
{
  uint64_t v2 = (unsigned char *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v5 = v4;
  }
  unint64_t v6 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v21, (uint64_t *)a2, v5);
  int8x8_t v7 = (int8x8_t)a1[1];
  if (!*(void *)&v7) {
    return 0;
  }
  unint64_t v8 = v6;
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  unint64_t v10 = v9.u32[0];
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v11 = v6;
    if (v6 >= *(void *)&v7) {
      unint64_t v11 = v6 % *(void *)&v7;
    }
  }
  else
  {
    unint64_t v11 = (*(void *)&v7 - 1) & v6;
  }
  unint64_t v12 = *(uint64_t ***)(*a1 + 8 * v11);
  if (!v12) {
    return 0;
  }
  uint64_t v13 = *v12;
  if (*v12)
  {
    char v14 = v2[23];
    if (v14 >= 0) {
      uint64_t v15 = v2[23];
    }
    else {
      uint64_t v15 = *((void *)v2 + 1);
    }
    if (v14 < 0) {
      uint64_t v2 = *(unsigned char **)v2;
    }
    do
    {
      unint64_t v16 = v13[1];
      if (v16 == v8)
      {
        uint64_t v17 = *((unsigned __int8 *)v13 + 39);
        if ((v17 & 0x80u) == 0) {
          uint64_t v18 = *((unsigned __int8 *)v13 + 39);
        }
        else {
          uint64_t v18 = v13[3];
        }
        if (v18 == v15)
        {
          if ((v17 & 0x80) != 0)
          {
            if (!memcmp((const void *)v13[2], v2, v13[3])) {
              return v13;
            }
          }
          else
          {
            if (!*((unsigned char *)v13 + 39)) {
              return v13;
            }
            uint64_t v19 = 0;
            while (*((unsigned __int8 *)v13 + v19 + 16) == v2[v19])
            {
              if (v17 == ++v19) {
                return v13;
              }
            }
          }
        }
      }
      else
      {
        if (v10 <= 1)
        {
          v16 &= *(void *)&v7 - 1;
        }
        else if (v16 >= *(void *)&v7)
        {
          v16 %= *(void *)&v7;
        }
        if (v16 != v11) {
          return 0;
        }
      }
      uint64_t v13 = (uint64_t *)*v13;
    }
    while (v13);
  }
  return v13;
}

{
  unsigned char *v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t *result;
  uint64_t **v12;
  uint64_t *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  uint64_t v2 = (unsigned char *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v5 = v4;
  }
  unint64_t v6 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v25, (uint64_t *)a2, v5);
  int8x8_t v7 = (int8x8_t)a1[1];
  if (!*(void *)&v7) {
    return 0;
  }
  unint64_t v8 = v6;
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v10 = v6;
    if (v6 >= *(void *)&v7) {
      unint64_t v10 = v6 % *(void *)&v7;
    }
  }
  else
  {
    unint64_t v10 = (*(void *)&v7 - 1) & v6;
  }
  unint64_t v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    uint64_t v13 = *v12;
    if (*v12)
    {
      char v14 = v2[23];
      if (v14 >= 0) {
        uint64_t v15 = v2[23];
      }
      else {
        uint64_t v15 = *((void *)v2 + 1);
      }
      if (v14 < 0) {
        uint64_t v2 = *(unsigned char **)v2;
      }
      if (v9.u32[0] < 2uLL)
      {
        unint64_t v16 = *(void *)&v7 - 1;
        while (1)
        {
          char v21 = v13[1];
          if (v8 == v21)
          {
            uint64_t v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0) {
              uint64_t v23 = *((unsigned __int8 *)v13 + 39);
            }
            else {
              uint64_t v23 = v13[3];
            }
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3])) {
                  return v13;
                }
              }
              else
              {
                if (!*((unsigned char *)v13 + 39)) {
                  return v13;
                }
                uint64_t v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24) {
                    return v13;
                  }
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          uint64_t result = 0;
          uint64_t v13 = (uint64_t *)*v13;
          if (!v13) {
            return result;
          }
        }
      }
      while (1)
      {
        uint64_t v17 = v13[1];
        if (v8 == v17)
        {
          uint64_t v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0) {
            uint64_t v19 = *((unsigned __int8 *)v13 + 39);
          }
          else {
            uint64_t v19 = v13[3];
          }
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3])) {
                return v13;
              }
            }
            else
            {
              if (!*((unsigned char *)v13 + 39)) {
                return v13;
              }
              uint64_t v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20) {
                  return v13;
                }
              }
            }
          }
        }
        else
        {
          if (v17 >= *(void *)&v7) {
            v17 %= *(void *)&v7;
          }
          if (v17 != v10) {
            return 0;
          }
        }
        uint64_t result = 0;
        uint64_t v13 = (uint64_t *)*v13;
        if (!v13) {
          return result;
        }
      }
    }
  }
  return 0;
}

void std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(uint64_t a1, long long *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(*(std::string **)(a1 + 8), *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *(void *)(v3 + 16) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v3 = v4;
  }
  *(void *)(a1 + 8) = v3 + 24;
}

void sub_1920D60B4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  if (!a2)
  {
    uint64_t v15 = *(void **)a1;
    *(void *)a1 = 0;
    if (v15) {
      operator delete(v15);
    }
    *(void *)(a1 + 8) = 0;
    return;
  }
  if (a2 >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  long long v4 = operator new(8 * a2);
  unint64_t v5 = *(void **)a1;
  *(void *)a1 = v4;
  if (v5) {
    operator delete(v5);
  }
  uint64_t v6 = 0;
  *(void *)(a1 + 8) = a2;
  do
    *(void *)(*(void *)a1 + 8 * v6++) = 0;
  while (a2 != v6);
  uint64_t v8 = a1 + 16;
  int8x8_t v7 = *(void **)(a1 + 16);
  if (v7)
  {
    unint64_t v9 = v7[1];
    unint64_t v10 = a2 - 1;
    if ((a2 & (a2 - 1)) == 0)
    {
      uint64_t v11 = v9 & v10;
      *(void *)(*(void *)a1 + 8 * v11) = v8;
      while (1)
      {
        unint64_t v12 = (void *)*v7;
        if (!*v7) {
          break;
        }
        uint64_t v13 = v12[1] & v10;
        if (v13 == v11)
        {
          int8x8_t v7 = (void *)*v7;
        }
        else if (*(void *)(*(void *)a1 + 8 * v13))
        {
          *int8x8_t v7 = *v12;
          uint64_t v14 = 8 * v13;
          *unint64_t v12 = **(void **)(*(void *)a1 + v14);
          **(void **)(*(void *)a1 + v14) = v12;
        }
        else
        {
          *(void *)(*(void *)a1 + 8 * v13) = v7;
          int8x8_t v7 = v12;
          uint64_t v11 = v13;
        }
      }
      return;
    }
    if (v9 >= a2) {
      v9 %= a2;
    }
    *(void *)(*(void *)a1 + 8 * v9) = v8;
    unint64_t v16 = (void *)*v7;
    if (*v7)
    {
      while (1)
      {
        unint64_t v18 = v16[1];
        if (v18 >= a2) {
          v18 %= a2;
        }
        if (v18 == v9) {
          goto LABEL_25;
        }
        if (*(void *)(*(void *)a1 + 8 * v18))
        {
          *int8x8_t v7 = *v16;
          uint64_t v17 = 8 * v18;
          *unint64_t v16 = **(void **)(*(void *)a1 + v17);
          **(void **)(*(void *)a1 + v17) = v16;
          unint64_t v16 = v7;
LABEL_25:
          int8x8_t v7 = v16;
          unint64_t v16 = (void *)*v16;
          if (!v16) {
            return;
          }
        }
        else
        {
          *(void *)(*(void *)a1 + 8 * v18) = v7;
          int8x8_t v7 = v16;
          unint64_t v16 = (void *)*v16;
          unint64_t v9 = v18;
          if (!v16) {
            return;
          }
        }
      }
    }
  }
}

char *std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void *a2, long long **a3)
{
  unint64_t v5 = (void **)std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__find_equal<std::string>((uint64_t)a1, &v12, a2);
  uint64_t v6 = (char *)*v5;
  if (!*v5)
  {
    int8x8_t v7 = (uint64_t **)v5;
    uint64_t v6 = (char *)operator new(0x40uLL);
    uint64_t v8 = (std::string *)(v6 + 32);
    unint64_t v9 = *a3;
    if (*((char *)*a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)v9, *((void *)v9 + 1));
    }
    else
    {
      long long v10 = *v9;
      *((void *)v6 + 6) = *((void *)v9 + 2);
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v10;
    }
    v6[56] = 0;
    std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at(a1, v12, v7, (uint64_t *)v6);
  }
  return v6;
}

void sub_1920D653C(_Unwind_Exception *a1)
{
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,int>,void *>>>::operator()[abi:ne180100](0, v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,int>,void *> *>>(void *a1, uint64_t *a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = a1[1];
  if (v4)
  {
    for (uint64_t i = 0; i != v4; ++i)
      *(void *)(*a1 + 8 * i) = 0;
    uint64_t v6 = a1[2];
    a1[2] = 0;
    a1[3] = 0;
    if (v6) {
      BOOL v7 = a2 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (v7)
    {
      uint64_t v8 = (void **)v6;
    }
    else
    {
      do
      {
        std::string::operator=((std::string *)(v6 + 16), (const std::string *)(v2 + 2));
        *(_DWORD *)(v6 + 40) = *((_DWORD *)v2 + 10);
        uint64_t v8 = *(void ***)v6;
        std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__node_insert_multi((uint64_t)a1, v6);
        uint64_t v2 = (uint64_t *)*v2;
        if (v8) {
          BOOL v9 = v2 == 0;
        }
        else {
          BOOL v9 = 1;
        }
        uint64_t v6 = (uint64_t)v8;
      }
      while (!v9);
    }
    std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__deallocate_node(v8);
  }
  for (; v2; uint64_t v2 = (uint64_t *)*v2)
  {
    long long v10 = (char *)operator new(0x30uLL);
    uint64_t v11 = (uint64_t)v10;
    uint64_t v12 = v10 + 16;
    *(void *)long long v10 = 0;
    *((void *)v10 + 1) = 0;
    if (*((char *)v2 + 39) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)(v10 + 16), (const std::string::value_type *)v2[2], v2[3]);
    }
    else
    {
      long long v13 = *((_OWORD *)v2 + 1);
      *((void *)v10 + 4) = v2[4];
      *uint64_t v12 = v13;
    }
    *(_DWORD *)(v11 + 40) = *((_DWORD *)v2 + 10);
    *(void *)(v11 + 8) = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)v12);
    std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__node_insert_multi((uint64_t)a1, v11);
  }
}

void sub_1920D6668(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,unsigned long>,void *>>>::operator()[abi:ne180100](0, v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__node_insert_multi(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (void *)a2;
  uint64_t v4 = (unsigned __int8 *)(a2 + 16);
  unint64_t v43 = std::__string_hash<char>::operator()[abi:ne180100](a2 + 16);
  v2[1] = v43;
  unint64_t v5 = *(void *)(a1 + 8);
  float v6 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v7 = *(float *)(a1 + 32);
  if (!v5 || (float)(v7 * (float)v5) < v6)
  {
    BOOL v8 = 1;
    if (v5 >= 3) {
      BOOL v8 = (v5 & (v5 - 1)) != 0;
    }
    unint64_t v9 = v8 | (2 * v5);
    unint64_t v10 = vcvtps_u32_f32(v6 / v7);
    if (v9 <= v10) {
      int8x8_t prime = (int8x8_t)v10;
    }
    else {
      int8x8_t prime = (int8x8_t)v9;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v5 = *(void *)(a1 + 8);
    }
    if (*(void *)&prime > v5) {
      goto LABEL_99;
    }
    if (*(void *)&prime >= v5) {
      goto LABEL_60;
    }
    unint64_t v19 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v5 < 3 || (uint8x8_t v20 = (uint8x8_t)vcnt_s8((int8x8_t)v5), v20.i16[0] = vaddlv_u8(v20), v20.u32[0] > 1uLL))
    {
      unint64_t v19 = std::__next_prime(v19);
    }
    else
    {
      uint64_t v21 = 1 << -(char)__clz(v19 - 1);
      if (v19 >= 2) {
        unint64_t v19 = v21;
      }
    }
    if (*(void *)&prime <= v19) {
      int8x8_t prime = (int8x8_t)v19;
    }
    if (*(void *)&prime >= v5)
    {
      unint64_t v5 = *(void *)(a1 + 8);
      goto LABEL_60;
    }
    if (prime)
    {
LABEL_99:
      if (*(void *)&prime >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v12 = operator new(8 * *(void *)&prime);
      long long v13 = *(void **)a1;
      *(void *)a1 = v12;
      if (v13) {
        operator delete(v13);
      }
      int v41 = v4;
      uint64_t v14 = 0;
      *(int8x8_t *)(a1 + 8) = prime;
      do
        *(void *)(*(void *)a1 + 8 * v14++) = 0;
      while (*(void *)&prime != v14);
      uint64_t v15 = *(uint64_t **)(a1 + 16);
      if (v15)
      {
        unint64_t v16 = v15[1];
        uint8x8_t v17 = (uint8x8_t)vcnt_s8(prime);
        v17.i16[0] = vaddlv_u8(v17);
        unint64_t v18 = v17.u32[0];
        unint64_t v40 = v2;
        if (v17.u32[0] > 1uLL)
        {
          if (v16 >= *(void *)&prime) {
            v16 %= *(void *)&prime;
          }
        }
        else
        {
          v16 &= *(void *)&prime - 1;
        }
        *(void *)(*(void *)a1 + 8 * v16) = a1 + 16;
        uint64_t v22 = *v15;
        if (*v15)
        {
          unint64_t v42 = v17.u32[0];
          do
          {
            unint64_t v23 = *(void *)(v22 + 8);
            if (v18 > 1)
            {
              if (v23 >= *(void *)&prime) {
                v23 %= *(void *)&prime;
              }
            }
            else
            {
              v23 &= *(void *)&prime - 1;
            }
            if (v23 == v16)
            {
              uint64_t v15 = (uint64_t *)v22;
            }
            else if (*(void *)(*(void *)a1 + 8 * v23))
            {
              uint64_t v24 = *(void **)v22;
              if (*(void *)v22)
              {
                char v25 = (void *)v22;
                while (1)
                {
                  uint64_t v26 = v24;
                  if (!std::equal_to<std::string>::operator()[abi:ne180100]((unsigned __int8 *)(v22 + 16), (unsigned __int8 *)v24 + 16))break; {
                  uint64_t v24 = (void *)*v26;
                  }
                  char v25 = v26;
                  if (!*v26) {
                    goto LABEL_47;
                  }
                }
                uint64_t v24 = v26;
                uint64_t v26 = v25;
LABEL_47:
                unint64_t v18 = v42;
              }
              else
              {
                uint64_t v26 = (void *)v22;
              }
              *uint64_t v15 = (uint64_t)v24;
              *uint64_t v26 = **(void **)(*(void *)a1 + 8 * v23);
              **(void **)(*(void *)a1 + 8 * v23) = v22;
            }
            else
            {
              *(void *)(*(void *)a1 + 8 * v23) = v15;
              uint64_t v15 = (uint64_t *)v22;
              unint64_t v16 = v23;
            }
            uint64_t v22 = *v15;
          }
          while (*v15);
        }
        unint64_t v5 = (unint64_t)prime;
        uint64_t v2 = v40;
        uint64_t v4 = v41;
      }
      else
      {
        unint64_t v5 = (unint64_t)prime;
        uint64_t v4 = v41;
      }
    }
    else
    {
      float v27 = *(void **)a1;
      *(void *)a1 = 0;
      if (v27) {
        operator delete(v27);
      }
      unint64_t v5 = 0;
      *(void *)(a1 + 8) = 0;
    }
  }
LABEL_60:
  uint8x8_t v28 = (uint8x8_t)vcnt_s8((int8x8_t)v5);
  v28.i16[0] = vaddlv_u8(v28);
  unint64_t v29 = v28.u32[0];
  if (v28.u32[0] > 1uLL)
  {
    unint64_t v30 = v43;
    if (v5 <= v43) {
      unint64_t v30 = v43 % v5;
    }
  }
  else
  {
    unint64_t v30 = (v5 - 1) & v43;
  }
  BOOL v31 = *(unsigned __int8 **)(*(void *)a1 + 8 * v30);
  if (v31)
  {
    unint64_t v32 = *(unsigned __int8 **)v31;
    if (*(void *)v31)
    {
      int v33 = 0;
      do
      {
        v34 = v32;
        unint64_t v35 = *((void *)v32 + 1);
        if (v29 > 1)
        {
          unint64_t v36 = v35;
          if (v35 >= v5) {
            unint64_t v36 = v35 % v5;
          }
        }
        else
        {
          unint64_t v36 = v35 & (v5 - 1);
        }
        if (v36 != v30) {
          break;
        }
        BOOL v37 = v35 == v43 && std::equal_to<std::string>::operator()[abi:ne180100](v34 + 16, v4);
        if (v33 & !v37) {
          break;
        }
        v33 |= v37;
        unint64_t v32 = *(unsigned __int8 **)v34;
        BOOL v31 = v34;
      }
      while (*(void *)v34);
    }
  }
  unint64_t v38 = v2[1];
  if (v29 > 1)
  {
    if (v38 >= v5) {
      v38 %= v5;
    }
  }
  else
  {
    v38 &= v5 - 1;
  }
  if (!v31)
  {
    *uint64_t v2 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v2;
    *(void *)(*(void *)a1 + 8 * v38) = a1 + 16;
    if (!*v2) {
      goto LABEL_95;
    }
    unint64_t v39 = *(void *)(*v2 + 8);
    if (v29 > 1)
    {
      if (v39 >= v5) {
        v39 %= v5;
      }
    }
    else
    {
      v39 &= v5 - 1;
    }
LABEL_94:
    *(void *)(*(void *)a1 + 8 * v39) = v2;
    goto LABEL_95;
  }
  *uint64_t v2 = *(void *)v31;
  *(void *)BOOL v31 = v2;
  if (*v2)
  {
    unint64_t v39 = *(void *)(*v2 + 8);
    if (v29 > 1)
    {
      if (v39 >= v5) {
        v39 %= v5;
      }
    }
    else
    {
      v39 &= v5 - 1;
    }
    if (v39 != v38) {
      goto LABEL_94;
    }
  }
LABEL_95:
  ++*(void *)(a1 + 24);
}

unint64_t std::__string_hash<char>::operator()[abi:ne180100](uint64_t a1)
{
  int v1 = *(char *)(a1 + 23);
  if (v1 >= 0) {
    uint64_t v2 = (uint64_t *)a1;
  }
  else {
    uint64_t v2 = *(uint64_t **)a1;
  }
  if (v1 >= 0) {
    unint64_t v3 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    unint64_t v3 = *(void *)(a1 + 8);
  }
  return std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v5, v2, v3);
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100](uint64_t a1, uint64_t *a2, unint64_t a3)
{
  if (a3 > 0x20)
  {
    if (a3 > 0x40)
    {
      uint64_t v23 = *(uint64_t *)((char *)a2 + a3 - 48);
      uint64_t v24 = *(uint64_t *)((char *)a2 + a3 - 40);
      uint64_t v25 = *(uint64_t *)((char *)a2 + a3 - 24);
      uint64_t v27 = *(uint64_t *)((char *)a2 + a3 - 64);
      uint64_t v26 = *(uint64_t *)((char *)a2 + a3 - 56);
      uint64_t v28 = *(uint64_t *)((char *)a2 + a3 - 16);
      uint64_t v29 = *(uint64_t *)((char *)a2 + a3 - 8);
      unint64_t v30 = v26 + v28;
      unint64_t v31 = 0x9DDFEA08EB382D69
          * (v25 ^ ((0x9DDFEA08EB382D69 * (v25 ^ (v23 + a3))) >> 47) ^ (0x9DDFEA08EB382D69 * (v25 ^ (v23 + a3))));
      unint64_t v32 = 0x9DDFEA08EB382D69 * (v31 ^ (v31 >> 47));
      unint64_t v33 = v27 + a3 + v26 + v23;
      uint64_t v34 = v33 + v24;
      unint64_t v35 = __ROR8__(v33, 44) + v27 + a3 + __ROR8__(v24 + v27 + a3 - 0x622015F714C7D297 * (v31 ^ (v31 >> 47)), 21);
      uint64_t v36 = v26 + v28 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
      uint64_t v37 = v36 + v25 + v28;
      uint64_t v38 = __ROR8__(v37, 44);
      uint64_t v39 = v37 + v29;
      uint64_t v40 = v38 + v36 + __ROR8__(v36 + v24 + v29, 21);
      uint64_t v42 = *a2;
      int v41 = a2 + 4;
      unint64_t v43 = v42 - 0x4B6D499041670D8DLL * v24;
      uint64_t v44 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        uint64_t v45 = *(v41 - 3);
        uint64_t v46 = v43 + v34 + v30 + v45;
        uint64_t v47 = v41[2];
        uint64_t v48 = v41[3];
        uint64_t v49 = v41[1];
        unint64_t v30 = v49 + v34 - 0x4B6D499041670D8DLL * __ROR8__(v30 + v35 + v47, 42);
        uint64_t v50 = v32 + v39;
        uint64_t v51 = *(v41 - 2);
        uint64_t v52 = *(v41 - 1);
        uint64_t v53 = *(v41 - 4) - 0x4B6D499041670D8DLL * v35;
        uint64_t v54 = v53 + v39 + v52;
        uint64_t v55 = v53 + v45 + v51;
        uint64_t v34 = v55 + v52;
        uint64_t v56 = __ROR8__(v55, 44) + v53;
        unint64_t v57 = (0xB492B66FBE98F273 * __ROR8__(v46, 37)) ^ v40;
        unint64_t v43 = 0xB492B66FBE98F273 * __ROR8__(v50, 33);
        unint64_t v35 = v56 + __ROR8__(v54 + v57, 21);
        unint64_t v58 = v43 + v40 + *v41;
        uint64_t v39 = v58 + v49 + v47 + v48;
        uint64_t v40 = __ROR8__(v58 + v49 + v47, 44) + v58 + __ROR8__(v30 + v51 + v58 + v48, 21);
        v41 += 8;
        unint64_t v32 = v57;
        v44 += 64;
      }
      while (v44);
      unint64_t v59 = v43
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v40 ^ ((0x9DDFEA08EB382D69 * (v40 ^ v35)) >> 47) ^ (0x9DDFEA08EB382D69 * (v40 ^ v35)))) ^ ((0x9DDFEA08EB382D69 * (v40 ^ ((0x9DDFEA08EB382D69 * (v40 ^ v35)) >> 47) ^ (0x9DDFEA08EB382D69 * (v40 ^ v35)))) >> 47));
      unint64_t v60 = 0x9DDFEA08EB382D69
          * (v59 ^ (v57
                  - 0x4B6D499041670D8DLL * (v30 ^ (v30 >> 47))
                  - 0x622015F714C7D297
                  * ((0x9DDFEA08EB382D69
                    * (v39 ^ ((0x9DDFEA08EB382D69 * (v39 ^ v34)) >> 47) ^ (0x9DDFEA08EB382D69 * (v39 ^ v34)))) ^ ((0x9DDFEA08EB382D69 * (v39 ^ ((0x9DDFEA08EB382D69 * (v39 ^ v34)) >> 47) ^ (0x9DDFEA08EB382D69 * (v39 ^ v34)))) >> 47))));
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v59 ^ (v60 >> 47) ^ v60)) ^ ((0x9DDFEA08EB382D69 * (v59 ^ (v60 >> 47) ^ v60)) >> 47));
    }
    else
    {
      uint64_t v6 = *(uint64_t *)((char *)a2 + a3 - 16);
      uint64_t v7 = *a2 - 0x3C5A37A36834CED9 * (v6 + a3);
      uint64_t v9 = a2[2];
      uint64_t v8 = a2[3];
      uint64_t v10 = __ROR8__(v7 + v8, 52);
      uint64_t v11 = v7 + a2[1];
      uint64_t v12 = __ROR8__(v11, 7);
      uint64_t v13 = v11 + v9;
      uint64_t v14 = *(uint64_t *)((char *)a2 + a3 - 32) + v9;
      uint64_t v15 = v12 + __ROR8__(*a2 - 0x3C5A37A36834CED9 * (v6 + a3), 37) + v10 + __ROR8__(v13, 31);
      uint64_t v16 = *(uint64_t *)((char *)a2 + a3 - 24) + v14 + v6;
      unint64_t v17 = 0xC3A5C85C97CB3127 * (v16 + *(uint64_t *)((char *)a2 + a3 - 8) + v8 + v15)
          - 0x651E95C4D06FBFB1
          * (v13
           + v8
           + __ROR8__(v14, 37)
           + __ROR8__(*(uint64_t *)((char *)a2 + a3 - 24) + v14, 7)
           + __ROR8__(*(uint64_t *)((char *)a2 + a3 - 8) + v8 + v14, 52)
           + __ROR8__(v16, 31));
      return 0x9AE16A3B2F90404FLL
           * ((v15 - 0x3C5A37A36834CED9 * (v17 ^ (v17 >> 47))) ^ ((v15 - 0x3C5A37A36834CED9 * (v17 ^ (v17 >> 47))) >> 47));
    }
  }
  else if (a3 > 0x10)
  {
    uint64_t v18 = a2[1];
    unint64_t v19 = 0xB492B66FBE98F273 * *a2;
    uint64_t v20 = __ROR8__(0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)a2 + a3 - 8), 30) + __ROR8__(v19 - v18, 43);
    unint64_t v21 = v19 + a3 + __ROR8__(v18 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)a2 + a3 - 8);
    unint64_t v22 = 0x9DDFEA08EB382D69 * ((v20 - 0x3C5A37A36834CED9 * *(uint64_t *)((char *)a2 + a3 - 16)) ^ v21);
    return 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v21 ^ (v22 >> 47) ^ v22)) ^ ((0x9DDFEA08EB382D69 * (v21 ^ (v22 >> 47) ^ v22)) >> 47));
  }
  else if (a3 < 9)
  {
    if (a3 < 4)
    {
      unint64_t result = 0x9AE16A3B2F90404FLL;
      if (a3)
      {
        unint64_t v63 = (0xC949D7C7509E6557 * (a3 + 4 * *((unsigned __int8 *)a2 + a3 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                       * (*(unsigned __int8 *)a2 | ((unint64_t)*((unsigned __int8 *)a2 + (a3 >> 1)) << 8)));
        return 0x9AE16A3B2F90404FLL * (v63 ^ (v63 >> 47));
      }
    }
    else
    {
      uint64_t v61 = *(unsigned int *)((char *)a2 + a3 - 4);
      unint64_t v62 = 0x9DDFEA08EB382D69 * (((8 * *(_DWORD *)a2) + a3) ^ v61);
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v61 ^ (v62 >> 47) ^ v62)) ^ ((0x9DDFEA08EB382D69 * (v61 ^ (v62 >> 47) ^ v62)) >> 47));
    }
  }
  else
  {
    uint64_t v3 = *(uint64_t *)((char *)a2 + a3 - 8);
    uint64_t v4 = __ROR8__(v3 + a3, a3);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *a2)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *a2)))) ^ ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *a2)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *a2)))) >> 47))) ^ v3;
  }
  return result;
}

BOOL std::equal_to<std::string>::operator()[abi:ne180100](unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2 = a1[23];
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = a1[23];
  }
  else {
    uint64_t v3 = *((void *)a1 + 1);
  }
  uint64_t v4 = a2[23];
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *((void *)a2 + 1);
  }
  if (v3 != v4) {
    return 0;
  }
  if (v5 < 0) {
    a2 = *(unsigned __int8 **)a2;
  }
  if ((v2 & 0x80) != 0) {
    return memcmp(*(const void **)a1, a2, *((void *)a1 + 1)) == 0;
  }
  if (!a1[23]) {
    return 1;
  }
  uint64_t v6 = v2 - 1;
  do
  {
    int v8 = *a1++;
    int v7 = v8;
    int v10 = *a2++;
    int v9 = v10;
    BOOL v12 = v6-- != 0;
    BOOL v13 = v7 == v9;
    BOOL v14 = v7 == v9;
  }
  while (v13 && v12);
  return v14;
}

void std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__rehash<true>(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }
    else
    {
      uint64_t v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }
    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4)
    {
LABEL_16:
      std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
  }
}

void Espresso::net::get_producers_of_blobs(Espresso::net *this@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__rehash<true>(a2, (unint64_t)(float)*((unint64_t *)this + 20));
  uint64_t v5 = *((void *)this + 4);
  uint64_t v4 = *((void *)this + 5);
  if (v4 != v5)
  {
    unint64_t v6 = 0;
    do
    {
      uint64_t v7 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::find<unsigned long>((void *)this + 12, v6);
      if (v7)
      {
        int v8 = (long long *)v7[3];
        int v9 = (long long *)v7[4];
        if (v8 != v9)
        {
          do
          {
            int v10 = v8;
            std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a2, (uint64_t)v8, (uint64_t)&std::piecewise_construct, &v10)[5] = v6;
            int v8 = (long long *)((char *)v8 + 24);
          }
          while (v8 != v9);
          uint64_t v5 = *((void *)this + 4);
          uint64_t v4 = *((void *)this + 5);
        }
      }
      ++v6;
    }
    while (v6 < (v4 - v5) >> 4);
  }
}

void sub_1920D7254(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::find<unsigned long>(void *a1, unint64_t a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  uint8x8_t v3 = (uint8x8_t)vcnt_s8(v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v4 = a2;
    if (*(void *)&v2 <= a2) {
      unint64_t v4 = a2 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v4 = (*(void *)&v2 - 1) & a2;
  }
  uint64_t v5 = *(void **)(*a1 + 8 * v4);
  if (!v5) {
    return 0;
  }
  unint64_t result = (void *)*v5;
  if (*v5)
  {
    do
    {
      unint64_t v7 = result[1];
      if (v7 == a2)
      {
        if (result[2] == a2) {
          return result;
        }
      }
      else
      {
        if (v3.u32[0] > 1uLL)
        {
          if (v7 >= *(void *)&v2) {
            v7 %= *(void *)&v2;
          }
        }
        else
        {
          v7 &= *(void *)&v2 - 1;
        }
        if (v7 != v4) {
          return 0;
        }
      }
      unint64_t result = (void *)*result;
    }
    while (result);
  }
  return result;
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, long long **a4)
{
  unint64_t v6 = (unsigned char *)a2;
  unint64_t v8 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v9 = v8;
  }
  unint64_t v10 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v45, (uint64_t *)a2, v9);
  unint64_t v11 = v10;
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v12) {
        unint64_t v4 = v10 % v12;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v10;
    }
    BOOL v14 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      uint64_t v15 = *v14;
      if (*v14)
      {
        char v16 = v6[23];
        if (v16 >= 0) {
          uint64_t v17 = v6[23];
        }
        else {
          uint64_t v17 = *((void *)v6 + 1);
        }
        if (v16 < 0) {
          unint64_t v6 = *(unsigned char **)v6;
        }
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v22 = v15[1];
            if (v22 == v11)
            {
              uint64_t v23 = *((unsigned __int8 *)v15 + 39);
              if ((v23 & 0x80u) == 0) {
                uint64_t v24 = *((unsigned __int8 *)v15 + 39);
              }
              else {
                uint64_t v24 = v15[3];
              }
              if (v24 == v17)
              {
                if ((v23 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v15[2], v6, v15[3])) {
                    return v15;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v15 + 39)) {
                    return v15;
                  }
                  uint64_t v25 = 0;
                  while (*((unsigned __int8 *)v15 + v25 + 16) == v6[v25])
                  {
                    if (v23 == ++v25) {
                      return v15;
                    }
                  }
                }
              }
            }
            else if ((v22 & (v12 - 1)) != v4)
            {
              goto LABEL_51;
            }
            uint64_t v15 = (uint64_t *)*v15;
            if (!v15) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v18 = v15[1];
          if (v18 == v11)
          {
            uint64_t v19 = *((unsigned __int8 *)v15 + 39);
            if ((v19 & 0x80u) == 0) {
              uint64_t v20 = *((unsigned __int8 *)v15 + 39);
            }
            else {
              uint64_t v20 = v15[3];
            }
            if (v20 == v17)
            {
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp((const void *)v15[2], v6, v15[3])) {
                  return v15;
                }
              }
              else
              {
                if (!*((unsigned char *)v15 + 39)) {
                  return v15;
                }
                uint64_t v21 = 0;
                while (*((unsigned __int8 *)v15 + v21 + 16) == v6[v21])
                {
                  if (v19 == ++v21) {
                    return v15;
                  }
                }
              }
            }
          }
          else
          {
            if (v18 >= v12) {
              v18 %= v12;
            }
            if (v18 != v4) {
              break;
            }
          }
          uint64_t v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_51:
  uint64_t v26 = operator new(0x30uLL);
  v45[0] = v26;
  v45[1] = a1 + 16;
  char v46 = 0;
  *uint64_t v26 = 0;
  v26[1] = v11;
  uint64_t v27 = (std::string *)(v26 + 2);
  uint64_t v28 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v27, *(const std::string::value_type **)v28, *((void *)v28 + 1));
  }
  else
  {
    long long v29 = *v28;
    v26[4] = *((void *)v28 + 2);
    *(_OWORD *)&v27->__r_.__value_.__l.__data_ = v29;
  }
  v26[5] = 0;
  char v46 = 1;
  float v30 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v31 = *(float *)(a1 + 32);
  if (!v12 || (float)(v31 * (float)v12) < v30)
  {
    BOOL v34 = 1;
    if (v12 >= 3) {
      BOOL v34 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v35 = v34 | (2 * v12);
    unint64_t v36 = vcvtps_u32_f32(v30 / v31);
    if (v35 <= v36) {
      size_t prime = v36;
    }
    else {
      size_t prime = v35;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v38 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v38) {
      goto LABEL_68;
    }
    if (prime < *(void *)&v38)
    {
      unint64_t v39 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v38 < 3uLL || (uint8x8_t v40 = (uint8x8_t)vcnt_s8(v38), v40.i16[0] = vaddlv_u8(v40), v40.u32[0] > 1uLL))
      {
        unint64_t v39 = std::__next_prime(v39);
      }
      else
      {
        uint64_t v41 = 1 << -(char)__clz(v39 - 1);
        if (v39 >= 2) {
          unint64_t v39 = v41;
        }
      }
      if (prime <= v39) {
        size_t prime = v39;
      }
      if (prime < *(void *)&v38) {
LABEL_68:
      }
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v12 = *(void *)(a1 + 8);
    unint64_t v42 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        unint64_t v4 = v11 % v12;
        unint64_t v32 = *(void **)(*(void *)a1 + 8 * (v11 % v12));
        unint64_t v33 = (void *)v45[0];
        if (v32) {
          goto LABEL_57;
        }
      }
      else
      {
        unint64_t v4 = v11;
        unint64_t v32 = *(void **)(*(void *)a1 + 8 * v11);
        unint64_t v33 = (void *)v45[0];
        if (v32) {
          goto LABEL_57;
        }
      }
    }
    else
    {
      unint64_t v4 = v42 & v11;
      unint64_t v32 = *(void **)(*(void *)a1 + 8 * (v42 & v11));
      unint64_t v33 = (void *)v45[0];
      if (v32) {
        goto LABEL_57;
      }
    }
LABEL_81:
    void *v33 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v45[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v45[0])
    {
      unint64_t v43 = *(void *)(*(void *)v45[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v43 >= v12) {
          v43 %= v12;
        }
      }
      else
      {
        v43 &= v12 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v43) = v45[0];
    }
    goto LABEL_92;
  }
  unint64_t v32 = *(void **)(*(void *)a1 + 8 * v4);
  unint64_t v33 = (void *)v45[0];
  if (!v32) {
    goto LABEL_81;
  }
LABEL_57:
  void *v33 = *v32;
  *unint64_t v32 = v45[0];
LABEL_92:
  uint64_t v15 = (uint64_t *)v45[0];
  ++*(void *)(a1 + 24);
  return v15;
}

void sub_1920D7764(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1920D7778(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::load_constant_kernel::blob_options(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

double Espresso::ANECompilerEngine::reshape_kernel::blob_options@<D0>(Espresso::ANECompilerEngine::reshape_kernel *this@<X0>, char a2@<W1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  if (*((unsigned char *)this + 529))
  {
    if ((a2 & 1) == 0)
    {
      unint64_t v4 = operator new(0x70uLL);
      v4[1] = 0;
      v4[2] = 0;
      *unint64_t v4 = &unk_1EE388F48;
      *((_OWORD *)v4 + 4) = 0u;
      *((_OWORD *)v4 + 5) = 0u;
      *((_OWORD *)v4 + 2) = 0u;
      *((_OWORD *)v4 + 3) = 0u;
      v4[3] = &unk_1EE3661F8;
      *((_DWORD *)v4 + 12) = 1065353216;
      *(void *)&double result = 0x1FFFFFFFFLL;
      v4[7] = 0x1FFFFFFFFLL;
      v4[12] = 0;
      v4[13] = 0;
      v4[8] = 0;
      v4[9] = 0;
      *((unsigned char *)v4 + 88) = 0;
      v4[10] = 0;
      *a3 = v4 + 3;
      a3[1] = v4;
      *((unsigned char *)v4 + 32) = 1;
      *((_DWORD *)v4 + 9) = 5;
    }
  }
  return result;
}

void Espresso::context_transfer_kernel_cpu::blob_options(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void std::__shared_ptr_pointer<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>> *>::__on_zero_shared(uint64_t a1)
{
}

void std::__hash_table<std::__hash_value_type<MIL::IROperator const*,std::function<void ()(MIL::IROperation const&)>>,std::__unordered_map_hasher<MIL::IROperator const*,std::__hash_value_type<MIL::IROperator const*,std::function<void ()(MIL::IROperation const&)>>,std::hash<MIL::IROperator const*>,std::equal_to<MIL::IROperator const*>,true>,std::__unordered_map_equal<MIL::IROperator const*,std::__hash_value_type<MIL::IROperator const*,std::function<void ()(MIL::IROperation const&)>>,std::equal_to<MIL::IROperator const*>,std::hash<MIL::IROperator const*>,true>,std::allocator<std::__hash_value_type<MIL::IROperator const*,std::function<void ()(MIL::IROperation const&)>>>>::__deallocate_node(void *a1)
{
  if (a1)
  {
    uint64_t v1 = a1;
    do
    {
      int8x8_t v2 = (void *)*v1;
      std::__function::__value_func<void ()(MIL::IROperation const&)>::~__value_func[abi:ne180100](v1 + 3);
      operator delete(v1);
      uint64_t v1 = v2;
    }
    while (v2);
  }
}

void *std::function<void ()(MIL::IROperation const&)>::operator=<std::__bind<void (Espresso::MILTranslator::LayerTranslator::*)(MIL::IROperation const&),Espresso::MILTranslator::LayerTranslator*,std::placeholders::__ph<1> const&>,void>(void *a1, uint64_t a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = (char *)operator new(0x20uLL);
  *(void *)unint64_t v4 = &unk_1EE377628;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)a2;
  *((void *)v4 + 3) = *(void *)(a2 + 16);
  unint64_t v7 = v4;
  if (v6 != a1)
  {
    if ((void *)a1[3] == a1)
    {
      (*(void (**)(void *, void *))(*a1 + 24))(a1, v6);
      (*(void (**)(void))(*(void *)a1[3] + 32))(a1[3]);
      a1[3] = v7;
      unint64_t v7 = v6;
    }
    else
    {
      unint64_t v7 = (void *)a1[3];
      a1[3] = v4;
    }
  }
  std::__function::__value_func<void ()(MIL::IROperation const&)>::~__value_func[abi:ne180100](v6);
  return a1;
}

void sub_1920D79E0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void *std::__function::__value_func<void ()(MIL::IROperation const&)>::~__value_func[abi:ne180100](void *a1)
{
  int8x8_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,std::string>,std::__unordered_map_hasher<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,std::string>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::__unordered_map_equal<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,std::string>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,std::string>>>::~__hash_table(uint64_t a1)
{
  int8x8_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint8x8_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::shared_ptr<Espresso::abstract_blob_container> const,std::string>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      int8x8_t v2 = v3;
    }
    while (v3);
  }
  unint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void std::__destroy_at[abi:ne180100]<std::pair<std::shared_ptr<Espresso::abstract_blob_container> const,std::string>,0>(uint64_t a1)
{
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  int8x8_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    nitro::nitro_function::nitro_function(v2);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,Espresso::layer_shape>,std::__unordered_map_hasher<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,Espresso::layer_shape>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::__unordered_map_equal<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,Espresso::layer_shape>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,Espresso::layer_shape>>>::~__hash_table(uint64_t a1)
{
  int8x8_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint8x8_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::shared_ptr<Espresso::abstract_blob_container> const,Espresso::layer_shape>,0>(v2 + 2);
      operator delete(v2);
      int8x8_t v2 = v3;
    }
    while (v3);
  }
  unint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void std::__destroy_at[abi:ne180100]<std::pair<std::shared_ptr<Espresso::abstract_blob_container> const,Espresso::layer_shape>,0>(void *a1)
{
  int8x8_t v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  uint8x8_t v3 = (std::__shared_weak_count *)a1[1];
  if (v3)
  {
    nitro::nitro_function::nitro_function(v3);
  }
}

uint64_t Espresso::reshape_networks_graph_coloring_raw_ptr_only_in_context(void *a1, void *a2, char **a3)
{
  v212[20] = *MEMORY[0x1E4F143B8];
  uint8x8_t v3 = *a3;
  v163 = a3[1];
  if (*a3 == v163)
  {
    uint8x8_t v13 = a3;
LABEL_32:
    unint64_t v16 = 0;
    goto LABEL_33;
  }
  do
  {
    v166 = v3;
    unint64_t v4 = *(uint64_t **)(*(void *)v3 + 32);
    uint64_t v5 = *(uint64_t **)(*(void *)v3 + 40);
    if (*(void *)(*(void *)v3 + 200))
    {
      while (v4 != v5)
      {
        uint64_t v6 = *v4;
        unint64_t v7 = (std::__shared_weak_count *)v4[1];
        if (v7) {
          atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v9 = *(void *)(v6 + 104);
        uint64_t v8 = *(void *)(v6 + 112);
        while (v9 != v8)
        {
          unint64_t v10 = *(void **)v9;
          unint64_t v11 = *(std::__shared_weak_count **)(v9 + 8);
          if (v11) {
            atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          BOOL v12 = v10[9] == *a2 || *a2 == 0;
          if (v12)
          {
            uint64_t v210 = 0;
            *(_OWORD *)&v208.__r_.__value_.__r.__words[1] = 0u;
            long long __p = 0u;
            long long v207 = 0uLL;
            v208.__r_.__value_.__r.__words[0] = 0xFFFFFFFF00000000;
            v199 = 0;
            uint64_t v198 = 0;
            (*(void (**)(void *, long long *, uint64_t *))(*v10 + 16))(v10, &v207, &v198);
            if (v199) {
              nitro::nitro_function::nitro_function(v199);
            }
            if ((void)__p)
            {
              *((void *)&__p + 1) = __p;
              operator delete((void *)__p);
            }
          }
          if (v11) {
            nitro::nitro_function::nitro_function(v11);
          }
          v9 += 16;
        }
        if (v7) {
          nitro::nitro_function::nitro_function(v7);
        }
        v4 += 2;
      }
    }
    else if (v4 != v5)
    {
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "network not prepared for reshape_networks");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    uint8x8_t v3 = v166 + 8;
  }
  while (v166 + 8 != v163);
  uint8x8_t v13 = a3;
  BOOL v14 = *a3;
  uint64_t v15 = a3[1];
  if (*a3 == v15) {
    goto LABEL_32;
  }
  unint64_t v16 = 0;
  do
  {
    uint64_t v17 = *(void *)v14;
    v14 += 8;
    v16 += *(void *)(v17 + 160);
  }
  while (v14 != v15);
LABEL_33:
  memset(v196, 0, sizeof(v196));
  int v197 = 1065353216;
  *(_OWORD *)v193 = 0u;
  *(_OWORD *)v194 = 0u;
  int v195 = 1065353216;
  *(_OWORD *)v190 = 0u;
  *(_OWORD *)v191 = 0u;
  int v192 = 1065353216;
  memset(v188, 0, sizeof(v188));
  int v189 = 1065353216;
  memset(v186, 0, sizeof(v186));
  int v187 = 1065353216;
  memset(v184, 0, sizeof(v184));
  int v185 = 1065353216;
  memset(v182, 0, sizeof(v182));
  int v183 = 1065353216;
  *(void *)&long long v207 = 0;
  std::vector<unsigned long>::vector(v181, v16, &v207);
  unint64_t v18 = *v13;
  v159 = v13[1];
  if (*v13 == v159)
  {
    unint64_t v35 = *v13;
  }
  else
  {
    uint64_t v19 = a2;
    do
    {
      v164 = v18;
      uint64_t v20 = *(void *)v18;
      uint64_t v21 = *(uint64_t **)(*(void *)v18 + 152);
      if (v21)
      {
        uint64_t v22 = v20 + 184;
        uint64_t v23 = (void *)(v20 + 192);
        do
        {
          uint64_t v24 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>(v22, v21 + 2);
          if (v23 == v24)
          {
            uint64_t v210 = 0;
            *(_OWORD *)&v208.__r_.__value_.__r.__words[1] = 0u;
            long long __p = 0u;
            long long v207 = xmmword_192DC3600;
            v208.__r_.__value_.__r.__words[0] = 0xFFFFFFFF00000001;
          }
          else
          {
            long long v25 = *(_OWORD *)(v24 + 9);
            long long v207 = *(_OWORD *)(v24 + 7);
            *(_OWORD *)&v208.__r_.__value_.__l.__data_ = v25;
            uint64_t v26 = (const void *)v24[12];
            v208.__r_.__value_.__r.__words[2] = v24[11];
            long long __p = 0uLL;
            uint64_t v210 = 0;
            std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v26, v24[13], (uint64_t)(v24[13] - (void)v26) >> 2);
          }
          uint64_t v27 = (unint64_t *)(v21 + 5);
          uint64_t v28 = std::__hash_table<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,Espresso::layer_shape>,std::__unordered_map_hasher<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,Espresso::layer_shape>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::__unordered_map_equal<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,Espresso::layer_shape>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,Espresso::layer_shape>>>::__emplace_unique_key_args<std::shared_ptr<Espresso::abstract_blob_container>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<Espresso::abstract_blob_container> const&>,std::tuple<>>((uint64_t)v188, v21[5], v21 + 5);
          std::string::size_type v29 = v208.__r_.__value_.__r.__words[2];
          long long v30 = *(_OWORD *)&v208.__r_.__value_.__l.__data_;
          *((_OWORD *)v28 + 2) = v207;
          *((_OWORD *)v28 + 3) = v30;
          v28[8] = v29;
          if (v28 + 4 != (void *)&v207) {
            std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)v28 + 72, (char *)__p, *((uint64_t *)&__p + 1), (uint64_t)(*((void *)&__p + 1) - __p) >> 2);
          }
          float v31 = std::__hash_table<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,std::string>,std::__unordered_map_hasher<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,std::string>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::__unordered_map_equal<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,std::string>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,std::string>>>::__emplace_unique_key_args<std::shared_ptr<Espresso::abstract_blob_container>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<Espresso::abstract_blob_container> const&>,std::tuple<>>((uint64_t)v186, *v27, v21 + 5);
          std::string::operator=((std::string *)(v31 + 4), (const std::string *)(v21 + 2));
          if (*(void *)(*v27 + 72) == *v19 || !*v19)
          {
            unint64_t v32 = (std::__shared_weak_count *)operator new(0x98uLL);
            v32->__shared_weak_owners_ = 0;
            v32->__shared_owners_ = 0;
            v32->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3896B8;
            *(_OWORD *)&v32[2].__shared_weak_owners_ = 0u;
            *(_OWORD *)&v32[3].__shared_owners_ = 0u;
            *(_OWORD *)&v32[1].__shared_owners_ = 0u;
            v32[2].std::__shared_count = 0u;
            v32[4].std::__shared_count = 0u;
            *(_OWORD *)&v32[4].__shared_weak_owners_ = 0u;
            *(_OWORD *)&v32[5].__shared_owners_ = 0u;
            v32[5].__shared_weak_owners_ = 0;
            v32[6].__vftable = 0;
            LODWORD(v32[2].__vftable) = 1065353216;
            v32[2].__shared_owners_ = 0x1FFFFFFFFLL;
            v32[4].__vftable = 0;
            v32[4].__shared_owners_ = 0;
            v32[2].__shared_weak_owners_ = 0;
            v32[3].__vftable = 0;
            LOBYTE(v32[3].__shared_weak_owners_) = 0;
            v32[3].__shared_owners_ = 0;
            v32[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36B910;
            v32[5].__vftable = 0;
            LOBYTE(v32[6].__vftable) = 0;
            v32[5].__shared_owners_ = 0;
            LOBYTE(v32[4].__shared_weak_owners_) = 1;
            unint64_t v33 = *v27;
            v179 = v32 + 1;
            v180 = v32;
            atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
            (*(void (**)(unint64_t, long long *, std::__shared_weak_count **))(*(void *)v33 + 16))(v33, &v207, &v179);
            if (v180) {
              nitro::nitro_function::nitro_function(v180);
            }
            BOOL v34 = v32[5].__vftable;
            std::__hash_table<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,unsigned long>,std::__unordered_map_hasher<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,unsigned long>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::__unordered_map_equal<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,unsigned long>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,unsigned long>>>::__emplace_unique_key_args<std::shared_ptr<Espresso::abstract_blob_container>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<Espresso::abstract_blob_container> const&>,std::tuple<>>(v184, *v27, v21 + 5)[4] = v34;
            nitro::nitro_function::nitro_function(v32);
            uint64_t v19 = a2;
          }
          if ((void)__p)
          {
            *((void *)&__p + 1) = __p;
            operator delete((void *)__p);
          }
          uint64_t v21 = (uint64_t *)*v21;
        }
        while (v21);
      }
      v18 += 8;
    }
    while (v164 + 8 != v159);
    uint8x8_t v13 = a3;
    unint64_t v18 = *a3;
    unint64_t v35 = a3[1];
  }
  if (v35 - v18 == 8)
  {
    if (*a2)
    {
      int v36 = (***(uint64_t (****)(void))(*a2 + 8))(*(void *)(*a2 + 8));
      unint64_t v18 = *v13;
      if (v36)
      {
        uint64_t v37 = *(void *)v18;
        std::string::basic_string[abi:ne180100]<0>(&v207, "colors_file");
        std::string::basic_string[abi:ne180100]<0>(&v204, "");
        Espresso::map_const_get<std::map<std::string,std::string>>(v37 + 472, (uint64_t)&v207, (uint64_t)&v204, (std::string *)v176);
        if (SBYTE7(v205) < 0) {
          operator delete((void *)v204);
        }
        if (v208.__r_.__value_.__s.__data_[7] < 0) {
          operator delete((void *)v207);
        }
        int8x8_t v38 = getenv("ESPRESSO_COLOR_FILE");
        if (v38) {
          MEMORY[0x192FF0F50](v176, v38);
        }
        if ((v176[23] & 0x80000000) != 0)
        {
          unint64_t v39 = *(unsigned char **)v176;
          if (*(void *)&v176[8])
          {
LABEL_66:
            if (*v39 != 47)
            {
              uint64_t v40 = *(void *)v18;
              if ((*(char *)(*(void *)v18 + 1047) & 0x80000000) == 0)
              {
                if (!*(unsigned char *)(*(void *)v18 + 1047)) {
                  goto LABEL_252;
                }
LABEL_232:
                if (*(char *)(*(void *)v18 + 1047) >= 0) {
                  size_t v134 = *(unsigned __int8 *)(*(void *)v18 + 1047);
                }
                else {
                  size_t v134 = *(void *)(v40 + 1032);
                }
                int v135 = &v207;
                std::string::basic_string[abi:ne180100]((uint64_t)&v207, v134 + 1);
                if (v208.__r_.__value_.__s.__data_[7] < 0) {
                  int v135 = (long long *)v207;
                }
                if (v134)
                {
                  if (*(char *)(v40 + 1047) >= 0) {
                    unint64_t v136 = (const void *)(v40 + 1024);
                  }
                  else {
                    unint64_t v136 = *(const void **)(v40 + 1024);
                  }
                  memmove(v135, v136, v134);
                }
                *(_WORD *)((char *)v135 + v134) = 47;
                if (v176[23] >= 0) {
                  v137 = v176;
                }
                else {
                  v137 = *(const std::string::value_type **)v176;
                }
                if (v176[23] >= 0) {
                  std::string::size_type v138 = v176[23];
                }
                else {
                  std::string::size_type v138 = *(void *)&v176[8];
                }
                v139 = std::string::append((std::string *)&v207, v137, v138);
                std::string::size_type v140 = v139->__r_.__value_.__r.__words[0];
                *(void *)&long long v204 = v139->__r_.__value_.__l.__size_;
                *(void *)((char *)&v204 + 7) = *(std::string::size_type *)((char *)&v139->__r_.__value_.__r.__words[1]
                                                                           + 7);
                char v141 = HIBYTE(v139->__r_.__value_.__r.__words[2]);
                v139->__r_.__value_.__l.__size_ = 0;
                v139->__r_.__value_.__r.__words[2] = 0;
                v139->__r_.__value_.__r.__words[0] = 0;
                if ((v176[23] & 0x80000000) != 0) {
                  operator delete(*(void **)v176);
                }
                *(void *)v176 = v140;
                *(void *)&v176[8] = v204;
                *(void *)&v176[15] = *(void *)((char *)&v204 + 7);
                v176[23] = v141;
                if (v208.__r_.__value_.__s.__data_[7] < 0) {
                  operator delete((void *)v207);
                }
                goto LABEL_252;
              }
              if (*(void *)(v40 + 1032)) {
                goto LABEL_232;
              }
            }
LABEL_252:
            std::ifstream::basic_ifstream((uint64_t *)&v207);
            if (*(_DWORD *)((char *)&v208.__r_.__value_.__r.__words[2] + *(void *)(v207 - 24)))
            {
              if (v176[23] >= 0) {
                v151 = v176;
              }
              else {
                v151 = *(unsigned char **)v176;
              }
              Espresso::throw_exception_selector<Espresso::io_error,char const*>("Cannot load '%s'", (uint64_t)v151);
            }
            v142 = Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::shared();
            std::string::basic_string[abi:ne180100]<0>(&v204, "json");
            Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::make(v171, (uint64_t)v142, &v204);
            if (SBYTE7(v205) < 0) {
              operator delete((void *)v204);
            }
            uint64_t v143 = *(void *)&v171[0];
            (*(void (**)(void, long long *))(**(void **)&v171[0] + 280))(*(void *)&v171[0], &v207);
            std::string::basic_string[abi:ne180100]<0>(&v204, "colors");
            (*(void (**)(uint8_t *__return_ptr, uint64_t, long long *))(*(void *)v143 + 120))(buf, v143, &v204);
            if (SBYTE7(v205) < 0) {
              operator delete((void *)v204);
            }
            long long v173 = 0uLL;
            *(void *)&long long v174 = 0;
            (*(void (**)(void, long long *))(**(void **)buf + 32))(*(void *)buf, &v173);
            v145 = (unsigned __int8 *)*((void *)&v173 + 1);
            for (uint64_t i = (unsigned __int8 *)v173; i != v145; i += 24)
            {
              int v146 = (*(uint64_t (**)(void, unsigned __int8 *))(**(void **)buf + 40))(*(void *)buf, i);
              v147 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>((void *)(*(void *)v18 + 136), i);
              if (!v147) {
                std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
              }
              *((_DWORD *)std::__hash_table<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,int>,std::__unordered_map_hasher<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,int>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::__unordered_map_equal<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,int>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,int>>>::__emplace_unique_key_args<std::shared_ptr<Espresso::abstract_blob_container>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<Espresso::abstract_blob_container> const&>,std::tuple<>>((uint64_t *)v196, *((void *)v147 + 5), (void *)v147 + 5)+ 8) = v146;
            }
            for (j = *(long long **)(*(void *)v18 + 152); j; j = *(long long **)j)
            {
              std::pair<std::string const,std::shared_ptr<Espresso::blob<float,4>>>::pair[abi:ne180100]((std::string *)&v204, j + 1);
              if (!std::__hash_table<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,int>,std::__unordered_map_hasher<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,int>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::__unordered_map_equal<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,int>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,int>>>::find<std::shared_ptr<Espresso::abstract_blob_container>>(*(uint64_t *)v196, *(unint64_t *)&v196[8], *((unint64_t *)&v205 + 1)))
              {
                v150 = &v204;
                if (SBYTE7(v205) < 0) {
                  v150 = (long long *)v204;
                }
                v178 = v150;
                Espresso::throw_exception_selector<Espresso::invalid_state_error,char const*>("missing color for: %s", &v178);
              }
              if (v206) {
                nitro::nitro_function::nitro_function(v206);
              }
              if (SBYTE7(v205) < 0) {
                operator delete((void *)v204);
              }
            }
            Espresso::allocate_blobs((std::__shared_weak_count *)v196, (const char *)v184, v188);
            *a1 = 0;
            a1[1] = 0;
            *(void *)&long long v204 = &v173;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v204);
            if (*(void *)v201) {
              nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)v201);
            }
            if (*((void *)&v171[0] + 1)) {
              nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v171[0] + 1));
            }
            *(void *)&long long v207 = *MEMORY[0x1E4FBA3F8];
            *(void *)((char *)&v207 + *(void *)(v207 - 24)) = *(void *)(MEMORY[0x1E4FBA3F8] + 24);
            MEMORY[0x192FF1040](&v208);
            std::istream::~istream();
            MEMORY[0x192FF15B0](v212);
            if ((v176[23] & 0x80000000) != 0) {
              operator delete(*(void **)v176);
            }
            goto LABEL_127;
          }
          operator delete(*(void **)v176);
        }
        else if (v176[23])
        {
          unint64_t v39 = v176;
          goto LABEL_66;
        }
        unint64_t v18 = *v13;
      }
    }
  }
  uint64_t v41 = v13[1];
  if (v18 == v41) {
    goto LABEL_103;
  }
  int v42 = 0;
  do
  {
    unint64_t v43 = *(unsigned __int8 **)(*(void *)v18 + 232);
    uint64_t v44 = *(void *)v18 + 240;
    if (v43 != (unsigned __int8 *)v44)
    {
      do
      {
        uint64_t v45 = *(void *)v18 + 136;
        *(void *)&long long v207 = v43 + 32;
        char v46 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v45, v43 + 32, (long long **)&v207);
        uint64_t v48 = (unint64_t *)(v46 + 40);
        unint64_t v47 = *((void *)v46 + 5);
        if (v47)
        {
          if (*(void *)(v47 + 72) == *a2 || *a2 == 0)
          {
            *((_DWORD *)std::__hash_table<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,int>,std::__unordered_map_hasher<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,int>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::__unordered_map_equal<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,int>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,int>>>::__emplace_unique_key_args<std::shared_ptr<Espresso::abstract_blob_container>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<Espresso::abstract_blob_container> const&>,std::tuple<>>((uint64_t *)v196, v47, v48)+ 8) = v42;
            uint64_t v50 = std::__hash_table<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,unsigned long>,std::__unordered_map_hasher<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,unsigned long>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::__unordered_map_equal<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,unsigned long>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,unsigned long>>>::__emplace_unique_key_args<std::shared_ptr<Espresso::abstract_blob_container>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<Espresso::abstract_blob_container> const&>,std::tuple<>>(v184, *v48, v48);
            *((void *)v181[0] + v42) = v50[4];
            std::__hash_table<std::shared_ptr<Espresso::abstract_blob_container>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>::__emplace_unique_key_args<std::shared_ptr<Espresso::abstract_blob_container>,std::shared_ptr<Espresso::abstract_blob_container> const&>((uint64_t)v193, *((void *)v46 + 5), *((void *)v46 + 5), *((void *)v46 + 6));
            ++v42;
          }
        }
        uint64_t v51 = (unsigned __int8 *)*((void *)v43 + 1);
        if (v51)
        {
          do
          {
            uint64_t v52 = v51;
            uint64_t v51 = *(unsigned __int8 **)v51;
          }
          while (v51);
        }
        else
        {
          do
          {
            uint64_t v52 = (unsigned __int8 *)*((void *)v43 + 2);
            BOOL v12 = *(void *)v52 == (void)v43;
            unint64_t v43 = v52;
          }
          while (!v12);
        }
        unint64_t v43 = v52;
      }
      while (v52 != (unsigned __int8 *)v44);
    }
    v18 += 8;
  }
  while (v18 != v41);
  uint64_t v53 = *v13;
  v160 = v13[1];
  if (*v13 == v160) {
    goto LABEL_103;
  }
  do
  {
    v165 = v53;
    uint64_t v54 = *(void *)v53 + 184;
    uint64_t v55 = *(void *)v53 + 152;
    uint64_t v56 = *(void *)v53 + 192;
    while (1)
    {
      uint64_t v55 = *(void *)v55;
      if (!v55) {
        break;
      }
      unint64_t v57 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>(v54, (void *)(v55 + 16));
      if ((void *)v56 == v57)
      {
        uint64_t v210 = 0;
        *(_OWORD *)&v208.__r_.__value_.__r.__words[1] = 0u;
        long long __p = 0u;
        long long v207 = xmmword_192DC3600;
        v208.__r_.__value_.__r.__words[0] = 0xFFFFFFFF00000001;
      }
      else
      {
        long long v58 = *(_OWORD *)(v57 + 9);
        long long v207 = *(_OWORD *)(v57 + 7);
        *(_OWORD *)&v208.__r_.__value_.__l.__data_ = v58;
        unint64_t v59 = (const void *)v57[12];
        v208.__r_.__value_.__r.__words[2] = v57[11];
        long long __p = 0uLL;
        uint64_t v210 = 0;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v59, v57[13], (uint64_t)(v57[13] - (void)v59) >> 2);
      }
      unint64_t v60 = std::__hash_table<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,Espresso::layer_shape>,std::__unordered_map_hasher<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,Espresso::layer_shape>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::__unordered_map_equal<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,Espresso::layer_shape>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,Espresso::layer_shape>>>::__emplace_unique_key_args<std::shared_ptr<Espresso::abstract_blob_container>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<Espresso::abstract_blob_container> const&>,std::tuple<>>((uint64_t)v188, *(void *)(v55 + 40), (void *)(v55 + 40));
      uint64_t v61 = (void *)v60[9];
      std::string::size_type v62 = v208.__r_.__value_.__r.__words[2];
      long long v63 = *(_OWORD *)&v208.__r_.__value_.__l.__data_;
      *((_OWORD *)v60 + 2) = v207;
      *((_OWORD *)v60 + 3) = v63;
      v60[8] = v62;
      if (v61)
      {
        v60[10] = v61;
        operator delete(v61);
        v60[9] = 0;
        v60[10] = 0;
        v60[11] = 0;
      }
      *(_OWORD *)(v60 + 9) = __p;
      v60[11] = v210;
      unint64_t v64 = std::__hash_table<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,std::string>,std::__unordered_map_hasher<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,std::string>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::__unordered_map_equal<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,std::string>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,std::string>>>::__emplace_unique_key_args<std::shared_ptr<Espresso::abstract_blob_container>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<Espresso::abstract_blob_container> const&>,std::tuple<>>((uint64_t)v186, *(void *)(v55 + 40), (void *)(v55 + 40));
      std::string::operator=((std::string *)(v64 + 4), (const std::string *)(v55 + 16));
    }
    uint64_t v53 = v165 + 8;
  }
  while (v165 + 8 != v160);
  if (*a3 == a3[1])
  {
LABEL_103:
    long long v204 = 0u;
    long long v205 = 0u;
    LODWORD(v206) = 1065353216;
    goto LABEL_104;
  }
  uint64_t v65 = *(void *)*a3;
  std::string::basic_string[abi:ne180100]<0>(&v204, "nitro");
  std::string::basic_string[abi:ne180100]<0>(v176, "0");
  v66 = a2;
  Espresso::map_const_get<std::map<std::string,std::string>>(v65 + 472, (uint64_t)&v204, (uint64_t)v176, (std::string *)&v207);
  if (v208.__r_.__value_.__s.__data_[7] < 0)
  {
    BOOL v67 = *((void *)&v207 + 1) == 1 && *(unsigned __int8 *)v207 == 49;
    operator delete((void *)v207);
  }
  else
  {
    BOOL v67 = v208.__r_.__value_.__s.__data_[7] == 1 && v207 == 49;
  }
  if ((v176[23] & 0x80000000) != 0) {
    operator delete(*(void **)v176);
  }
  if (SBYTE7(v205) < 0) {
    operator delete((void *)v204);
  }
  int v85 = (uint64_t *)*a3;
  v84 = (uint64_t *)a3[1];
  long long v204 = 0u;
  long long v205 = 0u;
  LODWORD(v206) = 1065353216;
  v153 = v84;
  if (v85 != v84)
  {
    int v167 = !v67;
    do
    {
      memset(v176, 0, sizeof(v176));
      int v177 = 1065353216;
      if (*v66) {
        unsigned int v86 = (***(uint64_t (****)(void))(*v66 + 8))(*(void *)(*v66 + 8));
      }
      else {
        unsigned int v86 = 40000;
      }
      v87 = (std::__shared_weak_count *)std::__hash_table<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::__unordered_map_hasher<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::hash<Espresso::platform>,std::equal_to<Espresso::platform>,true>,std::__unordered_map_equal<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::equal_to<Espresso::platform>,std::hash<Espresso::platform>,true>,std::allocator<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>>>::find<Espresso::platform>((void *)(*v85 + 528), v86);
      if (v87)
      {
        uint64_t v88 = v87;
        v87 = (std::__shared_weak_count *)v87[1].__vftable;
        shared_owners = (std::__shared_weak_count *)v88[1].__shared_owners_;
        v155 = shared_owners;
        if (shared_owners) {
          atomic_fetch_add_explicit(&shared_owners->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (v87)
        {
          v157 = v87;
          if (v87)
          {
            if (shared_owners) {
              atomic_fetch_add_explicit(&shared_owners->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            if (*v66)
            {
              long long v173 = 0u;
              long long v174 = 0u;
              int v175 = 1065353216;
              uint64_t v90 = v87[1].__shared_owners_;
              if (v87[1].__shared_weak_owners_ != v90)
              {
                unint64_t v91 = 0;
                do
                {
                  memset(v171, 0, sizeof(v171));
                  int v172 = 1065353216;
                  int v92 = *(_DWORD *)(v90 + 120 * v91);
                  unint64_t v93 = (v92 - 1);
                  if (v92 >= 1)
                  {
                    uint64_t v94 = *v85;
                    uint64_t v95 = *(void *)(*(void *)(*v85 + 32) + 16 * (v92 - 1));
                    v96 = *(const void **)(v95 + 64);
                    if (v96)
                    {
                      {
                        unint64_t v97 = *(std::__shared_weak_count **)(v95 + 72);
                        if (v97)
                        {
                          atomic_fetch_add_explicit(&v97->__shared_owners_, 1uLL, memory_order_relaxed);
                          nitro::nitro_function::nitro_function(v97);
                          uint64_t v94 = *v85;
                        }
                        *(void *)&long long v207 = v93;
                        uint64_t v98 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v94 + 96, v93, &v207);
                        uint64_t v100 = v98[3];
                        uint64_t v99 = v98[4];
                        while (v100 != v99)
                        {
                          std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v171, v100, v100);
                          v100 += 24;
                        }
                      }
                    }
                  }
                  std::unordered_set<std::string>::unordered_set((uint64_t)&v207, v90 + 120 * v91 + 16);
                  int v161 = v93;
                  std::unordered_set<std::string>::unordered_set((uint64_t)&__p, v90 + 120 * v91 + 56);
                  std::unordered_set<std::string>::unordered_set((uint64_t)&v211, (uint64_t)v171);
                  for (uint64_t k = 0; k != 3; ++k)
                  {
                    for (m = (char *)&v207 + 40 * k + 16;
                          ;
                          std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)&v173, (uint64_t)(m + 16), (uint64_t)(m + 16)))
                    {
                      m = *(unsigned char **)m;
                      if (!m) {
                        break;
                      }
                      uint64_t v103 = *v85 + 136;
                      *(void *)buf = m + 16;
                      int v104 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v103, m + 16, (long long **)buf);
                      v105 = (Espresso *)Espresso::allocate_and_color_blob((void *)m + 2, (uint64_t)(v104 + 40), (uint64_t)v193, (uint64_t)v196, (uint64_t)&v204, *v85, v16, 0, v184[0], v184[1], v181);
                      int v106 = (int)v105;
                      unint64_t v108 = Espresso::espresso_os_log_subsystem(v105, v107);
                      if (os_log_type_enabled(v108, OS_LOG_TYPE_DEBUG))
                      {
                        uint64_t v109 = m + 16;
                        if ((char)m[39] < 0) {
                          uint64_t v109 = (unsigned char *)*((void *)m + 2);
                        }
                        *(_DWORD *)buf = 67109634;
                        *(_DWORD *)&buf[4] = v91;
                        *(_WORD *)v201 = 2080;
                        *(void *)&v201[2] = v109;
                        __int16 v202 = 1024;
                        int v203 = v106;
                        _os_log_debug_impl(&dword_1920CB000, v108, OS_LOG_TYPE_DEBUG, "GColor segment=%d blob=%s color=%d", buf, 0x18u);
                      }
                    }
                  }
                  for (uint64_t n = 80; n != -40; n -= 40)
                    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v207 + n);
                  Espresso::deallocate_dead_blobs((uint64_t *)v193, v161 & ~(v161 >> 31), v190, *v85, (uint64_t *)v176);
                  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v171);
                  ++v91;
                  uint64_t v90 = v157[1].__shared_owners_;
                }
                while (0xEEEEEEEEEEEEEEEFLL * ((v157[1].__shared_weak_owners_ - v90) >> 3) > v91);
              }
              for (iuint64_t i = *(long long **)(*v85 + 152); ii; iuint64_t i = *(long long **)ii)
              {
                std::pair<std::string const,std::shared_ptr<Espresso::blob<float,4>>>::pair[abi:ne180100]((std::string *)&v207, ii + 1);
                if (!std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(&v173, (uint64_t)&v207))
                {
                  std::string::size_type size = v208.__r_.__value_.__l.__size_;
                  if (*(void *)(v208.__r_.__value_.__l.__size_ + 72) == *v66 || *v66 == 0)
                  {
                    uint64_t v114 = (uint64_t **)(*v85 + 184);
                    *(void *)&v171[0] = &v207;
                    v115 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v114, &v207, (long long **)v171);
                    uint64_t v169 = 0;
                    v170 = 0;
                    (*(void (**)(std::string::size_type, char *, uint64_t *))(*(void *)size + 16))(size, v115 + 56, &v169);
                    if (v170) {
                      nitro::nitro_function::nitro_function(v170);
                    }
                  }
                }
                if (v208.__r_.__value_.__r.__words[2]) {
                  nitro::nitro_function::nitro_function((std::__shared_weak_count *)v208.__r_.__value_.__r.__words[2]);
                }
                if (v208.__r_.__value_.__s.__data_[7] < 0) {
                  operator delete((void *)v207);
                }
              }
              std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v173);
              v87 = v155;
              shared_owners = v155;
              if (!v155) {
                goto LABEL_225;
              }
LABEL_224:
              nitro::nitro_function::nitro_function(v87);
              goto LABEL_225;
            }
            v87 = shared_owners;
          }
        }
      }
      else
      {
        shared_owners = 0;
      }
      v116 = *(uint64_t **)(*v85 + 32);
      v162 = *(uint64_t **)(*v85 + 40);
      if (v116 == v162)
      {
        if (!v87) {
          goto LABEL_225;
        }
        goto LABEL_224;
      }
      v156 = v87;
      v158 = shared_owners;
      unint64_t v117 = 0;
      do
      {
        uint64_t v118 = *(void *)(*v116 + 112) - *(void *)(*v116 + 104);
        if (v118)
        {
          uint64_t v119 = 0;
          uint64_t v120 = 0;
          unint64_t v121 = v118 >> 4;
          if (v121 <= 1) {
            uint64_t v122 = 1;
          }
          else {
            uint64_t v122 = v121;
          }
          while (2)
          {
            uint64_t v123 = *v116;
            uint64_t v124 = *(void *)(*v116 + 104) + v119;
            if (*(void *)(*(void *)v124 + 72) != *v66 && *v66 != 0) {
              goto LABEL_221;
            }
            long long v126 = (void *)(v123 + 40);
            int v127 = *(char *)(v123 + 63);
            if (v127 < 0)
            {
              if (*(void *)(v123 + 48) != 13) {
                goto LABEL_219;
              }
              long long v126 = (void *)*v126;
            }
            else if (v127 != 13)
            {
LABEL_219:
              BOOL v131 = 0;
              goto LABEL_220;
            }
            int v128 = (void *)*v126;
            uint64_t v129 = *(void *)((char *)v126 + 5);
            BOOL v131 = v128 == (void *)0x6E6F635F64616F6CLL && v129 == 0x746E6174736E6F63;
LABEL_220:
            uint64_t v132 = *v85 + 96;
            *(void *)&long long v207 = v117;
            int v133 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v132, v117, &v207);
            Espresso::allocate_and_color_blob((void *)(v133[3] + v120), v124, (uint64_t)v193, (uint64_t)v196, (uint64_t)&v204, *v85, v16, v167 & v131, v184[0], v184[1], v181);
            v66 = a2;
LABEL_221:
            v120 += 24;
            v119 += 16;
            if (!--v122) {
              break;
            }
            continue;
          }
        }
        Espresso::deallocate_dead_blobs((uint64_t *)v193, v117++, v190, *v85, (uint64_t *)v176);
        v116 += 2;
      }
      while (v116 != v162);
      v87 = v156;
      shared_owners = v158;
      if (v156) {
        goto LABEL_224;
      }
LABEL_225:
      if (shared_owners) {
        nitro::nitro_function::nitro_function(shared_owners);
      }
      std::__hash_table<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,unsigned long>,std::__unordered_map_hasher<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,unsigned long>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::__unordered_map_equal<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,unsigned long>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,unsigned long>>>::~__hash_table((uint64_t)v176);
      ++v85;
    }
    while (v85 != v153);
  }
LABEL_104:
  Espresso::allocate_blobs((std::__shared_weak_count *)v196, (const char *)v184, v188);
  long long v207 = 0u;
  *(_OWORD *)&v208.__r_.__value_.__l.__data_ = 0u;
  LODWORD(v208.__r_.__value_.__r.__words[2]) = 1065353216;
  unint64_t v68 = *a3;
  v69 = a3[1];
  if (*a3 != v69)
  {
    do
    {
      for (jj = *(unsigned __int8 **)(*(void *)v68 + 152); jj; jj = *(unsigned __int8 **)jj)
      {
        if (*(void *)&v196[8])
        {
          unint64_t v71 = *((void *)jj + 5);
          unint64_t v72 = 0x9DDFEA08EB382D69 * (((8 * v71) + 8) ^ HIDWORD(v71));
          unint64_t v73 = 0x9DDFEA08EB382D69 * (HIDWORD(v71) ^ (v72 >> 47) ^ v72);
          unint64_t v74 = 0x9DDFEA08EB382D69 * (v73 ^ (v73 >> 47));
          uint8x8_t v75 = (uint8x8_t)vcnt_s8(*(int8x8_t *)&v196[8]);
          v75.i16[0] = vaddlv_u8(v75);
          if (v75.u32[0] > 1uLL)
          {
            unint64_t v76 = v74;
            if (v74 >= *(void *)&v196[8]) {
              unint64_t v76 = v74 % *(void *)&v196[8];
            }
          }
          else
          {
            unint64_t v76 = v74 & (*(void *)&v196[8] - 1);
          }
          v77 = *(void **)(*(void *)v196 + 8 * v76);
          if (v77)
          {
            for (kuint64_t k = (void *)*v77; kk; kuint64_t k = (void *)*kk)
            {
              unint64_t v79 = kk[1];
              if (v79 == v74)
              {
                if (kk[2] == v71)
                {
                  int v80 = *((_DWORD *)std::__hash_table<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,int>,std::__unordered_map_hasher<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,int>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::__unordered_map_equal<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,int>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,int>>>::__emplace_unique_key_args<std::shared_ptr<Espresso::abstract_blob_container>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<Espresso::abstract_blob_container> const&>,std::tuple<>>((uint64_t *)v196, v71, (void *)jj + 5)+ 8);
                  *(void *)v176 = jj + 16;
                  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v207, jj + 16, (uint64_t)&std::piecewise_construct, (long long **)v176)+ 10) = v80;
                  break;
                }
              }
              else
              {
                if (v75.u32[0] > 1uLL)
                {
                  if (v79 >= *(void *)&v196[8]) {
                    v79 %= *(void *)&v196[8];
                  }
                }
                else
                {
                  v79 &= *(void *)&v196[8] - 1;
                }
                if (v79 != v76) {
                  break;
                }
              }
            }
          }
        }
      }
      v68 += 8;
    }
    while (v68 != v69);
  }
  std::allocate_shared[abi:ne180100]<Espresso::analysis_pass_graph_coloring,std::allocator<Espresso::analysis_pass_graph_coloring>,std::unordered_map<std::string,int>,std::vector<unsigned long>,void>(a1, (uint64_t)&v207, (uint64_t)v181);
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__deallocate_node((void **)v208.__r_.__value_.__l.__data_);
  unint64_t v81 = (void *)v207;
  *(void *)&long long v207 = 0;
  if (v81) {
    operator delete(v81);
  }
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&v204);
LABEL_127:
  if (v181[0])
  {
    v181[1] = v181[0];
    operator delete(v181[0]);
  }
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)v182);
  std::__hash_table<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,unsigned long>,std::__unordered_map_hasher<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,unsigned long>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::__unordered_map_equal<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,unsigned long>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,unsigned long>>>::~__hash_table((uint64_t)v184);
  std::__hash_table<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,std::string>,std::__unordered_map_hasher<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,std::string>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::__unordered_map_equal<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,std::string>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,std::string>>>::~__hash_table((uint64_t)v186);
  std::__hash_table<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,Espresso::layer_shape>,std::__unordered_map_hasher<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,Espresso::layer_shape>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::__unordered_map_equal<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,Espresso::layer_shape>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,Espresso::layer_shape>>>::~__hash_table((uint64_t)v188);
  std::__hash_table<std::shared_ptr<Espresso::abstract_blob_container>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>::__deallocate_node((void *)v191[0]);
  if (v190[0]) {
    operator delete(v190[0]);
  }
  std::__hash_table<std::shared_ptr<Espresso::abstract_blob_container>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>::__deallocate_node((void *)v194[0]);
  v82 = v193[0];
  v193[0] = 0;
  if (v82) {
    operator delete(v82);
  }
  return std::__hash_table<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,unsigned long>,std::__unordered_map_hasher<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,unsigned long>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::__unordered_map_equal<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,unsigned long>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,unsigned long>>>::~__hash_table((uint64_t)v196);
}

void sub_1920D915C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,char a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62,uint64_t a63)
{
  if (SLOBYTE(STACK[0x327]) < 0) {
    operator delete((void *)STACK[0x310]);
  }
  if (a46 < 0) {
    operator delete(a41);
  }
  if (a53) {
    operator delete(a53);
  }
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&a56);
  std::__hash_table<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,unsigned long>,std::__unordered_map_hasher<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,unsigned long>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::__unordered_map_equal<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,unsigned long>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,unsigned long>>>::~__hash_table((uint64_t)&a62);
  std::__hash_table<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,std::string>,std::__unordered_map_hasher<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,std::string>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::__unordered_map_equal<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,std::string>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,std::string>>>::~__hash_table((uint64_t)&a68);
  std::__hash_table<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,Espresso::layer_shape>,std::__unordered_map_hasher<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,Espresso::layer_shape>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::__unordered_map_equal<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,Espresso::layer_shape>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,Espresso::layer_shape>>>::~__hash_table((uint64_t)&a72);
  std::__hash_table<std::shared_ptr<Espresso::abstract_blob_container>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>::__deallocate_node((void *)STACK[0x230]);
  if (STACK[0x220]) {
    operator delete((void *)STACK[0x220]);
  }
  std::__hash_table<std::shared_ptr<Espresso::abstract_blob_container>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>::__deallocate_node((void *)STACK[0x260]);
  unint64_t v73 = (void *)STACK[0x250];
  STACK[0x250] = 0;
  if (v73) {
    operator delete(v73);
  }
  std::__hash_table<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,unsigned long>,std::__unordered_map_hasher<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,unsigned long>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::__unordered_map_equal<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,unsigned long>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,unsigned long>>>::~__hash_table((uint64_t)&STACK[0x280]);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,Espresso::layer_shape>,std::__unordered_map_hasher<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,Espresso::layer_shape>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::__unordered_map_equal<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,Espresso::layer_shape>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,Espresso::layer_shape>>>::__emplace_unique_key_args<std::shared_ptr<Espresso::abstract_blob_container>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<Espresso::abstract_blob_container> const&>,std::tuple<>>(uint64_t a1, unint64_t a2, void *a3)
{
  unint64_t v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  unint64_t v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  unint64_t v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }
    else
    {
      unint64_t v3 = v8 & (v9 - 1);
    }
    unint64_t v11 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      for (uint64_t i = *v11; i; uint64_t i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == a2) {
            return i;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3) {
            break;
          }
        }
      }
    }
  }
  BOOL v14 = (void *)(a1 + 16);
  uint64_t v15 = (char *)operator new(0x60uLL);
  v38[0] = v15;
  v38[1] = a1 + 16;
  *(void *)uint64_t v15 = 0;
  *((void *)v15 + 1) = v8;
  uint64_t v16 = a3[1];
  *((void *)v15 + 2) = *a3;
  *((void *)v15 + 3) = v16;
  if (v16) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)v15 + 11) = 0;
  *(_OWORD *)(v15 + 72) = 0u;
  *(_OWORD *)(v15 + 56) = 0u;
  *((_OWORD *)v15 + 2) = xmmword_192DC3600;
  *((void *)v15 + 6) = 0xFFFFFFFF00000001;
  char v39 = 1;
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v9 || (float)(v18 * (float)v9) < v17)
  {
    BOOL v19 = 1;
    if (v9 >= 3) {
      BOOL v19 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v9);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      int8x8_t prime = (int8x8_t)v21;
    }
    else {
      int8x8_t prime = (int8x8_t)v20;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v9 = *(void *)(a1 + 8);
    if (*(void *)&prime > v9) {
      goto LABEL_32;
    }
    if (*(void *)&prime < v9)
    {
      unint64_t v29 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v9 < 3 || (uint8x8_t v30 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v30.i16[0] = vaddlv_u8(v30), v30.u32[0] > 1uLL))
      {
        unint64_t v29 = std::__next_prime(v29);
      }
      else
      {
        uint64_t v31 = 1 << -(char)__clz(v29 - 1);
        if (v29 >= 2) {
          unint64_t v29 = v31;
        }
      }
      if (*(void *)&prime <= v29) {
        int8x8_t prime = (int8x8_t)v29;
      }
      if (*(void *)&prime >= v9)
      {
        unint64_t v9 = *(void *)(a1 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_32:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v23 = operator new(8 * *(void *)&prime);
          uint64_t v24 = *(void **)a1;
          *(void *)a1 = v23;
          if (v24) {
            operator delete(v24);
          }
          uint64_t v25 = 0;
          *(int8x8_t *)(a1 + 8) = prime;
          do
            *(void *)(*(void *)a1 + 8 * v25++) = 0;
          while (*(void *)&prime != v25);
          uint64_t v26 = (void *)*v14;
          if (*v14)
          {
            unint64_t v27 = v26[1];
            uint8x8_t v28 = (uint8x8_t)vcnt_s8(prime);
            v28.i16[0] = vaddlv_u8(v28);
            if (v28.u32[0] > 1uLL)
            {
              if (v27 >= *(void *)&prime) {
                v27 %= *(void *)&prime;
              }
            }
            else
            {
              v27 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)a1 + 8 * v27) = v14;
            unint64_t v32 = (void *)*v26;
            if (*v26)
            {
              do
              {
                unint64_t v33 = v32[1];
                if (v28.u32[0] > 1uLL)
                {
                  if (v33 >= *(void *)&prime) {
                    v33 %= *(void *)&prime;
                  }
                }
                else
                {
                  v33 &= *(void *)&prime - 1;
                }
                if (v33 != v27)
                {
                  if (!*(void *)(*(void *)a1 + 8 * v33))
                  {
                    *(void *)(*(void *)a1 + 8 * v33) = v26;
                    goto LABEL_57;
                  }
                  *uint64_t v26 = *v32;
                  *unint64_t v32 = **(void **)(*(void *)a1 + 8 * v33);
                  **(void **)(*(void *)a1 + 8 * v33) = v32;
                  unint64_t v32 = v26;
                }
                unint64_t v33 = v27;
LABEL_57:
                uint64_t v26 = v32;
                unint64_t v32 = (void *)*v32;
                unint64_t v27 = v33;
              }
              while (v32);
            }
          }
          unint64_t v9 = (unint64_t)prime;
          goto LABEL_61;
        }
        uint64_t v37 = *(void **)a1;
        *(void *)a1 = 0;
        if (v37) {
          operator delete(v37);
        }
        unint64_t v9 = 0;
        *(void *)(a1 + 8) = 0;
      }
    }
LABEL_61:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  BOOL v34 = *(void **)(*(void *)a1 + 8 * v3);
  uint64_t i = (void *)v38[0];
  if (v34)
  {
    *(void *)v38[0] = *v34;
LABEL_74:
    void *v34 = i;
    goto LABEL_75;
  }
  *(void *)v38[0] = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(*(void *)a1 + 8 * v3) = v14;
  if (*i)
  {
    unint64_t v35 = *(void *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v35 >= v9) {
        v35 %= v9;
      }
    }
    else
    {
      v35 &= v9 - 1;
    }
    BOOL v34 = (void *)(*(void *)a1 + 8 * v35);
    goto LABEL_74;
  }
LABEL_75:
  v38[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,Espresso::layer_shape>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,Espresso::layer_shape>,void *>>>>::reset[abi:ne180100]((uint64_t)v38);
  return i;
}

void sub_1920D9928(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,Espresso::layer_shape>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,Espresso::layer_shape>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape(Espresso::ANECompilerEngine::blob_container *this, const Espresso::net *a2, const Espresso::layer_shape *a3, int a4)
{
  std::string::basic_string[abi:ne180100]<0>(&v38, "espresso.aneruntime.mix_enable_sub_batching");
  std::string::basic_string[abi:ne180100]<0>(__p, "0");
  Espresso::map_const_get<std::map<std::string,std::string>>((uint64_t)a2 + 472, (uint64_t)&v38, (uint64_t)__p, &v39);
  if (v37 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v38.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v39.__r_.__value_.__l.__size_ == 1)
    {
      unint64_t v8 = (std::string *)v39.__r_.__value_.__r.__words[0];
      goto LABEL_10;
    }
  }
  else if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) == 1)
  {
    unint64_t v8 = &v39;
LABEL_10:
    BOOL v9 = v8->__r_.__value_.__s.__data_[0] != 48;
    goto LABEL_12;
  }
  BOOL v9 = 1;
LABEL_12:
  Espresso::ANECompilerEngine::ane_arch_allow_network_override((uint64_t)a2 + 472);
  uint8x8_t v10 = (Espresso::ANECompilerEngine *)objc_claimAutoreleasedReturnValue();
  BOOL v12 = v10;
  int v13 = *((_DWORD *)a3 + 4);
  if (v13 == 1) {
    int v14 = 4;
  }
  else {
    int v14 = 5;
  }
  if (*((_DWORD *)a3 + 5) == -1) {
    int v15 = v14;
  }
  else {
    int v15 = *((_DWORD *)a3 + 5);
  }
  int v17 = *((_DWORD *)a3 + 2);
  int v16 = *((_DWORD *)a3 + 3);
  unint64_t v20 = a3;
  int v18 = *(_DWORD *)a3;
  int v19 = *((_DWORD *)v20 + 1);
  int v21 = *((unsigned __int8 *)a2 + 1281);
  *(void *)&long long v22 = 0x100000001;
  *((void *)&v22 + 1) = 0x100000001;
  *(_OWORD *)this = v22;
  *((void *)this + 2) = 0x100000001;
  *((_DWORD *)this + 6) = v15;
  *((_DWORD *)this + 7) = -1;
  if (v15 == 5 && v21)
  {
    if (v9) {
      int v23 = a4;
    }
    else {
      int v23 = v13;
    }
    *(_DWORD *)this = v23;
    *((_DWORD *)this + 1) = v16;
    *((_DWORD *)this + 2) = v17;
    *((_DWORD *)this + 3) = v19;
    *((_DWORD *)this + 7) = 0;
    int v24 = v13 / v23;
LABEL_24:
    *((_DWORD *)this + 4) = v18;
    *((_DWORD *)this + 5) = v24;
    goto LABEL_49;
  }
  if (v15 == 5)
  {
    uint64_t v25 = v10;
    char is_mix = Espresso::ANECompilerEngine::is_mix(v10, v11);
    BOOL v12 = v25;
    if ((is_mix & 1) == 0)
    {
      if (v9) {
        int v33 = a4;
      }
      else {
        int v33 = v16;
      }
      *(_DWORD *)this = v33;
      *((_DWORD *)this + 1) = v17;
      *((_DWORD *)this + 2) = v13;
      *((_DWORD *)this + 3) = v19;
      *((_DWORD *)this + 7) = 1;
      int v24 = v16 / v33;
      goto LABEL_24;
    }
  }
  unint64_t v27 = v12;
  char v28 = Espresso::ANECompilerEngine::is_mix(v12, v11);
  if (v9) {
    int v29 = a4;
  }
  else {
    int v29 = v16;
  }
  if (v28) {
    int v30 = a4;
  }
  else {
    int v30 = v29;
  }
  int v31 = v16 / v29;
  if (v28) {
    int v32 = (v16 * v13 - 1) / a4 + 1;
  }
  else {
    int v32 = v31;
  }
  *(_DWORD *)this = v30;
  *((_DWORD *)this + 5) = v32;
  if (v15 == 5)
  {
    *((_DWORD *)this + 1) = v17;
    *((_DWORD *)this + 2) = 1;
    *((_DWORD *)this + 3) = v19;
    *((_DWORD *)this + 4) = v18;
    BOOL v12 = v27;
  }
  else
  {
    BOOL v12 = v27;
    switch(v15)
    {
      case 0:
        *((_DWORD *)this + 4) = 1;
        goto LABEL_48;
      case 1:
        *((_DWORD *)this + 4) = v18;
LABEL_48:
        *(void *)&long long v34 = 0x100000001;
        *((void *)&v34 + 1) = 0x100000001;
        *(_OWORD *)this = v34;
        break;
      case 2:
        *((_DWORD *)this + 2) = 1;
        *((_DWORD *)this + 3) = v19;
        *((_DWORD *)this + 4) = v18;
        *(void *)this = 0x100000001;
        break;
      case 3:
        *((_DWORD *)this + 2) = 1;
        *((_DWORD *)this + 3) = v19;
        *((_DWORD *)this + 4) = v18;
        *(_DWORD *)this = 1;
        *((_DWORD *)this + 1) = v17;
        break;
      case 4:
        *((_DWORD *)this + 1) = v17;
        *((_DWORD *)this + 2) = 1;
        *((_DWORD *)this + 3) = v19;
        *((_DWORD *)this + 4) = v18;
        break;
      default:
        std::to_string(&v38, v15);
        if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          unint64_t v35 = &v38;
        }
        else {
          unint64_t v35 = (std::string *)v38.__r_.__value_.__r.__words[0];
        }
        __p[0] = v35;
        Espresso::throw_exception_selector<Espresso::invalid_blob_shape_error,char const*>("ANE does not support blob with rank: %s", __p);
    }
  }
LABEL_49:

  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v39.__r_.__value_.__l.__data_);
  }
}

void sub_1920D9BFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0) {
    operator delete(__p);
  }

  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(a1);
}

id Espresso::ANECompilerEngine::ane_arch_allow_network_override(uint64_t a1)
{
  std::string::basic_string[abi:ne180100]<0>(v7, "ane_arch_override");
  int8x8_t v2 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>(a1, v7);
  if ((void *)(a1 + 8) == v2)
  {
    unint64_t v3 = Espresso::ANECompilerEngine::current_ane_arch((Espresso::ANECompilerEngine *)v2);
  }
  else
  {
    if (*((char *)v2 + 79) < 0) {
      std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)v2[7], v2[8]);
    }
    else {
      std::string __p = *(std::string *)(v2 + 7);
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    unint64_t v3 = objc_msgSend(NSString, "stringWithUTF8String:", p_p, *(_OWORD *)&__p.__r_.__value_.__l.__data_, __p.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }

  return v3;
}

void sub_1920D9D54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>(uint64_t a1, void *a2)
{
  int8x8_t v2 = (void *)(a1 + 8);
  unint64_t v3 = *(void **)(a1 + 8);
  if (!v3) {
    return v2;
  }
  uint64_t v5 = (void *)(a1 + 8);
  do
  {
    BOOL v6 = std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3 + 4, a2);
    unint64_t v7 = v3 + 1;
    if (!v6)
    {
      unint64_t v7 = v3;
      uint64_t v5 = v3;
    }
    unint64_t v3 = (void *)*v7;
  }
  while (*v7);
  if (v5 == v2 || std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, v5 + 4)) {
    return v2;
  }
  return v5;
}

id Espresso::ANECompilerEngine::current_ane_arch(Espresso::ANECompilerEngine *this)
{
  if (Espresso::ANECompilerEngine::precompilation_settings_t::shared(void)::onceToken != -1) {
    dispatch_once(&Espresso::ANECompilerEngine::precompilation_settings_t::shared(void)::onceToken, &__block_literal_global_22303);
  }
  Espresso::ANECompilerEngine::precompilation_settings_t::get_ane_arch((Espresso::ANECompilerEngine::precompilation_settings_t *)Espresso::ANECompilerEngine::precompilation_settings_t::global, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    if (__p.__r_.__value_.__l.__size_)
    {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      goto LABEL_8;
    }
  }
  else if (*((unsigned char *)&__p.__r_.__value_.__s + 23))
  {
    p_p = &__p;
LABEL_8:
    id v2 = [NSString stringWithUTF8String:p_p];
    goto LABEL_12;
  }
  if (Espresso::ANECompilerEngine::current_ane_arch(void)::onceToken != -1) {
    dispatch_once(&Espresso::ANECompilerEngine::current_ane_arch(void)::onceToken, &__block_literal_global_11431);
  }
  id v2 = (id)Espresso::ANECompilerEngine::current_ane_arch(void)::aneSubtypeStr;
LABEL_12:
  unint64_t v3 = v2;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }

  return v3;
}

void sub_1920D9EF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::ANECompilerEngine::precompilation_settings_t::get_ane_arch(Espresso::ANECompilerEngine::precompilation_settings_t *this@<X0>, std::string *a2@<X8>)
{
  unint64_t v4 = (std::mutex *)((char *)this + 24);
  std::mutex::lock((std::mutex *)((char *)this + 24));
  if (*((char *)this + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)this, *((void *)this + 1));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)this;
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 2);
  }

  std::mutex::unlock(v4);
}

void sub_1920D9F84(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void Espresso::map_const_get<std::map<std::string,std::string>>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, std::string *a4@<X8>)
{
  uint64_t v6 = a1 + 8;
  uint64_t v7 = *(void *)(a1 + 8);
  if (!v7) {
    goto LABEL_40;
  }
  int v8 = *(char *)(a2 + 23);
  size_t v9 = v8 >= 0 ? *(unsigned __int8 *)(a2 + 23) : *(void *)(a2 + 8);
  uint8x8_t v10 = v8 >= 0 ? (const void *)a2 : *(const void **)a2;
  uint64_t v11 = a1 + 8;
  do
  {
    int v12 = *(char *)(v7 + 55);
    if (v12 >= 0) {
      size_t v13 = *(unsigned __int8 *)(v7 + 55);
    }
    else {
      size_t v13 = *(void *)(v7 + 40);
    }
    if (v12 >= 0) {
      int v14 = (const void *)(v7 + 32);
    }
    else {
      int v14 = *(const void **)(v7 + 32);
    }
    if (v9 >= v13) {
      size_t v15 = v13;
    }
    else {
      size_t v15 = v9;
    }
    int v16 = memcmp(v14, v10, v15);
    BOOL v17 = v13 < v9;
    if (v16) {
      BOOL v17 = v16 < 0;
    }
    BOOL v18 = !v17;
    if (v17) {
      int v19 = (uint64_t *)(v7 + 8);
    }
    else {
      int v19 = (uint64_t *)v7;
    }
    if (v18) {
      uint64_t v11 = v7;
    }
    uint64_t v7 = *v19;
  }
  while (*v19);
  if (v11 == v6) {
    goto LABEL_40;
  }
  int v20 = *(char *)(v11 + 55);
  if (v20 >= 0) {
    size_t v21 = *(unsigned __int8 *)(v11 + 55);
  }
  else {
    size_t v21 = *(void *)(v11 + 40);
  }
  if (v20 >= 0) {
    long long v22 = (const void *)(v11 + 32);
  }
  else {
    long long v22 = *(const void **)(v11 + 32);
  }
  if (v21 >= v9) {
    size_t v23 = v9;
  }
  else {
    size_t v23 = v21;
  }
  int v24 = memcmp(v10, v22, v23);
  BOOL v25 = v9 < v21;
  if (v24) {
    BOOL v25 = v24 < 0;
  }
  if (v25)
  {
LABEL_40:
    if ((*(char *)(a3 + 23) & 0x80000000) == 0)
    {
      *(_OWORD *)&a4->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
      a4->__r_.__value_.__r.__words[2] = *(void *)(a3 + 16);
      return;
    }
    uint64_t v26 = *(const std::string::value_type **)a3;
    std::string::size_type v27 = *(void *)(a3 + 8);
  }
  else
  {
    if ((*(char *)(v11 + 79) & 0x80000000) == 0)
    {
      long long v28 = *(_OWORD *)(v11 + 56);
      a4->__r_.__value_.__r.__words[2] = *(void *)(v11 + 72);
      *(_OWORD *)&a4->__r_.__value_.__l.__data_ = v28;
      return;
    }
    uint64_t v26 = *(const std::string::value_type **)(v11 + 56);
    std::string::size_type v27 = *(void *)(v11 + 64);
  }

  std::string::__init_copy_ctor_external(a4, v26, v27);
}

void *std::__hash_table<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,std::string>,std::__unordered_map_hasher<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,std::string>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::__unordered_map_equal<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,std::string>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,std::string>>>::__emplace_unique_key_args<std::shared_ptr<Espresso::abstract_blob_container>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<Espresso::abstract_blob_container> const&>,std::tuple<>>(uint64_t a1, unint64_t a2, void *a3)
{
  unint64_t v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  unint64_t v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  unint64_t v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }
    else
    {
      unint64_t v3 = v8 & (v9 - 1);
    }
    uint64_t v11 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      for (uint64_t i = *v11; i; uint64_t i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == a2) {
            return i;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3) {
            break;
          }
        }
      }
    }
  }
  int v14 = (void *)(a1 + 16);
  size_t v15 = operator new(0x38uLL);
  v38[0] = v15;
  v38[1] = a1 + 16;
  *size_t v15 = 0;
  v15[1] = v8;
  uint64_t v16 = a3[1];
  v15[2] = *a3;
  v15[3] = v16;
  if (v16) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
  }
  v15[4] = 0;
  v15[5] = 0;
  v15[6] = 0;
  char v39 = 1;
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v9 || (float)(v18 * (float)v9) < v17)
  {
    BOOL v19 = 1;
    if (v9 >= 3) {
      BOOL v19 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v9);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      int8x8_t prime = (int8x8_t)v21;
    }
    else {
      int8x8_t prime = (int8x8_t)v20;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v9 = *(void *)(a1 + 8);
    if (*(void *)&prime > v9) {
      goto LABEL_32;
    }
    if (*(void *)&prime < v9)
    {
      unint64_t v29 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v9 < 3 || (uint8x8_t v30 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v30.i16[0] = vaddlv_u8(v30), v30.u32[0] > 1uLL))
      {
        unint64_t v29 = std::__next_prime(v29);
      }
      else
      {
        uint64_t v31 = 1 << -(char)__clz(v29 - 1);
        if (v29 >= 2) {
          unint64_t v29 = v31;
        }
      }
      if (*(void *)&prime <= v29) {
        int8x8_t prime = (int8x8_t)v29;
      }
      if (*(void *)&prime >= v9)
      {
        unint64_t v9 = *(void *)(a1 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_32:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          size_t v23 = operator new(8 * *(void *)&prime);
          int v24 = *(void **)a1;
          *(void *)a1 = v23;
          if (v24) {
            operator delete(v24);
          }
          uint64_t v25 = 0;
          *(int8x8_t *)(a1 + 8) = prime;
          do
            *(void *)(*(void *)a1 + 8 * v25++) = 0;
          while (*(void *)&prime != v25);
          uint64_t v26 = (void *)*v14;
          if (*v14)
          {
            unint64_t v27 = v26[1];
            uint8x8_t v28 = (uint8x8_t)vcnt_s8(prime);
            v28.i16[0] = vaddlv_u8(v28);
            if (v28.u32[0] > 1uLL)
            {
              if (v27 >= *(void *)&prime) {
                v27 %= *(void *)&prime;
              }
            }
            else
            {
              v27 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)a1 + 8 * v27) = v14;
            int v32 = (void *)*v26;
            if (*v26)
            {
              do
              {
                unint64_t v33 = v32[1];
                if (v28.u32[0] > 1uLL)
                {
                  if (v33 >= *(void *)&prime) {
                    v33 %= *(void *)&prime;
                  }
                }
                else
                {
                  v33 &= *(void *)&prime - 1;
                }
                if (v33 != v27)
                {
                  if (!*(void *)(*(void *)a1 + 8 * v33))
                  {
                    *(void *)(*(void *)a1 + 8 * v33) = v26;
                    goto LABEL_57;
                  }
                  *uint64_t v26 = *v32;
                  *int v32 = **(void **)(*(void *)a1 + 8 * v33);
                  **(void **)(*(void *)a1 + 8 * v33) = v32;
                  int v32 = v26;
                }
                unint64_t v33 = v27;
LABEL_57:
                uint64_t v26 = v32;
                int v32 = (void *)*v32;
                unint64_t v27 = v33;
              }
              while (v32);
            }
          }
          unint64_t v9 = (unint64_t)prime;
          goto LABEL_61;
        }
        char v37 = *(void **)a1;
        *(void *)a1 = 0;
        if (v37) {
          operator delete(v37);
        }
        unint64_t v9 = 0;
        *(void *)(a1 + 8) = 0;
      }
    }
LABEL_61:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  long long v34 = *(void **)(*(void *)a1 + 8 * v3);
  uint64_t i = (void *)v38[0];
  if (v34)
  {
    *(void *)v38[0] = *v34;
LABEL_74:
    void *v34 = i;
    goto LABEL_75;
  }
  *(void *)v38[0] = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(*(void *)a1 + 8 * v3) = v14;
  if (*i)
  {
    unint64_t v35 = *(void *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v35 >= v9) {
        v35 %= v9;
      }
    }
    else
    {
      v35 &= v9 - 1;
    }
    long long v34 = (void *)(*(void *)a1 + 8 * v35);
    goto LABEL_74;
  }
LABEL_75:
  v38[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v38);
  return i;
}

void sub_1920DA57C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

char *std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  unint64_t v8 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v4 = v8;
      if (v8 >= v10) {
        unint64_t v4 = v8 % v10;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v8;
    }
    unint64_t v13 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v13)
    {
      int v14 = (char *)*v13;
      if (*v13)
      {
        do
        {
          unint64_t v15 = *((void *)v14 + 1);
          if (v15 == v9)
          {
            if (std::equal_to<std::string>::operator()[abi:ne180100]((unsigned __int8 *)v14 + 16, a2)) {
              return v14;
            }
          }
          else
          {
            if (v12 > 1)
            {
              if (v15 >= v10) {
                v15 %= v10;
              }
            }
            else
            {
              v15 &= v10 - 1;
            }
            if (v15 != v4) {
              break;
            }
          }
          int v14 = *(char **)v14;
        }
        while (v14);
      }
    }
  }
  int v14 = (char *)operator new(0x30uLL);
  *(void *)int v14 = 0;
  *((void *)v14 + 1) = v9;
  uint64_t v16 = (std::string *)(v14 + 16);
  float v17 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v16, *(const std::string::value_type **)v17, *((void *)v17 + 1));
  }
  else
  {
    long long v18 = *v17;
    *((void *)v14 + 4) = *((void *)v17 + 2);
    *(_OWORD *)&v16->__r_.__value_.__l.__data_ = v18;
  }
  *((_DWORD *)v14 + 10) = 0;
  float v19 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v20 = *(float *)(a1 + 32);
  if (!v10 || (float)(v20 * (float)v10) < v19)
  {
    BOOL v21 = 1;
    if (v10 >= 3) {
      BOOL v21 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v22 = v21 | (2 * v10);
    unint64_t v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23) {
      size_t v24 = v23;
    }
    else {
      size_t v24 = v22;
    }
    std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__rehash<true>(a1, v24);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
      else {
        unint64_t v4 = v9;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v9;
    }
  }
  uint64_t v25 = *(void *)a1;
  uint64_t v26 = *(void **)(*(void *)a1 + 8 * v4);
  if (v26)
  {
    *(void *)int v14 = *v26;
LABEL_41:
    *uint64_t v26 = v14;
    goto LABEL_42;
  }
  *(void *)int v14 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v14;
  *(void *)(v25 + 8 * v4) = a1 + 16;
  if (*(void *)v14)
  {
    unint64_t v27 = *(void *)(*(void *)v14 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v27 >= v10) {
        v27 %= v10;
      }
    }
    else
    {
      v27 &= v10 - 1;
    }
    uint64_t v26 = (void *)(*(void *)a1 + 8 * v27);
    goto LABEL_41;
  }
LABEL_42:
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_1920DA7E0(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,unsigned long>,void *>>>::operator()[abi:ne180100](0, v1);
  _Unwind_Resume(a1);
}

void Espresso::blob_cpu::resize(int *a1, const Espresso::layer_shape *a2, std::__shared_weak_count **a3)
{
  unint64_t v7 = *a3;
  unint64_t v6 = a3[1];
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v8 = (std::__shared_weak_count *)*((void *)a1 + 12);
  *((void *)a1 + 11) = v7;
  *((void *)a1 + 12) = v6;
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  unint64_t v9 = *a3;
  *((void *)a1 + 28) = 0;
  unint64_t v10 = (std::__shared_weak_count *)*((void *)a1 + 29);
  *((void *)a1 + 29) = 0;
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  if (!v9)
  {
    int v15 = 0;
    int v14 = 0;
    unint64_t v12 = 0;
    goto LABEL_16;
  }
  unint64_t v12 = v11;
  if (!v11)
  {
    int v15 = 0;
    unint64_t v9 = 0;
LABEL_15:
    int v14 = 0;
    goto LABEL_16;
  }
  int v13 = v11[88];
  int v14 = (const void *)*((void *)v11 + 13);
  unint64_t v9 = (std::__shared_weak_count *)*((void *)v11 + 14);
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v13)
  {
    int v15 = 1;
    goto LABEL_16;
  }
  int v15 = 0;
  if (!v14 && v11[120])
  {
    unint64_t v43 = (std::__shared_weak_count *)*((void *)a1 + 12);
    uint64_t v62 = *((void *)a1 + 11);
    long long v63 = v43;
    if (v43) {
      atomic_fetch_add_explicit(&v43->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    char v44 = (*(uint64_t (**)(int *, const Espresso::layer_shape *, uint64_t *))(*(void *)a1 + 184))(a1, a2, &v62);
    if (v63) {
      nitro::nitro_function::nitro_function(v63);
    }
    if (v44)
    {
LABEL_95:
      if (!v9) {
        return;
      }
      goto LABEL_96;
    }
    int v15 = 0;
    goto LABEL_15;
  }
LABEL_16:
  Espresso::abstract_blob_container::set_shape((Espresso::abstract_blob_container *)a1, a2);
  uint64_t v16 = *a3;
  if (*a3 && LOBYTE(v16->__shared_owners_)) {
    a1[60] = HIDWORD(v16->__shared_owners_);
  }
  int v17 = a1[60];
  BOOL v19 = v17 == 4 || v17 == 2;
  if (v15)
  {
    char v20 = 1;
    if (v17 != 1) {
      char v20 = 2;
    }
    if (v19) {
      char v20 = 0;
    }
    *((void *)v12 + 12) = (((a1[3] * (uint64_t)a1[2] * a1[4] * a1[5] * a1[6]) << v20) + 4095) & 0xFFFFFFFFFFFFF000;
    goto LABEL_95;
  }
  *((void *)a1 + 31) = Espresso::layer_shape::total_dim(a2);
  BOOL v21 = (std::__shared_weak_count *)*((void *)a1 + 21);
  *((void *)a1 + 20) = 0;
  *((void *)a1 + 21) = 0;
  if (v21) {
    nitro::nitro_function::nitro_function(v21);
  }
  unint64_t v22 = (std::__shared_weak_count *)*((void *)a1 + 23);
  *((void *)a1 + 22) = 0;
  *((void *)a1 + 23) = 0;
  if (v22) {
    nitro::nitro_function::nitro_function(v22);
  }
  unint64_t v23 = (std::__shared_weak_count *)*((void *)a1 + 25);
  *((void *)a1 + 24) = 0;
  *((void *)a1 + 25) = 0;
  if (v23) {
    nitro::nitro_function::nitro_function(v23);
  }
  size_t v24 = (std::__shared_weak_count *)*((void *)a1 + 27);
  *((void *)a1 + 26) = 0;
  *((void *)a1 + 27) = 0;
  if (v24) {
    nitro::nitro_function::nitro_function(v24);
  }
  if (!v14
  {
    int v39 = a1[2];
    int v40 = a1[3];
    int v41 = a1[4];
    int v42 = a1[6] * a1[5];
    if (v42 * v39 * v40 * v41 >= 1)
    {
      switch(a1[60])
      {
        case 0:
          if (*(unsigned char *)(*((void *)a1 + 9) + 112)) {
            std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v61, v39, v40, v41, v42);
          }
          else {
            std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,Espresso::blob<float,4>::UnitializedBlobType,void>(&v61, v39, v40, v41, v42);
          }
          uint64_t v55 = (std::__shared_weak_count *)*((void *)a1 + 21);
          *((_OWORD *)a1 + 10) = v61;
          if (v55) {
            goto LABEL_87;
          }
          break;
        case 1:
          if (*(unsigned char *)(*((void *)a1 + 9) + 112)) {
            std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned short,4>,std::allocator<Espresso::blob<unsigned short,4>>,int &,int &,int &,int &,void>(&v61, v39, v40, v41, v42);
          }
          else {
            std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned short,4>,std::allocator<Espresso::blob<unsigned short,4>>,int &,int &,int &,int &,Espresso::blob<unsigned short,4>::UnitializedBlobType,void>(&v61, v39, v40, v41, v42);
          }
          uint64_t v55 = (std::__shared_weak_count *)*((void *)a1 + 23);
          *((_OWORD *)a1 + 11) = v61;
          if (v55) {
            goto LABEL_87;
          }
          break;
        case 2:
        case 4:
          if (*(unsigned char *)(*((void *)a1 + 9) + 112)) {
            std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,4>,std::allocator<Espresso::blob<unsigned char,4>>,int &,int &,int &,int &,void>(&v61, v39, v40, v41, v42);
          }
          else {
            std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,4>,std::allocator<Espresso::blob<unsigned char,4>>,int &,int &,int &,int &,Espresso::blob<unsigned char,4>::UnitializedBlobType,void>(&v61, v39, v40, v41, v42);
          }
          uint64_t v55 = (std::__shared_weak_count *)*((void *)a1 + 25);
          *((_OWORD *)a1 + 12) = v61;
          if (v55) {
            goto LABEL_87;
          }
          break;
        case 3:
          if (*(unsigned char *)(*((void *)a1 + 9) + 112)) {
            std::allocate_shared[abi:ne180100]<Espresso::blob<int,4>,std::allocator<Espresso::blob<int,4>>,int &,int &,int &,int &,void>(&v61, v39, v40, v41, v42);
          }
          else {
            std::allocate_shared[abi:ne180100]<Espresso::blob<int,4>,std::allocator<Espresso::blob<int,4>>,int &,int &,int &,int &,Espresso::blob<int,4>::UnitializedBlobType,void>(&v61, v39, v40, v41, v42);
          }
          uint64_t v55 = (std::__shared_weak_count *)*((void *)a1 + 27);
          *((_OWORD *)a1 + 13) = v61;
          if (v55) {
LABEL_87:
          }
            nitro::nitro_function::nitro_function(v55);
          break;
        default:
          break;
      }
      uint64_t v56 = (const void *)Espresso::blob_cpu::any_cp_data((Espresso::blob_cpu *)a1);
      size_t v57 = malloc_size(v56);
      char v58 = 1;
      if (v17 != 1) {
        char v58 = 2;
      }
      if (v19) {
        char v58 = 0;
      }
      size_t v59 = v57 >> v58;
      if (*((void *)a1 + 31) > v59) {
        size_t v59 = *((void *)a1 + 31);
      }
      *((void *)a1 + 31) = v59;
    }
    goto LABEL_95;
  }
  uint64_t v26 = v25;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v27 = *((void *)v25 + 20);
  if (v27)
  {
    uint64_t v28 = *((void *)v25 + 21);
    if (!v28) {
      goto LABEL_46;
    }
    goto LABEL_45;
  }
  uint64_t v27 = *((void *)v25 + 26);
  if (v27)
  {
    uint64_t v28 = *((void *)v25 + 27);
    if (!v28)
    {
LABEL_46:
      unint64_t v29 = (std::__shared_weak_count *)*((void *)a1 + 29);
      *((void *)a1 + 28) = v27;
      *((void *)a1 + 29) = v28;
      if (v29) {
        nitro::nitro_function::nitro_function(v29);
      }
      goto LABEL_48;
    }
LABEL_45:
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v28 + 8), 1uLL, memory_order_relaxed);
    goto LABEL_46;
  }
  uint64_t v54 = *((void *)v25 + 22);
  if (v54)
  {
    std::shared_ptr<Espresso::blob_rtti_root>::operator=[abi:ne180100]<Espresso::blob<unsigned short,4>,void>((void *)a1 + 28, v54, *((void *)v25 + 23));
  }
  else
  {
    uint64_t v60 = *((void *)v25 + 24);
    if (v60) {
      std::shared_ptr<Espresso::blob_rtti_root>::operator=[abi:ne180100]<Espresso::blob<unsigned short,4>,void>((void *)a1 + 28, v60, *((void *)v25 + 25));
    }
  }
LABEL_48:
  int v31 = a1[2];
  int v30 = a1[3];
  int v32 = a1[4];
  int v33 = a1[6] * a1[5];
  if (v33 * v31 * v30 * v32 >= 1)
  {
    int v34 = a1[60];
    if (v34 == 3)
    {
      uint64_t v45 = Espresso::blob_cpu::any_cp_data(v26);
      char v46 = operator new(0x60uLL);
      v46[1] = 0;
      v46[2] = 0;
      *char v46 = &unk_1EE389BF8;
      v46[3] = &unk_1EE36C050;
      *((_OWORD *)v46 + 4) = 0u;
      *((_OWORD *)v46 + 5) = 0u;
      *((_DWORD *)v46 + 8) = v31;
      *((_DWORD *)v46 + 9) = v30;
      *((_DWORD *)v46 + 10) = v32;
      *((_DWORD *)v46 + 11) = v33;
      v46[6] = v45;
      *((unsigned char *)v46 + 56) = 0;
      *(void *)&long long v47 = v46 + 3;
      *((void *)&v47 + 1) = v46;
      std::string v38 = (std::__shared_weak_count *)*((void *)a1 + 27);
      *((_OWORD *)a1 + 13) = v47;
      if (!v38) {
        goto LABEL_79;
      }
      goto LABEL_78;
    }
    if (v34 != 1)
    {
      if (v34)
      {
        uint64_t v51 = Espresso::blob_cpu::any_cp_data(v26);
        uint64_t v52 = operator new(0x60uLL);
        v52[1] = 0;
        v52[2] = 0;
        *uint64_t v52 = &unk_1EE389B18;
        v52[3] = &unk_1EE36BFD0;
        *((_OWORD *)v52 + 4) = 0u;
        *((_OWORD *)v52 + 5) = 0u;
        *((_DWORD *)v52 + 8) = v31;
        *((_DWORD *)v52 + 9) = v30;
        *((_DWORD *)v52 + 10) = v32;
        *((_DWORD *)v52 + 11) = v33;
        v52[6] = v51;
        *((unsigned char *)v52 + 56) = 0;
        *(void *)&long long v53 = v52 + 3;
        *((void *)&v53 + 1) = v52;
        std::string v38 = (std::__shared_weak_count *)*((void *)a1 + 25);
        *((_OWORD *)a1 + 12) = v53;
        if (!v38) {
          goto LABEL_79;
        }
      }
      else
      {
        uint64_t v35 = Espresso::blob_cpu::any_cp_data(v26);
        int v36 = operator new(0x60uLL);
        v36[1] = 0;
        v36[2] = 0;
        *int v36 = &unk_1EE3899C8;
        v36[3] = &unk_1EE36BF10;
        *((_OWORD *)v36 + 4) = 0u;
        *((_OWORD *)v36 + 5) = 0u;
        *((_DWORD *)v36 + 8) = v31;
        *((_DWORD *)v36 + 9) = v30;
        *((_DWORD *)v36 + 10) = v32;
        *((_DWORD *)v36 + 11) = v33;
        v36[6] = v35;
        *((unsigned char *)v36 + 56) = 0;
        *(void *)&long long v37 = v36 + 3;
        *((void *)&v37 + 1) = v36;
        std::string v38 = (std::__shared_weak_count *)*((void *)a1 + 21);
        *((_OWORD *)a1 + 10) = v37;
        if (!v38) {
          goto LABEL_79;
        }
      }
      goto LABEL_78;
    }
    uint64_t v48 = Espresso::blob_cpu::any_cp_data(v26);
    uint64_t v49 = operator new(0x60uLL);
    v49[1] = 0;
    v49[2] = 0;
    *uint64_t v49 = &unk_1EE389D80;
    v49[3] = &unk_1EE36C130;
    *((_OWORD *)v49 + 4) = 0u;
    *((_OWORD *)v49 + 5) = 0u;
    *((_DWORD *)v49 + 8) = v31;
    *((_DWORD *)v49 + 9) = v30;
    *((_DWORD *)v49 + 10) = v32;
    *((_DWORD *)v49 + 11) = v33;
    v49[6] = v48;
    *((unsigned char *)v49 + 56) = 0;
    *(void *)&long long v50 = v49 + 3;
    *((void *)&v50 + 1) = v49;
    std::string v38 = (std::__shared_weak_count *)*((void *)a1 + 23);
    *((_OWORD *)a1 + 11) = v50;
    if (v38) {
LABEL_78:
    }
      nitro::nitro_function::nitro_function(v38);
  }
LABEL_79:
  if (!v9) {
    return;
  }
  nitro::nitro_function::nitro_function(v9);
LABEL_96:
  nitro::nitro_function::nitro_function(v9);
}

void sub_1920DAEE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::layer_shape::total_dim(Espresso::layer_shape *this)
{
  int v2 = *((_DWORD *)this + 5);
  if (v2 == -1)
  {
    int v4 = *((_DWORD *)this + 4);
    uint64_t result = *((int *)this + 1) * (uint64_t)*(int *)this * *((int *)this + 2) * *((int *)this + 3);
    if (v4 == 1) {
      return result;
    }
    goto LABEL_9;
  }
  if (v2 < 1) {
    return 1;
  }
  uint64_t result = *(int *)this;
  if (v2 != 1)
  {
    uint64_t result = *((int *)this + 1) * (uint64_t)(int)result;
    if (v2 >= 3)
    {
      result *= *((int *)this + 2);
      if (v2 != 3)
      {
        result *= *((int *)this + 3);
        if (v2 >= 5)
        {
          int v4 = *((_DWORD *)this + 4);
LABEL_9:
          result *= v4;
        }
      }
    }
  }
  return result;
}

void Espresso::ANERuntimeEngine::blob_container::resize(uint64_t a1, const Espresso::layer_shape *a2, uint64_t a3)
{
  uint64_t v5 = *(std::__shared_weak_count **)(a3 + 8);
  v24[0] = *(void *)a3;
  v24[1] = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::ANECompilerEngine::blob_container::resize(a1, a2, (uint64_t)v24);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
  unint64_t v6 = *(std::__shared_weak_count **)(a1 + 248);
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 248) = 0;
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }
  if (!*(void *)a3)
  {
    unint64_t v8 = 0;
    goto LABEL_12;
  }
  unint64_t v8 = v7;
  if (!v7)
  {
LABEL_12:
    uint8x8_t v11 = 0;
    unint64_t v10 = 0;
    BOOL v9 = 0;
    goto LABEL_13;
  }
  BOOL v9 = *((unsigned char *)v7 + 88) != 0;
  uint8x8_t v11 = v7[13];
  unint64_t v10 = v7[14];
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_13:
  if (!(*(_DWORD *)(a1 + 16) * *(_DWORD *)(a1 + 20) * *(_DWORD *)(a1 + 12) * *(_DWORD *)(a1 + 8) * *(_DWORD *)(a1 + 24)))
  {
    if (v9) {
      v8[12] = 0;
    }
    goto LABEL_34;
  }
  if (v9)
  {
    long long v12 = *(_OWORD *)(a1 + 176);
    v25[0] = *(_OWORD *)(a1 + 160);
    v25[1] = v12;
    compute_for_iosurface_params((uint64_t)v19, (int *)v25, *(_DWORD *)(a1 + 196), *(_DWORD *)(a1 + 192), *(_DWORD **)(a1 + 128), *(void *)(a1 + 136));
    v8[12] = (std::__shared_weak_count *)(v20 * v21);
    if (__p)
    {
      unint64_t v23 = __p;
      operator delete(__p);
    }
    goto LABEL_34;
  }
  int v13 = *(std::__shared_weak_count **)(a1 + 248);
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 248) = 0;
  if (v13) {
    std::__shared_weak_count::__release_weak(v13);
  }
  if (!v11
    || LODWORD(v11[1].__vftable) * HIDWORD(v11->__shared_weak_owners_) != *(_DWORD *)(a1 + 24) * *(_DWORD *)(a1 + 20))
  {
    goto LABEL_34;
  }
  int v15 = 0;
  if (v10) {
    BOOL v16 = v14 == 0;
  }
  else {
    BOOL v16 = 1;
  }
  char v17 = v16;
  if (!v16)
  {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    int v15 = v10;
  }
  long long v18 = *(std::__shared_weak_count **)(a1 + 248);
  *(void *)(a1 + 240) = v14;
  *(void *)(a1 + 248) = v15;
  if (v18) {
    std::__shared_weak_count::__release_weak(v18);
  }
  if (v17)
  {
LABEL_34:
    if (!v10) {
      return;
    }
    goto LABEL_35;
  }
  nitro::nitro_function::nitro_function(v15);
LABEL_35:
  nitro::nitro_function::nitro_function(v10);
}

void sub_1920DB210(_Unwind_Exception *exception_object)
{
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::ANECompilerEngine::blob_container::resize(uint64_t a1, const Espresso::layer_shape *a2, uint64_t a3)
{
  Espresso::abstract_blob_container::set_shape((Espresso::abstract_blob_container *)a1, a2);
  unint64_t v6 = [MEMORY[0x1E4F1CB18] standardUserDefaults];
  unint64_t v7 = [v6 persistentDomainForName:*MEMORY[0x1E4F283E0]];

  unint64_t v8 = [v7 objectForKeyedSubscript:@"espresso.aneruntime.tmp_allow_batching"];
  if ([v8 BOOLValue])
  {
  }
  else
  {
    int v9 = *(_DWORD *)(a1 + 200);

    if (!v9) {
      goto LABEL_7;
    }
  }
  int v10 = *(_DWORD *)(a1 + 24);
  if (v10 <= 1) {
    int v10 = 1;
  }
  *(_DWORD *)(a1 + 204) = v10 * *(_DWORD *)(a1 + 20);
LABEL_7:
  *(_DWORD *)(a1 + 192) = *(_DWORD *)(a1 + 124);
  uint8x8_t v11 = *(int **)(a1 + 128);
  if (*(void *)(a1 + 136) - (void)v11 != 4) {
    goto LABEL_41;
  }
  int v12 = *v11;
  int v13 = 4;
  if (v12 <= 843264055)
  {
    if (v12 > 759967847)
    {
      if (v12 <= 792872768)
      {
        if (v12 == 759967848) {
          goto LABEL_39;
        }
        int v14 = 760375361;
        goto LABEL_37;
      }
      if (v12 != 792872769)
      {
        if (v12 == 793522280) {
          goto LABEL_39;
        }
        int v14 = 793929793;
        goto LABEL_37;
      }
    }
    else
    {
      if (v12 <= 642527335)
      {
        if (v12 == 641877825) {
          goto LABEL_40;
        }
        int v15 = 642527288;
LABEL_33:
        if (v12 != v15) {
          goto LABEL_41;
        }
        goto LABEL_39;
      }
      if (v12 == 642527336) {
        goto LABEL_39;
      }
      if (v12 != 642934849)
      {
        int v14 = 759318337;
        goto LABEL_37;
      }
    }
LABEL_40:
    *(_DWORD *)(a1 + 192) = v13;
    goto LABEL_41;
  }
  if (v12 <= 1380411456)
  {
    if ((v12 - 843264056) <= 0x30 && ((1 << (v12 - 56)) & 0x1400000000001) != 0)
    {
      int v13 = 2;
      goto LABEL_40;
    }
    if ((v12 - 1278226488) > 0x30 || ((1 << (v12 - 56)) & 0x1400000000001) == 0)
    {
      int v14 = 1111970369;
      goto LABEL_37;
    }
LABEL_39:
    int v13 = 1;
    goto LABEL_40;
  }
  if (v12 <= 2084718400)
  {
    if (v12 == 1380411457) {
      goto LABEL_40;
    }
    int v15 = 1751411059;
    goto LABEL_33;
  }
  if (v12 == 2084718401) {
    goto LABEL_40;
  }
  if (v12 == 2085367912) {
    goto LABEL_39;
  }
  int v14 = 2085775425;
LABEL_37:
  if (v12 == v14) {
    goto LABEL_40;
  }
LABEL_41:
  BOOL v16 = [v7 objectForKeyedSubscript:@"espresso.aneruntime.interleave_factor"];
  if ([v16 intValue])
  {
    int v17 = *(_DWORD *)(a1 + 124);

    if (v17 > 1) {
      goto LABEL_45;
    }
    BOOL v16 = [v7 objectForKeyedSubscript:@"espresso.aneruntime.interleave_factor"];
    *(_DWORD *)(a1 + 192) = [v16 intValue];
  }

LABEL_45:
  unsigned int v18 = *((_DWORD *)a2 + 6);
  if (v18) {
    unint64_t v19 = v18;
  }
  else {
    unint64_t v19 = 64;
  }
  compiler_compute_for_iosurface_params((uint64_t)v23, (int *)(a1 + 160), *(_DWORD *)(a1 + 196), v19, *(_DWORD *)(a1 + 192), *(_DWORD **)(a1 + 128), *(void *)(a1 + 136));
  if (*(void *)a3)
  {
    if (v20)
    {
      uint64_t v21 = v20;
      unint64_t v22 = *(std::__shared_weak_count **)(a3 + 8);
      if (v22) {
        atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (*((unsigned char *)v21 + 88)) {
        v21[12] = v24 * v25;
      }
      if (v22) {
        nitro::nitro_function::nitro_function(v22);
      }
    }
  }
  if (__p)
  {
    uint64_t v27 = __p;
    operator delete(__p);
  }
}

void sub_1920DB5D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

char *Espresso::abstract_blob_container::set_shape(Espresso::abstract_blob_container *this, const Espresso::layer_shape *a2)
{
  int v2 = *((_DWORD *)a2 + 5);
  int v3 = *(_DWORD *)a2;
  if (v2 == -1)
  {
    *((_DWORD *)this + 2) = v3;
    *((_DWORD *)this + 3) = *((_DWORD *)a2 + 1);
    *((_DWORD *)this + 4) = *((_DWORD *)a2 + 2);
    int v6 = *((_DWORD *)a2 + 3);
    if (*((_DWORD *)a2 + 4) == 1) {
      int v7 = 4;
    }
    else {
      int v7 = 5;
    }
  }
  else
  {
    if (v2 < 1) {
      int v3 = 1;
    }
    *((_DWORD *)this + 2) = v3;
    int v4 = *((_DWORD *)a2 + 1);
    if (v2 <= 1) {
      int v4 = 1;
    }
    *((_DWORD *)this + 3) = v4;
    int v5 = *((_DWORD *)a2 + 2);
    if (v2 <= 2) {
      int v5 = 1;
    }
    *((_DWORD *)this + 4) = v5;
    int v6 = *((_DWORD *)a2 + 3);
    if (v2 <= 3) {
      int v6 = 1;
    }
    int v7 = v2;
  }
  *((_DWORD *)this + 5) = v6;
  int v8 = *((_DWORD *)a2 + 4);
  if (v7 <= 4) {
    int v8 = 1;
  }
  *((_DWORD *)this + 6) = v8;
  *((_DWORD *)this + 7) = v2;
  *((_OWORD *)this + 2) = *(_OWORD *)((char *)a2 + 24);
  uint64_t result = (char *)this + 48;
  if (result != (char *)a2 + 40) {
    return std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(result, *((char **)a2 + 5), *((void *)a2 + 6), (uint64_t)(*((void *)a2 + 6) - *((void *)a2 + 5)) >> 2);
  }
  return result;
}

double compiler_compute_for_iosurface_params(uint64_t a1, int *a2, int a3, unint64_t a4, int a5, _DWORD *a6, uint64_t a7)
{
  unint64_t v8 = a2[1];
  unint64_t v9 = *a2 * (uint64_t)(((int)v8 - 1) / a5 + 1) * a2[2] * (uint64_t)a2[3];
  uint64_t v10 = a7 - (void)a6;
  if ((_DWORD *)a7 == a6)
  {
    if ((a3 - 1) > 0xC) {
      uint64_t v23 = 4;
    }
    else {
      uint64_t v23 = qword_192DF6AD8[a3 - 1];
    }
    uint64_t v30 = a2[4] * (uint64_t)a5;
    *(void *)a1 = v30;
    *(void *)(a1 + 8) = v9;
    *(void *)(a1 + 16) = a4 + a4 * ((v23 * v30 - 1) / a4);
    *(void *)(a1 + 24) = v23;
    double result = 0.0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(unsigned char *)(a1 + 64) = 0;
    return result;
  }
  uint64_t v11 = 0;
  int v12 = 0;
  unint64_t v13 = v10 >> 2;
  if ((unint64_t)(v10 >> 2) <= 1) {
    uint64_t v14 = 1;
  }
  else {
    uint64_t v14 = v10 >> 2;
  }
  do
  {
    int v15 = a6[v11];
    if (v15 <= 875836533)
    {
      if (v15 <= 875704421)
      {
        if (v15 == 641230384 || v15 == 641234480) {
LABEL_24:
        }
          ++v12;
      }
      else if (v15 == 875704422 || v15 == 875704438 || v15 == 875836518)
      {
        goto LABEL_24;
      }
    }
    else if (v15 > 1886859823)
    {
      if (v15 == 1886859824 || v15 == 2019963440 || v15 == 2016686640) {
        goto LABEL_24;
      }
    }
    else if (v15 == 875836534 || v15 == 1882468912 || v15 == 1885745712)
    {
      goto LABEL_24;
    }
    ++v11;
  }
  while (v14 != v11);
  if (v13 == v12)
  {
    v9 /= v8;
  }
  else if (v12)
  {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Incompatible surfaces.");
  }
  uint64_t v24 = 0;
  int v25 = 0;
  do
  {
    int v26 = a6[v24];
    if (v26 == 706956392 || v26 == 707153000) {
      ++v25;
    }
    ++v24;
  }
  while (v14 != v24);
  if (v13 == v25)
  {
    v9 /= v8;
    if (v25)
    {
      *(void *)a1 = a2[4];
      *(void *)(a1 + 8) = v9;
      *(void *)(a1 + 16) = 0;
      *(void *)(a1 + 24) = 0;
      *(void *)(a1 + 32) = v8;
      *(void *)(a1 + 48) = 0;
      *(void *)(a1 + 56) = 0;
      *(void *)(a1 + 40) = 0;
      uint64_t v28 = (void *)(a1 + 40);
      goto LABEL_57;
    }
  }
  else if (v25)
  {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Incompatible surfaces: mix of multi-slice and non-multi-slice formats specified.");
  }
  *(void *)a1 = a2[4];
  *(void *)(a1 + 8) = v9;
  uint64_t v28 = (void *)(a1 + 40);
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
LABEL_57:
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v28, a6, a7, v13);
  *(unsigned char *)(a1 + 64) = 1;
  return result;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,std::string>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::shared_ptr<Espresso::abstract_blob_container> const,std::string>,0>((uint64_t)v1 + 16);
    }
    operator delete(v1);
  }
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,Espresso::layer_shape>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,Espresso::layer_shape>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::shared_ptr<Espresso::abstract_blob_container> const,Espresso::layer_shape>,0>(v1 + 2);
    }
    operator delete(v1);
  }
}

void compute_for_iosurface_params(uint64_t a1, int *a2, int a3, int a4, _DWORD *a5, uint64_t a6)
{
  compiler_compute_for_iosurface_params((uint64_t)v17, a2, a3, 0x40uLL, a4, a5, a6);
  long long v10 = v17[0];
  long long v11 = v17[1];
  uint64_t v12 = v18;
  std::string __p = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v19, (uint64_t)v20, (v20 - (unsigned char *)v19) >> 2);
  char v16 = v21;
  *(_OWORD *)a1 = v10;
  *(_OWORD *)(a1 + 16) = v11;
  int v7 = __p;
  *(void *)(a1 + 32) = v12;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  uint64_t v8 = (uint64_t)v14;
  unint64_t v9 = (v14 - v7) >> 2;
  *(void *)(a1 + 40) = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((void *)(a1 + 40), v7, v8, v9);
  *(unsigned char *)(a1 + 64) = v16;
  if (__p)
  {
    uint64_t v14 = __p;
    operator delete(__p);
  }
  if (v19)
  {
    uint64_t v20 = v19;
    operator delete(v19);
  }
}

void sub_1920DBAA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24)
{
  if (__p) {
    operator delete(__p);
  }
  if (a23) {
    operator delete(a23);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::dummy_blob_container::resize(Espresso::abstract_blob_container *a1, const Espresso::layer_shape *a2, std::__shared_weak_count **a3)
{
  Espresso::abstract_blob_container::set_shape(a1, a2);
  int v7 = *a3;
  int v6 = a3[1];
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = (std::__shared_weak_count *)*((void *)a1 + 34);
  *((void *)a1 + 33) = v7;
  *((void *)a1 + 34) = v6;
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  unint64_t v9 = *a3;
  if (*a3)
  {
    if (v10)
    {
      if (v10[88])
      {
        long long v11 = a3[1];
        v12[0] = v9;
        v12[1] = v11;
        if (v11) {
          atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        Espresso::blob_cpu::resize((int *)a1, a2, v12);
        if (v11)
        {
          nitro::nitro_function::nitro_function(v11);
        }
      }
    }
  }
}

void sub_1920DBBE4(_Unwind_Exception *exception_object)
{
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::blob_cpu::any_cp_data(Espresso::blob_cpu *this)
{
  switch(*((_DWORD *)this + 60))
  {
    case 0:
      uint64_t v1 = *((void *)this + 20);
      if (v1) {
        goto LABEL_3;
      }
      goto LABEL_5;
    case 1:
      uint64_t v1 = *((void *)this + 22);
      if (!v1) {
        goto LABEL_5;
      }
      goto LABEL_3;
    case 2:
    case 4:
      uint64_t v1 = *((void *)this + 24);
      if (v1) {
        goto LABEL_3;
      }
      goto LABEL_5;
    case 3:
      uint64_t v1 = *((void *)this + 26);
      if (!v1) {
        goto LABEL_5;
      }
LABEL_3:
      uint64_t result = *(void *)(v1 + 24);
      break;
    default:
LABEL_5:
      uint64_t result = 0;
      break;
  }
  return result;
}

void Espresso::allocate_blobs(std::__shared_weak_count *a1, const char *a2, void *a3)
{
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  uint64_t v51 = a1;
  uint64_t shared_weak_owners = a1->__shared_weak_owners_;
  double v4 = 0.0;
  if (shared_weak_owners)
  {
    int v7 = -1;
    do
    {
      a1 = *(std::__shared_weak_count **)(shared_weak_owners + 24);
      if (a1)
      {
        atomic_fetch_add_explicit(&a1->__shared_owners_, 1uLL, memory_order_relaxed);
        if (*(_DWORD *)(shared_weak_owners + 32) > v7) {
          int v7 = *(_DWORD *)(shared_weak_owners + 32);
        }
        nitro::nitro_function::nitro_function(a1);
      }
      else if (*(_DWORD *)(shared_weak_owners + 32) > v7)
      {
        int v7 = *(_DWORD *)(shared_weak_owners + 32);
      }
      uint64_t shared_weak_owners = *(void *)shared_weak_owners;
    }
    while (shared_weak_owners);
    if ((v7 & 0x80000000) == 0)
    {
      uint64_t v48 = (uint64_t *)a2;
      unint64_t v50 = 0;
      int v8 = 0;
      while (1)
      {
        unint64_t v61 = 0;
        uint64_t v62 = 0;
        uint64_t v9 = v51->__shared_weak_owners_;
        if (!v9)
        {
LABEL_64:
          exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::to_string(&v58, v8);
          int v40 = std::string::insert(&v58, 0, "Logic error in NetReshape, color ");
          long long v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
          v59.__r_.__value_.__r.__words[2] = v40->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v41;
          v40->__r_.__value_.__l.__size_ = 0;
          v40->__r_.__value_.__r.__words[2] = 0;
          v40->__r_.__value_.__r.__words[0] = 0;
          int v42 = std::string::append(&v59, "/");
          long long v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
          v60.__r_.__value_.__r.__words[2] = v42->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v43;
          v42->__r_.__value_.__l.__size_ = 0;
          v42->__r_.__value_.__r.__words[2] = 0;
          v42->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v57, v7);
          if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            char v44 = &v57;
          }
          else {
            char v44 = (std::string *)v57.__r_.__value_.__r.__words[0];
          }
          if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(v57.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = v57.__r_.__value_.__l.__size_;
          }
          char v46 = std::string::append(&v60, (const std::string::value_type *)v44, size);
          long long v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
          buf.__r_.__value_.__r.__words[2] = v46->__r_.__value_.__r.__words[2];
          *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v47;
          v46->__r_.__value_.__l.__size_ = 0;
          v46->__r_.__value_.__r.__words[2] = 0;
          v46->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(exception, &buf);
          __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        long long v10 = 0;
        unint64_t v52 = 0;
        do
        {
          if (*(_DWORD *)(v9 + 32) != v8) {
            goto LABEL_33;
          }
          int8x8_t v11 = (int8x8_t)a3[1];
          if (!*(void *)&v11) {
            goto LABEL_63;
          }
          unint64_t v12 = *(void *)(v9 + 16);
          unint64_t v13 = 0x9DDFEA08EB382D69 * (((8 * v12) + 8) ^ HIDWORD(v12));
          unint64_t v14 = 0x9DDFEA08EB382D69 * (HIDWORD(v12) ^ (v13 >> 47) ^ v13);
          unint64_t v15 = 0x9DDFEA08EB382D69 * (v14 ^ (v14 >> 47));
          uint8x8_t v16 = (uint8x8_t)vcnt_s8(v11);
          v16.i16[0] = vaddlv_u8(v16);
          if (v16.u32[0] > 1uLL)
          {
            unint64_t v17 = v15;
            if (v15 >= *(void *)&v11) {
              unint64_t v17 = v15 % *(void *)&v11;
            }
          }
          else
          {
            unint64_t v17 = v15 & (*(void *)&v11 - 1);
          }
          uint64_t v18 = *(void **)(*a3 + 8 * v17);
          if (!v18 || (unint64_t v19 = (void *)*v18) == 0)
          {
LABEL_63:
            std::string v38 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v38, "blob not found in gc");
            __cxa_throw(v38, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          while (1)
          {
            unint64_t v20 = v19[1];
            if (v15 == v20) {
              break;
            }
            if (v16.u32[0] > 1uLL)
            {
              if (v20 >= *(void *)&v11) {
                v20 %= *(void *)&v11;
              }
            }
            else
            {
              v20 &= *(void *)&v11 - 1;
            }
            if (v20 != v17) {
              goto LABEL_63;
            }
LABEL_30:
            unint64_t v19 = (void *)*v19;
            if (!v19) {
              goto LABEL_63;
            }
          }
          if (v19[2] != v12) {
            goto LABEL_30;
          }
          unint64_t v21 = std::__hash_table<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,unsigned long>,std::__unordered_map_hasher<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,unsigned long>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::__unordered_map_equal<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,unsigned long>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,unsigned long>>>::__emplace_unique_key_args<std::shared_ptr<Espresso::abstract_blob_container>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<Espresso::abstract_blob_container> const&>,std::tuple<>>(v48, v12, (void *)(v9 + 16))[4];
          if (v21 >= v52)
          {
            unint64_t v23 = *(void *)(v9 + 16);
            unint64_t v22 = *(std::__shared_weak_count **)(v9 + 24);
            if (v22) {
              atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            unint64_t v61 = v23;
            uint64_t v62 = v22;
            if (v10) {
              nitro::nitro_function::nitro_function(v10);
            }
            unint64_t v52 = v21;
          }
          else
          {
LABEL_33:
            unint64_t v22 = v10;
          }
          uint64_t v9 = *(void *)v9;
          long long v10 = v22;
        }
        while (v9);
        unint64_t v24 = v61;
        if (!v61) {
          goto LABEL_64;
        }
        int v25 = (std::__shared_weak_count *)operator new(0x98uLL);
        v25->__shared_owners_ = 0;
        v25->__shared_weak_owners_ = 0;
        v25->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3896B8;
        *(_OWORD *)&v25[2].__shared_weak_owners_ = 0u;
        *(_OWORD *)&v25[3].__shared_owners_ = 0u;
        *(_OWORD *)&v25[1].__shared_owners_ = 0u;
        v25[2].std::__shared_count = 0u;
        v25[4].std::__shared_count = 0u;
        *(_OWORD *)&v25[4].__shared_weak_owners_ = 0u;
        *(_OWORD *)&v25[5].__shared_owners_ = 0u;
        v25[5].__shared_weak_owners_ = 0;
        v25[6].__vftable = 0;
        LODWORD(v25[2].__vftable) = 1065353216;
        v25[2].__shared_owners_ = 0x1FFFFFFFFLL;
        v25[4].__vftable = 0;
        v25[4].__shared_owners_ = 0;
        v25[2].__shared_weak_owners_ = 0;
        v25[3].__vftable = 0;
        LOBYTE(v25[3].__shared_weak_owners_) = 0;
        v25[3].__shared_owners_ = 0;
        v25[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36B910;
        v25[5].__vftable = 0;
        v25[5].__shared_owners_ = 0;
        LOBYTE(v25[6].__vftable) = 0;
        int v26 = std::__hash_table<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,Espresso::layer_shape>,std::__unordered_map_hasher<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,Espresso::layer_shape>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::__unordered_map_equal<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,Espresso::layer_shape>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,Espresso::layer_shape>>>::__emplace_unique_key_args<std::shared_ptr<Espresso::abstract_blob_container>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<Espresso::abstract_blob_container> const&>,std::tuple<>>((uint64_t)a3, v24, &v61);
        uint64_t v55 = v25 + 1;
        uint64_t v56 = v25;
        atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
        (*(void (**)(unint64_t, void *, std::__shared_weak_count **))(*(void *)v24 + 16))(v24, v26 + 4, &v55);
        int v49 = v7;
        if (v56) {
          nitro::nitro_function::nitro_function(v56);
        }
        uint64_t v27 = v51->__shared_weak_owners_;
        for (i = v62; v27; uint64_t v27 = *(void *)v27)
        {
          if (*(_DWORD *)(v27 + 32) == v8)
          {
            unint64_t v29 = (unint64_t *)(v27 + 16);
            if (*(void *)(v27 + 16) != v24)
            {
              uint64_t v30 = (char *)operator new(0x98uLL);
              int v31 = (std::__shared_weak_count *)v30;
              *((void *)v30 + 1) = 0;
              *((void *)v30 + 2) = 0;
              *(void *)uint64_t v30 = &unk_1EE3896B8;
              int v32 = v30 + 24;
              *((_OWORD *)v30 + 4) = 0u;
              *((_OWORD *)v30 + 5) = 0u;
              *((_OWORD *)v30 + 2) = 0u;
              *((_OWORD *)v30 + 3) = 0u;
              *((_OWORD *)v30 + 6) = 0u;
              *((_OWORD *)v30 + 7) = 0u;
              *((_OWORD *)v30 + 8) = 0u;
              *((void *)v30 + 17) = 0;
              *((void *)v30 + 18) = 0;
              *((_DWORD *)v30 + 12) = 1065353216;
              *((void *)v30 + 7) = 0x1FFFFFFFFLL;
              *((void *)v30 + 12) = 0;
              *((void *)v30 + 13) = 0;
              *((void *)v30 + 8) = 0;
              *((void *)v30 + 9) = 0;
              v30[88] = 0;
              *((void *)v30 + 10) = 0;
              *((void *)v30 + 3) = &unk_1EE36B910;
              *((void *)v30 + 15) = 0;
              *((void *)v30 + 16) = 0;
              v30[144] = 0;
              if (i)
              {
                atomic_fetch_add_explicit(&i->__shared_owners_, 1uLL, memory_order_relaxed);
                int v33 = (std::__shared_weak_count *)*((void *)v30 + 17);
                v31[5].__shared_owners_ = v24;
                v31[5].__shared_weak_owners_ = (uint64_t)i;
                if (v33) {
                  nitro::nitro_function::nitro_function(v33);
                }
              }
              else
              {
                *((void *)v30 + 16) = v24;
                *((void *)v30 + 17) = 0;
              }
              unint64_t v34 = *v29;
              uint64_t v35 = std::__hash_table<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,Espresso::layer_shape>,std::__unordered_map_hasher<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,Espresso::layer_shape>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::__unordered_map_equal<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,Espresso::layer_shape>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,Espresso::layer_shape>>>::__emplace_unique_key_args<std::shared_ptr<Espresso::abstract_blob_container>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<Espresso::abstract_blob_container> const&>,std::tuple<>>((uint64_t)a3, *v29, (void *)(v27 + 16));
              long long v53 = v32;
              uint64_t v54 = v31;
              atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
              (*(void (**)(unint64_t, void *, char **))(*(void *)v34 + 16))(v34, v35 + 4, &v53);
              if (v54) {
                nitro::nitro_function::nitro_function(v54);
              }
              nitro::nitro_function::nitro_function(v31);
            }
          }
        }
        nitro::nitro_function::nitro_function(v25);
        if (i) {
          nitro::nitro_function::nitro_function(i);
        }
        v50 += v52;
        int v7 = v49;
        if (v8++ == v49)
        {
          double v4 = (float)((float)v50 * 0.00000095367);
          goto LABEL_60;
        }
      }
    }
  }
  int v7 = -1;
LABEL_60:
  long long v37 = Espresso::espresso_os_log_subsystem((Espresso *)a1, a2);
  if (os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(buf.__r_.__value_.__l.__data_) = 67109376;
    HIDWORD(buf.__r_.__value_.__r.__words[0]) = v7;
    LOWORD(buf.__r_.__value_.__r.__words[1]) = 2048;
    *(double *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = v4;
    _os_log_debug_impl(&dword_1920CB000, v37, OS_LOG_TYPE_DEBUG, "[reshape] max color = %d tot_est_std::string::size_type size = %.3f\n", (uint8_t *)&buf, 0x12u);
  }
}

void sub_1920DC2CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  if (*(char *)(v45 - 121) < 0) {
    operator delete(*(void **)(v45 - 144));
  }
  if (a24 < 0) {
    operator delete(__p);
  }
  if (a43 < 0) {
    operator delete(a38);
  }
  if (a36 < 0) {
    operator delete(a31);
  }
  if (a30 < 0)
  {
    operator delete(a25);
    if ((v44 & 1) == 0)
    {
LABEL_14:
      long long v47 = *(std::__shared_weak_count **)(v45 - 152);
      if (v47) {
        nitro::nitro_function::nitro_function(v47);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v44)
  {
    goto LABEL_14;
  }
  __cxa_free_exception(v43);
  goto LABEL_14;
}

void *std::shared_ptr<Espresso::blob_rtti_root>::operator=[abi:ne180100]<Espresso::blob<unsigned short,4>,void>(void *a1, uint64_t a2, uint64_t a3)
{
  if (a3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(a3 + 8), 1uLL, memory_order_relaxed);
  }
  double v4 = (std::__shared_weak_count *)a1[1];
  *a1 = a2;
  a1[1] = a3;
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  return a1;
}

void std::allocate_shared[abi:ne180100]<Espresso::blob<int,4>,std::allocator<Espresso::blob<int,4>>,int &,int &,int &,int &,void>(void *a1, int a2, int a3, int a4, int a5)
{
  long long v10 = operator new(0x60uLL);
  v10[1] = 0;
  v10[2] = 0;
  *long long v10 = &unk_1EE389BF8;
  v10[3] = &unk_1EE36C050;
  *((_OWORD *)v10 + 4) = 0u;
  *((_OWORD *)v10 + 5) = 0u;
  *((_DWORD *)v10 + 8) = a2;
  *((_DWORD *)v10 + 9) = a3;
  *((_DWORD *)v10 + 10) = a4;
  *((_DWORD *)v10 + 11) = a5;
  int8x8_t v11 = (Espresso *)(4 * a2 * (uint64_t)a3 * a4 * a5);
  unint64_t v12 = Espresso::kern_alloc_uninitialized(v11);
  bzero(v12, (size_t)v11);
  v10[6] = v12;
  *((unsigned char *)v10 + 56) = 1;
  *a1 = v10 + 3;
  a1[1] = v10;
}

void sub_1920DC514(_Unwind_Exception *a1)
{
  uint64_t shared_weak_owners = (std::__shared_weak_count *)v1[3].__shared_weak_owners_;
  if (shared_weak_owners) {
    nitro::nitro_function::nitro_function(shared_weak_owners);
  }
  double v4 = (std::__shared_weak_count *)v1[3].__vftable;
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v5);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned short,4>,std::allocator<Espresso::blob<unsigned short,4>>,int &,int &,int &,int &,void>(void *a1, int a2, int a3, int a4, int a5)
{
  long long v10 = operator new(0x60uLL);
  v10[1] = 0;
  v10[2] = 0;
  *long long v10 = &unk_1EE389D80;
  v10[3] = &unk_1EE36C130;
  *((_OWORD *)v10 + 4) = 0u;
  *((_OWORD *)v10 + 5) = 0u;
  *((_DWORD *)v10 + 8) = a2;
  *((_DWORD *)v10 + 9) = a3;
  *((_DWORD *)v10 + 10) = a4;
  *((_DWORD *)v10 + 11) = a5;
  int8x8_t v11 = (Espresso *)(2 * a2 * (uint64_t)a3 * a4 * a5);
  unint64_t v12 = Espresso::kern_alloc_uninitialized(v11);
  bzero(v12, (size_t)v11);
  v10[6] = v12;
  *((unsigned char *)v10 + 56) = 1;
  *a1 = v10 + 3;
  a1[1] = v10;
}

void sub_1920DC624(_Unwind_Exception *a1)
{
  uint64_t shared_weak_owners = (std::__shared_weak_count *)v1[3].__shared_weak_owners_;
  if (shared_weak_owners) {
    nitro::nitro_function::nitro_function(shared_weak_owners);
  }
  double v4 = (std::__shared_weak_count *)v1[3].__vftable;
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v5);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_dev_op_kernel>::read(uint64_t a1, void *a2, uint64_t a3, int a4)
{
  int v20 = a4;
  uint64_t v11 = 0;
  int v12 = 0;
  *(_OWORD *)unint64_t v13 = 0u;
  *(_OWORD *)unint64_t v14 = 0u;
  long long v15 = 0u;
  *(_OWORD *)uint8x8_t v16 = 0u;
  memset(v17, 0, sizeof(v17));
  long long v18 = 0u;
  uint64_t v19 = 0;
  Espresso::SerDes::params_io<Espresso::dev_op_params_t>(a2, (uint64_t)&v11, 0);
  Espresso::abstract_engine_factory::shared(&v9);
  uint64_t v5 = v9;
  std::string::basic_string[abi:ne180100]<0>(__p, "dev_op");
  int v6 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)&v11, &v6);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  __p[0] = &v18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  __p[0] = &v17[8];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (v17[7] < 0) {
    operator delete(v16[0]);
  }
  if (v14[1])
  {
    *(void **)&long long v15 = v14[1];
    operator delete(v14[1]);
  }
  if (v13[0])
  {
    v13[1] = v13[0];
    operator delete(v13[0]);
  }
}

void sub_1920DC79C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17, void *a18)
{
  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  Espresso::dev_op_params_t::~dev_op_params_t(&a18);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::params_io<Espresso::dev_op_params_t>(void *a1, uint64_t a2, int a3)
{
  if (!a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v9, "platform");
    Espresso::SerDes::generic_serdes_object::operator[]((uint64_t)a1, (uint64_t)v9, v11);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(v11, (_DWORD *)a2);
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (v11[1]) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v11[1]);
    }
    if (v10 < 0) {
      operator delete(v9[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v9, "id");
    Espresso::SerDes::generic_serdes_object::operator[]((uint64_t)a1, (uint64_t)v9, v11);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(v11, (_DWORD *)(a2 + 4));
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (v11[1]) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v11[1]);
    }
    if (v10 < 0) {
      operator delete(v9[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v9, "model_assets_url");
    Espresso::SerDes::generic_serdes_object::operator[]((uint64_t)a1, (uint64_t)v9, v11);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(v11, a2 + 64);
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (v11[1]) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v11[1]);
    }
    if (v10 < 0) {
      operator delete(v9[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v9, "is_mil_value_inference");
    Espresso::SerDes::generic_serdes_object::operator[]((uint64_t)a1, (uint64_t)v9, v11);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(v11, (_DWORD *)(a2 + 8));
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (v11[1]) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v11[1]);
    }
    if (v10 < 0) {
      operator delete(v9[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v9, "non_default_input_names");
    Espresso::SerDes::generic_serdes_object::operator[]((uint64_t)a1, (uint64_t)v9, v11);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(v11, (std::vector<std::string> *)(a2 + 88));
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (v11[1]) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v11[1]);
    }
    if (v10 < 0) {
      operator delete(v9[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v9, "non_default_output_names");
    Espresso::SerDes::generic_serdes_object::operator[]((uint64_t)a1, (uint64_t)v9, v11);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(v11, (std::vector<std::string> *)(a2 + 112));
    goto LABEL_70;
  }
  std::string::basic_string[abi:ne180100]<0>(v9, "platform");
  Espresso::SerDes::generic_serdes_object::operator[]((uint64_t)a1, (uint64_t)v9, v11);
  (*(void (**)(void *, void **, uint64_t))(*(void *)v11[0] + 160))(v11[0], __p, a2);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  if (v11[1]) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v11[1]);
  }
  if (v10 < 0) {
    operator delete(v9[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v9, "id");
  Espresso::SerDes::generic_serdes_object::operator[]((uint64_t)a1, (uint64_t)v9, v11);
  (*(void (**)(void *, void **, uint64_t))(*(void *)v11[0] + 160))(v11[0], __p, a2 + 4);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  if (v11[1]) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v11[1]);
  }
  if (v10 < 0) {
    operator delete(v9[0]);
  }
  if (*(char *)(a2 + 87) < 0)
  {
    if (!*(void *)(a2 + 72)) {
      goto LABEL_55;
    }
  }
  else if (!*(unsigned char *)(a2 + 87))
  {
    goto LABEL_55;
  }
  std::string::basic_string[abi:ne180100]<0>(v9, "model_assets_url");
  Espresso::SerDes::generic_serdes_object::operator[]((uint64_t)a1, (uint64_t)v9, v11);
  (*(void (**)(void *, void **, uint64_t))(*(void *)v11[0] + 232))(v11[0], __p, a2 + 64);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  if (v11[1]) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v11[1]);
  }
  if (v10 < 0) {
    operator delete(v9[0]);
  }
LABEL_55:
  std::string::basic_string[abi:ne180100]<0>(v9, "is_mil_value_inference");
  Espresso::SerDes::generic_serdes_object::operator[]((uint64_t)a1, (uint64_t)v9, v11);
  (*(void (**)(void *, void **, uint64_t))(*(void *)v11[0] + 160))(v11[0], __p, a2 + 8);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  if (v11[1]) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v11[1]);
  }
  if (v10 < 0) {
    operator delete(v9[0]);
  }
  if (*(void *)(a2 + 88) != *(void *)(a2 + 96))
  {
    std::string::basic_string[abi:ne180100]<0>(v9, "non_default_input_names");
    Espresso::SerDes::generic_serdes_object::operator[]((uint64_t)a1, (uint64_t)v9, v11);
    (*(void (**)(void *, void **, uint64_t))(*(void *)v11[0] + 272))(v11[0], __p, a2 + 88);
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (v11[1]) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v11[1]);
    }
    if (v10 < 0) {
      operator delete(v9[0]);
    }
  }
  if (*(void *)(a2 + 112) != *(void *)(a2 + 120))
  {
    std::string::basic_string[abi:ne180100]<0>(v9, "non_default_output_names");
    Espresso::SerDes::generic_serdes_object::operator[]((uint64_t)a1, (uint64_t)v9, v11);
    (*(void (**)(void *, void **, uint64_t))(*(void *)v11[0] + 272))(v11[0], __p, a2 + 112);
LABEL_70:
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (v11[1]) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v11[1]);
    }
    if (v10 < 0) {
      operator delete(v9[0]);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(v11, "mil_program");
  int v6 = (*(uint64_t (**)(void *, void **))(*(void *)a1 + 24))(a1, v11);
  int v7 = v6;
  if (SHIBYTE(__p[0]) < 0)
  {
    operator delete(v11[0]);
    if (!v7) {
      goto LABEL_83;
    }
  }
  else if (!v6)
  {
    goto LABEL_83;
  }
  std::string::basic_string[abi:ne180100]<0>(v9, "mil_program");
  (*(void (**)(void **__return_ptr, void *, void **))(*(void *)a1 + 112))(v11, a1, v9);
  char v8 = (void **)(a2 + 64);
  if (*(char *)(a2 + 87) < 0) {
    operator delete(*v8);
  }
  *(_OWORD *)char v8 = *(_OWORD *)v11;
  *(void **)(a2 + 80) = __p[0];
  HIBYTE(__p[0]) = 0;
  LOBYTE(v11[0]) = 0;
  if (v10 < 0)
  {
    operator delete(v9[0]);
    if (a3) {
      goto LABEL_84;
    }
    goto LABEL_88;
  }
LABEL_83:
  if (a3)
  {
LABEL_84:
    v9[0] = a1;
    std::string::basic_string[abi:ne180100]<0>(v11, "bottom_shapes");
    Espresso::SerDes::params_io<Espresso::dev_op_params_t>(Espresso::SerDes::generic_serdes_object &,Espresso::dev_op_params_t &,BOOL)::$_0::operator()(v9, (uint64_t)v11, *(void *)(a2 + 16), *(void *)(a2 + 24));
    if (SHIBYTE(__p[0]) < 0) {
      operator delete(v11[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v11, "top_shapes");
    Espresso::SerDes::params_io<Espresso::dev_op_params_t>(Espresso::SerDes::generic_serdes_object &,Espresso::dev_op_params_t &,BOOL)::$_0::operator()(v9, (uint64_t)v11, *(void *)(a2 + 40), *(void *)(a2 + 48));
    goto LABEL_91;
  }
LABEL_88:
  std::string::basic_string[abi:ne180100]<0>(v11, "bottom_shapes");
  Espresso::SerDes::params_io<Espresso::dev_op_params_t>(Espresso::SerDes::generic_serdes_object &,Espresso::dev_op_params_t &,BOOL)::$_1::operator()((uint64_t)a1, (uint64_t)v11, (void **)(a2 + 16));
  if (SHIBYTE(__p[0]) < 0) {
    operator delete(v11[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v11, "top_shapes");
  Espresso::SerDes::params_io<Espresso::dev_op_params_t>(Espresso::SerDes::generic_serdes_object &,Espresso::dev_op_params_t &,BOOL)::$_1::operator()((uint64_t)a1, (uint64_t)v11, (void **)(a2 + 40));
LABEL_91:
  if (SHIBYTE(__p[0]) < 0) {
    operator delete(v11[0]);
  }
}

void sub_1920DCEE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::params_io<Espresso::dev_op_params_t>(Espresso::SerDes::generic_serdes_object &,Espresso::dev_op_params_t &,BOOL)::$_1::operator()(uint64_t a1, uint64_t a2, void **a3)
{
  (*(void (**)(uint64_t **__return_ptr))(*(void *)a1 + 128))(&v29);
  double v4 = v29;
  for (uint64_t i = v30; v4 != i; v4 += 2)
  {
    *(void *)&long long v6 = 0x100000001;
    *((void *)&v6 + 1) = 0x100000001;
    long long v27 = v6;
    unint64_t v28 = 0xFFFFFFFF00000001;
    uint64_t v7 = *v4;
    std::string::basic_string[abi:ne180100]<0>(v21, "n");
    Espresso::SerDes::generic_serdes_object::operator[](v7, (uint64_t)v21, &v23);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v23, (_DWORD *)&v27 + 1);
    if (v26 < 0) {
      operator delete(__p);
    }
    if (v24) {
      nitro::nitro_function::nitro_function(v24);
    }
    if (v22 < 0) {
      operator delete(v21[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v21, "k");
    Espresso::SerDes::generic_serdes_object::operator[](v7, (uint64_t)v21, &v23);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v23, (_DWORD *)&v27 + 2);
    if (v26 < 0) {
      operator delete(__p);
    }
    if (v24) {
      nitro::nitro_function::nitro_function(v24);
    }
    if (v22 < 0) {
      operator delete(v21[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v21, "h");
    Espresso::SerDes::generic_serdes_object::operator[](v7, (uint64_t)v21, &v23);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v23, (_DWORD *)((unint64_t)&v27 | 0xC));
    if (v26 < 0) {
      operator delete(__p);
    }
    if (v24) {
      nitro::nitro_function::nitro_function(v24);
    }
    if (v22 < 0) {
      operator delete(v21[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v21, "w");
    Espresso::SerDes::generic_serdes_object::operator[](v7, (uint64_t)v21, &v23);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v23, &v28);
    if (v26 < 0) {
      operator delete(__p);
    }
    if (v24) {
      nitro::nitro_function::nitro_function(v24);
    }
    if (v22 < 0) {
      operator delete(v21[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v21, "_rank");
    Espresso::SerDes::generic_serdes_object::operator[](v7, (uint64_t)v21, &v23);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v23, (_DWORD *)&v28 + 1);
    if (v26 < 0) {
      operator delete(__p);
    }
    if (v24) {
      nitro::nitro_function::nitro_function(v24);
    }
    if (v22 < 0) {
      operator delete(v21[0]);
    }
    uint64_t v9 = (char *)a3[1];
    char v8 = (char *)a3[2];
    if (v9 >= v8)
    {
      unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((v9 - (unsigned char *)*a3) >> 3);
      unint64_t v12 = v11 + 1;
      if (v11 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((v8 - (unsigned char *)*a3) >> 3);
      if (2 * v13 > v12) {
        unint64_t v12 = 2 * v13;
      }
      if (v13 >= 0x555555555555555) {
        unint64_t v14 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v14 = v12;
      }
      if (v14) {
        unint64_t v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v14);
      }
      else {
        uint64_t v15 = 0;
      }
      unint64_t v16 = v14 + 24 * v11;
      *(_OWORD *)unint64_t v16 = v27;
      *(void *)(v16 + 16) = v28;
      long long v18 = (char *)*a3;
      unint64_t v17 = (char *)a3[1];
      uint64_t v19 = (char *)v16;
      if (v17 != *a3)
      {
        do
        {
          long long v20 = *(_OWORD *)(v17 - 24);
          *((void *)v19 - 1) = *((void *)v17 - 1);
          *(_OWORD *)(v19 - 24) = v20;
          v19 -= 24;
          v17 -= 24;
        }
        while (v17 != v18);
        unint64_t v17 = (char *)*a3;
      }
      char v10 = (void *)(v16 + 24);
      *a3 = v19;
      a3[1] = (void *)(v16 + 24);
      a3[2] = (void *)(v14 + 24 * v15);
      if (v17) {
        operator delete(v17);
      }
    }
    else
    {
      *(_OWORD *)uint64_t v9 = v27;
      *((void *)v9 + 2) = v28;
      char v10 = v9 + 24;
    }
    a3[1] = v10;
  }
  unint64_t v23 = (void **)&v29;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v23);
}

void sub_1920DD328(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  a15 = &a23;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a15);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(void *a1, std::vector<std::string> *a2)
{
  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 152))(&v4);
    std::vector<std::string>::__vdeallocate(a2);
    *(_OWORD *)&a2->__begin_ = v4;
    a2->__end_cap_.__value_ = v5;
    uint64_t v5 = 0;
    long long v4 = 0uLL;
    long long v6 = (void **)&v4;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v6);
  }
}

void Espresso::stack_nd_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6 = *a4;
  if (a4[1] != *a4)
  {
    uint64_t v8 = 0;
    unint64_t v9 = 0;
    do
    {
      Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v42, (uint64_t *)(v6 + v8));
      char v10 = v43;
      *(void *)(*(void *)(a1 + 312) + 8 * v9) = *(void *)(v42 + 24);
      if (v10) {
        nitro::nitro_function::nitro_function(v10);
      }
      ++v9;
      uint64_t v6 = *a4;
      v8 += 16;
    }
    while (v9 < (a4[1] - *a4) >> 4);
  }
  if (*(void *)(a3 + 8) == *(void *)a3)
  {
    uint64_t v42 = 0;
    long long v43 = 0;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v42, *(uint64_t **)a3);
  }
  int v11 = *(_DWORD *)(a1 + 280);
  memset(v41, 0, sizeof(v41));
  std::vector<std::vector<int>>::__init_with_size[abi:ne180100]<std::vector<int>*,std::vector<int>*>(v41, *(void *)(a1 + 288), *(void *)(a1 + 296), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 296) - *(void *)(a1 + 288)) >> 3));
  NDLayers::stack_nd_shape_computation(v11, v41, (char **)(a1 + 336));
  int v44 = v41;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v44);
  int v12 = *(_DWORD *)(a1 + 280);
  unint64_t v14 = *(unsigned char **)(a1 + 312);
  unint64_t v13 = *(unsigned char **)(a1 + 320);
  int64_t v15 = v13 - v14;
  if (v13 == v14)
  {
    unint64_t v16 = 0;
  }
  else
  {
    if (v15 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v16 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v15 >> 3);
    memmove(v16, v14, v15);
  }
  std::string v38 = 0;
  uint64_t v39 = 0;
  uint64_t v40 = 0;
  std::vector<std::vector<int>>::__init_with_size[abi:ne180100]<std::vector<int>*,std::vector<int>*>(&v38, *(void *)(a1 + 288), *(void *)(a1 + 296), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 296) - *(void *)(a1 + 288)) >> 3));
  unint64_t v17 = (int *)v38[1];
  unint64_t v18 = (unint64_t)v17 - *v38;
  long long v20 = *(int **)(a1 + 336);
  uint64_t v19 = *(int **)(a1 + 344);
  if (v19 - v20 != (uint64_t)((v18 << 30) + 0x100000000) >> 32)
  {
    unint64_t v23 = "Stack_nd layer: Invalid rank of output tensor.";
    goto LABEL_35;
  }
  unint64_t v21 = v18 >> 2;
  int v22 = (((v18 >> 2) + 1) & (v12 >> 31)) + v12;
  unint64_t v23 = "Stack_nd layer: Invalid value of the argument 'axis'.";
  if (v22 < 0 || v22 > (int)v21) {
LABEL_35:
  }
    Espresso::throw_exception_selector<Espresso::invalid_state_error>(v23);
  int v24 = 1;
  while (v20 != v19)
  {
    int v25 = *v20++;
    v24 *= v25;
  }
  char v26 = (int *)(*v38 + 4 * v22);
  int v27 = 1;
  while (v26 != v17)
  {
    int v28 = *v26++;
    v27 *= v28;
  }
  if (v24 >= 1)
  {
    uint64_t v29 = 0;
    int v30 = 0;
    uint64_t v36 = *(void *)(v42 + 24);
    unint64_t v37 = 0xAAAAAAAAAAAAAAABLL * ((v39 - (uint64_t)v38) >> 3);
    uint64_t v35 = -1431655765 * ((v39 - (uint64_t)v38) >> 3);
    do
    {
      if ((int)v37 >= 1)
      {
        int v31 = v30;
        int v32 = v16;
        uint64_t v33 = v35;
        unint64_t v34 = (float *)(v36 + 4 * v30);
        do
        {
          cblas_scopy(v27, (const float *)(*v16 + 4 * v29), 1, v34, 1);
          v31 += v27;
          v34 += v27;
          ++v16;
          --v33;
        }
        while (v33);
        int v30 = v31;
        unint64_t v16 = v32;
      }
      v29 += v27;
    }
    while (v30 < v24);
  }
  int v44 = (char ***)&v38;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v44);
  if (v16) {
    operator delete(v16);
  }
  if (v43) {
    nitro::nitro_function::nitro_function(v43);
  }
}

void sub_1920DD730(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19, uint64_t a20)
{
  if (v20) {
    operator delete(v20);
  }
  if (a19) {
    nitro::nitro_function::nitro_function(a19);
  }
  _Unwind_Resume(exception_object);
}

char *NDLayers::stack_nd_shape_computation(int a1, char ***a2, char **a3)
{
  int v6 = -1431655765 * (a2[1] - *a2);
  uint64_t v7 = **a2;
  uint64_t v8 = (*a2)[1];
  unint64_t v9 = v8 - v7;
  if (v6 >= 2)
  {
    char v10 = *a2 + 4;
    uint64_t v11 = -1431655765 * (a2[1] - *a2) - 1;
    do
    {
      int v12 = (const void *)*(v10 - 1);
      if (v9 != *v10 - (void)v12 || memcmp(v7, v12, v8 - v7)) {
        Espresso::throw_exception_selector<Espresso::invalid_state_error>("Stack_nd layer: Invalid shapes of input tensors.");
      }
      v10 += 3;
      --v11;
    }
    while (v11);
  }
  uint64_t result = *a3;
  if ((a3[1] - *a3) >> 2 != (uint64_t)((v9 << 30) + 0x100000000) >> 32) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Stack_nd layer: Invalid rank of output tensor.");
  }
  uint64_t v14 = (((v9 >> 2) + 1) & (a1 >> 31)) + a1;
  if ((v14 & 0x80000000) != 0 || (int)v14 > (int)(v9 >> 2)) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Stack_nd layer: Invalid value of the argument 'axis'.");
  }
  if (v14)
  {
    memmove(result, v7, 4 * v14);
    uint64_t result = *a3;
    uint64_t v7 = **a2;
    uint64_t v8 = (*a2)[1];
  }
  int64_t v15 = (int *)&result[4 * v14];
  *int64_t v15 = v6;
  unint64_t v16 = &v7[4 * v14];
  if (v8 != v16)
  {
    return (char *)memmove(v15 + 1, v16, v8 - v16);
  }
  return result;
}

uint64_t std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  size_t prime = *(void *)(a2 + 8);
  if (prime == 1)
  {
    size_t prime = 2;
LABEL_17:
    std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::__do_rehash<true>(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(*(void *)(a2 + 8));
    int8x8_t v5 = *(int8x8_t *)(a1 + 8);
    BOOL v6 = prime >= *(void *)&v5;
    if (prime > *(void *)&v5) {
      goto LABEL_17;
    }
  }
  else
  {
    int8x8_t v5 = 0;
    BOOL v6 = 1;
    if (prime) {
      goto LABEL_17;
    }
  }
  if (!v6)
  {
    unint64_t v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v5 < 3uLL || (uint8x8_t v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      unint64_t v7 = std::__next_prime(v7);
    }
    else
    {
      uint64_t v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2) {
        unint64_t v7 = v9;
      }
    }
    if (prime <= v7) {
      size_t prime = v7;
    }
    if (prime < *(void *)&v5) {
      goto LABEL_17;
    }
  }
LABEL_18:
  for (uint64_t i = *(unsigned __int8 **)(a2 + 16); i; uint64_t i = *(unsigned __int8 **)i)
    std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::vector<MIL::IRDimension const*>> const&>(a1, i + 16, (long long *)i + 1);
  return a1;
}

void sub_1920DDA14(_Unwind_Exception *a1)
{
  std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_1920DDA28(_Unwind_Exception *a1)
{
  std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

char *std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::vector<MIL::IRDimension const*>> const&>(uint64_t a1, unsigned __int8 *a2, long long *a3)
{
  unint64_t v7 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v9) {
        unint64_t v3 = v7 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v7;
    }
    int v12 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      unint64_t v13 = (char *)*v12;
      if (*v12)
      {
        do
        {
          unint64_t v14 = *((void *)v13 + 1);
          if (v14 == v8)
          {
            if (std::equal_to<std::string>::operator()[abi:ne180100]((unsigned __int8 *)v13 + 16, a2)) {
              return v13;
            }
          }
          else
          {
            if (v11 > 1)
            {
              if (v14 >= v9) {
                v14 %= v9;
              }
            }
            else
            {
              v14 &= v9 - 1;
            }
            if (v14 != v3) {
              break;
            }
          }
          unint64_t v13 = *(char **)v13;
        }
        while (v13);
      }
    }
  }
  int64_t v15 = (void *)(a1 + 16);
  unint64_t v13 = (char *)operator new(0x40uLL);
  v26[0] = v13;
  v26[1] = a1 + 16;
  *(void *)unint64_t v13 = 0;
  *((void *)v13 + 1) = v8;
  std::pair<std::string const,std::vector<MIL::IRDimension const*>>::pair[abi:ne180100]((std::string *)(v13 + 16), a3);
  char v27 = 1;
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v9 || (float)(v17 * (float)v9) < v16)
  {
    BOOL v18 = 1;
    if (v9 >= 3) {
      BOOL v18 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v9);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__rehash<true>(a1, v21);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v22 = *(void *)a1;
  unint64_t v23 = *(void **)(*(void *)a1 + 8 * v3);
  if (v23)
  {
    *(void *)unint64_t v13 = *v23;
LABEL_38:
    *unint64_t v23 = v13;
    goto LABEL_39;
  }
  *(void *)unint64_t v13 = *v15;
  *int64_t v15 = v13;
  *(void *)(v22 + 8 * v3) = v15;
  if (*(void *)v13)
  {
    unint64_t v24 = *(void *)(*(void *)v13 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v24 >= v9) {
        v24 %= v9;
      }
    }
    else
    {
      v24 &= v9 - 1;
    }
    unint64_t v23 = (void *)(*(void *)a1 + 8 * v24);
    goto LABEL_38;
  }
LABEL_39:
  v26[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<unsigned long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<unsigned long>>,void *>>>>::reset[abi:ne180100]((uint64_t)v26);
  return v13;
}

void sub_1920DDC8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<unsigned long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<unsigned long>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,std::vector<MIL::IRDimension const*>>::pair[abi:ne180100](std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    this[1].__r_.__value_.__r.__words[0] = 0;
    this[1].__r_.__value_.__l.__size_ = 0;
    this[1].__r_.__value_.__r.__words[2] = 0;
    BOOL v6 = (unsigned char *)*((void *)a2 + 3);
    unint64_t v9 = (unsigned char *)*((void *)a2 + 4);
    int64_t v7 = v9 - v6;
    if (v9 == v6) {
      return this;
    }
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
    this[1].__r_.__value_.__r.__words[0] = 0;
    this[1].__r_.__value_.__l.__size_ = 0;
    this[1].__r_.__value_.__r.__words[2] = 0;
    BOOL v6 = (unsigned char *)*((void *)a2 + 3);
    int8x8_t v5 = (unsigned char *)*((void *)a2 + 4);
    int64_t v7 = v5 - v6;
    if (v5 == v6) {
      return this;
    }
  }
  if (v7 < 0) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  uint8x8_t v10 = operator new(v7);
  this[1].__r_.__value_.__r.__words[0] = (std::string::size_type)v10;
  this[1].__r_.__value_.__l.__size_ = (std::string::size_type)v10;
  std::string::size_type v11 = (std::string::size_type)v10 + 8 * (v7 >> 3);
  this[1].__r_.__value_.__r.__words[2] = v11;
  memcpy(v10, v6, v7);
  this[1].__r_.__value_.__l.__size_ = v11;
  return this;
}

void sub_1920DDD74(_Unwind_Exception *a1)
{
  long long v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 32) = v4;
    operator delete(v4);
  }
  std::pair<std::string const,std::vector<MIL::IRDimension const*>>::pair[abi:ne180100]((void **)v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::wisdom_manager>::__on_zero_shared(uint64_t a1)
{
  if (*(char *)(a1 + 375) < 0) {
    operator delete(*(void **)(a1 + 352));
  }
  if (*(char *)(a1 + 319) < 0) {
    operator delete(*(void **)(a1 + 296));
  }
  if (*(char *)(a1 + 295) < 0) {
    operator delete(*(void **)(a1 + 272));
  }
  std::__tree<std::__value_type<Espresso::wisdom_kernel_key,std::map<std::string,int>>,std::__map_value_compare<Espresso::wisdom_kernel_key,std::__value_type<Espresso::wisdom_kernel_key,std::map<std::string,int>>,std::less<Espresso::wisdom_kernel_key>,true>,std::allocator<std::__value_type<Espresso::wisdom_kernel_key,std::map<std::string,int>>>>::destroy(*(void **)(a1 + 256));
  if (*(char *)(a1 + 247) < 0) {
    operator delete(*(void **)(a1 + 224));
  }
  std::__tree<std::string>::destroy(a1 + 192, *(char **)(a1 + 200));
  int v2 = *(void **)(a1 + 136);
  if (v2)
  {
    *(void *)(a1 + 144) = v2;
    operator delete(v2);
  }
  std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::destroy(*(void **)(a1 + 120));
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  if (*(char *)(a1 + 79) < 0)
  {
    unint64_t v3 = *(void **)(a1 + 56);
    operator delete(v3);
  }
}

void std::__tree<std::__value_type<Espresso::wisdom_kernel_key,std::map<std::string,int>>,std::__map_value_compare<Espresso::wisdom_kernel_key,std::__value_type<Espresso::wisdom_kernel_key,std::map<std::string,int>>,std::less<Espresso::wisdom_kernel_key>,true>,std::allocator<std::__value_type<Espresso::wisdom_kernel_key,std::map<std::string,int>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<Espresso::wisdom_kernel_key,std::map<std::string,int>>,std::__map_value_compare<Espresso::wisdom_kernel_key,std::__value_type<Espresso::wisdom_kernel_key,std::map<std::string,int>>,std::less<Espresso::wisdom_kernel_key>,true>,std::allocator<std::__value_type<Espresso::wisdom_kernel_key,std::map<std::string,int>>>>::destroy(*a1);
    std::__tree<std::__value_type<Espresso::wisdom_kernel_key,std::map<std::string,int>>,std::__map_value_compare<Espresso::wisdom_kernel_key,std::__value_type<Espresso::wisdom_kernel_key,std::map<std::string,int>>,std::less<Espresso::wisdom_kernel_key>,true>,std::allocator<std::__value_type<Espresso::wisdom_kernel_key,std::map<std::string,int>>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<Espresso::wisdom_kernel_key const,std::map<std::string,int>>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void Espresso::layer::~layer(void **this)
{
  *this = &unk_1EE36C758;
  if (*((char *)this + 223) < 0) {
    operator delete(this[25]);
  }
  std::__function::__value_func<void ()(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer const&)>::~__value_func[abi:ne180100](this + 20);
  if (*((char *)this + 151) < 0) {
    operator delete(this[16]);
  }
  unint64_t v3 = this + 13;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v3);
  unint64_t v3 = this + 10;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v3);
  int v2 = (std::__shared_weak_count *)this[9];
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  if (*((char *)this + 63) < 0) {
    operator delete(this[5]);
  }
  if (*((char *)this + 39) < 0) {
    operator delete(this[2]);
  }
}

{
  uint64_t vars8;

  Espresso::layer::~layer(this);

  JUMPOUT(0x192FF16B0);
}

void *std::__function::__value_func<void ()(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer const&)>::~__value_func[abi:ne180100](void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t Espresso::allocate_and_color_blob(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, int a8, uint64_t a9, unint64_t a10, void *a11)
{
  BOOL v18 = std::__hash_table<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,int>,std::__unordered_map_hasher<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,int>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::__unordered_map_equal<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,int>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,int>>>::find<std::shared_ptr<Espresso::abstract_blob_container>>(a9, a10, *(void *)a2);
  if (!v18) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  unint64_t v19 = v18[4];
  LOBYTE(v37) = 1;
  std::vector<BOOL>::vector(&__p, a7, (unsigned __int8 *)&v37);
  for (uint64_t i = *(void **)(a3 + 16); i; uint64_t i = (void *)*i)
  {
    size_t v21 = std::__hash_table<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,int>,std::__unordered_map_hasher<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,int>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::__unordered_map_equal<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,int>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,int>>>::__emplace_unique_key_args<std::shared_ptr<Espresso::abstract_blob_container>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<Espresso::abstract_blob_container> const&>,std::tuple<>>((uint64_t *)a4, i[2], i + 2);
    *(void *)((char *)__p + (((unint64_t)*((int *)v21 + 8) >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << *((_DWORD *)v21 + 8));
  }
  uint64_t v22 = *(uint64_t **)(a5 + 16);
  if (v22)
  {
    unint64_t v23 = (char *)__p;
    do
    {
      *(void *)&v23[((unint64_t)*((int *)v22 + 4) >> 3) & 0x1FFFFFFFFFFFFFF8] &= ~(1 << *((_DWORD *)v22 + 4));
      uint64_t v22 = (uint64_t *)*v22;
    }
    while (v22);
  }
  char v24 = 0;
  uint64_t v25 = 0;
  __int16 v37 = 256;
  uint64_t v26 = 0xFFFFFFFFLL;
  while (1)
  {
    char v27 = v24;
    if (a7) {
      break;
    }
LABEL_21:
    char v24 = 1;
    uint64_t v25 = 1;
    if (v27) {
      goto LABEL_24;
    }
  }
  unint64_t v28 = 0;
  unint64_t v29 = 0;
  int v30 = *((unsigned __int8 *)&v37 + v25);
  while (1)
  {
    if (((*(void *)((char *)__p + ((v28 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v28) & 1) == 0) {
      goto LABEL_19;
    }
    unint64_t v31 = *(void *)(*a11 + 8 * v28);
    if (!v30 && v19 > v31) {
      goto LABEL_19;
    }
    unint64_t v32 = v31 - v19;
    if (v19 > v31) {
      unint64_t v32 = v19 - v31;
    }
    if (v32 >= v29 && (v26 & 0x80000000) == 0) {
      goto LABEL_19;
    }
    if (!v31) {
      break;
    }
    uint64_t v26 = v28;
    unint64_t v29 = v32;
LABEL_19:
    if (a7 == ++v28)
    {
      if ((v26 & 0x80000000) == 0) {
        goto LABEL_24;
      }
      goto LABEL_21;
    }
  }
  uint64_t v26 = v28;
  if ((v28 & 0x80000000) != 0) {
    goto LABEL_21;
  }
LABEL_24:
  unint64_t v33 = *(void *)a2;
  if (!std::__hash_table<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,int>,std::__unordered_map_hasher<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,int>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::__unordered_map_equal<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,int>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,int>>>::find<std::shared_ptr<Espresso::abstract_blob_container>>(*(void *)a4, *(void *)(a4 + 8), *(void *)a2))
  {
    *((_DWORD *)std::__hash_table<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,int>,std::__unordered_map_hasher<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,int>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::__unordered_map_equal<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,int>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,int>>>::__emplace_unique_key_args<std::shared_ptr<Espresso::abstract_blob_container>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<Espresso::abstract_blob_container> const&>,std::tuple<>>((uint64_t *)a4, v33, (void *)a2)+ 8) = v26;
    if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(void **)(a6 + 264), a1))
    {
      std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>(a5, v26, v26);
    }
    if (a8) {
      std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>(a5, v26, v26);
    }
    unint64_t v34 = *(void *)(*a11 + 8 * (int)v26);
    if (v34 <= v19) {
      unint64_t v34 = v19;
    }
    *(void *)(*a11 + 8 * (int)v26) = v34;
    unint64_t v33 = *(void *)a2;
  }
  std::__hash_table<std::shared_ptr<Espresso::abstract_blob_container>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>::__emplace_unique_key_args<std::shared_ptr<Espresso::abstract_blob_container>,std::shared_ptr<Espresso::abstract_blob_container> const&>(a3, v33, v33, *(void *)(a2 + 8));
  if (__p) {
    operator delete(__p);
  }
  return v26;
}

void sub_1920DE278(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::__hash_table<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,int>,std::__unordered_map_hasher<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,int>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::__unordered_map_equal<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,int>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,int>>>::__emplace_unique_key_args<std::shared_ptr<Espresso::abstract_blob_container>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<Espresso::abstract_blob_container> const&>,std::tuple<>>(uint64_t *a1, unint64_t a2, void *a3)
{
  unint64_t v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  unint64_t v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  unint64_t v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  unint64_t v9 = a1[1];
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }
    else
    {
      unint64_t v3 = v8 & (v9 - 1);
    }
    std::string::size_type v11 = *(void ***)(*a1 + 8 * v3);
    if (v11)
    {
      for (uint64_t i = *v11; i; uint64_t i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == a2) {
            return i;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3) {
            break;
          }
        }
      }
    }
  }
  unint64_t v14 = a1 + 2;
  int64_t v15 = operator new(0x28uLL);
  uint64_t i = v15;
  *int64_t v15 = 0;
  v15[1] = v8;
  uint64_t v16 = a3[1];
  v15[2] = *a3;
  v15[3] = v16;
  if (v16) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
  }
  *((_DWORD *)v15 + 8) = 0;
  float v17 = (float)(unint64_t)(a1[3] + 1);
  float v18 = *((float *)a1 + 8);
  if (!v9 || (float)(v18 * (float)v9) < v17)
  {
    BOOL v19 = 1;
    if (v9 >= 3) {
      BOOL v19 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v9);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      int8x8_t prime = (int8x8_t)v21;
    }
    else {
      int8x8_t prime = (int8x8_t)v20;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v9 = a1[1];
    if (*(void *)&prime > v9) {
      goto LABEL_32;
    }
    if (*(void *)&prime < v9)
    {
      unint64_t v29 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v9 < 3 || (uint8x8_t v30 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v30.i16[0] = vaddlv_u8(v30), v30.u32[0] > 1uLL))
      {
        unint64_t v29 = std::__next_prime(v29);
      }
      else
      {
        uint64_t v31 = 1 << -(char)__clz(v29 - 1);
        if (v29 >= 2) {
          unint64_t v29 = v31;
        }
      }
      if (*(void *)&prime <= v29) {
        int8x8_t prime = (int8x8_t)v29;
      }
      if (*(void *)&prime >= v9)
      {
        unint64_t v9 = a1[1];
      }
      else
      {
        if (prime)
        {
LABEL_32:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          unint64_t v23 = operator new(8 * *(void *)&prime);
          char v24 = (void *)*a1;
          *a1 = (uint64_t)v23;
          if (v24) {
            operator delete(v24);
          }
          uint64_t v25 = 0;
          a1[1] = (uint64_t)prime;
          do
            *(void *)(*a1 + 8 * v25++) = 0;
          while (*(void *)&prime != v25);
          uint64_t v26 = (void *)*v14;
          if (*v14)
          {
            unint64_t v27 = v26[1];
            uint8x8_t v28 = (uint8x8_t)vcnt_s8(prime);
            v28.i16[0] = vaddlv_u8(v28);
            if (v28.u32[0] > 1uLL)
            {
              if (v27 >= *(void *)&prime) {
                v27 %= *(void *)&prime;
              }
            }
            else
            {
              v27 &= *(void *)&prime - 1;
            }
            *(void *)(*a1 + 8 * v27) = v14;
            unint64_t v32 = (void *)*v26;
            if (*v26)
            {
              do
              {
                unint64_t v33 = v32[1];
                if (v28.u32[0] > 1uLL)
                {
                  if (v33 >= *(void *)&prime) {
                    v33 %= *(void *)&prime;
                  }
                }
                else
                {
                  v33 &= *(void *)&prime - 1;
                }
                if (v33 != v27)
                {
                  if (!*(void *)(*a1 + 8 * v33))
                  {
                    *(void *)(*a1 + 8 * v33) = v26;
                    goto LABEL_57;
                  }
                  *uint64_t v26 = *v32;
                  *unint64_t v32 = **(void **)(*a1 + 8 * v33);
                  **(void **)(*a1 + 8 * v33) = v32;
                  unint64_t v32 = v26;
                }
                unint64_t v33 = v27;
LABEL_57:
                uint64_t v26 = v32;
                unint64_t v32 = (void *)*v32;
                unint64_t v27 = v33;
              }
              while (v32);
            }
          }
          unint64_t v9 = (unint64_t)prime;
          goto LABEL_61;
        }
        std::string v38 = (void *)*a1;
        *a1 = 0;
        if (v38) {
          operator delete(v38);
        }
        unint64_t v9 = 0;
        a1[1] = 0;
      }
    }
LABEL_61:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v34 = *a1;
  uint64_t v35 = *(void **)(*a1 + 8 * v3);
  if (v35)
  {
    void *i = *v35;
LABEL_74:
    *uint64_t v35 = i;
    goto LABEL_75;
  }
  void *i = *v14;
  *unint64_t v14 = i;
  *(void *)(v34 + 8 * v3) = v14;
  if (*i)
  {
    unint64_t v36 = *(void *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v36 >= v9) {
        v36 %= v9;
      }
    }
    else
    {
      v36 &= v9 - 1;
    }
    uint64_t v35 = (void *)(*a1 + 8 * v36);
    goto LABEL_74;
  }
LABEL_75:
  ++a1[3];
  return i;
}

void sub_1920DE6B8(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::shared_ptr<Espresso::abstract_blob_container>,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::shared_ptr<Espresso::abstract_blob_container>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>::__emplace_unique_key_args<std::shared_ptr<Espresso::abstract_blob_container>,std::shared_ptr<Espresso::abstract_blob_container> const&>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  unint64_t v9 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v8 >> 47) ^ v8);
  unint64_t v10 = 0x9DDFEA08EB382D69 * (v9 ^ (v9 >> 47));
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = 0x9DDFEA08EB382D69 * (v9 ^ (v9 >> 47));
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
    }
    else
    {
      unint64_t v4 = v10 & (v11 - 1);
    }
    unint64_t v13 = *(void **)(*(void *)a1 + 8 * v4);
    if (v13)
    {
      for (uint64_t i = (void *)*v13; i; uint64_t i = (void *)*i)
      {
        unint64_t v15 = i[1];
        if (v15 == v10)
        {
          if (i[2] == a2) {
            return;
          }
        }
        else
        {
          if (v12.u32[0] > 1uLL)
          {
            if (v15 >= v11) {
              v15 %= v11;
            }
          }
          else
          {
            v15 &= v11 - 1;
          }
          if (v15 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t v16 = operator new(0x20uLL);
  *uint64_t v16 = 0;
  v16[1] = v10;
  v16[2] = a3;
  v16[3] = a4;
  if (a4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(a4 + 8), 1uLL, memory_order_relaxed);
  }
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__rehash<true>(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  uint64_t v23 = *(void *)a1;
  char v24 = *(void **)(*(void *)a1 + 8 * v4);
  if (v24)
  {
    *uint64_t v16 = *v24;
LABEL_40:
    *char v24 = v16;
    goto LABEL_41;
  }
  *uint64_t v16 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v16;
  *(void *)(v23 + 8 * v4) = a1 + 16;
  if (*v16)
  {
    unint64_t v25 = *(void *)(*v16 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v25 >= v11) {
        v25 %= v11;
      }
    }
    else
    {
      v25 &= v11 - 1;
    }
    char v24 = (void *)(*(void *)a1 + 8 * v25);
    goto LABEL_40;
  }
LABEL_41:
  ++*(void *)(a1 + 24);
}

void sub_1920DE914(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::shared_ptr<Espresso::abstract_blob_container>,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

void *std::vector<BOOL>::vector(void *a1, unint64_t a2, unsigned __int8 *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<BOOL>::__vallocate[abi:ne180100](a1, a2);
    int v6 = *a3;
    unint64_t v7 = a1[1];
    unint64_t v8 = v7 + a2;
    a1[1] = v7 + a2;
    if (v7)
    {
      unint64_t v9 = v8 - 1;
      if (((v8 - 1) ^ (v7 - 1)) < 0x40)
      {
LABEL_10:
        uint64_t v13 = *a1 + 8 * (v7 >> 6);
        int v14 = v7 & 0x3F;
        if (v6) {
          std::__fill_n[abi:ne180100]<true,std::vector<BOOL>>(&v13, a2);
        }
        else {
          std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>((uint64_t)&v13, a2);
        }
        return a1;
      }
    }
    else
    {
      unint64_t v9 = v8 - 1;
    }
    unint64_t v10 = v9 >> 6;
    if (v8 >= 0x41) {
      unint64_t v11 = v10;
    }
    else {
      unint64_t v11 = 0;
    }
    *(void *)(*a1 + 8 * v11) = 0;
    goto LABEL_10;
  }
  return a1;
}

void *std::vector<BOOL>::__vallocate[abi:ne180100](void *a1, uint64_t a2)
{
  if (a2 < 0) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(((unint64_t)(a2 - 1) >> 6) + 1);
  *a1 = result;
  a1[1] = 0;
  a1[2] = v4;
  return result;
}

void *std::__fill_n[abi:ne180100]<true,std::vector<BOOL>>(void *result, unint64_t a2)
{
  unint64_t v2 = a2;
  unint64_t v3 = result;
  int v4 = *((_DWORD *)result + 2);
  int8x8_t v5 = (void *)*result;
  if (v4)
  {
    if ((64 - v4) >= a2) {
      unint64_t v6 = a2;
    }
    else {
      unint64_t v6 = (64 - v4);
    }
    *v5++ |= (0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4);
    unint64_t v2 = a2 - v6;
    void *result = v5;
  }
  unint64_t v7 = v2 >> 6;
  if (v2 >= 0x40) {
    uint64_t result = memset(v5, 255, 8 * v7);
  }
  if ((v2 & 0x3F) != 0)
  {
    unint64_t v8 = &v5[v7];
    void *v3 = v8;
    *v8 |= 0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F);
  }
  return result;
}

void Espresso::deallocate_dead_blobs(uint64_t *a1, int a2, void *a3, uint64_t a4, uint64_t *a5)
{
  v69 = 0;
  BOOL v70 = 0;
  unint64_t v71 = 0;
  int8x8_t v5 = (void *)a1[2];
  if (!v5) {
    goto LABEL_110;
  }
  unint64_t v8 = a3;
  uint64_t v65 = a1 + 2;
  unint64_t v68 = a2;
  do
  {
    unint64_t v10 = v5 + 2;
    unint64_t v11 = v5[2];
    uint64_t v12 = *a5;
    unint64_t v13 = a5[1];
    if (!std::__hash_table<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,int>,std::__unordered_map_hasher<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,int>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::__unordered_map_equal<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,int>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,int>>>::find<std::shared_ptr<Espresso::abstract_blob_container>>(*a5, v13, v11))
    {
      unint64_t v14 = *(void *)(a4 + 40) - *(void *)(a4 + 32);
      if ((int)(v14 >> 4) > a2 && (int)(v14 >> 4) >= 2)
      {
        uint64_t v16 = (v14 >> 4);
        do
        {
          uint64_t v17 = (v16 - 1);
          float v18 = *(void **)(*(void *)(a4 + 32) + 16 * v17);
          BOOL v19 = (unint64_t *)v18[10];
          unint64_t v20 = (unint64_t *)v18[11];
          if (v19 == v20)
          {
            char v21 = 0;
          }
          else
          {
            char v21 = 0;
            do
            {
              if (*v19 == *v10)
              {
                std::__hash_table<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,unsigned long>,std::__unordered_map_hasher<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,unsigned long>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::__unordered_map_equal<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,unsigned long>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,unsigned long>>>::__emplace_unique_key_args<std::shared_ptr<Espresso::abstract_blob_container>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<Espresso::abstract_blob_container> const&>,std::tuple<>>(a5, *v19, v10)[4] = v17;
                char v21 = 1;
              }
              v19 += 2;
            }
            while (v19 != v20);
            float v18 = *(void **)(*(void *)(a4 + 32) + 16 * v17);
          }
          size_t v22 = (unint64_t *)v18[13];
          for (uint64_t i = (unint64_t *)v18[14]; v22 != i; v22 += 2)
          {
            if (*v22 == *v10)
            {
              std::__hash_table<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,unsigned long>,std::__unordered_map_hasher<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,unsigned long>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::__unordered_map_equal<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,unsigned long>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,unsigned long>>>::__emplace_unique_key_args<std::shared_ptr<Espresso::abstract_blob_container>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<Espresso::abstract_blob_container> const&>,std::tuple<>>(a5, *v22, v10)[4] = v17;
              char v21 = 1;
            }
          }
          if ((int)v16 - 1 <= a2) {
            break;
          }
          if (v16 < 3) {
            break;
          }
          --v16;
        }
        while ((v21 & 1) == 0);
        uint64_t v12 = *a5;
        unint64_t v13 = a5[1];
        unint64_t v11 = *v10;
        unint64_t v8 = a3;
      }
    }
    if (std::__hash_table<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,int>,std::__unordered_map_hasher<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,int>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::__unordered_map_equal<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,int>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,int>>>::find<std::shared_ptr<Espresso::abstract_blob_container>>(v12, v13, v11))
    {
      if (std::__hash_table<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,unsigned long>,std::__unordered_map_hasher<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,unsigned long>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::__unordered_map_equal<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,unsigned long>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,unsigned long>>>::__emplace_unique_key_args<std::shared_ptr<Espresso::abstract_blob_container>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<Espresso::abstract_blob_container> const&>,std::tuple<>>(a5, v11, v10)[4] > v68)goto LABEL_57; {
      unint64_t v11 = *v10;
      }
    }
    int8x8_t v24 = (int8x8_t)v8[1];
    if (v24)
    {
      unint64_t v25 = 0x9DDFEA08EB382D69 * (((8 * v11) + 8) ^ HIDWORD(v11));
      unint64_t v26 = 0x9DDFEA08EB382D69 * (HIDWORD(v11) ^ (v25 >> 47) ^ v25);
      unint64_t v27 = 0x9DDFEA08EB382D69 * (v26 ^ (v26 >> 47));
      uint8x8_t v28 = (uint8x8_t)vcnt_s8(v24);
      v28.i16[0] = vaddlv_u8(v28);
      if (v28.u32[0] > 1uLL)
      {
        unint64_t v29 = v27;
        if (v27 >= *(void *)&v24) {
          unint64_t v29 = v27 % *(void *)&v24;
        }
      }
      else
      {
        unint64_t v29 = v27 & (*(void *)&v24 - 1);
      }
      uint8x8_t v30 = *(void **)(*v8 + 8 * v29);
      if (v30)
      {
        for (j = (void *)*v30; j; j = (void *)*j)
        {
          unint64_t v32 = j[1];
          if (v27 == v32)
          {
            if (j[2] == v11) {
              goto LABEL_57;
            }
          }
          else
          {
            if (v28.u32[0] > 1uLL)
            {
              if (v32 >= *(void *)&v24) {
                v32 %= *(void *)&v24;
              }
            }
            else
            {
              v32 &= *(void *)&v24 - 1;
            }
            if (v32 != v29) {
              break;
            }
          }
        }
      }
    }
    unint64_t v33 = v70;
    if ((unint64_t)v70 >= v71)
    {
      uint64_t v36 = ((char *)v70 - v69) >> 4;
      unint64_t v37 = v36 + 1;
      if ((unint64_t)(v36 + 1) >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v38 = v71 - (void)v69;
      if ((uint64_t)(v71 - (void)v69) >> 3 > v37) {
        unint64_t v37 = v38 >> 3;
      }
      if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v39 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v39 = v37;
      }
      v72[4] = (void **)&v71;
      uint64_t v40 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v39);
      long long v41 = &v40[2 * v36];
      v72[0] = v40;
      v72[1] = v41;
      v72[3] = &v40[2 * v42];
      long long v43 = *(_OWORD *)v10;
      *(_OWORD *)long long v41 = *(_OWORD *)v10;
      if (*((void *)&v43 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v43 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      v72[2] = v41 + 2;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v69, v72);
      uint64_t v35 = v70;
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v72);
    }
    else
    {
      unint64_t *v70 = v11;
      unint64_t v34 = v5[3];
      v33[1] = v34;
      if (v34) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v34 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v35 = v33 + 2;
    }
    BOOL v70 = v35;
LABEL_57:
    int8x8_t v5 = (void *)*v5;
  }
  while (v5);
  int v44 = (unint64_t *)v69;
  uint64_t v45 = v70;
  if (v69 != (char *)v70)
  {
    do
    {
      unint64_t v46 = *v44;
      long long v47 = (std::__shared_weak_count *)v44[1];
      if (v47) {
        atomic_fetch_add_explicit(&v47->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int8x8_t v48 = (int8x8_t)a1[1];
      if (!*(void *)&v48) {
        goto LABEL_78;
      }
      unint64_t v49 = 0x9DDFEA08EB382D69 * (((8 * v46) + 8) ^ HIDWORD(v46));
      unint64_t v50 = 0x9DDFEA08EB382D69 * (HIDWORD(v46) ^ (v49 >> 47) ^ v49);
      unint64_t v51 = 0x9DDFEA08EB382D69 * (v50 ^ (v50 >> 47));
      uint8x8_t v52 = (uint8x8_t)vcnt_s8(v48);
      v52.i16[0] = vaddlv_u8(v52);
      if (v52.u32[0] > 1uLL)
      {
        unint64_t v53 = v51;
        if (v51 >= *(void *)&v48) {
          unint64_t v53 = v51 % *(void *)&v48;
        }
      }
      else
      {
        unint64_t v53 = v51 & (*(void *)&v48 - 1);
      }
      uint64_t v54 = *a1;
      uint64_t v55 = *(void ***)(*a1 + 8 * v53);
      if (!v55 || (uint64_t v56 = *v55) == 0)
      {
LABEL_78:
        if (!v47) {
          goto LABEL_80;
        }
LABEL_79:
        nitro::nitro_function::nitro_function(v47);
        goto LABEL_80;
      }
      uint64_t v57 = *(void *)&v48 - 1;
      while (1)
      {
        unint64_t v58 = v56[1];
        if (v58 == v51) {
          break;
        }
        if (v52.u32[0] > 1uLL)
        {
          if (v58 >= *(void *)&v48) {
            v58 %= *(void *)&v48;
          }
        }
        else
        {
          v58 &= v57;
        }
        if (v58 != v53) {
          goto LABEL_78;
        }
LABEL_77:
        uint64_t v56 = (void *)*v56;
        if (!v56) {
          goto LABEL_78;
        }
      }
      if (v56[2] != v46) {
        goto LABEL_77;
      }
      if (v52.u32[0] > 1uLL)
      {
        if (v51 >= *(void *)&v48) {
          v51 %= *(void *)&v48;
        }
      }
      else
      {
        v51 &= v57;
      }
      std::string v59 = *(void **)(v54 + 8 * v51);
      do
      {
        std::string v60 = v59;
        std::string v59 = (void *)*v59;
      }
      while (v59 != v56);
      if (v60 == v65) {
        goto LABEL_99;
      }
      unint64_t v61 = v60[1];
      if (v52.u32[0] > 1uLL)
      {
        if (v61 >= *(void *)&v48) {
          v61 %= *(void *)&v48;
        }
      }
      else
      {
        v61 &= v57;
      }
      if (v61 != v51)
      {
LABEL_99:
        if (!*v56) {
          goto LABEL_100;
        }
        unint64_t v62 = *(void *)(*v56 + 8);
        if (v52.u32[0] > 1uLL)
        {
          if (v62 >= *(void *)&v48) {
            v62 %= *(void *)&v48;
          }
        }
        else
        {
          v62 &= v57;
        }
        if (v62 != v51) {
LABEL_100:
        }
          *(void *)(v54 + 8 * v51) = 0;
      }
      uint64_t v63 = *v56;
      if (*v56)
      {
        unint64_t v64 = *(void *)(v63 + 8);
        if (v52.u32[0] > 1uLL)
        {
          if (v64 >= *(void *)&v48) {
            v64 %= *(void *)&v48;
          }
        }
        else
        {
          v64 &= v57;
        }
        if (v64 != v51)
        {
          *(void *)(*a1 + 8 * v64) = v60;
          uint64_t v63 = *v56;
        }
      }
      *std::string v60 = v63;
      *uint64_t v56 = 0;
      --a1[3];
      std::__hash_node_destructor<std::allocator<std::__hash_node<std::shared_ptr<Espresso::abstract_blob_container>,void *>>>::operator()[abi:ne180100](1, v56);
      if (v47) {
        goto LABEL_79;
      }
LABEL_80:
      v44 += 2;
    }
    while (v44 != v45);
  }
LABEL_110:
  v72[0] = (void **)&v69;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v72);
}

void sub_1920DF0A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, void **a19)
{
  a19 = (void **)&a16;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a19);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,int>,std::__unordered_map_hasher<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,int>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::__unordered_map_equal<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,int>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,int>>>::find<std::shared_ptr<Espresso::abstract_blob_container>>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  if (!a2) {
    return 0;
  }
  unint64_t v3 = 0x9DDFEA08EB382D69 * (((8 * a3) + 8) ^ HIDWORD(a3));
  unint64_t v4 = 0x9DDFEA08EB382D69 * (HIDWORD(a3) ^ (v3 >> 47) ^ v3);
  unint64_t v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
  uint8x8_t v6 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v7 = v5;
    if (v5 >= a2) {
      unint64_t v7 = v5 % a2;
    }
  }
  else
  {
    unint64_t v7 = v5 & (a2 - 1);
  }
  unint64_t v8 = *(void **)(a1 + 8 * v7);
  if (!v8) {
    return 0;
  }
  uint64_t result = (void *)*v8;
  if (*v8)
  {
    do
    {
      unint64_t v10 = result[1];
      if (v5 == v10)
      {
        if (result[2] == a3) {
          return result;
        }
      }
      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v10 >= a2) {
            v10 %= a2;
          }
        }
        else
        {
          v10 &= a2 - 1;
        }
        if (v10 != v7) {
          return 0;
        }
      }
      uint64_t result = (void *)*result;
    }
    while (result);
  }
  return result;
}

void *std::__hash_table<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,unsigned long>,std::__unordered_map_hasher<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,unsigned long>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::__unordered_map_equal<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,unsigned long>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,unsigned long>>>::__emplace_unique_key_args<std::shared_ptr<Espresso::abstract_blob_container>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<Espresso::abstract_blob_container> const&>,std::tuple<>>(uint64_t *a1, unint64_t a2, void *a3)
{
  unint64_t v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  unint64_t v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  unint64_t v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  unint64_t v9 = a1[1];
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }
    else
    {
      unint64_t v3 = v8 & (v9 - 1);
    }
    unint64_t v11 = *(void ***)(*a1 + 8 * v3);
    if (v11)
    {
      for (uint64_t i = *v11; i; uint64_t i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == a2) {
            return i;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3) {
            break;
          }
        }
      }
    }
  }
  unint64_t v14 = a1 + 2;
  unint64_t v15 = operator new(0x28uLL);
  uint64_t i = v15;
  *unint64_t v15 = 0;
  v15[1] = v8;
  uint64_t v16 = a3[1];
  v15[2] = *a3;
  v15[3] = v16;
  if (v16) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
  }
  v15[4] = 0;
  float v17 = (float)(unint64_t)(a1[3] + 1);
  float v18 = *((float *)a1 + 8);
  if (!v9 || (float)(v18 * (float)v9) < v17)
  {
    BOOL v19 = 1;
    if (v9 >= 3) {
      BOOL v19 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v9);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      int8x8_t prime = (int8x8_t)v21;
    }
    else {
      int8x8_t prime = (int8x8_t)v20;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v9 = a1[1];
    if (*(void *)&prime > v9) {
      goto LABEL_32;
    }
    if (*(void *)&prime < v9)
    {
      unint64_t v29 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v9 < 3 || (uint8x8_t v30 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v30.i16[0] = vaddlv_u8(v30), v30.u32[0] > 1uLL))
      {
        unint64_t v29 = std::__next_prime(v29);
      }
      else
      {
        uint64_t v31 = 1 << -(char)__clz(v29 - 1);
        if (v29 >= 2) {
          unint64_t v29 = v31;
        }
      }
      if (*(void *)&prime <= v29) {
        int8x8_t prime = (int8x8_t)v29;
      }
      if (*(void *)&prime >= v9)
      {
        unint64_t v9 = a1[1];
      }
      else
      {
        if (prime)
        {
LABEL_32:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v23 = operator new(8 * *(void *)&prime);
          int8x8_t v24 = (void *)*a1;
          *a1 = (uint64_t)v23;
          if (v24) {
            operator delete(v24);
          }
          uint64_t v25 = 0;
          a1[1] = (uint64_t)prime;
          do
            *(void *)(*a1 + 8 * v25++) = 0;
          while (*(void *)&prime != v25);
          unint64_t v26 = (void *)*v14;
          if (*v14)
          {
            unint64_t v27 = v26[1];
            uint8x8_t v28 = (uint8x8_t)vcnt_s8(prime);
            v28.i16[0] = vaddlv_u8(v28);
            if (v28.u32[0] > 1uLL)
            {
              if (v27 >= *(void *)&prime) {
                v27 %= *(void *)&prime;
              }
            }
            else
            {
              v27 &= *(void *)&prime - 1;
            }
            *(void *)(*a1 + 8 * v27) = v14;
            unint64_t v32 = (void *)*v26;
            if (*v26)
            {
              do
              {
                unint64_t v33 = v32[1];
                if (v28.u32[0] > 1uLL)
                {
                  if (v33 >= *(void *)&prime) {
                    v33 %= *(void *)&prime;
                  }
                }
                else
                {
                  v33 &= *(void *)&prime - 1;
                }
                if (v33 != v27)
                {
                  if (!*(void *)(*a1 + 8 * v33))
                  {
                    *(void *)(*a1 + 8 * v33) = v26;
                    goto LABEL_57;
                  }
                  *unint64_t v26 = *v32;
                  *unint64_t v32 = **(void **)(*a1 + 8 * v33);
                  **(void **)(*a1 + 8 * v33) = v32;
                  unint64_t v32 = v26;
                }
                unint64_t v33 = v27;
LABEL_57:
                unint64_t v26 = v32;
                unint64_t v32 = (void *)*v32;
                unint64_t v27 = v33;
              }
              while (v32);
            }
          }
          unint64_t v9 = (unint64_t)prime;
          goto LABEL_61;
        }
        uint64_t v38 = (void *)*a1;
        *a1 = 0;
        if (v38) {
          operator delete(v38);
        }
        unint64_t v9 = 0;
        a1[1] = 0;
      }
    }
LABEL_61:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v34 = *a1;
  uint64_t v35 = *(void **)(*a1 + 8 * v3);
  if (v35)
  {
    void *i = *v35;
LABEL_74:
    *uint64_t v35 = i;
    goto LABEL_75;
  }
  void *i = *v14;
  *unint64_t v14 = i;
  *(void *)(v34 + 8 * v3) = v14;
  if (*i)
  {
    unint64_t v36 = *(void *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v36 >= v9) {
        v36 %= v9;
      }
    }
    else
    {
      v36 &= v9 - 1;
    }
    uint64_t v35 = (void *)(*a1 + 8 * v36);
    goto LABEL_74;
  }
LABEL_75:
  ++a1[3];
  return i;
}

void sub_1920DF5D0(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::shared_ptr<Espresso::abstract_blob_container>,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

void std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  unint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__clear[abi:ne180100]((uint64_t *)v2);
    unint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::shared_ptr<Espresso::abstract_blob_container>,void *>>>::operator()[abi:ne180100](char a1, void *__p)
{
  if (a1)
  {
    unint64_t v3 = (std::__shared_weak_count *)__p[3];
    if (v3) {
      nitro::nitro_function::nitro_function(v3);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

void std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>(uint64_t a1, int a2, int a3)
{
  unint64_t v6 = a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    unint64_t v9 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      for (uint64_t i = *v9; i; uint64_t i = (uint64_t *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == a2)
        {
          if (*((_DWORD *)i + 4) == a2) {
            return;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t v12 = operator new(0x18uLL);
  *uint64_t v12 = 0;
  v12[1] = v6;
  *((_DWORD *)v12 + 4) = a3;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    BOOL v15 = 1;
    if (v7 >= 3) {
      BOOL v15 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v7);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__rehash<true>(a1, v18);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v19 = *(void *)a1;
  unint64_t v20 = *(void **)(*(void *)a1 + 8 * v3);
  if (v20)
  {
    *uint64_t v12 = *v20;
LABEL_38:
    *unint64_t v20 = v12;
    goto LABEL_39;
  }
  *uint64_t v12 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v12;
  *(void *)(v19 + 8 * v3) = a1 + 16;
  if (*v12)
  {
    unint64_t v21 = *(void *)(*v12 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v21 >= v7) {
        v21 %= v7;
      }
    }
    else
    {
      v21 &= v7 - 1;
    }
    unint64_t v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
}

void sub_1920DF88C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<Espresso::ELEMENTWISE_OPERATION,std::hash<Espresso::ELEMENTWISE_OPERATION>,std::equal_to<Espresso::ELEMENTWISE_OPERATION>,std::allocator<Espresso::ELEMENTWISE_OPERATION>>::__assign_unique<Espresso::ELEMENTWISE_OPERATION const*>(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  unint64_t v4 = a2;
  uint64_t v6 = *(void *)(a1 + 8);
  if (v6)
  {
    for (uint64_t i = 0; i != v6; ++i)
      *(void *)(*(void *)a1 + 8 * i) = 0;
    uint8x8_t v8 = *(void **)(a1 + 16);
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0;
    if (v8) {
      BOOL v9 = a2 == a3;
    }
    else {
      BOOL v9 = 1;
    }
    if (!v9)
    {
      while (1)
      {
        unint64_t v11 = *v4;
        *((_DWORD *)v8 + 4) = v11;
        uint8x8_t v10 = (void *)*v8;
        v8[1] = v11;
        unint64_t v12 = *(void *)(a1 + 8);
        if (v12)
        {
          uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
          v13.i16[0] = vaddlv_u8(v13);
          if (v13.u32[0] > 1uLL)
          {
            unint64_t v14 = v11;
            if (v12 <= v11) {
              unint64_t v14 = v11 % v12;
            }
          }
          else
          {
            unint64_t v14 = (v12 - 1) & v11;
          }
          BOOL v15 = *(uint64_t ***)(*(void *)a1 + 8 * v14);
          if (v15)
          {
            for (j = *v15; j; j = (uint64_t *)*j)
            {
              unint64_t v17 = j[1];
              if (v17 == v11)
              {
                if (*((_DWORD *)j + 4) == v11) {
                  goto LABEL_49;
                }
              }
              else
              {
                if (v13.u32[0] > 1uLL)
                {
                  if (v17 >= v12) {
                    v17 %= v12;
                  }
                }
                else
                {
                  v17 &= v12 - 1;
                }
                if (v17 != v14) {
                  break;
                }
              }
            }
          }
        }
        float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
        float v19 = *(float *)(a1 + 32);
        if (!v12 || (float)(v19 * (float)v12) < v18)
        {
          uint64_t v20 = 2 * v12;
          BOOL v21 = v12 < 3 || (v12 & (v12 - 1)) != 0;
          size_t v22 = v21 | v20;
          unint64_t v23 = vcvtps_u32_f32(v18 / v19);
          if (v22 <= v23) {
            size_t v24 = v23;
          }
          else {
            size_t v24 = v22;
          }
          std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__rehash<true>(a1, v24);
          unint64_t v12 = *(void *)(a1 + 8);
          unint64_t v11 = v8[1];
        }
        uint8x8_t v25 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
        v25.i16[0] = vaddlv_u8(v25);
        if (v25.u32[0] > 1uLL)
        {
          if (v11 >= v12) {
            v11 %= v12;
          }
        }
        else
        {
          v11 &= v12 - 1;
        }
        unint64_t v26 = *(void **)(*(void *)a1 + 8 * v11);
        if (v26)
        {
          void *v8 = *v26;
        }
        else
        {
          void *v8 = *(void *)(a1 + 16);
          *(void *)(a1 + 16) = v8;
          *(void *)(*(void *)a1 + 8 * v11) = a1 + 16;
          if (!*v8) {
            goto LABEL_48;
          }
          unint64_t v27 = *(void *)(*v8 + 8);
          if (v25.u32[0] > 1uLL)
          {
            if (v27 >= v12) {
              v27 %= v12;
            }
          }
          else
          {
            v27 &= v12 - 1;
          }
          unint64_t v26 = (void *)(*(void *)a1 + 8 * v27);
        }
        *unint64_t v26 = v8;
LABEL_48:
        ++*(void *)(a1 + 24);
LABEL_49:
        ++v4;
        if (v10)
        {
          uint8x8_t v8 = v10;
          if (v4 != a3) {
            continue;
          }
        }
        goto LABEL_51;
      }
    }
    uint8x8_t v10 = v8;
LABEL_51:
    if (v10)
    {
      do
      {
        uint8x8_t v28 = (void *)*v10;
        operator delete(v10);
        uint8x8_t v10 = v28;
      }
      while (v28);
    }
  }
  while (v4 != a3)
  {
    unsigned int v29 = *v4++;
    std::__hash_table<Espresso::ELEMENTWISE_OPERATION,std::hash<Espresso::ELEMENTWISE_OPERATION>,std::equal_to<Espresso::ELEMENTWISE_OPERATION>,std::allocator<Espresso::ELEMENTWISE_OPERATION>>::__emplace_unique_key_args<Espresso::ELEMENTWISE_OPERATION,Espresso::ELEMENTWISE_OPERATION const&>(a1, v29, v29);
  }
}

void sub_1920DFB28(void *a1)
{
  __cxa_begin_catch(a1);
  do
  {
    unint64_t v2 = (void *)*v1;
    operator delete(v1);
    uint64_t v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_1920DFB48(_Unwind_Exception *a1)
{
}

void std::__hash_table<Espresso::ELEMENTWISE_OPERATION,std::hash<Espresso::ELEMENTWISE_OPERATION>,std::equal_to<Espresso::ELEMENTWISE_OPERATION>,std::allocator<Espresso::ELEMENTWISE_OPERATION>>::__emplace_unique_key_args<Espresso::ELEMENTWISE_OPERATION,Espresso::ELEMENTWISE_OPERATION const&>(uint64_t a1, unsigned int a2, int a3)
{
  unint64_t v6 = a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    BOOL v9 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      for (uint64_t i = *v9; i; uint64_t i = (uint64_t *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == a2)
        {
          if (*((_DWORD *)i + 4) == a2) {
            return;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  unint64_t v12 = operator new(0x18uLL);
  *unint64_t v12 = 0;
  v12[1] = v6;
  *((_DWORD *)v12 + 4) = a3;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    BOOL v15 = 1;
    if (v7 >= 3) {
      BOOL v15 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v7);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__rehash<true>(a1, v18);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v19 = *(void *)a1;
  uint64_t v20 = *(void **)(*(void *)a1 + 8 * v3);
  if (v20)
  {
    *unint64_t v12 = *v20;
LABEL_38:
    *uint64_t v20 = v12;
    goto LABEL_39;
  }
  *unint64_t v12 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v12;
  *(void *)(v19 + 8 * v3) = a1 + 16;
  if (*v12)
  {
    unint64_t v21 = *(void *)(*v12 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v21 >= v7) {
        v21 %= v7;
      }
    }
    else
    {
      v21 &= v7 - 1;
    }
    uint64_t v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
}

void sub_1920DFD54(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__rehash<true>(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime <= *(void *)&v4)
  {
    if (prime >= *(void *)&v4) {
      return;
    }
    unint64_t v11 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v12 = (uint8x8_t)vcnt_s8(v4), v12.i16[0] = vaddlv_u8(v12), v12.u32[0] > 1uLL))
    {
      unint64_t v11 = std::__next_prime(v11);
    }
    else
    {
      uint64_t v13 = 1 << -(char)__clz(v11 - 1);
      if (v11 >= 2) {
        unint64_t v11 = v13;
      }
    }
    if (prime <= v11) {
      size_t prime = v11;
    }
    if (prime >= *(void *)&v4) {
      return;
    }
    if (!prime)
    {
      unint64_t v16 = *(void **)a1;
      *(void *)a1 = 0;
      if (v16) {
        operator delete(v16);
      }
      *(void *)(a1 + 8) = 0;
      return;
    }
  }
  if (prime >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  unint64_t v5 = operator new(8 * prime);
  unint64_t v6 = *(void **)a1;
  *(void *)a1 = v5;
  if (v6) {
    operator delete(v6);
  }
  uint64_t v7 = 0;
  *(void *)(a1 + 8) = prime;
  do
    *(void *)(*(void *)a1 + 8 * v7++) = 0;
  while (prime != v7);
  uint8x8_t v8 = *(void **)(a1 + 16);
  if (v8)
  {
    size_t v9 = v8[1];
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)prime);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      if (v9 >= prime) {
        v9 %= prime;
      }
    }
    else
    {
      v9 &= prime - 1;
    }
    *(void *)(*(void *)a1 + 8 * v9) = a1 + 16;
    float v14 = (void *)*v8;
    if (*v8)
    {
      do
      {
        size_t v15 = v14[1];
        if (v10.u32[0] > 1uLL)
        {
          if (v15 >= prime) {
            v15 %= prime;
          }
        }
        else
        {
          v15 &= prime - 1;
        }
        if (v15 != v9)
        {
          if (!*(void *)(*(void *)a1 + 8 * v15))
          {
            *(void *)(*(void *)a1 + 8 * v15) = v8;
            goto LABEL_31;
          }
          void *v8 = *v14;
          *float v14 = **(void **)(*(void *)a1 + 8 * v15);
          **(void **)(*(void *)a1 + 8 * v15) = v14;
          float v14 = v8;
        }
        size_t v15 = v9;
LABEL_31:
        uint8x8_t v8 = v14;
        float v14 = (void *)*v14;
        size_t v9 = v15;
      }
      while (v14);
    }
  }
}

void Espresso::net::get_consumers_of_blobs(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  if (v5 != v4)
  {
    unint64_t v7 = 0;
    uint8x8_t v8 = a1 + 7;
    do
    {
      size_t v9 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::find<unsigned long>(v8, v7);
      if (v9)
      {
        uint8x8_t v10 = (long long *)v9[3];
        unint64_t v11 = (long long *)v9[4];
        if (v10 != v11)
        {
          do
          {
            if (!a2[3]
              || std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(a2, (uint64_t)v10))
            {
              unint64_t v26 = v10;
              uint8x8_t v12 = std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a3, (unsigned __int8 *)v10, &v26);
              uint64_t v13 = v12;
              float v14 = (unint64_t *)*((void *)v12 + 6);
              unint64_t v15 = *((void *)v12 + 7);
              if ((unint64_t)v14 >= v15)
              {
                unint64_t v17 = (unint64_t *)*((void *)v12 + 5);
                uint64_t v18 = v14 - v17;
                if ((unint64_t)(v18 + 1) >> 61) {
                  std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                }
                unint64_t v19 = v15 - (void)v17;
                unint64_t v20 = (uint64_t)(v15 - (void)v17) >> 2;
                if (v20 <= v18 + 1) {
                  unint64_t v20 = v18 + 1;
                }
                if (v19 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v21 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v21 = v20;
                }
                if (v21)
                {
                  unint64_t v21 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v21);
                  unint64_t v17 = (unint64_t *)*((void *)v13 + 5);
                  float v14 = (unint64_t *)*((void *)v13 + 6);
                }
                else
                {
                  uint64_t v22 = 0;
                }
                unint64_t v23 = (unint64_t *)(v21 + 8 * v18);
                *unint64_t v23 = v7;
                unint64_t v16 = v23 + 1;
                while (v14 != v17)
                {
                  unint64_t v24 = *--v14;
                  *--unint64_t v23 = v24;
                }
                *((void *)v13 + 5) = v23;
                *((void *)v13 + 6) = v16;
                *((void *)v13 + 7) = v21 + 8 * v22;
                if (v17) {
                  operator delete(v17);
                }
              }
              else
              {
                *float v14 = v7;
                unint64_t v16 = v14 + 1;
              }
              *((void *)v13 + 6) = v16;
            }
            uint8x8_t v10 = (long long *)((char *)v10 + 24);
          }
          while (v10 != v11);
          uint64_t v4 = a1[4];
          uint64_t v5 = a1[5];
        }
      }
      ++v7;
    }
    while (v7 < (v5 - v4) >> 4);
  }
}

void sub_1920E0100(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

char *std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, long long **a3)
{
  unint64_t v7 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v9) {
        unint64_t v3 = v7 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v7;
    }
    uint8x8_t v12 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      uint64_t v13 = (char *)*v12;
      if (*v12)
      {
        do
        {
          unint64_t v14 = *((void *)v13 + 1);
          if (v14 == v8)
          {
            if (std::equal_to<std::string>::operator()[abi:ne180100]((unsigned __int8 *)v13 + 16, a2)) {
              return v13;
            }
          }
          else
          {
            if (v11 > 1)
            {
              if (v14 >= v9) {
                v14 %= v9;
              }
            }
            else
            {
              v14 &= v9 - 1;
            }
            if (v14 != v3) {
              break;
            }
          }
          uint64_t v13 = *(char **)v13;
        }
        while (v13);
      }
    }
  }
  unint64_t v15 = (void *)(a1 + 16);
  uint64_t v13 = (char *)operator new(0x40uLL);
  v29[0] = v13;
  v29[1] = a1 + 16;
  char v30 = 0;
  *(void *)uint64_t v13 = 0;
  *((void *)v13 + 1) = v8;
  unint64_t v16 = (std::string *)(v13 + 16);
  unint64_t v17 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v16, *(const std::string::value_type **)v17, *((void *)v17 + 1));
  }
  else
  {
    long long v18 = *v17;
    *((void *)v13 + 4) = *((void *)v17 + 2);
    *(_OWORD *)&v16->__r_.__value_.__l.__data_ = v18;
  }
  *((void *)v13 + 5) = 0;
  *((void *)v13 + 6) = 0;
  *((void *)v13 + 7) = 0;
  char v30 = 1;
  float v19 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v20 = *(float *)(a1 + 32);
  if (!v9 || (float)(v20 * (float)v9) < v19)
  {
    BOOL v21 = 1;
    if (v9 >= 3) {
      BOOL v21 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v22 = v21 | (2 * v9);
    unint64_t v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23) {
      size_t v24 = v23;
    }
    else {
      size_t v24 = v22;
    }
    std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__rehash<true>(a1, v24);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v25 = *(void *)a1;
  unint64_t v26 = *(void **)(*(void *)a1 + 8 * v3);
  if (v26)
  {
    *(void *)uint64_t v13 = *v26;
LABEL_41:
    *unint64_t v26 = v13;
    goto LABEL_42;
  }
  *(void *)uint64_t v13 = *v15;
  *unint64_t v15 = v13;
  *(void *)(v25 + 8 * v3) = v15;
  if (*(void *)v13)
  {
    unint64_t v27 = *(void *)(*(void *)v13 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v27 >= v9) {
        v27 %= v9;
      }
    }
    else
    {
      v27 &= v9 - 1;
    }
    unint64_t v26 = (void *)(*(void *)a1 + 8 * v27);
    goto LABEL_41;
  }
LABEL_42:
  v29[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<unsigned long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<unsigned long>>,void *>>>>::reset[abi:ne180100]((uint64_t)v29);
  return v13;
}

void sub_1920E0380(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<unsigned long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<unsigned long>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<unsigned long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<unsigned long>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<unsigned long>>,0>((uint64_t)v1 + 16);
    }
    operator delete(v1);
  }
}

void Espresso::cpu_context_transfer_algo_t::assemble_producers_and_consumers(uint64_t a1, uint64_t **a2)
{
  unint64_t v3 = *a2;
  uint64_t v4 = (char **)(*a2 + 4);
  std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::destroy(*v4);
  v3[3] = (uint64_t)v4;
  v3[5] = 0;
  *uint64_t v4 = 0;
  uint64_t v5 = (uint64_t)(*a2 + 7);
  std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::destroy(*(void **)v5);
  *(void *)(v5 - 8) = v5;
  *(void *)uint64_t v5 = 0;
  *(void *)(v5 + 8) = 0;
  uint64_t v6 = *v3;
  if (v3[1] != *v3)
  {
    unint64_t v7 = 0;
    do
    {
      uint64_t v8 = v6 + 224 * v7;
      unint64_t v9 = *(long long **)(v8 + 112);
      uint8x8_t v10 = *(long long **)(v8 + 120);
      while (v9 != v10)
      {
        uint64_t v11 = (uint64_t)(*a2 + 3);
        unsigned int v29 = v9;
        std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v11, v9, &v29)[7] = v7;
        unint64_t v9 = (long long *)((char *)v9 + 24);
      }
      uint64_t v12 = v6 + 224 * v7;
      uint64_t v13 = *(long long **)(v12 + 136);
      unint64_t v14 = *(long long **)(v12 + 144);
      while (v13 != v14)
      {
        uint64_t v15 = (uint64_t)(*a2 + 6);
        unsigned int v29 = v13;
        unint64_t v16 = std::__tree<std::__value_type<std::string,std::vector<unsigned long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<unsigned long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<unsigned long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v15, v13, &v29);
        unint64_t v17 = v16;
        long long v18 = (unint64_t *)v16[8];
        unint64_t v19 = v16[9];
        if ((unint64_t)v18 >= v19)
        {
          BOOL v21 = (unint64_t *)v16[7];
          uint64_t v22 = v18 - v21;
          if ((unint64_t)(v22 + 1) >> 61) {
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v23 = v19 - (void)v21;
          unint64_t v24 = (uint64_t)(v19 - (void)v21) >> 2;
          if (v24 <= v22 + 1) {
            unint64_t v24 = v22 + 1;
          }
          if (v23 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v25 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v25 = v24;
          }
          if (v25)
          {
            unint64_t v25 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v25);
            BOOL v21 = (unint64_t *)v17[7];
            long long v18 = (unint64_t *)v17[8];
          }
          else
          {
            uint64_t v26 = 0;
          }
          unint64_t v27 = (unint64_t *)(v25 + 8 * v22);
          *unint64_t v27 = v7;
          float v20 = v27 + 1;
          while (v18 != v21)
          {
            unint64_t v28 = *--v18;
            *--unint64_t v27 = v28;
          }
          v17[7] = v27;
          v17[8] = v20;
          v17[9] = v25 + 8 * v26;
          if (v21) {
            operator delete(v21);
          }
        }
        else
        {
          *long long v18 = v7;
          float v20 = v18 + 1;
        }
        v17[8] = v20;
        uint64_t v13 = (long long *)((char *)v13 + 24);
      }
      ++v7;
      uint64_t v6 = *v3;
    }
    while (v7 < 0x6DB6DB6DB6DB6DB7 * ((v3[1] - *v3) >> 5));
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(unint64_t a1)
{
  if (a1 >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(8 * a1);
}

void *std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, void *a2, long long **a3)
{
  uint64_t v5 = (uint64_t **)std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__find_equal<std::string>(a1, &v15, a2);
  uint64_t v6 = *v5;
  if (!*v5)
  {
    unint64_t v7 = v5;
    uint64_t v6 = operator new(0x40uLL);
    uint64_t v8 = (std::string *)(v6 + 4);
    unint64_t v9 = *a3;
    if (*((char *)*a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)v9, *((void *)v9 + 1));
    }
    else
    {
      long long v10 = *v9;
      v6[6] = *((void *)v9 + 2);
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v10;
    }
    v6[7] = 0;
    uint64_t v11 = v15;
    *uint64_t v6 = 0;
    v6[1] = 0;
    v6[2] = v11;
    *unint64_t v7 = v6;
    uint64_t v12 = **(void **)a1;
    uint64_t v13 = v6;
    if (v12)
    {
      *(void *)a1 = v12;
      uint64_t v13 = *v7;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 8), v13);
    ++*(void *)(a1 + 16);
  }
  return v6;
}

void sub_1920E06C0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<unsigned long>>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<unsigned long>>,0>(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    unint64_t v3 = *(void **)a1;
    operator delete(v3);
  }
}

void *std::__tree<std::__value_type<std::string,std::vector<unsigned long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<unsigned long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<unsigned long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, void *a2, long long **a3)
{
  uint64_t v5 = (uint64_t **)std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__find_equal<std::string>(a1, &v17, a2);
  uint64_t v6 = *v5;
  if (!*v5)
  {
    unint64_t v7 = v5;
    uint64_t v6 = operator new(0x50uLL);
    v15[0] = v6;
    v15[1] = a1 + 8;
    char v16 = 0;
    uint64_t v8 = (std::string *)(v6 + 4);
    unint64_t v9 = *a3;
    if (*((char *)*a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)v9, *((void *)v9 + 1));
    }
    else
    {
      long long v10 = *v9;
      v6[6] = *((void *)v9 + 2);
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v10;
    }
    v6[8] = 0;
    v6[9] = 0;
    v6[7] = 0;
    char v16 = 1;
    uint64_t v11 = v17;
    *uint64_t v6 = 0;
    v6[1] = 0;
    v6[2] = v11;
    *unint64_t v7 = v6;
    uint64_t v12 = **(void **)a1;
    uint64_t v13 = v6;
    if (v12)
    {
      *(void *)a1 = v12;
      uint64_t v13 = *v7;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 8), v13);
    ++*(void *)(a1 + 16);
    v15[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<int>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<int>>,void *>>>>::reset[abi:ne180100]((uint64_t)v15);
  }
  return v6;
}

void sub_1920E0874(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<int>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<int>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<unsigned long>>,0>((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

void Espresso::cpu_context_transfer_algo_t::assemble_input_output_blob_topology(uint64_t a1, Espresso ***a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  if (*a2 != v7)
  {
    uint64_t v8 = *a6;
    uint64_t v37 = *a6 + 16;
    do
    {
      unint64_t v9 = (void *)MEMORY[0x192FF2020]();
      long long v10 = *v6;
      int v45 = 0;
      long long v43 = 0u;
      long long v44 = 0u;
      memset(v42, 0, sizeof(v42));
      uint64_t v46 = 0;
      long long v47 = 0;
      __int16 v48 = 0;
      char v49 = 1;
      memset(v50, 0, sizeof(v50));
      long long v51 = 0u;
      long long v52 = 0u;
      long long v53 = 0u;
      long long v54 = 0u;
      std::string::basic_string[abi:ne180100]<0>(&__p, "name");
      Espresso::SerDes::generic_serdes_object::operator[]((uint64_t)v10, (uint64_t)&__p, &v55);
      Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v55, (uint64_t)v42);
      if (SHIBYTE(v57) < 0) {
        operator delete(v55.__end_cap_.__value_);
      }
      if (v55.__end_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v55.__end_);
      }
      if (v41 < 0) {
        operator delete(__p);
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "type");
      Espresso::SerDes::generic_serdes_object::operator[]((uint64_t)v10, (uint64_t)&__p, &v55);
      Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v55, (uint64_t)&v43);
      if (SHIBYTE(v57) < 0) {
        operator delete(v55.__end_cap_.__value_);
      }
      if (v55.__end_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v55.__end_);
      }
      if (v41 < 0) {
        operator delete(__p);
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "debug_info");
      Espresso::SerDes::generic_serdes_object::operator[]((uint64_t)v10, (uint64_t)&__p, &v55);
      Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v55, (uint64_t)&v42[1] + 8);
      if (SHIBYTE(v57) < 0) {
        operator delete(v55.__end_cap_.__value_);
      }
      if (v55.__end_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v55.__end_);
      }
      if (v41 < 0) {
        operator delete(__p);
      }
      uint64_t v11 = v47;
      v38[0] = v46;
      v38[1] = v47;
      if (v47) {
        atomic_fetch_add_explicit(&v47->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      Espresso::top_names_from_serdes((uint64_t)v10, v38, (uint64_t)v42, &v55);
      std::vector<std::string>::__vdeallocate(v50);
      v50[0] = v55;
      memset(&v55, 0, sizeof(v55));
      std::string __p = &v55;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      if (v11) {
        nitro::nitro_function::nitro_function(v11);
      }
      Espresso::bottom_names_from_serdes(v10, &v55);
      std::vector<std::string>::__vdeallocate(&v50[1]);
      v50[1] = v55;
      memset(&v55, 0, sizeof(v55));
      std::string __p = &v55;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      std::string::basic_string[abi:ne180100]<0>(&v55, "hint_fallback_from_metal");
      int v12 = (*(uint64_t (**)(Espresso *, std::vector<std::string> *))(*(void *)v10 + 24))(v10, &v55);
      int v13 = v12;
      if (SHIBYTE(v55.__end_cap_.__value_) < 0)
      {
        operator delete(v55.__begin_);
        if (!v13) {
          goto LABEL_35;
        }
      }
      else if (!v12)
      {
        goto LABEL_35;
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "hint_fallback_from_metal");
      Espresso::SerDes::generic_serdes_object::operator[]((uint64_t)v10, (uint64_t)&__p, &v55);
      Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v55, (_DWORD *)&v44 + 2);
      if (SHIBYTE(v57) < 0) {
        operator delete(v55.__end_cap_.__value_);
      }
      if (v55.__end_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v55.__end_);
      }
      if (v41 < 0) {
        operator delete(__p);
      }
LABEL_35:
      std::string::basic_string[abi:ne180100]<0>(&v55, "hint_fallback_from_cpu");
      int v14 = (*(uint64_t (**)(Espresso *, std::vector<std::string> *))(*(void *)v10 + 24))(v10, &v55);
      int v15 = v14;
      if (SHIBYTE(v55.__end_cap_.__value_) < 0)
      {
        operator delete(v55.__begin_);
        if (!v15) {
          goto LABEL_45;
        }
      }
      else if (!v14)
      {
        goto LABEL_45;
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "hint_fallback_from_cpu");
      Espresso::SerDes::generic_serdes_object::operator[]((uint64_t)v10, (uint64_t)&__p, &v55);
      Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v55, &v45);
      if (SHIBYTE(v57) < 0) {
        operator delete(v55.__end_cap_.__value_);
      }
      if (v55.__end_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v55.__end_);
      }
      if (v41 < 0) {
        operator delete(__p);
      }
LABEL_45:
      std::string::basic_string[abi:ne180100]<0>(&v55, "hint_fallback_from_ane");
      int v16 = (*(uint64_t (**)(Espresso *, std::vector<std::string> *))(*(void *)v10 + 24))(v10, &v55);
      int v17 = v16;
      if (SHIBYTE(v55.__end_cap_.__value_) < 0)
      {
        operator delete(v55.__begin_);
        if (!v17) {
          goto LABEL_55;
        }
      }
      else if (!v16)
      {
        goto LABEL_55;
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "hint_fallback_from_ane");
      Espresso::SerDes::generic_serdes_object::operator[]((uint64_t)v10, (uint64_t)&__p, &v55);
      Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v55, (_DWORD *)&v44 + 3);
      if (SHIBYTE(v57) < 0) {
        operator delete(v55.__end_cap_.__value_);
      }
      if (v55.__end_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v55.__end_);
      }
      if (v41 < 0) {
        operator delete(__p);
      }
LABEL_55:
      std::string::basic_string[abi:ne180100]<0>(&v55, "attributes");
      int v18 = (*(uint64_t (**)(Espresso *, std::vector<std::string> *))(*(void *)v10 + 24))(v10, &v55);
      int v19 = v18;
      if (SHIBYTE(v55.__end_cap_.__value_) < 0)
      {
        operator delete(v55.__begin_);
        if (v19)
        {
LABEL_59:
          std::string::basic_string[abi:ne180100]<0>(&v55, "attributes");
          (*(void (**)(void **__return_ptr, Espresso *, std::vector<std::string> *))(*(void *)v10 + 120))(&__p, v10, &v55);
          if (SHIBYTE(v55.__end_cap_.__value_) < 0) {
            operator delete(v55.__begin_);
          }
          float v20 = __p;
          std::string::basic_string[abi:ne180100]<0>(&v55, (char *)Espresso::pass_constant_if_conditions::kernel_attribute_name);
          int v21 = (*(uint64_t (**)(void *, std::vector<std::string> *))(*(void *)v20 + 24))(v20, &v55);
          int v22 = v21;
          if (SHIBYTE(v55.__end_cap_.__value_) < 0)
          {
            operator delete(v55.__begin_);
            if (!v22) {
              goto LABEL_68;
            }
          }
          else if (!v21)
          {
            goto LABEL_68;
          }
          unint64_t v23 = __p;
          std::string::basic_string[abi:ne180100]<0>(&v55, (char *)Espresso::pass_constant_if_conditions::kernel_attribute_name);
          int v24 = (*(uint64_t (**)(void *, std::vector<std::string> *))(*(void *)v23 + 40))(v23, &v55);
          if (SHIBYTE(v55.__end_cap_.__value_) < 0) {
            operator delete(v55.__begin_);
          }
          DWORD2(v44) = v24 > 0;
          HIDWORD(v44) = DWORD2(v44);
LABEL_68:
          unint64_t v25 = __p;
          std::string::basic_string[abi:ne180100]<0>(&v55, "is_output");
          int v26 = (*(uint64_t (**)(void *, std::vector<std::string> *))(*(void *)v25 + 24))(v25, &v55);
          int v27 = v26;
          if (SHIBYTE(v55.__end_cap_.__value_) < 0)
          {
            operator delete(v55.__begin_);
            if (!v27) {
              goto LABEL_74;
            }
          }
          else if (!v26)
          {
LABEL_74:
            if (v40) {
              nitro::nitro_function::nitro_function(v40);
            }
            goto LABEL_76;
          }
          unint64_t v28 = __p;
          std::string::basic_string[abi:ne180100]<0>(&v55, "is_output");
          LOBYTE(v48) = (*(unsigned int (**)(void *, std::vector<std::string> *))(*(void *)v28 + 40))(v28, &v55) != 0;
          if (SHIBYTE(v55.__end_cap_.__value_) < 0) {
            operator delete(v55.__begin_);
          }
          goto LABEL_74;
        }
      }
      else if (v18)
      {
        goto LABEL_59;
      }
LABEL_76:
      unint64_t v30 = *(void *)(v8 + 8);
      unint64_t v29 = *(void *)(v8 + 16);
      if (v30 >= v29)
      {
        uint64_t v32 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v30 - *(void *)v8) >> 5);
        unint64_t v33 = v32 + 1;
        if ((unint64_t)(v32 + 1) > 0x124924924924924) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v34 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v29 - *(void *)v8) >> 5);
        if (2 * v34 > v33) {
          unint64_t v33 = 2 * v34;
        }
        if (v34 >= 0x92492492492492) {
          unint64_t v35 = 0x124924924924924;
        }
        else {
          unint64_t v35 = v33;
        }
        uint64_t v57 = v37;
        if (v35) {
          unint64_t v35 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::kernel_info_t>>(v35);
        }
        else {
          uint64_t v36 = 0;
        }
        v55.__begin_ = (std::vector<std::string>::pointer)v35;
        v55.__end_ = (std::vector<std::string>::pointer)(v35 + 224 * v32);
        v55.__end_cap_.__value_ = v55.__end_;
        unint64_t v56 = v35 + 224 * v36;
        Espresso::kernel_info_t::kernel_info_t(v55.__end_, (const Espresso::kernel_info_t *)v42);
        v55.__end_cap_.__value_ = (std::string *)((char *)v55.__end_cap_.__value_ + 224);
        std::vector<Espresso::kernel_info_t>::__swap_out_circular_buffer((uint64_t *)v8, &v55);
        unint64_t v31 = *(void *)(v8 + 8);
        std::__split_buffer<Espresso::kernel_info_t>::~__split_buffer((uint64_t)&v55);
      }
      else
      {
        Espresso::kernel_info_t::kernel_info_t(*(std::string **)(v8 + 8), (const Espresso::kernel_info_t *)v42);
        unint64_t v31 = v30 + 224;
        *(void *)(v8 + 8) = v31;
      }
      *(void *)(v8 + 8) = v31;
      Espresso::kernel_info_t::~kernel_info_t((Espresso::kernel_info_t *)v42);
      v6 += 2;
    }
    while (v6 != v7);
  }
}

void sub_1920E10C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, ...)
{
  va_start(va, a13);
  if (*(char *)(v13 - 121) < 0) {
    operator delete(*(void **)(v13 - 144));
  }
  if (a12) {
    nitro::nitro_function::nitro_function(a12);
  }
  Espresso::kernel_info_t::~kernel_info_t((Espresso::kernel_info_t *)va);
  _Unwind_Resume(a1);
}

double Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(void *a1, uint64_t a2)
{
  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 112))(&v5);
    if (*(char *)(a2 + 23) < 0) {
      operator delete(*(void **)a2);
    }
    double result = *(double *)&v5;
    *(_OWORD *)a2 = v5;
    *(void *)(a2 + 16) = v6;
  }
  return result;
}

void Espresso::SerDes::serdes_object_json_objc::get_string(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  id v5 = *(id *)(a1 + 24);
  int v6 = *(char *)(a2 + 23);
  if (v6 >= 0) {
    unint64_t v7 = (const UInt8 *)a2;
  }
  else {
    unint64_t v7 = *(const UInt8 **)a2;
  }
  if (v6 >= 0) {
    CFIndex v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    CFIndex v8 = *(void *)(a2 + 8);
  }
  CFStringRef v9 = CFStringCreateWithBytesNoCopy(0, v7, v8, 0x8000100u, 0, (CFAllocatorRef)*MEMORY[0x1E4F1CFA0]);
  if (!v9)
  {

LABEL_25:
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    int v19 = std::string::append(&v21, "\" not found");
    long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    __b.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__b.__r_.__value_.__l.__data_ = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    std::logic_error::logic_error(exception, &__b);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
    __cxa_throw(exception, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
  }
  id Value = (__CFString *)CFDictionaryGetValue((CFDictionaryRef)v5, v9);
  CFRelease(v9);

  if (!Value) {
    goto LABEL_25;
  }
  CStringPtr = (char *)CFStringGetCStringPtr(Value, 0x8000100u);
  if (CStringPtr)
  {
    std::string::basic_string[abi:ne180100]<0>(a3, CStringPtr);
  }
  else
  {
    CFIndex Length = CFStringGetLength(Value);
    CFIndex v13 = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u) + 1;
    std::string::basic_string[abi:ne180100](&__b, v13, 0);
    if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_b = &__b;
    }
    else {
      p_b = (std::string *)__b.__r_.__value_.__r.__words[0];
    }
    if (CFStringGetCString(Value, (char *)p_b, v13, 0x8000100u))
    {
      if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v15 = &__b;
      }
      else {
        int v15 = (std::string *)__b.__r_.__value_.__r.__words[0];
      }
      size_t v16 = strlen((const char *)v15);
      std::string::resize(&__b, v16, 0);
      *a3 = __b;
    }
    else
    {
      int v17 = Value;
      std::string::basic_string[abi:ne180100]<0>(a3, (char *)[(__CFString *)v17 UTF8String]);

      if (SHIBYTE(__b.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__b.__r_.__value_.__l.__data_);
      }
    }
  }
}

void sub_1920E14F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void std::vector<std::string>::__vdeallocate(std::vector<std::string> *this)
{
  if (this->__begin_)
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)this);
    operator delete(this->__begin_);
    this->__begin_ = 0;
    this->__end_ = 0;
    this->__end_cap_.__value_ = 0;
  }
}

void *std::string::basic_string[abi:ne180100](void *__b, size_t __len, int __c)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    int v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *std::string __b = v6;
  }
  else
  {
    *((unsigned char *)__b + 23) = __len;
    int v6 = __b;
    if (!__len) {
      goto LABEL_9;
    }
  }
  memset(v6, __c, __len);
LABEL_9:
  *((unsigned char *)v6 + __len) = 0;
  return __b;
}

void Espresso::bottom_names_from_serdes(Espresso *this@<X0>, void *a2@<X8>)
{
  memset(&v11, 0, sizeof(v11));
  std::string::basic_string[abi:ne180100]<0>(v5, "bottom");
  Espresso::SerDes::generic_serdes_object::operator[]((uint64_t)this, (uint64_t)v5, &v7);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v7, (uint64_t)&v11);
  if (v10 < 0) {
    operator delete(__p);
  }
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  if (v6 < 0) {
    operator delete(v5[0]);
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  Espresso::split_list_of_names(&v11, (uint64_t)a2);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
}

void sub_1920E171C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16)
{
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  if (*(char *)(v16 - 17) < 0) {
    operator delete(*(void **)(v16 - 40));
  }
  _Unwind_Resume(a1);
}

void Espresso::top_names_from_serdes(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, std::vector<std::string> *a4@<X8>)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v28, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string v28 = *(std::string *)a3;
  }
  a4->__begin_ = 0;
  a4->__end_ = 0;
  a4->__end_cap_.__value_ = 0;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)a4;
  __p.__r_.__value_.__s.__data_[8] = 0;
  size_t v8 = (std::string *)operator new(0x18uLL);
  a4->__begin_ = v8;
  a4->__end_ = v8;
  a4->__end_cap_.__value_ = v8 + 1;
  a4->__end_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&a4->__end_cap_, (long long *)&v28, &v29, v8);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v28, "top");
  int v9 = (*(uint64_t (**)(uint64_t, std::string *))(*(void *)a1 + 24))(a1, &v28);
  int v10 = v9;
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v28.__r_.__value_.__l.__data_);
    if (v10) {
      goto LABEL_8;
    }
  }
  else if (v9)
  {
LABEL_8:
    memset(&__p, 0, sizeof(__p));
    std::string::basic_string[abi:ne180100]<0>(v33, "top");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v33, &v28);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v28, (uint64_t)&__p);
    if (SHIBYTE(v29) < 0) {
      operator delete((void *)v28.__r_.__value_.__r.__words[2]);
    }
    if (v28.__r_.__value_.__l.__size_) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v28.__r_.__value_.__l.__size_);
    }
    if (v34 < 0) {
      operator delete(*(void **)v33);
    }
    Espresso::split_list_of_names(&__p, (uint64_t)a4);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    return;
  }
  if (*a2)
  {
    int v11 = (*(uint64_t (**)(void))(*(void *)*a2 + 72))(*a2);
    std::vector<std::string>::resize(a4, v11);
    if (v11 >= 2)
    {
      uint64_t v12 = 0;
      std::string::size_type v25 = *(void *)(MEMORY[0x1E4FBA408] + 64);
      std::string::size_type v26 = *MEMORY[0x1E4FBA408];
      std::string::size_type v24 = *(void *)(MEMORY[0x1E4FBA408] + 72);
      uint64_t v13 = v11;
      uint64_t v14 = 1;
      uint64_t v23 = v13;
      do
      {
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v28);
        std::ostream::operator<<();
        std::stringbuf::str();
        int v15 = *(char *)(a3 + 23);
        if (v15 >= 0) {
          uint64_t v16 = (const std::string::value_type *)a3;
        }
        else {
          uint64_t v16 = *(const std::string::value_type **)a3;
        }
        if (v15 >= 0) {
          std::string::size_type v17 = *(unsigned __int8 *)(a3 + 23);
        }
        else {
          std::string::size_type v17 = *(void *)(a3 + 8);
        }
        int v18 = std::string::insert(&__p, 0, v16, v17);
        std::string::size_type v19 = v18->__r_.__value_.__r.__words[0];
        *(void *)unint64_t v33 = v18->__r_.__value_.__l.__size_;
        *(void *)&v33[7] = *(std::string::size_type *)((char *)&v18->__r_.__value_.__r.__words[1] + 7);
        char v20 = HIBYTE(v18->__r_.__value_.__r.__words[2]);
        v18->__r_.__value_.__l.__size_ = 0;
        v18->__r_.__value_.__r.__words[2] = 0;
        v18->__r_.__value_.__r.__words[0] = 0;
        std::string v21 = a4;
        int v22 = &a4->__begin_[v12];
        if (SHIBYTE(v22[1].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v22[1].__r_.__value_.__l.__data_);
        }
        v22[1].__r_.__value_.__r.__words[0] = v19;
        v22[1].__r_.__value_.__l.__size_ = *(void *)v33;
        *(std::string::size_type *)((char *)&v22[1].__r_.__value_.__r.__words[1] + 7) = *(void *)&v33[7];
        *((unsigned char *)&v22[1].__r_.__value_.__s + 23) = v20;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        v28.__r_.__value_.__r.__words[0] = v26;
        *(std::string::size_type *)((char *)v28.__r_.__value_.__r.__words + *(void *)(v26 - 24)) = v25;
        v28.__r_.__value_.__r.__words[2] = v24;
        *(void *)&long long v29 = MEMORY[0x1E4FBA470] + 16;
        a4 = v21;
        if (v31 < 0) {
          operator delete(v30);
        }
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x192FF15B0](&v32);
        ++v14;
        ++v12;
      }
      while (v23 != v14);
    }
  }
}

void sub_1920E1B98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
}

void Espresso::split_list_of_names(const std::string *a1, uint64_t a2)
{
  std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)a2);
  std::string::size_type size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  int v5 = (char)size;
  if ((size & 0x80u) != 0) {
    std::string::size_type size = a1->__r_.__value_.__l.__size_;
  }
  if (size)
  {
    std::string::size_type v6 = 0;
    if (v5 >= 0) {
      std::string::size_type v7 = (std::string::size_type)a1;
    }
    else {
      std::string::size_type v7 = a1->__r_.__value_.__r.__words[0];
    }
    uint64_t v8 = MEMORY[0x1E4F14390];
LABEL_8:
    int v9 = (void *)(v7 + v6);
    int v10 = (unsigned char *)(v7 + size);
    while (v10 - (unsigned char *)v9 >= 1)
    {
      int v11 = memchr(v9, 44, v10 - (unsigned char *)v9);
      if (!v11) {
        break;
      }
      if (*v11 == 44)
      {
        if (v11 != v10)
        {
          uint64_t v12 = &v11[-v7];
          if (v12 != (unsigned char *)-1)
          {
            std::string::basic_string(&__p, a1, v6, (std::string::size_type)&v12[-v6], (std::allocator<char> *)&__v);
            unint64_t v14 = *(void *)(a2 + 8);
            unint64_t v13 = *(void *)(a2 + 16);
            if (v14 >= v13)
            {
              unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - *(void *)a2) >> 3);
              unint64_t v17 = v16 + 1;
              if (v16 + 1 > 0xAAAAAAAAAAAAAAALL) {
                std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - *(void *)a2) >> 3);
              if (2 * v18 > v17) {
                unint64_t v17 = 2 * v18;
              }
              if (v18 >= 0x555555555555555) {
                unint64_t v19 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v19 = v17;
              }
              __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a2 + 16);
              if (v19) {
                unint64_t v19 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v19);
              }
              else {
                uint64_t v20 = 0;
              }
              std::string v21 = (std::string *)(v19 + 24 * v16);
              __v.__first_ = (std::__split_buffer<std::string>::pointer)v19;
              __v.__begin_ = v21;
              __v.__end_cap_.__value_ = (std::string *)(v19 + 24 * v20);
              long long v22 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
              v21->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
              *(_OWORD *)&v21->__r_.__value_.__l.__data_ = v22;
              memset(&__p, 0, sizeof(__p));
              __v.__end_ = v21 + 1;
              std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a2, &__v);
              uint64_t v23 = *(void *)(a2 + 8);
              std::__split_buffer<std::string>::~__split_buffer(&__v);
              int v24 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
              *(void *)(a2 + 8) = v23;
              if (v24 < 0) {
                operator delete(__p.__r_.__value_.__l.__data_);
              }
            }
            else
            {
              long long v15 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
              *(void *)(v14 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
              *(_OWORD *)unint64_t v14 = v15;
              *(void *)(a2 + 8) = v14 + 24;
            }
            std::string::size_type v25 = (std::string::size_type)(v12 + 1);
            while (1)
            {
              std::string::size_type v6 = v25;
              std::string::size_type size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
              int v26 = (char)size;
              std::string::size_type v27 = a1->__r_.__value_.__l.__size_;
              std::string::size_type v28 = (size & 0x80u) == 0 ? HIBYTE(a1->__r_.__value_.__r.__words[2]) : a1->__r_.__value_.__l.__size_;
              if (v6 >= v28) {
                break;
              }
              long long v29 = (const std::string *)a1->__r_.__value_.__r.__words[0];
              if (v26 >= 0) {
                long long v29 = a1;
              }
              unsigned int v30 = v29->__r_.__value_.__s.__data_[v6];
              if ((v30 & 0x80000000) != 0) {
                int v31 = __maskrune(v30, 0x4000uLL);
              }
              else {
                int v31 = *(_DWORD *)(v8 + 4 * v30 + 60) & 0x4000;
              }
              std::string::size_type v25 = v6 + 1;
              if (!v31)
              {
                std::string::size_type v32 = v6 - 1;
                std::string::size_type size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
                std::string::size_type v27 = a1->__r_.__value_.__l.__size_;
                LOBYTE(v26) = *((unsigned char *)&a1->__r_.__value_.__s + 23);
                goto LABEL_41;
              }
            }
            std::string::size_type v32 = v6 - 1;
LABEL_41:
            if ((v26 & 0x80u) == 0) {
              std::string::size_type v7 = (std::string::size_type)a1;
            }
            else {
              std::string::size_type v7 = a1->__r_.__value_.__r.__words[0];
            }
            if ((v26 & 0x80u) != 0) {
              std::string::size_type size = v27;
            }
            if (size > v32) {
              goto LABEL_8;
            }
          }
        }
        break;
      }
      int v9 = v11 + 1;
    }
    if (v6 != -1)
    {
      std::string::basic_string(&__p, a1, v6, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&__v);
      unint64_t v34 = *(void *)(a2 + 8);
      unint64_t v33 = *(void *)(a2 + 16);
      if (v34 >= v33)
      {
        unint64_t v36 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v34 - *(void *)a2) >> 3);
        unint64_t v37 = v36 + 1;
        if (v36 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v38 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v33 - *(void *)a2) >> 3);
        if (2 * v38 > v37) {
          unint64_t v37 = 2 * v38;
        }
        if (v38 >= 0x555555555555555) {
          unint64_t v39 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v39 = v37;
        }
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a2 + 16);
        if (v39) {
          unint64_t v39 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v39);
        }
        else {
          uint64_t v40 = 0;
        }
        char v41 = (std::string *)(v39 + 24 * v36);
        __v.__first_ = (std::__split_buffer<std::string>::pointer)v39;
        __v.__begin_ = v41;
        __v.__end_cap_.__value_ = (std::string *)(v39 + 24 * v40);
        long long v42 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        v41->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v41->__r_.__value_.__l.__data_ = v42;
        memset(&__p, 0, sizeof(__p));
        __v.__end_ = v41 + 1;
        std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a2, &__v);
        uint64_t v43 = *(void *)(a2 + 8);
        std::__split_buffer<std::string>::~__split_buffer(&__v);
        int v44 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
        *(void *)(a2 + 8) = v43;
        if (v44 < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        long long v35 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        *(void *)(v34 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
        *(_OWORD *)unint64_t v34 = v35;
        *(void *)(a2 + 8) = v34 + 24;
      }
    }
  }
}

void sub_1920E1FF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(unint64_t a1)
{
  if (a1 >= 0xAAAAAAAAAAAAAABLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(24 * a1);
}

void std::vector<std::string>::__swap_out_circular_buffer(std::vector<std::string> *this, std::__split_buffer<std::string> *__v)
{
  uint64_t v4 = (std::string *)std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>((uint64_t)&this->__end_cap_, (uint64_t)this->__end_, (uint64_t)this->__end_, (uint64_t)this->__begin_, (uint64_t)this->__begin_, (uint64_t)__v->__begin_, (uint64_t)__v->__begin_);
  __v->__begin_ = v4;
  begiuint64_t n = this->__begin_;
  this->__begin_ = v4;
  __v->__begin_ = begin;
  end = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = end;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  for (uint64_t result = a7; a3 != a5; a3 -= 24)
  {
    long long v8 = *(_OWORD *)(a3 - 24);
    *(void *)(result - 8) = *(void *)(a3 - 8);
    *(_OWORD *)(result - 24) = v8;
    result -= 24;
    *(void *)(a3 - 16) = 0;
    *(void *)(a3 - 8) = 0;
    *(void *)(a3 - 24) = 0;
  }
  return result;
}

void std::__split_buffer<std::string>::~__split_buffer(std::__split_buffer<std::string> *this)
{
  begiuint64_t n = this->__begin_;
  std::__split_buffer<std::string>::pointer end = this->__end_;
  if (end != begin)
  {
    do
    {
      std::__split_buffer<std::string>::pointer v4 = end - 1;
      this->__end_ = end - 1;
      if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v4->__r_.__value_.__l.__data_);
        std::__split_buffer<std::string>::pointer v4 = this->__end_;
      }
      std::__split_buffer<std::string>::pointer end = v4;
    }
    while (v4 != begin);
  }
  if (this->__first_) {
    operator delete(this->__first_);
  }
}

{
  std::__split_buffer<std::string>::pointer end;
  std::__split_buffer<std::string>::pointer begin;
  std::__split_buffer<std::string>::pointer v4;

  begiuint64_t n = this->__begin_;
  std::__split_buffer<std::string>::pointer end = this->__end_;
  if (end != begin)
  {
    do
    {
      std::__split_buffer<std::string>::pointer v4 = end - 1;
      this->__end_ = end - 1;
      if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v4->__r_.__value_.__l.__data_);
        std::__split_buffer<std::string>::pointer v4 = this->__end_;
      }
      std::__split_buffer<std::string>::pointer end = v4;
    }
    while (v4 != begin);
  }
  if (this->__first_) {
    operator delete(this->__first_);
  }
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>(uint64_t a1, long long *a2, long long *a3, std::string *this)
{
  std::__split_buffer<std::string>::pointer v4 = this;
  int v11 = this;
  uint64_t v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    std::string::size_type v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((void *)v6 + 1));
        std::__split_buffer<std::string>::pointer v4 = v12;
      }
      else
      {
        long long v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      std::string::size_type v6 = (long long *)((char *)v6 + 24);
      uint64_t v12 = ++v4;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_1920E2228(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = **(void **)(a1 + 16);
    uint64_t v4 = **(void **)(a1 + 8);
    while (v3 != v4)
    {
      if (*(char *)(v3 - 1) < 0) {
        operator delete(*(void **)(v3 - 24));
      }
      v3 -= 24;
    }
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = **(void **)(a1 + 16);
    uint64_t v4 = **(void **)(a1 + 8);
    while (v3 != v4)
    {
      if (*(char *)(v3 - 1) < 0) {
        operator delete(*(void **)(v3 - 24));
      }
      v3 -= 24;
    }
  }
  return a1;
}

uint64_t is_kernel_available_on_engine(uint64_t a1, void *a2, std::string::size_type a3, uint64_t *a4, uint64_t a5, int a6, void *a7, int64x2_t **a8)
{
  uint64_t v95 = *MEMORY[0x1E4F143B8];
  memset(v84, 0, sizeof(v84));
  int v87 = a6;
  uint64_t v88 = a1;
  uint64_t v15 = *a7;
  unint64_t v14 = (std::__shared_weak_count *)a7[1];
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v85 = v15;
  unsigned int v86 = v14;
  if (v84 != (uint64_t *)(a3 + 184)) {
    std::vector<Espresso::layer_shape>::__assign_with_size[abi:ne180100]<Espresso::layer_shape*,Espresso::layer_shape*>(v84, *(long long **)(a3 + 184), *(long long **)(a3 + 192), (uint64_t)(*(void *)(a3 + 192) - *(void *)(a3 + 184)) >> 6);
  }
  if (&v84[3] != (uint64_t *)(a3 + 160)) {
    std::vector<Espresso::layer_shape>::__assign_with_size[abi:ne180100]<Espresso::layer_shape*,Espresso::layer_shape*>(&v84[3], *(long long **)(a3 + 160), *(long long **)(a3 + 168), (uint64_t)(*(void *)(a3 + 168) - *(void *)(a3 + 160)) >> 6);
  }
  uint64_t v16 = *a7;
  unint64_t v17 = *(std::__shared_weak_count **)(*a7 + 80);
  if (v17)
  {
    unint64_t v18 = std::__shared_weak_count::lock(v17);
    if (v18)
    {
      uint64_t v19 = *(void *)(v16 + 72);
      goto LABEL_12;
    }
  }
  else
  {
    unint64_t v18 = 0;
  }
  uint64_t v19 = 0;
LABEL_12:
  std::string::basic_string[abi:ne180100]<0>(&__p, "dispatch_check_weight_keys");
  std::string::basic_string[abi:ne180100]<0>(&buf, "");
  Espresso::map_const_get<std::map<std::string,std::string>>(v19 + 472, (uint64_t)&__p, (uint64_t)&buf, &v83);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v83.__r_.__value_.__l.__size_ != 1) {
      goto LABEL_23;
    }
    uint64_t v20 = (std::string *)v83.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) != 1) {
      goto LABEL_23;
    }
    uint64_t v20 = &v83;
  }
  if (v20->__r_.__value_.__s.__data_[0] == 49)
  {
    BOOL v21 = 1;
    goto LABEL_24;
  }
LABEL_23:
  BOOL v21 = (***(uint64_t (****)(void))(*(void *)a5 + 8))(*(void *)(*(void *)a5 + 8)) == 50002;
LABEL_24:
  long long v22 = *a8;
  if (*a2)
  {
    v69 = v18;
    uint64_t v23 = a5;
    if (v22) {
      uint64_t v24 = 0x6DB6DB6DB6DB6DB7 * ((v22->i64[1] - v22->i64[0]) >> 4);
    }
    else {
      uint64_t v24 = 0;
    }
    uint64_t v28 = *a4;
    std::string::basic_string[abi:ne180100]<0>(&__p, "weights");
    int v29 = (*(uint64_t (**)(uint64_t, std::string *))(*(void *)v28 + 24))(v28, &__p);
    int v30 = v29;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if (v30) {
        goto LABEL_36;
      }
    }
    else if (v29)
    {
LABEL_36:
      uint64_t v31 = *a4;
      std::string::basic_string[abi:ne180100]<0>(&__p, "weights");
      (*(void (**)(std::string *__return_ptr, uint64_t, std::string *))(*(void *)v31 + 120))(&buf, v31, &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      memset(&__p, 0, sizeof(__p));
      (*(void (**)(std::string::size_type, std::string *))(*(void *)buf.__r_.__value_.__l.__data_ + 32))(buf.__r_.__value_.__r.__words[0], &__p);
      if (!v21
        || (std::string::size_type size = __p.__r_.__value_.__l.__size_,
            std::string::size_type v32 = __p.__r_.__value_.__r.__words[0],
            __p.__r_.__value_.__r.__words[0] == __p.__r_.__value_.__l.__size_))
      {
        int v34 = 1;
      }
      else
      {
        LOBYTE(v34) = 1;
        do
        {
          int v35 = (*(uint64_t (**)(void, std::string::size_type))(*(void *)*a2 + 208))(*a2, v32);
          if ((_BYTE)v34) {
            int v34 = v35;
          }
          else {
            int v34 = 0;
          }
          v32 += 24;
        }
        while (v32 != size);
      }
      v71.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v71);
      if (buf.__r_.__value_.__l.__size_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)buf.__r_.__value_.__l.__size_);
      }
      BOOL v36 = v34 != 0;
LABEL_52:
      uint64_t v37 = *a2;
      unint64_t v38 = (std::__shared_weak_count *)a8[1];
      unint64_t v81 = *a8;
      v82 = v38;
      if (v38) {
        atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v39 = v36 & (*(unsigned int (**)(uint64_t, int64x2_t **, uint64_t *))(*(void *)v37 + 200))(v37, &v81, v84);
      if (v82) {
        nitro::nitro_function::nitro_function(v82);
      }
      if ((v39 & 1) == 0 && *a8 && 0x6DB6DB6DB6DB6DB7 * (((*a8)->i64[1] - (*a8)->i64[0]) >> 4) == v24)
      {
        std::operator+<char>();
        uint64_t v40 = std::string::append(&v70, " for ");
        long long v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
        v71.__r_.__value_.__r.__words[2] = v40->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v71.__r_.__value_.__l.__data_ = v41;
        v40->__r_.__value_.__l.__size_ = 0;
        v40->__r_.__value_.__r.__words[2] = 0;
        v40->__r_.__value_.__r.__words[0] = 0;
        long long v42 = (const std::string::value_type *)(*(uint64_t (**)(void))(**(void **)(*(void *)v23 + 8)
                                                                                 + 16))(*(void *)(*(void *)v23 + 8));
        uint64_t v43 = std::string::append(&v71, v42);
        std::string buf = *v43;
        v43->__r_.__value_.__l.__size_ = 0;
        v43->__r_.__value_.__r.__words[2] = 0;
        v43->__r_.__value_.__r.__words[0] = 0;
        Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)&buf, (uint64_t)v84, 0);
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(buf.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v71.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v70.__r_.__value_.__l.__data_);
        }
        int v44 = *a8;
        unint64_t v45 = v44->u64[1];
        if (v45 >= v44[1].i64[0])
        {
          char v49 = (Espresso *)std::vector<Espresso::base_kernel::validate_for_engine_warning_t>::__push_back_slow_path<Espresso::base_kernel::validate_for_engine_warning_t const&>(v44, (const Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
        }
        else
        {
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)v44->i64[1], __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
          }
          else
          {
            long long v46 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
            *(void *)(v45 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
            *(_OWORD *)unint64_t v45 = v46;
          }
          *(void *)(v45 + 24) = 0;
          *(void *)(v45 + 32) = 0;
          *(void *)(v45 + 40) = 0;
          std::vector<Espresso::layer_shape>::__init_with_size[abi:ne180100]<Espresso::layer_shape*,Espresso::layer_shape*>((void *)(v45 + 24), v73, v74, ((char *)v74 - (char *)v73) >> 6);
          *(void *)(v45 + 48) = 0;
          *(void *)(v45 + 56) = 0;
          *(void *)(v45 + 64) = 0;
          std::vector<Espresso::layer_shape>::__init_with_size[abi:ne180100]<Espresso::layer_shape*,Espresso::layer_shape*>((void *)(v45 + 48), v75, v76, ((char *)v76 - (char *)v75) >> 6);
          *(void *)(v45 + 72) = v77;
          long long v53 = v78;
          *(void *)(v45 + 80) = v78;
          if (v53) {
            atomic_fetch_add_explicit(&v53->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          *(_OWORD *)(v45 + 88) = v79;
          *(unsigned char *)(v45 + 104) = v80;
          char v49 = (Espresso *)(v45 + 112);
          v44->i64[1] = v45 + 112;
        }
        v44->i64[1] = (uint64_t)v49;
        long long v54 = Espresso::espresso_os_log_subsystem(v49, v50);
        if (os_log_type_enabled(v54, OS_LOG_TYPE_DEBUG))
        {
          std::string::size_type v66 = (*(uint64_t (**)(void))(**(void **)(*(void *)v23 + 8) + 16))(*(void *)(*(void *)v23 + 8));
          if (*(char *)(a3 + 23) >= 0) {
            std::string::size_type v67 = a3;
          }
          else {
            std::string::size_type v67 = *(void *)a3;
          }
          if (*(char *)(a3 + 71) >= 0) {
            std::string::size_type v68 = a3 + 48;
          }
          else {
            std::string::size_type v68 = *(void *)(a3 + 48);
          }
          LODWORD(buf.__r_.__value_.__l.__data_) = 136315906;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v66;
          WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
          *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v67;
          HIWORD(buf.__r_.__value_.__r.__words[2]) = 2080;
          std::string::size_type v90 = v68;
          __int16 v91 = 2048;
          uint64_t v92 = v88;
          _os_log_debug_impl(&dword_1920CB000, v54, OS_LOG_TYPE_DEBUG, "Kernel validation warning (Engine: %s) %s (%s) @ %zu", (uint8_t *)&buf, 0x2Au);
        }

        if (v78) {
          nitro::nitro_function::nitro_function(v78);
        }
        buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v75;
        std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
        buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v73;
        std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      Espresso::net::get_analysis_if_existing<Espresso::analysis_to_preserve_mil_types>(&__p, v19);
      unint64_t v18 = v69;
      if (!__p.__r_.__value_.__r.__words[0] || !*(void *)(__p.__r_.__value_.__r.__words[0] + 32)) {
        goto LABEL_114;
      }
      unsigned int v55 = (***(uint64_t (****)(void))(*(void *)v23 + 8))(*(void *)(*(void *)v23 + 8));
      BOOL v56 = v55 == 10008 || v55 == 10011;
      if (!v56 && v55 >> 1 != 5003) {
        goto LABEL_114;
      }
      if (!std::string::compare((const std::string *)(a3 + 48), "cast"))
      {
        if (*(unsigned char *)(a3 + 104)) {
          goto LABEL_114;
        }
        uint64_t v57 = *(void **)(a3 + 136);
        if (!std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(void **)(*a7 + 32), v57))
        {
LABEL_113:
          unint64_t v18 = v69;
LABEL_114:
          if (__p.__r_.__value_.__l.__size_) {
            nitro::nitro_function::nitro_function((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
          }
          goto LABEL_116;
        }
      }
      else
      {
        uint64_t v57 = *(void **)(a3 + 136);
      }
      unint64_t v58 = *(void **)(a3 + 144);
      if (v57 != v58)
      {
        while (1)
        {
          buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v57;
          if (!*((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v19 + 352), v57, (uint64_t)&std::piecewise_construct, (long long **)&buf)+ 16))break; {
          v57 += 3;
          }
          if (v57 == v58) {
            goto LABEL_108;
          }
        }
        uint64_t v39 = 0;
      }
LABEL_108:
      std::string v60 = *(void **)(a3 + 112);
      std::string v59 = *(void **)(a3 + 120);
      if (v60 != v59)
      {
        while (1)
        {
          buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v60;
          if (!*((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v19 + 352), v60, (uint64_t)&std::piecewise_construct, (long long **)&buf)+ 16))break; {
          v60 += 3;
          }
          if (v60 == v59) {
            goto LABEL_113;
          }
        }
        uint64_t v39 = 0;
      }
      goto LABEL_113;
    }
    BOOL v36 = 1;
    goto LABEL_52;
  }
  if (v22)
  {
    std::operator+<char>();
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)&buf, (uint64_t)v84, 0);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
    std::string::size_type v25 = *a8;
    unint64_t v26 = (*a8)->u64[1];
    if (v26 >= v25[1].i64[0])
    {
      long long v47 = (Espresso *)std::vector<Espresso::base_kernel::validate_for_engine_warning_t>::__push_back_slow_path<Espresso::base_kernel::validate_for_engine_warning_t const&>(v25, (const Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    }
    else
    {
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v26, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      }
      else
      {
        long long v27 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        *(void *)(v26 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
        *(_OWORD *)unint64_t v26 = v27;
      }
      *(void *)(v26 + 24) = 0;
      *(void *)(v26 + 32) = 0;
      *(void *)(v26 + 40) = 0;
      std::vector<Espresso::layer_shape>::__init_with_size[abi:ne180100]<Espresso::layer_shape*,Espresso::layer_shape*>((void *)(v26 + 24), v73, v74, ((char *)v74 - (char *)v73) >> 6);
      *(void *)(v26 + 48) = 0;
      *(void *)(v26 + 56) = 0;
      *(void *)(v26 + 64) = 0;
      std::vector<Espresso::layer_shape>::__init_with_size[abi:ne180100]<Espresso::layer_shape*,Espresso::layer_shape*>((void *)(v26 + 48), v75, v76, ((char *)v76 - (char *)v75) >> 6);
      *(void *)(v26 + 72) = v77;
      long long v51 = v78;
      *(void *)(v26 + 80) = v78;
      if (v51) {
        atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      *(_OWORD *)(v26 + 88) = v79;
      *(unsigned char *)(v26 + 104) = v80;
      long long v47 = (Espresso *)(v26 + 112);
      v25->i64[1] = v26 + 112;
    }
    v25->i64[1] = (uint64_t)v47;
    long long v52 = Espresso::espresso_os_log_subsystem(v47, v48);
    if (os_log_type_enabled(v52, OS_LOG_TYPE_DEBUG))
    {
      std::string::size_type v62 = (*(uint64_t (**)(void))(**(void **)(*(void *)a5 + 8) + 16))(*(void *)(*(void *)a5 + 8));
      if (*(char *)(a3 + 23) >= 0) {
        std::string::size_type v63 = a3;
      }
      else {
        std::string::size_type v63 = *(void *)a3;
      }
      if (*(char *)(a3 + 71) >= 0) {
        std::string::size_type v64 = a3 + 48;
      }
      else {
        std::string::size_type v64 = *(void *)(a3 + 48);
      }
      p_p = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      LODWORD(buf.__r_.__value_.__l.__data_) = 136316162;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v62;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v63;
      HIWORD(buf.__r_.__value_.__r.__words[2]) = 2080;
      std::string::size_type v90 = v64;
      __int16 v91 = 2048;
      uint64_t v92 = *((void *)&v79 + 1);
      __int16 v93 = 2080;
      uint64_t v94 = p_p;
      _os_log_debug_impl(&dword_1920CB000, v52, OS_LOG_TYPE_DEBUG, "Kernel validation warning (Engine: %s) %s (%s) @ %zu: %s", (uint8_t *)&buf, 0x34u);
    }

    if (v78) {
      nitro::nitro_function::nitro_function(v78);
    }
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v75;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v73;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  uint64_t v39 = 0;
LABEL_116:
  if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v83.__r_.__value_.__l.__data_);
  }
  if (v18) {
    nitro::nitro_function::nitro_function(v18);
  }
  if (v86) {
    nitro::nitro_function::nitro_function(v86);
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v84[3];
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v84;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  return v39;
}

void sub_1920E2D5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48,char a49)
{
  *(void *)(v49 + 8) = v50;
  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((Espresso::base_kernel::validate_for_engine_warning_t *)&a24);
  if (a48 < 0) {
    operator delete(__p);
  }
  if (a11) {
    nitro::nitro_function::nitro_function(a11);
  }
  Espresso::base_kernel::validate_for_engine_args_t::~validate_for_engine_args_t((Espresso::base_kernel::validate_for_engine_args_t *)&a49);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::serdes_object_json_objc::get_obj(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  Espresso::SerDes::fast_dict_lookup(*(void **)(a1 + 24), a2);
  id v8 = (id)objc_claimAutoreleasedReturnValue();
  std::allocate_shared[abi:ne180100]<Espresso::SerDes::serdes_object_json_objc,std::allocator<Espresso::SerDes::serdes_object_json_objc>,NSMutableDictionary * {__strong}&,void>(v11, v8);
  if (!*(void *)(v11[0] + 24))
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::string::size_type v6 = std::string::append(&v9, "\" not found");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v10.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v10.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    std::logic_error::logic_error(exception, &v10);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
    __cxa_throw(exception, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
  }
  uint64_t v4 = (std::__shared_weak_count *)v11[1];
  *a3 = v11[0];
  a3[1] = v4;
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    nitro::nitro_function::nitro_function(v4);
  }
}

void sub_1920E3098(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0)
    {
LABEL_8:
      std::string::size_type v25 = *(std::__shared_weak_count **)(v23 - 40);
      if (v25) {
        nitro::nitro_function::nitro_function(v25);
      }

      _Unwind_Resume(a1);
    }
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

void std::vector<Espresso::layer_shape>::__assign_with_size[abi:ne180100]<Espresso::layer_shape*,Espresso::layer_shape*>(uint64_t *a1, long long *a2, long long *a3, unint64_t a4)
{
  uint64_t v8 = (uint64_t)(a1 + 2);
  uint64_t v9 = *a1;
  if (a4 > (a1[2] - *a1) >> 6)
  {
    std::vector<Espresso::layer_shape>::__vdeallocate(a1);
    if (a4 >> 58) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = a1[2] - *a1;
    uint64_t v11 = v10 >> 5;
    if (v10 >> 5 <= a4) {
      uint64_t v11 = a4;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFC0) {
      unint64_t v12 = 0x3FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    std::vector<Espresso::layer_shape>::__vallocate[abi:ne180100](a1, v12);
    uint64_t v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape*,Espresso::layer_shape*,Espresso::layer_shape*>(v8, a2, a3, a1[1]);
    goto LABEL_11;
  }
  unint64_t v14 = (a1[1] - v9) >> 6;
  if (v14 < a4)
  {
    uint64_t v15 = &a2[4 * v14];
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<Espresso::layer_shape *,Espresso::layer_shape *,Espresso::layer_shape *>(a2, v15, v9);
    uint64_t v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape*,Espresso::layer_shape*,Espresso::layer_shape*>(v8, v15, a3, a1[1]);
LABEL_11:
    a1[1] = v13;
    return;
  }
  uint64_t v16 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<Espresso::layer_shape *,Espresso::layer_shape *,Espresso::layer_shape *>(a2, a3, v9);
  for (uint64_t i = a1[1]; i != v16; i -= 64)
  {
    unint64_t v18 = *(void **)(i - 24);
    if (v18)
    {
      *(void *)(i - 16) = v18;
      operator delete(v18);
    }
  }
  a1[1] = v16;
}

void sub_1920E324C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1920E3254(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *std::vector<Espresso::layer_shape>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 58) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::layer_shape>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[64 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::layer_shape>>(unint64_t a1)
{
  if (a1 >> 58) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(a1 << 6);
}

void std::vector<Espresso::layer_shape>::__vdeallocate(uint64_t *a1)
{
  if (*a1)
  {
    std::vector<Espresso::layer_shape>::__clear[abi:ne180100](a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void Espresso::kernel_info_t::~kernel_info_t(Espresso::kernel_info_t *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 27);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  uint64_t v4 = (void **)((char *)this + 184);
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v4);
  uint64_t v4 = (void **)((char *)this + 160);
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v4);
  uint64_t v4 = (void **)((char *)this + 136);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  uint64_t v4 = (void **)((char *)this + 112);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 12);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  if (*((char *)this + 71) < 0) {
    operator delete(*((void **)this + 6));
  }
  if (*((char *)this + 47) < 0) {
    operator delete(*((void **)this + 3));
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
}

void std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<Espresso::layer_shape>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<Espresso::layer_shape>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 64)
  {
    uint64_t v4 = *(void **)(i - 24);
    if (v4)
    {
      *(void *)(i - 16) = v4;
      operator delete(v4);
    }
  }
  a1[1] = v2;
}

void std::vector<std::string>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0) {
      operator delete(*(void **)(i - 24));
    }
  }
  a1[1] = v2;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v12 = a4;
  uint64_t v13 = a4;
  v10[0] = a1;
  v10[1] = &v12;
  v10[2] = &v13;
  char v11 = 0;
  if (a2 != a3)
  {
    std::string::size_type v6 = a2;
    do
    {
      long long v7 = *v6;
      long long v8 = v6[1];
      *(void *)(v4 + 32) = *((void *)v6 + 4);
      *(_OWORD *)uint64_t v4 = v7;
      *(_OWORD *)(v4 + 16) = v8;
      *(void *)(v4 + 48) = 0;
      *(void *)(v4 + 56) = 0;
      *(void *)(v4 + 40) = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((void *)(v4 + 40), *((const void **)v6 + 5), *((void *)v6 + 6), (uint64_t)(*((void *)v6 + 6) - *((void *)v6 + 5)) >> 2);
      uint64_t v4 = v13 + 64;
      v13 += 64;
      v6 += 4;
    }
    while (v6 != a3);
  }
  char v11 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<Espresso::layer_shape>,Espresso::layer_shape*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v10);
  return v4;
}

void sub_1920E35C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape*,Espresso::layer_shape*,Espresso::layer_shape*>(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v12 = a4;
  uint64_t v13 = a4;
  v10[0] = a1;
  v10[1] = &v12;
  v10[2] = &v13;
  char v11 = 0;
  if (a2 != a3)
  {
    std::string::size_type v6 = a2;
    do
    {
      long long v7 = *v6;
      long long v8 = v6[1];
      *(void *)(v4 + 32) = *((void *)v6 + 4);
      *(_OWORD *)uint64_t v4 = v7;
      *(_OWORD *)(v4 + 16) = v8;
      *(void *)(v4 + 48) = 0;
      *(void *)(v4 + 56) = 0;
      *(void *)(v4 + 40) = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((void *)(v4 + 40), *((const void **)v6 + 5), *((void *)v6 + 6), (uint64_t)(*((void *)v6 + 6) - *((void *)v6 + 5)) >> 2);
      uint64_t v4 = v13 + 64;
      v13 += 64;
      v6 += 4;
    }
    while (v6 != a3);
  }
  char v11 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<Espresso::layer_shape>,Espresso::layer_shape*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v10);
  return v4;
}

void sub_1920E3684(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    std::string::size_type v6 = result;
    uint64_t result = std::vector<unsigned int>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1920E36F8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<Espresso::layer_shape>,Espresso::layer_shape*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = **(void **)(a1 + 16);
    uint64_t v4 = **(void **)(a1 + 8);
    while (v3 != v4)
    {
      int v5 = *(void **)(v3 - 24);
      if (v5)
      {
        *(void *)(v3 - 16) = v5;
        operator delete(v5);
      }
      v3 -= 64;
    }
  }
  return a1;
}

void Espresso::SerDes::serdes_object_json_objc::get_keys(uint64_t a1, uint64_t a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  id v3 = *(id *)(a1 + 24);
  uint64_t v4 = [v3 countByEnumeratingWithState:&v21 objects:v26 count:16];
  if (v4)
  {
    uint64_t v5 = *(void *)v22;
    do
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        if (*(void *)v22 != v5) {
          objc_enumerationMutation(v3);
        }
        std::string::basic_string[abi:ne180100]<0>(__p, (char *)[*(id *)(*((void *)&v21 + 1) + 8 * i) UTF8String]);
        unint64_t v8 = *(void *)(a2 + 8);
        unint64_t v7 = *(void *)(a2 + 16);
        if (v8 >= v7)
        {
          unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - *(void *)a2) >> 3);
          unint64_t v11 = v10 + 1;
          if (v10 + 1 > 0xAAAAAAAAAAAAAAALL) {
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *(void *)a2) >> 3);
          if (2 * v12 > v11) {
            unint64_t v11 = 2 * v12;
          }
          if (v12 >= 0x555555555555555) {
            unint64_t v13 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v13 = v11;
          }
          __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a2 + 16);
          if (v13) {
            unint64_t v13 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v13);
          }
          else {
            uint64_t v14 = 0;
          }
          uint64_t v15 = (std::string *)(v13 + 24 * v10);
          __v.__first_ = (std::__split_buffer<std::string>::pointer)v13;
          __v.__begin_ = v15;
          __v.__end_cap_.__value_ = (std::string *)(v13 + 24 * v14);
          long long v16 = *(_OWORD *)__p;
          v15->__r_.__value_.__r.__words[2] = v20;
          *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v16;
          __p[1] = 0;
          std::string::size_type v20 = 0;
          __p[0] = 0;
          __v.__end_ = v15 + 1;
          std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a2, &__v);
          uint64_t v17 = *(void *)(a2 + 8);
          std::__split_buffer<std::string>::~__split_buffer(&__v);
          int v18 = SHIBYTE(v20);
          *(void *)(a2 + 8) = v17;
          if (v18 < 0) {
            operator delete(__p[0]);
          }
        }
        else
        {
          long long v9 = *(_OWORD *)__p;
          *(void *)(v8 + 16) = v20;
          *(_OWORD *)unint64_t v8 = v9;
          *(void *)(a2 + 8) = v8 + 24;
        }
      }
      uint64_t v4 = [v3 countByEnumeratingWithState:&v21 objects:v26 count:16];
    }
    while (v4);
  }
}

void sub_1920E3980(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _Unwind_Resume(a1);
}

void Espresso::net::get_analysis_if_existing<Espresso::analysis_to_preserve_mil_types>(void *a1, uint64_t a2)
{
  id v3 = std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::find<std::type_index>((void *)(a2 + 1120), (uint64_t)&v8);
  if (!v3)
  {
    *a1 = 0;
    a1[1] = 0;
    return;
  }
  uint64_t v4 = v3;
  uint64_t v5 = (const void *)v3[3];
  std::string::size_type v6 = (std::__shared_weak_count *)v4[4];
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v5
  {
    *a1 = v7;
    a1[1] = v6;
    if (!v6) {
      return;
    }
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
    if (!v6) {
      return;
    }
  }
  nitro::nitro_function::nitro_function(v6);
}

void *std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::find<std::type_index>(void *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)a2 + 8);
  unint64_t v3 = v2;
  if (v2 < 0)
  {
    uint64_t v4 = (unsigned __int8 *)(v2 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v5 = 5381;
    do
    {
      unint64_t v3 = v5;
      unsigned int v6 = *v4++;
      uint64_t v5 = (33 * v5) ^ v6;
    }
    while (v6);
  }
  int8x8_t v7 = (int8x8_t)a1[1];
  if (!*(void *)&v7) {
    return 0;
  }
  uint8x8_t v8 = (uint8x8_t)vcnt_s8(v7);
  v8.i16[0] = vaddlv_u8(v8);
  unint64_t v9 = v8.u32[0];
  if (v8.u32[0] > 1uLL)
  {
    unint64_t v10 = v3;
    if (v3 >= *(void *)&v7) {
      unint64_t v10 = v3 % *(void *)&v7;
    }
  }
  else
  {
    unint64_t v10 = (*(void *)&v7 - 1) & v3;
  }
  unint64_t v11 = *(void **)(*a1 + 8 * v10);
  if (!v11) {
    return 0;
  }
  unint64_t v12 = (void *)*v11;
  if (*v11)
  {
    do
    {
      unint64_t v13 = v12[1];
      if (v3 == v13)
      {
        if (std::type_info::operator==[abi:ne180100](*(void *)(v12[2] + 8), v2)) {
          return v12;
        }
      }
      else
      {
        if (v9 > 1)
        {
          if (v13 >= *(void *)&v7) {
            v13 %= *(void *)&v7;
          }
        }
        else
        {
          v13 &= *(void *)&v7 - 1;
        }
        if (v13 != v10) {
          return 0;
        }
      }
      unint64_t v12 = (void *)*v12;
    }
    while (v12);
  }
  return v12;
}

std::string *Espresso::kernel_info_t::kernel_info_t(std::string *this, const Espresso::kernel_info_t *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v5 = *(_OWORD *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  }
  if (*((char *)a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(this + 2, *((const std::string::value_type **)a2 + 6), *((void *)a2 + 7));
  }
  else
  {
    long long v6 = *((_OWORD *)a2 + 3);
    this[2].__r_.__value_.__r.__words[2] = *((void *)a2 + 8);
    *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = v6;
  }
  std::string::size_type v7 = *((void *)a2 + 9);
  LODWORD(this[3].__r_.__value_.__r.__words[1]) = *((_DWORD *)a2 + 20);
  this[3].__r_.__value_.__r.__words[0] = v7;
  this[3].__r_.__value_.__r.__words[2] = *((void *)a2 + 11);
  std::string::size_type v8 = *((void *)a2 + 12);
  this[4].__r_.__value_.__r.__words[0] = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  __int16 v9 = *((_WORD *)a2 + 52);
  std::string::value_type v10 = *((unsigned char *)a2 + 106);
  this[4].__r_.__value_.__r.__words[2] = 0;
  this[4].__r_.__value_.__s.__data_[10] = v10;
  LOWORD(this[4].__r_.__value_.__r.__words[1]) = v9;
  this[5].__r_.__value_.__r.__words[0] = 0;
  this[5].__r_.__value_.__l.__size_ = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&this[4].__r_.__value_.__r.__words[2], *((void *)a2 + 14), *((void *)a2 + 15), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 15) - *((void *)a2 + 14)) >> 3));
  this[5].__r_.__value_.__r.__words[2] = 0;
  this[6].__r_.__value_.__r.__words[0] = 0;
  this[6].__r_.__value_.__l.__size_ = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&this[5].__r_.__value_.__r.__words[2], *((void *)a2 + 17), *((void *)a2 + 18), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 18) - *((void *)a2 + 17)) >> 3));
  this[6].__r_.__value_.__r.__words[2] = 0;
  this[7].__r_.__value_.__r.__words[0] = 0;
  this[7].__r_.__value_.__l.__size_ = 0;
  std::vector<Espresso::layer_shape>::__init_with_size[abi:ne180100]<Espresso::layer_shape*,Espresso::layer_shape*>(&this[6].__r_.__value_.__r.__words[2], *((long long **)a2 + 20), *((long long **)a2 + 21), (uint64_t)(*((void *)a2 + 21) - *((void *)a2 + 20)) >> 6);
  this[7].__r_.__value_.__r.__words[2] = 0;
  this[8].__r_.__value_.__r.__words[0] = 0;
  this[8].__r_.__value_.__l.__size_ = 0;
  std::vector<Espresso::layer_shape>::__init_with_size[abi:ne180100]<Espresso::layer_shape*,Espresso::layer_shape*>(&this[7].__r_.__value_.__r.__words[2], *((long long **)a2 + 23), *((long long **)a2 + 24), (uint64_t)(*((void *)a2 + 24) - *((void *)a2 + 23)) >> 6);
  this[8].__r_.__value_.__r.__words[2] = *((void *)a2 + 26);
  std::string::size_type v11 = *((void *)a2 + 27);
  this[9].__r_.__value_.__r.__words[0] = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

void sub_1920E3D6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (*(char *)(v10 + 47) < 0) {
    operator delete(*v11);
  }
  if (*(char *)(v10 + 23) < 0) {
    operator delete(*(void **)v10);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<Espresso::layer_shape>::__init_with_size[abi:ne180100]<Espresso::layer_shape*,Espresso::layer_shape*>(void *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    long long v6 = result;
    std::vector<Espresso::layer_shape>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape*,Espresso::layer_shape*,Espresso::layer_shape*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1920E3E68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(void *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    if (a4 >= 0xAAAAAAAAAAAAAABLL) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v8 = (char *)operator new(24 * a4);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[24 * a4];
    if (a2 != a3)
    {
      uint64_t v9 = 0;
      do
      {
        uint64_t v10 = (std::string *)&v8[v9];
        uint64_t v11 = a2 + v9;
        if (*(char *)(a2 + v9 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)v11, *(void *)(v11 + 8));
        }
        else
        {
          *(_OWORD *)&v10->__r_.__value_.__l.__data_ = *(_OWORD *)v11;
          v10->__r_.__value_.__r.__words[2] = *(void *)(v11 + 16);
        }
        v9 += 24;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    a1[1] = v8;
  }
}

void sub_1920E3F6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_1920E3F80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  for (; v11; v11 -= 24)
  {
    if (*(char *)(v10 + v11 - 1) < 0) {
      operator delete(*(void **)(v10 + v11 - 24));
    }
  }
  *(void *)(v9 + 8) = v10;
  std::__exception_guard_exceptions<std::vector<std::string>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t Espresso::base_kernel::is_valid_for_engine()
{
  return 1;
}

BOOL std::type_info::operator==[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 1;
  }
  if ((a2 & a1) < 0 != __OFSUB__(a1, a2)) {
    return strcmp((const char *)(a1 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(a2 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  }
  return 0;
}

BOOL Espresso::ANECompilerEngine::stir_slice_kernel::is_valid_for_engine(uint64_t a1, long long *a2, Espresso::ANECompilerEngine *a3)
{
  v128[2] = *MEMORY[0x1E4F143B8];
  long long v6 = (_OWORD *)*((void *)a3 + 6);
  std::string::size_type v7 = (std::__shared_weak_count *)*((void *)v6 + 10);
  if (v7)
  {
    std::string::size_type v8 = std::__shared_weak_count::lock(v7);
    if (v8) {
      uint64_t v9 = (unsigned __int8 *)*((void *)v6 + 9);
    }
    else {
      uint64_t v9 = 0;
    }
  }
  else
  {
    uint64_t v9 = 0;
    std::string::size_type v8 = 0;
  }
  Espresso::ANECompilerEngine::ane_arch_allow_network_override((uint64_t)(v9 + 472));
  uint64_t v10 = (Espresso::ANECompilerEngine *)objc_claimAutoreleasedReturnValue();
  unint64_t v12 = v10;
  unint64_t v13 = (int *)(a1 + 280);
  if (*(_DWORD *)(a1 + 296) != 1 || Espresso::ANECompilerEngine::is_mix_e(v10, v11))
  {
    long long v72 = *a2;
    uint64_t v14 = (std::__shared_weak_count *)*((void *)a2 + 1);
    if (v14) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)a2 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v15 = (_OWORD *)*((void *)a3 + 6);
    long long v16 = (std::__shared_weak_count *)*((void *)v15 + 10);
    if (v16)
    {
      uint64_t v17 = std::__shared_weak_count::lock(v16);
      if (v17) {
        uint64_t v18 = *((void *)v15 + 9);
      }
      else {
        uint64_t v18 = 0;
      }
    }
    else
    {
      uint64_t v18 = 0;
      uint64_t v17 = 0;
    }
    std::string::size_type v32 = Espresso::ANECompilerEngine::ane_arch_allow_network_override(v18 + 472);
    if (Espresso::ANECompilerEngine::is_mix((Espresso::ANECompilerEngine *)v32, v33))
    {
      *(_OWORD *)&v116.__r_.__value_.__l.__data_ = v72;
      BOOL is_valid_for_engine = Espresso::ANECompilerEngine::slice_kernel::is_valid_for_engine(a1, (int64x2_t **)&v116, a3);
      long long v72 = 0u;
      if (v14) {
        nitro::nitro_function::nitro_function(v14);
      }
LABEL_109:

      if (v17) {
        nitro::nitro_function::nitro_function(v17);
      }
      if (*((void *)&v72 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v72 + 1));
      }
      goto LABEL_113;
    }
    int v35 = (void *)*((void *)a3 + 6);
    if (*(void *)(*v35 + 224 * *((void *)a3 + 9) + 144) - *(void *)(*v35 + 224 * *((void *)a3 + 9) + 136) == 24)
    {
      if (*(void *)a3 != *((void *)a3 + 1))
      {
        BOOL v36 = (std::__shared_weak_count *)v35[10];
        if (v36)
        {
          uint64_t v37 = std::__shared_weak_count::lock(v36);
          if (v37)
          {
            unint64_t v38 = (const Espresso::net *)v35[9];
            goto LABEL_73;
          }
        }
        else
        {
          uint64_t v37 = 0;
        }
        unint64_t v38 = 0;
LABEL_73:
        long long v41 = *(_OWORD **)a3;
        uint64_t v42 = *(void *)(*(void *)a3 + 32);
        long long v43 = *(_OWORD *)(*(void *)a3 + 16);
        *(_OWORD *)uint64_t v110 = *(_OWORD *)*(void *)a3;
        *(_OWORD *)&v110[16] = v43;
        *(void *)&v110[32] = v42;
        unint64_t v111 = 0;
        uint64_t v113 = 0;
        unint64_t v112 = 0;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v111, *((const void **)v41 + 5), *((void *)v41 + 6), (uint64_t)(*((void *)v41 + 6) - *((void *)v41 + 5)) >> 2);
        Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v105, v38, (const Espresso::layer_shape *)v110, 1);
        if (v111)
        {
          unint64_t v112 = v111;
          operator delete(v111);
        }
        if (v37) {
          nitro::nitro_function::nitro_function(v37);
        }
        int v44 = (_OWORD *)*((void *)a3 + 6);
        unint64_t v45 = (std::__shared_weak_count *)*((void *)v44 + 10);
        if (v45)
        {
          long long v46 = std::__shared_weak_count::lock(v45);
          if (v46)
          {
            long long v47 = (const Espresso::net *)*((void *)v44 + 9);
LABEL_82:
            __int16 v48 = (_OWORD *)*((void *)a3 + 3);
            uint64_t v49 = *((void *)v48 + 4);
            long long v50 = v48[1];
            *(_OWORD *)int v106 = *v48;
            *(_OWORD *)&v106[16] = v50;
            *(void *)&v106[32] = v49;
            unint64_t v107 = 0;
            uint64_t v109 = 0;
            unint64_t v108 = 0;
            std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v107, *((const void **)v48 + 5), *((void *)v48 + 6), (uint64_t)(*((void *)v48 + 6) - *((void *)v48 + 5)) >> 2);
            Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v98, v47, (const Espresso::layer_shape *)v106, 1);
            if (v107)
            {
              unint64_t v108 = v107;
              operator delete(v107);
            }
            if (v46) {
              nitro::nitro_function::nitro_function(v46);
            }
            long long v51 = *(long long **)(**((void **)a3 + 6) + 224 * *((void *)a3 + 9) + 136);
            if (*((char *)v51 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&v84, *(const std::string::value_type **)v51, *((void *)v51 + 1));
            }
            else
            {
              long long v52 = *v51;
              v84.__r_.__value_.__r.__words[2] = *((void *)v51 + 2);
              *(_OWORD *)&v84.__r_.__value_.__l.__data_ = v52;
            }
            if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(void **)(v18 + 360), &v84))
            {
              uint64_t v95 = &v84;
              long long v53 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v18 + 352), &v84, (uint64_t)&std::piecewise_construct, (long long **)&v95);
              *(_OWORD *)&v116.__r_.__value_.__l.__data_ = *(_OWORD *)(v53 + 56);
              v117[1] = 0;
              v116.__r_.__value_.__r.__words[2] = 0;
              v117[0] = 0;
              std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v116.__r_.__value_.__r.__words[2], *((const void **)v53 + 9), *((void *)v53 + 10), (uint64_t)(*((void *)v53 + 10) - *((void *)v53 + 9)) >> 2);
              if (LODWORD(v116.__r_.__value_.__r.__words[1]) == -1) {
                uint64_t v54 = 1;
              }
              else {
                uint64_t v54 = LODWORD(v116.__r_.__value_.__r.__words[1]);
              }
              if (v116.__r_.__value_.__r.__words[2])
              {
                v117[0] = *((void *)&v116.__r_.__value_.__l + 2);
                operator delete((void *)v116.__r_.__value_.__r.__words[2]);
              }
            }
            else
            {
              uint64_t v54 = *((unsigned int *)a3 + 16);
            }
            Espresso::ANECompilerEngine::mix_slice_kernel::supported_by_hw((uint64_t)&v95, v32, (uint64_t)v105, (uint64_t)v98, v13, (NSString *)v54);
            BOOL is_valid_for_engine = (_BYTE)v95 != 0;
            if (!(_BYTE)v95)
            {
              *(_OWORD *)uint8x8_t v75 = v72;
              if (v14) {
                atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v116, &v96, (uint64_t)a3, 0);
              Espresso::emit_kernel_validation_warning((int64x2_t **)v75, (Espresso::base_kernel::validate_for_engine_warning_t *)&v116);
              if (v119) {
                nitro::nitro_function::nitro_function(v119);
              }
              v104.__r_.__value_.__r.__words[0] = (std::string::size_type)v118;
              std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v104);
              v104.__r_.__value_.__r.__words[0] = (std::string::size_type)v117;
              std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v104);
              if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v116.__r_.__value_.__l.__data_);
              }
              if (v14) {
                nitro::nitro_function::nitro_function(v14);
              }
            }
            if (v97 < 0) {
              operator delete((void *)v96);
            }
            if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v84.__r_.__value_.__l.__data_);
            }
            goto LABEL_109;
          }
        }
        else
        {
          long long v46 = 0;
        }
        long long v47 = 0;
        goto LABEL_82;
      }
      *(_OWORD *)int v106 = v72;
      if (v14) {
        atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(v110, "ANE slice kernel doesn't support empty input.");
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v116, (long long *)v110, (uint64_t)a3, 1);
      Espresso::emit_kernel_validation_warning((int64x2_t **)v106, (Espresso::base_kernel::validate_for_engine_warning_t *)&v116);
    }
    else
    {
      *(_OWORD *)int v106 = v72;
      if (v14) {
        atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(v110, "ANE slice kernel doesn't support more than 1 input.");
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v116, (long long *)v110, (uint64_t)a3, 1);
      Espresso::emit_kernel_validation_warning((int64x2_t **)v106, (Espresso::base_kernel::validate_for_engine_warning_t *)&v116);
    }
    if (v119) {
      nitro::nitro_function::nitro_function(v119);
    }
    v105[0] = (void **)v118;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v105);
    v105[0] = (void **)v117;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v105);
    if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v116.__r_.__value_.__l.__data_);
    }
    if ((v110[23] & 0x80000000) != 0) {
      operator delete(*(void **)v110);
    }
    if (v14) {
      nitro::nitro_function::nitro_function(v14);
    }
    BOOL is_valid_for_engine = 0;
    goto LABEL_109;
  }
  if (*((void *)a3 + 1) - *(void *)a3 != 128)
  {
LABEL_70:
    BOOL is_valid_for_engine = 0;
    goto LABEL_113;
  }
  unsigned int v19 = Espresso::ANECompilerEngine::bottom_compute_path(a3, (const Espresso::base_kernel::validate_for_engine_args_t *)v9, 0);
  unsigned int v20 = Espresso::ANECompilerEngine::bottom_compute_path(a3, (const Espresso::base_kernel::validate_for_engine_args_t *)v9, (const Espresso::net *)1);
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v21 = *(_OWORD **)a3;
  uint64_t v22 = *(void *)(*(void *)a3 + 32);
  long long v23 = *(_OWORD *)(*(void *)a3 + 16);
  v90[0] = *(_OWORD *)*(void *)a3;
  v90[1] = v23;
  uint64_t v91 = v22;
  std::string __p = 0;
  __int16 v93 = 0;
  uint64_t v94 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *((const void **)v21 + 5), *((void *)v21 + 6), (uint64_t)(*((void *)v21 + 6) - *((void *)v21 + 5)) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v98, (const Espresso::net *)v9, (const Espresso::layer_shape *)v90, 1);
  if (__p)
  {
    __int16 v93 = __p;
    operator delete(__p);
  }
  if (v8)
  {
    nitro::nitro_function::nitro_function(v8);
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v24 = *(void **)a3;
  long long v25 = *(_OWORD *)(*(void *)a3 + 80);
  v85[0] = *(_OWORD *)(*(void *)a3 + 64);
  v85[1] = v25;
  unint64_t v26 = (const void *)v24[13];
  uint64_t v86 = v24[12];
  int v87 = 0;
  uint64_t v88 = 0;
  uint64_t v89 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v87, v26, v24[14], (uint64_t)(v24[14] - (void)v26) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)&v95, (const Espresso::net *)v9, (const Espresso::layer_shape *)v85, 1);
  if (v87)
  {
    uint64_t v88 = v87;
    operator delete(v87);
  }
  if (v8)
  {
    nitro::nitro_function::nitro_function(v8);
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v27 = (_OWORD *)*((void *)a3 + 3);
  uint64_t v28 = *((void *)v27 + 4);
  long long v29 = v27[1];
  v79[0] = *v27;
  v79[1] = v29;
  uint64_t v80 = v28;
  unint64_t v81 = 0;
  v82 = 0;
  uint64_t v83 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v81, *((const void **)v27 + 5), *((void *)v27 + 6), (uint64_t)(*((void *)v27 + 6) - *((void *)v27 + 5)) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)&v84, (const Espresso::net *)v9, (const Espresso::layer_shape *)v79, 1);
  if (v81)
  {
    v82 = v81;
    operator delete(v81);
  }
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  int v30 = (void *)(int)v96;
  if (HIDWORD(v95) * v95 * v96 * DWORD1(v96) * DWORD2(v96) != 1)
  {
    uint64_t v39 = *(int64x2_t **)a2;
    uint64_t v40 = (int64x2_t *)*((void *)a2 + 1);
    v78[0] = v39;
    v78[1] = v40;
    if (v40) {
      atomic_fetch_add_explicit(&v40->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v110, "slice_kernel: only num_elements == 1 is supported");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v116, (long long *)v110, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v78, (Espresso::base_kernel::validate_for_engine_warning_t *)&v116);
    if (v119) {
      nitro::nitro_function::nitro_function(v119);
    }
    *(void *)int v106 = v118;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v106);
    *(void *)int v106 = v117;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v106);
    if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v116.__r_.__value_.__l.__data_);
    }
    if ((v110[23] & 0x80000000) != 0) {
      operator delete(*(void **)v110);
    }
    if (v40) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v40);
    }
    goto LABEL_70;
  }
  int v73 = v9[1281];
  uint64_t v31 = v12;
  if (Espresso::ANECompilerEngine::blob_shape_ane_compatible(v98, v31))
  {
    if (Espresso::ANECompilerEngine::blob_shape_ane_compatible(&v95, v31))
    {
      if (Espresso::ANECompilerEngine::blob_shape_ane_compatible(&v84, v31))
      {
        if (v19 < 8 && ((0x97u >> v19) & 1) != 0)
        {
          if (v20 < 8 && ((0x97u >> v20) & 1) != 0)
          {
            unint64_t v58 = off_1E5747E00[v19];
            std::string v59 = off_1E5747E00[v20];
            Espresso::ANECompilerEngine::ane_kernel::get_ane_validator((Espresso::ANECompilerEngine::ane_kernel *)&v126, (NSString *)(a1 + 304), v31);
            ANECDynamicSliceLayerDescInitialize();
            uint64_t v115 = 0;
            uint64_t v114 = 0;
            ANECTensorDescInitialize();
            ANECTensorDescInitialize();
            *(void *)uint64_t v110 = v58;
            unint64_t v111 = (void *)v98[2];
            *(void *)&long long v60 = v98[3];
            *((void *)&v60 + 1) = v98[4];
            *(_OWORD *)&v110[24] = v60;
            *(void *)&long long v60 = v98[0];
            *((void *)&v60 + 1) = v98[1];
            *(_OWORD *)&v110[8] = v60;
            *(void *)&long long v60 = SDWORD1(v96);
            *((void *)&v60 + 1) = SDWORD2(v96);
            *(_OWORD *)&v106[24] = v60;
            *(void *)int v106 = v59;
            unint64_t v107 = v30;
            *(void *)&long long v60 = (int)v95;
            *((void *)&v60 + 1) = SHIDWORD(v95);
            *(_OWORD *)&v106[8] = v60;
            if (v99 <= 5 && *v13 <= 4)
            {
              unint64_t v61 = @"Height";
              switch(*v13)
              {
                case 0:
                  unint64_t v61 = @"Width";
                  goto LABEL_146;
                case 1:
                  goto LABEL_146;
                case 2:
                  if (v99 == 5 && v73) {
                    goto LABEL_142;
                  }
                  goto LABEL_145;
                case 3:
                  unint64_t v61 = @"Batch";
                  if (v99 == 5 && v73) {
LABEL_145:
                  }
                    unint64_t v61 = @"Channel";
                  goto LABEL_146;
                case 4:
                  if (v99 == 5 && v73) {
                    unint64_t v61 = @"Batch";
                  }
                  else {
LABEL_142:
                  }
                    unint64_t v61 = @"Depth";
LABEL_146:
                  uint64_t v120 = v61;
                  unint64_t v121 = @"Background";
                  uint64_t v122 = v61;
                  uint64_t v123 = v61;
                  int v124 = *(_DWORD *)(a1 + 300);
                  v117[0] = @"NonNormalized";
                  v116.__r_.__value_.__r.__words[2] = (std::string::size_type)@"RangeZeroToOne";
                  v116.__r_.__value_.__l.__size_ = (std::string::size_type)v61;
                  v116.__r_.__value_.__r.__words[0] = 1;
                  int v125 = 0;
                  int v62 = ANECValidateDynamicSliceLayer();
                  if (v62)
                  {
                    Espresso::ANECompilerEngine::violations_from_alternates<ANECDynamicSliceLayerDescAlternate>((uint64_t)v105, v115, v114);
                    std::to_string(&v102, v62);
                    std::string::size_type v63 = std::string::insert(&v102, 0, "slice_kernel: ANECValidateDynamicSliceLayer failed with status ");
                    long long v64 = *(_OWORD *)&v63->__r_.__value_.__l.__data_;
                    v103.__r_.__value_.__r.__words[2] = v63->__r_.__value_.__r.__words[2];
                    *(_OWORD *)&v103.__r_.__value_.__l.__data_ = v64;
                    v63->__r_.__value_.__l.__size_ = 0;
                    v63->__r_.__value_.__r.__words[2] = 0;
                    v63->__r_.__value_.__r.__words[0] = 0;
                    uint64_t v65 = std::string::append(&v103, ". ");
                    long long v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
                    v104.__r_.__value_.__r.__words[2] = v65->__r_.__value_.__r.__words[2];
                    *(_OWORD *)&v104.__r_.__value_.__l.__data_ = v66;
                    v65->__r_.__value_.__l.__size_ = 0;
                    v65->__r_.__value_.__r.__words[2] = 0;
                    v65->__r_.__value_.__r.__words[0] = 0;
                    Espresso::ANECompilerEngine::format_validation_violations((uint64_t)v100, (uint64_t)v105);
                    if ((v101 & 0x80u) == 0) {
                      std::string::size_type v67 = v100;
                    }
                    else {
                      std::string::size_type v67 = (void **)v100[0];
                    }
                    if ((v101 & 0x80u) == 0) {
                      std::string::size_type v68 = v101;
                    }
                    else {
                      std::string::size_type v68 = (std::string::size_type)v100[1];
                    }
                    v69 = std::string::append(&v104, (const std::string::value_type *)v67, v68);
                    std::string v70 = (void *)v69->__r_.__value_.__r.__words[0];
                    v128[0] = v69->__r_.__value_.__l.__size_;
                    *(void *)((char *)v128 + 7) = *(std::string::size_type *)((char *)&v69->__r_.__value_.__r.__words[1]
                                                                              + 7);
                    char v71 = HIBYTE(v69->__r_.__value_.__r.__words[2]);
                    v69->__r_.__value_.__l.__size_ = 0;
                    v69->__r_.__value_.__r.__words[2] = 0;
                    v69->__r_.__value_.__r.__words[0] = 0;
                    LOBYTE(v75[0]) = 0;
                    *(void *)&v76[7] = *(void *)((char *)v128 + 7);
                    v75[1] = v70;
                    *(void *)unint64_t v76 = v128[0];
                    char v77 = v71;
                    if ((char)v101 < 0) {
                      operator delete(v100[0]);
                    }
                    if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0) {
                      operator delete(v104.__r_.__value_.__l.__data_);
                    }
                    if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0) {
                      operator delete(v103.__r_.__value_.__l.__data_);
                    }
                    if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0) {
                      operator delete(v102.__r_.__value_.__l.__data_);
                    }
                    std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)v105);
                  }
                  else
                  {
                    LOBYTE(v75[0]) = 1;
                    std::string::basic_string[abi:ne180100]<0>(&v75[1], "Success");
                  }
                  if (v127) {
                    nitro::nitro_function::nitro_function(v127);
                  }
                  goto LABEL_119;
                default:
                  break;
              }
            }
            Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Invalid axis or rank specified.");
          }
          LOBYTE(v75[0]) = 0;
          std::string::basic_string[abi:ne180100]<0>(&v75[1], "slice_kernel: unsupported index compute path for ANE.");
        }
        else
        {
          LOBYTE(v75[0]) = 0;
          std::string::basic_string[abi:ne180100]<0>(&v75[1], "slice_kernel: unsupported input compute path for ANE.");
        }
      }
      else
      {
        LOBYTE(v75[0]) = 0;
        std::string::basic_string[abi:ne180100]<0>(&v75[1], "slice_kernel: output blob dimensions exceed ANE limit.");
      }
    }
    else
    {
      LOBYTE(v75[0]) = 0;
      std::string::basic_string[abi:ne180100]<0>(&v75[1], "slice_kernel: index blob dimensions exceed ANE limit.");
    }
  }
  else
  {
    LOBYTE(v75[0]) = 0;
    std::string::basic_string[abi:ne180100]<0>(&v75[1], "slice_kernel: input blob dimensions exceed ANE limit.");
  }
LABEL_119:

  BOOL is_valid_for_engine = LOBYTE(v75[0]) != 0;
  if (!LOBYTE(v75[0]))
  {
    BOOL v56 = *(int64x2_t **)a2;
    uint64_t v57 = (int64x2_t *)*((void *)a2 + 1);
    v74[0] = v56;
    v74[1] = v57;
    if (v57) {
      atomic_fetch_add_explicit(&v57->i64[1], 1uLL, memory_order_relaxed);
    }
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v116, (long long *)&v75[1], (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v74, (Espresso::base_kernel::validate_for_engine_warning_t *)&v116);
    if (v119) {
      nitro::nitro_function::nitro_function(v119);
    }
    *(void *)uint64_t v110 = v118;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v110);
    *(void *)uint64_t v110 = v117;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v110);
    if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v116.__r_.__value_.__l.__data_);
    }
    if (v57) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v57);
    }
  }
  if (v77 < 0) {
    operator delete(v75[1]);
  }
LABEL_113:

  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  return is_valid_for_engine;
}

void sub_1920E4CAC(_Unwind_Exception *a1)
{
  long long v6 = *(std::__shared_weak_count **)(v4 - 128);
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }

  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(a1);
}

BOOL Espresso::DummyMPSEngine::slice_kernel::is_valid_for_engine(uint64_t a1)
{
  return !*(_DWORD *)(a1 + 296) && *(_DWORD *)(a1 + 280) < 5;
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<Espresso::layer_shape *,Espresso::layer_shape *,Espresso::layer_shape *>(long long *a1, long long *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    long long v5 = a1;
    do
    {
      long long v6 = *v5;
      long long v7 = v5[1];
      *(void *)(a3 + 32) = *((void *)v5 + 4);
      *(_OWORD *)a3 = v6;
      *(_OWORD *)(a3 + 16) = v7;
      if (v5 != (long long *)a3) {
        std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)(a3 + 40), *((char **)v5 + 5), *((void *)v5 + 6), (uint64_t)(*((void *)v5 + 6) - *((void *)v5 + 5)) >> 2);
      }
      v5 += 4;
      a3 += 64;
    }
    while (v5 != a2);
  }
  return a3;
}

uint64_t Espresso::DummyMPSEngine::activation_kernel::is_valid_for_engine(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 304) < 0x19u) & (0x1F87FFFu >> *(_DWORD *)(a1 + 304));
}

uint64_t Espresso::ANECompilerEngine::mix_reshape_kernel::is_valid_for_engine(uint64_t a1, int64x2_t **a2, Espresso::ANECompilerEngine *a3)
{
  uint64_t v156 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *((void *)a3 + 6);
  long long v7 = *(std::__shared_weak_count **)(v6 + 80);
  if (v7)
  {
    std::string::size_type v8 = std::__shared_weak_count::lock(v7);
    if (v8)
    {
      uint64_t v9 = *(const Espresso::net **)(v6 + 72);
      goto LABEL_6;
    }
  }
  else
  {
    std::string::size_type v8 = 0;
  }
  uint64_t v9 = 0;
LABEL_6:
  Espresso::ANECompilerEngine::ane_arch_allow_network_override((uint64_t)v9 + 472);
  uint64_t v10 = (Espresso::ANECompilerEngine *)objc_claimAutoreleasedReturnValue();
  if (Espresso::ANECompilerEngine::is_mix(v10, v11))
  {
    long long v151 = *(_OWORD *)a2;
    unint64_t v12 = (std::__shared_weak_count *)*((void *)&v151 + 1);
    *a2 = 0;
    a2[1] = 0;
    unint64_t v13 = v12;
    uint64_t is_valid_for_engine = Espresso::ANECompilerEngine::reshape_kernel::is_valid_for_engine(a1, (int64x2_t **)&v151, (uint64_t)a3);
    if (!v13) {
      goto LABEL_58;
    }
    uint64_t v15 = v13;
    goto LABEL_9;
  }
  uint64_t v16 = *((void *)a3 + 3);
  uint64_t v17 = *(void *)a3;
  if (*((void *)a3 + 1) - *(void *)a3 >= 0x41uLL && *(unsigned char *)(a1 + 312))
  {
    uint64_t v18 = *a2;
    unsigned int v19 = a2[1];
    v150[0] = v18;
    v150[1] = v19;
    if (v19) {
      atomic_fetch_add_explicit(&v19->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(&v123, "Dynamic shaping not supported");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v152, (long long *)&v123, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v150, (Espresso::base_kernel::validate_for_engine_warning_t *)&v152);
LABEL_49:
    if (v155) {
      nitro::nitro_function::nitro_function(v155);
    }
    int v128 = (void **)v154;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v128);
    int v128 = (void **)v153;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v128);
    if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v152.__r_.__value_.__l.__data_);
    }
LABEL_53:
    if (SHIBYTE(v124) < 0) {
      operator delete(v123);
    }
    if (v19) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v19);
    }
    uint64_t is_valid_for_engine = 0;
    goto LABEL_58;
  }
  int v20 = *(_DWORD *)(a1 + 304);
  if (v20 == 2)
  {
    long long v21 = *a2;
    unsigned int v19 = a2[1];
    v149[0] = v21;
    v149[1] = v19;
    if (v19) {
      atomic_fetch_add_explicit(&v19->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(&v123, "Reshape with Flatten_NCHW_ND mode is not currently supported on ANE.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v152, (long long *)&v123, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v149, (Espresso::base_kernel::validate_for_engine_warning_t *)&v152);
    goto LABEL_49;
  }
  if (v20 == 1 && *((unsigned char *)v9 + 1281))
  {
    uint64_t v22 = *a2;
    unsigned int v19 = a2[1];
    v148[0] = v22;
    v148[1] = v19;
    if (v19) {
      atomic_fetch_add_explicit(&v19->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(&v123, "Reshape with Flatten_NHWC mode and NCDHW blob layout is not currently supported on ANE.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v152, (long long *)&v123, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v148, (Espresso::base_kernel::validate_for_engine_warning_t *)&v152);
    goto LABEL_49;
  }
  v23.i64[0] = -1;
  v23.i64[1] = -1;
  int32x4_t v24 = (int32x4_t)vandq_s8((int8x16_t)vceqq_s32(*(int32x4_t *)(a1 + 280), v23), (int8x16_t)xmmword_192DCA330);
  v24.i32[0] = vaddvq_s32(v24) & 0xF;
  uint8x8_t v25 = (uint8x8_t)vcnt_s8(*(int8x8_t *)v24.i8);
  v25.i16[0] = vaddlv_u8(v25);
  unsigned int v26 = v25.i32[0];
  if (*(_DWORD *)(a1 + 296) == -1) {
    unsigned int v26 = v25.i32[0] + 1;
  }
  if (v26 >= 2)
  {
    uint64_t v27 = *a2;
    unsigned int v19 = a2[1];
    v147[0] = v27;
    v147[1] = v19;
    if (v19) {
      atomic_fetch_add_explicit(&v19->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(&v123, "reshape_kernel: cannot infer more than one dimension's length.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v152, (long long *)&v123, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v147, (Espresso::base_kernel::validate_for_engine_warning_t *)&v152);
    goto LABEL_49;
  }
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v28 = *(_OWORD *)(v17 + 16);
  uint64_t v29 = *(void *)(v17 + 32);
  v140[0] = *(_OWORD *)v17;
  v140[1] = v28;
  uint64_t v141 = v29;
  std::string __p = 0;
  uint64_t v144 = 0;
  uint64_t v143 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *(const void **)(v17 + 40), *(void *)(v17 + 48), (uint64_t)(*(void *)(v17 + 48) - *(void *)(v17 + 40)) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)&v145, v9, (const Espresso::layer_shape *)v140, 1);
  if (__p)
  {
    uint64_t v143 = __p;
    operator delete(__p);
  }
  if (v8)
  {
    nitro::nitro_function::nitro_function(v8);
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v30 = *(_OWORD *)(v16 + 16);
  uint64_t v31 = *(void *)(v16 + 32);
  v133[0] = *(_OWORD *)v16;
  v133[1] = v30;
  uint64_t v134 = v31;
  int v135 = 0;
  uint64_t v137 = 0;
  unint64_t v136 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v135, *(const void **)(v16 + 40), *(void *)(v16 + 48), (uint64_t)(*(void *)(v16 + 48) - *(void *)(v16 + 40)) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)&v138, v9, (const Espresso::layer_shape *)v133, 1);
  if (v135)
  {
    unint64_t v136 = v135;
    operator delete(v135);
  }
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  int v32 = v145;
  unsigned int v33 = DWORD1(v145);
  int v34 = HIDWORD(v145);
  unsigned int v78 = DWORD2(v145);
  int v35 = v146;
  int v75 = v138;
  unsigned int v80 = DWORD1(v138);
  unsigned int v81 = DWORD2(v138);
  int v76 = v139;
  int v77 = HIDWORD(v138);
  if (DWORD1(v145) * v145 * DWORD2(v145) * HIDWORD(v145) * v146 != DWORD1(v138)
                                                                                  * v138
                                                                                  * DWORD2(v138)
                                                                                  * HIDWORD(v138)
                                                                                  * v139)
  {
    unint64_t v38 = *a2;
    unsigned int v19 = a2[1];
    v132[0] = v38;
    v132[1] = v19;
    if (v19) {
      atomic_fetch_add_explicit(&v19->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(&v123, "reshape_kernel: dynamic shape detected.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v152, (long long *)&v123, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v132, (Espresso::base_kernel::validate_for_engine_warning_t *)&v152);
    goto LABEL_49;
  }
  ANECReshapeLayerDescInitialize();
  unsigned int v36 = Espresso::ANECompilerEngine::bottom_compute_path(a3, v9, 0);
  if (v36 >= 8 || ((0x97u >> v36) & 1) == 0)
  {
    uint64_t v37 = *a2;
    unsigned int v19 = a2[1];
    v127[0] = v37;
    v127[1] = v19;
    if (v19) {
      atomic_fetch_add_explicit(&v19->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(&v123, "reshape_kernel: invalid compute path for input.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v152, (long long *)&v123, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v127, (Espresso::base_kernel::validate_for_engine_warning_t *)&v152);
    Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((Espresso::base_kernel::validate_for_engine_warning_t *)&v152);
    goto LABEL_53;
  }
  unint64_t v74 = (void *)*((void *)&off_1E5747A70 + v36);
  ANECTensorDescInitialize();
  Espresso::ANECompilerEngine::ane_kernel::get_ane_validator((Espresso::ANECompilerEngine::ane_kernel *)&v121, (NSString *)(a1 + 320), v10);
  uint64_t v120 = 0;
  uint64_t v119 = 0;
  int v40 = *((unsigned __int8 *)v9 + 1281);
  int v41 = HIDWORD(v146);
  int v73 = HIDWORD(v139);
  if (v32 != v75
    || v33 != v80
    || v78 != v81
    || v34 != v77
    || v35 != v76
    || *((void *)&v146 + 1) != *((void *)&v139 + 1))
  {
    int v42 = *(_DWORD *)(a1 + 304);
    if (v42) {
      BOOL v43 = 1;
    }
    else {
      BOOL v43 = (HIDWORD(v146) & HIDWORD(v139)) != -1;
    }
    if (!v43) {
      goto LABEL_88;
    }
    unsigned int v44 = v81;
    if (!v42 && !v40 && (HIDWORD(v146) & HIDWORD(v139)) != -1)
    {
      *(_OWORD *)uint64_t v83 = v145;
      long long v84 = v146;
      LODWORD(v83[0]) = v78;
      LODWORD(v83[1]) = v32;
      *(_OWORD *)&v152.__r_.__value_.__l.__data_ = xmmword_192DCA280;
      std::vector<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>>::vector[abi:ne180100](&v114, (uint64_t *)&v152, 2uLL);
      Espresso::ANECompilerEngine::validate_transpose((uint64_t)v113, (uint64_t)&v121, (uint64_t)&v145, (uint64_t)v74, (unsigned int **)&v114);
      if (v113[0])
      {
        if ((v113[31] & 0x80000000) != 0) {
          operator delete(*(void **)&v113[8]);
        }
        *(_OWORD *)uint64_t v113 = v138;
        *(_OWORD *)&v113[16] = v139;
        *(_DWORD *)uint64_t v113 = v81;
        *(_DWORD *)&v113[8] = v75;
        *(void *)&long long v45 = SHIDWORD(v83[1]);
        *((void *)&v45 + 1) = (int)v84;
        long long v46 = v45;
        uint64_t v123 = v74;
        uint64_t v126 = v32;
        *(void *)&long long v45 = SLODWORD(v83[0]);
        *((void *)&v45 + 1) = SHIDWORD(v83[0]);
        long long v124 = v45;
        long long v125 = v46;
        int v128 = (void **)(int)v81;
        uint64_t v129 = SDWORD1(v138);
        *(void *)&long long v45 = SHIDWORD(v138);
        *((void *)&v45 + 1) = (int)v139;
        long long v130 = v45;
        uint64_t v131 = v75;
        *(_OWORD *)uint64_t v110 = *(_OWORD *)v113;
        long long v111 = v139;
        LODWORD(v110[0]) = v75;
        LODWORD(v110[1]) = v81;
        Espresso::ANECompilerEngine::validate_transpose((uint64_t)v107, (uint64_t)&v121, (uint64_t)v113, (uint64_t)v74, (unsigned int **)&v114);
        if (LOBYTE(v107[0]))
        {
          if (v109 < 0) {
            operator delete(v107[1]);
          }
          if (!Espresso::ANECompilerEngine::blob_shape_ane_compatible(&v145, v10))
          {
            long long v47 = a2[1];
            v103[0] = *a2;
            v103[1] = v47;
            if (v47) {
              atomic_fetch_add_explicit(&v47->i64[1], 1uLL, memory_order_relaxed);
            }
            std::string::basic_string[abi:ne180100]<0>(v107, "reshape_kernel: tensor exceed ANE limits.");
            Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v152, (long long *)v107, (uint64_t)a3, 0);
            Espresso::emit_kernel_validation_warning(v103, (Espresso::base_kernel::validate_for_engine_warning_t *)&v152);
            goto LABEL_210;
          }
          if (!Espresso::ANECompilerEngine::blob_shape_ane_compatible(v113, v10))
          {
            long long v47 = a2[1];
            v102[0] = *a2;
            v102[1] = v47;
            if (v47) {
              atomic_fetch_add_explicit(&v47->i64[1], 1uLL, memory_order_relaxed);
            }
            std::string::basic_string[abi:ne180100]<0>(v107, "reshape_kernel: tensor exceed ANE limits.");
            Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v152, (long long *)v107, (uint64_t)a3, 0);
            Espresso::emit_kernel_validation_warning(v102, (Espresso::base_kernel::validate_for_engine_warning_t *)&v152);
            goto LABEL_210;
          }
          if (!Espresso::ANECompilerEngine::blob_shape_ane_compatible(v83, v10))
          {
            long long v47 = a2[1];
            v101[0] = *a2;
            v101[1] = v47;
            if (v47) {
              atomic_fetch_add_explicit(&v47->i64[1], 1uLL, memory_order_relaxed);
            }
            std::string::basic_string[abi:ne180100]<0>(v107, "reshape_kernel: tensor exceed ANE limits.");
            Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v152, (long long *)v107, (uint64_t)a3, 0);
            Espresso::emit_kernel_validation_warning(v101, (Espresso::base_kernel::validate_for_engine_warning_t *)&v152);
            goto LABEL_210;
          }
          if (!Espresso::ANECompilerEngine::blob_shape_ane_compatible(v110, v10))
          {
            long long v47 = a2[1];
            v100[0] = *a2;
            v100[1] = v47;
            if (v47) {
              atomic_fetch_add_explicit(&v47->i64[1], 1uLL, memory_order_relaxed);
            }
            std::string::basic_string[abi:ne180100]<0>(v107, "reshape_kernel: tensor exceed ANE limits.");
            Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v152, (long long *)v107, (uint64_t)a3, 0);
            Espresso::emit_kernel_validation_warning(v100, (Espresso::base_kernel::validate_for_engine_warning_t *)&v152);
LABEL_210:
            Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((Espresso::base_kernel::validate_for_engine_warning_t *)&v152);
            if (v108 < 0) {
              operator delete(v107[0]);
            }
            if (v47) {
              nitro::nitro_function::nitro_function((std::__shared_weak_count *)v47);
            }
            goto LABEL_214;
          }
LABEL_129:
          int v58 = 0;
LABEL_215:
          std::string::size_type v67 = v114;
          if (!v114) {
            goto LABEL_218;
          }
          uint64_t v115 = v114;
          goto LABEL_217;
        }
        long long v60 = a2[1];
        v106[0] = *a2;
        v106[1] = v60;
        if (v60) {
          atomic_fetch_add_explicit(&v60->i64[1], 1uLL, memory_order_relaxed);
        }
        std::operator+<char>();
        Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v152, &v104, (uint64_t)a3, 0);
        Espresso::emit_kernel_validation_warning(v106, (Espresso::base_kernel::validate_for_engine_warning_t *)&v152);
LABEL_151:
        Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((Espresso::base_kernel::validate_for_engine_warning_t *)&v152);
        if (SHIBYTE(v105) < 0) {
          operator delete((void *)v104);
        }
        if (v60) {
          nitro::nitro_function::nitro_function((std::__shared_weak_count *)v60);
        }
        if ((v109 & 0x80000000) == 0) {
          goto LABEL_214;
        }
        unint64_t v61 = v107[1];
        goto LABEL_157;
      }
      std::string v59 = a2[1];
      v112[0] = *a2;
      v112[1] = v59;
      if (v59) {
        atomic_fetch_add_explicit(&v59->i64[1], 1uLL, memory_order_relaxed);
      }
      std::operator+<char>();
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v152, (long long *)v110, (uint64_t)a3, 0);
      Espresso::emit_kernel_validation_warning(v112, (Espresso::base_kernel::validate_for_engine_warning_t *)&v152);
      goto LABEL_142;
    }
    if (v40) {
      BOOL v51 = v42 == 0;
    }
    else {
      BOOL v51 = 0;
    }
    if (v51 && (HIDWORD(v146) & HIDWORD(v139)) != -1)
    {
      *(_OWORD *)uint64_t v83 = v145;
      long long v84 = v146;
      int v79 = DWORD1(v145);
      *(int32x2_t *)((char *)v83 + 4) = vrev64_s32(*(int32x2_t *)((char *)&v145 + 4));
      *(_OWORD *)&v152.__r_.__value_.__l.__data_ = xmmword_192DCA810;
      std::vector<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>>::vector[abi:ne180100](&v114, (uint64_t *)&v152, 2uLL);
      Espresso::ANECompilerEngine::validate_transpose((uint64_t)v113, (uint64_t)&v121, (uint64_t)&v145, (uint64_t)v74, (unsigned int **)&v114);
      if (v113[0])
      {
        if ((v113[31] & 0x80000000) != 0) {
          operator delete(*(void **)&v113[8]);
        }
        *(_OWORD *)uint64_t v113 = v138;
        *(_OWORD *)&v113[16] = v139;
        *(void *)&v113[4] = __PAIR64__(v80, v81);
        *(void *)&long long v56 = SHIDWORD(v83[1]);
        *((void *)&v56 + 1) = (int)v84;
        long long v57 = v56;
        uint64_t v123 = v74;
        uint64_t v126 = v79;
        *(void *)&long long v56 = SLODWORD(v83[0]);
        *((void *)&v56 + 1) = SHIDWORD(v83[0]);
        long long v124 = v56;
        long long v125 = v57;
        int v128 = (void **)(int)v138;
        uint64_t v129 = (int)v81;
        *(void *)&long long v56 = SHIDWORD(v138);
        *((void *)&v56 + 1) = (int)v139;
        long long v130 = v56;
        uint64_t v131 = (int)v80;
        *(_OWORD *)uint64_t v110 = *(_OWORD *)v113;
        long long v111 = v139;
        HIDWORD(v110[0]) = v80;
        LODWORD(v110[1]) = v81;
        Espresso::ANECompilerEngine::validate_transpose((uint64_t)v107, (uint64_t)&v121, (uint64_t)v113, (uint64_t)v74, (unsigned int **)&v114);
        if (LOBYTE(v107[0]))
        {
          if (v109 < 0) {
            operator delete(v107[1]);
          }
          if (!Espresso::ANECompilerEngine::blob_shape_ane_compatible(&v145, v10))
          {
            long long v47 = a2[1];
            v97[0] = *a2;
            v97[1] = v47;
            if (v47) {
              atomic_fetch_add_explicit(&v47->i64[1], 1uLL, memory_order_relaxed);
            }
            std::string::basic_string[abi:ne180100]<0>(v107, "reshape_kernel: tensor exceed ANE limits.");
            Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v152, (long long *)v107, (uint64_t)a3, 0);
            Espresso::emit_kernel_validation_warning(v97, (Espresso::base_kernel::validate_for_engine_warning_t *)&v152);
            goto LABEL_210;
          }
          if (!Espresso::ANECompilerEngine::blob_shape_ane_compatible(v113, v10))
          {
            long long v47 = a2[1];
            v96[0] = *a2;
            v96[1] = v47;
            if (v47) {
              atomic_fetch_add_explicit(&v47->i64[1], 1uLL, memory_order_relaxed);
            }
            std::string::basic_string[abi:ne180100]<0>(v107, "reshape_kernel: tensor exceed ANE limits.");
            Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v152, (long long *)v107, (uint64_t)a3, 0);
            Espresso::emit_kernel_validation_warning(v96, (Espresso::base_kernel::validate_for_engine_warning_t *)&v152);
            goto LABEL_210;
          }
          if (!Espresso::ANECompilerEngine::blob_shape_ane_compatible(v83, v10))
          {
            long long v47 = a2[1];
            v95[0] = *a2;
            v95[1] = v47;
            if (v47) {
              atomic_fetch_add_explicit(&v47->i64[1], 1uLL, memory_order_relaxed);
            }
            std::string::basic_string[abi:ne180100]<0>(v107, "reshape_kernel: tensor exceed ANE limits.");
            Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v152, (long long *)v107, (uint64_t)a3, 0);
            Espresso::emit_kernel_validation_warning(v95, (Espresso::base_kernel::validate_for_engine_warning_t *)&v152);
            goto LABEL_210;
          }
          if (!Espresso::ANECompilerEngine::blob_shape_ane_compatible(v110, v10))
          {
            long long v47 = a2[1];
            v94[0] = *a2;
            v94[1] = v47;
            if (v47) {
              atomic_fetch_add_explicit(&v47->i64[1], 1uLL, memory_order_relaxed);
            }
            std::string::basic_string[abi:ne180100]<0>(v107, "reshape_kernel: tensor exceed ANE limits.");
            Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v152, (long long *)v107, (uint64_t)a3, 0);
            Espresso::emit_kernel_validation_warning(v94, (Espresso::base_kernel::validate_for_engine_warning_t *)&v152);
            goto LABEL_210;
          }
          goto LABEL_129;
        }
        long long v60 = a2[1];
        v98[0] = *a2;
        v98[1] = v60;
        if (v60) {
          atomic_fetch_add_explicit(&v60->i64[1], 1uLL, memory_order_relaxed);
        }
        std::operator+<char>();
        Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v152, &v104, (uint64_t)a3, 0);
        Espresso::emit_kernel_validation_warning(v98, (Espresso::base_kernel::validate_for_engine_warning_t *)&v152);
        goto LABEL_151;
      }
      std::string v59 = a2[1];
      v99[0] = *a2;
      v99[1] = v59;
      if (v59) {
        atomic_fetch_add_explicit(&v59->i64[1], 1uLL, memory_order_relaxed);
      }
      std::operator+<char>();
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v152, (long long *)v110, (uint64_t)a3, 0);
      Espresso::emit_kernel_validation_warning(v99, (Espresso::base_kernel::validate_for_engine_warning_t *)&v152);
LABEL_142:
      Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((Espresso::base_kernel::validate_for_engine_warning_t *)&v152);
      if (SBYTE7(v111) < 0) {
        operator delete(v110[0]);
      }
      if (v59) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v59);
      }
      if ((v113[31] & 0x80000000) == 0) {
        goto LABEL_214;
      }
      unint64_t v61 = *(void **)&v113[8];
LABEL_157:
      operator delete(v61);
LABEL_214:
      int v58 = 1;
      goto LABEL_215;
    }
    if (v40) {
      BOOL v53 = (HIDWORD(v146) & HIDWORD(v139)) == -1;
    }
    else {
      BOOL v53 = 1;
    }
    if (v42 != 1 || !v53) {
      goto LABEL_219;
    }
    uint64_t v115 = 0;
    uint64_t v114 = 0;
    uint64_t v116 = 0;
    *(_OWORD *)uint64_t v83 = v145;
    long long v84 = v146;
    HIDWORD(v83[0]) = v34;
    HIDWORD(v83[1]) = v35;
    LODWORD(v84) = DWORD1(v145);
    v152.__r_.__value_.__r.__words[0] = 0x200000003;
    std::vector<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>>::push_back[abi:ne180100](&v114, &v152);
    v152.__r_.__value_.__r.__words[0] = 0x300000004;
    std::vector<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>>::push_back[abi:ne180100](&v114, &v152);
    v152.__r_.__value_.__r.__words[0] = 0x400000002;
    std::vector<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>>::push_back[abi:ne180100](&v114, &v152);
    if (v41 == 1)
    {
      LODWORD(v83[0]) = v78;
      LODWORD(v83[1]) = v32;
      v152.__r_.__value_.__r.__words[0] = 1;
      std::vector<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>>::push_back[abi:ne180100](&v114, &v152);
      v152.__r_.__value_.__r.__words[0] = 0x100000000;
      std::vector<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>>::push_back[abi:ne180100](&v114, &v152);
    }
    uint64_t v54 = (uint64_t)v74;
    Espresso::ANECompilerEngine::validate_transpose((uint64_t)v113, (uint64_t)&v121, (uint64_t)&v145, (uint64_t)v74, (unsigned int **)&v114);
    if (!v113[0])
    {
      int v62 = a2[1];
      v93[0] = *a2;
      v93[1] = v62;
      if (v62) {
        atomic_fetch_add_explicit(&v62->i64[1], 1uLL, memory_order_relaxed);
      }
      std::operator+<char>();
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v152, (long long *)v110, (uint64_t)a3, 0);
      Espresso::emit_kernel_validation_warning(v93, (Espresso::base_kernel::validate_for_engine_warning_t *)&v152);
      Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((Espresso::base_kernel::validate_for_engine_warning_t *)&v152);
      if (SBYTE7(v111) < 0) {
        operator delete(v110[0]);
      }
      if (v62) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v62);
      }
      if ((v113[31] & 0x80000000) != 0) {
        operator delete(*(void **)&v113[8]);
      }
      int v58 = 1;
LABEL_258:
      std::string::size_type v67 = v114;
      if (!v114)
      {
LABEL_218:
        if (v58)
        {
LABEL_241:
          uint64_t is_valid_for_engine = 0;
          goto LABEL_242;
        }
        goto LABEL_219;
      }
LABEL_217:
      operator delete(v67);
      goto LABEL_218;
    }
    if ((v113[31] & 0x80000000) != 0) {
      operator delete(*(void **)&v113[8]);
    }
    *(_OWORD *)uint64_t v113 = v138;
    *(_OWORD *)&v113[16] = v139;
    *(_DWORD *)&v113[4] = v77;
    *(_DWORD *)&v113[12] = v76;
    *(_DWORD *)&v113[16] = v80;
    if (v73 == 1)
    {
      *(_DWORD *)uint64_t v113 = v81;
      int v55 = v75;
      *(_DWORD *)&v113[8] = v75;
    }
    else
    {
      unsigned int v44 = *(_DWORD *)v113;
      int v55 = *(_DWORD *)&v113[8];
    }
    *(void *)&long long v63 = SHIDWORD(v83[1]);
    *((void *)&v63 + 1) = (int)v84;
    long long v64 = v63;
    uint64_t v123 = v74;
    uint64_t v126 = SLODWORD(v83[1]);
    *(void *)&long long v63 = SLODWORD(v83[0]);
    *((void *)&v63 + 1) = SHIDWORD(v83[0]);
    long long v124 = v63;
    long long v125 = v64;
    int v128 = (void **)(int)v44;
    uint64_t v129 = v77;
    *(void *)&long long v130 = v76;
    *((void *)&v130 + 1) = (int)v80;
    uint64_t v131 = v55;
    long long v104 = 0uLL;
    uint64_t v105 = 0;
    *(_OWORD *)uint64_t v110 = *(_OWORD *)v113;
    long long v111 = *(_OWORD *)&v113[16];
    LODWORD(v111) = v76;
    HIDWORD(v110[1]) = v77;
    HIDWORD(v110[0]) = v80;
    v152.__r_.__value_.__r.__words[0] = 0x300000002;
    std::vector<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>>::push_back[abi:ne180100]((void **)&v104, &v152);
    v152.__r_.__value_.__r.__words[0] = 0x400000003;
    std::vector<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>>::push_back[abi:ne180100]((void **)&v104, &v152);
    v152.__r_.__value_.__r.__words[0] = 0x200000004;
    std::vector<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>>::push_back[abi:ne180100]((void **)&v104, &v152);
    if (v73 == 1)
    {
      LODWORD(v110[0]) = v55;
      LODWORD(v110[1]) = v44;
      v152.__r_.__value_.__r.__words[0] = 1;
      std::vector<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>>::push_back[abi:ne180100]((void **)&v104, &v152);
      v152.__r_.__value_.__r.__words[0] = 0x100000000;
      std::vector<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>>::push_back[abi:ne180100]((void **)&v104, &v152);
      uint64_t v54 = (uint64_t)v74;
    }
    Espresso::ANECompilerEngine::validate_transpose((uint64_t)v107, (uint64_t)&v121, (uint64_t)v113, v54, (unsigned int **)&v104);
    if (LOBYTE(v107[0]))
    {
      if (v109 < 0) {
        operator delete(v107[1]);
      }
      if (Espresso::ANECompilerEngine::blob_shape_ane_compatible(&v145, v10))
      {
        if (Espresso::ANECompilerEngine::blob_shape_ane_compatible(v113, v10))
        {
          if (Espresso::ANECompilerEngine::blob_shape_ane_compatible(v83, v10))
          {
            if (Espresso::ANECompilerEngine::blob_shape_ane_compatible(v110, v10))
            {
              int v58 = 0;
              goto LABEL_256;
            }
            long long v66 = a2[1];
            v86[0] = *a2;
            v86[1] = v66;
            if (v66) {
              atomic_fetch_add_explicit(&v66->i64[1], 1uLL, memory_order_relaxed);
            }
            std::string::basic_string[abi:ne180100]<0>(v107, "reshape_kernel: tensor exceed ANE limits.");
            Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v152, (long long *)v107, (uint64_t)a3, 0);
            Espresso::emit_kernel_validation_warning(v86, (Espresso::base_kernel::validate_for_engine_warning_t *)&v152);
          }
          else
          {
            long long v66 = a2[1];
            v87[0] = *a2;
            v87[1] = v66;
            if (v66) {
              atomic_fetch_add_explicit(&v66->i64[1], 1uLL, memory_order_relaxed);
            }
            std::string::basic_string[abi:ne180100]<0>(v107, "reshape_kernel: tensor exceed ANE limits.");
            Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v152, (long long *)v107, (uint64_t)a3, 0);
            Espresso::emit_kernel_validation_warning(v87, (Espresso::base_kernel::validate_for_engine_warning_t *)&v152);
          }
        }
        else
        {
          long long v66 = a2[1];
          v88[0] = *a2;
          v88[1] = v66;
          if (v66) {
            atomic_fetch_add_explicit(&v66->i64[1], 1uLL, memory_order_relaxed);
          }
          std::string::basic_string[abi:ne180100]<0>(v107, "reshape_kernel: tensor exceed ANE limits.");
          Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v152, (long long *)v107, (uint64_t)a3, 0);
          Espresso::emit_kernel_validation_warning(v88, (Espresso::base_kernel::validate_for_engine_warning_t *)&v152);
        }
      }
      else
      {
        long long v66 = a2[1];
        v89[0] = *a2;
        v89[1] = v66;
        if (v66) {
          atomic_fetch_add_explicit(&v66->i64[1], 1uLL, memory_order_relaxed);
        }
        std::string::basic_string[abi:ne180100]<0>(v107, "reshape_kernel: tensor exceed ANE limits.");
        Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v152, (long long *)v107, (uint64_t)a3, 0);
        Espresso::emit_kernel_validation_warning(v89, (Espresso::base_kernel::validate_for_engine_warning_t *)&v152);
      }
      Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((Espresso::base_kernel::validate_for_engine_warning_t *)&v152);
      if (v108 < 0) {
        operator delete(v107[0]);
      }
      if (v66) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v66);
      }
    }
    else
    {
      uint64_t v65 = a2[1];
      v92[0] = *a2;
      v92[1] = v65;
      if (v65) {
        atomic_fetch_add_explicit(&v65->i64[1], 1uLL, memory_order_relaxed);
      }
      std::operator+<char>();
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v152, &v90, (uint64_t)a3, 0);
      Espresso::emit_kernel_validation_warning(v92, (Espresso::base_kernel::validate_for_engine_warning_t *)&v152);
      Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((Espresso::base_kernel::validate_for_engine_warning_t *)&v152);
      if (v91 < 0) {
        operator delete((void *)v90);
      }
      if (v65) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v65);
      }
      if (v109 < 0) {
        operator delete(v107[1]);
      }
    }
    int v58 = 1;
LABEL_256:
    if ((void)v104) {
      operator delete((void *)v104);
    }
    goto LABEL_258;
  }
  unsigned int v81 = v78;
  int v76 = v35;
  int v77 = v34;
  unsigned int v80 = v33;
LABEL_88:
  *(void *)&long long v125 = v34;
  *((void *)&v124 + 1) = (int)v33;
  *((void *)&v125 + 1) = v35;
  uint64_t v126 = (int)v78;
  uint64_t v123 = v74;
  *(void *)&long long v124 = v32;
  int v128 = (void **)v75;
  uint64_t v129 = (int)v80;
  *(void *)&long long v130 = v77;
  *((void *)&v130 + 1) = v76;
  uint64_t v131 = (int)v81;
  if (!Espresso::ANECompilerEngine::blob_shape_ane_compatible(&v145, v10))
  {
    long long v50 = *a2;
    uint64_t v49 = a2[1];
    v118[0] = v50;
    v118[1] = v49;
    if (v49) {
      atomic_fetch_add_explicit(&v49->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v83, "reshape_kernel: tensor exceed ANE limits.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v152, (long long *)v83, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v118, (Espresso::base_kernel::validate_for_engine_warning_t *)&v152);
    goto LABEL_96;
  }
  if (!Espresso::ANECompilerEngine::blob_shape_ane_compatible(&v138, v10))
  {
    __int16 v48 = *a2;
    uint64_t v49 = a2[1];
    v117[0] = v48;
    v117[1] = v49;
    if (v49) {
      atomic_fetch_add_explicit(&v49->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v83, "reshape_kernel: tensor exceed ANE limits.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v152, (long long *)v83, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v117, (Espresso::base_kernel::validate_for_engine_warning_t *)&v152);
LABEL_96:
    Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((Espresso::base_kernel::validate_for_engine_warning_t *)&v152);
    if (SBYTE7(v84) < 0) {
      operator delete(v83[0]);
    }
    if (v49) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v49);
    }
    goto LABEL_241;
  }
LABEL_219:
  int v68 = ANECValidateReshapeLayer();
  if (v68)
  {
    v69 = a2[1];
    v85[0] = *a2;
    v85[1] = v69;
    if (v69) {
      atomic_fetch_add_explicit(&v69->i64[1], 1uLL, memory_order_relaxed);
    }
    std::to_string((std::string *)v113, v68);
    std::string v70 = std::string::insert((std::string *)v113, 0, "reshape_kernel: ANECValidateReshapeLayer failed with status ");
    *(_OWORD *)uint64_t v83 = *(_OWORD *)&v70->__r_.__value_.__l.__data_;
    *(void *)&long long v84 = *((void *)&v70->__r_.__value_.__l + 2);
    v70->__r_.__value_.__l.__size_ = 0;
    v70->__r_.__value_.__r.__words[2] = 0;
    v70->__r_.__value_.__r.__words[0] = 0;
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v152, (long long *)v83, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v85, (Espresso::base_kernel::validate_for_engine_warning_t *)&v152);
    Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((Espresso::base_kernel::validate_for_engine_warning_t *)&v152);
    if (SBYTE7(v84) < 0) {
      operator delete(v83[0]);
    }
    if ((v113[23] & 0x80000000) != 0) {
      operator delete(*(void **)v113);
    }
    if (v69) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v69);
    }
    Espresso::ANECompilerEngine::violations_from_alternates<ANECReshapeLayerDescAlternate>((uint64_t)v83, v119, v120);
    for (uint64_t i = (uint64_t **)v84; i; uint64_t i = (uint64_t **)*i)
    {
      long long v72 = a2[1];
      v82[0] = *a2;
      v82[1] = v72;
      if (v72) {
        atomic_fetch_add_explicit(&v72->i64[1], 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(v113, (char *)[i[2] UTF8String]);
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v152, (long long *)v113, (uint64_t)a3, 0);
      Espresso::emit_kernel_validation_warning(v82, (Espresso::base_kernel::validate_for_engine_warning_t *)&v152);
      if (v155) {
        nitro::nitro_function::nitro_function(v155);
      }
      v110[0] = v154;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v110);
      v110[0] = v153;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v110);
      if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v152.__r_.__value_.__l.__data_);
      }
      if ((v113[23] & 0x80000000) != 0) {
        operator delete(*(void **)v113);
      }
      if (v72) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v72);
      }
    }
    std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)v83);
    goto LABEL_241;
  }
  uint64_t is_valid_for_engine = 1;
LABEL_242:
  uint64_t v15 = v122;
  if (v122) {
LABEL_9:
  }
    nitro::nitro_function::nitro_function(v15);
LABEL_58:

  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  return is_valid_for_engine;
}

void sub_1920E65B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((Espresso::base_kernel::validate_for_engine_warning_t *)(v74 - 224));
  if (SLOBYTE(STACK[0x207]) < 0) {
    operator delete(__p);
  }
  if (v73) {
    nitro::nitro_function::nitro_function(v73);
  }
  if (a66) {
    operator delete(a66);
  }
  if (STACK[0x260]) {
    operator delete((void *)STACK[0x260]);
  }
  if (STACK[0x2B0]) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)STACK[0x2B0]);
  }

  if (v71) {
    nitro::nitro_function::nitro_function(v71);
  }
  _Unwind_Resume(a1);
}

BOOL Espresso::DummyMPSEngine::concat_kernel::is_valid_for_engine(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  if (*a3 == a3[1])
  {
    BOOL v5 = 1;
  }
  else
  {
    int v4 = *(_DWORD *)(v3 + 20);
    if (v4 == -1)
    {
      if (*(_DWORD *)(v3 + 16) == 1) {
        int v4 = 4;
      }
      else {
        int v4 = 5;
      }
    }
    BOOL v5 = v4 > 3;
  }
  return !*(unsigned char *)(a1 + 340) && v5;
}

BOOL Espresso::ANECompilerEngine::load_constant_kernel::is_valid_for_engine(uint64_t a1, int64x2_t **a2, void *a3)
{
  uint64_t v5 = *(void *)(a1 + 344);
  if (v5 && (*(unsigned int (**)(uint64_t))(*(void *)v5 + 32))(v5)) {
    return 0;
  }
  uint64_t v6 = (int *)a3[3];
  if (v6 == (int *)a3[4] || *v6 <= 1 && v6[1] < 2) {
    return 1;
  }
  long long v7 = (void *)a3[6];
  __p.__r_.__value_.__r.__words[0] = *(void *)(*v7 + 224 * a3[9] + 112);
  std::string::size_type v8 = std::__tree<std::__value_type<std::string,std::vector<unsigned long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<unsigned long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<unsigned long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v7 + 6), __p.__r_.__value_.__l.__data_, (long long **)&__p);
  uint64_t v9 = a3[6];
  uint64_t v10 = *(std::__shared_weak_count **)(v9 + 80);
  if (v10 && (uint64_t v11 = std::__shared_weak_count::lock(v10)) != 0)
  {
    unsigned int v33 = v11;
    uint64_t v12 = *(void *)(v9 + 72);
  }
  else
  {
    unsigned int v33 = 0;
    uint64_t v12 = 0;
  }
  Espresso::ANECompilerEngine::ane_arch_allow_network_override(v12 + 472);
  uint64_t v14 = (Espresso::ANECompilerEngine *)objc_claimAutoreleasedReturnValue();
  uint64_t v15 = (void *)v8[7];
  uint64_t v16 = (void *)v8[8];
  while (v15 != v16)
  {
    uint64_t v17 = *(void *)a3[6];
    uint64_t v18 = v17 + 224 * *v15;
    unsigned int v19 = (void *)(v18 + 48);
    int v20 = *(char *)(v18 + 71);
    if (v20 < 0)
    {
      if (v19[1] != 11) {
        goto LABEL_20;
      }
      unsigned int v19 = (void *)*v19;
    }
    else if (v20 != 11)
    {
      goto LABEL_20;
    }
    long long v21 = (void *)*v19;
    uint64_t v22 = *(void *)((char *)v19 + 3);
    if (v21 == (void *)0x77746E656D656C65 && v22 == 0x65736977746E656DLL)
    {
      uint64_t v25 = v17 + 224 * *v15;
      uint64_t v27 = *(_DWORD **)(v25 + 184);
      unsigned int v26 = *(_DWORD **)(v25 + 192);
      while (v27 != v26)
      {
        long long v28 = (_DWORD *)a3[3];
        if ((v27[1] != v28[1] || *v27 != *v28) && Espresso::ANECompilerEngine::is_mix(v14, v13))
        {
          long long v30 = *a2;
          uint64_t v31 = a2[1];
          v34[0] = v30;
          v34[1] = v31;
          if (v31) {
            atomic_fetch_add_explicit(&v31->i64[1], 1uLL, memory_order_relaxed);
          }
          std::string::basic_string[abi:ne180100]<0>(v35, "inputs of the consumer elementwise kernel of load_constant's inputs must be of same h/w when the constant blob has w/h > 1");
          Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)v35, (uint64_t)a3, 0);
          Espresso::emit_kernel_validation_warning(v34, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
          if (v40) {
            nitro::nitro_function::nitro_function(v40);
          }
          v42[0] = (void **)v39;
          std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v42);
          v42[0] = (void **)v38;
          std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v42);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (v36 < 0) {
            operator delete(v35[0]);
          }
          if (v31) {
            nitro::nitro_function::nitro_function((std::__shared_weak_count *)v31);
          }
          char v29 = 0;
          goto LABEL_51;
        }
        v27 += 16;
      }
      goto LABEL_31;
    }
LABEL_20:
    int32x4_t v24 = a2[1];
    v41[0] = *a2;
    v41[1] = v24;
    if (v24) {
      atomic_fetch_add_explicit(&v24->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v35, "consumer of load_constant is not elementwise kernel");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)v35, (uint64_t)a3, 1);
    Espresso::emit_kernel_validation_warning(v41, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    if (v40) {
      nitro::nitro_function::nitro_function(v40);
    }
    v42[0] = (void **)v39;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v42);
    v42[0] = (void **)v38;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v42);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if ((v36 & 0x80000000) == 0)
    {
      if (!v24) {
        goto LABEL_31;
      }
LABEL_30:
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v24);
      goto LABEL_31;
    }
    operator delete(v35[0]);
    if (v24) {
      goto LABEL_30;
    }
LABEL_31:
    ++v15;
  }
  char v29 = 1;
LABEL_51:

  if (v33) {
    nitro::nitro_function::nitro_function(v33);
  }
  return (v29 & 1) != 0;
}

void sub_1920E6DF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::__shared_weak_count *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((Espresso::base_kernel::validate_for_engine_warning_t *)&a18);
  if (a17 < 0) {
    operator delete(__p);
  }
  if (v19) {
    nitro::nitro_function::nitro_function(v19);
  }

  if (a9) {
    nitro::nitro_function::nitro_function(a9);
  }
  _Unwind_Resume(a1);
}

uint64_t Espresso::ANECompilerEngine::batchnorm_kernel::is_valid_for_engine(_DWORD *a1, int64x2_t **a2, uint64_t a3)
{
  if (!a1[83] && !a1[82])
  {
    uint64_t v9 = *(void *)(a3 + 48);
    uint64_t v10 = *(std::__shared_weak_count **)(v9 + 80);
    if (v10)
    {
      uint64_t v6 = (int64x2_t *)std::__shared_weak_count::lock(v10);
      if (v6) {
        uint64_t v11 = *(void *)(v9 + 72);
      }
      else {
        uint64_t v11 = 0;
      }
    }
    else
    {
      uint64_t v11 = 0;
      uint64_t v6 = 0;
    }
    Espresso::ANECompilerEngine::ane_arch_allow_network_override(v11 + 472);
    uint64_t v12 = (Espresso::ANECompilerEngine *)objc_claimAutoreleasedReturnValue();
    uint64_t v14 = v12;
    int v15 = a1[94];
    if ((v15 - 4) > 0xFFFFFFFD)
    {
      if (v15 == 3 && Espresso::ANECompilerEngine::is_mix(v12, v13))
      {
        uint64_t v17 = *a2;
        uint64_t v7 = (uint64_t)a2[1];
        v21[0] = v17;
        v21[1] = (int64x2_t *)v7;
        if (v7) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
        }
        std::string::basic_string[abi:ne180100]<0>(v23, "batchnorm_kernel: 3D not supported on requested architecture");
        Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)v23, a3, 0);
        Espresso::emit_kernel_validation_warning(v21, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
      }
      else
      {
        if (!a1[77] || (int v18 = a1[78]) == 0 || v18 == 1 && !Espresso::ANECompilerEngine::is_mix(v14, v13))
        {
          uint64_t v7 = 1;
          goto LABEL_44;
        }
        unsigned int v19 = *a2;
        uint64_t v7 = (uint64_t)a2[1];
        v20[0] = v19;
        v20[1] = (int64x2_t *)v7;
        if (v7) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
        }
        std::string::basic_string[abi:ne180100]<0>(v23, "batchnorm_kernel: instancenorm is not supported for ANE");
        Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)v23, a3, 0);
        Espresso::emit_kernel_validation_warning(v20, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
      }
      Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    }
    else
    {
      uint64_t v16 = *a2;
      uint64_t v7 = (uint64_t)a2[1];
      v22[0] = v16;
      v22[1] = (int64x2_t *)v7;
      if (v7) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(v23, "batchnorm_kernel: only 2D/3D is supported on ANE");
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)v23, a3, 0);
      Espresso::emit_kernel_validation_warning(v22, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
      if (v28) {
        nitro::nitro_function::nitro_function(v28);
      }
      long long v30 = (void **)v27;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v30);
      long long v30 = (void **)v26;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v30);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    if (v24 < 0) {
      operator delete(v23[0]);
    }
    if (v7)
    {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v7);
      uint64_t v7 = 0;
    }
LABEL_44:

    if (!v6) {
      return v7;
    }
    goto LABEL_12;
  }
  uint64_t v6 = a2[1];
  v29[0] = *a2;
  v29[1] = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->i64[1], 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(v23, "batchnorm_kernel: fused relu and fused tanh not supported");
  Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)v23, a3, 0);
  Espresso::emit_kernel_validation_warning(v29, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
  if (v28) {
    nitro::nitro_function::nitro_function(v28);
  }
  long long v30 = (void **)v27;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v30);
  long long v30 = (void **)v26;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v30);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v24 < 0) {
    operator delete(v23[0]);
  }
  uint64_t v7 = 0;
  if (v6) {
LABEL_12:
  }
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v6);
  return v7;
}

void sub_1920E7174(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((Espresso::base_kernel::validate_for_engine_warning_t *)&a21);
  if (a20 < 0) {
    operator delete(__p);
  }
  if (v23) {
    nitro::nitro_function::nitro_function(v23);
  }

  if (v21) {
    nitro::nitro_function::nitro_function(v21);
  }
  _Unwind_Resume(a1);
}

uint64_t Espresso::ANECompilerEngine::mix_inner_product_kernel::is_valid_for_engine(uint64_t a1, long long *a2, _OWORD **a3)
{
  uint64_t v6 = a3[6];
  uint64_t v7 = (std::__shared_weak_count *)*((void *)v6 + 10);
  if (v7)
  {
    std::string::size_type v8 = std::__shared_weak_count::lock(v7);
    if (v8) {
      uint64_t v9 = *((void *)v6 + 9);
    }
    else {
      uint64_t v9 = 0;
    }
  }
  else
  {
    uint64_t v9 = 0;
    std::string::size_type v8 = 0;
  }
  Espresso::ANECompilerEngine::ane_arch_allow_network_override(v9 + 472);
  uint64_t v10 = (Espresso::ANECompilerEngine *)objc_claimAutoreleasedReturnValue();
  if (Espresso::ANECompilerEngine::is_mix(v10, v11))
  {
    long long v161 = *a2;
    uint64_t v12 = (std::__shared_weak_count *)*((void *)&v161 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    unint64_t v13 = v12;
    uint64_t is_valid_for_engine = Espresso::ANECompilerEngine::inner_product_kernel::is_valid_for_engine(a1, (uint64_t)&v161, (uint64_t *)a3);
    if (v13) {
      nitro::nitro_function::nitro_function(v13);
    }
    goto LABEL_106;
  }
  if ((char *)a3[1] - (char *)*a3 == 64 && a3[3] != a3[4])
  {
    int v15 = a3[6];
    uint64_t v16 = (std::__shared_weak_count *)*((void *)v15 + 10);
    if (v16)
    {
      uint64_t v17 = std::__shared_weak_count::lock(v16);
      if (v17)
      {
        int v18 = (const Espresso::net *)*((void *)v15 + 9);
        goto LABEL_26;
      }
    }
    else
    {
      uint64_t v17 = 0;
    }
    int v18 = 0;
LABEL_26:
    uint64_t v19 = (uint64_t)*a3;
    uint64_t v20 = *((void *)*a3 + 4);
    long long v21 = (*a3)[1];
    v149[0] = **a3;
    v149[1] = v21;
    uint64_t v150 = v20;
    long long v151 = 0;
    uint64_t v153 = 0;
    std::string v152 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v151, *(const void **)(v19 + 40), *(void *)(v19 + 48), (uint64_t)(*(void *)(v19 + 48) - *(void *)(v19 + 40)) >> 2);
    Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)&v154, v18, (const Espresso::layer_shape *)v149, 1);
    if (v151)
    {
      std::string v152 = v151;
      operator delete(v151);
    }
    if (v17) {
      nitro::nitro_function::nitro_function(v17);
    }
    uint64_t v22 = a3[6];
    int32x4_t v23 = (std::__shared_weak_count *)*((void *)v22 + 10);
    if (v23)
    {
      char v24 = std::__shared_weak_count::lock(v23);
      if (v24) {
        uint64_t v25 = (const Espresso::net *)*((void *)v22 + 9);
      }
      else {
        uint64_t v25 = 0;
      }
    }
    else
    {
      uint64_t v25 = 0;
      char v24 = 0;
    }
    unsigned int v26 = a3[3];
    uint64_t v27 = *((void *)v26 + 4);
    long long v28 = v26[1];
    v143[0] = *v26;
    v143[1] = v28;
    uint64_t v144 = v27;
    long long v145 = 0;
    long long v146 = 0;
    uint64_t v147 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v145, *((const void **)v26 + 5), *((void *)v26 + 6), (uint64_t)(*((void *)v26 + 6) - *((void *)v26 + 5)) >> 2);
    Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v148, v25, (const Espresso::layer_shape *)v143, 1);
    if (v145)
    {
      long long v146 = v145;
      operator delete(v145);
    }
    if (v24) {
      nitro::nitro_function::nitro_function(v24);
    }
    char v29 = v10;
    if (!Espresso::ANECompilerEngine::blob_shape_ane_compatible(&v154, v29))
    {
      char v140 = 0;
      std::string::basic_string[abi:ne180100]<0>(v141, "Input blob dimensions exceed ANE limit.");
      goto LABEL_48;
    }
    if (!Espresso::ANECompilerEngine::blob_shape_ane_compatible(v148, v29))
    {
      char v140 = 0;
      std::string::basic_string[abi:ne180100]<0>(v141, "Output blob dimensions exceed ANE limit.");
      goto LABEL_48;
    }
    int v30 = v158;
    if (v158 == 5)
    {
      if (v156 != 1 || v157 != 1)
      {
        char v140 = 0;
        std::string::basic_string[abi:ne180100]<0>(v141, "Inner product with D/H/W > 1 not allowed on ANE. Use conv2d instead.");
        goto LABEL_48;
      }
      if (v159 != 1)
      {
        char v140 = 0;
        std::string::basic_string[abi:ne180100]<0>(v141, "Inner product is not supported with NCDHW layout yet.");
        goto LABEL_48;
      }
    }
    else if (v158 == 4 && (v156 != 1 || v157 != 1))
    {
      char v140 = 0;
      std::string::basic_string[abi:ne180100]<0>(v141, "Inner product with H/W > 1 not allowed on ANE. Use conv2d instead.");
      goto LABEL_48;
    }
    if (!*(_DWORD *)(a1 + 336))
    {
      uint64_t v50 = *(void *)a3[6] + 224 * (void)a3[9];
      uint64_t v52 = *(void *)(v50 + 88);
      uint64_t v51 = v50 + 88;
      uint64_t v53 = *(void *)(v52 + 224);
      std::string::basic_string[abi:ne180100]<0>(&__p, "Q");
      if ((*(uint64_t (**)(uint64_t, std::string *))(*(void *)v53 + 24))(v53, &__p))
      {
        int v54 = 1;
      }
      else
      {
        uint64_t v56 = *(void *)(*(void *)v51 + 224);
        std::string::basic_string[abi:ne180100]<0>(&v113, "Qscale_t");
        if ((*(uint64_t (**)(uint64_t, std::string *))(*(void *)v56 + 24))(v56, &v113))
        {
          int v54 = 1;
        }
        else
        {
          uint64_t v63 = *(void *)(*(void *)v51 + 224);
          std::string::basic_string[abi:ne180100]<0>(&v190, "W_t_int8");
          int v54 = (*(uint64_t (**)(uint64_t, std::string *))(*(void *)v63 + 24))(v63, &v190);
          if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v190.__r_.__value_.__l.__data_);
          }
        }
        if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v113.__r_.__value_.__l.__data_);
        }
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (v54)
      {
        char v140 = 0;
        std::string::basic_string[abi:ne180100]<0>(v141, "Found quantization scheme only implemented for is_lookup (Q, Qscale_t, and/or W_t_int8).");
        goto LABEL_48;
      }
      goto LABEL_282;
    }
    if ((HIDWORD(v154) * v154 * v155 * v156 * v157) > 0x4000)
    {
      char v140 = 0;
      std::string::basic_string[abi:ne180100]<0>(v141, "Inner product (is_lookup = True) is not supported with number of ids > 16384 because the decomposition mechanism would require an illegal reshape.");
      goto LABEL_48;
    }
    unsigned int v55 = *(_DWORD *)(a1 + 308);
    if (v55 <= 0x800)
    {
      int v104 = (int)v154;
      int v105 = v155;
      int v106 = HIDWORD(v154);
      int v107 = v157;
      int v108 = v156;
      long long v57 = a3[6];
    }
    else
    {
      if (v55 > 0x10000)
      {
        char v140 = 0;
        std::string::basic_string[abi:ne180100]<0>(v141, "Inner product (is_lookup = True) is not supported with nB requiring more than 16 bits.");
        goto LABEL_48;
      }
      if (v55 == 0x10000)
      {
        char v140 = 0;
        std::string::basic_string[abi:ne180100]<0>(v141, "Inner product (is_lookup = True) requires nB to be bounded by limits on channel dimension.");
        goto LABEL_48;
      }
      if (v55 > 0x8000)
      {
        char v140 = 0;
        std::string::basic_string[abi:ne180100]<0>(v141, "Inner product (is_lookup = True) requires nB to be bounded by 32768. Experienced compilation failures for larger factors in testing.");
        goto LABEL_48;
      }
      int v104 = (int)v154;
      int v105 = v155;
      int v106 = HIDWORD(v154);
      int v107 = v157;
      int v108 = v156;
      std::string::size_type v67 = a3[6];
      int v68 = *(void **)(*v67 + 224 * (void)a3[9] + 136);
      long long v111 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>((uint64_t)(v67 + 3), v68);
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v68;
      v69 = std::__tree<std::__value_type<std::string,std::vector<unsigned long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<unsigned long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<unsigned long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v67 + 6), v68, (long long **)&__p);
      long long v57 = a3[6];
      if (v57 + 4 != v111)
      {
        char v140 = 0;
        std::string::basic_string[abi:ne180100]<0>(v141, "Inner product layer that relies on input casting must be the consumer of an input layer and not a layer created by another kernel.");
        goto LABEL_48;
      }
      if (v69[8] - v69[7] >= 9uLL)
      {
        char v140 = 0;
        std::string::basic_string[abi:ne180100]<0>(v141, "Inner product layer that relies on input casting must be the only consumer of the input (heuristic so that each consumer expects the cast).");
        goto LABEL_48;
      }
    }
    uint64_t v58 = *v57 + 224 * (void)a3[9];
    uint64_t v60 = *(void *)(v58 + 88);
    uint64_t v59 = v58 + 88;
    uint64_t v61 = *(void *)(v60 + 224);
    std::string::basic_string[abi:ne180100]<0>(&__p, "blob_weights_f16");
    uint64_t v110 = v59;
    if ((*(uint64_t (**)(uint64_t, std::string *))(*(void *)v61 + 24))(v61, &__p))
    {
      int v62 = 1;
    }
    else
    {
      uint64_t v64 = *(void *)(*(void *)v59 + 224);
      std::string::basic_string[abi:ne180100]<0>(&v113, "W_8bit");
      if ((*(uint64_t (**)(uint64_t, std::string *))(*(void *)v64 + 24))(v64, &v113))
      {
        int v62 = 1;
      }
      else
      {
        uint64_t v65 = *(void *)(*(void *)v59 + 224);
        std::string::basic_string[abi:ne180100]<0>(&v190, "W_uint8");
        if ((*(uint64_t (**)(uint64_t, std::string *))(*(void *)v65 + 24))(v65, &v190))
        {
          int v62 = 1;
        }
        else
        {
          uint64_t v66 = *(void *)(*(void *)v59 + 224);
          std::string::basic_string[abi:ne180100]<0>(&v189, "W_int8");
          if ((*(uint64_t (**)(uint64_t, std::string *))(*(void *)v66 + 24))(v66, &v189))
          {
            int v62 = 1;
          }
          else
          {
            uint64_t v70 = *(void *)(*(void *)v59 + 224);
            std::string::basic_string[abi:ne180100]<0>(&v188, "W_int16");
            if ((*(uint64_t (**)(uint64_t, std::string *))(*(void *)v70 + 24))(v70, &v188))
            {
              int v62 = 1;
            }
            else
            {
              uint64_t v71 = *(void *)(*(void *)v59 + 224);
              std::string::basic_string[abi:ne180100]<0>(v186, "Qscale");
              if ((*(uint64_t (**)(uint64_t, void ***))(*(void *)v71 + 24))(v71, v186))
              {
                int v62 = 1;
              }
              else
              {
                uint64_t v72 = *(void *)(*(void *)v59 + 224);
                std::string::basic_string[abi:ne180100]<0>(v184, "Qbias");
                if ((*(uint64_t (**)(uint64_t, void **))(*(void *)v72 + 24))(v72, v184))
                {
                  int v62 = 1;
                }
                else
                {
                  uint64_t v73 = *(void *)(*(void *)v59 + 224);
                  std::string::basic_string[abi:ne180100]<0>(v182, "Qrow_sums");
                  if ((*(uint64_t (**)(uint64_t, void **))(*(void *)v73 + 24))(v73, v182))
                  {
                    int v62 = 1;
                  }
                  else
                  {
                    uint64_t v74 = *(void *)(*(void *)v59 + 224);
                    std::string::basic_string[abi:ne180100]<0>(v180, "tree_W");
                    if ((*(uint64_t (**)(uint64_t, void **))(*(void *)v74 + 24))(v74, v180))
                    {
                      int v62 = 1;
                    }
                    else
                    {
                      uint64_t v75 = *(void *)(*(void *)v59 + 224);
                      std::string::basic_string[abi:ne180100]<0>(v178, "tree_b");
                      if ((*(uint64_t (**)(uint64_t, void **))(*(void *)v75 + 24))(v75, v178))
                      {
                        int v62 = 1;
                      }
                      else
                      {
                        uint64_t v76 = *(void *)(*(void *)v59 + 224);
                        std::string::basic_string[abi:ne180100]<0>(v176, "tree_map_to_index");
                        if ((*(uint64_t (**)(uint64_t, void **))(*(void *)v76 + 24))(v76, v176))
                        {
                          int v62 = 1;
                        }
                        else
                        {
                          uint64_t v77 = *(void *)(*(void *)v59 + 224);
                          std::string::basic_string[abi:ne180100]<0>(v174, "tree_cluster_end");
                          if ((*(uint64_t (**)(uint64_t, void **))(*(void *)v77 + 24))(v77, v174))
                          {
                            int v62 = 1;
                          }
                          else
                          {
                            uint64_t v78 = *(void *)(*(void *)v59 + 224);
                            std::string::basic_string[abi:ne180100]<0>(v172, "block_starts");
                            if ((*(uint64_t (**)(uint64_t, void **))(*(void *)v78 + 24))(v78, v172))
                            {
                              int v62 = 1;
                            }
                            else
                            {
                              uint64_t v79 = *(void *)(*(void *)v59 + 224);
                              std::string::basic_string[abi:ne180100]<0>(v170, "w_f16_t");
                              if ((*(uint64_t (**)(uint64_t, void **))(*(void *)v79 + 24))(v79, v170))
                              {
                                int v62 = 1;
                              }
                              else
                              {
                                uint64_t v80 = *(void *)(*(void *)v59 + 224);
                                std::string::basic_string[abi:ne180100]<0>(v168, "w_f32_t");
                                if ((*(uint64_t (**)(uint64_t, void **))(*(void *)v80 + 24))(v80, v168))
                                {
                                  int v62 = 1;
                                }
                                else
                                {
                                  uint64_t v81 = *(void *)(*(void *)v59 + 224);
                                  std::string::basic_string[abi:ne180100]<0>(v166, "block_cols");
                                  if ((*(uint64_t (**)(uint64_t, void **))(*(void *)v81 + 24))(v81, v166))
                                  {
                                    int v62 = 1;
                                  }
                                  else
                                  {
                                    uint64_t v82 = *(void *)(*(void *)v59 + 224);
                                    std::string::basic_string[abi:ne180100]<0>(v164, "sparse_weights_f32");
                                    if ((*(uint64_t (**)(uint64_t, void **))(*(void *)v82 + 24))(v82, v164))
                                    {
                                      int v62 = 1;
                                    }
                                    else
                                    {
                                      uint64_t v83 = *(void *)(*(void *)v59 + 224);
                                      std::string::basic_string[abi:ne180100]<0>(v162, "sparse_weights_f16");
                                      int v62 = (*(uint64_t (**)(uint64_t, void **))(*(void *)v83 + 24))(v83, v162);
                                      if (v163 < 0) {
                                        operator delete(v162[0]);
                                      }
                                    }
                                    if (v165 < 0) {
                                      operator delete(v164[0]);
                                    }
                                  }
                                  if (v167 < 0) {
                                    operator delete(v166[0]);
                                  }
                                }
                                if (v169 < 0) {
                                  operator delete(v168[0]);
                                }
                              }
                              if (v171 < 0) {
                                operator delete(v170[0]);
                              }
                            }
                            if (v173 < 0) {
                              operator delete(v172[0]);
                            }
                          }
                          if (v175 < 0) {
                            operator delete(v174[0]);
                          }
                        }
                        if (v177 < 0) {
                          operator delete(v176[0]);
                        }
                      }
                      if (v179 < 0) {
                        operator delete(v178[0]);
                      }
                    }
                    if (v181 < 0) {
                      operator delete(v180[0]);
                    }
                  }
                  if (v183 < 0) {
                    operator delete(v182[0]);
                  }
                }
                if (v185 < 0) {
                  operator delete(v184[0]);
                }
              }
              if (v187 < 0) {
                operator delete(v186[0]);
              }
            }
            if (SHIBYTE(v188.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v188.__r_.__value_.__l.__data_);
            }
          }
          if (SHIBYTE(v189.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v189.__r_.__value_.__l.__data_);
          }
        }
        if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v190.__r_.__value_.__l.__data_);
        }
      }
      if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v113.__r_.__value_.__l.__data_);
      }
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    uint64_t v84 = *(void *)(*(void *)v59 + 224);
    std::string::basic_string[abi:ne180100]<0>(&__p, "Q");
    if ((*(unsigned int (**)(uint64_t, std::string *))(*(void *)v84 + 24))(v84, &__p))
    {
      uint64_t v85 = *(void *)(*(void *)v110 + 224);
      std::string::basic_string[abi:ne180100]<0>(&v113, "Qscale_t");
      if ((*(unsigned int (**)(uint64_t, std::string *))(*(void *)v85 + 24))(v85, &v113))
      {
        uint64_t v86 = *(void *)(*(void *)v110 + 224);
        std::string::basic_string[abi:ne180100]<0>(&v190, "W_t_int8");
        int v87 = (*(uint64_t (**)(uint64_t, std::string *))(*(void *)v86 + 24))(v86, &v190);
        if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v190.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        int v87 = 0;
      }
      if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v113.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      int v87 = 0;
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v87)
    {
      if (*(_DWORD *)(a1 + 312))
      {
        char v140 = 0;
        std::string::basic_string[abi:ne180100]<0>(v141, "quantized inner product not implemented with biases.");
        goto LABEL_48;
      }
    }
    else
    {
      uint64_t v88 = *(void *)(*(void *)v110 + 224);
      std::string::basic_string[abi:ne180100]<0>(&__p, "Q");
      if ((*(uint64_t (**)(uint64_t, std::string *))(*(void *)v88 + 24))(v88, &__p))
      {
        int v89 = 1;
      }
      else
      {
        uint64_t v90 = *(void *)(*(void *)v110 + 224);
        std::string::basic_string[abi:ne180100]<0>(&v113, "Qscale_t");
        if ((*(uint64_t (**)(uint64_t, std::string *))(*(void *)v90 + 24))(v90, &v113))
        {
          int v89 = 1;
        }
        else
        {
          uint64_t v91 = *(void *)(*(void *)v110 + 224);
          std::string::basic_string[abi:ne180100]<0>(&v190, "W_t_int8");
          int v89 = (*(uint64_t (**)(uint64_t, std::string *))(*(void *)v91 + 24))(v91, &v190);
          if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v190.__r_.__value_.__l.__data_);
          }
        }
        if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v113.__r_.__value_.__l.__data_);
        }
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (v89)
      {
        char v140 = 0;
        std::string::basic_string[abi:ne180100]<0>(v141, "is_lookup quantization support is tailored to a specific pattern for a single model. Partial match not implemented.");
        goto LABEL_48;
      }
    }
    if (v62)
    {
      char v140 = 0;
      std::string::basic_string[abi:ne180100]<0>(v141, "Inner product (is_lookup = True) is not supported with quantized weight yet.");
      goto LABEL_48;
    }
    if (v159 == -1 || v159 == 1)
    {
      int v96 = v106;
      int v93 = v107;
      int v94 = v104;
      int v95 = v105;
      int v92 = v108;
    }
    else
    {
      int v93 = v107;
      int v92 = v108;
      int v94 = v106;
      int v95 = v104;
      if (v159)
      {
        int v93 = 0;
        int v92 = 1;
        int v96 = 1;
        int v94 = 1;
        int v95 = 1;
      }
      else
      {
        int v96 = v105;
      }
    }
    BOOL v100 = v95 > 1 && v94 == 1 && v96 == 1 && v92 == 1;
    if (!*(unsigned char *)(a1 + 344) && v30 >= 4)
    {
      if (v100)
      {
        if (v93 != 1) {
          goto LABEL_276;
        }
      }
      else if (v95 > 1 || v94 < 1 || v93 != 1 || v96 != 1 || v92 != 1)
      {
        goto LABEL_276;
      }
      goto LABEL_282;
    }
    if (v100 || v95 <= 1 && v94 >= 2 && v96 == 1 && v92 == 1)
    {
      BOOL v101 = v93 == 1;
      LOBYTE(v100) = v100 ^ (v94 < 2);
    }
    else
    {
      BOOL v101 = 0;
      BOOL v100 = v95 < 2 && v94 < 2;
      if (v100 && v96 >= 2 && v92 == 1)
      {
        BOOL v102 = 0;
        if (v93 == 1) {
          goto LABEL_282;
        }
        goto LABEL_275;
      }
    }
    BOOL v102 = v96 < 2 && v100;
    if (v92 <= 0) {
      BOOL v102 = 0;
    }
    if (v93 != 1) {
      BOOL v102 = 0;
    }
    if (v101) {
      goto LABEL_282;
    }
LABEL_275:
    if (!v102)
    {
LABEL_276:
      char v140 = 0;
      std::string::basic_string[abi:ne180100]<0>(v141, "Inner product (is_lookup = True) is not supported with the current input shape yet.");
      goto LABEL_48;
    }
LABEL_282:
    char v140 = 1;
    std::string::basic_string[abi:ne180100]<0>(v141, "Success.");
LABEL_48:

    if (!v140)
    {
      uint64_t is_valid_for_engine = *((void *)a2 + 1);
      v139[0] = *(int64x2_t **)a2;
      v139[1] = (int64x2_t *)is_valid_for_engine;
      if (is_valid_for_engine) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(is_valid_for_engine + 8), 1uLL, memory_order_relaxed);
      }
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)v141, (uint64_t)a3, 0);
      Espresso::emit_kernel_validation_warning(v139, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
      if (*(void *)((char *)&v125 + 6)) {
        nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)((char *)&v125 + 6));
      }
      v113.__r_.__value_.__r.__words[0] = (std::string::size_type)v123;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v113);
      v113.__r_.__value_.__r.__words[0] = (std::string::size_type)&v119;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v113);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (is_valid_for_engine)
      {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)is_valid_for_engine);
        uint64_t is_valid_for_engine = 0;
      }
      goto LABEL_104;
    }
    uint64_t v31 = *(long long **)(*(void *)a3[6] + 224 * (void)a3[9] + 136);
    if (*((char *)v31 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v190, *(const std::string::value_type **)v31, *((void *)v31 + 1));
    }
    else
    {
      long long v32 = *v31;
      v190.__r_.__value_.__r.__words[2] = *((void *)v31 + 2);
      *(_OWORD *)&v190.__r_.__value_.__l.__data_ = v32;
    }
    uint64_t v33 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(void **)(v9 + 360), &v190);
    if (*((_DWORD *)a3 + 16) <= 1u) {
      int v34 = 1;
    }
    else {
      int v34 = *((_DWORD *)a3 + 16);
    }
    if (v33)
    {
      v113.__r_.__value_.__r.__words[0] = (std::string::size_type)&v190;
      int v35 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v9 + 352), &v190, (uint64_t)&std::piecewise_construct, (long long **)&v113);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)(v35 + 56);
      std::string::size_type v119 = 0;
      uint64_t v120 = 0;
      __p.__r_.__value_.__r.__words[2] = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p.__r_.__value_.__r.__words[2], *((const void **)v35 + 9), *((void *)v35 + 10), (uint64_t)(*((void *)v35 + 10) - *((void *)v35 + 9)) >> 2);
      int v34 = LODWORD(__p.__r_.__value_.__r.__words[1]) == -1 ? 1 : LODWORD(__p.__r_.__value_.__r.__words[1]);
      if (__p.__r_.__value_.__r.__words[2])
      {
        std::string::size_type v119 = __p.__r_.__value_.__r.__words[2];
        operator delete((void *)__p.__r_.__value_.__r.__words[2]);
      }
    }
    char v36 = a3[3];
    int v37 = *((_DWORD *)v36 + 5);
    if (v37 == -1 || v37 >= 4)
    {
      __asm { FMOV            V0.2S, #1.0 }
      __int16 v124 = 1;
      long long v125 = 0uLL;
      __int16 v126 = 0;
      uint64_t v127 = 0x1000100010001;
      int v128 = 0;
      int v130 = 1;
      int v137 = 0;
      char v138 = 0;
      uint64_t v133 = 0;
      uint64_t v134 = 0;
      memset(&__p, 0, sizeof(__p));
      std::string::size_type v119 = 0;
      uint64_t v120 = 1;
      long long v129 = xmmword_192DCA230;
      uint64_t v131 = 0;
      v123[1] = 0xFFFFFFFF00000000;
      v123[2] = _D0;
      int v132 = 0x10000;
      int v135 = 0;
      __int16 v136 = 1;
      uint64_t v42 = (uint64_t)*a3;
      int32x2_t v109 = *(int32x2_t *)*a3;
      v123[0] = v109;
      int v122 = *(_DWORD *)(v42 + 8);
      int v43 = *((_DWORD *)v36 + 2);
      int v121 = v43;
      unsigned int v44 = (std::__shared_weak_count *)*((void *)a2 + 1);
      if (v44) {
        atomic_fetch_add_explicit(&v44->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      is_valid_kernel_input_std::string::size_type size = Espresso::is_valid_kernel_input_size((uint64_t)&__p, (uint64_t *)a3, 0);
      if (v44) {
        nitro::nitro_function::nitro_function(v44);
      }
      if (!is_valid_kernel_input_size)
      {
        long long v46 = *(int64x2_t **)a2;
        long long v47 = (int64x2_t *)*((void *)a2 + 1);
        v117[0] = v46;
        v117[1] = v47;
        if (v47) {
          atomic_fetch_add_explicit(&v47->i64[1], 1uLL, memory_order_relaxed);
        }
        std::to_string(&v188, vmul_lane_s32(v109, v109, 1).u32[0] * v43);
        __int16 v48 = std::string::insert(&v188, 0, "kernel input size too large for inner_product layerRoughly, size_oc=Kw*Kh*Cin should be less than 65536 for INT8, 32768 for FP16. Instead size_oc=");
        std::string v189 = *v48;
        v48->__r_.__value_.__l.__size_ = 0;
        v48->__r_.__value_.__r.__words[2] = 0;
        v48->__r_.__value_.__r.__words[0] = 0;
        Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v113, (long long *)&v189, (uint64_t)a3, 0);
        Espresso::emit_kernel_validation_warning(v117, (Espresso::base_kernel::validate_for_engine_warning_t *)&v113);
        if (v116) {
          nitro::nitro_function::nitro_function(v116);
        }
        v186[0] = (void **)&v115;
        std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v186);
        v186[0] = (void **)&v114;
        std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v186);
        if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v113.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v189.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v189.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v188.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v188.__r_.__value_.__l.__data_);
        }
        if (v47) {
          nitro::nitro_function::nitro_function((std::__shared_weak_count *)v47);
        }
        Espresso::ANECompilerEngine::ane_kernel::get_ane_validator((Espresso::ANECompilerEngine::ane_kernel *)&v113, (NSString *)(a1 + 544), v29);
        uint64_t is_valid_for_engine = Espresso::ANECompilerEngine::ane_kernel::call_ane_validate_for_conv((uint64_t)&v113, v29, (uint64_t *)(a1 + 440), (uint64_t)&__p, (uint64_t)&v154, v34, (uint64_t)v148, 0);
        if (v113.__r_.__value_.__l.__size_) {
          nitro::nitro_function::nitro_function((std::__shared_weak_count *)v113.__r_.__value_.__l.__size_);
        }
        goto LABEL_102;
      }
    }
    else if ((unint64_t)((uint64_t)v157 << (v34 == 1)) > 0x10000)
    {
      uint64_t is_valid_for_engine = *((void *)a2 + 1);
      v112[0] = *(int64x2_t **)a2;
      v112[1] = (int64x2_t *)is_valid_for_engine;
      if (is_valid_for_engine) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(is_valid_for_engine + 8), 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(&v113, "KMEM size limit exceeded.");
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)&v113, (uint64_t)a3, 1);
      Espresso::emit_kernel_validation_warning(v112, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
      if (*(void *)((char *)&v125 + 6)) {
        nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)((char *)&v125 + 6));
      }
      v189.__r_.__value_.__r.__words[0] = (std::string::size_type)v123;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v189);
      v189.__r_.__value_.__r.__words[0] = (std::string::size_type)&v119;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v189);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v113.__r_.__value_.__l.__data_);
      }
      if (is_valid_for_engine)
      {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)is_valid_for_engine);
        uint64_t is_valid_for_engine = 0;
      }
      goto LABEL_102;
    }
    uint64_t is_valid_for_engine = 1;
LABEL_102:
    if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v190.__r_.__value_.__l.__data_);
    }
LABEL_104:
    if (v142 < 0) {
      operator delete(v141[0]);
    }
    goto LABEL_106;
  }
  uint64_t is_valid_for_engine = *((void *)a2 + 1);
  v160[0] = *(int64x2_t **)a2;
  v160[1] = (int64x2_t *)is_valid_for_engine;
  if (is_valid_for_engine) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(is_valid_for_engine + 8), 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(&v113, "Expected single bottom tensor and non-zero top tensor");
  Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)&v113, (uint64_t)a3, 0);
  Espresso::emit_kernel_validation_warning(v160, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
  if (*(void *)((char *)&v125 + 6)) {
    nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)((char *)&v125 + 6));
  }
  v154 = v123;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v154);
  v154 = &v119;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v154);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v113.__r_.__value_.__l.__data_);
  }
  if (is_valid_for_engine)
  {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)is_valid_for_engine);
    uint64_t is_valid_for_engine = 0;
  }
LABEL_106:

  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  return is_valid_for_engine;
}

void sub_1920E8874(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  if (SLOBYTE(STACK[0x297]) < 0) {
    operator delete((void *)STACK[0x280]);
  }
  if (SLOBYTE(STACK[0x2AF]) < 0) {
    operator delete((void *)STACK[0x298]);
  }
  if (SLOBYTE(STACK[0x2C7]) < 0) {
    operator delete((void *)STACK[0x2B0]);
  }
  if (SLOBYTE(STACK[0x2DF]) < 0) {
    operator delete((void *)STACK[0x2C8]);
  }
  if (SLOBYTE(STACK[0x2F7]) < 0) {
    operator delete((void *)STACK[0x2E0]);
  }
  if (SLOBYTE(STACK[0x30F]) < 0) {
    operator delete((void *)STACK[0x2F8]);
  }
  if (SLOBYTE(STACK[0x327]) < 0) {
    operator delete((void *)STACK[0x310]);
  }
  if (SLOBYTE(STACK[0x33F]) < 0) {
    operator delete((void *)STACK[0x328]);
  }
  if (SLOBYTE(STACK[0x357]) < 0) {
    operator delete((void *)STACK[0x340]);
  }
  if (SLOBYTE(STACK[0x36F]) < 0) {
    operator delete((void *)STACK[0x358]);
  }
  if (*(char *)(v44 - 233) < 0) {
    operator delete(*(void **)(v44 - 256));
  }
  if (*(char *)(v44 - 209) < 0) {
    operator delete(*(void **)(v44 - 232));
  }
  if (*(char *)(v44 - 185) < 0) {
    operator delete(*(void **)(v44 - 208));
  }
  if (*(char *)(v44 - 161) < 0) {
    operator delete(*(void **)(v44 - 184));
  }
  if (*(char *)(v44 - 137) < 0) {
    operator delete(*(void **)(v44 - 160));
  }
  if (*(char *)(v44 - 105) < 0) {
    operator delete(*(void **)(v44 - 128));
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  if (a41 < 0) {
    operator delete(a36);
  }

  if (v41) {
    nitro::nitro_function::nitro_function(v41);
  }
  _Unwind_Resume(a1);
}

void sub_1920E8CA8()
{
  if (!v0) {
    JUMPOUT(0x1920E8CA0);
  }
  JUMPOUT(0x1920E8C98);
}

BOOL Espresso::ANECompilerEngine::dev_op_kernel::is_valid_for_engine(uint64_t a1)
{
  return *(_DWORD *)(a1 + 280) >> 1 == 5003;
}

uint64_t Espresso::ANECompilerEngine::split_kernel::is_valid_for_engine(uint64_t a1, int64x2_t **a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(**(void **)(a3 + 48) + 224 * *(void *)(a3 + 72) + 144)
     - *(void *)(**(void **)(a3 + 48) + 224 * *(void *)(a3 + 72) + 136);
  if (v5 != 24)
  {
    std::string::size_type v8 = a2[1];
    v81[0] = *a2;
    v81[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit(&v8->i64[1], 1uLL, memory_order_relaxed);
    }
    std::to_string(&v74, 0xAAAAAAAAAAAAAAABLL * (v5 >> 3));
    uint64_t v12 = std::string::insert(&v74, 0, "[Unsupported Split] n_inputs: ");
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v75.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v75.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    uint64_t v14 = std::string::append(&v75, " != 1");
    std::string __p = *v14;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v77, (long long *)&__p, a3, 0);
    Espresso::emit_kernel_validation_warning(v81, (Espresso::base_kernel::validate_for_engine_warning_t *)&v77);
    goto LABEL_9;
  }
  int v7 = *(_DWORD *)(a1 + 296);
  if (v7)
  {
    std::string::size_type v8 = a2[1];
    v73[0] = *a2;
    v73[1] = v8;
    if (v8)
    {
      atomic_fetch_add_explicit(&v8->i64[1], 1uLL, memory_order_relaxed);
      int v7 = *(_DWORD *)(a1 + 296);
    }
    std::to_string(&v74, v7);
    uint64_t v9 = std::string::insert(&v74, 0, "[Unsupported Split] legacy_cut_mode: ");
    long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v75.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v75.__r_.__value_.__l.__data_ = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    uint64_t v11 = std::string::append(&v75, " != 0");
    std::string __p = *v11;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v77, (long long *)&__p, a3, 0);
    Espresso::emit_kernel_validation_warning(v73, (Espresso::base_kernel::validate_for_engine_warning_t *)&v77);
    goto LABEL_9;
  }
  if (*(unsigned char *)(a1 + 288))
  {
    std::string::size_type v8 = a2[1];
    v72[0] = *a2;
    v72[1] = v8;
    if (v8)
    {
      atomic_fetch_add_explicit(&v8->i64[1], 1uLL, memory_order_relaxed);
      int v17 = *(unsigned __int8 *)(a1 + 288);
    }
    else
    {
      int v17 = 1;
    }
    std::to_string(&v74, v17);
    int v30 = std::string::insert(&v74, 0, "[Unsupported Split] nd_mode: ");
    long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    v75.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v75.__r_.__value_.__l.__data_ = v31;
    v30->__r_.__value_.__l.__size_ = 0;
    v30->__r_.__value_.__r.__words[2] = 0;
    v30->__r_.__value_.__r.__words[0] = 0;
    long long v32 = std::string::append(&v75, " != true");
    std::string __p = *v32;
    v32->__r_.__value_.__l.__size_ = 0;
    v32->__r_.__value_.__r.__words[2] = 0;
    v32->__r_.__value_.__r.__words[0] = 0;
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v77, (long long *)&__p, a3, 0);
    Espresso::emit_kernel_validation_warning(v72, (Espresso::base_kernel::validate_for_engine_warning_t *)&v77);
LABEL_9:
    if (v80) {
      nitro::nitro_function::nitro_function(v80);
    }
    v68.__r_.__value_.__r.__words[0] = (std::string::size_type)v79;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v68);
    v68.__r_.__value_.__r.__words[0] = (std::string::size_type)v78;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v68);
    if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v77.__r_.__value_.__l.__data_);
    }
LABEL_13:
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v75.__r_.__value_.__l.__data_);
    }
    if ((SHIBYTE(v74.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_20;
    }
    int v15 = (void *)v74.__r_.__value_.__r.__words[0];
    goto LABEL_19;
  }
  int v18 = *(_DWORD *)(a1 + 284);
  if (v18 != 2)
  {
    std::string::size_type v8 = a2[1];
    v71[0] = *a2;
    v71[1] = v8;
    if (v8)
    {
      atomic_fetch_add_explicit(&v8->i64[1], 1uLL, memory_order_relaxed);
      int v18 = *(_DWORD *)(a1 + 284);
    }
    std::to_string(&v74, v18);
    uint64_t v33 = std::string::insert(&v74, 0, "[Unsupported Split] axis: ");
    long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
    v75.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v75.__r_.__value_.__l.__data_ = v34;
    v33->__r_.__value_.__l.__size_ = 0;
    v33->__r_.__value_.__r.__words[2] = 0;
    v33->__r_.__value_.__r.__words[0] = 0;
    int v35 = std::string::append(&v75, " != 2");
    std::string __p = *v35;
    v35->__r_.__value_.__l.__size_ = 0;
    v35->__r_.__value_.__r.__words[2] = 0;
    v35->__r_.__value_.__r.__words[0] = 0;
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v77, (long long *)&__p, a3, 0);
    Espresso::emit_kernel_validation_warning(v71, (Espresso::base_kernel::validate_for_engine_warning_t *)&v77);
    goto LABEL_9;
  }
  uint64_t v19 = *(const Espresso::layer_shape **)a3;
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v77, *(const Espresso::layer_shape **)a3, 0);
  unint64_t v20 = SHIDWORD(v77.__r_.__value_.__r.__words[2]);
  if (HIDWORD(v77.__r_.__value_.__r.__words[2]) <= 2)
  {
    char v36 = *a2;
    std::string::size_type v8 = a2[1];
    v70[0] = v36;
    v70[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit(&v8->i64[1], 1uLL, memory_order_relaxed);
    }
    std::to_string(&v74, v20);
    int v37 = std::string::insert(&v74, 0, "[Unsupported Split] rank: ");
    long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
    v75.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v75.__r_.__value_.__l.__data_ = v38;
    v37->__r_.__value_.__l.__size_ = 0;
    v37->__r_.__value_.__r.__words[2] = 0;
    v37->__r_.__value_.__r.__words[0] = 0;
    uint64_t v39 = std::string::append(&v75, " < 3");
    std::string __p = *v39;
    v39->__r_.__value_.__l.__size_ = 0;
    v39->__r_.__value_.__r.__words[2] = 0;
    v39->__r_.__value_.__r.__words[0] = 0;
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v77, (long long *)&__p, a3, 0);
    Espresso::emit_kernel_validation_warning(v70, (Espresso::base_kernel::validate_for_engine_warning_t *)&v77);
    Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((Espresso::base_kernel::validate_for_engine_warning_t *)&v77);
    goto LABEL_13;
  }
  int v21 = *((_DWORD *)v19 + 2);
  if (v21 > 0x10000)
  {
    uint64_t v22 = *a2;
    std::string::size_type v8 = a2[1];
    v69[0] = v22;
    v69[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit(&v8->i64[1], 1uLL, memory_order_relaxed);
    }
    std::to_string(&v68, v21);
    int32x4_t v23 = std::string::insert(&v68, 0, "[Unsupported Split] input_channel_count: ");
    long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    v74.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v74.__r_.__value_.__l.__data_ = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    uint64_t v25 = std::string::append(&v74, " > ");
    long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    v75.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v75.__r_.__value_.__l.__data_ = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v67, 0x10000);
    if ((v67.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v27 = &v67;
    }
    else {
      uint64_t v27 = (std::string *)v67.__r_.__value_.__r.__words[0];
    }
    if ((v67.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v67.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v67.__r_.__value_.__l.__size_;
    }
    char v29 = std::string::append(&v75, (const std::string::value_type *)v27, size);
    std::string __p = *v29;
    v29->__r_.__value_.__l.__size_ = 0;
    v29->__r_.__value_.__r.__words[2] = 0;
    v29->__r_.__value_.__r.__words[0] = 0;
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v77, (long long *)&__p, a3, 0);
    Espresso::emit_kernel_validation_warning(v69, (Espresso::base_kernel::validate_for_engine_warning_t *)&v77);
    Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((Espresso::base_kernel::validate_for_engine_warning_t *)&v77);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v67.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v75.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v74.__r_.__value_.__l.__data_);
    }
    if ((SHIBYTE(v68.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_20;
    }
    int v15 = (void *)v68.__r_.__value_.__r.__words[0];
LABEL_19:
    operator delete(v15);
    goto LABEL_20;
  }
  int v40 = *(const Espresso::layer_shape **)(a3 + 24);
  int v41 = *(const Espresso::layer_shape **)(a3 + 32);
  if (v40 == v41) {
    return 1;
  }
  uint64_t v42 = (void **)(a1 + 552);
  int v43 = v21 / *(_DWORD *)(a1 + 280);
  while (1)
  {
    Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v77, v40, 0);
    unint64_t v44 = HIDWORD(v77.__r_.__value_.__r.__words[2]);
    if (HIDWORD(v77.__r_.__value_.__r.__words[2]) <= 2)
    {
      uint64_t v59 = *a2;
      std::string::size_type v8 = a2[1];
      v66[0] = v59;
      v66[1] = v8;
      if (v8) {
        atomic_fetch_add_explicit(&v8->i64[1], 1uLL, memory_order_relaxed);
      }
      std::to_string(&v74, v44);
      uint64_t v60 = std::string::insert(&v74, 0, "[Unsupported Split] rank: ");
      long long v61 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
      v75.__r_.__value_.__r.__words[2] = v60->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v75.__r_.__value_.__l.__data_ = v61;
      v60->__r_.__value_.__l.__size_ = 0;
      v60->__r_.__value_.__r.__words[2] = 0;
      v60->__r_.__value_.__r.__words[0] = 0;
      int v62 = std::string::append(&v75, " < 3");
      std::string __p = *v62;
      v62->__r_.__value_.__l.__size_ = 0;
      v62->__r_.__value_.__r.__words[2] = 0;
      v62->__r_.__value_.__r.__words[0] = 0;
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v77, (long long *)&__p, a3, 0);
      Espresso::emit_kernel_validation_warning(v66, (Espresso::base_kernel::validate_for_engine_warning_t *)&v77);
      goto LABEL_9;
    }
    int v45 = *((_DWORD *)v40 + 2);
    if (v45 != v43 && v45 != v21) {
      break;
    }
    long long v47 = *(int **)(a1 + 560);
    unint64_t v48 = *(void *)(a1 + 568);
    if ((unint64_t)v47 >= v48)
    {
      uint64_t v50 = (int *)*v42;
      uint64_t v51 = ((char *)v47 - (unsigned char *)*v42) >> 2;
      unint64_t v52 = v51 + 1;
      if ((unint64_t)(v51 + 1) >> 62) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v53 = v48 - (void)v50;
      if (v53 >> 1 > v52) {
        unint64_t v52 = v53 >> 1;
      }
      BOOL v54 = (unint64_t)v53 >= 0x7FFFFFFFFFFFFFFCLL;
      unint64_t v55 = 0x3FFFFFFFFFFFFFFFLL;
      if (!v54) {
        unint64_t v55 = v52;
      }
      if (v55)
      {
        unint64_t v55 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v55);
        long long v47 = *(int **)(a1 + 560);
        uint64_t v50 = *(int **)(a1 + 552);
      }
      else
      {
        uint64_t v56 = 0;
      }
      long long v57 = (int *)(v55 + 4 * v51);
      int *v57 = v45;
      uint64_t v49 = v57 + 1;
      while (v47 != v50)
      {
        int v58 = *--v47;
        *--long long v57 = v58;
      }
      *(void *)(a1 + 552) = v57;
      *(void *)(a1 + 560) = v49;
      *(void *)(a1 + 568) = v55 + 4 * v56;
      if (v50) {
        operator delete(v50);
      }
    }
    else
    {
      int *v47 = v45;
      uint64_t v49 = v47 + 1;
    }
    *(void *)(a1 + 560) = v49;
    v21 -= v43;
    int v40 = (const Espresso::layer_shape *)((char *)v40 + 64);
    uint64_t result = 1;
    if (v40 == v41) {
      return result;
    }
  }
  uint64_t v63 = *a2;
  std::string::size_type v8 = a2[1];
  v65[0] = v63;
  v65[1] = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->i64[1], 1uLL, memory_order_relaxed);
  }
  std::to_string(&v75, v45);
  uint64_t v64 = std::string::insert(&v75, 0, "[Unsupported Split] Invalid output_channel_count: ");
  std::string __p = *v64;
  v64->__r_.__value_.__l.__size_ = 0;
  v64->__r_.__value_.__r.__words[2] = 0;
  v64->__r_.__value_.__r.__words[0] = 0;
  Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v77, (long long *)&__p, a3, 0);
  Espresso::emit_kernel_validation_warning(v65, (Espresso::base_kernel::validate_for_engine_warning_t *)&v77);
  if (v80) {
    nitro::nitro_function::nitro_function(v80);
  }
  v74.__r_.__value_.__r.__words[0] = (std::string::size_type)v79;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v74);
  v74.__r_.__value_.__r.__words[0] = (std::string::size_type)v78;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v74);
  if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v77.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
  {
    int v15 = (void *)v75.__r_.__value_.__r.__words[0];
    goto LABEL_19;
  }
LABEL_20:
  if (v8) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v8);
  }
  return 0;
}

void sub_1920E94F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *__p,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((Espresso::base_kernel::validate_for_engine_warning_t *)(v55 - 216));
  if (a54 < 0) {
    operator delete(__p);
  }
  if (a47 < 0) {
    operator delete(a42);
  }
  if (v54) {
    nitro::nitro_function::nitro_function(v54);
  }
  _Unwind_Resume(a1);
}

uint64_t Espresso::ANECompilerEngine::mix_non_maximum_suppression_kernel::is_valid_for_engine(uint64_t a1, int64x2_t **a2, Espresso::ANECompilerEngine *a3)
{
  uint64_t v216 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *((void *)a3 + 6);
  int v7 = *(std::__shared_weak_count **)(v6 + 80);
  if (v7 && (long long v129 = std::__shared_weak_count::lock(v7)) != 0)
  {
    std::string::size_type v8 = *(const Espresso::net **)(v6 + 72);
  }
  else
  {
    long long v129 = 0;
    std::string::size_type v8 = 0;
  }
  Espresso::ANECompilerEngine::ane_arch_allow_network_override((uint64_t)v8 + 472);
  uint64_t v9 = (Espresso::ANECompilerEngine *)objc_claimAutoreleasedReturnValue();
  if (Espresso::ANECompilerEngine::is_mix(v9, v10))
  {
    uint64_t v11 = *a2;
    uint64_t v12 = a2[1];
    v208[0] = v11;
    v208[1] = v12;
    if (v12) {
      atomic_fetch_add_explicit(&v12->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "NonMaximumSuppression kernel does not support on requested architecture.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t((std::string *)v210, (long long *)__p, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v208, (Espresso::base_kernel::validate_for_engine_warning_t *)v210);
LABEL_31:
    if ((void)v213) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v213);
    }
    v158.n128_u64[0] = (unint64_t)&v211;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v158);
    v158.n128_u64[0] = (unint64_t)&v210[24];
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v158);
    if ((v210[23] & 0x80000000) != 0) {
      operator delete(*(void **)v210);
    }
    goto LABEL_35;
  }
  uint64_t v13 = *(void *)a3;
  uint64_t v14 = *((void *)a3 + 1);
  if (((uint64_t)(*(void *)(a1 + 320) - *(void *)(a1 + 312)) >> 2) + 2 < (unint64_t)((v14 - *(void *)a3) >> 6))
  {
    int v15 = *a2;
    uint64_t v12 = a2[1];
    v207[0] = v15;
    v207[1] = v12;
    if (v12) {
      atomic_fetch_add_explicit(&v12->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "NonMaximumSuppression kernel does not support dynamic iou_threshold, score_threshold, or max_boxes on ANE.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t((std::string *)v210, (long long *)__p, (uint64_t)a3, 1);
    Espresso::emit_kernel_validation_warning(v207, (Espresso::base_kernel::validate_for_engine_warning_t *)v210);
    goto LABEL_31;
  }
  if (*(int *)(v13 + 4) >= 2049 && !*(unsigned char *)(a1 + 306))
  {
    uint64_t v19 = *a2;
    uint64_t v12 = a2[1];
    v206[0] = v19;
    v206[1] = v12;
    if (v12) {
      atomic_fetch_add_explicit(&v12->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "NonMaximumSuppression kernel cannot currently run on ANE with more than 2048 input boxes without p.no_indices.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t((std::string *)v210, (long long *)__p, (uint64_t)a3, 1);
    Espresso::emit_kernel_validation_warning(v206, (Espresso::base_kernel::validate_for_engine_warning_t *)v210);
    goto LABEL_31;
  }
  float v16 = *(float *)(a1 + 284);
  if (v16 < 0.0 || v16 > 1.0)
  {
LABEL_39:
    uint64_t v21 = 0;
    goto LABEL_40;
  }
  if (*(float *)(a1 + 288) != 0.0)
  {
    int v18 = *a2;
    uint64_t v12 = a2[1];
    v205[0] = v18;
    v205[1] = v12;
    if (v12) {
      atomic_fetch_add_explicit(&v12->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "NonMaximumSuppression kernel does not support score_threshold on ANE.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t((std::string *)v210, (long long *)__p, (uint64_t)a3, 1);
    Espresso::emit_kernel_validation_warning(v205, (Espresso::base_kernel::validate_for_engine_warning_t *)v210);
    goto LABEL_31;
  }
  if (*(int *)(a1 + 296) >= 1)
  {
    unint64_t v20 = *a2;
    uint64_t v12 = a2[1];
    v204[0] = v20;
    v204[1] = v12;
    if (v12) {
      atomic_fetch_add_explicit(&v12->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "NonMaximumSuppression kernel does not filter boxes pre-scoring on ANE.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t((std::string *)v210, (long long *)__p, (uint64_t)a3, 1);
    Espresso::emit_kernel_validation_warning(v204, (Espresso::base_kernel::validate_for_engine_warning_t *)v210);
    goto LABEL_31;
  }
  if (!*(unsigned char *)(a1 + 305))
  {
    int v104 = *a2;
    uint64_t v12 = a2[1];
    v203[0] = v104;
    v203[1] = v12;
    if (v12) {
      atomic_fetch_add_explicit(&v12->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "NonMaximumSuppression kernel on ANE does not support the count output. Set no_count=true to run NMS on ANE.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t((std::string *)v210, (long long *)__p, (uint64_t)a3, 1);
    Espresso::emit_kernel_validation_warning(v203, (Espresso::base_kernel::validate_for_engine_warning_t *)v210);
    goto LABEL_214;
  }
  if (*(unsigned char *)(a1 + 292) && !*(unsigned char *)(a1 + 304))
  {
    int v107 = *a2;
    uint64_t v12 = a2[1];
    v202[0] = v107;
    v202[1] = v12;
    if (v12) {
      atomic_fetch_add_explicit(&v12->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "NonMaximumSuppression kernel on ANE does not support the scores output when per_class_suppression is true. Set no_scores to true.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t((std::string *)v210, (long long *)__p, (uint64_t)a3, 1);
    Espresso::emit_kernel_validation_warning(v202, (Espresso::base_kernel::validate_for_engine_warning_t *)v210);
LABEL_214:
    Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((Espresso::base_kernel::validate_for_engine_warning_t *)v210);
LABEL_35:
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    if (v12) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v12);
    }
    goto LABEL_39;
  }
  int v128 = v9;
  v200 = 0;
  v199 = 0;
  unint64_t v201 = 0;
  if (v14 != v13)
  {
    int32x4_t v23 = 0;
    unint64_t v24 = 0;
    uint64_t v25 = 0;
    unint64_t v26 = 0;
    do
    {
      if (v129)
      {
        atomic_fetch_add_explicit(&v129->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v13 = *(void *)a3;
      }
      uint64_t v27 = (long long *)(v13 + (v26 << 6));
      long long v28 = *v27;
      long long v29 = v27[1];
      uint64_t v195 = *((void *)v27 + 4);
      v194[1] = v29;
      v194[0] = v28;
      int v197 = 0;
      uint64_t v198 = 0;
      v196 = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v196, *((const void **)v27 + 5), *((void *)v27 + 6), (uint64_t)(*((void *)v27 + 6) - *((void *)v27 + 5)) >> 2);
      Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v210, v8, (const Espresso::layer_shape *)v194, 1);
      if ((unint64_t)v25 >= v24)
      {
        uint64_t v31 = (v25 - v23) >> 5;
        unint64_t v32 = v31 + 1;
        if ((unint64_t)(v31 + 1) >> 59) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        if ((uint64_t)(v24 - (void)v23) >> 4 > v32) {
          unint64_t v32 = (uint64_t)(v24 - (void)v23) >> 4;
        }
        if (v24 - (unint64_t)v23 >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v33 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v33 = v32;
        }
        if (v33) {
          unint64_t v33 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::blob_container::ane_blob_mapped_shape>>(v33);
        }
        else {
          uint64_t v34 = 0;
        }
        int v35 = (_OWORD *)(v33 + 32 * v31);
        *int v35 = *(_OWORD *)v210;
        v35[1] = *(_OWORD *)&v210[16];
        if (v25 == v23)
        {
          long long v38 = (void *)(v33 + 32 * v31);
        }
        else
        {
          unint64_t v36 = v33 + 32 * v31;
          do
          {
            long long v37 = *((_OWORD *)v25 - 1);
            long long v38 = (void *)(v36 - 32);
            *(_OWORD *)(v36 - 32) = *((_OWORD *)v25 - 2);
            *(_OWORD *)(v36 - 16) = v37;
            v25 -= 32;
            v36 -= 32;
          }
          while (v25 != v23);
        }
        unint64_t v24 = v33 + 32 * v34;
        uint64_t v25 = (char *)(v35 + 2);
        v199 = v38;
        v200 = (char *)(v35 + 2);
        unint64_t v201 = v24;
        if (v23) {
          operator delete(v23);
        }
        int32x4_t v23 = (char *)v38;
      }
      else
      {
        long long v30 = *(_OWORD *)&v210[16];
        *(_OWORD *)uint64_t v25 = *(_OWORD *)v210;
        *((_OWORD *)v25 + 1) = v30;
        v25 += 32;
      }
      v200 = v25;
      if (v196)
      {
        int v197 = v196;
        operator delete(v196);
      }
      if (v129) {
        nitro::nitro_function::nitro_function(v129);
      }
      ++v26;
      uint64_t v13 = *(void *)a3;
    }
    while (v26 < (uint64_t)(*((void *)a3 + 1) - *(void *)a3) >> 6);
  }
  int v192 = 0;
  v191 = 0;
  unint64_t v193 = 0;
  uint64_t v39 = *((void *)a3 + 3);
  if (*((void *)a3 + 4) != v39)
  {
    int v40 = 0;
    unint64_t v41 = 0;
    uint64_t v42 = 0;
    unint64_t v43 = 0;
    do
    {
      if (v129)
      {
        atomic_fetch_add_explicit(&v129->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v39 = *((void *)a3 + 3);
      }
      unint64_t v44 = (long long *)(v39 + (v43 << 6));
      long long v45 = *v44;
      long long v46 = v44[1];
      uint64_t v187 = *((void *)v44 + 4);
      v186[1] = v46;
      v186[0] = v45;
      std::string v189 = 0;
      uint64_t v190 = 0;
      std::string v188 = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v188, *((const void **)v44 + 5), *((void *)v44 + 6), (uint64_t)(*((void *)v44 + 6) - *((void *)v44 + 5)) >> 2);
      Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v210, v8, (const Espresso::layer_shape *)v186, 1);
      if ((unint64_t)v42 >= v41)
      {
        uint64_t v48 = (v42 - v40) >> 5;
        unint64_t v49 = v48 + 1;
        if ((unint64_t)(v48 + 1) >> 59) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        if ((uint64_t)(v41 - (void)v40) >> 4 > v49) {
          unint64_t v49 = (uint64_t)(v41 - (void)v40) >> 4;
        }
        if (v41 - (unint64_t)v40 >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v50 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v50 = v49;
        }
        if (v50) {
          unint64_t v50 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::blob_container::ane_blob_mapped_shape>>(v50);
        }
        else {
          uint64_t v51 = 0;
        }
        unint64_t v52 = (_OWORD *)(v50 + 32 * v48);
        *unint64_t v52 = *(_OWORD *)v210;
        v52[1] = *(_OWORD *)&v210[16];
        if (v42 == v40)
        {
          uint64_t v55 = (void *)(v50 + 32 * v48);
        }
        else
        {
          unint64_t v53 = v50 + 32 * v48;
          do
          {
            long long v54 = *((_OWORD *)v42 - 1);
            uint64_t v55 = (void *)(v53 - 32);
            *(_OWORD *)(v53 - 32) = *((_OWORD *)v42 - 2);
            *(_OWORD *)(v53 - 16) = v54;
            v42 -= 32;
            v53 -= 32;
          }
          while (v42 != v40);
        }
        unint64_t v41 = v50 + 32 * v51;
        uint64_t v42 = (char *)(v52 + 2);
        v191 = v55;
        int v192 = (char *)(v52 + 2);
        unint64_t v193 = v41;
        if (v40) {
          operator delete(v40);
        }
        int v40 = (char *)v55;
      }
      else
      {
        long long v47 = *(_OWORD *)&v210[16];
        *(_OWORD *)uint64_t v42 = *(_OWORD *)v210;
        *((_OWORD *)v42 + 1) = v47;
        v42 += 32;
      }
      int v192 = v42;
      if (v188)
      {
        std::string v189 = v188;
        operator delete(v188);
      }
      if (v129) {
        nitro::nitro_function::nitro_function(v129);
      }
      ++v43;
      uint64_t v39 = *((void *)a3 + 3);
    }
    while (v43 < (*((void *)a3 + 4) - v39) >> 6);
  }
  uint64_t v9 = v128;
  Espresso::ANECompilerEngine::mix_non_maximum_suppression_kernel::supported_by_hw((uint64_t)v183, v128, (uint64_t)&v199, (uint64_t)&v191);
  if (!v183[0])
  {
    int v105 = *a2;
    int v106 = a2[1];
    v182[0] = v105;
    v182[1] = v106;
    if (v106) {
      atomic_fetch_add_explicit(&v106->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "NonMaximumSuppression kernel does not fit on ANE.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t((std::string *)v210, (long long *)__p, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v182, (Espresso::base_kernel::validate_for_engine_warning_t *)v210);
    Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((Espresso::base_kernel::validate_for_engine_warning_t *)v210);
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    if (v106) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v106);
    }
    uint64_t v21 = 0;
    goto LABEL_256;
  }
  if (v129) {
    atomic_fetch_add_explicit(&v129->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v56 = *(void *)a3;
  uint64_t v57 = *(void *)(*(void *)a3 + 32);
  long long v58 = *(_OWORD *)(*(void *)a3 + 16);
  v174[0] = *(_OWORD *)*(void *)a3;
  v174[1] = v58;
  uint64_t v175 = v57;
  v176 = 0;
  uint64_t v178 = 0;
  char v177 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v176, *(const void **)(v56 + 40), *(void *)(v56 + 48), (uint64_t)(*(void *)(v56 + 48) - *(void *)(v56 + 40)) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v179, v8, (const Espresso::layer_shape *)v174, 1);
  if (v176)
  {
    char v177 = v176;
    operator delete(v176);
  }
  if (v129)
  {
    nitro::nitro_function::nitro_function(v129);
    atomic_fetch_add_explicit(&v129->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v59 = *(void **)a3;
  long long v60 = *(_OWORD *)(*(void *)a3 + 80);
  v166[0] = *(_OWORD *)(*(void *)a3 + 64);
  v166[1] = v60;
  long long v61 = (const void *)v59[13];
  uint64_t v167 = v59[12];
  v168 = 0;
  uint64_t v170 = 0;
  char v169 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v168, v61, v59[14], (uint64_t)(v59[14] - (void)v61) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v171, v8, (const Espresso::layer_shape *)v166, 1);
  if (v168)
  {
    char v169 = v168;
    operator delete(v168);
  }
  if (v129) {
    nitro::nitro_function::nitro_function(v129);
  }
  *(void *)uint64_t v210 = @"Boxes";
  std::vector<__CFString const*>::vector[abi:ne180100](&v164, v210, 1uLL);
  if (*(void *)(a1 + 320) != *(void *)(a1 + 312))
  {
    *(void *)uint64_t v210 = @"Indices";
    std::vector<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>>::push_back[abi:ne180100](&v164, v210);
  }
  if (!*(unsigned char *)(a1 + 304))
  {
    *(void *)uint64_t v210 = @"Scores";
    std::vector<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>>::push_back[abi:ne180100](&v164, v210);
  }
  Espresso::ANECompilerEngine::ane_kernel::get_ane_validator((Espresso::ANECompilerEngine::ane_kernel *)&v162, (NSString *)(a1 + 336), v128);
  int v62 = (std::string::size_type *)v164;
  uint64_t v63 = v165;
  if (v164 != v165)
  {
    *(void *)&long long v64 = v180;
    *((void *)&v64 + 1) = v181;
    long long v125 = v64;
    unint64_t v127 = v179[1];
    unint64_t v122 = v179[0];
    uint64_t v123 = v179[2];
    uint64_t v117 = v180;
    unint64_t v118 = v181;
    *(void *)&long long v64 = v172;
    *((void *)&v64 + 1) = v173;
    long long v121 = v64;
    unint64_t v119 = v171[0];
    uint64_t v120 = v171[2];
    uint64_t v115 = v172;
    unint64_t v116 = v173;
    unint64_t v126 = v171[1];
    while (1)
    {
      ANECNMSLayerDescInitialize();
      std::string::size_type v65 = *(int *)(a1 + 280);
      v131.__r_.__value_.__r.__words[0] = *v62;
      v131.__r_.__value_.__l.__size_ = v65;
      LODWORD(v131.__r_.__value_.__r.__words[2]) = *(_DWORD *)(a1 + 284);
      WORD2(v131.__r_.__value_.__r.__words[2]) = *(unsigned __int8 *)(a1 + 292);
      unsigned int v66 = Espresso::ANECompilerEngine::bottom_compute_path(a3, v8, 0);
      if (v66 >= 8 || ((0x97u >> v66) & 1) == 0) {
        break;
      }
      std::string v67 = off_1E57476C8[v66];
      ANECTensorDescInitialize();
      if (*(unsigned char *)(a1 + 307))
      {
        v158.n128_u64[0] = (unint64_t)v67;
        *(_OWORD *)&v159[8] = v125;
        unint64_t v68 = v127;
        unint64_t v70 = v122;
        uint64_t v69 = v123;
      }
      else
      {
        *(void *)&v159[16] = v117;
        *(void *)&v159[8] = 1;
        unint64_t v68 = v118;
        uint64_t v69 = 1;
        unint64_t v70 = v127;
      }
      *(void *)&v159[24] = v69;
      *(void *)int v159 = v68;
      v158.n128_u64[1] = v70;
      unsigned int v71 = Espresso::ANECompilerEngine::bottom_compute_path(a3, v8, (const Espresso::net *)1);
      if (v71 >= 8 || ((0x97u >> v71) & 1) == 0)
      {
        uint64_t v110 = *a2;
        int32x2_t v109 = a2[1];
        v157[0] = v110;
        v157[1] = v109;
        if (v109) {
          atomic_fetch_add_explicit(&v109->i64[1], 1uLL, memory_order_relaxed);
        }
        std::string::basic_string[abi:ne180100]<0>(__p, "Invalid compute path for non maximum suppression");
        Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t((std::string *)v210, (long long *)__p, (uint64_t)a3, 0);
        Espresso::emit_kernel_validation_warning(v157, (Espresso::base_kernel::validate_for_engine_warning_t *)v210);
        Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((Espresso::base_kernel::validate_for_engine_warning_t *)v210);
        goto LABEL_224;
      }
      uint64_t v72 = off_1E57476C8[v71];
      ANECTensorDescInitialize();
      int v73 = *(unsigned __int8 *)(a1 + 307);
      v154.n128_u64[0] = (unint64_t)v72;
      if (v73)
      {
        *(_OWORD *)&v155[8] = v121;
        unint64_t v74 = v126;
        unint64_t v76 = v119;
        uint64_t v75 = v120;
      }
      else
      {
        *(void *)&v155[16] = v115;
        *(void *)&v155[8] = 1;
        unint64_t v74 = v116;
        uint64_t v75 = 1;
        unint64_t v76 = v126;
      }
      *(void *)&v155[24] = v75;
      *(void *)int v155 = v74;
      v154.n128_u64[1] = v76;
      *(__n128 *)uint64_t v210 = v158;
      *(_OWORD *)&v210[16] = *(_OWORD *)v159;
      *(_OWORD *)&v210[32] = *(_OWORD *)&v159[16];
      long long v211 = v160;
      __n128 v212 = v154;
      long long v213 = *(_OWORD *)v155;
      long long v214 = *(_OWORD *)&v155[16];
      long long v215 = v156;
      v209 = 0;
      uint64_t v153 = 0;
      int v77 = ANECValidateNMSLayer();
      if (v77)
      {
        long long v111 = a2[1];
        v152[0] = *a2;
        v152[1] = v111;
        if (v111) {
          atomic_fetch_add_explicit(&v111->i64[1], 1uLL, memory_order_relaxed);
        }
        std::to_string((std::string *)&v146, v77);
        unint64_t v112 = std::string::insert((std::string *)&v146, 0, "mix_non_maximum_suppression_kernel: ANECValidateNMSLayer failed with status ");
        v139[0] = *v112;
        v112->__r_.__value_.__l.__size_ = 0;
        v112->__r_.__value_.__r.__words[2] = 0;
        v112->__r_.__value_.__r.__words[0] = 0;
        Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t((std::string *)__p, (long long *)v139, (uint64_t)a3, 0);
        Espresso::emit_kernel_validation_warning(v152, (Espresso::base_kernel::validate_for_engine_warning_t *)__p);
        Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((Espresso::base_kernel::validate_for_engine_warning_t *)__p);
        if (SHIBYTE(v139[0].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v139[0].__r_.__value_.__l.__data_);
        }
        if (SBYTE7(v147) < 0) {
          operator delete((void *)v146);
        }
        if (v111) {
          nitro::nitro_function::nitro_function((std::__shared_weak_count *)v111);
        }
        Espresso::ANECompilerEngine::violations_from_alternates<ANECNMSLayerDescAlternate>((uint64_t)v139, v153, (uint64_t)v209);
        std::string v113 = (uint64_t **)v139[0].__r_.__value_.__r.__words[2];
        if (v139[0].__r_.__value_.__r.__words[2])
        {
          do
          {
            uint64_t v114 = a2[1];
            v148[0] = *a2;
            v148[1] = v114;
            if (v114) {
              atomic_fetch_add_explicit(&v114->i64[1], 1uLL, memory_order_relaxed);
            }
            std::string::basic_string[abi:ne180100]<0>(&v146, (char *)[v113[2] UTF8String]);
            Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t((std::string *)__p, &v146, (uint64_t)a3, 0);
            Espresso::emit_kernel_validation_warning(v148, (Espresso::base_kernel::validate_for_engine_warning_t *)__p);
            if (v151) {
              nitro::nitro_function::nitro_function(v151);
            }
            v133.__r_.__value_.__r.__words[0] = (std::string::size_type)v150;
            std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v133);
            v133.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p[24];
            std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v133);
            if ((__p[23] & 0x80000000) != 0) {
              operator delete(*(void **)__p);
            }
            if (SBYTE7(v147) < 0) {
              operator delete((void *)v146);
            }
            if (v114) {
              nitro::nitro_function::nitro_function((std::__shared_weak_count *)v114);
            }
            std::string v113 = (uint64_t **)*v113;
          }
          while (v113);
        }
        std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)v139);
        uint64_t v21 = 0;
LABEL_251:
        uint64_t v9 = v128;
        goto LABEL_252;
      }
      if (++v62 == v63) {
        goto LABEL_131;
      }
    }
    int v108 = *a2;
    int32x2_t v109 = a2[1];
    v161[0] = v108;
    v161[1] = v109;
    if (v109) {
      atomic_fetch_add_explicit(&v109->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "Invalid compute path for non maximum suppression");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t((std::string *)v210, (long long *)__p, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v161, (Espresso::base_kernel::validate_for_engine_warning_t *)v210);
    if ((void)v213) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v213);
    }
    v158.n128_u64[0] = (unint64_t)&v211;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v158);
    v158.n128_u64[0] = (unint64_t)&v210[24];
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v158);
    if ((v210[23] & 0x80000000) != 0) {
      operator delete(*(void **)v210);
    }
LABEL_224:
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    if (v109) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v109);
    }
LABEL_228:
    uint64_t v21 = 0;
    goto LABEL_252;
  }
LABEL_131:
  uint64_t v78 = 12;
  if (!*(unsigned char *)(a1 + 307)) {
    uint64_t v78 = 8;
  }
  unint64_t v79 = *(int *)(*(void *)a3 + v78);
  ANECTensorDescInitialize();
  if (*(int *)(*(void *)a3 + 4 * (*(unsigned char *)(a1 + 307) == 0)) <= 2048) {
    uint64_t v80 = @"Float16";
  }
  else {
    uint64_t v80 = @"UInt16";
  }
  uint64_t v81 = *(int *)(a1 + 280);
  uint64_t v21 = 1;
  *(int64x2_t *)int v159 = vdupq_n_s64(1uLL);
  *(void *)&v159[16] = v81;
  *(void *)&v159[24] = 1;
  v158.n128_u64[0] = (unint64_t)v80;
  v158.n128_u64[1] = v79;
  if (*(void *)(a1 + 320) != *(void *)(a1 + 312))
  {
    unint64_t v82 = 0;
    while (1)
    {
      if (v129) {
        atomic_fetch_add_explicit(&v129->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      unint64_t v83 = *(void *)a3 + (v82 << 6);
      uint64_t v84 = *(void *)(v83 + 160);
      long long v85 = *(_OWORD *)(v83 + 144);
      v141[0] = *(_OWORD *)(v83 + 128);
      v141[1] = v85;
      uint64_t v142 = v84;
      uint64_t v144 = 0;
      uint64_t v145 = 0;
      uint64_t v143 = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v143, *(const void **)(v83 + 168), *(void *)(v83 + 176), (uint64_t)(*(void *)(v83 + 176) - *(void *)(v83 + 168)) >> 2);
      Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)&v146, v8, (const Espresso::layer_shape *)v141, 1);
      if (v143)
      {
        uint64_t v144 = v143;
        operator delete(v143);
      }
      if (v129) {
        nitro::nitro_function::nitro_function(v129);
      }
      if (!Espresso::ANECompilerEngine::blob_shape_ane_compatible(&v146, v9)) {
        goto LABEL_228;
      }
      uint64_t v86 = *(void *)(a1 + 312);
      if (v82 >= (*(void *)(a1 + 320) - v86) >> 2) {
        std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
      }
      unsigned int v87 = Espresso::ANECompilerEngine::bottom_compute_path(a3, v8, (const Espresso::net *)1);
      if (v87 >= 8 || ((0x97u >> v87) & 1) == 0) {
        break;
      }
      uint64_t v90 = off_1E57476C8[v87];
      ANECGatherLayerDescInitialize();
      v139[0].__r_.__value_.__r.__words[0] = 1;
      v139[0].__r_.__value_.__l.__size_ = (std::string::size_type)@"Width";
      uint64_t v153 = 0;
      uint64_t v138 = 0;
      ANECTensorDescInitialize();
      ANECTensorDescInitialize();
      *(void *)&long long v91 = SHIDWORD(v146);
      *((void *)&v91 + 1) = (int)v147;
      *(_OWORD *)&v210[24] = v91;
      uint64_t v124 = (uint64_t)v90;
      *(void *)uint64_t v210 = v90;
      *(void *)&v210[40] = SDWORD2(v146);
      *(void *)&long long v91 = (int)v146;
      *((void *)&v91 + 1) = SDWORD1(v146);
      *(_OWORD *)&v210[8] = v91;
      int v92 = (uint64_t *)v154.n128_u64[1];
      int v93 = (uint64_t *)v154.n128_u64[0];
      int64_t v94 = v154.n128_u64[1] - v154.n128_u64[0];
      if (v154.n128_u64[1] == v154.n128_u64[0]) {
        goto LABEL_169;
      }
      Espresso::ANECompilerEngine::validate_transpose((uint64_t)__p, (uint64_t)&v162, (uint64_t)&v146, v124, (unsigned int **)&v154);
      int v95 = __p[0];
      if ((__p[31] & 0x80000000) != 0) {
        operator delete(*(void **)&__p[8]);
      }
      if (!v95) {
        goto LABEL_191;
      }
      int v135 = 0;
      __int16 v136 = 0;
      uint64_t v137 = 0;
      std::vector<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>>::__init_with_size[abi:ne180100]<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>*,std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>*>((char *)&v135, v93, v92, v94 >> 3);
      int v96 = v135;
      uint64_t v9 = v128;
      if (v96)
      {
        __int16 v136 = v96;
        operator delete(v96);
      }
      int32x4_t v97 = vuzp1q_s32(*(int32x4_t *)&v210[16], *(int32x4_t *)&v210[32]);
      *(int32x4_t *)&__p[4] = vzip1q_s32(v97, (int32x4_t)vextq_s8((int8x16_t)v97, (int8x16_t)vdupq_laneq_s32(v97, 2), 0xCuLL));
      *(void *)&__p[20] = 0x500000001;
      *(_DWORD *)std::string __p = *(_DWORD *)&v210[8];
      *(_DWORD *)&__p[28] = 1;
      if (Espresso::ANECompilerEngine::blob_shape_ane_compatible(__p, v128))
      {
LABEL_169:
        __n128 v212 = v158;
        long long v213 = *(_OWORD *)v159;
        long long v214 = *(_OWORD *)&v159[16];
        long long v215 = v160;
        int v98 = ANECValidateGatherLayer();
        if (v98)
        {
          unsigned int v99 = a2[1];
          v134[0] = *a2;
          v134[1] = v99;
          if (v99) {
            atomic_fetch_add_explicit(&v99->i64[1], 1uLL, memory_order_relaxed);
          }
          std::to_string(&v133, v98);
          BOOL v100 = std::string::insert(&v133, 0, "nms_kernel: ANECValidateGatherLayer failed with status ");
          std::string v131 = *v100;
          v100->__r_.__value_.__l.__size_ = 0;
          v100->__r_.__value_.__r.__words[2] = 0;
          v100->__r_.__value_.__r.__words[0] = 0;
          Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t((std::string *)__p, (long long *)&v131, (uint64_t)a3, 0);
          Espresso::emit_kernel_validation_warning(v134, (Espresso::base_kernel::validate_for_engine_warning_t *)__p);
          Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((Espresso::base_kernel::validate_for_engine_warning_t *)__p);
          if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v131.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v133.__r_.__value_.__l.__data_);
          }
          if (v99) {
            nitro::nitro_function::nitro_function((std::__shared_weak_count *)v99);
          }
          Espresso::ANECompilerEngine::violations_from_alternates<ANECGatherLayerDescAlternate>((uint64_t)&v131, v153, v138);
          BOOL v101 = (uint64_t **)v131.__r_.__value_.__r.__words[2];
          if (v131.__r_.__value_.__r.__words[2])
          {
            do
            {
              BOOL v102 = a2[1];
              v130[0] = *a2;
              v130[1] = v102;
              if (v102) {
                atomic_fetch_add_explicit(&v102->i64[1], 1uLL, memory_order_relaxed);
              }
              std::string::basic_string[abi:ne180100]<0>(&v133, (char *)[v101[2] UTF8String]);
              Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t((std::string *)__p, (long long *)&v133, (uint64_t)a3, 0);
              Espresso::emit_kernel_validation_warning(v130, (Espresso::base_kernel::validate_for_engine_warning_t *)__p);
              if (v151) {
                nitro::nitro_function::nitro_function(v151);
              }
              v209 = (void **)v150;
              std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v209);
              v209 = (void **)&__p[24];
              std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v209);
              if ((__p[23] & 0x80000000) != 0) {
                operator delete(*(void **)__p);
              }
              if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v133.__r_.__value_.__l.__data_);
              }
              if (v102) {
                nitro::nitro_function::nitro_function((std::__shared_weak_count *)v102);
              }
              BOOL v101 = (uint64_t **)*v101;
            }
            while (v101);
          }
          std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&v131);
          goto LABEL_154;
        }
        if (*(void *)&v155[16] == *(void *)&v155[8])
        {
          int v89 = 0;
        }
        else
        {
          *(_OWORD *)std::string __p = v146;
          *(_OWORD *)&__p[16] = v147;
          *(_DWORD *)&__p[16] = *(_DWORD *)(a1 + 280);
          if (!Espresso::ANECompilerEngine::blob_shape_ane_compatible(__p, v9)) {
            goto LABEL_198;
          }
          Espresso::ANECompilerEngine::validate_transpose((uint64_t)&v131, (uint64_t)&v162, (uint64_t)__p, v124, (unsigned int **)&v155[8]);
          int v103 = v131.__r_.__value_.__s.__data_[0];
          if (v132 < 0) {
            operator delete((void *)v131.__r_.__value_.__l.__size_);
          }
          if (v103) {
            int v89 = 0;
          }
          else {
LABEL_198:
          }
            int v89 = 1;
        }
      }
      else
      {
LABEL_191:
        int v89 = 1;
      }
LABEL_155:
      if (*(void *)&v155[8]) {
        operator delete(*(void **)&v155[8]);
      }
      if (v154.n128_u64[0]) {
        operator delete((void *)v154.n128_u64[0]);
      }
      if (v89)
      {
        uint64_t v21 = 0;
        goto LABEL_251;
      }
      ++v82;
      uint64_t v9 = v128;
      if (v82 >= (uint64_t)(*(void *)(a1 + 320) - *(void *)(a1 + 312)) >> 2)
      {
        uint64_t v21 = 1;
        goto LABEL_252;
      }
    }
    uint64_t v88 = a2[1];
    v140[0] = *a2;
    v140[1] = v88;
    if (v88) {
      atomic_fetch_add_explicit(&v88->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "Invalid compute path for non maximum suppression");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t((std::string *)v210, (long long *)__p, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v140, (Espresso::base_kernel::validate_for_engine_warning_t *)v210);
    Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((Espresso::base_kernel::validate_for_engine_warning_t *)v210);
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    if (v88) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v88);
    }
LABEL_154:
    int v89 = 1;
    goto LABEL_155;
  }
LABEL_252:
  if (v163) {
    nitro::nitro_function::nitro_function(v163);
  }
  if (v164)
  {
    char v165 = (std::string::size_type *)v164;
    operator delete(v164);
  }
LABEL_256:
  if (v185 < 0) {
    operator delete(v184);
  }
  if (v191) {
    operator delete(v191);
  }
  if (v199) {
    operator delete(v199);
  }
LABEL_40:

  if (v129) {
    nitro::nitro_function::nitro_function(v129);
  }
  return v21;
}

void sub_1920EAA58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,std::__shared_weak_count *a26)
{
  nitro::nitro_builtins::Sum(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&)::$_0::~$_0((uint64_t)&STACK[0x248]);
  if (STACK[0x2F0]) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)STACK[0x2F0]);
  }
  uint64_t v27 = (void *)STACK[0x2F8];
  if (STACK[0x2F8])
  {
    STACK[0x300] = (unint64_t)v27;
    operator delete(v27);
  }
  if (SLOBYTE(STACK[0x3FF]) < 0) {
    operator delete((void *)STACK[0x3E8]);
  }
  if (STACK[0x448]) {
    operator delete((void *)STACK[0x448]);
  }
  if (STACK[0x4A0]) {
    operator delete((void *)STACK[0x4A0]);
  }

  if (a26) {
    nitro::nitro_function::nitro_function(a26);
  }
  _Unwind_Resume(a1);
}

uint64_t Espresso::ANECompilerEngine::upsample_kernel::is_valid_for_engine(uint64_t a1, int64x2_t **a2, _OWORD **a3)
{
  int v4 = a3[6];
  uint64_t v5 = (std::__shared_weak_count *)*((void *)v4 + 10);
  if (!v5
    || (std::string::size_type v8 = std::__shared_weak_count::lock(v5)) == 0
    || (uint64_t v9 = (const Espresso::net *)*((void *)v4 + 9)) == 0)
  {
    Espresso::throw_exception_selector<Espresso::generic_error>("Null pointer in upsample validation");
  }
  Espresso::ANECompilerEngine::ane_arch_allow_network_override((uint64_t)v9 + 472);
  long long v10 = (Espresso::ANECompilerEngine *)objc_claimAutoreleasedReturnValue();
  uint64_t v12 = v10;
  if (*(unsigned char *)(a1 + 304)
    && Espresso::ANECompilerEngine::is_mix_e(v10, v11)
    && (*(float *)(a1 + 312) != ceilf(*(float *)(a1 + 312)) || *(float *)(a1 + 308) != ceilf(*(float *)(a1 + 308))))
  {
    uint64_t v13 = *a2;
    uint64_t v14 = a2[1];
    v68[0] = v13;
    v68[1] = v14;
    if (v14) {
      atomic_fetch_add_explicit(&v14->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "use_fractional_scale_factors with non-integral values unsupported on requested architecture.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v64, &__p, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v68, (Espresso::base_kernel::validate_for_engine_warning_t *)&v64);
    if (v67) {
      nitro::nitro_function::nitro_function(v67);
    }
    long long v61 = (void **)v66;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v61);
    long long v61 = (void **)v65;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v61);
    if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v64.__r_.__value_.__l.__data_);
    }
    if (SBYTE7(v51) < 0) {
      operator delete((void *)__p);
    }
    goto LABEL_25;
  }
  if (!*(unsigned char *)(a1 + 316) && *(_DWORD *)(a1 + 292) == 1)
  {
    int v15 = *a2;
    uint64_t v14 = a2[1];
    v63[0] = v15;
    v63[1] = v14;
    if (v14) {
      atomic_fetch_add_explicit(&v14->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "Bilinear interpolation doesn't yet support recompute_fractional_scale_factors == false");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v64, &__p, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v63, (Espresso::base_kernel::validate_for_engine_warning_t *)&v64);
    if (v67) {
      nitro::nitro_function::nitro_function(v67);
    }
    long long v61 = (void **)v66;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v61);
    long long v61 = (void **)v65;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v61);
    if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v64.__r_.__value_.__l.__data_);
    }
    if (SBYTE7(v51) < 0)
    {
      operator delete((void *)__p);
      if (!v14) {
        goto LABEL_27;
      }
      goto LABEL_26;
    }
LABEL_25:
    if (!v14)
    {
LABEL_27:
      uint64_t v16 = 0;
      goto LABEL_128;
    }
LABEL_26:
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v14);
    goto LABEL_27;
  }
  if (*(unsigned char *)(a1 + 304))
  {
    float v17 = *(float *)(a1 + 308);
    float v18 = *(float *)(a1 + 312);
  }
  else
  {
    float v17 = (float)*(int *)(a1 + 284);
    float v18 = (float)*(int *)(a1 + 288);
  }
  uint64_t v19 = *(void *)a3[6] + 224 * (void)a3[9];
  unint64_t v20 = *(void **)(v19 + 136);
  if (*(void **)(v19 + 144) == v20) {
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  }
  atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v21 = *a3;
  uint64_t v22 = *((void *)*a3 + 4);
  long long v23 = (*a3)[1];
  v56[0] = **a3;
  v56[1] = v23;
  uint64_t v57 = v22;
  long long v58 = 0;
  uint64_t v59 = 0;
  uint64_t v60 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v58, *((const void **)v21 + 5), *((void *)v21 + 6), (uint64_t)(*((void *)v21 + 6) - *((void *)v21 + 5)) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)&v61, v9, (const Espresso::layer_shape *)v56, 1);
  if (v58)
  {
    uint64_t v59 = v58;
    operator delete(v58);
  }
  nitro::nitro_function::nitro_function(v8);
  if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*((void **)v9 + 45), v20))
  {
    std::map<std::string,Espresso::blob_numerical_properties>::at((uint64_t)v9 + 352, v20);
  }
  Espresso::ANECompilerEngine::upsample_kernel::anec_validate_upsample_step((uint64_t)v53, a1, v12, (uint64_t)&v61, *(_DWORD *)(a1 + 584), v17, v18);
  if (v53[0]) {
    goto LABEL_37;
  }
  if (!Espresso::ANECompilerEngine::upsample_kernel::needs_nearest_pow2_workaround((Espresso::ANECompilerEngine::upsample_kernel *)a1, (NSString *)v12))
  {
LABEL_107:
    uint64_t v34 = a2[1];
    v39[0] = *a2;
    v39[1] = v34;
    if (v34) {
      atomic_fetch_add_explicit(&v34->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "ANECValidateResizeLayer rejected upsample_kernel and workaround not applicable.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v64, &__p, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v39, (Espresso::base_kernel::validate_for_engine_warning_t *)&v64);
    if (v67) {
      nitro::nitro_function::nitro_function(v67);
    }
    v47[0] = v66;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v47);
    v47[0] = v65;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v47);
    if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v64.__r_.__value_.__l.__data_);
    }
    if (SBYTE7(v51) < 0) {
      operator delete((void *)__p);
    }
    if (v34) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v34);
    }
    int v35 = *a2;
    unint64_t v36 = a2[1];
    v38[0] = v35;
    v38[1] = v36;
    if (v36) {
      atomic_fetch_add_explicit(&v36->i64[1], 1uLL, memory_order_relaxed);
    }
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v64, &v54, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v38, (Espresso::base_kernel::validate_for_engine_warning_t *)&v64);
    if (v67) {
      nitro::nitro_function::nitro_function(v67);
    }
    *(void *)&long long __p = v66;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    *(void *)&long long __p = v65;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v64.__r_.__value_.__l.__data_);
    }
    if (v36) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v36);
    }
    uint64_t v16 = 0;
    goto LABEL_126;
  }
  long long __p = 0u;
  long long v51 = 0u;
  int v52 = 1065353216;
  unint64_t v24 = (uint64_t)v17;
  if ((uint64_t)v17 >= 2)
  {
    uint32x2_t v25 = v62;
    char v26 = 1;
    do
    {
      if ((v24 & 3) != 0)
      {
        if (v24)
        {
          unint64_t v33 = a2[1];
          v40[0] = *a2;
          v40[1] = v33;
          if (v33) {
            atomic_fetch_add_explicit(&v33->i64[1], 1uLL, memory_order_relaxed);
          }
          std::string::basic_string[abi:ne180100]<0>(v47, "Workaround produced an unfactorable upsample.");
          Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v64, (long long *)v47, (uint64_t)a3, 0);
          Espresso::emit_kernel_validation_warning(v40, (Espresso::base_kernel::validate_for_engine_warning_t *)&v64);
          if (v67) {
            nitro::nitro_function::nitro_function(v67);
          }
          v44[0] = v66;
          std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v44);
          v44[0] = v65;
          std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v44);
          if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v64.__r_.__value_.__l.__data_);
          }
          if (v48 < 0) {
            operator delete(v47[0]);
          }
          if (v33) {
            nitro::nitro_function::nitro_function((std::__shared_weak_count *)v33);
          }
          std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&__p);
          goto LABEL_107;
        }
        Espresso::ANECompilerEngine::upsample_kernel::anec_validate_upsample_step((uint64_t)v47, a1, v12, (uint64_t)&v61, *(_DWORD *)(a1 + 584), 2.0, 2.0);
        if (!LOBYTE(v47[0]))
        {
          uint64_t v27 = a2[1];
          v42[0] = *a2;
          v42[1] = v27;
          if (v27) {
            atomic_fetch_add_explicit(&v27->i64[1], 1uLL, memory_order_relaxed);
          }
          std::string::basic_string[abi:ne180100]<0>(v44, "ANECValidateResizeLayer rejected upsample_kernel for 2x2 upsample.");
          Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v64, (long long *)v44, (uint64_t)a3, 0);
          Espresso::emit_kernel_validation_warning(v42, (Espresso::base_kernel::validate_for_engine_warning_t *)&v64);
          if (v67) {
            nitro::nitro_function::nitro_function(v67);
          }
          v69[0] = (void **)v66;
          std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v69);
          v69[0] = (void **)v65;
          std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v69);
          if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v64.__r_.__value_.__l.__data_);
          }
          if (v45 < 0) {
            operator delete(v44[0]);
          }
          if (v27) {
            nitro::nitro_function::nitro_function((std::__shared_weak_count *)v27);
          }
          long long v28 = a2[1];
          v41[0] = *a2;
          v41[1] = v28;
          if (v28) {
            atomic_fetch_add_explicit(&v28->i64[1], 1uLL, memory_order_relaxed);
          }
          Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v64, (long long *)&v47[1], (uint64_t)a3, 0);
          Espresso::emit_kernel_validation_warning(v41, (Espresso::base_kernel::validate_for_engine_warning_t *)&v64);
          if (v67) {
            nitro::nitro_function::nitro_function(v67);
          }
          v44[0] = v66;
          std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v44);
          v44[0] = v65;
          std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v44);
          if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v64.__r_.__value_.__l.__data_);
          }
          if (v28) {
            nitro::nitro_function::nitro_function((std::__shared_weak_count *)v28);
          }
          char v26 = (char)v47[0];
        }
        if (v49 < 0) {
          operator delete(v47[1]);
        }
        char v29 = 1;
        unsigned int v30 = 1;
      }
      else
      {
        Espresso::ANECompilerEngine::upsample_kernel::anec_validate_upsample_step((uint64_t)v47, a1, v12, (uint64_t)&v61, *(_DWORD *)(a1 + 584), 4.0, 4.0);
        if (!LOBYTE(v47[0]))
        {
          uint64_t v31 = a2[1];
          v46[0] = *a2;
          v46[1] = v31;
          if (v31) {
            atomic_fetch_add_explicit(&v31->i64[1], 1uLL, memory_order_relaxed);
          }
          std::string::basic_string[abi:ne180100]<0>(v44, "ANECValidateResizeLayer rejected upsample_kernel for 4x4 upsample.");
          Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v64, (long long *)v44, (uint64_t)a3, 0);
          Espresso::emit_kernel_validation_warning(v46, (Espresso::base_kernel::validate_for_engine_warning_t *)&v64);
          if (v67) {
            nitro::nitro_function::nitro_function(v67);
          }
          v69[0] = (void **)v66;
          std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v69);
          v69[0] = (void **)v65;
          std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v69);
          if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v64.__r_.__value_.__l.__data_);
          }
          if (v45 < 0) {
            operator delete(v44[0]);
          }
          if (v31) {
            nitro::nitro_function::nitro_function((std::__shared_weak_count *)v31);
          }
          unint64_t v32 = a2[1];
          v43[0] = *a2;
          v43[1] = v32;
          if (v32) {
            atomic_fetch_add_explicit(&v32->i64[1], 1uLL, memory_order_relaxed);
          }
          Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v64, (long long *)&v47[1], (uint64_t)a3, 0);
          Espresso::emit_kernel_validation_warning(v43, (Espresso::base_kernel::validate_for_engine_warning_t *)&v64);
          if (v67) {
            nitro::nitro_function::nitro_function(v67);
          }
          v44[0] = v66;
          std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v44);
          v44[0] = v65;
          std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v44);
          if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v64.__r_.__value_.__l.__data_);
          }
          if (v32) {
            nitro::nitro_function::nitro_function((std::__shared_weak_count *)v32);
          }
          char v26 = (char)v47[0];
        }
        if (v49 < 0) {
          operator delete(v47[1]);
        }
        char v29 = 2;
        unsigned int v30 = 2;
      }
      v24 >>= v29;
      uint32x2_t v25 = vshl_u32(v25, (uint32x2_t)vdup_n_s32(v30));
      uint32x2_t v62 = v25;
    }
    while (v24 >= 2 && (v26 & 1) != 0);
    std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&__p);
    if (v26) {
      goto LABEL_37;
    }
    goto LABEL_107;
  }
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&__p);
LABEL_37:
  uint64_t v16 = 1;
LABEL_126:
  if (v55 < 0) {
    operator delete((void *)v54);
  }
LABEL_128:

  nitro::nitro_function::nitro_function(v8);
  return v16;
}

void sub_1920EB70C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,void *__p,void *a31,int a32,__int16 a33,char a34,char a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62)
{
  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((Espresso::base_kernel::validate_for_engine_warning_t *)(v65 - 248));
  if (a35 < 0) {
    operator delete(__p);
  }
  if (v64) {
    nitro::nitro_function::nitro_function(v64);
  }
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&a40);
  if (a55 < 0) {
    operator delete(a50);
  }

  if (v62) {
    nitro::nitro_function::nitro_function(v62);
  }
  _Unwind_Resume(a1);
}

BOOL Espresso::MPSEngine::general_concat_kernel::is_valid_for_engine(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == *(void *)a3 || *(unsigned char *)(a1 + 285)) {
    return 0;
  }
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v7, *(const Espresso::layer_shape **)a3, 0);
  BOOL result = 0;
  if (v8 >= 4)
  {
    BOOL result = 0;
    int v5 = (v8 & (*(int *)(a1 + 280) >> 31)) + *(_DWORD *)(a1 + 280);
    if (v5 >= 0 && v5 < v8)
    {
      int v6 = v8 + ~v5;
      if (!*(unsigned char *)(a1 + 284)) {
        int v6 = (v8 & (*(int *)(a1 + 280) >> 31)) + *(_DWORD *)(a1 + 280);
      }
      return v6 == 2;
    }
  }
  return result;
}

BOOL Espresso::MPSEngine::inner_product_kernel::is_valid_for_engine(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (*(_DWORD *)(a1 + 336) || *(unsigned char *)(a1 + 344) || *(_DWORD *)(a1 + 348) || *(_DWORD *)(a1 + 340) == 5) {
    return 0;
  }
  uint64_t v4 = *a3;
  if (*a3 == a3[1]) {
    return 1;
  }
  int v5 = *(_DWORD *)(v4 + 20);
  if (v5 == -1)
  {
    if (*(_DWORD *)(v4 + 16) == 1) {
      int v5 = 4;
    }
    else {
      int v5 = 5;
    }
  }
  return v5 > 3;
}

uint64_t Espresso::MPSEngine::activation_kernel::is_valid_for_engine(uint64_t a1, uint64_t *a2)
{
  if (*(void *)(a1 + 416)) {
    return 1;
  }
  uint64_t v4 = *(void *)(a1 + 424);
  if (!v4) {
    return 0;
  }
  int v5 = (std::__shared_weak_count *)a2[1];
  uint64_t v6 = *a2;
  int v7 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v4 + 200))(v4, &v6);
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  return v2;
}

void sub_1920EBAA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  _Unwind_Resume(exception_object);
}

BOOL Espresso::dev_op_kernel_cpu::is_valid_for_engine(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 280);
  return !v1 || v1 == 100;
}

BOOL Espresso::DummyMPSEngine::general_concat_kernel::is_valid_for_engine(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) == *(void *)a3 || *(unsigned char *)(a1 + 285)) {
    return 0;
  }
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v7, *(const Espresso::layer_shape **)a3, 0);
  BOOL result = 0;
  if (v8 >= 4)
  {
    BOOL result = 0;
    int v5 = (v8 & (*(int *)(a1 + 280) >> 31)) + *(_DWORD *)(a1 + 280);
    if (v5 >= 0 && v5 < v8)
    {
      int v6 = v8 + ~v5;
      if (!*(unsigned char *)(a1 + 284)) {
        int v6 = (v8 & (*(int *)(a1 + 280) >> 31)) + *(_DWORD *)(a1 + 280);
      }
      return v6 == 2;
    }
  }
  return result;
}

BOOL Espresso::DummyMPSEngine::inner_product_kernel::is_valid_for_engine(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (*(_DWORD *)(a1 + 336)
    || *(unsigned char *)(a1 + 344)
    || *(_DWORD *)(a1 + 348)
    || *(_DWORD *)(a1 + 340) == 5
    || *(_DWORD *)(a1 + 404))
  {
    return 0;
  }
  uint64_t v4 = *a3;
  if (*a3 == a3[1]) {
    return 1;
  }
  int v5 = *(_DWORD *)(v4 + 20);
  if (v5 == -1)
  {
    if (*(_DWORD *)(v4 + 16) == 1) {
      int v5 = 4;
    }
    else {
      int v5 = 5;
    }
  }
  return v5 > 3;
}

uint64_t Espresso::DummyMPSEngine::split_kernel::is_valid_for_engine(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 288)) {
    return 0;
  }
  if (*(void *)(a3 + 8) == *(void *)a3) {
    return 1;
  }
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v4, *(const Espresso::layer_shape **)a3, 0);
  uint64_t result = 0;
  if (v5 >= 4) {
    return 1;
  }
  return result;
}

void Espresso::ANECompilerEngine::transpose_kernel::supported_by_hw(uint64_t a1, void *a2, _DWORD *a3, _DWORD *a4)
{
  id v9 = a2;
  if (Espresso::ANECompilerEngine::blob_shape_ane_compatible(a3, v9))
  {
    BOOL v7 = Espresso::ANECompilerEngine::blob_shape_ane_compatible(a4, v9);
    int v8 = (void *)(a1 + 8);
    if (v7)
    {
      *(unsigned char *)a1 = 1;
      std::string::basic_string[abi:ne180100]<0>(v8, "Success");
    }
    else
    {
      *(unsigned char *)a1 = 0;
      std::string::basic_string[abi:ne180100]<0>(v8, "Output blob dimensions exceed ANE limit.");
    }
  }
  else
  {
    *(unsigned char *)a1 = 0;
    std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 8), "Input blob dimensions exceed ANE limit.");
  }
}

void sub_1920EBCF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::general_concat_kernel::supported_by_hw(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t *a5, void *a6, _DWORD *a7, unsigned int *a8)
{
  v98[2] = *MEMORY[0x1E4F143B8];
  id v14 = a3;
  int v15 = *a8;
  if ((int)*a8 < 5)
  {
    if (v15 < 0)
    {
      *(unsigned char *)a1 = 0;
      std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 8), "Axis expected to already have been converted to positive by caller.");
      goto LABEL_24;
    }
    __val = a6;
    uint64_t v21 = (_DWORD *)*a4;
    unint64_t v20 = (_DWORD *)a4[1];
    while (v21 != v20)
    {
      if (!Espresso::ANECompilerEngine::blob_shape_ane_compatible(v21, v14))
      {
        *(unsigned char *)a1 = 0;
        std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 8), "Input blob dimensions exceed ANE limit.");
        goto LABEL_24;
      }
      v21 += 8;
    }
    if (!Espresso::ANECompilerEngine::blob_shape_ane_compatible(a7, v14))
    {
      *(unsigned char *)a1 = 0;
      std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 8), "Output blob dimensions exceed ANE limit.");
      goto LABEL_24;
    }
    int v22 = a7[7];
    long long v23 = (Espresso::ANECompilerEngine *)*a8;
    uint64_t v24 = *(int *)(*a4 + 24);
    if (*((unsigned char *)a8 + 4))
    {
      ANECAxisForNDAxis = Espresso::ANECompilerEngine::GetANECAxisForNDAxis(v23, v24, v22 == 0);
LABEL_18:
      int v27 = *((unsigned __int8 *)a8 + 5);
      char v26 = (char *)a8 + 5;
      if (v27 && ANECAxisForNDAxis != @"Channel")
      {
        *(unsigned char *)a1 = 0;
        std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 8), "Concat interleave option supported on channel dimension only.");
        goto LABEL_24;
      }
    }
    else
    {
      ANECAxisForNDAxis = @"Height";
      switch((int)v23)
      {
        case 0:
          ANECAxisForNDAxis = @"Width";
          goto LABEL_18;
        case 1:
          goto LABEL_18;
        case 2:
          if (!v22 && v24 == 5) {
            goto LABEL_32;
          }
          goto LABEL_35;
        case 3:
          ANECAxisForNDAxis = @"Batch";
          if (v22 || v24 != 5) {
            goto LABEL_18;
          }
LABEL_35:
          char v26 = (char *)a8 + 5;
          ANECAxisForNDAxis = @"Channel";
          break;
        case 4:
          if (v22 || v24 != 5) {
LABEL_32:
          }
            ANECAxisForNDAxis = @"Depth";
          else {
            ANECAxisForNDAxis = @"Batch";
          }
          goto LABEL_18;
        default:
          Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Invalid axis or rank specified.");
      }
    }
    ANECConcatLayerDescInitialize();
    long long v28 = (uint64_t *)MEMORY[0x1E4F1CFC8];
    if (*v26) {
      long long v28 = (uint64_t *)MEMORY[0x1E4F1CFD0];
    }
    uint64_t v29 = *v28;
    int v95 = ANECAxisForNDAxis;
    uint64_t v96 = v29;
    uint64_t v93 = 0;
    uint64_t v94 = 0;
    *(_OWORD *)&v97.__r_.__value_.__r.__words[1] = 0uLL;
    v97.__r_.__value_.__r.__words[0] = (std::string::size_type)&v97.__r_.__value_.__l.__size_;
    uint64_t v31 = *a4;
    uint64_t v30 = a4[1];
    if (v30 == *a4) {
      goto LABEL_89;
    }
    std::string::size_type v32 = 0;
    unint64_t v33 = 0;
    do
    {
      uint64_t v34 = *a5;
      if (v33 >= (a5[1] - *a5) >> 2) {
        std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
      }
      std::string::size_type size = v97.__r_.__value_.__l.__size_;
      p_std::string::size_type size = &v97.__r_.__value_.__l.__size_;
      long long v37 = &v97.__r_.__value_.__l.__size_;
      if (v97.__r_.__value_.__l.__size_)
      {
        int v38 = *(_DWORD *)(v34 + 4 * v33);
        while (1)
        {
          while (1)
          {
            long long v37 = (std::string::size_type *)size;
            int v39 = *(_DWORD *)(size + 28);
            if (v38 >= v39) {
              break;
            }
            std::string::size_type size = *v37;
            p_std::string::size_type size = v37;
            if (!*v37) {
              goto LABEL_49;
            }
          }
          if (v39 >= v38) {
            break;
          }
          std::string::size_type size = v37[1];
          if (!size)
          {
            p_std::string::size_type size = v37 + 1;
            goto LABEL_49;
          }
        }
      }
      else
      {
LABEL_49:
        int v40 = operator new(0x20uLL);
        v40[7] = *(_DWORD *)(v34 + 4 * v33);
        *(void *)int v40 = 0;
        *((void *)v40 + 1) = 0;
        *((void *)v40 + 2) = v37;
        *p_std::string::size_type size = (std::string::size_type)v40;
        if (*(void *)v97.__r_.__value_.__l.__data_)
        {
          v97.__r_.__value_.__r.__words[0] = *(void *)v97.__r_.__value_.__l.__data_;
          int v40 = (_DWORD *)*p_size;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v97.__r_.__value_.__l.__size_, (uint64_t *)v40);
        std::string::size_type v32 = ++v97.__r_.__value_.__r.__words[2];
        uint64_t v31 = *a4;
        uint64_t v30 = a4[1];
      }
      ++v33;
    }
    while (v33 < (v30 - v31) >> 5);
    if (v30 == v31)
    {
LABEL_89:
      unint64_t v41 = 0;
LABEL_90:
      int v66 = ANECValidateConcatLayer();
      if (v66)
      {
        int __vala = v66;
        uint64_t v67 = v93;
        uint64_t v68 = v94;
        memset(__p, 0, 32);
        *(_DWORD *)&unsigned char __p[32] = 1065353216;
        if (v93)
        {
          uint64_t v69 = 0;
          unint64_t v70 = (CFTypeRef *)(v94 + 8);
          do
          {
            unsigned int v71 = (unint64_t *)(v68 + 552 * v69);
            if (*v71)
            {
              unint64_t v72 = 0;
              int v73 = v70;
              do
              {
                std::__hash_table<__CFString const*,Espresso::ANECompilerEngine::CFStringHasher,Espresso::ANECompilerEngine::CFStringEqualWrapper,std::allocator<__CFString const*>>::__emplace_unique_key_args<__CFString const*,__CFString const* const&>((float *)__p, v73, v73);
                ++v72;
                ++v73;
              }
              while (v72 < *v71);
            }
            ++v69;
            v70 += 69;
          }
          while (v69 != v67);
        }
        std::to_string(&v88, __vala);
        unint64_t v74 = std::string::insert(&v88, 0, "general_concat_kernel: ANECValidateConcatLayer failed with status ");
        long long v75 = *(_OWORD *)&v74->__r_.__value_.__l.__data_;
        v89.__r_.__value_.__r.__words[2] = v74->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v89.__r_.__value_.__l.__data_ = v75;
        v74->__r_.__value_.__l.__size_ = 0;
        v74->__r_.__value_.__r.__words[2] = 0;
        v74->__r_.__value_.__r.__words[0] = 0;
        unint64_t v76 = std::string::append(&v89, ". ");
        long long v77 = *(_OWORD *)&v76->__r_.__value_.__l.__data_;
        v90.__r_.__value_.__r.__words[2] = v76->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v90.__r_.__value_.__l.__data_ = v77;
        v76->__r_.__value_.__l.__size_ = 0;
        v76->__r_.__value_.__r.__words[2] = 0;
        v76->__r_.__value_.__r.__words[0] = 0;
        Espresso::ANECompilerEngine::format_validation_violations((uint64_t)v86, (uint64_t)__p);
        if ((v87 & 0x80u) == 0) {
          uint64_t v78 = v86;
        }
        else {
          uint64_t v78 = (void **)v86[0];
        }
        if ((v87 & 0x80u) == 0) {
          std::string::size_type v79 = v87;
        }
        else {
          std::string::size_type v79 = (std::string::size_type)v86[1];
        }
        uint64_t v80 = std::string::append(&v90, (const std::string::value_type *)v78, v79);
        std::string::size_type v81 = v80->__r_.__value_.__r.__words[0];
        v98[0] = v80->__r_.__value_.__l.__size_;
        *(void *)((char *)v98 + 7) = *(std::string::size_type *)((char *)&v80->__r_.__value_.__r.__words[1] + 7);
        char v82 = HIBYTE(v80->__r_.__value_.__r.__words[2]);
        v80->__r_.__value_.__l.__size_ = 0;
        v80->__r_.__value_.__r.__words[2] = 0;
        v80->__r_.__value_.__r.__words[0] = 0;
        *(unsigned char *)a1 = 0;
        *(void *)(a1 + 23) = *(void *)((char *)v98 + 7);
        uint64_t v83 = v98[0];
        *(void *)(a1 + 8) = v81;
        *(void *)(a1 + 16) = v83;
        *(unsigned char *)(a1 + 31) = v82;
        if ((char)v87 < 0) {
          operator delete(v86[0]);
        }
        if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v90.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v89.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v88.__r_.__value_.__l.__data_);
        }
        std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)__p);
      }
      else
      {
        *(unsigned char *)a1 = 1;
        std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 8), "Success");
      }
    }
    else
    {
      unint64_t v41 = 0;
      uint64_t v42 = 0;
      unint64_t v43 = 0;
      unint64_t v44 = 0;
      while (1)
      {
        ANECTensorDescInitialize();
        if (v44 >= (a5[1] - *a5) >> 2) {
          std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
        }
        uint64_t v45 = *(unsigned int *)(*a5 + 4 * v44);
        if (v45 >= 8 || ((0x97u >> v45) & 1) == 0) {
          break;
        }
        if (v44 >= (uint64_t)(a4[1] - *a4) >> 5) {
          std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
        }
        BOOL v46 = v45 == 1 || v32 == 1;
        long long v47 = off_1E5746F00[v45];
        if (!v46) {
          long long v47 = @"Float16";
        }
        uint64_t v48 = *a4 + 32 * v44;
        *(void *)long long __p = v47;
        uint64_t v49 = *(void *)(v48 + 12);
        *(void *)&long long v50 = (int)v49;
        *((void *)&v50 + 1) = SHIDWORD(v49);
        *(_OWORD *)&__p[24] = v50;
        *(void *)&__p[40] = *(int *)(v48 + 8);
        *(void *)&long long v50 = (int)*(void *)v48;
        *((void *)&v50 + 1) = (int)HIDWORD(*(void *)v48);
        *(_OWORD *)&__p[8] = v50;
        if (__val[1] <= v44) {
          std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
        }
        if ((*(void *)(*__val + ((v44 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v44)) {
          BYTE9(v92) = 1;
        }
        if (v42 >= v43)
        {
          uint64_t v54 = (v42 - v41) >> 6;
          unint64_t v55 = v54 + 1;
          if ((unint64_t)(v54 + 1) >> 58) {
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          if ((v43 - v41) >> 5 > v55) {
            unint64_t v55 = (v43 - v41) >> 5;
          }
          if ((unint64_t)(v43 - v41) >= 0x7FFFFFFFFFFFFFC0) {
            unint64_t v56 = 0x3FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v56 = v55;
          }
          if (v56)
          {
            if (v56 >> 58) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            uint64_t v57 = (char *)operator new(v56 << 6);
          }
          else
          {
            uint64_t v57 = 0;
          }
          long long v58 = &v57[64 * v54];
          long long v59 = *(_OWORD *)&__p[16];
          *(_OWORD *)long long v58 = *(_OWORD *)__p;
          *((_OWORD *)v58 + 1) = v59;
          long long v60 = v92;
          *((_OWORD *)v58 + 2) = *(_OWORD *)&__p[32];
          *((_OWORD *)v58 + 3) = v60;
          if (v42 == v41)
          {
            uint64_t v65 = &v57[64 * v54];
          }
          else
          {
            long long v61 = &v57[64 * v54];
            do
            {
              long long v62 = *((_OWORD *)v42 - 4);
              long long v63 = *((_OWORD *)v42 - 3);
              long long v64 = *((_OWORD *)v42 - 1);
              uint64_t v65 = v61 - 64;
              *((_OWORD *)v61 - 2) = *((_OWORD *)v42 - 2);
              *((_OWORD *)v61 - 1) = v64;
              *((_OWORD *)v61 - 4) = v62;
              *((_OWORD *)v61 - 3) = v63;
              v42 -= 64;
              v61 -= 64;
            }
            while (v42 != v41);
          }
          unint64_t v43 = &v57[64 * v56];
          uint64_t v42 = v58 + 64;
          if (v41) {
            operator delete(v41);
          }
          unint64_t v41 = v65;
        }
        else
        {
          long long v51 = *(_OWORD *)__p;
          long long v52 = *(_OWORD *)&__p[16];
          long long v53 = v92;
          *((_OWORD *)v42 + 2) = *(_OWORD *)&__p[32];
          *((_OWORD *)v42 + 3) = v53;
          *(_OWORD *)uint64_t v42 = v51;
          *((_OWORD *)v42 + 1) = v52;
          v42 += 64;
        }
        if (++v44 >= (uint64_t)(a4[1] - *a4) >> 5) {
          goto LABEL_90;
        }
      }
      *(unsigned char *)a1 = 0;
      std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 8), "general_concat_kernel: unsupported input compute path for ANE.");
    }
    std::__tree<int>::destroy((void *)v97.__r_.__value_.__l.__size_);
    if (v41)
    {
      uint64_t v19 = v41;
      goto LABEL_9;
    }
  }
  else
  {
    std::to_string(&v97, v15);
    uint64_t v16 = std::string::insert(&v97, 0, "Unsupported concat axis ");
    long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    *(void *)&__p[16] = *((void *)&v16->__r_.__value_.__l + 2);
    *(_OWORD *)long long __p = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    if (__p[23] >= 0) {
      float v18 = __p;
    }
    else {
      float v18 = *(char **)__p;
    }
    *(unsigned char *)a1 = 0;
    std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 8), v18);
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
    {
      uint64_t v19 = (char *)v97.__r_.__value_.__r.__words[0];
LABEL_9:
      operator delete(v19);
    }
  }
LABEL_24:
}

void sub_1920EC4A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  std::__tree<int>::destroy(*(void **)(v44 - 136));
  if (v43) {
    operator delete(v43);
  }

  _Unwind_Resume(a1);
}

uint64_t Espresso::ANECompilerEngine::mix_activation_kernel::is_valid_for_engine(uint64_t a1, int64x2_t **a2, uint64_t *a3)
{
  uint64_t v6 = a3[6];
  BOOL v7 = *(std::__shared_weak_count **)(v6 + 80);
  if (v7)
  {
    int v8 = std::__shared_weak_count::lock(v7);
    if (v8) {
      id v9 = *(const Espresso::net **)(v6 + 72);
    }
    else {
      id v9 = 0;
    }
  }
  else
  {
    id v9 = 0;
    int v8 = 0;
  }
  Espresso::ANECompilerEngine::ane_arch_allow_network_override((uint64_t)v9 + 472);
  long long v10 = (Espresso::ANECompilerEngine *)objc_claimAutoreleasedReturnValue();
  if (Espresso::ANECompilerEngine::is_mix(v10, v11))
  {
    uint64_t v12 = a2[1];
    v49[0] = *a2;
    v49[1] = v12;
    *a2 = 0;
    a2[1] = 0;
    uint64_t is_valid_for_engine = Espresso::ANECompilerEngine::activation_kernel::is_valid_for_engine(a1, v49, (uint64_t)a3);
    if (v12) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v12);
    }
    goto LABEL_44;
  }
  if (a3[3] != a3[4])
  {
    uint64_t v14 = *a3;
    if (*a3 != a3[1])
    {
      if (v8)
      {
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v14 = *a3;
      }
      long long v15 = *(_OWORD *)(v14 + 16);
      uint64_t v16 = *(void *)(v14 + 32);
      v37[0] = *(_OWORD *)v14;
      v37[1] = v15;
      uint64_t v38 = v16;
      long long __p = 0;
      int v40 = 0;
      uint64_t v41 = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *(const void **)(v14 + 40), *(void *)(v14 + 48), (uint64_t)(*(void *)(v14 + 48) - *(void *)(v14 + 40)) >> 2);
      Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v42, v9, (const Espresso::layer_shape *)v37, 1);
      if (__p)
      {
        int v40 = __p;
        operator delete(__p);
      }
      if (v8)
      {
        nitro::nitro_function::nitro_function(v8);
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v17 = a3[3];
      uint64_t v18 = *(void *)(v17 + 32);
      long long v19 = *(_OWORD *)(v17 + 16);
      v31[0] = *(_OWORD *)v17;
      v31[1] = v19;
      uint64_t v32 = v18;
      unint64_t v33 = 0;
      uint64_t v34 = 0;
      uint64_t v35 = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v33, *(const void **)(v17 + 40), *(void *)(v17 + 48), (uint64_t)(*(void *)(v17 + 48) - *(void *)(v17 + 40)) >> 2);
      Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v36, v9, (const Espresso::layer_shape *)v31, 1);
      if (v33)
      {
        uint64_t v34 = v33;
        operator delete(v33);
      }
      if (v8) {
        nitro::nitro_function::nitro_function(v8);
      }
      unint64_t v20 = v10;
      if (Espresso::ANECompilerEngine::blob_shape_ane_compatible(v42, v20))
      {
        if (Espresso::ANECompilerEngine::blob_shape_ane_compatible(v36, v20))
        {
          char v28 = 1;
          std::string::basic_string[abi:ne180100]<0>(v29, "Success");
        }
        else
        {
          char v28 = 0;
          std::string::basic_string[abi:ne180100]<0>(v29, "Output blob dimensions exceed ANE limit.");
        }
      }
      else
      {
        char v28 = 0;
        std::string::basic_string[abi:ne180100]<0>(v29, "Input blob dimensions exceed ANE limit.");
      }

      int v22 = *a2;
      if (v28)
      {
        long long v23 = a2[1];
        v26[0] = v22;
        v26[1] = v23;
        if (v23) {
          atomic_fetch_add_explicit(&v23->i64[1], 1uLL, memory_order_relaxed);
        }
        uint64_t v24 = Espresso::ANECompilerEngine::activation_kernel::is_valid_for_engine(a1, v26, (uint64_t)a3);
        uint64_t is_valid_for_engine = v24;
        if (!v23) {
          goto LABEL_42;
        }
      }
      else
      {
        long long v23 = a2[1];
        v27[0] = v22;
        v27[1] = v23;
        if (v23) {
          atomic_fetch_add_explicit(&v23->i64[1], 1uLL, memory_order_relaxed);
        }
        Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v44, (long long *)v29, (uint64_t)a3, 0);
        Espresso::emit_kernel_validation_warning(v27, (Espresso::base_kernel::validate_for_engine_warning_t *)&v44);
        if (v47) {
          nitro::nitro_function::nitro_function(v47);
        }
        long long v50 = (void **)v46;
        std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v50);
        long long v50 = (void **)v45;
        std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v50);
        if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v44.__r_.__value_.__l.__data_);
        }
        uint64_t v24 = 0;
        uint64_t is_valid_for_engine = 0;
        if (!v23) {
          goto LABEL_42;
        }
      }
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v23);
      uint64_t is_valid_for_engine = v24;
LABEL_42:
      if (v30 < 0) {
        operator delete(v29[0]);
      }
      goto LABEL_44;
    }
  }
  uint64_t v21 = a2[1];
  v48[0] = *a2;
  v48[1] = v21;
  if (v21) {
    atomic_fetch_add_explicit(&v21->i64[1], 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(v42, "Detected zero top/bottom tensor");
  Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v44, (long long *)v42, (uint64_t)a3, 0);
  Espresso::emit_kernel_validation_warning(v48, (Espresso::base_kernel::validate_for_engine_warning_t *)&v44);
  if (v47) {
    nitro::nitro_function::nitro_function(v47);
  }
  v36[0] = (void **)v46;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v36);
  v36[0] = (void **)v45;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v36);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v44.__r_.__value_.__l.__data_);
  }
  if (v43 < 0) {
    operator delete(v42[0]);
  }
  if (v21) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v21);
  }
  uint64_t is_valid_for_engine = 0;
LABEL_44:

  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  return is_valid_for_engine;
}

void sub_1920EC9B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  if (v46) {
    nitro::nitro_function::nitro_function(v46);
  }
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::mix_slice_kernel::supported_by_hw(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, int *a5, NSString *a6)
{
  id v11 = a2;
  if (!Espresso::ANECompilerEngine::blob_shape_ane_compatible((_DWORD *)a3, v11))
  {
    *(unsigned char *)a1 = 0;
    std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 8), "Input blob dimensions exceed ANE limit.");
    goto LABEL_58;
  }
  if (!Espresso::ANECompilerEngine::blob_shape_ane_compatible((_DWORD *)a4, v11))
  {
    *(unsigned char *)a1 = 0;
    std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 8), "Output blob dimensions exceed ANE limit.");
    goto LABEL_58;
  }
  BOOL v12 = 0;
  int v13 = a5[3];
  int v14 = *a5;
  if (v13 == 4)
  {
    int v15 = *(_DWORD *)(a3 + 4);
    if ((v15 & 3) == 0 && v14 == 2 && (v15 & 1) == 0) {
      BOOL v12 = *(_DWORD *)(a3 + 28) != 0;
    }
  }
  int v16 = v13 == 1 || v12;
  if (v14 < 5 && a5[4] == 0) {
    int v18 = v16;
  }
  else {
    int v18 = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(&v42, "");
  if (shape_for_CNNAxis == -1) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Invalid slice axis");
  }
  int v20 = a5[2];
  int v21 = (shape_for_CNNAxis & (a5[1] >> 31)) + a5[1];
  if (v20 <= 0) {
    int v22 = shape_for_CNNAxis;
  }
  else {
    int v22 = 0;
  }
  int v23 = v22 + v20;
  if (v23 >= shape_for_CNNAxis) {
    int v24 = shape_for_CNNAxis;
  }
  else {
    int v24 = v23;
  }
  if (v24 > v21) {
    int v25 = v18;
  }
  else {
    int v25 = 0;
  }
  if (v21 < 0 || v24 < 0) {
    unsigned int v26 = (v21 & v24) >> 31;
  }
  else {
    unsigned int v26 = 1;
  }
  if (v21 > shape_for_CNNAxis) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Invalid start param");
  }
  if (v25 & v26)
  {
    {
LABEL_55:
      *(unsigned char *)a1 = 1;
      std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 8), "Success");
      goto LABEL_56;
    }
    long long v27 = *(_OWORD *)(a3 + 16);
    v41[0] = *(_OWORD *)a3;
    v41[1] = v27;
    *(int32x2_t *)((char *)v41 + 12) = vrev64_s32(*(int32x2_t *)(a3 + 12));
    Espresso::ANECompilerEngine::transpose_kernel::supported_by_hw((uint64_t)v38, v11, (_DWORD *)a3, v41);
    if (v38[0])
    {
      long long v28 = *(_OWORD *)(a4 + 16);
      v37[0] = *(_OWORD *)a4;
      v37[1] = v28;
      *(int32x2_t *)((char *)v37 + 12) = vrev64_s32(*(int32x2_t *)(a4 + 12));
      Espresso::ANECompilerEngine::transpose_kernel::supported_by_hw((uint64_t)v34, v11, v37, (_DWORD *)a4);
      int v29 = v34[0];
      v38[0] = v34[0];
      if (SHIBYTE(v40) < 0)
      {
        operator delete((void *)__p);
        int v29 = v38[0];
      }
      long long __p = v35;
      std::string::size_type v40 = v36;
      if (v29)
      {
        int v30 = 0;
        goto LABEL_52;
      }
      *(unsigned char *)a1 = 1;
      uint64_t v32 = (std::string *)(a1 + 8);
      if (SHIBYTE(v40) < 0)
      {
        std::string::__init_copy_ctor_external(v32, (const std::string::value_type *)__p, *((std::string::size_type *)&__p + 1));
        goto LABEL_51;
      }
      *(_OWORD *)&v32->__r_.__value_.__l.__data_ = __p;
      std::string::size_type v33 = v40;
    }
    else
    {
      *(unsigned char *)a1 = 1;
      uint64_t v32 = (std::string *)(a1 + 8);
      if (SHIBYTE(v40) < 0)
      {
        std::string::__init_copy_ctor_external(v32, (const std::string::value_type *)__p, *((std::string::size_type *)&__p + 1));
        goto LABEL_51;
      }
      *(_OWORD *)&v32->__r_.__value_.__l.__data_ = __p;
      std::string::size_type v33 = v40;
    }
    v32->__r_.__value_.__r.__words[2] = v33;
LABEL_51:
    int v30 = 1;
LABEL_52:
    if (SHIBYTE(v40) < 0) {
      operator delete((void *)__p);
    }
    if (v30) {
      goto LABEL_56;
    }
    goto LABEL_55;
  }
  *(unsigned char *)a1 = 0;
  uint64_t v31 = (std::string *)(a1 + 8);
  if (SHIBYTE(v43) < 0)
  {
    std::string::__init_copy_ctor_external(v31, (const std::string::value_type *)v42, *((std::string::size_type *)&v42 + 1));
  }
  else
  {
    *(_OWORD *)&v31->__r_.__value_.__l.__data_ = v42;
    v31->__r_.__value_.__r.__words[2] = v43;
  }
LABEL_56:
  if (SHIBYTE(v43) < 0) {
    operator delete((void *)v42);
  }
LABEL_58:
}

void sub_1920ECDC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v24 - 65) < 0) {
    operator delete(*(void **)(v24 - 88));
  }

  _Unwind_Resume(a1);
}

uint64_t Espresso::ANECompilerEngine::is_mix_c(Espresso::ANECompilerEngine *this, NSString *a2)
{
  uint64_t v2 = this;
  if (!v2)
  {
    Espresso::ANECompilerEngine::current_ane_arch(0);
    uint64_t v2 = (Espresso::ANECompilerEngine *)objc_claimAutoreleasedReturnValue();
  }
  if (([(Espresso::ANECompilerEngine *)v2 isEqualToString:@"M9"] & 1) != 0
    || ([(Espresso::ANECompilerEngine *)v2 isEqualToString:@"M10"] & 1) != 0
    || ([(Espresso::ANECompilerEngine *)v2 isEqualToString:@"H11"] & 1) != 0
    || ([(Espresso::ANECompilerEngine *)v2 isEqualToString:@"H12"] & 1) != 0
    || ([(Espresso::ANECompilerEngine *)v2 isEqualToString:@"H13"] & 1) != 0
    || ([(Espresso::ANECompilerEngine *)v2 isEqualToString:@"H13G"] & 1) != 0
    || ([(Espresso::ANECompilerEngine *)v2 isEqualToString:@"H14"] & 1) != 0
    || ([(Espresso::ANECompilerEngine *)v2 isEqualToString:@"H14G"] & 1) != 0
    || ([(Espresso::ANECompilerEngine *)v2 isEqualToString:@"N301"] & 1) != 0)
  {
    uint64_t v3 = 1;
  }
  else
  {
    uint64_t v3 = [(Espresso::ANECompilerEngine *)v2 isEqualToString:@"H14G.N301"];
  }

  return v3;
}

void sub_1920ECF30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t Espresso::ANECompilerEngine::mix_elementwise_kernel::is_valid_for_engine(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v6 = a3[6];
  BOOL v7 = *(std::__shared_weak_count **)(v6 + 80);
  if (v7)
  {
    int v8 = std::__shared_weak_count::lock(v7);
    if (v8) {
      id v9 = *(const Espresso::net **)(v6 + 72);
    }
    else {
      id v9 = 0;
    }
  }
  else
  {
    id v9 = 0;
    int v8 = 0;
  }
  Espresso::ANECompilerEngine::ane_arch_allow_network_override((uint64_t)v9 + 472);
  long long v10 = (Espresso::ANECompilerEngine *)objc_claimAutoreleasedReturnValue();
  if (Espresso::ANECompilerEngine::is_mix(v10, v11))
  {
    long long v97 = *(_OWORD *)a2;
    *a2 = 0;
    a2[1] = 0;
    uint64_t is_valid_for_engine = Espresso::ANECompilerEngine::elementwise_kernel::is_valid_for_engine(a1, (uint64_t)&v97, (uint64_t)a3);
    if (*((void *)&v97 + 1)) {
      nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v97 + 1));
    }
    goto LABEL_160;
  }
  long long v77 = v10;
  if (a3[3] == a3[4])
  {
    unint64_t v71 = a3[9];
    uint64_t v72 = *(void *)a3[6];
    if (0x6DB6DB6DB6DB6DB7 * ((*(void *)(a3[6] + 8) - v72) >> 5) > v71)
    {
      int v73 = (uint64_t **)(v72 + 224 * v71);
      unint64_t v74 = v73[14];
      if (v74 == v73[15])
      {
        if (*((char *)v73 + 23) < 0) {
          int v73 = (uint64_t **)*v73;
        }
        *(void *)&long long v98 = v73;
        Espresso::throw_exception_selector<Espresso::invalid_state_error,char const*>("Missing top shape and name for layer '%s'", &v98);
      }
      if (*((char *)v74 + 23) < 0) {
        unint64_t v74 = (uint64_t *)*v74;
      }
      *(void *)&long long v98 = v74;
      Espresso::throw_exception_selector<Espresso::invalid_state_error,char const*>("Missing shape for blob '%s'", &v98);
    }
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v78 = (Espresso::ANECompilerEngine *)a3[3];
  uint64_t v80 = a3;
  long long v75 = a2;
  uint64_t v76 = a1;
  uint64_t v13 = a3[1] - *a3;
  if (v13)
  {
    unint64_t v14 = 0;
    int v15 = 0;
    int v16 = 0;
    uint64_t v17 = 0;
    unint64_t v18 = v13 >> 6;
    if (v18 <= 1) {
      uint64_t v19 = 1;
    }
    else {
      uint64_t v19 = v18;
    }
    do
    {
      if (v8) {
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v20 = *v80 + (v17 << 6);
      uint64_t v21 = *(void *)(v20 + 32);
      long long v22 = *(_OWORD *)(v20 + 16);
      v92[0] = *(_OWORD *)v20;
      v92[1] = v22;
      uint64_t v93 = v21;
      int v95 = 0;
      uint64_t v96 = 0;
      long long __p = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *(const void **)(v20 + 40), *(void *)(v20 + 48), (uint64_t)(*(void *)(v20 + 48) - *(void *)(v20 + 40)) >> 2);
      Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)&v98, v9, (const Espresso::layer_shape *)v92, 1);
      if ((unint64_t)v15 >= v14)
      {
        uint64_t v24 = ((char *)v15 - (char *)v16) >> 5;
        unint64_t v25 = v24 + 1;
        if ((unint64_t)(v24 + 1) >> 59) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        if ((uint64_t)(v14 - (void)v16) >> 4 > v25) {
          unint64_t v25 = (uint64_t)(v14 - (void)v16) >> 4;
        }
        if (v14 - (unint64_t)v16 >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v26 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v26 = v25;
        }
        if (v26) {
          unint64_t v26 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::blob_container::ane_blob_mapped_shape>>(v26);
        }
        else {
          uint64_t v27 = 0;
        }
        long long v28 = (_OWORD *)(v26 + 32 * v24);
        *long long v28 = v98;
        v28[1] = v99;
        if (v15 == v16)
        {
          uint64_t v31 = (__int32 *)(v26 + 32 * v24);
        }
        else
        {
          unint64_t v29 = v26 + 32 * v24;
          do
          {
            long long v30 = *((_OWORD *)v15 - 1);
            uint64_t v31 = (__int32 *)(v29 - 32);
            *(_OWORD *)(v29 - 32) = *((_OWORD *)v15 - 2);
            *(_OWORD *)(v29 - 16) = v30;
            v15 -= 8;
            v29 -= 32;
          }
          while (v15 != v16);
        }
        unint64_t v14 = v26 + 32 * v27;
        int v15 = (__int32 *)(v28 + 2);
        if (v16) {
          operator delete(v16);
        }
        int v16 = v31;
      }
      else
      {
        long long v23 = v99;
        *(_OWORD *)int v15 = v98;
        *((_OWORD *)v15 + 1) = v23;
        v15 += 8;
      }
      if (__p)
      {
        int v95 = __p;
        operator delete(__p);
      }
      if (v8) {
        nitro::nitro_function::nitro_function(v8);
      }
      ++v17;
    }
    while (v17 != v19);
    if (v8) {
      goto LABEL_41;
    }
  }
  else
  {
    int v15 = 0;
    int v16 = 0;
    if (v8) {
LABEL_41:
    }
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v10 = v77;
  long long v32 = *((_OWORD *)v78 + 1);
  uint64_t v33 = *((void *)v78 + 4);
  v86[0] = *(_OWORD *)v78;
  v86[1] = v32;
  uint64_t v87 = v33;
  std::string v88 = 0;
  std::string v89 = 0;
  uint64_t v90 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v88, *((const void **)v78 + 5), *((void *)v78 + 6), (uint64_t)(*((void *)v78 + 6) - *((void *)v78 + 5)) >> 2);
  long long v35 = v75;
  uint64_t v34 = v76;
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v91, v9, (const Espresso::layer_shape *)v86, 1);
  if (v88)
  {
    std::string v89 = v88;
    operator delete(v88);
  }
  if (v8)
  {
    nitro::nitro_function::nitro_function(v8);
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::size_type v79 = v77;
  uint64_t v37 = ((char *)v15 - (char *)v16) >> 5;
  if (v37 != 1)
  {
    if (v37 == 2)
    {
      unsigned int v46 = *(_DWORD *)(v76 + 280);
      if ((v46 > 0x21 || ((1 << v46) & 0x200C00003) == 0) && v46 != 102)
      {
        v83[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(v84, "Unsupported binary elementwise operation mode");
        goto LABEL_148;
      }
      if (*(float *)(v76 + 292) != 0.0)
      {
        v83[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(v84, "Binary Elementwise operation with params.beta != 0 has not been mapped to ANE.");
        goto LABEL_148;
      }
      if (!Espresso::ANECompilerEngine::blob_shape_ane_compatible(v16 + 8, v79))
      {
        v83[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(v84, "Input blob dimensions exceed ANE limit.");
        goto LABEL_148;
      }
    }
    else
    {
      if (v37 != 3)
      {
        v83[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(v84, "Elementwise operation with more than 2 input operands is not supported.");
        goto LABEL_148;
      }
      if (*(_DWORD *)(v76 + 280) != 101) {
        goto LABEL_54;
      }
      int32x4_t v38 = *(int32x4_t *)(v16 + 6);
      v39.i32[0] = *v16;
      v39.i32[1] = v16[2];
      BOOL v40 = v16[1] == v38.i32[3];
      v39.i64[1] = *(void *)(v16 + 3);
      v41.i64[0] = vrev64q_s32(v38).u64[0];
      v41.i64[1] = *((void *)v16 + 4);
      v38.i32[0] = vdupq_laneq_s32(v38, 2).u32[0];
      v38.i32[1] = v16[10];
      v38.i64[1] = *(void *)(v16 + 11);
      int32x2_t v42 = vrev64_s32(*(int32x2_t *)(v16 + 14));
      *(int32x2_t *)v43.i8 = v42;
      v43.i64[1] = *((void *)v16 + 8);
      if ((vminv_u8((uint8x8_t)vcltz_s8(vshl_n_s8(vmovn_s16(vuzp1q_s16((int16x8_t)vceqq_s32(v39, v38), (int16x8_t)vceqq_s32(v41, v43))), 7uLL))) & 1) == 0|| (v44.i64[0] = *(void *)(v16 + 19), v44.u64[1] = (unint64_t)v42, v45.u64[1] = (unint64_t)vrev64_s32(*(int32x2_t *)(v16 + 22)), v45.i64[0] = *(void *)(v16 + 11), (~vaddvq_s32((int32x4_t)vandq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32(vceqq_s32(v44, v45), 0x1FuLL)), (int8x16_t)xmmword_192DCA330)) & 0xF) != 0)|| !v40|| v16[10] != v16[18])
      {
LABEL_54:
        v83[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(v84, "elementwise_kernel: unsupported operation");
        goto LABEL_148;
      }
    }
    goto LABEL_113;
  }
  signed int v47 = *(_DWORD *)(v76 + 280);
  char v48 = vmaxv_u16((uint16x4_t)vmovn_s32(vceqq_s32(vdupq_n_s32(v47), (int32x4_t)xmmword_192DCA590)));
  BOOL v50 = v47 == 37 || v47 == 117;
  char v51 = v48 | ((v47 & 0xFFFFFFEF) == 11) | (v50 || v47 < 2);
  if (v47 > 12)
  {
    if (v47 != 26)
    {
      if (v47 != 13) {
        goto LABEL_79;
      }
      float v52 = *(float *)(v76 + 288);
      BOOL v53 = v52 == 0.5 || v52 >= 1.0 && floorf(v52) == v52;
      goto LABEL_78;
    }
LABEL_77:
    BOOL v53 = *(float *)(v76 + 296) >= 0.0;
LABEL_78:
    v51 |= v53;
    goto LABEL_79;
  }
  if (v47 == 10 || v47 == 12) {
    goto LABEL_77;
  }
LABEL_79:
  char is_mix_c = Espresso::ANECompilerEngine::is_mix_c(v79, v36);
  std::string::basic_string[abi:ne180100]<0>(v103, "experimental.ane.enable_sin_cos");
  std::string::basic_string[abi:ne180100]<0>(v101, "0");
  Espresso::map_const_get<std::map<std::string,std::string>>((uint64_t)v9 + 472, (uint64_t)v103, (uint64_t)v101, (std::string *)&v98);
  if (v102 < 0) {
    operator delete(v101[0]);
  }
  if (v104 < 0) {
    operator delete(v103[0]);
  }
  char v55 = is_mix_c ^ 1;
  int v56 = *(_DWORD *)(v76 + 280);
  if (v56 == 114)
  {
    if (SBYTE7(v99) < 0)
    {
      if (*((void *)&v98 + 1) != 1) {
        goto LABEL_106;
      }
      long long v58 = (long long *)v98;
    }
    else
    {
      if (SBYTE7(v99) != 1) {
        goto LABEL_106;
      }
      long long v58 = &v98;
    }
    if (*(unsigned char *)v58 != 49) {
      char v55 = 0;
    }
    goto LABEL_107;
  }
  if (v56 == 115)
  {
    if (SBYTE7(v99) < 0)
    {
      if (*((void *)&v98 + 1) == 1)
      {
        uint64_t v57 = (long long *)v98;
LABEL_96:
        if (*(unsigned char *)v57 == 49) {
          char v59 = is_mix_c ^ 1;
        }
        else {
          char v59 = 0;
        }
        goto LABEL_100;
      }
    }
    else if (SBYTE7(v99) == 1)
    {
      uint64_t v57 = &v98;
      goto LABEL_96;
    }
    char v59 = 0;
LABEL_100:
    char v55 = 0;
    v51 |= v59;
    goto LABEL_107;
  }
LABEL_106:
  char v55 = 0;
LABEL_107:
  if ((v51 & 1) == 0 && (v55 & 1) == 0)
  {
    v83[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(v84, "Unsupported unary elementwise operation");
    if (SBYTE7(v99) < 0) {
      operator delete((void *)v98);
    }
    goto LABEL_148;
  }
  if (SBYTE7(v99) < 0) {
    operator delete((void *)v98);
  }
LABEL_113:
  if (v16 != v15)
  {
    int v60 = v91[3];
    int v61 = v91[4];
    int v63 = v91[0];
    int v62 = v91[1];
    int v64 = v91[2];
    uint64_t v65 = v16;
    while (1)
    {
      if (v65[4] == v61)
      {
        if (v65[3] == v60 && v65[1] == v62 && *v65 == v63 && v65[2] == v64) {
          goto LABEL_140;
        }
        *(void *)&long long v98 = -1;
        *((void *)&v98 + 1) = -1;
        *(void *)&long long v99 = 0xFFFFFFFF00000001;
        BYTE8(v99) = 0;
        HIDWORD(v99) = 0;
        char v100 = 0;
      }
      else
      {
        *(void *)((char *)&v98 + 4) = -1;
        HIDWORD(v98) = -1;
        *(void *)&long long v99 = 0xFFFFFFFF00000001;
        BYTE8(v99) = 0;
        HIDWORD(v99) = 0;
        char v100 = 0;
        LODWORD(v98) = v61;
      }
      if (v65[3] != v60) {
        DWORD1(v98) = v60;
      }
      __int32 v66 = v65[1];
      if (v65[7])
      {
        if (v66 != v62) {
          DWORD2(v98) = v62;
        }
        if (*v65 != v63) {
          HIDWORD(v98) = v63;
        }
        __int32 v67 = v65[2];
        uint64_t v68 = &v99;
      }
      else
      {
        if (v66 != v62) {
          HIDWORD(v98) = v62;
        }
        if (*v65 != v63) {
          LODWORD(v99) = v63;
        }
        __int32 v67 = v65[2];
        uint64_t v68 = (long long *)((char *)&v98 + 8);
      }
      if (v67 != v64) {
        *(_DWORD *)uint64_t v68 = v64;
      }
      Espresso::ANECompilerEngine::mix_broadcast_kernel::supported_by_hw((uint64_t)v83, v79, v65, v91, &v98);
      if (!v83[0])
      {
        uint64_t v34 = v76;
        long long v10 = v77;
        long long v35 = v75;
        goto LABEL_148;
      }
      if (v85 < 0) {
        operator delete(v84[0]);
      }
LABEL_140:
      v65 += 8;
      if (v65 == v15)
      {
        int v15 = v16;
        uint64_t v34 = v76;
        long long v10 = v77;
        long long v35 = v75;
        break;
      }
    }
  }
  if (Espresso::ANECompilerEngine::blob_shape_ane_compatible(v15, v79))
  {
    if (Espresso::ANECompilerEngine::blob_shape_ane_compatible(v91, v79))
    {
      v83[0] = 1;
      std::string::basic_string[abi:ne180100]<0>(v84, "Success");
    }
    else
    {
      v83[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v84, "Output blob dimensions exceed ANE limit.");
    }
  }
  else
  {
    v83[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(v84, "Input blob dimensions exceed ANE limit.");
  }
LABEL_148:

  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  if (v83[0])
  {
    uint64_t is_valid_for_engine = 1;
  }
  else
  {
    uint64_t v69 = (std::__shared_weak_count *)v35[1];
    uint64_t v81 = *v35;
    char v82 = v69;
    if (v69) {
      atomic_fetch_add_explicit(&v69->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t is_valid_for_engine = Espresso::ANECompilerEngine::elementwise_kernel::is_valid_for_engine(v34, (uint64_t)&v81, (uint64_t)v80);
    if (v82) {
      nitro::nitro_function::nitro_function(v82);
    }
  }
  if (v85 < 0) {
    operator delete(v84[0]);
  }
  if (v16) {
    operator delete(v16);
  }
LABEL_160:

  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  return is_valid_for_engine;
}

void sub_1920ED914(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44)
{
  if (v44) {
    nitro::nitro_function::nitro_function(v44);
  }
  if (v45) {
    operator delete(v45);
  }

  if (v44) {
    nitro::nitro_function::nitro_function(v44);
  }
  _Unwind_Resume(a1);
}

BOOL Espresso::ANECompilerEngine::blob_shape_ane_compatible(_DWORD *a1, void *a2)
{
  uint64_t v3 = a2;
  if (Espresso::ANECompilerEngine::is_mix(v3, v4))
  {
    if ((a1[4] - 1) >> 14) {
      goto LABEL_13;
    }
    if ((a1[3] - 1) >> 14 || a1[2] != 1) {
      goto LABEL_13;
    }
  }
  else
  {
    Espresso::ANECompilerEngine::is_mix_e(v3, v5);
    if ((a1[4] - 1) >> 14 || (a1[3] - 1) >> 14 || (a1[2] - 1) >> 14) {
      goto LABEL_13;
    }
  }
  if ((a1[1] - 1) >> 16)
  {
LABEL_13:
    BOOL v7 = 0;
    goto LABEL_14;
  }
  BOOL v7 = (*a1 - 1) < 0x1000;
LABEL_14:

  return v7;
}

void sub_1920EDB24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::blob_container::ane_blob_mapped_shape>>(unint64_t a1)
{
  if (a1 >> 59) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(32 * a1);
}

void Espresso::ANECompilerEngine::engine::make_validator_for_arch(Espresso::ANECompilerEngine::engine *this, NSString *a2)
{
  uint64_t v3 = a2;
  if ([(NSString *)v3 isEqualToString:@"H11"]
    || [(NSString *)v3 isEqualToString:@"M9"]
    || [(NSString *)v3 isEqualToString:@"M10"]
    || [(NSString *)v3 isEqualToString:@"H12"]
    || [(NSString *)v3 isEqualToString:@"H13"]
    || [(NSString *)v3 isEqualToString:@"H13G"]
    || [(NSString *)v3 isEqualToString:@"H14"]
    || [(NSString *)v3 isEqualToString:@"H14G"]
    || [(NSString *)v3 isEqualToString:@"H15"]
    || [(NSString *)v3 isEqualToString:@"H15G"]
    || [(NSString *)v3 isEqualToString:@"M11"]
    || [(NSString *)v3 isEqualToString:@"N301"]
    || [(NSString *)v3 isEqualToString:@"H14G.N301"]
    || [(NSString *)v3 isEqualToString:@"H16"]
    || [(NSString *)v3 isEqualToString:@"H16G"]
    || [(NSString *)v3 isEqualToString:@"H17"])
  {

    *(void *)&long long v8 = 1;
    v7.__r_.__value_.__r.__words[0] = 0;
    if (!ANECUnitValidatorCreate())
    {
      *(void *)this = v7.__r_.__value_.__r.__words[0];
      operator new();
    }
    Espresso::throw_exception_selector<Espresso::generic_error>("Unexpected error creating validator.");
  }

  std::string::basic_string[abi:ne180100]<0>(&v7, (char *)[(NSString *)v3 UTF8String]);
  uint64_t v4 = std::string::insert(&v7, 0, "Unrecognized arch creating validator: ");
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  int64_t v9 = v4->__r_.__value_.__r.__words[2];
  long long v8 = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  if (v9 >= 0) {
    uint64_t v6 = (const char *)&v8;
  }
  else {
    uint64_t v6 = (const char *)v8;
  }
  Espresso::throw_exception_selector<Espresso::generic_error>(v6);
}

void sub_1920EDE94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1920EDEC4(void *a1)
{
}

void sub_1920EDED8(_Unwind_Exception *a1)
{
  __cxa_end_catch();

  _Unwind_Resume(a1);
}

void sub_1920EDEE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t Espresso::ANECompilerEngine::is_mix_e(Espresso::ANECompilerEngine *this, NSString *a2)
{
  uint64_t v2 = this;
  if (!v2)
  {
    Espresso::ANECompilerEngine::current_ane_arch(0);
    uint64_t v2 = (Espresso::ANECompilerEngine *)objc_claimAutoreleasedReturnValue();
  }
  if (([(Espresso::ANECompilerEngine *)v2 isEqualToString:@"M9"] & 1) != 0
    || ([(Espresso::ANECompilerEngine *)v2 isEqualToString:@"M10"] & 1) != 0
    || ([(Espresso::ANECompilerEngine *)v2 isEqualToString:@"H11"] & 1) != 0
    || ([(Espresso::ANECompilerEngine *)v2 isEqualToString:@"H12"] & 1) != 0
    || ([(Espresso::ANECompilerEngine *)v2 isEqualToString:@"H13"] & 1) != 0)
  {
    uint64_t v3 = 1;
  }
  else
  {
    uint64_t v3 = [(Espresso::ANECompilerEngine *)v2 isEqualToString:@"H13G"];
  }

  return v3;
}

void sub_1920EDFC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t Espresso::ANECompilerEngine::is_mix(Espresso::ANECompilerEngine *this, NSString *a2)
{
  uint64_t v2 = this;
  if (!v2)
  {
    Espresso::ANECompilerEngine::current_ane_arch(0);
    uint64_t v2 = (Espresso::ANECompilerEngine *)objc_claimAutoreleasedReturnValue();
  }
  if (([(Espresso::ANECompilerEngine *)v2 isEqualToString:@"M9"] & 1) != 0
    || ([(Espresso::ANECompilerEngine *)v2 isEqualToString:@"M10"] & 1) != 0
    || ([(Espresso::ANECompilerEngine *)v2 isEqualToString:@"H11"] & 1) != 0)
  {
    uint64_t v3 = 1;
  }
  else
  {
    uint64_t v3 = [(Espresso::ANECompilerEngine *)v2 isEqualToString:@"H12"];
  }

  return v3;
}

void sub_1920EE064(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t Espresso::ANECompilerEngine::elementwise_kernel::is_valid_for_engine(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v16[4] = *MEMORY[0x1E4F143B8];
  v16[0] = &unk_1EE37E3D0;
  v16[1] = a2;
  v16[2] = a3;
  v16[3] = v16;
  v15[0] = &unk_1EE37E428;
  v15[1] = a2;
  void v15[2] = a3;
  v15[3] = v15;
  long long v5 = *(_OWORD *)(a1 + 296);
  v13[0] = *(_OWORD *)(a1 + 280);
  v13[1] = v5;
  v13[2] = *(_OWORD *)(a1 + 312);
  int v14 = *(_DWORD *)(a1 + 328);
  uint64_t v6 = *(void *)(a3 + 48);
  uint64_t v11 = 0;
  BOOL v12 = 0;
  std::string v7 = *(std::__shared_weak_count **)(v6 + 80);
  if (v7)
  {
    long long v8 = std::__shared_weak_count::lock(v7);
    BOOL v12 = v8;
    if (v8) {
      uint64_t v11 = *(void *)(v6 + 72);
    }
  }
  else
  {
    long long v8 = 0;
  }
  uint64_t fixed = Espresso::ANECompilerEngine::elementwise_kernel::elementwise_kernel_valid_and_fix_p(a1, (char **)a3, (uint64_t)v13, (uint64_t)v15, a3, (uint64_t)&v11);
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100](v15);
  std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100](v16);
  return fixed;
}

void sub_1920EE1A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100]((uint64_t *)va);
  std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100]((void *)(v11 - 72));
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t Espresso::ANECompilerEngine::elementwise_kernel::elementwise_kernel_valid_and_fix_p(uint64_t a1, char **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  Espresso::ANECompilerEngine::ane_arch_allow_network_override(*(void *)a6 + 472);
  v149 = (Espresso::ANECompilerEngine *)objc_claimAutoreleasedReturnValue();
  BOOL v12 = *a2;
  uint64_t v13 = a2[1];
  if (*a2 != v13)
  {
    uint64_t v146 = a5;
    while (1)
    {
      int v15 = *(const Espresso::net **)a6;
      int v14 = *(std::__shared_weak_count **)(a6 + 8);
      if (v14) {
        atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v16 = *(_OWORD *)v12;
      long long v17 = *((_OWORD *)v12 + 1);
      uint64_t v161 = *((void *)v12 + 4);
      v160[0] = v16;
      v160[1] = v17;
      char v163 = 0;
      uint64_t v164 = 0;
      uint64_t v162 = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v162, *((const void **)v12 + 5), *((void *)v12 + 6), (uint64_t)(*((void *)v12 + 6) - *((void *)v12 + 5)) >> 2);
      Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v156, v15, (const Espresso::layer_shape *)v160, 1);
      if (v162)
      {
        char v163 = v162;
        operator delete(v162);
      }
      if (v14) {
        nitro::nitro_function::nitro_function(v14);
      }
      if (!Espresso::ANECompilerEngine::blob_shape_ane_compatible(v156, v149)) {
        break;
      }
      v12 += 64;
      if (v12 == v13)
      {
        BOOL v12 = *a2;
        unint64_t v18 = a2[1];
        a5 = v146;
        goto LABEL_13;
      }
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "elementwise_kernel: input tensor exceed ANE limit.");
    uint64_t v36 = *(void *)(a4 + 24);
    if (!v36) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    (*(void (**)(uint64_t, unsigned char *))(*(void *)v36 + 48))(v36, __p);
    goto LABEL_26;
  }
  unint64_t v18 = *a2;
LABEL_13:
  unint64_t v19 = v18 - v12;
  if (v19 >= 0x81)
  {
    std::string::basic_string[abi:ne180100]<0>(v156, "Elementwise ops for n_blobs > 2 not supported");
    uint64_t v20 = *(void *)(a4 + 24);
    if (!v20) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    (*(void (**)(uint64_t, unsigned char *))(*(void *)v20 + 48))(v20, v156);
    if ((v156[23] & 0x80000000) == 0) {
      goto LABEL_29;
    }
    uint64_t v21 = *(void **)v156;
    goto LABEL_28;
  }
  if (v19 != 128)
  {
    unsigned int v39 = *(_DWORD *)a3;
    if (*(_DWORD *)a3 != 27)
    {
      char v47 = 0;
      unsigned int v48 = *(_DWORD *)a3;
LABEL_61:
      if (v39 < 4) {
        char v47 = 1;
      }
      if (v48 == 25) {
        char v47 = 1;
      }
      if (*(float *)(a3 + 12) >= *(float *)(a3 + 8) && v48 == 119) {
        char v47 = 1;
      }
      if (v48 == 24) {
        char v62 = 1;
      }
      else {
        char v62 = v47;
      }
      int v63 = *(const Espresso::net **)a6;
      std::string::basic_string[abi:ne180100]<0>(__p, "experimental.ane.floor");
      std::string::basic_string[abi:ne180100]<0>(&v165, "0");
      Espresso::map_const_get<std::map<std::string,std::string>>((uint64_t)v63 + 472, (uint64_t)__p, (uint64_t)&v165, (std::string *)v156);
      if ((v156[23] & 0x80000000) != 0)
      {
        BOOL v64 = *(void *)&v156[8] == 1 && **(unsigned char **)v156 == 49;
        operator delete(*(void **)v156);
      }
      else
      {
        BOOL v64 = v156[23] == 1 && v156[0] == 49;
      }
      if (SBYTE7(v166) < 0) {
        operator delete((void *)v165);
      }
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
      int v65 = *(_DWORD *)a3;
      BOOL v66 = *(_DWORD *)a3 == 117 && v64;
      char v67 = v62 | v66;
      if (v65 == 38) {
        char v68 = 1;
      }
      else {
        char v68 = v67;
      }
      if (v65 == 12)
      {
        unint64_t v71 = *(const Espresso::net **)a6;
        std::string::basic_string[abi:ne180100]<0>(__p, "experimental.ane.enable_rsqrt");
        std::string::basic_string[abi:ne180100]<0>(&v165, "0");
        Espresso::map_const_get<std::map<std::string,std::string>>((uint64_t)v71 + 472, (uint64_t)__p, (uint64_t)&v165, (std::string *)v156);
        if (SBYTE7(v166) < 0) {
          operator delete((void *)v165);
        }
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
        if ((v156[23] & 0x80000000) != 0)
        {
          if (*(void *)&v156[8] == 1 && **(unsigned char **)v156 == 49) {
            char v68 = 1;
          }
          operator delete(*(void **)v156);
        }
        else if (v156[23] == 1 && v156[0] == 49)
        {
          char v68 = 1;
        }
        int v65 = *(_DWORD *)a3;
        if (v68) {
          goto LABEL_321;
        }
      }
      else
      {
        if (v65 == 13)
        {
          float v69 = *(float *)(a3 + 8);
          BOOL v70 = v69 >= 1.0;
          if (floorf(v69) != v69) {
            BOOL v70 = 0;
          }
          v68 |= v70;
        }
        if (v68) {
          goto LABEL_321;
        }
      }
      if (v65 != 112)
      {
        std::to_string((std::string *)__p, v65);
        uint64_t v72 = std::string::insert((std::string *)__p, 0, "elementwise operation not supported ");
        long long v73 = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
        *(void *)&v156[16] = *((void *)&v72->__r_.__value_.__l + 2);
        *(_OWORD *)long long v156 = v73;
        v72->__r_.__value_.__l.__size_ = 0;
        v72->__r_.__value_.__r.__words[2] = 0;
        v72->__r_.__value_.__r.__words[0] = 0;
        uint64_t v74 = *(void *)(a4 + 24);
        if (!v74) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        (*(void (**)(uint64_t, unsigned char *))(*(void *)v74 + 48))(v74, v156);
        if ((v156[23] & 0x80000000) != 0) {
          operator delete(*(void **)v156);
        }
LABEL_26:
        if ((__p[23] & 0x80000000) == 0)
        {
LABEL_29:
          uint64_t v37 = 0;
          goto LABEL_30;
        }
        uint64_t v21 = *(void **)__p;
LABEL_28:
        operator delete(v21);
        goto LABEL_29;
      }
LABEL_321:
      uint64_t v37 = 1;
      goto LABEL_30;
    }
    BOOL v40 = *(uint64_t **)(a5 + 48);
    uint64_t v41 = *v40;
    int32x2_t v42 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>((uint64_t)(v40 + 3), *(void **)(*v40 + 224 * *(void *)(a5 + 72) + 136));
    if (v40 + 4 == v42) {
      goto LABEL_59;
    }
    uint64_t v43 = v42[7];
    uint64_t v44 = v41 + 224 * v43;
    int32x4_t v45 = (void *)(v44 + 48);
    int v46 = *(char *)(v44 + 71);
    if (v46 < 0)
    {
      if (v45[1] != 10) {
        goto LABEL_59;
      }
      int32x4_t v45 = (void *)*v45;
    }
    else if (v46 != 10)
    {
      goto LABEL_59;
    }
    long long v58 = (void *)*v45;
    int v59 = *((unsigned __int16 *)v45 + 4);
    if (v58 != (void *)0x6974617669746361 || v59 != 28271) {
      goto LABEL_59;
    }
    long long v75 = *(const void **)(v41 + 224 * v43 + 88);
    if (!v75) {
      goto LABEL_59;
    }
    if (!v76) {
      goto LABEL_59;
    }
    long long v77 = *(std::__shared_weak_count **)(v41 + 224 * v43 + 96);
    if (v77) {
      atomic_fetch_add_explicit(&v77->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v78 = (*(uint64_t (**)(void *))(*(void *)v76 + 384))(v76);
    int v79 = *(_DWORD *)v78;
    BOOL v81 = *(_DWORD *)v78 == 7 || (*(_DWORD *)v78 & 0xFFFFFFFD) == 1;
    if (v79 == 14)
    {
      if (fabsf(*(float *)(v78 + 4)) <= 5.0)
      {
        BOOL v82 = fabsf(*(float *)(v78 + 8)) <= 5.0;
        goto LABEL_231;
      }
    }
    else if (v79 == 5)
    {
      BOOL v82 = 0;
      if (fabsf(*(float *)(v78 + 4)) <= 5.0) {
        BOOL v81 = 1;
      }
LABEL_231:
      int v101 = v82 || v81;
      if (v77) {
        nitro::nitro_function::nitro_function(v77);
      }
      if (v101)
      {
        char v47 = 1;
        goto LABEL_60;
      }
LABEL_59:
      char v47 = 0;
LABEL_60:
      unsigned int v48 = *(_DWORD *)a3;
      goto LABEL_61;
    }
    BOOL v82 = 0;
    goto LABEL_231;
  }
  long long v22 = *((_OWORD *)v12 + 1);
  uint64_t v23 = *((void *)v12 + 4);
  *(_OWORD *)long long v156 = *(_OWORD *)v12;
  *(_OWORD *)&v156[16] = v22;
  uint64_t v157 = v23;
  long long v158 = 0uLL;
  uint64_t v159 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v158, *((const void **)v12 + 5), *((void *)v12 + 6), (uint64_t)(*((void *)v12 + 6) - *((void *)v12 + 5)) >> 2);
  uint64_t v24 = *a2;
  long long v25 = *((_OWORD *)*a2 + 5);
  *(_OWORD *)long long __p = *((_OWORD *)*a2 + 4);
  *(_OWORD *)&__p[16] = v25;
  unint64_t v26 = (const void *)*((void *)v24 + 13);
  uint64_t v153 = *((void *)v24 + 12);
  v154[0] = 0;
  v154[1] = 0;
  uint64_t v155 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v154, v26, *((void *)v24 + 14), (uint64_t)(*((void *)v24 + 14) - (void)v26) >> 2);
  if (*(_DWORD *)a3 < 0xAu || (*(_DWORD *)a3 - 29) <= 3)
  {
    uint64_t v28 = Espresso::layer_shape::total_dim((Espresso::layer_shape *)v156);
    if (v28 < Espresso::layer_shape::total_dim((Espresso::layer_shape *)__p))
    {
      long long v29 = *(_OWORD *)v156;
      long long v30 = *(_OWORD *)&v156[16];
      long long v165 = *(_OWORD *)v156;
      long long v166 = *(_OWORD *)&v156[16];
      uint64_t v31 = v157;
      uint64_t v32 = v159;
      uint64_t v167 = v157;
      *(_OWORD *)long long v156 = *(_OWORD *)__p;
      *(_OWORD *)&v156[16] = *(_OWORD *)&__p[16];
      uint64_t v157 = v153;
      uint64_t v159 = v155;
      uint64_t v153 = v31;
      *(_OWORD *)long long __p = v29;
      *(_OWORD *)&__p[16] = v30;
      long long v33 = v158;
      long long v158 = *(_OWORD *)v154;
      *(_OWORD *)__n128 v154 = v33;
      uint64_t v155 = v32;
    }
  }
  if ((Espresso::ANECompilerEngine::is_mix(v149, v27) & 1) != 0
    || ((v49 = *(_DWORD *)a3, char v35 = 1, *(_DWORD *)a3 > 0x21u) || ((1 << v49) & 0x200C00003) == 0)
    && v49 != 100
    && v49 != 102)
  {
    char v35 = 0;
  }
  if (Espresso::ANECompilerEngine::can_handle_configuration_dependent_transforms(*(Espresso::ANECompilerEngine **)a6, v34))
  {
    if (a5 && *(_DWORD *)a3 <= 1u && !Espresso::layer_shape::operator==((uint64_t)v156, (uint64_t)__p))
    {
      Espresso::net::get_producers_of_blobs(*(Espresso::net **)a6, (uint64_t)&v165);
      uint64_t v51 = *(void *)(**(void **)(a5 + 48) + 224 * *(void *)(a5 + 72) + 136);
      if (std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::find<std::string>(&v165, v51))
      {
        float v52 = *(Espresso::net **)a6;
        BOOL v53 = std::unordered_map<std::string,unsigned long>::at(&v165, v51);
        uint64_t v54 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)(*(void *)(*((void *)v52 + 4) + 16 * *v53) + 40), "load_constant")- 1;
      }
      else
      {
        uint64_t v54 = -1;
      }
      uint64_t v83 = v51 + 24;
      if (!std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::find<std::string>(&v165, v83)|| (v84 = *(Espresso::net **)a6, char v85 = std::unordered_map<std::string,unsigned long>::at(&v165, v83), !std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)(*(void *)(*((void *)v84 + 4) + 16 * *v85) + 40), "load_constant")))
      {
        if (v54 == -1)
        {
          if (*(void *)&v156[12] == *(void *)&__p[12])
          {
            uint64_t v37 = 1;
          }
          else
          {
            std::string::basic_string[abi:ne180100]<0>(&v151, "Elementwise with implicit broadcast along Seq or Batch dimension is not supported.");
            std::function<void ()(std::string const&)>::operator()(*(void *)(a4 + 24));
            if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v151.__r_.__value_.__l.__data_);
            }
            uint64_t v37 = 0;
          }
          std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::~__hash_table((uint64_t)&v165);
          char v91 = 0;
          goto LABEL_316;
        }
      }
      std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::~__hash_table((uint64_t)&v165);
    }
    if (v35) {
      goto LABEL_147;
    }
    BOOL v57 = *(_DWORD *)a3 == 13;
    if (*(_DWORD *)a3 == 100 || *(_DWORD *)a3 == 33) {
      int v56 = *(unsigned __int8 *)(a3 + 24);
    }
    else {
      int v56 = 0;
    }
  }
  else
  {
    if (v35) {
      goto LABEL_147;
    }
    unsigned int v55 = *(_DWORD *)a3;
    if (*(_DWORD *)a3 <= 0x21u && ((1 << v55) & 0x200C00003) != 0 || v55 == 100) {
      int v56 = *(unsigned __int8 *)(a3 + 24);
    }
    else {
      int v56 = 0;
    }
    BOOL v57 = v55 == 13;
  }
  if (v56 | v57)
  {
    std::string::basic_string[abi:ne180100]<0>(&v165, "elementwise with broadcasting not supported");
    uint64_t v86 = *(void *)(a4 + 24);
    if (!v86) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
LABEL_146:
    (*(void (**)(uint64_t, long long *))(*(void *)v86 + 48))(v86, &v165);
    goto LABEL_312;
  }
LABEL_147:
  if (*(_DWORD *)__p == *(_DWORD *)v156)
  {
    unsigned int v88 = *(_DWORD *)&__p[4];
    int v87 = *(_DWORD *)&__p[8];
    if (*(_DWORD *)&__p[4] == *(_DWORD *)&v156[4])
    {
      int v89 = *(_DWORD *)&__p[12];
      if (*(void *)&__p[8] == *(void *)&v156[8])
      {
        unsigned int v90 = *(_DWORD *)a3;
        if ((*(_DWORD *)a3 & 0xFFFFFFFE) == 0x16)
        {
          char v91 = 0;
          uint64_t v37 = 1;
          goto LABEL_316;
        }
LABEL_239:
        if (v90 > 0x1E || ((1 << v90) & 0x60400120) == 0)
        {
          if (a5 && v90 == 23)
          {
LABEL_242:
            uint64_t v102 = *(void *)(a5 + 72);
            uint64_t v103 = **(void **)(a5 + 48);
            uint64_t v104 = v103 + 224 * v102;
            uint64_t v105 = *(void *)(v104 + 136);
            long long v147 = (uint64_t *)(v104 + 136);
            int v107 = (uint64_t *)(v104 + 144);
            uint64_t v106 = *(void *)(v104 + 144);
            uint64_t v145 = v107;
            if (v106 != v105)
            {
              uint64_t v140 = a4;
              uint64_t v108 = 0;
              uint64_t v109 = 0;
              unint64_t v110 = 0;
              char v142 = 0;
              uint64_t v111 = v103 + 224 * v102;
              uint64_t v143 = (void *)(v111 + 184);
              uint64_t v144 = 0;
              uint64_t v141 = (void *)(v111 + 192);
              uint64_t v139 = a1 + 336;
              uint64_t v106 = v105;
              v148 = (unsigned int *)a3;
              while (1)
              {
                unint64_t v112 = *(uint64_t **)(a5 + 48);
                std::string v113 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>((uint64_t)(v112 + 3), (void *)(v106 + v108));
                if (v112 + 4 == v113)
                {
                  LODWORD(v144) = v144 + 1;
                  goto LABEL_298;
                }
                uint64_t v114 = v113[7];
                uint64_t v115 = *v112;
                uint64_t v116 = v115 + 224 * v114;
                uint64_t v117 = (void *)(v116 + 48);
                int v118 = *(char *)(v116 + 71);
                if (v118 < 0)
                {
                  uint64_t v121 = v117[1];
                  uint64_t v119 = a5;
                  if (v121 == 10)
                  {
                    uint64_t v117 = (void *)*v117;
LABEL_261:
                    BOOL v125 = 0;
                    unint64_t v126 = (void *)*v117;
                    int v127 = *((unsigned __int16 *)v117 + 4);
                    BOOL v120 = v126 == (void *)0x616C70736E617274 && v127 == 29806;
                    goto LABEL_267;
                  }
                  if (v121 == 13)
                  {
                    BOOL v120 = 0;
                    uint64_t v117 = (void *)*v117;
                    goto LABEL_253;
                  }
                }
                else
                {
                  uint64_t v119 = a5;
                  if (v118 == 10) {
                    goto LABEL_261;
                  }
                  if (v118 == 13)
                  {
                    BOOL v120 = 0;
LABEL_253:
                    unint64_t v122 = (void *)*v117;
                    uint64_t v123 = *(void *)((char *)v117 + 5);
                    BOOL v125 = v122 == (void *)0x6E6F635F64616F6CLL && v123 == 0x746E6174736E6F63;
                    goto LABEL_267;
                  }
                }
                BOOL v125 = 0;
                BOOL v120 = 0;
LABEL_267:
                if (v90 - 29 > 1)
                {
                  HIDWORD(v144) |= v125;
                  v142 |= v120;
                  if (!v125) {
                    goto LABEL_297;
                  }
                }
                else
                {
                  if (v110 < (uint64_t)(*v141 - *v143) >> 6)
                  {
                    BOOL v129 = Espresso::layer_shape::total_dim((Espresso::layer_shape *)(*v143 + v109)) == 1 && v125;
                    HIDWORD(v144) |= v129;
                  }
                  if (!v125)
                  {
LABEL_297:
                    a5 = v119;
                    goto LABEL_298;
                  }
                }
                if ((v90 & 0xFFFFFFFE) == 0x16)
                {
                  if (Espresso::layer_shape::total_dim((Espresso::layer_shape *)(*v143 + v109)) != 1)
                  {
                    uint64_t v130 = v115 + 224 * v114;
                    uint64_t v131 = *(void *)(v130 + 88);
                    char v132 = *(std::__shared_weak_count **)(v130 + 96);
                    if (v132) {
                      atomic_fetch_add_explicit(&v132->__shared_owners_, 1uLL, memory_order_relaxed);
                    }
                    if (*(void *)a6 && *(void *)(*(void *)a6 + 576) && v131 && *(void *)(v131 + 224))
                    {
                      std::string v133 = *(std::__shared_weak_count **)(a6 + 8);
                      uint64_t v150 = v133;
                      if (v133) {
                        atomic_fetch_add_explicit(&v133->__shared_owners_, 1uLL, memory_order_relaxed);
                      }
                      std::string::basic_string[abi:ne180100]<0>(&v151, "constant_blob");
                      (*(void (**)(long long *__return_ptr))(*(void *)v139 + 120))(&v165);
                      if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(v151.__r_.__value_.__l.__data_);
                      }
                      if (v150) {
                        nitro::nitro_function::nitro_function(v150);
                      }
                    }
                    if (v132) {
                      nitro::nitro_function::nitro_function(v132);
                    }
                  }
                  unsigned int v90 = *v148;
                }
                a5 = v119;
                if ((v90 == 8 || v90 == 5) && (*(int *)(*v143 + v109) > 1 || *(int *)(*v143 + v109 + 4) >= 2))
                {
                  std::string::basic_string[abi:ne180100]<0>(&v165, "elementwise with spatial broadcast doesn't supported constant with width/height > 1 when adding or multiplying");
                  uint64_t v138 = *(void *)(v140 + 24);
                  if (!v138) {
                    std::__throw_bad_function_call[abi:ne180100]();
                  }
                  (*(void (**)(uint64_t, long long *))(*(void *)v138 + 48))(v138, &v165);
LABEL_312:
                  if (SBYTE7(v166) < 0)
                  {
                    char v100 = (void *)v165;
LABEL_314:
                    operator delete(v100);
                  }
                  goto LABEL_315;
                }
LABEL_298:
                ++v110;
                uint64_t v134 = *v145;
                uint64_t v106 = *v147;
                v109 += 64;
                v108 += 24;
                if (v110 >= 0xAAAAAAAAAAAAAAABLL * ((*v145 - *v147) >> 3))
                {
                  a4 = v140;
                  int v135 = v144;
                  char v136 = BYTE4(v144);
                  char v137 = v142;
                  goto LABEL_301;
                }
              }
            }
            char v136 = 0;
            char v137 = 0;
            int v135 = 0;
            uint64_t v134 = v106;
LABEL_301:
            if ((v136 & 1) == 0 && (v137 & 1) == 0)
            {
              if (v90 == 5)
              {
                if (v135 < 1) {
                  goto LABEL_309;
                }
              }
              else if (v90 != 8 || v135 <= 0)
              {
                goto LABEL_309;
              }
              if (v134 - v106 != 48)
              {
LABEL_309:
                std::string::basic_string[abi:ne180100]<0>(&v165, "elementwise add or mul with channel broadcast supported only with constant vector or transplant input");
                std::function<void ()(std::string const&)>::operator()(*(void *)(a4 + 24));
                goto LABEL_312;
              }
            }
          }
LABEL_324:
          uint64_t v37 = 0;
          char v91 = 1;
          if (v90 <= 0x21 && ((1 << v90) & 0x260C00123) != 0
            || v90 - 100 <= 0xD && ((1 << (v90 - 100)) & 0x2CF9) != 0)
          {
            goto LABEL_316;
          }
          goto LABEL_226;
        }
LABEL_241:
        if (a5) {
          goto LABEL_242;
        }
        goto LABEL_324;
      }
      BOOL v93 = *(_DWORD *)&__p[12] == 1;
      BOOL v92 = *(_DWORD *)&__p[8] == 1;
      if (*(void *)&__p[8] == 0x100000001)
      {
        unsigned int v90 = *(_DWORD *)a3;
        if (*(int *)a3 <= 32)
        {
          if (v90)
          {
            if (v90 != 1) {
              goto LABEL_239;
            }
            unsigned int v90 = 7;
          }
          else
          {
            unsigned int v90 = 4;
          }
          goto LABEL_225;
        }
        if (v90 != 33 && v90 != 100 || (v35 & 1) != 0) {
          goto LABEL_239;
        }
LABEL_219:
        std::string::basic_string[abi:ne180100]<0>(&v165, "elementwise subtract does not support broadcast on this arch");
        std::function<void ()(std::string const&)>::operator()(*(void *)(a4 + 24));
        goto LABEL_312;
      }
    }
    else
    {
      int v89 = *(_DWORD *)&__p[12];
      BOOL v93 = *(_DWORD *)&__p[12] == 1;
      BOOL v92 = *(_DWORD *)&__p[8] == 1;
      if (*(void *)&__p[8] == 0x100000001)
      {
        BOOL v93 = 1;
        BOOL v92 = 1;
        int v87 = 1;
      }
    }
  }
  else
  {
    unsigned int v88 = *(_DWORD *)&__p[4];
    int v87 = *(_DWORD *)&__p[8];
    BOOL v92 = *(_DWORD *)&__p[8] == 1;
    int v89 = *(_DWORD *)&__p[12];
    BOOL v93 = *(_DWORD *)&__p[12] == 1;
  }
  BOOL v94 = *(_DWORD *)__p == 1 && v88 == 1;
  int v95 = v94;
  if (v94 && v93 && v87 == *(_DWORD *)&v156[8])
  {
    unsigned int v90 = *(_DWORD *)a3;
    if (*(int *)a3 > 32)
    {
      if (v90 != 33 && v90 != 100 || (v35 & 1) != 0) {
        goto LABEL_239;
      }
      goto LABEL_219;
    }
    if (v90)
    {
      if (v90 != 1) {
        goto LABEL_239;
      }
      unsigned int v90 = 8;
    }
    else
    {
      unsigned int v90 = 5;
    }
    goto LABEL_197;
  }
  char v96 = !v93;
  if (*(_DWORD *)__p != *(_DWORD *)v156) {
    char v96 = 1;
  }
  if ((v96 & 1) != 0 || __PAIR64__(v87, v88) != *(void *)&v156[4])
  {
    if ((v95 & v92) == 1)
    {
      if (*(_DWORD *)&__p[16] * v89 == *(_DWORD *)&v156[16] * *(_DWORD *)&v156[12])
      {
        unsigned int v90 = *(_DWORD *)a3;
        if (*(int *)a3 > 32)
        {
          if (v90 != 33 && v90 != 100 || (v35 & 1) != 0) {
            goto LABEL_239;
          }
          goto LABEL_219;
        }
        if (v90)
        {
          if (v90 != 1) {
            goto LABEL_239;
          }
          unsigned int v90 = 30;
        }
        else
        {
          unsigned int v90 = 29;
        }
LABEL_197:
        *(_DWORD *)a3 = v90;
        goto LABEL_241;
      }
      char v97 = !v93;
      if (*(_DWORD *)&__p[16] != 1) {
        char v97 = 1;
      }
      if ((v97 & 1) == 0)
      {
        unsigned int v90 = *(_DWORD *)a3;
        if (!*(_DWORD *)a3)
        {
          unsigned int v90 = 31;
          goto LABEL_225;
        }
        if (v90 == 1)
        {
          if (Espresso::ANECompilerEngine::is_mix(v149, v50))
          {
            unsigned int v90 = 32;
            goto LABEL_225;
          }
          unsigned int v90 = *(_DWORD *)a3;
        }
        if ((v90 == 100 || v90 == 33) && (v35 & 1) == 0)
        {
          std::string::basic_string[abi:ne180100]<0>(&v165, "elementwise subtract does not support broadcast one this arch");
          std::function<void ()(std::string const&)>::operator()(*(void *)(a4 + 24));
          goto LABEL_312;
        }
        goto LABEL_239;
      }
    }
    std::string::basic_string[abi:ne180100]<0>(&v165, "Invalid elementwise dimensions");
    uint64_t v86 = *(void *)(a4 + 24);
    if (!v86) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    goto LABEL_146;
  }
  unsigned int v90 = *(_DWORD *)a3;
  if (*(int *)a3 > 32)
  {
    if (v90 != 33 && v90 != 100 || (v35 & 1) != 0) {
      goto LABEL_239;
    }
    goto LABEL_219;
  }
  if (v90)
  {
    if (v90 != 1) {
      goto LABEL_239;
    }
    unsigned int v90 = 9;
  }
  else
  {
    unsigned int v90 = 6;
  }
LABEL_225:
  *(_DWORD *)a3 = v90;
LABEL_226:
  std::to_string(&v151, v90);
  long long v98 = std::string::insert(&v151, 0, "elementwise operation not supported ");
  long long v99 = *(_OWORD *)&v98->__r_.__value_.__l.__data_;
  *(void *)&long long v166 = *((void *)&v98->__r_.__value_.__l + 2);
  long long v165 = v99;
  v98->__r_.__value_.__l.__size_ = 0;
  v98->__r_.__value_.__r.__words[2] = 0;
  v98->__r_.__value_.__r.__words[0] = 0;
  std::function<void ()(std::string const&)>::operator()(*(void *)(a4 + 24));
  if (SBYTE7(v166) < 0) {
    operator delete((void *)v165);
  }
  if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0)
  {
    char v100 = (void *)v151.__r_.__value_.__r.__words[0];
    goto LABEL_314;
  }
LABEL_315:
  char v91 = 0;
  uint64_t v37 = 0;
LABEL_316:
  if (v154[0])
  {
    v154[1] = v154[0];
    operator delete(v154[0]);
  }
  if ((void)v158)
  {
    *((void *)&v158 + 1) = v158;
    operator delete((void *)v158);
  }
  if (v91) {
    goto LABEL_321;
  }
LABEL_30:

  return v37;
}

void sub_1920EF458(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48)
{
  if (*(char *)(v48 - 121) < 0) {
    operator delete(*(void **)(v48 - 144));
  }
  if (__p) {
    operator delete(__p);
  }
  if (a47) {
    operator delete(a47);
  }

  _Unwind_Resume(a1);
}

BOOL Espresso::ANECompilerEngine::anonymous namespace'::slice_kernel_need_transpose(_DWORD *a1, NSString *a2, int a3, Espresso::ANECompilerEngine *this)
{
  int v5 = (int)a2;
  int is_mix = Espresso::ANECompilerEngine::is_mix(this, a2);
  BOOL result = 0;
  if (is_mix && !*a1)
  {
    BOOL v9 = v5 == 4 || v5 == 2;
    int v10 = v9;
    if (v9) {
      int v11 = 63;
    }
    else {
      int v11 = 31;
    }
    if ((v11 & a3) == 0) {
      return 0;
    }
    BOOL v9 = v10 == 0;
    unint64_t v12 = 12;
    if (!v9) {
      unint64_t v12 = 28;
    }
    return v12 < a3;
  }
  return result;
}

uint64_t Espresso::ANECompilerEngine::anonymous namespace'::get_shape_for_CNNAxis(int a1, unsigned int *a2)
{
  switch(a1)
  {
    case 0:
      a2 += 4;
      break;
    case 1:
      a2 += 3;
      break;
    case 2:
      if (a2[7]) {
        ++a2;
      }
      else {
        a2 += 2;
      }
      break;
    case 3:
      if (!a2[7]) {
        ++a2;
      }
      break;
    case 4:
      unsigned int v2 = a2[7];
      if (v2)
      {
        if (v2 != 1) {
          Espresso::throw_exception_selector<Espresso::invalid_state_error>("Unexpected blob layout.");
        }
        a2 += 2;
      }
      break;
    default:
      Espresso::throw_exception_selector<Espresso::invalid_state_error>("Invalid CNN axis");
  }
  return *a2;
}

uint64_t Espresso::ANECompilerEngine::activation_kernel::is_valid_for_engine(uint64_t a1, int64x2_t **a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(a1 + 304);
  BOOL v5 = 1;
  switch(v4)
  {
    case 0:
    case 4:
    case 5:
    case 6:
    case 8:
    case 19:
    case 21:
    case 22:
    case 23:
    case 25:
      return v5;
    case 1:
    case 3:
      uint64_t v6 = a2[1];
      v18[0] = *a2;
      v18[1] = v6;
      if (v6) {
        atomic_fetch_add_explicit(&v6->i64[1], 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(&v13, "ACTIVATION_SIGMOID and ACTIVATION_TANH can be well approximated. Do precision check to make sure");
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)&v13, a3, 1);
      Espresso::emit_kernel_validation_warning(v18, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
      goto LABEL_8;
    case 2:
      uint64_t v6 = a2[1];
      v12[0] = *a2;
      v12[1] = v6;
      if (v6) {
        atomic_fetch_add_explicit(&v6->i64[1], 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(&v13, "Approximation precision of ACTIVATION_LEAKY_RELU is data dependent. Do precision check to make sure");
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)&v13, a3, 1);
      Espresso::emit_kernel_validation_warning(v12, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
LABEL_8:
      if (v17) {
        nitro::nitro_function::nitro_function(v17);
      }
      v10.__r_.__value_.__r.__words[0] = (std::string::size_type)v16;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v10);
      v10.__r_.__value_.__r.__words[0] = (std::string::size_type)v15;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v10);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v13.__r_.__value_.__l.__data_);
      }
      if (v6) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v6);
      }
      return 1;
    case 7:
      if (fabsf(*(float *)(a1 + 308) + -0.2) >= 0.000001) {
        goto LABEL_32;
      }
      BOOL v5 = fabsf(*(float *)(a1 + 312) + -0.5) < 0.000001;
      break;
    case 14:
      if (*(float *)(a1 + 312) < *(float *)(a1 + 308)) {
        goto LABEL_20;
      }
      return v5;
    default:
LABEL_20:
      std::string v7 = a2[1];
      v11[0] = *a2;
      v11[1] = v7;
      if (v7)
      {
        atomic_fetch_add_explicit(&v7->i64[1], 1uLL, memory_order_relaxed);
        int v4 = *(_DWORD *)(a1 + 304);
      }
      std::to_string(&v10, v4);
      long long v8 = std::string::insert(&v10, 0, "unsupported activation function ");
      std::string v13 = *v8;
      v8->__r_.__value_.__l.__size_ = 0;
      v8->__r_.__value_.__r.__words[2] = 0;
      v8->__r_.__value_.__r.__words[0] = 0;
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)&v13, a3, 0);
      Espresso::emit_kernel_validation_warning(v11, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
      if (v17) {
        nitro::nitro_function::nitro_function(v17);
      }
      unint64_t v19 = (void **)v16;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v19);
      unint64_t v19 = (void **)v15;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v19);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v13.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v10.__r_.__value_.__l.__data_);
      }
      if (v7) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v7);
      }
LABEL_32:
      BOOL v5 = 0;
      break;
  }
  return v5;
}

void sub_1920EFA30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((Espresso::base_kernel::validate_for_engine_warning_t *)&a26);
  if (a25 < 0) {
    operator delete(__p);
  }
  if (v26) {
    nitro::nitro_function::nitro_function(v26);
  }
  _Unwind_Resume(a1);
}

std::string *Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(std::string *this, long long *a2, uint64_t a3, std::string::value_type a4)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v7 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v7;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  std::vector<Espresso::layer_shape>::__init_with_size[abi:ne180100]<Espresso::layer_shape*,Espresso::layer_shape*>(this[1].__r_.__value_.__r.__words, *(long long **)a3, *(long long **)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 6);
  this[2].__r_.__value_.__r.__words[0] = 0;
  this[2].__r_.__value_.__l.__size_ = 0;
  this[2].__r_.__value_.__r.__words[2] = 0;
  std::vector<Espresso::layer_shape>::__init_with_size[abi:ne180100]<Espresso::layer_shape*,Espresso::layer_shape*>(this[2].__r_.__value_.__r.__words, *(long long **)(a3 + 24), *(long long **)(a3 + 32), (uint64_t)(*(void *)(a3 + 32) - *(void *)(a3 + 24)) >> 6);
  std::string::size_type v8 = *(void *)(a3 + 56);
  this[3].__r_.__value_.__r.__words[0] = *(void *)(a3 + 48);
  this[3].__r_.__value_.__l.__size_ = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)&this[3].__r_.__value_.__r.__words[2] = *(_OWORD *)(a3 + 64);
  this[4].__r_.__value_.__s.__data_[8] = a4;
  return this;
}

void sub_1920EFB84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  if (*(char *)(v2 + 23) < 0) {
    operator delete(*(void **)v2);
  }
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::mix_broadcast_kernel::supported_by_hw(uint64_t a1, void *a2, _DWORD *a3, _DWORD *a4, long long *a5)
{
  id v23 = a2;
  if (*((unsigned char *)a5 + 24))
  {
    *(unsigned char *)a1 = 0;
    std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 8), "Broadcast with nd mode not supported on ANE.");
  }
  else if (*((unsigned char *)a5 + 32))
  {
    *(unsigned char *)a1 = 0;
    std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 8), "Dynamic Broadcast shapes not supported on ANE.");
  }
  else
  {
    int v9 = a4[7];
    long long v22 = *a5;
    int v10 = *((_DWORD *)a5 + 4);
    int v11 = operator new(0x14uLL);
    unint64_t v12 = 0;
    *(_OWORD *)int v11 = v22;
    v11[4] = v10;
    do
    {
      if ((int)v11[(void)v12] >= 2)
      {
        if (*((_DWORD *)a5 + 7))
        {
          ANECAxisForNDAxis = Espresso::ANECompilerEngine::GetANECAxisForNDAxis(v12, (int)a3[6], v9 == 0);
LABEL_9:
          BOOL v14 = ANECAxisForNDAxis != @"Width" || a3[4] == 1;
          int v15 = ANECAxisForNDAxis;
          if (!v14)
          {
LABEL_13:
            *(unsigned char *)a1 = 0;
            std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 8), "Input tensor's magnitude of dimension to be broadcasted is not 1.");
            goto LABEL_49;
          }
LABEL_14:
          if (v15 == @"Height" && a3[3] != 1) {
            goto LABEL_13;
          }
LABEL_19:
          if (v15 == @"Channel")
          {
            long long v17 = v15;
            if (a3[1] != 1) {
              goto LABEL_13;
            }
          }
          else
          {
            long long v17 = v15;
          }
LABEL_23:
          if (v17 == @"Batch")
          {
            unint64_t v18 = v17;
            if (*a3 != 1) {
              goto LABEL_13;
            }
          }
          else
          {
            unint64_t v18 = v17;
          }
        }
        else
        {
          int v19 = a3[6];
          ANECAxisForNDAxis = @"Width";
          int v15 = @"Height";
          switch((int)v12)
          {
            case 0:
              goto LABEL_9;
            case 1:
              goto LABEL_14;
            case 2:
              int v15 = @"Channel";
              if (v9) {
                goto LABEL_19;
              }
              unint64_t v18 = @"Depth";
              if (v19 != 5) {
                goto LABEL_19;
              }
              break;
            case 3:
              if (v9)
              {
                long long v17 = @"Batch";
              }
              else
              {
                int v15 = @"Channel";
                long long v17 = @"Batch";
                if (v19 == 5) {
                  goto LABEL_19;
                }
              }
              goto LABEL_23;
            case 4:
              if (v9)
              {
                unint64_t v18 = @"Depth";
              }
              else
              {
                long long v17 = @"Batch";
                unint64_t v18 = @"Depth";
                if (v19 == 5) {
                  goto LABEL_23;
                }
              }
              break;
            default:
              Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Invalid axis or rank specified.");
          }
        }
        if (v18 == @"Depth" && a3[2] != 1) {
          goto LABEL_13;
        }
      }
      unint64_t v12 = (Espresso::ANECompilerEngine *)((char *)v12 + 1);
    }
    while (v12 != (Espresso::ANECompilerEngine *)5);
    if (Espresso::ANECompilerEngine::blob_shape_ane_compatible(a3, v23))
    {
      BOOL v20 = Espresso::ANECompilerEngine::blob_shape_ane_compatible(a4, v23);
      uint64_t v21 = (void *)(a1 + 8);
      if (v20)
      {
        *(unsigned char *)a1 = 1;
        std::string::basic_string[abi:ne180100]<0>(v21, "Success");
      }
      else
      {
        *(unsigned char *)a1 = 0;
        std::string::basic_string[abi:ne180100]<0>(v21, "Output tensor extents exceed ANE limits.");
      }
    }
    else
    {
      *(unsigned char *)a1 = 0;
      std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 8), "Input tensor extents exceed ANE limits.");
    }
LABEL_49:
    operator delete(v11);
  }
}

void sub_1920EFF08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  operator delete(v12);

  _Unwind_Resume(a1);
}

uint64_t std::function<void ()(std::string const&)>::operator()(uint64_t a1)
{
  if (!a1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  int v1 = *(uint64_t (**)(void))(*(void *)a1 + 48);

  return v1();
}

void std::vector<Espresso::AOT::Backends::CostModel::anonymous namespace'::DecisionTreeGroup>::push_back[abi:ne180100](char **a1, long long *a2)
{
  BOOL v5 = a1[1];
  int v4 = a1[2];
  if (v5 < v4)
  {
    if (*((char *)a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)a1[1], *(const std::string::value_type **)a2, *((void *)a2 + 1));
    }
    else
    {
      long long v6 = *a2;
      *((void *)v5 + 2) = *((void *)a2 + 2);
      *(_OWORD *)BOOL v5 = v6;
    }
    *((void *)v5 + 4) = 0;
    *((void *)v5 + 3) = v5 + 32;
    *((void *)v5 + 5) = 0;
    std::map<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__tree_node<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,void *> *,long>>>((uint64_t *)v5 + 3, *((const void ***)a2 + 3), (const void ***)a2 + 4);
    BOOL v14 = (std::string *)(v5 + 48);
    a1[1] = v5 + 48;
    goto LABEL_32;
  }
  uint64_t v7 = v5 - *a1;
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * (v7 >> 4);
  if (v8 + 1 > 0x555555555555555) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 4);
  uint64_t v10 = 2 * v9;
  if (2 * v9 <= v8 + 1) {
    uint64_t v10 = v8 + 1;
  }
  if (v9 >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v11 = 0x555555555555555;
  }
  else {
    unint64_t v11 = v10;
  }
  if (v11)
  {
    if (v11 > 0x555555555555555) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    unint64_t v12 = (char *)operator new(48 * v11);
    std::string v13 = (std::string *)&v12[16 * (v7 >> 4)];
    if ((*((char *)a2 + 23) & 0x80000000) == 0) {
      goto LABEL_13;
    }
LABEL_17:
    std::string::__init_copy_ctor_external(v13, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    goto LABEL_18;
  }
  unint64_t v12 = 0;
  std::string v13 = (std::string *)(16 * (v7 >> 4));
  if (*((char *)a2 + 23) < 0) {
    goto LABEL_17;
  }
LABEL_13:
  *(_OWORD *)&v13->__r_.__value_.__l.__data_ = *a2;
  v13->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
LABEL_18:
  int v15 = (uint64_t *)&v12[v7];
  void v15[4] = 0;
  v15[3] = (uint64_t)(v15 + 4);
  v15 += 3;
  void v15[2] = 0;
  std::map<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__tree_node<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,void *> *,long>>>(v15, *((const void ***)a2 + 3), (const void ***)a2 + 4);
  long long v16 = &v12[48 * v11];
  BOOL v14 = v13 + 2;
  long long v17 = *a1;
  unint64_t v18 = a1[1];
  if (v18 == *a1)
  {
    *a1 = (char *)v13;
    a1[1] = (char *)v14;
    a1[2] = v16;
  }
  else
  {
    uint64_t v24 = v16;
    uint64_t v19 = 0;
    do
    {
      BOOL v20 = (const std::string::value_type **)&v18[v19 * 24 - 48];
      if (v18[v19 * 24 - 25] < 0)
      {
        std::string::__init_copy_ctor_external(&v13[v19 - 2], *v20, *(void *)&v18[v19 * 24 - 40]);
      }
      else
      {
        long long v21 = *(_OWORD *)v20;
        *((void *)&v13[v19 - 1] - 1) = *(void *)&v18[v19 * 24 - 32];
        *(_OWORD *)&v13[v19 - 2].__r_.__value_.__l.__data_ = v21;
      }
      v13[v19 - 1].__r_.__value_.__l.__size_ = 0;
      v13[v19 - 1].__r_.__value_.__r.__words[0] = (std::string::size_type)&v13[v19 - 1].__r_.__value_.__l.__size_;
      v13[v19 - 1].__r_.__value_.__r.__words[2] = 0;
      std::map<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__tree_node<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,void *> *,long>>>((uint64_t *)&v13[v19 - 1], *(const void ***)&v18[v19 * 24 - 24], (const void ***)&v18[v19 * 24 - 16]);
      v19 -= 2;
    }
    while (&v18[v19 * 24] != v17);
    unint64_t v18 = *a1;
    long long v22 = a1[1];
    BOOL v14 = v13 + 2;
    *a1 = (char *)&v13[v19];
    a1[1] = (char *)&v13[2];
    a1[2] = v24;
    if (v22 != v18)
    {
      uint64_t v23 = (uint64_t)(v22 - 24);
      do
      {
        std::__tree<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>>>::destroy(v23, *(void **)(v23 + 8));
        if (*(char *)(v23 - 1) < 0) {
          operator delete(*(void **)(v23 - 24));
        }
        v23 -= 48;
      }
      while ((char *)(v23 + 24) != v18);
    }
  }
  if (v18) {
    operator delete(v18);
  }
LABEL_32:
  a1[1] = (char *)v14;
}

void sub_1920F0244(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p)
{
  if (!v12) {
    _Unwind_Resume(exception_object);
  }
  operator delete(v12);
  _Unwind_Resume(exception_object);
}

void std::__tree<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>>>::destroy(a1, a2[1]);
    int v4 = (void *)a2[10];
    if (v4 == a2 + 7)
    {
      (*(void (**)(void *))(a2[7] + 32))(a2 + 7);
      if ((*((char *)a2 + 55) & 0x80000000) == 0)
      {
LABEL_6:
        BOOL v5 = a2;
LABEL_8:
        operator delete(v5);
        return;
      }
    }
    else
    {
      if (v4) {
        (*(void (**)(void *))(*v4 + 40))(v4);
      }
      if ((*((char *)a2 + 55) & 0x80000000) == 0) {
        goto LABEL_6;
      }
    }
    operator delete((void *)a2[4]);
    BOOL v5 = a2;
    goto LABEL_8;
  }
}

void **std::map<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::map[abi:ne180100](void **a1, const void **a2, uint64_t a3)
{
  a1[1] = 0;
  int v4 = (uint64_t *)(a1 + 1);
  a1[2] = 0;
  *a1 = a1 + 1;
  if (a3)
  {
    uint64_t v6 = 56 * a3;
    do
    {
      uint64_t v7 = std::__tree<std::__value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::__find_equal<std::string>(a1, v4, &v14, &v13, a2);
      if (!*v7)
      {
        std::__tree<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>>>::__construct_node<std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>> const&>((uint64_t)a1, (uint64_t)a2, (uint64_t)&v12);
        unint64_t v8 = v14;
        unint64_t v9 = v12;
        *unint64_t v12 = 0;
        v9[1] = 0;
        v9[2] = (uint64_t)v8;
        *uint64_t v7 = (uint64_t)v9;
        uint64_t v10 = (void *)**a1;
        if (v10)
        {
          *a1 = v10;
          unint64_t v9 = (uint64_t *)*v7;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v9);
        a1[2] = (void *)((char *)a1[2] + 1);
      }
      a2 += 7;
      v6 -= 56;
    }
    while (v6);
  }
  return a1;
}

void sub_1920F04F4(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__tree_node<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,void *> *,long>>>(uint64_t *result, const void **a2, const void ***a3)
{
  if (a2 != (const void **)a3)
  {
    v18[7] = v3;
    v18[8] = v4;
    uint64_t v6 = a2;
    uint64_t v7 = result;
    unint64_t v8 = result + 1;
    do
    {
      BOOL result = std::__tree<std::__value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::__find_equal<std::string>((uint64_t **)v7, v8, v18, &v17, v6 + 4);
      if (*result)
      {
        unint64_t v9 = (const void **)v6[1];
        if (v9) {
          goto LABEL_10;
        }
      }
      else
      {
        uint64_t v10 = (uint64_t **)result;
        std::__tree<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>>>::__construct_node<std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>> const&>((uint64_t)v7, (uint64_t)(v6 + 4), (uint64_t)&v16);
        unint64_t v11 = v18[0];
        unint64_t v12 = v16;
        *long long v16 = 0;
        v12[1] = 0;
        v12[2] = (uint64_t)v11;
        *uint64_t v10 = v12;
        std::string v13 = *(void **)*v7;
        if (v13)
        {
          *uint64_t v7 = (uint64_t)v13;
          unint64_t v12 = *v10;
        }
        BOOL result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v7[1], v12);
        ++v7[2];
        unint64_t v9 = (const void **)v6[1];
        if (v9)
        {
          do
          {
LABEL_10:
            BOOL v14 = (const void ***)v9;
            unint64_t v9 = (const void **)*v9;
          }
          while (v9);
          goto LABEL_3;
        }
      }
      do
      {
        BOOL v14 = (const void ***)v6[2];
        BOOL v15 = *v14 == v6;
        uint64_t v6 = (const void **)v14;
      }
      while (!v15);
LABEL_3:
      uint64_t v6 = (const void **)v14;
    }
    while (v14 != a3);
  }
  return result;
}

uint64_t std::__tree<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>>>::__construct_node<std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (char *)operator new(0x58uLL);
  uint64_t v7 = v6;
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v6 + 32), *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *((_OWORD *)v6 + 2) = *(_OWORD *)a2;
    *((void *)v6 + 6) = *(void *)(a2 + 16);
  }
  uint64_t result = *(void *)(a2 + 48);
  if (!result) {
    goto LABEL_7;
  }
  if (result != a2 + 24)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
LABEL_7:
    *((void *)v7 + 10) = result;
    *(unsigned char *)(a3 + 16) = 1;
    return result;
  }
  *((void *)v7 + 10) = v7 + 56;
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 24))(result);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_1920F0714(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,void *>>>>::~unique_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_1920F0728(_Unwind_Exception *a1)
{
  if (*(char *)(v2 + 55) < 0) {
    operator delete(*v3);
  }
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,void *>>>>::~unique_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::__find_equal<std::string>(uint64_t **a1, uint64_t *a2, uint64_t **a3, uint64_t **a4, const void **a5)
{
  unint64_t v8 = a1 + 1;
  if (a1 + 1 == (uint64_t **)a2) {
    goto LABEL_20;
  }
  int v10 = *((char *)a2 + 55);
  int v11 = *((char *)a5 + 23);
  if (v11 >= 0) {
    size_t v12 = *((unsigned __int8 *)a5 + 23);
  }
  else {
    size_t v12 = (size_t)a5[1];
  }
  if (v11 >= 0) {
    std::string v13 = a5;
  }
  else {
    std::string v13 = *a5;
  }
  if (v10 >= 0) {
    size_t v14 = *((unsigned __int8 *)a2 + 55);
  }
  else {
    size_t v14 = a2[5];
  }
  if (v10 >= 0) {
    BOOL v15 = a2 + 4;
  }
  else {
    BOOL v15 = (const void *)a2[4];
  }
  if (v14 >= v12) {
    size_t v16 = v12;
  }
  else {
    size_t v16 = v14;
  }
  int v17 = memcmp(v13, v15, v16);
  BOOL v18 = v12 < v14;
  if (v17) {
    BOOL v18 = v17 < 0;
  }
  if (v18)
  {
LABEL_20:
    uint64_t v19 = (uint64_t *)*a2;
    if (*a1 == a2)
    {
      long long v21 = a2;
LABEL_53:
      if (v19)
      {
        *a3 = v21;
        return v21 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v19)
    {
      BOOL v20 = (uint64_t *)*a2;
      do
      {
        long long v21 = v20;
        BOOL v20 = (uint64_t *)v20[1];
      }
      while (v20);
    }
    else
    {
      unint64_t v26 = a2;
      do
      {
        long long v21 = (uint64_t *)v26[2];
        BOOL v27 = *v21 == (void)v26;
        unint64_t v26 = v21;
      }
      while (v27);
    }
    int v28 = *((char *)a5 + 23);
    int v29 = *((char *)v21 + 55);
    if (v29 >= 0) {
      size_t v30 = *((unsigned __int8 *)v21 + 55);
    }
    else {
      size_t v30 = v21[5];
    }
    if (v29 >= 0) {
      uint64_t v31 = v21 + 4;
    }
    else {
      uint64_t v31 = (const void *)v21[4];
    }
    if (v28 >= 0) {
      size_t v32 = *((unsigned __int8 *)a5 + 23);
    }
    else {
      size_t v32 = (size_t)a5[1];
    }
    if (v28 >= 0) {
      long long v33 = a5;
    }
    else {
      long long v33 = *a5;
    }
    if (v32 >= v30) {
      size_t v34 = v30;
    }
    else {
      size_t v34 = v32;
    }
    int v35 = memcmp(v31, v33, v34);
    BOOL v36 = v30 < v32;
    if (v35) {
      BOOL v36 = v35 < 0;
    }
    if (v36) {
      goto LABEL_53;
    }
    uint64_t v37 = *v8;
    if (*v8)
    {
      do
      {
        while (1)
        {
          int32x4_t v38 = (uint64_t **)v37;
          uint64_t v41 = (const void *)v37[4];
          unsigned int v39 = v37 + 4;
          BOOL v40 = v41;
          int v42 = *((char *)v39 + 23);
          if (v42 >= 0) {
            size_t v43 = *((unsigned __int8 *)v39 + 23);
          }
          else {
            size_t v43 = v39[1];
          }
          if (v42 >= 0) {
            uint64_t v44 = v39;
          }
          else {
            uint64_t v44 = v40;
          }
          if (v43 >= v32) {
            size_t v45 = v32;
          }
          else {
            size_t v45 = v43;
          }
          int v46 = memcmp(v33, v44, v45);
          BOOL v47 = v32 < v43;
          if (v46) {
            BOOL v47 = v46 < 0;
          }
          if (!v47) {
            break;
          }
          uint64_t v37 = *v38;
          unint64_t v8 = v38;
          if (!*v38) {
            goto LABEL_74;
          }
        }
        int v48 = memcmp(v44, v33, v45);
        BOOL v49 = v43 < v32;
        if (v48) {
          BOOL v49 = v48 < 0;
        }
        if (!v49) {
          break;
        }
        unint64_t v8 = v38 + 1;
        uint64_t v37 = v38[1];
      }
      while (v37);
    }
    else
    {
      int32x4_t v38 = v8;
    }
LABEL_74:
    *a3 = (uint64_t *)v38;
    return (uint64_t *)v8;
  }
  int v22 = memcmp(v15, v13, v16);
  BOOL v23 = v14 < v12;
  if (v22) {
    BOOL v23 = v22 < 0;
  }
  if (!v23)
  {
    *a3 = a2;
    *a4 = a2;
    return (uint64_t *)a4;
  }
  uint64_t v24 = a2[1];
  if (v24)
  {
    long long v25 = (uint64_t *)a2[1];
    do
    {
      a4 = (uint64_t **)v25;
      long long v25 = (uint64_t *)*v25;
    }
    while (v25);
  }
  else
  {
    BOOL v50 = a2;
    do
    {
      a4 = (uint64_t **)v50[2];
      BOOL v27 = *a4 == v50;
      BOOL v50 = (uint64_t *)a4;
    }
    while (!v27);
  }
  if (a4 != v8)
  {
    int v51 = *((char *)a4 + 55);
    if (v51 >= 0) {
      size_t v52 = *((unsigned __int8 *)a4 + 55);
    }
    else {
      size_t v52 = (size_t)a4[5];
    }
    if (v51 >= 0) {
      BOOL v53 = (uint64_t *)(a4 + 4);
    }
    else {
      BOOL v53 = a4[4];
    }
    if (v52 >= v12) {
      size_t v54 = v12;
    }
    else {
      size_t v54 = v52;
    }
    int v55 = memcmp(v13, v53, v54);
    BOOL v56 = v12 < v52;
    if (v55) {
      BOOL v56 = v55 < 0;
    }
    if (!v56)
    {
      BOOL v57 = *v8;
      if (*v8)
      {
        long long v58 = a3;
        do
        {
          while (1)
          {
            int v59 = (uint64_t **)v57;
            char v62 = (const void *)v57[4];
            int v60 = v57 + 4;
            int v61 = v62;
            int v63 = *((char *)v60 + 23);
            if (v63 >= 0) {
              size_t v64 = *((unsigned __int8 *)v60 + 23);
            }
            else {
              size_t v64 = v60[1];
            }
            if (v63 >= 0) {
              int v65 = v60;
            }
            else {
              int v65 = v61;
            }
            if (v64 >= v12) {
              size_t v66 = v12;
            }
            else {
              size_t v66 = v64;
            }
            int v67 = memcmp(v13, v65, v66);
            BOOL v68 = v12 < v64;
            if (v67) {
              BOOL v68 = v67 < 0;
            }
            if (!v68) {
              break;
            }
            BOOL v57 = *v59;
            unint64_t v8 = v59;
            if (!*v59) {
              goto LABEL_119;
            }
          }
          int v69 = memcmp(v65, v13, v66);
          BOOL v70 = v64 < v12;
          if (v69) {
            BOOL v70 = v69 < 0;
          }
          if (!v70) {
            break;
          }
          unint64_t v8 = v59 + 1;
          BOOL v57 = v59[1];
        }
        while (v57);
      }
      else
      {
        int v59 = v8;
        long long v58 = a3;
      }
LABEL_119:
      void *v58 = (uint64_t *)v59;
      return (uint64_t *)v8;
    }
  }
  if (v24)
  {
    *a3 = (uint64_t *)a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return (uint64_t *)a4;
}

uint64_t std::__function::__func<float (*)(Espresso::AOT::DTrees::CostModelFeature const&),std::allocator<float (*)(Espresso::AOT::DTrees::CostModelFeature const&)>,float ()(Espresso::AOT::DTrees::CostModelFeature const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE377F70;
  a2[1] = v2;
  return result;
}

uint64_t std::__shared_ptr_pointer<MIL::IROperation  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

const char *E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset::GetName(E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset *this)
{
  return "E5Backend_ios16";
}

__n128 Espresso::auto_optimize@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v3 = a2;
  int v4 = (uint64_t *)a1;
  uint64_t v241 = *MEMORY[0x1E4F143B8];
  if (!*(unsigned char *)(a2 + 108))
  {
    if (*(unsigned char *)(a2 + 12)) {
      goto LABEL_188;
    }
    uint64_t v6 = *(std::__shared_weak_count **)(a1 + 8);
    v212[0] = *(void *)a1;
    v212[1] = (uint64_t)v6;
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    Espresso::fuse_biases(v212, (uint64_t *)v221);
    uint64_t v7 = (std::__shared_weak_count *)v4[1];
    *(_OWORD *)int v4 = *(_OWORD *)v221;
    if (v7) {
      nitro::nitro_function::nitro_function(v7);
    }
    if (v6) {
      nitro::nitro_function::nitro_function(v6);
    }
    if (*v4)
    {
      unint64_t v8 = (std::__shared_weak_count *)v4[1];
      v211[0] = *v4;
      v211[1] = (uint64_t)v8;
      if (v8) {
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      Espresso::fuse_batchnorm(v211, v221);
      unint64_t v9 = (std::__shared_weak_count *)v4[1];
      *(_OWORD *)int v4 = *(_OWORD *)v221;
      if (v9) {
        nitro::nitro_function::nitro_function(v9);
      }
      if (v8) {
        nitro::nitro_function::nitro_function(v8);
      }
      uint64_t v5 = (Espresso *)*v4;
      if (*v4) {
        goto LABEL_25;
      }
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "fuse_batchnorm error");
    }
    else
    {
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "fuse_biases error");
    }
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (*(unsigned char *)a2
    || *(unsigned char *)(a2 + 2)
    || *(unsigned char *)(a2 + 3)
    || *(unsigned char *)(a2 + 13)
    || *(unsigned char *)(a2 + 48)
    || *(void *)(a2 + 56) != *(void *)(a2 + 64))
  {
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("skip_weight_optimizations not compatible with provided options");
  }
  if (!*(unsigned char *)(a2 + 12))
  {
    uint64_t v5 = *(Espresso **)a1;
LABEL_25:
    Espresso::fuse_nonlinearities(v5, (Espresso::net *)a2);
    int v11 = (std::__shared_weak_count *)*v4;
    int v10 = (std::__shared_weak_count *)v4[1];
    if (v10)
    {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      v219 = v10;
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    else
    {
      v219 = 0;
    }
    v218 = v11;
    v176 = v10;
    Espresso::network_optimization_graph::network_optimization_graph((Espresso::net **)v221, (uint64_t)&v218);
    uint64_t v178 = v3;
    if (v219) {
      nitro::nitro_function::nitro_function(v219);
    }
    *((void *)&v229 + 1) = 0;
    v230[0] = 0;
    *(void *)&long long v229 = (char *)&v229 + 8;
    int v214 = 0;
    uint64_t shared_owners = v11[1].__shared_owners_;
    if (v11[1].__shared_weak_owners_ != shared_owners)
    {
      uint64_t v13 = 0;
      unint64_t v14 = 0;
      p_uint64_t shared_owners = (uint64_t)&v11[2].__shared_owners_;
      do
      {
        uint64_t v15 = *(void *)(shared_owners + v13);
        size_t v16 = *(const void **)(v15 + 64);
        if (v16)
        {
          if (v17)
          {
            BOOL v18 = v17;
            uint64_t v19 = *(std::__shared_weak_count **)(v15 + 72);
            if (v19) {
              atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            BOOL v20 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v223 + 1, v14, &v214);
            if ((char *)v20[6] - (char *)v20[5] == 4)
            {
              unint64_t v21 = *(int *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v223 + 1, v14, &v214)[5];
              uint64_t v22 = *(void *)(v11[1].__shared_owners_ + 16 * v21);
              BOOL v23 = *(const void **)(v22 + 64);
              if (v23)
              {
                {
                  uint64_t v24 = *(std::__shared_weak_count **)(v22 + 72);
                  if (v24) {
                    atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
                  }
                  uint64_t v25 = (*(uint64_t (**)(void *))(*(void *)v18 + 320))(v18);
                  if (*(unsigned char *)(v25 + 44))
                  {
                    *(unsigned char *)(v25 + 44) = 0;
                    unint64_t v217 = v21;
                    unint64_t v26 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(p_shared_owners, v21, &v217);
                    unint64_t v213 = v14;
                    BOOL v27 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(p_shared_owners, v14, &v213);
                    if (v27 != v26) {
                      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)(v27 + 3), (std::string *)v26[3], (std::string *)v26[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v26[4] - v26[3]) >> 3));
                    }
                    std::__tree<int>::__emplace_unique_key_args<int,int const&>((uint64_t *)&v229, v21, v21);
                  }
                  if (v24) {
                    nitro::nitro_function::nitro_function(v24);
                  }
                }
              }
            }
            if (v19) {
              nitro::nitro_function::nitro_function(v19);
            }
          }
        }
        int v214 = ++v14;
        uint64_t shared_owners = v11[1].__shared_owners_;
        v13 += 16;
      }
      while (v14 < (v11[1].__shared_weak_owners_ - shared_owners) >> 4);
    }
    v232 = (std::__shared_weak_count **)v11;
    v233 = v176;
    if (v176) {
      atomic_fetch_add_explicit(&v176->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    remove_unused_layers(&v229, (uint64_t)&v232);
    if (v176)
    {
      nitro::nitro_function::nitro_function(v176);
      atomic_fetch_add_explicit(&v176->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v215 = v11;
    uint64_t v216 = v176;
    std::map<std::string,Espresso::layer_shape>::map[abi:ne180100]((uint64_t)&v234, (long long **)&v11[7].__shared_weak_owners_);
    std::map<std::string,Espresso::layer_shape>::map[abi:ne180100]((uint64_t)&v237, (long long **)&v11[8].__shared_weak_owners_);
    reshape_network((Espresso **)&v215, (uint64_t **)&v234);
    std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v237, v238);
    std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v234, v235);
    if (v176) {
      nitro::nitro_function::nitro_function(v176);
    }
    std::__tree<int>::destroy(*((void **)&v229 + 1));
    std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy((void *)v224);
    std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(*((void **)&v222 + 1));
    if (v221[1]) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v221[1]);
    }
    if (v176) {
      nitro::nitro_function::nitro_function(v176);
    }
    int v28 = *(std::__shared_weak_count **)a1;
    int v29 = *(std::__shared_weak_count **)(a1 + 8);
    if (v29)
    {
      atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
      v219 = v29;
      atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    else
    {
      v219 = 0;
    }
    v218 = v28;
    Espresso::network_optimization_graph::network_optimization_graph((Espresso::net **)v221, (uint64_t)&v218);
    if (v219) {
      nitro::nitro_function::nitro_function(v219);
    }
    *((void *)&v229 + 1) = 0;
    v230[0] = 0;
    *(void *)&long long v229 = (char *)&v229 + 8;
    LODWORD(v213) = 0;
    uint64_t v30 = v28[1].__shared_owners_;
    if (v28[1].__shared_weak_owners_ != v30)
    {
      uint64_t v31 = 0;
      unint64_t v32 = 0;
      char v177 = v29;
      do
      {
        uint64_t v33 = *(void *)(v30 + v31);
        size_t v34 = *(const void **)(v33 + 64);
        if (v34)
        {
          if (v35)
          {
            BOOL v36 = *(std::__shared_weak_count **)(v33 + 72);
            if (v36) {
              atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            uint64_t v37 = (*(uint64_t (**)(void *))(*(void *)v35 + 320))(v35);
            if (*(unsigned char *)(v37 + 32))
            {
              unint64_t v217 = v32;
              int32x4_t v38 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)&v28[2].__shared_owners_, v32, &v217);
              if (v38[4] - v38[3] == 48)
              {
                unsigned int v39 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v223 + 1, v32, &v213);
                if (v39[5] != v39[6])
                {
                  unint64_t v40 = *((int *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v223 + 1, v32, &v213)[6]- 1);
                  uint64_t v41 = *(void *)(v28[1].__shared_owners_ + 16 * v40);
                  int v42 = *(const void **)(v41 + 64);
                  if (v42)
                  {
                    {
                      size_t v43 = *(std::__shared_weak_count **)(v41 + 72);
                      if (v43) {
                        atomic_fetch_add_explicit(&v43->__shared_owners_, 1uLL, memory_order_relaxed);
                      }
                      unint64_t v217 = v40;
                      uint64_t v44 = (const std::string *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)&v28[2].__shared_owners_, v40, &v217)[3];
                      *(unsigned char *)(v37 + 32) = 0;
                      unint64_t v217 = v32;
                      size_t v45 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)&v28[2].__shared_owners_, v32, &v217);
                      std::string::operator=((std::string *)(v45[3] + 24), v44);
                      std::__tree<int>::__emplace_unique_key_args<int,int const&>((uint64_t *)&v229, v40, v40);
                      int v29 = v177;
                      if (v43) {
                        nitro::nitro_function::nitro_function(v43);
                      }
                    }
                  }
                }
              }
            }
            if (v36) {
              nitro::nitro_function::nitro_function(v36);
            }
          }
        }
        LODWORD(v213) = ++v32;
        uint64_t v30 = v28[1].__shared_owners_;
        v31 += 16;
      }
      while (v32 < (v28[1].__shared_weak_owners_ - v30) >> 4);
    }
    v232 = (std::__shared_weak_count **)v28;
    v233 = v29;
    if (v29) {
      atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    remove_unused_layers(&v229, (uint64_t)&v232);
    if (v29)
    {
      nitro::nitro_function::nitro_function(v29);
      atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v215 = v28;
    uint64_t v216 = v29;
    std::map<std::string,Espresso::layer_shape>::map[abi:ne180100]((uint64_t)&v234, (long long **)&v28[7].__shared_weak_owners_);
    std::map<std::string,Espresso::layer_shape>::map[abi:ne180100]((uint64_t)&v237, (long long **)&v28[8].__shared_weak_owners_);
    reshape_network((Espresso **)&v215, (uint64_t **)&v234);
    std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v237, v238);
    std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v234, v235);
    if (v29) {
      nitro::nitro_function::nitro_function(v29);
    }
    std::__tree<int>::destroy(*((void **)&v229 + 1));
    std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy((void *)v224);
    std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(*((void **)&v222 + 1));
    if (v221[1]) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v221[1]);
    }
    if (v29) {
      nitro::nitro_function::nitro_function(v29);
    }
    int v46 = *(Espresso::net **)a1;
    if (!*(unsigned char *)(v178 + 108))
    {
      BOOL v47 = *(atomic_ullong **)(a1 + 8);
      v210[0] = *(const Espresso::net **)a1;
      v210[1] = (const Espresso::net *)v47;
      if (v47) {
        atomic_fetch_add_explicit(v47 + 1, 1uLL, memory_order_relaxed);
      }
      Espresso::fold_batchnorm(v210, v221);
      int v48 = *(std::__shared_weak_count **)(a1 + 8);
      *(_OWORD *)a1 = *(_OWORD *)v221;
      if (v48) {
        nitro::nitro_function::nitro_function(v48);
      }
      if (v47) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v47);
      }
      if (!*(void *)a1)
      {
        uint64_t v175 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v175, "fold_batchnorm error");
        __cxa_throw(v175, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      BOOL v49 = *(std::__shared_weak_count **)(a1 + 8);
      v209[0] = *(void *)a1;
      v209[1] = (uint64_t)v49;
      if (v49) {
        atomic_fetch_add_explicit(&v49->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      Espresso::fuse_scale(v209, v221);
      BOOL v50 = *(std::__shared_weak_count **)(a1 + 8);
      *(_OWORD *)a1 = *(_OWORD *)v221;
      if (v50) {
        nitro::nitro_function::nitro_function(v50);
      }
      if (v49) {
        nitro::nitro_function::nitro_function(v49);
      }
      int v51 = *(std::__shared_weak_count **)(a1 + 8);
      v208[0] = *(void *)a1;
      v208[1] = (uint64_t)v51;
      if (v51) {
        atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      Espresso::fuse_biases(v208, (uint64_t *)v221);
      BOOL v53 = *(std::__shared_weak_count **)(a1 + 8);
      *(_OWORD *)a1 = *(_OWORD *)v221;
      if (v53) {
        nitro::nitro_function::nitro_function(v53);
      }
      if (v51) {
        nitro::nitro_function::nitro_function(v51);
      }
      Espresso::fuse_nonlinearities(*(Espresso **)a1, v52);
      size_t v54 = *(std::__shared_weak_count **)(a1 + 8);
      v207[0] = *(void *)a1;
      v207[1] = (uint64_t)v54;
      if (v54) {
        atomic_fetch_add_explicit(&v54->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      Espresso::fuse_biases(v207, (uint64_t *)v221);
      int v55 = *(std::__shared_weak_count **)(a1 + 8);
      *(_OWORD *)a1 = *(_OWORD *)v221;
      if (v55) {
        nitro::nitro_function::nitro_function(v55);
      }
      if (v54) {
        nitro::nitro_function::nitro_function(v54);
      }
      int v46 = *(Espresso::net **)a1;
    }
    Espresso::fuse_vertical<Espresso::generic_general_padding_kernel,Espresso::generic_convolution_kernel>(v46, &__block_literal_global_420);
    BOOL v56 = *(Espresso **)a1;
    id v57 = &__block_literal_global_6;
    Espresso::network_optimization_graph::network_optimization_graph((Espresso::network_optimization_graph *)&v229, v56);
    long long v226 = 0u;
    long long v227 = 0u;
    long long v224 = 0u;
    *(_OWORD *)std::string __p = 0u;
    long long v222 = 0u;
    long long v223 = 0u;
    *(_OWORD *)v221 = 0u;
    v228[0] = 0;
    v228[1] = v56;
    LODWORD(v234) = 0;
    uint64_t v58 = *((void *)v56 + 4);
    if (*((void *)v56 + 5) != v58)
    {
      unint64_t v59 = 0;
      do
      {
        LODWORD(v228[0]) = v59;
        long long v60 = *(_OWORD *)(v58 + 16 * v59);
        uint64_t v61 = *(void *)(v58 + 16 * v59 + 8);
        if (v61) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v61 + 8), 1uLL, memory_order_relaxed);
        }
        char v62 = (std::__shared_weak_count *)*((void *)&v223 + 1);
        long long v223 = v60;
        if (v62) {
          nitro::nitro_function::nitro_function(v62);
        }
        int v63 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v230, v59, &v234);
        if ((char *)v63[6] - (char *)v63[5] == 4)
        {
          HIDWORD(v228[0]) = *(_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v230, v228[0], v228)[5];
          size_t v64 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v231, SHIDWORD(v228[0]), (_DWORD *)v228 + 1);
          if ((char *)v64[6] - (char *)v64[5] == 4)
          {
            uint64_t v65 = *((void *)v56 + 4);
            long long v66 = *(_OWORD *)(v65 + 16 * SHIDWORD(v228[0]));
            uint64_t v67 = *(void *)(v65 + 16 * SHIDWORD(v228[0]) + 8);
            if (v67) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v67 + 8), 1uLL, memory_order_relaxed);
            }
            BOOL v68 = (std::__shared_weak_count *)*((void *)&v224 + 1);
            long long v224 = v66;
            if (v68) {
              nitro::nitro_function::nitro_function(v68);
            }
            uint64_t v69 = v223;
            BOOL v70 = *(void **)(v223 + 64);
            if (v70
            {
              unint64_t v71 = *(atomic_ullong **)(v69 + 72);
              if (v71) {
                atomic_fetch_add_explicit(v71 + 1, 1uLL, memory_order_relaxed);
              }
            }
            else
            {
              unint64_t v71 = 0;
            }
            uint64_t v72 = (std::__shared_weak_count *)v221[1];
            v221[0] = v70;
            v221[1] = v71;
            if (v72) {
              nitro::nitro_function::nitro_function(v72);
            }
            uint64_t v73 = v224;
            uint64_t v74 = *(void **)(v224 + 64);
            if (v74
            {
              uint64_t v75 = *(void *)(v73 + 72);
              if (v75) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v75 + 8), 1uLL, memory_order_relaxed);
              }
            }
            else
            {
              uint64_t v75 = 0;
            }
            uint64_t v76 = (std::__shared_weak_count *)*((void *)&v222 + 1);
            *(void *)&long long v222 = v74;
            *((void *)&v222 + 1) = v75;
            if (v76)
            {
              nitro::nitro_function::nitro_function(v76);
              uint64_t v74 = (void *)v222;
            }
            if (v221[0] && v74) {
              ___ZN8Espresso13auto_optimizeENSt3__110shared_ptrINS_3netEEENS_21auto_optimize_optionsE_block_invoke_2((uint64_t)&__block_literal_global_6, (uint64_t)v221);
            }
          }
        }
        LODWORD(v234) = ++v59;
        uint64_t v58 = *((void *)v56 + 4);
      }
      while (v59 < (*((void *)v56 + 5) - v58) >> 4);
    }
    std::__sort<std::__less<int,int> &,int *>();
    long long v77 = __p[0];
    uint64_t v78 = __p[1];
    if (__p[0] != __p[1])
    {
      int v79 = 0;
      do
      {
        Espresso::net::remove_layer(v56, v79 + *v77++);
        --v79;
      }
      while (v77 != v78);
    }
    uint64_t v80 = (int *)*((void *)&v226 + 1);
    BOOL v81 = (int *)v227;
    if (*((void *)&v226 + 1) != (void)v227)
    {
      int v82 = 0;
      do
      {
        int v83 = *v80;
        LODWORD(v215) = v82 + *v80;
        LODWORD(v234) = v83;
        v235 = (char *)*((void *)v80 + 1);
        uint64_t v84 = (std::__shared_weak_count *)*((void *)v80 + 2);
        v236 = v84;
        if (v84) {
          atomic_fetch_add_explicit(&v84->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v237 = 0;
        v238 = 0;
        uint64_t v239 = 0;
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v237, *((void *)v80 + 3), *((void *)v80 + 4), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v80 + 4) - *((void *)v80 + 3)) >> 3));
        memset(v240, 0, sizeof(v240));
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v240, *((void *)v80 + 6), *((void *)v80 + 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v80 + 7) - *((void *)v80 + 6)) >> 3));
        v218 = 0;
        v219 = 0;
        v220 = 0;
        v232 = &v218;
        LOBYTE(v233) = 0;
        v218 = (std::__shared_weak_count *)operator new(0x48uLL);
        v219 = v218;
        v220 = v218 + 3;
        v219 = (std::__shared_weak_count *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::net::new_layer_info>,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info*>((uint64_t)&v220, (uint64_t)&v234, (uint64_t)&v241, (uint64_t)v218);
        Espresso::net::insert_layers((uint64_t)v56, (int *)&v215, (uint64_t *)&v218);
        v232 = &v218;
        std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&v232);
        v232 = (std::__shared_weak_count **)v240;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v232);
        v232 = (std::__shared_weak_count **)&v237;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v232);
        if (v236) {
          nitro::nitro_function::nitro_function(v236);
        }
        ++v82;
        v80 += 18;
      }
      while (v80 != v81);
    }
    v234 = (void **)&v226 + 1;
    std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100](&v234);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    uint64_t v3 = v178;
    if (*((void *)&v224 + 1)) {
      nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v224 + 1));
    }
    if (*((void *)&v223 + 1)) {
      nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v223 + 1));
    }
    if (*((void *)&v222 + 1)) {
      nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v222 + 1));
    }
    if (v221[1]) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v221[1]);
    }
    std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v231[1]);
    std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v230[1]);
    if (*((void *)&v229 + 1)) {
      nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v229 + 1));
    }

    int v4 = (uint64_t *)a1;
    char v85 = *(Espresso **)a1;
    uint64_t v86 = *(void *)(a1 + 8);
    if (v86)
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v86 + 8), 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v86 + 8), 1uLL, memory_order_relaxed);
    }
    int v87 = (std::__shared_weak_count *)*((void *)v85 + 3);
    v221[0] = *((void **)v85 + 2);
    v221[1] = v87;
    if (v87) {
      atomic_fetch_add_explicit(&v87->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v88 = *(_DWORD *)(**((void **)v85 + 4) + 12);
    v234 = (void **)v85;
    v235 = (char *)v86;
    if (v86) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v86 + 8), 1uLL, memory_order_relaxed);
    }
    Espresso::optimize_network((uint64_t *)v221, v88, (uint64_t)&v234, &__block_literal_global_144_463, &v229);
    if (v86) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v86);
    }
    if (v87) {
      nitro::nitro_function::nitro_function(v87);
    }
    if (v86) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v86);
    }
    int v89 = *(std::__shared_weak_count **)(a1 + 8);
    *(_OWORD *)a1 = v229;
    if (v89) {
      nitro::nitro_function::nitro_function(v89);
    }
    if (v86) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v86);
    }
  }
LABEL_188:
  if (*(unsigned char *)(v3 + 13))
  {
    uint64_t v90 = *v4;
    uint64_t v91 = v4[1];
    if (v91) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v91 + 8), 1uLL, memory_order_relaxed);
    }
    BOOL v92 = *(std::__shared_weak_count **)(v90 + 24);
    v221[0] = *(void **)(v90 + 16);
    v221[1] = v92;
    if (v92) {
      atomic_fetch_add_explicit(&v92->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v93 = *(_DWORD *)(**(void **)(v90 + 32) + 12);
    v234 = (void **)v90;
    v235 = (char *)v91;
    if (v91) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v91 + 8), 1uLL, memory_order_relaxed);
    }
    Espresso::optimize_network((uint64_t *)v221, v93, (uint64_t)&v234, &__block_literal_global_63, &v229);
    if (v91) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v91);
    }
    if (v92) {
      nitro::nitro_function::nitro_function(v92);
    }
    BOOL v94 = (std::__shared_weak_count *)v4[1];
    *(_OWORD *)int v4 = v229;
    if (v94) {
      nitro::nitro_function::nitro_function(v94);
    }
    if (v91) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v91);
    }
  }
  if (*(unsigned char *)(v3 + 14))
  {
    int v95 = (atomic_ullong *)v4[1];
    v206[0] = (Espresso *)*v4;
    v206[1] = (Espresso *)v95;
    if (v95) {
      atomic_fetch_add_explicit(v95 + 1, 1uLL, memory_order_relaxed);
    }
    Espresso::convert_to_explicit_padding(v206, 1, 1);
    if (v95) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v95);
    }
  }
  char v96 = *(unsigned char *)(v3 + 3);
  if (!*(unsigned char *)(v3 + 2))
  {
    if (!*(unsigned char *)(v3 + 3)) {
      goto LABEL_219;
    }
    char v96 = 1;
  }
  char v97 = v96 ^ 1;
  char v98 = *(unsigned char *)(v3 + 2) ^ 1;
  int v99 = *(_DWORD *)(v3 + 104);
  char v100 = *(unsigned char *)(v3 + 1);
  char v101 = *(unsigned char *)(v3 + 48);
  if (v101)
  {
    printf("WARNING: Asymmetric quantization will use more inference memory on NE. Please use it only if symmetric quantization doesn't yield good results for  your  model.");
    char v101 = 1;
  }
  long long v194 = xmmword_192DCA250;
  int v195 = 1112014848;
  int v196 = v99;
  int v197 = 0;
  char v198 = v97;
  char v199 = v100;
  char v200 = v98;
  __int16 v201 = 0;
  char v202 = v101;
  uint64_t v204 = 0;
  uint64_t v205 = 0;
  int v203 = 0;
  int v4 = (uint64_t *)a1;
  uint64_t v102 = *(std::__shared_weak_count **)(a1 + 8);
  v193[0] = *(void *)a1;
  v193[1] = v102;
  if (v102) {
    atomic_fetch_add_explicit(&v102->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::compress_net_weights_kmeans(&v194, (uint64_t)v193, *(_DWORD *)(v3 + 8));
  if (v102) {
    nitro::nitro_function::nitro_function(v102);
  }
  if (SHIBYTE(v205) < 0) {
    operator delete(v203);
  }
LABEL_219:
  if (!*(unsigned char *)(v3 + 109))
  {
    uint64_t v103 = (std::__shared_weak_count *)v4[1];
    v192[0] = *v4;
    v192[1] = v103;
    if (v103) {
      atomic_fetch_add_explicit(&v103->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    Espresso::add_context_transfer_algos_hints((uint64_t)v192);
    if (v103) {
      nitro::nitro_function::nitro_function(v103);
    }
  }
  if (*(unsigned char *)v3)
  {
    uint64_t v104 = (std::__shared_weak_count *)v4[1];
    v191[0] = *v4;
    v191[1] = v104;
    if (v104) {
      atomic_fetch_add_explicit(&v104->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    Espresso::convert_weights_to_fp16((uint64_t)v191);
    if (v104) {
      nitro::nitro_function::nitro_function(v104);
    }
  }
  Espresso::run_pass_on_network<Espresso::pass_constant_if_conditions>(*v4);
  uint64_t v105 = *(uint64_t **)(v3 + 56);
  uint64_t v106 = *(uint64_t **)(v3 + 64);
  int v107 = (uint64_t *)a1;
  if (v105 != v106)
  {
    while (1)
    {
      int v108 = *((unsigned __int8 *)v105 + 23);
      if ((*((char *)v105 + 23) & 0x80000000) == 0)
      {
        switch(*((unsigned char *)v105 + 23))
        {
          case 0xA:
            if (*v105 != 0x69746E6175716564 || *((_WORD *)v105 + 4) != 25978) {
              goto LABEL_504;
            }
            goto LABEL_245;
          case 0xB:
            if (*v105 == 0x6F72675F766E6F63 && *(uint64_t *)((char *)v105 + 3) == 0x7370756F72675F76) {
              goto LABEL_518;
            }
            if (*v105 != 0x726F66736E617274 || *(uint64_t *)((char *)v105 + 3) != 0x72656D726F66736ELL) {
              goto LABEL_504;
            }
            goto LABEL_408;
          case 0xC:
          case 0xE:
          case 0x12:
          case 0x13:
          case 0x14:
          case 0x15:
          case 0x16:
          case 0x18:
          case 0x19:
          case 0x1A:
          case 0x21:
          case 0x22:
          case 0x23:
          case 0x24:
          case 0x25:
          case 0x26:
          case 0x27:
          case 0x28:
          case 0x29:
            goto LABEL_504;
          case 0xD:
            goto LABEL_480;
          case 0xF:
            if (*v105 != 0x736F70736E617274 || *(uint64_t *)((char *)v105 + 7) != 0x6E696168635F6573) {
              goto LABEL_504;
            }
            goto LABEL_384;
          case 0x10:
            if (*v105 != 0x746963696C707865 || v105[1] != 0x676E69646461705FLL) {
              goto LABEL_504;
            }
            goto LABEL_518;
          case 0x11:
            BOOL v129 = v105;
            goto LABEL_497;
          case 0x17:
            if (*v105 != 0x736F70736E617274
              || v105[1] != 0x5F72656E6E695F65
              || *(uint64_t *)((char *)v105 + 15) != 0x746375646F72705FLL)
            {
              goto LABEL_504;
            }
            goto LABEL_364;
          case 0x1B:
            if (*v105 != 0x5F747265766E6F63
              || v105[1] != 0x68676965775F7868
              || v105[2] != 0x65705F6F745F7374
              || *(uint64_t *)((char *)v105 + 19) != 0x65636165705F6F74)
            {
              goto LABEL_504;
            }
            goto LABEL_422;
          case 0x1C:
            if (*v105 != 0x706D6F635F646461
              || v105[1] != 0x6170735F73736572
              || v105[2] != 0x706F72705F657372
              || *((_DWORD *)v105 + 6) != 2037674597)
            {
              goto LABEL_504;
            }
            goto LABEL_398;
          case 0x1D:
            goto LABEL_281;
          case 0x1E:
            if (*v105 != 0x5F65736977746C65
              || v105[1] != 0x78616D5F636C756DLL
              || v105[2] != 0x6B61656C5F6F745FLL
              || *(uint64_t *)((char *)v105 + 22) != 0x756C65725F796B61)
            {
              goto LABEL_504;
            }
            goto LABEL_513;
          case 0x1F:
            goto LABEL_293;
          case 0x20:
            goto LABEL_269;
          case 0x2A:
            if (!memcmp(v105, "fuse_log_softmax_multinomial_to_gumbel_max", 0x2AuLL)) {
              goto LABEL_335;
            }
            goto LABEL_504;
          default:
            if (*((unsigned char *)v105 + 23)) {
              goto LABEL_504;
            }
            goto LABEL_518;
        }
      }
      uint64_t v110 = v105[1];
      if (v110 <= 22)
      {
        switch(v110)
        {
          case 10:
            if (*(void *)*v105 != 0x69746E6175716564 || *(_WORD *)(*v105 + 8) != 25978) {
              goto LABEL_441;
            }
LABEL_245:
            unint64_t v112 = (atomic_ullong *)v107[1];
            v188[0] = *v107;
            v188[1] = v112;
            if (v112) {
              atomic_fetch_add_explicit(v112 + 1, 1uLL, memory_order_relaxed);
            }
            *(_OWORD *)v221 = 0u;
            long long v222 = 0u;
            LODWORD(v223) = 1065353216;
            Espresso::transform_dequantize((uint64_t)v188, (uint64_t)v221);
            std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v221);
            goto LABEL_516;
          case 11:
            if (*(void *)*v105 == 0x6F72675F766E6F63 && *(void *)(*v105 + 3) == 0x7370756F72675F76) {
              goto LABEL_518;
            }
            if (*(void *)*v105 != 0x726F66736E617274 || *(void *)(*v105 + 3) != 0x72656D726F66736ELL) {
              goto LABEL_441;
            }
LABEL_408:
            unint64_t v112 = (atomic_ullong *)v107[1];
            v185[0] = (Espresso::net *)*v107;
            v185[1] = (Espresso::net *)v112;
            if (v112) {
              atomic_fetch_add_explicit(v112 + 1, 1uLL, memory_order_relaxed);
            }
            Espresso::transformer_optimization(v185);
            break;
          case 12:
          case 13:
          case 14:
            goto LABEL_441;
          case 15:
            if (*(void *)*v105 != 0x736F70736E617274 || *(void *)(*v105 + 7) != 0x6E696168635F6573) {
              goto LABEL_441;
            }
LABEL_384:
            unint64_t v112 = (atomic_ullong *)v107[1];
            v189[0] = (Espresso::net *)*v107;
            v189[1] = (Espresso::net *)v112;
            if (v112) {
              atomic_fetch_add_explicit(v112 + 1, 1uLL, memory_order_relaxed);
            }
            Espresso::fuse_transpose_chain(v189);
            goto LABEL_516;
          case 16:
            if (*(void *)*v105 != 0x746963696C707865 || *(void *)(*v105 + 8) != 0x676E69646461705FLL) {
              goto LABEL_441;
            }
            goto LABEL_518;
          default:
            if (v110) {
              goto LABEL_441;
            }
            goto LABEL_518;
        }
        goto LABEL_516;
      }
      switch(v110)
      {
        case 23:
          if (*(void *)*v105 != 0x736F70736E617274
            || *(void *)(*v105 + 8) != 0x5F72656E6E695F65
            || *(void *)(*v105 + 15) != 0x746375646F72705FLL)
          {
            goto LABEL_441;
          }
LABEL_364:
          unint64_t v112 = (atomic_ullong *)v107[1];
          v187[0] = *v107;
          v187[1] = v112;
          if (v112) {
            atomic_fetch_add_explicit(v112 + 1, 1uLL, memory_order_relaxed);
          }
          Espresso::fuse_transpose_inner_product((uint64_t)v187);
          goto LABEL_516;
        case 24:
        case 25:
        case 26:
        case 29:
          goto LABEL_441;
        case 27:
          if (*(void *)*v105 != 0x5F747265766E6F63
            || *(void *)(*v105 + 8) != 0x68676965775F7868
            || *(void *)(*v105 + 16) != 0x65705F6F745F7374
            || *(void *)(*v105 + 19) != 0x65636165705F6F74)
          {
            goto LABEL_441;
          }
LABEL_422:
          unint64_t v112 = (atomic_ullong *)v107[1];
          v190[0] = (uint64_t **)*v107;
          v190[1] = (uint64_t **)v112;
          if (v112) {
            atomic_fetch_add_explicit(v112 + 1, 1uLL, memory_order_relaxed);
          }
          Espresso::convert_hx_engine_weights_to_peace_format(v190, 0);
          goto LABEL_516;
        case 28:
          if (*(void *)*v105 != 0x706D6F635F646461
            || *(void *)(*v105 + 8) != 0x6170735F73736572
            || *(void *)(*v105 + 16) != 0x706F72705F657372
            || *(_DWORD *)(*v105 + 24) != 2037674597)
          {
            goto LABEL_441;
          }
LABEL_398:
          uint64_t v144 = *v107;
          std::string::basic_string[abi:ne180100]<0>(v221, "compress_sparse");
          v234 = v221;
          uint64_t v145 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(v144 + 472), v221, (uint64_t)&std::piecewise_construct, (_OWORD **)&v234);
          MEMORY[0x192FF0F50]((char *)v145 + 56, "1");
          goto LABEL_506;
        case 30:
          if (*(void *)*v105 != 0x5F65736977746C65
            || *(void *)(*v105 + 8) != 0x78616D5F636C756DLL
            || *(void *)(*v105 + 16) != 0x6B61656C5F6F745FLL
            || *(void *)(*v105 + 22) != 0x756C65725F796B61)
          {
            goto LABEL_441;
          }
LABEL_513:
          unint64_t v112 = (atomic_ullong *)v107[1];
          v186[0] = *v107;
          v186[1] = v112;
          if (v112) {
            atomic_fetch_add_explicit(v112 + 1, 1uLL, memory_order_relaxed);
          }
          Espresso::fuse_eltwise_mulc_max_to_leaky_relu((uint64_t)v186);
          goto LABEL_516;
        default:
          if (v110 != 42) {
            goto LABEL_441;
          }
          if (!memcmp((const void *)*v105, "fuse_log_softmax_multinomial_to_gumbel_max", 0x2AuLL))
          {
LABEL_335:
            unint64_t v112 = (atomic_ullong *)v107[1];
            v184[0] = *v107;
            v184[1] = v112;
            if (v112) {
              atomic_fetch_add_explicit(v112 + 1, 1uLL, memory_order_relaxed);
            }
            Espresso::fuse_log_softmax_multinomial_to_gumbel_max((uint64_t)v184);
            goto LABEL_516;
          }
          if ((v108 & 0x80) != 0)
          {
LABEL_441:
            if (v105[1] == 29)
            {
              if (*(void *)*v105 == 0x636572705F776F6CLL
                && *(void *)(*v105 + 8) == 0x63615F6E6F697369
                && *(void *)(*v105 + 16) == 0x6974616C756D7563
                && *(void *)(*v105 + 21) == 0x63665F6E6F697461)
              {
                goto LABEL_486;
              }
              if ((v108 & 0x80) == 0) {
                goto LABEL_477;
              }
            }
            if (v105[1] == 31)
            {
              if (*(void *)*v105 == 0x636572705F776F6CLL
                && *(void *)(*v105 + 8) == 0x63615F6E6F697369
                && *(void *)(*v105 + 16) == 0x6974616C756D7563
                && *(void *)(*v105 + 23) == 0x766E6F635F6E6F69)
              {
                goto LABEL_508;
              }
              if ((v108 & 0x80) == 0) {
                goto LABEL_477;
              }
            }
            if (v105[1] != 32) {
              goto LABEL_489;
            }
            if (*(void *)*v105 != 0x726F66736E617274
              || *(void *)(*v105 + 8) != 0x6369746174735F6DLL
              || *(void *)(*v105 + 16) != 0x7A69746E6175715FLL
              || *(void *)(*v105 + 24) != 0x6C656E72656B5F65)
            {
              if ((v108 & 0x80) == 0)
              {
LABEL_477:
                if (v108 == 13)
                {
LABEL_480:
                  if (*v105 != 0x5F657A6565757173 || *(uint64_t *)((char *)v105 + 5) != 0x706F7665645F657ALL) {
                    goto LABEL_504;
                  }
                }
                else
                {
                  BOOL v129 = v105;
                  if (v108 != 17) {
                    goto LABEL_504;
                  }
LABEL_497:
                  uint64_t v166 = *v129;
                  uint64_t v167 = v129[1];
                  int v168 = *((unsigned __int8 *)v129 + 16);
                  if (v166 != 0x73736572706D6F63 || v167 != 0x746E656D6765735FLL || v168 != 115) {
                    goto LABEL_504;
                  }
                }
LABEL_505:
                Espresso::run_pass_on_network<Espresso::pass_compress_segments>(*v107);
                char v171 = *(Espresso **)a1;
                std::string::basic_string[abi:ne180100]<0>(v221, "experimental.ane.dev_op_override");
                v234 = v221;
                int v172 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v171 + 59, v221, (uint64_t)&std::piecewise_construct, (_OWORD **)&v234);
                std::string::operator=((std::string *)((char *)v172 + 56), (const std::string *)(v3 + 80));
LABEL_506:
                int v107 = (uint64_t *)a1;
                if ((SBYTE7(v222) & 0x80000000) == 0) {
                  goto LABEL_518;
                }
LABEL_512:
                operator delete(v221[0]);
                goto LABEL_518;
              }
LABEL_489:
              if (v105[1] == 13)
              {
                if (*(void *)*v105 == 0x5F657A6565757173 && *(void *)(*v105 + 5) == 0x706F7665645F657ALL) {
                  goto LABEL_505;
                }
                if ((v108 & 0x80) == 0) {
                  goto LABEL_504;
                }
              }
              if (v105[1] != 17) {
                goto LABEL_504;
              }
              BOOL v129 = (uint64_t *)*v105;
              goto LABEL_497;
            }
          }
          else
          {
            if (v108 <= 28) {
              goto LABEL_477;
            }
            if (v108 == 29)
            {
LABEL_281:
              if (*v105 != 0x636572705F776F6CLL
                || v105[1] != 0x63615F6E6F697369
                || v105[2] != 0x6974616C756D7563
                || *(uint64_t *)((char *)v105 + 21) != 0x63665F6E6F697461)
              {
                goto LABEL_504;
              }
LABEL_486:
              unint64_t v112 = (atomic_ullong *)v107[1];
              v183[0] = *v107;
              v183[1] = v112;
              if (v112) {
                atomic_fetch_add_explicit(v112 + 1, 1uLL, memory_order_relaxed);
              }
              Espresso::low_precision_accumulation_fc((uint64_t)v183);
LABEL_516:
              if (v112) {
                nitro::nitro_function::nitro_function((std::__shared_weak_count *)v112);
              }
              goto LABEL_518;
            }
            if (v108 == 31)
            {
LABEL_293:
              if (*v105 != 0x636572705F776F6CLL
                || v105[1] != 0x63615F6E6F697369
                || v105[2] != 0x6974616C756D7563
                || *(uint64_t *)((char *)v105 + 23) != 0x766E6F635F6E6F69)
              {
                goto LABEL_504;
              }
LABEL_508:
              unint64_t v112 = (atomic_ullong *)v107[1];
              v182[0] = *v107;
              v182[1] = v112;
              if (v112) {
                atomic_fetch_add_explicit(v112 + 1, 1uLL, memory_order_relaxed);
              }
              Espresso::low_precision_accumulation_conv((uint64_t)v182);
              goto LABEL_516;
            }
            if (v108 != 32) {
              goto LABEL_504;
            }
LABEL_269:
            if (*v105 != 0x726F66736E617274
              || v105[1] != 0x6369746174735F6DLL
              || v105[2] != 0x7A69746E6175715FLL
              || v105[3] != 0x6C656E72656B5F65)
            {
LABEL_504:
              Espresso::run_custom_pass_on_network(v105, *v107);
              int v107 = (uint64_t *)a1;
              goto LABEL_518;
            }
          }
          std::string::basic_string[abi:ne180100]<0>(v221, "transform_static_quantize_kernel");
          int v107 = (uint64_t *)a1;
          Espresso::run_custom_pass_on_network((uint64_t *)v221, *(void *)a1);
          if (SBYTE7(v222) < 0) {
            goto LABEL_512;
          }
LABEL_518:
          v105 += 3;
          if (v105 == v106) {
            goto LABEL_519;
          }
          break;
      }
    }
  }
LABEL_519:
  __n128 result = *(__n128 *)v107;
  *a3 = *(_OWORD *)v107;
  *int v107 = 0;
  v107[1] = 0;
  return result;
}

void sub_1920F2798(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::reshape_params,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

void remove_unused_layers(void *a1, uint64_t a2)
{
  int v4 = *(std::__shared_weak_count **)(a2 + 8);
  v15[0] = *(void *)a2;
  v15[1] = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::network_optimization_graph::network_optimization_graph(&v16, (uint64_t)v15);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  uint64_t v7 = (void *)*a1;
  uint64_t v5 = a1 + 1;
  uint64_t v6 = v7;
  if (v7 != v5)
  {
    int v8 = 0;
    do
    {
      int v14 = *((_DWORD *)v6 + 7);
      int v9 = v14;
      int v10 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v18, v14, &v14);
      if (v10[5] == v10[6]) {
        Espresso::net::remove_layer(*(Espresso::net **)a2, v9 - v8++);
      }
      int v11 = (void *)v6[1];
      if (v11)
      {
        do
        {
          size_t v12 = v11;
          int v11 = (void *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          size_t v12 = (void *)v6[2];
          BOOL v13 = *v12 == (void)v6;
          uint64_t v6 = v12;
        }
        while (!v13);
      }
      uint64_t v6 = v12;
    }
    while (v12 != v5);
  }
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v18[4]);
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v18[1]);
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
}

void sub_1920F2B68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (v13) {
    nitro::nitro_function::nitro_function(v13);
  }
  _Unwind_Resume(exception_object);
}

Espresso::net **Espresso::network_optimization_graph::network_optimization_graph(Espresso::net **a1, uint64_t a2)
{
  Espresso::network_optimization_graph::network_optimization_graph((Espresso::network_optimization_graph *)a1, *(Espresso::net **)a2);
  uint64_t v5 = *(Espresso::net **)a2;
  int v4 = *(atomic_ullong **)(a2 + 8);
  if (v4) {
    atomic_fetch_add_explicit(v4 + 1, 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = (std::__shared_weak_count *)a1[1];
  *a1 = v5;
  a1[1] = (Espresso::net *)v4;
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }
  return a1;
}

{
  atomic_ullong *v4;
  Espresso::net *v5;
  std::__shared_weak_count *v6;

  Espresso::network_optimization_graph::network_optimization_graph((Espresso::network_optimization_graph *)a1, *(Espresso::net **)a2);
  uint64_t v5 = *(Espresso::net **)a2;
  int v4 = *(atomic_ullong **)(a2 + 8);
  if (v4) {
    atomic_fetch_add_explicit(v4 + 1, 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = (std::__shared_weak_count *)a1[1];
  *a1 = v5;
  a1[1] = (Espresso::net *)v4;
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }
  return a1;
}

void Espresso::single_match_replace<Espresso::generic_fill_kernel>(Espresso::net *a1, void *a2)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a2;
  Espresso::network_optimization_graph::network_optimization_graph((Espresso::network_optimization_graph *)v27, a1);
  long long v25 = 0u;
  memset(v26, 0, 28);
  long long v24 = 0u;
  v26[4] = a1;
  uint64_t v4 = *((void *)a1 + 4);
  if (*((void *)a1 + 5) != v4)
  {
    unint64_t v5 = 0;
    do
    {
      LODWORD(v26[3]) = v5;
      long long v6 = *(_OWORD *)(v4 + 16 * v5);
      uint64_t v7 = *(void *)(v4 + 16 * v5 + 8);
      if (v7) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
      }
      int v8 = (std::__shared_weak_count *)*((void *)&v25 + 1);
      long long v25 = v6;
      if (v8)
      {
        nitro::nitro_function::nitro_function(v8);
        uint64_t v9 = v25;
      }
      else
      {
        uint64_t v9 = v6;
      }
      int v10 = *(void **)(v9 + 64);
      if (v10
      {
        uint64_t v11 = *(void *)(v9 + 72);
        if (v11) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        uint64_t v11 = 0;
      }
      size_t v12 = (std::__shared_weak_count *)*((void *)&v24 + 1);
      *(void *)&long long v24 = v10;
      *((void *)&v24 + 1) = v11;
      if (v12)
      {
        nitro::nitro_function::nitro_function(v12);
        int v10 = (void *)v24;
      }
      if (v10) {
        v3[2](v3, &v24);
      }
      ++v5;
      uint64_t v4 = *((void *)a1 + 4);
    }
    while (v5 < (*((void *)a1 + 5) - v4) >> 4);
    BOOL v13 = (uint64_t *)v26[1];
    if (v26[0] != v26[1])
    {
      int v14 = 0;
      uint64_t v15 = (uint64_t *)(v26[0] + 32);
      do
      {
        size_t v16 = v15 - 4;
        int v17 = *((_DWORD *)v15 - 8) + v14;
        *((_DWORD *)v15 - 8) = v17;
        BOOL v18 = (void **)*(v15 - 3);
        if (v18)
        {
          LODWORD(v33[0]) = v17;
          v33[1] = v18;
          uint64_t v19 = (std::__shared_weak_count *)*(v15 - 2);
          size_t v34 = v19;
          if (v19) {
            atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          memset(v35, 0, sizeof(v35));
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v35, *(v15 - 1), *v15, 0xAAAAAAAAAAAAAAABLL * ((*v15 - *(v15 - 1)) >> 3));
          memset(v36, 0, sizeof(v36));
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v36, v15[2], v15[3], 0xAAAAAAAAAAAAAAABLL * ((v15[3] - v15[2]) >> 3));
          unint64_t v21 = 0;
          uint64_t v22 = 0;
          BOOL v23 = 0;
          uint64_t v31 = (void **)&v21;
          char v32 = 0;
          unint64_t v21 = (uint64_t *)operator new(0x48uLL);
          uint64_t v22 = v21;
          BOOL v23 = v21 + 9;
          uint64_t v22 = (uint64_t *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::net::new_layer_info>,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info*>((uint64_t)&v23, (uint64_t)v33, (uint64_t)&v37, (uint64_t)v21);
          Espresso::net::insert_layers((uint64_t)a1, &v21);
          uint64_t v31 = (void **)&v21;
          std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100](&v31);
          uint64_t v31 = (void **)v36;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v31);
          uint64_t v31 = (void **)v35;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v31);
          if (v34) {
            nitro::nitro_function::nitro_function(v34);
          }
          int v20 = 1;
        }
        else
        {
          Espresso::net::remove_layer(a1, v17);
          int v20 = -1;
        }
        v14 += v20;
        v15 += 9;
      }
      while (v16 + 9 != v13);
    }
  }
  v33[0] = (void **)v26;
  std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100](v33);
  if (*((void *)&v25 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v25 + 1));
  }
  if (*((void *)&v24 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v24 + 1));
  }
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v30);
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v29);
  if (v28) {
    nitro::nitro_function::nitro_function(v28);
  }
}

void sub_1920F2F2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void Espresso::single_match_replace<Espresso::ANECompilerEngine::inner_product_kernel>(Espresso::net *a1, void *a2)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a2;
  Espresso::network_optimization_graph::network_optimization_graph((Espresso::network_optimization_graph *)v27, a1);
  long long v25 = 0u;
  memset(v26, 0, 28);
  long long v24 = 0u;
  v26[4] = a1;
  uint64_t v4 = *((void *)a1 + 4);
  if (*((void *)a1 + 5) != v4)
  {
    unint64_t v5 = 0;
    do
    {
      LODWORD(v26[3]) = v5;
      long long v6 = *(_OWORD *)(v4 + 16 * v5);
      uint64_t v7 = *(void *)(v4 + 16 * v5 + 8);
      if (v7) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
      }
      int v8 = (std::__shared_weak_count *)*((void *)&v25 + 1);
      long long v25 = v6;
      if (v8)
      {
        nitro::nitro_function::nitro_function(v8);
        uint64_t v9 = v25;
      }
      else
      {
        uint64_t v9 = v6;
      }
      int v10 = *(void **)(v9 + 64);
      if (v10
      {
        uint64_t v11 = *(void *)(v9 + 72);
        if (v11) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        uint64_t v11 = 0;
      }
      size_t v12 = (std::__shared_weak_count *)*((void *)&v24 + 1);
      *(void *)&long long v24 = v10;
      *((void *)&v24 + 1) = v11;
      if (v12)
      {
        nitro::nitro_function::nitro_function(v12);
        int v10 = (void *)v24;
      }
      if (v10) {
        v3[2](v3, &v24);
      }
      ++v5;
      uint64_t v4 = *((void *)a1 + 4);
    }
    while (v5 < (*((void *)a1 + 5) - v4) >> 4);
    BOOL v13 = (uint64_t *)v26[1];
    if (v26[0] != v26[1])
    {
      int v14 = 0;
      uint64_t v15 = (uint64_t *)(v26[0] + 32);
      do
      {
        size_t v16 = v15 - 4;
        int v17 = *((_DWORD *)v15 - 8) + v14;
        *((_DWORD *)v15 - 8) = v17;
        BOOL v18 = (void **)*(v15 - 3);
        if (v18)
        {
          LODWORD(v33[0]) = v17;
          v33[1] = v18;
          uint64_t v19 = (std::__shared_weak_count *)*(v15 - 2);
          size_t v34 = v19;
          if (v19) {
            atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          memset(v35, 0, sizeof(v35));
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v35, *(v15 - 1), *v15, 0xAAAAAAAAAAAAAAABLL * ((*v15 - *(v15 - 1)) >> 3));
          memset(v36, 0, sizeof(v36));
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v36, v15[2], v15[3], 0xAAAAAAAAAAAAAAABLL * ((v15[3] - v15[2]) >> 3));
          unint64_t v21 = 0;
          uint64_t v22 = 0;
          BOOL v23 = 0;
          uint64_t v31 = (void **)&v21;
          char v32 = 0;
          unint64_t v21 = (uint64_t *)operator new(0x48uLL);
          uint64_t v22 = v21;
          BOOL v23 = v21 + 9;
          uint64_t v22 = (uint64_t *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::net::new_layer_info>,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info*>((uint64_t)&v23, (uint64_t)v33, (uint64_t)&v37, (uint64_t)v21);
          Espresso::net::insert_layers((uint64_t)a1, &v21);
          uint64_t v31 = (void **)&v21;
          std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100](&v31);
          uint64_t v31 = (void **)v36;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v31);
          uint64_t v31 = (void **)v35;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v31);
          if (v34) {
            nitro::nitro_function::nitro_function(v34);
          }
          int v20 = 1;
        }
        else
        {
          Espresso::net::remove_layer(a1, v17);
          int v20 = -1;
        }
        v14 += v20;
        v15 += 9;
      }
      while (v16 + 9 != v13);
    }
  }
  v33[0] = (void **)v26;
  std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100](v33);
  if (*((void *)&v25 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v25 + 1));
  }
  if (*((void *)&v24 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v24 + 1));
  }
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v30);
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v29);
  if (v28) {
    nitro::nitro_function::nitro_function(v28);
  }
}

void sub_1920F3304(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(*a1);
    std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(a1[1]);
    uint64_t v2 = (void *)a1[5];
    if (v2)
    {
      a1[6] = v2;
      operator delete(v2);
    }
    operator delete(a1);
  }
}

void std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    unint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 72;
        std::allocator<Espresso::net::new_layer_info>::destroy[abi:ne180100](v4);
      }
      while ((void *)v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<Espresso::net::new_layer_info>::destroy[abi:ne180100](uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 48);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    nitro::nitro_function::nitro_function(v2);
  }
}

void Espresso::run_pass_on_network<Espresso::pass_constant_if_conditions>(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (Espresso *)operator new(0x30uLL);
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)uint64_t v2 = &unk_1EE388998;
  uint64_t v3 = (void *)((char *)v2 + 24);
  *((void *)v2 + 4) = 0;
  *((void *)v2 + 5) = 0;
  *((void *)v2 + 3) = &unk_1EE361358;
  unint64_t v5 = Espresso::espresso_os_log_subsystem(v2, v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::string buf = 136315138;
    unint64_t v8 = (unint64_t)"N8Espresso27pass_constant_if_conditionsE" & 0x7FFFFFFFFFFFFFFFLL;
    _os_log_debug_impl(&dword_1920CB000, v5, OS_LOG_TYPE_DEBUG, "run_pass_on_network %s", buf, 0xCu);
  }

  (*(void (**)(uint8_t *__return_ptr, void *, uint64_t))(*v3 + 24))(buf, v3, a1);
  char v6 = 0;
  (*(void (**)(void *, char *))(*v3 + 16))(v3, &v6);
  if (v6)
  {
    if (buf[0]) {
      Espresso::net::set_analysis<Espresso::analysis_result>(a1, (unint64_t *)((char *)&v8 + 4));
    }
    else {
      std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::__erase_unique<std::type_index>((uint64_t *)(a1 + 1120), (uint64_t)"N8Espresso34pass_constant_if_conditions_resultE");
    }
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  nitro::nitro_function::nitro_function((std::__shared_weak_count *)v2);
}

void sub_1920F3698(_Unwind_Exception *a1)
{
  nitro::nitro_function::nitro_function(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::__erase_unique<std::type_index>(uint64_t *a1, uint64_t a2)
{
  unint64_t v4 = a2;
  if (a2 < 0)
  {
    unint64_t v5 = (unsigned __int8 *)(a2 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v6 = 5381;
    do
    {
      unint64_t v4 = v6;
      unsigned int v7 = *v5++;
      uint64_t v6 = (33 * v6) ^ v7;
    }
    while (v7);
  }
  int8x8_t v8 = (int8x8_t)a1[1];
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8(v8);
    v9.i16[0] = vaddlv_u8(v9);
    unint64_t v10 = v9.u32[0];
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v11 = v4;
      if (v4 >= *(void *)&v8) {
        unint64_t v11 = v4 % *(void *)&v8;
      }
    }
    else
    {
      unint64_t v11 = (*(void *)&v8 - 1) & v4;
    }
    uint64_t v12 = *a1;
    BOOL v13 = *(uint64_t ***)(*a1 + 8 * v11);
    if (v13)
    {
      int v14 = *v13;
      if (*v13)
      {
        uint64_t v15 = *(void *)&v8 - 1;
        do
        {
          unint64_t v16 = v14[1];
          if (v16 == v4)
          {
            if (std::type_info::operator==[abi:ne180100](*(void *)(v14[2] + 8), a2))
            {
              if (v10 > 1)
              {
                if (v4 >= *(void *)&v8) {
                  v4 %= *(void *)&v8;
                }
              }
              else
              {
                v4 &= v15;
              }
              int v17 = *(uint64_t **)(v12 + 8 * v4);
              do
              {
                BOOL v18 = v17;
                int v17 = (uint64_t *)*v17;
              }
              while (v17 != v14);
              if (v18 == a1 + 2) {
                goto LABEL_39;
              }
              unint64_t v19 = v18[1];
              if (v10 > 1)
              {
                if (v19 >= *(void *)&v8) {
                  v19 %= *(void *)&v8;
                }
              }
              else
              {
                v19 &= v15;
              }
              if (v19 != v4)
              {
LABEL_39:
                if (!*v14) {
                  goto LABEL_40;
                }
                unint64_t v20 = *(void *)(*v14 + 8);
                if (v10 > 1)
                {
                  if (v20 >= *(void *)&v8) {
                    v20 %= *(void *)&v8;
                  }
                }
                else
                {
                  v20 &= v15;
                }
                if (v20 != v4) {
LABEL_40:
                }
                  *(void *)(v12 + 8 * v4) = 0;
              }
              uint64_t v21 = *v14;
              if (*v14)
              {
                unint64_t v22 = *(void *)(v21 + 8);
                if (v10 > 1)
                {
                  if (v22 >= *(void *)&v8) {
                    v22 %= *(void *)&v8;
                  }
                }
                else
                {
                  v22 &= v15;
                }
                if (v22 != v4)
                {
                  *(void *)(*a1 + 8 * v22) = v18;
                  uint64_t v21 = *v14;
                }
              }
              *BOOL v18 = v21;
              *int v14 = 0;
              --a1[3];
              std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,void *>>>::operator()[abi:ne180100](1, v14);
              return;
            }
          }
          else
          {
            if (v10 > 1)
            {
              if (v16 >= *(void *)&v8) {
                v16 %= *(void *)&v8;
              }
            }
            else
            {
              v16 &= v15;
            }
            if (v16 != v11) {
              return;
            }
          }
          int v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
}

void Espresso::pass_constant_if_conditions::get_analysis_usage(uint64_t a1, unsigned char *a2)
{
  *a2 = 1;
}

uint64_t Espresso::pass_constant_if_conditions::run_on_network@<X0>(Espresso::net *a1@<X1>, uint64_t a2@<X8>)
{
  long long v117 = 0u;
  long long v118 = 0u;
  int v119 = 1065353216;
  Espresso::net::get_producers_of_blobs(a1, (uint64_t)v116);
  unint64_t v115 = 0;
  uint64_t v5 = *((void *)a1 + 4);
  uint64_t v93 = a2;
  if (*((void *)a1 + 5) == v5) {
    goto LABEL_161;
  }
  unint64_t v6 = 0;
  unsigned int v7 = (char *)a1 + 56;
  do
  {
    uint64_t v8 = 16 * v6;
    uint64_t v9 = *(void *)(v5 + 16 * v6);
    unint64_t v10 = *(const void **)(v9 + 64);
    if (v10)
    {
      if (v11 && (uint64_t v12 = *(void *)(v9 + 72)) != 0)
      {
        BOOL v13 = *(std::__shared_weak_count **)(v9 + 72);
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
        uint64_t v9 = *(void *)(*((void *)a1 + 4) + v8);
        unint64_t v10 = *(const void **)(v9 + 64);
        if (!v10)
        {
          BOOL v18 = 0;
          uint64_t v15 = 0;
          int v14 = v13;
          goto LABEL_27;
        }
        int v14 = v13;
      }
      else
      {
        int v14 = 0;
      }
      if (v15)
      {
        unint64_t v16 = *(std::__shared_weak_count **)(v9 + 72);
        if (v16) {
          atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        int v95 = v16;
        if (*(_DWORD *)(((uint64_t (*)(std::__shared_weak_count *))v15->__vftable[8].~__shared_weak_count)(v15)
                       + 16) == 1)
        {
          v101[0] = &v115;
          int v17 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v7, &v115, (uint64_t)&std::piecewise_construct, (uint64_t **)v101);
          BOOL v18 = v17[4] - v17[3] == 48;
        }
        else
        {
          BOOL v18 = 0;
        }
        uint64_t v15 = v95;
        if (v11) {
          goto LABEL_27;
        }
        goto LABEL_19;
      }
    }
    else
    {
      unint64_t v11 = 0;
      int v14 = 0;
      uint64_t v15 = 0;
    }
    BOOL v18 = 0;
    if (v11) {
      goto LABEL_27;
    }
LABEL_19:
    if (!v18)
    {
      if (!v15) {
        goto LABEL_22;
      }
LABEL_21:
      nitro::nitro_function::nitro_function(v15);
      goto LABEL_22;
    }
LABEL_27:
    char v96 = v15;
    unint64_t v112 = 0;
    std::string v113 = 0;
    unint64_t v114 = 0;
    uint64_t v109 = 0;
    uint64_t v110 = 0;
    unint64_t v111 = 0;
    v108[0] = MEMORY[0x1E4F143A8];
    v108[1] = 3221225472;
    v108[2] = ___ZN8Espresso27pass_constant_if_conditions14run_on_networkERNS_3netE_block_invoke;
    v108[3] = &__block_descriptor_40_e8_B16__0Q8l;
    v108[4] = a1;
    unint64_t v20 = (void *)MEMORY[0x192FF2250](v108);
    uint64_t v21 = v115;
    uint64_t v107 = v115;
    if (v18)
    {
      std::string __p = &v107;
      std::string __p = (void *)(std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v7, (unint64_t *)&v107, (uint64_t)&std::piecewise_construct, (uint64_t **)&__p)[3]+ 24);
      uint64_t v21 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v116, (uint64_t)__p, (uint64_t)&std::piecewise_construct, (long long **)&__p)[5];
      uint64_t v107 = v21;
    }
    Espresso::net::recurse_layer_producers((uint64_t)a1, v116, v21, (uint64_t)&v112, (uint64_t)&v109, v20);
    std::string __p = 0;
    uint64_t v105 = 0;
    uint64_t v106 = 0;
    std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, v112, (uint64_t)v113, ((char *)v113 - (char *)v112) >> 3);
    unint64_t v22 = (unint64_t *)__p;
    BOOL v23 = v105;
    while (v22 != v23)
    {
      unint64_t v103 = 0;
      unint64_t v103 = *v22;
      v99[0] = (uint64_t *)&v103;
      long long v24 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v7, &v103, (uint64_t)&std::piecewise_construct, v99);
      uint64_t v26 = v24[3];
      uint64_t v25 = v24[4];
      while (v26 != v25)
      {
        BOOL v27 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::find<std::string>(v116, v26);
        if (v27)
        {
          Espresso::net::recurse_layer_producers((uint64_t)a1, v116, v27[5], (uint64_t)&v112, (uint64_t)&v109, v20);
        }
        else
        {
          if (!std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*((void **)a1 + 30), (void *)v26))
          {
            std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v101);
            int v87 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v101, (uint64_t)"cannot find producer for ", 25);
            int v88 = *(char *)(v26 + 23);
            if (v88 >= 0) {
              uint64_t v89 = v26;
            }
            else {
              uint64_t v89 = *(void *)v26;
            }
            if (v88 >= 0) {
              uint64_t v90 = *(unsigned __int8 *)(v26 + 23);
            }
            else {
              uint64_t v90 = *(void *)(v26 + 8);
            }
            uint64_t v91 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v87, v89, v90);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v91, (uint64_t)".", 1);
            std::stringbuf::str();
            if (v100 >= 0) {
              BOOL v92 = (const char *)v99;
            }
            else {
              BOOL v92 = (const char *)v99[0];
            }
            Espresso::throw_exception_selector<Espresso::generic_error>(v92);
          }
          int v28 = v110;
          if ((unint64_t)v110 >= v111)
          {
            uint64_t v30 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v109, v26);
          }
          else
          {
            if (*(char *)(v26 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(v110, *(const std::string::value_type **)v26, *(void *)(v26 + 8));
            }
            else
            {
              long long v29 = *(_OWORD *)v26;
              v110->__r_.__value_.__r.__words[2] = *(void *)(v26 + 16);
              *(_OWORD *)&v28->__r_.__value_.__l.__data_ = v29;
            }
            uint64_t v30 = v28 + 1;
          }
          uint64_t v110 = v30;
        }
        v26 += 24;
      }
      ++v22;
    }
    uint64_t v31 = v113;
    if (v109 != v110)
    {
      int v32 = 0;
      goto LABEL_66;
    }
    uint64_t v33 = v112;
    if (v112 != v113)
    {
      BOOL v94 = v14;
      int v32 = 30;
      while (1)
      {
        uint64_t v34 = *(void *)(*((void *)a1 + 4) + 16 * *(void *)v33);
        int v35 = *(const void **)(v34 + 64);
        if (v35)
        {
          {
            BOOL v36 = *(std::__shared_weak_count **)(v34 + 72);
            int v37 = 30;
            goto LABEL_58;
          }
          {
            BOOL v36 = *(std::__shared_weak_count **)(v34 + 72);
            int v37 = 10;
LABEL_58:
            unsigned int v7 = (char *)a1 + 56;
            if (v36)
            {
              atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
              nitro::nitro_function::nitro_function(v36);
            }
            goto LABEL_60;
          }
          int v37 = 30;
          unsigned int v7 = (char *)a1 + 56;
        }
        else
        {
          int v37 = 30;
        }
LABEL_60:
        if (v37 < v32) {
          int v32 = v37;
        }
        uint64_t v33 = (long long *)((char *)v33 + 8);
        if (v33 == v31)
        {
          uint64_t v31 = v113;
          int v14 = v94;
          goto LABEL_66;
        }
      }
    }
    int v32 = 30;
LABEL_66:
    if ((unint64_t)v31 >= v114)
    {
      unsigned int v39 = v112;
      uint64_t v40 = ((char *)v31 - (char *)v112) >> 3;
      unint64_t v41 = v40 + 1;
      if ((unint64_t)(v40 + 1) >> 61) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v42 = v114 - (void)v112;
      if ((uint64_t)(v114 - (void)v112) >> 2 > v41) {
        unint64_t v41 = v42 >> 2;
      }
      BOOL v43 = (unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8;
      unint64_t v44 = 0x1FFFFFFFFFFFFFFFLL;
      if (!v43) {
        unint64_t v44 = v41;
      }
      if (v44)
      {
        unint64_t v44 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v44);
        unsigned int v39 = v112;
        uint64_t v31 = v113;
      }
      else
      {
        uint64_t v45 = 0;
      }
      int v46 = (long long *)(v44 + 8 * v40);
      *(void *)int v46 = v107;
      int32x4_t v38 = (long long *)((char *)v46 + 8);
      while (v31 != v39)
      {
        uint64_t v47 = *((void *)v31 - 1);
        uint64_t v31 = (long long *)((char *)v31 - 8);
        *((void *)v46 - 1) = v47;
        int v46 = (long long *)((char *)v46 - 8);
      }
      unint64_t v112 = v46;
      std::string v113 = v38;
      unint64_t v114 = v44 + 8 * v45;
      if (v39) {
        operator delete(v39);
      }
    }
    else
    {
      *(void *)uint64_t v31 = v107;
      int32x4_t v38 = (long long *)((char *)v31 + 8);
    }
    std::string v113 = v38;
    int v48 = (unint64_t *)v112;
LABEL_82:
    if (v48 != (unint64_t *)v38)
    {
      unint64_t v49 = *v48;
      v101[0] = (void *)*v48;
      if (!*((void *)&v117 + 1)) {
        goto LABEL_99;
      }
      uint8x8_t v50 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v117 + 8));
      v50.i16[0] = vaddlv_u8(v50);
      if (v50.u32[0] > 1uLL)
      {
        unint64_t v51 = v49;
        if (v49 >= *((void *)&v117 + 1)) {
          unint64_t v51 = v49 % *((void *)&v117 + 1);
        }
      }
      else
      {
        unint64_t v51 = (*((void *)&v117 + 1) - 1) & v49;
      }
      size_t v52 = *(uint64_t ***)(v117 + 8 * v51);
      if (!v52 || (BOOL v53 = *v52) == 0)
      {
LABEL_99:
        int v64 = 30;
        goto LABEL_100;
      }
      while (1)
      {
        unint64_t v54 = v53[1];
        if (v49 == v54)
        {
          if (v53[2] == v49)
          {
            int v64 = *((_DWORD *)v53 + 6);
LABEL_100:
            int v55 = std::__hash_table<std::__hash_value_type<unsigned long,Espresso::constant_type_t>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,Espresso::constant_type_t>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,Espresso::constant_type_t>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,Espresso::constant_type_t>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((float *)&v117, v49, v101);
            if (v64 >= v32) {
              int v56 = v32;
            }
            else {
              int v56 = v64;
            }
            *((_DWORD *)v55 + 6) = v56;
            if (!*((_DWORD *)std::__hash_table<std::__hash_value_type<unsigned long,Espresso::constant_type_t>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,Espresso::constant_type_t>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,Espresso::constant_type_t>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,Espresso::constant_type_t>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((float *)&v117, v49, v101)+ 6))
            {
              unint64_t v57 = *((void *)&v117 + 1);
              if (*((void *)&v117 + 1))
              {
                uint8x8_t v58 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v117 + 8));
                v58.i16[0] = vaddlv_u8(v58);
                if (v58.u32[0] > 1uLL)
                {
                  unint64_t v59 = v49;
                  if (v49 >= *((void *)&v117 + 1)) {
                    unint64_t v59 = v49 % *((void *)&v117 + 1);
                  }
                }
                else
                {
                  unint64_t v59 = (*((void *)&v117 + 1) - 1) & v49;
                }
                long long v60 = *(long long ***)(v117 + 8 * v59);
                if (v60)
                {
                  uint64_t v61 = *v60;
                  if (*v60)
                  {
                    uint64_t v62 = *((void *)&v117 + 1) - 1;
                    do
                    {
                      unint64_t v63 = *((void *)v61 + 1);
                      if (v63 == v49)
                      {
                        if (*((void *)v61 + 2) == v49)
                        {
                          if (v58.u32[0] > 1uLL)
                          {
                            if (v49 >= *((void *)&v117 + 1)) {
                              v49 %= *((void *)&v117 + 1);
                            }
                          }
                          else
                          {
                            v49 &= v62;
                          }
                          uint64_t v65 = *(long long **)(v117 + 8 * v49);
                          do
                          {
                            long long v66 = v65;
                            uint64_t v65 = *(long long **)v65;
                          }
                          while (v65 != v61);
                          if (v66 == &v118) {
                            goto LABEL_140;
                          }
                          unint64_t v67 = *((void *)v66 + 1);
                          if (v58.u32[0] > 1uLL)
                          {
                            if (v67 >= *((void *)&v117 + 1)) {
                              v67 %= *((void *)&v117 + 1);
                            }
                          }
                          else
                          {
                            v67 &= v62;
                          }
                          if (v67 != v49)
                          {
LABEL_140:
                            if (!*(void *)v61) {
                              goto LABEL_141;
                            }
                            unint64_t v68 = *(void *)(*(void *)v61 + 8);
                            if (v58.u32[0] > 1uLL)
                            {
                              if (v68 >= *((void *)&v117 + 1)) {
                                v68 %= *((void *)&v117 + 1);
                              }
                            }
                            else
                            {
                              v68 &= v62;
                            }
                            if (v68 != v49) {
LABEL_141:
                            }
                              *(void *)(v117 + 8 * v49) = 0;
                          }
                          uint64_t v69 = *(void *)v61;
                          if (*(void *)v61)
                          {
                            unint64_t v70 = *(void *)(v69 + 8);
                            if (v58.u32[0] > 1uLL)
                            {
                              if (v70 >= v57) {
                                v70 %= v57;
                              }
                            }
                            else
                            {
                              v70 &= v62;
                            }
                            if (v70 != v49)
                            {
                              *(void *)(v117 + 8 * v70) = v66;
                              uint64_t v69 = *(void *)v61;
                            }
                          }
                          *(void *)long long v66 = v69;
                          --*((void *)&v118 + 1);
                          operator delete(v61);
                          break;
                        }
                      }
                      else
                      {
                        if (v58.u32[0] > 1uLL)
                        {
                          if (v63 >= *((void *)&v117 + 1)) {
                            v63 %= *((void *)&v117 + 1);
                          }
                        }
                        else
                        {
                          v63 &= v62;
                        }
                        if (v63 != v59) {
                          break;
                        }
                      }
                      uint64_t v61 = *(long long **)v61;
                    }
                    while (v61);
                  }
                }
              }
            }
            ++v48;
            goto LABEL_82;
          }
        }
        else
        {
          if (v50.u32[0] > 1uLL)
          {
            if (v54 >= *((void *)&v117 + 1)) {
              v54 %= *((void *)&v117 + 1);
            }
          }
          else
          {
            v54 &= *((void *)&v117 + 1) - 1;
          }
          if (v54 != v51) {
            goto LABEL_99;
          }
        }
        BOOL v53 = (uint64_t *)*v53;
        if (!v53) {
          goto LABEL_99;
        }
      }
    }
    if (__p)
    {
      uint64_t v105 = (unint64_t *)__p;
      operator delete(__p);
    }

    v101[0] = &v109;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v101);
    if (v112)
    {
      std::string v113 = v112;
      operator delete(v112);
    }
    uint64_t v15 = v96;
    if (v96) {
      goto LABEL_21;
    }
LABEL_22:
    if (v14) {
      nitro::nitro_function::nitro_function(v14);
    }
    unint64_t v6 = v115 + 1;
    unint64_t v115 = v6;
    uint64_t v5 = *((void *)a1 + 4);
    uint64_t v19 = *((void *)a1 + 5);
  }
  while (v6 < (v19 - v5) >> 4);
  if (v19 != v5)
  {
    uint64_t v71 = 0;
    unint64_t v72 = 0;
    do
    {
      uint64_t v73 = *(void *)(*(void *)(v5 + v71) + 64);
      std::string::basic_string[abi:ne180100]<0>(v101, (char *)Espresso::pass_constant_if_conditions::kernel_attribute_name);
      std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__erase_unique<std::string>((void *)(v73 + 240), (unsigned __int8 *)v101);
      if (v102 < 0) {
        operator delete(v101[0]);
      }
      ++v72;
      uint64_t v5 = *((void *)a1 + 4);
      v71 += 16;
    }
    while (v72 < (*((void *)a1 + 5) - v5) >> 4);
  }
LABEL_161:
  *(unsigned char *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  if (*((void *)&v118 + 1))
  {
    uint64_t v74 = (std::__shared_weak_count *)operator new(0x48uLL);
    uint64_t v75 = v74;
    v74->__shared_owners_ = 0;
    v74->__shared_weak_owners_ = 0;
    v74->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE389338;
    v74[2].__shared_weak_owners_ = 0;
    v74[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE369630;
    *(_OWORD *)&v74[1].__shared_owners_ = 0u;
    p_uint64_t shared_owners = &v74[1].__shared_owners_;
    v74[2].std::__shared_count = 0u;
    LODWORD(v74[2].__shared_weak_owners_) = 1065353216;
    long long v77 = (uint64_t *)v118;
    if ((void)v118)
    {
      char v97 = v74 + 1;
      char v98 = v74;
      do
      {
        int v78 = *((_DWORD *)v77 + 6);
        uint64_t v79 = *(void *)(*(void *)(*((void *)a1 + 4) + 16 * v77[2]) + 64);
        std::string::basic_string[abi:ne180100]<0>(v101, (char *)Espresso::pass_constant_if_conditions::kernel_attribute_name);
        unint64_t v112 = (long long *)v101;
        *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v79 + 240, (unsigned __int8 *)v101, (uint64_t)&std::piecewise_construct, &v112)+ 10) = v78;
        if (v102 < 0) {
          operator delete(v101[0]);
        }
        v101[0] = v77 + 2;
        uint64_t v80 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)a1 + 96, (unint64_t *)v77 + 2, (uint64_t)&std::piecewise_construct, (uint64_t **)v101);
        BOOL v81 = (char *)v80[3];
        int v82 = (char *)v80[4];
        while (v81 != v82)
        {
          int v83 = *((_DWORD *)v77 + 6);
          v101[0] = v81;
          *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,Espresso::constant_type_t>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::constant_type_t>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::constant_type_t>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::constant_type_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(p_shared_owners, (unsigned __int8 *)v81, (long long **)v101)+ 10) = v83;
          v81 += 24;
        }
        long long v77 = (uint64_t *)*v77;
      }
      while (v77);
      a2 = v93;
      uint64_t v84 = *(std::__shared_weak_count **)(v93 + 16);
      uint64_t v75 = v98;
      atomic_fetch_add_explicit(&v98->__shared_owners_, 1uLL, memory_order_relaxed);
      *(void *)(v93 + 8) = v97;
      *(void *)(v93 + 16) = v98;
      if (v84) {
        nitro::nitro_function::nitro_function(v84);
      }
    }
    else
    {
      atomic_fetch_add_explicit(&v74->__shared_owners_, 1uLL, memory_order_relaxed);
      *(void *)(a2 + 8) = v74 + 1;
      *(void *)(a2 + 16) = v74;
    }
    *(unsigned char *)a2 = 1;
    nitro::nitro_function::nitro_function(v75);
  }
  else
  {
    *(unsigned char *)a2 = 0;
  }
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__deallocate_node((void **)v116[2]);
  char v85 = (void *)v116[0];
  v116[0] = 0;
  if (v85) {
    operator delete(v85);
  }
  return std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&v117);
}

void sub_1920F4518(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void *__p,uint64_t a59)
{
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::~__hash_table(v59 - 200);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100](v59 - 160);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__erase_unique<std::string>(void *a1, unsigned __int8 *a2)
{
  uint64_t v3 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>(a1, a2);
  if (v3)
  {
    int8x8_t v4 = (int8x8_t)a1[1];
    unint64_t v5 = *((void *)v3 + 1);
    uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4);
    v6.i16[0] = vaddlv_u8(v6);
    if (v6.u32[0] > 1uLL)
    {
      if (v5 >= *(void *)&v4) {
        v5 %= *(void *)&v4;
      }
    }
    else
    {
      v5 &= *(void *)&v4 - 1;
    }
    unsigned int v7 = *(unsigned __int8 **)(*a1 + 8 * v5);
    do
    {
      uint64_t v8 = v7;
      unsigned int v7 = *(unsigned __int8 **)v7;
    }
    while (v7 != v3);
    if (v8 == (unsigned __int8 *)(a1 + 2)) {
      goto LABEL_20;
    }
    unint64_t v9 = *((void *)v8 + 1);
    if (v6.u32[0] > 1uLL)
    {
      if (v9 >= *(void *)&v4) {
        v9 %= *(void *)&v4;
      }
    }
    else
    {
      v9 &= *(void *)&v4 - 1;
    }
    if (v9 != v5)
    {
LABEL_20:
      if (!*(void *)v3) {
        goto LABEL_21;
      }
      unint64_t v10 = *(void *)(*(void *)v3 + 8);
      if (v6.u32[0] > 1uLL)
      {
        if (v10 >= *(void *)&v4) {
          v10 %= *(void *)&v4;
        }
      }
      else
      {
        v10 &= *(void *)&v4 - 1;
      }
      if (v10 != v5) {
LABEL_21:
      }
        *(void *)(*a1 + 8 * v5) = 0;
    }
    uint64_t v11 = *(void *)v3;
    if (*(void *)v3)
    {
      unint64_t v12 = *(void *)(v11 + 8);
      if (v6.u32[0] > 1uLL)
      {
        if (v12 >= *(void *)&v4) {
          v12 %= *(void *)&v4;
        }
      }
      else
      {
        v12 &= *(void *)&v4 - 1;
      }
      if (v12 != v5)
      {
        *(void *)(*a1 + 8 * v12) = v8;
        uint64_t v11 = *(void *)v3;
      }
    }
    *(void *)uint64_t v8 = v11;
    *(void *)uint64_t v3 = 0;
    --a1[3];
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,unsigned long>,void *>>>::operator()[abi:ne180100](1, (void **)v3);
  }
}

void Espresso::fuse_vertical<Espresso::generic_general_padding_kernel,Espresso::generic_convolution_kernel>(Espresso::net *a1, void *a2)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  uint64_t v30 = a2;
  Espresso::network_optimization_graph::network_optimization_graph((Espresso::network_optimization_graph *)v43, a1);
  long long v40 = 0u;
  long long v41 = 0u;
  long long v38 = 0u;
  *(_OWORD *)std::string __p = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v35 = 0u;
  v42[0] = 0;
  v42[1] = a1;
  LODWORD(v49[0]) = 0;
  uint64_t v3 = *((void *)a1 + 4);
  if (*((void *)a1 + 5) != v3)
  {
    unint64_t v4 = 0;
    do
    {
      LODWORD(v42[0]) = v4;
      long long v5 = *(_OWORD *)(v3 + 16 * v4);
      uint64_t v6 = *(void *)(v3 + 16 * v4 + 8);
      if (v6) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
      }
      unsigned int v7 = (std::__shared_weak_count *)*((void *)&v37 + 1);
      long long v37 = v5;
      if (v7) {
        nitro::nitro_function::nitro_function(v7);
      }
      uint64_t v8 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v45, v4, v49);
      if ((char *)v8[6] - (char *)v8[5] == 4)
      {
        HIDWORD(v42[0]) = *(_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v45, v42[0], v42)[5];
        unint64_t v9 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v46, SHIDWORD(v42[0]), (_DWORD *)v42 + 1);
        if ((char *)v9[6] - (char *)v9[5] == 4)
        {
          uint64_t v10 = *((void *)a1 + 4);
          long long v11 = *(_OWORD *)(v10 + 16 * SHIDWORD(v42[0]));
          uint64_t v12 = *(void *)(v10 + 16 * SHIDWORD(v42[0]) + 8);
          if (v12) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
          }
          BOOL v13 = (std::__shared_weak_count *)*((void *)&v38 + 1);
          long long v38 = v11;
          if (v13) {
            nitro::nitro_function::nitro_function(v13);
          }
          uint64_t v14 = v37;
          uint64_t v15 = *(void **)(v37 + 64);
          if (v15
          {
            uint64_t v16 = *(void *)(v14 + 72);
            if (v16) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
            }
          }
          else
          {
            uint64_t v16 = 0;
          }
          int v17 = (std::__shared_weak_count *)*((void *)&v35 + 1);
          *(void *)&long long v35 = v15;
          *((void *)&v35 + 1) = v16;
          if (v17) {
            nitro::nitro_function::nitro_function(v17);
          }
          uint64_t v18 = v38;
          uint64_t v19 = *(void **)(v38 + 64);
          if (v19
          {
            uint64_t v20 = *(void *)(v18 + 72);
            if (v20) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
            }
          }
          else
          {
            uint64_t v20 = 0;
          }
          uint64_t v21 = (std::__shared_weak_count *)*((void *)&v36 + 1);
          *(void *)&long long v36 = v19;
          *((void *)&v36 + 1) = v20;
          if (v21)
          {
            nitro::nitro_function::nitro_function(v21);
            uint64_t v19 = (void *)v36;
          }
          if ((void)v35 && v19) {
            v30[2](v30, &v35);
          }
        }
      }
      LODWORD(v49[0]) = ++v4;
      uint64_t v3 = *((void *)a1 + 4);
    }
    while (v4 < (*((void *)a1 + 5) - v3) >> 4);
  }
  std::__sort<std::__less<int,int> &,int *>();
  unint64_t v22 = __p[0];
  BOOL v23 = __p[1];
  if (__p[0] != __p[1])
  {
    int v24 = 0;
    do
    {
      Espresso::net::remove_layer(a1, v24 + *v22++);
      --v24;
    }
    while (v22 != v23);
  }
  uint64_t v25 = (int *)*((void *)&v40 + 1);
  uint64_t v26 = (int *)v41;
  if (*((void *)&v40 + 1) != (void)v41)
  {
    int v27 = 0;
    do
    {
      int v28 = *v25;
      int v34 = v27 + *v25;
      LODWORD(v49[0]) = v28;
      v49[1] = *((void ***)v25 + 1);
      long long v29 = (std::__shared_weak_count *)*((void *)v25 + 2);
      uint8x8_t v50 = v29;
      if (v29) {
        atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      memset(v51, 0, sizeof(v51));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v51, *((void *)v25 + 3), *((void *)v25 + 4), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v25 + 4) - *((void *)v25 + 3)) >> 3));
      memset(v52, 0, sizeof(v52));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v52, *((void *)v25 + 6), *((void *)v25 + 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v25 + 7) - *((void *)v25 + 6)) >> 3));
      uint64_t v31 = 0;
      uint64_t v32 = 0;
      uint64_t v33 = 0;
      uint64_t v47 = &v31;
      char v48 = 0;
      uint64_t v31 = (char *)operator new(0x48uLL);
      uint64_t v32 = (uint64_t)v31;
      uint64_t v33 = v31 + 72;
      uint64_t v32 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::net::new_layer_info>,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info*>((uint64_t)&v33, (uint64_t)v49, (uint64_t)&v53, (uint64_t)v31);
      Espresso::net::insert_layers((uint64_t)a1, &v34, (uint64_t *)&v31);
      uint64_t v47 = &v31;
      std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&v47);
      uint64_t v47 = (char **)v52;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v47);
      uint64_t v47 = (char **)v51;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v47);
      if (v50) {
        nitro::nitro_function::nitro_function(v50);
      }
      ++v27;
      v25 += 18;
    }
    while (v25 != v26);
  }
  v49[0] = (void **)&v40 + 1;
  std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100](v49);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (*((void *)&v38 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v38 + 1));
  }
  if (*((void *)&v37 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v37 + 1));
  }
  if (*((void *)&v36 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v36 + 1));
  }
  if (*((void *)&v35 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v35 + 1));
  }
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v46[1]);
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v45[1]);
  if (v44) {
    nitro::nitro_function::nitro_function(v44);
  }
}

void sub_1920F4C64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_pointer<MIL::UnknownLocation  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t espresso_create_context(unsigned int a1, int a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  int v6 = a2;
  unsigned int v7 = a1;
  uint64_t v2 = (void *)MEMORY[0x192FF2020]();
  adjust_espresso_engine((Espresso *)&v7, (char *)&v6);
  if (pre_validate_context(v7))
  {
    if (g_espresso_autoinitialize)
    {
      uint64_t v3 = (std::mutex *)g_autoinitialize_mutex;
      std::mutex::lock((std::mutex *)g_autoinitialize_mutex);
      if (g_espresso_autoinitialize)
      {
        int v4 = g_autoinitialize_ctx_count;
        if (!g_autoinitialize_ctx_count)
        {
          espresso_initialize_was_called = 1;
          initialize_static_memory();
          int v4 = g_autoinitialize_ctx_count;
        }
        g_autoinitialize_ctx_count = v4 + 1;
      }
      else
      {
        initialize_static_memory();
      }
      std::mutex::unlock(v3);
    }
    else
    {
      initialize_static_memory();
    }
    operator new();
  }
  return 0;
}

void sub_1920F4F40(_Unwind_Exception *a1)
{
}

void sub_1920F4F4C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void adjust_espresso_engine(Espresso *a1, char *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (Espresso::hardware::is_virtual_machine(void)::onceToken != -1) {
    dispatch_once(&Espresso::hardware::is_virtual_machine(void)::onceToken, &__block_literal_global_37_7277);
  }
  if (Espresso::hardware::is_virtual_machine(void)::result) {
    BOOL v4 = *(_DWORD *)a1 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    long long v5 = Espresso::espresso_os_log_subsystem(a1, a2);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      int v6 = *(_DWORD *)a1;
      int v7 = *(_DWORD *)a2;
      v8[0] = 67109888;
      v8[1] = v6;
      __int16 v9 = 1024;
      int v10 = v7;
      __int16 v11 = 1024;
      int v12 = 0;
      __int16 v13 = 1024;
      int v14 = -1;
      _os_log_impl(&dword_1920CB000, v5, OS_LOG_TYPE_INFO, "VM detected: Adjusted requested context from (eng=%d dev=%d) to (eng=%d dev=%d)", (uint8_t *)v8, 0x1Au);
    }

    *(_DWORD *)a1 = 0;
    *(_DWORD *)a2 = -1;
  }
}

BOOL pre_validate_context(unsigned int a1)
{
  if (a1 >> 1 != 5003 || (BOOL result = Espresso::hardware::supports_platform(10007)))
  {
    if (a1 == 5)
    {
      if (Espresso::hardware::is_virtual_machine(void)::onceToken != -1) {
        dispatch_once(&Espresso::hardware::is_virtual_machine(void)::onceToken, &__block_literal_global_37_7277);
      }
      if (!Espresso::hardware::is_virtual_machine(void)::result) {
        return 1;
      }
    }
    else
    {
      if (a1 != 100000) {
        return 1;
      }
      Espresso::abstract_engine_factory::shared(&v5);
      int v4 = 100000;
      Espresso::abstract_engine_factory::engine_for_platform(v5, &v4, &v7);
      if (v6) {
        nitro::nitro_function::nitro_function(v6);
      }
      uint64_t v3 = v7;
      if (v8) {
        nitro::nitro_function::nitro_function(v8);
      }
      if (v3) {
        return 1;
      }
    }
    return 0;
  }
  return result;
}

void sub_1920F5158(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    nitro::nitro_function::nitro_function(a12);
  }
  _Unwind_Resume(exception_object);
}

void EspressoLight::espresso_context::espresso_context(uint64_t a1)
{
  *(void *)a1 = 0x50FBC8A8A6F7B03CLL;
  *(_DWORD *)(a1 + 8) = 0;
  operator new();
}

void sub_1920F5E4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v26 & 1) == 0)
    {
LABEL_8:

      uint64_t v28 = *(void *)(v23 + 16);
      *(void *)(v23 + 16) = 0;
      if (v28) {
        std::default_delete<EspressoLight::espresso_context::priv_t>::operator()[abi:ne180100](v28);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v26)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v25);
  goto LABEL_8;
}

void sub_1920F60E4()
{
  JUMPOUT(0x1920F60CCLL);
}

void sub_1920F60F0()
{
}

void initialize_static_memory(void)
{
  if (initialize_static_memory(void)::initializeOnceToken != -1) {
    dispatch_once(&initialize_static_memory(void)::initializeOnceToken, &__block_literal_global_156);
  }
  uint64_t v0 = (std::mutex *)initialize_static_memory(void)::initializeMutex;
  std::mutex::lock((std::mutex *)initialize_static_memory(void)::initializeMutex);
  Espresso::abstract_engine_factory::shared(&v1);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::shared();

  std::mutex::unlock(v0);
}

void sub_1920F6180(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t espresso_tmp_enable_montreal(int a1)
{
  Espresso::abstract_engine_factory::shared(&v9);
  LODWORD(v5) = 0;
  Espresso::abstract_engine_factory::shared(&v11);
  Espresso::abstract_engine_factory::engine_for_platform(v11, (int *)&v5, &v7);
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
  int v4 = 80000;
  Espresso::abstract_engine_factory::shared(&v11);
  Espresso::abstract_engine_factory::engine_for_platform(v11, &v4, &v5);
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
  uint64_t v2 = v9;
  if (a1)
  {
    Espresso::abstract_engine_factory::register_kernel_class(v9, "rnn_arch", v7, &__block_literal_global_2300);
    Espresso::abstract_engine_factory::register_kernel_class(v2, "rnn_arch", v5, &__block_literal_global_2300);
  }
  else
  {
    Espresso::abstract_engine_factory::register_kernel_class(v9, "rnn_arch", v7, &__block_literal_global_38_2302);
    Espresso::abstract_engine_factory::register_kernel_class(v2, "rnn_arch", v5, &__block_literal_global_40);
  }
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  return 0;
}

void sub_1920F62BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a12) {
    nitro::nitro_function::nitro_function(a12);
  }
  if (a14) {
    nitro::nitro_function::nitro_function(a14);
  }
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::create_context(int *a1@<X0>, void *a2@<X8>)
{
  Espresso::abstract_engine_factory::shared(&v11);
  Espresso::abstract_engine_factory::engine_for_platform(v11, a1, &v9);
  uint64_t v5 = v12;
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    int v6 = v9;
    if (v9)
    {
LABEL_4:
      (*(void (**)(Espresso *, Espresso **, uint64_t))(*(void *)v6 + 32))(v6, &v9, 0xFFFFFFFFLL);
      uint64_t v7 = v10;
      if (!v10) {
        return;
      }
      goto LABEL_9;
    }
  }
  else
  {
    int v6 = v9;
    if (v9) {
      goto LABEL_4;
    }
  }
  uint64_t v8 = Espresso::espresso_os_log_subsystem(v6, v4);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
  {
    Espresso::create_context(a1, v8);

    *a2 = 0;
    a2[1] = 0;
    uint64_t v7 = v10;
    if (!v10) {
      return;
    }
  }
  else
  {

    *a2 = 0;
    a2[1] = 0;
    uint64_t v7 = v10;
    if (!v10) {
      return;
    }
  }
LABEL_9:
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void sub_1920F6488(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)())v23->__on_zero_shared)();
    std::__shared_weak_count::__release_weak(v23);
  }
  if (a2 != 1) {
    _Unwind_Resume(exception_object);
  }
  __cxa_begin_catch(exception_object);
  unint64_t v22 = Espresso::espresso_os_log_subsystem(0, v21);
  if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR)) {
    Espresso::create_context();
  }

  *uint64_t v18 = 0;
  v18[1] = 0;
  __cxa_end_catch();
}

void Espresso::abstract_engine_factory::engine_for_platform(uint64_t a1@<X0>, int *a2@<X1>, void *a3@<X8>)
{
  int v6 = *(std::recursive_mutex **)(a1 + 96);
  std::recursive_mutex::lock(v6);
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v8 = a1 + 32;
  uint64_t v7 = v9;
  if (!v9) {
    goto LABEL_11;
  }
  int v10 = *a2;
  uint64_t v11 = v8;
  do
  {
    int v12 = *(_DWORD *)(v7 + 32);
    BOOL v13 = v12 < v10;
    if (v12 >= v10) {
      int v14 = (uint64_t *)v7;
    }
    else {
      int v14 = (uint64_t *)(v7 + 8);
    }
    if (!v13) {
      uint64_t v11 = v7;
    }
    uint64_t v7 = *v14;
  }
  while (*v14);
  if (v11 != v8 && v10 >= *(_DWORD *)(v11 + 32))
  {
    uint64_t v16 = *(void *)(v11 + 40);
    uint64_t v15 = *(void *)(v11 + 48);
    *a3 = v16;
    a3[1] = v15;
    if (v15) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
LABEL_11:
    *a3 = 0;
    a3[1] = 0;
  }

  std::recursive_mutex::unlock(v6);
}

__n128 Espresso::BNNSEngine::engine::create_context@<Q0>(uint64_t *a1@<X1>, __n128 *a2@<X8>)
{
  int v4 = operator new(0xF0uLL);
  v4[1] = 0;
  v4[2] = 0;
  *int v4 = &unk_1EE381420;
  Espresso::context_cpu::context_cpu((uint64_t)(v4 + 3), a1);
  v4[3] = &unk_1EE3293E0;
  *((unsigned char *)v4 + 184) = 0;
  *((_OWORD *)v4 + 12) = 0u;
  *((_OWORD *)v4 + 13) = 0u;
  v4[28] = 0;
  *((_DWORD *)v4 + 58) = 1065353216;
  *((_DWORD *)v4 + 35) = (_get_cpu_capabilities() >> 27) & 0xF;
  *((unsigned char *)v4 + 146) = (MEMORY[0xFFFFFC020] & 8) != 0;
  result.n128_u64[0] = (unint64_t)(v4 + 3);
  result.n128_u64[1] = (unint64_t)v4;
  *a2 = result;
  return result;
}

void sub_1920F66EC(_Unwind_Exception *a1)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v1[8].__shared_owners_);
  Espresso::context_cpu::~context_cpu(v2);
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

uint64_t Espresso::context_cpu::context_cpu(uint64_t a1, uint64_t *a2)
{
  *(void *)Espresso::abstract_context::abstract_context(a1, a2) = &unk_1EE32A5A8;
  uint64_t v3 = (char *)operator new(0x90uLL);
  *((void *)v3 + 1) = 0;
  *((void *)v3 + 2) = 0;
  *(void *)uint64_t v3 = &unk_1EE38D2E0;
  *((_OWORD *)v3 + 2) = 0u;
  *((_OWORD *)v3 + 3) = 0u;
  v3[64] = 1;
  *(_OWORD *)(v3 + 72) = 0u;
  *(_OWORD *)(v3 + 88) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *((_WORD *)v3 + 60) = 256;
  *((void *)v3 + 16) = 0;
  *((void *)v3 + 17) = 0;
  *((void *)v3 + 3) = &unk_1EE377560;
  *(void *)(a1 + 144) = v3 + 24;
  *(void *)(a1 + 152) = v3;
  *(unsigned char *)(a1 + 44) = 1;
  return a1;
}

void sub_1920F67D8(_Unwind_Exception *a1)
{
  Espresso::abstract_context::~abstract_context(v1);
  _Unwind_Resume(a1);
}

uint64_t Espresso::abstract_context::abstract_context(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  *(void *)a1 = &unk_1EE33D8C0;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 37) = 0;
  *(void *)(a1 + 48) = 0xFFFFFFFFLL;
  *(unsigned char *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 60) = 1993;
  *(_WORD *)(a1 + 64) = 256;
  *(_DWORD *)(a1 + 68) = 0;
  *(_WORD *)(a1 + 72) = 256;
  *(_DWORD *)(a1 + 76) = 0;
  *(_DWORD *)(a1 + 80) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 88) = 0;
  *(unsigned char *)(a1 + 112) = 1;
  *(void *)(a1 + 121) = 0;
  *(void *)(a1 + 113) = 0;
  *(unsigned char *)(a1 + 137) = 0;
  *(void *)(a1 + 129) = 0;
  uint64_t v5 = operator new(0x20uLL);
  v5[1] = 0;
  v5[2] = 0;
  void *v5 = &unk_1EE38D510;
  *((_DWORD *)v5 + 6) = 1;
  *(void *)(a1 + 88) = v5 + 3;
  *(void *)(a1 + 96) = v5;
  int v6 = dispatch_get_global_queue(-2, 0);
  dispatch_queue_t v7 = dispatch_queue_create_with_target_V2("com.espresso.random", 0, v6);
  uint64_t v8 = *(void **)(a1 + 104);
  *(void *)(a1 + 104) = v7;

  return a1;
}

void sub_1920F6900(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  _Unwind_Resume(exception_object);
}

__n128 Espresso::engine_cpu::create_context@<Q0>(uint64_t *a1@<X1>, __n128 *a2@<X8>)
{
  uint64_t v4 = operator new(0xB8uLL);
  v4[1] = 0;
  v4[2] = 0;
  *uint64_t v4 = &unk_1EE381848;
  result.n128_u64[0] = Espresso::context_cpu::context_cpu((uint64_t)(v4 + 3), a1);
  result.n128_u64[1] = (unint64_t)v4;
  *a2 = result;
  return result;
}

void sub_1920F6984(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

BOOL Espresso::hardware::supports_platform(int a1)
{
  if (a1 >> 1 == 5003)
  {
    if (Espresso::hardware::supports_platform(Espresso::platform)::once_token != -1) {
      dispatch_once(&Espresso::hardware::supports_platform(Espresso::platform)::once_token, &__block_literal_global_7276);
    }
    if (Espresso::hardware::supports_platform(Espresso::platform)::has_ane)
    {
      if (Espresso::hardware::is_virtual_machine(void)::onceToken != -1) {
        dispatch_once(&Espresso::hardware::is_virtual_machine(void)::onceToken, &__block_literal_global_37_7277);
      }
      return Espresso::hardware::is_virtual_machine(void)::result == 0;
    }
    return 0;
  }
  BOOL result = 1;
  if (a1 <= 49999)
  {
    if (a1 <= 10007)
    {
      if (!a1 || a1 == 100) {
        return result;
      }
      return 0;
    }
    if (a1 == 10008 || a1 == 10010) {
      return result;
    }
    int v3 = 20000;
  }
  else
  {
    if ((a1 - 50000) <= 8 && ((1 << (a1 - 80)) & 0x125) != 0 || a1 == 100000) {
      return result;
    }
    int v3 = 90000;
  }
  if (a1 != v3) {
    return 0;
  }
  if (Espresso::hardware::supports_platform(Espresso::platform)::once_token != -1) {
    dispatch_once(&Espresso::hardware::supports_platform(Espresso::platform)::once_token, &__block_literal_global_27);
  }
  return Espresso::hardware::supports_platform(Espresso::platform)::has_metal != 0;
}

double Espresso::ANERuntimeEngine::engine::create_context@<D0>(uint64_t *a1@<X1>, _OWORD *a2@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::ANERuntimeEngine::context,std::allocator<Espresso::ANERuntimeEngine::context>,std::shared_ptr<Espresso::abstract_engine> const&,void>(&v4, a1);
  double result = *(double *)&v4;
  *a2 = v4;
  return result;
}

void std::allocate_shared[abi:ne180100]<Espresso::ANERuntimeEngine::context,std::allocator<Espresso::ANERuntimeEngine::context>,std::shared_ptr<Espresso::abstract_engine> const&,void>(void *a1, uint64_t *a2)
{
  long long v4 = (char *)operator new(0xB0uLL);
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = 0;
  *(void *)long long v4 = &unk_1EE384050;
  Espresso::abstract_context::abstract_context((uint64_t)(v4 + 24), a2);
  *((void *)v4 + 3) = &unk_1EE33B008;
  *(_DWORD *)(v4 + 162) = 0;
  *((_DWORD *)v4 + 42) = 3;
  v4[96] = 1;
  v4[80] = 1;
  v4[148] = 1;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = ___ZN8Espresso16ANERuntimeEngine7contextC2ERKNSt3__110shared_ptrINS_15abstract_engineEEE_block_invoke;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  block[4] = v4 + 24;
  if (Espresso::ANERuntimeEngine::context::context(std::shared_ptr<Espresso::abstract_engine> const&)::onceToken != -1) {
    dispatch_once(&Espresso::ANERuntimeEngine::context::context(std::shared_ptr<Espresso::abstract_engine> const&)::onceToken, block);
  }
  v4[68] = *((_DWORD *)v4 + 42) != 0;
  uint64_t v5 = [MEMORY[0x1E4F1CB18] standardUserDefaults];
  int v6 = [v5 persistentDomainForName:*MEMORY[0x1E4F283E0]];

  dispatch_queue_t v7 = [v6 objectForKeyedSubscript:@"espresso.use_iofences"];
  uint64_t v8 = v7;
  if (v7) {
    v4[165] = [v7 BOOLValue];
  }

  *a1 = v4 + 24;
  a1[1] = v4;
}

void sub_1920F6CC4(_Unwind_Exception *a1)
{
  Espresso::abstract_context::~abstract_context(v2);
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v6);
  _Unwind_Resume(a1);
}

__n128 Espresso::MPSEngine::engine::create_context@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  int v6 = operator new(0x108uLL);
  v6[1] = 0;
  v6[2] = 0;
  *int v6 = &unk_1EE38D2A8;
  result.n128_u64[0] = Espresso::MPSEngine::context::context<int>((uint64_t)(v6 + 3), a1, a2);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1920F6D84(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void Espresso::analysis_to_preserve_mil_types::serialize(Espresso::analysis_to_preserve_mil_types *this@<X0>, void *a2@<X8>)
{
  long long v4 = Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::shared();
  std::string::basic_string[abi:ne180100]<0>(__p, "json");
  Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::make(a2, (uint64_t)v4, __p);
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  if (*((void *)this + 4))
  {
    for (uint64_t i = (void *)*((void *)this + 3); i; uint64_t i = (void *)*i)
    {
      int v6 = Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::shared();
      std::string::basic_string[abi:ne180100]<0>(__p, "json");
      Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::make(&v8, (uint64_t)v6, __p);
      if (v11 < 0) {
        operator delete(__p[0]);
      }
      uint64_t v7 = v8;
      std::string::basic_string[abi:ne180100]<0>(__p, "compute_path");
      (*(void (**)(uint64_t, void **, void *))(*(void *)v7 + 160))(v7, __p, i + 5);
      if (v11 < 0) {
        operator delete(__p[0]);
      }
      (*(void (**)(void, void *, uint64_t *))(*(void *)*a2 + 240))(*a2, i + 2, &v8);
      if (v9) {
        nitro::nitro_function::nitro_function(v9);
      }
    }
  }
}

void sub_1920F6EF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::shared()
{
  std::string::basic_string[abi:ne180100]<0>(__p, "generic_serdes_object");
  uint64_t v0 = Espresso::generic_factory_t::shared((uint64_t)__p, &__block_literal_global_1071);
  uint64_t v1 = (const void *)v0;
  if (v4 < 0)
  {
    operator delete(__p[0]);
    if (v1) {
  }
    }
  else if (v0)
  {
  }
  return 0;
}

void Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::make(void *a1, uint64_t a2, void *a3)
{
  Espresso::generic_factory_t::make_(a2, a3, &lpsrc);
  if (lpsrc
  {
    uint64_t v5 = v4;
    int v6 = v8;
    *a1 = v5;
    a1[1] = v6;
    if (!v6) {
      return;
    }
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
    int v6 = v8;
    if (!v8) {
      return;
    }
  }

  nitro::nitro_function::nitro_function(v6);
}

void Espresso::generic_factory_t::make_(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  void (**v13)(void *__return_ptr, void);
  std::__shared_weak_count *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;

  int v6 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  uint64_t v9 = *(void **)(a1 + 80);
  uint64_t v7 = (void *)(a1 + 80);
  uint64_t v8 = v9;
  if (!v9) {
    goto LABEL_8;
  }
  int v10 = v7;
  do
  {
    BOOL v11 = std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v8 + 4, a2);
    int v12 = v8 + 1;
    if (!v11)
    {
      int v12 = v8;
      int v10 = v8;
    }
    uint64_t v8 = (void *)*v12;
  }
  while (*v12);
  if (v10 == v7 || std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, v10 + 4))
  {
LABEL_8:
    std::mutex::unlock(v6);
LABEL_9:
    *a3 = 0;
    a3[1] = 0;
    return;
  }
  BOOL v13 = (void (**)(void *__return_ptr, void))MEMORY[0x192FF2250](v10[7]);
  std::mutex::unlock(v6);
  if (!v13) {
    goto LABEL_9;
  }
  v13[2](&v15, v13);
  int v14 = v16;
  *a3 = v15;
  a3[1] = v14;
  if (v14)
  {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    if (v16) {
      nitro::nitro_function::nitro_function(v16);
    }
  }
}

void sub_1920F71E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN8Espresso6SerDes23serdes_object_json_objc16register_backendEPNS_9factory_tINS0_21generic_serdes_objectEEE_block_invoke(void *a1@<X8>)
{
  _ZNSt3__115allocate_sharedB8ne180100IN8Espresso6SerDes23serdes_object_json_objcENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v3);
  if (v3)
  {
    uint64_t v2 = v4;
    *a1 = v3;
    a1[1] = v2;
    if (!v2) {
      return;
    }
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
    uint64_t v2 = v4;
    if (!v4) {
      return;
    }
  }

  nitro::nitro_function::nitro_function(v2);
}

void _ZNSt3__115allocate_sharedB8ne180100IN8Espresso6SerDes23serdes_object_json_objcENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(void *a1)
{
  uint64_t v2 = (char *)operator new(0x38uLL);
  *(_OWORD *)(v2 + 8) = 0u;
  *(void *)uint64_t v2 = &unk_1EE389E28;
  *((void *)v2 + 4) = 0;
  *(_OWORD *)(v2 + 40) = 0u;
  *((void *)v2 + 3) = &unk_1EE36C928;
  uint64_t v3 = objc_opt_new();
  char v4 = (void *)*((void *)v2 + 6);
  *((void *)v2 + 6) = v3;

  *a1 = v2 + 24;
  a1[1] = v2;

  std::shared_ptr<Espresso::SerDes::serdes_object_json_objc>::__enable_weak_this[abi:ne180100]<Espresso::SerDes::generic_serdes_object,Espresso::SerDes::serdes_object_json_objc,void>((uint64_t)a1, (void *)v2 + 4, (uint64_t)(v2 + 24));
}

void sub_1920F7334(_Unwind_Exception *a1)
{
  uint64_t shared_weak_owners = (std::__shared_weak_count *)v1[1].__shared_weak_owners_;
  if (shared_weak_owners) {
    std::__shared_weak_count::__release_weak(shared_weak_owners);
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::serdes_object_json_objc::set_obj(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  if (*((char *)a2 + 23) >= 0) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = (uint64_t *)*a2;
  }
  id v8 = [NSString stringWithUTF8String:v5];
  uint64_t v7 = *(std::__shared_weak_count **)(a3 + 8);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  [*(id *)(a1 + 24) setObject:v6[3] forKeyedSubscript:v8];
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
}

void sub_1920F7438(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }

  _Unwind_Resume(a1);
}

void Espresso::SerDes::serdes_object_json_objc::get_obj_array(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  char v4 = Espresso::SerDes::fast_dict_lookup(*(void **)(a1 + 24), a2);
  uint64_t v5 = v4;
  if (!v4)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    uint64_t v21 = std::string::append(&v24, "\" not found");
    long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    v25.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    std::logic_error::logic_error(exception, &v25);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
    __cxa_throw(exception, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
  }
  uint64_t v6 = [v4 count];
  if (v6)
  {
    for (uint64_t i = 0; i != v6; ++i)
    {
      id v8 = objc_msgSend(v5, "objectAtIndexedSubscript:", i, v23);
      std::allocate_shared[abi:ne180100]<Espresso::SerDes::serdes_object_json_objc,std::allocator<Espresso::SerDes::serdes_object_json_objc>,NSMutableDictionary * {__strong}&,void>(&v24, v8);
      long long v9 = *(_OWORD *)&v24.__r_.__value_.__l.__data_;
      if (v24.__r_.__value_.__l.__size_) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v24.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
      }
      BOOL v11 = (_OWORD *)a3[1];
      unint64_t v10 = a3[2];
      if ((unint64_t)v11 >= v10)
      {
        long long v23 = v9;
        uint64_t v13 = ((uint64_t)v11 - *a3) >> 4;
        if ((unint64_t)(v13 + 1) >> 60) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v14 = v10 - *a3;
        uint64_t v15 = v14 >> 3;
        if (v14 >> 3 <= (unint64_t)(v13 + 1)) {
          uint64_t v15 = v13 + 1;
        }
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v16 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v16 = v15;
        }
        int v27 = a3 + 2;
        int v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v16);
        uint64_t v18 = &v17[16 * v13];
        v25.__r_.__value_.__r.__words[0] = (std::string::size_type)v17;
        v25.__r_.__value_.__l.__size_ = (std::string::size_type)v18;
        int v26 = &v17[16 * v19];
        *(_OWORD *)uint64_t v18 = v23;
        v25.__r_.__value_.__r.__words[2] = (std::string::size_type)(v18 + 16);
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(a3, &v25);
        int v12 = (_OWORD *)a3[1];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v25);
      }
      else
      {
        *BOOL v11 = v9;
        int v12 = v11 + 1;
        a3[1] = v12;
      }
      a3[1] = v12;
      if (v24.__r_.__value_.__l.__size_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v24.__r_.__value_.__l.__size_);
      }
    }
  }
}

void sub_1920F7668(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a16 < 0)
  {
    operator delete(a11);
    if ((v25 & 1) == 0)
    {
LABEL_8:

      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a11);
      _Unwind_Resume(a1);
    }
  }
  else if (!v25)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v24);
  goto LABEL_8;
}

void std::shared_ptr<Espresso::SerDes::serdes_object_json_objc>::__enable_weak_this[abi:ne180100]<Espresso::SerDes::generic_serdes_object,Espresso::SerDes::serdes_object_json_objc,void>(uint64_t a1, void *a2, uint64_t a3)
{
  if (a2)
  {
    char v4 = (std::__shared_weak_count *)a2[1];
    if (!v4 || v4->__shared_owners_ == -1)
    {
      uint64_t v5 = *(std::__shared_weak_count **)(a1 + 8);
      if (v5)
      {
        atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        char v4 = (std::__shared_weak_count *)a2[1];
      }
      *a2 = a3;
      a2[1] = v5;
      if (v4) {
        std::__shared_weak_count::__release_weak(v4);
      }
      if (v5)
      {
        nitro::nitro_function::nitro_function(v5);
      }
    }
  }
}

void std::allocate_shared[abi:ne180100]<Espresso::SerDes::serdes_object_json_objc,std::allocator<Espresso::SerDes::serdes_object_json_objc>,NSMutableDictionary * {__strong}&,void>(void *a1, void *a2)
{
  char v4 = operator new(0x38uLL);
  v4[1] = 0;
  v4[2] = 0;
  *char v4 = &unk_1EE389E28;
  id v5 = a2;
  v4[5] = 0;
  v4[6] = v5;
  v4[4] = 0;
  v4[3] = &unk_1EE36C928;
  *a1 = v4 + 3;
  a1[1] = v4;

  std::shared_ptr<Espresso::SerDes::serdes_object_json_objc>::__enable_weak_this[abi:ne180100]<Espresso::SerDes::generic_serdes_object,Espresso::SerDes::serdes_object_json_objc,void>((uint64_t)a1, v4 + 4, (uint64_t)(v4 + 3));
}

uint64_t std::allocate_shared[abi:ne180100]<Espresso::MPSEngine::context,std::allocator<Espresso::MPSEngine::context>,std::shared_ptr<Espresso::abstract_engine>,objc_object  {objcproto9MTLDevice}* {__strong},void>(uint64_t *a1, uint64_t *a2, void *a3)
{
  uint64_t v6 = operator new(0x108uLL);
  v6[1] = 0;
  v6[2] = 0;
  *uint64_t v6 = &unk_1EE38D2A8;
  uint64_t result = Espresso::MPSEngine::context::context<objc_object  {objcproto9MTLDevice}* {__strong}>((uint64_t)(v6 + 3), a2, a3);
  *a1 = result;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_1920F78B4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

id Espresso::select_metal_device(Espresso *this)
{
  int v1 = (int)this;
  id v2 = MTLCreateSystemDefaultDevice();
  uint64_t v3 = v2;
  if ((v1 + 3) <= 1 && ([v2 supportsFeatureSet:6] & 1) == 0)
  {

LABEL_8:
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Metal device not found.");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
    __cxa_throw(exception, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
  }
  if (!v3) {
    goto LABEL_8;
  }

  return v3;
}

void sub_1920F7990(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

__n128 Espresso::ANERuntimeEngine::direct_engine::create_context@<Q0>(uint64_t *a1@<X1>, __n128 *a2@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::ANERuntimeEngine::context,std::allocator<Espresso::ANERuntimeEngine::context>,std::shared_ptr<Espresso::abstract_engine> const&,void>(&v4, a1);
  __n128 result = v4;
  *(unsigned char *)(v4.n128_u64[0] + 139) = 1;
  *a2 = result;
  return result;
}

void Espresso::interpreter_t::__launch_function(void *a1, void *a2, uint64_t a3, int a4, int a5)
{
  uint64_t v321 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = a1[12];
  id v5 = (std::__shared_weak_count *)a1[13];
  *(void *)std::string buf = v6;
  if (!v5 || (unint64_t v10 = std::__shared_weak_count::lock(v5), (*(void *)&buf[8] = v10) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  BOOL v11 = v10;
  int v12 = operator new(0xA0uLL);
  v12[1] = 0;
  v12[2] = 0;
  *int v12 = &unk_1EE386A88;
  *(void *)&long long v13 = Espresso::interpreter_state_t::interpreter_state_t((uint64_t)(v12 + 3), buf);
  *((void *)&v13 + 1) = v12;
  uint64_t v14 = *(std::__shared_weak_count **)(*a2 + 72);
  *(_OWORD *)(*a2 + 64) = v13;
  if (v14) {
    nitro::nitro_function::nitro_function(v14);
  }
  nitro::nitro_function::nitro_function(v11);
  uint64_t v15 = *a2;
  v304 = 0;
  v305 = 0;
  uint64_t v306 = 0;
  *(void *)std::string buf = a3;
  unint64_t v16 = (unint64_t)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(a1 + 5), a3, (uint64_t)&std::piecewise_construct, (long long **)buf);
  uint64_t v18 = *(void *)(v16 + 40);
  v285 = (uint64_t *)(v15 + 64);
  uint64_t v19 = *(void **)(v15 + 64);
  uint64_t v21 = (void *)v19[12];
  unint64_t v20 = v19[13];
  v292 = a2;
  if ((unint64_t)v21 >= v20)
  {
    unint64_t v16 = v19[11];
    uint64_t v23 = (uint64_t)((uint64_t)v21 - v16) >> 4;
    unint64_t v24 = v23 + 1;
    if ((unint64_t)(v23 + 1) >> 60) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v25 = v20 - v16;
    if (v25 >> 3 > v24) {
      unint64_t v24 = v25 >> 3;
    }
    BOOL v57 = (unint64_t)v25 >= 0x7FFFFFFFFFFFFFF0;
    unint64_t v26 = 0xFFFFFFFFFFFFFFFLL;
    if (!v57) {
      unint64_t v26 = v24;
    }
    if (v26)
    {
      unint64_t v26 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v26);
      unint64_t v16 = v19[11];
      uint64_t v21 = (void *)v19[12];
    }
    else
    {
      unint64_t v17 = 0;
    }
    int v27 = (void *)(v26 + 16 * v23);
    unint64_t v28 = v26 + 16 * v17;
    *int v27 = v18;
    v27[1] = a4;
    long long v22 = v27 + 2;
    if (v21 != (void *)v16)
    {
      do
      {
        *((_OWORD *)v27 - 1) = *((_OWORD *)v21 - 1);
        v27 -= 2;
        v21 -= 2;
      }
      while (v21 != (void *)v16);
      unint64_t v16 = v19[11];
    }
    v19[11] = v27;
    v19[12] = v22;
    v19[13] = v28;
    if (v16) {
      operator delete((void *)v16);
    }
  }
  else
  {
    *uint64_t v21 = v18;
    v21[1] = a4;
    long long v22 = v21 + 2;
  }
  v19[12] = v22;
  uint64_t v29 = a1[2];
  uint64_t v293 = a1[3];
  if (v29 != v293)
  {
    while (1)
    {
      uint64_t v30 = *(void **)v29;
      uint64_t v31 = *(void **)(*(void *)v29 + 1104);
      if (!v31)
      {
        uint64_t v32 = (char *)operator new(0x58uLL);
        *((void *)v32 + 1) = 0;
        *((void *)v32 + 2) = 0;
        *(void *)uint64_t v32 = &unk_1EE387D20;
        *(_OWORD *)(v32 + 24) = 0u;
        uint64_t v31 = v32 + 24;
        *(_OWORD *)(v32 + 40) = 0u;
        *((void *)v32 + 7) = 0;
        *((void *)v32 + 8) = 0;
        *((_DWORD *)v32 + 14) = 1065353216;
        *((void *)v32 + 9) = 0;
        *((void *)v32 + 10) = 0;
        v30[138] = v32 + 24;
        uint64_t v33 = (std::__shared_weak_count *)v30[139];
        v30[139] = v32;
        if (v33)
        {
          nitro::nitro_function::nitro_function(v33);
          uint64_t v31 = (void *)v30[138];
        }
      }
      if (v31[3])
      {
        int v34 = (void *)v31[2];
        if (v34)
        {
          do
          {
            long long v35 = (void *)*v34;
            operator delete(v34);
            int v34 = v35;
          }
          while (v35);
        }
        _OWORD v31[2] = 0;
        uint64_t v36 = v31[1];
        if (v36)
        {
          for (uint64_t i = 0; i != v36; ++i)
            *(void *)(*v31 + 8 * i) = 0;
        }
        v31[3] = 0;
      }
      std::vector<BOOL>::resize((uint64_t)(v31 + 5), (uint64_t)(v30[5] - v30[4]) >> 4);
      unint64_t v17 = v31[6];
      if (v17)
      {
        *(void *)std::string buf = v31[5];
        *(_DWORD *)&uint8_t buf[8] = 0;
        std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>((uint64_t)buf, v17);
      }
      for (j = (void *)v30[19]; j; j = (void *)*j)
        *(void *)(j[5] + 152) = 0;
      unsigned int v39 = (unsigned __int8 *)v30[29];
      long long v40 = (unsigned __int8 *)(v30 + 30);
      if (v39 != (unsigned __int8 *)(v30 + 30)) {
        break;
      }
LABEL_66:
      v29 += 8;
      if (v29 == v293) {
        goto LABEL_67;
      }
    }
    uint64_t v41 = (uint64_t)(v30 + 17);
    while (1)
    {
      Espresso::map_const_get<std::unordered_map<std::string,std::string>>((std::string *)buf, a1 + 23, (uint64_t)(v39 + 32), (uint64_t)(v39 + 32));
      if (buf[23] >= 0) {
        uint64_t v42 = buf[23];
      }
      else {
        uint64_t v42 = *(void *)&buf[8];
      }
      uint64_t v43 = v39[55];
      int v44 = (char)v43;
      if ((v43 & 0x80u) != 0) {
        uint64_t v43 = *((void *)v39 + 5);
      }
      if (v42 != v43)
      {
        if ((buf[23] & 0x80) != 0) {
          operator delete(*(void **)buf);
        }
        goto LABEL_60;
      }
      unint64_t v17 = v44 >= 0 ? (unint64_t)(v39 + 32) : *((void *)v39 + 4);
      if ((buf[23] & 0x80) == 0) {
        break;
      }
      unint64_t v49 = *(void **)buf;
      int v50 = memcmp(*(const void **)buf, (const void *)v17, *(size_t *)&buf[8]);
      operator delete(v49);
      if (!v50) {
        goto LABEL_59;
      }
LABEL_60:
      unint64_t v51 = (unsigned __int8 *)*((void *)v39 + 1);
      if (v51)
      {
        do
        {
          size_t v52 = v51;
          unint64_t v51 = *(unsigned __int8 **)v51;
        }
        while (v51);
      }
      else
      {
        do
        {
          size_t v52 = (unsigned __int8 *)*((void *)v39 + 2);
          BOOL v48 = *(void *)v52 == (void)v39;
          unsigned int v39 = v52;
        }
        while (!v48);
      }
      unsigned int v39 = v52;
      if (v52 == v40) {
        goto LABEL_66;
      }
    }
    if (buf[23])
    {
      uint64_t v45 = 0;
      do
      {
        int v46 = buf[v45];
        int v47 = *(unsigned __int8 *)(v17 + v45);
        BOOL v48 = v46 != v47 || buf[23] - 1 == v45++;
      }
      while (!v48);
      if (v46 != v47) {
        goto LABEL_60;
      }
    }
LABEL_59:
    *(void *)std::string buf = v39 + 32;
    unint64_t v16 = (unint64_t)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v41, v39 + 32, (long long **)buf);
    *(void *)(*(void *)(v16 + 40) + 152) = 1;
    goto LABEL_60;
  }
LABEL_67:
  uint64_t v54 = *v292;
  uint64_t v53 = v292[1];
  uint64_t v300 = *(void *)(*v285 + 24);
  uint64_t v301 = v54;
  uint64_t v302 = v53;
  if (v53) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v53 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v284 = 0;
  uint64_t v283 = 0;
  char v303 = 0;
  uint64_t v290 = 2;
  while (1)
  {
    uint64_t v55 = *v285;
    uint64_t v56 = *(void *)(*v285 + 96);
    BOOL v57 = a5 != -1 && v284 >= a5;
    BOOL v58 = !v57;
    if (*(void *)(*v285 + 88) == v56 || !v58) {
      break;
    }
    uint64_t v61 = *(void *)(v56 - 16);
    long long v60 = (uint64_t *)(v56 - 16);
    uint64_t v62 = v60[1];
    v286 = (unint64_t *)(v60 + 1);
    *(void *)(v55 + 112) = v61;
    *(void *)(v55 + 120) = v62 + 1;
    *(_WORD *)(v55 + 128) = 0;
    uint64_t v63 = *v60;
    uint64_t v64 = a1[2];
    uint64_t v65 = a1[3] - v64;
    if (*v60 >= (unint64_t)(v65 >> 3)) {
      Espresso::throw_exception_selector<Espresso::invalid_state_error,unsigned long &,unsigned long>("[interpreter_t] top.inetwork=%zu >= networks.size()=%zu", v63, v65 >> 3);
    }
    v281 = v60;
    uint64_t v66 = *(void *)(v55 + 24);
    if (v66) {
      BOOL v67 = v283 == v63;
    }
    else {
      BOOL v67 = 0;
    }
    if (!v67)
    {
      uint64_t v66 = *(void *)(v64 + 8 * v63);
      *(void *)(v55 + 24) = v66;
      uint64_t v283 = v63;
    }
    v294 = (void *)v66;
    unint64_t v68 = (float *)(v66 + 888);
    std::string::size_type v69 = *v286;
    unint64_t v16 = (unint64_t)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::find<unsigned long>((void *)(v66 + 888), *v286);
    if (v16)
    {
      v297.__r_.__value_.__r.__words[0] = v69;
      v288 = std::__hash_table<std::__hash_value_type<unsigned long,Espresso::net::basic_block_t>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,Espresso::net::basic_block_t>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,Espresso::net::basic_block_t>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,Espresso::net::basic_block_t>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v68, v69, &v297);
      unint64_t v70 = Espresso::net::get_analysis<Espresso::pass_blob_name_indexing_result>((uint64_t)v294);
      if (super_verbose) {
        printf("prepare_basic_block %zu %zu\n", v288[3], v288[4]);
      }
      Espresso::net::get_analysis_if_existing<Espresso::analysis_multi_head_program_gen>(buf, (uint64_t)v294);
      uint64_t v71 = *(void *)buf;
      unint64_t v16 = *(void *)&buf[8];
      if (*(void *)&buf[8]) {
        nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&buf[8]);
      }
      if (!v71)
      {
        int v82 = (void *)v294[138];
        v280 = v82 + 5;
        if (!v82[6]) {
          std::vector<BOOL>::resize((uint64_t)v280, (uint64_t)(v294[5] - v294[4]) >> 4);
        }
        int v83 = v288;
        std::string::size_type v84 = v288[3];
        while (2)
        {
          std::string::size_type v85 = v83[4];
          if (v84 >= v85) {
            goto LABEL_183;
          }
          uint64_t v86 = *(void *)(v294[4] + 16 * v84);
          int v87 = (void *)(v86 + 40);
          int v88 = *(char *)(v86 + 63);
          if (v88 < 0)
          {
            if (*(void *)(v86 + 48) != 11) {
              goto LABEL_183;
            }
            int v87 = (void *)*v87;
          }
          else if (v88 != 11)
          {
            goto LABEL_183;
          }
          uint64_t v89 = (void *)*v87;
          uint64_t v90 = *(void *)((char *)v87 + 3);
          if (v89 != (void *)0x747269765F696870 || v90 != 0x6C6175747269765FLL)
          {
LABEL_183:
            while (2)
            {
              if (v84 >= v85) {
                goto LABEL_184;
              }
              uint64_t v102 = v294[4] + 16 * v84;
              uint64_t v103 = std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__erase_unique<unsigned long>(v82, v84);
              uint64_t v104 = v82[5];
              std::string::size_type v105 = v84 >> 6;
              uint64_t v106 = 1 << v84;
              if (v103 || (*(void *)(v104 + 8 * v105) & v106) == 0)
              {
LABEL_147:
                *(void *)(v104 + 8 * v105) |= v106;
                std::vector<Espresso::layer_shape>::vector(&v309, (uint64_t)(*(void *)(*(void *)v102 + 88) - *(void *)(*(void *)v102 + 80)) >> 4);
                uint64_t v107 = *(void *)v102;
                uint64_t v108 = *(void *)(*(void *)v102 + 80);
                if (*(void *)(*(void *)v102 + 88) != v108)
                {
                  uint64_t v109 = 0;
                  uint64_t v110 = 0;
                  unint64_t v111 = 0;
                  do
                  {
                    Espresso::abstract_blob_container::shape(buf, *(void *)(v108 + v109));
                    std::string::size_type v112 = v309.__r_.__value_.__r.__words[0] + v110;
                    long long v113 = *(_OWORD *)buf;
                    long long v114 = *(_OWORD *)&buf[16];
                    *(void *)(v112 + 32) = *(void *)v320;
                    *(_OWORD *)std::string::size_type v112 = v113;
                    *(_OWORD *)(v112 + 16) = v114;
                    uint64_t v116 = (void *)(v112 + 40);
                    unint64_t v115 = *(void **)(v112 + 40);
                    if (v115)
                    {
                      *(void *)(v112 + 48) = v115;
                      operator delete(v115);
                      void *v116 = 0;
                      *(void *)(v112 + 48) = 0;
                      *(void *)(v112 + 56) = 0;
                    }
                    *(_OWORD *)uint64_t v116 = *(_OWORD *)&v320[8];
                    *(void *)(v112 + 56) = *(void *)&v320[24];
                    ++v111;
                    uint64_t v107 = *(void *)v102;
                    uint64_t v108 = *(void *)(*(void *)v102 + 80);
                    v110 += 64;
                    v109 += 16;
                  }
                  while (v111 < (*(void *)(*(void *)v102 + 88) - v108) >> 4);
                }
                (*(void (**)(long long *__return_ptr))(**(void **)(v107 + 64) + 64))(&v307);
                long long v117 = v307;
                for (uint64_t k = v307; k != *((void *)&v117 + 1); k += 64)
                  *(void *)(k + 24) = 0;
                uint64_t v119 = *(void *)(*(void *)v102 + 104);
                uint64_t v120 = *(void *)(*(void *)v102 + 112);
                unint64_t v121 = (uint64_t)(*((void *)&v117 + 1) - v117) >> 6;
                if (v121 != (v120 - v119) >> 4)
                {
                  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::resize((uint64_t *)(*(void *)v102 + 104), v121);
                  uint64_t v119 = *(void *)(*(void *)v102 + 104);
                  uint64_t v120 = *(void *)(*(void *)v102 + 112);
                }
                if (v120 != v119)
                {
                  unint64_t v122 = 0;
                  char v123 = 0;
                  do
                  {
                    uint64_t v124 = (uint64_t *)(v119 + 16 * v122);
                    Espresso::abstract_blob_container::shape(buf, *v124);
                    BOOL v125 = Espresso::layer_shape::operator==((uint64_t)buf, v307 + (v122 << 6));
                    if (*(void *)&v320[8])
                    {
                      *(void *)&v320[16] = *(void *)&v320[8];
                      operator delete(*(void **)&v320[8]);
                    }
                    unint64_t v126 = (Espresso *)(*(uint64_t (**)(void, uint64_t))(**(void **)(*(void *)v102 + 64)
                                                                                  + 264))(*(void *)(*(void *)v102 + 64), (uint64_t)(*(void *)(*(void *)v102 + 88)- *(void *)(*(void *)v102 + 80)) >> 4);
                    if ((!v125 | v126) == 1)
                    {
                      if (super_verbose)
                      {
                        int v128 = Espresso::espresso_os_log_subsystem(v126, v127);
                        if (os_log_type_enabled(v128, OS_LOG_TYPE_DEBUG))
                        {
                          Espresso::abstract_blob_container::shape(buf, *v124);
                          uint64_t v135 = Espresso::layer_shape::total_dim((Espresso::layer_shape *)buf);
                          uint64_t v136 = Espresso::layer_shape::total_dim((Espresso::layer_shape *)(v307 + (v122 << 6)));
                          LODWORD(v314.__r_.__value_.__l.__data_) = 134218752;
                          *(std::string::size_type *)((char *)v314.__r_.__value_.__r.__words + 4) = v84;
                          WORD2(v314.__r_.__value_.__r.__words[1]) = 2048;
                          *(std::string::size_type *)((char *)&v314.__r_.__value_.__r.__words[1] + 6) = v122;
                          HIWORD(v314.__r_.__value_.__r.__words[2]) = 2048;
                          uint64_t v315 = v135;
                          __int16 v316 = 2048;
                          *(void *)v317 = v136;
                          _os_log_debug_impl(&dword_1920CB000, v128, OS_LOG_TYPE_DEBUG, "resizing: ilayer=%zu itop=%zu old_dim=%lld new_dim=%lld", (uint8_t *)&v314, 0x2Au);
                          if (*(void *)&v320[8])
                          {
                            *(void *)&v320[16] = *(void *)&v320[8];
                            operator delete(*(void **)&v320[8]);
                          }
                        }
                      }
                      if (!v125)
                      {
                        BOOL v129 = (std::__shared_weak_count *)operator new(0x98uLL);
                        v129->__shared_owners_ = 0;
                        v129->__shared_weak_owners_ = 0;
                        v129->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3896B8;
                        *(_OWORD *)&v129[2].__shared_weak_owners_ = 0u;
                        *(_OWORD *)&v129[3].__shared_owners_ = 0u;
                        *(_OWORD *)&v129[1].__shared_owners_ = 0u;
                        v129[2].std::__shared_count = 0u;
                        v129[4].std::__shared_count = 0u;
                        *(_OWORD *)&v129[4].__shared_weak_owners_ = 0u;
                        *(_OWORD *)&v129[5].__shared_owners_ = 0u;
                        v129[5].__shared_weak_owners_ = 0;
                        v129[6].__vftable = 0;
                        LODWORD(v129[2].__vftable) = 1065353216;
                        v129[2].__shared_owners_ = 0x1FFFFFFFFLL;
                        v129[4].__vftable = 0;
                        v129[4].__shared_owners_ = 0;
                        v129[2].__shared_weak_owners_ = 0;
                        v129[3].__vftable = 0;
                        LOBYTE(v129[3].__shared_weak_owners_) = 0;
                        v129[3].__shared_owners_ = 0;
                        v129[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36B910;
                        v129[5].__vftable = 0;
                        v129[5].__shared_owners_ = 0;
                        LOBYTE(v129[6].__vftable) = 0;
                        LOBYTE(v129[6].__vftable) = *(unsigned char *)(*(void *)(*(void *)(*(void *)v102 + 64) + 8)
                                                             + 126);
                        uint64_t v130 = *v124;
                        uint64_t v131 = v307 + (v122 << 6);
                        v298.__r_.__value_.__r.__words[0] = (std::string::size_type)&v129[1];
                        v298.__r_.__value_.__l.__size_ = (std::string::size_type)v129;
                        atomic_fetch_add_explicit(&v129->__shared_owners_, 1uLL, memory_order_relaxed);
                        (*(void (**)(uint64_t, uint64_t, std::string *))(*(void *)v130 + 16))(v130, v131, &v298);
                        if (v298.__r_.__value_.__l.__size_) {
                          nitro::nitro_function::nitro_function((std::__shared_weak_count *)v298.__r_.__value_.__l.__size_);
                        }
                        nitro::nitro_function::nitro_function(v129);
                      }
                      uint64_t v132 = v70[22] + 24 * *(int *)(*(void *)(v70[10] + 24 * v84) + 4 * v122);
                      std::string v133 = *(void **)v132;
                      uint64_t v134 = *(void **)(v132 + 8);
                      while (v133 != v134)
                      {
                        *(void *)std::string buf = 0;
                        *(void *)std::string buf = *v133;
                        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)v82, (unint64_t *)buf, buf);
                        ++v133;
                      }
                      char v123 = 1;
                    }
                    ++v122;
                    uint64_t v119 = *(void *)(*(void *)v102 + 104);
                  }
                  while (v122 < (*(void *)(*(void *)v102 + 112) - v119) >> 4);
                  if (v123) {
                    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(*(void *)v102 + 64) + 80))(*(void *)(*(void *)v102 + 64), *(void *)v102 + 104, *(void *)v102 + 80);
                  }
                }
                *(void *)std::string buf = &v307;
                std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
                *(void *)std::string buf = &v309;
                std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
              }
              else
              {
                unint64_t v16 = (*(uint64_t (**)(void, uint64_t))(**(void **)(*(void *)v102 + 64) + 264))(*(void *)(*(void *)v102 + 64), (uint64_t)(*(void *)(*(void *)v102 + 88) - *(void *)(*(void *)v102 + 80)) >> 4);
                if (v16)
                {
                  uint64_t v104 = *v280;
                  goto LABEL_147;
                }
              }
              ++v84;
              std::string::size_type v85 = v288[4];
              continue;
            }
          }
          if (*(void *)(v86 + 104) == *(void *)(v86 + 112)) {
            Espresso::throw_exception_selector<Espresso::invalid_state_error>("Phi kernel expected to have output");
          }
          BOOL v92 = resolve_virtual_phi((uint64_t **)(v86 + 80));
          uint64_t v93 = *(uint64_t **)(*(void *)(v294[4] + 16 * v84) + 104);
          Espresso::abstract_blob_container::shape(buf, *v92);
          Espresso::abstract_blob_container::shape((char *)&v314, *v93);
          BOOL v94 = Espresso::layer_shape::operator==((uint64_t)buf, (uint64_t)&v314);
          if (*(void *)&v317[6])
          {
            uint64_t v318 = *(void *)&v317[6];
            operator delete(*(void **)&v317[6]);
          }
          if (*(void *)&v320[8])
          {
            *(void *)&v320[16] = *(void *)&v320[8];
            operator delete(*(void **)&v320[8]);
          }
          if (super_verbose)
          {
            uint64_t v95 = *v92;
            if (*v92)
            {
              Espresso::abstract_blob_container::shape(v310, *v92);
              uint64_t v96 = Espresso::layer_shape::total_dim((Espresso::layer_shape *)v310);
            }
            else
            {
              uint64_t v96 = 0;
            }
            int v97 = !v94;
            if (*v93)
            {
              Espresso::abstract_blob_container::shape(buf, *v93);
              uint64_t v98 = Espresso::layer_shape::total_dim((Espresso::layer_shape *)buf);
              printf("%zu: resolved_dim=%lld current_dim=%lld changed=%d\n", v84, v96, v98, v97);
              if (*(void *)&v320[8])
              {
                *(void *)&v320[16] = *(void *)&v320[8];
                operator delete(*(void **)&v320[8]);
              }
              if (!v95) {
                goto LABEL_141;
              }
LABEL_139:
              if (v311)
              {
                v312 = v311;
                operator delete(v311);
              }
            }
            else
            {
              printf("%zu: resolved_dim=%lld current_dim=%lld changed=%d\n", v84, v96, 0, v97);
              if (v95) {
                goto LABEL_139;
              }
            }
          }
LABEL_141:
          if (Espresso::blobcpy((uint64_t)v292, v93, v92))
          {
            uint64_t v99 = v70[22] + 24 * **(int **)(v70[10] + 24 * v84);
            char v100 = *(void **)v99;
            char v101 = *(void **)(v99 + 8);
            while (v100 != v101)
            {
              *(void *)std::string buf = 0;
              *(void *)std::string buf = *v100;
              std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)v82, (unint64_t *)buf, buf);
              ++v100;
            }
          }
          unint64_t v16 = std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__erase_unique<unsigned long>(v82, v84++);
          int v83 = v288;
          continue;
        }
      }
      unint64_t v72 = v288[3];
      if (v72 < v288[4])
      {
        uint64_t v73 = 16 * v72;
        do
        {
          uint64_t v74 = *(void *)(v294[4] + v73);
          uint64_t v75 = (void *)(v74 + 40);
          int v76 = *(char *)(v74 + 63);
          if (v76 < 0)
          {
            if (*(void *)(v74 + 48) != 11) {
              break;
            }
            uint64_t v75 = (void *)*v75;
          }
          else if (v76 != 11)
          {
            break;
          }
          long long v77 = (void *)*v75;
          uint64_t v78 = *(void *)((char *)v75 + 3);
          if (v77 != (void *)0x747269765F696870 || v78 != 0x6C6175747269765FLL) {
            break;
          }
          uint64_t v80 = resolve_virtual_phi((uint64_t **)(v74 + 80));
          unint64_t v16 = Espresso::blobcpy((uint64_t)v292, *(uint64_t **)(*(void *)(v294[4] + v73) + 104), v80);
          if (v16)
          {
            BOOL v81 = Espresso::espresso_os_log_subsystem((Espresso *)v16, (const char *)v17);
            if (os_log_type_enabled(v81, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)std::string buf = 0;
              _os_log_error_impl(&dword_1920CB000, v81, OS_LOG_TYPE_ERROR, "prepare_basic_block error", buf, 2u);
            }
          }
          ++v72;
          v73 += 16;
        }
        while (v72 < v288[4]);
      }
LABEL_184:
      std::string::size_type v69 = *v286;
    }
    unint64_t v137 = (uint64_t)(v294[5] - v294[4]) >> 4;
    unint64_t v138 = v69;
    if (super_verbose)
    {
      memset(&v314, 0, sizeof(v314));
      memset(&v309, 0, sizeof(v309));
      *(void *)std::string buf = v286;
      uint64_t v139 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)(v294 + 12), v286, (uint64_t)&std::piecewise_construct, (uint64_t **)buf);
      uint64_t v141 = (long long *)v139[3];
      for (m = (long long *)v139[4]; v141 != m; uint64_t v141 = (long long *)((char *)v141 + 24))
      {
        v313 = v141;
        char v142 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v294 + 17), (unsigned __int8 *)v141, &v313);
        Espresso::abstract_blob_container::shape(buf, *((void *)v142 + 5));
        Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v296, (const Espresso::layer_shape *)buf, 0);
        Espresso::layer_nd_shape::repr(&v297, (uint64_t)v296);
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)v141, (const void **)&v297.__r_.__value_.__l.__data_, (uint64_t)&v298);
        uint64_t v143 = std::string::append(&v298, ", ");
        long long v144 = *(_OWORD *)&v143->__r_.__value_.__l.__data_;
        int64_t v308 = v143->__r_.__value_.__r.__words[2];
        long long v307 = v144;
        v143->__r_.__value_.__l.__size_ = 0;
        v143->__r_.__value_.__r.__words[2] = 0;
        v143->__r_.__value_.__r.__words[0] = 0;
        if (v308 >= 0) {
          uint64_t v145 = (const std::string::value_type *)&v307;
        }
        else {
          uint64_t v145 = (const std::string::value_type *)v307;
        }
        if (v308 >= 0) {
          std::string::size_type v146 = HIBYTE(v308);
        }
        else {
          std::string::size_type v146 = *((void *)&v307 + 1);
        }
        std::string::append(&v314, v145, v146);
        if (SHIBYTE(v308) < 0) {
          operator delete((void *)v307);
        }
        if (SHIBYTE(v298.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v298.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v297.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v297.__r_.__value_.__l.__data_);
        }
        if (*(void *)&v320[8])
        {
          *(void *)&v320[16] = *(void *)&v320[8];
          operator delete(*(void **)&v320[8]);
        }
      }
      *(void *)std::string buf = v286;
      long long v147 = (Espresso *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)(v294 + 7), v286, (uint64_t)&std::piecewise_construct, (uint64_t **)buf);
      v149 = (long long *)*((void *)v147 + 3);
      for (uint64_t n = (long long *)*((void *)v147 + 4); v149 != n; v149 = (long long *)((char *)v149 + 24))
      {
        v313 = v149;
        uint64_t v150 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v294 + 17), (unsigned __int8 *)v149, &v313);
        Espresso::abstract_blob_container::shape(buf, *((void *)v150 + 5));
        Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v296, (const Espresso::layer_shape *)buf, 0);
        Espresso::layer_nd_shape::repr(&v297, (uint64_t)v296);
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)v149, (const void **)&v297.__r_.__value_.__l.__data_, (uint64_t)&v298);
        std::string v151 = std::string::append(&v298, ",");
        long long v152 = *(_OWORD *)&v151->__r_.__value_.__l.__data_;
        int64_t v308 = v151->__r_.__value_.__r.__words[2];
        long long v307 = v152;
        v151->__r_.__value_.__l.__size_ = 0;
        v151->__r_.__value_.__r.__words[2] = 0;
        v151->__r_.__value_.__r.__words[0] = 0;
        if (v308 >= 0) {
          uint64_t v153 = (const std::string::value_type *)&v307;
        }
        else {
          uint64_t v153 = (const std::string::value_type *)v307;
        }
        if (v308 >= 0) {
          std::string::size_type v154 = HIBYTE(v308);
        }
        else {
          std::string::size_type v154 = *((void *)&v307 + 1);
        }
        std::string::append(&v309, v153, v154);
        if (SHIBYTE(v308) < 0) {
          operator delete((void *)v307);
        }
        if (SHIBYTE(v298.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v298.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v297.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v297.__r_.__value_.__l.__data_);
        }
        long long v147 = *(Espresso **)&v320[8];
        if (*(void *)&v320[8])
        {
          *(void *)&v320[16] = *(void *)&v320[8];
          operator delete(*(void **)&v320[8]);
        }
      }
      uint64_t v155 = v304;
      unint64_t v156 = (uint64_t)(v294[5] - v294[4]) >> 4;
      if (v156 != (v305 - (unsigned char *)v304) >> 3)
      {
        std::vector<unsigned long>::resize(&v304, v156);
        uint64_t v155 = v304;
      }
      ++v155[*v286];
      uint64_t v157 = Espresso::espresso_os_log_subsystem(v147, (const char *)v156);
      if (os_log_type_enabled(v157, OS_LOG_TYPE_DEBUG))
      {
        unint64_t v248 = *v286;
        if ((v314.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v249 = &v314;
        }
        else {
          v249 = (std::string *)v314.__r_.__value_.__r.__words[0];
        }
        if (v69 >= v137)
        {
          int v255 = 0;
          v256 = &v309;
          if ((v309.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            v256 = (std::string *)v309.__r_.__value_.__r.__words[0];
          }
          v251 = "";
          unint64_t v257 = *v286;
        }
        else
        {
          uint64_t v250 = *(void *)(v294[4] + 16 * v248);
          v251 = (const char *)(v250 + 40);
          if (*(char *)(v250 + 63) < 0) {
            v251 = *(const char **)v251;
          }
          int v252 = SHIBYTE(v309.__r_.__value_.__r.__words[2]);
          std::string::size_type v253 = v309.__r_.__value_.__r.__words[0];
          v254 = *(uint64_t (****)(void))(*(void *)(*(void *)(v250 + 64) + 8) + 8);
          int v255 = (**v254)(v254);
          v256 = &v309;
          if (v252 < 0) {
            v256 = (std::string *)v253;
          }
          unint64_t v257 = *v286;
        }
        uint64_t v258 = *((void *)v304 + v257);
        *(_DWORD *)std::string buf = 134219266;
        *(void *)&uint8_t buf[4] = v248;
        *(_WORD *)&buf[12] = 2080;
        *(void *)&buf[14] = v249;
        *(_WORD *)&buf[22] = 2080;
        *(void *)&unsigned char buf[24] = v251;
        *(_WORD *)v320 = 2080;
        *(void *)&v320[2] = v256;
        *(_WORD *)&v320[10] = 1024;
        *(_DWORD *)&v320[12] = v255;
        *(_WORD *)&v320[16] = 2048;
        *(void *)&v320[18] = v258;
        _os_log_debug_impl(&dword_1920CB000, v157, OS_LOG_TYPE_DEBUG, "%zu: %%%s = %s(%s) @%d count=%zu\n", buf, 0x3Au);
      }

      if (SHIBYTE(v309.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v309.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v314.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v314.__r_.__value_.__l.__data_);
      }
      unint64_t v138 = *v286;
    }
    uint64_t v158 = *v285;
    *(void *)(*v285 + 32) = v138;
    if (v69 >= v137)
    {
      if (*(void *)(v158 + 96) - *(void *)(v158 + 88) <= 0x1FuLL)
      {
        *(void *)(v158 + 112) = 0;
        *(void *)(v158 + 120) = 0;
        *(_WORD *)(v158 + 128) = 0;
        *(unsigned char *)(*v285 + 129) = 1;
        goto LABEL_325;
      }
      std::string::size_type size = (std::__shared_weak_count *)operator new(0x30uLL);
      size->__shared_owners_ = 0;
      size->__shared_weak_owners_ = 0;
      size->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3831A8;
      size[1].__shared_owners_ = 0;
      size[1].__shared_weak_owners_ = 0;
      size[1].__vftable = 0;
      v314.__r_.__value_.__r.__words[0] = (std::string::size_type)&size[1];
      v314.__r_.__value_.__l.__size_ = (std::string::size_type)size;
      int v180 = std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&size[1].__vftable, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v294[84] - v294[83]) >> 3));
      int v181 = (unsigned __int8 *)v294[83];
      v182 = (unsigned __int8 *)v294[84];
      if (v181 == v182)
      {
        Espresso::interpreter_t::net_return((uint64_t)v180, v285, (uint64_t *)&v314);
LABEL_324:
        nitro::nitro_function::nitro_function(size);
        goto LABEL_325;
      }
      do
      {
        char v183 = (void *)v314.__r_.__value_.__r.__words[0];
        *(void *)std::string buf = v181;
        uint64_t v184 = (uint64_t)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v294 + 17), v181, (long long **)buf);
        uint64_t v185 = v184;
        unint64_t v186 = v183[2];
        uint64_t v187 = (void *)v183[1];
        if ((unint64_t)v187 >= v186)
        {
          uint64_t v190 = ((uint64_t)v187 - *v183) >> 4;
          unint64_t v191 = v190 + 1;
          if ((unint64_t)(v190 + 1) >> 60) {
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v192 = v186 - *v183;
          if (v192 >> 3 > v191) {
            unint64_t v191 = v192 >> 3;
          }
          if ((unint64_t)v192 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v193 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v193 = v191;
          }
          *(void *)v320 = v183 + 2;
          long long v194 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v193);
          int v195 = &v194[16 * v190];
          *(void *)std::string buf = v194;
          *(void *)&uint8_t buf[8] = v195;
          *(void *)&unsigned char buf[24] = &v194[16 * v196];
          long long v197 = *(_OWORD *)(v185 + 40);
          *(_OWORD *)int v195 = v197;
          if (*((void *)&v197 + 1)) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v197 + 1) + 8), 1uLL, memory_order_relaxed);
          }
          *(void *)&buf[16] = v195 + 16;
          std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(v183, buf);
          std::string v189 = (void *)v183[1];
          uint64_t v184 = std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)buf);
        }
        else
        {
          *uint64_t v187 = *(void *)(v184 + 40);
          uint64_t v188 = *(void *)(v184 + 48);
          v187[1] = v188;
          if (v188) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v188 + 8), 1uLL, memory_order_relaxed);
          }
          std::string v189 = v187 + 2;
          v183[1] = v187 + 2;
        }
        v183[1] = v189;
        v181 += 24;
      }
      while (v181 != v182);
      std::string::size_type size = (std::__shared_weak_count *)v314.__r_.__value_.__l.__size_;
      Espresso::interpreter_t::net_return(v184, v285, (uint64_t *)&v314);
      if (size) {
        goto LABEL_324;
      }
LABEL_325:
      uint64_t v234 = *v285;
      if (*(unsigned char *)(*v285 + 128))
      {
        v235 = (_OWORD *)(v234 + 112);
        uint64_t v237 = *(_OWORD **)(v234 + 96);
        unint64_t v236 = *(void *)(v234 + 104);
        if ((unint64_t)v237 >= v236)
        {
          uint64_t v240 = *(void *)(v234 + 88);
          uint64_t v241 = ((uint64_t)v237 - v240) >> 4;
          unint64_t v242 = v241 + 1;
          if ((unint64_t)(v241 + 1) >> 60) {
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v243 = v236 - v240;
          if (v243 >> 3 > v242) {
            unint64_t v242 = v243 >> 3;
          }
          if ((unint64_t)v243 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v16 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v16 = v242;
          }
          if (v16) {
            unint64_t v16 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v16);
          }
          else {
            unint64_t v17 = 0;
          }
          v244 = (_OWORD *)(v16 + 16 * v241);
          _OWORD *v244 = *v235;
          v246 = *(char **)(v234 + 88);
          v245 = *(char **)(v234 + 96);
          v247 = v244;
          if (v245 != v246)
          {
            do
            {
              *--v247 = *((_OWORD *)v245 - 1);
              v245 -= 16;
            }
            while (v245 != v246);
            v245 = *(char **)(v234 + 88);
          }
          v238 = v244 + 1;
          *(void *)(v234 + 88) = v247;
          *(void *)(v234 + 96) = v244 + 1;
          *(void *)(v234 + 104) = v16 + 16 * v17;
          if (v245) {
            operator delete(v245);
          }
        }
        else
        {
          *uint64_t v237 = *v235;
          v238 = v237 + 1;
        }
        *(void *)(v234 + 96) = v238;
      }
      else
      {
        uint64_t v239 = (void *)(v234 + 112);
        if (*(unsigned char *)(v234 + 129))
        {
          *uint64_t v239 = 0;
          *(void *)(v234 + 120) = 0;
          *(_WORD *)(v234 + 128) = 0;
          *(void *)(*v285 + 96) -= 16;
        }
        else
        {
          *(_OWORD *)v281 = *(_OWORD *)v239;
        }
      }
      ++v290;
      ++v284;
    }
    else
    {
      unsigned int v159 = (***(uint64_t (****)(void))(v294[2] + 8))(*(void *)(v294[2] + 8));
      long long v160 = (Espresso *)std::__hash_table<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::__unordered_map_hasher<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::hash<Espresso::platform>,std::equal_to<Espresso::platform>,true>,std::__unordered_map_equal<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::equal_to<Espresso::platform>,std::hash<Espresso::platform>,true>,std::allocator<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>>>::find<Espresso::platform>(v294 + 66, v159);
      if (!v160)
      {
        uint64_t v162 = 0;
LABEL_268:
        std::string::size_type v164 = *v286;
LABEL_269:
        if (*(unsigned char *)(*(void *)(*v285 + 24) + 1352))
        {
          char v198 = *(uint64_t (****)(void))(*(void *)(*(void *)(*(void *)(v294[4] + 16 * v164) + 64)
                                                                + 8)
                                                    + 8);
          int v199 = (**v198)(v198);
          JITBackendSignpostEmitter::nextPlatform((JITBackendSignpostEmitter *)&v299, v199);
          std::string::size_type v164 = *v286;
        }
        uint64_t v200 = a1[17];
        if (v200)
        {
          *(void *)std::string buf = v294;
          v314.__r_.__value_.__r.__words[0] = v164;
          unint64_t v16 = (*(uint64_t (**)(uint64_t, unsigned char *, std::string *))(*(void *)v200 + 48))(v200, buf, &v314);
        }
        else
        {
          uint64_t v201 = *(void *)(v294[4] + 16 * v164);
          unint64_t v16 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v201 + 8))(v201, v292);
        }
        uint64_t v202 = *(void *)(v294[4] + 16 * *v286);
        int v203 = *(void **)(v202 + 104);
        uint64_t v204 = *(void **)(v202 + 112);
        while (v203 != v204)
        {
          *(void *)(*v203 + 152) = v290;
          if (super_verbose)
          {
            *(_OWORD *)&v314.__r_.__value_.__l.__data_ = 0uLL;
            (*(void (**)(void, void *, std::string *))(*(void *)*v203 + 40))(*v203, v292, &v314);
            uint64_t v205 = (Espresso *)(*(uint64_t (**)(void))(*(void *)*v292 + 40))();
            long long v207 = Espresso::espresso_os_log_subsystem(v205, v206);
            if (os_log_type_enabled(v207, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v208 = 0;
              unint64_t v209 = *(int *)(v314.__r_.__value_.__r.__words[0] + 8);
              unint64_t v210 = v209;
              do
              {
                v210 *= *(int *)(v314.__r_.__value_.__r.__words[0] + 12 + v208);
                v208 += 4;
              }
              while (v208 != 12);
              if (v210) {
                float v211 = **(float **)(v314.__r_.__value_.__r.__words[0] + 24);
              }
              else {
                float v211 = NAN;
              }
              uint64_t v212 = 0;
              uint64_t v213 = *(int *)(v314.__r_.__value_.__r.__words[0] + 8);
              do
              {
                v213 *= *(int *)(v314.__r_.__value_.__r.__words[0] + 12 + v212);
                v212 += 4;
              }
              while (v212 != 12);
              if (v213)
              {
                uint64_t v215 = 0;
                uint64_t v216 = *(int *)(v314.__r_.__value_.__r.__words[0] + 8);
                do
                {
                  v216 *= *(int *)(v314.__r_.__value_.__r.__words[0] + 12 + v215);
                  v215 += 4;
                }
                while (v215 != 12);
                float v214 = *(float *)(*(void *)(v314.__r_.__value_.__r.__words[0] + 24) + 4 * v216 - 4);
              }
              else
              {
                float v214 = NAN;
              }
              uint64_t v217 = 0;
              double v218 = v211;
              uint64_t v219 = *(int *)(v314.__r_.__value_.__r.__words[0] + 8);
              do
              {
                v219 *= *(int *)(v314.__r_.__value_.__r.__words[0] + 12 + v217);
                v217 += 4;
              }
              while (v217 != 12);
              double v220 = 0.0;
              if (v219)
              {
                uint64_t v221 = 0;
                std::string::size_type v222 = v314.__r_.__value_.__r.__words[0] + 12;
                uint64_t v223 = *(int *)(v314.__r_.__value_.__r.__words[0] + 8);
                do
                {
                  v223 *= *(int *)(v222 + v221);
                  v221 += 4;
                }
                while (v221 != 12);
                double v224 = 0.0;
                if (v223)
                {
                  v225 = *(float **)(v314.__r_.__value_.__r.__words[0] + 24);
                  float v226 = 0.0;
                  do
                  {
                    float v227 = *v225++;
                    float v226 = v226 + v227;
                    --v223;
                  }
                  while (v223);
                  double v224 = v226;
                }
                for (iuint64_t i = 0; ii != 12; ii += 4)
                  v209 *= *(int *)(v222 + ii);
                double v220 = v224 / (double)v209;
              }
              int v229 = (*(uint64_t (**)(void))(*(void *)*v203 + 24))();
              *(_DWORD *)std::string buf = 134218752;
              *(double *)&uint8_t buf[4] = v218;
              *(_WORD *)&buf[12] = 2048;
              *(double *)&buf[14] = v214;
              *(_WORD *)&buf[22] = 2048;
              *(double *)&unsigned char buf[24] = v220;
              *(_WORD *)v320 = 1024;
              *(_DWORD *)&v320[2] = v229;
              _os_log_debug_impl(&dword_1920CB000, v207, OS_LOG_TYPE_DEBUG, "\t\tblob[0]=%.3f blob[-1]=%.3f avg=%e platform=%d\n", buf, 0x26u);
            }

            unint64_t v16 = v314.__r_.__value_.__l.__size_;
            if (v314.__r_.__value_.__l.__size_) {
              nitro::nitro_function::nitro_function((std::__shared_weak_count *)v314.__r_.__value_.__l.__size_);
            }
          }
          v203 += 2;
        }
LABEL_306:
        unint64_t v174 = v290;
        goto LABEL_307;
      }
      char v163 = (void *)*((void *)v160 + 3);
      uint64_t v162 = (std::__shared_weak_count *)*((void *)v160 + 4);
      if (v162) {
        atomic_fetch_add_explicit(&v162->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (!v163) {
        goto LABEL_268;
      }
      std::string::size_type v164 = *v286;
      uint64_t v165 = v163[10];
      if (*v286 >= (v163[11] - v165) >> 2) {
        goto LABEL_269;
      }
      uint64_t v166 = *(unsigned int *)(v165 + 4 * v164);
      if ((v166 & 0x80000000) != 0) {
        goto LABEL_269;
      }
      if (*(unsigned char *)(*(void *)(*v285 + 24) + 1352))
      {
        if (v303)
        {
          uint64_t v161 = (const char *)v299;
          if (v299 != 1)
          {
            long long v160 = (Espresso *)kdebug_trace();
            char v303 = 0;
          }
        }
      }
      uint64_t v167 = v163[4];
      if (super_verbose)
      {
        int v168 = Espresso::espresso_os_log_subsystem(v160, v161);
        if (os_log_type_enabled(v168, OS_LOG_TYPE_DEBUG))
        {
          unint64_t v259 = *v286;
          uint64_t v260 = *(void *)(v167 + 120 * (int)v166 + 8);
          *(_DWORD *)std::string buf = 134218496;
          *(void *)&uint8_t buf[4] = v259;
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v166;
          *(_WORD *)&buf[18] = 2048;
          *(void *)&buf[20] = v260;
          _os_log_debug_impl(&dword_1920CB000, v168, OS_LOG_TYPE_DEBUG, "%zu: __forward_segment isegment=%d end=%zu\n", buf, 0x1Cu);
        }
      }
      (*(void (**)(void *, void *, uint64_t, uint64_t))(*v163 + 80))(v163, v292, v166, v167 + 120 * (int)v166);
      char v169 = (unint64_t *)(v167 + 120 * (int)v166);
      uint64_t v170 = *v285;
      *(void *)(v170 + 120) = v169[1];
      std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>(v170 + 48, v166, v166);
      unint64_t v171 = *v169;
      unint64_t v172 = v169[1];
      if (*v169 >= v172) {
        goto LABEL_306;
      }
      uint64_t v173 = v294[4];
      unint64_t v174 = v290;
      do
      {
        uint64_t v175 = *(void *)(v173 + 16 * v171);
        v176 = *(uint64_t **)(v175 + 104);
        char v177 = *(uint64_t **)(v175 + 112);
        while (v176 != v177)
        {
          uint64_t v178 = *v176;
          v176 += 2;
          *(void *)(v178 + 152) = v290;
        }
        ++v171;
      }
      while (v171 != v172);
LABEL_307:
      if (super_verbose) {
        BOOL v230 = v174 >= 0xF4241;
      }
      else {
        BOOL v230 = 0;
      }
      char v231 = !v230;
      if (!v230)
      {
        int v232 = 0;
        if (!v162) {
          goto LABEL_316;
        }
LABEL_315:
        nitro::nitro_function::nitro_function(v162);
        goto LABEL_316;
      }
      v233 = Espresso::espresso_os_log_subsystem((Espresso *)v16, (const char *)v17);
      if (os_log_type_enabled(v233, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_debug_impl(&dword_1920CB000, v233, OS_LOG_TYPE_DEBUG, "aborting execution in debug mode", buf, 2u);
      }

      int v232 = 9;
      if (v162) {
        goto LABEL_315;
      }
LABEL_316:
      if (v231) {
        goto LABEL_325;
      }
      if (v232) {
        break;
      }
    }
  }
  if (super_verbose)
  {
    v261 = Espresso::espresso_os_log_subsystem((Espresso *)v16, (const char *)v17);
    if (os_log_type_enabled(v261, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_debug_impl(&dword_1920CB000, v261, OS_LOG_TYPE_DEBUG, "restore phi blobs", buf, 2u);
    }
  }
  v262 = (uint64_t *)a1[2];
  v289 = (uint64_t *)a1[3];
  if (v262 != v289)
  {
    do
    {
      v291 = v262;
      uint64_t v295 = *v262;
      Espresso::net::get_analysis_if_existing<Espresso::analysis_make_ssa>(&v309, *v262);
      if (v309.__r_.__value_.__r.__words[0])
      {
        for (jj = *(void **)(v309.__r_.__value_.__r.__words[0] + 104); jj; jj = (void *)*jj)
        {
          if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(void **)(v295 + 264), jj + 2)|| !*(unsigned char *)(a1[10] + 44))
          {
            memset(&v314, 0, sizeof(v314));
            std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v314, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(jj[6] - jj[5]) >> 3));
            v265 = (unsigned __int8 *)jj[5];
            v264 = (unsigned __int8 *)jj[6];
            while (v265 != v264)
            {
              *(void *)std::string buf = v265;
              v266 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v295 + 136, v265, (long long **)buf);
              v267 = v266;
              std::string::size_type v268 = v314.__r_.__value_.__l.__size_;
              if (v314.__r_.__value_.__l.__size_ >= v314.__r_.__value_.__r.__words[2])
              {
                uint64_t v271 = (uint64_t)(v314.__r_.__value_.__l.__size_ - v314.__r_.__value_.__r.__words[0]) >> 4;
                unint64_t v272 = v271 + 1;
                if ((unint64_t)(v271 + 1) >> 60) {
                  std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                }
                int64_t v273 = v314.__r_.__value_.__r.__words[2] - v314.__r_.__value_.__r.__words[0];
                if ((uint64_t)(v314.__r_.__value_.__r.__words[2] - v314.__r_.__value_.__r.__words[0]) >> 3 > v272) {
                  unint64_t v272 = v273 >> 3;
                }
                if ((unint64_t)v273 >= 0x7FFFFFFFFFFFFFF0) {
                  unint64_t v274 = 0xFFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v274 = v272;
                }
                *(void *)v320 = (char *)&v314.__r_.__value_.__l + 16;
                v275 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v274);
                v276 = &v275[16 * v271];
                *(void *)std::string buf = v275;
                *(void *)&uint8_t buf[8] = v276;
                *(void *)&unsigned char buf[24] = &v275[16 * v277];
                long long v278 = *(_OWORD *)(v267 + 40);
                *(_OWORD *)v276 = v278;
                if (*((void *)&v278 + 1)) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v278 + 1) + 8), 1uLL, memory_order_relaxed);
                }
                *(void *)&buf[16] = v276 + 16;
                std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v314, buf);
                std::string::size_type v270 = v314.__r_.__value_.__l.__size_;
                std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)buf);
              }
              else
              {
                *(void *)v314.__r_.__value_.__l.__size_ = *((void *)v266 + 5);
                uint64_t v269 = *((void *)v266 + 6);
                *(void *)(v268 + 8) = v269;
                if (v269) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(v269 + 8), 1uLL, memory_order_relaxed);
                }
                std::string::size_type v270 = v268 + 16;
              }
              v314.__r_.__value_.__l.__size_ = v270;
              v265 += 24;
            }
            v279 = resolve_virtual_phi((uint64_t **)&v314);
            if (*v279 != *(void *)v314.__r_.__value_.__l.__data_) {
              Espresso::blobcpy((uint64_t)v292, (uint64_t *)v314.__r_.__value_.__l.__data_, v279);
            }
            *(void *)std::string buf = &v314;
            std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
          }
        }
      }
      if (v309.__r_.__value_.__l.__size_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v309.__r_.__value_.__l.__size_);
      }
      v262 = v291 + 1;
    }
    while (v291 + 1 != v289);
  }
  JITBackendSignpostEmitter::~JITBackendSignpostEmitter((JITBackendSignpostEmitter *)&v299);
  if (v304)
  {
    v305 = v304;
    operator delete(v304);
  }
}

void sub_1920F9780(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v2);
  operator delete(v4);
  nitro::nitro_function::nitro_function(v1);
  _Unwind_Resume(a1);
}

uint64_t Espresso::BNNSEngine::engine::platform(Espresso::BNNSEngine::engine *this)
{
  return 100;
}

char *Espresso::abstract_blob_container::shape(char *this, uint64_t a2)
{
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  long long v2 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)this = *(_OWORD *)(a2 + 8);
  *((_OWORD *)this + 1) = v2;
  *((void *)this + 4) = *(void *)(a2 + 40);
  if (this + 40 != (char *)(a2 + 48)) {
    return std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(this + 40, *(char **)(a2 + 48), *(void *)(a2 + 56), (uint64_t)(*(void *)(a2 + 56) - *(void *)(a2 + 48)) >> 2);
  }
  return this;
}

void sub_1920F9A58(_Unwind_Exception *exception_object)
{
  __n128 v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 48) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  long long v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 2)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *uint64_t v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 62) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 1;
    if (v8 >> 1 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v11 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    __n128 result = std::vector<unsigned int>::__vallocate[abi:ne180100](v7, v11);
    long long v13 = (char *)v7[1];
    int v12 = (void **)(v7 + 1);
    long long v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      uint64_t v18 = v9;
      uint64_t v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  int v12 = (void **)(result + 8);
  uint64_t v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 2;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  unint64_t v16 = &__src[4 * v15];
  if (v14 != v9)
  {
    __n128 result = (char *)memmove(*(void **)result, __src, v14 - v9);
    long long v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    uint64_t v18 = v9;
    uint64_t v19 = v16;
LABEL_18:
    __n128 result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *int v12 = &v9[v17];
  return result;
}

uint64_t Espresso::base_kernel::has_dynamic_top_shape(Espresso::base_kernel *this)
{
  return 0;
}

uint64_t Espresso::layer::__launch(Espresso::layer *this, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  if (*a2)
  {
    uint64_t v7 = *((unsigned int *)this + 2);
    uint64_t v8 = Espresso::layer::layer_type_id(this);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void))(*(void *)v6 + 64))(v6, 723714196, a3, v7, v8, 0);
  }
  uint64_t result = (**(uint64_t (***)(Espresso::layer *, uint64_t *))this)(this, a2);
  uint64_t v10 = *a2;
  if (v10)
  {
    uint64_t v11 = *((unsigned int *)this + 2);
    uint64_t v12 = Espresso::layer::layer_type_id(this);
    long long v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void))(*(void *)v10 + 64);
    return v13(v10, 723714200, a3, v11, v12, 0);
  }
  return result;
}

void Espresso::batch_cpu::log_profiler_event(Espresso::batch_cpu *this, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  Espresso::abstract_batch::log_profiler_event(this);
  uint64_t v12 = *((void *)this + 13);
  if (v12)
  {
    *(void *)&long long v13 = 0xBFF0000000000000;
    DWORD2(v13) = a2;
    uint64_t v14 = a3;
    uint64_t v15 = a4;
    uint64_t v16 = a5;
    uint64_t v17 = a6;
    Espresso::profiler_t::log_event(v12, &v13);
  }
}

void Espresso::abstract_batch::log_profiler_event(Espresso::abstract_batch *this)
{
  if (Espresso::abstract_batch::log_profiler_event(int,unsigned long long,unsigned long long,unsigned long long,unsigned long long)::onceToken != -1) {
    dispatch_once(&Espresso::abstract_batch::log_profiler_event(int,unsigned long long,unsigned long long,unsigned long long,unsigned long long)::onceToken, &__block_literal_global_6734);
  }
  if (*((void *)this + 13)) {
    BOOL v2 = 0;
  }
  else {
    BOOL v2 = Espresso::abstract_batch::log_profiler_event(int,unsigned long long,unsigned long long,unsigned long long,unsigned long long)::profiler_signposts_enabled == 0;
  }
  if (!v2)
  {
    kdebug_trace();
  }
}

uint64_t Espresso::layer::layer_type_id(Espresso::layer *this)
{
  uint64_t result = *((void *)this + 24);
  if (!result)
  {
    uint64_t v3 = (char *)this + 40;
    if (*((char *)this + 63) < 0) {
      uint64_t v3 = *(const char **)v3;
    }
    strncpy(__dst, v3, 8uLL);
    uint64_t result = *(void *)__dst;
    *((void *)this + 24) = *(void *)__dst;
  }
  return result;
}

uint64_t *std::__hash_table<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::__unordered_map_hasher<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::hash<Espresso::platform>,std::equal_to<Espresso::platform>,true>,std::__unordered_map_equal<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::equal_to<Espresso::platform>,std::hash<Espresso::platform>,true>,std::allocator<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>>>::find<Espresso::platform>(void *a1, unsigned int a2)
{
  unint64_t v2 = a1[1];
  if (!v2) {
    return 0;
  }
  uint8x8_t v3 = (uint8x8_t)vcnt_s8((int8x8_t)v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v4 = a2;
    if (v2 <= a2) {
      unint64_t v4 = a2 % v2;
    }
  }
  else
  {
    unint64_t v4 = (v2 - 1) & a2;
  }
  id v5 = *(uint64_t ***)(*a1 + 8 * v4);
  if (!v5) {
    return 0;
  }
  for (uint64_t result = *v5; result; uint64_t result = (uint64_t *)*result)
  {
    unint64_t v7 = result[1];
    if (v7 == a2)
    {
      if (*((_DWORD *)result + 4) == a2) {
        return result;
      }
    }
    else
    {
      if (v3.u32[0] > 1uLL)
      {
        if (v7 >= v2) {
          v7 %= v2;
        }
      }
      else
      {
        v7 &= v2 - 1;
      }
      if (v7 != v4) {
        return 0;
      }
    }
  }
  return result;
}

BOOL Espresso::layer_shape::operator==(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 20);
  if (v2 == -1)
  {
    if (*(_DWORD *)(a1 + 16) == 1) {
      int v2 = 4;
    }
    else {
      int v2 = 5;
    }
  }
  int v3 = *(_DWORD *)(a2 + 16);
  int v4 = *(_DWORD *)(a2 + 20);
  if (v3 == 1) {
    int v5 = 4;
  }
  else {
    int v5 = 5;
  }
  if (v4 == -1) {
    int v4 = v5;
  }
  if (v2 != v4) {
    return 0;
  }
  BOOL v6 = v2 < 2;
  if (*(_DWORD *)a1 != *(_DWORD *)a2) {
    BOOL v6 = 0;
  }
  if (v2 >= 2 && *(_DWORD *)a1 == *(_DWORD *)a2) {
    BOOL v6 = *(_DWORD *)(a1 + 4) == *(_DWORD *)(a2 + 4);
  }
  BOOL v7 = v2 < 3 && v6;
  if (v2 >= 3 && v6) {
    BOOL v7 = *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8);
  }
  BOOL v8 = v2 < 4 && v7;
  if (v2 >= 4 && v7) {
    BOOL v8 = *(_DWORD *)(a1 + 12) == *(_DWORD *)(a2 + 12);
  }
  if (v2 < 5)
  {
    if (!v8) {
      return 0;
    }
  }
  else if (!v8 || *(_DWORD *)(a1 + 16) != v3)
  {
    return 0;
  }
  if (*(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24)
    && *(_DWORD *)(a1 + 28) == *(_DWORD *)(a2 + 28)
    && *(_DWORD *)(a1 + 32) == *(_DWORD *)(a2 + 32)
    && *(_DWORD *)(a1 + 36) == *(_DWORD *)(a2 + 36))
  {
    return std::operator==[abi:ne180100]<unsigned int,std::allocator<unsigned int>>(*(const void **)(a1 + 40), *(void *)(a1 + 48), *(void **)(a2 + 40), *(void *)(a2 + 48));
  }
  return 0;
}

void *std::vector<Espresso::layer_shape>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<Espresso::layer_shape>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = a1[1];
    uint64_t v5 = v4 + (a2 << 6);
    unint64_t v6 = a2 << 6;
    uint64_t v7 = v4 + 16;
    do
    {
      *(void *)(v7 + 40) = 0;
      *(_OWORD *)(v7 + 24) = 0uLL;
      *(_OWORD *)(v7 + 8) = 0uLL;
      *(_OWORD *)(v7 - 16) = xmmword_192DC3600;
      *(void *)uint64_t v7 = 0xFFFFFFFF00000001;
      v7 += 64;
      v6 -= 64;
    }
    while (v6);
    a1[1] = v5;
  }
  return a1;
}

void sub_1920FA0B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

uint64_t std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__erase_unique<unsigned long>(void *a1, unint64_t a2)
{
  uint64_t result = (uint64_t)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::find<unsigned long>(a1, a2);
  if (result)
  {
    int8x8_t v4 = (int8x8_t)a1[1];
    unint64_t v5 = *(void *)(result + 8);
    uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4);
    v6.i16[0] = vaddlv_u8(v6);
    if (v6.u32[0] > 1uLL)
    {
      if (v5 >= *(void *)&v4) {
        v5 %= *(void *)&v4;
      }
    }
    else
    {
      v5 &= *(void *)&v4 - 1;
    }
    uint64_t v7 = *(void **)(*a1 + 8 * v5);
    do
    {
      BOOL v8 = v7;
      uint64_t v7 = (void *)*v7;
    }
    while (v7 != (void *)result);
    if (v8 == a1 + 2) {
      goto LABEL_19;
    }
    unint64_t v9 = v8[1];
    if (v6.u32[0] > 1uLL)
    {
      if (v9 >= *(void *)&v4) {
        v9 %= *(void *)&v4;
      }
    }
    else
    {
      v9 &= *(void *)&v4 - 1;
    }
    if (v9 != v5)
    {
LABEL_19:
      if (!*(void *)result) {
        goto LABEL_20;
      }
      unint64_t v10 = *(void *)(*(void *)result + 8);
      if (v6.u32[0] > 1uLL)
      {
        if (v10 >= *(void *)&v4) {
          v10 %= *(void *)&v4;
        }
      }
      else
      {
        v10 &= *(void *)&v4 - 1;
      }
      if (v10 != v5) {
LABEL_20:
      }
        *(void *)(*a1 + 8 * v5) = 0;
    }
    uint64_t v11 = *(void *)result;
    if (*(void *)result)
    {
      unint64_t v12 = *(void *)(v11 + 8);
      if (v6.u32[0] > 1uLL)
      {
        if (v12 >= *(void *)&v4) {
          v12 %= *(void *)&v4;
        }
      }
      else
      {
        v12 &= *(void *)&v4 - 1;
      }
      if (v12 != v5)
      {
        *(void *)(*a1 + 8 * v12) = v8;
        uint64_t v11 = *(void *)result;
      }
    }
    void *v8 = v11;
    *(void *)uint64_t result = 0;
    --a1[3];
    operator delete((void *)result);
    return 1;
  }
  return result;
}

uint64_t Espresso::layer::__launch(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + 64;
  (*(void (**)(void, uint64_t, uint64_t, uint64_t, uint64_t))(**(void **)(*(void *)(a1 + 64) + 8) + 136))(*(void *)(*(void *)(a1 + 64) + 8), a2, a1 + 64, a1 + 104, a1 + 80);
  uint64_t result = *(void *)(v2 + 120);
  if (result)
  {
    int8x8_t v4 = *(uint64_t (**)(void))(*(void *)result + 48);
    return v4();
  }
  return result;
}

uint64_t Espresso::abstract_context::__launch_kernel(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*a3 + 16))(*a3, a2, a4, a5);
}

void JITBackendSignpostEmitter::nextPlatform(JITBackendSignpostEmitter *this, int a2)
{
  if (a2 <= 19999)
  {
    if (!a2 || a2 == 100)
    {
      uint64_t v3 = 0;
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  uint64_t v3 = 1;
  if (a2 != 20000 && a2 != 50000 && a2 != 50002) {
LABEL_9:
  }
    uint64_t v3 = 2;
LABEL_10:
  if (*((unsigned char *)this + 32))
  {
    if (v3 != *(_DWORD *)this)
    {
      JITBackendSignpostEmitter::endJITSegment((uint64_t)this);
      JITBackendSignpostEmitter::startJITSegment(this, (char *)v3);
      *(_DWORD *)this = v3;
    }
  }
  else
  {
    *(_DWORD *)this = v3;
    JITBackendSignpostEmitter::startJITSegment(this, (char *)v3);
  }
  *((unsigned char *)this + 32) = 1;
}

BOOL std::operator==[abi:ne180100]<unsigned int,std::allocator<unsigned int>>(const void *a1, uint64_t a2, void *__s2, uint64_t a4)
{
  return a2 - (void)a1 == a4 - (void)__s2 && memcmp(a1, __s2, a2 - (void)a1) == 0;
}

void Espresso::generic_elementwise_kernel::top_shapes_for_bottom_shapes(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  *((void *)&v86 + 1) = *MEMORY[0x1E4F143B8];
  int8x8_t v4 = (void *)*a2;
  if (a2[1] == *a2)
  {
    uint64_t v85 = 0;
    long long v84 = 0u;
    *(_OWORD *)&char v83[8] = 0u;
    long long v82 = 0uLL;
    *(void *)int v83 = 0xFFFFFFFF00000001;
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    *(void *)&long long v76 = a3;
    BYTE8(v76) = 0;
    unint64_t v12 = (char *)operator new(0x40uLL);
    *a3 = v12;
    a3[1] = v12;
    a3[2] = v12 + 64;
    a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), &v82, &v86, (uint64_t)v12);
    goto LABEL_14;
  }
  int v6 = *(_DWORD *)(a1 + 280);
  BOOL v7 = v6 == 28 || v6 == 21;
  if (!v7)
  {
    long long v14 = *((_OWORD *)v4 + 1);
    uint64_t v15 = v4[4];
    long long v82 = *(_OWORD *)v4;
    *(_OWORD *)int v83 = v14;
    *(void *)&v83[16] = v15;
    long long v84 = 0uLL;
    uint64_t v85 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v84, (const void *)v4[5], v4[6], (uint64_t)(v4[6] - v4[5]) >> 2);
    if (*(_DWORD *)(a1 + 300)) {
      goto LABEL_10;
    }
    uint64_t v17 = (void *)*a2;
    uint64_t v18 = (uint64_t)(a2[1] - *a2) >> 6;
    if (v18 == 3)
    {
      long long v22 = (_DWORD *)v17 + 5;
      unsigned int v23 = *((_DWORD *)v17 + 5);
      if ((v23 & 0x80000000) == 0)
      {
        unsigned int v24 = *((_DWORD *)v17 + 21);
        if ((v24 & 0x80000000) == 0)
        {
          unsigned int v25 = *((_DWORD *)v17 + 37);
          if ((v25 & 0x80000000) == 0)
          {
            BOOL v26 = v23 >= v24;
            if (v23 <= v24) {
              unsigned int v23 = *((_DWORD *)v17 + 21);
            }
            if (!v26) {
              long long v22 = (_DWORD *)v17 + 21;
            }
            if (v23 < v25) {
              long long v22 = (_DWORD *)v17 + 37;
            }
            *(_DWORD *)&v83[4] = *v22;
          }
        }
      }
      long long v27 = *((_OWORD *)v17 + 1);
      uint64_t v28 = v17[4];
      long long v76 = *(_OWORD *)v17;
      long long v77 = v27;
      uint64_t v78 = v28;
      uint64_t v79 = 0;
      uint64_t v80 = 0;
      uint64_t v81 = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v79, (const void *)v17[5], v17[6], (uint64_t)(v17[6] - v17[5]) >> 2);
      uint64_t v29 = (void *)*a2;
      long long v30 = *(_OWORD *)(*a2 + 80);
      long long v65 = *(_OWORD *)(*a2 + 64);
      long long v66 = v30;
      uint64_t v31 = (const void *)v29[13];
      uint64_t v67 = v29[12];
      unint64_t v68 = 0;
      std::string::size_type v69 = 0;
      uint64_t v70 = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v68, v31, v29[14], (uint64_t)(v29[14] - (void)v31) >> 2);
      uint64_t v32 = (void *)*a2;
      long long v33 = *(_OWORD *)(*a2 + 144);
      long long v59 = *(_OWORD *)(*a2 + 128);
      long long v60 = v33;
      int v34 = (const void *)v32[21];
      uint64_t v61 = v32[20];
      uint64_t v62 = 0;
      uint64_t v63 = 0;
      uint64_t v64 = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v62, v34, v32[22], (uint64_t)(v32[22] - (void)v34) >> 2);
      long long v53 = v82;
      long long v54 = *(_OWORD *)v83;
      uint64_t v55 = *(void *)&v83[16];
      std::string __p = 0;
      BOOL v57 = 0;
      uint64_t v58 = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, (const void *)v84, *((uint64_t *)&v84 + 1), (uint64_t)(*((void *)&v84 + 1) - v84) >> 2);
      DWORD1(v77) = *(_DWORD *)&v83[4];
      DWORD1(v66) = *(_DWORD *)&v83[4];
      DWORD1(v60) = *(_DWORD *)&v83[4];
      DWORD1(v54) = *(_DWORD *)&v83[4];
      Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v52, (const Espresso::layer_shape *)&v76, 0);
      Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v51, (const Espresso::layer_shape *)&v65, 0);
      Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v50, (const Espresso::layer_shape *)&v59, 0);
      Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v48, (const Espresso::layer_shape *)&v53, 0);
      long long v35 = operator new(0x18uLL);
      uint64_t v36 = v35;
      int v37 = 0;
      *long long v35 = v52;
      v35[1] = v51;
      v35[2] = v50;
      unsigned int v38 = v49;
      do
      {
        if (v38)
        {
          unint64_t v39 = 0;
          do
          {
            uint64_t v40 = 0;
            uint64_t v41 = 1;
            do
            {
              uint64_t v42 = v41;
              uint64_t v41 = *(unsigned int *)(v35[v40] + 4 * v39);
              if (v41 == 1)
              {
                uint64_t v41 = v42;
              }
              else if (v42 != 1)
              {
                BOOL v7 = v41 == v42;
                uint64_t v41 = v42;
                if (!v7) {
                  Espresso::shape_error_wrapper(a2, 3uLL);
                }
              }
              ++v40;
            }
            while (v40 != 3);
            v48[v39++] = v41;
            unsigned int v38 = v49;
          }
          while (v39 < v49);
        }
        ++v37;
      }
      while (v37 != 5);
      Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)v48, 0, (uint64_t)v73);
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v71 = a3;
      char v72 = 0;
      uint64_t v43 = (char *)operator new(0x40uLL);
      *a3 = v43;
      a3[1] = v43;
      a3[2] = v43 + 64;
      a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), v73, &v76, (uint64_t)v43);
      if (v74)
      {
        uint64_t v75 = v74;
        operator delete(v74);
      }
      operator delete(v36);
      if (__p)
      {
        BOOL v57 = __p;
        operator delete(__p);
      }
      if (v62)
      {
        uint64_t v63 = v62;
        operator delete(v62);
      }
      if (v68)
      {
        std::string::size_type v69 = v68;
        operator delete(v68);
      }
      goto LABEL_12;
    }
    if (v18 != 2) {
      goto LABEL_10;
    }
    unsigned int v19 = *((_DWORD *)v17 + 5);
    if ((v19 & 0x80000000) == 0)
    {
      unsigned int v20 = *((_DWORD *)v17 + 21);
      if ((v20 & 0x80000000) == 0)
      {
        if (v19 <= v20) {
          unsigned int v19 = *((_DWORD *)v17 + 21);
        }
        *(_DWORD *)&v83[4] = v19;
      }
    }
    int v21 = *((_DWORD *)v17 + 16);
    if (v82 != v21)
    {
      if (v82 == 1)
      {
        LODWORD(v82) = *((_DWORD *)v17 + 16);
      }
      else if (v21 != 1)
      {
        goto LABEL_73;
      }
    }
    int v44 = *((_DWORD *)v17 + 17);
    if (DWORD1(v82) != v44)
    {
      if (DWORD1(v82) == 1)
      {
        DWORD1(v82) = *((_DWORD *)v17 + 17);
      }
      else if (v44 != 1)
      {
        goto LABEL_73;
      }
    }
    int v45 = *((_DWORD *)v17 + 18);
    if (DWORD2(v82) != v45)
    {
      if (DWORD2(v82) == 1)
      {
        DWORD2(v82) = *((_DWORD *)v17 + 18);
      }
      else if (v45 != 1)
      {
        goto LABEL_73;
      }
    }
    int v46 = *((_DWORD *)v17 + 19);
    if (HIDWORD(v82) == v46)
    {
LABEL_70:
      if (*(_DWORD *)v83 == 1)
      {
        int v47 = *((_DWORD *)v17 + 20);
        if (v47 != 1) {
          *(_DWORD *)int v83 = v47;
        }
      }
LABEL_10:
      long long v76 = v82;
      long long v77 = *(_OWORD *)v83;
      uint64_t v78 = *(void *)&v83[16];
      uint64_t v79 = 0;
      uint64_t v80 = 0;
      uint64_t v81 = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v79, (const void *)v84, *((uint64_t *)&v84 + 1), (uint64_t)(*((void *)&v84 + 1) - v84) >> 2);
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      *(void *)&long long v65 = a3;
      BYTE8(v65) = 0;
      uint64_t v16 = (char *)operator new(0x40uLL);
      *a3 = v16;
      a3[1] = v16;
      a3[2] = v16 + 64;
      uint64_t v11 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), &v76, &v82, (uint64_t)v16);
      goto LABEL_11;
    }
    if (HIDWORD(v82) == 1)
    {
      HIDWORD(v82) = *((_DWORD *)v17 + 19);
      goto LABEL_70;
    }
    if (v46 == 1) {
      goto LABEL_70;
    }
LABEL_73:
    Espresso::shape_error_wrapper(a2, 2uLL);
  }
  long long v8 = *((_OWORD *)v4 + 1);
  uint64_t v9 = v4[4];
  long long v82 = *(_OWORD *)v4;
  *(_OWORD *)int v83 = v8;
  *(void *)&v83[16] = v9;
  long long v84 = 0uLL;
  uint64_t v85 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v84, (const void *)v4[5], v4[6], (uint64_t)(v4[6] - v4[5]) >> 2);
  *(void *)&long long v82 = 0x100000001;
  DWORD2(v82) = 1;
  long long v76 = v82;
  long long v77 = *(_OWORD *)v83;
  uint64_t v78 = *(void *)&v83[16];
  uint64_t v79 = 0;
  uint64_t v80 = 0;
  uint64_t v81 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v79, (const void *)v84, *((uint64_t *)&v84 + 1), (uint64_t)(*((void *)&v84 + 1) - v84) >> 2);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  *(void *)&long long v65 = a3;
  BYTE8(v65) = 0;
  unint64_t v10 = (char *)operator new(0x40uLL);
  *a3 = v10;
  a3[1] = v10;
  a3[2] = v10 + 64;
  uint64_t v11 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), &v76, &v82, (uint64_t)v10);
LABEL_11:
  a3[1] = v11;
LABEL_12:
  if (v79)
  {
    uint64_t v80 = v79;
    operator delete(v79);
  }
LABEL_14:
  if ((void)v84)
  {
    *((void *)&v84 + 1) = v84;
    operator delete((void *)v84);
  }
}

void sub_1920FA9FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43)
{
  uint64_t v47 = v44;
  *(void *)(v43 + 8) = v47;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)(v46 - 256));
  unsigned int v49 = *(void **)(v46 - 200);
  if (v49)
  {
    *(void *)(v46 - 192) = v49;
    operator delete(v49);
  }
  operator delete(v45);
  if (__p) {
    operator delete(__p);
  }
  if (a34) {
    operator delete(a34);
  }
  if (a42) {
    operator delete(a42);
  }
  int v50 = *(void **)(v46 - 136);
  if (v50)
  {
    *(void *)(v46 - 128) = v50;
    operator delete(v50);
  }
  unint64_t v51 = *(void **)(v46 - 72);
  if (v51)
  {
    *(void *)(v46 - 64) = v51;
    operator delete(v51);
  }
  _Unwind_Resume(a1);
}

void Espresso::BNNSEngine::elementwise_kernel::__launch(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v96 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *(void *)(a1 + 336);
  if (v7)
  {
    long long v8 = *(void (**)(void))(*(void *)v7 + 16);
    v8();
    return;
  }
  uint64_t v9 = (uint64_t *)*a4;
  unint64_t v10 = (uint64_t *)a4[1];
  uint64_t v11 = (uint64_t)v10 - *a4;
  uint64_t v12 = v11 >> 4;
  uint64_t v13 = *(unsigned int *)(a1 + 280);
  if ((int)v13 > 101)
  {
    switch((int)v13)
    {
      case 102:
        int v14 = 3;
        goto LABEL_39;
      case 114:
        unsigned int v15 = 10;
        goto LABEL_45;
      case 115:
        unsigned int v15 = 9;
        goto LABEL_45;
      case 117:
        unsigned int v15 = 7;
        goto LABEL_45;
      case 118:
        unsigned int v15 = 6;
        goto LABEL_45;
      case 121:
        unsigned int v15 = 11;
        goto LABEL_45;
      case 122:
        unsigned int v15 = 16;
        goto LABEL_45;
      case 123:
        unsigned int v15 = 15;
        goto LABEL_45;
      case 124:
        unsigned int v15 = 17;
        goto LABEL_45;
      case 125:
        unsigned int v15 = 13;
        goto LABEL_45;
      case 126:
        unsigned int v15 = 12;
        goto LABEL_45;
      case 127:
        unsigned int v15 = 14;
        goto LABEL_45;
      case 128:
        unsigned int v15 = 19;
        goto LABEL_45;
      case 129:
        unsigned int v15 = 18;
        goto LABEL_45;
      case 130:
        unsigned int v15 = 20;
        goto LABEL_45;
      default:
        goto LABEL_121;
    }
  }
  if ((int)v13 <= 11)
  {
    if (!v13)
    {
      if ((unint64_t)v11 <= 0x1F) {
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,unsigned long>("elementwise_kernel %zu expects more than 2 input but got %zu inputs.", 0, v12);
      }
      uint64_t v16 = a1;
      uint64_t v17 = a3;
      uint64_t v18 = (uint64_t)a4;
      int v14 = 0;
      goto LABEL_41;
    }
    if (v13 != 1)
    {
      if (v13 == 11)
      {
        unsigned int v15 = 4;
        goto LABEL_45;
      }
LABEL_121:
      Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &>("Unsupported elementwise mode %zu (runtime mode change detected).", v13);
    }
    int v14 = 2;
LABEL_39:
    if (v11 != 32) {
      Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,unsigned long>("elementwise_kernel %zu expects 2 input but got %zu inputs.", v13, v12);
    }
    uint64_t v16 = a1;
    uint64_t v17 = a3;
    uint64_t v18 = (uint64_t)a4;
LABEL_41:
    Espresso::BNNSEngine::elementwise_kernel::__launch_n_ary(v16, v17, v18, v14);
    return;
  }
  switch((int)v13)
  {
    case 26:
      unsigned int v15 = 24;
      goto LABEL_45;
    case 27:
      unsigned int v15 = 22;
      goto LABEL_45;
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 34:
    case 36:
      goto LABEL_121;
    case 33:
      int v14 = 1;
      goto LABEL_39;
    case 35:
      unsigned int v15 = 23;
      goto LABEL_45;
    case 37:
      unsigned int v15 = 8;
      goto LABEL_45;
    default:
      if (v13 != 12)
      {
        if (v13 != 13) {
          goto LABEL_121;
        }
        int v14 = 21;
        goto LABEL_39;
      }
      unsigned int v15 = 5;
LABEL_45:
      if (v11 != 16) {
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,unsigned long>("elementwise_kernel %zu expects 1 input but got %zu inputs.", v13, v12);
      }
      if (a3[1] == *a3)
      {
        uint64_t v90 = 0;
        uint64_t v91 = 0;
      }
      else
      {
        Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v90, (uint64_t *)*a3);
        uint64_t v9 = (uint64_t *)*a4;
        unint64_t v10 = (uint64_t *)a4[1];
      }
      if (v10 == v9)
      {
        uint64_t v88 = 0;
        uint64_t v89 = 0;
      }
      else
      {
        Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v88, v9);
      }
      unsigned int v19 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a3, a3[1], 0);
      if (v19)
      {
        uint64_t v21 = *((void *)v19 + 22);
        unsigned int v20 = (std::__shared_weak_count *)*((void *)v19 + 23);
        if (v20) {
          atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        unsigned int v20 = 0;
        uint64_t v21 = 0;
      }
      long long v22 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a4, a4[1], 0);
      if (v22)
      {
        uint64_t v24 = *((void *)v22 + 22);
        unsigned int v23 = (std::__shared_weak_count *)*((void *)v22 + 23);
        if (v23) {
          atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        uint64_t v24 = 0;
        unsigned int v23 = 0;
      }
      Espresso::abstract_blob_container::shape(v85, *(void *)*a4);
      Espresso::abstract_blob_container::shape(v82, *(void *)*a3);
      unsigned int v25 = (void ***)(a1 + 352);
      if (*(void *)(a1 + 360) != *(void *)(a1 + 352)) {
        goto LABEL_80;
      }
      std::vector<void *>::resize((char **)(a1 + 352), 1uLL);
      memset(v81, 0, sizeof(v81));
      long long v79 = 0u;
      long long v80 = 0u;
      long long v77 = 0u;
      long long v78 = 0u;
      long long v75 = 0u;
      long long v76 = 0u;
      long long v73 = 0u;
      long long v74 = 0u;
      long long v71 = 0u;
      long long v72 = 0u;
      long long v69 = 0u;
      *(_OWORD *)in_stride = 0u;
      LODWORD(v81[0]) = 1;
      DWORD2(v81[11]) = 1;
      long long v67 = 0u;
      long long v68 = 0u;
      long long v65 = 0u;
      long long v66 = 0u;
      long long v63 = 0u;
      long long v64 = 0u;
      long long v61 = 0u;
      long long v62 = 0u;
      long long v59 = 0u;
      long long v60 = 0u;
      long long v57 = 0u;
      long long v58 = 0u;
      long long v55 = 0u;
      long long v56 = 0u;
      long long v53 = 0u;
      long long v54 = 0u;
      long long v51 = 0u;
      long long v52 = 0u;
      long long v49 = 0u;
      long long v50 = 0u;
      long long v48 = 0u;
      if (v88)
      {
        BOOL v26 = v89;
        uint64_t v46 = v88;
        uint64_t v47 = v89;
        if (v89) {
          atomic_fetch_add_explicit(&v89->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v40, (const Espresso::layer_shape *)v82, 0);
        Espresso::BNNSEngine::bnns_array_descriptor_for_blob<Espresso::blob<float,4>>((uint64_t)&v59, (uint64_t)&v46, (uint64_t)v40, 1);
        if (v26) {
LABEL_65:
        }
          nitro::nitro_function::nitro_function(v26);
      }
      else
      {
        if (!v24)
        {
          long long v35 = "Elementwise kernel only supports FP32 or FP16 output";
          goto LABEL_119;
        }
        uint64_t v46 = v24;
        uint64_t v47 = v23;
        if (v23) {
          atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v40, (const Espresso::layer_shape *)v82, 0);
        Espresso::BNNSEngine::bnns_array_descriptor_for_blob<Espresso::blob<unsigned short,4>>((uint64_t)&v59, (uint64_t)&v46, (uint64_t)v40, 1);
        BOOL v26 = v23;
        if (v23) {
          goto LABEL_65;
        }
      }
      if (v90)
      {
        long long v27 = v91;
        uint64_t v44 = v90;
        int v45 = v91;
        if (v91) {
          atomic_fetch_add_explicit(&v91->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v40, (const Espresso::layer_shape *)v85, 0);
        Espresso::BNNSEngine::bnns_array_descriptor_for_blob<Espresso::blob<float,4>>((uint64_t)&v48, (uint64_t)&v44, (uint64_t)v40, 1);
        if (!v27) {
          goto LABEL_71;
        }
        goto LABEL_70;
      }
      if (!v21)
      {
        long long v35 = "Elementwise kernel only supports FP32 or FP16 inputs";
LABEL_119:
        Espresso::throw_exception_selector<Espresso::invalid_argument_error>(v35);
      }
      uint64_t v44 = v21;
      int v45 = v20;
      if (v20) {
        atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v40, (const Espresso::layer_shape *)v85, 0);
      Espresso::BNNSEngine::bnns_array_descriptor_for_blob<Espresso::blob<unsigned short,4>>((uint64_t)&v48, (uint64_t)&v44, (uint64_t)v40, 1);
      long long v27 = v20;
      if (!v20) {
        goto LABEL_71;
      }
LABEL_70:
      nitro::nitro_function::nitro_function(v27);
LABEL_71:
      long long v78 = v67;
      long long v79 = v68;
      long long v80 = v69;
      long long v74 = v63;
      long long v75 = v64;
      long long v76 = v65;
      long long v77 = v66;
      *(_OWORD *)in_stride = v59;
      long long v71 = v60;
      long long v72 = v61;
      long long v73 = v62;
      *(_OWORD *)((char *)&v81[7] + 8) = v55;
      *(_OWORD *)((char *)&v81[8] + 8) = v56;
      *(_OWORD *)((char *)&v81[9] + 8) = v57;
      *(_OWORD *)((char *)&v81[10] + 8) = v58;
      *(_OWORD *)((char *)&v81[5] + 8) = v53;
      *(_OWORD *)((char *)&v81[6] + 8) = v54;
      *(_OWORD *)((char *)&v81[3] + 8) = v51;
      *(_OWORD *)((char *)&v81[4] + 8) = v52;
      *(_OWORD *)((char *)v81 + 8) = v48;
      *(_OWORD *)((char *)&v81[1] + 8) = v49;
      *(_OWORD *)((char *)&v81[2] + 8) = v50;
      long long v42 = 0u;
      long long v43 = 0u;
      long long v41 = 0u;
      v40[1] = in_stride;
      v40[0] = v15;
      int v30 = *(_DWORD *)(a1 + 284);
      if (v30)
      {
        if (v30 != 1) {
          Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Elementwise kernel only supports fused relu activation");
        }
        LODWORD(v41) = 1;
      }
      unsigned int v38 = bnns_alloc_capmem;
      uint64_t v31 = *(void *)(a1 + 376);
      uint64_t v39 = MEMORY[0x1E4F14838];
      uint64_t v36 = 0;
      uint64_t v37 = v31;
      {
        if (v28)
        {
          if (Espresso::is_espresso_os_log_requested(Espresso::espresso_os_log_flag)::onceToken != -1) {
            dispatch_once(&Espresso::is_espresso_os_log_requested(Espresso::espresso_os_log_flag)::onceToken, &__block_literal_global_60);
          }
          Espresso::BNNSEngine::elementwise_kernel::__launch_unary(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &,BNNSArithmeticFunction)::log_requested = Espresso::is_espresso_os_log_requested(Espresso::espresso_os_log_flag)::logs_requested;
        }
      }
      if (Espresso::BNNSEngine::elementwise_kernel::__launch_unary(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &,BNNSArithmeticFunction)::log_requested)
      {
        uint64_t v32 = Espresso::espresso_os_log_subsystem(v28, v29);
        if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)std::string buf = 67109376;
          int v93 = v36;
          __int16 v94 = 2048;
          uint64_t v95 = v37;
          _os_log_debug_impl(&dword_1920CB000, v32, OS_LOG_TYPE_DEBUG, "BNNSFilterCreateLayerArithmetic: flags=%d, n_threads=%zu", buf, 0x12u);
        }
      }
      **unsigned int v25 = (void *)MEMORY[0x192FEE720](v40, &v36);
LABEL_80:
      in_stride[0] = 1;
      uint64_t v33 = v90;
      if (!v90 || (uint64_t v34 = v88) == 0)
      {
        if (!v21 || (uint64_t v33 = v21, (v34 = v24) == 0)) {
          Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Elementwise kernel only supports all FP32 or FP16 inputs");
        }
      }
      if (BNNSArithmeticFilterApplyBatch(**v25, 1uLL, 1uLL, (const void **)(v34 + 24), in_stride, *(void **)(v33 + 24), 1uLL) == -1)Espresso::throw_exception_selector<Espresso::invalid_state_error>("Unary elementwise kernel failed in BNNS"); {
      if (__p)
      }
      {
        long long v84 = __p;
        operator delete(__p);
      }
      if (v86)
      {
        int v87 = v86;
        operator delete(v86);
      }
      if (v23) {
        nitro::nitro_function::nitro_function(v23);
      }
      if (v20) {
        nitro::nitro_function::nitro_function(v20);
      }
      if (v89) {
        nitro::nitro_function::nitro_function(v89);
      }
      if (v91) {
        nitro::nitro_function::nitro_function(v91);
      }
      return;
  }
}

void sub_1920FB348(_Unwind_Exception *a1)
{
  unint64_t v5 = (void *)STACK[0x378];
  if (STACK[0x378])
  {
    STACK[0x380] = (unint64_t)v5;
    operator delete(v5);
  }
  int v6 = *(void **)(v3 - 168);
  if (v6)
  {
    *(void *)(v3 - 160) = v6;
    operator delete(v6);
    if (!v2)
    {
LABEL_5:
      if (!v1) {
        goto LABEL_7;
      }
      goto LABEL_6;
    }
  }
  else if (!v2)
  {
    goto LABEL_5;
  }
  nitro::nitro_function::nitro_function(v2);
  if (!v1)
  {
LABEL_7:
    uint64_t v7 = *(std::__shared_weak_count **)(v3 - 136);
    if (v7) {
      nitro::nitro_function::nitro_function(v7);
    }
    long long v8 = *(std::__shared_weak_count **)(v3 - 120);
    if (v8) {
      nitro::nitro_function::nitro_function(v8);
    }
    _Unwind_Resume(a1);
  }
LABEL_6:
  nitro::nitro_function::nitro_function(v1);
  goto LABEL_7;
}

void Espresso::generic_load_constant_kernel::top_shapes_for_bottom_shapes(uint64_t a1@<X0>, void *a2@<X8>)
{
  *((void *)&v14 + 1) = *MEMORY[0x1E4F143B8];
  int v3 = *(_DWORD *)(a1 + 320);
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  int v4 = *(_DWORD *)(a1 + 324);
  if (v4 < 0) {
    int v4 = -1;
  }
  long long v6 = *(_OWORD *)(a1 + 304);
  int v7 = v3;
  int v8 = v4;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  std::string __p = 0;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  unint64_t v5 = (char *)operator new(0x40uLL);
  *a2 = v5;
  a2[1] = v5;
  a2[2] = v5 + 64;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a2 + 2), &v6, &v14, (uint64_t)v5);
  if (__p)
  {
    uint64_t v12 = __p;
    operator delete(__p);
  }
}

void sub_1920FB4F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  *(void *)(v17 + 8) = v18;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a17 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::generic_load_constant_kernel_impl::__launch(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  uint64_t v3 = *(void *)(a1 + 344);
  if (!v3) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Missing constant_blob for load_constant");
  }
  if (*(unsigned char *)(a1 + 376))
  {
    long long v6 = *a3;
  }
  else
  {
    long long v6 = *a3;
    if (!*(unsigned char *)(a1 + 360) && *(void *)(a1 + 368) == *v6) {
      return;
    }
  }
  uint64_t v7 = *v6;
  int v8 = *(std::__shared_weak_count **)(a1 + 352);
  uint64_t v12 = v3;
  uint64_t v13 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  int v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t *))(*(void *)v7 + 144))(v7, a2, &v12, &v10);
  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
  if (v13) {
    nitro::nitro_function::nitro_function(v13);
  }
  if (!v9) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Unsupported copy of constant blob");
  }
  *(unsigned char *)(a1 + 360) = 0;
  *(void *)(a1 + 368) = **a3;
}

void sub_1920FB620(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (a12) {
    nitro::nitro_function::nitro_function(a12);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::generic_activation_kernel::top_shapes_for_bottom_shapes(uint64_t a1@<X0>, long long **a2@<X1>, void *a3@<X8>)
{
  *((void *)&v35 + 1) = *MEMORY[0x1E4F143B8];
  int v4 = *(_DWORD *)(a1 + 304);
  if ((v4 - 17) >= 2)
  {
    if (v4 == 15)
    {
      long long v6 = *a2;
      uint64_t v7 = *((void *)*a2 + 4);
      long long v8 = (*a2)[1];
      long long v25 = **a2;
      long long v26 = v8;
      uint64_t v27 = v7;
      uint64_t v28 = 0;
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v28, *((const void **)v6 + 5), *((void *)v6 + 6), (uint64_t)(*((void *)v6 + 6) - *((void *)v6 + 5)) >> 2);
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      int v9 = (char *)operator new(0x40uLL);
      *a3 = v9;
      a3[1] = v9;
      a3[2] = v9 + 64;
      a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), &v25, v31, (uint64_t)v9);
      uint64_t v10 = v28;
      if (!v28) {
        return;
      }
      uint64_t v29 = v28;
      goto LABEL_18;
    }
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    uint64_t v11 = a2[1];
    unint64_t v12 = ((char *)v11 - (char *)*a2) >> 6;
    uint64_t v13 = *a2;
    std::vector<Espresso::layer_shape>::__init_with_size[abi:ne180100]<Espresso::layer_shape*,Espresso::layer_shape*>(a3, v13, v11, v12);
  }
  else
  {
    unint64_t v5 = *a2;
    long long v17 = **a2;
    long long v18 = (*a2)[1];
    uint64_t v19 = *((void *)*a2 + 4);
    std::string __p = 0;
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *((const void **)v5 + 5), *((void *)v5 + 6), (uint64_t)(*((void *)v5 + 6) - *((void *)v5 + 5)) >> 2);
    if (DWORD1(v18) == -1 || SDWORD1(v18) >= 4) {
      SDWORD2(v17) /= 4;
    }
    else {
      LODWORD(v17) = (int)v17 / 4;
    }
    long long v25 = v17;
    long long v26 = v18;
    uint64_t v27 = v19;
    uint64_t v28 = 0;
    uint64_t v29 = 0;
    uint64_t v30 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v28, __p, (uint64_t)v21, (v21 - (unsigned char *)__p) >> 2);
    v31[0] = v17;
    v31[1] = v18;
    uint64_t v32 = v19;
    uint64_t v33 = 0;
    v34[0] = 0;
    v34[1] = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v33, __p, (uint64_t)v21, (v21 - (unsigned char *)__p) >> 2);
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    unsigned int v23 = a3;
    char v24 = 0;
    long long v14 = (char *)operator new(0x80uLL);
    *a3 = v14;
    a3[1] = v14;
    a3[2] = v14 + 128;
    uint64_t v15 = 0;
    a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), &v25, &v35, (uint64_t)v14);
    do
    {
      uint64_t v16 = (void *)v34[v15 - 1];
      if (v16)
      {
        v34[v15] = v16;
        operator delete(v16);
      }
      v15 -= 8;
    }
    while (v15 != -16);
    uint64_t v10 = __p;
    if (__p)
    {
      uint64_t v21 = __p;
LABEL_18:
      operator delete(v10);
    }
  }
}

void sub_1920FB8D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25)
{
  uint64_t v27 = v26;
  *(void *)(v25 + 8) = v27;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a25 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::slice_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t a4)
{
  uint64_t v103 = *MEMORY[0x1E4F143B8];
  int v7 = (***(uint64_t (****)(void))(*(void *)(a1 + 8) + 8))(*(void *)(*(void *)(a1 + 8) + 8));
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v99, *a3);
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v97, *(uint64_t **)a4);
  Espresso::abstract_blob_container::shape((char *)&v93, **(void **)a4);
  Espresso::abstract_blob_container::shape((char *)&v88, **a3);
  char v8 = vmaxv_u16((uint16x4_t)vmovn_s32(vcgtq_s32((int32x4_t)xmmword_192DCA240, v89)));
  if (v90 == -1) {
    BOOL v9 = v89.i32[3] != 1;
  }
  else {
    BOOL v9 = v90 == 5;
  }
  if (v89.i32[3]) {
    BOOL v9 = 0;
  }
  if ((v8 & 1) == 0 && v88 >= 1 && !v9)
  {
    int v10 = HIDWORD(v93);
    long long v101 = v93;
    int v11 = v94;
    int v102 = v94;
    if (*(_DWORD *)(a1 + 296) == 1)
    {
      int v84 = HIDWORD(v93);
      if (*(void *)(a4 + 8) - *(void *)a4 <= 0x1FuLL) {
        Espresso::throw_exception_selector<Espresso::invalid_state_error>("Insufficient bottom blobs");
      }
      Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&src, (uint64_t *)(*(void *)a4 + 16));
      unint64_t v12 = *(float **)(*(void *)&src.flags + 24);
      float v13 = 0.5;
      if (*v12 < 0.0) {
        float v13 = -0.5;
      }
      int v14 = (int)(float)(*v12 + v13);
      if (src.size[0]) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)src.size[0]);
      }
      int v10 = v84;
    }
    else
    {
      int v14 = *(_DWORD *)(a1 + 284);
    }
    uint64_t v15 = *(int *)(a1 + 292);
    if ((v15 & 0x80000000) != 0)
    {
      uint64_t v16 = *(int *)(a1 + 280);
      int v17 = *((_DWORD *)&v101 + v16);
      if (v14) {
        int v18 = v14;
      }
      else {
        int v18 = *((_DWORD *)&v101 + v16);
      }
      if (v18 < v17) {
        int v17 = v18;
      }
      int v14 = v17 - 1;
    }
    else
    {
      uint64_t v16 = *(int *)(a1 + 280);
      if (v14 >= *((_DWORD *)&v101 + v16)) {
        goto LABEL_79;
      }
    }
    uint64_t v19 = v97;
    if (v97)
    {
      unsigned int v20 = (_DWORD *)v99;
      if (v99)
      {
        int v22 = *(_DWORD *)(v97 + 8);
        int v21 = *(_DWORD *)(v97 + 12);
        int v23 = v21 * v22;
        int v24 = *(_DWORD *)(v97 + 16);
        int v25 = v21 * v22 * v24;
        int v26 = HIDWORD(v93);
        int v27 = v25 * HIDWORD(v93);
        switch((int)v16)
        {
          case 0:
            int v28 = (v22 & (v14 >> 31)) + v14;
            if (v7 != 100 || v15 > 1)
            {
              uint64_t v30 = *(unsigned int *)(v99 + 20);
              if ((int)v30 >= 1)
              {
                uint64_t v31 = 0;
                uint64_t v32 = v22;
                uint64_t v33 = *(_DWORD **)(v99 + 24);
                uint64_t v34 = *(unsigned int *)(v99 + 16);
                uint64_t v35 = 4 * v28;
                uint64_t v36 = 4 * v25;
                uint64_t v37 = 4 * v23;
                uint64_t v38 = 4 * v32;
                uint64_t v39 = 4 * v15;
                do
                {
                  if ((int)v34 >= 1)
                  {
                    uint64_t v40 = 0;
                    uint64_t v41 = v20[3];
                    uint64_t v42 = v35;
                    do
                    {
                      if ((int)v41 >= 1)
                      {
                        uint64_t v43 = 0;
                        int v44 = v20[2];
                        int v45 = (_DWORD *)(*(void *)(v19 + 24) + v42);
                        do
                        {
                          uint64_t v46 = v45;
                          int v47 = v44;
                          if (v44 >= 1)
                          {
                            do
                            {
                              *v33++ = *v46;
                              uint64_t v46 = (_DWORD *)((char *)v46 + v39);
                              --v47;
                            }
                            while (v47);
                          }
                          ++v43;
                          int v45 = (_DWORD *)((char *)v45 + v38);
                        }
                        while (v43 != v41);
                      }
                      ++v40;
                      v42 += v37;
                    }
                    while (v40 != v34);
                  }
                  ++v31;
                  v35 += v36;
                }
                while (v31 != v30);
              }
            }
            else
            {
              *(_OWORD *)&src.flags = 0u;
              memset(&src.data_type, 0, 32);
              memset(&src.stride[5], 0, 32);
              memset(&src.size[3], 0, 40);
              src.layout = BNNSDataLayout4DLastMajor;
              src.size[1] = SDWORD1(v93);
              src.size[2] = SDWORD2(v93);
              src.size[3] = v94 * HIDWORD(v93);
              src.stride[0] = 1;
              src.stride[1] = (int)v93;
              src.stride[2] = (int)v93 * (uint64_t)SDWORD1(v93);
              src.stride[3] = SLODWORD(src.stride[2]) * (uint64_t)SDWORD2(v93);
              src.stride[4] = v94 * HIDWORD(v93) * LODWORD(src.stride[2]) * DWORD2(v93);
              src.data = (void *)(*(void *)(v97 + 24) + 4 * v28);
              src.data_type = BNNSDataTypeFloat32;
              src.data_scale = 1.0;
              memset(&dest.data_type, 0, 32);
              memset(&dest.size[4], 0, 104);
              dest.flags = BNNSNDArrayFlagBackpropSet;
              dest.layout = BNNSDataLayout4DLastMajor;
              *(void *)&long long v80 = v88;
              *((void *)&v80 + 1) = v89.i32[0];
              src.size[0] = v88;
              *(_OWORD *)dest.std::string::size_type size = v80;
              dest.size[2] = v89.i32[1];
              dest.size[3] = v89.i32[3] * (uint64_t)v89.i32[2];
              dest.data = *(void **)(v99 + 24);
              dest.data_type = BNNSDataTypeFloat32;
              dest.data_scale = 1.0;
              memset(&filter_params, 0, sizeof(filter_params));
              uint64_t v81 = *(const void **)(a1 + 8);
              if (v81)
              {
                if (v82) {
                  filter_params.n_threads = v82[21];
                }
              }
              if (BNNSCopy(&dest, &src, &filter_params)) {
                Espresso::throw_exception_selector<Espresso::invalid_state_error>("BNNS error");
              }
            }
            return;
          case 1:
            if (*(int *)(v99 + 20) >= 1)
            {
              uint64_t v72 = 0;
              uint64_t v73 = ((v21 & (v14 >> 31)) + v14) * v22;
              long long v74 = *(char **)(v99 + 24);
              uint64_t v75 = v23;
              uint64_t v83 = v25;
              do
              {
                if ((int)v20[4] >= 1)
                {
                  uint64_t v76 = 0;
                  do
                  {
                    if ((int)v20[3] >= 1)
                    {
                      int v77 = 0;
                      long long v78 = (char *)(*(void *)(v19 + 24) + 4 * v72 * v83 + 4 * v76 * v75 + 4 * v73);
                      LODWORD(v79) = *(_DWORD *)(v19 + 8);
                      do
                      {
                        memcpy(v74, v78, 4 * (int)v79);
                        uint64_t v19 = v97;
                        uint64_t v79 = *(int *)(v97 + 8);
                        v74 += 4 * v79;
                        v78 += 4 * *(_DWORD *)(a1 + 292) * (int)v79;
                        ++v77;
                        unsigned int v20 = (_DWORD *)v99;
                      }
                      while (v77 < *(_DWORD *)(v99 + 12));
                    }
                    ++v76;
                  }
                  while (v76 < (int)v20[4]);
                }
                ++v72;
              }
              while (v72 < (int)v20[5]);
            }
            break;
          case 2:
            if (*(int *)(v99 + 20) >= 1)
            {
              uint64_t v52 = 0;
              long long v53 = *(char **)(v99 + 24);
              uint64_t v54 = ((v24 & (v14 >> 31)) + v14) * v23;
              uint64_t v55 = v25;
              do
              {
                if ((int)v20[4] >= 1)
                {
                  int v56 = 0;
                  long long v57 = (char *)(*(void *)(v19 + 24) + 4 * v52 * v55 + 4 * v54);
                  int v58 = *(_DWORD *)(v19 + 8);
                  int v59 = *(_DWORD *)(v19 + 12);
                  do
                  {
                    memcpy(v53, v57, 4 * v59 * (uint64_t)v58);
                    unsigned int v20 = (_DWORD *)v99;
                    v53 += 4 * v20[3] * v20[2];
                    uint64_t v19 = v97;
                    int v58 = *(_DWORD *)(v97 + 8);
                    int v59 = *(_DWORD *)(v97 + 12);
                    v57 += 4 * v59 * v58 * *(_DWORD *)(a1 + 292);
                    ++v56;
                  }
                  while (v56 < *(_DWORD *)(v99 + 16));
                }
                ++v52;
              }
              while (v52 < (int)v20[5]);
            }
            break;
          case 3:
            __int32 v60 = v89.i32[3];
            if (v89.i32[3] >= 1)
            {
              uint64_t v61 = 0;
              long long v62 = *(char **)(v99 + 24);
              uint64_t v63 = ((v10 & (v14 >> 31)) + v14) * v25;
              uint64_t v64 = v27;
              int v65 = v89.i32[2];
              do
              {
                if (v65 >= 1)
                {
                  __int32 v66 = 0;
                  long long v67 = (char *)(*(void *)(v19 + 24) + 4 * v63 + 4 * v61 * v64);
                  int v68 = *(_DWORD *)(v19 + 8);
                  int v69 = *(_DWORD *)(v19 + 12);
                  int v70 = *(_DWORD *)(v19 + 16);
                  do
                  {
                    memcpy(v62, v67, 4 * v69 * (uint64_t)v68 * v70);
                    uint64_t v19 = v97;
                    int v68 = *(_DWORD *)(v97 + 8);
                    int v69 = *(_DWORD *)(v97 + 12);
                    int v70 = *(_DWORD *)(v97 + 16);
                    int v71 = v69 * v68 * v70;
                    v62 += 4 * v71;
                    v67 += 4 * v71 * *(_DWORD *)(a1 + 292);
                    ++v66;
                    int v65 = v89.i32[2];
                  }
                  while (v66 < v89.i32[2]);
                  __int32 v60 = v89.i32[3];
                }
                ++v61;
              }
              while (v61 < v60);
            }
            break;
          case 4:
            if (v89.i32[3] >= 1)
            {
              __int32 v48 = 0;
              long long v49 = (char *)(*(void *)(v97 + 24) + 4 * ((v11 & (v14 >> 31)) + v14) * v27);
              long long v50 = *(char **)(v99 + 24);
              do
              {
                memcpy(v50, v49, 4 * v21 * (uint64_t)v22 * v24 * v26);
                int v22 = *(_DWORD *)(v19 + 8);
                int v21 = *(_DWORD *)(v19 + 12);
                int v24 = *(_DWORD *)(v19 + 16);
                int v26 = HIDWORD(v93);
                int v51 = v21 * v22 * v24 * HIDWORD(v93);
                v50 += 4 * v51;
                v49 += 4 * v51 * *(_DWORD *)(a1 + 292);
                ++v48;
              }
              while (v48 < v89.i32[3]);
            }
            break;
          default:
            break;
        }
      }
    }
  }
LABEL_79:
  if (__p)
  {
    BOOL v92 = __p;
    operator delete(__p);
  }
  if (v95)
  {
    uint64_t v96 = v95;
    operator delete(v95);
  }
  if (v98) {
    nitro::nitro_function::nitro_function(v98);
  }
  if (v100) {
    nitro::nitro_function::nitro_function(v100);
  }
}

void sub_1920FC0F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (__p) {
    operator delete(__p);
  }
  __int32 v66 = *(void **)(v64 - 184);
  if (v66)
  {
    *(void *)(v64 - 176) = v66;
    operator delete(v66);
  }
  long long v67 = *(std::__shared_weak_count **)(v64 - 152);
  if (v67) {
    nitro::nitro_function::nitro_function(v67);
  }
  int v68 = *(std::__shared_weak_count **)(v64 - 136);
  if (v68) {
    nitro::nitro_function::nitro_function(v68);
  }
  _Unwind_Resume(a1);
}

void Espresso::activation_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(void *)(a3 + 8) == *(void *)a3)
  {
    uint64_t v88 = 0;
    int32x4_t v89 = 0;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v88, *(uint64_t **)a3);
  }
  int v7 = *(uint64_t **)a4;
  if (*(void *)(a4 + 8) == *(void *)a4)
  {
    *(void *)&__N[1] = 0;
    int v87 = 0;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&__N[1], v7);
  }
  int v8 = *(_DWORD *)(a1 + 304);
  if ((v8 - 17) < 2)
  {
    Espresso::activation_kernel_cpu::__launch_lstm_ifog_activation((void *)a1, (uint64_t)v7, (uint64_t **)a3, (uint64_t **)a4);
    goto LABEL_93;
  }
  if (v8 == 15)
  {
    Espresso::activation_kernel_cpu::__launch_gru_activation(a1, (uint64_t)v7, a3, (uint64_t **)a4);
    goto LABEL_93;
  }
  BOOL v9 = (unsigned int *)(a1 + 304);
  if (v88 && *(void *)&__N[1])
  {
    if (v8 != 11)
    {
      if (v8 != 4)
      {
        uint64_t v74 = 0;
        int v75 = *(_DWORD *)(v88 + 8);
        do
        {
          v75 *= *(_DWORD *)(v88 + 12 + v74);
          v74 += 4;
        }
        while (v74 != 12);
        Espresso::activation_chunk((unsigned int *)(a1 + 304), *(const float **)(*(void *)&__N[1] + 24), *(float **)(v88 + 24), v75);
        goto LABEL_93;
      }
      uint64_t v10 = *(void *)(a1 + 344);
      if (v10)
      {
        int v11 = *(_DWORD *)(v88 + 20);
        if (v11 >= 1)
        {
          int v12 = 0;
          int v13 = *(_DWORD *)(v88 + 12) * *(_DWORD *)(v88 + 8);
          uint64_t v14 = *(unsigned int *)(v88 + 16);
          uint64_t v15 = *(void *)(v88 + 24);
          uint64_t v16 = *(void *)(*(void *)&__N[1] + 24);
          uint64_t v17 = 4 * v13;
          do
          {
            if ((int)v14 >= 1)
            {
              uint64_t v18 = 0;
              uint64_t v19 = *(void *)(v10 + 16);
              do
              {
                if (v13 >= 1)
                {
                  uint64_t v20 = 0;
                  float v21 = *(float *)(v19 + 4 * v18);
                  do
                  {
                    float v22 = *(float *)(v16 + v20);
                    if (v22 >= 0.0) {
                      float v23 = 1.0;
                    }
                    else {
                      float v23 = v21;
                    }
                    *(float *)(v15 + v20) = v22 * v23;
                    v20 += 4;
                  }
                  while (4 * v13 != v20);
                }
                v16 += v17;
                v15 += v17;
                ++v18;
              }
              while (v18 != v14);
            }
            ++v12;
          }
          while (v12 != v11);
        }
        goto LABEL_93;
      }
      uint64_t v76 = "PReLU params not set";
LABEL_103:
      Espresso::throw_exception_selector<Espresso::invalid_state_error>(v76);
    }
    if (!*(void *)(a1 + 360) || !*(void *)(a1 + 376))
    {
      uint64_t v76 = "Softplus weights not set";
      goto LABEL_103;
    }
    uint64_t v64 = *(unsigned int *)(v88 + 16);
    int v63 = *(_DWORD *)(v88 + 20);
    uint64_t v65 = (*(_DWORD *)(v88 + 12) * *(_DWORD *)(v88 + 8));
    LODWORD(src.data) = *(_DWORD *)(v88 + 12) * *(_DWORD *)(v88 + 8);
    if (v63 >= 1)
    {
      int v66 = 0;
      long long v67 = *(float **)(v88 + 24);
      int v68 = *(const float **)(*(void *)&__N[1] + 24);
      do
      {
        if ((int)v64 < 1)
        {
          uint64_t data_low = v65;
        }
        else
        {
          for (uint64_t i = 0; i != v64; ++i)
          {
            LODWORD(dest.data) = 0;
            LODWORD(dest.data) = *(_DWORD *)(*(void *)(*(void *)(a1 + 360) + 16) + 4 * i);
            LODWORD(__B) = 0;
            LODWORD(__B) = *(_DWORD *)(*(void *)(*(void *)(a1 + 376) + 16) + 4 * i);
            vDSP_vsmul(v68, 1, (const float *)&__B, v67, 1, (int)v65);
            vvexpf(v67, v67, (const int *)&src);
            vvlog1pf(v67, v67, (const int *)&src);
            vDSP_vsmul(v67, 1, (const float *)&dest, v67, 1, SLODWORD(src.data));
            uint64_t data_low = LODWORD(src.data);
            if (SLODWORD(src.data) >= 1)
            {
              int v71 = v67;
              uint64_t v72 = (float *)v68;
              uint64_t v73 = LODWORD(src.data);
              do
              {
                if (fabsf(*v71) == INFINITY) {
                  *int v71 = (float)(*(float *)&dest.data * *(float *)&__B) * *v72;
                }
                ++v72;
                ++v71;
                --v73;
              }
              while (v73);
            }
            v68 += (int)data_low;
            LODWORD(v65) = data_low;
            v67 += (int)data_low;
          }
        }
        ++v66;
        uint64_t v65 = data_low;
      }
      while (v66 != v63);
    }
  }
  else
  {
    int v24 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*(void *)a3, *(void *)(a3 + 8), 0);
    if (v24)
    {
      uint64_t v25 = *((void *)v24 + 22);
      int v26 = (std::__shared_weak_count *)*((void *)v24 + 23);
      if (v26) {
        atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
      }
    }
    else
    {
      uint64_t v25 = 0;
      int v26 = 0;
    }
    int v27 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*(void *)a4, *(void *)(a4 + 8), 0);
    if (!v27) {
      goto LABEL_100;
    }
    uint64_t v28 = v27[22];
    uint64_t v29 = (std::__shared_weak_count *)v27[23];
    if (v29) {
      atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (!v25 || !v28) {
LABEL_100:
    }
      Espresso::throw_exception_selector<Espresso::invalid_state_error>("Unexpected null blobs");
    uint64_t v30 = *(unsigned int *)(v25 + 16);
    int v79 = *(_DWORD *)(v25 + 20);
    __N[0] = *(_DWORD *)(v25 + 12) * *(_DWORD *)(v25 + 8);
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&__B, *(_DWORD *)(v28 + 8), *(_DWORD *)(v28 + 12), 1, 1);
    long long v78 = v29;
    uint64_t v81 = (void *)a1;
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v82, *(_DWORD *)(v25 + 8), *(_DWORD *)(v25 + 12), 1, 1);
    if (v79 >= 1)
    {
      int v31 = 0;
      uint64_t v32 = *(_WORD **)(v25 + 24);
      uint64_t v33 = *(char **)(v28 + 24);
      uint64_t v34 = __B;
      int v77 = "PReLU params not set";
      do
      {
        int v80 = v31;
        if ((int)v30 >= 1)
        {
          uint64_t v35 = 0;
          int v36 = __N[0];
          uint64_t v37 = __B;
          uint64_t v38 = v82;
          do
          {
            uint64_t v39 = *(void **)(v34 + 24);
            src.data = v33;
            src.height = 1;
            src.width = v36;
            src.rowBytes = 2 * v36;
            dest.data = v39;
            dest.height = 1;
            dest.width = v36;
            dest.rowBytes = 4 * v36;
            vImageConvert_Planar16FtoPlanarF(&src, &dest, 0);
            if (*v9 == 11)
            {
              uint64_t v48 = v81[45];
              if (!v48 || (uint64_t v49 = v81[47]) == 0)
              {
                int v77 = "Softplus weights not set";
LABEL_99:
                Espresso::throw_exception_selector<Espresso::invalid_state_error>(v77);
              }
              LODWORD(src.data) = 0;
              LODWORD(src.data) = *(_DWORD *)(*(void *)(v48 + 16) + 4 * v35);
              LODWORD(dest.data) = 0;
              LODWORD(dest.data) = *(_DWORD *)(*(void *)(v49 + 16) + 4 * v35);
              vDSP_vsmul(*(const float **)(v37 + 24), 1, (const float *)&dest, *(float **)(v38 + 24), 1, __N[0]);
              vvexpf(*(float **)(v38 + 24), *(const float **)(v38 + 24), __N);
              vvlog1pf(*(float **)(v38 + 24), *(const float **)(v38 + 24), __N);
              vDSP_vsmul(*(const float **)(v38 + 24), 1, (const float *)&src, *(float **)(v38 + 24), 1, __N[0]);
              int v36 = __N[0];
              if (__N[0] >= 1)
              {
                uint64_t v50 = 0;
                uint64_t v51 = *(void *)(v38 + 24);
                uint64_t v52 = __B;
                uint64_t v53 = 4 * __N[0];
                do
                {
                  if (fabsf(*(float *)(v51 + v50)) == INFINITY) {
                    *(float *)(v51 + v50) = (float)(*(float *)&src.data * *(float *)&dest.data)
                  }
                                          * *(float *)(*(void *)(v52 + 24) + v50);
                  v50 += 4;
                }
                while (v53 != v50);
              }
            }
            else if (*v9 == 4)
            {
              uint64_t v40 = v81[43];
              if (!v40) {
                goto LABEL_99;
              }
              int v36 = __N[0];
              if (__N[0] >= 1)
              {
                float v41 = *(float *)(*(void *)(v40 + 16) + 4 * v35);
                uint64_t v42 = *(float **)(v37 + 24);
                uint64_t v43 = *(float **)(v38 + 24);
                uint64_t v44 = __N[0];
                do
                {
                  float v45 = *v42++;
                  float v46 = v45;
                  if (v45 >= 0.0) {
                    float v47 = 1.0;
                  }
                  else {
                    float v47 = v41;
                  }
                  *v43++ = v46 * v47;
                  --v44;
                }
                while (v44);
              }
            }
            else
            {
              Espresso::activation_chunk(v9, *(const float **)(v37 + 24), *(float **)(v38 + 24), __N[0]);
              int v36 = __N[0];
            }
            if (v36)
            {
              uint64_t v54 = *(int **)(v38 + 24);
              uint64_t v55 = v32;
              uint64_t v56 = v36;
              do
              {
                int v57 = *v54++;
                _S0 = v57;
                __asm { FCVT            H0, S0 }
                *v55++ = _S0;
                --v56;
              }
              while (v56);
            }
            v33 += 2 * v36;
            v32 += v36;
            ++v35;
          }
          while (v35 != v30);
        }
        int v31 = v80 + 1;
      }
      while (v80 + 1 != v79);
    }
    if (v83) {
      nitro::nitro_function::nitro_function(v83);
    }
    if (v85) {
      nitro::nitro_function::nitro_function(v85);
    }
    if (v78) {
      nitro::nitro_function::nitro_function(v78);
    }
    if (v26) {
      nitro::nitro_function::nitro_function(v26);
    }
  }
LABEL_93:
  if (v87) {
    nitro::nitro_function::nitro_function(v87);
  }
  if (v89) {
    nitro::nitro_function::nitro_function(v89);
  }
}

void sub_1920FC7DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21,uint64_t a22,std::__shared_weak_count *a23)
{
  if (a21) {
    nitro::nitro_function::nitro_function(a21);
  }
  if (a23) {
    nitro::nitro_function::nitro_function(a23);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::activation_chunk(unsigned int *a1, const float *a2, float *a3, int a4)
{
  unsigned int __N = a4;
  uint64_t v5 = *a1;
  int v7 = a3;
  switch((int)v5)
  {
    case 0:
      float __B = 0.0;
      vDSP_vthr(a2, 1, &__B, a3, 1, a4);
      return;
    case 1:
      vvtanhf(a3, a2, (const int *)&__N);
      return;
    case 2:
      if (a4 >= 1)
      {
        uint64_t v9 = a4;
        do
        {
          float v10 = *a2++;
          float v11 = v10;
          float v12 = *((float *)a1 + 1);
          if (v10 >= 0.0) {
            float v12 = 1.0;
          }
          *v7++ = v11 * v12;
          --v9;
        }
        while (v9);
      }
      return;
    case 3:
      float __N_4 = 1.0;
      float __B = *(float *)&a4;
      vDSP_vneg(a2, 1, a3, 1, a4);
      vvexpf(v7, v7, (const int *)&__B);
      vDSP_vsadd(v7, 1, &__N_4, v7, 1, SLODWORD(__B));
      vvrecf(v7, v7, (const int *)&__B);
      return;
    case 5:
      vDSP_vsmul(a2, 1, (const float *)a1 + 2, a3, 1, a4);
      vvtanhf(v7, v7, (const int *)&__N);
      int v13 = (const float *)(a1 + 1);
      vDSP_Length v14 = (int)__N;
      goto LABEL_59;
    case 6:
      vDSP_vsmsa(a2, 1, (const float *)a1 + 1, (const float *)a1 + 2, a3, 1, a4);
      return;
    case 7:
      float __N_4 = 1.0;
      float __B = 0.0;
      vDSP_vsmsa(a2, 1, (const float *)a1 + 1, (const float *)a1 + 2, a3, 1, a4);
      vDSP_vclip(v7, 1, &__B, &__N_4, v7, 1, a4);
      return;
    case 8:
      if (a4 >= 1)
      {
        uint64_t v15 = a4;
        do
        {
          float v16 = *a2;
          if (*a2 < 0.0)
          {
            float v17 = *((float *)a1 + 1);
            float v16 = (float)(expf(v16) + -1.0) * v17;
          }
          *v7++ = v16;
          ++a2;
          --v15;
        }
        while (v15);
      }
      return;
    case 9:
      vDSP_vthres(a2, 1, (const float *)a1 + 1, a3, 1, a4);
      return;
    case 10:
      vvexpf(a3, a2, (const int *)&__N);
      vvlog1pf(v7, v7, (const int *)&__N);
      uint64_t v18 = __N;
      if ((int)__N >= 1)
      {
        do
        {
          if (fabsf(*v7) == INFINITY) {
            *int v7 = *a2;
          }
          ++a2;
          ++v7;
          --v18;
        }
        while (v18);
      }
      return;
    case 12:
      float __B = 1.0;
      vvfabsf(a3, a2, (const int *)&__N);
      vDSP_vsadd(v7, 1, &__B, v7, 1, (int)__N);
      vvdivf(v7, a2, v7, (const int *)&__N);
      return;
    case 13:
      if (a4 >= 1)
      {
        uint64_t v19 = a4;
        do
        {
          float v20 = *a2++;
          float v21 = v20;
          if (v20 < *((float *)a1 + 1)) {
            float v21 = *((float *)a1 + 2);
          }
          *v7++ = v21;
          --v19;
        }
        while (v19);
      }
      return;
    case 14:
      vDSP_vclip(a2, 1, (const float *)a1 + 1, (const float *)a1 + 2, a3, 1, a4);
      return;
    case 16:
      if (a4 >= 1)
      {
        uint64_t v22 = a4;
        do
        {
          float v23 = *a2;
          if (*a2 >= 0.0) {
            float v24 = v23 * 1.0507;
          }
          else {
            float v24 = (float)(expf(v23) + -1.0) * 1.7581;
          }
          *v7++ = v24;
          ++a2;
          --v22;
        }
        while (v22);
      }
      return;
    case 19:
      if (*(float *)&a4 != 0.0)
      {
        uint64_t v25 = a4;
        do
        {
          float v26 = *a2++;
          *v7++ = v26 * (float)((float)(erff(v26 * 0.70711) + 1.0) * 0.5);
          --v25;
        }
        while (v25);
      }
      return;
    case 20:
      if (*(float *)&a4 != 0.0)
      {
        uint64_t v27 = a4;
        do
        {
          float v28 = *a2++;
          *v7++ = erff(v28);
          --v27;
        }
        while (v27);
      }
      return;
    case 21:
      float __B = 0.044715;
      float __N_4 = 1.0;
      float v44 = 0.79788;
      float v45 = 0.5;
      if (a4 >= 1)
      {
        uint64_t v29 = a4;
        uint64_t v30 = (float *)a2;
        int v31 = a3;
        do
        {
          float v32 = *v30++;
          float v33 = pow(v32, 3.0);
          *v31++ = v33;
          --v29;
        }
        while (v29);
      }
      vDSP_vsmul(v7, 1, &__B, v7, 1, a4);
      vDSP_vadd(v7, 1, a2, 1, v7, 1, (int)__N);
      vDSP_vsmul(v7, 1, &v44, v7, 1, (int)__N);
      vvtanhf(v7, v7, (const int *)&__N);
      vDSP_vsadd(v7, 1, &__N_4, v7, 1, (int)__N);
      vDSP_vmul(v7, 1, a2, 1, v7, 1, (int)__N);
      vDSP_Length v14 = (int)__N;
      int v13 = &v45;
LABEL_59:
      vDSP_vsmul(v7, 1, v13, v7, 1, v14);
      return;
    case 22:
      float v45 = 1.702;
      vDSP_vsmul(a2, 1, &v45, a3, 1, a4);
      vDSP_Length v34 = (int)__N;
      float __N_4 = 1.0;
      float __B = *(float *)&__N;
      uint64_t v35 = v7;
      goto LABEL_74;
    case 23:
      if (*(float *)&a4 != 0.0)
      {
        uint64_t v36 = a4;
        do
        {
          float v37 = *a2++;
          if (v37 < 0.0) {
            float v38 = 0.0;
          }
          else {
            float v38 = 1.0;
          }
          *v7++ = v38;
          --v36;
        }
        while (v36);
      }
      return;
    case 24:
      float __B = -*((float *)a1 + 2);
      float __N_4 = -1.0;
      vDSP_vsmul(a2, 1, &__N_4, a3, 1, a4);
      vDSP_vthr(v7, 1, &__B, v7, 1, (int)__N);
      vDSP_vsmul(v7, 1, &__N_4, v7, 1, (int)__N);
      uint64_t v39 = __N;
      if ((int)__N >= 1)
      {
        do
        {
          float v40 = *((float *)a1 + 1);
          if (*v7 >= 0.0) {
            float v40 = 1.0;
          }
          *int v7 = *v7 * v40;
          ++v7;
          --v39;
        }
        while (v39);
      }
      return;
    case 25:
      float __N_4 = 1.0;
      float __B = *(float *)&a4;
      vDSP_Length v34 = a4;
      uint64_t v35 = a2;
LABEL_74:
      vDSP_vneg(v35, 1, v7, 1, v34);
      vvexpf(v7, v7, (const int *)&__B);
      vDSP_vsadd(v7, 1, &__N_4, v7, 1, SLODWORD(__B));
      vvrecf(v7, v7, (const int *)&__B);
      vDSP_vmul(v7, 1, a2, 1, v7, 1, (int)__N);
      break;
    case 26:
      if (*(float *)&a4 != 0.0)
      {
        uint64_t v41 = a4;
        do
        {
          float v42 = *a2++;
          float v43 = fmax(fmin(v42 + 3.0, 6.0), 0.0) * v42 * 0.166666667;
          *v7++ = v43;
          --v41;
        }
        while (v41);
      }
      break;
    default:
      Espresso::throw_exception_selector<Espresso::invalid_state_error,int &>("Not implemented %d", v5);
  }
}

void Espresso::general_concat_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t a3, int ***a4)
{
  uint64_t v81 = *MEMORY[0x1E4F143B8];
  if (*(void *)a3 == *(void *)(a3 + 8)) {
    return;
  }
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v79, *(uint64_t **)a3);
  Espresso::abstract_blob_container::shape((char *)&v71, **(void **)a3);
  unsigned int v7 = *(_DWORD *)(a1 + 280);
  if ((v7 & 0x80000000) != 0)
  {
    unsigned int v8 = v76;
    if (v75 == 1) {
      int v9 = 4;
    }
    else {
      int v9 = 5;
    }
    if (v76 == -1) {
      unsigned int v8 = v9;
    }
    v7 += v8;
  }
  if (*(unsigned char *)(a1 + 284))
  {
    unsigned int v10 = v76;
    if (v75 == 1) {
      int v11 = 4;
    }
    else {
      int v11 = 5;
    }
    if (v76 == -1) {
      unsigned int v10 = v11;
    }
    unsigned int v7 = v10 + ~v7;
  }
  uint64_t v12 = v79;
  if (!v79) {
    goto LABEL_83;
  }
  int v13 = *(_DWORD **)(v79 + 24);
  int v14 = (***(uint64_t (****)(void))(*(void *)(a1 + 8) + 8))(*(void *)(*(void *)(a1 + 8) + 8));
  if (!*(unsigned char *)(a1 + 285))
  {
    if (v7 || v14 != 100)
    {
      if (v7)
      {
        switch(v7)
        {
          case 1u:
            uint64_t v65 = v74 * (uint64_t)v73 * v75;
            int v50 = v72 * v71;
            goto LABEL_97;
          case 2u:
            uint64_t v65 = v75 * (uint64_t)v74;
            int v52 = v73;
            int v53 = v72 * v71;
            goto LABEL_96;
          case 3u:
            int v52 = v74;
            uint64_t v65 = v75;
            int v53 = v72 * v71 * v73;
LABEL_96:
            int v50 = v53 * v52;
            goto LABEL_97;
          case 4u:
            int v50 = v72 * v71 * v73 * v74 * v75;
            uint64_t v51 = 1;
            goto LABEL_94;
          default:
            Espresso::throw_exception_selector<Espresso::invalid_state_error>("Invalid axis");
        }
      }
      int v50 = v71;
      uint64_t v51 = v73 * (uint64_t)v72 * v74 * v75;
LABEL_94:
      uint64_t v65 = v51;
LABEL_97:
      uint64_t v54 = *a4;
      uint64_t v55 = a4[1];
      if (v55 != *a4)
      {
        unint64_t v56 = 0;
        uint64_t v57 = 4 * v50;
        unsigned int v64 = v7;
        do
        {
          if ((int)v56 >= (unint64_t)(((char *)v55 - (char *)v54) >> 4))
          {
            *(void *)&v68.flags = 0;
            v68.size[0] = 0;
          }
          else
          {
            Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v68, (uint64_t *)&v54[2 * (int)v56]);
            if (*(void *)&v68.flags)
            {
              int v58 = (*a4)[2 * v56];
              uint64_t v59 = v58[2];
              if (v7)
              {
                uint64_t v59 = v58[3] * (uint64_t)(int)v59;
                if (v7 != 1)
                {
                  v59 *= v58[4];
                  if (v7 >= 3)
                  {
                    v59 *= v58[5];
                    if (v7 != 3) {
                      v59 *= v58[6];
                    }
                  }
                }
              }
              if (v65)
              {
                __int32 v60 = *(_DWORD **)(*(void *)&v68.flags + 24);
                uint64_t v61 = v13;
                uint64_t v62 = v65;
                do
                {
                  if (v59)
                  {
                    if (v59 == 1) {
                      *uint64_t v61 = *v60;
                    }
                    else {
                      memcpy(v61, v60, 4 * v59);
                    }
                  }
                  uint64_t v61 = (_DWORD *)((char *)v61 + v57);
                  v60 += v59;
                  --v62;
                }
                while (v62);
              }
              v13 += v59;
              unsigned int v7 = v64;
            }
          }
          if (v68.size[0]) {
            nitro::nitro_function::nitro_function((std::__shared_weak_count *)v68.size[0]);
          }
          ++v56;
          uint64_t v54 = *a4;
          uint64_t v55 = a4[1];
        }
        while (v56 < ((char *)v55 - (char *)*a4) >> 4);
      }
    }
    else
    {
      vDSP_Length v34 = (char *)*a4;
      uint64_t v35 = a4[1];
      if (v35 != *a4)
      {
        uint64_t v36 = 0;
        unint64_t v37 = 0;
        uint64_t v38 = 0;
        do
        {
          if (v36 >> 32 >= (unint64_t)(((char *)v35 - v34) >> 4))
          {
            uint64_t v69 = 0;
            int v70 = 0;
          }
          else
          {
            Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v69, (uint64_t *)&v34[16 * (v36 >> 32)]);
            uint64_t v39 = v69;
            if (v69)
            {
              memset(&v68.data_type, 0, 32);
              memset(&v68.size[1], 0, 128);
              *(_OWORD *)&v68.flags = 0u;
              v68.layout = BNNSDataLayout4DLastMajor;
              uint64_t v40 = *(void *)(v69 + 8);
              *(void *)&long long v41 = (int)v40;
              *((void *)&v41 + 1) = SHIDWORD(v40);
              *(_OWORD *)v68.std::string::size_type size = v41;
              uint64_t v42 = *(void *)(v69 + 16);
              *(void *)&long long v41 = (int)v42;
              *((void *)&v41 + 1) = SHIDWORD(v42);
              *(_OWORD *)&v68.size[2] = v41;
              v68.data = *(void **)(v69 + 24);
              v68.data_type = BNNSDataTypeFloat32;
              v68.data_scale = 1.0;
              memset(&v67.data_type, 0, 32);
              memset(&v67.stride[1], 0, 64);
              memset(&v67.size[1], 0, 64);
              *(_OWORD *)&v67.flags = 0u;
              v67.layout = BNNSDataLayout4DLastMajor;
              uint64_t v43 = *(void *)(v69 + 8);
              *(void *)&long long v41 = (int)v43;
              *((void *)&v41 + 1) = SHIDWORD(v43);
              *(_OWORD *)v67.std::string::size_type size = v41;
              uint64_t v44 = *(void *)(v69 + 16);
              *(void *)&long long v41 = (int)v44;
              *((void *)&v41 + 1) = SHIDWORD(v44);
              *(_OWORD *)&v67.size[2] = v41;
              v67.stride[0] = 1;
              v67.stride[1] = *(int *)(v12 + 8);
              v67.stride[2] = *(int *)(v12 + 12) * (uint64_t)SLODWORD(v67.stride[1]);
              v67.stride[3] = *(int *)(v12 + 16) * (uint64_t)SLODWORD(v67.stride[2]);
              v67.stride[4] = *(int *)(v12 + 20) * (uint64_t)SLODWORD(v67.stride[3]);
              v67.data = (void *)(*(void *)(v12 + 24) + 4 * v38);
              v67.data_type = BNNSDataTypeFloat32;
              v67.data_scale = 1.0;
              memset(&v66, 0, sizeof(v66));
              float v45 = *(const void **)(a1 + 8);
              if (v45)
              {
                if (v46) {
                  v66.n_threads = v46[21];
                }
              }
              if (BNNSCopy(&v67, &v68, &v66)) {
                Espresso::throw_exception_selector<Espresso::invalid_state_error>("BNNS error");
              }
              v38 += *(int *)(v39 + 8);
            }
          }
          if (v70) {
            nitro::nitro_function::nitro_function(v70);
          }
          ++v37;
          vDSP_Length v34 = (char *)*a4;
          uint64_t v35 = a4[1];
          v36 += 0x100000000;
        }
        while (v37 < ((char *)v35 - (char *)*a4) >> 4);
      }
    }
    goto LABEL_83;
  }
  MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)v63 - v17;
  if (v16 >= 0x200) {
    size_t v19 = 512;
  }
  else {
    size_t v19 = v16;
  }
  bzero((char *)v63 - v17, v19);
  float v20 = *a4;
  float v21 = a4[1];
  if (v21 == *a4)
  {
    uint64_t v25 = 1;
    uint64_t v26 = 1;
    float v20 = a4[1];
    goto LABEL_72;
  }
  v63[1] = v63;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  unint64_t v24 = 0;
  uint64_t v25 = 1;
  uint64_t v26 = 1;
  uint64_t v65 = v7;
  do
  {
    if (v23 >> 32 >= (unint64_t)(((char *)v21 - (char *)v20) >> 4))
    {
      *(void *)&v68.flags = 0;
      v68.size[0] = 0;
LABEL_120:
      Espresso::throw_exception_selector<Espresso::invalid_state_error,int &>("general_concat_cpu: source blob %d is null", v24);
    }
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v68, (uint64_t *)&v20[2 * (v23 >> 32)]);
    if (!*(void *)&v68.flags) {
      goto LABEL_120;
    }
    *(void *)&v18[8 * v24] = *(void *)(*(void *)&v68.flags + 24);
    if (v24)
    {
      float v20 = *a4;
      uint64_t v27 = (*a4)[v22];
      float v28 = **a4;
      if (v27[2] != v28[2]) {
        Espresso::throw_exception_selector<Espresso::invalid_state_error,unsigned long &,unsigned long>("general_concat_cpu: interleaved source blobs %d, %d have mismatched width: ", 0, v24);
      }
      if (v76 == -1)
      {
        if (v27[3] != v28[3]) {
LABEL_122:
        }
          Espresso::throw_exception_selector<Espresso::invalid_state_error,unsigned long &,unsigned long>("general_concat_cpu: interleaved source blobs %d, %d have mismatched height: ", 0, v24);
        if (v27[4] != v28[4]) {
LABEL_123:
        }
          Espresso::throw_exception_selector<Espresso::invalid_state_error,unsigned long &,unsigned long>("general_concat_cpu: interleaved source blobs %d, %d have mismatched depth: ", 0, v24);
        if (v27[5] != v28[5]) {
LABEL_124:
        }
          Espresso::throw_exception_selector<Espresso::invalid_state_error,unsigned long &,unsigned long>("general_concat_cpu: interleaved source blobs %d, %d have mismatched batch size: ", 0, v24);
        if (v75 != 1)
        {
LABEL_43:
          if (v27[6] != v28[6]) {
            Espresso::throw_exception_selector<Espresso::invalid_state_error,unsigned long &,unsigned long>("general_concat_cpu: interleaved source blobs %d, %d have mismatched sequence length: ", 0, v24);
          }
        }
      }
      else if ((int)v76 > 1)
      {
        if (v27[3] != v28[3]) {
          goto LABEL_122;
        }
        if (v76 > 2)
        {
          if (v27[4] != v28[4]) {
            goto LABEL_123;
          }
          if (v76 > 3)
          {
            if (v27[5] != v28[5]) {
              goto LABEL_124;
            }
            if (v76 >= 5) {
              goto LABEL_43;
            }
          }
        }
      }
    }
    else
    {
      if (v7 > 4) {
        Espresso::throw_exception_selector<Espresso::invalid_state_error>("Invalid axis");
      }
      switch(v65)
      {
        case 1:
          float v20 = *a4;
          int v31 = **a4;
          uint64_t v26 = v31[2];
          uint64_t v32 = v31[4] * (uint64_t)v31[3] * v31[5];
          goto LABEL_49;
        case 2:
          float v20 = *a4;
          int v31 = **a4;
          uint64_t v26 = v31[3] * (uint64_t)v31[2];
          uint64_t v32 = v31[5] * (uint64_t)v31[4];
LABEL_49:
          uint64_t v25 = v32 * v31[6];
          break;
        case 3:
          float v20 = *a4;
          float v33 = **a4;
          uint64_t v26 = v33[3] * (uint64_t)v33[2] * v33[4];
          uint64_t v25 = v33[6] * (uint64_t)v33[5];
          break;
        case 4:
          float v20 = *a4;
          uint64_t v30 = **a4;
          uint64_t v26 = v30[3] * (uint64_t)v30[2] * v30[4] * v30[5];
          uint64_t v25 = v30[6];
          break;
        default:
          float v20 = *a4;
          uint64_t v29 = **a4;
          uint64_t v25 = v29[3] * (uint64_t)v29[2] * v29[4] * v29[5] * v29[6];
          uint64_t v26 = 1;
          break;
      }
    }
    if (v68.size[0])
    {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v68.size[0]);
      float v20 = *a4;
    }
    ++v24;
    float v21 = a4[1];
    v23 += 0x100000000;
    v22 += 2;
  }
  while (v24 < ((char *)v21 - (char *)v20) >> 4);
  if (!v25) {
    goto LABEL_83;
  }
LABEL_72:
  uint64_t v47 = 0;
  uint64_t v48 = v21;
  do
  {
    if (v48 == v20)
    {
      uint64_t v48 = v20;
    }
    else
    {
      unint64_t v49 = 0;
      do
      {
        if (v26)
        {
          if (v26 == 1)
          {
            _DWORD *v13 = **(_DWORD **)&v18[8 * v49];
          }
          else
          {
            memcpy(v13, *(const void **)&v18[8 * v49], 4 * v26);
            float v20 = *a4;
            float v21 = a4[1];
          }
        }
        *(void *)&v18[8 * v49++] += 4 * v26;
        v13 += v26;
        uint64_t v48 = v21;
      }
      while (v49 < ((char *)v21 - (char *)v20) >> 4);
    }
    ++v47;
  }
  while (v47 != v25);
LABEL_83:
  if (v77)
  {
    long long v78 = v77;
    operator delete(v77);
  }
  if (v80) {
    nitro::nitro_function::nitro_function(v80);
  }
}

void sub_1920FD8DC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)(v1 - 144);
  if (v3)
  {
    *(void *)(v1 - 136) = v3;
    operator delete(v3);
  }
  int v4 = *(std::__shared_weak_count **)(v1 - 112);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  _Unwind_Resume(exception_object);
}

void *std::__hash_table<std::__hash_value_type<unsigned long,Espresso::net::basic_block_t>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,Espresso::net::basic_block_t>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,Espresso::net::basic_block_t>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,Espresso::net::basic_block_t>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(float *a1, unint64_t a2, void *a3)
{
  unint64_t v5 = a2;
  unint64_t v7 = *((void *)a1 + 1);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    int v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      for (uint64_t i = *v9; i; uint64_t i = (void *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == a2)
        {
          if (i[2] == a2) {
            return i;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x30uLL);
  void *i = 0;
  i[1] = v5;
  i[2] = *a3;
  i[3] = 0;
  i[4] = 0;
  i[5] = 0;
  float v12 = (float)(unint64_t)(*((void *)a1 + 3) + 1);
  float v13 = a1[8];
  if (v7 && (float)(v13 * (float)v7) >= v12)
  {
    unint64_t v5 = v3;
    goto LABEL_64;
  }
  BOOL v14 = 1;
  if (v7 >= 3) {
    BOOL v14 = (v7 & (v7 - 1)) != 0;
  }
  unint64_t v15 = v14 | (2 * v7);
  unint64_t v16 = vcvtps_u32_f32(v12 / v13);
  if (v15 <= v16) {
    int8x8_t prime = (int8x8_t)v16;
  }
  else {
    int8x8_t prime = (int8x8_t)v15;
  }
  if (*(void *)&prime == 1)
  {
    int8x8_t prime = (int8x8_t)2;
  }
  else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
  {
    int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    unint64_t v7 = *((void *)a1 + 1);
  }
  if (*(void *)&prime <= v7)
  {
    if (*(void *)&prime >= v7) {
      goto LABEL_60;
    }
    unint64_t v24 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
    if (v7 < 3 || (uint8x8_t v25 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
    {
      unint64_t v24 = std::__next_prime(v24);
    }
    else
    {
      uint64_t v26 = 1 << -(char)__clz(v24 - 1);
      if (v24 >= 2) {
        unint64_t v24 = v26;
      }
    }
    if (*(void *)&prime <= v24) {
      int8x8_t prime = (int8x8_t)v24;
    }
    if (*(void *)&prime >= v7)
    {
      unint64_t v7 = *((void *)a1 + 1);
      goto LABEL_60;
    }
    if (!*(void *)&prime)
    {
      float v33 = *(void **)a1;
      *(void *)a1 = 0;
      if (v33) {
        operator delete(v33);
      }
      unint64_t v7 = 0;
      *((void *)a1 + 1) = 0;
      goto LABEL_60;
    }
  }
  if (*(void *)&prime >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  uint64_t v18 = operator new(8 * *(void *)&prime);
  size_t v19 = *(void **)a1;
  *(void *)a1 = v18;
  if (v19) {
    operator delete(v19);
  }
  uint64_t v20 = 0;
  *((int8x8_t *)a1 + 1) = prime;
  do
    *(void *)(*(void *)a1 + 8 * v20++) = 0;
  while (*(void *)&prime != v20);
  float v21 = (void *)*((void *)a1 + 2);
  if (v21)
  {
    unint64_t v22 = v21[1];
    uint8x8_t v23 = (uint8x8_t)vcnt_s8(prime);
    v23.i16[0] = vaddlv_u8(v23);
    if (v23.u32[0] > 1uLL)
    {
      if (v22 >= *(void *)&prime) {
        v22 %= *(void *)&prime;
      }
    }
    else
    {
      v22 &= *(void *)&prime - 1;
    }
    *(void *)(*(void *)a1 + 8 * v22) = a1 + 4;
    uint64_t v27 = (void *)*v21;
    if (*v21)
    {
      do
      {
        unint64_t v28 = v27[1];
        if (v23.u32[0] > 1uLL)
        {
          if (v28 >= *(void *)&prime) {
            v28 %= *(void *)&prime;
          }
        }
        else
        {
          v28 &= *(void *)&prime - 1;
        }
        if (v28 != v22)
        {
          if (!*(void *)(*(void *)a1 + 8 * v28))
          {
            *(void *)(*(void *)a1 + 8 * v28) = v21;
            goto LABEL_56;
          }
          *float v21 = *v27;
          *uint64_t v27 = **(void **)(*(void *)a1 + 8 * v28);
          **(void **)(*(void *)a1 + 8 * v28) = v27;
          uint64_t v27 = v21;
        }
        unint64_t v28 = v22;
LABEL_56:
        float v21 = v27;
        uint64_t v27 = (void *)*v27;
        unint64_t v22 = v28;
      }
      while (v27);
    }
  }
  unint64_t v7 = (unint64_t)prime;
LABEL_60:
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v5) {
      v5 %= v7;
    }
  }
  else
  {
    v5 &= v7 - 1;
  }
LABEL_64:
  uint64_t v29 = *(void **)a1;
  uint64_t v30 = *(void **)(*(void *)a1 + 8 * v5);
  if (v30)
  {
    void *i = *v30;
LABEL_72:
    *uint64_t v30 = i;
    goto LABEL_73;
  }
  void *i = *((void *)a1 + 2);
  *((void *)a1 + 2) = i;
  v29[v5] = a1 + 4;
  if (*i)
  {
    unint64_t v31 = *(void *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v31 >= v7) {
        v31 %= v7;
      }
    }
    else
    {
      v31 &= v7 - 1;
    }
    uint64_t v30 = (void *)(*(void *)a1 + 8 * v31);
    goto LABEL_72;
  }
LABEL_73:
  ++*((void *)a1 + 3);
  return i;
}

void sub_1920FDD3C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void Espresso::reduce_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t **a4)
{
  Espresso::abstract_blob_container::shape(v184, **a4);
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v182, *a4);
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v180, *(uint64_t **)a3);
  uint64_t v6 = v182;
  if (!v182)
  {
    unsigned int v8 = *(_DWORD *)(a1 + 280);
    BOOL v9 = v8 > 0xA;
    int v10 = (1 << v8) & 0x602;
    if (v9 || v10 == 0) {
      **(_DWORD **)(v180 + 24) = 0;
    }
    else {
      **(_DWORD **)(v180 + 24) = 2143289344;
    }
    goto LABEL_157;
  }
  if (*(void *)(a3 + 8) - *(void *)a3 < 0x11uLL)
  {
    uint64_t v7 = 0;
    uint64_t v158 = 0;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(__B, (uint64_t *)(*(void *)a3 + 16));
    uint64_t v158 = (std::__shared_weak_count *)*((void *)&__B[0] + 1);
    uint64_t v7 = *(void *)&__B[0];
  }
  int v12 = *(_DWORD *)(v6 + 8);
  float v13 = (int *)(v6 + 8);
  uint64_t v15 = *(unsigned int *)(v6 + 16);
  uint64_t v14 = *(unsigned int *)(v6 + 20);
  int v16 = *(_DWORD *)(v6 + 12) * v12;
  uint64_t v17 = (v16 * v15);
  int v18 = *(_DWORD *)(a1 + 280);
  if (v18 != 11)
  {
    if (v18 == 7)
    {
      if (*(_DWORD *)(a1 + 288) == 7)
      {
        if ((int)v14 >= 1)
        {
          uint64_t v27 = 0;
          uint64_t v28 = *(void *)(v6 + 24);
          uint64_t v29 = *(void *)(v7 + 24);
          uint64_t v30 = *(void *)(v180 + 24);
          uint64_t v31 = v28;
          do
          {
            float v32 = *(float *)(v28 + 4 * v27 * (int)v17);
            if ((int)v17 < 2)
            {
              int v33 = 0;
            }
            else
            {
              int v33 = 0;
              for (uint64_t i = 1; i != v17; ++i)
              {
                if (*(float *)(v31 + 4 * i) < v32)
                {
                  float v32 = *(float *)(v31 + 4 * i);
                  int v33 = i;
                }
              }
            }
            *(float *)(v29 + 4 * v27) = (float)v33;
            *(float *)(v30 + 4 * v27++) = v32;
            v31 += 4 * (int)v17;
          }
          while (v27 != v14);
        }
        goto LABEL_155;
      }
      goto LABEL_164;
    }
    if (v18 == 6)
    {
      if (*(_DWORD *)(a1 + 288) == 7)
      {
        if ((int)v14 >= 1)
        {
          uint64_t v19 = 0;
          uint64_t v20 = *(void *)(v6 + 24);
          uint64_t v21 = *(void *)(v7 + 24);
          uint64_t v22 = *(void *)(v180 + 24);
          uint64_t v23 = v20;
          do
          {
            float v24 = *(float *)(v20 + 4 * v19 * (int)v17);
            if ((int)v17 < 2)
            {
              int v25 = 0;
            }
            else
            {
              int v25 = 0;
              for (uint64_t j = 1; j != v17; ++j)
              {
                if (*(float *)(v23 + 4 * j) > v24)
                {
                  float v24 = *(float *)(v23 + 4 * j);
                  int v25 = j;
                }
              }
            }
            *(float *)(v21 + 4 * v19) = (float)v25;
            *(float *)(v22 + 4 * v19++) = v24;
            v23 += 4 * (int)v17;
          }
          while (v19 != v14);
        }
        goto LABEL_155;
      }
LABEL_164:
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Axis not supported");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
LABEL_60:
    uint64_t v87 = v12;
    uint64_t v88 = v186 * (uint64_t)(int)v17;
    int32x4_t v89 = v183;
    *(void *)&long long v90 = v6;
    if (v183)
    {
      atomic_fetch_add_explicit(&v183->__shared_owners_, 1uLL, memory_order_relaxed);
      int v12 = *v13;
    }
    uint64_t v91 = 0;
    *((void *)&v90 + 1) = v89;
    long long v157 = v90;
    int v179 = 0;
    do
    {
      v12 *= *(_DWORD *)(v6 + 12 + v91);
      v91 += 4;
    }
    while (v91 != 12);
    int v179 = v12;
    BOOL v92 = (void (*)(void))MEMORY[0x1E4F16A78];
    switch(*(_DWORD *)(a1 + 280))
    {
      case 2:
        long long v93 = (void (*)(void))scalar_vDSP_pve;
        break;
      case 3:
        std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int const*&,void>(__B, v6 + 8);
        long long v157 = __B[0];
        if (v89) {
          nitro::nitro_function::nitro_function(v89);
        }
        BOOL v92 = (void (*)(void))MEMORY[0x1E4F16A40];
        vvlogf(*(float **)(v157 + 24), *(const float **)(v6 + 24), &v179);
        goto LABEL_79;
      case 4:
      case 5:
        goto LABEL_79;
      case 8:
        long long v93 = (void (*)(void))MEMORY[0x1E4F16A68];
        break;
      case 9:
        long long v93 = (void (*)(void))MEMORY[0x1E4F16970];
        break;
      case 0xA:
        long long v93 = (void (*)(void))MEMORY[0x1E4F169C0];
        break;
      case 0xB:
        long long v93 = (void (*)(void))scalar_vDSP_vargmax;
        if ((*(_DWORD *)(a1 + 288) | 4) == 7) {
          goto LABEL_75;
        }
        break;
      case 0xC:
        long long v93 = (void (*)(void))scalar_vDSP_vargmin;
        if ((*(_DWORD *)(a1 + 288) | 4) == 7)
        {
LABEL_75:
          int v94 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v94, "Only reduce on single axis is supported");
          __cxa_throw(v94, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        return;
      default:
        long long v93 = (void (*)(void))MEMORY[0x1E4F16A40];
        break;
    }
    BOOL v92 = v93;
LABEL_79:
    uint64_t v95 = 0;
    uint64_t v96 = (int *)v180;
    uint64_t v97 = *(unsigned int *)(v180 + 8);
    do
    {
      v97 *= *(unsigned int *)(v180 + 12 + v95);
      v95 += 4;
    }
    while (v95 != 12);
    int v154 = v97;
    uint64_t v98 = *(void *)(v157 + 24);
    uint64_t v177 = *(void *)(v180 + 24);
    int v99 = *(_DWORD *)(a1 + 288);
    switch(v99)
    {
      case 1:
      case 3:
      case 7:
        int v100 = v97;
        int v101 = *v13;
        if (v99 == 7)
        {
          v101 *= *(_DWORD *)(v6 + 12) * *(_DWORD *)(v6 + 16);
        }
        else if (v99 == 3)
        {
          v101 *= *(_DWORD *)(v6 + 12);
        }
        uint64_t v104 = *(void *)(v180 + 24);
        if (!(v97 << 32)) {
          break;
        }
        if ((unint64_t)(int)v97 <= 1) {
          uint64_t v105 = 1;
        }
        else {
          uint64_t v105 = (int)v97;
        }
        do
        {
          ((void (*)(uint64_t, uint64_t, uint64_t, void))v92)(v98, 1, v104, v101);
          v104 += 4;
          v98 += 4 * v101;
          --v105;
        }
        while (v105);
LABEL_146:
        int v100 = v154;
        break;
      case 2:
        int v101 = *(_DWORD *)(v6 + 12);
        if (*(int *)(v180 + 20) >= 1)
        {
          uint64_t v106 = 0;
          int v107 = 0;
          uint64_t v108 = v101;
          int v160 = *(_DWORD *)(v6 + 12);
          uint64_t v163 = 4 * (int)v17;
          uint64_t v173 = 4 * v16;
          do
          {
            uint64_t v166 = v106;
            uint64_t v169 = v98;
            if (v96[4] >= 1)
            {
              uint64_t v109 = 0;
              uint64_t v110 = v98;
              do
              {
                if (v96[2] >= 1)
                {
                  uint64_t v111 = 0;
                  int v112 = v107;
                  uint64_t v113 = v110;
                  uint64_t v114 = v177 + 4 * v107;
                  do
                  {
                    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v92)(v113, v87, v114, v108);
                    ++v111;
                    v114 += 4;
                    v113 += 4;
                  }
                  while (v111 < v96[2]);
                  int v107 = v112 + v111;
                }
                ++v109;
                v110 += v173;
              }
              while (v109 < v96[4]);
            }
            uint64_t v106 = v166 + 1;
            uint64_t v98 = v169 + v163;
          }
          while (v166 + 1 < v96[5]);
          int v101 = v160;
        }
        goto LABEL_146;
      case 4:
        int v101 = *(_DWORD *)(v6 + 16);
        uint64_t v176 = *(unsigned int *)(v180 + 20);
        if ((int)v176 >= 1)
        {
          uint64_t v137 = *(void *)(v157 + 24);
          uint64_t v138 = 0;
          int v172 = v101;
          uint64_t v139 = (int)v17;
          int v140 = *(_DWORD *)(v180 + 12) * *(_DWORD *)(v180 + 8) + 1;
          uint64_t v141 = *(void *)(v180 + 24);
          do
          {
            uint64_t v142 = v137 + 4 * v138 * v139;
            int v143 = v140;
            while (--v143)
            {
              uint64_t v144 = v142 + 4;
              v141 += 4;
              v92();
              uint64_t v142 = v144;
            }
            ++v138;
          }
          while (v138 != v176);
          int v101 = v172;
        }
        goto LABEL_146;
      case 5:
      case 6:
      case 9:
      case 10:
      case 11:
      case 12:
      case 13:
      case 14:
      case 15:
        goto LABEL_165;
      case 8:
        int v101 = v186;
        int v126 = v187;
        if (v187 >= 1)
        {
          uint64_t v156 = 0;
          int v127 = 0;
          int v151 = v186;
          int v128 = v186;
          uint64_t v153 = 4 * (int)v88;
          int v129 = v185;
          uint64_t v162 = 4 * v16;
          uint64_t v175 = 4 * v87;
          do
          {
            if (v129 >= 1)
            {
              uint64_t v130 = 0;
              uint64_t v131 = v98;
              uint64_t v171 = v98;
              do
              {
                if (v96[3] >= 1)
                {
                  uint64_t v165 = v131;
                  uint64_t v168 = v130;
                  uint64_t v132 = 0;
                  do
                  {
                    if (v96[2] >= 1)
                    {
                      uint64_t v133 = 0;
                      int v134 = v127;
                      uint64_t v135 = v131;
                      uint64_t v136 = v177 + 4 * v127;
                      do
                      {
                        ((void (*)(uint64_t, void, uint64_t, void))v92)(v135, (int)v17, v136, v128);
                        ++v133;
                        v136 += 4;
                        v135 += 4;
                      }
                      while (v133 < v96[2]);
                      int v127 = v134 + v133;
                    }
                    ++v132;
                    v131 += v175;
                  }
                  while (v132 < v96[3]);
                  int v129 = v185;
                  uint64_t v130 = v168;
                  uint64_t v98 = v171;
                  uint64_t v131 = v165;
                }
                ++v130;
                v131 += v162;
              }
              while (v130 < v129);
              int v126 = v187;
            }
            v98 += v153;
            ++v156;
          }
          while (v156 < v126);
          int v101 = v151;
        }
        goto LABEL_146;
      case 16:
        int v115 = v186;
        int v101 = v187;
        if (v186 < 1) {
          goto LABEL_146;
        }
        uint64_t v155 = 0;
        int v116 = 0;
        int v150 = v187;
        int v117 = v187;
        uint64_t v152 = 4 * (int)v17;
        int v118 = v185;
        uint64_t v161 = 4 * v16;
        uint64_t v174 = 4 * v87;
        do
        {
          if (v118 >= 1)
          {
            uint64_t v119 = 0;
            uint64_t v120 = v98;
            uint64_t v170 = v98;
            do
            {
              if (v96[3] >= 1)
              {
                uint64_t v164 = v120;
                uint64_t v167 = v119;
                uint64_t v121 = 0;
                do
                {
                  if (v96[2] >= 1)
                  {
                    uint64_t v122 = 0;
                    int v123 = v116;
                    uint64_t v124 = v120;
                    uint64_t v125 = v177 + 4 * v116;
                    do
                    {
                      ((void (*)(uint64_t, uint64_t, uint64_t, void))v92)(v124, v88, v125, v117);
                      ++v122;
                      v125 += 4;
                      v124 += 4;
                    }
                    while (v122 < v96[2]);
                    int v116 = v123 + v122;
                  }
                  ++v121;
                  v120 += v174;
                }
                while (v121 < v96[3]);
                int v118 = v185;
                uint64_t v119 = v167;
                uint64_t v98 = v170;
                uint64_t v120 = v164;
              }
              ++v119;
              v120 += v161;
            }
            while (v119 < v118);
            int v115 = v186;
          }
          v98 += v152;
          ++v155;
        }
        while (v155 < v115);
        int v100 = v154;
        int v101 = v150;
        break;
      default:
        if (v99 != 31)
        {
LABEL_165:
          v149 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v149, "Invalid axis");
          __cxa_throw(v149, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        uint64_t v102 = 0;
        int v103 = *(_DWORD *)(v6 + 8);
        do
        {
          v103 *= *(_DWORD *)(v6 + 12 + v102);
          v102 += 4;
        }
        while (v102 != 12);
        ((void (*)(uint64_t, uint64_t, uint64_t, void))v92)(v98, 1, v177, v103);
        int v101 = v103;
        int v100 = v154;
        break;
    }
    *(float *)float __B = 1.0 / (float)v101;
    int v145 = *(_DWORD *)(a1 + 280);
    if (v145 == 1)
    {
      uint64_t v146 = 0;
      vDSP_Length v147 = *(int *)(v180 + 8);
      do
      {
        v147 *= *(int *)(v180 + 12 + v146);
        v146 += 4;
      }
      while (v146 != 12);
      vDSP_vsmul(*(const float **)(v180 + 24), 1, (const float *)__B, *(float **)(v180 + 24), 1, v147);
    }
    else if (v145 == 5)
    {
      int v178 = v100;
      vvsqrtf(*(float **)(v180 + 24), *(const float **)(v180 + 24), &v178);
    }
    if (*((void *)&v157 + 1)) {
      nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v157 + 1));
    }
    goto LABEL_155;
  }
  if (*(_DWORD *)(a1 + 288) != 4) {
    goto LABEL_60;
  }
  if ((int)v14 >= 1)
  {
    uint64_t v35 = 0;
    uint64_t v36 = *(void *)(v6 + 24);
    uint64_t v37 = *(void *)(v180 + 24);
    uint64_t v38 = v16 & 0x1FLL;
    if ((unint64_t)v16 >> 5 <= 1) {
      unint64_t v39 = 1;
    }
    else {
      unint64_t v39 = (unint64_t)v16 >> 5;
    }
    do
    {
      uint64_t v40 = (float32x4_t *)(v37 + 4 * v16 * (int)v35);
      if ((int)v15 > 1)
      {
        long long v41 = (_OWORD *)(v36 + 4 * v35 * (int)v17);
        if (v16 < 0x20)
        {
          uint64_t v43 = (_OWORD *)(v36 + 4 * v35 * (int)v17);
          if (v38) {
            goto LABEL_52;
          }
        }
        else
        {
          uint64_t v42 = 0;
          uint64_t v43 = (_OWORD *)(v36 + 4 * v35 * (int)v17);
          do
          {
            unsigned int v44 = v16;
            uint64_t v45 = 1;
            float32x4_t v47 = *(float32x4_t *)v43;
            float32x4_t v48 = *((float32x4_t *)v43 + 1);
            float32x4_t v49 = *((float32x4_t *)v43 + 2);
            float32x4_t v50 = *((float32x4_t *)v43 + 3);
            float v46 = v43 + 4;
            float32x4_t v51 = *(float32x4_t *)v46;
            float32x4_t v52 = *((float32x4_t *)v46 + 1);
            float32x4_t v53 = *((float32x4_t *)v46 + 2);
            float32x4_t v54 = *((float32x4_t *)v46 + 3);
            uint64_t v43 = v46 + 4;
            int8x16_t v55 = 0uLL;
            int8x16_t v56 = 0uLL;
            int8x16_t v57 = 0uLL;
            int8x16_t v58 = 0uLL;
            int8x16_t v59 = 0uLL;
            int8x16_t v60 = 0uLL;
            int8x16_t v61 = 0uLL;
            int8x16_t v62 = 0uLL;
            do
            {
              int v63 = (float32x4_t *)((char *)v41 + 4 * v44);
              float32x4_t v64 = *v63;
              float32x4_t v65 = v63[1];
              float32x4_t v66 = v63[2];
              float32x4_t v67 = v63[3];
              v63 += 4;
              float32x4_t v68 = v63[1];
              float32x4_t v69 = v63[2];
              float32x4_t v70 = v63[3];
              int8x16_t v71 = (int8x16_t)vdupq_n_s32(v45);
              int8x16_t v72 = (int8x16_t)vcgtq_f32(v64, v47);
              float32x4_t v47 = (float32x4_t)vbslq_s8(v72, (int8x16_t)v64, (int8x16_t)v47);
              int8x16_t v55 = vbslq_s8(v72, v71, v55);
              int8x16_t v73 = (int8x16_t)vcgtq_f32(v65, v48);
              float32x4_t v48 = (float32x4_t)vbslq_s8(v73, (int8x16_t)v65, (int8x16_t)v48);
              int8x16_t v56 = vbslq_s8(v73, v71, v56);
              int8x16_t v74 = (int8x16_t)vcgtq_f32(v66, v49);
              float32x4_t v49 = (float32x4_t)vbslq_s8(v74, (int8x16_t)v66, (int8x16_t)v49);
              int8x16_t v57 = vbslq_s8(v74, v71, v57);
              int8x16_t v75 = (int8x16_t)vcgtq_f32(v67, v50);
              float32x4_t v50 = (float32x4_t)vbslq_s8(v75, (int8x16_t)v67, (int8x16_t)v50);
              int8x16_t v58 = vbslq_s8(v75, v71, v58);
              int8x16_t v76 = (int8x16_t)vcgtq_f32(*v63, v51);
              float32x4_t v51 = (float32x4_t)vbslq_s8(v76, *(int8x16_t *)v63, (int8x16_t)v51);
              int8x16_t v59 = vbslq_s8(v76, v71, v59);
              int8x16_t v77 = (int8x16_t)vcgtq_f32(v68, v52);
              float32x4_t v52 = (float32x4_t)vbslq_s8(v77, (int8x16_t)v68, (int8x16_t)v52);
              int8x16_t v60 = vbslq_s8(v77, v71, v60);
              int8x16_t v78 = (int8x16_t)vcgtq_f32(v69, v53);
              float32x4_t v53 = (float32x4_t)vbslq_s8(v78, (int8x16_t)v69, (int8x16_t)v53);
              int8x16_t v61 = vbslq_s8(v78, v71, v61);
              int8x16_t v79 = (int8x16_t)vcgtq_f32(v70, v54);
              float32x4_t v54 = (float32x4_t)vbslq_s8(v79, (int8x16_t)v70, (int8x16_t)v54);
              uint32x4_t v80 = (uint32x4_t)vbslq_s8(v79, v71, v62);
              int8x16_t v62 = (int8x16_t)v80;
              ++v45;
              v44 += v16;
            }
            while (v15 != v45);
            *uint64_t v40 = vcvtq_f32_u32((uint32x4_t)v55);
            v40[1] = vcvtq_f32_u32((uint32x4_t)v56);
            void v40[2] = vcvtq_f32_u32((uint32x4_t)v57);
            v40[3] = vcvtq_f32_u32((uint32x4_t)v58);
            uint64_t v81 = v40 + 4;
            *uint64_t v81 = vcvtq_f32_u32((uint32x4_t)v59);
            v81[1] = vcvtq_f32_u32((uint32x4_t)v60);
            v81[2] = vcvtq_f32_u32((uint32x4_t)v61);
            v81[3] = vcvtq_f32_u32(v80);
            uint64_t v40 = v81 + 4;
            ++v42;
            long long v41 = v43;
          }
          while (v42 != v39);
          if (v38)
          {
LABEL_52:
            for (uint64_t k = 0; k != v38; ++k)
            {
              int v83 = 0;
              float v84 = *((float *)v43 + k);
              int v85 = v16;
              for (uint64_t m = 1; m != v15; ++m)
              {
                if (*((float *)v43 + k + v85) > v84)
                {
                  float v84 = *((float *)v43 + k + v85);
                  int v83 = m;
                }
                v85 += v16;
              }
              v40->f32[k] = (float)v83;
            }
          }
        }
      }
      else
      {
        bzero(v40, 4 * v16);
      }
      ++v35;
    }
    while (v35 != v14);
  }
LABEL_155:
  if (v158) {
    nitro::nitro_function::nitro_function(v158);
  }
LABEL_157:
  if (v181) {
    nitro::nitro_function::nitro_function(v181);
  }
  if (v183) {
    nitro::nitro_function::nitro_function(v183);
  }
  if (__p)
  {
    std::string v189 = __p;
    operator delete(__p);
  }
}

void sub_1920FE9C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, long long a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,std::__shared_weak_count *a25,uint64_t a26,std::__shared_weak_count *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34)
{
  __cxa_free_exception(v34);
  if (*((void *)&a13 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&a13 + 1));
  }
  if (a15) {
    nitro::nitro_function::nitro_function(a15);
  }
  if (a25) {
    nitro::nitro_function::nitro_function(a25);
  }
  if (a27) {
    nitro::nitro_function::nitro_function(a27);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

BOOL Espresso::generic_fill_kernel::has_dynamic_top_shape(Espresso::generic_fill_kernel *this, uint64_t a2)
{
  return a2 && *((unsigned char *)this + 312) != 0;
}

void Espresso::generic_get_shape_kernel::top_shapes_for_bottom_shapes(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *(void *)&long long v18 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a1 + 284))
  {
    int v4 = 1;
    if (*(_DWORD *)(a1 + 280) == -1)
    {
      int v4 = *(_DWORD *)(*(void *)a2 + 20);
      if (v4 == -1)
      {
        if (*(_DWORD *)(*(void *)a2 + 16) == 1) {
          int v4 = 4;
        }
        else {
          int v4 = 5;
        }
      }
    }
    long long v15 = 0uLL;
    int v12 = v4;
    *(void *)&long long v5 = 0x100000001;
    *((void *)&v5 + 1) = 0x100000001;
    long long v13 = v5;
    int v14 = 1;
    __p[1] = 0;
    uint64_t v17 = 0;
    __p[0] = 0;
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    uint64_t v6 = (char *)operator new(0x40uLL);
    *a3 = v6;
    a3[1] = v6;
    a3[2] = v6 + 64;
    uint64_t v7 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), (long long *)&v12, &v18, (uint64_t)v6);
  }
  else
  {
    BOOL v8 = *(_DWORD *)(a1 + 280) == -1;
    long long v15 = 0u;
    *(_OWORD *)std::string __p = 0u;
    if (v8) {
      int v9 = 5;
    }
    else {
      int v9 = 1;
    }
    uint64_t v17 = 0;
    int v12 = v9;
    *(void *)&long long v10 = 0x100000001;
    *((void *)&v10 + 1) = 0x100000001;
    long long v13 = v10;
    int v14 = -1;
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    unint64_t v11 = (char *)operator new(0x40uLL);
    *a3 = v11;
    a3[1] = v11;
    a3[2] = v11 + 64;
    uint64_t v7 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), (long long *)&v12, &v18, (uint64_t)v11);
  }
  a3[1] = v7;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_1920FEC10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  uint64_t v20 = v19;
  *(void *)(v18 + 8) = v20;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&a10);
  if (__p)
  {
    a18 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::generic_fill_kernel::top_shapes_for_bottom_shapes(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  *((void *)&v15 + 1) = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *a2;
  if (a2[1] == *a2)
  {
    *(void *)&v12[8] = 0;
    *(void *)&v12[16] = 0;
    long long v11 = *(_OWORD *)(a1 + 284);
    *(void *)int v12 = *(void *)(a1 + 300);
    __p[1] = 0;
    uint64_t v14 = 0;
    __p[0] = 0;
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    BOOL v8 = (char *)operator new(0x40uLL);
    *a3 = v8;
    a3[1] = v8;
    a3[2] = v8 + 64;
    uint64_t v7 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), &v11, &v15, (uint64_t)v8);
  }
  else
  {
    if (*(unsigned char *)(a1 + 312))
    {
      uint64_t v14 = 0;
      *(_OWORD *)std::string __p = 0u;
      *(_OWORD *)&v12[8] = 0u;
      *(void *)&long long v5 = 0x100000001;
      *((void *)&v5 + 1) = 0x100000001;
      long long v11 = v5;
      *(void *)int v12 = 0xFFFFFFFF00000001;
      a3[1] = 0;
      a3[2] = 0;
      *a3 = 0;
      uint64_t v6 = (char *)operator new(0x40uLL);
    }
    else
    {
      long long v9 = *(_OWORD *)(v4 + 16);
      uint64_t v10 = *(void *)(v4 + 32);
      long long v11 = *(_OWORD *)v4;
      *(_OWORD *)int v12 = v9;
      *(void *)&v12[16] = v10;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v14 = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(__p, *(const void **)(v4 + 40), *(void *)(v4 + 48), (uint64_t)(*(void *)(v4 + 48) - *(void *)(v4 + 40)) >> 2);
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v6 = (char *)operator new(0x40uLL);
    }
    *a3 = v6;
    a3[1] = v6;
    a3[2] = v6 + 64;
    uint64_t v7 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), &v11, &v15, (uint64_t)v6);
  }
  a3[1] = v7;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_1920FEE00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  uint64_t v19 = v18;
  *(void *)(v17 + 8) = v19;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a17 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::BNNSEngine::reduce_kernel::__launch(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *(void *)(a1 + 328);
  if (v7)
  {
    BOOL v8 = *(void (**)(void))(*(void *)v7 + 16);
    v8();
    return;
  }
  if (*(void *)(a4 + 8) == *(void *)a4)
  {
    uint64_t v44 = 0;
    uint64_t v45 = 0;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v44, *(uint64_t **)a4);
  }
  if (*(void *)(a3 + 8) == *(void *)a3)
  {
    uint64_t v42 = 0;
    uint64_t v43 = 0;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v42, *(uint64_t **)a3);
  }
  long long v9 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*(void *)a4, *(void *)(a4 + 8), 0);
  if (v9)
  {
    uint64_t v11 = *((void *)v9 + 22);
    uint64_t v10 = (std::__shared_weak_count *)*((void *)v9 + 23);
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t v10 = 0;
  }
  int v12 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*(void *)a3, *(void *)(a3 + 8), 0);
  if (v12)
  {
    uint64_t v14 = *((void *)v12 + 22);
    long long v13 = (std::__shared_weak_count *)*((void *)v12 + 23);
    if (v13) {
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v14 = 0;
    long long v13 = 0;
  }
  Espresso::abstract_blob_container::shape(v39, **(void **)a4);
  Espresso::abstract_blob_container::shape(v36, **(void **)a3);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v35, (const Espresso::layer_shape *)v39, 0);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v34, (const Espresso::layer_shape *)v36, 0);
  long long v15 = *(void **)(a1 + 344);
  uint64_t v16 = v44;
  if (!v15)
  {
    bzero(v32, 0x218uLL);
    v33[89] = *(_DWORD *)(a1 + 284);
    if (v16)
    {
      uint64_t v17 = v45;
      v31[0] = v16;
      v31[1] = v45;
      if (v45) {
        atomic_fetch_add_explicit(&v45->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      Espresso::BNNSEngine::bnns_array_descriptor_for_blob<Espresso::blob<float,4>>((uint64_t)v32, (uint64_t)v31, (uint64_t)v35, 1);
      if (!v17) {
        goto LABEL_25;
      }
    }
    else
    {
      if (!v11)
      {
        uint64_t v23 = "Reduce kernel only supports FP32 or FP16 inputs";
        goto LABEL_70;
      }
      v30[0] = v11;
      v30[1] = v10;
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      Espresso::BNNSEngine::bnns_array_descriptor_for_blob<Espresso::blob<unsigned short,4>>((uint64_t)v32, (uint64_t)v30, (uint64_t)v35, 1);
      uint64_t v17 = v10;
      if (!v10)
      {
LABEL_25:
        if (v42)
        {
          uint64_t v18 = v43;
          v29[0] = v42;
          v29[1] = v43;
          if (v43) {
            atomic_fetch_add_explicit(&v43->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          Espresso::BNNSEngine::bnns_array_descriptor_for_blob<Espresso::blob<float,4>>((uint64_t)v33, (uint64_t)v29, (uint64_t)v34, 1);
          if (!v18) {
            goto LABEL_30;
          }
          goto LABEL_29;
        }
        if (v14)
        {
          v28[0] = v14;
          v28[1] = v13;
          if (v13) {
            atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          Espresso::BNNSEngine::bnns_array_descriptor_for_blob<Espresso::blob<unsigned short,4>>((uint64_t)v33, (uint64_t)v28, (uint64_t)v34, 1);
          uint64_t v18 = v13;
          if (!v13) {
            goto LABEL_30;
          }
LABEL_29:
          nitro::nitro_function::nitro_function(v18);
LABEL_30:
          uint64_t v20 = *(unsigned int *)(a1 + 280);
          if (v20 >= 0xD || ((0x1F1Bu >> v20) & 1) == 0) {
            Espresso::throw_exception_selector<Espresso::invalid_state_error,int &>("reduce_kernel %zu should have fallbacked to CPU engine.", v20);
          }
          v33[88] = dword_192E03178[v20];
          uint64_t v26 = bnns_alloc_capmem;
          uint64_t v21 = *(void *)(a1 + 352);
          uint64_t v27 = MEMORY[0x1E4F14838];
          uint64_t v24 = 0;
          uint64_t v25 = v21;
          {
            if (v19)
            {
              if (Espresso::is_espresso_os_log_requested(Espresso::espresso_os_log_flag)::onceToken != -1) {
                dispatch_once(&Espresso::is_espresso_os_log_requested(Espresso::espresso_os_log_flag)::onceToken, &__block_literal_global_60);
              }
              Espresso::BNNSEngine::reduce_kernel::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::log_requested = Espresso::is_espresso_os_log_requested(Espresso::espresso_os_log_flag)::logs_requested;
            }
          }
          if (Espresso::BNNSEngine::reduce_kernel::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::log_requested)
          {
            uint64_t v22 = Espresso::espresso_os_log_subsystem(v19, (const char *)v20);
            if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)std::string buf = 67109376;
              int v47 = v24;
              __int16 v48 = 2048;
              uint64_t v49 = v25;
              _os_log_debug_impl(&dword_1920CB000, v22, OS_LOG_TYPE_DEBUG, "BNNSFilterCreateLayerReduction: flags=%d, n_threads=%zu", buf, 0x12u);
            }
          }
          long long v15 = (void *)MEMORY[0x192FEE760](v32, &v24);
          *(void *)(a1 + 344) = v15;
          uint64_t v16 = v44;
          goto LABEL_38;
        }
        uint64_t v23 = "Reduce kernel only supports FP32 or FP16 outputs";
LABEL_70:
        Espresso::throw_exception_selector<Espresso::invalid_argument_error>(v23);
      }
    }
    nitro::nitro_function::nitro_function(v17);
    goto LABEL_25;
  }
LABEL_38:
  if (BNNSFilterApply(v15, *(const void **)(v16 + 24), *(void **)(v42 + 24)) == -1) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Reduce kernel failed in BNNS");
  }
  if (v37)
  {
    uint64_t v38 = v37;
    operator delete(v37);
  }
  if (v40)
  {
    long long v41 = v40;
    operator delete(v40);
  }
  if (v13) {
    nitro::nitro_function::nitro_function(v13);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  if (v43) {
    nitro::nitro_function::nitro_function(v43);
  }
  if (v45) {
    nitro::nitro_function::nitro_function(v45);
  }
}

void sub_1920FF300(_Unwind_Exception *exception_object)
{
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  long long v5 = *(void **)(v3 - 216);
  if (v5)
  {
    *(void *)(v3 - 208) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *(void **)(v3 - 152);
  if (v6)
  {
    *(void *)(v3 - 144) = v6;
    operator delete(v6);
    if (!v2)
    {
LABEL_7:
      if (!v1) {
        goto LABEL_9;
      }
      goto LABEL_8;
    }
  }
  else if (!v2)
  {
    goto LABEL_7;
  }
  nitro::nitro_function::nitro_function(v2);
  if (!v1)
  {
LABEL_9:
    uint64_t v7 = *(std::__shared_weak_count **)(v3 - 120);
    if (v7) {
      nitro::nitro_function::nitro_function(v7);
    }
    BOOL v8 = *(std::__shared_weak_count **)(v3 - 104);
    if (v8) {
      nitro::nitro_function::nitro_function(v8);
    }
    _Unwind_Resume(exception_object);
  }
LABEL_8:
  nitro::nitro_function::nitro_function(v1);
  goto LABEL_9;
}

void JITBackendSignpostEmitter::startJITSegment(void *a1, char *a2)
{
  uint64_t v2 = a1[1];
  if (a2 == 1)
  {
    uint64_t v4 = (void *)a1[2];
    if (v4
    {
      long long v5 = (std::__shared_weak_count *)a1[3];
      if (v5) {
        atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v4 = (void *)v4[18];
      if (v4)
      {
        v7[0] = MEMORY[0x1E4F143A8];
        v7[1] = 3221225472;
        v7[2] = ___ZN25JITBackendSignpostEmitter15startJITSegmentENS_11ComputeUnitE_block_invoke;
        v7[3] = &__block_descriptor_40_e28_v16__0___MTLCommandBuffer__8l;
        v7[4] = v2;
        [v4 addCompletedHandler:v7];
        kdebug_trace();
        if (!v5) {
          return;
        }
LABEL_16:
        nitro::nitro_function::nitro_function(v5);
        return;
      }
    }
    else
    {
      long long v5 = 0;
    }
    uint64_t v6 = Espresso::espresso_os_log_subsystem((Espresso *)v4, a2);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_debug_impl(&dword_1920CB000, v6, OS_LOG_TYPE_DEBUG, "JITBackendSignpostEmitter: Excptected a metal batch for JIT_GPU layer", buf, 2u);
    }

    if (v5) {
      goto LABEL_16;
    }
  }
  else
  {
    kdebug_trace();
  }
}

void sub_1920FF584(_Unwind_Exception *exception_object)
{
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &>(char *a1, uint64_t a2)
{
}

void JITBackendSignpostEmitter::~JITBackendSignpostEmitter(JITBackendSignpostEmitter *this)
{
  JITBackendSignpostEmitter::endJITSegment((uint64_t)this);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
}

void std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = a2;
  int v4 = *(_DWORD *)(a1 + 8);
  long long v5 = *(void **)a1;
  if (v4)
  {
    if ((64 - v4) >= a2) {
      unint64_t v6 = a2;
    }
    else {
      unint64_t v6 = (64 - v4);
    }
    *v5++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4));
    unint64_t v2 = a2 - v6;
    *(void *)a1 = v5;
  }
  unint64_t v7 = v2 >> 6;
  if (v2 >= 0x40) {
    bzero(v5, 8 * v7);
  }
  if ((v2 & 0x3F) != 0)
  {
    BOOL v8 = &v5[v7];
    *(void *)a1 = v8;
    *v8 &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F));
  }
}

void std::vector<BOOL>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = a2 - v4;
  if (a2 <= v4)
  {
    *(void *)(a1 + 8) = a2;
  }
  else
  {
    uint64_t v6 = *(void *)(a1 + 16);
    unint64_t v7 = v6 << 6;
    if (v6 << 6 < v5 || v4 > (v6 << 6) - v5)
    {
      __dst = 0;
      long long v18 = 0uLL;
      if ((a2 & 0x8000000000000000) != 0) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v9 = v6 << 7;
      if (v9 <= ((a2 + 63) & 0xFFFFFFFFFFFFFFC0)) {
        unint64_t v9 = (a2 + 63) & 0xFFFFFFFFFFFFFFC0;
      }
      if (v7 <= 0x3FFFFFFFFFFFFFFELL) {
        unint64_t v10 = v9;
      }
      else {
        unint64_t v10 = 0x7FFFFFFFFFFFFFFFLL;
      }
      std::vector<BOOL>::reserve((uint64_t)&__dst, v10);
      uint64_t v11 = *(void **)a1;
      uint64_t v12 = *(void *)(a1 + 8);
      *(void *)&long long v18 = v12 + v5;
      long long v13 = (char *)__dst;
      if (v12 < 1)
      {
        LODWORD(v16) = 0;
        long long v15 = (char *)__dst;
      }
      else
      {
        uint64_t v14 = v12 >> 6;
        if ((unint64_t)(v12 + 63) >= 0x7F) {
          memmove(__dst, v11, 8 * v14);
        }
        uint64_t v16 = v12 - (v14 << 6);
        long long v15 = &v13[8 * v14];
        if (v16 < 1) {
          LODWORD(v16) = 0;
        }
        else {
          *(void *)long long v15 = *(void *)v15 & ~(0xFFFFFFFFFFFFFFFFLL >> -(char)v16) | *((void *)v11 + v14) & (0xFFFFFFFFFFFFFFFFLL >> -(char)v16);
        }
        uint64_t v11 = *(void **)a1;
      }
      *(void *)a1 = v13;
      *(_OWORD *)(a1 + 8) = v18;
      if (v11) {
        operator delete(v11);
      }
    }
    else
    {
      long long v15 = (char *)(*(void *)a1 + 8 * (v4 >> 6));
      uint64_t v16 = *(void *)(a1 + 8) & 0x3FLL;
      *(void *)(a1 + 8) = a2;
    }
    if (a2 != v4)
    {
      __dst = v15;
      LODWORD(v18) = v16;
      std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>((uint64_t)&__dst, v5);
    }
  }
}

void sub_1920FF828(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::interpreter_state_t::interpreter_state_t(uint64_t a1, void *a2)
{
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 80) = 1065353216;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 114) = 0u;
  *(void *)a1 = *a2;
  uint64_t v3 = (char *)operator new(0x40uLL);
  *(void *)(a1 + 88) = v3;
  *(void *)(a1 + 96) = v3;
  *(void *)(a1 + 104) = v3 + 64;
  return a1;
}

void sub_1920FF8B4(_Unwind_Exception *a1)
{
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100](v2);
  unint64_t v4 = *(std::__shared_weak_count **)(v1 + 16);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  _Unwind_Resume(a1);
}

void Espresso::squeeze_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
}

void Espresso::copy_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
}

uint64_t JITBackendSignpostEmitter::endJITSegment(uint64_t this)
{
  if (*(unsigned char *)(this + 32))
  {
    uint64_t v1 = this;
    if (*(_DWORD *)this != 1)
    {
      this = kdebug_trace();
      *(unsigned char *)(v1 + 32) = 0;
    }
  }
  return this;
}

void Espresso::engine_cpu::register_kernels(Espresso::engine_cpu *this, Espresso::abstract_engine_factory *a2)
{
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "convolution", (void (***)(void))this, &__block_literal_global_3067);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "pool", (void (***)(void))this, &__block_literal_global_4);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "lrn", (void (***)(void))this, &__block_literal_global_7);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "softmax", (void (***)(void))this, &__block_literal_global_10);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "inner_product", (void (***)(void))this, &__block_literal_global_13);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "concat", (void (***)(void))this, &__block_literal_global_16);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "upsample", (void (***)(void))this, &__block_literal_global_19);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "elementwise", (void (***)(void))this, &__block_literal_global_22);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "split", (void (***)(void))this, &__block_literal_global_25);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "deconvolution", (void (***)(void))this, &__block_literal_global_28);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "axpby", (void (***)(void))this, &__block_literal_global_31);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "activation", (void (***)(void))this, &__block_literal_global_34_3079);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "nonlinearity", (void (***)(void))this, &__block_literal_global_37);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "batchnorm", (void (***)(void))this, &__block_literal_global_40_3082);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "load_constant", (void (***)(void))this, &__block_literal_global_43);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "rnn", (void (***)(void))this, &__block_literal_global_46);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "reduce", (void (***)(void))this, &__block_literal_global_49);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "context_transfer", (void (***)(void))this, &__block_literal_global_52_3087);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "rnn_arch", (void (***)(void))this, &__block_literal_global_55);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "general_padding", (void (***)(void))this, &__block_literal_global_58);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "transpose", (void (***)(void))this, &__block_literal_global_61);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "reshape", (void (***)(void))this, &__block_literal_global_64);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "reshape_like", (void (***)(void))this, &__block_literal_global_67);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "tile", (void (***)(void))this, &__block_literal_global_70);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "flatten", (void (***)(void))this, &__block_literal_global_73);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "l2_normalize", (void (***)(void))this, &__block_literal_global_76);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "sequence_reverse", (void (***)(void))this, &__block_literal_global_79_3097);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "sequence_concat", (void (***)(void))this, &__block_literal_global_82);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "sequence_repeat", (void (***)(void))this, &__block_literal_global_85);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "crop", (void (***)(void))this, &__block_literal_global_88);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "prediction_smoothing", (void (***)(void))this, &__block_literal_global_91_3102);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "dropout", (void (***)(void))this, &__block_literal_global_94);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "space_to_batch", (void (***)(void))this, &__block_literal_global_97_3105);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "space_to_depth", (void (***)(void))this, &__block_literal_global_100_3107);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "slice", (void (***)(void))this, &__block_literal_global_103);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "broadcast", (void (***)(void))this, &__block_literal_global_106_3110);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "cast", (void (***)(void))this, &__block_literal_global_109);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "compute_stats", (void (***)(void))this, &__block_literal_global_112);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "lambda", (void (***)(void))this, &__block_literal_global_115);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "patch_extractor", (void (***)(void))this, &__block_literal_global_118);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "crop_and_resize", (void (***)(void))this, &__block_literal_global_121);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "dynamic_quantize", (void (***)(void))this, &__block_literal_global_124);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "dynamic_dequantize", (void (***)(void))this, &__block_literal_global_127);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "quantized_gather", (void (***)(void))this, &__block_literal_global_130);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "spatial_transformer", (void (***)(void))this, &__block_literal_global_133_3120);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "cf_branch", (void (***)(void))this, &__block_literal_global_136_3122);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "cf_jump", (void (***)(void))this, &__block_literal_global_139_3124);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "cf_call", (void (***)(void))this, &__block_literal_global_142_3126);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "cf_return", (void (***)(void))this, &__block_literal_global_145);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "get_shape", (void (***)(void))this, &__block_literal_global_148);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "topk", (void (***)(void))this, &__block_literal_global_151);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "gather", (void (***)(void))this, &__block_literal_global_154);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "general_concat", (void (***)(void))this, &__block_literal_global_157);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "alloc", (void (***)(void))this, &__block_literal_global_160);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "dynamic_quantize", (void (***)(void))this, &__block_literal_global_162);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "dynamic_dequantize", (void (***)(void))this, &__block_literal_global_164);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "load_global", (void (***)(void))this, &__block_literal_global_167);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "store_global", (void (***)(void))this, &__block_literal_global_170_3135);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "cf_if", (void (***)(void))this, &__block_literal_global_173);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "cf_loop", (void (***)(void))this, &__block_literal_global_176_3138);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "cf_for", (void (***)(void))this, &__block_literal_global_179_3140);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "cf_end", (void (***)(void))this, &__block_literal_global_182);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "cf_else", (void (***)(void))this, &__block_literal_global_185);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "copy", (void (***)(void))this, &__block_literal_global_188_3144);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "scatter", (void (***)(void))this, &__block_literal_global_191);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "load_random", (void (***)(void))this, &__block_literal_global_194);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "range", (void (***)(void))this, &__block_literal_global_197_3148);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "batch_matmul", (void (***)(void))this, &__block_literal_global_200_3150);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "matrix_band_part", (void (***)(void))this, &__block_literal_global_203);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "fill", (void (***)(void))this, &__block_literal_global_206_3153);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "tensor_zero_pad", (void (***)(void))this, &__block_literal_global_209);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "squeeze", (void (***)(void))this, &__block_literal_global_212_3156);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "expand_dims", (void (***)(void))this, &__block_literal_global_215);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "array_gather", (void (***)(void))this, &__block_literal_global_218_3159);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "multinomial", (void (***)(void))this, &__block_literal_global_221);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "instancenorm_1d", (void (***)(void))this, &__block_literal_global_224);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "phi_virtual", (void (***)(void))this, &__block_literal_global_227);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "gumbel_max", (void (***)(void))this, &__block_literal_global_230_3164);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "builtin", (void (***)(void))this, &__block_literal_global_233_3166);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "transplant", (void (***)(void))this, &__block_literal_global_236);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "general_slice", (void (***)(void))this, &__block_literal_global_239);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "stack_nd", (void (***)(void))this, &__block_literal_global_242_3170);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "split_nd", (void (***)(void))this, &__block_literal_global_245);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "softmax_nd", (void (***)(void))this, &__block_literal_global_248_3173);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "sliding_windows", (void (***)(void))this, &__block_literal_global_251);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "reverse_seq", (void (***)(void))this, &__block_literal_global_254_3176);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "cross_entropy", (void (***)(void))this, &__block_literal_global_257);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "sgd", (void (***)(void))this, &__block_literal_global_260_3179);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "adam", (void (***)(void))this, &__block_literal_global_263_3181);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "non_maximum_suppression", (void (***)(void))this, &__block_literal_global_266_3183);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "gather_nd", (void (***)(void))this, &__block_literal_global_269);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "scatter_nd", (void (***)(void))this, &__block_literal_global_272);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "nonzero", (void (***)(void))this, &__block_literal_global_275_3187);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "precompiled_segment", (void (***)(void))this, &__block_literal_global_278);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "one_hot", (void (***)(void))this, &__block_literal_global_281);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "cumsum", (void (***)(void))this, &__block_literal_global_284);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "dev_op", (void (***)(void))this, &__block_literal_global_287);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "sparse_inner_product", (void (***)(void))this, &__block_literal_global_290);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "convolution_grad", (void (***)(void))this, &__block_literal_global_293);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "convolution_weights_grad", (void (***)(void))this, &__block_literal_global_296);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "pool_grad", (void (***)(void))this, &__block_literal_global_299);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "nonlinearity_grad", (void (***)(void))this, &__block_literal_global_302);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "activation_grad", (void (***)(void))this, &__block_literal_global_305);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "concat_grad", (void (***)(void))this, &__block_literal_global_308);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "softmax_loss_grad", (void (***)(void))this, &__block_literal_global_311);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "bias", (void (***)(void))this, &__block_literal_global_314);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "bias_grad", (void (***)(void))this, &__block_literal_global_317);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "batchnorm_grad", (void (***)(void))this, &__block_literal_global_320);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "l2_normalize_grad", (void (***)(void))this, &__block_literal_global_323);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "inner_product_grad", (void (***)(void))this, &__block_literal_global_326);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "inner_product_weights_grad", (void (***)(void))this, &__block_literal_global_329);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "elementwise_grad", (void (***)(void))this, &__block_literal_global_332);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "dropout_grad", (void (***)(void))this, &__block_literal_global_335);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "grid_sampling", (void (***)(void))this, &__block_literal_global_338);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "resample", (void (***)(void))this, &__block_literal_global_341);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "local_correlation", (void (***)(void))this, &__block_literal_global_344);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "bahdanau_attention", (void (***)(void))this, &__block_literal_global_347);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "self_attention", (void (***)(void))this, &__block_literal_global_350);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "loopkit", (void (***)(void))this, &__block_literal_global_353);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "pool3d", (void (***)(void))this, &__block_literal_global_356);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "hierarchical_inner_product", (void (***)(void))this, &__block_literal_global_359);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "conv3d", (void (***)(void))this, &__block_literal_global_362);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "argsort", (void (***)(void))this, &__block_literal_global_365);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "slice_update", (void (***)(void))this, &__block_literal_global_368);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "static_quantize", (void (***)(void))this, &__block_literal_global_371);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "static_dequantize", (void (***)(void))this, &__block_literal_global_374);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "fused_convolution_grad", (void (***)(void))this, &__block_literal_global_377);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "fused_inner_product_grad", (void (***)(void))this, &__block_literal_global_380);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "deconv3d", (void (***)(void))this, &__block_literal_global_383);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "general_slice_update", (void (***)(void))this, &__block_literal_global_386);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "resize_nearest_neighbor", (void (***)(void))this, &__block_literal_global_389);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "einsum", (void (***)(void))this, &__block_literal_global_392);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "furthest_point_sampling", (void (***)(void))this, &__block_literal_global_395);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "tunneled_ane_op", (void (***)(void))this, &__block_literal_global_398);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "tunneled_ane_unit", (void (***)(void))this, &__block_literal_global_401);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "plane_rw", (void (***)(void))this, &__block_literal_global_404);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "degamma", (void (***)(void))this, &__block_literal_global_407);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "linear_quantize", (void (***)(void))this, &__block_literal_global_410);

  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "linear_dequantize", (void (***)(void))this, &__block_literal_global_413);
}

void Espresso::SerDes::layer_io<Espresso::generic_elementwise_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v14 = a4;
  v11[0] = 0;
  v11[1] = 1065353216;
  void v11[2] = 897988541;
  char v12 = 0;
  uint64_t v13 = 0;
  Espresso::SerDes::params_io<Espresso::elementwise_params>(a2, (uint64_t)v11, 0);
  Espresso::abstract_engine_factory::shared(&v9);
  uint64_t v5 = v9;
  std::string::basic_string[abi:ne180100]<0>(__p, "elementwise");
  int v6 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)v11, &v6);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
}

void sub_19210099C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_convolution_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v37 = a4;
  __int16 v20 = 1;
  uint64_t v22 = 0;
  __asm { FMOV            V0.2S, #1.0 }
  uint64_t v21 = 0;
  __int16 v23 = 0;
  uint64_t v24 = 0x1000100010001;
  int v25 = 0;
  int v27 = 1;
  int v35 = 0;
  char v36 = 0;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  long long v17 = xmmword_192DCA220;
  memset(v16, 0, 32);
  v16[4] = 1;
  long long v26 = xmmword_192DCA230;
  uint64_t v28 = 0;
  __int16 v30 = 1;
  unint64_t v18 = 0xFFFFFFFF00000000;
  uint64_t v19 = _D0;
  __int16 v29 = 0;
  int v33 = 0;
  __int16 v34 = 1;
  Espresso::SerDes::params_io<Espresso::convolution_uniforms>(a2, (uint64_t)v16, 0);
  Espresso::abstract_engine_factory::shared(&v14);
  uint64_t v10 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "convolution");
  int v11 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v10, a3, (uint64_t)__p, (uint64_t)v16, &v11);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
}

void sub_192100B14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::abstract_blob_container::make(uint64_t a1@<X0>, int *a2@<X1>, unsigned int *a3@<X2>, void *a4@<X8>)
{
  if (*a2 | *a3)
  {
    Espresso::abstract_engine_factory::shared(&v13);
    Espresso::abstract_engine_factory::make_abstract_blob_container(v13, a1, a2, a3, a4);
    if (v14) {
      nitro::nitro_function::nitro_function(v14);
    }
    if (!*a4)
    {
      uint64_t v9 = (std::__shared_weak_count *)a4[1];
      if (v9) {
        nitro::nitro_function::nitro_function(v9);
      }
      *a4 = 0;
      a4[1] = 0;
    }
  }
  else
  {
    Espresso::abstract_engine_factory::shared(&v11);
    int v10 = 0;
    Espresso::abstract_engine_factory::make_abstract_blob_container(v11, a1, &v10, a3, &v13);
    if (v13)
    {
      unint64_t v7 = v14;
      *a4 = v13;
      a4[1] = v7;
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
    }
    else
    {
      *a4 = 0;
      a4[1] = 0;
    }
    if (v14) {
      nitro::nitro_function::nitro_function(v14);
    }
    if (v12) {
      nitro::nitro_function::nitro_function(v12);
    }
  }
}

void sub_192100C3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    nitro::nitro_function::nitro_function(a14);
  }
  _Unwind_Resume(exception_object);
}

void sub_192100C54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (!a12) {
    JUMPOUT(0x192100C4CLL);
  }
  JUMPOUT(0x192100C48);
}

void Espresso::create_kernel_for_engine(void *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  Espresso::abstract_engine_factory::shared(&v30);
  int v10 = (int **)(a2 + 48);
  int is_kernel_supported = Espresso::abstract_engine_factory::is_kernel_supported(v30, (uint64_t)a4, a2 + 48);
  if (v31) {
    nitro::nitro_function::nitro_function(v31);
  }
  if (!is_kernel_supported)
  {
    *a1 = 0;
    a1[1] = 0;
    return;
  }
  int v12 = *(char *)(a2 + 71);
  if ((v12 & 0x80000000) == 0)
  {
    uint64_t v13 = (int *)(a2 + 48);
    if (v12 != 5) {
      goto LABEL_26;
    }
LABEL_10:
    int v14 = *v13;
    int v15 = *((unsigned __int8 *)v13 + 4);
    if (v14 == 1667854946 && v15 == 107)
    {
      v34[0] = 0;
      v34[1] = 0;
      uint64_t v35 = 0;
      uint64_t v17 = *a3;
      std::string::basic_string[abi:ne180100]<0>(v28, "class_name");
      Espresso::SerDes::generic_serdes_object::operator[](v17, (uint64_t)v28, &v30);
      double v18 = Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v30, (uint64_t)v34);
      if (v33 < 0) {
        operator delete(__p);
      }
      if (v31) {
        nitro::nitro_function::nitro_function(v31);
      }
      if (v29 < 0) {
        operator delete(v28[0]);
      }
      if (v35 >= 0) {
        uint64_t v19 = v34;
      }
      else {
        uint64_t v19 = (void **)v34[0];
      }
      objc_msgSend(NSString, "stringWithUTF8String:", v19, v18);
      __int16 v20 = (NSString *)objc_claimAutoreleasedReturnValue();
      Class v21 = NSClassFromString(v20);

      +[EspressoBrickRegistry registerBrickClass:v21];
      if (SHIBYTE(v35) < 0) {
        operator delete(v34[0]);
      }
    }
    goto LABEL_26;
  }
  if (*(void *)(a2 + 56) == 5)
  {
    uint64_t v13 = *v10;
    goto LABEL_10;
  }
LABEL_26:
  uint64_t v22 = Espresso::factory_t<Espresso::SerDes::layer_io_base>::shared();
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::get(&v30, (uint64_t)v22, v10);
  uint64_t v23 = v30;
  uint64_t v24 = *a3;
  int v25 = (std::__shared_weak_count *)a4[1];
  uint64_t v26 = *a4;
  int v27 = v25;
  if (v25) {
    atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t))(*(void *)v23 + 16))(v23, v24, &v26, a5);
  if (v27) {
    nitro::nitro_function::nitro_function(v27);
  }
  if (v31) {
    nitro::nitro_function::nitro_function(v31);
  }
}

void sub_192100E68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::abstract_engine_factory::shared(void *a1@<X8>)
{
  if (onceToken != -1) {
    dispatch_once(&onceToken, &__block_literal_global_46_7322);
  }
  uint64_t v3 = *(void *)(singleton + 8);
  *a1 = *(void *)singleton;
  a1[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
}

void *Espresso::factory_t<Espresso::SerDes::layer_io_base>::shared()
{
  std::string::basic_string[abi:ne180100]<0>(__p, "layer_io_base");
  uint64_t v0 = Espresso::generic_factory_t::shared((uint64_t)__p, &__block_literal_global_408);
  uint64_t v1 = (const void *)v0;
  if (v4 < 0)
  {
    operator delete(__p[0]);
    if (v1) {
  }
    }
  else if (v0)
  {
  }
  return 0;
}

uint64_t Espresso::generic_factory_t::shared(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v12 = 0;
  uint64_t v13 = &v12;
  uint64_t v14 = 0x2020000000;
  uint64_t v15 = 0;
  if (Espresso::onceToken != -1) {
    dispatch_once(&Espresso::onceToken, &__block_literal_global_7354);
  }
  char v4 = Espresso::factory_queue;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = ___ZN8Espresso17generic_factory_t6sharedERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEU13block_pointerFNS1_10shared_ptrIS0_EEvE_block_invoke_2;
  block[3] = &unk_1E5747260;
  id v9 = v3;
  int v10 = &v12;
  uint64_t v11 = a1;
  id v5 = v3;
  dispatch_sync(v4, block);
  uint64_t v6 = v13[3];

  _Block_object_dispose(&v12, 8);
  return v6;
}

void Espresso::factory_t<Espresso::SerDes::layer_io_base>::get(void *a1, uint64_t a2, void *a3)
{
  Espresso::generic_factory_t::get_(a2, a3, &lpsrc);
  if (lpsrc
  {
    id v5 = v4;
    uint64_t v6 = v8;
    *a1 = v5;
    a1[1] = v6;
    if (!v6) {
      return;
    }
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
    uint64_t v6 = v8;
    if (!v8) {
      return;
    }
  }

  nitro::nitro_function::nitro_function(v6);
}

void Espresso::generic_factory_t::get_(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  id v9 = *(void **)(a1 + 104);
  unint64_t v7 = (void *)(a1 + 104);
  char v8 = v9;
  if (!v9) {
    goto LABEL_8;
  }
  int v10 = v7;
  do
  {
    BOOL v11 = std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v8 + 4, a2);
    uint64_t v12 = v8 + 1;
    if (!v11)
    {
      uint64_t v12 = v8;
      int v10 = v8;
    }
    char v8 = (void *)*v12;
  }
  while (*v12);
  if (v10 == v7 || std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, v10 + 4))
  {
LABEL_8:
    *a3 = 0;
    a3[1] = 0;
  }
  else
  {
    uint64_t v13 = v10[8];
    *a3 = v10[7];
    a3[1] = v13;
    if (v13) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
    }
  }

  std::mutex::unlock(v6);
}

uint64_t Espresso::abstract_engine_factory::is_kernel_supported(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(std::recursive_mutex **)(a1 + 96);
  std::recursive_mutex::lock(v6);
  int v7 = (***(uint64_t (****)(void))(*(void *)a2 + 8))(*(void *)(*(void *)a2 + 8));
  int v18 = v7;
  key((uint64_t)__p, a3);
  char v8 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>(a1 + 72, __p);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  if ((void *)(a1 + 80) != v8) {
    goto LABEL_4;
  }
  uint64_t v10 = *(void *)(a1 + 8);
  if (!v10) {
    goto LABEL_11;
  }
  BOOL v11 = *(uint64_t **)(a1 + 8);
  while (1)
  {
    int v12 = *((_DWORD *)v11 + 7);
    if (v7 >= v12) {
      break;
    }
LABEL_10:
    BOOL v11 = (uint64_t *)*v11;
    if (!v11) {
      goto LABEL_11;
    }
  }
  if (v12 < v7)
  {
    ++v11;
    goto LABEL_10;
  }
  do
  {
    if (*(_DWORD *)(v10 + 28) >= v7) {
      uint64_t v14 = (uint64_t *)v10;
    }
    else {
      uint64_t v14 = (uint64_t *)(v10 + 8);
    }
    uint64_t v10 = *v14;
  }
  while (*v14);
  key((uint64_t)__p, a3);
  uint64_t v15 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>(a1 + 72, __p);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  if (v8 == v15)
  {
LABEL_11:
    uint64_t v9 = 0;
    goto LABEL_12;
  }
LABEL_4:
  uint64_t v9 = 1;
LABEL_12:
  std::recursive_mutex::unlock(v6);
  return v9;
}

void sub_192101410(_Unwind_Exception *a1)
{
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void Espresso::abstract_engine_factory::make_kernel_priv(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int *a5)
{
  char v8 = *(std::recursive_mutex **)(a1 + 96);
  std::recursive_mutex::lock(v8);
  key((uint64_t)&__p, a3);
  uint64_t v9 = a1 + 72;
  uint64_t v10 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>(a1 + 72, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if ((void *)(a1 + 80) == v10)
  {
    uint64_t v13 = *(uint64_t **)(a1 + 8);
    int v12 = (uint64_t *)(a1 + 8);
    BOOL v11 = v13;
    if (!v13) {
      goto LABEL_11;
    }
    int v14 = *a5;
    uint64_t v15 = v11;
    while (1)
    {
      int v16 = *((_DWORD *)v15 + 7);
      if (v14 >= v16)
      {
        if (v16 >= v14)
        {
          uint64_t v24 = v12;
          do
          {
            int v25 = *((_DWORD *)v11 + 7);
            BOOL v26 = v25 < v14;
            if (v25 >= v14) {
              int v27 = (uint64_t **)v11;
            }
            else {
              int v27 = (uint64_t **)(v11 + 1);
            }
            if (!v26) {
              uint64_t v24 = v11;
            }
            BOOL v11 = *v27;
          }
          while (*v27);
          if (v24 == v12 || v14 < *((_DWORD *)v24 + 7)) {
            uint64_t v24 = v12;
          }
          LODWORD(v31.__r_.__value_.__l.__data_) = *((_DWORD *)v24 + 8);
          key((uint64_t)&__p, a3);
          uint64_t v28 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>(v9, &__p);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (v10 != v28)
          {
            (*(void (**)(void))(v28[7] + 16))();
            goto LABEL_32;
          }
LABEL_11:
          exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::operator+<char>();
          int v18 = std::string::append(&v30, "' on platform ");
          long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
          v31.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v19;
          v18->__r_.__value_.__l.__size_ = 0;
          v18->__r_.__value_.__r.__words[2] = 0;
          v18->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v29, *a5);
          if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            __int16 v20 = &v29;
          }
          else {
            __int16 v20 = (std::string *)v29.__r_.__value_.__r.__words[0];
          }
          if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(v29.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = v29.__r_.__value_.__l.__size_;
          }
          uint64_t v22 = std::string::append(&v31, (const std::string::value_type *)v20, size);
          long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
          __p.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v23;
          v22->__r_.__value_.__l.__size_ = 0;
          v22->__r_.__value_.__r.__words[2] = 0;
          v22->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(exception, &__p);
          __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        ++v15;
      }
      uint64_t v15 = (uint64_t *)*v15;
      if (!v15) {
        goto LABEL_11;
      }
    }
  }
  (*(void (**)(void))(v10[7] + 16))();
LABEL_32:
  std::recursive_mutex::unlock(v8);
}

void sub_192101694(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  std::recursive_mutex::unlock(v33);
  _Unwind_Resume(a1);
}

void Espresso::abstract_engine_factory::register_kernel_class(uint64_t a1, const char *a2, void (***a3)(void), void *a4)
{
  id v7 = a4;
  char v8 = *(std::recursive_mutex **)(a1 + 96);
  std::recursive_mutex::lock(v8);
  (**a3)(a3);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v21);
  size_t v9 = strlen(a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)a2, v9);
  std::ostream::operator<<();
  std::stringbuf::str();
  v21[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v21 + *(void *)(v21[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v21[1] = MEMORY[0x1E4FBA470] + 16;
  if (v22 < 0) {
    operator delete((void *)v21[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&v23);
  BOOL v11 = (uint64_t **)(a1 + 80);
  uint64_t v10 = *(uint64_t **)(a1 + 80);
  if (v10)
  {
    while (1)
    {
      while (1)
      {
        BOOL v11 = (uint64_t **)v10;
        int v12 = v10 + 4;
        if (!std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v19, v10 + 4)) {
          break;
        }
        uint64_t v10 = *v11;
        uint64_t v13 = v11;
        if (!*v11) {
          goto LABEL_11;
        }
      }
      if (!std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v12, v19)) {
        break;
      }
      uint64_t v13 = v11 + 1;
      uint64_t v10 = v11[1];
      if (!v10) {
        goto LABEL_11;
      }
    }
    int v14 = v11;
  }
  else
  {
    uint64_t v13 = (uint64_t **)(a1 + 80);
LABEL_11:
    int v14 = operator new(0x40uLL);
    v14[2] = *(_OWORD *)v19;
    uint64_t v15 = v20;
    v19[1] = 0;
    uint64_t v20 = 0;
    v19[0] = 0;
    *((void *)v14 + 6) = v15;
    *((void *)v14 + 7) = 0;
    *(void *)int v14 = 0;
    *((void *)v14 + 1) = 0;
    *((void *)v14 + 2) = v11;
    uint64_t *v13 = (uint64_t *)v14;
    uint64_t v16 = **(void **)(a1 + 72);
    char v17 = (uint64_t *)v14;
    if (v16)
    {
      *(void *)(a1 + 72) = v16;
      char v17 = *v13;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 80), v17);
    ++*(void *)(a1 + 88);
  }
  int v18 = (void *)*((void *)v14 + 7);
  *((void *)v14 + 7) = v7;

  if (SHIBYTE(v20) < 0) {
    operator delete(v19[0]);
  }
  std::recursive_mutex::unlock(v8);
}

void sub_1921019C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::recursive_mutex::unlock(v15);

  _Unwind_Resume(a1);
}

uint64_t key(uint64_t a1, uint64_t a2)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v7);
  int v3 = *(char *)(a2 + 23);
  if (v3 >= 0) {
    uint64_t v4 = a2;
  }
  else {
    uint64_t v4 = *(void *)a2;
  }
  if (v3 >= 0) {
    uint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v5 = *(void *)(a2 + 8);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, v4, v5);
  std::ostream::operator<<();
  std::stringbuf::str();
  v7[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v7 + *(void *)(v7[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v7[1] = MEMORY[0x1E4FBA470] + 16;
  if (v8 < 0) {
    operator delete((void *)v7[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x192FF15B0](&v9);
}

void sub_192101B6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(void *a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x192FF1100](v13, a1);
  if (v13[0])
  {
    uint64_t v6 = (uint64_t)a1 + *(void *)(*a1 - 24);
    uint64_t v7 = *(void *)(v6 + 40);
    int v8 = *(_DWORD *)(v6 + 8);
    int v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
      uint64_t v10 = std::locale::use_facet(&v14, MEMORY[0x1E4FBA258]);
      int v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20) {
      uint64_t v11 = a2 + a3;
    }
    else {
      uint64_t v11 = a2;
    }
    if (!std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(v7, a2, v11, a2 + a3, v6, (char)v9)) {
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 5);
    }
  }
  MEMORY[0x192FF1110](v13);
  return a1;
}

void sub_192101CBC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  MEMORY[0x192FF1110](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(void *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x192101C9CLL);
}

void sub_192101D10(_Unwind_Exception *a1)
{
}

uint64_t std::ostringstream::basic_ostringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA498] + 64;
  *(void *)(a1 + 112) = MEMORY[0x1E4FBA498] + 64;
  uint64_t v3 = *(void *)(MEMORY[0x1E4FBA418] + 16);
  uint64_t v4 = *(void *)(MEMORY[0x1E4FBA418] + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + *(void *)(v4 - 24)) = v3;
  uint64_t v5 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v5, (void *)(a1 + 8));
  uint64_t v6 = MEMORY[0x1E4FBA498] + 24;
  v5[1].__vftable = 0;
  v5[1].__fmtflags_ = -1;
  *(void *)a1 = v6;
  *(void *)(a1 + 112) = v2;
  std::streambuf::basic_streambuf();
  *(void *)(a1 + 8) = MEMORY[0x1E4FBA470] + 16;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

void sub_192101E94(_Unwind_Exception *a1)
{
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6 = a1;
  if (a1)
  {
    uint64_t v11 = *(void *)(a5 + 24);
    if (v11 <= a4 - a2) {
      size_t v12 = 0;
    }
    else {
      size_t v12 = v11 - (a4 - a2);
    }
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1) != a3 - a2) {
      return 0;
    }
    if ((uint64_t)v12 >= 1)
    {
      if (v12 >= 0x7FFFFFFFFFFFFFF8) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      if (v12 >= 0x17)
      {
        uint64_t v14 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v12 | 7) != 0x17) {
          uint64_t v14 = v12 | 7;
        }
        uint64_t v15 = v14 + 1;
        uint64_t v13 = (void **)operator new(v14 + 1);
        __b[1] = (void *)v12;
        int64_t v22 = v15 | 0x8000000000000000;
        __b[0] = v13;
      }
      else
      {
        HIBYTE(v22) = v12;
        uint64_t v13 = __b;
      }
      memset(v13, __c, v12);
      *((unsigned char *)v13 + v12) = 0;
      if (v22 >= 0) {
        uint64_t v16 = __b;
      }
      else {
        uint64_t v16 = (void **)__b[0];
      }
      uint64_t v17 = (*(uint64_t (**)(uint64_t, void **, size_t))(*(void *)v6 + 96))(v6, v16, v12);
      uint64_t v18 = v17;
      if (SHIBYTE(v22) < 0)
      {
        operator delete(__b[0]);
        if (v18 != v12) {
          return 0;
        }
      }
      else if (v17 != v12)
      {
        return 0;
      }
    }
    uint64_t v19 = a4 - a3;
    if (v19 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 96))(v6, a3, v19) == v19)
    {
      *(void *)(a5 + 24) = 0;
      return v6;
    }
    return 0;
  }
  return v6;
}

void sub_19210209C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::abstract_engine_factory::make_abstract_blob_container(uint64_t a1@<X0>, uint64_t a2@<X1>, int *a3@<X2>, unsigned int *a4@<X3>, void *a5@<X8>)
{
  uint64_t v10 = *(std::recursive_mutex **)(a1 + 96);
  std::recursive_mutex::lock(v10);
  uint64_t v13 = *(void *)(a1 + 32);
  uint64_t v12 = a1 + 32;
  uint64_t v11 = v13;
  if (!v13) {
    goto LABEL_11;
  }
  int v14 = *a3;
  uint64_t v15 = v12;
  do
  {
    int v16 = *(_DWORD *)(v11 + 32);
    BOOL v17 = v16 < v14;
    if (v16 >= v14) {
      uint64_t v18 = (uint64_t *)v11;
    }
    else {
      uint64_t v18 = (uint64_t *)(v11 + 8);
    }
    if (!v17) {
      uint64_t v15 = v11;
    }
    uint64_t v11 = *v18;
  }
  while (*v18);
  if (v15 != v12 && v14 >= *(_DWORD *)(v15 + 32))
  {
    (*(void (**)(void, uint64_t, void))(**(void **)(v15 + 40) + 24))(*(void *)(v15 + 40), a2, *a4);
  }
  else
  {
LABEL_11:
    *a5 = 0;
    a5[1] = 0;
  }

  std::recursive_mutex::unlock(v10);
}

void sub_192102194(_Unwind_Exception *a1)
{
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t Espresso::DummyMPSEngine::engine::platform(Espresso::DummyMPSEngine::engine *this)
{
  return 50001;
}

void Espresso::SerDes::params_io<Espresso::elementwise_params>(uint64_t a1, uint64_t a2, int a3)
{
  if (!a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v7, "operation");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v9, (_DWORD *)a2);
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v7, "fused_relu");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v9, (_DWORD *)(a2 + 4));
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v7, "alpha");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v9, (float *)(a2 + 8));
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v7, "beta");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v9, (float *)(a2 + 12));
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v7, "eps");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v9, (float *)(a2 + 16));
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v7, "no_broadcast");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v9, (_DWORD *)(a2 + 20));
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v7, "nd_mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v9, (unsigned char *)(a2 + 24));
    goto LABEL_79;
  }
  std::string::basic_string[abi:ne180100]<0>(v7, "operation");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
  (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v9 + 160))(v9, __p, a2);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v7, "fused_relu");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
  (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v9 + 160))(v9, __p, a2 + 4);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v7, "alpha");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
  (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v9 + 216))(v9, __p, a2 + 8);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v7, "beta");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
  (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v9 + 216))(v9, __p, a2 + 12);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  if (*(float *)(a2 + 16) != 0.000001)
  {
    std::string::basic_string[abi:ne180100]<0>(v7, "eps");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
    (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v9 + 216))(v9, __p, a2 + 16);
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
  }
  if (*(_DWORD *)(a2 + 20))
  {
    std::string::basic_string[abi:ne180100]<0>(v7, "no_broadcast");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
    (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v9 + 160))(v9, __p, a2 + 20);
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
  }
  int v6 = *(unsigned __int8 *)(a2 + 24);
  uint64_t v5 = a2 + 24;
  if (v6)
  {
    std::string::basic_string[abi:ne180100]<0>(v7, "nd_mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
    (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v9 + 208))(v9, __p, v5);
LABEL_79:
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
  }
}

void sub_1921027C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(void *a1, unsigned char *a2)
{
  uint64_t v4 = a1 + 2;
  uint64_t result = (*(uint64_t (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2);
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(void, void *))(*(void *)*a1 + 88))(*a1, v4);
    *a2 = result;
  }
  return result;
}

__n128 Espresso::ANERuntimeEngine::engine::make_abstract_blob_container@<Q0>(void *a1@<X1>, int a2@<W2>, __n128 *a3@<X8>)
{
  int v6 = (char *)operator new(0x148uLL);
  *(_OWORD *)(v6 + 8) = 0u;
  *(void *)int v6 = &unk_1EE383448;
  uint64_t v7 = Espresso::ANECompilerEngine::blob_container::blob_container((uint64_t)(v6 + 24), a1, a2);
  *((void *)v6 + 3) = &unk_1EE3340D8;
  *((void *)v6 + 35) = v6 + 288;
  *((void *)v6 + 36) = 0;
  *((_OWORD *)v6 + 15) = 0u;
  *((_OWORD *)v6 + 16) = 0u;
  *((void *)v6 + 34) = 0;
  *(_OWORD *)(v7 + 272) = 0u;
  *(_OWORD *)(v7 + 288) = 0u;
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

uint64_t Espresso::ANECompilerEngine::blob_container::blob_container(uint64_t a1, void *a2, int a3)
{
  uint64_t result = Espresso::abstract_blob_container::abstract_blob_container(a1, a2);
  *(void *)uint64_t result = &unk_1EE33FD20;
  *(void *)&long long v5 = 0x100000001;
  *((void *)&v5 + 1) = 0x100000001;
  *(_OWORD *)(result + 160) = v5;
  *(_OWORD *)(result + 176) = xmmword_192DCA580;
  *(void *)(result + 200) = 0x100000000;
  *(_DWORD *)(result + 192) = 1;
  *(_DWORD *)(result + 196) = a3;
  *(unsigned char *)(result + 208) = 0;
  if (a3 == 5)
  {
    *(_DWORD *)(result + 196) = 1;
    *(unsigned char *)(result + 208) = 1;
  }
  return result;
}

uint64_t Espresso::abstract_blob_container::abstract_blob_container(uint64_t result, void *a2)
{
  *(void *)uint64_t result = &unk_1EE359E28;
  *(_DWORD *)(result + 28) = -1;
  *(_OWORD *)(result + 32) = 0u;
  *(_OWORD *)(result + 48) = 0u;
  *(void *)(result + 64) = 0;
  uint64_t v2 = a2[1];
  *(void *)(result + 72) = *a2;
  *(void *)(result + 80) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(result + 88) = 0;
  *(void *)(result + 96) = 0;
  *(_DWORD *)(result + 104) = 0;
  *(_DWORD *)(result + 112) = 1065353216;
  *(void *)(result + 116) = 0xFFFFFFFF00000000;
  *(_DWORD *)(result + 124) = 1;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(_DWORD *)(result + 24) = 0;
  *(_OWORD *)(result + 128) = 0uLL;
  *(_OWORD *)(result + 144) = 0uLL;
  return result;
}

__n128 ___ZN8Espresso16ANERuntimeEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke@<Q0>(uint64_t *a1@<X1>, long long *a2@<X2>, __n128 *a3@<X8>)
{
  int v6 = operator new(0x348uLL);
  v6[1] = 0;
  v6[2] = 0;
  *int v6 = &unk_1EE3837C8;
  Espresso::ANECompilerEngine::convolution_kernel::convolution_kernel(v6 + 3, a1, a2);
  void v6[3] = &unk_1EE3360D8;
  v6[73] = &unk_1EE336368;
  *((unsigned char *)v6 + 834) = *(unsigned char *)(*a1 + 127);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_192102B44(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

__n128 Espresso::ANECompilerEngine::convolution_kernel::convolution_kernel(void *a1, uint64_t *a2, long long *a3)
{
  long long v5 = Espresso::abstract_kernel_with_weights<Espresso::convolution_uniforms>::abstract_kernel_with_weights(a1, a2);
  v5[69] = 0;
  *(_OWORD *)(v5 + 65) = 0u;
  *(_OWORD *)(v5 + 67) = 0u;
  *(_OWORD *)(v5 + 61) = 0u;
  *(_OWORD *)(v5 + 63) = 0u;
  char v6 = *(unsigned char *)(*a2 + 123);
  *(_OWORD *)(v5 + 87) = 0u;
  *(_OWORD *)(v5 + 89) = 0u;
  *(_OWORD *)(v5 + 71) = 0u;
  *(_OWORD *)(v5 + 73) = 0u;
  *(_OWORD *)(v5 + 75) = 0u;
  *((unsigned char *)v5 + 616) = 0;
  *((_OWORD *)v5 + 39) = 0u;
  *((_OWORD *)v5 + 40) = 0u;
  *((_OWORD *)v5 + 41) = 0u;
  *((_OWORD *)v5 + 42) = 0u;
  *((unsigned char *)v5 + 688) = 0;
  *((_DWORD *)v5 + 182) = 1065353216;
  *((_WORD *)v5 + 368) = 0;
  *((unsigned char *)v5 + 738) = 0;
  __asm { FMOV            V1.2S, #1.0 }
  *(void *)((char *)v5 + 740) = _D1;
  *((unsigned char *)v5 + 748) = 0;
  *((_OWORD *)v5 + 47) = 0u;
  *((unsigned char *)v5 + 768) = v6;
  void *v5 = &unk_1EE342978;
  v5[70] = &unk_1EE342C08;
  *((_WORD *)v5 + 404) = 0;
  *(_OWORD *)(v5 + 97) = 0u;
  *(_OWORD *)(v5 + 99) = 0u;
  long long v12 = *a3;
  long long v13 = a3[2];
  *((_OWORD *)v5 + 20) = a3[1];
  *((_OWORD *)v5 + 21) = v13;
  *((_OWORD *)v5 + 19) = v12;
  long long v14 = a3[3];
  long long v15 = a3[4];
  long long v16 = a3[6];
  *((_OWORD *)v5 + 24) = a3[5];
  *((_OWORD *)v5 + 25) = v16;
  *((_OWORD *)v5 + 22) = v14;
  *((_OWORD *)v5 + 23) = v15;
  __n128 result = (__n128)a3[7];
  long long v18 = a3[8];
  long long v19 = a3[9];
  *(void *)((char *)v5 + 461) = *(void *)((char *)a3 + 157);
  *((_OWORD *)v5 + 27) = v18;
  *((_OWORD *)v5 + 28) = v19;
  *((__n128 *)v5 + 26) = result;
  return result;
}

void *Espresso::abstract_kernel_with_weights<Espresso::convolution_uniforms>::abstract_kernel_with_weights(void *a1, uint64_t *a2)
{
  uint64_t v3 = (void *)Espresso::base_kernel::base_kernel((uint64_t)a1, a2);
  v3[36] = 0;
  v3[37] = 0;
  v3[35] = v3 + 36;
  Espresso::convolution_uniforms::convolution_uniforms((Espresso::convolution_uniforms *)(v3 + 38));
  *a1 = &unk_1EE362050;
  a1[59] = 0;
  a1[60] = 0;
  return a1;
}

uint64_t Espresso::base_kernel::base_kernel(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  *(void *)a1 = &unk_1EE32A3F8;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = 1065353216;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_DWORD *)(a1 + 96) = 1065353216;
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 104), "");
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(_DWORD *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = a1 + 160;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_DWORD *)(a1 + 272) = 1065353216;
  return a1;
}

void sub_192102D90(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob_cpu>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob_cpu>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob_cpu>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob_cpu>>>>::~__hash_table(v4);
  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<Espresso::blob_file_metadata>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<Espresso::blob_file_metadata>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<Espresso::blob_file_metadata>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<Espresso::blob_file_metadata>>>>::~__hash_table(v2);
  char v6 = *(std::__shared_weak_count **)(v1 + 16);
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }
  _Unwind_Resume(a1);
}

double Espresso::convolution_uniforms::convolution_uniforms(Espresso::convolution_uniforms *this)
{
  *((_WORD *)this + 36) = 1;
  __asm { FMOV            V0.2S, #1.0 }
  *(void *)((char *)this + 82) = 0;
  *(void *)((char *)this + 74) = 0;
  *((_WORD *)this + 45) = 0;
  *(void *)((char *)this + 92) = 0x1000100010001;
  *((_DWORD *)this + 25) = 0;
  *((_DWORD *)this + 30) = 1;
  *((_DWORD *)this + 40) = 0;
  *((unsigned char *)this + 164) = 0;
  *((void *)this + 17) = 0;
  *((void *)this + 18) = 0;
  *(_OWORD *)((char *)this + 40) = xmmword_192DCA220;
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 1;
  *(_OWORD *)((char *)this + 104) = xmmword_192DCA230;
  *(void *)((char *)this + 124) = 0;
  *((_WORD *)this + 67) = 1;
  *((void *)this + 7) = 0xFFFFFFFF00000000;
  *((double *)this + 8) = result;
  *((_WORD *)this + 66) = 0;
  *((void *)this + 2) = 0;
  *((_DWORD *)this + 38) = 0;
  *((_WORD *)this + 78) = 1;
  return result;
}

__n128 Espresso::engine_cpu::make_abstract_blob_container@<Q0>(void *a1@<X1>, int a2@<W2>, __n128 *a3@<X8>)
{
  char v6 = (char *)operator new(0x118uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)char v6 = &unk_1EE38C588;
  uint64_t v7 = Espresso::abstract_blob_container::abstract_blob_container((uint64_t)(v6 + 24), a1);
  *((void *)v6 + 3) = &unk_1EE3718A0;
  *((void *)v6 + 34) = 0;
  *(_OWORD *)(v6 + 184) = 0u;
  *(_OWORD *)(v6 + 200) = 0u;
  *(_OWORD *)(v6 + 216) = 0u;
  *(_OWORD *)(v6 + 232) = 0u;
  *(_OWORD *)(v6 + 248) = 0u;
  *((_DWORD *)v6 + 66) = a2;
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

uint64_t Espresso::engine_cpu::platform(Espresso::engine_cpu *this)
{
  return 0;
}

uint64_t Espresso::DummyBNNSEngine::engine::platform(Espresso::DummyBNNSEngine::engine *this)
{
  return 101;
}

__n128 ___ZN8Espresso16ANERuntimeEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_42@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  char v6 = operator new(0x298uLL);
  v6[1] = 0;
  v6[2] = 0;
  *char v6 = &unk_1EE383BB8;
  Espresso::ANECompilerEngine::elementwise_kernel::elementwise_kernel((uint64_t)(v6 + 3), a1, a2);
  void v6[3] = &unk_1EE338878;
  v6[45] = &unk_1EE3389E8;
  *((unsigned char *)v6 + 656) = *(unsigned char *)(*a1 + 127);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_192102FAC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

__n128 Espresso::ANECompilerEngine::elementwise_kernel::elementwise_kernel(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(void *)(v5 + 280) = 0;
  *(void *)(v5 + 288) = 1065353216;
  *(void *)(v5 + 296) = 897988541;
  *(unsigned char *)(v5 + 304) = 0;
  *(void *)(v5 + 324) = 0;
  char v6 = *(unsigned char *)(*a2 + 123);
  *(_OWORD *)(v5 + 472) = 0u;
  *(_OWORD *)(v5 + 488) = 0u;
  *(_OWORD *)(v5 + 344) = 0u;
  *(_OWORD *)(v5 + 360) = 0u;
  *(_OWORD *)(v5 + 376) = 0u;
  *(unsigned char *)(v5 + 392) = 0;
  *(_OWORD *)(v5 + 400) = 0u;
  *(_OWORD *)(v5 + 416) = 0u;
  *(_OWORD *)(v5 + 432) = 0u;
  *(_OWORD *)(v5 + 448) = 0u;
  *(unsigned char *)(v5 + 464) = 0;
  *(_DWORD *)(v5 + 504) = 1065353216;
  *(_WORD *)(v5 + 512) = 0;
  *(unsigned char *)(v5 + 514) = 0;
  __asm { FMOV            V1.2S, #1.0 }
  *(void *)(v5 + 516) = _D1;
  *(unsigned char *)(v5 + 524) = 0;
  *(_OWORD *)(v5 + 528) = 0u;
  *(unsigned char *)(v5 + 544) = v6;
  *(void *)uint64_t v5 = &unk_1EE342CA8;
  *(void *)(v5 + 336) = &unk_1EE342E18;
  *(_OWORD *)(v5 + 552) = 0u;
  *(_OWORD *)(v5 + 568) = 0u;
  *(_DWORD *)(v5 + 584) = 1065353216;
  *(_WORD *)(v5 + 592) = 0;
  *(unsigned char *)(v5 + 594) = 0;
  *(void *)(v5 + 596) = 0x3F8000003F800000;
  *(_WORD *)(v5 + 604) = 0;
  *(void *)(v5 + 608) = _D1;
  *(unsigned char *)(v5 + 616) = 0;
  *(void *)(v5 + 624) = 0;
  __n128 result = *(__n128 *)a3;
  long long v13 = *(_OWORD *)(a3 + 16);
  long long v14 = *(_OWORD *)(a3 + 32);
  *(_DWORD *)(v5 + 328) = *(_DWORD *)(a3 + 48);
  *(_OWORD *)(v5 + 296) = v13;
  *(_OWORD *)(v5 + 312) = v14;
  *(__n128 *)(v5 + 280) = result;
  return result;
}

uint64_t Espresso::QuantSimEngine::engine::platform(Espresso::QuantSimEngine::engine *this)
{
  return 10010;
}

__n128 ___ZN8Espresso10BNNSEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_2@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  char v8 = (char *)operator new(0x198uLL);
  *((void *)v8 + 1) = 0;
  *((void *)v8 + 2) = 0;
  *(void *)char v8 = &unk_1EE381228;
  Espresso::base_kernel::base_kernel((uint64_t)(v8 + 24), a1);
  BOOL v9 = 0;
  *((void *)v8 + 3) = &unk_1EE3287C8;
  long long v10 = *(_OWORD *)(a2 + 16);
  *((_OWORD *)v8 + 19) = *(_OWORD *)a2;
  *((_DWORD *)v8 + 88) = *(_DWORD *)(a2 + 48);
  *((_OWORD *)v8 + 20) = v10;
  *((_OWORD *)v8 + 21) = *(_OWORD *)(a2 + 32);
  unsigned int v11 = *((_DWORD *)v8 + 76);
  *(_OWORD *)(v8 + 360) = 0u;
  *(_OWORD *)(v8 + 376) = 0u;
  *(_OWORD *)(v8 + 392) = 0u;
  if (v11 - 102 > 0x1C || ((1 << (v11 - 102)) & 0x1FF9B001) == 0) {
    BOOL v9 = v11 > 0x25 || ((1 << v11) & 0x2A0C003803) == 0;
  }
  if (a3) {
    int v14 = 1;
  }
  else {
    int v14 = v9;
  }
  if (!*a1)
  {
    if ((v14 & 1) == 0) {
      goto LABEL_32;
    }
    goto LABEL_27;
  }
  if (!v15)
  {
    if (!v14) {
      goto LABEL_32;
    }
    goto LABEL_27;
  }
  long long v16 = v15;
  *((void *)v8 + 50) = v15[21];
  std::string::basic_string[abi:ne180100]<0>(__p, "bnns.experimental.enable_elementwise");
  BOOL v17 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v16 + 22, (uint64_t)__p);
  if (v22 < 0) {
    operator delete(__p[0]);
  }
  if (v17) {
    char v18 = v14;
  }
  else {
    char v18 = 1;
  }
  if (v18)
  {
LABEL_27:
    if (a3 == 1) {
      std::allocate_shared[abi:ne180100]<Espresso::CPUFP16Engine::elementwise_kernel_cpu,std::allocator<Espresso::CPUFP16Engine::elementwise_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::elementwise_params const&,void>((uint64_t *)__p, a1, (__n128 *)a2);
    }
    else {
      std::allocate_shared[abi:ne180100]<Espresso::elementwise_kernel_cpu,std::allocator<Espresso::elementwise_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::elementwise_params const&,void>((uint64_t *)__p, a1, (__n128 *)a2);
    }
    long long v19 = (std::__shared_weak_count *)*((void *)v8 + 46);
    *(_OWORD *)(v8 + 360) = *(_OWORD *)__p;
    if (v19) {
      nitro::nitro_function::nitro_function(v19);
    }
  }
LABEL_32:
  result.n128_u64[0] = (unint64_t)(v8 + 24);
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_192103328(_Unwind_Exception *a1)
{
  uint64_t shared_weak_owners = (std::__shared_weak_count_vtbl *)v1[15].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    v1[16].__vftable = shared_weak_owners;
    operator delete(shared_weak_owners);
  }
  uint64_t shared_owners = (std::__shared_weak_count *)v1[15].__shared_owners_;
  if (shared_owners) {
    nitro::nitro_function::nitro_function(shared_owners);
  }
  Espresso::base_kernel::~base_kernel(v2);
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v6);
  _Unwind_Resume(a1);
}

__n128 std::allocate_shared[abi:ne180100]<Espresso::elementwise_kernel_cpu,std::allocator<Espresso::elementwise_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::elementwise_params const&,void>(uint64_t *a1, uint64_t *a2, __n128 *a3)
{
  char v6 = (__n128 *)operator new(0x168uLL);
  v6->n128_u64[1] = 0;
  v6[1].n128_u64[0] = 0;
  v6->n128_u64[0] = (unint64_t)&unk_1EE3877E0;
  uint64_t v7 = Espresso::base_kernel::base_kernel((uint64_t)&v6[1].n128_i64[1], a2);
  v6[1].n128_u64[1] = (unint64_t)&unk_1EE357F28;
  __n128 v8 = a3[1];
  v6[19] = *a3;
  v6[20] = v8;
  __n128 result = a3[2];
  v6[21] = result;
  v6[22].n128_u32[0] = a3[3].n128_u32[0];
  *a1 = v7;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_192103410(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

double ___ZN8Espresso10BNNSEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_3@<D0>(uint64_t *a1@<X1>, long long *a2@<X2>, int a3@<W3>, _OWORD *a4@<X8>)
{
  int v7 = a3;
  std::allocate_shared[abi:ne180100]<Espresso::BNNSEngine::convolution_kernel,std::allocator<Espresso::BNNSEngine::convolution_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::convolution_uniforms const&,void>(v6, a1, &v7, a2);
  double result = v6[0];
  *a4 = *(_OWORD *)v6;
  return result;
}

void std::allocate_shared[abi:ne180100]<Espresso::BNNSEngine::convolution_kernel,std::allocator<Espresso::BNNSEngine::convolution_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::convolution_uniforms const&,void>(void *a1, uint64_t *a2, int *a3, long long *a4)
{
  __n128 v8 = (char *)operator new(0x308uLL);
  *((void *)v8 + 1) = 0;
  *((void *)v8 + 2) = 0;
  *(void *)__n128 v8 = &unk_1EE3811F0;
  long long v24 = a4[8];
  *(_OWORD *)int v25 = a4[9];
  *(void *)&v25[16] = *((void *)a4 + 20);
  long long v20 = a4[4];
  long long v21 = a4[5];
  long long v22 = a4[6];
  long long v23 = a4[7];
  long long v16 = *a4;
  long long v17 = a4[1];
  long long v18 = a4[2];
  long long v19 = a4[3];
  Espresso::abstract_kernel_with_weights<Espresso::convolution_uniforms>::abstract_kernel_with_weights((void *)v8 + 3, a2);
  *((void *)v8 + 72) = 0;
  long long v9 = 0uLL;
  *((_OWORD *)v8 + 34) = 0u;
  *((_OWORD *)v8 + 35) = 0u;
  *((_OWORD *)v8 + 32) = 0u;
  *((_OWORD *)v8 + 33) = 0u;
  *((void *)v8 + 3) = &unk_1EE327EF0;
  *((_OWORD *)v8 + 37) = 0u;
  *((_OWORD *)v8 + 38) = 0u;
  *(_OWORD *)(v8 + 617) = 0u;
  int v10 = *a3;
  *((_DWORD *)v8 + 146) = v10;
  if (*a2)
  {
    long long v9 = 0uLL;
    if (v11)
    {
      v8[632] = v11[160];
      *((void *)v8 + 78) = *((void *)v11 + 21);
    }
  }
  *((void *)v8 + 3) = &unk_1EE328548;
  v8[768] = 0;
  *((_OWORD *)v8 + 40) = v9;
  *((_OWORD *)v8 + 41) = v9;
  *((_OWORD *)v8 + 42) = v9;
  *((_OWORD *)v8 + 43) = v9;
  *((_OWORD *)v8 + 44) = v9;
  *((_OWORD *)v8 + 45) = v9;
  *((_OWORD *)v8 + 46) = v9;
  *((_OWORD *)v8 + 47) = v9;
  *(_OWORD *)(v8 + 456) = v24;
  *(_OWORD *)(v8 + 472) = *(_OWORD *)v25;
  *(_OWORD *)(v8 + 392) = v20;
  *(_OWORD *)(v8 + 408) = v21;
  *(_OWORD *)(v8 + 424) = v22;
  *(_OWORD *)(v8 + 440) = v23;
  *(_OWORD *)(v8 + 328) = v16;
  *(_OWORD *)(v8 + 344) = v17;
  *(_OWORD *)(v8 + 360) = v18;
  *(_OWORD *)(v8 + 376) = v19;
  *(void *)(v8 + 485) = *(void *)&v25[13];
  if (*((_DWORD *)v8 + 109) == 1)
  {
    if (v10 == 1)
    {
      long long v12 = (char *)operator new(0x268uLL);
      *((void *)v12 + 1) = 0;
      *((void *)v12 + 2) = 0;
      *(void *)long long v12 = &unk_1EE381CA8;
      long long v13 = Espresso::abstract_kernel_with_weights<Espresso::convolution_uniforms>::abstract_kernel_with_weights((void *)v12 + 3, a2);
      *((void *)v12 + 72) = 0;
      *((_OWORD *)v12 + 34) = 0u;
      *((_OWORD *)v12 + 35) = 0u;
      *((_OWORD *)v12 + 32) = 0u;
      *((_OWORD *)v12 + 33) = 0u;
      *((void *)v12 + 3) = &unk_1EE32B608;
      *(_OWORD *)(v12 + 584) = 0u;
      *(_OWORD *)(v12 + 600) = 0u;
      *(_OWORD *)(v12 + 456) = v24;
      *(_OWORD *)(v12 + 472) = *(_OWORD *)v25;
      *(_OWORD *)(v12 + 392) = v20;
      *(_OWORD *)(v12 + 408) = v21;
      *(_OWORD *)(v12 + 424) = v22;
      *(_OWORD *)(v12 + 440) = v23;
      *(_OWORD *)(v12 + 328) = v16;
      *(_OWORD *)(v12 + 344) = v17;
      *(_OWORD *)(v12 + 360) = v18;
      *(_OWORD *)(v12 + 376) = v19;
      *(void *)(v12 + 485) = *(void *)&v25[13];
    }
    else
    {
      long long v12 = (char *)operator new(0x298uLL);
      *((void *)v12 + 1) = 0;
      *((void *)v12 + 2) = 0;
      *(void *)long long v12 = &unk_1EE387770;
      long long v13 = Espresso::abstract_kernel_with_weights<Espresso::convolution_uniforms>::abstract_kernel_with_weights((void *)v12 + 3, a2);
      *((void *)v12 + 72) = 0;
      *((_OWORD *)v12 + 34) = 0u;
      *((_OWORD *)v12 + 35) = 0u;
      *((_OWORD *)v12 + 32) = 0u;
      *((_OWORD *)v12 + 33) = 0u;
      *((void *)v12 + 3) = &unk_1EE357C78;
      *(_OWORD *)(v12 + 584) = 0u;
      *(_OWORD *)(v12 + 600) = 0u;
      *(_OWORD *)(v12 + 616) = 0u;
      *(_OWORD *)(v12 + 632) = 0u;
      *(_OWORD *)(v12 + 648) = 0u;
      *(_OWORD *)(v12 + 392) = v20;
      *(_OWORD *)(v12 + 408) = v21;
      *(_OWORD *)(v12 + 456) = v24;
      *(_OWORD *)(v12 + 472) = *(_OWORD *)v25;
      *(_OWORD *)(v12 + 424) = v22;
      *(_OWORD *)(v12 + 440) = v23;
      *(void *)(v12 + 485) = *(void *)&v25[13];
      *(_OWORD *)(v12 + 328) = v16;
      *(_OWORD *)(v12 + 344) = v17;
      *(_OWORD *)(v12 + 360) = v18;
      *(_OWORD *)(v12 + 376) = v19;
      v12[492] = *(unsigned char *)(*a2 + 125);
    }
    *(void *)&long long v14 = v13;
    *((void *)&v14 + 1) = v12;
    long long v15 = (std::__shared_weak_count *)*((void *)v8 + 76);
    *(_OWORD *)(v8 + 600) = v14;
    if (v15) {
      nitro::nitro_function::nitro_function(v15);
    }
  }
  if (!*((_DWORD *)v8 + 122)) {
    *((_DWORD *)v8 + 122) = v8[632];
  }
  *a1 = v8 + 24;
  a1[1] = v8;
}

void sub_192103800(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v3);
  operator delete(v8);
  *(void *)(v6 - 88) = v5 + 720;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v6 - 88));
  *(void *)(v6 - 88) = v4;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v6 - 88));
  uint64_t shared_weak_owners = (std::__shared_weak_count_vtbl *)v1[28].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    v1[29].__vftable = shared_weak_owners;
    operator delete(shared_weak_owners);
  }
  uint64_t shared_owners = (std::__shared_weak_count *)v1[28].__shared_owners_;
  if (shared_owners) {
    nitro::nitro_function::nitro_function(shared_owners);
  }
  unsigned int v11 = (std::__shared_weak_count *)v1[27].__shared_weak_owners_;
  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
  long long v12 = (std::__shared_weak_count *)v1[27].__vftable;
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
  Espresso::BNNSEngine::base_bnns_kernel<Espresso::generic_convolution_kernel>::~base_bnns_kernel(v2);
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v13);
  _Unwind_Resume(a1);
}

__n128 Espresso::IREngine::engine::make_abstract_blob_container@<Q0>(void *a1@<X1>, int a2@<W2>, __n128 *a3@<X8>)
{
  uint64_t v6 = (char *)operator new(0x130uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)uint64_t v6 = &unk_1EE38C048;
  uint64_t v7 = Espresso::abstract_blob_container::abstract_blob_container((uint64_t)(v6 + 24), a1);
  *((void *)v6 + 34) = 0;
  *(_OWORD *)(v6 + 184) = 0u;
  *(_OWORD *)(v6 + 200) = 0u;
  *(_OWORD *)(v6 + 216) = 0u;
  *(_OWORD *)(v6 + 232) = 0u;
  *(_OWORD *)(v6 + 248) = 0u;
  *((_DWORD *)v6 + 66) = 0;
  *((_DWORD *)v6 + 70) = a2;
  *((void *)v6 + 36) = 0;
  *((void *)v6 + 37) = 0;
  *((void *)v6 + 3) = &unk_1EE36F868;
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

uint64_t Espresso::SerDes::serdes_object_json_objc::get_BOOL(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = Espresso::SerDes::fast_dict_lookup(*(void **)(a1 + 24), a2);
  uint64_t v3 = v2;
  if (!v2)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    uint64_t v7 = std::string::append(&v9, "\" not found");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v10.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v10.__r_.__value_.__l.__data_ = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    std::logic_error::logic_error(exception, &v10);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
    __cxa_throw(exception, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
  }
  uint64_t v4 = [v2 BOOLValue];

  return v4;
}

void sub_192103A3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v23 & 1) == 0)
    {
LABEL_8:

      _Unwind_Resume(a1);
    }
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

double ___ZN8Espresso14DummyMPSEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::convolution_kernel_cpu,std::allocator<Espresso::convolution_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::convolution_uniforms const&,void>(&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

__n128 std::allocate_shared[abi:ne180100]<Espresso::convolution_kernel_cpu,std::allocator<Espresso::convolution_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::convolution_uniforms const&,void>(void *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = (char *)operator new(0x298uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)uint64_t v6 = &unk_1EE387770;
  uint64_t v7 = Espresso::abstract_kernel_with_weights<Espresso::convolution_uniforms>::abstract_kernel_with_weights((void *)v6 + 3, a2);
  *((void *)v6 + 72) = 0;
  *((_OWORD *)v6 + 34) = 0u;
  *((_OWORD *)v6 + 35) = 0u;
  *((_OWORD *)v6 + 32) = 0u;
  *((_OWORD *)v6 + 33) = 0u;
  *((void *)v6 + 3) = &unk_1EE357C78;
  *(_OWORD *)(v6 + 584) = 0u;
  *(_OWORD *)(v6 + 600) = 0u;
  *(_OWORD *)(v6 + 616) = 0u;
  *(_OWORD *)(v6 + 632) = 0u;
  *(_OWORD *)(v6 + 648) = 0u;
  long long v8 = *(_OWORD *)(a3 + 80);
  *(_OWORD *)(v6 + 392) = *(_OWORD *)(a3 + 64);
  *(_OWORD *)(v6 + 408) = v8;
  long long v9 = *(_OWORD *)(a3 + 144);
  *(_OWORD *)(v6 + 456) = *(_OWORD *)(a3 + 128);
  *(_OWORD *)(v6 + 472) = v9;
  long long v10 = *(_OWORD *)(a3 + 112);
  *(_OWORD *)(v6 + 424) = *(_OWORD *)(a3 + 96);
  *(_OWORD *)(v6 + 440) = v10;
  *(void *)(v6 + 485) = *(void *)(a3 + 157);
  long long v11 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(v6 + 328) = *(_OWORD *)a3;
  *(_OWORD *)(v6 + 344) = v11;
  __n128 result = *(__n128 *)(a3 + 48);
  *(_OWORD *)(v6 + 360) = *(_OWORD *)(a3 + 32);
  *(__n128 *)(v6 + 376) = result;
  v6[492] = *(unsigned char *)(*a2 + 125);
  *a1 = v7;
  a1[1] = v6;
  return result;
}

void sub_192103BC4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

__n128 ___ZN8Espresso14DummyMPSEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_17@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  long long v8 = operator new(0x168uLL);
  v8[1] = 0;
  _DWORD v8[2] = 0;
  void *v8 = &unk_1EE3820D0;
  uint64_t v9 = Espresso::base_kernel::base_kernel((uint64_t)(v8 + 3), a1);
  v8[3] = &unk_1EE32CB60;
  *((_DWORD *)v8 + 89) = a3;
  long long v10 = *(_OWORD *)(a2 + 16);
  *((_OWORD *)v8 + 19) = *(_OWORD *)a2;
  *((_OWORD *)v8 + 20) = v10;
  *((_OWORD *)v8 + 21) = *(_OWORD *)(a2 + 32);
  *((_DWORD *)v8 + 88) = *(_DWORD *)(a2 + 48);
  result.n128_u64[0] = v9;
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_192103C90(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

__n128 ___ZN8Espresso16ANERuntimeEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_37@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  uint64_t v6 = (char *)operator new(0x2A0uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)uint64_t v6 = &unk_1EE383AA0;
  Espresso::ANECompilerEngine::activation_kernel::activation_kernel((uint64_t)(v6 + 24), a1, a2);
  *((void *)v6 + 3) = &unk_1EE337E08;
  *(_OWORD *)(v6 + 648) = 0u;
  *((void *)v6 + 52) = &unk_1EE337FD0;
  v6[664] = *(unsigned char *)(*a1 + 127);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_192103D70(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

__n128 Espresso::ANECompilerEngine::activation_kernel::activation_kernel(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_OWORD *)(v5 + 288) = 0u;
  *(void *)(v5 + 280) = v5 + 288;
  *(_DWORD *)(v5 + 304) = 0;
  *(void *)(v5 + 308) = 0x3F8000003F800000;
  *(void *)(v5 + 316) = 0;
  *(_OWORD *)(v5 + 324) = 0u;
  *(_OWORD *)(v5 + 344) = 0u;
  *(_OWORD *)(v5 + 360) = 0u;
  *(_OWORD *)(v5 + 376) = 0u;
  char v6 = *(unsigned char *)(*a2 + 123);
  *(_OWORD *)(v5 + 528) = 0u;
  *(_OWORD *)(v5 + 544) = 0u;
  *(_OWORD *)(v5 + 400) = 0u;
  *(_OWORD *)(v5 + 416) = 0u;
  *(_OWORD *)(v5 + 432) = 0u;
  *(unsigned char *)(v5 + 448) = 0;
  *(_OWORD *)(v5 + 456) = 0u;
  *(_OWORD *)(v5 + 472) = 0u;
  *(_OWORD *)(v5 + 488) = 0u;
  *(_OWORD *)(v5 + 504) = 0u;
  *(unsigned char *)(v5 + 520) = 0;
  *(_DWORD *)(v5 + 560) = 1065353216;
  *(_WORD *)(v5 + 568) = 0;
  *(unsigned char *)(v5 + 570) = 0;
  __asm { FMOV            V1.2S, #1.0 }
  *(void *)(v5 + 572) = _D1;
  *(unsigned char *)(v5 + 580) = 0;
  *(_OWORD *)(v5 + 584) = 0u;
  *(unsigned char *)(v5 + 600) = v6;
  *(void *)uint64_t v5 = &unk_1EE341C98;
  *(void *)(v5 + 392) = &unk_1EE341E50;
  *(_OWORD *)(v5 + 608) = 0u;
  __n128 result = *(__n128 *)a3;
  long long v13 = *(_OWORD *)(a3 + 16);
  *(_DWORD *)(v5 + 336) = *(_DWORD *)(a3 + 32);
  *(__n128 *)(v5 + 304) = result;
  *(_OWORD *)(v5 + 320) = v13;
  return result;
}

__n128 ___ZN8Espresso16ANERuntimeEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_2@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  char v6 = operator new(0x248uLL);
  v6[1] = 0;
  v6[2] = 0;
  *char v6 = &unk_1EE383368;
  Espresso::ANECompilerEngine::concat_kernel::concat_kernel((uint64_t)(v6 + 3), a1, a2);
  double v6[3] = &unk_1EE333A80;
  v6[46] = &unk_1EE333BE0;
  *((unsigned char *)v6 + 577) = *(unsigned char *)(*a1 + 127);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_192103F44(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

__n128 Espresso::ANECompilerEngine::concat_kernel::concat_kernel(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(unsigned char *)(v5 + 340) = 0;
  *(_WORD *)(v5 + 320) = 0;
  *(_DWORD *)(v5 + 280) = 0;
  *(_DWORD *)(v5 + 312) = 0;
  char v6 = *(unsigned char *)(*a2 + 123);
  *(_OWORD *)(v5 + 480) = 0u;
  *(_OWORD *)(v5 + 496) = 0u;
  *(_OWORD *)(v5 + 352) = 0u;
  *(_OWORD *)(v5 + 368) = 0u;
  *(_OWORD *)(v5 + 384) = 0u;
  *(unsigned char *)(v5 + 400) = 0;
  *(_OWORD *)(v5 + 408) = 0u;
  *(_OWORD *)(v5 + 424) = 0u;
  *(_OWORD *)(v5 + 440) = 0u;
  *(_OWORD *)(v5 + 456) = 0u;
  *(unsigned char *)(v5 + 472) = 0;
  *(_DWORD *)(v5 + 512) = 1065353216;
  *(_WORD *)(v5 + 520) = 0;
  *(unsigned char *)(v5 + 522) = 0;
  __asm { FMOV            V1.2S, #1.0 }
  *(void *)(v5 + 524) = _D1;
  *(unsigned char *)(v5 + 532) = 0;
  *(_OWORD *)(v5 + 536) = 0u;
  *(unsigned char *)(v5 + 552) = v6;
  *(void *)uint64_t v5 = &unk_1EE33F520;
  *(void *)(v5 + 344) = &unk_1EE33F680;
  __n128 result = *(__n128 *)a3;
  long long v13 = *(_OWORD *)(a3 + 16);
  long long v14 = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(v5 + 325) = *(_OWORD *)(a3 + 45);
  *(_OWORD *)(v5 + 296) = v13;
  *(_OWORD *)(v5 + 312) = v14;
  *(__n128 *)(v5 + 280) = result;
  return result;
}

__n128 ___ZN8Espresso16ANERuntimeEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_28@<Q0>(uint64_t *a1@<X1>, __n128 *a2@<X2>, __n128 *a3@<X8>)
{
  char v6 = operator new(0x220uLL);
  v6[1] = 0;
  v6[2] = 0;
  *char v6 = &unk_1EE383790;
  Espresso::ANECompilerEngine::slice_kernel::slice_kernel((uint64_t)(v6 + 3), a1, a2);
  double v6[3] = &unk_1EE335ED8;
  v6[41] = &unk_1EE336038;
  *((unsigned char *)v6 + 537) = *(unsigned char *)(*a1 + 127);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_192104100(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

__n128 Espresso::ANECompilerEngine::slice_kernel::slice_kernel(uint64_t a1, uint64_t *a2, __n128 *a3)
{
  uint64_t v5 = a1 + 280;
  uint64_t v6 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_OWORD *)uint64_t v5 = xmmword_192DCA6B0;
  *(void *)(v6 + 296) = 0x100000000;
  char v7 = *(unsigned char *)(*a2 + 123);
  *(_OWORD *)(v6 + 440) = 0u;
  *(_OWORD *)(v6 + 456) = 0u;
  *(_OWORD *)(v6 + 312) = 0u;
  *(_OWORD *)(v6 + 328) = 0u;
  *(_OWORD *)(v6 + 344) = 0u;
  *(unsigned char *)(v6 + 360) = 0;
  *(_OWORD *)(v6 + 368) = 0u;
  *(_OWORD *)(v6 + 384) = 0u;
  *(_OWORD *)(v6 + 400) = 0u;
  *(_OWORD *)(v6 + 416) = 0u;
  *(unsigned char *)(v6 + 432) = 0;
  *(_DWORD *)(v6 + 472) = 1065353216;
  *(_WORD *)(v6 + 480) = 0;
  *(unsigned char *)(v6 + 482) = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *(void *)(v5 + 204) = _D0;
  *(unsigned char *)(v6 + 492) = 0;
  *(void *)(v6 + 496) = 0;
  *(void *)(v6 + 504) = 0;
  *(unsigned char *)(v6 + 512) = v7;
  *(void *)uint64_t v6 = &unk_1EE33F120;
  *(void *)(v6 + 304) = &unk_1EE33F280;
  __n128 result = *a3;
  *(void *)(v6 + 296) = a3[1].n128_u64[0];
  *(__n128 *)uint64_t v5 = result;
  return result;
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_35@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  uint64_t v6 = operator new(0x148uLL);
  v6[1] = 0;
  v6[2] = 0;
  *uint64_t v6 = &unk_1EE384980;
  uint64_t v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  double v6[3] = &unk_1EE33E168;
  *((_OWORD *)v6 + 19) = *(_OWORD *)a2;
  v6[40] = *(void *)(a2 + 16);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1921042A0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

double ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_15@<D0>(uint64_t *a1@<X1>, __n128 *a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::generic_load_constant_kernel_impl,std::allocator<Espresso::generic_load_constant_kernel_impl>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::load_constant_params const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

__n128 std::allocate_shared[abi:ne180100]<Espresso::generic_load_constant_kernel_impl,std::allocator<Espresso::generic_load_constant_kernel_impl>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::load_constant_params const&,void>(uint64_t *a1, uint64_t *a2, __n128 *a3)
{
  uint64_t v6 = (char *)operator new(0x198uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)uint64_t v6 = &unk_1EE389220;
  uint64_t v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a2);
  *((void *)v6 + 39) = 0;
  *((void *)v6 + 40) = 0;
  *((void *)v6 + 38) = v6 + 312;
  *((void *)v6 + 46) = 0;
  *((void *)v6 + 47) = 0;
  *((void *)v6 + 44) = 0;
  *((void *)v6 + 45) = 0;
  v6[384] = 1;
  *((void *)v6 + 49) = 0;
  v6[400] = 1;
  *((void *)v6 + 43) = a3[1].n128_u64[0];
  __n128 result = *a3;
  *((void *)v6 + 3) = &unk_1EE368608;
  *(__n128 *)(v6 + 328) = result;
  *a1 = v7;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_1921043AC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

__n128 ___ZN8Espresso16ANERuntimeEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_4@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  uint64_t v6 = operator new(0x298uLL);
  v6[1] = 0;
  v6[2] = 0;
  *uint64_t v6 = &unk_1EE383608;
  Espresso::ANECompilerEngine::batchnorm_kernel::batchnorm_kernel((uint64_t)(v6 + 3), a1, a2);
  double v6[3] = &unk_1EE334FF8;
  v6[53] = &unk_1EE3351B0;
  *((unsigned char *)v6 + 656) = *(unsigned char *)(*a1 + 127);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_192104480(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

__n128 ___ZN8Espresso16ANERuntimeEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_3@<Q0>(uint64_t *a1@<X1>, long long *a2@<X2>, __n128 *a3@<X8>)
{
  uint64_t v6 = operator new(0x348uLL);
  v6[1] = 0;
  v6[2] = 0;
  *uint64_t v6 = &unk_1EE383988;
  Espresso::ANECompilerEngine::deconvolution_kernel::deconvolution_kernel(v6 + 3, a1, a2);
  double v6[3] = &unk_1EE337290;
  v6[73] = &unk_1EE337528;
  *((unsigned char *)v6 + 834) = *(unsigned char *)(*a1 + 127);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_192104554(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

__n128 Espresso::ANECompilerEngine::deconvolution_kernel::deconvolution_kernel(void *a1, uint64_t *a2, long long *a3)
{
  long long v5 = Espresso::abstract_kernel_with_weights<Espresso::convolution_uniforms>::abstract_kernel_with_weights(a1, a2);
  v5[69] = 0;
  *(_OWORD *)(v5 + 65) = 0u;
  *(_OWORD *)(v5 + 67) = 0u;
  *(_OWORD *)(v5 + 61) = 0u;
  *(_OWORD *)(v5 + 63) = 0u;
  char v6 = *(unsigned char *)(*a2 + 123);
  *(_OWORD *)(v5 + 87) = 0u;
  *(_OWORD *)(v5 + 89) = 0u;
  *(_OWORD *)(v5 + 71) = 0u;
  *(_OWORD *)(v5 + 73) = 0u;
  *(_OWORD *)(v5 + 75) = 0u;
  *((unsigned char *)v5 + 616) = 0;
  *((_OWORD *)v5 + 39) = 0u;
  *((_OWORD *)v5 + 40) = 0u;
  *((_OWORD *)v5 + 41) = 0u;
  *((_OWORD *)v5 + 42) = 0u;
  *((unsigned char *)v5 + 688) = 0;
  *((_DWORD *)v5 + 182) = 1065353216;
  *((_WORD *)v5 + 368) = 0;
  *((unsigned char *)v5 + 738) = 0;
  __asm { FMOV            V1.2S, #1.0 }
  *(void *)((char *)v5 + 740) = _D1;
  *((unsigned char *)v5 + 748) = 0;
  *((_OWORD *)v5 + 47) = 0u;
  *((unsigned char *)v5 + 768) = v6;
  void *v5 = &unk_1EE343D40;
  v5[70] = &unk_1EE343FD8;
  *((_WORD *)v5 + 404) = 0;
  *(_OWORD *)(v5 + 97) = 0u;
  *(_OWORD *)(v5 + 99) = 0u;
  long long v12 = *a3;
  long long v13 = a3[2];
  *((_OWORD *)v5 + 20) = a3[1];
  *((_OWORD *)v5 + 21) = v13;
  *((_OWORD *)v5 + 19) = v12;
  long long v14 = a3[3];
  long long v15 = a3[4];
  long long v16 = a3[6];
  *((_OWORD *)v5 + 24) = a3[5];
  *((_OWORD *)v5 + 25) = v16;
  *((_OWORD *)v5 + 22) = v14;
  *((_OWORD *)v5 + 23) = v15;
  __n128 result = (__n128)a3[7];
  long long v18 = a3[8];
  long long v19 = a3[9];
  *(void *)((char *)v5 + 461) = *(void *)((char *)a3 + 157);
  *((_OWORD *)v5 + 27) = v18;
  *((_OWORD *)v5 + 28) = v19;
  *((__n128 *)v5 + 26) = result;
  return result;
}

__n128 ___ZN8Espresso16ANERuntimeEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_43@<Q0>(uint64_t *a1@<X1>, long long *a2@<X2>, __n128 *a3@<X8>)
{
  char v6 = operator new(0x2A0uLL);
  v6[1] = 0;
  v6[2] = 0;
  *char v6 = &unk_1EE3834F0;
  Espresso::ANECompilerEngine::pool_kernel::pool_kernel((uint64_t)(v6 + 3), a1, a2);
  double v6[3] = &unk_1EE3345B8;
  v6[57] = &unk_1EE334758;
  *((unsigned char *)v6 + 665) = *(unsigned char *)(*a1 + 127);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19210473C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

__n128 Espresso::ANECompilerEngine::pool_kernel::pool_kernel(uint64_t a1, uint64_t *a2, long long *a3)
{
  uint64_t v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(void *)(v5 + 280) = v5 + 288;
  *(_OWORD *)(v5 + 288) = 0u;
  *(_OWORD *)(v5 + 304) = xmmword_192DCA400;
  *(_OWORD *)(v5 + 320) = xmmword_192DCA240;
  *(_DWORD *)(v5 + 336) = 2;
  *(_WORD *)(v5 + 340) = 1;
  *(_OWORD *)(v5 + 342) = 0u;
  *(_OWORD *)(v5 + 358) = 0u;
  *(_OWORD *)(v5 + 376) = 0u;
  *(void *)(v5 + 392) = 0x100000001;
  *(_OWORD *)(v5 + 400) = 0u;
  *(_OWORD *)(v5 + 416) = 0u;
  char v6 = *(unsigned char *)(*a2 + 123);
  *(_OWORD *)(v5 + 568) = 0u;
  *(_OWORD *)(v5 + 584) = 0u;
  *(_OWORD *)(v5 + 440) = 0u;
  *(_OWORD *)(v5 + 456) = 0u;
  *(_OWORD *)(v5 + 472) = 0u;
  *(unsigned char *)(v5 + 488) = 0;
  *(_OWORD *)(v5 + 496) = 0u;
  *(_OWORD *)(v5 + 512) = 0u;
  *(_OWORD *)(v5 + 528) = 0u;
  *(_OWORD *)(v5 + 544) = 0u;
  *(unsigned char *)(v5 + 560) = 0;
  *(_DWORD *)(v5 + 600) = 1065353216;
  *(_WORD *)(v5 + 608) = 0;
  *(unsigned char *)(v5 + 610) = 0;
  __asm { FMOV            V1.2S, #1.0 }
  *(void *)(v5 + 612) = _D1;
  *(unsigned char *)(v5 + 620) = 0;
  *(_OWORD *)(v5 + 624) = 0u;
  *(unsigned char *)(v5 + 640) = v6;
  *(void *)uint64_t v5 = &unk_1EE33ECE0;
  *(void *)(v5 + 432) = &unk_1EE33EE80;
  long long v12 = *a3;
  long long v13 = a3[2];
  *(_OWORD *)(v5 + 320) = a3[1];
  *(_OWORD *)(v5 + 336) = v13;
  *(_OWORD *)(v5 + 304) = v12;
  __n128 result = (__n128)a3[3];
  long long v15 = a3[4];
  long long v16 = a3[6];
  *(_OWORD *)(v5 + 384) = a3[5];
  *(_OWORD *)(v5 + 400) = v16;
  *(__n128 *)(v5 + 352) = result;
  *(_OWORD *)(v5 + 368) = v15;
  return result;
}

void ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_6(uint64_t *a1@<X1>, _OWORD *a2@<X2>, int a3@<W3>, uint64_t a4@<X8>)
{
  if (a3 == 1)
  {
    unint64_t v7 = operator new(0x170uLL);
    v7[1] = 0;
    v7[2] = 0;
    *unint64_t v7 = &unk_1EE381C00;
    uint64_t v8 = Espresso::base_kernel::base_kernel((uint64_t)(v7 + 3), a1);
    uint64_t v9 = (char *)(v7 + 38);
    long long v10 = &unk_1EE32B200;
    goto LABEL_5;
  }
  if (!a3)
  {
    unint64_t v7 = operator new(0x170uLL);
    v7[1] = 0;
    v7[2] = 0;
    *unint64_t v7 = &unk_1EE386238;
    uint64_t v8 = Espresso::base_kernel::base_kernel((uint64_t)(v7 + 3), a1);
    uint64_t v9 = (char *)(v7 + 38);
    long long v10 = &unk_1EE34C580;
LABEL_5:
    v7[3] = v10;
    long long v11 = a2[1];
    *((_OWORD *)v7 + 19) = *a2;
    *((_OWORD *)v7 + 20) = v11;
    *((_OWORD *)v7 + 21) = a2[2];
    *(_OWORD *)(v9 + 45) = *(_OWORD *)((char *)a2 + 45);
    *(void *)&long long v12 = v8;
    *((void *)&v12 + 1) = v7;
    *(_OWORD *)a4 = v12;
    return;
  }
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
}

void sub_19210498C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

double ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_12@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::activation_kernel_cpu,std::allocator<Espresso::activation_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::activation_params const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

__n128 std::allocate_shared[abi:ne180100]<Espresso::activation_kernel_cpu,std::allocator<Espresso::activation_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::activation_params const&,void>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  char v6 = (char *)operator new(0x1C0uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)char v6 = &unk_1EE387428;
  uint64_t v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a2);
  *((void *)v6 + 39) = 0;
  *((void *)v6 + 40) = 0;
  *((void *)v6 + 38) = v6 + 312;
  *((_OWORD *)v6 + 24) = 0u;
  *((_OWORD *)v6 + 25) = 0u;
  *((void *)v6 + 3) = &unk_1EE353E58;
  *((_OWORD *)v6 + 26) = 0u;
  *((_OWORD *)v6 + 27) = 0u;
  *((_DWORD *)v6 + 90) = *(_DWORD *)(a3 + 32);
  __n128 result = *(__n128 *)a3;
  long long v9 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(v6 + 328) = *(_OWORD *)a3;
  *(_OWORD *)(v6 + 344) = v9;
  *((void *)v6 + 46) = 0;
  *((void *)v6 + 47) = 0;
  *a1 = v7;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_192104A94(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

__n128 ___ZN8Espresso14DummyMPSEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_21@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  uint64_t v8 = operator new(0x150uLL);
  v8[1] = 0;
  _DWORD v8[2] = 0;
  void *v8 = &unk_1EE381E30;
  uint64_t v9 = Espresso::base_kernel::base_kernel((uint64_t)(v8 + 3), a1);
  v8[3] = &unk_1EE32BB70;
  *((_DWORD *)v8 + 82) = a3;
  *((_OWORD *)v8 + 19) = *(_OWORD *)a2;
  v8[40] = *(void *)(a2 + 16);
  result.n128_u64[0] = v9;
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_192104B58(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_37@<Q0>(uint64_t *a1@<X1>, void *a2@<X2>, __n128 *a3@<X8>)
{
  char v6 = operator new(0x138uLL);
  v6[1] = 0;
  v6[2] = 0;
  *char v6 = &unk_1EE382FE8;
  uint64_t v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  double v6[3] = &unk_1EE332608;
  v6[38] = *a2;
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_192104C04(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

double ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_73@<D0>(uint64_t *a1@<X1>, __n128 *a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::expand_dims_kernel_cpu,std::allocator<Espresso::expand_dims_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::expand_dims_params_t const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

__n128 std::allocate_shared[abi:ne180100]<Espresso::expand_dims_kernel_cpu,std::allocator<Espresso::expand_dims_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::expand_dims_params_t const&,void>(uint64_t *a1, uint64_t *a2, __n128 *a3)
{
  char v6 = (__n128 *)operator new(0x1B8uLL);
  v6->n128_u64[1] = 0;
  v6[1].n128_u64[0] = 0;
  v6->n128_u64[0] = (unint64_t)&unk_1EE387818;
  __n128 v15 = a3[6];
  __n128 v16 = a3[7];
  unint64_t v17 = a3[8].n128_u64[0];
  __n128 v11 = a3[2];
  __n128 v12 = a3[3];
  __n128 v13 = a3[4];
  __n128 v14 = a3[5];
  __n128 v9 = *a3;
  __n128 v10 = a3[1];
  uint64_t v7 = Espresso::base_kernel::base_kernel((uint64_t)&v6[1].n128_i64[1], a2);
  v6[1].n128_u64[1] = (unint64_t)&unk_1EE358080;
  v6[25] = v15;
  v6[26] = v16;
  v6[27].n128_u64[0] = v17;
  v6[21] = v11;
  v6[22] = v12;
  v6[23] = v13;
  v6[24] = v14;
  __n128 result = v10;
  v6[19] = v9;
  v6[20] = v10;
  *a1 = v7;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_192104D30(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

__n128 ___ZN8Espresso14DummyMPSEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_7@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  uint64_t v8 = (char *)operator new(0x1A8uLL);
  *((void *)v8 + 1) = 0;
  *((void *)v8 + 2) = 0;
  *(void *)uint64_t v8 = &unk_1EE382060;
  uint64_t v9 = Espresso::base_kernel::base_kernel((uint64_t)(v8 + 24), a1);
  *((void *)v8 + 39) = 0;
  *((void *)v8 + 40) = 0;
  *((void *)v8 + 38) = v8 + 312;
  *((_OWORD *)v8 + 23) = 0u;
  *((_OWORD *)v8 + 24) = 0u;
  *((_OWORD *)v8 + 25) = 0u;
  *((void *)v8 + 3) = &unk_1EE32C868;
  *((_DWORD *)v8 + 104) = a3;
  *((_DWORD *)v8 + 90) = *(_DWORD *)(a2 + 32);
  long long v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v8 + 328) = *(_OWORD *)a2;
  *(_OWORD *)(v8 + 344) = v10;
  result.n128_u64[0] = v9;
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_192104E10(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

double ___ZN8Espresso10BNNSEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_5@<D0>(uint64_t *a1@<X1>, long long *a2@<X2>, int a3@<W3>, _OWORD *a4@<X8>)
{
  int v7 = a3;
  std::allocate_shared[abi:ne180100]<Espresso::BNNSEngine::pool_kernel,std::allocator<Espresso::BNNSEngine::pool_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::pool_params const&,void>(v6, a1, &v7, a2);
  double result = v6[0];
  *a4 = *(_OWORD *)v6;
  return result;
}

void std::allocate_shared[abi:ne180100]<Espresso::BNNSEngine::pool_kernel,std::allocator<Espresso::BNNSEngine::pool_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::pool_params const&,void>(void *a1, uint64_t *a2, int *a3, long long *a4)
{
  uint64_t v8 = (char *)operator new(0x208uLL);
  *((void *)v8 + 1) = 0;
  *((void *)v8 + 2) = 0;
  *(void *)uint64_t v8 = &unk_1EE381110;
  long long v9 = a4[5];
  long long v29 = a4[4];
  long long v30 = v9;
  long long v31 = a4[6];
  long long v10 = a4[1];
  long long v25 = *a4;
  long long v26 = v10;
  long long v11 = a4[3];
  long long v27 = a4[2];
  long long v28 = v11;
  Espresso::base_kernel::base_kernel((uint64_t)(v8 + 24), a2);
  *((void *)v8 + 3) = &unk_1EE327D58;
  *((void *)v8 + 39) = 0;
  *((void *)v8 + 40) = 0;
  *((void *)v8 + 38) = v8 + 312;
  *(_OWORD *)(v8 + 328) = xmmword_192DCA400;
  *(_OWORD *)(v8 + 344) = xmmword_192DCA240;
  *((_DWORD *)v8 + 90) = 2;
  *((_WORD *)v8 + 182) = 1;
  *(_OWORD *)(v8 + 366) = 0u;
  *(_OWORD *)(v8 + 382) = 0u;
  *((void *)v8 + 50) = 0;
  *((void *)v8 + 51) = 0;
  *((void *)v8 + 52) = 0x100000001;
  *(_OWORD *)(v8 + 424) = 0u;
  *(_OWORD *)(v8 + 440) = 0u;
  *(_OWORD *)(v8 + 489) = 0u;
  *((_OWORD *)v8 + 30) = 0u;
  *((_OWORD *)v8 + 29) = 0u;
  int v12 = *a3;
  *((_DWORD *)v8 + 114) = v12;
  if (*a2)
  {
    if (v13)
    {
      v8[504] = v13[160];
      *((void *)v8 + 62) = *((void *)v13 + 21);
    }
  }
  *((void *)v8 + 3) = &unk_1EE327910;
  *(void *)(v8 + 508) = 0;
  long long v14 = v30;
  *(_OWORD *)(v8 + 392) = v29;
  *(_OWORD *)(v8 + 408) = v14;
  *(_OWORD *)(v8 + 424) = v31;
  long long v15 = v26;
  *(_OWORD *)(v8 + 328) = v25;
  *(_OWORD *)(v8 + 344) = v15;
  long long v16 = v28;
  *(_OWORD *)(v8 + 360) = v27;
  *(_OWORD *)(v8 + 376) = v16;
  if (v12 == 1)
  {
    unint64_t v17 = (char *)operator new(0x1C8uLL);
    *((void *)v17 + 1) = 0;
    *((void *)v17 + 2) = 0;
    *(void *)unint64_t v17 = &unk_1EE381B90;
    uint64_t v18 = Espresso::base_kernel::base_kernel((uint64_t)(v17 + 24), a2);
    *((void *)v17 + 39) = 0;
    *((void *)v17 + 40) = 0;
    *((void *)v17 + 38) = v17 + 312;
    *((void *)v17 + 55) = 0;
    *((void *)v17 + 56) = 0;
    *((void *)v17 + 3) = &unk_1EE32AF10;
    long long v19 = v30;
    *(_OWORD *)(v17 + 392) = v29;
    *(_OWORD *)(v17 + 408) = v19;
    *(_OWORD *)(v17 + 424) = v31;
    long long v20 = v26;
    *(_OWORD *)(v17 + 328) = v25;
    *(_OWORD *)(v17 + 344) = v20;
    long long v21 = v28;
    *(_OWORD *)(v17 + 360) = v27;
    *(_OWORD *)(v17 + 376) = v21;
  }
  else
  {
    unint64_t v17 = (char *)operator new(0x1C8uLL);
    *((void *)v17 + 1) = 0;
    *((void *)v17 + 2) = 0;
    *(void *)unint64_t v17 = &unk_1EE383170;
    Espresso::pool_kernel_cpu::pool_kernel_cpu((uint64_t)(v17 + 24), a2, v22, &v25);
  }
  *(void *)&long long v23 = v18;
  *((void *)&v23 + 1) = v17;
  long long v24 = (std::__shared_weak_count *)*((void *)v8 + 60);
  *(_OWORD *)(v8 + 472) = v23;
  if (v24) {
    nitro::nitro_function::nitro_function(v24);
  }
  *a1 = v8 + 24;
  a1[1] = v8;
}

void sub_192105120(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v3);
  operator delete(v5);
  Espresso::BNNSEngine::base_bnns_kernel<Espresso::generic_pool_kernel>::~base_bnns_kernel(v2);
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v6);
  _Unwind_Resume(a1);
}

__n128 Espresso::pool_kernel_cpu::pool_kernel_cpu(uint64_t a1, uint64_t *a2, uint64_t a3, long long *a4)
{
  uint64_t v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(void *)(v5 + 288) = 0;
  *(void *)(v5 + 296) = 0;
  *(void *)(v5 + 280) = v5 + 288;
  *(_OWORD *)(v5 + 304) = xmmword_192DCA400;
  *(_OWORD *)(v5 + 320) = xmmword_192DCA240;
  *(_DWORD *)(v5 + 336) = 2;
  *(_WORD *)(v5 + 340) = 1;
  *(_OWORD *)(v5 + 342) = 0u;
  *(_OWORD *)(v5 + 358) = 0u;
  *(void *)(v5 + 376) = 0;
  *(void *)(v5 + 384) = 0;
  *(void *)(v5 + 392) = 0x100000001;
  *(_OWORD *)(v5 + 400) = 0u;
  *(_OWORD *)(v5 + 416) = 0u;
  *(void *)uint64_t v5 = &unk_1EE332BF8;
  long long v6 = *a4;
  long long v7 = a4[2];
  *(_OWORD *)(v5 + 320) = a4[1];
  *(_OWORD *)(v5 + 336) = v7;
  *(_OWORD *)(v5 + 304) = v6;
  __n128 result = (__n128)a4[3];
  long long v9 = a4[4];
  long long v10 = a4[6];
  *(_OWORD *)(v5 + 384) = a4[5];
  *(_OWORD *)(v5 + 400) = v10;
  *(__n128 *)(v5 + 352) = result;
  *(_OWORD *)(v5 + 368) = v9;
  return result;
}

{
  uint64_t v5;
  long long v6;
  long long v7;
  __n128 result;
  long long v9;
  long long v10;

  uint64_t v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(void *)(v5 + 288) = 0;
  *(void *)(v5 + 296) = 0;
  *(void *)(v5 + 280) = v5 + 288;
  *(_OWORD *)(v5 + 304) = xmmword_192DCA400;
  *(_OWORD *)(v5 + 320) = xmmword_192DCA240;
  *(_DWORD *)(v5 + 336) = 2;
  *(_WORD *)(v5 + 340) = 1;
  *(_OWORD *)(v5 + 342) = 0u;
  *(_OWORD *)(v5 + 358) = 0u;
  *(void *)(v5 + 376) = 0;
  *(void *)(v5 + 384) = 0;
  *(void *)(v5 + 392) = 0x100000001;
  *(_OWORD *)(v5 + 400) = 0u;
  *(_OWORD *)(v5 + 416) = 0u;
  *(void *)uint64_t v5 = &unk_1EE332BF8;
  long long v6 = *a4;
  long long v7 = a4[2];
  *(_OWORD *)(v5 + 320) = a4[1];
  *(_OWORD *)(v5 + 336) = v7;
  *(_OWORD *)(v5 + 304) = v6;
  __n128 result = (__n128)a4[3];
  long long v9 = a4[4];
  long long v10 = a4[6];
  *(_OWORD *)(v5 + 384) = a4[5];
  *(_OWORD *)(v5 + 400) = v10;
  *(__n128 *)(v5 + 352) = result;
  *(_OWORD *)(v5 + 368) = v9;
  return result;
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_22@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  long long v6 = operator new(0x158uLL);
  v6[1] = 0;
  v6[2] = 0;
  *long long v6 = &unk_1EE386890;
  uint64_t v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  double v6[3] = &unk_1EE34EA30;
  long long v8 = *(_OWORD *)(a2 + 16);
  *((_OWORD *)v6 + 19) = *(_OWORD *)a2;
  *((_OWORD *)v6 + 20) = v8;
  v6[42] = *(void *)(a2 + 32);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1921052B0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

__n128 ___ZN8Espresso14DummyMPSEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_18@<Q0>(uint64_t *a1@<X1>, _OWORD *a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  long long v8 = (char *)operator new(0x178uLL);
  *((void *)v8 + 1) = 0;
  *((void *)v8 + 2) = 0;
  *(void *)long long v8 = &unk_1EE381EA0;
  uint64_t v9 = Espresso::base_kernel::base_kernel((uint64_t)(v8 + 24), a1);
  *((void *)v8 + 3) = &unk_1EE32BE20;
  *((_DWORD *)v8 + 92) = a3;
  long long v10 = a2[1];
  *((_OWORD *)v8 + 19) = *a2;
  *((_OWORD *)v8 + 20) = v10;
  *((_OWORD *)v8 + 21) = a2[2];
  *(_OWORD *)(v8 + 349) = *(_OWORD *)((char *)a2 + 45);
  result.n128_u64[0] = v9;
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_192105380(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

__n128 ___ZN8Espresso16ANERuntimeEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_52@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  long long v6 = operator new(0x368uLL);
  v6[1] = 0;
  v6[2] = 0;
  *long long v6 = &unk_1EE383D78;
  Espresso::ANECompilerEngine::inner_product_kernel::inner_product_kernel((uint64_t)(v6 + 3), a1, a2);
  long long v7 = *(_OWORD *)(a2 + 48);
  v8[21] = *(_OWORD *)(a2 + 32);
  v8[22] = v7;
  *((_DWORD *)v6 + 114) = *(_DWORD *)(a2 + 128);
  long long v9 = *(_OWORD *)(a2 + 112);
  v8[25] = *(_OWORD *)(a2 + 96);
  v8[26] = v9;
  long long v10 = *(_OWORD *)(a2 + 80);
  v8[23] = *(_OWORD *)(a2 + 64);
  v8[24] = v10;
  long long v11 = *(_OWORD *)(a2 + 16);
  v8[19] = *(_OWORD *)a2;
  v8[20] = v11;
  double v6[3] = &unk_1EE339888;
  v6[71] = &unk_1EE339AB8;
  *((unsigned char *)v6 + 866) = *(unsigned char *)(*a1 + 127);
  result.n128_u64[0] = (unint64_t)v8;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19210547C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

__n128 ___ZN8Espresso16ANERuntimeEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_7@<Q0>(uint64_t *a1@<X1>, _DWORD *a2@<X2>, __n128 *a3@<X8>)
{
  long long v6 = operator new(0x210uLL);
  v6[1] = 0;
  v6[2] = 0;
  *long long v6 = &unk_1EE383288;
  Espresso::ANECompilerEngine::copy_kernel::copy_kernel((uint64_t)(v6 + 3), a1, a2);
  double v6[3] = &unk_1EE333240;
  v6[39] = &unk_1EE3333A0;
  *((unsigned char *)v6 + 521) = *(unsigned char *)(*a1 + 127);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_192105550(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

__n128 ___ZN8Espresso16ANERuntimeEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_54@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  long long v6 = operator new(0x290uLL);
  v6[1] = 0;
  v6[2] = 0;
  *long long v6 = &unk_1EE383BF0;
  Espresso::ANECompilerEngine::mix_expand_dims_kernel::mix_expand_dims_kernel((uint64_t)(v6 + 3), a1, a2);
  double v6[3] = &unk_1EE338A88;
  v6[55] = &unk_1EE338BE8;
  *((unsigned char *)v6 + 649) = *(unsigned char *)(*a1 + 127);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_192105624(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

__n128 ___ZN8Espresso16ANERuntimeEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_44@<Q0>(uint64_t *a1@<X1>, _OWORD *a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  long long v8 = (char *)operator new(0x230uLL);
  *((void *)v8 + 1) = 0;
  *((void *)v8 + 2) = 0;
  *(void *)long long v8 = &unk_1EE383870;
  Espresso::ANECompilerEngine::softmax_kernel::softmax_kernel((uint64_t)(v8 + 24), a1, a3, (uint64_t)a2);
  *((_OWORD *)v8 + 19) = *a2;
  *(_OWORD *)(v8 + 316) = *(_OWORD *)((char *)a2 + 12);
  *((void *)v8 + 3) = &unk_1EE336808;
  *((void *)v8 + 42) = &unk_1EE336968;
  v8[552] = *(unsigned char *)(*a1 + 127);
  result.n128_u64[0] = v9;
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_19210571C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

__n128 Espresso::ANECompilerEngine::mix_expand_dims_kernel::mix_expand_dims_kernel(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(void *)(v5 + 408) = 0;
  *(_OWORD *)(v5 + 376) = 0u;
  *(_OWORD *)(v5 + 392) = 0u;
  *(_OWORD *)(v5 + 344) = 0u;
  *(_OWORD *)(v5 + 360) = 0u;
  *(_OWORD *)(v5 + 312) = 0u;
  *(_OWORD *)(v5 + 328) = 0u;
  *(_OWORD *)(v5 + 280) = 0u;
  *(_OWORD *)(v5 + 296) = 0u;
  char v6 = *(unsigned char *)(*a2 + 123);
  *(_OWORD *)(v5 + 552) = 0u;
  *(_OWORD *)(v5 + 568) = 0u;
  *(_OWORD *)(v5 + 424) = 0u;
  *(_OWORD *)(v5 + 440) = 0u;
  *(_OWORD *)(v5 + 456) = 0u;
  *(unsigned char *)(v5 + 472) = 0;
  *(_OWORD *)(v5 + 480) = 0u;
  *(_OWORD *)(v5 + 496) = 0u;
  *(_OWORD *)(v5 + 512) = 0u;
  *(_OWORD *)(v5 + 528) = 0u;
  *(unsigned char *)(v5 + 544) = 0;
  *(_DWORD *)(v5 + 584) = 1065353216;
  *(_WORD *)(v5 + 592) = 0;
  *(unsigned char *)(v5 + 594) = 0;
  __asm { FMOV            V1.2S, #1.0 }
  *(void *)(v5 + 596) = _D1;
  *(unsigned char *)(v5 + 604) = 0;
  *(_OWORD *)(v5 + 608) = 0u;
  *(unsigned char *)(v5 + 624) = v6;
  *(void *)uint64_t v5 = &unk_1EE345C08;
  *(void *)(v5 + 416) = &unk_1EE345D68;
  *(_OWORD *)(v5 + 280) = *(_OWORD *)a3;
  long long v12 = *(_OWORD *)(a3 + 16);
  long long v13 = *(_OWORD *)(a3 + 32);
  long long v14 = *(_OWORD *)(a3 + 64);
  *(_OWORD *)(v5 + 328) = *(_OWORD *)(a3 + 48);
  *(_OWORD *)(v5 + 344) = v14;
  *(_OWORD *)(v5 + 296) = v12;
  *(_OWORD *)(v5 + 312) = v13;
  __n128 result = *(__n128 *)(a3 + 80);
  long long v16 = *(_OWORD *)(a3 + 96);
  long long v17 = *(_OWORD *)(a3 + 112);
  *(void *)(v5 + 408) = *(void *)(a3 + 128);
  *(_OWORD *)(v5 + 376) = v16;
  *(_OWORD *)(v5 + 392) = v17;
  *(__n128 *)(v5 + 360) = result;
  return result;
}

__n128 Espresso::ANECompilerEngine::softmax_kernel::softmax_kernel(uint64_t a1, uint64_t *a2, int a3, uint64_t a4)
{
  uint64_t v7 = a1 + 280;
  uint64_t v8 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_DWORD *)(v8 + 304) = 256;
  *(_OWORD *)uint64_t v7 = xmmword_192DCA290;
  *(void *)(v8 + 296) = 1;
  *(_DWORD *)(v8 + 308) = 0;
  char v9 = *(unsigned char *)(*a2 + 123);
  *(_OWORD *)(v8 + 448) = 0u;
  *(_OWORD *)(v8 + 464) = 0u;
  *(_OWORD *)(v8 + 320) = 0u;
  *(_OWORD *)(v8 + 336) = 0u;
  *(_OWORD *)(v8 + 352) = 0u;
  *(unsigned char *)(v8 + 368) = 0;
  *(_OWORD *)(v8 + 376) = 0u;
  *(_OWORD *)(v8 + 392) = 0u;
  *(_OWORD *)(v8 + 408) = 0u;
  *(_OWORD *)(v8 + 424) = 0u;
  *(unsigned char *)(v8 + 440) = 0;
  *(_DWORD *)(v8 + 480) = 1065353216;
  *(_WORD *)(v8 + 488) = 0;
  *(unsigned char *)(v8 + 490) = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *(void *)(v7 + 212) = _D0;
  *(unsigned char *)(v8 + 500) = 0;
  *(void *)(v8 + 504) = 0;
  *(void *)(v8 + 512) = 0;
  *(unsigned char *)(v8 + 520) = v9;
  *(void *)uint64_t v8 = &unk_1EE340400;
  *(void *)(v8 + 312) = &unk_1EE340560;
  *(_DWORD *)(v8 + 524) = a3;
  __n128 result = *(__n128 *)a4;
  *(_OWORD *)(v7 + 12) = *(_OWORD *)(a4 + 12);
  *(__n128 *)uint64_t v7 = result;
  return result;
}

double Espresso::ANECompilerEngine::copy_kernel::copy_kernel(uint64_t a1, uint64_t *a2, _DWORD *a3)
{
  uint64_t v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_DWORD *)(v5 + 280) = 0;
  char v6 = *(unsigned char *)(*a2 + 123);
  *(_OWORD *)(v5 + 424) = 0u;
  *(_OWORD *)(v5 + 440) = 0u;
  *(_OWORD *)(v5 + 296) = 0u;
  *(_OWORD *)(v5 + 312) = 0u;
  *(_OWORD *)(v5 + 328) = 0u;
  *(unsigned char *)(v5 + 344) = 0;
  *(unsigned char *)(v5 + 416) = 0;
  *(_OWORD *)(v5 + 384) = 0u;
  *(_OWORD *)(v5 + 400) = 0u;
  *(_OWORD *)(v5 + 352) = 0u;
  *(_OWORD *)(v5 + 368) = 0u;
  *(_DWORD *)(v5 + 456) = 1065353216;
  *(_WORD *)(v5 + 464) = 0;
  *(unsigned char *)(v5 + 466) = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *(double *)(v5 + 468) = result;
  *(unsigned char *)(v5 + 476) = 0;
  *(void *)(v5 + 480) = 0;
  *(void *)(v5 + 488) = 0;
  *(unsigned char *)(v5 + 496) = v6;
  *(void *)uint64_t v5 = &unk_1EE33E6E0;
  *(void *)(v5 + 288) = &unk_1EE33E840;
  *(_DWORD *)(v5 + 280) = *a3;
  return result;
}

__n128 ___ZN8Espresso10BNNSEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_4@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  uint64_t v8 = (char *)operator new(0x2D0uLL);
  *((void *)v8 + 1) = 0;
  *((void *)v8 + 2) = 0;
  *(void *)uint64_t v8 = &unk_1EE381298;
  Espresso::abstract_kernel_with_weights<Espresso::convolution_uniforms>::abstract_kernel_with_weights((void *)v8 + 3, a1);
  *((void *)v8 + 72) = 0;
  long long v9 = 0uLL;
  *((_OWORD *)v8 + 34) = 0u;
  *((_OWORD *)v8 + 35) = 0u;
  *((_OWORD *)v8 + 32) = 0u;
  *((_OWORD *)v8 + 33) = 0u;
  *((void *)v8 + 3) = &unk_1EE328170;
  *((_OWORD *)v8 + 37) = 0u;
  *((_OWORD *)v8 + 38) = 0u;
  *(_OWORD *)(v8 + 617) = 0u;
  *((_DWORD *)v8 + 146) = a3;
  long long v10 = (const void *)*a1;
  if (*a1)
  {
    long long v9 = 0uLL;
    if (v11)
    {
      v8[632] = v11[160];
      *((void *)v8 + 78) = *((void *)v11 + 21);
    }
  }
  *((void *)v8 + 3) = &unk_1EE328A78;
  *((_OWORD *)v8 + 40) = v9;
  *((_OWORD *)v8 + 41) = v9;
  *((_OWORD *)v8 + 42) = v9;
  *((_OWORD *)v8 + 43) = v9;
  *((_OWORD *)v8 + 44) = v9;
  long long v12 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(v8 + 456) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(v8 + 472) = v12;
  long long v13 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(v8 + 392) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v8 + 408) = v13;
  long long v14 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(v8 + 424) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(v8 + 440) = v14;
  long long v15 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v8 + 328) = *(_OWORD *)a2;
  *(_OWORD *)(v8 + 344) = v15;
  long long v16 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v8 + 360) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v8 + 376) = v16;
  *(void *)(v8 + 485) = *(void *)(a2 + 157);
  if (!v10) {
    goto LABEL_14;
  }
  if (!v17) {
    goto LABEL_14;
  }
  uint64_t v18 = v17;
  std::string::basic_string[abi:ne180100]<0>(&__p, "bnns.experimental.enable_deconvolution");
  long long v19 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v18 + 22, (uint64_t)&__p);
  long long v20 = v19;
  if (v24 < 0)
  {
    operator delete(__p);
    if (!v20) {
      goto LABEL_14;
    }
LABEL_10:
    if (*((_DWORD *)v8 + 109) != 1
      && *((__int16 *)v8 + 212) <= 1
      && *((__int16 *)v8 + 213) <= 1
      && *((int *)v8 + 111) < 2)
    {
      goto LABEL_16;
    }
    goto LABEL_14;
  }
  if (v19) {
    goto LABEL_10;
  }
LABEL_14:
  std::string __p = 0;
  long long v23 = 0;
  Espresso::BNNSEngine::deconvolution_kernel::__create_fallback((void *)v8 + 3, (uint64_t)&__p);
  if (v23) {
    nitro::nitro_function::nitro_function(v23);
  }
LABEL_16:
  result.n128_u64[0] = (unint64_t)(v8 + 24);
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_192105C7C(_Unwind_Exception *a1)
{
  uint64_t shared_weak_owners = (std::__shared_weak_count_vtbl *)v1[28].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    v1[29].__vftable = shared_weak_owners;
    operator delete(shared_weak_owners);
  }
  uint64_t shared_owners = (std::__shared_weak_count *)v1[28].__shared_owners_;
  if (shared_owners) {
    nitro::nitro_function::nitro_function(shared_owners);
  }
  char v6 = (std::__shared_weak_count *)v1[27].__shared_weak_owners_;
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }
  uint64_t v7 = (std::__shared_weak_count *)v1[27].__vftable;
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  Espresso::BNNSEngine::base_bnns_kernel<Espresso::generic_deconvolution_kernel>::~base_bnns_kernel(v2);
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v8);
  _Unwind_Resume(a1);
}

void Espresso::BNNSEngine::deconvolution_kernel::__create_fallback(void *a1, uint64_t a2)
{
  if (!a1[72])
  {
    uint64_t v4 = a1 + 1;
    uint64_t v5 = (char *)operator new(0x288uLL);
    *((void *)v5 + 1) = 0;
    *((void *)v5 + 2) = 0;
    *(void *)uint64_t v5 = &unk_1EE387F18;
    char v6 = Espresso::abstract_kernel_with_weights<Espresso::convolution_uniforms>::abstract_kernel_with_weights((void *)v5 + 3, v4);
    *((void *)v5 + 72) = 0;
    *((_OWORD *)v5 + 34) = 0u;
    *((_OWORD *)v5 + 35) = 0u;
    *((_OWORD *)v5 + 32) = 0u;
    *((_OWORD *)v5 + 33) = 0u;
    *((void *)v5 + 3) = &unk_1EE35B870;
    *(_OWORD *)(v5 + 584) = 0u;
    *(_OWORD *)(v5 + 600) = 0u;
    *(_OWORD *)(v5 + 616) = 0u;
    *(_OWORD *)(v5 + 632) = 0u;
    long long v7 = *((_OWORD *)a1 + 24);
    *(_OWORD *)(v5 + 392) = *((_OWORD *)a1 + 23);
    *(_OWORD *)(v5 + 408) = v7;
    long long v8 = *((_OWORD *)a1 + 28);
    *(_OWORD *)(v5 + 456) = *((_OWORD *)a1 + 27);
    *(_OWORD *)(v5 + 472) = v8;
    long long v9 = *((_OWORD *)a1 + 26);
    *(_OWORD *)(v5 + 424) = *((_OWORD *)a1 + 25);
    *(_OWORD *)(v5 + 440) = v9;
    *(void *)(v5 + 485) = *(void *)((char *)a1 + 461);
    long long v10 = *((_OWORD *)a1 + 20);
    *(_OWORD *)(v5 + 328) = *((_OWORD *)a1 + 19);
    *(_OWORD *)(v5 + 344) = v10;
    long long v11 = *((_OWORD *)a1 + 22);
    *(_OWORD *)(v5 + 360) = *((_OWORD *)a1 + 21);
    *(_OWORD *)(v5 + 376) = v11;
    v5[492] = *(unsigned char *)(a1[1] + 125);
    atomic_fetch_add_explicit((atomic_ullong *volatile)v5 + 1, 1uLL, memory_order_relaxed);
    a1[72] = v6;
    long long v12 = (std::__shared_weak_count *)a1[73];
    a1[73] = v5;
    if (v12) {
      nitro::nitro_function::nitro_function(v12);
    }
    long long v13 = (std::__shared_weak_count *)a1[80];
    uint64_t v20 = a1[79];
    long long v21 = v13;
    if (v13) {
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(void *, uint64_t *))(*a1 + 400))(a1, &v20);
    if (v21) {
      nitro::nitro_function::nitro_function(v21);
    }
    long long v14 = (std::__shared_weak_count *)a1[82];
    uint64_t v18 = a1[81];
    long long v19 = v14;
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(void *, uint64_t *, uint64_t))(*a1 + 544))(a1, &v18, a2);
    if (v19) {
      nitro::nitro_function::nitro_function(v19);
    }
    long long v15 = (std::__shared_weak_count *)a1[78];
    uint64_t v16 = a1[77];
    long long v17 = v15;
    if (v15) {
      atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(void *, uint64_t *))(*a1 + 392))(a1, &v16);
    if (v17) {
      nitro::nitro_function::nitro_function(v17);
    }
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v5);
  }
}

void sub_192105F1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  nitro::nitro_function::nitro_function(v10);
  _Unwind_Resume(a1);
}

__n128 ___ZN8Espresso16ANERuntimeEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_40@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  char v6 = operator new(0x230uLL);
  v6[1] = 0;
  v6[2] = 0;
  *char v6 = &unk_1EE383838;
  Espresso::ANECompilerEngine::reshape_kernel::reshape_kernel((uint64_t)(v6 + 3), a1, a2);
  double v6[3] = &unk_1EE336608;
  v6[43] = &unk_1EE336768;
  *((unsigned char *)v6 + 554) = *(unsigned char *)(*a1 + 127);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19210602C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_8(uint64_t *a1@<X1>, __n128 *a2@<X2>, int a3@<W3>, uint64_t a4@<X8>)
{
  if (a3 == 1)
  {
    std::allocate_shared[abi:ne180100]<Espresso::CPUFP16Engine::elementwise_kernel_cpu,std::allocator<Espresso::CPUFP16Engine::elementwise_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::elementwise_params const&,void>((uint64_t *)&v5, a1, a2);
    goto LABEL_5;
  }
  if (!a3)
  {
    std::allocate_shared[abi:ne180100]<Espresso::elementwise_kernel_cpu,std::allocator<Espresso::elementwise_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::elementwise_params const&,void>((uint64_t *)&v5, a1, a2);
LABEL_5:
    *(_OWORD *)a4 = v5;
    return;
  }
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
}

double ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_72@<D0>(uint64_t *a1@<X1>, __n128 *a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::squeeze_kernel_cpu,std::allocator<Espresso::squeeze_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::squeeze_params_t const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

__n128 std::allocate_shared[abi:ne180100]<Espresso::squeeze_kernel_cpu,std::allocator<Espresso::squeeze_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::squeeze_params_t const&,void>(uint64_t *a1, uint64_t *a2, __n128 *a3)
{
  char v6 = (__n128 *)operator new(0x1C0uLL);
  v6->n128_u64[1] = 0;
  v6[1].n128_u64[0] = 0;
  v6->n128_u64[0] = (unint64_t)&unk_1EE386970;
  __n128 v15 = a3[6];
  __n128 v16 = a3[7];
  __n128 v17 = a3[8];
  __n128 v11 = a3[2];
  __n128 v12 = a3[3];
  __n128 v13 = a3[4];
  __n128 v14 = a3[5];
  __n128 v9 = *a3;
  __n128 v10 = a3[1];
  uint64_t v7 = Espresso::base_kernel::base_kernel((uint64_t)&v6[1].n128_i64[1], a2);
  v6[1].n128_u64[1] = (unint64_t)&unk_1EE34EE38;
  v6[25] = v15;
  v6[26] = v16;
  v6[27] = v17;
  v6[21] = v11;
  v6[22] = v12;
  v6[23] = v13;
  v6[24] = v14;
  __n128 result = v10;
  v6[19] = v9;
  v6[20] = v10;
  *a1 = v7;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_1921061B0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

__n128 Espresso::ANECompilerEngine::reshape_kernel::reshape_kernel(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = a1 + 296;
  uint64_t v6 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_OWORD *)(v6 + 280) = 0u;
  *(_OWORD *)uint64_t v5 = xmmword_192DCA380;
  *(_WORD *)(v6 + 312) = 1;
  *(_DWORD *)(v6 + 316) = 1;
  char v7 = *(unsigned char *)(*a2 + 123);
  *(_OWORD *)(v6 + 456) = 0u;
  *(_OWORD *)(v6 + 472) = 0u;
  *(_OWORD *)(v6 + 328) = 0u;
  *(_OWORD *)(v6 + 344) = 0u;
  *(_OWORD *)(v6 + 360) = 0u;
  *(unsigned char *)(v6 + 376) = 0;
  *(_OWORD *)(v6 + 384) = 0u;
  *(_OWORD *)(v6 + 400) = 0u;
  *(_OWORD *)(v6 + 416) = 0u;
  *(_OWORD *)(v6 + 432) = 0u;
  *(unsigned char *)(v6 + 448) = 0;
  *(_DWORD *)(v6 + 488) = 1065353216;
  *(_WORD *)(v6 + 496) = 0;
  *(unsigned char *)(v6 + 498) = 0;
  __asm { FMOV            V1.2S, #1.0 }
  *(void *)(v5 + 204) = _D1;
  *(unsigned char *)(v6 + 508) = 0;
  *(_OWORD *)(v6 + 512) = 0u;
  *(unsigned char *)(v6 + 528) = v7;
  *(void *)uint64_t v6 = &unk_1EE340200;
  *(void *)(v6 + 320) = &unk_1EE340360;
  *(unsigned char *)(v6 + 529) = 0;
  __n128 result = *(__n128 *)a3;
  long long v14 = *(_OWORD *)(a3 + 16);
  *(void *)(v6 + 312) = *(void *)(a3 + 32);
  *(__n128 *)(v6 + 280) = result;
  *(_OWORD *)(v6 + 296) = v14;
  return result;
}

double ___ZN8Espresso14DummyMPSEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_11@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::deconvolution_kernel_cpu,std::allocator<Espresso::deconvolution_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::convolution_uniforms const&,void>(&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

__n128 std::allocate_shared[abi:ne180100]<Espresso::deconvolution_kernel_cpu,std::allocator<Espresso::deconvolution_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::convolution_uniforms const&,void>(void *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = (char *)operator new(0x288uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)uint64_t v6 = &unk_1EE387F18;
  char v7 = Espresso::abstract_kernel_with_weights<Espresso::convolution_uniforms>::abstract_kernel_with_weights((void *)v6 + 3, a2);
  *((void *)v6 + 72) = 0;
  *((_OWORD *)v6 + 34) = 0u;
  *((_OWORD *)v6 + 35) = 0u;
  *((_OWORD *)v6 + 32) = 0u;
  *((_OWORD *)v6 + 33) = 0u;
  *((void *)v6 + 3) = &unk_1EE35B870;
  *(_OWORD *)(v6 + 584) = 0u;
  *(_OWORD *)(v6 + 600) = 0u;
  *(_OWORD *)(v6 + 616) = 0u;
  *(_OWORD *)(v6 + 632) = 0u;
  long long v8 = *(_OWORD *)(a3 + 80);
  *(_OWORD *)(v6 + 392) = *(_OWORD *)(a3 + 64);
  *(_OWORD *)(v6 + 408) = v8;
  long long v9 = *(_OWORD *)(a3 + 144);
  *(_OWORD *)(v6 + 456) = *(_OWORD *)(a3 + 128);
  *(_OWORD *)(v6 + 472) = v9;
  long long v10 = *(_OWORD *)(a3 + 112);
  *(_OWORD *)(v6 + 424) = *(_OWORD *)(a3 + 96);
  *(_OWORD *)(v6 + 440) = v10;
  *(void *)(v6 + 485) = *(void *)(a3 + 157);
  long long v11 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(v6 + 328) = *(_OWORD *)a3;
  *(_OWORD *)(v6 + 344) = v11;
  __n128 result = *(__n128 *)(a3 + 48);
  *(_OWORD *)(v6 + 360) = *(_OWORD *)(a3 + 32);
  *(__n128 *)(v6 + 376) = result;
  v6[492] = *(unsigned char *)(*a2 + 125);
  *a1 = v7;
  a1[1] = v6;
  return result;
}

void sub_1921063D8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

__n128 ___ZN8Espresso16ANERuntimeEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_6@<Q0>(uint64_t *a1@<X1>, __n128 *a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  long long v8 = operator new(0x278uLL);
  v8[1] = 0;
  _DWORD v8[2] = 0;
  void *v8 = &unk_1EE3839C0;
  Espresso::ANECompilerEngine::load_constant_kernel::load_constant_kernel(v8 + 3, a1, a3, a2);
  v8[3] = &unk_1EE3375C8;
  v8[51] = &unk_1EE337768;
  *((unsigned char *)v8 + 624) = *(unsigned char *)(*a1 + 127);
  result.n128_u64[0] = v9;
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_1921064BC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

__n128 Espresso::ANECompilerEngine::load_constant_kernel::load_constant_kernel(void *a1, uint64_t *a2, int a3, __n128 *a4)
{
  *a1 = &unk_1EE344548;
  a1[48] = &unk_1EE3446E8;
  uint64_t v7 = Espresso::base_kernel::base_kernel((uint64_t)a1, a2);
  *(void *)(v7 + 280) = v7 + 288;
  *(_OWORD *)(v7 + 288) = 0u;
  *(_OWORD *)(v7 + 304) = xmmword_192DC3600;
  *(void *)(v7 + 320) = 0xFFFFFFFF00000001;
  *(_OWORD *)(v7 + 328) = 0u;
  *(void *)uint64_t v7 = &unk_1EE363278;
  *(_OWORD *)(v7 + 344) = 0u;
  *(unsigned char *)(v7 + 360) = 1;
  *(void *)(v7 + 368) = 0;
  *(unsigned char *)(v7 + 376) = 1;
  _Q1 = *a4;
  *(void *)(v7 + 320) = a4[1].n128_u64[0];
  *(__n128 *)(v7 + 304) = _Q1;
  char v9 = *(unsigned char *)(*a2 + 123);
  *(_OWORD *)(v7 + 520) = 0u;
  *(_OWORD *)(v7 + 536) = 0u;
  *(_OWORD *)(v7 + 392) = 0u;
  *(_OWORD *)(v7 + 408) = 0u;
  *(_OWORD *)(v7 + 424) = 0u;
  *(unsigned char *)(v7 + 440) = 0;
  *(_OWORD *)(v7 + 448) = 0u;
  *(_OWORD *)(v7 + 464) = 0u;
  *(_OWORD *)(v7 + 480) = 0u;
  *(_OWORD *)(v7 + 496) = 0u;
  *(unsigned char *)(v7 + 512) = 0;
  *(_DWORD *)(v7 + 552) = 1065353216;
  *(_WORD *)(v7 + 560) = 0;
  *(unsigned char *)(v7 + 562) = 0;
  __asm { FMOV            V1.2S, #1.0 }
  *(void *)(v7 + 564) = _Q1.n128_u64[0];
  *(unsigned char *)(v7 + 572) = 0;
  *(_OWORD *)(v7 + 576) = 0u;
  *(unsigned char *)(v7 + 592) = v9;
  *(void *)uint64_t v7 = &unk_1EE344548;
  *(void *)(v7 + 384) = &unk_1EE3446E8;
  *(_DWORD *)(v7 + 596) = a3;
  __n128 result = *a4;
  *(void *)(v7 + 320) = a4[1].n128_u64[0];
  *(__n128 *)(v7 + 304) = result;
  return result;
}

__n128 ___ZN8Espresso16ANERuntimeEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_23@<Q0>(uint64_t *a1@<X1>, __n128 *a2@<X2>, __n128 *a3@<X8>)
{
  uint64_t v6 = operator new(0x238uLL);
  v6[1] = 0;
  v6[2] = 0;
  *uint64_t v6 = &unk_1EE383678;
  Espresso::ANECompilerEngine::transpose_kernel::transpose_kernel((uint64_t)(v6 + 3), a1, a2);
  double v6[3] = &unk_1EE335450;
  v6[41] = &unk_1EE3355B0;
  *((unsigned char *)v6 + 560) = *(unsigned char *)(*a1 + 127);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1921066F0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

__n128 ___ZN8Espresso16ANERuntimeEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_15@<Q0>(uint64_t *a1@<X1>, int *a2@<X2>, __n128 *a3@<X8>)
{
  uint64_t v6 = operator new(0x210uLL);
  v6[1] = 0;
  v6[2] = 0;
  *uint64_t v6 = &unk_1EE383A68;
  Espresso::ANECompilerEngine::general_concat_kernel::general_concat_kernel((uint64_t)(v6 + 3), a1, a2);
  double v6[3] = &unk_1EE337C08;
  v6[39] = &unk_1EE337D68;
  *((unsigned char *)v6 + 521) = *(unsigned char *)(*a1 + 127);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1921067C4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

__n128 ___ZN8Espresso10BNNSEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_8@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  uint64_t v6 = operator new(0x148uLL);
  v6[1] = 0;
  v6[2] = 0;
  *uint64_t v6 = &unk_1EE3811B8;
  uint64_t v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  *((_OWORD *)v6 + 19) = *(_OWORD *)a2;
  *((_DWORD *)v6 + 80) = *(_DWORD *)(a2 + 16);
  double v6[3] = &unk_1EE3283F0;
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_192106878(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

double Espresso::ANECompilerEngine::general_concat_kernel::general_concat_kernel(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_DWORD *)(v5 + 280) = 2;
  *(_WORD *)(v5 + 284) = 0;
  char v6 = *(unsigned char *)(*a2 + 123);
  *(_OWORD *)(v5 + 424) = 0u;
  *(_OWORD *)(v5 + 440) = 0u;
  *(_OWORD *)(v5 + 296) = 0u;
  *(_OWORD *)(v5 + 312) = 0u;
  *(_OWORD *)(v5 + 328) = 0u;
  *(unsigned char *)(v5 + 344) = 0;
  *(_OWORD *)(v5 + 352) = 0u;
  *(_OWORD *)(v5 + 368) = 0u;
  *(_OWORD *)(v5 + 384) = 0u;
  *(_OWORD *)(v5 + 400) = 0u;
  *(unsigned char *)(v5 + 416) = 0;
  *(_DWORD *)(v5 + 456) = 1065353216;
  *(_WORD *)(v5 + 464) = 0;
  *(unsigned char *)(v5 + 466) = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *(double *)(v5 + 468) = result;
  *(unsigned char *)(v5 + 476) = 0;
  *(void *)(v5 + 480) = 0;
  *(void *)(v5 + 488) = 0;
  *(unsigned char *)(v5 + 496) = v6;
  *(void *)uint64_t v5 = &unk_1EE344B88;
  *(void *)(v5 + 288) = &unk_1EE344CE8;
  int v12 = *a3;
  *(_WORD *)(v5 + 284) = *((_WORD *)a3 + 2);
  *(_DWORD *)(v5 + 280) = v12;
  return result;
}

__n128 Espresso::ANECompilerEngine::transpose_kernel::transpose_kernel(uint64_t a1, uint64_t *a2, __n128 *a3)
{
  uint64_t v5 = a1 + 280;
  uint64_t v6 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_OWORD *)uint64_t v5 = xmmword_192DAF430;
  *(_DWORD *)(v6 + 296) = 4;
  char v7 = *(unsigned char *)(*a2 + 123);
  *(_OWORD *)(v6 + 440) = 0u;
  *(_OWORD *)(v6 + 456) = 0u;
  *(_OWORD *)(v6 + 312) = 0u;
  *(_OWORD *)(v6 + 328) = 0u;
  *(_OWORD *)(v6 + 344) = 0u;
  *(unsigned char *)(v6 + 360) = 0;
  *(_OWORD *)(v6 + 368) = 0u;
  *(_OWORD *)(v6 + 384) = 0u;
  *(_OWORD *)(v6 + 400) = 0u;
  *(_OWORD *)(v6 + 416) = 0u;
  *(unsigned char *)(v6 + 432) = 0;
  *(_DWORD *)(v6 + 472) = 1065353216;
  *(_WORD *)(v6 + 480) = 0;
  *(unsigned char *)(v6 + 482) = 0;
  __asm { FMOV            V1.2S, #1.0 }
  *(void *)(v5 + 204) = _D1;
  *(unsigned char *)(v6 + 492) = 0;
  *(_OWORD *)(v6 + 496) = 0u;
  *(unsigned char *)(v6 + 512) = v7;
  *(void *)uint64_t v6 = &unk_1EE341A98;
  *(void *)(v6 + 304) = &unk_1EE341BF8;
  *(_OWORD *)(v6 + 520) = 0u;
  __n128 result = *a3;
  *(_DWORD *)(v6 + 296) = a3[1].n128_u32[0];
  *(__n128 *)uint64_t v5 = result;
  return result;
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_53@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  uint64_t v6 = operator new(0x138uLL);
  v6[1] = 0;
  v6[2] = 0;
  *uint64_t v6 = &unk_1EE3882D0;
  uint64_t v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  double v6[3] = &unk_1EE35D1B0;
  *((_DWORD *)v6 + 76) = *(_DWORD *)a2;
  *((_WORD *)v6 + 154) = *(_WORD *)(a2 + 4);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_192106AF4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

__n128 ___ZN8Espresso16ANERuntimeEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_55@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  uint64_t v6 = operator new(0x298uLL);
  v6[1] = 0;
  v6[2] = 0;
  *uint64_t v6 = &unk_1EE3838A8;
  Espresso::ANECompilerEngine::mix_squeeze_kernel::mix_squeeze_kernel((uint64_t)(v6 + 3), a1, a2);
  double v6[3] = &unk_1EE336A08;
  v6[56] = &unk_1EE336B68;
  *((unsigned char *)v6 + 657) = *(unsigned char *)(*a1 + 127);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_192106BC8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

__n128 ___ZN8Espresso16ANERuntimeEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_12@<Q0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, __n128 *a3@<X8>)
{
  uint64_t v6 = operator new(0x290uLL);
  v6[1] = 0;
  v6[2] = 0;
  *uint64_t v6 = &unk_1EE3833A0;
  uint64_t v7 = Espresso::ANECompilerEngine::dev_op_kernel::dev_op_kernel((uint64_t)(v6 + 3), a1, a2);
  double v6[3] = &unk_1EE333C80;
  v6[55] = &unk_1EE333DE0;
  *((unsigned char *)v6 + 649) = *(unsigned char *)(*a1 + 127);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_192106C9C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

__n128 ___ZN8Espresso16ANERuntimeEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_10@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  uint64_t v6 = operator new(0x260uLL);
  v6[1] = 0;
  v6[2] = 0;
  *uint64_t v6 = &unk_1EE383330;
  Espresso::ANECompilerEngine::split_kernel::split_kernel((uint64_t)(v6 + 3), a1, a2);
  double v6[3] = &unk_1EE333880;
  v6[45] = &unk_1EE3339E0;
  *((unsigned char *)v6 + 600) = *(unsigned char *)(*a1 + 127);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_192106D70(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

__n128 Espresso::ANECompilerEngine::mix_squeeze_kernel::mix_squeeze_kernel(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_OWORD *)(v5 + 401) = 0u;
  *(_OWORD *)(v5 + 376) = 0u;
  *(_OWORD *)(v5 + 392) = 0u;
  *(_OWORD *)(v5 + 344) = 0u;
  *(_OWORD *)(v5 + 360) = 0u;
  *(_OWORD *)(v5 + 312) = 0u;
  *(_OWORD *)(v5 + 328) = 0u;
  *(_OWORD *)(v5 + 280) = 0u;
  *(_OWORD *)(v5 + 296) = 0u;
  *(_DWORD *)(v5 + 420) = 2;
  char v6 = *(unsigned char *)(*a2 + 123);
  *(_OWORD *)(v5 + 560) = 0u;
  *(_OWORD *)(v5 + 576) = 0u;
  *(_OWORD *)(v5 + 432) = 0u;
  *(_OWORD *)(v5 + 448) = 0u;
  *(_OWORD *)(v5 + 464) = 0u;
  *(unsigned char *)(v5 + 480) = 0;
  *(_OWORD *)(v5 + 488) = 0u;
  *(_OWORD *)(v5 + 504) = 0u;
  *(_OWORD *)(v5 + 520) = 0u;
  *(_OWORD *)(v5 + 536) = 0u;
  *(unsigned char *)(v5 + 552) = 0;
  *(_DWORD *)(v5 + 592) = 1065353216;
  *(_WORD *)(v5 + 600) = 0;
  *(unsigned char *)(v5 + 602) = 0;
  __asm { FMOV            V1.2S, #1.0 }
  *(void *)(v5 + 604) = _D1;
  *(unsigned char *)(v5 + 612) = 0;
  *(_OWORD *)(v5 + 616) = 0u;
  *(unsigned char *)(v5 + 632) = v6;
  *(void *)uint64_t v5 = &unk_1EE3434B8;
  *(void *)(v5 + 424) = &unk_1EE343618;
  *(_OWORD *)(v5 + 280) = *(_OWORD *)a3;
  long long v12 = *(_OWORD *)(a3 + 16);
  long long v13 = *(_OWORD *)(a3 + 32);
  long long v14 = *(_OWORD *)(a3 + 64);
  *(_OWORD *)(v5 + 328) = *(_OWORD *)(a3 + 48);
  *(_OWORD *)(v5 + 344) = v14;
  *(_OWORD *)(v5 + 296) = v12;
  *(_OWORD *)(v5 + 312) = v13;
  __n128 result = *(__n128 *)(a3 + 80);
  long long v16 = *(_OWORD *)(a3 + 96);
  long long v17 = *(_OWORD *)(a3 + 128);
  *(_OWORD *)(v5 + 392) = *(_OWORD *)(a3 + 112);
  *(_OWORD *)(v5 + 408) = v17;
  *(__n128 *)(v5 + 360) = result;
  *(_OWORD *)(v5 + 376) = v16;
  return result;
}

__n128 Espresso::ANECompilerEngine::split_kernel::split_kernel(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(unsigned char *)(v5 + 288) = 0;
  *(_OWORD *)(v5 + 292) = 0u;
  *(void *)(v5 + 280) = 0x200000002;
  *(_DWORD *)(v5 + 328) = 0;
  char v6 = *(unsigned char *)(*a2 + 123);
  *(_OWORD *)(v5 + 472) = 0u;
  *(_OWORD *)(v5 + 488) = 0u;
  *(_OWORD *)(v5 + 344) = 0u;
  *(_OWORD *)(v5 + 360) = 0u;
  *(_OWORD *)(v5 + 376) = 0u;
  *(unsigned char *)(v5 + 392) = 0;
  *(_OWORD *)(v5 + 400) = 0u;
  *(_OWORD *)(v5 + 416) = 0u;
  *(_OWORD *)(v5 + 432) = 0u;
  *(_OWORD *)(v5 + 448) = 0u;
  *(unsigned char *)(v5 + 464) = 0;
  *(_DWORD *)(v5 + 504) = 1065353216;
  *(_WORD *)(v5 + 512) = 0;
  *(unsigned char *)(v5 + 514) = 0;
  __asm { FMOV            V1.2S, #1.0 }
  *(void *)(v5 + 516) = _D1;
  *(unsigned char *)(v5 + 524) = 0;
  *(_OWORD *)(v5 + 528) = 0u;
  *(unsigned char *)(v5 + 544) = v6;
  *(void *)uint64_t v5 = &unk_1EE33F320;
  *(void *)(v5 + 336) = &unk_1EE33F480;
  *(void *)(v5 + 568) = 0;
  *(_OWORD *)(v5 + 552) = 0u;
  __n128 result = *(__n128 *)a3;
  long long v13 = *(_OWORD *)(a3 + 16);
  long long v14 = *(_OWORD *)(a3 + 32);
  *(_DWORD *)(v5 + 328) = *(_DWORD *)(a3 + 48);
  *(_OWORD *)(v5 + 296) = v13;
  *(_OWORD *)(v5 + 312) = v14;
  *(__n128 *)(v5 + 280) = result;
  return result;
}

__n128 ___ZN8Espresso16ANERuntimeEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_39@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  char v6 = operator new(0x238uLL);
  v6[1] = 0;
  v6[2] = 0;
  *char v6 = &unk_1EE383758;
  Espresso::ANECompilerEngine::reduce_kernel::reduce_kernel((uint64_t)(v6 + 3), a1, a2);
  double v6[3] = &unk_1EE335CD8;
  v6[44] = &unk_1EE335E38;
  *((unsigned char *)v6 + 561) = *(unsigned char *)(*a1 + 127);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_192107040(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

double ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_64@<D0>(uint64_t *a1@<X1>, _DWORD *a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::copy_kernel_cpu,std::allocator<Espresso::copy_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::copy_params_t const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_14@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::batchnorm_kernel_cpu,std::allocator<Espresso::batchnorm_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::batchnorm_params const&,void>(&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

uint64_t std::allocate_shared[abi:ne180100]<Espresso::copy_kernel_cpu,std::allocator<Espresso::copy_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::copy_params_t const&,void>(uint64_t *a1, uint64_t *a2, _DWORD *a3)
{
  char v6 = operator new(0x138uLL);
  v6[1] = 0;
  v6[2] = 0;
  *char v6 = &unk_1EE383020;
  uint64_t result = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a2);
  double v6[3] = &unk_1EE332760;
  *((_DWORD *)v6 + 76) = *a3;
  *a1 = result;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_192107154(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

__n128 Espresso::ANECompilerEngine::reduce_kernel::reduce_kernel(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(void *)(v5 + 280) = 0x358637BD00000000;
  *(void *)(v5 + 288) = 0x100000007;
  *(_OWORD *)(v5 + 296) = 0u;
  *(void *)(v5 + 312) = 0xFFFFFFFF00000000;
  *(unsigned char *)(v5 + 320) = 0;
  char v6 = *(unsigned char *)(*a2 + 123);
  *(_OWORD *)(v5 + 464) = 0u;
  *(_OWORD *)(v5 + 480) = 0u;
  *(_OWORD *)(v5 + 336) = 0u;
  *(_OWORD *)(v5 + 352) = 0u;
  *(_OWORD *)(v5 + 368) = 0u;
  *(unsigned char *)(v5 + 384) = 0;
  *(_OWORD *)(v5 + 392) = 0u;
  *(_OWORD *)(v5 + 408) = 0u;
  *(_OWORD *)(v5 + 424) = 0u;
  *(_OWORD *)(v5 + 440) = 0u;
  *(unsigned char *)(v5 + 456) = 0;
  *(_DWORD *)(v5 + 496) = 1065353216;
  *(_WORD *)(v5 + 504) = 0;
  *(unsigned char *)(v5 + 506) = 0;
  __asm { FMOV            V1.2S, #1.0 }
  *(void *)(v5 + 508) = _D1;
  *(unsigned char *)(v5 + 516) = 0;
  *(_OWORD *)(v5 + 520) = 0u;
  *(unsigned char *)(v5 + 536) = v6;
  *(void *)uint64_t v5 = &unk_1EE33FB20;
  *(void *)(v5 + 328) = &unk_1EE33FC80;
  __n128 result = *(__n128 *)a3;
  long long v13 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(v5 + 305) = *(_OWORD *)(a3 + 25);
  *(__n128 *)(v5 + 280) = result;
  *(_OWORD *)(v5 + 296) = v13;
  return result;
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_91@<Q0>(uint64_t *a1@<X1>, void *a2@<X2>, __n128 *a3@<X8>)
{
  char v6 = operator new(0x158uLL);
  v6[1] = 0;
  v6[2] = 0;
  *char v6 = &unk_1EE386E78;
  uint64_t v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  double v6[3] = &unk_1EE351158;
  v6[41] = 0;
  v6[42] = 0;
  v6[40] = 0;
  v6[38] = *a2;
  *(void *)((char *)v6 + 310) = *(void *)((char *)a2 + 6);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19210730C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_81@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  char v6 = (char *)operator new(0x228uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)char v6 = &unk_1EE387F50;
  uint64_t v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((void *)v6 + 3) = &unk_1EE35BAF0;
  *(_OWORD *)(v6 + 408) = 0u;
  *(_OWORD *)(v6 + 424) = 0u;
  *(_OWORD *)(v6 + 440) = 0u;
  *(_OWORD *)(v6 + 456) = 0u;
  *(_OWORD *)(v6 + 472) = 0u;
  *(_OWORD *)(v6 + 488) = 0u;
  *(_OWORD *)(v6 + 504) = 0u;
  *(_OWORD *)(v6 + 520) = 0u;
  *(_OWORD *)(v6 + 536) = 0u;
  long long v8 = *(_OWORD *)(a2 + 80);
  *((_OWORD *)v6 + 23) = *(_OWORD *)(a2 + 64);
  *((_OWORD *)v6 + 24) = v8;
  *((_DWORD *)v6 + 100) = *(_DWORD *)(a2 + 96);
  long long v9 = *(_OWORD *)(a2 + 16);
  *((_OWORD *)v6 + 19) = *(_OWORD *)a2;
  *((_OWORD *)v6 + 20) = v9;
  long long v10 = *(_OWORD *)(a2 + 48);
  *((_OWORD *)v6 + 21) = *(_OWORD *)(a2 + 32);
  *((_OWORD *)v6 + 22) = v10;
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1921073EC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_51@<Q0>(uint64_t *a1@<X1>, void *a2@<X2>, __n128 *a3@<X8>)
{
  char v6 = operator new(0x140uLL);
  v6[1] = 0;
  v6[2] = 0;
  *char v6 = &unk_1EE383218;
  uint64_t v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  double v6[3] = &unk_1EE332EE8;
  v6[38] = *a2;
  *(void *)((char *)v6 + 311) = *(void *)((char *)a2 + 7);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1921074A4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

__n128 ___ZN8Espresso10BNNSEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_6@<Q0>(uint64_t *a1@<X1>, _OWORD *a2@<X2>, __n128 *a3@<X8>)
{
  char v6 = (char *)operator new(0x188uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)char v6 = &unk_1EE381180;
  uint64_t v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((_DWORD *)v6 + 83) = 0;
  *((void *)v6 + 43) = 0;
  *((void *)v6 + 44) = 0;
  *((void *)v6 + 42) = 0;
  *((_OWORD *)v6 + 19) = *a2;
  *(_OWORD *)(v6 + 316) = *(_OWORD *)((char *)a2 + 12);
  *((void *)v6 + 3) = &unk_1EE327C00;
  *(_OWORD *)(v6 + 360) = 0u;
  *(_OWORD *)(v6 + 376) = 0u;
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_192107574(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

__n128 ___ZN8Espresso16ANERuntimeEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_61@<Q0>(uint64_t *a1@<X1>, long long *a2@<X2>, __n128 *a3@<X8>)
{
  char v6 = operator new(0x240uLL);
  v6[1] = 0;
  v6[2] = 0;
  *char v6 = &unk_1EE383F38;
  uint64_t v7 = Espresso::ANECompilerEngine::mix_non_maximum_suppression_kernel::mix_non_maximum_suppression_kernel((uint64_t)(v6 + 3), a1, a2);
  double v6[3] = &unk_1EE33A958;
  v6[45] = &unk_1EE33AAB8;
  *((unsigned char *)v6 + 569) = *(unsigned char *)(*a1 + 127);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_192107648(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

__n128 ___ZN8Espresso16ANERuntimeEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_5@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  long long v8 = operator new(0x268uLL);
  v8[1] = 0;
  _DWORD v8[2] = 0;
  void *v8 = &unk_1EE3835D0;
  Espresso::ANECompilerEngine::upsample_kernel::upsample_kernel((uint64_t)(v8 + 3), a1, a3, a2);
  v8[3] = &unk_1EE334DF8;
  v8[47] = &unk_1EE334F58;
  *((unsigned char *)v8 + 612) = *(unsigned char *)(*a1 + 127);
  result.n128_u64[0] = v9;
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_19210772C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t Espresso::ANECompilerEngine::mix_non_maximum_suppression_kernel::mix_non_maximum_suppression_kernel(uint64_t a1, uint64_t *a2, long long *a3)
{
  uint64_t v6 = Espresso::base_kernel::base_kernel(a1, a2);
  *(void *)(v6 + 280) = 0x3F00000000000001;
  *(_DWORD *)(v6 + 288) = 0;
  *(unsigned char *)(v6 + 292) = 0;
  *(void *)(v6 + 296) = 0x300000000;
  *(void *)(v6 + 312) = 0;
  *(_OWORD *)(v6 + 320) = 0u;
  *(_DWORD *)(v6 + 304) = 0;
  char v7 = *(unsigned char *)(*a2 + 123);
  *(_OWORD *)(v6 + 472) = 0u;
  *(_OWORD *)(v6 + 488) = 0u;
  *(_OWORD *)(v6 + 344) = 0u;
  *(_OWORD *)(v6 + 360) = 0u;
  *(_OWORD *)(v6 + 376) = 0u;
  *(unsigned char *)(v6 + 392) = 0;
  *(_OWORD *)(v6 + 400) = 0u;
  *(_OWORD *)(v6 + 416) = 0u;
  *(_OWORD *)(v6 + 432) = 0u;
  *(_OWORD *)(v6 + 448) = 0u;
  *(unsigned char *)(v6 + 464) = 0;
  *(_DWORD *)(v6 + 504) = 1065353216;
  *(_WORD *)(v6 + 512) = 0;
  *(unsigned char *)(v6 + 514) = 0;
  __asm { FMOV            V1.2S, #1.0 }
  *(void *)(v6 + 516) = _D1;
  *(unsigned char *)(v6 + 524) = 0;
  *(_OWORD *)(v6 + 528) = 0u;
  *(unsigned char *)(v6 + 544) = v7;
  *(void *)uint64_t v6 = &unk_1EE347AD8;
  *(void *)(v6 + 336) = &unk_1EE347C38;
  long long v13 = *a3;
  *(_OWORD *)(v6 + 292) = *(long long *)((char *)a3 + 12);
  *(_OWORD *)(v6 + 280) = v13;
  if ((long long *)(v6 + 280) != a3) {
    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)(a1 + 312), *((char **)a3 + 4), *((void *)a3 + 5), (uint64_t)(*((void *)a3 + 5) - *((void *)a3 + 4)) >> 2);
  }
  return a1;
}

void sub_19210786C(_Unwind_Exception *a1)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(v2);
  Espresso::generic_non_maximum_suppression_kernel::~generic_non_maximum_suppression_kernel(v1);
  _Unwind_Resume(a1);
}

__n128 Espresso::ANECompilerEngine::upsample_kernel::upsample_kernel(uint64_t a1, uint64_t *a2, int a3, uint64_t a4)
{
  uint64_t v7 = a1 + 280;
  uint64_t v8 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_OWORD *)uint64_t v7 = xmmword_192DCA210;
  *(void *)(v7 + 16) = 0x100000000;
  *(unsigned char *)(v8 + 304) = 0;
  *(void *)(v7 + 28) = 0x3F8000003F800000;
  *(unsigned char *)(v8 + 316) = 1;
  *(void *)(v8 + 320) = 0;
  *(_OWORD *)(v7 + 48) = 0u;
  __asm { FMOV            V1.2S, #1.0 }
  *(void *)(v8 + 344) = _D1;
  char v14 = *(unsigned char *)(*a2 + 123);
  *(_OWORD *)(v8 + 488) = 0u;
  *(_OWORD *)(v8 + 504) = 0u;
  *(_OWORD *)(v8 + 360) = 0u;
  *(_OWORD *)(v8 + 376) = 0u;
  *(_OWORD *)(v8 + 392) = 0u;
  *(unsigned char *)(v8 + 408) = 0;
  *(_OWORD *)(v8 + 416) = 0u;
  *(_OWORD *)(v8 + 432) = 0u;
  *(_OWORD *)(v8 + 448) = 0u;
  *(_OWORD *)(v8 + 464) = 0u;
  *(unsigned char *)(v8 + 480) = 0;
  *(_DWORD *)(v8 + 520) = 1065353216;
  *(_WORD *)(v8 + 528) = 0;
  *(unsigned char *)(v8 + 530) = 0;
  *(void *)(v7 + 252) = _D1;
  *(unsigned char *)(v8 + 540) = 0;
  *(_OWORD *)(v8 + 544) = 0u;
  *(unsigned char *)(v8 + 560) = v14;
  *(void *)uint64_t v8 = &unk_1EE341240;
  *(void *)(v8 + 352) = &unk_1EE3413A0;
  *(_OWORD *)(v8 + 568) = 0u;
  *(_DWORD *)(v8 + 584) = a3;
  *(_OWORD *)uint64_t v7 = *(_OWORD *)a4;
  __n128 result = *(__n128 *)(a4 + 16);
  long long v16 = *(_OWORD *)(a4 + 32);
  long long v17 = *(_OWORD *)(a4 + 48);
  *(void *)(v8 + 344) = *(void *)(a4 + 64);
  *(_OWORD *)(v7 + 32) = v16;
  *(_OWORD *)(v7 + 48) = v17;
  *(__n128 *)(v7 + 16) = result;
  return result;
}

double ___ZN8Espresso9MPSEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_8@<D0>(uint64_t *a1@<X1>, long long *a2@<X2>, int a3@<W3>, _OWORD *a4@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::MPSEngine::meta_texarray_kernel<Espresso::MPSEngine::activation_kernel>,std::allocator<Espresso::MPSEngine::meta_texarray_kernel<Espresso::MPSEngine::activation_kernel>>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::activation_params &,void>(&v6, a1, a3, a2);
  double result = *(double *)&v6;
  *a4 = v6;
  return result;
}

__n128 ___ZN8Espresso9MPSEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_21@<Q0>(uint64_t *a1@<X1>, long long *a2@<X2>, __n128 *a3@<X8>)
{
  long long v6 = operator new(0x1C0uLL);
  v6[1] = 0;
  v6[2] = 0;
  *long long v6 = &unk_1EE38CDD8;
  long long v9 = *a2;
  long long v10 = a2[1];
  long long v11 = a2[2];
  int v12 = *((_DWORD *)a2 + 12);
  uint64_t v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  *((unsigned char *)v6 + 360) = 0;
  v6[46] = 0;
  v6[47] = 0;
  v6[48] = 0;
  v6[49] = 0;
  *((_OWORD *)v6 + 19) = v9;
  *((_OWORD *)v6 + 20) = v10;
  *((_OWORD *)v6 + 21) = v11;
  *((_DWORD *)v6 + 88) = v12;
  double v6[3] = &unk_1EE375950;
  *((_OWORD *)v6 + 25) = 0u;
  *((_OWORD *)v6 + 26) = 0u;
  *((_OWORD *)v6 + 27) = 0u;
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_192107AD4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

__n128 ___ZN8Espresso9MPSEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_2@<Q0>(uint64_t *a1@<X1>, long long *a2@<X2>, __n128 *a3@<X8>)
{
  long long v6 = (char *)operator new(0x1D8uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)long long v6 = &unk_1EE38C978;
  long long v12 = a2[4];
  long long v13 = a2[5];
  long long v14 = a2[6];
  long long v8 = *a2;
  long long v9 = a2[1];
  long long v10 = a2[2];
  long long v11 = a2[3];
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((void *)v6 + 3) = &unk_1EE372A00;
  *((void *)v6 + 39) = 0;
  *((void *)v6 + 40) = 0;
  *((void *)v6 + 38) = v6 + 312;
  *((void *)v6 + 56) = 0;
  *((void *)v6 + 57) = 0;
  *((void *)v6 + 55) = 0;
  v6[464] = 0;
  *(_OWORD *)(v6 + 392) = v12;
  *(_OWORD *)(v6 + 408) = v13;
  *(_OWORD *)(v6 + 424) = v14;
  *(_OWORD *)(v6 + 328) = v8;
  *(_OWORD *)(v6 + 344) = v9;
  *(_OWORD *)(v6 + 360) = v10;
  *(_OWORD *)(v6 + 376) = v11;
  Espresso::MPSEngine::pool_kernel::recreate_kernel((Espresso::MPSEngine::pool_kernel *)(v6 + 24));
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_192107BF4(_Unwind_Exception *a1)
{
  Espresso::generic_pool_kernel::~generic_pool_kernel(v2);
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

__n128 ___ZN8Espresso9MPSEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_17@<Q0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, __n128 *a3@<X8>)
{
  long long v6 = operator new(0x1C0uLL);
  v6[1] = 0;
  v6[2] = 0;
  *long long v6 = &unk_1EE38CF98;
  uint64_t v7 = *a2;
  uint64_t v8 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  *((unsigned char *)v6 + 312) = 1;
  *((unsigned char *)v6 + 396) = 0;
  *((_WORD *)v6 + 188) = 0;
  *((_DWORD *)v6 + 84) = 0;
  *((_DWORD *)v6 + 92) = 0;
  *((_DWORD *)v6 + 76) = v7;
  *((_WORD *)v6 + 154) = WORD2(v7);
  v6[40] = 0;
  v6[41] = 0;
  double v6[3] = &unk_1EE374738;
  *((_OWORD *)v6 + 25) = 0u;
  *((_OWORD *)v6 + 26) = 0u;
  *((_OWORD *)v6 + 27) = 0u;
  result.n128_u64[0] = v8;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_192107CE8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

double ___ZN8Espresso16ANERuntimeEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_8@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::generic_context_transfer_kernel_impl,std::allocator<Espresso::generic_context_transfer_kernel_impl>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::context_transfer_params const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

__n128 ___ZN8Espresso14DummyMPSEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_19@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  uint64_t v8 = operator new(0x140uLL);
  v8[1] = 0;
  _DWORD v8[2] = 0;
  void *v8 = &unk_1EE382178;
  uint64_t v9 = Espresso::base_kernel::base_kernel((uint64_t)(v8 + 3), a1);
  v8[3] = &unk_1EE32D030;
  *((_DWORD *)v8 + 78) = a3;
  *((_DWORD *)v8 + 76) = *(_DWORD *)a2;
  *((_WORD *)v8 + 154) = *(_WORD *)(a2 + 4);
  result.n128_u64[0] = v9;
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_192107DE4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

__n128 ___ZN8Espresso14DummyMPSEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_14@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  uint64_t v8 = operator new(0x168uLL);
  v8[1] = 0;
  _DWORD v8[2] = 0;
  void *v8 = &unk_1EE381E68;
  uint64_t v9 = Espresso::base_kernel::base_kernel((uint64_t)(v8 + 3), a1);
  v8[3] = &unk_1EE32BCC8;
  *((_DWORD *)v8 + 89) = a3;
  long long v10 = *(_OWORD *)(a2 + 16);
  *((_OWORD *)v8 + 19) = *(_OWORD *)a2;
  *((_OWORD *)v8 + 20) = v10;
  *((_OWORD *)v8 + 21) = *(_OWORD *)(a2 + 32);
  *((_DWORD *)v8 + 88) = *(_DWORD *)(a2 + 48);
  result.n128_u64[0] = v9;
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_192107EB0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_97@<Q0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, __n128 *a3@<X8>)
{
  long long v6 = operator new(0x1F8uLL);
  v6[1] = 0;
  v6[2] = 0;
  *long long v6 = &unk_1EE386318;
  result.n128_u64[0] = Espresso::dev_op_kernel_cpu::dev_op_kernel_cpu((uint64_t)(v6 + 3), a1, v7, a2);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_192107F3C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_90@<Q0>(uint64_t *a1@<X1>, long long *a2@<X2>, __n128 *a3@<X8>)
{
  long long v6 = operator new(0x1F8uLL);
  v6[1] = 0;
  v6[2] = 0;
  *long long v6 = &unk_1EE389300;
  result.n128_u64[0] = Espresso::non_maximum_suppression_kernel_cpu::non_maximum_suppression_kernel_cpu((uint64_t)(v6 + 3), a1, v7, a2);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_192107FC8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_9(uint64_t *a1@<X1>, uint64_t a2@<X2>, int a3@<W3>, uint64_t a4@<X8>)
{
  if (a3 == 1)
  {
    uint64_t v8 = operator new(0x168uLL);
    v8[1] = 0;
    _DWORD v8[2] = 0;
    void *v8 = &unk_1EE381BC8;
    uint64_t v9 = Espresso::base_kernel::base_kernel((uint64_t)(v8 + 3), a1);
    v8[3] = &unk_1EE32B0A8;
    long long v10 = *(_OWORD *)(a2 + 16);
    *((_OWORD *)v8 + 19) = *(_OWORD *)a2;
    *((_OWORD *)v8 + 20) = v10;
    *((_OWORD *)v8 + 21) = *(_OWORD *)(a2 + 32);
    *((_DWORD *)v8 + 88) = *(_DWORD *)(a2 + 48);
    *(void *)&long long v7 = v9;
    *((void *)&v7 + 1) = v8;
    goto LABEL_5;
  }
  if (!a3)
  {
    std::allocate_shared[abi:ne180100]<Espresso::split_kernel_cpu,std::allocator<Espresso::split_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::split_params const&,void>((uint64_t *)&v11, a1, (__n128 *)a2);
    long long v7 = v11;
LABEL_5:
    *(_OWORD *)a4 = v7;
    return;
  }
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
}

void sub_1921080B8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_18@<Q0>(uint64_t *a1@<X1>, _OWORD *a2@<X2>, __n128 *a3@<X8>)
{
  long long v6 = (char *)operator new(0x178uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)long long v6 = &unk_1EE388810;
  uint64_t v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((_OWORD *)v6 + 21) = 0u;
  *((_OWORD *)v6 + 22) = 0u;
  *(_DWORD *)(v6 + 367) = 0;
  long long v8 = a2[1];
  *((_OWORD *)v6 + 19) = *a2;
  *((_OWORD *)v6 + 20) = v8;
  *((void *)v6 + 3) = &unk_1EE35FE00;
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_192108174(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

double std::allocate_shared[abi:ne180100]<Espresso::MPSEngine::meta_texarray_kernel<Espresso::MPSEngine::activation_kernel>,std::allocator<Espresso::MPSEngine::meta_texarray_kernel<Espresso::MPSEngine::activation_kernel>>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::activation_params &,void>(void *a1, uint64_t *a2, int a3, long long *a4)
{
  long long v8 = (char *)operator new(0x200uLL);
  *((void *)v8 + 1) = 0;
  *((void *)v8 + 2) = 0;
  *(void *)long long v8 = &unk_1EE38CF60;
  long long v9 = a4[1];
  long long v20 = *a4;
  long long v21 = v9;
  int v22 = *((_DWORD *)a4 + 8);
  Espresso::base_kernel::base_kernel((uint64_t)(v8 + 24), a2);
  *((void *)v8 + 3) = &unk_1EE3735E0;
  *((void *)v8 + 39) = 0;
  *((void *)v8 + 40) = 0;
  *((void *)v8 + 38) = v8 + 312;
  *((_OWORD *)v8 + 23) = 0u;
  *((_OWORD *)v8 + 24) = 0u;
  *((_OWORD *)v8 + 25) = 0u;
  v8[416] = 1;
  *((void *)v8 + 53) = 0;
  *((void *)v8 + 54) = 0;
  *((void *)v8 + 56) = 0;
  *((void *)v8 + 57) = 0;
  *((void *)v8 + 55) = 0;
  long long v10 = v21;
  *(_OWORD *)(v8 + 328) = v20;
  *(_OWORD *)(v8 + 344) = v10;
  *((_DWORD *)v8 + 90) = v22;
  long long v11 = (const void *)*((void *)v8 + 4);
  if (!v11
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
    exception->__vftable = (std::runtime_error_vtbl *)&unk_1EE34EF90;
  }
  long long v13 = (std::__shared_weak_count *)*((void *)v8 + 5);
  if (v13)
  {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    id v14 = v12[18];
    nitro::nitro_function::nitro_function(v13);
  }
  else
  {
    id v14 = v12[18];
  }
  uint64_t v15 = create_mps_neuron(v14, *((_DWORD *)v8 + 82), *((float *)v8 + 83), *((float *)v8 + 84));
  long long v16 = (void *)*((void *)v8 + 55);
  *((void *)v8 + 55) = v15;

  if (!*((void *)v8 + 55))
  {
    std::allocate_shared[abi:ne180100]<Espresso::MetalLowmemEngine::activation_kernel,std::allocator<Espresso::MetalLowmemEngine::activation_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::activation_params &,void>(&v23, a2, a3, (uint64_t)&v20);
    long long v17 = (std::__shared_weak_count *)*((void *)v8 + 57);
    *((_OWORD *)v8 + 28) = v23;
    if (v17) {
      nitro::nitro_function::nitro_function(v17);
    }
  }

  *((void *)v8 + 3) = &unk_1EE374598;
  double result = 0.0;
  *((_OWORD *)v8 + 29) = 0u;
  *((_OWORD *)v8 + 30) = 0u;
  *((_OWORD *)v8 + 31) = 0u;
  *a1 = v8 + 24;
  a1[1] = v8;
  return result;
}

void sub_1921083F4(_Unwind_Exception *a1)
{
  long long v5 = *(std::__shared_weak_count **)(v1 + 456);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }

  long long v6 = *(std::__shared_weak_count **)(v1 + 432);
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }
  Espresso::generic_activation_kernel::~generic_activation_kernel(v2);
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v1);
  operator delete(v7);
  _Unwind_Resume(a1);
}

__n128 std::allocate_shared[abi:ne180100]<Espresso::generic_context_transfer_kernel_impl,std::allocator<Espresso::generic_context_transfer_kernel_impl>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::context_transfer_params const&,void>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  long long v6 = (char *)operator new(0x178uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)long long v6 = &unk_1EE389450;
  uint64_t v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a2);
  *((_OWORD *)v6 + 21) = 0u;
  *((_OWORD *)v6 + 22) = 0u;
  *(_DWORD *)(v6 + 367) = 0;
  __n128 result = *(__n128 *)a3;
  long long v9 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v6 + 19) = *(_OWORD *)a3;
  *((_OWORD *)v6 + 20) = v9;
  *((void *)v6 + 3) = &unk_1EE36A0B0;
  *a1 = v7;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_1921084F8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

__n128 std::allocate_shared[abi:ne180100]<Espresso::split_kernel_cpu,std::allocator<Espresso::split_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::split_params const&,void>(uint64_t *a1, uint64_t *a2, __n128 *a3)
{
  long long v6 = (__n128 *)operator new(0x168uLL);
  v6->n128_u64[1] = 0;
  v6[1].n128_u64[0] = 0;
  v6->n128_u64[0] = (unint64_t)&unk_1EE3849B8;
  uint64_t v7 = Espresso::base_kernel::base_kernel((uint64_t)&v6[1].n128_i64[1], a2);
  v6[1].n128_u64[1] = (unint64_t)&unk_1EE33E2C0;
  __n128 v8 = a3[1];
  v6[19] = *a3;
  v6[20] = v8;
  __n128 result = a3[2];
  v6[21] = result;
  v6[22].n128_u32[0] = a3[3].n128_u32[0];
  *a1 = v7;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_1921085AC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t Espresso::non_maximum_suppression_kernel_cpu::non_maximum_suppression_kernel_cpu(uint64_t a1, uint64_t *a2, uint64_t a3, long long *a4)
{
  uint64_t v6 = Espresso::base_kernel::base_kernel(a1, a2);
  *(void *)(v6 + 280) = 0x3F00000000000001;
  *(_DWORD *)(v6 + 288) = 0;
  *(unsigned char *)(v6 + 292) = 0;
  *(void *)(v6 + 296) = 0x300000000;
  *(void *)(v6 + 320) = 0;
  *(void *)(v6 + 328) = 0;
  *(void *)(v6 + 312) = 0;
  *(_DWORD *)(v6 + 304) = 0;
  *(void *)uint64_t v6 = &unk_1EE3694D8;
  *(_OWORD *)(v6 + 336) = 0u;
  *(_OWORD *)(v6 + 352) = 0u;
  *(_OWORD *)(v6 + 368) = 0u;
  *(_OWORD *)(v6 + 384) = 0u;
  *(_OWORD *)(v6 + 400) = 0u;
  *(_OWORD *)(v6 + 416) = 0u;
  *(_OWORD *)(v6 + 432) = 0u;
  *(_OWORD *)(v6 + 448) = 0u;
  *(_OWORD *)(v6 + 464) = 0u;
  long long v7 = *a4;
  *(_OWORD *)(v6 + 292) = *(long long *)((char *)a4 + 12);
  *(_OWORD *)(v6 + 280) = v7;
  if ((long long *)(v6 + 280) != a4) {
    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)(a1 + 312), *((char **)a4 + 4), *((void *)a4 + 5), (uint64_t)(*((void *)a4 + 5) - *((void *)a4 + 4)) >> 2);
  }
  return a1;
}

void sub_19210868C(_Unwind_Exception *a1)
{
  uint64_t v4 = (void *)*((void *)v1 + 57);
  if (v4)
  {
    *((void *)v1 + 58) = v4;
    operator delete(v4);
  }
  long long v5 = (void *)*((void *)v1 + 54);
  if (v5)
  {
    *((void *)v1 + 55) = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)*((void *)v1 + 51);
  if (v6)
  {
    *((void *)v1 + 52) = v6;
    operator delete(v6);
  }
  long long v7 = (void *)*((void *)v1 + 48);
  if (v7)
  {
    *((void *)v1 + 49) = v7;
    operator delete(v7);
  }
  __n128 v8 = (void *)*((void *)v1 + 45);
  if (v8)
  {
    *((void *)v1 + 46) = v8;
    operator delete(v8);
  }
  long long v9 = *v2;
  if (*v2)
  {
    *((void *)v1 + 43) = v9;
    operator delete(v9);
  }
  Espresso::generic_non_maximum_suppression_kernel::~generic_non_maximum_suppression_kernel(v1);
  _Unwind_Resume(a1);
}

id create_mps_neuron(void *a1, int a2, float a3, float a4)
{
  long long v7 = a1;
  long long v9 = v7;
  long long v10 = 0;
  long long v11 = (Class *)0x1E4F354A0;
  long long v12 = (Class *)0x1E4F35498;
  long long v13 = (Class *)0x1E4F354B8;
  switch(a2)
  {
    case 0:
      id v14 = objc_alloc(MEMORY[0x1E4F35498]);
      a3 = 0.0;
      goto LABEL_8;
    case 1:
      goto LABEL_10;
    case 2:
      goto LABEL_7;
    case 3:
      goto LABEL_13;
    case 4:
    case 9:
    case 11:
    case 13:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
      break;
    case 5:
      goto LABEL_5;
    case 6:
      long long v13 = (Class *)0x1E4F35490;
      goto LABEL_5;
    case 7:
      long long v13 = (Class *)0x1E4F35488;
LABEL_5:
      id v16 = objc_alloc(*v13);
      goto LABEL_11;
    case 8:
      long long v12 = (Class *)0x1E4F35478;
LABEL_7:
      id v14 = objc_alloc(*v12);
LABEL_8:
      *(float *)&double v15 = a3;
      uint64_t v19 = [v14 initWithDevice:v9 a:v15];
      goto LABEL_14;
    case 10:
      long long v13 = (Class *)0x1E4F354A8;
LABEL_10:
      id v16 = objc_alloc(*v13);
      a3 = 1.0;
      a4 = 1.0;
LABEL_11:
      *(float *)&double v17 = a3;
      *(float *)&double v18 = a4;
      uint64_t v19 = [v16 initWithDevice:v9 a:v17 b:v18];
      goto LABEL_14;
    case 12:
      long long v11 = (Class *)0x1E4F354B0;
LABEL_13:
      uint64_t v19 = [objc_alloc(*v11) initWithDevice:v7];
LABEL_14:
      long long v10 = (void *)v19;
      break;
    default:
      long long v21 = Espresso::espresso_os_log_subsystem(v7, v8);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)int v22 = 0;
        _os_log_debug_impl(&dword_1920CB000, v21, OS_LOG_TYPE_DEBUG, "activation may be unsupported; attempting fallback in dispatch.",
          v22,
          2u);
      }

      long long v10 = 0;
      break;
  }

  return v10;
}

void sub_192108894(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

MIL::IRNamedValueType *std::__shared_ptr_pointer<MIL::IRNamedValueType  *>::__on_zero_shared(uint64_t a1)
{
  __n128 result = *(MIL::IRNamedValueType **)(a1 + 24);
  if (result)
  {
    MIL::IRNamedValueType::~IRNamedValueType(result);
    JUMPOUT(0x192FF16B0);
  }
  return result;
}

void Espresso::shape_network_recursive(Espresso *this, Espresso::net *a2, const Espresso::network_shape *a3, int a4)
{
  int v221 = (int)a3;
  long long v5 = this;
  uint64_t v273 = *MEMORY[0x1E4F143B8];
  Espresso::net::_tag_inputs_and_outputs(this);
  if ((Espresso *)((char *)v5 + 184) != a2)
  {
    std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,Espresso::layer_shape>,std::__tree_node<std::__value_type<std::string,Espresso::layer_shape>,void *> *,long>>((uint64_t **)v5 + 23, *(long long **)a2, (long long *)((char *)a2 + 8));
    std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,Espresso::layer_shape>,std::__tree_node<std::__value_type<std::string,Espresso::layer_shape>,void *> *,long>>((uint64_t **)v5 + 26, *((long long **)a2 + 3), (long long *)a2 + 2);
  }
  v247 = (uint64_t **)((char *)v5 + 184);
  v262 = 0;
  uint64_t v6 = *((void *)v5 + 4);
  uint64_t v240 = (uint64_t)v5;
  if (*((void *)v5 + 5) != v6)
  {
    unint64_t v7 = 0;
    uint64_t v244 = (uint64_t)v5 + 96;
    uint64_t v243 = (uint64_t)v5 + 56;
    __n128 v8 = (uint64_t **)((char *)v5 + 352);
    long long v9 = (void *)((char *)v5 + 360);
    do
    {
      uint64_t v10 = *(void *)(v6 + 16 * v7);
      long long v11 = (void *)(v10 + 40);
      int v12 = *(char *)(v10 + 63);
      if (v12 < 0)
      {
        if (*(void *)(v10 + 48) == 16)
        {
          long long v11 = (void *)*v11;
LABEL_10:
          id v14 = (void *)*v11;
          uint64_t v13 = v11[1];
          BOOL v15 = v14 == (void *)0x5F747865746E6F63 && v13 == 0x726566736E617274;
          if (v15)
          {
            *(void *)std::string buf = &v262;
            id v16 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v244, (unint64_t *)&v262, (uint64_t)&std::piecewise_construct, (uint64_t **)buf);
            *(void *)std::string buf = &v262;
            double v17 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v243, (unint64_t *)&v262, (uint64_t)&std::piecewise_construct, (uint64_t **)buf);
            uint64_t v18 = v16[3];
            if (v16[4] != v18)
            {
              uint64_t v19 = v17;
              uint64_t v20 = 0;
              unint64_t v21 = 0;
              do
              {
                int v22 = *(void **)(v240 + 192);
                if (!std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(v22, (void *)(v18 + v20)))
                {
                  uint64_t v23 = v19[3];
                  if (v21 < 0xAAAAAAAAAAAAAAABLL * ((v19[4] - v23) >> 3))
                  {
                    char v24 = (void *)(v23 + v20);
                    if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(v22, (void *)(v23 + v20)))
                    {
                      *(void *)std::string buf = v24;
                      long long v25 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v247, v24, (long long **)buf);
                      *(void *)std::string buf = v16[3] + v20;
                      long long v26 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v247, *(void **)buf, (long long **)buf);
                      long long v27 = *(_OWORD *)(v25 + 56);
                      long long v28 = *(_OWORD *)(v25 + 72);
                      *((void *)v26 + 11) = *((void *)v25 + 11);
                      *(_OWORD *)(v26 + 72) = v28;
                      *(_OWORD *)(v26 + 56) = v27;
                      if (v26 != v25) {
                        std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v26 + 96, *((char **)v25 + 12), *((void *)v25 + 13), (uint64_t)(*((void *)v25 + 13) - *((void *)v25 + 12)) >> 2);
                      }
                    }
                  }
                }
                if (*(unsigned char *)(*(void *)(v240 + 16) + 54))
                {
                  long long v29 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>((uint64_t)v8, (void *)(v19[3] + v20));
                  if (v9 != v29)
                  {
                    uint64_t v30 = v16[3];
                    *(_OWORD *)std::string buf = *(_OWORD *)(v29 + 7);
                    memset(&buf[16], 0, 24);
                    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&buf[16], (const void *)v29[9], v29[10], (uint64_t)(v29[10] - v29[9]) >> 2);
                    *(void *)uint64_t v258 = v30 + v20;
                    long long v31 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8, (void *)(v30 + v20), (uint64_t)&std::piecewise_construct, (long long **)v258);
                    *(_OWORD *)(v31 + 56) = *(_OWORD *)buf;
                    if (v31 + 56 != buf) {
                      std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v31 + 72, *(char **)&buf[16], *(uint64_t *)&buf[24], (uint64_t)(*(void *)&buf[24] - *(void *)&buf[16]) >> 2);
                    }
                    if (*(void *)&buf[16])
                    {
                      *(void *)&unsigned char buf[24] = *(void *)&buf[16];
                      operator delete(*(void **)&buf[16]);
                    }
                  }
                }
                ++v21;
                uint64_t v18 = v16[3];
                v20 += 24;
              }
              while (v21 < 0xAAAAAAAAAAAAAAABLL * ((v16[4] - v18) >> 3));
            }
          }
        }
      }
      else if (v12 == 16)
      {
        goto LABEL_10;
      }
      unint64_t v7 = (unint64_t)(v262 + 1);
      v262 = (char *)v7;
      long long v5 = (Espresso *)v240;
      uint64_t v6 = *(void *)(v240 + 32);
    }
    while (v7 < (*(void *)(v240 + 40) - v6) >> 4);
  }
  uint64_t v32 = (const void **)((char *)v5 + 16);
  (*(void (**)(void, Espresso *))(**((void **)v5 + 2) + 64))(*((void *)v5 + 2), v5);
  char v33 = std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::find<std::type_index>((void *)(v240 + 1120), (uint64_t)buf);
  __int16 v34 = v33;
  if (!v33) {
    goto LABEL_39;
  }
  uint64_t v35 = (const void *)v33[3];
  char v36 = (std::__shared_weak_count *)v34[4];
  if (v36) {
    atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v35
  {
    if (v36) {
      nitro::nitro_function::nitro_function(v36);
    }
LABEL_39:
    char v36 = (std::__shared_weak_count *)operator new(0x58uLL);
    v36->__shared_owners_ = 0;
    v36->__shared_weak_owners_ = 0;
    v36->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE386858;
    uint64_t v38 = (char *)&v36[1];
    v36[3].__shared_owners_ = 0;
    v36[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE34EA00;
    v36[2].std::__shared_count = 0u;
    *(_OWORD *)&v36[2].__shared_weak_owners_ = 0u;
    *(_OWORD *)&v36[1].__shared_owners_ = 0u;
    LODWORD(v36[3].__shared_owners_) = 1065353216;
    uint64_t v40 = Espresso::espresso_os_log_subsystem((Espresso *)v36, v39);
    if (os_log_type_enabled(v40, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 136315138;
      *(void *)&uint8_t buf[4] = (unint64_t)"N8Espresso18pass_unpack_layersE" & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_debug_impl(&dword_1920CB000, v40, OS_LOG_TYPE_DEBUG, "run_pass_on_network %s", buf, 0xCu);
    }

    uint64_t v37 = v240;
    (*(void (**)(unsigned char *__return_ptr, char *, uint64_t))(*(void *)v38 + 24))(buf, v38, v240);
    v258[0] = 0;
    (*(void (**)(char *, unsigned char *))(*(void *)v38 + 16))(v38, v258);
    if (v258[0])
    {
      if (buf[0]) {
        Espresso::net::set_analysis<Espresso::analysis_result>(v240, &buf[8]);
      }
      else {
        std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::__erase_unique<std::type_index>((uint64_t *)(v240 + 1120), (uint64_t)"N8Espresso27analysis_pass_unpack_layersE");
      }
    }
    if (*(void *)&buf[16]) {
      nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&buf[16]);
    }
    std::string::size_type v222 = 0;
    goto LABEL_48;
  }
  if (v36)
  {
    atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
    std::string::size_type v222 = v36;
    uint64_t v37 = v240;
LABEL_48:
    int v41 = a4;
    nitro::nitro_function::nitro_function(v36);
    goto LABEL_49;
  }
  std::string::size_type v222 = 0;
  uint64_t v37 = v240;
  int v41 = a4;
LABEL_49:
  if (!Espresso::net::is_root_module((Espresso::net *)v37) && *(void *)(v37 + 224)) {
    Espresso::throw_exception_selector<Espresso::generic_error>("only root module can have globals");
  }
  uint64_t v42 = *(unsigned __int8 **)(v37 + 208);
  if (v42 != (unsigned __int8 *)(v37 + 216))
  {
    do
    {
      Espresso::net::get_global(v258, v37, v42 + 32);
      uint64_t v43 = *(void *)v258;
      if (!*(void *)v258)
      {
        LODWORD(v262) = (***((uint64_t (****)(void))*v32 + 1))(*((void *)*v32 + 1));
        Espresso::abstract_blob_container::make((uint64_t)v32, (int *)&v262, (unsigned int *)(**(void **)(v37 + 32) + 12), buf);
        long long v44 = *(_OWORD *)buf;
        *(void *)std::string buf = 0;
        *(void *)&uint8_t buf[8] = 0;
        uint64_t v45 = *(std::__shared_weak_count **)&v258[8];
        uint64_t v245 = v44;
        *(_OWORD *)uint64_t v258 = v44;
        if (v45)
        {
          nitro::nitro_function::nitro_function(v45);
          if (*(void *)&buf[8]) {
            nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&buf[8]);
          }
        }
        uint64_t v43 = v245;
      }
      if (!v41) {
        goto LABEL_61;
      }
      Espresso::abstract_blob_container::shape(buf, v43);
      BOOL v46 = Espresso::layer_shape::operator==((uint64_t)buf, (uint64_t)(v42 + 56));
      if (*(void *)&buf[40])
      {
        *(void *)&buf[48] = *(void *)&buf[40];
        operator delete(*(void **)&buf[40]);
      }
      if (!v46)
      {
LABEL_61:
        uint64_t v265 = 0;
        v266 = 0;
        (*(void (**)(uint64_t, void *, uint64_t *))(*(void *)v43 + 16))(v43, (void *)v42 + 7, &v265);
        if (v266) {
          nitro::nitro_function::nitro_function(v266);
        }
        Espresso::net::set_global(v37, (long long *)v42 + 2, (uint64_t *)v258);
      }
      if (*(void *)&v258[8]) {
        nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&v258[8]);
      }
      int v47 = (unsigned __int8 *)*((void *)v42 + 1);
      if (v47)
      {
        do
        {
          __int16 v48 = v47;
          int v47 = *(unsigned __int8 **)v47;
        }
        while (v47);
      }
      else
      {
        do
        {
          __int16 v48 = (unsigned __int8 *)*((void *)v42 + 2);
          BOOL v15 = *(void *)v48 == (void)v42;
          uint64_t v42 = v48;
        }
        while (!v15);
      }
      uint64_t v42 = v48;
    }
    while (v48 != (unsigned __int8 *)(v37 + 216));
  }
  int v227 = *((unsigned __int8 *)*v32 + 44);
  if (*((unsigned char *)*v32 + 127)
  {
    uint64_t v49 = *(std::__shared_weak_count **)(v37 + 24);
    if (v49)
    {
      atomic_fetch_add_explicit(&v49->__shared_owners_, 1uLL, memory_order_relaxed);
      nitro::nitro_function::nitro_function(v49);
    }
    int v227 = 0;
  }
  uint64_t v50 = (void *)(v37 + 136);
  if (v41)
  {
    float32x4_t v51 = *(void **)(v37 + 152);
    while (v51)
    {
      if ((void *)(v37 + 192) == std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>((uint64_t)v247, v51 + 2))goto LABEL_83; {
      Espresso::abstract_blob_container::shape(buf, v51[5]);
      }
      uint64_t v52 = std::map<std::string,Espresso::blob_numerical_properties>::at((uint64_t)v247, v51 + 2);
      BOOL v53 = Espresso::layer_shape::operator==((uint64_t)buf, v52);
      if (*(void *)&buf[40])
      {
        *(void *)&buf[48] = *(void *)&buf[40];
        operator delete(*(void **)&buf[40]);
      }
      if (v53)
      {
LABEL_83:
        float32x4_t v51 = (void *)*v51;
      }
      else
      {
        float32x4_t v54 = (void *)*v51;
        std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::remove((uint64_t)buf, (void *)(v37 + 136), v51);
        std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>>>>::reset[abi:ne180100]((uint64_t)buf);
        float32x4_t v51 = v54;
      }
    }
  }
  else
  {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::clear(v37 + 136);
  }
  v262 = 0;
  v263 = 0;
  unint64_t v264 = 0;
  int8x16_t v55 = *(void **)(v37 + 32);
  int8x16_t v56 = *(void **)(v37 + 40);
  if (v55 == v56)
  {
    LOBYTE(v226) = 0;
    goto LABEL_310;
  }
  char v231 = 0;
  int8x16_t v57 = *(void **)(v37 + 32);
  do
  {
    uint64_t v58 = *v57 + 40;
    int v59 = *(char *)(*v57 + 63);
    if (v59 < 0)
    {
      if (*(void *)(*v57 + 48) != 5)
      {
LABEL_101:
        BOOL v63 = 0;
        goto LABEL_102;
      }
      uint64_t v58 = *(void *)v58;
    }
    else if (v59 != 5)
    {
      goto LABEL_101;
    }
    int v60 = *(_DWORD *)v58;
    int v61 = *(unsigned __int8 *)(v58 + 4);
    BOOL v63 = v60 == 1667854946 && v61 == 107;
LABEL_102:
    v231 |= v63;
    v57 += 2;
  }
  while (v57 != v56);
  unint64_t v242 = 0;
  unsigned int v226 = 0;
  v246 = (void *)(v37 + 192);
  uint64_t v233 = v37 + 56;
  uint64_t v239 = v37 + 96;
  uint64_t v223 = *(void **)(v37 + 40);
  do
  {
    uint64_t v64 = *v55;
    float32x4_t v65 = (std::__shared_weak_count *)v55[1];
    if (v65) {
      atomic_fetch_add_explicit(&v65->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v225 = v55;
    int v230 = *(_DWORD *)(v64 + 8);
    unsigned int v261 = *(_DWORD *)(v64 + 12);
    uint64_t v66 = *(void *)(v64 + 64);
    uint64_t v68 = *(void *)(v66 + 8);
    float32x4_t v67 = *(std::__shared_weak_count **)(v66 + 16);
    if (v67) {
      atomic_fetch_add_explicit(&v67->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v234 = v67;
    v235 = (void *)(v64 + 104);
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__clear[abi:ne180100]((uint64_t *)(v64 + 104));
    v238 = (void *)(v64 + 80);
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__clear[abi:ne180100]((uint64_t *)(v64 + 80));
    *(void *)std::string buf = v242;
    float32x4_t v69 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v239, v242, buf);
    uint64_t v232 = v68;
    uint64_t v70 = v69[4] - v69[3];
    int v229 = v65;
    if (v70)
    {
      unint64_t v71 = 0;
      unint64_t v72 = v70 / 24;
      if (v72 <= 1) {
        unint64_t v72 = 1;
      }
      unint64_t v237 = v72;
      uint64_t v73 = v226;
      while (1)
      {
        *(void *)std::string buf = v242;
        int8x16_t v74 = (unsigned __int8 *)(std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v239, v242, buf)[3]+ 24 * v71);
        if (!std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>(v50, v74))break; {
        uint64_t v75 = v73;
        }
LABEL_174:
        uint64_t v108 = v75;
        *(void *)std::string buf = v74;
        uint64_t v109 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v50, v74, (long long **)buf);
        uint64_t v110 = v109;
        uint64_t v111 = *(void **)(v64 + 112);
        unint64_t v112 = *(void *)(v64 + 120);
        if ((unint64_t)v111 >= v112)
        {
          uint64_t v115 = ((uint64_t)v111 - *v235) >> 4;
          unint64_t v116 = v115 + 1;
          if ((unint64_t)(v115 + 1) >> 60) {
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v117 = v112 - *v235;
          if (v117 >> 3 > v116) {
            unint64_t v116 = v117 >> 3;
          }
          if ((unint64_t)v117 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v118 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v118 = v116;
          }
          *(void *)&unsigned char buf[32] = v64 + 120;
          uint64_t v119 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v118);
          uint64_t v120 = &v119[16 * v115];
          *(void *)std::string buf = v119;
          *(void *)&uint8_t buf[8] = v120;
          *(void *)&unsigned char buf[24] = &v119[16 * v121];
          long long v122 = *(_OWORD *)(v110 + 40);
          *(_OWORD *)uint64_t v120 = v122;
          if (*((void *)&v122 + 1)) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v122 + 1) + 8), 1uLL, memory_order_relaxed);
          }
          *(void *)&uint8_t buf[16] = v120 + 16;
          std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(v235, buf);
          uint64_t v114 = *(void **)(v64 + 112);
          std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)buf);
        }
        else
        {
          *uint64_t v111 = *((void *)v109 + 5);
          uint64_t v113 = *((void *)v109 + 6);
          v111[1] = v113;
          if (v113) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v113 + 8), 1uLL, memory_order_relaxed);
          }
          uint64_t v114 = v111 + 2;
          *(void *)(v64 + 112) = v111 + 2;
        }
        *(void *)(v64 + 112) = v114;
        uint64_t v75 = v108;
LABEL_188:
        ++v71;
        uint64_t v73 = v75;
        if (v71 == v237) {
          goto LABEL_191;
        }
      }
      uint64_t v260 = 0;
      *(_OWORD *)&v258[24] = 0u;
      long long __p = 0u;
      *(_OWORD *)uint64_t v258 = xmmword_192DC3600;
      *(void *)&v258[16] = 0xFFFFFFFF00000001;
      int8x16_t v76 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>((uint64_t)v247, v74);
      if (v246 == v76)
      {
        *(void *)std::string buf = v242;
        int8x16_t v78 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v233, v242, buf);
        std::vector<Espresso::layer_shape>::vector(&v256, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v78[4] - v78[3]) >> 3));
        *(void *)std::string buf = v242;
        int8x16_t v79 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v233, v242, buf);
        uint32x4_t v80 = (void *)v79[3];
        uint64_t v81 = (void *)v79[4];
        if (v80 != v81)
        {
          uint64_t v82 = 0;
          do
          {
            *(void *)&long long v270 = 0;
            memset(&buf[24], 0, 32);
            *(_OWORD *)std::string buf = xmmword_192DC3600;
            *(void *)&uint8_t buf[16] = 0xFFFFFFFF00000001;
            int v83 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>((uint64_t)v247, v80);
            if (v246 != v83)
            {
              long long v84 = *(_OWORD *)(v83 + 9);
              *(_OWORD *)std::string buf = *(_OWORD *)(v83 + 7);
              *(_OWORD *)&uint8_t buf[16] = v84;
              *(void *)&unsigned char buf[32] = v83[11];
              if (buf != (unsigned char *)(v83 + 7)) {
                std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&buf[40], (char *)v83[12], v83[13], (uint64_t)(v83[13] - v83[12]) >> 2);
              }
            }
            int v85 = &v256[v82];
            long long v86 = *(_OWORD *)buf;
            long long v87 = *(_OWORD *)&buf[16];
            *((void *)v85 + 4) = *(void *)&buf[32];
            *int v85 = v86;
            v85[1] = v87;
            if (v85 != (long long *)buf) {
              std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)v85 + 40, *(char **)&buf[40], *(uint64_t *)&buf[48], (uint64_t)(*(void *)&buf[48] - *(void *)&buf[40]) >> 2);
            }
            if (*(void *)&buf[40])
            {
              *(void *)&buf[48] = *(void *)&buf[40];
              operator delete(*(void **)&buf[40]);
            }
            v80 += 3;
            v82 += 4;
          }
          while (v80 != v81);
        }
        (*(void (**)(unsigned char *__return_ptr))(**(void **)(v64 + 64) + 64))(buf);
        float32x4_t v65 = v229;
        if (v71 >= (uint64_t)(*(void *)&buf[8] - *(void *)buf) >> 6)
        {
          *(void *)&v258[32] = 0;
          *(void *)&long long v91 = 0x100000001;
          *((void *)&v91 + 1) = 0x100000001;
          *(_OWORD *)uint64_t v258 = v91;
          *(_OWORD *)&v258[16] = 0xFFFFFFFF00000001;
          if ((void)__p)
          {
            *((void *)&__p + 1) = __p;
            operator delete((void *)__p);
          }
          long long __p = 0uLL;
          uint64_t v260 = 0;
        }
        else
        {
          unint64_t v88 = *(void *)buf + (v71 << 6);
          long long v89 = *(_OWORD *)v88;
          long long v90 = *(_OWORD *)(v88 + 16);
          *(void *)&v258[32] = *(void *)(v88 + 32);
          *(_OWORD *)uint64_t v258 = v89;
          *(_OWORD *)&v258[16] = v90;
          if (v258 != (unsigned char *)v88) {
            std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)&__p, *(char **)(v88 + 40), *(void *)(v88 + 48), (uint64_t)(*(void *)(v88 + 48) - *(void *)(v88 + 40)) >> 2);
          }
        }
        v267 = v74;
        BOOL v92 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v247, v74, (long long **)&v267);
        long long v93 = *(_OWORD *)&v258[16];
        *(_OWORD *)(v92 + 56) = *(_OWORD *)v258;
        *(_OWORD *)(v92 + 72) = v93;
        *((void *)v92 + 11) = *(void *)&v258[32];
        if (v92 + 56 != v258) {
          std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v92 + 96, (char *)__p, *((uint64_t *)&__p + 1), (uint64_t)(*((void *)&__p + 1) - __p) >> 2);
        }
        std::string::size_type v268 = (long long *)buf;
        std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v268);
        *(void *)std::string buf = &v256;
        std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
      }
      else
      {
        long long v77 = *(_OWORD *)(v76 + 9);
        *(_OWORD *)uint64_t v258 = *(_OWORD *)(v76 + 7);
        *(_OWORD *)&v258[16] = v77;
        *(void *)&v258[32] = v76[11];
        if (v258 != (unsigned char *)(v76 + 7)) {
          std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)&__p, (char *)v76[12], v76[13], (uint64_t)(v76[13] - v76[12]) >> 2);
        }
      }
      if ((v231 & 1) != 0 && !*(void *)(v240 + 968))
      {
        char v105 = vmaxv_u16((uint16x4_t)vmovn_s32(vcgtq_s32((int32x4_t)xmmword_192DCA240, *(int32x4_t *)&v258[4])));
        if (*(_DWORD *)&v258[20] == -1) {
          BOOL v106 = *(_DWORD *)&v258[16] != 1;
        }
        else {
          BOOL v106 = *(_DWORD *)&v258[20] == 5;
        }
        if (*(_DWORD *)&v258[16]) {
          BOOL v106 = 0;
        }
        char v94 = 1;
        if ((v105 & 1) == 0 && *(int *)v258 >= 1)
        {
          uint64_t v75 = 1;
          if (v106) {
            goto LABEL_171;
          }
          goto LABEL_140;
        }
      }
      else
      {
        char v94 = 1;
        if ((vmaxv_u16((uint16x4_t)vmovn_s32(vcltzq_s32(*(int32x4_t *)&v258[4]))) & 1) == 0)
        {
          uint64_t v75 = 1;
          if ((*(_DWORD *)v258 & 0x80000000) != 0) {
            goto LABEL_171;
          }
LABEL_140:
          if (!std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>(v50, v74))
          {
            (*(void (**)(long long **__return_ptr))(**(void **)(v64 + 64) + 24))(&v256);
            uint64_t v95 = *(void ***)(v64 + 64);
            uint64_t v254 = v232;
            int v255 = v234;
            if (v234) {
              atomic_fetch_add_explicit(&v234->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            blob_container = Espresso::make_blob_container(v230, &v261, v240, v95, &v254, (long long *)v74, 1, v71);
            *(void *)std::string buf = v74;
            uint64_t v97 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v50, v74, (long long **)buf);
            uint64_t v99 = *(void *)blob_container;
            uint64_t v98 = *((void *)blob_container + 1);
            if (v98) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v98 + 8), 1uLL, memory_order_relaxed);
            }
            int v100 = (std::__shared_weak_count *)*((void *)v97 + 6);
            *((void *)v97 + 5) = v99;
            *((void *)v97 + 6) = v98;
            if (v100) {
              nitro::nitro_function::nitro_function(v100);
            }
            if (v255) {
              nitro::nitro_function::nitro_function(v255);
            }
            if (!v227)
            {
              std::string::size_type v268 = (long long *)v74;
              int v101 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v50, v74, &v268);
              _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2EEEEJNS_10shared_ptrIN8Espresso23abstract_blob_containerEEENS4_11layer_shapeENS3_INS4_31abstract_blob_container_optionsEEEEEC2B8ne180100IJLm0ELm1ELm2EEJS6_S7_S9_EJEJEJRS6_RS7_RS9_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSG_IJDpT2_EEEDpOT3_((uint64_t)buf, *((void *)v101 + 5), *((void *)v101 + 6), (long long *)v258, &v256);
              uint64_t v102 = v263;
              if ((unint64_t)v263 >= v264)
              {
                v263 = std::vector<std::tuple<std::shared_ptr<Espresso::abstract_blob_container>,Espresso::layer_shape,std::shared_ptr<Espresso::abstract_blob_container_options>>>::__push_back_slow_path<std::tuple<std::shared_ptr<Espresso::abstract_blob_container>,Espresso::layer_shape,std::shared_ptr<Espresso::abstract_blob_container_options>>>((void **)&v262, (long long *)buf);
                if (*((void *)&v272 + 1)) {
                  nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v272 + 1));
                }
              }
              else
              {
                *(_OWORD *)v263 = *(_OWORD *)buf;
                *(void *)std::string buf = 0;
                *(void *)&uint8_t buf[8] = 0;
                uint64_t v103 = *(void *)&buf[48];
                long long v104 = *(_OWORD *)&buf[32];
                *((_OWORD *)v102 + 1) = *(_OWORD *)&buf[16];
                *((_OWORD *)v102 + 2) = v104;
                *((void *)v102 + 6) = v103;
                *((void *)v102 + 7) = 0;
                *((void *)v102 + 8) = 0;
                *((void *)v102 + 9) = 0;
                *(_OWORD *)(v102 + 56) = v270;
                *((void *)v102 + 9) = v271;
                long long v270 = 0uLL;
                uint64_t v271 = 0;
                *((_OWORD *)v102 + 5) = v272;
                long long v272 = 0uLL;
                v263 = v102 + 96;
              }
              if ((void)v270)
              {
                *((void *)&v270 + 1) = v270;
                operator delete((void *)v270);
              }
              if (*(void *)&buf[8]) {
                nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&buf[8]);
              }
            }
            if (v257) {
              nitro::nitro_function::nitro_function(v257);
            }
          }
          char v94 = 0;
          uint64_t v75 = v73;
LABEL_171:
          if ((void)__p)
          {
            *((void *)&__p + 1) = __p;
            uint64_t v107 = v75;
            operator delete((void *)__p);
            uint64_t v75 = v107;
          }
          if (v94) {
            goto LABEL_188;
          }
          goto LABEL_174;
        }
      }
      uint64_t v75 = 1;
      goto LABEL_171;
    }
    LODWORD(v75) = v226;
LABEL_191:
    unsigned int v226 = v75;
    uint64_t v236 = *(void *)(v240 + 968);
    int v123 = *(std::__shared_weak_count **)(v240 + 976);
    if (v123) {
      atomic_fetch_add_explicit(&v123->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    double v224 = v123;
    *(void *)std::string buf = v242;
    uint64_t v124 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v233, v242, buf);
    uint64_t v125 = v124[3];
    if (v125 != v124[4])
    {
      uint64_t v126 = v124[4];
      uint64_t v127 = 0;
      if (v227) {
        BOOL v128 = v242 == 0;
      }
      else {
        BOOL v128 = 1;
      }
      char v129 = !v128;
      char v228 = v129;
      do
      {
        if (std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>(v50, (unsigned __int8 *)v125))
        {
          goto LABEL_202;
        }
        if (!v236) {
          goto LABEL_244;
        }
        Espresso::map_const_get<std::unordered_map<std::string,std::string>>((std::string *)buf, (void *)(v236 + 184), v125, v125);
        if (buf[23] >= 0) {
          uint64_t v144 = buf[23];
        }
        else {
          uint64_t v144 = *(void *)&buf[8];
        }
        uint64_t v145 = *(unsigned __int8 *)(v125 + 23);
        int v146 = (char)v145;
        if ((v145 & 0x80u) != 0) {
          uint64_t v145 = *(void *)(v125 + 8);
        }
        if (v144 == v145)
        {
          if (v146 >= 0) {
            vDSP_Length v147 = (unsigned __int8 *)v125;
          }
          else {
            vDSP_Length v147 = *(unsigned __int8 **)v125;
          }
          if ((buf[23] & 0x80) != 0)
          {
            uint64_t v152 = *(void **)buf;
            int v153 = memcmp(*(const void **)buf, v147, *(size_t *)&buf[8]);
            operator delete(v152);
            if (!v153) {
              goto LABEL_244;
            }
          }
          else
          {
            if (!buf[23]) {
              goto LABEL_244;
            }
            uint64_t v148 = 0;
            do
            {
              int v149 = buf[v148];
              int v150 = v147[v148];
            }
            while (v149 == v150 && buf[23] - 1 != v148++);
            if (v149 == v150)
            {
LABEL_244:
              (*(void (**)(long long **__return_ptr))(**(void **)(v64 + 64) + 24))(&v256);
              uint64_t v156 = *(const void **)(v64 + 64);
              if (v156
              {
                uint64_t v158 = v157;
                unsigned int v159 = *(std::__shared_weak_count **)(v64 + 72);
                if (v159) {
                  atomic_fetch_add_explicit(&v159->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                int v230 = *(_DWORD *)((*(uint64_t (**)(void *))(*v157 + 320))(v157) + 16);
                unsigned int v261 = *(_DWORD *)((*(uint64_t (**)(void *))(*v158 + 320))(v158) + 24);
                uint64_t v160 = v158[41];
                if (v160)
                {
                  uint64_t v161 = (std::__shared_weak_count *)v158[42];
                  if (v161) {
                    atomic_fetch_add_explicit(&v161->__shared_owners_, 1uLL, memory_order_relaxed);
                  }
                  if (v234) {
                    nitro::nitro_function::nitro_function(v234);
                  }
                  if (v159) {
LABEL_254:
                  }
                    nitro::nitro_function::nitro_function(v159);
                }
                else
                {
                  uint64_t v160 = v232;
                  uint64_t v161 = v234;
                  if (v159) {
                    goto LABEL_254;
                  }
                }
                uint64_t v162 = v160;
                float32x4_t v65 = v229;
              }
              else
              {
                uint64_t v161 = v234;
                uint64_t v162 = v232;
              }
              uint64_t v163 = *(void ***)(v64 + 64);
              uint64_t v232 = v162;
              uint64_t v252 = v162;
              std::string::size_type v253 = v161;
              if (v161) {
                atomic_fetch_add_explicit(&v161->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              uint64_t v234 = v161;
              uint64_t v164 = Espresso::make_blob_container(v230, &v261, v240, v163, &v252, (long long *)v125, 0, v127);
              *(void *)std::string buf = v125;
              uint64_t v165 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v50, (unsigned __int8 *)v125, (long long **)buf);
              uint64_t v167 = *(void *)v164;
              uint64_t v166 = *((void *)v164 + 1);
              if (v166) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v166 + 8), 1uLL, memory_order_relaxed);
              }
              uint64_t v168 = (std::__shared_weak_count *)*((void *)v165 + 6);
              *((void *)v165 + 5) = v167;
              *((void *)v165 + 6) = v166;
              if (v168) {
                nitro::nitro_function::nitro_function(v168);
              }
              if (v253) {
                nitro::nitro_function::nitro_function(v253);
              }
              uint64_t v169 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(void **)(v240 + 240), (void *)v125);
              char v170 = v228;
              if (v169) {
                char v170 = 0;
              }
              if ((v170 & 1) == 0)
              {
                *(void *)std::string buf = v125;
                uint64_t v171 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v247, (void *)v125, (long long **)buf);
                long long v172 = *(_OWORD *)(v171 + 72);
                *(_OWORD *)uint64_t v258 = *(_OWORD *)(v171 + 56);
                *(_OWORD *)&v258[16] = v172;
                uint64_t v173 = (const void *)*((void *)v171 + 12);
                *(void *)&v258[32] = *((void *)v171 + 11);
                long long __p = 0uLL;
                uint64_t v260 = 0;
                std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v173, *((void *)v171 + 13), (uint64_t)(*((void *)v171 + 13) - (void)v173) >> 2);
                std::string::size_type v268 = (long long *)v125;
                uint64_t v174 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v50, (unsigned __int8 *)v125, &v268);
                _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2EEEEJNS_10shared_ptrIN8Espresso23abstract_blob_containerEEENS4_11layer_shapeENS3_INS4_31abstract_blob_container_optionsEEEEEC2B8ne180100IJLm0ELm1ELm2EEJS6_S7_S9_EJEJEJRS6_RS7_RS9_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSG_IJDpT2_EEEDpOT3_((uint64_t)buf, *((void *)v174 + 5), *((void *)v174 + 6), (long long *)v258, &v256);
                uint64_t v175 = v263;
                if ((unint64_t)v263 >= v264)
                {
                  v263 = std::vector<std::tuple<std::shared_ptr<Espresso::abstract_blob_container>,Espresso::layer_shape,std::shared_ptr<Espresso::abstract_blob_container_options>>>::__push_back_slow_path<std::tuple<std::shared_ptr<Espresso::abstract_blob_container>,Espresso::layer_shape,std::shared_ptr<Espresso::abstract_blob_container_options>>>((void **)&v262, (long long *)buf);
                  if (*((void *)&v272 + 1)) {
                    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v272 + 1));
                  }
                }
                else
                {
                  *(_OWORD *)v263 = *(_OWORD *)buf;
                  *(void *)std::string buf = 0;
                  *(void *)&uint8_t buf[8] = 0;
                  uint64_t v176 = *(void *)&buf[48];
                  long long v177 = *(_OWORD *)&buf[32];
                  *((_OWORD *)v175 + 1) = *(_OWORD *)&buf[16];
                  *((_OWORD *)v175 + 2) = v177;
                  *((void *)v175 + 6) = v176;
                  *((void *)v175 + 7) = 0;
                  *((void *)v175 + 8) = 0;
                  *((void *)v175 + 9) = 0;
                  *(_OWORD *)(v175 + 56) = v270;
                  *((void *)v175 + 9) = v271;
                  long long v270 = 0uLL;
                  uint64_t v271 = 0;
                  *((_OWORD *)v175 + 5) = v272;
                  long long v272 = 0uLL;
                  v263 = v175 + 96;
                }
                if ((void)v270)
                {
                  *((void *)&v270 + 1) = v270;
                  operator delete((void *)v270);
                }
                if (*(void *)&buf[8]) {
                  nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&buf[8]);
                }
                if ((void)__p)
                {
                  *((void *)&__p + 1) = __p;
                  operator delete((void *)__p);
                }
              }
              if (v257) {
                nitro::nitro_function::nitro_function(v257);
              }
LABEL_202:
              *(void *)std::string buf = v125;
              uint64_t v130 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v50, (unsigned __int8 *)v125, (long long **)buf);
              uint64_t v131 = v130;
              uint64_t v132 = *(void **)(v64 + 88);
              unint64_t v133 = *(void *)(v64 + 96);
              if ((unint64_t)v132 >= v133)
              {
                uint64_t v136 = ((uint64_t)v132 - *v238) >> 4;
                unint64_t v137 = v136 + 1;
                if ((unint64_t)(v136 + 1) >> 60) {
                  std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v138 = v133 - *v238;
                if (v138 >> 3 > v137) {
                  unint64_t v137 = v138 >> 3;
                }
                if ((unint64_t)v138 >= 0x7FFFFFFFFFFFFFF0) {
                  unint64_t v139 = 0xFFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v139 = v137;
                }
                *(void *)&unsigned char buf[32] = v64 + 96;
                int v140 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v139);
                uint64_t v141 = &v140[16 * v136];
                *(void *)std::string buf = v140;
                *(void *)&uint8_t buf[8] = v141;
                *(void *)&unsigned char buf[24] = &v140[16 * v142];
                long long v143 = *(_OWORD *)(v131 + 40);
                *(_OWORD *)uint64_t v141 = v143;
                if (*((void *)&v143 + 1)) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v143 + 1) + 8), 1uLL, memory_order_relaxed);
                }
                *(void *)&uint8_t buf[16] = v141 + 16;
LABEL_216:
                std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(v238, buf);
                uint64_t v135 = *(void **)(v64 + 88);
                std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)buf);
                goto LABEL_217;
              }
              *uint64_t v132 = *((void *)v130 + 5);
              uint64_t v134 = *((void *)v130 + 6);
              v132[1] = v134;
              if (v134) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v134 + 8), 1uLL, memory_order_relaxed);
              }
              uint64_t v135 = v132 + 2;
              goto LABEL_206;
            }
          }
        }
        else if ((buf[23] & 0x80) != 0)
        {
          operator delete(*(void **)buf);
        }
        int v154 = *(void **)(v64 + 88);
        unint64_t v155 = *(void *)(v64 + 96);
        if ((unint64_t)v154 >= v155)
        {
          uint64_t v178 = ((uint64_t)v154 - *v238) >> 4;
          unint64_t v179 = v178 + 1;
          if ((unint64_t)(v178 + 1) >> 60) {
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v180 = v155 - *v238;
          if (v180 >> 3 > v179) {
            unint64_t v179 = v180 >> 3;
          }
          if ((unint64_t)v180 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v181 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v181 = v179;
          }
          *(void *)&unsigned char buf[32] = v64 + 96;
          uint64_t v182 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v181);
          char v183 = &v182[16 * v178];
          *(void *)std::string buf = v182;
          *(void *)&uint8_t buf[8] = v183;
          *(void *)&unsigned char buf[24] = &v182[16 * v184];
          *(void *)char v183 = 0;
          *((void *)v183 + 1) = 0;
          *(void *)&uint8_t buf[16] = v183 + 16;
          goto LABEL_216;
        }
        uint64_t v135 = v154 + 2;
        void *v154 = 0;
        v154[1] = 0;
LABEL_206:
        *(void *)(v64 + 88) = v135;
LABEL_217:
        *(void *)(v64 + 88) = v135;
        uint64_t v127 = (v127 + 1);
        v125 += 24;
      }
      while (v125 != v126);
    }
    if (v224) {
      nitro::nitro_function::nitro_function(v224);
    }
    if (v234) {
      nitro::nitro_function::nitro_function(v234);
    }
    if (v65) {
      nitro::nitro_function::nitro_function(v65);
    }
    ++v242;
    int8x16_t v55 = v225 + 2;
  }
  while (v225 + 2 != v223);
  uint64_t v37 = v240;
  uint64_t v185 = *(void *)(v240 + 32);
  uint64_t v186 = *(void *)(v240 + 40);
  *(void *)uint64_t v258 = 0;
  if (v186 != v185)
  {
    unint64_t v187 = 0;
    do
    {
      uint64_t v188 = *(void *)(v185 + 16 * v187);
      uint64_t v189 = *(void *)(v188 + 80);
      if (*(void *)(v188 + 88) != v189)
      {
        uint64_t v190 = 0;
        uint64_t v191 = 0;
        unint64_t v192 = 0;
        do
        {
          if (!*(void *)(v189 + v191))
          {
            *(void *)std::string buf = v258;
            *(void *)std::string buf = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v233, (unint64_t *)v258, (uint64_t)&std::piecewise_construct, (uint64_t **)buf)[3]+ v190;
            unint64_t v193 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v50, *(unsigned __int8 **)buf, (long long **)buf);
            uint64_t v195 = *((void *)v193 + 5);
            uint64_t v194 = *((void *)v193 + 6);
            if (v194) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v194 + 8), 1uLL, memory_order_relaxed);
            }
            uint64_t v196 = (void *)(v189 + v191);
            long long v197 = *(std::__shared_weak_count **)(v189 + v191 + 8);
            void *v196 = v195;
            v196[1] = v194;
            if (v197) {
              nitro::nitro_function::nitro_function(v197);
            }
          }
          ++v192;
          unint64_t v187 = *(void *)v258;
          uint64_t v185 = *(void *)(v240 + 32);
          uint64_t v198 = *(void *)(v185 + 16 * *(void *)v258);
          uint64_t v189 = *(void *)(v198 + 80);
          v191 += 16;
          v190 += 24;
        }
        while (v192 < (*(void *)(v198 + 88) - v189) >> 4);
        uint64_t v186 = *(void *)(v240 + 40);
      }
      *(void *)uint64_t v258 = ++v187;
    }
    while (v187 < (v186 - v185) >> 4);
  }
LABEL_310:
  (*(void (**)(void, uint64_t))(**(void **)(v37 + 16) + 72))(*(void *)(v37 + 16), v37);
  int v199 = v262;
  for (uint64_t i = v263; v199 != i; v199 += 96)
  {
    uint64_t v202 = *(void *)v199;
    uint64_t v201 = (std::__shared_weak_count *)*((void *)v199 + 1);
    if (v201) {
      atomic_fetch_add_explicit(&v201->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v203 = *((_OWORD *)v199 + 2);
    *(_OWORD *)std::string buf = *((_OWORD *)v199 + 1);
    *(_OWORD *)&uint8_t buf[16] = v203;
    *(void *)&unsigned char buf[32] = *((void *)v199 + 6);
    *(void *)&buf[48] = 0;
    *(void *)&long long v270 = 0;
    *(void *)&buf[40] = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&buf[40], *((const void **)v199 + 7), *((void *)v199 + 8), (uint64_t)(*((void *)v199 + 8) - *((void *)v199 + 7)) >> 2);
    uint64_t v204 = *((void *)v199 + 10);
    uint64_t v205 = (std::__shared_weak_count *)*((void *)v199 + 11);
    if (v205)
    {
      atomic_fetch_add_explicit(&v205->__shared_owners_, 1uLL, memory_order_relaxed);
      v251 = v205;
      atomic_fetch_add_explicit(&v205->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    else
    {
      v251 = 0;
    }
    uint64_t v250 = v204;
    (*(void (**)(uint64_t, unsigned char *, uint64_t *))(*(void *)v202 + 16))(v202, buf, &v250);
    if (v251) {
      nitro::nitro_function::nitro_function(v251);
    }
    if (v205) {
      nitro::nitro_function::nitro_function(v205);
    }
    if (*(void *)&buf[40])
    {
      *(void *)&buf[48] = *(void *)&buf[40];
      operator delete(*(void **)&buf[40]);
    }
    if (v201) {
      nitro::nitro_function::nitro_function(v201);
    }
  }
  if (v226)
  {
    *(void *)&v258[8] = 0;
    *(void *)&v258[16] = 0;
    *(void *)uint64_t v258 = &v258[8];
    v206 = *(void **)(v37 + 232);
    if (v206 != (void *)(v37 + 240))
    {
      do
      {
        if (*((unsigned char *)v206 + 56))
        {
          long long v207 = (long long *)(v206 + 4);
          uint64_t v208 = std::map<std::string,Espresso::blob_numerical_properties>::at((uint64_t)v247, v206 + 4);
          long long v209 = *(_OWORD *)v208;
          long long v210 = *(_OWORD *)(v208 + 16);
          *(void *)&unsigned char buf[32] = *(void *)(v208 + 32);
          *(_OWORD *)std::string buf = v209;
          *(_OWORD *)&uint8_t buf[16] = v210;
          *(void *)&buf[48] = 0;
          *(void *)&long long v270 = 0;
          *(void *)&buf[40] = 0;
          std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&buf[40], *(const void **)(v208 + 40), *(void *)(v208 + 48), (uint64_t)(*(void *)(v208 + 48) - *(void *)(v208 + 40)) >> 2);
          if ((vmaxv_u16((uint16x4_t)vmovn_s32(vcltzq_s32(*(int32x4_t *)&buf[4]))) & 1) != 0
            || (*(_DWORD *)buf & 0x80000000) != 0)
          {
            if (*((char *)v206 + 55) < 0) {
              long long v207 = *(long long **)v207;
            }
            v256 = v207;
            Espresso::throw_exception_selector<Espresso::invalid_state_error,char const*>("Negative input shape: %s", &v256);
          }
          v256 = (long long *)(v206 + 4);
          float v211 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v258, v206 + 4, &v256);
          long long v212 = *(_OWORD *)&buf[16];
          *(_OWORD *)(v211 + 56) = *(_OWORD *)buf;
          *(_OWORD *)(v211 + 72) = v212;
          *((void *)v211 + 11) = *(void *)&buf[32];
          if (v211 + 56 != buf) {
            std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v211 + 96, *(char **)&buf[40], *(uint64_t *)&buf[48], (uint64_t)(*(void *)&buf[48] - *(void *)&buf[40]) >> 2);
          }
          if (*(void *)&buf[40])
          {
            *(void *)&buf[48] = *(void *)&buf[40];
            operator delete(*(void **)&buf[40]);
          }
        }
        uint64_t v213 = (void *)v206[1];
        if (v213)
        {
          do
          {
            float v214 = v213;
            uint64_t v213 = (void *)*v213;
          }
          while (v213);
        }
        else
        {
          do
          {
            float v214 = (void *)v206[2];
            BOOL v15 = *v214 == (void)v206;
            v206 = v214;
          }
          while (!v15);
        }
        v206 = v214;
      }
      while (v214 != (void *)(v37 + 240));
    }
    if (v221 > 5)
    {
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Prevented shape_network stack overflow.");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    Espresso::compute_network_shape<std::string,Espresso::layer_shape,std::map<std::string,Espresso::layer_shape>>((uint64_t)buf, v37, (uint64_t)v258);
    Espresso::shape_network_recursive((Espresso *)v37, (Espresso::net *)buf, (const Espresso::network_shape *)(v221 + 1), 0, v215);
    std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&buf[24], *(char **)&buf[32]);
    std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)buf, *(char **)&buf[8]);
    std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)v258, *(char **)&v258[8]);
  }
  else
  {
    if (v227)
    {
      std::string::basic_string[abi:ne180100]<0>(buf, "pass_graph_coloring");
      *(void *)&v258[8] = 0;
      *(void *)&v258[16] = 0;
      *(void *)uint64_t v258 = &unk_1EE3500B0;
      uint64_t v216 = (std::__shared_weak_count *)operator new(0x30uLL);
      v216->__shared_owners_ = 0;
      v216->__shared_weak_owners_ = 0;
      v216->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE388618;
      v216[1].__shared_weak_owners_ = 0;
      v216[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE35F440;
      v216[1].__shared_owners_ = 0x100000000;
      if ((void *)(v37 + 480) == std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>(v37 + 472, buf))
      {
        LODWORD(v216[1].__shared_owners_) = 1;
        atomic_fetch_add_explicit(&v216->__shared_owners_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v216->__shared_owners_, 1uLL, memory_order_relaxed);
        *(void *)&v258[8] = v216 + 1;
        *(void *)&v258[16] = v216;
      }
      else
      {
        uint64_t v217 = (const std::string *)std::map<std::string,Espresso::blob_numerical_properties>::at(v37 + 472, buf);
        uint64_t v218 = std::stoi(v217, 0, 10);
        if (v218 != 1) {
          Espresso::throw_exception_selector<Espresso::unsupported_configuration_error,int &>("code %d is not a valid graph coloring method", v218);
        }
        HIDWORD(v216[1].__shared_owners_) = 1;
        LOBYTE(v216[1].__shared_weak_owners_) = 1;
        uint64_t v219 = *(std::__shared_weak_count **)&v258[16];
        atomic_fetch_add_explicit(&v216->__shared_owners_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v216->__shared_owners_, 1uLL, memory_order_relaxed);
        *(void *)&v258[8] = v216 + 1;
        *(void *)&v258[16] = v216;
        if (v219) {
          nitro::nitro_function::nitro_function(v219);
        }
      }
      nitro::nitro_function::nitro_function(v216);
      Espresso::pass_graph_coloring::run_on_network((Espresso::pass_graph_coloring *)v258, (Espresso::net *)v37, (uint64_t)v248);
      if (v249) {
        nitro::nitro_function::nitro_function(v249);
      }
      nitro::nitro_function::nitro_function(v216);
      *(void *)uint64_t v258 = &unk_1EE3719B0;
      if (*(void *)&v258[16]) {
        nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&v258[16]);
      }
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
    }
    Espresso::net::_assign_streams((Espresso::net *)v37);
    Espresso::net::_on_resized((Espresso::net *)v37);
    Espresso::net::_resolve_default_configuration((Espresso::net *)v37);
    (*(void (**)(void, uint64_t))(**(void **)(v37 + 16) + 80))(*(void *)(v37 + 16), v37);
    Espresso::run_pass_on_network<Espresso::pass_update_absolute_indexes_after_transform>(v37);
  }
  *(void *)std::string buf = &v262;
  std::vector<std::tuple<std::shared_ptr<Espresso::abstract_blob_container>,Espresso::layer_shape,std::shared_ptr<Espresso::abstract_blob_container_options>>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (v222) {
    nitro::nitro_function::nitro_function(v222);
  }
}

void sub_19210A5C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,std::logic_error a52,uint64_t a53,char *a54,uint64_t a55,std::__shared_weak_count *a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  nitro::nitro_function::nitro_function(v63);
  a54 = (char *)&unk_1EE3719B0;
  if (a56) {
    nitro::nitro_function::nitro_function(a56);
  }
  if (*(char *)(v64 - 201) < 0) {
    operator delete(*(void **)(v64 - 224));
  }
  a54 = &a63;
  std::vector<std::tuple<std::shared_ptr<Espresso::abstract_blob_container>,Espresso::layer_shape,std::shared_ptr<Espresso::abstract_blob_container_options>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a54);
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  _Unwind_Resume(a1);
}

void sub_19210A6DC(void *a1, int a2)
{
  if (a2)
  {
    Espresso::network_shape::~network_shape((char **)(v2 - 224));
    if (a2 == 4)
    {
      __cxa_begin_catch(a1);
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Failed in 2nd reshape after missing custom layer info.");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    __cxa_begin_catch(a1);
    uint64_t v6 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    unint64_t v7 = v6;
    if (a2 == 3)
    {
      std::runtime_error::runtime_error(v6, "Failed in 2nd reshape after missing custom layer info.");
      __cxa_throw(v7, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    std::runtime_error::runtime_error(v6, "Failed in 2nd reshape after missing custom layer info.");
    __cxa_throw(v7, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  JUMPOUT(0x19210AAD4);
}

void sub_19210A7CC()
{
}

void sub_19210A7E8()
{
}

void sub_19210A804()
{
}

void sub_19210A820(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x19210AAD4);
}

void sub_19210A830()
{
}

void sub_19210A850()
{
}

void sub_19210A85C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,std::__shared_weak_count *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,std::__shared_weak_count *a53,uint64_t a54,uint64_t *a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,void *__p,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::tuple<std::shared_ptr<Espresso::abstract_blob_container>,Espresso::layer_shape,std::shared_ptr<Espresso::abstract_blob_container_options>>::~tuple((void *)(v64 - 224));
  if (a53) {
    nitro::nitro_function::nitro_function(a53);
  }
  if (__p)
  {
    a61 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a29) {
    nitro::nitro_function::nitro_function(a29);
  }
  if (a21) {
    nitro::nitro_function::nitro_function(a21);
  }
  a55 = &a64;
  std::vector<std::tuple<std::shared_ptr<Espresso::abstract_blob_container>,Espresso::layer_shape,std::shared_ptr<Espresso::abstract_blob_container_options>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a55);
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  _Unwind_Resume(a1);
}

void sub_19210A86C()
{
  uint64_t v1 = *(void **)(v0 - 184);
  if (v1)
  {
    *(void *)(v0 - 176) = v1;
    operator delete(v1);
  }
  JUMPOUT(0x19210A8ACLL);
}

void sub_19210A8BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56)
{
  if (a56) {
    nitro::nitro_function::nitro_function();
  }
  JUMPOUT(0x19210AAC8);
}

void sub_19210A8D4()
{
  uint64_t v1 = *(std::__shared_weak_count **)(v0 - 248);
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  JUMPOUT(0x19210A8C4);
}

void sub_19210A8F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void **a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (!v64)
  {
    a55 = (void **)&a64;
    std::vector<std::tuple<std::shared_ptr<Espresso::abstract_blob_container>,Espresso::layer_shape,std::shared_ptr<Espresso::abstract_blob_container_options>>>::__destroy_vector::operator()[abi:ne180100](&a55);
    if (a10) {
      nitro::nitro_function::nitro_function(a10);
    }
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19210AAB4);
}

void sub_19210A938(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,std::__shared_weak_count *a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,void *__p,uint64_t a61)
{
  std::tuple<std::shared_ptr<Espresso::abstract_blob_container>,Espresso::layer_shape,std::shared_ptr<Espresso::abstract_blob_container_options>>::~tuple((void *)(v61 - 224));
  if (__p) {
    operator delete(__p);
  }
  if (a53) {
    nitro::nitro_function::nitro_function(a53);
  }
  JUMPOUT(0x19210AA58);
}

void sub_19210A948(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53)
{
  if (a53) {
    nitro::nitro_function::nitro_function();
  }
  JUMPOUT(0x19210AA90);
}

void sub_19210A954()
{
}

void sub_19210A964()
{
  uint64_t v1 = *(void **)(v0 - 208);
  if (v1)
  {
    *(void *)(v0 - 200) = v1;
    operator delete(v1);
  }
  JUMPOUT(0x19210AAD4);
}

void sub_19210A97C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,std::__shared_weak_count *a51,uint64_t a52,std::__shared_weak_count *a53)
{
  if (a51) {
    nitro::nitro_function::nitro_function(a51);
  }
  if (a53) {
    nitro::nitro_function::nitro_function(a53);
  }
  JUMPOUT(0x19210AA90);
}

void sub_19210A9A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52)
{
  *(void *)(v52 - 224) = &a52;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)(v52 - 224));
  JUMPOUT(0x19210AA90);
}

void sub_19210A9B0()
{
}

void sub_19210A9B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,std::__shared_weak_count *a53)
{
  if (v53) {
    nitro::nitro_function::nitro_function(v53);
  }
  if (a53) {
    nitro::nitro_function::nitro_function(a53);
  }
  JUMPOUT(0x19210AA58);
}

void sub_19210A9EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53)
{
  if (a53) {
    nitro::nitro_function::nitro_function();
  }
  JUMPOUT(0x19210AA58);
}

void sub_19210A9F8()
{
  *(void *)(v0 - 232) = v0 - 224;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)(v0 - 232));
  JUMPOUT(0x19210AA80);
}

void sub_19210AA10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,void *a60)
{
  if (a60) {
    operator delete(a60);
  }
  if (a29) {
    ((void (*)(void))nitro::nitro_function::nitro_function)();
  }
  if (v60) {
    nitro::nitro_function::nitro_function(v60);
  }
  JUMPOUT(0x19210AAB8);
}

void sub_19210AA1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53)
{
  if (a49) {
    JUMPOUT(0x19210AA28);
  }
  if (a53) {
    nitro::nitro_function::nitro_function(a53);
  }
  JUMPOUT(0x19210AA58);
}

void sub_19210AA40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void **a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  a55 = (void **)&a64;
  std::vector<std::tuple<std::shared_ptr<Espresso::abstract_blob_container>,Espresso::layer_shape,std::shared_ptr<Espresso::abstract_blob_container_options>>>::__destroy_vector::operator()[abi:ne180100](&a55);
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  _Unwind_Resume(a1);
}

void sub_19210AA4C()
{
}

void sub_19210AA54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  JUMPOUT(0x19210AAA0);
}

void sub_19210AA68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52)
{
  BOOL v53 = *(void **)(v52 - 184);
  if (v53)
  {
    *(void *)(v52 - 176) = v53;
    operator delete(v53);
  }
  *(void *)(v52 - 224) = &a52;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)(v52 - 224));
  JUMPOUT(0x19210AA90);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>(void *a1, unsigned __int8 *a2)
{
  unint64_t v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  uint64_t v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  for (uint64_t i = *v10; i; uint64_t i = *(unsigned __int8 **)i)
  {
    unint64_t v12 = *((void *)i + 1);
    if (v6 == v12)
    {
      if (std::equal_to<std::string>::operator()[abi:ne180100](i + 16, a2)) {
        return i;
      }
    }
    else
    {
      if (v8 > 1)
      {
        if (v12 >= *(void *)&v5) {
          v12 %= *(void *)&v5;
        }
      }
      else
      {
        v12 &= *(void *)&v5 - 1;
      }
      if (v12 != v9) {
        return 0;
      }
    }
  }
  return i;
}

char *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, long long **a3)
{
  unint64_t v7 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v9) {
        unint64_t v3 = v7 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v7;
    }
    unint64_t v12 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      uint64_t v13 = (char *)*v12;
      if (*v12)
      {
        do
        {
          unint64_t v14 = *((void *)v13 + 1);
          if (v14 == v8)
          {
            if (std::equal_to<std::string>::operator()[abi:ne180100]((unsigned __int8 *)v13 + 16, a2)) {
              return v13;
            }
          }
          else
          {
            if (v11 > 1)
            {
              if (v14 >= v9) {
                v14 %= v9;
              }
            }
            else
            {
              v14 &= v9 - 1;
            }
            if (v14 != v3) {
              break;
            }
          }
          uint64_t v13 = *(char **)v13;
        }
        while (v13);
      }
    }
  }
  BOOL v15 = (void *)(a1 + 16);
  uint64_t v13 = (char *)operator new(0x38uLL);
  v29[0] = v13;
  v29[1] = a1 + 16;
  char v30 = 0;
  *(void *)uint64_t v13 = 0;
  *((void *)v13 + 1) = v8;
  id v16 = (std::string *)(v13 + 16);
  double v17 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v16, *(const std::string::value_type **)v17, *((void *)v17 + 1));
  }
  else
  {
    long long v18 = *v17;
    *((void *)v13 + 4) = *((void *)v17 + 2);
    *(_OWORD *)&v16->__r_.__value_.__l.__data_ = v18;
  }
  *((void *)v13 + 5) = 0;
  *((void *)v13 + 6) = 0;
  char v30 = 1;
  float v19 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v20 = *(float *)(a1 + 32);
  if (!v9 || (float)(v20 * (float)v9) < v19)
  {
    BOOL v21 = 1;
    if (v9 >= 3) {
      BOOL v21 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v22 = v21 | (2 * v9);
    unint64_t v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23) {
      size_t v24 = v23;
    }
    else {
      size_t v24 = v22;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__rehash<true>(a1, v24);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v25 = *(void *)a1;
  long long v26 = *(void **)(*(void *)a1 + 8 * v3);
  if (v26)
  {
    *(void *)uint64_t v13 = *v26;
LABEL_41:
    *long long v26 = v13;
    goto LABEL_42;
  }
  *(void *)uint64_t v13 = *v15;
  *BOOL v15 = v13;
  *(void *)(v25 + 8 * v3) = v15;
  if (*(void *)v13)
  {
    unint64_t v27 = *(void *)(*(void *)v13 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v27 >= v9) {
        v27 %= v9;
      }
    }
    else
    {
      v27 &= v9 - 1;
    }
    long long v26 = (void *)(*(void *)a1 + 8 * v27);
    goto LABEL_41;
  }
LABEL_42:
  v29[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>>>>::reset[abi:ne180100]((uint64_t)v29);
  return v13;
}

void sub_19210AE3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 16)
  {
    unint64_t v4 = *(std::__shared_weak_count **)(i - 8);
    if (v4) {
      nitro::nitro_function::nitro_function(v4);
    }
  }
  a1[1] = v2;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(unint64_t a1)
{
  if (a1 >> 60) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(16 * a1);
}

uint64_t std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != v3)
  {
    *(void *)(a1 + 16) = v2 - 16;
    unint64_t v4 = *(std::__shared_weak_count **)(v2 - 8);
    if (v4)
    {
      nitro::nitro_function::nitro_function(v4);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 16;
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(void *result, void *a2)
{
  uint64_t v3 = (void *)*result;
  uint64_t v2 = (void *)result[1];
  uint64_t v4 = a2[1];
  while (v2 != v3)
  {
    long long v5 = *((_OWORD *)v2 - 1);
    v2 -= 2;
    *(_OWORD *)(v4 - 16) = v5;
    v4 -= 16;
    *uint64_t v2 = 0;
    v2[1] = 0;
  }
  a2[1] = v4;
  unint64_t v6 = (void *)*result;
  MIL::IRNamedValueType *result = v4;
  a2[1] = v6;
  uint64_t v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<Espresso::abstract_blob_container>>,0>((uint64_t)v1 + 16);
    }
    operator delete(v1);
  }
}

char *Espresso::make_blob_container(int a1, unsigned int *a2, uint64_t a3, void **a4, void *a5, long long *a6, uint64_t a7, uint64_t a8)
{
  int v37 = a1;
  Espresso::net::resolve_blob_numerical_properties(a3, a6, &v37, a2, (uint64_t)&v34);
  unsigned int v33 = DWORD2(v34);
  if (((*(uint64_t (**)(void *, unsigned int *, unsigned int *))(*a4[1] + 104))(a4[1], &v33, a2) & 1) == 0)
  {
    unsigned int v33 = *a2;
    DWORD2(v34) = v33;
  }
  ((void (*)(uint64_t *__return_ptr, void **, uint64_t, uint64_t))(*a4)[3])(&v31, a4, a7, a8);
  if (v31)
  {
    uint64_t v15 = *(void *)(v31 + 72);
    if (v15)
    {
      uint64_t v16 = *(void *)(v31 + 80);
      if (v16) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
      }
      double v17 = (std::__shared_weak_count *)a5[1];
      *a5 = v15;
      a5[1] = v16;
      if (v17)
      {
        nitro::nitro_function::nitro_function(v17);
        uint64_t v15 = *a5;
      }
      int v37 = (***(uint64_t (****)(void))(v15 + 8))(*(void *)(v15 + 8));
    }
  }
  if (HIDWORD(v34) == -1)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)*a5 + 128))(&v30);
    uint64_t v18 = v30;
    if (*((void *)&v30 + 1)) {
      nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v30 + 1));
    }
    if (v18)
    {
      (*(void (**)(long long *__return_ptr))(*(void *)*a5 + 128))(&v30);
      long long v19 = v30;
      long long v30 = 0uLL;
      float v20 = (std::__shared_weak_count *)a5[1];
      *(_OWORD *)a5 = v19;
      if (v20)
      {
        nitro::nitro_function::nitro_function(v20);
        if (*((void *)&v30 + 1)) {
          nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v30 + 1));
        }
      }
      int v37 = (***(uint64_t (****)(void))(*a5 + 8))(*(void *)(*a5 + 8));
    }
  }
  if (v31 && *(unsigned char *)(v31 + 8)) {
    unsigned int v33 = *(_DWORD *)(v31 + 12);
  }
  if (((unsigned int (*)(void **))(*a4)[5])(a4))
  {
    if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(void **)(a3 + 264), a6))
    {
      *(void *)&long long v30 = a6;
      if (std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a3 + 256), a6, (long long **)&v30)[56])unsigned int v33 = 0; {
    }
      }
  }
  Espresso::abstract_blob_container::make((uint64_t)a5, &v37, &v33, &v30);
  uint64_t v21 = v30;
  unint64_t v22 = (long long *)(v30 + 112);
  *(_OWORD *)(v30 + 112) = v34;
  if (v22 != &v34) {
    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)(v21 + 128), (char *)__p, (uint64_t)v36, (v36 - (unsigned char *)__p) >> 2);
  }
  uint64_t v23 = v31;
  if (v31)
  {
    if (*(unsigned char *)(v31 + 16))
    {
      uint64_t v24 = v30;
      uint64_t v25 = v30 + 112;
      *(_OWORD *)(v30 + 112) = *(_OWORD *)(v31 + 24);
      if (v25 != v23 + 24) {
        std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)(v24 + 128), *(char **)(v23 + 40), *(void *)(v23 + 48), (uint64_t)(*(void *)(v23 + 48) - *(void *)(v23 + 40)) >> 2);
      }
    }
  }
  uint64_t v38 = a6;
  long long v26 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a3 + 136, (unsigned __int8 *)a6, &v38);
  unint64_t v27 = (std::__shared_weak_count *)*((void *)v26 + 6);
  *(_OWORD *)(v26 + 40) = v30;
  long long v28 = v26 + 40;
  long long v30 = 0uLL;
  if (v27)
  {
    nitro::nitro_function::nitro_function(v27);
    if (*((void *)&v30 + 1)) {
      nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v30 + 1));
    }
  }
  if (v32) {
    nitro::nitro_function::nitro_function(v32);
  }
  if (__p)
  {
    char v36 = __p;
    operator delete(__p);
  }
  return v28;
}

void sub_19210B360(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (a12) {
    nitro::nitro_function::nitro_function(a12);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *Espresso::net::resolve_blob_numerical_properties@<X0>(uint64_t a1@<X0>, void *a2@<X1>, int *a3@<X2>, _DWORD *a4@<X3>, uint64_t a5@<X8>)
{
  *(void *)(a5 + 16) = 0;
  *(void *)(a5 + 24) = 0;
  *(void *)(a5 + 32) = 0;
  *(void *)a5 = 0x13F800000;
  *(_DWORD *)(a5 + 8) = *a4;
  *(_DWORD *)(a5 + 12) = 1;
  __n128 result = (char *)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>(a1 + 352, a2);
  BOOL v11 = a1 + 360 != (void)result;
  if ((char *)(a1 + 360) != result)
  {
    *(_OWORD *)a5 = *(_OWORD *)(result + 56);
    if (result + 56 != (char *)a5) {
      __n128 result = std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)(a5 + 16), *((char **)result + 9), *((void *)result + 10), (uint64_t)(*((void *)result + 10) - *((void *)result + 9)) >> 2);
    }
  }
  uint64_t v12 = *(void *)(a1 + 408);
  if (v12)
  {
    int v13 = *a3;
    uint64_t v14 = a1 + 408;
    do
    {
      int v15 = *(_DWORD *)(v12 + 32);
      BOOL v16 = v15 < v13;
      if (v15 >= v13) {
        double v17 = (uint64_t *)v12;
      }
      else {
        double v17 = (uint64_t *)(v12 + 8);
      }
      if (!v16) {
        uint64_t v14 = v12;
      }
      uint64_t v12 = *v17;
    }
    while (*v17);
    if (v14 != a1 + 408 && v13 >= *(_DWORD *)(v14 + 32))
    {
      __n128 result = (char *)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>(v14 + 40, a2);
      if ((char *)(v14 + 48) != result)
      {
        *(_OWORD *)a5 = *(_OWORD *)(result + 56);
        if (result + 56 != (char *)a5) {
          __n128 result = std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)(a5 + 16), *((char **)result + 9), *((void *)result + 10), (uint64_t)(*((void *)result + 10) - *((void *)result + 9)) >> 2);
        }
        BOOL v11 = 1;
      }
    }
  }
  if (v11 && (*(_DWORD *)(a5 + 8) & 0x80000000) != 0) {
    *(_DWORD *)(a5 + 8) = *a4;
  }
  return result;
}

void sub_19210B500(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 24) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::base_kernel::force_high_precision_output_f32(Espresso::base_kernel *this)
{
  return 0;
}

BOOL Espresso::context_cpu::supports_custom_compute_path_for_blob(uint64_t a1, unsigned int *a2, _DWORD *a3)
{
  unsigned int v3 = *a2;
  if (*(unsigned char *)(a1 + 54)) {
    return v3 < 5 || v3 == *a3;
  }
  else {
    return v3 == 3;
  }
}

uint64_t Espresso::ANECompilerEngine::context::supports_custom_compute_path_for_blob(uint64_t a1, _DWORD *a2)
{
  return (*a2 < 0xFu) & (0x96u >> *a2);
}

uint64_t Espresso::generic_load_constant_kernel::blob_options@<X0>(Espresso::generic_load_constant_kernel *this@<X0>, int a2@<W1>, void *a3@<X8>)
{
  uint64_t result = *((void *)this + 43);
  if (!result
    || ((uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 32))(result), result)
      ? (BOOL v7 = a2 == 0)
      : (BOOL v7 = 1),
        v7))
  {
    *a3 = 0;
    a3[1] = 0;
  }
  else
  {
    uint64_t v8 = operator new(0x70uLL);
    v8[1] = 0;
    _DWORD v8[2] = 0;
    void *v8 = &unk_1EE388F48;
    *((_OWORD *)v8 + 4) = 0u;
    *((_OWORD *)v8 + 5) = 0u;
    *((_OWORD *)v8 + 2) = 0u;
    *((_OWORD *)v8 + 3) = 0u;
    v8[3] = &unk_1EE3661F8;
    *((_DWORD *)v8 + 12) = 1065353216;
    v8[7] = 0x1FFFFFFFFLL;
    v8[12] = 0;
    v8[13] = 0;
    v8[8] = 0;
    v8[9] = 0;
    v8[10] = 0;
    *((unsigned char *)v8 + 88) = 0;
    *a3 = v8 + 3;
    a3[1] = v8;
    *((unsigned char *)v8 + 32) = 1;
    uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 43) + 32))(*((void *)this + 43));
    *((_DWORD *)v8 + 9) = result;
  }
  return result;
}

void sub_19210B690(_Unwind_Exception *a1)
{
  nitro::nitro_function::nitro_function(v1);
  _Unwind_Resume(a1);
}

_DWORD *Espresso::generic_cast_kernel::blob_options@<X0>(_DWORD *this@<X0>, char a2@<W1>, void *a3@<X8>)
{
  if (a2)
  {
    int v4 = this[70];
    if ((v4 | 2) == 7)
    {
      this[71] = v4;
      int v4 = 3;
      this[70] = 3;
    }
    this = operator new(0x70uLL);
    *((void *)this + 1) = 0;
    *((void *)this + 2) = 0;
    *(void *)this = &unk_1EE388F48;
    *((_OWORD *)this + 4) = 0u;
    *((_OWORD *)this + 5) = 0u;
    *((_OWORD *)this + 2) = 0u;
    *((_OWORD *)this + 3) = 0u;
    *((void *)this + 3) = &unk_1EE3661F8;
    this[12] = 1065353216;
    *((void *)this + 7) = 0x1FFFFFFFFLL;
    *((void *)this + 12) = 0;
    *((void *)this + 13) = 0;
    *((void *)this + 8) = 0;
    *((void *)this + 9) = 0;
    *((unsigned char *)this + 88) = 0;
    *((void *)this + 10) = 0;
    *a3 = this + 6;
    a3[1] = this;
    *((unsigned char *)this + 32) = 1;
    this[9] = v4;
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
  }
  return this;
}

void *Espresso::inner_product_kernel_cpu::blob_options@<X0>(void *this@<X0>, char a2@<W1>, void *a3@<X8>)
{
  if ((a2 & 1) != 0 || *((_DWORD *)this + 85) != 5)
  {
    *a3 = 0;
    a3[1] = 0;
  }
  else
  {
    this = operator new(0x70uLL);
    this[1] = 0;
    this[2] = 0;
    *this = &unk_1EE388F48;
    *((_OWORD *)this + 4) = 0u;
    *((_OWORD *)this + 5) = 0u;
    *((_OWORD *)this + 2) = 0u;
    *((_OWORD *)this + 3) = 0u;
    this[3] = &unk_1EE3661F8;
    *((_DWORD *)this + 12) = 1065353216;
    this[7] = 0x1FFFFFFFFLL;
    this[12] = 0;
    this[13] = 0;
    this[8] = 0;
    this[9] = 0;
    *((unsigned char *)this + 88) = 0;
    this[10] = 0;
    *a3 = this + 3;
    a3[1] = this;
    *((unsigned char *)this + 32) = 1;
    *((_DWORD *)this + 9) = 2;
  }
  return this;
}

uint64_t _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2EEEEJNS_10shared_ptrIN8Espresso23abstract_blob_containerEEENS4_11layer_shapeENS3_INS4_31abstract_blob_container_optionsEEEEEC2B8ne180100IJLm0ELm1ELm2EEJS6_S7_S9_EJEJEJRS6_RS7_RS9_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSG_IJDpT2_EEEDpOT3_(uint64_t a1, uint64_t a2, uint64_t a3, long long *a4, void *a5)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  if (a3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(a3 + 8), 1uLL, memory_order_relaxed);
  }
  long long v7 = *a4;
  long long v8 = a4[1];
  uint64_t v9 = *((void *)a4 + 4);
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 48) = v9;
  *(_OWORD *)(a1 + 32) = v8;
  *(_OWORD *)(a1 + 16) = v7;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((void *)(a1 + 56), *((const void **)a4 + 5), *((void *)a4 + 6), (uint64_t)(*((void *)a4 + 6) - *((void *)a4 + 5)) >> 2);
  uint64_t v10 = a5[1];
  *(void *)(a1 + 80) = *a5;
  *(void *)(a1 + 88) = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  return a1;
}

void sub_19210B8CC(_Unwind_Exception *exception_object)
{
  unsigned int v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<std::tuple<std::shared_ptr<Espresso::abstract_blob_container>,Espresso::layer_shape,std::shared_ptr<Espresso::abstract_blob_container_options>>>::__push_back_slow_path<std::tuple<std::shared_ptr<Espresso::abstract_blob_container>,Espresso::layer_shape,std::shared_ptr<Espresso::abstract_blob_container_options>>>(void **a1, long long *a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 5);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0x2AAAAAAAAAAAAAALL) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  if (0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 5) > v3) {
    unint64_t v3 = 0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 5);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 5) >= 0x155555555555555) {
    unint64_t v6 = 0x2AAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v6 = v3;
  }
  if (v6)
  {
    if (v6 > 0x2AAAAAAAAAAAAAALL) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    long long v7 = (char *)operator new(96 * v6);
  }
  else
  {
    long long v7 = 0;
  }
  long long v8 = *a2;
  long long v9 = a2[1];
  uint64_t v10 = &v7[96 * v2];
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  BOOL v11 = &v7[96 * v6];
  *(_OWORD *)uint64_t v10 = v8;
  *((_OWORD *)v10 + 1) = v9;
  *((_OWORD *)v10 + 2) = a2[2];
  *((void *)v10 + 6) = *((void *)a2 + 6);
  *(_OWORD *)(v10 + 56) = *(long long *)((char *)a2 + 56);
  *((void *)v10 + 9) = *((void *)a2 + 9);
  *((void *)a2 + 7) = 0;
  *((void *)a2 + 8) = 0;
  *((_OWORD *)v10 + 5) = a2[5];
  *((void *)a2 + 10) = 0;
  *((void *)a2 + 11) = 0;
  *((void *)a2 + 9) = 0;
  uint64_t v12 = v10 + 96;
  int v13 = (char *)*a1;
  uint64_t v14 = (char *)a1[1];
  if (v14 == *a1)
  {
    *a1 = v10;
    a1[1] = v12;
    a1[2] = v11;
  }
  else
  {
    uint64_t v15 = 0;
    do
    {
      BOOL v16 = &v10[v15];
      double v17 = &v14[v15];
      *((_OWORD *)v16 - 6) = *(_OWORD *)&v14[v15 - 96];
      *((void *)v17 - 12) = 0;
      *((void *)v17 - 11) = 0;
      long long v18 = *(_OWORD *)&v14[v15 - 80];
      long long v19 = *(_OWORD *)&v14[v15 - 64];
      *((void *)v16 - 6) = *(void *)&v14[v15 - 48];
      *((_OWORD *)v16 - 5) = v18;
      *((_OWORD *)v16 - 4) = v19;
      *((void *)v16 - 3) = 0;
      *(_OWORD *)(v16 - 40) = *(_OWORD *)&v14[v15 - 40];
      *((void *)v16 - 3) = *(void *)&v14[v15 - 24];
      *((void *)v17 - 5) = 0;
      *((void *)v17 - 4) = 0;
      *((void *)v17 - 3) = 0;
      *((_OWORD *)v16 - 1) = *(_OWORD *)&v14[v15 - 16];
      *((void *)v17 - 2) = 0;
      *((void *)v17 - 1) = 0;
      v15 -= 96;
    }
    while (&v14[v15] != v13);
    uint64_t v14 = (char *)*a1;
    float v20 = (char *)a1[1];
    *a1 = &v10[v15];
    a1[1] = v12;
    a1[2] = v11;
    while (v20 != v14)
    {
      v20 -= 96;
      std::allocator<std::tuple<std::shared_ptr<Espresso::abstract_blob_container>,Espresso::layer_shape,std::shared_ptr<Espresso::abstract_blob_container_options>>>::destroy[abi:ne180100](v20);
    }
  }
  if (v14) {
    operator delete(v14);
  }
  return v12;
}

void Espresso::run_pass_on_network<Espresso::pass_update_absolute_indexes_after_transform>(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  unint64_t v2 = (Espresso *)operator new(0x30uLL);
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)unint64_t v2 = &unk_1EE389760;
  unint64_t v3 = (void *)((char *)v2 + 24);
  *((void *)v2 + 4) = 0;
  *((void *)v2 + 5) = 0;
  *((void *)v2 + 3) = &unk_1EE36BDA0;
  long long v5 = Espresso::espresso_os_log_subsystem(v2, v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::string buf = 136315138;
    unint64_t v8 = (unint64_t)"N8Espresso44pass_update_absolute_indexes_after_transformE" & 0x7FFFFFFFFFFFFFFFLL;
    _os_log_debug_impl(&dword_1920CB000, v5, OS_LOG_TYPE_DEBUG, "run_pass_on_network %s", buf, 0xCu);
  }

  (*(void (**)(uint8_t *__return_ptr, void *, uint64_t))(*v3 + 24))(buf, v3, a1);
  char v6 = 0;
  (*(void (**)(void *, char *))(*v3 + 16))(v3, &v6);
  if (v6)
  {
    if (buf[0]) {
      Espresso::net::set_analysis<Espresso::analysis_result>(a1, (unint64_t *)((char *)&v8 + 4));
    }
    else {
      std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::__erase_unique<std::type_index>((uint64_t *)(a1 + 1120), (uint64_t)"N8Espresso48analysis_update_absolute_indexes_after_transformE");
    }
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  nitro::nitro_function::nitro_function((std::__shared_weak_count *)v2);
}

void sub_19210BC48(_Unwind_Exception *a1)
{
  nitro::nitro_function::nitro_function(v1);
  _Unwind_Resume(a1);
}

void Espresso::pass_update_absolute_indexes_after_transform::get_analysis_usage(uint64_t a1, unsigned char *a2)
{
  *a2 = 0;
}

void Espresso::pass_update_absolute_indexes_after_transform::run_on_network(Espresso::net *a1@<X1>, uint64_t a2@<X8>)
{
  Espresso::net::get_analysis_if_existing<Espresso::pass_blob_name_indexing_result>(&v34, (uint64_t)a1);
  uint64_t v5 = v34;
  if (*((void *)&v34 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v34 + 1));
  }
  if (v5) {
    Espresso::run_pass_on_network<Espresso::pass_blob_name_indexing>((uint64_t)a1);
  }
  Espresso::net::get_analysis_if_existing<Espresso::control_flow_graph>(&v34, (uint64_t)a1);
  uint64_t v6 = v34;
  if (*((void *)&v34 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v34 + 1));
  }
  if (v6)
  {
    std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::clear((void *)a1 + 111);
    long long v34 = 0uLL;
    char v35 = 0;
    uint64_t v7 = *((void *)a1 + 4);
    if (*((void *)a1 + 5) != v7)
    {
      uint64_t v8 = 0;
      unint64_t v9 = 0;
      unint64_t v10 = 0;
      do
      {
        BOOL v11 = (void *)(*(void *)(*(void *)(v7 + v8) + 64) + 240);
        std::string::basic_string[abi:ne180100]<0>(__p, "basic_block_head");
        uint64_t v12 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>(v11, (unsigned __int8 *)__p);
        if (v12) {
          int v13 = *((_DWORD *)v12 + 10);
        }
        else {
          int v13 = 0;
        }
        if (v33 < 0) {
          operator delete(__p[0]);
        }
        if (v13 == 1)
        {
          char v35 = 0;
          *(void *)&long long v34 = v10;
          unint64_t v9 = v10;
        }
        uint64_t v14 = *((void *)a1 + 4);
        unint64_t v15 = v10 + 1;
        if (v10 == ((*((void *)a1 + 5) - v14) >> 4) - 1) {
          goto LABEL_24;
        }
        BOOL v16 = (void *)(*(void *)(*(void *)(v14 + v8 + 16) + 64) + 240);
        std::string::basic_string[abi:ne180100]<0>(__p, "basic_block_head");
        double v17 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>(v16, (unsigned __int8 *)__p);
        if (v17) {
          int v18 = *((_DWORD *)v17 + 10);
        }
        else {
          int v18 = 0;
        }
        if (v33 < 0) {
          operator delete(__p[0]);
        }
        if (v18 == 1)
        {
LABEL_24:
          *((void *)&v34 + 1) = v10 + 1;
          long long v19 = std::__hash_table<std::__hash_value_type<unsigned long,Espresso::net::basic_block_t>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,Espresso::net::basic_block_t>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,Espresso::net::basic_block_t>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,Espresso::net::basic_block_t>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((float *)a1 + 222, v9, &v34);
          *(_OWORD *)(v19 + 3) = v34;
          *((unsigned char *)v19 + 40) = v35;
        }
        uint64_t v7 = *((void *)a1 + 4);
        v8 += 16;
        ++v10;
      }
      while (v15 < (*((void *)a1 + 5) - v7) >> 4);
    }
    std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::clear((uint64_t)a1 + 928);
    std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__rehash<true>((uint64_t)a1 + 928, vcvtps_u32_f32((float)(unint64_t)((uint64_t)(*((void *)a1 + 5) - *((void *)a1 + 4)) >> 4) / *((float *)a1 + 240)));
    uint64_t v20 = *((void *)a1 + 4);
    if (*((void *)a1 + 5) != v20)
    {
      uint64_t v21 = 0;
      unint64_t v22 = 0;
      do
      {
        __p[0] = (void *)(*(void *)(v20 + v21) + 16);
        std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1 + 928, (uint64_t)__p[0], (uint64_t)&std::piecewise_construct, (long long **)__p)[5] = v22++;
        uint64_t v20 = *((void *)a1 + 4);
        uint64_t v23 = *((void *)a1 + 5);
        v21 += 16;
      }
      while (v22 < (v23 - v20) >> 4);
      if (v23 != v20)
      {
        uint64_t v24 = 0;
        unint64_t v25 = 0;
        do
        {
          uint64_t v26 = *(void *)(v20 + v24);
          unint64_t v27 = *(const void **)(v26 + 64);
          if (v27)
          {
            if (v28)
            {
              long long v29 = v28;
              long long v30 = *(std::__shared_weak_count **)(v26 + 72);
              if (v30) {
                atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
              }
            }
            else
            {
              if (v28)
              {
                long long v29 = v28;
                long long v30 = *(std::__shared_weak_count **)(v26 + 72);
                if (v30) {
                  atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
                }
              }
              else
              {
                if (v31)
                {
                  long long v30 = *(std::__shared_weak_count **)(v26 + 72);
                  if (v30) {
                    atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
                  }
                  __p[0] = v31 + 41;
                  v31[44] = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1 + 928, (uint64_t)(v31 + 41), (uint64_t)&std::piecewise_construct, (long long **)__p)[5];
                  if (!v30) {
                    goto LABEL_41;
                  }
LABEL_40:
                  nitro::nitro_function::nitro_function(v30);
                  goto LABEL_41;
                }
                if (!v28) {
                  goto LABEL_41;
                }
                long long v29 = v28;
                long long v30 = *(std::__shared_weak_count **)(v26 + 72);
                if (v30) {
                  atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
                }
              }
            }
            __p[0] = v28 + 296;
            *((void *)v29 + 40) = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1 + 928, (uint64_t)(v28 + 296), (uint64_t)&std::piecewise_construct, (long long **)__p)[5];
            if (v30) {
              goto LABEL_40;
            }
          }
LABEL_41:
          ++v25;
          uint64_t v20 = *((void *)a1 + 4);
          v24 += 16;
        }
        while (v25 < (*((void *)a1 + 5) - v20) >> 4);
      }
    }
    *(unsigned char *)a2 = 1;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
  }
}

void sub_19210C0D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::net::get_analysis_if_existing<Espresso::pass_blob_name_indexing_result>(void *a1, uint64_t a2)
{
  unint64_t v3 = std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::find<std::type_index>((void *)(a2 + 1120), (uint64_t)&v8);
  if (!v3)
  {
    *a1 = 0;
    a1[1] = 0;
    return;
  }
  int v4 = v3;
  uint64_t v5 = (const void *)v3[3];
  uint64_t v6 = (std::__shared_weak_count *)v4[4];
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v5
  {
    *a1 = v7;
    a1[1] = v6;
    if (!v6) {
      return;
    }
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
    if (!v6) {
      return;
    }
  }
  nitro::nitro_function::nitro_function(v6);
}

void Espresso::net::get_analysis_if_existing<Espresso::control_flow_graph>(void *a1, uint64_t a2)
{
  unint64_t v3 = std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::find<std::type_index>((void *)(a2 + 1120), (uint64_t)&v8);
  if (!v3)
  {
    *a1 = 0;
    a1[1] = 0;
    return;
  }
  int v4 = v3;
  uint64_t v5 = (const void *)v3[3];
  uint64_t v6 = (std::__shared_weak_count *)v4[4];
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v5
  {
    *a1 = v7;
    a1[1] = v6;
    if (!v6) {
      return;
    }
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
    if (!v6) {
      return;
    }
  }
  nitro::nitro_function::nitro_function(v6);
}

void std::vector<std::tuple<std::shared_ptr<Espresso::abstract_blob_container>,Espresso::layer_shape,std::shared_ptr<Espresso::abstract_blob_container_options>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = **a1;
  if (v2)
  {
    int v4 = v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 12;
        std::allocator<std::tuple<std::shared_ptr<Espresso::abstract_blob_container>,Espresso::layer_shape,std::shared_ptr<Espresso::abstract_blob_container_options>>>::destroy[abi:ne180100](v4);
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<std::tuple<std::shared_ptr<Espresso::abstract_blob_container>,Espresso::layer_shape,std::shared_ptr<Espresso::abstract_blob_container_options>>>::destroy[abi:ne180100](void *a1)
{
  unint64_t v2 = (std::__shared_weak_count *)a1[11];
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  unint64_t v3 = (void *)a1[7];
  if (v3)
  {
    a1[8] = v3;
    operator delete(v3);
  }
  int v4 = (std::__shared_weak_count *)a1[1];
  if (v4)
  {
    nitro::nitro_function::nitro_function(v4);
  }
}

void Espresso::net::_resolve_default_configuration(Espresso::net *this)
{
  if (!*((void *)this + 105) && *((void *)this + 100) == *((void *)this + 101))
  {
    Espresso::net::infer_configuration_for_shapes(this, (Espresso::net *)((char *)this + 184), (uint64_t)&v7);
    std::vector<std::string>::__vdeallocate((std::vector<std::string> *)((char *)this + 800));
    *((_OWORD *)this + 50) = v7;
    *((void *)this + 102) = v8;
    uint64_t v8 = 0;
    long long v7 = 0uLL;
    unint64_t v2 = (char *)this + 832;
    std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)this + 824, *((char **)this + 104));
    uint64_t v3 = v10;
    *((void *)this + 103) = v9;
    *((void *)this + 104) = v3;
    uint64_t v4 = v11;
    *((void *)this + 105) = v11;
    if (v4)
    {
      *(void *)(v3 + 16) = v2;
      unint64_t v9 = &v10;
      uint64_t v10 = 0;
      uint64_t v11 = 0;
      uint64_t v3 = 0;
    }
    else
    {
      *((void *)this + 103) = v2;
    }
    std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v9, (char *)v3);
    uint64_t v12 = (void **)&v7;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v12);
    if (*((void *)this + 99) && *((void *)this + 31))
    {
      std::shared_ptr<Espresso::net>::shared_ptr[abi:ne180100]<Espresso::net,void>(&v5, *(void *)this, *((std::__shared_weak_count **)this + 1));
      Espresso::convert_to_explicit_padding(&v5, 0, 0);
      if (v6) {
        nitro::nitro_function::nitro_function(v6);
      }
    }
  }
}

void sub_19210C4D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::net::_assign_streams(Espresso::net *this)
{
  if ((***(unsigned int (****)(void))(*((void *)this + 2) + 8))(*(void *)(*((void *)this + 2) + 8)) == 60000
    && *((void *)this + 4) != *((void *)this + 5))
  {
    for (uint64_t i = (long long *)*((void *)this + 19); i; uint64_t i = *(long long **)i)
    {
      std::pair<std::string const,std::shared_ptr<Espresso::blob<float,4>>>::pair[abi:ne180100](&__p, i + 1);
      uint64_t v3 = (std::__shared_weak_count *)*((void *)&v37 + 1);
      *(_DWORD *)(v37 + 104) = 0;
      if (v3) {
        nitro::nitro_function::nitro_function(v3);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    Espresso::network_optimization_graph::network_optimization_graph((Espresso::network_optimization_graph *)v41, this);
    int v4 = *(_DWORD *)(*((void *)this + 2) + 48);
    v45[0] = 0;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v41;
    *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    v40[0] = 0;
    v40[1] = 0;
    unint64_t v39 = (uint64_t *)v40;
    std::deque<int>::push_back(&__p.__r_.__value_.__l.__size_, v45);
    char v33 = (uint64_t **)((char *)this + 504);
    while (*((void *)&v38 + 1))
    {
      uint64_t v5 = v38;
      int v6 = *(_DWORD *)(*(void *)(__p.__r_.__value_.__r.__words[2]
                                 + (((unint64_t)v38 >> 7) & 0x1FFFFFFFFFFFFF8))
                     + 4 * (v38 & 0x3FF));
      v45[0] = v6;
      *(void *)&long long v38 = v38 + 1;
      --*((void *)&v38 + 1);
      if ((unint64_t)(v5 + 1) >= 0x800)
      {
        operator delete(*(void **)__p.__r_.__value_.__r.__words[2]);
        __p.__r_.__value_.__r.__words[2] += 8;
        *(void *)&long long v38 = v38 - 1024;
      }
      *((unsigned char *)std::__tree<std::__value_type<int,BOOL>,std::__map_value_compare<int,std::__value_type<int,BOOL>,std::less<int>,true>,std::allocator<std::__value_type<int,BOOL>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(&v39, v6, v45)+ 32) = 1;
      long long v7 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(__p.__r_.__value_.__r.__words[0] + 16), v6, v45);
      uint64_t v8 = v7[5];
      unint64_t v9 = v7[6];
      while (v8 != v9)
      {
        int v10 = *(_DWORD *)v8;
        int v44 = *(_DWORD *)v8;
        for (uint64_t j = v40[0]; j; uint64_t j = (void *)*j)
        {
          int v12 = *((_DWORD *)j + 7);
          if (v10 >= v12)
          {
            if (v12 >= v10) {
              goto LABEL_21;
            }
            ++j;
          }
        }
        std::deque<int>::push_back(&__p.__r_.__value_.__l.__size_, &v44);
LABEL_21:
        uint64_t v8 = (uint64_t *)((char *)v8 + 4);
      }
      int v35 = v6;
      if (v6 < 0) {
        break;
      }
      int v13 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v43, v6, &v35);
      unint64_t v15 = v13[5];
      uint64_t v14 = v13[6];
      uint64_t v16 = *(void *)(*((void *)this + 4) + 16 * v6);
      double v17 = *(uint64_t **)(v16 + 104);
      if (*(uint64_t **)(v16 + 112) == v17)
      {
        long long v19 = 0;
        uint64_t v18 = 0;
        int v20 = 0;
      }
      else
      {
        uint64_t v18 = *v17;
        long long v19 = (std::__shared_weak_count *)v17[1];
        if (v19) {
          atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        int v20 = *(_DWORD *)(v18 + 104);
      }
      uint64_t v21 = (uint64_t *)*((void *)this + 64);
      for (k = v19; v21; uint64_t v21 = (uint64_t *)*v21)
      {
        int v22 = *((_DWORD *)v21 + 7);
        if (v6 >= v22)
        {
          if (v22 >= v6)
          {
            BOOL v24 = *((unsigned char *)std::__tree<std::__value_type<int,BOOL>,std::__map_value_compare<int,std::__value_type<int,BOOL>,std::less<int>,true>,std::allocator<std::__value_type<int,BOOL>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v33, v6, &v35)+ 32) != 0;
            goto LABEL_37;
          }
          ++v21;
        }
      }
      if ((int)((unint64_t)((char *)v14 - (char *)v15) >> 2) >= 2)
      {
        int v23 = *(_DWORD *)(v18 + 8);
        *((unsigned char *)std::__tree<std::__value_type<int,BOOL>,std::__map_value_compare<int,std::__value_type<int,BOOL>,std::less<int>,true>,std::allocator<std::__value_type<int,BOOL>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v33, v6, &v35)+ 32) = v23 < 128;
      }
      BOOL v24 = 1;
LABEL_37:
      unint64_t v25 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v43, v6, &v35);
      unint64_t v27 = (int *)v25[5];
      uint64_t v26 = (int *)v25[6];
      while (v27 != v26)
      {
        uint64_t v28 = *(void *)(*((void *)this + 4) + 16 * *v27);
        long long v29 = *(uint64_t **)(v28 + 104);
        long long v30 = *(uint64_t **)(v28 + 112);
        while (v29 != v30)
        {
          uint64_t v32 = *v29;
          uint64_t v31 = (std::__shared_weak_count *)v29[1];
          if (v31)
          {
            atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
            *(_DWORD *)(v32 + 104) = v20;
            nitro::nitro_function::nitro_function(v31);
          }
          else
          {
            *(_DWORD *)(v32 + 104) = v20;
          }
          v29 += 2;
        }
        if (v24)
        {
          ++v20;
          if (v4 >= 1) {
            v20 %= v4;
          }
        }
        ++v27;
      }
      if (k) {
        nitro::nitro_function::nitro_function(k);
      }
    }
    std::__tree<int>::destroy(v40[0]);
    std::deque<int>::~deque[abi:ne180100]((uint64_t)&__p.__r_.__value_.__l.__size_);
    std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v43[4]);
    std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v43[1]);
    if (v42) {
      nitro::nitro_function::nitro_function(v42);
    }
  }
}

void sub_19210C888(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, ...)
{
  va_start(va, a17);
  std::__tree<int>::destroy(a16);
  std::deque<int>::~deque[abi:ne180100](v17);
  Espresso::network_optimization_graph::~network_optimization_graph((Espresso::network_optimization_graph *)va);
  _Unwind_Resume(a1);
}

void Espresso::pass_graph_coloring::run_on_network(Espresso::pass_graph_coloring *this@<X0>, Espresso::net *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v271 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = (const void *)*((void *)this + 1);
  if (!v5
  {
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("options are not set for pass_graph_coloring");
  }
  uint64_t v8 = v7;
  unint64_t v9 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unsigned int v226 = v9;
  *(unsigned char *)a3 = 1;
  *(void *)(a3 + 8) = 0;
  int v10 = (_OWORD *)(a3 + 8);
  *(void *)(a3 + 16) = 0;
  switch(v7[2])
  {
    case 1:
      uint64_t v11 = (char *)operator new(8uLL);
      *(void *)uint64_t v11 = a2;
      v244[1] = v11 + 8;
      v244[2] = v11 + 8;
      v244[0] = v11;
      Espresso::reshape_networks_graph_coloring_raw_ptr(&v248, v244);
      long long v12 = *(_OWORD *)&v248.__r_.__value_.__l.__data_;
      goto LABEL_30;
    case 2:
      uint64_t v11 = (char *)operator new(8uLL);
      *(void *)uint64_t v11 = a2;
      v248.__r_.__value_.__l.__size_ = (std::string::size_type)(v11 + 8);
      v248.__r_.__value_.__r.__words[2] = (std::string::size_type)(v11 + 8);
      v248.__r_.__value_.__r.__words[0] = (std::string::size_type)v11;
      Espresso::reshape_networks_graph_coloring_raw_ptr_only_in_context(&v233, (void *)a2 + 2, &v248.__r_.__value_.__l.__data_);
      goto LABEL_29;
    case 3:
      std::shared_ptr<Espresso::net>::shared_ptr[abi:ne180100]<Espresso::net,void>(&v270, *(void *)a2, *((std::__shared_weak_count **)a2 + 1));
      uint64_t v241 = 0;
      unint64_t v242 = 0;
      uint64_t v243 = 0;
      v248.__r_.__value_.__r.__words[0] = (std::string::size_type)&v241;
      v248.__r_.__value_.__s.__data_[8] = 0;
      uint64_t v241 = (char *)operator new(0x10uLL);
      unint64_t v242 = v241;
      uint64_t v243 = v241 + 16;
      unint64_t v242 = (char *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>,std::shared_ptr<Espresso::abstract_blob_container>*,std::shared_ptr<Espresso::abstract_blob_container>*,std::shared_ptr<Espresso::abstract_blob_container>*>((uint64_t)&v243, &v270, &v270.__r_.__value_.__r.__words[2], v241);
      memset(&v248, 0, sizeof(v248));
      std::vector<Espresso::net *>::reserve((void **)&v248.__r_.__value_.__l.__data_, (v242 - v241) >> 4);
      int v13 = (_OWORD *)(a3 + 8);
      uint64_t v14 = v241;
      unint64_t v15 = v242;
      if (v241 == v242)
      {
        std::string::size_type size = v248.__r_.__value_.__l.__size_;
      }
      else
      {
        uint64_t v16 = (void *)v248.__r_.__value_.__l.__size_;
        do
        {
          uint64_t v17 = *(void *)v14;
          if ((unint64_t)v16 >= v248.__r_.__value_.__r.__words[2])
          {
            std::string::size_type v19 = v248.__r_.__value_.__r.__words[0];
            uint64_t v20 = (uint64_t)((uint64_t)v16 - v248.__r_.__value_.__r.__words[0]) >> 3;
            unint64_t v21 = v20 + 1;
            if ((unint64_t)(v20 + 1) >> 61) {
              std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
            }
            int64_t v22 = v248.__r_.__value_.__r.__words[2] - v248.__r_.__value_.__r.__words[0];
            if ((uint64_t)(v248.__r_.__value_.__r.__words[2] - v248.__r_.__value_.__r.__words[0]) >> 2 > v21) {
              unint64_t v21 = v22 >> 2;
            }
            if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v23 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v23 = v21;
            }
            if (v23) {
              unint64_t v23 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v23);
            }
            else {
              uint64_t v24 = 0;
            }
            unint64_t v25 = (void *)(v23 + 8 * v20);
            *unint64_t v25 = v17;
            std::string::size_type size = (std::string::size_type)(v25 + 1);
            if (v16 != (void *)v19)
            {
              do
              {
                uint64_t v26 = *--v16;
                *--unint64_t v25 = v26;
              }
              while (v16 != (void *)v19);
              uint64_t v16 = (void *)v248.__r_.__value_.__r.__words[0];
            }
            v248.__r_.__value_.__r.__words[0] = (std::string::size_type)v25;
            v248.__r_.__value_.__l.__size_ = size;
            v248.__r_.__value_.__r.__words[2] = v23 + 8 * v24;
            if (v16) {
              operator delete(v16);
            }
          }
          else
          {
            *uint64_t v16 = v17;
            std::string::size_type size = (std::string::size_type)(v16 + 1);
          }
          v248.__r_.__value_.__l.__size_ = size;
          v14 += 16;
          uint64_t v16 = (void *)size;
        }
        while (v14 != v15);
      }
      long long v233 = 0uLL;
      uint64_t v234 = 0;
      uint64_t v64 = (void *)v248.__r_.__value_.__r.__words[0];
      int64_t v65 = size - v248.__r_.__value_.__r.__words[0];
      if (size == v248.__r_.__value_.__r.__words[0])
      {
        uint64_t v66 = 0;
      }
      else
      {
        if (v65 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v66 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v65 >> 3);
        *(void *)&long long v233 = v66;
        uint64_t v234 = &v66[8 * v67];
        memmove(v66, v64, v65);
        *((void *)&v233 + 1) = &v66[8 * (v65 >> 3)];
      }
      int v10 = v13;
      Espresso::reshape_networks_graph_coloring_raw_ptr(__x, (char **)&v233);
      if (v66) {
        operator delete(v66);
      }
      if (v64) {
        operator delete(v64);
      }
      long long v228 = *(_OWORD *)__x;
      v248.__r_.__value_.__r.__words[0] = (std::string::size_type)&v241;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v248);
      if (v270.__r_.__value_.__l.__size_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v270.__r_.__value_.__l.__size_);
      }
      goto LABEL_31;
    case 4:
      memset(__x, 0, sizeof(__x));
      uint64_t v11 = (char *)operator new(8uLL);
      *(void *)uint64_t v11 = a2;
      v248.__r_.__value_.__l.__size_ = (std::string::size_type)(v11 + 8);
      v248.__r_.__value_.__r.__words[2] = (std::string::size_type)(v11 + 8);
      v248.__r_.__value_.__r.__words[0] = (std::string::size_type)v11;
      Espresso::reshape_networks_graph_coloring_raw_ptr_only_in_context(&v233, __x, &v248.__r_.__value_.__l.__data_);
LABEL_29:
      long long v12 = v233;
LABEL_30:
      long long v228 = v12;
      operator delete(v11);
LABEL_31:
      *int v10 = v228;
      goto LABEL_32;
    default:
      uint64_t v225 = a3;
      int v27 = *((unsigned __int8 *)v7 + 16);
      Espresso::run_pass_on_network<Espresso::pass_blob_name_indexing>((uint64_t)a2);
      Espresso::run_pass_on_network<Espresso::pass_global_name_indexing>((uint64_t)a2);
      *(void *)&long long v233 = a2;
      *((void *)&v233 + 1) = Espresso::net::get_analysis<Espresso::pass_blob_name_indexing_result>((uint64_t)a2);
      uint64_t v234 = (char *)Espresso::net::get_analysis<Espresso::pass_global_name_indexing_result>((uint64_t)a2);
      memset(&v235, 0, sizeof(v235));
      *(_OWORD *)unint64_t v237 = 0u;
      memset(v238, 0, sizeof(v238));
      uint64_t v239 = 0;
      int v240 = 1065353216;
      *(_OWORD *)__x = 0u;
      long long v266 = 0u;
      int v267 = 1065353216;
      if (v27)
      {
        std::vector<BOOL>::resize((uint64_t)v237, *(void *)(*((void *)&v233 + 1) + 40));
        v248.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1EE37C698;
        v248.__r_.__value_.__l.__size_ = (std::string::size_type)&v233;
        v248.__r_.__value_.__r.__words[2] = (std::string::size_type)__x;
        std::vector<int>::size_type __sz = (std::vector<int>::size_type)&v248;
        Espresso::net::apply_to_all_globals((void *)v233, &v248);
        std::__function::__value_func<void ()(std::pair<std::string,std::shared_ptr<Espresso::abstract_blob_container>> &)>::~__value_func[abi:ne180100](&v248);
      }
      uint64_t v223 = (void *)(a3 + 8);
      double v224 = v8;
      uint64_t v28 = v233;
      uint64_t v29 = *(void *)(v233 + 32);
      if (*(void *)(v233 + 40) != v29)
      {
        unint64_t v30 = 0;
        do
        {
          (*(void (**)(std::string *__return_ptr))(**(void **)(*(void *)(v29 + 16 * v30) + 64) + 304))(&v248);
          uint64_t v31 = (uint64_t *)v248.__r_.__value_.__r.__words[2];
          if (v248.__r_.__value_.__r.__words[2])
          {
            do
            {
              v270.__r_.__value_.__r.__words[0] = v30;
              uint64_t v32 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v233 + 96, v30, &v270);
              int v33 = *((_DWORD *)v31 + 4);
              uint64_t v34 = v32[3];
              v270.__r_.__value_.__r.__words[0] = v30;
              int v35 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v233 + 56, v30, &v270);
              char v36 = (unsigned __int8 *)(v34 + 24 * v33);
              int v37 = *((_DWORD *)v31 + 5);
              uint64_t v38 = v35[3];
              unint64_t v39 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>((void *)(*((void *)&v233 + 1) + 16), v36);
              if (!v39) {
                std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
              }
              int v40 = *((_DWORD *)v39 + 10);
              LODWORD(v270.__r_.__value_.__l.__data_) = v40;
              int v41 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>((void *)(*((void *)&v233 + 1) + 16), (unsigned __int8 *)(v38 + 24 * v37));
              if (!v41) {
                std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
              }
              int v42 = *((_DWORD *)v41 + 10);
              LODWORD(v245) = v42;
              uint64_t v43 = *(void *)(*((void *)&v233 + 1) + 176) + 24 * v42;
              int v44 = *(unint64_t **)v43;
              uint64_t v45 = *(unint64_t **)(v43 + 8);
              if (v44 == v45) {
                goto LABEL_303;
              }
              char v46 = 1;
              do
              {
                unint64_t v47 = *v44++;
                v46 &= v47 <= v30;
              }
              while (v44 != v45);
              if (v46)
              {
LABEL_303:
                if (std::__hash_table<Espresso::activation_mode,std::hash<Espresso::activation_mode>,std::equal_to<Espresso::activation_mode>,std::allocator<Espresso::activation_mode>>::find<Espresso::activation_mode>(*(uint64_t *)__x, *(unint64_t *)&__x[2], v42))
                {
                  int v42 = *((_DWORD *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)__x, v42, &v245)+ 5);
                }
                *((_DWORD *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)__x, v40, &v270)+ 5) = v42;
              }
              uint64_t v31 = (uint64_t *)*v31;
            }
            while (v31);
          }
          std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&v248);
          ++v30;
          uint64_t v28 = v233;
          uint64_t v29 = *(void *)(v233 + 32);
        }
        while (v30 < (*(void *)(v233 + 40) - v29) >> 4);
      }
      __int16 v48 = (uint64_t **)v266;
      if ((void)v266)
      {
        uint64_t v49 = v28 + 184;
        do
        {
          unint64_t v50 = *((int *)v48 + 4);
          uint64_t v51 = *(void *)(*((void *)&v233 + 1) + 56);
          unint64_t v52 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)(*((void *)&v233 + 1) + 64) - v51) >> 3);
          if (v52 <= v50) {
            std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
          }
          BOOL v53 = (long long *)(v51 + 24 * (int)v50);
          if (*((char *)v53 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v248, *(const std::string::value_type **)v53, *((void *)v53 + 1));
            uint64_t v51 = *(void *)(*((void *)&v233 + 1) + 56);
            unint64_t v52 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)(*((void *)&v233 + 1) + 64) - v51) >> 3);
          }
          else
          {
            long long v54 = *v53;
            v248.__r_.__value_.__r.__words[2] = *((void *)v53 + 2);
            *(_OWORD *)&v248.__r_.__value_.__l.__data_ = v54;
          }
          unint64_t v55 = *((int *)v48 + 5);
          if (v52 <= v55) {
            std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
          }
          int8x16_t v56 = (long long *)(v51 + 24 * (int)v55);
          if (*((char *)v56 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v270, *(const std::string::value_type **)v56, *((void *)v56 + 1));
          }
          else
          {
            long long v57 = *v56;
            v270.__r_.__value_.__r.__words[2] = *((void *)v56 + 2);
            *(_OWORD *)&v270.__r_.__value_.__l.__data_ = v57;
          }
          uint64_t v58 = std::map<std::string,Espresso::blob_numerical_properties>::at(v49, &v248);
          uint64_t v59 = std::map<std::string,Espresso::blob_numerical_properties>::at(v49, &v270);
          if (!Espresso::layer_shape::operator==(v58, v59))
          {
            int v221 = &v248;
            if ((v248.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              int v221 = (std::string *)v248.__r_.__value_.__r.__words[0];
            }
            std::string::size_type v245 = (std::string::size_type)v221;
            std::string::size_type v222 = &v270;
            if ((v270.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              std::string::size_type v222 = (std::string *)v270.__r_.__value_.__r.__words[0];
            }
            char v231 = v222;
            Espresso::throw_exception_selector<Espresso::invalid_state_error,char const*,char const*>("aliased blob %s has different shape from blob aliased to %s", &v245, &v231);
          }
          if (SHIBYTE(v270.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v270.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v248.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v248.__r_.__value_.__l.__data_);
          }
          __int16 v48 = (uint64_t **)*v48;
        }
        while (v48);
      }
      std::vector<int>::reserve(&v235, *(void *)(*((void *)&v233 + 1) + 40));
      LODWORD(v248.__r_.__value_.__l.__data_) = 0;
      uint64_t v60 = *((void *)&v233 + 1);
      if (*(void *)(*((void *)&v233 + 1) + 40))
      {
        unint64_t v61 = 0;
        int v62 = 0;
        do
        {
          if (std::__hash_table<Espresso::activation_mode,std::hash<Espresso::activation_mode>,std::equal_to<Espresso::activation_mode>,std::allocator<Espresso::activation_mode>>::find<Espresso::activation_mode>(*(uint64_t *)__x, *(unint64_t *)&__x[2], v61))
          {
            BOOL v63 = std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)__x, v61, &v248);
            v235.__begin_[v61] = v235.__begin_[*((int *)v63 + 5)];
            uint64_t v60 = *((void *)&v233 + 1);
          }
          else
          {
            v235.__begin_[v61] = v62++;
          }
          LODWORD(v248.__r_.__value_.__l.__data_) = ++v61;
        }
        while (*(void *)(v60 + 40) > v61);
      }
      else
      {
        int v62 = 0;
      }
      int v236 = v62;
      std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)__x);
      v248.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
      v248.__r_.__value_.__l.__size_ = (std::string::size_type)Espresso::net::get_analysis<Espresso::pass_blob_name_indexing_result>((uint64_t)a2);
      v248.__r_.__value_.__r.__words[2] = (std::string::size_type)&v233;
      uint64_t v68 = v236;
      LODWORD(__sz) = -1431655765
                    * ((*(void *)(v248.__r_.__value_.__l.__size_ + 64)
                      - *(void *)(v248.__r_.__value_.__l.__size_ + 56)) >> 3);
      HIDWORD(__sz) = v236;
      int v227 = a2;
      int v250 = (*((void *)a2 + 5) - *((void *)a2 + 4)) >> 4;
      char v251 = 0;
      long long v259 = 0u;
      *(_OWORD *)std::string __p = 0u;
      long long v252 = 0u;
      long long v253 = 0u;
      long long v254 = 0u;
      long long v255 = 0u;
      long long v256 = 0u;
      long long v257 = 0u;
      int v261 = 1065353216;
      long long v262 = 0u;
      long long v263 = 0u;
      long long v264 = 0u;
      if (v236)
      {
        if (v236 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        float32x4_t v69 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v236);
        unint64_t v71 = (char *)*((void *)&v253 + 1);
        uint64_t v70 = (char *)v254;
        uint64_t v73 = &v69[8 * v72];
        bzero(v69, 8 * v68);
        int8x16_t v74 = &v69[8 * v68];
        if (v70 != v71)
        {
          do
          {
            uint64_t v75 = *((void *)v70 - 1);
            v70 -= 8;
            *((void *)v69 - 1) = v75;
            v69 -= 8;
          }
          while (v70 != v71);
          unint64_t v71 = (char *)*((void *)&v253 + 1);
        }
        *((void *)&v253 + 1) = v69;
        *(void *)&long long v254 = v74;
        *((void *)&v254 + 1) = v73;
        if (v71) {
          operator delete(v71);
        }
      }
      uint64_t v76 = SHIDWORD(__sz);
      int v77 = v250;
      if (HIDWORD(__sz))
      {
        int v78 = v250 + 1;
        int8x16_t v79 = (int *)(*((void *)&v253 + 1) + 4);
        do
        {
          *(v79 - 1) = -1;
          int *v79 = v78;
          v79 += 2;
          --v76;
        }
        while (v76);
      }
      if (v77 >= 1)
      {
        int64_t v80 = 0;
        do
        {
          uint64_t v81 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::find<unsigned long>((void *)a2 + 12, v80);
          if (!v81) {
            std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
          }
          int v83 = (unsigned __int8 *)v81[3];
          uint64_t v82 = (unsigned __int8 *)v81[4];
          while (v83 != v82)
          {
            long long v84 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>((void *)(v248.__r_.__value_.__l.__size_ + 16), v83);
            if (!v84) {
              std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
            }
            int v85 = (_DWORD *)(*((void *)&v253 + 1) + 8 * v235.__begin_[*((int *)v84 + 10)]);
            if (*v85 == -1) {
              *int v85 = v80;
            }
            v83 += 24;
          }
          long long v86 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::find<unsigned long>((void *)a2 + 7, v80);
          if (!v86) {
            std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
          }
          unint64_t v88 = (unsigned __int8 *)v86[3];
          long long v87 = (unsigned __int8 *)v86[4];
          while (v88 != v87)
          {
            long long v89 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>((void *)(v248.__r_.__value_.__l.__size_ + 16), v88);
            if (!v89) {
              std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
            }
            *(_DWORD *)(*((void *)&v253 + 1) + 8 * v235.__begin_[*((int *)v89 + 10)] + 4) = v80;
            v88 += 24;
          }
          ++v80;
          int v77 = v250;
        }
        while (v80 < v250);
      }
      uint64_t v90 = __sz;
      if ((int)__sz >= 1)
      {
        unint64_t v91 = 0;
        BOOL v92 = (char *)v237[0];
        begiuint64_t n = v235.__begin_;
        int v94 = v77 + 1;
        uint64_t v95 = *((void *)&v253 + 1);
        do
        {
          if ((*(void *)&v92[(v91 >> 3) & 0x1FFFFFFFFFFFFFF8] >> v91))
          {
            uint64_t v96 = (_DWORD *)(v95 + 8 * begin[v91]);
            _DWORD *v96 = 0;
            v96[1] = v94;
          }
          ++v91;
        }
        while (v90 != v91);
      }
      uint64_t v97 = (Espresso::net *)*((void *)a2 + 32);
      if (v97 != (Espresso::net *)((char *)a2 + 264))
      {
        do
        {
          uint64_t v98 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>((void *)(v248.__r_.__value_.__l.__size_ + 16), (unsigned __int8 *)v97 + 32);
          if (!v98) {
            std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
          }
          *(_DWORD *)(*((void *)&v253 + 1) + 8 * v235.__begin_[*((int *)v98 + 10)] + 4) = v250 + 1;
          uint64_t v99 = (Espresso::net *)*((void *)v97 + 1);
          if (v99)
          {
            do
            {
              int v100 = v99;
              uint64_t v99 = *(Espresso::net **)v99;
            }
            while (v99);
          }
          else
          {
            do
            {
              int v100 = (Espresso::net *)*((void *)v97 + 2);
              BOOL v101 = *(void *)v100 == (void)v97;
              uint64_t v97 = v100;
            }
            while (!v101);
          }
          uint64_t v97 = v100;
        }
        while (v100 != (Espresso::net *)((char *)a2 + 264));
      }
      std::vector<int>::resize((std::vector<int> *)&v255, SHIDWORD(__sz));
      unint64_t v102 = v255;
      if (SHIDWORD(__sz) >= 1)
      {
        uint64_t v103 = 0;
        do
        {
          *(_DWORD *)(v102 + 4 * v103) = v103;
          ++v103;
        }
        while (v103 < SHIDWORD(__sz));
      }
      unint64_t v104 = 126 - 2 * __clz((uint64_t)(*((void *)&v255 + 1) - v102) >> 2);
      *(void *)__x = &v248;
      if (*((void *)&v255 + 1) == v102) {
        uint64_t v105 = 0;
      }
      else {
        uint64_t v105 = v104;
      }
      std::__introsort<std::_ClassicAlgPolicy,Espresso::interference_graph::populate_force_aliased_blob_in_visit_order(void)::$_0 &,int *,false>(v102, *((int **)&v255 + 1), (uint64_t)__x, v105, 1);
      std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)&v256 + 8, (char *)v255, *((uint64_t *)&v255 + 1), (uint64_t)(*((void *)&v255 + 1) - v255) >> 2);
      int v106 = HIDWORD(__sz);
      uint64_t v108 = *((void *)&v252 + 1);
      uint64_t v107 = v252;
      unint64_t v109 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)&v252 + 1) - v252) >> 3);
      unint64_t v110 = SHIDWORD(__sz) - v109;
      if (SHIDWORD(__sz) <= v109)
      {
        if (SHIDWORD(__sz) < v109)
        {
          uint64_t v128 = v252 + 40 * SHIDWORD(__sz);
          while (v108 != v128)
          {
            v108 -= 40;
            std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100](v108);
          }
          *((void *)&v252 + 1) = v128;
        }
      }
      else if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v253 - *((void *)&v252 + 1)) >> 3) >= v110)
      {
        uint64_t v129 = *((void *)&v252 + 1) + 40 * v110;
        do
        {
          *(_OWORD *)uint64_t v108 = 0uLL;
          *(_OWORD *)(v108 + 16) = 0uLL;
          *(_DWORD *)(v108 + 32) = 1065353216;
          v108 += 40;
        }
        while (v108 != v129);
        *((void *)&v252 + 1) = v129;
      }
      else
      {
        if ((__sz & 0x8000000000000000) != 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v111 = 0x999999999999999ALL * ((uint64_t)(v253 - v252) >> 3);
        if (v111 <= SHIDWORD(__sz)) {
          unint64_t v111 = SHIDWORD(__sz);
        }
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v253 - v252) >> 3) >= 0x333333333333333) {
          unint64_t v112 = 0x666666666666666;
        }
        else {
          unint64_t v112 = v111;
        }
        if (v112 > 0x666666666666666) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        uint64_t v113 = (char *)operator new(40 * v112);
        uint64_t v114 = &v113[40 * v109];
        uint64_t v115 = &v113[40 * v106];
        unint64_t v116 = v114;
        do
        {
          *(_OWORD *)unint64_t v116 = 0uLL;
          *((_OWORD *)v116 + 1) = 0uLL;
          *((_DWORD *)v116 + 8) = 1065353216;
          v116 += 40;
        }
        while (v116 != v115);
        uint64_t v117 = &v113[40 * v112];
        if (v108 != v107)
        {
          uint64_t v118 = 0;
          do
          {
            uint64_t v119 = &v114[v118];
            uint64_t v120 = v108 + v118;
            uint64_t v121 = *(void *)(v108 + v118 - 40);
            *(void *)(v120 - 40) = 0;
            *((void *)v119 - 5) = v121;
            *((void *)v119 - 4) = *(void *)(v108 + v118 - 32);
            *(void *)(v120 - 32) = 0;
            uint64_t v122 = *(void *)(v108 + v118 - 24);
            *(void *)&v114[v118 - 24] = v122;
            uint64_t v123 = *(void *)(v108 + v118 - 16);
            *((void *)v119 - 2) = v123;
            *((_DWORD *)v119 - 2) = *(_DWORD *)(v108 + v118 - 8);
            if (v123)
            {
              unint64_t v124 = *(void *)(v122 + 8);
              unint64_t v125 = *((void *)v119 - 4);
              if ((v125 & (v125 - 1)) != 0)
              {
                if (v124 >= v125) {
                  v124 %= v125;
                }
              }
              else
              {
                v124 &= v125 - 1;
              }
              *(void *)(v121 + 8 * v124) = &v114[v118 - 24];
              *(void *)(v108 + v118 - 24) = 0;
              *(void *)(v108 + v118 - 16) = 0;
            }
            v118 -= 40;
          }
          while (v108 + v118 != v107);
          v114 += v118;
        }
        uint64_t v126 = *((void *)&v252 + 1);
        uint64_t v127 = (void *)v252;
        *(void *)&long long v252 = v114;
        *((void *)&v252 + 1) = v115;
        *(void *)&long long v253 = v117;
        while ((void *)v126 != v127)
          uint64_t v126 = std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100](v126 - 40);
        if (v127) {
          operator delete(v127);
        }
      }
      int v130 = HIDWORD(__sz);
      if (SHIDWORD(__sz) >= 1)
      {
        uint64_t v131 = 0;
        uint64_t v132 = 1;
        uint64_t v133 = 2;
        do
        {
          uint64_t v134 = v131 + 1;
          if (v131 + 1 < v130)
          {
            uint64_t v135 = *((void *)&v253 + 1);
            uint64_t v136 = *(int *)(v255 + 4 * v131);
            uint64_t v137 = *(int *)(v255 + 4 * v132);
            uint64_t v138 = (int *)(*((void *)&v253 + 1) + 8 * v137);
            unint64_t v139 = (int *)(*((void *)&v253 + 1) + 8 * v136);
            int v141 = *v139;
            int v140 = v139[1];
            int v143 = *v138;
            int v142 = v138[1];
            if (v142 >= v140) {
              int v142 = v140;
            }
            if (v141 <= v143) {
              int v144 = v143;
            }
            else {
              int v144 = v141;
            }
            if (v142 >= v144)
            {
              uint64_t v145 = v133;
              do
              {
                std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>(v252 + 40 * (int)v136, v137, v137);
                std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>(v252 + 40 * (int)v137, v136, v136);
                int v130 = HIDWORD(__sz);
                if (SHIDWORD(__sz) <= (int)v145) {
                  break;
                }
                uint64_t v137 = *(int *)(v255 + 4 * v145);
                int v146 = (int *)(*((void *)&v253 + 1) + 8 * v137);
                vDSP_Length v147 = (int *)(v135 + 8 * v136);
                int v149 = *v147;
                int v148 = v147[1];
                int v151 = *v146;
                int v150 = v146[1];
                if (v150 >= v148) {
                  int v150 = v148;
                }
                int v152 = v149 <= v151 ? v151 : v149;
                ++v145;
              }
              while (v150 >= v152);
            }
          }
          ++v132;
          ++v133;
          uint64_t v131 = v134;
        }
        while (v134 < v130);
      }
      __x[0] = -1;
      std::vector<int>::resize((std::vector<int> *)&v262, v130, __x);
      std::vector<int>::resize((std::vector<int> *)((char *)&v263 + 8), SHIDWORD(__sz));
      for (uint64_t i = *(uint64_t ***)(v248.__r_.__value_.__l.__size_ + 32); i; uint64_t i = (uint64_t **)*i)
      {
        uint64_t v154 = *((int *)i + 10);
        unint64_t v155 = (Espresso::layer_shape *)std::map<std::string,Espresso::blob_numerical_properties>::at(v248.__r_.__value_.__r.__words[0] + 184, i + 2);
        int v156 = Espresso::layer_shape::total_dim(v155);
        *(_DWORD *)(*((void *)&v263 + 1)
                  + 4 * *(int *)(*(void *)(v248.__r_.__value_.__r.__words[2] + 24) + 4 * v154)) = v156;
      }
      if (__p[1])
      {
        long long v157 = __p[0];
        if (__p[0])
        {
          do
          {
            uint64_t v158 = (void *)*v157;
            operator delete(v157);
            long long v157 = v158;
          }
          while (v158);
        }
        __p[0] = 0;
        uint64_t v159 = *((void *)&v259 + 1);
        if (*((void *)&v259 + 1))
        {
          uint64_t v160 = 0;
          do
            *(void *)(v259 + 8 * v160++) = 0;
          while (v159 != v160);
        }
        __p[1] = 0;
      }
      int v258 = 0;
      LOBYTE(__x[0]) = 0;
      std::vector<BOOL>::vector(&v270, SHIDWORD(__sz), (unsigned __int8 *)__x);
      uint64_t v161 = v227;
      if (!HIDWORD(__sz)) {
        goto LABEL_225;
      }
      uint64_t v162 = 0;
      break;
  }
  do
  {
    uint64_t v229 = v162;
    uint64_t v163 = *(unsigned int *)(*((void *)&v256 + 1) + 4 * v162);
    std::unordered_set<int>::unordered_set((uint64_t)__x, v252 + 40 * v163);
    if (v270.__r_.__value_.__l.__size_)
    {
      std::string::size_type v245 = v270.__r_.__value_.__r.__words[0];
      LODWORD(v246) = 0;
      std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>((uint64_t)&v245, v270.__r_.__value_.__l.__size_);
    }
    uint64_t v164 = (uint64_t **)v266;
    if ((void)v266)
    {
      uint64_t v165 = v262;
      std::string::size_type v166 = v270.__r_.__value_.__r.__words[0];
      do
      {
        unint64_t v167 = *(unsigned int *)(v165 + 4 * *((int *)v164 + 4));
        if ((v167 & 0x80000000) == 0) {
          *(void *)(v166 + ((v167 >> 3) & 0x1FFFFFF8)) |= 1 << v167;
        }
        uint64_t v164 = (uint64_t **)*v164;
      }
      while (v164);
    }
    char v168 = 0;
    uint64_t v169 = 0;
    int v170 = *(_DWORD *)(*((void *)&v263 + 1) + 4 * (int)v163);
    __int16 v247 = 256;
    int v171 = -1;
    int v172 = v258;
    while (1)
    {
      char v173 = v168;
      int v174 = *((unsigned __int8 *)&v247 + v169);
      LODWORD(v245) = 0;
      if (v172 >= 1)
      {
        unint64_t v175 = 0;
        int v176 = 0;
        int v177 = -1;
        do
        {
          if (((*(void *)(v270.__r_.__value_.__r.__words[0] + ((v175 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v175) & 1) == 0)
          {
            int v178 = *((_DWORD *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)&v259, v175, &v245)+ 5)- v170;
            if (v174 || (v178 & 0x80000000) == 0)
            {
              if (v178 < 0) {
                int v178 = -v178;
              }
              int v179 = v176 ^ 1 | (v178 < v177);
              if ((v176 ^ 1) & 1 | (v178 < v177))
              {
                int v171 = v175;
                int v177 = v178;
              }
              v176 |= v179;
            }
          }
          LODWORD(v245) = ++v175;
          int v172 = v258;
        }
        while ((uint64_t)v175 < v258);
        if ((v171 & 0x80000000) == 0) {
          break;
        }
      }
      char v168 = 1;
      uint64_t v169 = 1;
      if (v173)
      {
        if (v171 == -1)
        {
          int v258 = v172 + 1;
          int v171 = v172;
        }
        break;
      }
    }
    LODWORD(v231) = v171;
    *(_DWORD *)(v262 + 4 * v163) = v171;
    if (std::__hash_table<Espresso::activation_mode,std::hash<Espresso::activation_mode>,std::equal_to<Espresso::activation_mode>,std::allocator<Espresso::activation_mode>>::find<Espresso::activation_mode>(v259, *((unint64_t *)&v259 + 1), v171))
    {
      int v180 = *((_DWORD *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)&v259, v171, &v231)+ 5);
      int v181 = *(_DWORD *)(*((void *)&v263 + 1) + 4 * v163);
      uint64_t v182 = std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)&v259, v171, &v231);
      if (v180 <= v181) {
        int v180 = v181;
      }
    }
    else
    {
      int v180 = *(_DWORD *)(*((void *)&v263 + 1) + 4 * v163);
      uint64_t v182 = std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)&v259, v171, &v231);
    }
    *((_DWORD *)v182 + 5) = v180;
    std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)__x);
    uint64_t v162 = v229 + 1;
  }
  while (v229 + 1 < (unint64_t)SHIDWORD(__sz));
  uint64_t v161 = v227;
  if (SHIDWORD(__sz) >= 1)
  {
    uint64_t v183 = 0;
    do
    {
      if ((*(_DWORD *)(v262 + 4 * v183) & 0x80000000) != 0) {
        Espresso::throw_exception_selector<Espresso::invalid_state_error,int &>("force_aliased blob %d is not colored", v183);
      }
      ++v183;
    }
    while (HIDWORD(__sz) != v183);
  }
LABEL_225:
  char v251 = 1;
  if (v270.__r_.__value_.__r.__words[0]) {
    operator delete(v270.__r_.__value_.__l.__data_);
  }
  if (*((unsigned char *)v224 + 16))
  {
    uint64_t v184 = Espresso::net::get_analysis<Espresso::pass_blob_name_indexing_result>((uint64_t)v161);
    uint64_t v185 = Espresso::net::get_analysis<Espresso::pass_global_name_indexing_result>((uint64_t)v161);
    uint64_t v186 = operator new(0x28uLL);
    *uint64_t v186 = &unk_1EE37E110;
    v186[1] = v185;
    void v186[2] = (char *)v238 + 8;
    v186[3] = v184;
    v186[4] = v161;
    *((void *)&v266 + 1) = v186;
    Espresso::net::apply_to_all_globals(v161, __x);
    std::__function::__value_func<void ()(std::pair<std::string,std::shared_ptr<Espresso::abstract_blob_container>> &)>::~__value_func[abi:ne180100](__x);
  }
  Espresso::interference_graph::analysis_result((Espresso::interference_graph *)&v231, (uint64_t)&v248);
  unint64_t v187 = Espresso::net::get_analysis<Espresso::pass_blob_name_indexing_result>((uint64_t)v161);
  uint64_t v230 = (uint64_t)v161 + 184;
  uint64_t v188 = (std::string::__raw *)v231;
  std::string::pointer data = v231[2].__r_.__value_.__l.__data_;
  if ((std::string::pointer)v231[2].__r_.__value_.__l.__size_ != data)
  {
    unint64_t v190 = 0;
    while (1)
    {
      unint64_t v191 = *(void *)&data[8 * v190];
      uint64_t v192 = v187[7];
      if (0xAAAAAAAAAAAAAAABLL * ((v187[8] - v192) >> 3) <= v191) {
        break;
      }
      unint64_t v193 = (unsigned __int8 *)(v192 + 24 * v191);
      *(void *)__x = v193;
      uint64_t v194 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v227 + 136, v193, (long long **)__x);
      uint64_t v195 = std::map<std::string,Espresso::blob_numerical_properties>::at(v230, v193);
      Espresso::abstract_blob_container::shape((char *)__x, *((void *)v194 + 5));
      BOOL v196 = Espresso::layer_shape::operator==((uint64_t)__x, v195);
      if (v268)
      {
        uint64_t v269 = v268;
        operator delete(v268);
      }
      if (!v196)
      {
        uint64_t v197 = *((void *)v194 + 5);
        *(_OWORD *)&v270.__r_.__value_.__l.__data_ = 0uLL;
        (*(void (**)(uint64_t, uint64_t, std::string *))(*(void *)v197 + 16))(v197, v195, &v270);
        if (v270.__r_.__value_.__l.__size_) {
          nitro::nitro_function::nitro_function((std::__shared_weak_count *)v270.__r_.__value_.__l.__size_);
        }
      }
      ++v190;
      std::string::pointer data = (std::string::pointer)v188[2].__words[0];
      if (v190 >= (uint64_t)(v188[2].__words[1] - (void)data) >> 3) {
        goto LABEL_238;
      }
    }
LABEL_280:
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  }
LABEL_238:
  if (v188[1].__words[1])
  {
    uint64_t v198 = 0;
    unint64_t v199 = 0;
    uint64_t v200 = (uint64_t)v227 + 136;
    do
    {
      uint64_t v201 = v187[7];
      if (0xAAAAAAAAAAAAAAABLL * ((v187[8] - v201) >> 3) <= v199) {
        goto LABEL_280;
      }
      uint64_t v202 = (unsigned __int8 *)(v201 + v198);
      long long v203 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>(&v188->__words[1], (unsigned __int8 *)(v201 + v198));
      if (!v203) {
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      }
      unint64_t v204 = *((int *)v203 + 10);
      uint64_t v188 = (std::string::__raw *)v231;
      std::string::pointer v205 = v231[2].__r_.__value_.__l.__data_;
      if (v204 >= (uint64_t)(v231[2].__r_.__value_.__l.__size_ - (void)v205) >> 3) {
        std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
      }
      unint64_t v206 = *(void *)&v205[8 * v204];
      if (v199 != v206)
      {
        long long v207 = operator new(0x98uLL);
        *((void *)v207 + 1) = 0;
        *((void *)v207 + 2) = 0;
        *(void *)long long v207 = &unk_1EE3896B8;
        *((_OWORD *)v207 + 4) = 0u;
        *((_OWORD *)v207 + 5) = 0u;
        *((_OWORD *)v207 + 2) = 0u;
        *((_OWORD *)v207 + 3) = 0u;
        *((_OWORD *)v207 + 6) = 0u;
        *((_OWORD *)v207 + 7) = 0u;
        *((_OWORD *)v207 + 8) = 0u;
        *((void *)v207 + 17) = 0;
        *((void *)v207 + 18) = 0;
        *((_DWORD *)v207 + 12) = 1065353216;
        *((void *)v207 + 7) = 0x1FFFFFFFFLL;
        *((void *)v207 + 12) = 0;
        *((void *)v207 + 13) = 0;
        *((void *)v207 + 8) = 0;
        *((void *)v207 + 9) = 0;
        *((unsigned char *)v207 + 88) = 0;
        *((void *)v207 + 10) = 0;
        *((void *)v207 + 3) = &unk_1EE36B910;
        *((void *)v207 + 15) = 0;
        *((void *)v207 + 16) = 0;
        *((unsigned char *)v207 + 144) = 0;
        uint64_t v208 = v187[7];
        if (0xAAAAAAAAAAAAAAABLL * ((v187[8] - v208) >> 3) <= v206) {
          std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
        }
        *(void *)__x = v208 + 24 * v206;
        long long v209 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v200, *(unsigned __int8 **)__x, (long long **)__x);
        uint64_t v211 = *((void *)v209 + 5);
        uint64_t v210 = *((void *)v209 + 6);
        if (v210) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v210 + 8), 1uLL, memory_order_relaxed);
        }
        long long v212 = (std::__shared_weak_count *)*((void *)v207 + 17);
        *((void *)v207 + 16) = v211;
        *((void *)v207 + 17) = v210;
        if (v212) {
          nitro::nitro_function::nitro_function(v212);
        }
        *(void *)__x = v202;
        uint64_t v213 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v200, v202, (long long **)__x);
        float v214 = v187;
        uint64_t v215 = std::map<std::string,Espresso::blob_numerical_properties>::at(v230, v202);
        uint64_t v216 = v200;
        Espresso::abstract_blob_container::shape((char *)__x, *((void *)v213 + 5));
        BOOL v217 = Espresso::layer_shape::operator==((uint64_t)__x, v215);
        if (v268)
        {
          uint64_t v269 = v268;
          operator delete(v268);
        }
        if (!v217)
        {
          uint64_t v218 = *((void *)v213 + 5);
          std::string::size_type v245 = (std::string::size_type)v207 + 24;
          v246 = (std::__shared_weak_count *)v207;
          atomic_fetch_add_explicit((atomic_ullong *volatile)v207 + 1, 1uLL, memory_order_relaxed);
          (*(void (**)(uint64_t, uint64_t, std::string::size_type *))(*(void *)v218 + 16))(v218, v215, &v245);
          if (v246) {
            nitro::nitro_function::nitro_function(v246);
          }
        }
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v207);
        uint64_t v200 = v216;
        unint64_t v187 = v214;
      }
      ++v199;
      v198 += 24;
    }
    while (v188[1].__words[1] > v199);
  }
  if (v232) {
    nitro::nitro_function::nitro_function(v232);
  }
  Espresso::interference_graph::analysis_result((Espresso::interference_graph *)__x, (uint64_t)&v248);
  uint64_t v219 = *(std::__shared_weak_count **)&__x[2];
  double v220 = *(std::__shared_weak_count **)(v225 + 16);
  *(void *)(v225 + 8) = *(void *)__x;
  *(void *)(v225 + 16) = v219;
  if (v220) {
    nitro::nitro_function::nitro_function(v220);
  }
  if (*((void *)&v263 + 1))
  {
    *(void *)&long long v264 = *((void *)&v263 + 1);
    operator delete(*((void **)&v263 + 1));
  }
  if ((void)v262)
  {
    *((void *)&v262 + 1) = v262;
    operator delete((void *)v262);
  }
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&v259);
  if (*((void *)&v256 + 1))
  {
    *(void *)&long long v257 = *((void *)&v256 + 1);
    operator delete(*((void **)&v256 + 1));
  }
  if ((void)v255)
  {
    *((void *)&v255 + 1) = v255;
    operator delete((void *)v255);
  }
  if (*((void *)&v253 + 1))
  {
    *(void *)&long long v254 = *((void *)&v253 + 1);
    operator delete(*((void **)&v253 + 1));
  }
  *(void *)__x = &v252;
  std::vector<std::unordered_set<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)__x);
  std::__hash_table<std::__hash_value_type<int,std::unordered_set<int>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::unordered_set<int>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::unordered_set<int>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::unordered_set<int>>>>::~__hash_table((uint64_t)v238 + 8);
  if (v237[0]) {
    operator delete(v237[0]);
  }
  if (v235.__begin_)
  {
    v235.__end_ = v235.__begin_;
    operator delete(v235.__begin_);
  }
  *uint64_t v223 = 0;
  v223[1] = 0;
  if (v219) {
    nitro::nitro_function::nitro_function(v219);
  }
LABEL_32:
  if (v226) {
    nitro::nitro_function::nitro_function(v226);
  }
}

void sub_19210DF50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45)
{
  std::__function::__value_func<void ()(std::pair<std::string,std::shared_ptr<Espresso::abstract_blob_container>> &)>::~__value_func[abi:ne180100]((void *)(v45 - 208));
  Espresso::interference_graph::~interference_graph((Espresso::interference_graph *)&a45);
  unint64_t v47 = *(std::__shared_weak_count **)(a13 + 16);
  Espresso::force_aliased_blob_index::~force_aliased_blob_index((Espresso::force_aliased_blob_index *)&a21);
  if (v47) {
    nitro::nitro_function::nitro_function(v47);
  }
  if (a15) {
    nitro::nitro_function::nitro_function(a15);
  }
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::clear(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__deallocate_node(*(void **)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

BOOL Espresso::net::is_root_module(Espresso::net *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 137);
  if (!v2) {
    return 1;
  }
  uint64_t v3 = std::__shared_weak_count::lock(v2);
  if (!v3) {
    return 1;
  }
  BOOL v4 = *((void *)this + 136) == 0;
  nitro::nitro_function::nitro_function(v3);
  return v4;
}

void Espresso::pass_unpack_layers::get_analysis_usage(uint64_t a1, unsigned char *a2)
{
  *a2 = 1;
}

void Espresso::net::infer_configuration_for_shapes(Espresso::net *this@<X0>, const Espresso::network_shape *a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 24) = a3 + 32;
  *(void *)(a3 + 40) = 0;
  uint64_t v5 = (char *)*((void *)this + 29);
  int v6 = (char *)this + 240;
  if (v5 != (char *)this + 240)
  {
    uint64_t v8 = (char *)a2 + 8;
    do
    {
      unint64_t v9 = (char *)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>((uint64_t)a2, (void *)v5 + 4);
      if (v8 != v9)
      {
        int v10 = v9;
        unint64_t v23 = (long long *)(v5 + 32);
        uint64_t v11 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a3 + 24), (void *)v5 + 4, &v23);
        long long v12 = *(_OWORD *)(v10 + 56);
        long long v13 = *(_OWORD *)(v10 + 72);
        *((void *)v11 + 11) = *((void *)v10 + 11);
        *(_OWORD *)(v11 + 72) = v13;
        *(_OWORD *)(v11 + 56) = v12;
        if (v11 != v10) {
          std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v11 + 96, *((char **)v10 + 12), *((void *)v10 + 13), (uint64_t)(*((void *)v10 + 13) - *((void *)v10 + 12)) >> 2);
        }
      }
      uint64_t v14 = (char *)*((void *)v5 + 1);
      if (v14)
      {
        do
        {
          unint64_t v15 = v14;
          uint64_t v14 = *(char **)v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          unint64_t v15 = (char *)*((void *)v5 + 2);
          BOOL v16 = *(void *)v15 == (void)v5;
          uint64_t v5 = v15;
        }
        while (!v16);
      }
      uint64_t v5 = v15;
    }
    while (v15 != v6);
  }
  uint64_t v17 = (char *)*((void *)this + 32);
  uint64_t v18 = (char *)this + 264;
  if (v17 != (char *)this + 264)
  {
    std::string::size_type v19 = *(std::string **)(a3 + 8);
    do
    {
      uint64_t v20 = (long long *)(v17 + 32);
      if ((unint64_t)v19 >= *(void *)(a3 + 16))
      {
        std::string::size_type v19 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)a3, (uint64_t)v20);
      }
      else
      {
        std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(a3, v20);
        ++v19;
      }
      *(void *)(a3 + 8) = v19;
      unint64_t v21 = (char *)*((void *)v17 + 1);
      if (v21)
      {
        do
        {
          int64_t v22 = v21;
          unint64_t v21 = *(char **)v21;
        }
        while (v21);
      }
      else
      {
        do
        {
          int64_t v22 = (char *)*((void *)v17 + 2);
          BOOL v16 = *(void *)v22 == (void)v17;
          uint64_t v17 = v22;
        }
        while (!v16);
      }
      uint64_t v17 = v22;
    }
    while (v22 != v18);
  }
}

void sub_19210E470(_Unwind_Exception *a1)
{
  Espresso::net_configuration::~net_configuration(v1);
  _Unwind_Resume(a1);
}

uint64_t Espresso::ANECompilerEngine::mix_softmax_kernel::force_high_precision_output_f32(Espresso::ANECompilerEngine::mix_softmax_kernel *this)
{
  return 0;
}

void Espresso::convert_to_explicit_padding(Espresso **a1, char a2, int a3)
{
  uint64_t v123 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *a1;
  std::map<std::string,Espresso::layer_shape>::map[abi:ne180100]((uint64_t)v100, (long long **)*a1 + 23);
  std::map<std::string,Espresso::layer_shape>::map[abi:ne180100]((uint64_t)v101, (long long **)v3 + 26);
  BOOL v4 = *a1;
  uint64_t v5 = *((void *)*a1 + 4);
  if (*((void *)*a1 + 5) != v5)
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    while (1)
    {
      uint64_t v8 = (uint64_t *)(v5 + v6);
      uint64_t v9 = *v8;
      int v10 = (std::__shared_weak_count *)v8[1];
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v11 = *(uint64_t **)(v9 + 80);
      if (*(uint64_t **)(v9 + 88) == v11)
      {
        int v13 = 0;
        int v14 = 0;
      }
      else
      {
        uint64_t v12 = *v11;
        int v13 = *(_DWORD *)(v12 + 8);
        int v14 = *(_DWORD *)(v12 + 12);
      }
      unint64_t v15 = *(uint64_t **)(v9 + 104);
      if (*(uint64_t **)(v9 + 112) == v15)
      {
        int v18 = 0;
        int v17 = 0;
      }
      else
      {
        uint64_t v16 = *v15;
        int v18 = *(_DWORD *)(v16 + 8);
        int v17 = *(_DWORD *)(v16 + 12);
      }
      std::string::size_type v19 = *(const void **)(v9 + 64);
      if (!v19) {
        goto LABEL_84;
      }
      int v82 = v13;
      if (v20)
      {
        unint64_t v21 = *(std::__shared_weak_count **)(v9 + 72);
        if (v21) {
          atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        int64_t v22 = (Espresso *)(*(uint64_t (**)(void *))(*(void *)v20 + 384))(v20);
        uint64_t v24 = v22;
        int v25 = *((unsigned __int16 *)v22 + 36);
        if (v25 == 4 || v25 == 1)
        {
          if (a3)
          {
            int v27 = (const char *)(v9 + 16);
            if (*(char *)(v9 + 39) < 0) {
              int v27 = *(const char **)v27;
            }
            int64_t v22 = (Espresso *)printf("Warning: padding deconvolution %s in SAME mode will not be pad-invariant for all resolutions\n", v27);
          }
          uint64_t v28 = Espresso::espresso_os_log_subsystem(v22, v23);
          if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
          {
            uint64_t v64 = (void *)(v9 + 16);
            if (*(char *)(v9 + 39) < 0) {
              uint64_t v64 = (void *)*v64;
            }
            *(_DWORD *)std::string buf = 136315138;
            *(void *)&uint8_t buf[4] = v64;
            _os_log_error_impl(&dword_1920CB000, v28, OS_LOG_TYPE_ERROR, "Warning: padding deconvolution %s in SAME mode will not be pad-invariant for all resolutions", buf, 0xCu);
          }
        }
        if (*((int *)v24 + 34) > 0 || *((_DWORD *)v24 + 35) >= 1)
        {
          unint64_t v30 = Espresso::espresso_os_log_subsystem(v22, v23);
          if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)std::string buf = 0;
            _os_log_error_impl(&dword_1920CB000, v30, OS_LOG_TYPE_ERROR, "Warning: deconvolution is specifying manual output size via deconv_out_width/deconv_out_height and that is not compatible with multple resolutions. Ignoring that deconv_out_width/deconv_out_height", buf, 2u);
          }

          *((void *)v24 + 17) = 0;
        }
        goto LABEL_82;
      }
      if (v31) {
        break;
      }
      if (v50)
      {
        unint64_t v21 = *(std::__shared_weak_count **)(v9 + 72);
        if (v21) {
          atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v51 = (*(uint64_t (**)(void *))(*(void *)v50 + 384))(v50);
        int v52 = *(__int16 *)(v51 + 36);
        int v53 = *(unsigned __int16 *)(v51 + 36);
        if (v52 == 4)
        {
LABEL_66:
          int v54 = *(_DWORD *)(v51 + 8) - v14 + *(_DWORD *)(v51 + 20) * (v17 - 1);
          int v55 = *(_DWORD *)(v51 + 4) - v82 + *(_DWORD *)(v51 + 16) * (v18 - 1);
          unsigned int v56 = v54 & ~(v54 >> 31);
          unsigned int v57 = v55 & ~(v55 >> 31);
          unsigned int v58 = v57 >> 1;
          unsigned int v59 = v57 - (v57 >> 1);
          unsigned int v60 = v56 >> 1;
          unsigned int v61 = v56 - (v56 >> 1);
          __int16 v62 = v61;
          __int16 v63 = v59;
          if (v53 != 1) {
            goto LABEL_76;
          }
        }
        else
        {
          if (v52 == 2)
          {
            LOWORD(v59) = 0;
            LOWORD(v58) = 0;
            LOWORD(v61) = 0;
            LOWORD(v60) = 0;
          }
          else
          {
            if (v52 == 1) {
              goto LABEL_66;
            }
            LOWORD(v59) = *(_WORD *)(v51 + 44);
            LOWORD(v58) = *(_WORD *)(v51 + 46);
            LOWORD(v61) = *(_WORD *)(v51 + 48);
            LOWORD(v60) = *(_WORD *)(v51 + 50);
          }
LABEL_76:
          BOOL v65 = v53 == 4 || v53 == 1;
          __int16 v62 = v60;
          LOWORD(v60) = v61;
          __int16 v63 = v58;
          LOWORD(v58) = v59;
          if (!v65)
          {
LABEL_82:
            if (v21) {
              nitro::nitro_function::nitro_function(v21);
            }
            goto LABEL_84;
          }
        }
        *(_WORD *)(v51 + 44) = v58;
        *(_WORD *)(v51 + 46) = v63;
        *(_WORD *)(v51 + 48) = v60;
        *(_WORD *)(v51 + 50) = v62;
        *(_WORD *)(v51 + 36) = 0;
        goto LABEL_82;
      }
LABEL_84:
      if (v10) {
        nitro::nitro_function::nitro_function(v10);
      }
      ++v7;
      BOOL v4 = *a1;
      uint64_t v5 = *((void *)*a1 + 4);
      v6 += 16;
      if (v7 >= (*((void *)*a1 + 5) - v5) >> 4) {
        goto LABEL_87;
      }
    }
    unint64_t v21 = *(std::__shared_weak_count **)(v9 + 72);
    if (v21) {
      atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v32 = (*(uint64_t (**)(void *))(*(void *)v31 + 384))(v31);
    int v33 = *(unsigned __int16 *)(v32 + 72);
    if (v33 != 4 && v33 != 1) {
      goto LABEL_82;
    }
    switch(v33)
    {
      case 4:
        goto LABEL_44;
      case 2:
        __int16 v46 = 0;
        __int16 v47 = 0;
        __int16 v48 = 0;
        __int16 v49 = 0;
        break;
      case 1:
LABEL_44:
        int v35 = *(__int16 *)(v32 + 98);
        if (v35 <= 1) {
          int v35 = 1;
        }
        int v36 = *(__int16 *)(v32 + 96);
        if (v36 <= 1) {
          int v36 = 1;
        }
        int v37 = (v17 - 1) * *(__int16 *)(v32 + 94) - v14 + (*(_DWORD *)(v32 + 52) - 1) * v35 + 1;
        int v38 = (v18 - 1) * *(__int16 *)(v32 + 92) - v82 + (*(_DWORD *)(v32 + 48) - 1) * v36 + 1;
        unsigned int v39 = v37 & ~(v37 >> 31);
        unsigned int v40 = v38 & ~(v38 >> 31);
        unsigned int v41 = v40 >> 1;
        unsigned int v42 = v40 - (v40 >> 1);
        unsigned int v43 = v39 >> 1;
        unsigned int v44 = v39 - (v39 >> 1);
        BOOL v45 = v33 == 1;
        if (v33 == 1) {
          __int16 v46 = v41;
        }
        else {
          __int16 v46 = v42;
        }
        if (v45) {
          __int16 v47 = v42;
        }
        else {
          __int16 v47 = v41;
        }
        if (v45) {
          __int16 v48 = v43;
        }
        else {
          __int16 v48 = v44;
        }
        if (v45) {
          __int16 v49 = v44;
        }
        else {
          __int16 v49 = v43;
        }
        break;
      default:
        __int16 v46 = *(_WORD *)(v32 + 80);
        __int16 v47 = *(_WORD *)(v32 + 82);
        __int16 v48 = *(_WORD *)(v32 + 84);
        __int16 v49 = *(_WORD *)(v32 + 86);
        break;
    }
    *(_WORD *)(v32 + 80) = v46;
    *(_WORD *)(v32 + 82) = v47;
    *(_WORD *)(v32 + 84) = v48;
    *(_WORD *)(v32 + 86) = v49;
    *(_WORD *)(v32 + 72) = 0;
    goto LABEL_82;
  }
LABEL_87:
  if (a2)
  {
    uint64_t v66 = (atomic_ullong *)a1[1];
    v99[0] = v4;
    v99[1] = (Espresso *)v66;
    if (v66) {
      atomic_fetch_add_explicit(v66 + 1, 1uLL, memory_order_relaxed);
    }
    std::map<std::string,Espresso::layer_shape>::map[abi:ne180100]((uint64_t)v97, (long long **)v100);
    std::map<std::string,Espresso::layer_shape>::map[abi:ne180100]((uint64_t)v98, v101);
    reshape_network(v99, v97);
    std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)v98, v98[1]);
    std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)v97, (char *)v97[1]);
    if (v66) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v66);
    }
    uint64_t v67 = (char *)*((void *)*a1 + 86);
    for (uint64_t i = (uint64_t *)*((void *)*a1 + 87); v67 != (char *)i; v67 += 24)
    {
      float32x4_t v69 = (uint64_t **)((char *)*a1 + 184);
      *(void *)std::string buf = v67;
      uint64_t v70 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v69, v67, (long long **)buf);
      long long v71 = *(_OWORD *)(v70 + 72);
      long long v91 = *(_OWORD *)(v70 + 56);
      long long v92 = v71;
      uint64_t v72 = (const void *)*((void *)v70 + 12);
      uint64_t v93 = *((void *)v70 + 11);
      int v94 = 0;
      uint64_t v95 = 0;
      uint64_t v96 = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v94, v72, *((void *)v70 + 13), (uint64_t)(*((void *)v70 + 13) - (void)v72) >> 2);
      *(void *)std::string buf = v67;
      uint64_t v73 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v100, v67, (long long **)buf);
      long long v74 = *(_OWORD *)(v73 + 72);
      long long v85 = *(_OWORD *)(v73 + 56);
      long long v86 = v74;
      uint64_t v75 = (const void *)*((void *)v73 + 12);
      uint64_t v87 = *((void *)v73 + 11);
      std::string __p = 0;
      long long v89 = 0;
      uint64_t v90 = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v75, *((void *)v73 + 13), (uint64_t)(*((void *)v73 + 13) - (void)v75) >> 2);
      if (a3)
      {
        uint64_t v76 = v67;
        if (v67[23] < 0) {
          uint64_t v76 = *(const char **)v67;
        }
        printf("[convert_to_explicit_padding] Shape for blob %s (%d %d %d %d %d) -> (%d %d %d %d %d)\n", v76, v85, DWORD1(v85), DWORD2(v85), HIDWORD(v85), v86, v91, DWORD1(v91), DWORD2(v91), HIDWORD(v91), v92);
      }
      BOOL v77 = Espresso::layer_shape::operator==((uint64_t)&v91, (uint64_t)&v85);
      if (!v77)
      {
        int8x16_t v79 = Espresso::espresso_os_log_subsystem((Espresso *)v77, v78);
        if (os_log_type_enabled(v79, OS_LOG_TYPE_ERROR))
        {
          int64_t v80 = v67;
          if (v67[23] < 0) {
            int64_t v80 = *(char **)v67;
          }
          *(_DWORD *)std::string buf = 136317698;
          *(void *)&uint8_t buf[4] = v80;
          __int16 v103 = 1024;
          int v104 = v85;
          __int16 v105 = 1024;
          int v106 = DWORD1(v85);
          __int16 v107 = 1024;
          int v108 = DWORD2(v85);
          __int16 v109 = 1024;
          int v110 = HIDWORD(v85);
          __int16 v111 = 1024;
          int v112 = v86;
          __int16 v113 = 1024;
          int v114 = v91;
          __int16 v115 = 1024;
          int v116 = DWORD1(v91);
          __int16 v117 = 1024;
          int v118 = DWORD2(v91);
          __int16 v119 = 1024;
          int v120 = HIDWORD(v91);
          __int16 v121 = 1024;
          int v122 = v92;
          _os_log_error_impl(&dword_1920CB000, v79, OS_LOG_TYPE_ERROR, "[convert_to_explicit_padding] Shape mismatch for blob %s (%d %d %d %d %d) -> (%d %d %d %d %d)", buf, 0x48u);
        }
      }
      if (__p)
      {
        long long v89 = __p;
        operator delete(__p);
      }
      if (v94)
      {
        uint64_t v95 = v94;
        operator delete(v94);
      }
    }
  }
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)v101, (char *)v101[1]);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)v100, (char *)v100[1]);
}

void sub_19210ECBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,uint64_t a44,char *a45,uint64_t a46)
{
  Espresso::network_shape::~network_shape(&a45);
  if (v46) {
    nitro::nitro_function::nitro_function(v46);
  }
  Espresso::network_shape::~network_shape((char **)(v47 - 224));
  _Unwind_Resume(a1);
}

void std::__function::__func<Espresso::ANECompilerEngine::elementwise_kernel::is_valid_for_engine(std::shared_ptr<Espresso::kernels_validation_status_t>,Espresso::base_kernel::validate_for_engine_args_t const&)::$_1,std::allocator<Espresso::ANECompilerEngine::elementwise_kernel::is_valid_for_engine(std::shared_ptr<Espresso::kernels_validation_status_t>,Espresso::base_kernel::validate_for_engine_args_t const&)::$_1>,void ()(std::string const&)>::operator()(uint64_t a1, long long *a2)
{
  uint64_t v2 = *(int64x2_t ***)(a1 + 8);
  uint64_t v3 = v2[1];
  v8[0] = *v2;
  v8[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->i64[1], 1uLL, memory_order_relaxed);
  }
  Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, a2, *(void *)(a1 + 16), 0);
  Espresso::emit_kernel_validation_warning(v8, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  uint64_t v9 = (void **)&v6;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v9 = (void **)&v5;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v9);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v3) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v3);
  }
}

void sub_19210EE14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23)
{
  uint64_t v27 = v24 + 24;
  if (a23) {
    nitro::nitro_function::nitro_function(a23);
  }
  *(void *)(v25 - 40) = &a19;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 40));
  *(void *)(v25 - 40) = v27;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 40));
  if (a15 < 0) {
    operator delete(__p);
  }
  if (v23) {
    nitro::nitro_function::nitro_function(v23);
  }
  _Unwind_Resume(a1);
}

uint64_t std::vector<Espresso::base_kernel::validate_for_engine_warning_t>::__push_back_slow_path<Espresso::base_kernel::validate_for_engine_warning_t const&>(int64x2_t *a1, const Espresso::base_kernel::validate_for_engine_warning_t *a2)
{
  uint64_t v2 = 0x6DB6DB6DB6DB6DB7 * ((a1->i64[1] - a1->i64[0]) >> 4);
  unint64_t v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) > 0x249249249249249) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v6 = a1 + 1;
  if (0xDB6DB6DB6DB6DB6ELL * ((a1[1].i64[0] - a1->i64[0]) >> 4) > v3) {
    unint64_t v3 = 0xDB6DB6DB6DB6DB6ELL * ((a1[1].i64[0] - a1->i64[0]) >> 4);
  }
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a1[1].i64[0] - a1->i64[0]) >> 4)) >= 0x124924924924924) {
    unint64_t v7 = 0x249249249249249;
  }
  else {
    unint64_t v7 = v3;
  }
  uint64_t v24 = (uint64_t *)v6;
  if (v7) {
    unint64_t v7 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::base_kernel::validate_for_engine_warning_t>>(v7);
  }
  else {
    uint64_t v8 = 0;
  }
  unint64_t v21 = v7;
  v22.i64[0] = v7 + 112 * v2;
  unint64_t v23 = v7 + 112 * v8;
  Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t((std::string *)v22.i64[0], a2);
  uint64_t v9 = v22.i64[0];
  uint64_t v10 = v22.i64[0] + 112;
  v22.i64[1] = v22.i64[0] + 112;
  uint64_t v12 = a1->i64[0];
  unint64_t v11 = a1->u64[1];
  if (v11 == a1->i64[0])
  {
    int64x2_t v18 = vdupq_n_s64(v11);
  }
  else
  {
    uint64_t v13 = 0;
    do
    {
      uint64_t v14 = v11 + v13;
      long long v15 = *(_OWORD *)(v11 + v13 - 112);
      uint64_t v16 = v9 + v13;
      *(void *)(v16 - 96) = *(void *)(v11 + v13 - 96);
      *(_OWORD *)(v16 - 112) = v15;
      *(void *)(v14 - 104) = 0;
      *(void *)(v14 - 96) = 0;
      *(void *)(v14 - 112) = 0;
      *(void *)(v16 - 88) = 0;
      *(void *)(v16 - 80) = 0;
      *(void *)(v16 - 72) = 0;
      *(_OWORD *)(v16 - 88) = *(_OWORD *)(v11 + v13 - 88);
      *(void *)(v16 - 72) = *(void *)(v11 + v13 - 72);
      *(void *)(v14 - 88) = 0;
      *(void *)(v14 - 80) = 0;
      *(void *)(v14 - 72) = 0;
      *(void *)(v16 - 64) = 0;
      *(void *)(v16 - 56) = 0;
      *(void *)(v16 - 48) = 0;
      *(_OWORD *)(v16 - 64) = *(_OWORD *)(v11 + v13 - 64);
      *(void *)(v16 - 48) = *(void *)(v11 + v13 - 48);
      *(void *)(v14 - 64) = 0;
      *(void *)(v14 - 56) = 0;
      *(void *)(v14 - 48) = 0;
      *(_OWORD *)(v16 - 40) = *(_OWORD *)(v11 + v13 - 40);
      long long v17 = *(_OWORD *)(v11 + v13 - 24);
      *(void *)(v14 - 40) = 0;
      *(void *)(v14 - 32) = 0;
      *(_OWORD *)(v16 - 24) = v17;
      *(unsigned char *)(v16 - 8) = *(unsigned char *)(v11 + v13 - 8);
      v13 -= 112;
    }
    while (v11 + v13 != v12);
    v9 += v13;
    int64x2_t v18 = *a1;
    uint64_t v10 = v22.i64[1];
  }
  a1->i64[0] = v9;
  a1->i64[1] = v10;
  int64x2_t v22 = v18;
  unint64_t v19 = a1[1].u64[0];
  a1[1].i64[0] = v23;
  unint64_t v23 = v19;
  unint64_t v21 = v18.i64[0];
  std::__split_buffer<Espresso::base_kernel::validate_for_engine_warning_t>::~__split_buffer((uint64_t)&v21);
  return v10;
}

void sub_19210F038(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<Espresso::base_kernel::validate_for_engine_warning_t>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void Espresso::emit_kernel_validation_warning(int64x2_t **a1, Espresso::base_kernel::validate_for_engine_warning_t *a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *((void *)a2 + 12);
  uint64_t v4 = **((void **)a2 + 9);
  uint64_t v5 = *a1;
  if (*a1)
  {
    unint64_t v6 = v5->u64[1];
    if (v6 >= v5[1].i64[0])
    {
      a1 = (int64x2_t **)std::vector<Espresso::base_kernel::validate_for_engine_warning_t>::__push_back_slow_path<Espresso::base_kernel::validate_for_engine_warning_t const&>(*a1, a2);
    }
    else
    {
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t((std::string *)v5->i64[1], a2);
      a1 = (int64x2_t **)(v6 + 112);
      v5->i64[1] = v6 + 112;
    }
    v5->i64[1] = (uint64_t)a1;
  }
  unint64_t v7 = Espresso::espresso_os_log_subsystem((Espresso *)a1, (const char *)a2);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v8 = (uint64_t *)(v4 + 224 * v3);
    if (*((char *)v8 + 23) < 0) {
      uint64_t v8 = (uint64_t *)*v8;
    }
    uint64_t v9 = v4 + 224 * v3;
    uint64_t v10 = (void *)(v9 + 48);
    if (*(char *)(v9 + 71) < 0) {
      uint64_t v10 = (void *)*v10;
    }
    uint64_t v11 = *((void *)a2 + 12);
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v12 = a2;
    }
    else {
      uint64_t v12 = *(Espresso::base_kernel::validate_for_engine_warning_t **)a2;
    }
    int v13 = 136315906;
    uint64_t v14 = v8;
    __int16 v15 = 2080;
    uint64_t v16 = v10;
    __int16 v17 = 2048;
    uint64_t v18 = v11;
    __int16 v19 = 2080;
    uint64_t v20 = v12;
    _os_log_debug_impl(&dword_1920CB000, v7, OS_LOG_TYPE_DEBUG, "Kernel validation warning %s (%s) @ %zu: %s", (uint8_t *)&v13, 0x2Au);
  }
}

void sub_19210F1AC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

std::string *Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(std::string *this, const Espresso::base_kernel::validate_for_engine_warning_t *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  std::vector<Espresso::layer_shape>::__init_with_size[abi:ne180100]<Espresso::layer_shape*,Espresso::layer_shape*>(this[1].__r_.__value_.__r.__words, *((long long **)a2 + 3), *((long long **)a2 + 4), (uint64_t)(*((void *)a2 + 4) - *((void *)a2 + 3)) >> 6);
  this[2].__r_.__value_.__r.__words[0] = 0;
  this[2].__r_.__value_.__l.__size_ = 0;
  this[2].__r_.__value_.__r.__words[2] = 0;
  std::vector<Espresso::layer_shape>::__init_with_size[abi:ne180100]<Espresso::layer_shape*,Espresso::layer_shape*>(this[2].__r_.__value_.__r.__words, *((long long **)a2 + 6), *((long long **)a2 + 7), (uint64_t)(*((void *)a2 + 7) - *((void *)a2 + 6)) >> 6);
  std::string::size_type v5 = *((void *)a2 + 10);
  this[3].__r_.__value_.__r.__words[0] = *((void *)a2 + 9);
  this[3].__r_.__value_.__l.__size_ = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)&this[3].__r_.__value_.__r.__words[2] = *(_OWORD *)((char *)a2 + 88);
  this[4].__r_.__value_.__s.__data_[8] = *((unsigned char *)a2 + 104);
  return this;
}

void sub_19210F27C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  if (*(char *)(v2 + 23) < 0) {
    operator delete(*(void **)v2);
  }
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::base_kernel::validate_for_engine_warning_t>>(unint64_t a1)
{
  if (a1 >= 0x24924924924924ALL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(112 * a1);
}

uint64_t std::map<std::string,Espresso::layer_shape>::map[abi:ne180100](uint64_t a1, long long **a2)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v3 = (void *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  long long v4 = (long long *)(a2 + 1);
  std::string::size_type v5 = *a2;
  if (*a2 != (long long *)(a2 + 1))
  {
    do
    {
      std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,Espresso::layer_shape> const&>((uint64_t **)a1, v3, (void *)v5 + 4, v5 + 2);
      unint64_t v6 = (long long *)*((void *)v5 + 1);
      if (v6)
      {
        do
        {
          unint64_t v7 = v6;
          unint64_t v6 = *(long long **)v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          unint64_t v7 = (long long *)*((void *)v5 + 2);
          BOOL v8 = *(void *)v7 == (void)v5;
          std::string::size_type v5 = v7;
        }
        while (!v8);
      }
      std::string::size_type v5 = v7;
    }
    while (v7 != v4);
  }
  return a1;
}

void sub_19210F390(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,Espresso::layer_shape> const&>(uint64_t **a1, void *a2, void *a3, long long *a4)
{
  unint64_t v6 = (uint64_t **)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__find_equal<std::string>(a1, a2, &v12, &v11, a3);
  unint64_t v7 = *v6;
  if (!*v6)
  {
    BOOL v8 = v6;
    std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__construct_node<std::pair<std::string const,Espresso::layer_shape> const&>((uint64_t)v10, (uint64_t)a1, a4);
    unint64_t v7 = v10[0];
    std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at(a1, v12, v8, v10[0]);
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,Espresso::layer_shape>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,Espresso::layer_shape>,void *>>>>::reset[abi:ne180100]((uint64_t)v10);
  }
  return v7;
}

void *std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__find_equal<std::string>(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  uint64_t v9 = a1 + 1;
  if (a1 + 1 == a2 || std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a5, a2 + 4))
  {
    uint64_t v11 = *a2;
    if ((void *)*a1 == a2)
    {
      int v13 = a2;
LABEL_17:
      if (v11)
      {
        *a3 = v13;
        return v13 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v11)
    {
      uint64_t v12 = (void *)*a2;
      do
      {
        int v13 = v12;
        uint64_t v12 = (void *)v12[1];
      }
      while (v12);
    }
    else
    {
      uint64_t v16 = a2;
      do
      {
        int v13 = (void *)v16[2];
        BOOL v17 = *v13 == (void)v16;
        uint64_t v16 = v13;
      }
      while (v17);
    }
    if (std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v13 + 4, a5)) {
      goto LABEL_17;
    }
  }
  else
  {
    if (!std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2 + 4, a5))
    {
      *a3 = a2;
      *a4 = a2;
      return a4;
    }
    uint64_t v14 = a2[1];
    if (v14)
    {
      __int16 v15 = (void *)a2[1];
      do
      {
        a4 = v15;
        __int16 v15 = (void *)*v15;
      }
      while (v15);
    }
    else
    {
      uint64_t v18 = a2;
      do
      {
        a4 = (void *)v18[2];
        BOOL v17 = *a4 == (void)v18;
        uint64_t v18 = a4;
      }
      while (!v17);
    }
    if (a4 == v9 || std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a5, a4 + 4))
    {
      if (v14)
      {
        *a3 = a4;
      }
      else
      {
        *a3 = a2;
        return a2 + 1;
      }
      return a4;
    }
  }

  return std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__find_equal<std::string>((uint64_t)a1, a3, a5);
}

void Espresso::load_network_shape_with_key(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  unint64_t v6 = (void *)MEMORY[0x192FF2020]();
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  Espresso::SerDes::generic_serdes_object::operator[](a1, a3, &v19);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v19, (uint64_t)&v27);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  if (*((void *)&v19 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v19 + 1));
  }
  uint64_t v7 = v27;
  if (!v27) {
    Espresso::throw_exception_selector<Espresso::io_error>("Error reading layer shapes");
  }
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  (*(void (**)(uint64_t, long long **))(*(void *)v27 + 32))(v27, &v24);
  BOOL v8 = v24;
  for (i = v25; v8 != i; BOOL v8 = (long long *)((char *)v8 + 24))
  {
    if (*((char *)v8 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v23, *(const std::string::value_type **)v8, *((void *)v8 + 1));
    }
    else
    {
      long long v10 = *v8;
      v23.__r_.__value_.__r.__words[2] = *((void *)v8 + 2);
      *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v10;
    }
    uint64_t v22 = 0;
    *(_OWORD *)&__p[8] = 0u;
    long long v21 = 0u;
    long long v19 = xmmword_192DC3600;
    *(void *)std::string __p = 0xFFFFFFFF00000001;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    Espresso::SerDes::generic_serdes_object::operator[](v7, (uint64_t)&v23, &v13);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v13, (uint64_t)&v17);
    if (v16 < 0) {
      operator delete(v15);
    }
    if (v14) {
      nitro::nitro_function::nitro_function(v14);
    }
    Espresso::SerDes::params_io<Espresso::layer_shape>(v17, (uint64_t)&v19, 0);
    int v13 = &v23;
    uint64_t v11 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a2, &v23, (long long **)&v13);
    long long v12 = *(_OWORD *)__p;
    *(_OWORD *)(v11 + 56) = v19;
    *(_OWORD *)(v11 + 72) = v12;
    *((void *)v11 + 11) = *(void *)&__p[16];
    if (v11 + 56 != (char *)&v19) {
      std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v11 + 96, (char *)v21, *((uint64_t *)&v21 + 1), (uint64_t)(*((void *)&v21 + 1) - v21) >> 2);
    }
    if (v18) {
      nitro::nitro_function::nitro_function(v18);
    }
    if ((void)v21)
    {
      *((void *)&v21 + 1) = v21;
      operator delete((void *)v21);
    }
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v23.__r_.__value_.__l.__data_);
    }
  }
  *(void *)&long long v19 = &v24;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v19);
  if (v28) {
    nitro::nitro_function::nitro_function(v28);
  }
}

void sub_19210F814(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  a19 = v32 - 136;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  uint64_t v34 = *(std::__shared_weak_count **)(v32 - 104);
  if (v34) {
    nitro::nitro_function::nitro_function(v34);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(void *a1, uint64_t a2)
{
  if ((*(unsigned int (**)(void, void *))(*(void *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 120))(&v6);
    long long v4 = v6;
    long long v6 = 0uLL;
    std::string::size_type v5 = *(std::__shared_weak_count **)(a2 + 8);
    *(_OWORD *)a2 = v4;
    if (v5)
    {
      nitro::nitro_function::nitro_function(v5);
      if (*((void *)&v6 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v6 + 1));
      }
    }
  }
}

void Espresso::SerDes::params_io<Espresso::layer_shape>(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v12, "w");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v12, v14);
    (*(void (**)(void *, void **, uint64_t))(*(void *)v14[0] + 160))(v14[0], __p, a2);
    if (v16 < 0) {
      operator delete(__p[0]);
    }
    if (v14[1]) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v14[1]);
    }
    if (v13 < 0) {
      operator delete(v12[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v12, "h");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v12, v14);
    (*(void (**)(void *, void **, uint64_t))(*(void *)v14[0] + 160))(v14[0], __p, a2 + 4);
    if (v16 < 0) {
      operator delete(__p[0]);
    }
    if (v14[1]) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v14[1]);
    }
    if (v13 < 0) {
      operator delete(v12[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v12, "n");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v12, v14);
    (*(void (**)(void *, void **, uint64_t))(*(void *)v14[0] + 160))(v14[0], __p, a2 + 12);
    if (v16 < 0) {
      operator delete(__p[0]);
    }
    if (v14[1]) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v14[1]);
    }
    if (v13 < 0) {
      operator delete(v12[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v12, "k");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v12, v14);
    (*(void (**)(void *, void **, uint64_t))(*(void *)v14[0] + 160))(v14[0], __p, a2 + 8);
    if (v16 < 0) {
      operator delete(__p[0]);
    }
    if (v14[1]) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v14[1]);
    }
    if (v13 < 0) {
      operator delete(v12[0]);
    }
    if (*(_DWORD *)(a2 + 16) != 1)
    {
      std::string::basic_string[abi:ne180100]<0>(v12, "seq");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v12, v14);
      (*(void (**)(void *, void **, uint64_t))(*(void *)v14[0] + 160))(v14[0], __p, a2 + 16);
      if (v16 < 0) {
        operator delete(__p[0]);
      }
      if (v14[1]) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v14[1]);
      }
      if (v13 < 0) {
        operator delete(v12[0]);
      }
    }
    if (*(_DWORD *)(a2 + 20) != -1)
    {
      std::string::basic_string[abi:ne180100]<0>(v12, "_rank");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v12, v14);
      (*(void (**)(void *, void **, uint64_t))(*(void *)v14[0] + 160))(v14[0], __p, a2 + 20);
      if (v16 < 0) {
        operator delete(__p[0]);
      }
      if (v14[1]) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v14[1]);
      }
      if (v13 < 0) {
        operator delete(v12[0]);
      }
    }
    if (*(_DWORD *)(a2 + 24))
    {
      std::string::basic_string[abi:ne180100]<0>(v12, "ane_row_stride_bytes");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v12, v14);
      (*(void (**)(void *, void **, uint64_t))(*(void *)v14[0] + 168))(v14[0], __p, a2 + 24);
      if (v16 < 0) {
        operator delete(__p[0]);
      }
      if (v14[1]) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v14[1]);
      }
      if (v13 < 0) {
        operator delete(v12[0]);
      }
    }
    if (*(_DWORD *)(a2 + 28))
    {
      std::string::basic_string[abi:ne180100]<0>(v12, "ane_plane_stride_bytes");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v12, v14);
      (*(void (**)(void *, void **, uint64_t))(*(void *)v14[0] + 168))(v14[0], __p, a2 + 28);
      if (v16 < 0) {
        operator delete(__p[0]);
      }
      if (v14[1]) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v14[1]);
      }
      if (v13 < 0) {
        operator delete(v12[0]);
      }
    }
    if (*(_DWORD *)(a2 + 32))
    {
      std::string::basic_string[abi:ne180100]<0>(v12, "ane_circular_buffer_nd_axis");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v12, v14);
      (*(void (**)(void *, void **, uint64_t))(*(void *)v14[0] + 168))(v14[0], __p, a2 + 32);
      if (v16 < 0) {
        operator delete(__p[0]);
      }
      if (v14[1]) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v14[1]);
      }
      if (v13 < 0) {
        operator delete(v12[0]);
      }
    }
    if (*(_DWORD *)(a2 + 36))
    {
      std::string::basic_string[abi:ne180100]<0>(v12, "ane_circular_buffer_size");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v12, v14);
      (*(void (**)(void *, void **, uint64_t))(*(void *)v14[0] + 168))(v14[0], __p, a2 + 36);
      if (v16 < 0) {
        operator delete(__p[0]);
      }
      if (v14[1]) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v14[1]);
      }
      if (v13 < 0) {
        operator delete(v12[0]);
      }
    }
    uint64_t v5 = *(void *)(a2 + 40);
    uint64_t v6 = *(void *)(a2 + 48);
    uint64_t v7 = a2 + 40;
    if (v6 != v5)
    {
      std::string::basic_string[abi:ne180100]<0>(v14, "multiplanar_row_stride_bytes_per_plane");
      (*(void (**)(uint64_t, void **, uint64_t))(*(void *)a1 + 264))(a1, v14, v7);
      if (SHIBYTE(__p[0]) < 0)
      {
        BOOL v8 = v14[0];
LABEL_145:
        operator delete(v8);
      }
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v12, "w");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v12, v14);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(v14, (_DWORD *)a2);
    if (v16 < 0) {
      operator delete(__p[0]);
    }
    if (v14[1]) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v14[1]);
    }
    if (v13 < 0) {
      operator delete(v12[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v12, "h");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v12, v14);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(v14, (_DWORD *)(a2 + 4));
    if (v16 < 0) {
      operator delete(__p[0]);
    }
    if (v14[1]) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v14[1]);
    }
    if (v13 < 0) {
      operator delete(v12[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v12, "n");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v12, v14);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(v14, (_DWORD *)(a2 + 12));
    if (v16 < 0) {
      operator delete(__p[0]);
    }
    if (v14[1]) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v14[1]);
    }
    if (v13 < 0) {
      operator delete(v12[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v12, "c");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v12, v14);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(v14, (_DWORD *)(a2 + 8));
    if (v16 < 0) {
      operator delete(__p[0]);
    }
    if (v14[1]) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v14[1]);
    }
    if (v13 < 0) {
      operator delete(v12[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v12, "k");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v12, v14);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(v14, (_DWORD *)(a2 + 8));
    if (v16 < 0) {
      operator delete(__p[0]);
    }
    if (v14[1]) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v14[1]);
    }
    if (v13 < 0) {
      operator delete(v12[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v12, "seq");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v12, v14);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(v14, (_DWORD *)(a2 + 16));
    if (v16 < 0) {
      operator delete(__p[0]);
    }
    if (v14[1]) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v14[1]);
    }
    if (v13 < 0) {
      operator delete(v12[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v12, "_rank");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v12, v14);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(v14, (_DWORD *)(a2 + 20));
    if (v16 < 0) {
      operator delete(__p[0]);
    }
    if (v14[1]) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v14[1]);
    }
    if (v13 < 0) {
      operator delete(v12[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v12, "ane_row_stride_bytes");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v12, v14);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(v14, (_DWORD *)(a2 + 24));
    if (v16 < 0) {
      operator delete(__p[0]);
    }
    if (v14[1]) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v14[1]);
    }
    if (v13 < 0) {
      operator delete(v12[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v12, "ane_plane_stride_bytes");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v12, v14);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(v14, (_DWORD *)(a2 + 28));
    if (v16 < 0) {
      operator delete(__p[0]);
    }
    if (v14[1]) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v14[1]);
    }
    if (v13 < 0) {
      operator delete(v12[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v12, "ane_circular_buffer_nd_axis");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v12, v14);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(v14, (_DWORD *)(a2 + 32));
    if (v16 < 0) {
      operator delete(__p[0]);
    }
    if (v14[1]) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v14[1]);
    }
    if (v13 < 0) {
      operator delete(v12[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v12, "ane_circular_buffer_size");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v12, v14);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(v14, (_DWORD *)(a2 + 36));
    if (v16 < 0) {
      operator delete(__p[0]);
    }
    if (v14[1]) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v14[1]);
    }
    if (v13 < 0) {
      operator delete(v12[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v14, "multiplanar_row_stride_bytes_per_plane");
    int v9 = (*(uint64_t (**)(uint64_t, void **))(*(void *)a1 + 24))(a1, v14);
    int v10 = v9;
    if (SHIBYTE(__p[0]) < 0)
    {
      operator delete(v14[0]);
      if (!v10) {
        return;
      }
    }
    else if (!v9)
    {
      return;
    }
    std::string::basic_string[abi:ne180100]<0>(v12, "multiplanar_row_stride_bytes_per_plane");
    (*(void (**)(void **__return_ptr, uint64_t, void **))(*(void *)a1 + 144))(v14, a1, v12);
    uint64_t v11 = *(void **)(a2 + 40);
    if (v11)
    {
      *(void *)(a2 + 48) = v11;
      operator delete(v11);
      *(void *)(a2 + 40) = 0;
      *(void *)(a2 + 48) = 0;
      *(void *)(a2 + 56) = 0;
    }
    *(_OWORD *)(a2 + 40) = *(_OWORD *)v14;
    *(void **)(a2 + 56) = __p[0];
    v14[1] = 0;
    __p[0] = 0;
    v14[0] = 0;
    if (v13 < 0)
    {
      BOOL v8 = v12[0];
      goto LABEL_145;
    }
  }
}

void sub_1921103EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::ANECompilerEngine::deconvolution_kernel::get_padding(Espresso::ANECompilerEngine::deconvolution_kernel *this, const Espresso::convolution_uniforms *a2, int a3, int a4, int a5, int a6)
{
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  int v8 = *((__int16 *)a2 + 48);
  if (v8 > 1) {
    int v9 = (*((_DWORD *)a2 + 12) - 1) * v8 + 1;
  }
  else {
    int v9 = *((_DWORD *)a2 + 12);
  }
  int v10 = *((__int16 *)a2 + 49);
  if (v10 > 1) {
    int v11 = (*((_DWORD *)a2 + 13) - 1) * v10 + 1;
  }
  else {
    int v11 = *((_DWORD *)a2 + 13);
  }
  *((void *)this + 2) = 0;
  int v12 = *((__int16 *)a2 + 47);
  int v13 = *((__int16 *)a2 + 46);
  int v39 = ~(v12 * a4) + a6 + v11;
  unsigned int v40 = (v11 - a6 + (a4 - 1) * v12) & ~((v11 - a6 + (a4 - 1) * v12) >> 31);
  unsigned int v14 = v11 + ~(v40 >> 1);
  unsigned int v15 = v39 - v14;
  *((_DWORD *)this + 2) = v14;
  *((_DWORD *)this + 3) = v39 - v14;
  unsigned int v35 = (v9 - a5 + (a3 - 1) * v13) & ~((v9 - a5 + (a3 - 1) * v13) >> 31);
  int v36 = ~(v13 * a3) + a5 + v9;
  unsigned int v16 = v9 + ~(v35 >> 1);
  unsigned int v17 = v36 - v16;
  *(_DWORD *)this = v16;
  *((_DWORD *)this + 1) = v36 - v16;
  uint64_t v18 = [MEMORY[0x1E4F1CB18] standardUserDefaults];
  long long v19 = [v18 persistentDomainForName:*MEMORY[0x1E4F283E0]];

  unsigned int v43 = v19;
  uint64_t v20 = [v19 objectForKeyedSubscript:@"com.apple.espresso.force_pads"];

  if (v20)
  {
    std::string v23 = [v43 objectForKeyedSubscript:@"com.apple.espresso.force_pads"];
    uint64_t v24 = [v23 componentsSeparatedByString:@","];

    uint64_t v25 = [v24 objectAtIndexedSubscript:0];
    unsigned int v14 = [v25 intValue];
    *((_DWORD *)this + 2) = v14;

    uint64_t v26 = [v24 objectAtIndexedSubscript:1];
    unsigned int v15 = [v26 intValue];
    *((_DWORD *)this + 3) = v15;

    uint64_t v27 = [v24 objectAtIndexedSubscript:2];
    unsigned int v16 = [v27 intValue];
    *(_DWORD *)this = v16;

    uint64_t v28 = [v24 objectAtIndexedSubscript:3];
    unsigned int v17 = [v28 intValue];
    *((_DWORD *)this + 1) = v17;
  }
  uint64_t v29 = Espresso::espresso_os_log_subsystem(v21, v22);
  if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
  {
    int v33 = *((__int16 *)a2 + 47);
    *(_DWORD *)std::string buf = 67111168;
    int v45 = a4;
    __int16 v46 = 1024;
    int v47 = a6;
    __int16 v48 = 1024;
    int v49 = v33;
    __int16 v50 = 1024;
    int v51 = v11;
    __int16 v52 = 1024;
    int v53 = v39;
    __int16 v54 = 1024;
    unsigned int v55 = v40 >> 1;
    __int16 v56 = 1024;
    unsigned int v57 = v40 - (v40 >> 1);
    __int16 v58 = 1024;
    unsigned int v59 = v14;
    __int16 v60 = 1024;
    unsigned int v61 = v15;
    _os_log_debug_impl(&dword_1920CB000, v29, OS_LOG_TYPE_DEBUG, "DECONV %d\t%d\t%d\t%d\t%d\t\t%d\t%d\t%d\t%d\n", buf, 0x38u);
  }

  uint64_t v32 = Espresso::espresso_os_log_subsystem(v30, v31);
  if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
  {
    int v34 = *((__int16 *)a2 + 46);
    *(_DWORD *)std::string buf = 67111168;
    int v45 = a3;
    __int16 v46 = 1024;
    int v47 = a5;
    __int16 v48 = 1024;
    int v49 = v34;
    __int16 v50 = 1024;
    int v51 = v9;
    __int16 v52 = 1024;
    int v53 = v36;
    __int16 v54 = 1024;
    unsigned int v55 = v35 >> 1;
    __int16 v56 = 1024;
    unsigned int v57 = v35 - (v35 >> 1);
    __int16 v58 = 1024;
    unsigned int v59 = v16;
    __int16 v60 = 1024;
    unsigned int v61 = v17;
    _os_log_debug_impl(&dword_1920CB000, v32, OS_LOG_TYPE_DEBUG, "DECONV %d\t%d\t%d\t%d\t%d\t\t%d\t%d\t%d\t%d\n", buf, 0x38u);
  }
}

void sub_192110908(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void Espresso::ANERuntimeEngine::compiler::force_allocate_blobs(void)::$_0::operator()(uint64_t a1, uint64_t a2, std::string::size_type *a3)
{
  uint64_t v215 = *MEMORY[0x1E4F143B8];
  std::string::size_type v3 = *a3;
  if (*a3)
  {
    int v174 = *(void **)a1;
    uint64_t v5 = *(std::__shared_weak_count **)(v3 + 248);
    if (v5 && (uint64_t v6 = std::__shared_weak_count::lock(v5)) != 0)
    {
      int v7 = *(void *)(v3 + 240) == 0;
      nitro::nitro_function::nitro_function(v6);
    }
    else
    {
      int v7 = 1;
    }
    int v8 = *(unsigned __int8 *)(a1 + 16);
    uint64_t v9 = **(void **)(a1 + 24);
    uint64_t v177 = a1;
    if (*(unsigned char *)(a1 + 17))
    {
      BOOL v10 = 0;
    }
    else
    {
      int v11 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>(v9 + 328, (void *)a2);
      if ((void *)(v9 + 336) == v11) {
        int v12 = 0;
      }
      else {
        int v12 = *((_DWORD *)v11 + 31);
      }
      BOOL v10 = v12 != 0;
    }
    std::string::basic_string[abi:ne180100]<0>(&v194, "lazy_ane_blobs");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    Espresso::map_const_get<std::map<std::string,std::string>>(v9 + 472, (uint64_t)&v194, (uint64_t)__p, &buf);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    {
      BOOL v15 = buf.__r_.__value_.__l.__size_ == 1 && *buf.__r_.__value_.__l.__data_ == 49;
      operator delete(buf.__r_.__value_.__l.__data_);
    }
    else
    {
      BOOL v15 = SHIBYTE(buf.__r_.__value_.__r.__words[2]) == 1 && buf.__r_.__value_.__s.__data_[0] == 49;
    }
    if (SBYTE7(v189) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v194.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v194.__r_.__value_.__l.__data_);
    }
    int v184 = v15 || v10;
    unsigned int v16 = Espresso::espresso_os_log_subsystem(v13, v14);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
    {
      if (*(char *)(a2 + 23) >= 0) {
        std::string::size_type v45 = a2;
      }
      else {
        std::string::size_type v45 = *(void *)a2;
      }
      std::string::size_type v46 = *a3;
      int v47 = *(unsigned __int8 *)(a1 + 16);
      LODWORD(buf.__r_.__value_.__l.__data_) = 136316418;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v45;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v46;
      HIWORD(buf.__r_.__value_.__r.__words[2]) = 1024;
      LODWORD(v201) = v7;
      WORD2(v201) = 1024;
      *(_DWORD *)((char *)&v201 + 6) = v47;
      WORD5(v201) = 1024;
      HIDWORD(v201) = v8 != v7;
      LOWORD(v202) = 1024;
      *(_DWORD *)((char *)&v202 + 2) = v184;
      _os_log_debug_impl(&dword_1920CB000, v16, OS_LOG_TYPE_DEBUG, "[Espresso::ANERuntimeEngine::force_allocate_blobs] Force-allocating blob=%s ptr=%lld is_primary=%d do_alloc_primary_blob=%d skip=%d lazy=%d", (uint8_t *)&buf, 0x2Eu);
    }

    if (v8 == v7)
    {
      int v182 = *(unsigned __int8 *)(a1 + 17);
      uint64_t v18 = *a3 + 160;
      int v17 = *(_DWORD *)v18;
      int v19 = *(_DWORD *)(*a3 + 164);
      uint64_t v20 = *(int *)(*a3 + 168);
      int v21 = *(_DWORD *)(*a3 + 172);
      int v22 = *(_DWORD *)(*a3 + 176);
      uint64_t v186 = (Espresso::ANERuntimeEngine::blob_container *)*a3;
      uint64_t v185 = *(unsigned int *)(*a3 + 180);
      buf.__r_.__value_.__s.__data_[0] = 1;
      uint64_t v204 = 0;
      uint64_t v205 = 0;
      int v178 = v22;
      int v180 = v19;
      int v170 = v21;
      int v171 = v17;
      buf.__r_.__value_.__l.__size_ = v22;
      buf.__r_.__value_.__r.__words[2] = v21;
      *(void *)&long long v201 = v19;
      *((void *)&v201 + 1) = v17;
      uint64_t v202 = v20;
      uint64_t v203 = 0;
      int v172 = v20;
      HIDWORD(buf.__r_.__value_.__r.__words[0]) = 723714896;
      kdebug_trace();
      std::string v23 = v186;
      Espresso::ANERuntimeEngine::blob_container::cleanup_all_io_surfaces(v186);
      Espresso::abstract_blob_container::shape((char *)&v194, (uint64_t)v186);
      uint64_t v24 = Espresso::layer_shape::total_dim((Espresso::layer_shape *)&v194);
      uint64_t v25 = (Espresso::ANECompilerEngine *)v197;
      if (v197)
      {
        uint64_t v198 = (unsigned int *)v197;
        operator delete(v197);
      }
      if (!v24)
      {
LABEL_188:
        Espresso_scoped_signpost::~Espresso_scoped_signpost((Espresso_scoped_signpost *)&buf);
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(*(void *)(v177 + 8), a2, a2);
        std::string::size_type v148 = *a3;
        int v150 = (std::string::size_type *)v174[52];
        unint64_t v149 = v174[53];
        if ((unint64_t)v150 >= v149)
        {
          int v153 = (void *)v174[51];
          uint64_t v154 = v150 - v153;
          unint64_t v155 = v154 + 1;
          if ((unint64_t)(v154 + 1) >> 61) {
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v156 = v149 - (void)v153;
          if (v156 >> 2 > v155) {
            unint64_t v155 = v156 >> 2;
          }
          if ((unint64_t)v156 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v157 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v157 = v155;
          }
          if (v157)
          {
            if (v157 >> 61) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            uint64_t v158 = (char *)operator new(8 * v157);
          }
          else
          {
            uint64_t v158 = 0;
          }
          uint64_t v159 = (std::string::size_type *)&v158[8 * v154];
          std::string::size_type *v159 = v148;
          int v151 = v159 + 1;
          if (v150 == v153)
          {
            int v152 = v174;
          }
          else
          {
            int v152 = v174;
            do
            {
              std::string::size_type v160 = *--v150;
              *--uint64_t v159 = v160;
            }
            while (v150 != v153);
            int v150 = (std::string::size_type *)v174[51];
          }
          v152[51] = v159;
          v152[52] = v151;
          v152[53] = &v158[8 * v157];
          if (v150) {
            operator delete(v150);
          }
        }
        else
        {
          std::string::size_type *v150 = v148;
          int v151 = v150 + 1;
          int v152 = v174;
        }
        v152[52] = v151;
        return;
      }
      int v26 = *((_DWORD *)v186 + 49);
      if ((v26 - 1) >= 2 && v26 != 4)
      {
        exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::to_string((std::string *)__p, *((_DWORD *)v186 + 49));
        uint64_t v165 = std::string::insert((std::string *)__p, 0, "Unsupported compute path: ");
        long long v166 = *(_OWORD *)&v165->__r_.__value_.__l.__data_;
        v194.__r_.__value_.__r.__words[2] = v165->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v194.__r_.__value_.__l.__data_ = v166;
        v165->__r_.__value_.__l.__size_ = 0;
        v165->__r_.__value_.__r.__words[2] = 0;
        v165->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, &v194);
        __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      uint64_t v27 = (int)v185;
      uint64_t v28 = *((void *)v186 + 27);
      uint64_t v29 = *((void *)v186 + 28);
      unint64_t v30 = (v29 - v28) >> 3;
      if ((int)v185 <= v30)
      {
        if ((int)v185 < v30)
        {
          uint64_t v43 = v28 + 8 * (int)v185;
          while (v29 != v43)
          {
            unsigned int v44 = *(void **)(v29 - 8);
            v29 -= 8;
          }
          std::string v23 = v186;
          *((void *)v186 + 28) = v43;
        }
      }
      else
      {
        unint64_t v31 = (int)v185 - v30;
        uint64_t v32 = *((void *)v186 + 29);
        if (v31 <= (v32 - v29) >> 3)
        {
          bzero(*((void **)v186 + 28), 8 * v31);
          *((void *)v186 + 28) = v29 + 8 * v31;
        }
        else
        {
          if ((v185 & 0x80000000) != 0) {
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v33 = v32 - v28;
          if (v33 >> 2 > (unint64_t)(int)v185) {
            uint64_t v27 = v33 >> 2;
          }
          if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v34 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v34 = v27;
          }
          if (v34 >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          unsigned int v35 = (char *)operator new(8 * v34);
          int v36 = &v35[8 * v30];
          int v37 = &v35[8 * v34];
          bzero(v36, 8 * v31);
          int v38 = &v36[8 * v31];
          unsigned int v40 = (void *)*((void *)v186 + 27);
          int v39 = (void *)*((void *)v186 + 28);
          if (v39 == v40)
          {
            int64x2_t v42 = vdupq_n_s64((unint64_t)v39);
          }
          else
          {
            do
            {
              uint64_t v41 = *--v39;
              *int v39 = 0;
              *((void *)v36 - 1) = v41;
              v36 -= 8;
            }
            while (v39 != v40);
            int64x2_t v42 = *(int64x2_t *)((char *)v186 + 216);
          }
          *((void *)v186 + 27) = v36;
          *((void *)v186 + 28) = v38;
          *((void *)v186 + 29) = v37;
          int v49 = (char *)v42.i64[1];
          __int16 v48 = (char *)v42.i64[0];
          while (v49 != v48)
          {
            __int16 v50 = (void *)*((void *)v49 - 1);
            v49 -= 8;
          }
          std::string v23 = v186;
          if (v48) {
            operator delete(v48);
          }
        }
      }
      int v51 = *((_DWORD *)v23 + 48);
      if ((v51 - 1) >= 2)
      {
        if (v51 != 4)
        {
          unint64_t v167 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::to_string((std::string *)__p, *((_DWORD *)v23 + 48));
          char v168 = std::string::insert((std::string *)__p, 0, "Interleave factor not supported: ");
          long long v169 = *(_OWORD *)&v168->__r_.__value_.__l.__data_;
          v194.__r_.__value_.__r.__words[2] = v168->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v194.__r_.__value_.__l.__data_ = v169;
          v168->__r_.__value_.__l.__size_ = 0;
          v168->__r_.__value_.__r.__words[2] = 0;
          v168->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(v167, &v194);
          __cxa_throw(v167, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        if (v180 != 3 && (v180 & 3) != 0)
        {
          uint64_t v98 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v98, "Invalid interleave");
          __cxa_throw(v98, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
      }
      __int16 v52 = Espresso::ANECompilerEngine::current_ane_arch(v25);
      if ((Espresso::ANECompilerEngine::is_mix_e((Espresso::ANECompilerEngine *)v52, v53) & 1) != 0
        || (__int16 v54 = (int *)*((void *)v23 + 16), *((void *)v23 + 17) - (void)v54 != 4))
      {
        int v58 = 0;
      }
      else
      {
        int v55 = *v54;
        if (v55 == 1278226534)
        {
        }
        else
        {
          BOOL v99 = v55 == 843264102;

          if (!v99)
          {
            int v58 = 0;
            goto LABEL_66;
          }
        }
        int v100 = Espresso::espresso_os_log_subsystem(v56, v57);
        if (os_log_type_enabled(v100, OS_LOG_TYPE_DEBUG))
        {
          if (*(char *)(a2 + 23) >= 0) {
            std::string::size_type v162 = a2;
          }
          else {
            std::string::size_type v162 = *(void *)a2;
          }
          LODWORD(v194.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)v194.__r_.__value_.__r.__words + 4) = v162;
          _os_log_debug_impl(&dword_1920CB000, v100, OS_LOG_TYPE_DEBUG, "[Espresso::ANERuntimeEngine::blob_container] will attempt to bind this blob using IOSurface directly to ANE: %s.", (uint8_t *)&v194, 0xCu);
        }

        unsigned int v59 = v186;
        if (4 * ((*((_DWORD *)v186 + 48) * (_BYTE)v178) & 0xF))
        {
          int v58 = 0;
LABEL_67:
          long long v60 = *(_OWORD *)(v18 + 16);
          *(_OWORD *)std::string __p = *(_OWORD *)v18;
          long long v189 = v60;
          compute_for_iosurface_params((uint64_t)&v194, (int *)__p, *((_DWORD *)v59 + 49), *((_DWORD *)v59 + 48), *((_DWORD **)v59 + 16), *((void *)v59 + 17));
          unint64_t v187 = [MEMORY[0x1E4F1CA80] set];
          unsigned int v61 = (unsigned int *)v197;
          uint64_t v62 = v198;
          if (v197 != v198)
          {
            do
            {
              __int16 v63 = [NSNumber numberWithUnsignedInt:*v61];
              [v187 addObject:v63];

              ++v61;
            }
            while (v61 != v62);
          }
          uint64_t v64 = (void *)MEMORY[0x1E4F1CA60];
          if (v199)
          {
            BOOL v65 = [MEMORY[0x1E4F1CA60] dictionary];
            uint64_t v66 = *(unsigned __int8 *)(a2 + 23);
            if ((v66 & 0x80u) != 0) {
              uint64_t v66 = *(void *)(a2 + 8);
            }
            if (v66)
            {
              uint64_t v67 = NSString;
              std::operator+<char>();
              uint64_t v68 = (SBYTE7(v189) & 0x80u) == 0 ? __p : (void **)__p[0];
              float32x4_t v69 = [v67 stringWithUTF8String:v68];
              [v65 setObject:v69 forKeyedSubscript:*MEMORY[0x1E4F2F128]];

              if (SBYTE7(v189) < 0) {
                operator delete(__p[0]);
              }
            }
            unsigned int v70 = *(_DWORD *)v197;
            if (*(_DWORD *)v197 == 1278226534) {
              unsigned int v71 = 1278226536;
            }
            else {
              unsigned int v71 = *(_DWORD *)v197;
            }
            if (v70 == 843264102) {
              unsigned int v71 = 843264104;
            }
            if (v58) {
              uint64_t v72 = v70;
            }
            else {
              uint64_t v72 = v71;
            }
            uint64_t v73 = (void *)MEMORY[0x1E4F1CA60];
            uint64_t v74 = *MEMORY[0x1E4F24D20];
            __p[0] = v65;
            uint64_t v75 = *MEMORY[0x1E4F24E10];
            uint64_t v210 = v74;
            uint64_t v211 = v75;
            uint64_t v76 = [NSNumber numberWithUnsignedLong:v194.__r_.__value_.__r.__words[0]];
            __p[1] = v76;
            uint64_t v212 = *MEMORY[0x1E4F24D08];
            BOOL v77 = [NSNumber numberWithUnsignedLong:v194.__r_.__value_.__l.__size_];
            *(void *)&long long v189 = v77;
            uint64_t v213 = *MEMORY[0x1E4F24D70];
            int v78 = [NSNumber numberWithUnsignedInt:v72];
            *((void *)&v189 + 1) = v78;
            int8x16_t v79 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:__p forKeys:&v210 count:4];
            uint64_t v183 = [v73 dictionaryWithDictionary:v79];

            if (v72 == 707153000 || v72 == 706956392)
            {
              int64_t v80 = [NSNumber numberWithUnsignedLong:v196];
              [v183 setValue:v80 forKey:*MEMORY[0x1E4F24D48]];
            }
          }
          else
          {
            uint64_t v210 = *MEMORY[0x1E4F2F2C0];
            uint64_t v81 = [NSNumber numberWithUnsignedLong:v194.__r_.__value_.__r.__words[0]];
            __p[0] = v81;
            uint64_t v211 = *MEMORY[0x1E4F2F0E8];
            int v82 = [NSNumber numberWithUnsignedLong:v194.__r_.__value_.__l.__size_];
            __p[1] = v82;
            uint64_t v212 = *MEMORY[0x1E4F2EFE0];
            int v83 = [NSNumber numberWithUnsignedLong:v194.__r_.__value_.__r.__words[2]];
            *(void *)&long long v189 = v83;
            uint64_t v213 = *MEMORY[0x1E4F2EFD8];
            long long v84 = [NSNumber numberWithUnsignedLong:v195];
            *((void *)&v189 + 1) = v84;
            uint64_t v85 = *MEMORY[0x1E4F2F128];
            uint64_t v214 = *MEMORY[0x1E4F2F128];
            long long v86 = NSString;
            std::operator+<char>();
            if (v209 >= 0) {
              uint64_t v87 = v206;
            }
            else {
              uint64_t v87 = *(uint8_t **)v206;
            }
            unint64_t v88 = [v86 stringWithUTF8String:v87];
            unint64_t v190 = v88;
            long long v89 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:__p forKeys:&v210 count:5];
            uint64_t v183 = [v64 dictionaryWithDictionary:v89];

            if (SHIBYTE(v209) < 0) {
              operator delete(*(void **)v206);
            }

            uint64_t v92 = *(unsigned __int8 *)(a2 + 23);
            if ((v92 & 0x80u) != 0) {
              uint64_t v92 = *(void *)(a2 + 8);
            }
            uint64_t v93 = v186;
            if (v92)
            {
              int v94 = NSString;
              std::operator+<char>();
              if (v209 >= 0) {
                uint64_t v95 = v206;
              }
              else {
                uint64_t v95 = *(uint8_t **)v206;
              }
              uint64_t v96 = [v94 stringWithUTF8String:v95];
              [v183 setObject:v96 forKeyedSubscript:v85];

              if (SHIBYTE(v209) < 0) {
                operator delete(*(void **)v206);
              }
              uint64_t v93 = v186;
            }
            if (v198 == v197)
            {
              switch(v195)
              {
                case 1:
                  uint64_t v97 = 1278226488;
                  break;
                case 4:
                  uint64_t v97 = 1111970369;
                  break;
                case 2:
                  uint64_t v97 = 1278226536;
                  break;
                default:
                  goto LABEL_138;
              }
              CFDictionaryRef v103 = CVPixelFormatDescriptionCreateWithPixelFormatType(0, v97);
              __int16 v105 = v103;
              if (v103)
              {
                int v106 = [(__CFDictionary *)v103 objectForKeyedSubscript:*MEMORY[0x1E4F24EE0]];
                __int16 v107 = v106;
                if (v106)
                {
                  uint64_t v108 = [v106 objectAtIndexedSubscript:0];

                  __int16 v105 = v108;
                }
                __int16 v109 = [v105 objectForKeyedSubscript:*MEMORY[0x1E4F24E18]];
                __int16 v111 = v109;
                if (v109)
                {
                  int v112 = (int)[v109 intValue] / 8;
                }
                else
                {
                  __int16 v113 = Espresso::espresso_os_log_subsystem(0, v110);
                  if (os_log_type_enabled(v113, OS_LOG_TYPE_DEBUG))
                  {
                    *(_DWORD *)unint64_t v206 = 67109376;
                    *(_DWORD *)&v206[4] = v97;
                    *(_WORD *)long long v207 = 2048;
                    *(void *)&uint64_t v207[2] = 0;
                    _os_log_debug_impl(&dword_1920CB000, v113, OS_LOG_TYPE_DEBUG, "No kCVPixelFormatBitsPerBlock entry in the description of format %08x plane %ld\n", v206, 0x12u);
                  }

                  int v112 = 0;
                }
              }
              else
              {
                __int16 v105 = Espresso::espresso_os_log_subsystem(0, v104);
                if (os_log_type_enabled(v105, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)unint64_t v206 = 67109120;
                  *(_DWORD *)&v206[4] = v97;
                  _os_log_debug_impl(&dword_1920CB000, v105, OS_LOG_TYPE_DEBUG, "No format description whatsoever of format %08x\n", v206, 8u);
                }
                int v112 = 0;
              }

              if (v195 != v112)
              {
                BOOL v65 = Espresso::espresso_os_log_subsystem(v114, v115);
                if (os_log_type_enabled(v65, OS_LOG_TYPE_DEBUG))
                {
                  *(void *)unint64_t v206 = 67109632;
                  *(_WORD *)long long v207 = 2048;
                  *(void *)&uint64_t v207[2] = v195;
                  __int16 v208 = 1024;
                  int v209 = v112;
                  _os_log_debug_impl(&dword_1920CB000, v65, OS_LOG_TYPE_DEBUG, "pixel format %08x did not match bytes per element: got %zd, should be %d", v206, 0x18u);
                }
                goto LABEL_137;
              }
            }
            else
            {
              uint64_t v97 = *(unsigned int *)v197;
              if (!v97)
              {
LABEL_138:
                int v116 = Espresso::espresso_os_log_subsystem(v90, v91);
                if (os_log_type_enabled(v116, OS_LOG_TYPE_DEBUG))
                {
                  int v161 = *((_DWORD *)v93 + 48);
                  LODWORD(__p[0]) = 67110914;
                  HIDWORD(__p[0]) = v185;
                  LOWORD(__p[1]) = 1024;
                  *(_DWORD *)((char *)&__p[1] + 2) = v178;
                  HIWORD(__p[1]) = 1024;
                  LODWORD(v189) = v170;
                  WORD2(v189) = 1024;
                  *(_DWORD *)((char *)&v189 + 6) = v180;
                  WORD5(v189) = 1024;
                  HIDWORD(v189) = v171;
                  LOWORD(v190) = 1024;
                  *(_DWORD *)((char *)&v190 + 2) = v172;
                  HIWORD(v190) = 1024;
                  int v191 = v161;
                  __int16 v192 = 2112;
                  unint64_t v193 = v183;
                  _os_log_debug_impl(&dword_1920CB000, v116, OS_LOG_TYPE_DEBUG, "[Espresso::ANERuntimeEngine::blob_container::resize] subbatches=%d w=%d h=%d k=%d n=%d seq=%d interleaved=%d -> %@", (uint8_t *)__p, 0x36u);
                }

                __int16 v117 = (std::__shared_weak_count *)*((void *)v186 + 31);
                if (v117)
                {
                  int v118 = std::__shared_weak_count::lock(v117);
                  if (v118)
                  {
                    uint64_t v119 = *((void *)v186 + 30);
                    if (!v119 || *(_DWORD *)(v119 + 180) == v185)
                    {
                      char v173 = v118;
LABEL_147:
                      if ((int)v185 >= 1)
                      {
                        unint64_t v120 = 0;
                        uint64_t v181 = *MEMORY[0x1E4F2F040];
                        uint64_t v179 = *MEMORY[0x1E4F2EFB8];
                        while (1)
                        {
                          id v121 = v183;
                          int v122 = v187;
                          unint64_t v124 = v122;
                          if (v182) {
                            break;
                          }
                          uint64_t v127 = 0;
                          uint64_t v129 = 0;
                          int v130 = 0;
LABEL_173:
                          int v144 = [[EspressoANEIOSurface alloc] initWithIOSurfaceProperties:v121 andPixelFormats:v124];
                          uint64_t v145 = v144;
                          if ((v184 & 1) == 0) {
                            [(EspressoANEIOSurface *)v144 doNonLazyAllocation:v130];
                          }
                          *(void *)unint64_t v206 = v127;
                          *(void *)long long v207 = v129;
                          if (v129) {
                            atomic_fetch_add_explicit((atomic_ullong *volatile)v129 + 1, 1uLL, memory_order_relaxed);
                          }
                          [(EspressoANEIOSurface *)v145 setExternal_storage_blob_for_aliasing_mem:v206];
                          if (*(void *)v207) {
                            nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)v207);
                          }

                          if (v129) {
                            nitro::nitro_function::nitro_function((std::__shared_weak_count *)v129);
                          }

                          uint64_t v146 = *((void *)v186 + 27);
                          vDSP_Length v147 = *(void **)(v146 + 8 * v120);
                          *(void *)(v146 + 8 * v120) = v145;

                          if (v185 == ++v120) {
                            goto LABEL_184;
                          }
                        }
                        if (v119)
                        {
                          uint64_t v125 = *(void *)(v119 + 216);
                          if (v120 < (*(void *)(v119 + 224) - v125) >> 3)
                          {
                            uint64_t v126 = *(void **)(v125 + 8 * v120);
                            if (v126)
                            {
                              objc_msgSend(v126, "external_storage_blob_for_aliasing_mem");
                              uint64_t v127 = __p[0];
                              uint64_t v128 = (std::__shared_weak_count *)__p[1];
                            }
                            else
                            {
                              uint64_t v128 = 0;
                              uint64_t v127 = 0;
                            }
                            goto LABEL_159;
                          }
                          uint64_t v131 = Espresso::espresso_os_log_subsystem(v122, v123);
                          if (os_log_type_enabled(v131, OS_LOG_TYPE_ERROR))
                          {
                            LOWORD(__p[0]) = 0;
                            _os_log_error_impl(&dword_1920CB000, v131, OS_LOG_TYPE_ERROR, "Invalid aliasing state", (uint8_t *)__p, 2u);
                          }
                        }
                        uint64_t v127 = 0;
                        uint64_t v128 = 0;
LABEL_159:
                        uint64_t v132 = (Espresso *)getpagesize();
                        LODWORD(v134) = v132;
                        if (*MEMORY[0x1E4F14AE8] > (unint64_t)(int)v132) {
                          uint64_t v134 = *MEMORY[0x1E4F14AE8];
                        }
                        size_t v135 = (int)v134;
                        std::string::size_type v136 = v194.__r_.__value_.__l.__size_ * v194.__r_.__value_.__r.__words[2] % (int)v134;
                        std::string::size_type v137 = v194.__r_.__value_.__l.__size_ * v194.__r_.__value_.__r.__words[2] + (int)v134 - v136;
                        if (v136) {
                          std::string::size_type v138 = v137;
                        }
                        else {
                          std::string::size_type v138 = v194.__r_.__value_.__l.__size_ * v194.__r_.__value_.__r.__words[2];
                        }
                        if (v127)
                        {
                          uint64_t v129 = (char *)v128;
                        }
                        else
                        {
                          unint64_t v139 = Espresso::espresso_os_log_subsystem(v132, v133);
                          if (os_log_type_enabled(v139, OS_LOG_TYPE_DEBUG))
                          {
                            LODWORD(__p[0]) = 134217984;
                            *(void **)((char *)__p + 4) = (void *)v138;
                            _os_log_debug_impl(&dword_1920CB000, v139, OS_LOG_TYPE_DEBUG, "ANERuntimeEngine::allocate_io_surface creating blob size=%zu", (uint8_t *)__p, 0xCu);
                          }

                          __p[0] = 0;
                          if (malloc_type_posix_memalign(__p, v135, v138, 0x491C5C26uLL)) {
                            Espresso::throw_exception_selector<Espresso::memory_error,unsigned long &>(v138);
                          }
                          uint64_t v129 = (char *)operator new(0x58uLL);
                          *((void *)v129 + 1) = 0;
                          *((void *)v129 + 2) = 0;
                          *(void *)uint64_t v129 = &unk_1EE389A70;
                          uint64_t v127 = v129 + 24;
                          int v140 = __p[0];
                          *((void *)v129 + 3) = &unk_1EE36BF70;
                          *(_OWORD *)(v129 + 56) = 0u;
                          *(_OWORD *)(v129 + 72) = 0u;
                          *((_DWORD *)v129 + 8) = v138;
                          *((void *)v129 + 5) = v140;
                          v129[48] = 0;
                          if (v128) {
                            nitro::nitro_function::nitro_function(v128);
                          }
                          v129[48] = 1;
                        }
                        uint64_t v141 = v127[2];
                        uint64_t v210 = v181;
                        int v142 = [NSNumber numberWithUnsignedLong:v141];
                        __p[0] = v142;
                        uint64_t v211 = v179;
                        int v143 = [NSNumber numberWithUnsignedLong:v138];
                        __p[1] = v143;
                        int v130 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:__p forKeys:&v210 count:2];

                        goto LABEL_173;
                      }
LABEL_184:
                      if (v173) {
                        nitro::nitro_function::nitro_function(v173);
                      }

                      if (v197)
                      {
                        uint64_t v198 = (unsigned int *)v197;
                        operator delete(v197);
                      }
                      goto LABEL_188;
                    }
                    nitro::nitro_function::nitro_function(v118);
                  }
                }
                uint64_t v119 = 0;
                char v173 = 0;
                goto LABEL_147;
              }
            }
            BOOL v65 = [NSNumber numberWithUnsignedInt:v97];
            [v183 setObject:v65 forKeyedSubscript:*MEMORY[0x1E4F2F150]];
          }
LABEL_137:

          uint64_t v93 = v186;
          goto LABEL_138;
        }
        __int16 v52 = Espresso::espresso_os_log_subsystem(v101, v102);
        if (os_log_type_enabled(v52, OS_LOG_TYPE_DEBUG))
        {
          if (*(char *)(a2 + 23) >= 0) {
            std::string::size_type v163 = a2;
          }
          else {
            std::string::size_type v163 = *(void *)a2;
          }
          LODWORD(v194.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)v194.__r_.__value_.__r.__words + 4) = v163;
          _os_log_debug_impl(&dword_1920CB000, v52, OS_LOG_TYPE_DEBUG, "[Espresso::ANERuntimeEngine::blob_container] will attempt to bind this blob using IOSurface directly to ANE: %s.", (uint8_t *)&v194, 0xCu);
        }
        int v58 = 1;
        LOBYTE(v184) = 1;
      }

LABEL_66:
      unsigned int v59 = v186;
      goto LABEL_67;
    }
  }
}

void sub_192111CCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,uint64_t a45,void *__p,uint64_t a47)
{
  if (__p) {
    operator delete(__p);
  }
  Espresso_scoped_signpost::~Espresso_scoped_signpost((Espresso_scoped_signpost *)(v50 - 256));
  _Unwind_Resume(a1);
}

id Espresso::espresso_os_log_subsystem(Espresso *this, const char *a2)
{
  if (Espresso::espresso_os_log_subsystem(char const*)::onceToken != -1) {
    dispatch_once(&Espresso::espresso_os_log_subsystem(char const*)::onceToken, &__block_literal_global_52_6966);
  }
  uint64_t v2 = (void *)Espresso::espresso_os_log_subsystem(char const*)::log_t;

  return v2;
}

void Espresso::ANERuntimeEngine::blob_container::~blob_container(Espresso::ANERuntimeEngine::blob_container *this)
{
  *(void *)this = &unk_1EE3340D8;
  uint64_t v2 = (char *)*((void *)this + 32);
  std::string::size_type v3 = (char *)this + 264;
  if (v2 != (char *)this + 264)
  {
    do
    {
      free(*((void **)v2 + 7));
      long long v4 = (char *)*((void *)v2 + 1);
      if (v4)
      {
        do
        {
          uint64_t v5 = v4;
          long long v4 = *(char **)v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          uint64_t v5 = (char *)*((void *)v2 + 2);
          BOOL v6 = *(void *)v5 == (void)v2;
          uint64_t v2 = v5;
        }
        while (!v6);
      }
      uint64_t v2 = v5;
    }
    while (v5 != v3);
  }
  std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::destroy(*((char **)this + 33));
  *((void *)this + 33) = 0;
  *((void *)this + 34) = 0;
  *((void *)this + 32) = v3;
  Espresso::ANERuntimeEngine::blob_container::cleanup_all_io_surfaces(this);
  int v7 = (void *)*((void *)this + 35);
  if (v7)
  {
    *((void *)this + 36) = v7;
    operator delete(v7);
  }
  std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::destroy(*((char **)this + 33));
  int v8 = (std::__shared_weak_count *)*((void *)this + 31);
  if (v8) {
    std::__shared_weak_count::__release_weak(v8);
  }
  uint64_t v9 = *((void *)this + 27);
  if (v9)
  {
    uint64_t v10 = *((void *)this + 28);
    int v11 = (void *)*((void *)this + 27);
    if (v10 != v9)
    {
      do
      {
        int v12 = *(void **)(v10 - 8);
        v10 -= 8;
      }
      while (v10 != v9);
      int v11 = (void *)*((void *)this + 27);
    }
    *((void *)this + 28) = v9;
    operator delete(v11);
  }

  Espresso::abstract_blob_container::~abstract_blob_container(this);
}

{
  uint64_t vars8;

  Espresso::ANERuntimeEngine::blob_container::~blob_container(this);

  JUMPOUT(0x192FF16B0);
}

void std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::destroy(*(void *)a1);
    std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::destroy(*((void *)a1 + 1));
    if (a1[55] < 0) {
      operator delete(*((void **)a1 + 4));
    }
    operator delete(a1);
  }
}

void Espresso::ANERuntimeEngine::blob_container::cleanup_all_io_surfaces(Espresso::ANERuntimeEngine::blob_container *this)
{
  uint64_t v2 = (id *)*((void *)this + 27);
  std::string::size_type v3 = (id *)*((void *)this + 28);
  if (v2 != v3)
  {
    do
    {
      id v4 = *v2;
      [v4 cleanup];

      ++v2;
    }
    while (v2 != v3);
    uint64_t v5 = (id *)*((void *)this + 27);
    uint64_t v2 = (id *)*((void *)this + 28);
    if (v2 != v5)
    {
      do
      {
        BOOL v6 = *--v2;
      }
      while (v2 != v5);
      uint64_t v2 = v5;
    }
  }
  *((void *)this + 28) = v2;
}

void sub_192112204(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void Espresso_scoped_signpost::~Espresso_scoped_signpost(Espresso_scoped_signpost *this)
{
  if (*((_DWORD *)this + 1))
  {
    if (*(unsigned char *)this) {
      kdebug_trace();
    }
  }
}

void Espresso::SerDes::serdes_object_json_objc::set_string(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  if (*((char *)a3 + 23) < 0) {
    a3 = (uint64_t *)*a3;
  }
  id v7 = [NSString stringWithUTF8String:a3];
  if (*((char *)a2 + 23) >= 0) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = (uint64_t *)*a2;
  }
  BOOL v6 = [NSString stringWithUTF8String:v5];
  [*(id *)(a1 + 24) setObject:v7 forKeyedSubscript:v6];
}

void sub_1921122F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void Espresso::SerDes::serdes_object_json_objc::set_int(uint64_t a1, uint64_t *a2, int *a3)
{
  id v7 = [NSNumber numberWithInteger:*a3];
  if (*((char *)a2 + 23) >= 0) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = (uint64_t *)*a2;
  }
  BOOL v6 = [NSString stringWithUTF8String:v5];
  [*(id *)(a1 + 24) setObject:v7 forKeyedSubscript:v6];
}

void sub_1921123A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,Espresso::layer_shape>,std::__tree_node<std::__value_type<std::string,Espresso::layer_shape>,void *> *,long>>(uint64_t **result, long long *a2, long long *a3)
{
  uint64_t v5 = result;
  if (result[2])
  {
    BOOL v6 = *result;
    int v8 = result + 1;
    id v7 = result[1];
    char *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1]) {
      uint64_t v9 = (uint64_t *)v6[1];
    }
    else {
      uint64_t v9 = v6;
    }
    uint64_t v18 = result;
    int v19 = v9;
    uint64_t v20 = v9;
    if (v9)
    {
      int v19 = std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::_DetachedTreeCache::__detach_next((uint64_t)v9);
      if (a2 != a3)
      {
        uint64_t v10 = a2;
        do
        {
          v21[0] = v9 + 4;
          v21[1] = v9 + 7;
          std::pair<std::string &,Espresso::layer_shape &>::operator=[abi:ne180100]<std::string const,Espresso::layer_shape,(void *)0>((uint64_t)v21, (uint64_t)(v10 + 2));
          int v11 = *v8;
          int v12 = v5 + 1;
          int v13 = v5 + 1;
          if (*v8)
          {
            do
            {
              while (1)
              {
                int v12 = (uint64_t **)v11;
                if (!std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v20 + 4, v11 + 4)) {
                  break;
                }
                int v11 = *v12;
                int v13 = v12;
                if (!*v12) {
                  goto LABEL_14;
                }
              }
              int v11 = v12[1];
            }
            while (v11);
            int v13 = v12 + 1;
          }
LABEL_14:
          std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at(v5, (uint64_t)v12, v13, v20);
          uint64_t v20 = v19;
          if (v19) {
            int v19 = std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::_DetachedTreeCache::__detach_next((uint64_t)v19);
          }
          unsigned int v14 = (long long *)*((void *)v10 + 1);
          if (v14)
          {
            do
            {
              a2 = v14;
              unsigned int v14 = *(long long **)v14;
            }
            while (v14);
          }
          else
          {
            do
            {
              a2 = (long long *)*((void *)v10 + 2);
              BOOL v15 = *(void *)a2 == (void)v10;
              uint64_t v10 = a2;
            }
            while (!v15);
          }
          uint64_t v9 = v20;
          if (v20) {
            BOOL v15 = a2 == a3;
          }
          else {
            BOOL v15 = 1;
          }
          uint64_t v10 = a2;
        }
        while (!v15);
      }
    }
    uint64_t result = (uint64_t **)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v18);
  }
  if (a2 != a3)
  {
    do
    {
      uint64_t result = (uint64_t **)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_multi<std::pair<std::string const,Espresso::layer_shape> const&>((uint64_t)v5, a2 + 2);
      unsigned int v16 = (long long *)*((void *)a2 + 1);
      if (v16)
      {
        do
        {
          int v17 = v16;
          unsigned int v16 = *(long long **)v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          int v17 = (long long *)*((void *)a2 + 2);
          BOOL v15 = *(void *)v17 == (void)a2;
          a2 = v17;
        }
        while (!v15);
      }
      a2 = v17;
    }
    while (v17 != a3);
  }
  return result;
}

void sub_19211257C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_multi<std::pair<std::string const,Espresso::layer_shape> const&>(uint64_t a1, long long *a2)
{
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__construct_node<std::pair<std::string const,Espresso::layer_shape> const&>((uint64_t)v8, a1, a2);
  std::string::size_type v3 = (uint64_t *)v8[0];
  uint64_t v5 = (uint64_t **)(a1 + 8);
  id v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        uint64_t v5 = (uint64_t **)v4;
        if (!std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3 + 4, v4 + 4)) {
          break;
        }
        id v4 = *v5;
        BOOL v6 = v5;
        if (!*v5) {
          goto LABEL_8;
        }
      }
      id v4 = v5[1];
    }
    while (v4);
    BOOL v6 = v5 + 1;
  }
  else
  {
    BOOL v6 = (uint64_t **)(a1 + 8);
  }
LABEL_8:
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v5, v6, v3);
  v8[0] = 0;
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,Espresso::layer_shape>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,Espresso::layer_shape>,void *>>>>::reset[abi:ne180100]((uint64_t)v8);
  return v3;
}

char *std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void *a2, long long **a3)
{
  uint64_t v5 = (void **)std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  BOOL v6 = (char *)*v5;
  if (!*v5)
  {
    id v7 = (uint64_t **)v5;
    BOOL v6 = (char *)operator new(0x78uLL);
    v9[0] = v6;
    v9[1] = a1 + 1;
    char v10 = 0;
    std::pair<std::string const,Espresso::layer_shape>::pair[abi:ne180100]<std::string const&>((std::string *)(v6 + 32), *a3);
    char v10 = 1;
    std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at(a1, v11, v7, (uint64_t *)v6);
    v9[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,Espresso::layer_shape>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,Espresso::layer_shape>,void *>>>>::reset[abi:ne180100]((uint64_t)v9);
  }
  return v6;
}

void sub_1921126EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,Espresso::layer_shape>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,Espresso::layer_shape>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,Espresso::layer_shape>,0>((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

std::string *std::pair<std::string const,Espresso::layer_shape>::pair[abi:ne180100]<std::string const&>(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v3 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
  this[3].__r_.__value_.__l.__size_ = 0;
  *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&this[2].__r_.__value_.__r.__words[2] = 0u;
  *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = xmmword_192DC3600;
  this[1].__r_.__value_.__r.__words[2] = 0xFFFFFFFF00000001;
  return this;
}

std::string *std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__construct_node<std::pair<std::string const,Espresso::layer_shape> const&>(uint64_t a1, uint64_t a2, long long *a3)
{
  uint64_t v5 = a2 + 8;
  BOOL v6 = (char *)operator new(0x78uLL);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = 0;
  uint64_t result = std::pair<std::string const,Espresso::layer_shape>::pair[abi:ne180100]((std::string *)(v6 + 32), a3);
  *(unsigned char *)(a1 + 16) = 1;
  return result;
}

void sub_192112820(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,Espresso::layer_shape>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,Espresso::layer_shape>,void *>>>>::reset[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,Espresso::layer_shape>::pair[abi:ne180100](std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  long long v5 = *(long long *)((char *)a2 + 24);
  long long v6 = *(long long *)((char *)a2 + 40);
  std::string::size_type v7 = *((void *)a2 + 7);
  this[2].__r_.__value_.__r.__words[2] = 0;
  this[2].__r_.__value_.__l.__size_ = v7;
  *(_OWORD *)&this[1].__r_.__value_.__r.__words[2] = v6;
  *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  this[3].__r_.__value_.__r.__words[0] = 0;
  this[3].__r_.__value_.__l.__size_ = 0;
  uint64_t v9 = (unsigned char *)*((void *)a2 + 8);
  int v8 = (unsigned char *)*((void *)a2 + 9);
  int64_t v10 = v8 - v9;
  if (v8 != v9)
  {
    if (v10 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = operator new(v8 - v9);
    this[2].__r_.__value_.__r.__words[2] = (std::string::size_type)v11;
    this[3].__r_.__value_.__r.__words[0] = (std::string::size_type)v11;
    std::string::size_type v12 = (std::string::size_type)v11 + 4 * (v10 >> 2);
    this[3].__r_.__value_.__l.__size_ = v12;
    memcpy(v11, v9, v10);
    this[3].__r_.__value_.__r.__words[0] = v12;
  }
  return this;
}

void sub_1921128F4(_Unwind_Exception *a1)
{
  long long v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 72) = v4;
    operator delete(v4);
  }
  std::pair<std::string const,Espresso::layer_shape>::pair[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void *std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::_DetachedTreeCache::__detach_next(uint64_t a1)
{
  uint64_t result = *(void **)(a1 + 16);
  if (result)
  {
    long long v3 = (void *)*result;
    if (*result == a1)
    {
      void *result = 0;
      while (1)
      {
        long long v4 = (void *)result[1];
        if (!v4) {
          break;
        }
        do
        {
          uint64_t result = v4;
          long long v4 = (void *)*v4;
        }
        while (v4);
      }
    }
    else
    {
      for (result[1] = 0; v3; long long v3 = (void *)result[1])
      {
        do
        {
          uint64_t result = v3;
          long long v3 = (void *)*v3;
        }
        while (v3);
      }
    }
  }
  return result;
}

uint64_t std::pair<std::string &,Espresso::layer_shape &>::operator=[abi:ne180100]<std::string const,Espresso::layer_shape,(void *)0>(uint64_t a1, uint64_t a2)
{
  std::string::operator=(*(std::string **)a1, (const std::string *)a2);
  uint64_t v4 = *(void *)(a1 + 8);
  long long v5 = *(_OWORD *)(a2 + 40);
  long long v6 = *(_OWORD *)(a2 + 24);
  *(void *)(v4 + 32) = *(void *)(a2 + 56);
  *(_OWORD *)uint64_t v4 = v6;
  *(_OWORD *)(v4 + 16) = v5;
  if (v4 != a2 + 24) {
    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)(v4 + 40), *(char **)(a2 + 64), *(void *)(a2 + 72), (uint64_t)(*(void *)(a2 + 72) - *(void *)(a2 + 64)) >> 2);
  }
  return a1;
}

void sub_192112A8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_192112C18(_Unwind_Exception *a1)
{
  __cxa_free_exception(v3);

  _Unwind_Resume(a1);
}

uint64_t Espresso::SerDes::serdes_object_json_objc::get_uint(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = Espresso::SerDes::fast_dict_lookup(*(void **)(a1 + 24), a2);
  long long v3 = v2;
  if (!v2)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::string::size_type v7 = std::string::append(&v9, "\" not found");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v10.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v10.__r_.__value_.__l.__data_ = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    std::logic_error::logic_error(exception, &v10);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
    __cxa_throw(exception, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
  }
  uint64_t v4 = [v2 unsignedIntValue];

  return v4;
}

void sub_192112D48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v23 & 1) == 0)
    {
LABEL_8:

      _Unwind_Resume(a1);
    }
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

void std::vector<Espresso::base_kernel::validate_for_engine_warning_t>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    long long v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 112;
        std::allocator<Espresso::base_kernel::validate_for_engine_warning_t>::destroy[abi:ne180100](v4);
      }
      while ((void *)v4 != v2);
      long long v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__split_buffer<Espresso::base_kernel::validate_for_engine_warning_t>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 112;
    std::allocator<Espresso::base_kernel::validate_for_engine_warning_t>::destroy[abi:ne180100](i - 112);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::allocator<Espresso::base_kernel::validate_for_engine_warning_t>::destroy[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = (void **)(a1 + 24);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 80);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  long long v5 = (void **)(a1 + 48);
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v5);
  long long v5 = v2;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v5);
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v4 = *(void **)a1;
    operator delete(v4);
  }
}

uint64_t std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy(*(void *)a1, *(char **)(a1 + 16));
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 16);
    if (v3)
    {
      do
      {
        uint64_t v2 = v3;
        uint64_t v3 = *(void *)(v3 + 16);
      }
      while (v3);
      *(void *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy(*(void *)a1, (char *)v2);
  }
  return a1;
}

void Espresso::cpu_context_transfer_algo_t::compute_local_costs_v3(uint64_t *a1, uint64_t a2, uint64_t **a3, void *a4, uint64_t a5, void *a6)
{
  uint64_t v228 = *MEMORY[0x1E4F143B8];
  uint64_t v212 = (*a3)[1];
  uint64_t v210 = **a3;
  uint64_t v7 = *a1;
  uint64_t v6 = a1[1];
  uint64_t v223 = 0;
  double v224 = 0;
  unint64_t v225 = 0;
  uint64_t v190 = v6;
  uint64_t v186 = v7;
  uint64_t v8 = v6 - v7;
  if (v6 != v7)
  {
    std::string v9 = 0;
    unint64_t v10 = 0;
    uint64_t v11 = 0;
    uint64_t v12 = v7;
    do
    {
      int v13 = (***(uint64_t (****)(void))(*(void *)v12 + 8))(*(void *)(*(void *)v12 + 8));
      int v14 = v13;
      if ((unint64_t)v11 >= v10)
      {
        uint64_t v16 = (v11 - v9) >> 2;
        unint64_t v17 = v16 + 1;
        if ((unint64_t)(v16 + 1) >> 62) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        if ((uint64_t)(v10 - (void)v9) >> 1 > v17) {
          unint64_t v17 = (uint64_t)(v10 - (void)v9) >> 1;
        }
        if (v10 - (unint64_t)v9 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v18 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v18 = v17;
        }
        if (v18) {
          unint64_t v18 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v18);
        }
        else {
          uint64_t v19 = 0;
        }
        uint64_t v20 = (_DWORD *)(v18 + 4 * v16);
        *uint64_t v20 = v14;
        BOOL v15 = (char *)(v20 + 1);
        while (v11 != v9)
        {
          int v21 = *((_DWORD *)v11 - 1);
          v11 -= 4;
          *--uint64_t v20 = v21;
        }
        unint64_t v10 = v18 + 4 * v19;
        uint64_t v223 = v20;
        unint64_t v225 = v10;
        if (v9) {
          operator delete(v9);
        }
        std::string v9 = (char *)v20;
      }
      else
      {
        *(_DWORD *)uint64_t v11 = v13;
        BOOL v15 = v11 + 4;
      }
      double v224 = v15;
      v12 += 16;
      uint64_t v11 = v15;
    }
    while (v12 != v190);
  }
  uint64_t v22 = 0x6DB6DB6DB6DB6DB7 * ((v212 - v210) >> 5);
  unint64_t v189 = v8 >> 4;
  __p[0] = 0;
  std::vector<double>::vector(buf, ((0x100000000 - 0x4924924900000000 * ((v212 - v210) >> 5)) >> 32) * (v8 >> 4), __p);
  int v23 = *(void **)a5;
  if (*(void *)a5)
  {
    *(void *)(a5 + 8) = v23;
    operator delete(v23);
    *(void *)a5 = 0;
    *(void *)(a5 + 8) = 0;
    *(void *)(a5 + 16) = 0;
  }
  *(_OWORD *)a5 = *(_OWORD *)buf;
  *(void *)(a5 + 16) = *(void *)&buf[16];
  LOBYTE(__p[0]) = 1;
  std::vector<BOOL>::vector(buf, ((0x100000000 - 0x4924924900000000 * ((v212 - v210) >> 5)) >> 32) * (v8 >> 4), (unsigned __int8 *)__p);
  uint64_t v24 = a6;
  if (*a6)
  {
    operator delete((void *)*a6);
    *a6 = 0;
    a6[1] = 0;
    a6[2] = 0;
  }
  *a6 = *(void *)buf;
  *(_OWORD *)(a6 + 1) = *(_OWORD *)&buf[8];
  uint64_t v25 = *a3;
  *(void *)std::string buf = 0;
  *(void *)&uint8_t buf[8] = 0;
  int v26 = (std::__shared_weak_count *)v25[10];
  if (v26)
  {
    uint64_t v27 = std::__shared_weak_count::lock(v26);
    *(void *)&uint8_t buf[8] = v27;
    if (v27) {
      *(void *)std::string buf = v25[9];
    }
  }
  else
  {
    uint64_t v27 = 0;
  }
  uint64_t PlatformHeuristics = GetPlatformHeuristics((Espresso::net **)buf);
  if (v27) {
    nitro::nitro_function::nitro_function(v27);
  }
  if (!PlatformHeuristics) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Unexpected nullptr.");
  }
  int v205 = (*(uint64_t (**)(uint64_t))(*(void *)PlatformHeuristics + 184))(PlatformHeuristics);
  if (v22 << 32)
  {
    uint64_t v199 = 0;
    uint64_t v204 = 0;
    char v194 = 0;
    uint64_t v28 = 0;
    int v184 = 0;
    uint64_t v185 = 0;
    if (v189 <= 1) {
      uint64_t v29 = 1;
    }
    else {
      uint64_t v29 = v8 >> 4;
    }
    uint64_t v201 = v29;
    if ((unint64_t)(int)v22 <= 1) {
      uint64_t v30 = 1;
    }
    else {
      uint64_t v30 = (int)v22;
    }
    uint64_t v187 = v30;
    while (1)
    {
      uint64_t v31 = **a3;
      uint64_t v207 = v28;
      long long v32 = *(_OWORD *)(*a4 + 16 * v28);
      uint64_t v33 = *(std::__shared_weak_count **)(*a4 + 16 * v28 + 8);
      if (v33) {
        atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v191 = v33;
      uint64_t v34 = v31 + 224 * v28;
      unsigned int v35 = *(const void **)(v34 + 88);
      int v36 = *(std::__shared_weak_count **)(v34 + 96);
      if (v36) {
        atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (!v35)
      {
        uint64_t v37 = v31 + 224 * v28;
        unsigned int v35 = *(const void **)(v37 + 208);
        int v38 = *(std::__shared_weak_count **)(v37 + 216);
        if (v38) {
          atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (v36)
        {
          long long v213 = v32;
          nitro::nitro_function::nitro_function(v36);
          long long v32 = v213;
        }
        if (v35)
        {
          int v36 = v38;
        }
        else
        {
          if (!v185)
          {
            long long v214 = v32;
            LODWORD(__p[0]) = 0;
            Espresso::create_context((int *)__p, buf);
            int v39 = *(std::__shared_weak_count **)&buf[8];
            uint64_t v185 = *(void *)buf;
            *(void *)std::string buf = 0;
            *(void *)&uint8_t buf[8] = 0;
            if (v184)
            {
              nitro::nitro_function::nitro_function(v184);
              if (*(void *)&buf[8]) {
                nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&buf[8]);
              }
            }
            int v184 = v39;
            long long v32 = v214;
          }
          long long v222 = v32;
          if (v191) {
            atomic_fetch_add_explicit(&v191->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v220 = v185;
          int v221 = v184;
          if (v184) {
            atomic_fetch_add_explicit(&v184->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          Espresso::create_kernel_for_engine(buf, v31 + 224 * v207, (uint64_t *)&v222, &v220, 0);
          unsigned int v35 = *(const void **)buf;
          int v36 = *(std::__shared_weak_count **)&buf[8];
          *(void *)std::string buf = 0;
          *(void *)&uint8_t buf[8] = 0;
          if (v38)
          {
            nitro::nitro_function::nitro_function(v38);
            if (*(void *)&buf[8]) {
              nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&buf[8]);
            }
          }
          if (v221) {
            nitro::nitro_function::nitro_function(v221);
          }
          uint64_t v41 = (Espresso *)*((void *)&v222 + 1);
          if (*((void *)&v222 + 1)) {
            nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v222 + 1));
          }
          if (!v35)
          {
            uint64_t v181 = Espresso::espresso_os_log_subsystem(v41, v40);
            if (os_log_type_enabled(v181, OS_LOG_TYPE_ERROR))
            {
              uint64_t v182 = v31 + 224 * v207;
              uint64_t v183 = (void *)(v182 + 48);
              if (*(char *)(v182 + 71) < 0) {
                uint64_t v183 = (void *)*v183;
              }
              *(_DWORD *)std::string buf = 134218242;
              *(void *)&uint8_t buf[4] = v207;
              *(_WORD *)&unsigned char buf[12] = 2080;
              *(void *)&buf[14] = v183;
              _os_log_error_impl(&dword_1920CB000, v181, OS_LOG_TYPE_ERROR, "Cannot find any kernel for layer %zu (%s)\n", buf, 0x16u);
            }

            goto LABEL_359;
          }
        }
      }
      if (v186 != v190)
      {
        uint64_t v215 = 0;
        uint64_t v42 = 0;
        uint64_t v43 = (void *)(v31 + 224 * v207);
        unint64_t v206 = v43 + 23;
        uint64_t v202 = v43 + 24;
        uint64_t v200 = (int **)(v43 + 20);
        unint64_t v193 = v35;
        uint64_t v197 = (unsigned __int8 *)v43 + 105;
        uint64_t v198 = (int **)(v43 + 21);
        uint64_t v196 = (unsigned __int8 *)v43 + 106;
        while (1)
        {
          unsigned int v44 = v223;
          float engine_gflops_per_s = get_engine_gflops_per_s(v223[v42], PlatformHeuristics, 0);
          int v46 = v44[v42];
          *(_DWORD *)std::string buf = v46;
          if ((v46 - 10006) < 4 || v46 == 10011) {
            break;
          }
          if (is_gpu((int *)buf))
          {
            uint64_t v48 = (*(uint64_t (**)(uint64_t))(*(void *)PlatformHeuristics + 64))(PlatformHeuristics);
            uint64_t v50 = (float (**)(uint64_t, uint64_t))(*(void *)v48 + 32);
            uint64_t v49 = 2;
            goto LABEL_77;
          }
          if (is_cpu((int *)buf))
          {
            uint64_t v48 = (*(uint64_t (**)(uint64_t))(*(void *)PlatformHeuristics + 56))(PlatformHeuristics);
            uint64_t v49 = (*(uint64_t (**)(uint64_t))(*(void *)v48 + 80))(v48);
            goto LABEL_76;
          }
          if ((v46 & 0xFFFFFFFD) == 5)
          {
            float v51 = 40.0;
          }
          else
          {
            float v51 = 15.0;
            if (v46 == 100000)
            {
              uint64_t v133 = (*(uint64_t (**)(uint64_t))(*(void *)PlatformHeuristics + 56))(PlatformHeuristics);
              uint64_t v134 = (*(uint64_t (**)(uint64_t))(*(void *)v133 + 80))(v133);
              float v51 = (*(float (**)(uint64_t, uint64_t))(*(void *)v133 + 56))(v133, v134) * 1.5;
            }
          }
LABEL_78:
          float v52 = 0.0;
          if (*v206 == *v202)
          {
            float v60 = 0.0;
            float v58 = 0.0;
            float v56 = 0.0;
          }
          else
          {
            __int16 v54 = 0;
            if (v53 && v36)
            {
              atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
              __int16 v54 = v36;
            }
            char v55 = v205 ^ 1;
            if (!v53) {
              char v55 = 1;
            }
            if ((v55 & 1) == 0) {
              v53[456] = 1;
            }
            float v56 = (*(float (**)(const void *, void *, uint64_t))(*(void *)v35 + 128))(v35, v206, 1);
            float v58 = v57;
            float v60 = v59;
            float v52 = v61;
            if (v54) {
              nitro::nitro_function::nitro_function(v54);
            }
          }
          uint64_t v62 = v223;
          if (is_gpu(&v223[v215]))
          {
            uint64_t v64 = 0;
            if (v63 && v36)
            {
              atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
              uint64_t v64 = v36;
            }
            BOOL v65 = 0;
            {
              atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
              BOOL v65 = v36;
            }
            if (v63)
            {
              if (*(__int16 *)((*(uint64_t (**)(void *))(*(void *)v63 + 384))(v63) + 92) > 4
                || *(__int16 *)((*(uint64_t (**)(void *))(*(void *)v63 + 384))(v63) + 94) >= 5)
              {
                int v66 = *(__int16 *)((*(uint64_t (**)(void *))(*(void *)v63 + 384))(v63) + 92);
                int v67 = *(__int16 *)((*(uint64_t (**)(void *))(*(void *)v63 + 384))(v63) + 94) * v66;
                if (v67 <= 1) {
                  int v67 = 1;
                }
                float v56 = v56 * (float)v67;
              }
              if (v205)
              {
                if ((v62[v42] - 50005) < 2) {
                  float v56 = v56 * 100.0;
                }
                goto LABEL_105;
              }
              float32x4_t v69 = 0;
              {
                atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
                float32x4_t v69 = v36;
              }
              {
                atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
                unsigned int v71 = v36;
                goto LABEL_128;
              }
            }
            else
            {
LABEL_105:
              float32x4_t v69 = 0;
              if (v68 && v36)
              {
                atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
                float32x4_t v69 = v36;
              }
              unsigned int v71 = 0;
              if (v70 && v36)
              {
                atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
                unsigned int v71 = v36;
              }
              if (v205 && (v62[v42] - 50005) <= 1)
              {
                float v72 = v60 * 100.0;
                if (v68 | v70) {
                  float v56 = v56 * 100.0;
                }
                else {
                  float v72 = v60;
                }
                if (v72 < 1887400.0) {
                  float v56 = v56 + v56;
                }
              }
              if (v71) {
LABEL_128:
              }
                nitro::nitro_function::nitro_function(v71);
            }
            if (v69) {
              nitro::nitro_function::nitro_function(v69);
            }
            if (v65) {
              nitro::nitro_function::nitro_function(v65);
            }
            if (v64) {
              nitro::nitro_function::nitro_function(v64);
            }
          }
          uint64_t v74 = *a3;
          uint64_t v75 = (std::__shared_weak_count *)(*a3)[10];
          if (v75 && (__int16 v208 = std::__shared_weak_count::lock(v75)) != 0)
          {
            uint64_t v76 = v74[9];
          }
          else
          {
            uint64_t v76 = 0;
            __int16 v208 = 0;
          }
          {
            if (v36)
            {
              atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
              BOOL v77 = v223;
              int v78 = is_cpu(&v223[v215]);
              nitro::nitro_function::nitro_function(v36);
              if (!v78) {
                goto LABEL_152;
              }
            }
            else
            {
              BOOL v77 = v223;
              if ((is_cpu(&v223[v215]) & 1) == 0) {
                goto LABEL_152;
              }
            }
            float engine_gflops_per_s = get_engine_gflops_per_s(v77[v42], PlatformHeuristics, 1);
            int8x16_t v79 = &v77[v215];
            if (!v36)
            {
              if ((is_cpu(v79) & 1) == 0) {
                goto LABEL_152;
              }
LABEL_151:
              float engine_gflops_per_s = get_engine_gflops_per_s(v77[v42], PlatformHeuristics, 0);
              goto LABEL_152;
            }
            atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
            int v80 = is_cpu(v79);
            nitro::nitro_function::nitro_function(v36);
            if (v80) {
              goto LABEL_151;
            }
          }
LABEL_152:
          {
            if (v36)
            {
              atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
              uint64_t v81 = v223;
              int v82 = is_cpu(&v223[v215]);
              nitro::nitro_function::nitro_function(v36);
              if (!v82) {
                goto LABEL_159;
              }
LABEL_158:
              float engine_gflops_per_s = get_engine_gflops_per_s(v81[v42], PlatformHeuristics, 1);
              goto LABEL_159;
            }
            uint64_t v81 = v223;
            if (is_cpu(&v223[v215])) {
              goto LABEL_158;
            }
          }
          else
          {
            uint64_t v81 = v223;
          }
LABEL_159:
          double v83 = engine_gflops_per_s;
          unsigned int v84 = v81[v42] - 10006;
          if (v84 <= 5 && ((0x2Fu >> v84) & 1) != 0)
          {
            uint64_t v85 = (*(uint64_t (**)(uint64_t))(*(void *)PlatformHeuristics + 72))(PlatformHeuristics);
            {
              if (v36)
              {
                atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
                nitro::nitro_function::nitro_function(v36);
              }
              if (*v198 != *v200)
              {
                unint64_t v86 = (*v200)[2];
                if ((*(uint64_t (**)(uint64_t))(*(void *)v85 + 104))(v85) > v86)
                {
                  uint64_t v87 = *v200;
                  int v88 = (*v200)[5];
                  if (v88 == -1 || v88 >= 4)
                  {
                    double v83 = v83
                        / (float)((*(uint64_t (**)(uint64_t))(*(void *)v85 + 104))(v85)
                                / (unint64_t)*(int *)(*(void *)(**a3 + 224 * v207 + 160) + 8));
                    uint64_t v87 = *v200;
                  }
                  int v90 = *v87;
                  int v89 = v87[1];
                  uint64_t v91 = (*(uint64_t (**)(uint64_t))(*(void *)PlatformHeuristics + 72))(PlatformHeuristics);
                  unint64_t v92 = v90 * (uint64_t)v89;
                  if ((*(uint64_t (**)(uint64_t))(*(void *)v91 + 112))(v91) > v92)
                  {
                    {
                      if (v36)
                      {
                        atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
                        nitro::nitro_function::nitro_function(v36);
                      }
                    }
                    else
                    {
                      unint64_t v93 = (*(uint64_t (**)(uint64_t))(*(void *)v85 + 112))(v85);
                      double v83 = v83
                          / fmin((float)(v93 / v92), (*(double (**)(uint64_t))(*(void *)PlatformHeuristics + 112))(PlatformHeuristics));
                    }
                  }
                }
              }
            }
            else
            {
              double v83 = (*(double (**)(uint64_t))(*(void *)PlatformHeuristics + 88))(PlatformHeuristics) * v83;
            }
          }
          double v94 = v51;
          float v95 = (float)(v52 + (float)(v60 + v58)) * 0.00097656;
          double v96 = v95;
          uint64_t v97 = (Espresso *)is_cpu(&v81[v215]);
          if (v97)
          {
            if (v97)
            {
              if (v36)
              {
                atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
                nitro::nitro_function::nitro_function(v36);
              }
              int v100 = 0;
              uint64_t v101 = v42;
              if (v99 && v36)
              {
                atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
                int v100 = v36;
              }
              unint64_t v102 = v36;
              uint64_t v103 = v76;
              uint64_t v97 = (Espresso *)(*(uint64_t (**)(void *))(*(void *)v99 + 384))(v99);
              int v105 = *(_DWORD *)v97;
              int v104 = *((_DWORD *)v97 + 1);
              int v106 = *((_DWORD *)v97 + 2);
              int v107 = *((_DWORD *)v97 + 4);
              int v108 = *((_DWORD *)v97 + 5);
              int v109 = *((_DWORD *)v97 + 14);
              if (v100) {
                nitro::nitro_function::nitro_function(v100);
              }
              if (v109)
              {
                char v110 = 1;
              }
              else
              {
                BOOL v111 = v104 == v107 && v106 == v108;
                char v110 = v111;
              }
              uint64_t v24 = a6;
              uint64_t v76 = v103;
              int v36 = v102;
              uint64_t v42 = v101;
              unsigned int v35 = v193;
              if (!v105)
              {
                if (v104 < 3 && v106 < 3) {
                  char v110 = 1;
                }
                if ((v110 & 1) == 0)
                {
                  *(double *)(*(void *)a5 + v204 + 8 * v42) = (v96 / v94 * (v96 / (v96 + v56))
                                                               + v56 / (v96 + v56) * (v56 / v83))
                                                              * 1000.0
                                                              * (*(double (**)(uint64_t))(*(void *)PlatformHeuristics
                                                                                                  + 120))(PlatformHeuristics);
                  goto LABEL_350;
                }
              }
            }
          }
          if (v56 == 0.0 || v95 == 0.0)
          {
            __int16 v117 = Espresso::espresso_os_log_subsystem(v97, v98);
            if (os_log_type_enabled(v117, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v131 = **a3 + 224 * v207;
              uint64_t v132 = (void *)(v131 + 48);
              if (*(char *)(v131 + 71) < 0) {
                uint64_t v132 = (void *)*v132;
              }
              *(_DWORD *)std::string buf = 136315138;
              *(void *)&uint8_t buf[4] = v132;
              _os_log_debug_impl(&dword_1920CB000, v117, OS_LOG_TYPE_DEBUG, "Missing estimated cost for %s\n", buf, 0xCu);
            }

            *(void *)(*(void *)a5 + v204 + 8 * v42) = 0;
            int v118 = v197;
            if (v42) {
              int v118 = v196;
            }
            int v119 = *v118;
            unint64_t v120 = *a3;
            id v121 = (std::__shared_weak_count *)a3[1];
            if (v121) {
              atomic_fetch_add_explicit(&v121->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            long long v122 = *(_OWORD *)(*a1 + 16 * v42);
            long long v219 = v122;
            if (*((void *)&v122 + 1)) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v122 + 1) + 8), 1uLL, memory_order_relaxed);
            }
            int v123 = Espresso::also_check_not_blacklisted(v207, v119 != 0, *v120, (const void **)&v219);
            uint64_t v124 = *v24;
            unint64_t v125 = (unint64_t)(v199 + v42) >> 6;
            uint64_t v126 = 1 << (v199 + v42);
            if (v123) {
              uint64_t v127 = *(void *)(v124 + 8 * v125) | v126;
            }
            else {
              uint64_t v127 = *(void *)(v124 + 8 * v125) & ~v126;
            }
            *(void *)(v124 + 8 * v125) = v127;
            if (*((void *)&v219 + 1)) {
              nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v219 + 1));
            }
            if (v121) {
              nitro::nitro_function::nitro_function(v121);
            }
            goto LABEL_350;
          }
          if (v207)
          {
            uint64_t v113 = **a3;
            uint64_t v114 = v113 + 224 * (v207 - 1);
            __int16 v115 = (void *)(v114 + 48);
            int v116 = *(char *)(v114 + 71);
            if (v116 < 0)
            {
              if (v115[1] != 8) {
                goto LABEL_246;
              }
              __int16 v115 = (void *)*v115;
LABEL_226:
              if (*v115 != 0x686372615F6E6E72) {
                goto LABEL_246;
              }
              uint64_t v128 = v113 + 224 * v207;
              uint64_t v129 = (uint64_t **)(v128 + 48);
              int v130 = *(char *)(v128 + 71);
              if (v130 < 0)
              {
                if (v129[1] != (uint64_t *)5) {
                  goto LABEL_244;
                }
                uint64_t v129 = (uint64_t **)*v129;
              }
              else if (v130 != 5)
              {
LABEL_244:
                BOOL v138 = 0;
LABEL_245:
                v194 |= v138;
                goto LABEL_246;
              }
              int v135 = *(_DWORD *)v129;
              int v136 = *((unsigned __int8 *)v129 + 4);
              BOOL v138 = v135 == 1768714355 && v136 == 116;
              goto LABEL_245;
            }
            if (v116 == 8) {
              goto LABEL_226;
            }
          }
LABEL_246:
          unsigned int v139 = v223[v42] - 10006;
          unsigned int v140 = (0x2Fu >> (LOBYTE(v223[v42]) - 22)) & 1;
          if (v139 > 5 || !v140 || (v194 & 1) == 0)
          {
            double v141 = v56;
            double v142 = (v96 / v94 * (v96 / (v96 + v56)) + v56 / (v96 + v56) * (v56 / v83)) * 1000.0;
            if (v139 > 5 || !v140) {
              goto LABEL_257;
            }
            {
              {
                if (v36)
                {
                  atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
                  nitro::nitro_function::nitro_function(v36);
                }
                unint64_t v149 = 0;
                if (v148 && v36)
                {
                  atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
                  unint64_t v149 = v36;
                }
                int v150 = *(_DWORD *)(*(uint64_t (**)(void *))(*(void *)v148 + 320))(v148);
                if (v149) {
                  nitro::nitro_function::nitro_function(v149);
                }
                if (!v150)
                {
                  double v142 = v142 * 0.0;
                  goto LABEL_257;
                }
              }
              else
              {
                if (v36)
                {
                  atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
                  nitro::nitro_function::nitro_function(v36);
                }
                uint64_t v158 = 0;
                if (v157 && v36)
                {
                  atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
                  uint64_t v158 = v36;
                }
                int v159 = *(_DWORD *)(*(uint64_t (**)(void *))(*(void *)v157 + 320))(v157);
                if (v158) {
                  nitro::nitro_function::nitro_function(v158);
                }
                if (*v198 != *v200)
                {
                  if (v159 == **v200) {
                    double v142 = v142 * 0.0;
                  }
                  goto LABEL_257;
                }
              }
              (*(void (**)(uint64_t))(*(void *)PlatformHeuristics + 128))(PlatformHeuristics);
              goto LABEL_256;
            }
            if (v36)
            {
              atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
              nitro::nitro_function::nitro_function(v36);
            }
            double v143 = (*(double (**)(uint64_t))(*(void *)PlatformHeuristics + 128))(PlatformHeuristics);
LABEL_256:
            double v142 = v142 / v143;
LABEL_257:
            int v144 = v223;
            int v145 = v223[v42];
            if (is_metal_but_not_mps_buffers(v145)
            {
              if (v36)
              {
                atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
                unsigned int v146 = v144[v42] - 50005;
                nitro::nitro_function::nitro_function(v36);
                if (v146 <= 3)
                {
                  char v147 = v146;
                  goto LABEL_274;
                }
                goto LABEL_275;
              }
              if ((v145 - 50005) > 3) {
                goto LABEL_275;
              }
              char v147 = (v145 - 85) & 0xF;
LABEL_274:
              if (((0xBu >> v147) & 1) == 0) {
LABEL_275:
              }
                double v142 = v142
                     * (*(double (**)(uint64_t))(*(void *)PlatformHeuristics + 136))(PlatformHeuristics);
            }
            if (is_gpu(&v144[v215])
            {
              if (v36) {
                atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              unint64_t v151 = *(void *)(**a3 + 224 * v207 + 192) - *(void *)(**a3 + 224 * v207 + 184);
              if (v36)
              {
                nitro::nitro_function::nitro_function(v36);
                if (v151 <= 0x40) {
                  goto LABEL_285;
                }
LABEL_284:
                double v142 = v142
                     * (*(double (**)(uint64_t))(*(void *)PlatformHeuristics + 144))(PlatformHeuristics);
              }
              else if (v151 >= 0x41)
              {
                goto LABEL_284;
              }
            }
LABEL_285:
            unsigned int v152 = v144[v42] - 10006;
            if (v152 <= 5 {
              && ((0x2Fu >> v152) & 1) != 0
            }
            {
              if (v36) {
                atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              uint64_t v153 = **a3 + 224 * v207;
              uint64_t v154 = *(void *)(v153 + 184);
              if ((unint64_t)(*(void *)(v153 + 192) - v154) < 0x41)
              {
                if (v36) {
                  nitro::nitro_function::nitro_function(v36);
                }
              }
              else
              {
                BOOL v155 = Espresso::layer_shape::operator==(v154, v154 + 64);
                BOOL v156 = v155;
                if (v36)
                {
                  nitro::nitro_function::nitro_function(v36);
                  if (!v156) {
                    goto LABEL_310;
                  }
LABEL_309:
                  double v142 = v142
                       * (*(double (**)(uint64_t))(*(void *)PlatformHeuristics + 152))(PlatformHeuristics);
                }
                else if (v155)
                {
                  goto LABEL_309;
                }
              }
            }
LABEL_310:
            if (*v198 != *v200)
            {
              unsigned int v160 = v144[v42] - 10006;
              if (v160 <= 5 && ((0x2Fu >> v160) & 1) != 0)
              {
                uint64_t v161 = (*v200)[4] * (uint64_t)(*v200)[3];
                if (v161)
                {
                  if ((*(int (**)(uint64_t))(*(void *)PlatformHeuristics + 48))(PlatformHeuristics) <= 1)
                  {
                    std::string::basic_string[abi:ne180100]<0>(buf, "ane_compiler_batch");
                    if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(void **)(v76 + 480), buf))
                    {
                      std::string::basic_string[abi:ne180100]<0>(__p, "ane_compiler_batch");
                      unsigned int v226 = __p;
                      std::string::size_type v162 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(v76 + 472), __p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v226);
                      std::string::size_type v163 = (void *)v162 + 7;
                      int v164 = *((char *)v162 + 79);
                      if (v164 < 0)
                      {
                        if (*((void *)v162 + 8) != 1) {
                          goto LABEL_324;
                        }
                        std::string::size_type v163 = (void *)*v163;
                      }
                      else if (v164 != 1)
                      {
LABEL_324:
                        BOOL v165 = 0;
                        goto LABEL_325;
                      }
                      BOOL v165 = *(unsigned char *)v163 == 49;
LABEL_325:
                      if (v218 < 0) {
                        operator delete(__p[0]);
                      }
                    }
                    else
                    {
                      BOOL v165 = 0;
                    }
                    if ((buf[23] & 0x80000000) != 0)
                    {
                      operator delete(*(void **)buf);
                      if (!v165) {
LABEL_329:
                      }
                        double v142 = v142 + (float)((float)(unint64_t)(v161 - 1) * 0.1);
                    }
                    else if (!v165)
                    {
                      goto LABEL_329;
                    }
                  }
                }
              }
            }
            long long v166 = &v223[v215];
            if (is_cpu(&v223[v215])
              && (*(unsigned int (**)(uint64_t))(*(void *)PlatformHeuristics + 48))(PlatformHeuristics) == 2)
            {
              double v142 = v142 + v142;
            }
            double v167 = (*(double (**)(uint64_t))(*(void *)PlatformHeuristics + 96))(PlatformHeuristics);
            double v168 = (*(double (**)(uint64_t))(*(void *)PlatformHeuristics + 104))(PlatformHeuristics);
            unsigned __int8 v169 = is_gpu(v166);
            double v170 = v142 + v142 * v168 * (v167 - v141 + 1.0);
            if ((v169 & (v167 > v141)) == 0) {
              double v170 = v142;
            }
            *(double *)(*(void *)a5 + v204 + 8 * v42) = v170;
            int v171 = v197;
            if (v42) {
              int v171 = v196;
            }
            int v172 = *v171;
            char v173 = *a3;
            int v174 = (std::__shared_weak_count *)a3[1];
            if (v174) {
              atomic_fetch_add_explicit(&v174->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            long long v175 = *(_OWORD *)(*a1 + 16 * v42);
            long long v216 = v175;
            if (*((void *)&v175 + 1)) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v175 + 1) + 8), 1uLL, memory_order_relaxed);
            }
            int v176 = Espresso::also_check_not_blacklisted(v207, v172 != 0, *v173, (const void **)&v216);
            uint64_t v177 = *v24;
            unint64_t v178 = (unint64_t)(v199 + v42) >> 6;
            uint64_t v179 = 1 << (v199 + v42);
            if (v176) {
              uint64_t v180 = *(void *)(v177 + 8 * v178) | v179;
            }
            else {
              uint64_t v180 = *(void *)(v177 + 8 * v178) & ~v179;
            }
            *(void *)(v177 + 8 * v178) = v180;
            if (*((void *)&v216 + 1)) {
              nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v216 + 1));
            }
            if (v174) {
              nitro::nitro_function::nitro_function(v174);
            }
            if ((*(void *)(*v24 + 8 * v178) & v179) == 0) {
              *(void *)(*(void *)a5 + v204 + 8 * v42) = 0x41CDCD6500000000;
            }
            goto LABEL_350;
          }
          *(void *)(*(void *)a5 + v204 + 8 * v42) = 0x41CDCD6500000000;
          char v194 = 1;
LABEL_350:
          if (v208) {
            nitro::nitro_function::nitro_function(v208);
          }
          ++v42;
          ++v215;
          if (v201 == v42) {
            goto LABEL_359;
          }
        }
        uint64_t v48 = (*(uint64_t (**)(uint64_t))(*(void *)PlatformHeuristics + 72))(PlatformHeuristics);
        uint64_t v49 = (*(uint64_t (**)(uint64_t))(*(void *)v48 + 80))(v48);
LABEL_76:
        uint64_t v50 = (float (**)(uint64_t, uint64_t))(*(void *)v48 + 56);
LABEL_77:
        float v51 = (*v50)(v48, v49);
        goto LABEL_78;
      }
LABEL_359:
      if (v36) {
        nitro::nitro_function::nitro_function(v36);
      }
      if (v191) {
        nitro::nitro_function::nitro_function(v191);
      }
      uint64_t v28 = v207 + 1;
      v204 += 8 * v189;
      v199 += v189;
      if (v207 + 1 == v187)
      {
        if (v184) {
          nitro::nitro_function::nitro_function(v184);
        }
        break;
      }
    }
  }
  if (v223) {
    operator delete(v223);
  }
}

void sub_1921150CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *__p,uint64_t a49,int a50,__int16 a51,char a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57)
{
  if (v57)
  {
    nitro::nitro_function::nitro_function(v57);
    if (!v62)
    {
LABEL_3:
      if (!v61) {
        goto LABEL_8;
      }
LABEL_7:
      nitro::nitro_function::nitro_function(v61);
LABEL_8:
      float v60 = *(void **)(v58 - 232);
      if (v60)
      {
        *(void *)(v58 - 224) = v60;
        operator delete(v60);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v62)
  {
    goto LABEL_3;
  }
  nitro::nitro_function::nitro_function(v62);
  if (!v61) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

uint64_t Espresso::also_check_not_blacklisted(uint64_t a1, unsigned int a2, uint64_t a3, const void **a4)
{
  int v8 = (***((uint64_t (****)(void))*a4 + 1))(*((void *)*a4 + 1));
  BOOL v9 = is_metal_but_not_mps_buffers(v8);
  int v10 = (***((unsigned int (****)(void))*a4 + 1))() == 50001 || v9;
  int v21 = (***((uint64_t (****)(void))*a4 + 1))();
  int v11 = is_cpu(&v21);
  if (*a4
  {
    uint64_t v12 = (std::__shared_weak_count *)a4[1];
    int v13 = 1;
    if (v12)
    {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      nitro::nitro_function::nitro_function(v12);
    }
  }
  else
  {
    int v13 = 0;
  }
  if (*(_DWORD *)(a3 + 224 * a1 + 72)) {
    char v14 = v10;
  }
  else {
    char v14 = 0;
  }
  if (v14 & 1) != 0 || (*(_DWORD *)(a3 + 224 * a1 + 76) ? (char v15 = v13) : (char v15 = 0), (v15)) {
    uint64_t result = 0;
  }
  else {
    uint64_t result = ((*(_DWORD *)(a3 + 224 * a1 + 80) == 0) | ~v11) & a2;
  }
  uint64_t v17 = *((void *)*a4 + 16);
  if (v17)
  {
    if ((v17 & 4) != 0) {
      int v18 = 0;
    }
    else {
      int v18 = v13;
    }
    if ((v17 & 2) != 0) {
      int v19 = 0;
    }
    else {
      int v19 = v10;
    }
    if (v17) {
      int v20 = 0;
    }
    else {
      int v20 = v11;
    }
    return result & ~(v20 | v18 | v19);
  }
  return result;
}

uint64_t Espresso::ANERuntimeEngine::engine::platform(Espresso::ANERuntimeEngine::engine *this)
{
  return 10007;
}

uint64_t is_cpu(int *a1)
{
  int v1 = *a1;
  uint64_t result = 1;
  if (v1 <= 99)
  {
    if (v1) {
      BOOL v5 = v1 == 6;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5) {
      return 0;
    }
  }
  else if ((v1 - 100) >= 2 && v1 != 10010 && v1 != 80000)
  {
    return 0;
  }
  return result;
}

BOOL is_metal_but_not_mps_buffers(int a1)
{
  return ((a1 - 50000) <= 8 && ((1 << (a1 - 80)) & 0x163) != 0 || a1 == 90000 || a1 == 20000)
      && (a1 - 50004) < 0xFFFFFFFE;
}

uint64_t Espresso::MPSEngine::engine::platform(Espresso::MPSEngine::engine *this)
{
  return *((unsigned int *)this + 6);
}

uint64_t is_gpu(int *a1)
{
  int v1 = *a1;
  uint64_t result = 1;
  if (((v1 - 50000) > 8 || ((1 << (v1 - 80)) & 0x16F) == 0) && v1 != 90000) {
    return 0;
  }
  return result;
}

float get_engine_gflops_per_s(int a1, uint64_t a2, int a3)
{
  int v18 = a1;
  if ((a1 - 10006) < 4 || a1 == 10011)
  {
    uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 72))(a2);
LABEL_7:
    uint64_t v6 = v5;
    uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 80))(v5);
    float v8 = (*(float (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 72))(v6, v7, 1);
    return v8 / 1000000000.0;
  }
  if (is_gpu(&v18))
  {
    uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 64))(a2);
    goto LABEL_7;
  }
  if (is_cpu(&v18))
  {
    uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 56))(a2);
    uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 80))(v13);
    uint64_t v15 = *(void *)v13;
    if (a3) {
      (*(void (**)(uint64_t, uint64_t, void))(v15 + 120))(v13, v14, 0);
    }
    else {
      (*(void (**)(uint64_t, uint64_t, void))(v15 + 72))(v13, v14, 0);
    }
    return v8 / 1000000000.0;
  }
  if ((a1 & 0xFFFFFFFD) == 5) {
    return 300.0;
  }
  float result = 15.0;
  if (a1 == 100000)
  {
    uint64_t v16 = (*(uint64_t (**)(uint64_t, float))(*(void *)a2 + 56))(a2, 15.0);
    uint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)v16 + 80))(v16);
    float v8 = (*(float (**)(uint64_t, uint64_t, void))(*(void *)v16 + 72))(v16, v17, 0);
    return v8 / 1000000000.0;
  }
  return result;
}

uint64_t newpPlatformHeuristics::GetCpuPerfHeuristics(newpPlatformHeuristics *this)
{
  return (uint64_t)this + 112;
}

uint64_t newpACCPHeuristics::get_highest_device_pstate(newpACCPHeuristics *this)
{
  return 9;
}

float Espresso::base_kernel::estimated_compute_resources(uint64_t a1, long long **a2, int a3)
{
  (*(void (**)(long long **__return_ptr))(*(void *)a1 + 64))(&v29);
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  float v7 = 0.0;
  if (*a2 != v6)
  {
    uint64_t v8 = a3 - 1;
    do
    {
      long long v9 = *v5;
      long long v10 = v5[1];
      uint64_t v25 = *((void *)v5 + 4);
      long long v23 = v9;
      long long v24 = v10;
      uint64_t v27 = 0;
      uint64_t v28 = 0;
      std::string __p = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *((const void **)v5 + 5), *((void *)v5 + 6), (uint64_t)(*((void *)v5 + 6) - *((void *)v5 + 5)) >> 2);
      uint64_t v11 = Espresso::layer_shape::total_dim((Espresso::layer_shape *)&v23);
      if (v8 > 0xC) {
        uint64_t v12 = 4;
      }
      else {
        uint64_t v12 = qword_192DF6AD8[v8];
      }
      if (__p)
      {
        uint64_t v27 = __p;
        operator delete(__p);
      }
      float v7 = v7 + (float)((float)(unint64_t)(v12 * v11) * 0.00000095367);
      v5 += 4;
    }
    while (v5 != v6);
  }
  uint64_t v13 = v29;
  uint64_t v14 = v30;
  float v15 = 0.0;
  if (v29 != v30)
  {
    uint64_t v16 = a3 - 1;
    float v17 = 0.0;
    do
    {
      long long v18 = *v13;
      long long v19 = v13[1];
      uint64_t v25 = *((void *)v13 + 4);
      long long v23 = v18;
      long long v24 = v19;
      uint64_t v27 = 0;
      uint64_t v28 = 0;
      std::string __p = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *((const void **)v13 + 5), *((void *)v13 + 6), (uint64_t)(*((void *)v13 + 6) - *((void *)v13 + 5)) >> 2);
      uint64_t v20 = Espresso::layer_shape::total_dim((Espresso::layer_shape *)&v23);
      if (v16 > 0xC) {
        uint64_t v21 = 4;
      }
      else {
        uint64_t v21 = qword_192DF6AD8[v16];
      }
      if (__p)
      {
        uint64_t v27 = __p;
        operator delete(__p);
      }
      float v17 = v17 + (float)((float)(unint64_t)(v21 * v20) * 0.00000095367);
      v13 += 4;
    }
    while (v13 != v14);
    float v15 = (double)(2 * v20) * 0.000000001;
  }
  *(void *)&long long v23 = &v29;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  return v15;
}

void sub_192115A3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  a9 = (void **)&a18;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

double newpPlatformHeuristics::GetGPULThreshold(newpPlatformHeuristics *this)
{
  return 0.00499999989;
}

double newpPlatformHeuristics::GetGPULScale(newpPlatformHeuristics *this)
{
  return 0.5;
}

uint64_t newpPlatformHeuristics::GetAnePerfHeuristics(newpPlatformHeuristics *this)
{
  return (uint64_t)this + 240;
}

void Espresso::generic_slice_kernel::top_shapes_for_bottom_shapes(int *a1@<X0>, long long **a2@<X1>, void *a3@<X8>)
{
  *((void *)&v69 + 1) = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *a2;
  uint64_t v6 = *((void *)*a2 + 4);
  long long v7 = (*a2)[1];
  long long v58 = **a2;
  long long v59 = v7;
  uint64_t v60 = v6;
  float v61 = 0;
  uint64_t v62 = 0;
  uint64_t v63 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v61, *((const void **)v5 + 5), *((void *)v5 + 6), (uint64_t)(*((void *)v5 + 6) - *((void *)v5 + 5)) >> 2);
  uint64_t v8 = (int *)&v58;
  switch(a1[70])
  {
    case 0:
      break;
    case 1:
      uint64_t v8 = (int *)&v58 + 1;
      break;
    case 2:
      uint64_t v8 = (int *)&v58 + 2;
      break;
    case 3:
      uint64_t v8 = (int *)((unint64_t)&v58 | 0xC);
      break;
    case 4:
      uint64_t v8 = (int *)&v59;
      break;
    default:
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v57, a1[70]);
      int v46 = std::string::insert(&v57, 0, "Invalid axis ");
      long long v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
      *(void *)&v64[16] = *((void *)&v46->__r_.__value_.__l + 2);
      *(_OWORD *)uint64_t v64 = v47;
      v46->__r_.__value_.__l.__size_ = 0;
      v46->__r_.__value_.__r.__words[2] = 0;
      v46->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, (const std::string *)v64);
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  int v9 = *v8;
  int v10 = a1[74];
  if (v10 == 1)
  {
    int v21 = a1[75];
    int *v8 = v21;
    if (v21 < 0)
    {
      long long v23 = v8;
      long long v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v51, a1[72]);
      uint64_t v25 = std::string::insert(&v51, 0, "Invalid slice end=");
      long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v26;
      v25->__r_.__value_.__l.__size_ = 0;
      v25->__r_.__value_.__r.__words[2] = 0;
      v25->__r_.__value_.__r.__words[0] = 0;
      uint64_t v27 = std::string::append(&v52, " start=");
      long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v53.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v50, a1[71]);
      if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v29 = &v50;
      }
      else {
        uint64_t v29 = (std::string *)v50.__r_.__value_.__r.__words[0];
      }
      if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v50.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v50.__r_.__value_.__l.__size_;
      }
      uint64_t v31 = std::string::append(&v53, (const std::string::value_type *)v29, size);
      long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
      v54.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v32;
      v31->__r_.__value_.__l.__size_ = 0;
      v31->__r_.__value_.__r.__words[2] = 0;
      v31->__r_.__value_.__r.__words[0] = 0;
      uint64_t v33 = std::string::append(&v54, " dim=");
      long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v55.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v49, *v23);
      if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unsigned int v35 = &v49;
      }
      else {
        unsigned int v35 = (std::string *)v49.__r_.__value_.__r.__words[0];
      }
      if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v36 = HIBYTE(v49.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v36 = v49.__r_.__value_.__l.__size_;
      }
      uint64_t v37 = std::string::append(&v55, (const std::string::value_type *)v35, v36);
      long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v56.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      int v39 = std::string::append(&v56, " dim_orig=");
      long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
      v57.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v40;
      v39->__r_.__value_.__l.__size_ = 0;
      v39->__r_.__value_.__r.__words[2] = 0;
      v39->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v48, v9);
      if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v41 = &v48;
      }
      else {
        uint64_t v41 = (std::string *)v48.__r_.__value_.__r.__words[0];
      }
      if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v42 = HIBYTE(v48.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v42 = v48.__r_.__value_.__l.__size_;
      }
      uint64_t v43 = std::string::append(&v57, (const std::string::value_type *)v41, v42);
      long long v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
      *(void *)&v64[16] = *((void *)&v43->__r_.__value_.__l + 2);
      *(_OWORD *)uint64_t v64 = v44;
      v43->__r_.__value_.__l.__size_ = 0;
      v43->__r_.__value_.__r.__words[2] = 0;
      v43->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v24, (const std::string *)v64);
      __cxa_throw(v24, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
  else
  {
    if (v10) {
      Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Unsupported slice mode");
    }
    int v11 = a1[72];
    int v12 = a1[73];
    if (v12 >= 0) {
      int v13 = a1[72];
    }
    else {
      int v13 = a1[71];
    }
    if (v12 >= 0) {
      int v11 = a1[71];
    }
    if (v13 <= 0) {
      int v14 = *v8;
    }
    else {
      int v14 = 0;
    }
    int v15 = v14 + v13;
    int v16 = (v9 & (v11 >> 31)) + v11;
    if (!v12)
    {
      int v12 = 1;
      a1[73] = 1;
    }
    if (v15 >= v9) {
      int v15 = v9;
    }
    if (v16 >= v9) {
      int v16 = v9 - 1;
    }
    int v17 = v15 - v16;
    if (v17 < 0) {
      int v17 = -v17;
    }
    if (v12 < 0) {
      int v12 = -v12;
    }
    int *v8 = (v17 - 1) / v12 + 1;
    if (v16 < 0)
    {
      long long v18 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v57, a1[71]);
      long long v19 = std::string::insert(&v57, 0, "Invalid start ");
      long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      *(void *)&v64[16] = *((void *)&v19->__r_.__value_.__l + 2);
      *(_OWORD *)uint64_t v64 = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v18, (const std::string *)v64);
      __cxa_throw(v18, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
  *(_OWORD *)uint64_t v64 = v58;
  *(_OWORD *)&v64[16] = v59;
  uint64_t v65 = v60;
  int v66 = 0;
  int v67 = 0;
  uint64_t v68 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v66, v61, (uint64_t)v62, (v62 - (unsigned char *)v61) >> 2);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v57.__r_.__value_.__r.__words[0] = (std::string::size_type)a3;
  v57.__r_.__value_.__s.__data_[8] = 0;
  uint64_t v22 = (char *)operator new(0x40uLL);
  *a3 = v22;
  a3[1] = v22;
  a3[2] = v22 + 64;
  a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), (long long *)v64, &v69, (uint64_t)v22);
  if (v66)
  {
    int v67 = v66;
    operator delete(v66);
  }
  if (v61)
  {
    uint64_t v62 = v61;
    operator delete(v61);
  }
}

void sub_192115F54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59,uint64_t a60,void *a61,uint64_t a62,int a63)
{
  if (*(char *)(v68 - 105) < 0) {
    operator delete(*(void **)(v68 - 128));
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v68 - 201) < 0) {
    operator delete(*(void **)(v68 - 224));
  }
  if (a66 < 0) {
    operator delete(a61);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a59 < 0) {
    operator delete(a54);
  }
  if (a52 < 0) {
    operator delete(a47);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a38 < 0) {
    operator delete(a33);
  }
  if (a32 < 0)
  {
    operator delete(a27);
    if ((v66 & 1) == 0)
    {
LABEL_26:
      unint64_t v70 = *(void **)(v68 - 152);
      if (v70)
      {
        *(void *)(v68 - 144) = v70;
        operator delete(v70);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v66)
  {
    goto LABEL_26;
  }
  __cxa_free_exception(v67);
  goto LABEL_26;
}

uint64_t newpPlatformHeuristics::GetPlatformEnum(newpPlatformHeuristics *this)
{
  return 2;
}

uint64_t newpANEHeuristics::get_highest_device_pstate(newpANEHeuristics *this)
{
  return 2;
}

float newpACCPHeuristics::get_flops_per_sec(uint64_t a1, int a2, int a3)
{
  uint64_t v4 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((void *)(a1 + 88), a2);
  if (a3 == 1)
  {
    float v5 = 8.0;
    if (!v4) {
      goto LABEL_3;
    }
  }
  else
  {
    float v5 = 4.0;
    if (!v4) {
LABEL_3:
    }
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  return (float)(unint64_t)(float)((float)(*((float *)v4 + 5) * v5) * 3.0);
}

float newpACCPHeuristics::get_aggregate_read_bw(uint64_t a1, uint64_t a2)
{
  float v4 = (*(float (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 2);
  return v4 + (float)((*(float (**)(uint64_t, uint64_t))(*(void *)a1 + 40))(a1, a2) * 0.0);
}

float newpACCPHeuristics::get_aggregate_local_cache_read_bw(uint64_t a1, int a2)
{
  uint64_t v2 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((void *)(a1 + 88), a2);
  if (!v2) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  return (float)(*((float *)v2 + 5) * 128.0) * 9.3132e-10;
}

float newpACCPHeuristics::get_af_aggregate_bw(uint64_t a1, int a2)
{
  uint64_t v2 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((void *)(a1 + 8), a2);
  if (!v2) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  return *((float *)v2 + 5);
}

float Espresso::generic_convolution_kernel::estimated_compute_resources(uint64_t a1, long long **a2, int a3)
{
  float v5 = Espresso::base_kernel::estimated_compute_resources(a1, a2, a3);
  int v6 = *((_DWORD *)*a2 + 3);
  int v7 = *((_DWORD *)*a2 + 4);
  (*(void (**)(void *__return_ptr, uint64_t, long long **, float))(*(void *)a1 + 64))(v15, a1, a2, v5);
  int v9 = *(_DWORD *)v15[0];
  int v8 = *(_DWORD *)(v15[0] + 4);
  int v10 = (int *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 384))(a1);
  int v11 = v10[29];
  if (v11 <= 1) {
    int v11 = 1;
  }
  if (v7 <= 1) {
    int v12 = 1;
  }
  else {
    int v12 = v7;
  }
  float v13 = ((double)(v12 * v6) * (double)v10[10] * (double)v9 * (double)v8
       + (double)v10[10]
       * (double)(v10[11] / v11)
       * (double)v10[12]
       * (double)v10[13]
       * (double)(v12 * v6)
       * (double)v9
       * (double)v8
       * 2.0)
      * 0.000000001;
  int v16 = (void **)v15;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v16);
  return v13;
}

void sub_192116490(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void Espresso::generic_convolution_kernel::top_shapes_for_bottom_shapes(uint64_t a1@<X0>, long long **a2@<X1>, void *a3@<X8>)
{
  *((void *)&v69 + 1) = *MEMORY[0x1E4F143B8];
  float v5 = *a2;
  uint64_t v6 = *((void *)*a2 + 4);
  long long v7 = (*a2)[1];
  long long v58 = **a2;
  long long v59 = v7;
  uint64_t v60 = v6;
  float v61 = 0;
  uint64_t v62 = 0;
  uint64_t v63 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v61, *((const void **)v5 + 5), *((void *)v5 + 6), (uint64_t)(*((void *)v5 + 6) - *((void *)v5 + 5)) >> 2);
  long long v52 = v58;
  long long v53 = v59;
  uint64_t v54 = v60;
  std::string __p = 0;
  std::string v56 = 0;
  uint64_t v57 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v61, (uint64_t)v62, (v62 - (unsigned char *)v61) >> 2);
  int v9 = v58;
  int v8 = DWORD1(v58);
  uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 384))(a1);
  int v11 = *(_DWORD *)(v10 + 40);
  int v12 = *(__int16 *)(v10 + 72);
  int v13 = *(__int16 *)(v10 + 80);
  int v14 = *(__int16 *)(v10 + 82);
  int v15 = *(_DWORD *)(v10 + 120);
  int v16 = *(unsigned __int16 *)(v10 + 130);
  int v17 = *(_DWORD *)(v10 + 152);
  int v18 = *(__int16 *)(v10 + 156);
  if (*(__int16 *)(v10 + 96) <= 1) {
    int v19 = 1;
  }
  else {
    int v19 = *(__int16 *)(v10 + 96);
  }
  if (*(__int16 *)(v10 + 98) <= 1) {
    int v20 = 1;
  }
  else {
    int v20 = *(__int16 *)(v10 + 98);
  }
  int v21 = *(__int16 *)(v10 + 92);
  int v22 = *(__int16 *)(v10 + 94);
  int v23 = (*(_DWORD *)(v10 + 48) - 1) * v19;
  int v24 = v23 + 1;
  int v25 = (*(_DWORD *)(v10 + 52) - 1) * v20;
  int v26 = v25 + 1;
  switch(*(_WORD *)(v10 + 72))
  {
    case 0xFFFF:
    case 0:
      int v9 = (v9 + v13 + v14 + ~v23) / v21 + 1;
      int v27 = v8 + *(__int16 *)(v10 + 86) + *(__int16 *)(v10 + 84) + ~v25;
      goto LABEL_36;
    case 1:
    case 4:
      int v9 = (v9 - 1) / v21 + 1;
      int v27 = v8 - 1;
      goto LABEL_36;
    case 2:
      int v9 = (v9 - v24) / v21 + 1;
      int v27 = v8 - v26;
LABEL_36:
      int v8 = v27 / v22 + 1;
      break;
    case 3:
      if (v24 >= 0) {
        int v28 = v23 + 1;
      }
      else {
        int v28 = v23 + 2;
      }
      signed int v29 = v28 & 0xFFFFFFFE;
      if (v26 >= 0) {
        int v30 = v25 + 1;
      }
      else {
        int v30 = v25 + 2;
      }
      signed int v31 = v30 & 0xFFFFFFFE;
      if (v31 > v29) {
        signed int v29 = v31;
      }
      int v32 = v29 & ~(v29 >> 31);
      if (v21 <= 1) {
        int v33 = 1;
      }
      else {
        int v33 = *(__int16 *)(v10 + 92);
      }
      if (v22 <= 1) {
        int v34 = 1;
      }
      else {
        int v34 = *(__int16 *)(v10 + 94);
      }
      if (v21 < 0) {
        int v33 = 1;
      }
      int v35 = ~v32;
      int v36 = (v9 + v35) / v33;
      if (v21 >= 0) {
        int v9 = v36 + 1;
      }
      else {
        int v9 = ~v36;
      }
      BOOL v37 = v22 < 0;
      if (v22 < 0) {
        int v38 = 1;
      }
      else {
        int v38 = v34;
      }
      int v39 = (v8 + v35) / v38;
      if (v37) {
        int v8 = ~v39;
      }
      else {
        int v8 = v39 + 1;
      }
      break;
    default:
      break;
  }
  LODWORD(v52) = v9 & ~(v9 >> 31);
  DWORD1(v52) = v8 & ~(v8 >> 31);
  if (v16) {
    int v11 = v16;
  }
  DWORD2(v52) = v11;
  if (v15 >= 2 && HIDWORD(v52) != v15)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v51, v15);
    std::string v49 = std::string::insert(&v51, 0, "Shape mismatch: n ");
    long long v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
    *(void *)&v64[16] = *((void *)&v49->__r_.__value_.__l + 2);
    *(_OWORD *)uint64_t v64 = v50;
    v49->__r_.__value_.__l.__size_ = 0;
    v49->__r_.__value_.__r.__words[2] = 0;
    v49->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, (const std::string *)v64);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (v17 >= 2)
  {
    int v40 = v59;
    switch(v12)
    {
      case -1:
      case 0:
        int v41 = v14 + v13 - v17 + v59;
        goto LABEL_55;
      case 1:
      case 4:
        int v41 = v59 - 1;
        goto LABEL_55;
      case 2:
        int v41 = v59 - v17;
LABEL_55:
        int v40 = v41 / v18 + 1;
        break;
      case 3:
        if (v18 <= 1) {
          int v42 = 1;
        }
        else {
          int v42 = v18;
        }
        int v43 = v59 - (v17 | 1);
        BOOL v44 = v18 < 0;
        if (v18 < 0) {
          int v45 = 1;
        }
        else {
          int v45 = v42;
        }
        int v46 = v43 / v45;
        if (v44) {
          int v40 = ~v46;
        }
        else {
          int v40 = v46 + 1;
        }
        break;
      default:
        break;
    }
    LODWORD(v53) = v40 & ~(v40 >> 31);
  }
  *(_OWORD *)uint64_t v64 = v52;
  *(_OWORD *)&v64[16] = v53;
  uint64_t v65 = v54;
  int v66 = 0;
  int v67 = 0;
  uint64_t v68 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v66, __p, (uint64_t)v56, (v56 - (unsigned char *)__p) >> 2);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v51.__r_.__value_.__r.__words[0] = (std::string::size_type)a3;
  v51.__r_.__value_.__s.__data_[8] = 0;
  long long v47 = (char *)operator new(0x40uLL);
  *a3 = v47;
  a3[1] = v47;
  a3[2] = v47 + 64;
  a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), (long long *)v64, &v69, (uint64_t)v47);
  if (v66)
  {
    int v67 = v66;
    operator delete(v66);
  }
  if (__p)
  {
    std::string v56 = __p;
    operator delete(__p);
  }
  if (v61)
  {
    uint64_t v62 = v61;
    operator delete(v61);
  }
}

void sub_1921168D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30)
{
  if (*(char *)(v32 - 105) < 0) {
    operator delete(*(void **)(v32 - 128));
  }
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v31 & 1) == 0)
    {
LABEL_8:
      if (a21) {
        operator delete(a21);
      }
      if (a29) {
        operator delete(a29);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v31)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v30);
  goto LABEL_8;
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::convolution_uniforms,Espresso::abstract_kernel_with_weights_>::get_params(uint64_t a1)
{
  return a1 + 304;
}

uint64_t newpPlatformHeuristics::GetGpuPerfHeuristics(newpPlatformHeuristics *this)
{
  return (uint64_t)this + 408;
}

float newpANEHeuristics::get_aggregate_read_bw(uint64_t a1, uint64_t a2)
{
  double v4 = (*(float (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 2);
  return v4 + (*(float (**)(uint64_t, uint64_t))(*(void *)a1 + 40))(a1, a2) * 0.0;
}

float newpANEHeuristics::get_aggregate_local_cache_read_bw(uint64_t a1, int a2)
{
  uint64_t v2 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((void *)(a1 + 128), a2);
  if (!v2) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  return (float)(*((float *)v2 + 5) * 128.0) * 9.3132e-10;
}

float newpANEHeuristics::get_af_aggregate_bw(uint64_t a1, int a2)
{
  uint64_t v2 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((void *)(a1 + 8), a2);
  if (!v2) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  return *((float *)v2 + 5);
}

float newpANEHeuristics::get_flops_per_sec(uint64_t a1, int a2)
{
  uint64_t v2 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((void *)(a1 + 88), a2);
  if (!v2) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  return *((float *)v2 + 5) * 4096.0;
}

float newpACCPHeuristics::get_amx_flops_per_sec(uint64_t a1, int a2, int a3)
{
  double v4 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((void *)(a1 + 88), a2);
  if (a3 != 1)
  {
    if (v4)
    {
      float v5 = 256.0;
      return (float)(*((float *)v4 + 5) * 0.5) * v5;
    }
LABEL_7:
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  if (!v4) {
    goto LABEL_7;
  }
  float v5 = 512.0;
  return (float)(*((float *)v4 + 5) * 0.5) * v5;
}

uint64_t newpGPUHeuristics::get_highest_device_pstate(newpGPUHeuristics *this)
{
  return 5;
}

float newpGPUHeuristics::get_af_aggregate_bw(uint64_t a1, int a2)
{
  uint64_t v2 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((void *)(a1 + 8), a2);
  if (!v2) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  return *((float *)v2 + 5) + *((float *)v2 + 5);
}

float newpGPUHeuristics::get_flops_per_sec(uint64_t a1, int a2)
{
  uint64_t v2 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((void *)(a1 + 88), a2);
  if (!v2) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  return *((float *)v2 + 5) * 408.0;
}

double newpPlatformHeuristics::GetANEComputeRatio(newpPlatformHeuristics *this)
{
  return 0.6;
}

uint64_t newpANEHeuristics::get_num_nes(newpANEHeuristics *this)
{
  return 16;
}

double newpPlatformHeuristics::GetANEDualSrcEWFactor(newpPlatformHeuristics *this)
{
  return 1.0;
}

void Espresso::generic_transpose_kernel::top_shapes_for_bottom_shapes(unsigned int *a1@<X0>, long long **a2@<X1>, void *a3@<X8>)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  float v5 = *a2;
  long long v13 = **a2;
  long long v15 = (*a2)[1];
  uint64_t v16 = *((void *)*a2 + 4);
  int v17 = 0;
  int v18 = 0;
  uint64_t v19 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v17, *((const void **)v5 + 5), *((void *)v5 + 6), (uint64_t)(*((void *)v5 + 6) - *((void *)v5 + 5)) >> 2);
  long long v27 = v13;
  int v28 = v15;
  uint64_t v6 = a1[70];
  if (v6 >= 5
    || (uint64_t v7 = a1[71], v7 >= 5)
    || (uint64_t v8 = a1[72], v8 >= 5)
    || (uint64_t v9 = a1[73], v9 >= 5)
    || (uint64_t v10 = a1[74], v10 >= 5))
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
    Espresso::invalid_argument_error::invalid_argument_error(exception);
  }
  LODWORD(v15) = *((_DWORD *)&v27 + v10);
  if ((int)v15 >= 2) {
    DWORD1(v15) = 5;
  }
  HIDWORD(v14) = *((_DWORD *)&v27 + v9);
  DWORD2(v14) = *((_DWORD *)&v27 + v8);
  DWORD1(v14) = *((_DWORD *)&v27 + v7);
  LODWORD(v14) = *((_DWORD *)&v27 + v6);
  v22[0] = v14;
  v22[1] = v15;
  uint64_t v23 = v16;
  std::string __p = 0;
  int v25 = 0;
  uint64_t v26 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v17, (uint64_t)v18, (v18 - (unsigned char *)v17) >> 2);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  int v20 = a3;
  char v21 = 0;
  int v11 = (char *)operator new(0x40uLL);
  *a3 = v11;
  a3[1] = v11;
  a3[2] = v11 + 64;
  a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), v22, &v27, (uint64_t)v11);
  if (__p)
  {
    int v25 = __p;
    operator delete(__p);
  }
  if (v17)
  {
    int v18 = v17;
    operator delete(v17);
  }
}

void sub_192116E08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  __cxa_free_exception(v25);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

double newpPlatformHeuristics::GetANEOptimalityFactor(newpPlatformHeuristics *this)
{
  return 10.0;
}

float Espresso::generic_batchnorm_kernel::estimated_compute_resources(uint64_t a1, long long **a2, int a3)
{
  Espresso::base_kernel::estimated_compute_resources(a1, a2, a3);
  if (*(_DWORD *)(a1 + 308)) {
    int v5 = 7;
  }
  else {
    int v5 = 4;
  }
  return (double)*(int *)*a2
       * (double)*((int *)*a2 + 1)
       * (double)*((int *)*a2 + 2)
       * (double)*((int *)*a2 + 3)
       * (double)v5
       * 0.000000001;
}

uint64_t Espresso::generic_inner_product_kernel::estimated_compute_resources(uint64_t a1, long long **a2, int a3)
{
  v5.n128_f32[0] = Espresso::base_kernel::estimated_compute_resources(a1, a2, a3);
  int v6 = *((_DWORD *)*a2 + 5);
  if (v6 != -1 && v6 <= 3) {
    v5.n128_f64[0] = (double)(*((_DWORD *)*a2 + 1) * *((_DWORD *)*a2 + 2));
  }
  return (*(uint64_t (**)(uint64_t, __n128))(*(void *)a1 + 384))(a1, v5);
}

void Espresso::ANECompilerEngine::transpose_kernel::top_shapes_for_bottom_shapes(uint64_t a1@<X0>, long long **a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 520);
  if (v4) {
    (*(void (**)(void))(*(void *)v4 + 64))();
  }
  else {
    Espresso::generic_transpose_kernel::top_shapes_for_bottom_shapes((unsigned int *)a1, a2, a3);
  }
}

void *std::vector<double>::vector(void *a1, unint64_t a2, void *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<double>::__vallocate[abi:ne180100](a1, a2);
    int v6 = (void *)a1[1];
    uint64_t v7 = &v6[a2];
    uint64_t v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_19211711C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<double>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 61) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  float result = (char *)operator new(8 * a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * a2];
  return result;
}

uint64_t PlatformHeuristics::is_jade_family(PlatformHeuristics *this)
{
  return 0;
}

void Espresso::ANECompilerEngine::inner_product_kernel::top_shapes_for_bottom_shapes(uint64_t a1@<X0>, long long **a2@<X1>, void *a3@<X8>)
{
  *((void *)&v28 + 1) = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 841))
  {
    int v6 = *a2;
    long long v15 = **a2;
    long long v16 = (*a2)[1];
    uint64_t v17 = *((void *)*a2 + 4);
    int v18 = 0;
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v18, *((const void **)v6 + 5), *((void *)v6 + 6), (uint64_t)(*((void *)v6 + 6) - *((void *)v6 + 5)) >> 2);
    uint64_t v7 = *a2;
    int v8 = *((_DWORD *)*a2 + 4);
    BOOL v9 = v8 < 0 || *((int *)v7 + 3) < 1 || *((int *)v7 + 2) < 1 || *((int *)v7 + 1) < 1 || *(_DWORD *)v7 < 1;
    int v10 = *((_DWORD *)v7 + 5);
    if (v10 == -1) {
      BOOL v11 = v8 != 1;
    }
    else {
      BOOL v11 = v10 == 5;
    }
    if (v8) {
      BOOL v12 = 0;
    }
    else {
      BOOL v12 = v11;
    }
    if (!v9 && !v12)
    {
      DWORD2(v15) = *(_DWORD *)(a1 + 304);
      DWORD1(v16) = 4;
    }
    v23[0] = v15;
    v23[1] = v16;
    uint64_t v24 = v17;
    std::string __p = 0;
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v18, (uint64_t)v19, (v19 - (unsigned char *)v18) >> 2);
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    char v21 = a3;
    char v22 = 0;
    long long v13 = (char *)operator new(0x40uLL);
    *a3 = v13;
    a3[1] = v13;
    a3[2] = v13 + 64;
    a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), v23, &v28, (uint64_t)v13);
    if (__p)
    {
      uint64_t v26 = __p;
      operator delete(__p);
    }
    if (v18)
    {
      uint64_t v19 = v18;
      operator delete(v18);
    }
  }
  else
  {
    long long v14 = *a2;
    Espresso::inner_product_top_shape(a3, a1 + 304, (uint64_t)v14);
  }
}

void sub_19211737C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void **a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25)
{
  *(void *)(v25 + 8) = v26;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&a17);
  if (__p)
  {
    a25 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a14) {
    operator delete(a14);
  }
  _Unwind_Resume(a1);
}

uint64_t newpANEHeuristics::get_macs_per_ne(newpANEHeuristics *this)
{
  return 256;
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::transpose_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

float Espresso::generic_pool_kernel::estimated_compute_resources(uint64_t a1, long long **a2, int a3)
{
  float v5 = Espresso::base_kernel::estimated_compute_resources(a1, a2, a3);
  uint64_t v6 = (*(uint64_t (**)(uint64_t, float))(*(void *)a1 + 384))(a1, v5);
  int v8 = *(_DWORD *)(v6 + 4);
  int v7 = *(_DWORD *)(v6 + 8);
  int v9 = *(_DWORD *)(v6 + 12);
  int v11 = *(_DWORD *)*a2;
  int v10 = *((_DWORD *)*a2 + 1);
  int v12 = *(_DWORD *)(v6 + 16);
  int v13 = *(_DWORD *)(v6 + 20);
  switch(*(_WORD *)(v6 + 36))
  {
    case 0xFFFF:
    case 0:
      int v11 = (v11 - v8 + *(__int16 *)(v6 + 46) + *(__int16 *)(v6 + 44)) / v12 + 1;
      int v14 = v10 - v7 + *(__int16 *)(v6 + 50) + *(__int16 *)(v6 + 48);
      goto LABEL_30;
    case 1:
    case 4:
      int v11 = (v11 - 1) / v12 + 1;
      int v14 = v10 - 1;
      goto LABEL_30;
    case 2:
      int v11 = (v11 - v8) / v12 + 1;
      int v14 = v10 - v7;
LABEL_30:
      int v10 = v14 / v13 + 1;
      break;
    case 3:
      if (v8 >= 0) {
        int v15 = *(_DWORD *)(v6 + 4);
      }
      else {
        int v15 = v8 + 1;
      }
      signed int v16 = v15 & 0xFFFFFFFE;
      if (v7 >= 0) {
        int v17 = *(_DWORD *)(v6 + 8);
      }
      else {
        int v17 = v7 + 1;
      }
      signed int v18 = v17 & 0xFFFFFFFE;
      if (v18 > v16) {
        signed int v16 = v18;
      }
      int v19 = v16 & ~(v16 >> 31);
      if (v12 <= 1) {
        int v20 = 1;
      }
      else {
        int v20 = *(_DWORD *)(v6 + 16);
      }
      if (v13 <= 1) {
        int v21 = 1;
      }
      else {
        int v21 = *(_DWORD *)(v6 + 20);
      }
      if (v12 < 0) {
        int v20 = 1;
      }
      int v22 = ~v19;
      int v23 = (v11 + v22) / v20;
      if (v12 >= 0) {
        int v11 = v23 + 1;
      }
      else {
        int v11 = ~v23;
      }
      BOOL v24 = v13 < 0;
      if (v13 < 0) {
        int v25 = 1;
      }
      else {
        int v25 = v21;
      }
      int v26 = (v10 + v22) / v25;
      if (v24) {
        int v10 = ~v26;
      }
      else {
        int v10 = v26 + 1;
      }
      break;
    default:
      break;
  }
  int v27 = v11 & ~(v11 >> 31);
  if (v27 <= 1) {
    int v27 = 1;
  }
  double v28 = (double)v27;
  if ((v10 & ~(v10 >> 31)) <= 1) {
    int v29 = 1;
  }
  else {
    int v29 = v10 & ~(v10 >> 31);
  }
  double v30 = (double)v29 * v28 * (double)*((int *)*a2 + 2) * (double)*((int *)*a2 + 3) * (double)v8 * (double)v7 * (double)v9;
  return (v30 + v30) * 0.000000001;
}

double newpPlatformHeuristics::GetMPSInnerProductFactor(newpPlatformHeuristics *this)
{
  return 4.0;
}

uint64_t std::__shared_ptr_pointer<MIL::IROperator  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void Espresso::AOT::Utils::OpBlackListValidate(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5)
{
  Functiouint64_t n = MIL::IRProgram::GetFunction();
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)Function + 40))(Function);
  int v8 = (uint64_t **)(*(uint64_t (**)(uint64_t))(*(void *)v7 + 56))(v7);
  uint64_t v9 = **v8;
  uint64_t v10 = (*v8)[1];
  long long v58 = 0;
  long long v59 = 0;
  uint64_t v60 = 0;
  uint64_t v11 = v10 - v9;
  if (!v11) {
LABEL_62:
  }
    operator new();
  int v12 = v8;
  uint64_t v13 = 0;
  unint64_t v14 = v11 >> 4;
  if (v14 <= 1) {
    uint64_t v15 = 1;
  }
  else {
    uint64_t v15 = v14;
  }
  while (1)
  {
    uint64_t v17 = *(void *)(**v12 + 16 * v13);
    uint64_t v18 = (*(uint64_t (**)(uint64_t))(*(void *)v17 + 232))(v17);
    if (!v18)
    {
      BOOL v24 = 0;
      goto LABEL_23;
    }
    uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 16))(v18);
    std::string::size_type v21 = v20;
    if (v20 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    int v22 = (const void *)v19;
    if (v20 >= 0x17) {
      break;
    }
    *((unsigned char *)&__p.__r_.__value_.__s + 23) = v20;
    p_p = &__p;
    if (v20) {
      goto LABEL_20;
    }
LABEL_21:
    p_p->__r_.__value_.__s.__data_[v21] = 0;
    BOOL v24 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(a4, (uint64_t)&__p) == 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
LABEL_23:
    int v27 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v17 + 56))(v17);
    char v54 = 1;
    LOWORD(v53) = 46;
    E5Common::StringUtils::Split(v27, (char *)&v53, (uint64_t)&v55);
    if (*((char *)v56 - 1) < 0)
    {
      std::string::__init_copy_ctor_external(&__p, *(v56 - 3), (std::string::size_type)*(v56 - 2));
    }
    else
    {
      long long v28 = *(_OWORD *)(v56 - 3);
      __p.__r_.__value_.__r.__words[2] = (std::string::size_type)*(v56 - 1);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v28;
    }
    int v29 = (const std::string::value_type **)v55;
    if (v55)
    {
      double v30 = (void **)v56;
      int v31 = v55;
      if (v56 != v55)
      {
        do
        {
          if (*((char *)v30 - 1) < 0) {
            operator delete(*(v30 - 3));
          }
          v30 -= 3;
        }
        while (v30 != (void **)v29);
        int v31 = v55;
      }
      std::string v56 = v29;
      operator delete(v31);
    }
    if (v54 < 0)
    {
      operator delete(v53);
      if (*(unsigned char *)(a5 + 32))
      {
LABEL_36:
        uint64_t v32 = *(void *)(a5 + 24);
        if (!v32) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        if (((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v32 + 48))(v32, v17) ^ 1 | v24)) {
          goto LABEL_7;
        }
        goto LABEL_41;
      }
    }
    else if (*(unsigned char *)(a5 + 32))
    {
      goto LABEL_36;
    }
    if (v24) {
      goto LABEL_7;
    }
LABEL_41:
    if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(a3, (uint64_t)&__p))
    {
      goto LABEL_7;
    }
    int v33 = v59;
    if (v59 >= v60)
    {
      int v34 = (char *)v58;
      int64_t v35 = v59 - (unsigned char *)v58;
      uint64_t v36 = (v59 - (unsigned char *)v58) >> 3;
      unint64_t v37 = v36 + 1;
      if ((unint64_t)(v36 + 1) >> 61) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v38 = v60 - (unsigned char *)v58;
      if ((v60 - (unsigned char *)v58) >> 2 > v37) {
        unint64_t v37 = v38 >> 2;
      }
      if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v39 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v39 = v37;
      }
      if (v39)
      {
        if (v39 >> 61) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        int v40 = (char *)operator new(8 * v39);
        int v41 = &v40[8 * v36];
        *(void *)int v41 = v13;
        uint64_t v16 = (uint64_t)(v41 + 8);
        if (v33 == v34) {
          goto LABEL_60;
        }
LABEL_54:
        unint64_t v42 = v33 - 8 - v34;
        if (v42 < 0x58) {
          goto LABEL_69;
        }
        if ((unint64_t)(v33 - &v40[v35]) < 0x20) {
          goto LABEL_69;
        }
        uint64_t v43 = (v42 >> 3) + 1;
        uint64_t v44 = 8 * (v43 & 0x3FFFFFFFFFFFFFFCLL);
        int v45 = &v33[-v44];
        v41 -= v44;
        int v46 = &v40[8 * v36 - 16];
        long long v47 = v33 - 16;
        uint64_t v48 = v43 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v49 = *(_OWORD *)v47;
          *((_OWORD *)v46 - 1) = *((_OWORD *)v47 - 1);
          *(_OWORD *)int v46 = v49;
          v46 -= 32;
          v47 -= 32;
          v48 -= 4;
        }
        while (v48);
        int v33 = v45;
        if (v43 != (v43 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_69:
          do
          {
            uint64_t v50 = *((void *)v33 - 1);
            v33 -= 8;
            *((void *)v41 - 1) = v50;
            v41 -= 8;
          }
          while (v33 != v34);
        }
      }
      else
      {
        int v40 = 0;
        int v41 = (char *)(8 * v36);
        *(void *)(8 * v36) = v13;
        uint64_t v16 = 8 * v36 + 8;
        if (v33 != v34) {
          goto LABEL_54;
        }
      }
LABEL_60:
      long long v58 = v41;
      long long v59 = (char *)v16;
      uint64_t v60 = &v40[8 * v39];
      if (v34) {
        operator delete(v34);
      }
      goto LABEL_6;
    }
    *(void *)long long v59 = v13;
    uint64_t v16 = (uint64_t)(v33 + 8);
LABEL_6:
    long long v59 = (char *)v16;
LABEL_7:
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if (++v13 == v15) {
        goto LABEL_62;
      }
    }
    else if (++v13 == v15)
    {
      goto LABEL_62;
    }
  }
  uint64_t v25 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v20 | 7) != 0x17) {
    uint64_t v25 = v20 | 7;
  }
  uint64_t v26 = v25 + 1;
  p_p = (std::string *)operator new(v25 + 1);
  __p.__r_.__value_.__l.__size_ = v21;
  __p.__r_.__value_.__r.__words[2] = v26 | 0x8000000000000000;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
LABEL_20:
  memmove(p_p, v22, v21);
  goto LABEL_21;
}

void sub_192117AB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29)
{
  MEMORY[0x192FF16B0](v29, 0x10B1C40E94733EDLL);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<Espresso::AOT::Validators::EirValidator::Validate(MIL::IRProgram const&,std::string const&)::$_0,std::allocator<Espresso::AOT::Validators::EirValidator::Validate(MIL::IRProgram const&,std::string const&)::$_0>,BOOL ()(MIL::IROperation const&)>::operator()(uint64_t a1, MIL::IROperation *a2)
{
  uint64_t v3 = (*(uint64_t (**)(MIL::IROperation *))(*(void *)a2 + 56))(a2);
  Espresso::AOT::GetOperatorType(v3, &v42);
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v42.__r_.__value_.__l.__size_ != 6) {
      goto LABEL_10;
    }
    uint64_t v4 = (std::string *)v42.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) != 6) {
      goto LABEL_10;
    }
    uint64_t v4 = &v42;
  }
  int data = (int)v4->__r_.__value_.__l.__data_;
  int v6 = WORD2(v4->__r_.__value_.__r.__words[0]);
  BOOL v7 = data == 1752457575 && v6 == 29285;
  if (v7)
  {
    for (unint64_t i = 0; i < (*(uint64_t (**)(MIL::IROperation *))(*(void *)a2 + 192))(a2); ++i)
    {
      uint64_t OutputType = MIL::IROperation::GetOutputType(a2);
      uint64_t v35 = (*(uint64_t (**)(uint64_t))(*(void *)OutputType + 24))(OutputType);
      if (v35)
      {
        if ((*(unsigned int (**)(uint64_t))(*(void *)v35 + 88))(v35) == 14)
        {
          char v41 = 7;
          strcpy(__p, "indices");
          uint64_t ParameterType = MIL::IROperation::TryGetParameterType();
          if (ParameterType)
          {
            uint64_t v37 = (*(uint64_t (**)(uint64_t))(*(void *)ParameterType + 24))(ParameterType);
            if (v37)
            {
              if ((*(unsigned int (**)(uint64_t))(*(void *)v37 + 88))(v37) == 11) {
                goto LABEL_43;
              }
            }
          }
        }
      }
    }
  }
LABEL_10:
  int v8 = (void *)(*(uint64_t (**)(MIL::IROperation *))(*(void *)a2 + 160))(a2);
  uint64_t v9 = v8 + 1;
  uint64_t v10 = (void *)*v8;
  if ((void *)*v8 == v8 + 1)
  {
LABEL_26:
    for (unint64_t j = 0; j < (*(uint64_t (**)(MIL::IROperation *))(*(void *)a2 + 192))(a2); ++j)
    {
      BOOL v24 = (E5Common::Utils *)MIL::IROperation::GetOutputType(a2);
      uint64_t v26 = v24;
      if (v24)
      {
        if (E5Common::Utils::IsTensorBuffer(v24, v25))
        {
          int v27 = (MIL::IRMemoryLayoutValueType *)MIL::IRValueType::AsMemoryLayoutType(v26);
          long long v28 = (MIL::IRTensorBufferValueType *)MIL::IRMemoryLayoutValueType::AsTensorBufferType(v27);
          uint64_t InterleaveFactors = MIL::IRTensorBufferValueType::GetInterleaveFactors(v28);
          double v30 = *(MIL::IRProperty ***)InterleaveFactors;
          int v31 = *(MIL::IRProperty ***)(InterleaveFactors + 8);
          if (*(MIL::IRProperty ***)InterleaveFactors != v31)
          {
            do
            {
              uint64_t v32 = (MIL::IRConstantProperty *)MIL::IRProperty::AsConstant(*v30);
              if (MIL::IRConstantProperty::GetUInt8ScalarValue(v32) != 1) {
                goto LABEL_43;
              }
              ++v30;
            }
            while (v30 != v31);
          }
        }
      }
    }
    uint64_t v38 = 1;
    if ((SHIBYTE(v42.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return v38;
    }
LABEL_44:
    operator delete(v42.__r_.__value_.__l.__data_);
    return v38;
  }
  while (v10[8] == v10[7])
  {
LABEL_20:
    std::string::size_type v21 = (void *)v10[1];
    if (v21)
    {
      do
      {
        int v22 = v21;
        std::string::size_type v21 = (void *)*v21;
      }
      while (v21);
    }
    else
    {
      do
      {
        int v22 = (void *)v10[2];
        BOOL v7 = *v22 == (void)v10;
        uint64_t v10 = v22;
      }
      while (!v7);
    }
    uint64_t v10 = v22;
    if (v22 == v9) {
      goto LABEL_26;
    }
  }
  uint64_t v11 = 0;
  while (1)
  {
    int v12 = (E5Common::Utils *)MIL::IROperation::TryGetParameterType();
    unint64_t v14 = v12;
    if (v12)
    {
      if (E5Common::Utils::IsTensorBuffer(v12, v13))
      {
        uint64_t v15 = (MIL::IRMemoryLayoutValueType *)MIL::IRValueType::AsMemoryLayoutType(v14);
        uint64_t v16 = (MIL::IRTensorBufferValueType *)MIL::IRMemoryLayoutValueType::AsTensorBufferType(v15);
        uint64_t v17 = MIL::IRTensorBufferValueType::GetInterleaveFactors(v16);
        uint64_t v18 = *(MIL::IRProperty ***)v17;
        uint64_t v19 = *(MIL::IRProperty ***)(v17 + 8);
        if (*(MIL::IRProperty ***)v17 != v19) {
          break;
        }
      }
    }
LABEL_13:
    if (++v11 >= (unint64_t)((uint64_t)(v10[8] - v10[7]) >> 4)) {
      goto LABEL_20;
    }
  }
  while (1)
  {
    unint64_t v20 = (MIL::IRConstantProperty *)MIL::IRProperty::AsConstant(*v18);
    if (MIL::IRConstantProperty::GetUInt8ScalarValue(v20) != 1) {
      break;
    }
    if (++v18 == v19) {
      goto LABEL_13;
    }
  }
LABEL_43:
  uint64_t v38 = 0;
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_44;
  }
  return v38;
}

void sub_192117F04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t E5Common::Utils::IsTensorBuffer(E5Common::Utils *this, const MIL::IRValueType *a2)
{
  uint64_t result = MIL::IRValueType::TryCastAsMemoryLayoutType(this);
  if (result)
  {
    uint64_t v4 = (MIL::IRMemoryLayoutValueType *)MIL::IRValueType::TryCastAsMemoryLayoutType(this);
    return MIL::IRMemoryLayoutValueType::TryAsTensorBufferType(v4) != 0;
  }
  return result;
}

void Espresso::AOT::Backends::CostModel::BaseMatmulOpEstimator::EstimateComputeResources(Espresso::AOT::Backends::CostModel::BaseMatmulOpEstimator *this, const MIL::IROperation *a2)
{
}

void sub_1921182C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a23 < 0)
  {
    operator delete(__p);
    uint64_t v32 = a24;
    if (!a24) {
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v32 = a24;
    if (!a24)
    {
LABEL_6:
      *uint64_t v29 = 0;
      MEMORY[0x192FF16B0](v30, 0x1000C401CC6BE04);
      _Unwind_Resume(a1);
    }
  }
  operator delete(v32);
  goto LABEL_6;
}

void Espresso::AOT::Backends::CostModel::DefaultOpEstimator::EstimateComputeResources(Espresso::AOT::Backends::CostModel::DefaultOpEstimator *this, const MIL::IROperation *a2)
{
}

void sub_192118CDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v17 = *v15;
  *uint64_t v15 = 0;
  if (v17)
  {
    MEMORY[0x192FF16B0](v17, 0x1000C401CC6BE04);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

double Espresso::AOT::GetSizeInMbForShape(Espresso::AOT *this, const MIL::IRValueType *a2)
{
  if ((*(uint64_t (**)(Espresso::AOT *, const MIL::IRValueType *))(*(void *)this + 24))(this, a2))
  {
    uint64_t v3 = MIL::IRValueType::AsTensorType(this);
    uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 96))(v3);
    float v5 = *(MIL::IRDimension ***)v4;
    int v6 = *(MIL::IRDimension ***)(v4 + 8);
    uint64_t v7 = 1;
    while (v5 != v6)
    {
      int v8 = *v5;
      if ((*(uint64_t (**)(MIL::IRDimension *))(*(void *)*v5 + 16))(*v5))
      {
        uint64_t v9 = MIL::IRDimension::AsConstant(v8);
        v7 *= (*(uint64_t (**)(uint64_t))(*(void *)v9 + 48))(v9);
      }
      ++v5;
    }
  }
  else
  {
    uint64_t v7 = 1;
  }
  uint64_t v10 = MIL::IRValueType::AsTensorType(this);
  int v11 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 88))(v10);
  return (double)(unint64_t)(Espresso::AOT::IRDataTypeToByteSize(v11) * v7) * 0.000000953674316;
}

uint64_t Espresso::AOT::IRDataTypeToByteSize(int a1)
{
  int v1 = a1 - 2;
  if ((a1 - 2) >= 0x16 || ((0x3EFFBDu >> v1) & 1) == 0)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    MIL::IRDataTypeToString();
    uint64_t v4 = std::string::insert(&v8, 0, "Unsupported MIL IRDataType (");
    long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v9.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v9.__r_.__value_.__l.__data_ = v5;
    v4->__r_.__value_.__l.__size_ = 0;
    v4->__r_.__value_.__r.__words[2] = 0;
    v4->__r_.__value_.__r.__words[0] = 0;
    int v6 = std::string::append(&v9, ")");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v10.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v10.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v10);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return qword_192DC0570[v1];
}

void sub_192118FBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0)
  {
    operator delete(a23);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:
      if (a15 < 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  if (a15 < 0)
  {
LABEL_4:
    operator delete(__p);
    if ((v29 & 1) == 0) {
LABEL_10:
    }
      _Unwind_Resume(a1);
LABEL_9:
    __cxa_free_exception(v28);
    goto LABEL_10;
  }
LABEL_8:
  if (!v29) {
    goto LABEL_10;
  }
  goto LABEL_9;
}

double Espresso::AOT::GetXDimOfTensorFromIRValueType(Espresso::AOT *this, const MIL::IRValueType *a2)
{
  double v3 = 1.0;
  if ((*(uint64_t (**)(Espresso::AOT *, const MIL::IRValueType *))(*(void *)this + 24))(this, a2))
  {
    uint64_t v4 = MIL::IRValueType::AsTensorType(this);
    uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 96))(v4);
    long long v7 = *(const void **)v5;
    uint64_t v6 = *(void *)(v5 + 8);
    int64_t v8 = v6 - *(void *)v5;
    if (v6 != *(void *)v5)
    {
      if (v8 < 0) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      std::string v9 = (char *)operator new(v6 - *(void *)v5);
      memcpy(v9, v7, v8);
      std::string v10 = (MIL::IRDimension **)&v9[8 * (v8 >> 3)];
      if ((*(uint64_t (**)(void))(*(void *)*(v10 - 1) + 16))(*(v10 - 1)))
      {
        uint64_t v11 = MIL::IRDimension::AsConstant(*(v10 - 1));
        double v3 = (double)(unint64_t)(*(uint64_t (**)(uint64_t))(*(void *)v11 + 48))(v11);
      }
      operator delete(v9);
    }
  }
  return v3;
}

void sub_19211918C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::AOT::GetNumElementsSkipUnknownDims(Espresso::AOT *this, const MIL::IRValueType *a2)
{
  if (!(*(uint64_t (**)(Espresso::AOT *, const MIL::IRValueType *))(*(void *)this + 24))(this, a2)) {
    return 1;
  }
  uint64_t v3 = MIL::IRValueType::AsTensorType(this);
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 96))(v3);
  uint64_t v5 = *(MIL::IRDimension ***)v4;
  uint64_t v6 = *(MIL::IRDimension ***)(v4 + 8);
  uint64_t v7 = 1;
  while (v5 != v6)
  {
    int64_t v8 = *v5;
    if ((*(uint64_t (**)(MIL::IRDimension *))(*(void *)*v5 + 16))(*v5))
    {
      uint64_t v9 = MIL::IRDimension::AsConstant(v8);
      v7 *= (*(uint64_t (**)(uint64_t))(*(void *)v9 + 48))(v9);
    }
    ++v5;
  }
  return v7;
}

void Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::CreateEstimator(uint64_t a1@<X0>, void *a2@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EB4A34A8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EB4A34A8))
  {
    operator new();
  }
  uint64_t v4 = *(void *)_MergedGlobals_0;
  uint64_t v5 = *(void *)(_MergedGlobals_0 + 8);
  if (*(void *)_MergedGlobals_0 == v5)
  {
LABEL_31:
    *a2 = 0;
    return;
  }
  while (1)
  {
    Espresso::AOT::GetOperatorType(a1, &__p);
    uint64_t v6 = *(unsigned __int8 *)(v4 + 23);
    if ((v6 & 0x80u) == 0) {
      uint64_t v7 = *(unsigned __int8 *)(v4 + 23);
    }
    else {
      uint64_t v7 = *(void *)(v4 + 8);
    }
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    int v9 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    if (v7 != size)
    {
      BOOL v15 = 0;
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_26;
      }
LABEL_25:
      operator delete(__p.__r_.__value_.__l.__data_);
      goto LABEL_26;
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((v6 & 0x80) != 0)
    {
      BOOL v15 = memcmp(*(const void **)v4, p_p, *(void *)(v4 + 8)) == 0;
      goto LABEL_24;
    }
    if (*(unsigned char *)(v4 + 23))
    {
      uint64_t v11 = 0;
      uint64_t v12 = v6 - 1;
      do
      {
        int v13 = *(unsigned __int8 *)(v4 + v11);
        int v14 = p_p->__r_.__value_.__s.__data_[v11];
        BOOL v15 = v13 == v14;
      }
      while (v13 == v14 && v12 != v11++);
LABEL_24:
      if ((v9 & 0x80000000) == 0) {
        goto LABEL_26;
      }
      goto LABEL_25;
    }
    BOOL v15 = 1;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_25;
    }
LABEL_26:
    if (v15) {
      break;
    }
    v4 += 56;
    if (v4 == v5) {
      goto LABEL_31;
    }
  }
  uint64_t v17 = *(void *)(v4 + 48);
  if (!v17) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t))(*(void *)v17 + 48))(v17);
}

void sub_192119464(_Unwind_Exception *a1)
{
}

void Espresso::AOT::Backends::CostModel::DecisionTreeModelRegistry::GetDecisionTreeModel(uint64_t a1@<X0>, uint64_t *a2@<X1>, const void **a3@<X2>, uint64_t a4@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EB4A3498, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EB4A3498))
  {
    operator new();
  }
  uint64_t v8 = *(void *)_MergedGlobals;
  uint64_t v9 = *(void *)(_MergedGlobals + 8);
  if (*(void *)_MergedGlobals == v9)
  {
LABEL_31:
    *(void *)(a4 + 24) = 0;
    return;
  }
  while (1)
  {
    Espresso::AOT::GetOperatorType(a1, &__p);
    uint64_t v10 = *(unsigned __int8 *)(v8 + 23);
    if ((v10 & 0x80u) == 0) {
      uint64_t v11 = *(unsigned __int8 *)(v8 + 23);
    }
    else {
      uint64_t v11 = *(void *)(v8 + 8);
    }
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    int v13 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    if (v11 != size)
    {
      BOOL v19 = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        goto LABEL_24;
      }
      goto LABEL_21;
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((v10 & 0x80) != 0)
    {
      BOOL v19 = memcmp(*(const void **)v8, p_p, *(void *)(v8 + 8)) == 0;
      if (v13 < 0) {
        goto LABEL_24;
      }
      goto LABEL_21;
    }
    if (*(unsigned char *)(v8 + 23)) {
      break;
    }
    BOOL v19 = 1;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_24;
    }
LABEL_21:
    if (v19) {
      goto LABEL_32;
    }
LABEL_25:
    v8 += 48;
    if (v8 == v9) {
      goto LABEL_31;
    }
  }
  uint64_t v15 = 0;
  uint64_t v16 = v10 - 1;
  do
  {
    int v17 = *(unsigned __int8 *)(v8 + v15);
    int v18 = p_p->__r_.__value_.__s.__data_[v15];
    BOOL v19 = v17 == v18;
  }
  while (v17 == v18 && v16 != v15++);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_21;
  }
LABEL_24:
  operator delete(__p.__r_.__value_.__l.__data_);
  if (!v19) {
    goto LABEL_25;
  }
LABEL_32:
  uint64_t v102 = a4;
  std::string::size_type v21 = &__p;
  BOOL v24 = *(uint64_t ***)(v8 + 32);
  int v22 = (uint64_t **)(v8 + 32);
  int v23 = v24;
  if (!v24) {
    goto LABEL_70;
  }
  int v25 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  long long v101 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v26 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v26 = __p.__r_.__value_.__l.__size_;
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v21 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  int v27 = v22;
  long long v28 = v23;
  do
  {
    int v29 = *((char *)v28 + 55);
    if (v29 >= 0) {
      size_t v30 = *((unsigned __int8 *)v28 + 55);
    }
    else {
      size_t v30 = (size_t)v28[5];
    }
    if (v29 >= 0) {
      int v31 = (uint64_t *)(v28 + 4);
    }
    else {
      int v31 = v28[4];
    }
    if (v26 >= v30) {
      size_t v32 = v30;
    }
    else {
      size_t v32 = v26;
    }
    int v33 = memcmp(v31, v21, v32);
    BOOL v34 = v30 < v26;
    if (v33) {
      BOOL v34 = v33 < 0;
    }
    BOOL v35 = !v34;
    if (v34) {
      uint64_t v36 = (uint64_t ***)(v28 + 1);
    }
    else {
      uint64_t v36 = (uint64_t ***)v28;
    }
    if (v35) {
      int v27 = v28;
    }
    long long v28 = *v36;
  }
  while (*v36);
  if (v27 == v22) {
    goto LABEL_70;
  }
  unint64_t v39 = v27[4];
  uint64_t v38 = v27 + 4;
  uint64_t v37 = v39;
  int v40 = *((char *)v38 + 23);
  if (v40 >= 0) {
    size_t v41 = *((unsigned __int8 *)v38 + 23);
  }
  else {
    size_t v41 = v38[1];
  }
  if (v40 >= 0) {
    std::string v42 = v38;
  }
  else {
    std::string v42 = v37;
  }
  if (v41 >= v26) {
    size_t v43 = v26;
  }
  else {
    size_t v43 = v41;
  }
  int v44 = memcmp(v21, v42, v43);
  BOOL v45 = v26 < v41;
  if (v44) {
    BOOL v45 = v44 < 0;
  }
  if (v45)
  {
LABEL_70:
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      std::string __p = v104;
      uint64_t v46 = (uint64_t)*v22;
      if (!*v22) {
        goto LABEL_112;
      }
    }
    else
    {
      std::string __p = v104;
      uint64_t v46 = (uint64_t)*v22;
      if (!*v22) {
        goto LABEL_112;
      }
    }
    int v25 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    *((void *)&v101 + 1) = __p.__r_.__value_.__l.__size_;
    std::string::size_type v47 = __p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v48 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v48 = __p.__r_.__value_.__l.__size_;
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v49 = &__p;
    }
    else {
      long long v49 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    uint64_t v50 = v22;
    do
    {
      int v51 = *(char *)(v46 + 55);
      if (v51 >= 0) {
        size_t v52 = *(unsigned __int8 *)(v46 + 55);
      }
      else {
        size_t v52 = *(void *)(v46 + 40);
      }
      if (v51 >= 0) {
        long long v53 = (const void *)(v46 + 32);
      }
      else {
        long long v53 = *(const void **)(v46 + 32);
      }
      if (v48 >= v52) {
        size_t v54 = v52;
      }
      else {
        size_t v54 = v48;
      }
      int v55 = memcmp(v53, v49, v54);
      BOOL v56 = v52 < v48;
      if (v55) {
        BOOL v56 = v55 < 0;
      }
      BOOL v57 = !v56;
      if (v56) {
        long long v58 = (uint64_t *)(v46 + 8);
      }
      else {
        long long v58 = (uint64_t *)v46;
      }
      if (v57) {
        uint64_t v50 = (uint64_t **)v46;
      }
      uint64_t v46 = *v58;
    }
    while (*v58);
    if (v50 == v22) {
      goto LABEL_112;
    }
    float v61 = v50[4];
    uint64_t v60 = v50 + 4;
    long long v59 = v61;
    int v62 = *((char *)v60 + 23);
    if (v62 >= 0) {
      size_t v63 = *((unsigned __int8 *)v60 + 23);
    }
    else {
      size_t v63 = v60[1];
    }
    if (v62 >= 0) {
      uint64_t v64 = v60;
    }
    else {
      uint64_t v64 = v59;
    }
    if (v63 >= v48) {
      size_t v65 = v48;
    }
    else {
      size_t v65 = v63;
    }
    int v66 = memcmp(v49, v64, v65);
    BOOL v67 = v48 < v63;
    if (v66) {
      BOOL v67 = v66 < 0;
    }
    if (v67)
    {
LABEL_112:
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        std::string __p = v103;
        uint64_t v68 = (uint64_t)*v22;
        if (!*v22) {
          goto LABEL_154;
        }
      }
      else
      {
        std::string __p = v103;
        uint64_t v68 = (uint64_t)*v22;
        if (!*v22) {
          goto LABEL_154;
        }
      }
      int v25 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
      std::string::size_type v69 = __p.__r_.__value_.__l.__size_;
      std::string::size_type v47 = __p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v70 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v70 = __p.__r_.__value_.__l.__size_;
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unsigned int v71 = &__p;
      }
      else {
        unsigned int v71 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      float v72 = v22;
      do
      {
        int v73 = *(char *)(v68 + 55);
        if (v73 >= 0) {
          size_t v74 = *(unsigned __int8 *)(v68 + 55);
        }
        else {
          size_t v74 = *(void *)(v68 + 40);
        }
        if (v73 >= 0) {
          uint64_t v75 = (const void *)(v68 + 32);
        }
        else {
          uint64_t v75 = *(const void **)(v68 + 32);
        }
        if (v70 >= v74) {
          size_t v76 = v74;
        }
        else {
          size_t v76 = v70;
        }
        int v77 = memcmp(v75, v71, v76);
        BOOL v78 = v74 < v70;
        if (v77) {
          BOOL v78 = v77 < 0;
        }
        BOOL v79 = !v78;
        if (v78) {
          int v80 = (uint64_t *)(v68 + 8);
        }
        else {
          int v80 = (uint64_t *)v68;
        }
        if (v79) {
          float v72 = (uint64_t **)v68;
        }
        uint64_t v68 = *v80;
      }
      while (*v80);
      if (v72 == v22) {
        goto LABEL_154;
      }
      double v83 = v72[4];
      int v82 = v72 + 4;
      uint64_t v81 = v83;
      int v84 = *((char *)v82 + 23);
      if (v84 >= 0) {
        size_t v85 = *((unsigned __int8 *)v82 + 23);
      }
      else {
        size_t v85 = v82[1];
      }
      if (v84 >= 0) {
        unint64_t v86 = v82;
      }
      else {
        unint64_t v86 = v81;
      }
      if (v85 >= v70) {
        size_t v87 = v70;
      }
      else {
        size_t v87 = v85;
      }
      int v88 = memcmp(v71, v86, v87);
      BOOL v89 = v70 < v85;
      if (v88) {
        BOOL v89 = v88 < 0;
      }
      if (v89)
      {
LABEL_154:
        *(void *)(v102 + 24) = 0;
        if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v104.__r_.__value_.__l.__data_);
        }
        if (v106 < 0) {
          operator delete(v105[0]);
        }
        LOBYTE(v25) = *((unsigned char *)&__p.__r_.__value_.__s + 23);
        goto LABEL_194;
      }
      *((void *)&v101 + 1) = v69;
      if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v104.__r_.__value_.__l.__data_);
      }
    }
    *(void *)&long long v101 = v47;
    if (v106 < 0) {
      operator delete(v105[0]);
    }
    int v23 = (uint64_t **)*v22;
  }
  if (!v23) {
LABEL_188:
  }
    std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
  if (v25 >= 0) {
    size_t v90 = v25;
  }
  else {
    size_t v90 = *((void *)&v101 + 1);
  }
  if (v25 >= 0) {
    uint64_t v91 = &__p;
  }
  else {
    uint64_t v91 = (std::string *)v101;
  }
  while (1)
  {
    while (1)
    {
      int v92 = *((char *)v23 + 55);
      if (v92 >= 0) {
        size_t v93 = *((unsigned __int8 *)v23 + 55);
      }
      else {
        size_t v93 = (size_t)v23[5];
      }
      if (v92 >= 0) {
        double v94 = (uint64_t *)(v23 + 4);
      }
      else {
        double v94 = v23[4];
      }
      if (v93 >= v90) {
        size_t v95 = v90;
      }
      else {
        size_t v95 = v93;
      }
      int v96 = memcmp(v91, v94, v95);
      BOOL v97 = v90 < v93;
      if (v96) {
        BOOL v97 = v96 < 0;
      }
      if (!v97) {
        break;
      }
      int v23 = (uint64_t **)*v23;
      if (!v23) {
        goto LABEL_188;
      }
    }
    int v98 = memcmp(v94, v91, v95);
    BOOL v99 = v93 < v90;
    if (v98) {
      BOOL v99 = v98 < 0;
    }
    if (!v99) {
      break;
    }
    int v23 = (uint64_t **)v23[1];
    if (!v23) {
      goto LABEL_188;
    }
  }
  int v100 = v23[10];
  if (v100)
  {
    if (v100 == (uint64_t *)(v23 + 7))
    {
      *(void *)(v102 + 24) = v102;
      (*(void (**)(uint64_t *, uint64_t))(*v23[10] + 24))(v23[10], v102);
    }
    else
    {
      *(void *)(v102 + 24) = (*(uint64_t (**)(uint64_t *))(*v100 + 16))(v100);
    }
  }
  else
  {
    *(void *)(v102 + 24) = 0;
  }
LABEL_194:
  if ((v25 & 0x80) != 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_192119B04(_Unwind_Exception *a1)
{
}

void sub_192119B1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::AOT::GetOperatorType(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  char v11 = 1;
  LOWORD(__p[0]) = 46;
  E5Common::StringUtils::Split((uint64_t *)a1, (char *)__p, (uint64_t)&v12);
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v4 = (void **)v12;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)v13 - (unsigned char *)v12) >> 3) >= 3)
  {
    if (*(char *)(a1 + 23) >= 0) {
      uint64_t v9 = (void *)a1;
    }
    else {
      uint64_t v9 = *(void **)a1;
    }
    __p[0] = v9;
    Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long long &>("Unsupported operator name: %s", __p);
  }
  uint64_t v5 = (char *)v12 + 24 * ((char *)v13 - (unsigned char *)v12 == 48);
  if (v5[23] < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)v5, *((void *)v5 + 1));
    uint64_t v4 = (void **)v12;
    if (!v12) {
      return;
    }
  }
  else
  {
    long long v6 = *(_OWORD *)v5;
    a2->__r_.__value_.__r.__words[2] = *((void *)v5 + 2);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v6;
  }
  uint64_t v7 = v13;
  uint64_t v8 = v4;
  if (v13 != v4)
  {
    do
    {
      if (*((char *)v7 - 1) < 0) {
        operator delete(*(v7 - 3));
      }
      v7 -= 3;
    }
    while (v7 != v4);
    uint64_t v8 = v12;
  }
  int v13 = v4;
  operator delete(v8);
}

void sub_192119CA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::vector<std::string>::~vector[abi:ne180100]((void **)va);
  _Unwind_Resume(a1);
}

void sub_192119CB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void E5Common::StringUtils::Split(uint64_t *a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = a1;
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = a2[23];
  if ((v5 & 0x80u) != 0) {
    uint64_t v5 = *((void *)a2 + 1);
  }
  if (v5)
  {
    unint64_t v7 = 0;
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    uint64_t v33 = a3;
    while (1)
    {
      unint64_t v8 = *((unsigned __int8 *)v3 + 23);
      uint64_t v10 = (uint64_t *)*v3;
      unint64_t v9 = v3[1];
      if ((v8 & 0x80u) == 0) {
        uint64_t v11 = (uint64_t)v3;
      }
      else {
        uint64_t v11 = *v3;
      }
      if ((v8 & 0x80u) == 0) {
        unint64_t v12 = *((unsigned __int8 *)v3 + 23);
      }
      else {
        unint64_t v12 = v3[1];
      }
      int v13 = a2[23];
      if (v13 >= 0) {
        int v14 = a2;
      }
      else {
        int v14 = *(char **)a2;
      }
      if (v13 >= 0) {
        int64_t v15 = a2[23];
      }
      else {
        int64_t v15 = *((void *)a2 + 1);
      }
      if (v12 >= v7)
      {
        uint64_t v16 = v7;
        if (v15)
        {
          int v17 = (void *)(v11 + v7);
          int v18 = (char *)(v11 + v12);
          int64_t v19 = v12 - v7;
          if (v19 >= v15)
          {
            uint64_t v31 = v11;
            int v21 = *v14;
            do
            {
              uint64_t v22 = v19 - v15;
              if (v22 == -1) {
                break;
              }
              int v23 = (char *)memchr(v17, v21, v22 + 1);
              if (!v23) {
                break;
              }
              unint64_t v20 = v23;
              if (!memcmp(v23, v14, v15)) {
                goto LABEL_29;
              }
              int v17 = v20 + 1;
              int64_t v19 = v18 - (v20 + 1);
            }
            while (v19 >= v15);
            unint64_t v20 = v18;
LABEL_29:
            a3 = v33;
            uint64_t v11 = v31;
          }
          else
          {
            unint64_t v20 = v18;
          }
          if (v20 == v18) {
            uint64_t v16 = -1;
          }
          else {
            uint64_t v16 = (uint64_t)&v20[-v11];
          }
          uint64_t v3 = a1;
        }
      }
      else
      {
        uint64_t v16 = -1;
      }
      if ((v8 & 0x80) != 0)
      {
        if (v9 < v7) {
LABEL_67:
        }
          std::string::__throw_out_of_range[abi:ne180100]();
        unint64_t v8 = v9;
      }
      else
      {
        uint64_t v10 = v3;
        if (v7 > v8) {
          goto LABEL_67;
        }
      }
      if (v8 - v7 >= v16 - v7) {
        std::string::size_type v24 = v16 - v7;
      }
      else {
        std::string::size_type v24 = v8 - v7;
      }
      if (v24 >= 0x7FFFFFFFFFFFFFF8) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      if (v24 >= 0x17)
      {
        uint64_t v28 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v24 | 7) != 0x17) {
          uint64_t v28 = v24 | 7;
        }
        uint64_t v29 = v28 + 1;
        p_dst = (std::string *)operator new(v28 + 1);
        __dst.__r_.__value_.__l.__size_ = v24;
        __dst.__r_.__value_.__r.__words[2] = v29 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
        a3 = v33;
      }
      else
      {
        *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v24;
        p_dst = &__dst;
        if (!v24)
        {
          __dst.__r_.__value_.__s.__data_[0] = 0;
          std::string::size_type v26 = *(std::string **)(a3 + 8);
          if ((unint64_t)v26 >= *(void *)(a3 + 16)) {
            goto LABEL_52;
          }
          goto LABEL_46;
        }
      }
      memmove(p_dst, (char *)v10 + v7, v24);
      p_dst->__r_.__value_.__s.__data_[v24] = 0;
      std::string::size_type v26 = *(std::string **)(a3 + 8);
      if ((unint64_t)v26 >= *(void *)(a3 + 16))
      {
LABEL_52:
        *(void *)(a3 + 8) = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)a3, (uint64_t)&__dst);
        if (v16 != -1) {
          goto LABEL_53;
        }
        goto LABEL_56;
      }
LABEL_46:
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(v26, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
      }
      else
      {
        long long v27 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
        v26->__r_.__value_.__r.__words[2] = __dst.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v26->__r_.__value_.__l.__data_ = v27;
      }
      *(void *)(a3 + 8) = v26 + 1;
      *(void *)(a3 + 8) = v26 + 1;
      if (v16 != -1)
      {
LABEL_53:
        uint64_t v30 = a2[23];
        if ((v30 & 0x80u) != 0) {
          uint64_t v30 = *((void *)a2 + 1);
        }
        unint64_t v7 = v30 + v16;
      }
LABEL_56:
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__dst.__r_.__value_.__l.__data_);
      }
      if (v16 == -1) {
        return;
      }
    }
  }
  if (*((char *)a1 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__dst, (const std::string::value_type *)*a1, a1[1]);
  }
  else {
    std::string __dst = *(std::string *)a1;
  }
  std::vector<std::string>::vector[abi:ne180100]((void *)a3, (uint64_t)&__dst, 1uLL);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
}

void sub_192119FE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::vector<std::string>::__push_back_slow_path<std::string const&>(char **a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  if (0x5555555555555556 * ((a1[2] - v3) >> 3) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - v3) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3) >= 0x555555555555555) {
    unint64_t v8 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v8 = v6;
  }
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    unint64_t v9 = (char *)operator new(24 * v8);
  }
  else
  {
    unint64_t v9 = 0;
  }
  uint64_t v10 = (std::string *)&v9[24 * v5];
  uint64_t v16 = v10;
  int v17 = v10;
  int v18 = &v9[24 * v8];
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    uint64_t v3 = *a1;
    uint64_t v4 = a1[1];
    uint64_t v10 = v16;
    uint64_t v11 = v17 + 1;
    if (v4 == *a1)
    {
LABEL_17:
      int v13 = v3;
      goto LABEL_18;
    }
  }
  else
  {
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    v10->__r_.__value_.__r.__words[2] = *(void *)(a2 + 16);
    uint64_t v11 = v10 + 1;
    if (v4 == v3) {
      goto LABEL_17;
    }
  }
  do
  {
    long long v12 = *(_OWORD *)(v4 - 24);
    v10[-1].__r_.__value_.__r.__words[2] = *((void *)v4 - 1);
    *(_OWORD *)&v10[-1].__r_.__value_.__l.__data_ = v12;
    --v10;
    *((void *)v4 - 2) = 0;
    *((void *)v4 - 1) = 0;
    *((void *)v4 - 3) = 0;
    v4 -= 24;
  }
  while (v4 != v3);
  int v13 = *a1;
  uint64_t v3 = a1[1];
LABEL_18:
  *a1 = (char *)v10;
  a1[1] = (char *)v11;
  a1[2] = v18;
  if (v3 != v13)
  {
    int v14 = (void **)(v3 - 24);
    do
    {
      if (*((char *)v14 + 23) < 0) {
        operator delete(*v14);
      }
      v14 -= 3;
    }
    while (v14 + 3 != (void **)v13);
    uint64_t v3 = v13;
  }
  if (v3) {
    operator delete(v3);
  }
  return v11;
}

void sub_19211A200(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void Espresso::AOT::Backends::CostModel::anonymous namespace'::DecisionTreeGroup::GetKey(std::string *a1, uint64_t *a2, const void **a3)
{
  int v3 = *((char *)a3 + 23);
  if (v3 >= 0) {
    size_t v4 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v4 = (size_t)a3[1];
  }
  unint64_t v5 = v4 + 1;
  if (v4 + 1 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v5 >= 0x17)
  {
    uint64_t v10 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v10 = v5 | 7;
    }
    uint64_t v11 = v10 + 1;
    p_dst = (std::string *)operator new(v10 + 1);
    __dst.__r_.__value_.__l.__size_ = v4 + 1;
    __dst.__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v4 + 1;
    if (!v4) {
      goto LABEL_15;
    }
  }
  if (v3 >= 0) {
    long long v12 = a3;
  }
  else {
    long long v12 = *a3;
  }
  memmove(p_dst, v12, v4);
LABEL_15:
  *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v4) = 45;
  uint64_t v13 = *((unsigned __int8 *)a2 + 23);
  int v14 = (char)v13;
  if ((v13 & 0x80u) != 0) {
    uint64_t v13 = a2[1];
  }
  switch(v13)
  {
    case 3:
      if (v14 >= 0) {
        int64_t v15 = a2;
      }
      else {
        int64_t v15 = (uint64_t *)*a2;
      }
      if (*(_WORD *)v15 == 27757 && *((unsigned char *)v15 + 2) == 99) {
        goto LABEL_53;
      }
      if (*(_WORD *)v15 != 28257 || *((unsigned char *)v15 + 2) != 101) {
        goto LABEL_52;
      }
      std::string::size_type v18 = 3;
      char v31 = 3;
      qmemcpy(__p, "ane", 3);
      break;
    case 4:
      if (v14 >= 0) {
        int64_t v19 = a2;
      }
      else {
        int64_t v19 = (_DWORD *)*a2;
      }
      if (*v19 != 1936617058) {
        goto LABEL_52;
      }
      goto LABEL_53;
    case 9:
      if (v14 >= 0) {
        unint64_t v20 = a2;
      }
      else {
        unint64_t v20 = (uint64_t *)*a2;
      }
      uint64_t v21 = *v20;
      int v22 = *((unsigned __int8 *)v20 + 8);
      if (v21 != 0x706172675F73706DLL || v22 != 104) {
        goto LABEL_52;
      }
      std::string::size_type v18 = 3;
      char v31 = 3;
      __int16 v24 = 28775;
      goto LABEL_54;
    case 11:
      if (v14 >= 0) {
        int v25 = a2;
      }
      else {
        int v25 = (uint64_t *)*a2;
      }
      uint64_t v26 = *v25;
      uint64_t v27 = *(uint64_t *)((char *)v25 + 3);
      if (v26 != 0x5F63697373616C63 || v27 != 0x7570635F63697373) {
        goto LABEL_52;
      }
LABEL_53:
      std::string::size_type v18 = 3;
      char v31 = 3;
      __int16 v24 = 28771;
LABEL_54:
      LOWORD(__p[0]) = v24;
      BYTE2(__p[0]) = 117;
      break;
    default:
LABEL_52:
      std::string::size_type v18 = 11;
      char v31 = 11;
      qmemcpy(__p, "unsupported", 11);
      break;
  }
  *((unsigned char *)__p + v18) = 0;
  uint64_t v29 = std::string::append(&__dst, (const std::string::value_type *)__p, v18);
  *a1 = *v29;
  v29->__r_.__value_.__l.__size_ = 0;
  v29->__r_.__value_.__r.__words[2] = 0;
  v29->__r_.__value_.__r.__words[0] = 0;
  if ((v31 & 0x80000000) == 0)
  {
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_59:
    operator delete(__dst.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p[0]);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_59;
  }
}

void sub_19211A4D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

void Espresso::AOT::Backends::CostModel::anonymous namespace'::DecisionTreeGroup::GetFallbackCostModelIdentifier(char *a1, int *a2)
{
  int v3 = (std::string *)a1;
  if (*((char *)a2 + 23) < 0)
  {
    if (*((void *)a2 + 1) == 4)
    {
      unint64_t v5 = *(_DWORD **)a2;
      if (**(_DWORD **)a2 == 1345794376) {
        goto LABEL_18;
      }
      if (*v5 == 1345728840) {
        goto LABEL_19;
      }
      if (*v5 == 1194733896)
      {
LABEL_17:
        a1[23] = 4;
        strcpy(a1, "H15G");
        return;
      }
      if (*v5 != 1127625032)
      {
        if (*v5 != 1396060488) {
          goto LABEL_21;
        }
        goto LABEL_14;
      }
LABEL_20:
      a1[23] = 4;
      strcpy(a1, "H15C");
      return;
    }
  }
  else if (*((unsigned char *)a2 + 23) == 4)
  {
    int v4 = *a2;
    if (*a2 > 1345728839)
    {
      if (v4 != 1345728840)
      {
        if (v4 != 1396060488)
        {
          unint64_t v5 = a2;
          if (v4 != 1345794376)
          {
LABEL_21:
            if (*v5 == 1194668360)
            {
              unint64_t v6 = "H14G";
              goto LABEL_25;
            }
            goto LABEL_22;
          }
LABEL_18:
          a1[23] = 4;
          strcpy(a1, "H16P");
          return;
        }
LABEL_14:
        a1[23] = 4;
        strcpy(a1, "H15S");
        return;
      }
LABEL_19:
      a1[23] = 4;
      strcpy(a1, "H15P");
      return;
    }
    if (v4 != 1127625032)
    {
      unint64_t v5 = a2;
      if (v4 != 1194733896) {
        goto LABEL_21;
      }
      goto LABEL_17;
    }
    goto LABEL_20;
  }
LABEL_22:
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, "H15C")) {
    goto LABEL_23;
  }
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, "H15S"))
  {
    unint64_t v6 = "H14S";
    a1 = (char *)v3;
    goto LABEL_25;
  }
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, "H14D"))
  {
LABEL_23:
    unint64_t v6 = "H14C";
    a1 = (char *)v3;
LABEL_25:
    std::string::basic_string[abi:ne180100]<0>(a1, v6);
    return;
  }
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, "H13D"))
  {
    unint64_t v6 = "H13C";
    a1 = (char *)v3;
    goto LABEL_25;
  }
  if (*((char *)a2 + 23) < 0)
  {
    unint64_t v7 = *(const std::string::value_type **)a2;
    std::string::size_type v8 = *((void *)a2 + 1);
    std::string::__init_copy_ctor_external(v3, v7, v8);
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    v3->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
  }
}

double Espresso::AOT::GetYDimOfTensorFromIRValueType(Espresso::AOT *this, const MIL::IRValueType *a2)
{
  if (!(*(uint64_t (**)(Espresso::AOT *, const MIL::IRValueType *))(*(void *)this + 24))(this, a2)) {
    return (double)1uLL;
  }
  uint64_t v3 = MIL::IRValueType::AsTensorType(this);
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 96))(v3);
  unint64_t v6 = *(const void **)v4;
  uint64_t v5 = *(void *)(v4 + 8);
  int64_t v7 = v5 - *(void *)v4;
  if (v5 == *(void *)v4)
  {
    std::string::size_type v8 = 0;
    goto LABEL_11;
  }
  if (v7 < 0) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  std::string::size_type v8 = (char *)operator new(v5 - *(void *)v4);
  unint64_t v9 = &v8[8 * (v7 >> 3)];
  memcpy(v8, v6, v7);
  if ((unint64_t)(8 * (v7 >> 3)) < 9
    || !(*(uint64_t (**)(void))(**((void **)v9 - 2) + 16))(*((void *)v9 - 2)))
  {
LABEL_11:
    unint64_t v12 = 1;
    if (!v8) {
      return (double)v12;
    }
    goto LABEL_12;
  }
  uint64_t v11 = MIL::IRDimension::AsConstant(*((MIL::IRDimension **)v9 - 2));
  unint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 48))(v11);
  if (!v8) {
    return (double)v12;
  }
LABEL_12:
  operator delete(v8);
  return (double)v12;
}

void sub_19211A9BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (v11) {
    operator delete(v11);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::AOT::GetDimsOfTensorFromIRValueType(Espresso::AOT *this@<X0>, const MIL::IRValueType *a2@<X1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if ((*(uint64_t (**)(Espresso::AOT *, const MIL::IRValueType *))(*(void *)this + 24))(this, a2))
  {
    uint64_t v5 = MIL::IRValueType::AsTensorType(this);
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 96))(v5);
    std::string::size_type v8 = *(const void **)v6;
    uint64_t v7 = *(void *)(v6 + 8);
    int64_t v9 = v7 - *(void *)v6;
    if (v7 != *(void *)v6)
    {
      if (v9 < 0) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      size_t v54 = (char *)operator new(v7 - *(void *)v6);
      uint64_t v10 = &v54[8 * (v9 >> 3)];
      memcpy(v54, v8, v9);
      uint64_t v11 = (MIL::IRDimension **)v54;
      while (1)
      {
        uint64_t v13 = *v11;
        if (!(*(uint64_t (**)(MIL::IRDimension *))(*(void *)*v11 + 16))(*v11)) {
          break;
        }
        uint64_t v14 = MIL::IRDimension::AsConstant(v13);
        uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)v14 + 48))(v14);
        uint64_t v16 = v15;
        std::string::size_type v18 = (uint64_t *)a3[1];
        unint64_t v17 = a3[2];
        if ((unint64_t)v18 >= v17)
        {
          int64_t v19 = (void *)*a3;
          uint64_t v20 = (uint64_t)v18 - *a3;
          uint64_t v21 = v20 >> 3;
          unint64_t v22 = (v20 >> 3) + 1;
          if (v22 >> 61) {
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v23 = v17 - (void)v19;
          if (v23 >> 2 > v22) {
            unint64_t v22 = v23 >> 2;
          }
          if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v24 = v22;
          }
          if (v24)
          {
            if (v24 >> 61) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            int v25 = operator new(8 * v24);
            uint64_t v26 = (uint64_t *)&v25[8 * v21];
            *uint64_t v26 = v16;
            uint64_t v12 = (uint64_t)(v26 + 1);
            if (v18 == v19)
            {
LABEL_38:
              *a3 = v26;
              a3[1] = v12;
              a3[2] = &v25[8 * v24];
              if (!v19) {
                goto LABEL_6;
              }
LABEL_48:
              operator delete(v19);
              goto LABEL_6;
            }
          }
          else
          {
            int v25 = 0;
            uint64_t v26 = (uint64_t *)(8 * v21);
            *(void *)(8 * v21) = v16;
            uint64_t v12 = 8 * v21 + 8;
            if (v18 == v19) {
              goto LABEL_38;
            }
          }
          unint64_t v36 = (char *)(v18 - 1) - (char *)v19;
          if (v36 < 0x58) {
            goto LABEL_58;
          }
          if ((unint64_t)((char *)v18 - &v25[v20]) < 0x20) {
            goto LABEL_58;
          }
          uint64_t v37 = (v36 >> 3) + 1;
          uint64_t v38 = 8 * (v37 & 0x3FFFFFFFFFFFFFFCLL);
          unint64_t v39 = &v18[v38 / 0xFFFFFFFFFFFFFFF8];
          uint64_t v26 = (uint64_t *)((char *)v26 - v38);
          int v40 = &v25[8 * v21 - 16];
          size_t v41 = v18 - 2;
          uint64_t v42 = v37 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v43 = *(_OWORD *)v41;
            *(v40 - 1) = *((_OWORD *)v41 - 1);
            *int v40 = v43;
            v40 -= 2;
            v41 -= 4;
            v42 -= 4;
          }
          while (v42);
          std::string::size_type v18 = v39;
          if (v37 != (v37 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_58:
            do
            {
              uint64_t v44 = *--v18;
              *--uint64_t v26 = v44;
            }
            while (v18 != v19);
          }
          goto LABEL_38;
        }
        *std::string::size_type v18 = v15;
        uint64_t v12 = (uint64_t)(v18 + 1);
LABEL_6:
        a3[1] = v12;
        if (++v11 == (MIL::IRDimension **)v10)
        {
          operator delete(v54);
          return;
        }
      }
      uint64_t v28 = (char *)a3[1];
      unint64_t v27 = a3[2];
      if ((unint64_t)v28 < v27)
      {
        *(void *)uint64_t v28 = 1;
        uint64_t v12 = (uint64_t)(v28 + 8);
        goto LABEL_6;
      }
      int64_t v19 = (void *)*a3;
      uint64_t v29 = (uint64_t)&v28[-*a3];
      uint64_t v30 = v29 >> 3;
      unint64_t v31 = (v29 >> 3) + 1;
      if (v31 >> 61) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v32 = v27 - (void)v19;
      if (v32 >> 2 > v31) {
        unint64_t v31 = v32 >> 2;
      }
      if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v33 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v33 = v31;
      }
      if (v33)
      {
        if (v33 >> 61) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        BOOL v34 = operator new(8 * v33);
        uint64_t v35 = &v34[8 * v30];
        *uint64_t v35 = 1;
        uint64_t v12 = (uint64_t)(v35 + 1);
        if (v28 == (char *)v19)
        {
LABEL_47:
          *a3 = v35;
          a3[1] = v12;
          a3[2] = &v34[8 * v33];
          if (v19) {
            goto LABEL_48;
          }
          goto LABEL_6;
        }
      }
      else
      {
        BOOL v34 = 0;
        uint64_t v35 = (void *)(8 * v30);
        *(void *)(8 * v30) = 1;
        uint64_t v12 = 8 * v30 + 8;
        if (v28 == (char *)v19) {
          goto LABEL_47;
        }
      }
      unint64_t v45 = v28 - 8 - (char *)v19;
      if (v45 < 0x58) {
        goto LABEL_59;
      }
      if ((unint64_t)(v28 - &v34[v29]) < 0x20) {
        goto LABEL_59;
      }
      uint64_t v46 = (v45 >> 3) + 1;
      uint64_t v47 = 8 * (v46 & 0x3FFFFFFFFFFFFFFCLL);
      std::string::size_type v48 = &v28[-v47];
      uint64_t v35 = (void *)((char *)v35 - v47);
      long long v49 = &v34[8 * v30 - 16];
      uint64_t v50 = v28 - 16;
      uint64_t v51 = v46 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v52 = *(_OWORD *)v50;
        *(v49 - 1) = *((_OWORD *)v50 - 1);
        *long long v49 = v52;
        v49 -= 2;
        v50 -= 32;
        v51 -= 4;
      }
      while (v51);
      uint64_t v28 = v48;
      if (v46 != (v46 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_59:
        do
        {
          uint64_t v53 = *((void *)v28 - 1);
          v28 -= 8;
          *--uint64_t v35 = v53;
        }
        while (v28 != (char *)v19);
      }
      goto LABEL_47;
    }
  }
}

void sub_19211ADE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *__p, uint64_t a11)
{
  if (__p)
  {
    operator delete(__p);
    uint64_t v13 = *(void **)v11;
    if (!*(void *)v11) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    uint64_t v13 = *(void **)v11;
    if (!*(void *)v11) {
      goto LABEL_3;
    }
  }
  *(void *)(v11 + 8) = v13;
  operator delete(v13);
  _Unwind_Resume(exception_object);
}

double Espresso::AOT::GetWU16EfficiencyForInputType(Espresso::AOT *this, const MIL::IRValueType *a2)
{
  double XDimOfTensorFromIRValueType = Espresso::AOT::GetXDimOfTensorFromIRValueType(this, a2);
  double YDimOfTensorFromIRValueType = Espresso::AOT::GetYDimOfTensorFromIRValueType(this, v4);
  return YDimOfTensorFromIRValueType
       * XDimOfTensorFromIRValueType
       / (floor(XDimOfTensorFromIRValueType * 0.0625 + 0.9375)
        * 256.0
        * floor(YDimOfTensorFromIRValueType * 0.0625 + 0.9375));
}

double Espresso::AOT::GetChannelDimOfTensorFromIRValueType(Espresso::AOT *this, const MIL::IRValueType *a2)
{
  double v3 = 1.0;
  if ((*(uint64_t (**)(Espresso::AOT *, const MIL::IRValueType *))(*(void *)this + 24))(this, a2))
  {
    uint64_t v4 = MIL::IRValueType::AsTensorType(this);
    uint64_t v5 = (MIL::IRDimension ***)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 96))(v4);
    if ((unint64_t)((char *)v5[1] - (char *)*v5) < 9)
    {
      uint64_t v7 = MIL::IRValueType::AsTensorType(this);
      std::string::size_type v8 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v7 + 96))(v7);
      if (v8[1] - *v8 == 8)
      {
        if (v5[1] == *v5) {
          goto LABEL_12;
        }
        if ((*(uint64_t (**)(void))(*(void *)**v5 + 16))())
        {
          uint64_t v6 = *v5;
          if (v5[1] != *v5) {
            goto LABEL_10;
          }
          goto LABEL_12;
        }
      }
    }
    else if ((*(uint64_t (**)(MIL::IRDimension *))(*(void *)(*v5)[1] + 16))((*v5)[1]))
    {
      if ((unint64_t)((char *)v5[1] - (char *)*v5) > 8)
      {
        uint64_t v6 = *v5 + 1;
LABEL_10:
        uint64_t v9 = MIL::IRDimension::AsConstant(*v6);
        return (double)(unint64_t)(*(uint64_t (**)(uint64_t))(*(void *)v9 + 48))(v9);
      }
LABEL_12:
      std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
    }
  }
  return v3;
}

double Espresso::AOT::GetBatchDimOfTensorFromIRValueType(Espresso::AOT *this, const MIL::IRValueType *a2)
{
  double v3 = 1.0;
  if ((*(uint64_t (**)(Espresso::AOT *, const MIL::IRValueType *))(*(void *)this + 24))(this, a2))
  {
    uint64_t v4 = MIL::IRValueType::AsTensorType(this);
    uint64_t v5 = (MIL::IRDimension ***)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 96))(v4);
    if (v5[1] != *v5)
    {
      uint64_t v6 = v5;
      if ((*(uint64_t (**)(void))(*(void *)**v5 + 16))())
      {
        if (v6[1] == *v6) {
          std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
        }
        uint64_t v7 = MIL::IRDimension::AsConstant(**v6);
        return (double)(unint64_t)(*(uint64_t (**)(uint64_t))(*(void *)v7 + 48))(v7);
      }
    }
  }
  return v3;
}

double Espresso::AOT::GetFlopCountForMatMul(char **a1, int a2, char **a3, int a4)
{
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  double result = 0.0;
  if (*a1 != v4)
  {
    std::string::size_type v8 = *a3;
    uint64_t v7 = a3[1];
    if (*a3 != v7)
    {
      uint64_t v9 = v4 - v5;
      unint64_t v10 = v4 - v5 - 8;
      if (v4 - v5 == 8)
      {
        double result = 1.0;
        if (v7 - v8 == 8) {
          return result;
        }
      }
      else if ((unint64_t)v9 >= 9)
      {
        uint64_t v11 = *((void *)v4 - 2);
        int v12 = 1;
        goto LABEL_9;
      }
      int v12 = 0;
      uint64_t v11 = 1;
LABEL_9:
      if ((v12 & a2) != 0) {
        uint64_t v13 = *((void *)v4 - 1);
      }
      else {
        uint64_t v13 = v11;
      }
      if ((v12 & a2) == 0) {
        uint64_t v11 = *((void *)v4 - 1);
      }
      uint64_t v14 = v7 - v8;
      if ((unint64_t)(v7 - v8) < 9)
      {
        uint64_t v16 = 1;
      }
      else
      {
        uint64_t v15 = -8;
        if (a4) {
          uint64_t v15 = -16;
        }
        uint64_t v16 = *(void *)&v7[v15];
      }
      uint64_t v17 = v13 * v11 * v16;
      BOOL v18 = v14 > 16;
      BOOL v19 = v9 > 16;
      if (v9 > 16 || v14 >= 17)
      {
        uint64_t v20 = (v14 >> 3) - 3;
        uint64_t v21 = (v9 >> 3) - 3;
        while (1)
        {
          uint64_t v22 = v20;
          if (v19)
          {
            unint64_t v23 = *(void *)&v5[8 * v21];
            if (v18) {
              goto LABEL_26;
            }
          }
          else
          {
            unint64_t v23 = 1;
            if (v18)
            {
LABEL_26:
              unint64_t v24 = *(void *)&v8[8 * v20];
              goto LABEL_27;
            }
          }
          unint64_t v24 = 1;
LABEL_27:
          if (v23 > v24) {
            unint64_t v24 = v23;
          }
          v17 *= v24;
          uint64_t v25 = v21 - 1;
          --v20;
          BOOL v18 = v22 > 0;
          BOOL v26 = v21 <= 0;
          BOOL v19 = v21-- > 0;
          if (v26)
          {
            uint64_t v21 = v25;
            if (v22 <= 0) {
              break;
            }
          }
        }
      }
      double v27 = 0.0;
      double v28 = 0.0;
      if ((unint64_t)v9 < 0x10 || !a2)
      {
LABEL_41:
        double v37 = v28 + (double)(unint64_t)(2 * v17);
        if ((unint64_t)v14 < 0x10 || !a4) {
          return v37 + v27;
        }
        if ((unint64_t)(v14 - 8) >= 8)
        {
          unint64_t v40 = ((unint64_t)(v14 - 8) >> 3) + 1;
          unint64_t v39 = &v8[8 * (v40 & 0x3FFFFFFFFFFFFFFELL)];
          size_t v41 = v8 + 8;
          uint64_t v42 = 1;
          uint64_t v43 = v40 & 0x3FFFFFFFFFFFFFFELL;
          uint64_t v44 = 1;
          do
          {
            v42 *= *(v41 - 1);
            v44 *= *v41;
            v41 += 2;
            v43 -= 2;
          }
          while (v43);
          unint64_t v38 = v44 * v42;
          if (v40 == (v40 & 0x3FFFFFFFFFFFFFFELL)) {
            goto LABEL_49;
          }
        }
        else
        {
          unint64_t v38 = 1;
          unint64_t v39 = v8;
        }
        do
        {
          uint64_t v45 = *(void *)v39;
          v39 += 8;
          v38 *= v45;
        }
        while (v39 != v7);
LABEL_49:
        double v27 = (double)v38;
        return v37 + v27;
      }
      if (v10 >= 8)
      {
        uint64_t v31 = (v10 >> 3) + 1;
        uint64_t v30 = &v5[8 * (v31 & 0x3FFFFFFFFFFFFFFELL)];
        uint64_t v32 = v5 + 8;
        uint64_t v33 = 1;
        uint64_t v34 = v31 & 0x3FFFFFFFFFFFFFFELL;
        uint64_t v35 = 1;
        do
        {
          v33 *= *(v32 - 1);
          v35 *= *v32;
          v32 += 2;
          v34 -= 2;
        }
        while (v34);
        unint64_t v29 = v35 * v33;
        if (v31 == (v31 & 0x3FFFFFFFFFFFFFFELL)) {
          goto LABEL_40;
        }
      }
      else
      {
        unint64_t v29 = 1;
        uint64_t v30 = v5;
      }
      do
      {
        uint64_t v36 = *(void *)v30;
        v30 += 8;
        v29 *= v36;
      }
      while (v30 != v4);
LABEL_40:
      double v28 = (double)v29;
      goto LABEL_41;
    }
  }
  return result;
}

void std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_7,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_7>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::operator()()
{
}

void ___ZN8Espresso17generic_factory_t6sharedERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEU13block_pointerFNS1_10shared_ptrIS0_EEvE_block_invoke_2(void *a1)
{
  uint64_t v2 = Espresso::factories;
  double v3 = (long long *)a1[6];
  uint64_t v4 = (uint64_t **)(Espresso::factories + 8);
  uint64_t v5 = *(void **)(Espresso::factories + 8);
  if (!v5) {
    goto LABEL_8;
  }
  uint64_t v6 = (uint64_t **)(Espresso::factories + 8);
  do
  {
    BOOL v7 = std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v5 + 4, v3);
    std::string::size_type v8 = v5 + 1;
    if (!v7)
    {
      std::string::size_type v8 = v5;
      uint64_t v6 = (uint64_t **)v5;
    }
    uint64_t v5 = (void *)*v8;
  }
  while (*v8);
  if (v6 == v4 || std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3, v6 + 4))
  {
LABEL_8:
    (*(void (**)(long long *__return_ptr))(a1[4] + 16))(&v17);
    uint64_t v9 = *v4;
    unint64_t v10 = v4;
    uint64_t v11 = v4;
    if (*v4)
    {
      while (1)
      {
        while (1)
        {
          unint64_t v10 = (uint64_t **)v9;
          int v12 = v9 + 4;
          if (!std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3, v9 + 4)) {
            break;
          }
          uint64_t v9 = *v10;
          uint64_t v11 = v10;
          if (!*v10) {
            goto LABEL_14;
          }
        }
        if (!std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v12, v3)) {
          break;
        }
        uint64_t v11 = v10 + 1;
        uint64_t v9 = v10[1];
        if (!v9) {
          goto LABEL_14;
        }
      }
      uint64_t v6 = v10;
    }
    else
    {
LABEL_14:
      uint64_t v6 = (uint64_t **)operator new(0x48uLL);
      v18[0] = v6;
      v18[1] = v4;
      char v19 = 0;
      uint64_t v13 = (std::string *)(v6 + 4);
      if (*((char *)v3 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v13, *(const std::string::value_type **)v3, *((void *)v3 + 1));
      }
      else
      {
        long long v14 = *v3;
        v6[6] = (uint64_t *)*((void *)v3 + 2);
        *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
      }
      *(_OWORD *)(v6 + 7) = v17;
      long long v17 = 0uLL;
      char v19 = 1;
      *uint64_t v6 = 0;
      v6[1] = 0;
      v6[2] = (uint64_t *)v10;
      *uint64_t v11 = (uint64_t *)v6;
      uint64_t v15 = **(void **)v2;
      uint64_t v16 = (uint64_t *)v6;
      if (v15)
      {
        *(void *)uint64_t v2 = v15;
        uint64_t v16 = *v11;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 8), v16);
      ++*(void *)(v2 + 16);
      v18[0] = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>>>>::reset[abi:ne180100]((uint64_t)v18);
    }
    if (*((void *)&v17 + 1)) {
      nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v17 + 1));
    }
  }
  *(void *)(*(void *)(a1[5] + 8) + 24) = v6[7];
}

void sub_19211B5AC(_Unwind_Exception *a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  if (a3) {
    nitro::nitro_function::nitro_function(a3);
  }
  _Unwind_Resume(a1);
}

void Espresso::generic_load_global_kernel::register_layer_io(uint64_t a1)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "load_global");
  uint64_t v2 = (std::__shared_weak_count *)operator new(0x20uLL);
  v2->__shared_owners_ = 0;
  v2->__shared_weak_owners_ = 0;
  v2->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38AE20;
  v2[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36DC78;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v2[1], (uint64_t)v2);
  nitro::nitro_function::nitro_function(v2);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
}

void sub_19211B680(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  nitro::nitro_function::nitro_function(v15);
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3)
  {
    *(void *)&long long v5 = a3;
    *((void *)&v5 + 1) = a4;
    if (a4) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(a4 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    long long v5 = 0uLL;
  }
  Espresso::generic_factory_t::register_object_(a1, a2, &v5);
  char v4 = (std::__shared_weak_count *)*((void *)&v5 + 1);
  if (*((void *)&v5 + 1))
  {
    nitro::nitro_function::nitro_function(v4);
  }
}

void sub_19211B720(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::generic_factory_t::register_object_(uint64_t a1, uint64_t a2, long long *a3)
{
  uint64_t v6 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  BOOL v7 = (uint64_t **)std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__find_equal<std::string>(a1 + 96, &v15, (void *)a2);
  std::string::size_type v8 = *v7;
  if (!*v7)
  {
    uint64_t v9 = v7;
    std::string::size_type v8 = (uint64_t *)operator new(0x48uLL);
    v13[0] = v8;
    v13[1] = a1 + 104;
    char v14 = 0;
    unint64_t v10 = (std::string *)(v8 + 4);
    if (*(char *)(a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)&v10->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
      v8[6] = *(void *)(a2 + 16);
    }
    v8[7] = 0;
    v8[8] = 0;
    char v14 = 1;
    std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at((uint64_t **)(a1 + 96), v15, v9, v8);
    v13[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>>>>::reset[abi:ne180100]((uint64_t)v13);
  }
  long long v11 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  int v12 = (std::__shared_weak_count *)v8[8];
  *(_OWORD *)(v8 + 7) = v11;
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }

  std::mutex::unlock(v6);
}

void sub_19211B844(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>>>>::reset[abi:ne180100]((uint64_t)&a9);
  std::mutex::unlock(v9);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  int v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<Espresso::abstract_blob_container>>,0>((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

void ___ZN8Espresso9factory_tINS_6SerDes21generic_serdes_objectEE6sharedEv_block_invoke(void *a1@<X8>)
{
  uint64_t v2 = (char *)operator new(0x90uLL);
  *(_OWORD *)(v2 + 8) = 0u;
  *(void *)uint64_t v2 = &unk_1EE38D350;
  *((void *)v2 + 4) = 850045863;
  *(_OWORD *)(v2 + 40) = 0u;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  *(_OWORD *)(v2 + 104) = 0u;
  *((void *)v2 + 11) = 0;
  *((void *)v2 + 12) = v2 + 104;
  *((_OWORD *)v2 + 8) = 0u;
  *((void *)v2 + 15) = v2 + 128;
  *((void *)v2 + 3) = &unk_1EE3775D8;
  Espresso::SerDes::generic_serdes_object::factory_initialize_registry((uint64_t)(v2 + 24));
  *a1 = v2 + 24;
  a1[1] = v2;
  atomic_fetch_add_explicit((atomic_ullong *volatile)v2 + 1, 1uLL, memory_order_relaxed);

  nitro::nitro_function::nitro_function((std::__shared_weak_count *)v2);
}

void sub_19211B994(_Unwind_Exception *a1)
{
  nitro::nitro_function::nitro_function(v1);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::generic_serdes_object::factory_initialize_registry(uint64_t a1)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "json");
  Espresso::generic_factory_t::register_type(a1, (uint64_t)__p, &__block_literal_global_2327);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
}

void sub_19211BA04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::generic_factory_t::register_type(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  std::mutex::lock((std::mutex *)(a1 + 8));
  uint64_t v6 = *(uint64_t **)(a1 + 80);
  BOOL v7 = (uint64_t **)(a1 + 80);
  std::string::size_type v8 = (uint64_t **)(a1 + 80);
  if (v6)
  {
    while (1)
    {
      while (1)
      {
        BOOL v7 = (uint64_t **)v6;
        uint64_t v9 = v6 + 4;
        if (!std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)a2, v6 + 4)) {
          break;
        }
        uint64_t v6 = *v7;
        std::string::size_type v8 = v7;
        if (!*v7) {
          goto LABEL_7;
        }
      }
      if (!std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v9, (void *)a2)) {
        break;
      }
      std::string::size_type v8 = v7 + 1;
      uint64_t v6 = v7[1];
      if (!v6) {
        goto LABEL_7;
      }
    }
    unint64_t v10 = v7;
  }
  else
  {
LABEL_7:
    unint64_t v10 = operator new(0x40uLL);
    v15[0] = v10;
    v15[1] = a1 + 80;
    char v16 = 0;
    long long v11 = (std::string *)(v10 + 4);
    if (*(char *)(a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)&v11->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
      v10[6] = *(void *)(a2 + 16);
    }
    v10[7] = 0;
    char v16 = 1;
    *unint64_t v10 = 0;
    v10[1] = 0;
    v10[2] = v7;
    uint64_t *v8 = v10;
    uint64_t v12 = **(void **)(a1 + 72);
    uint64_t v13 = v10;
    if (v12)
    {
      *(void *)(a1 + 72) = v12;
      uint64_t v13 = *v8;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 80), v13);
    ++*(void *)(a1 + 88);
    v15[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<Espresso::factory_object>({block_pointer} {__strong})(void)>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<Espresso::factory_object>({block_pointer} {__strong})(void)>,void *>>>>::reset[abi:ne180100]((uint64_t)v15);
  }
  char v14 = (void *)v10[7];
  v10[7] = v5;

  std::mutex::unlock((std::mutex *)(a1 + 8));
}

void sub_19211BB84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<Espresso::factory_object>({block_pointer} {__strong})(void)>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<Espresso::factory_object>({block_pointer} {__strong})(void)>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  std::mutex::unlock(v2);
  _Unwind_Resume(a1);
}

void ___ZN8Espresso9factory_tINS_6SerDes13layer_io_baseEE6sharedEv_block_invoke(void *a1@<X8>)
{
  uint64_t v2 = (char *)operator new(0x90uLL);
  *(_OWORD *)(v2 + 8) = 0u;
  *(void *)uint64_t v2 = &unk_1EE38D318;
  *((void *)v2 + 4) = 850045863;
  *(_OWORD *)(v2 + 40) = 0u;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  *(_OWORD *)(v2 + 104) = 0u;
  *((void *)v2 + 11) = 0;
  *((void *)v2 + 12) = v2 + 104;
  *((_OWORD *)v2 + 8) = 0u;
  *((void *)v2 + 15) = v2 + 128;
  *((void *)v2 + 3) = &unk_1EE3775B8;
  Espresso::SerDes::layer_io_base::factory_initialize_registry((uint64_t)(v2 + 24));
  *a1 = v2 + 24;
  a1[1] = v2;
  atomic_fetch_add_explicit((atomic_ullong *volatile)v2 + 1, 1uLL, memory_order_relaxed);

  nitro::nitro_function::nitro_function((std::__shared_weak_count *)v2);
}

void sub_19211BC88(_Unwind_Exception *a1)
{
  nitro::nitro_function::nitro_function(v1);
  _Unwind_Resume(a1);
}

uint64_t E5RT::E5OperandImpl::E5OperandImpl(uint64_t a1, long long *a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  char v14 = E5RT::E5Operand::E5Operand((void *)a1) + 1;
  E5RT::E5OperandBuilder::E5OperandBuilder(v14);
  *(void *)a1 = &unk_1EE324848;
  *(void *)(a1 + 8) = &unk_1EE3248C0;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 16), *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v15 = *a2;
    *(void *)(a1 + 32) = *((void *)a2 + 2);
    *(_OWORD *)(a1 + 16) = v15;
  }
  *(_OWORD *)(a1 + 56) = *(_OWORD *)a6;
  *(_DWORD *)(a1 + 40) = a4;
  *(void *)(a1 + 48) = a5;
  *(void *)a6 = 0;
  *(void *)(a6 + 8) = 0;
  std::unordered_set<std::string>::unordered_set(a1 + 72, a7);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)a3;
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  return a1;
}

void sub_19211BDB0(_Unwind_Exception *a1)
{
  E5RT::AsyncEventImpl::~AsyncEventImpl(v2);
  E5RT::AsyncEventImpl::~AsyncEventImpl(v1);
  _Unwind_Resume(a1);
}

void sub_19211BDEC(_Unwind_Exception *a1)
{
  E5RT::AsyncEventImpl::~AsyncEventImpl(v1);
  _Unwind_Resume(a1);
}

void *E5RT::E5Operand::E5Operand(void *this)
{
  *this = &unk_1EE326B28;
  return this;
}

void *E5RT::E5OperandBuilder::E5OperandBuilder(void *this)
{
  *this = &unk_1EE3258A8;
  return this;
}

void Espresso::ANERuntimeEngine::general_concat_kernel::~general_concat_kernel(Espresso::ANERuntimeEngine::general_concat_kernel *this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANERuntimeEngine::general_concat_kernel *)((char *)this + 288));

  Espresso::base_kernel::~base_kernel(this);
}

{
  uint64_t vars8;

  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANERuntimeEngine::general_concat_kernel *)((char *)this + 288));
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

void Espresso::ANERuntimeEngine::mix_pool_kernel::~mix_pool_kernel(Espresso::ANERuntimeEngine::mix_pool_kernel *this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANERuntimeEngine::mix_pool_kernel *)((char *)this + 432));

  Espresso::generic_pool_kernel::~generic_pool_kernel(this);
}

{
  uint64_t vars8;

  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANERuntimeEngine::mix_pool_kernel *)((char *)this + 432));
  Espresso::generic_pool_kernel::~generic_pool_kernel(this);

  JUMPOUT(0x192FF16B0);
}

void Espresso::ANERuntimeEngine::batchnorm_kernel::~batchnorm_kernel(Espresso::ANERuntimeEngine::batchnorm_kernel *this)
{
  *(void *)this = &unk_1EE341440;
  uint64_t v2 = (Espresso::ANERuntimeEngine::batchnorm_kernel *)((char *)this + 400);
  *((void *)this + 50) = &unk_1EE3415F8;
  char v3 = (std::__shared_weak_count *)*((void *)this + 78);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(v2);

  Espresso::generic_batchnorm_kernel::~generic_batchnorm_kernel(this);
}

{
  Espresso::ANECompilerEngine::ane_kernel *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EE341440;
  uint64_t v2 = (Espresso::ANERuntimeEngine::batchnorm_kernel *)((char *)this + 400);
  *((void *)this + 50) = &unk_1EE3415F8;
  char v3 = (std::__shared_weak_count *)*((void *)this + 78);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(v2);
  Espresso::generic_batchnorm_kernel::~generic_batchnorm_kernel(this);

  JUMPOUT(0x192FF16B0);
}

void Espresso::ANERuntimeEngine::mix_reshape_kernel::~mix_reshape_kernel(Espresso::ANERuntimeEngine::mix_reshape_kernel *this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANERuntimeEngine::mix_reshape_kernel *)((char *)this + 320));

  Espresso::base_kernel::~base_kernel(this);
}

{
  uint64_t vars8;

  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANERuntimeEngine::mix_reshape_kernel *)((char *)this + 320));
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

void Espresso::ANERuntimeEngine::load_constant_kernel::~load_constant_kernel(Espresso::ANERuntimeEngine::load_constant_kernel *this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANERuntimeEngine::load_constant_kernel *)((char *)this + 384));

  Espresso::generic_load_constant_kernel::~generic_load_constant_kernel(this);
}

{
  uint64_t vars8;

  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANERuntimeEngine::load_constant_kernel *)((char *)this + 384));
  Espresso::generic_load_constant_kernel::~generic_load_constant_kernel(this);

  JUMPOUT(0x192FF16B0);
}

void Espresso::ANERuntimeEngine::copy_kernel::~copy_kernel(Espresso::ANERuntimeEngine::copy_kernel *this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANERuntimeEngine::copy_kernel *)((char *)this + 288));

  Espresso::base_kernel::~base_kernel(this);
}

{
  uint64_t vars8;

  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANERuntimeEngine::copy_kernel *)((char *)this + 288));
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

void Espresso::ANERuntimeEngine::mix_expand_dims_kernel::~mix_expand_dims_kernel(Espresso::ANERuntimeEngine::mix_expand_dims_kernel *this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANERuntimeEngine::mix_expand_dims_kernel *)((char *)this + 416));

  Espresso::base_kernel::~base_kernel(this);
}

{
  uint64_t vars8;

  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANERuntimeEngine::mix_expand_dims_kernel *)((char *)this + 416));
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

void Espresso::ANERuntimeEngine::mix_activation_kernel::~mix_activation_kernel(Espresso::ANERuntimeEngine::mix_activation_kernel *this)
{
  *(void *)this = &unk_1EE344D88;
  uint64_t v2 = (Espresso::ANERuntimeEngine::mix_activation_kernel *)((char *)this + 392);
  *((void *)this + 49) = &unk_1EE344F50;
  char v3 = (std::__shared_weak_count *)*((void *)this + 79);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  *(void *)this = &unk_1EE341C98;
  *((void *)this + 49) = &unk_1EE341E50;
  char v4 = (std::__shared_weak_count *)*((void *)this + 77);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(v2);

  Espresso::generic_activation_kernel::~generic_activation_kernel(this);
}

{
  Espresso::ANECompilerEngine::ane_kernel *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t vars8;

  *(void *)this = &unk_1EE344D88;
  uint64_t v2 = (Espresso::ANERuntimeEngine::mix_activation_kernel *)((char *)this + 392);
  *((void *)this + 49) = &unk_1EE344F50;
  char v3 = (std::__shared_weak_count *)*((void *)this + 79);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  *(void *)this = &unk_1EE341C98;
  *((void *)this + 49) = &unk_1EE341E50;
  char v4 = (std::__shared_weak_count *)*((void *)this + 77);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(v2);
  Espresso::generic_activation_kernel::~generic_activation_kernel(this);

  JUMPOUT(0x192FF16B0);
}

void Espresso::ANERuntimeEngine::deconvolution_kernel::~deconvolution_kernel(Espresso::ANERuntimeEngine::deconvolution_kernel *this)
{
  *(void *)this = &unk_1EE343D40;
  uint64_t v2 = (Espresso::ANERuntimeEngine::deconvolution_kernel *)((char *)this + 560);
  *((void *)this + 70) = &unk_1EE343FD8;
  char v3 = (std::__shared_weak_count *)*((void *)this + 100);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  char v4 = (std::__shared_weak_count *)*((void *)this + 98);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(v2);

  Espresso::generic_convolution_kernel::~generic_convolution_kernel((void **)this);
}

{
  Espresso::ANECompilerEngine::ane_kernel *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t vars8;

  *(void *)this = &unk_1EE343D40;
  uint64_t v2 = (Espresso::ANERuntimeEngine::deconvolution_kernel *)((char *)this + 560);
  *((void *)this + 70) = &unk_1EE343FD8;
  char v3 = (std::__shared_weak_count *)*((void *)this + 100);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  char v4 = (std::__shared_weak_count *)*((void *)this + 98);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(v2);
  Espresso::generic_convolution_kernel::~generic_convolution_kernel((void **)this);

  JUMPOUT(0x192FF16B0);
}

void Espresso::ANERuntimeEngine::concat_kernel::~concat_kernel(Espresso::ANERuntimeEngine::concat_kernel *this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANERuntimeEngine::concat_kernel *)((char *)this + 344));

  Espresso::base_kernel::~base_kernel(this);
}

{
  uint64_t vars8;

  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANERuntimeEngine::concat_kernel *)((char *)this + 344));
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

void Espresso::ANERuntimeEngine::stir_slice_kernel::~stir_slice_kernel(Espresso::ANERuntimeEngine::stir_slice_kernel *this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANERuntimeEngine::stir_slice_kernel *)((char *)this + 304));

  Espresso::base_kernel::~base_kernel(this);
}

{
  uint64_t vars8;

  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((Espresso::ANERuntimeEngine::stir_slice_kernel *)((char *)this + 304));
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

void Espresso::ANERuntimeEngine::mix_elementwise_kernel::~mix_elementwise_kernel(Espresso::ANERuntimeEngine::mix_elementwise_kernel *this)
{
  *(void *)this = &unk_1EE342CA8;
  uint64_t v2 = (Espresso::ANERuntimeEngine::mix_elementwise_kernel *)((char *)this + 336);
  *((void *)this + 42) = &unk_1EE342E18;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 552);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(v2);

  Espresso::base_kernel::~base_kernel(this);
}

{
  Espresso::ANECompilerEngine::ane_kernel *v2;
  uint64_t vars8;

  *(void *)this = &unk_1EE342CA8;
  uint64_t v2 = (Espresso::ANERuntimeEngine::mix_elementwise_kernel *)((char *)this + 336);
  *((void *)this + 42) = &unk_1EE342E18;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 552);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(v2);
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

void Espresso::ANERuntimeEngine::convolution_kernel::~convolution_kernel(Espresso::ANERuntimeEngine::convolution_kernel *this)
{
  *(void *)this = &unk_1EE342978;
  uint64_t v2 = (Espresso::ANERuntimeEngine::convolution_kernel *)((char *)this + 560);
  *((void *)this + 70) = &unk_1EE342C08;
  char v3 = (std::__shared_weak_count *)*((void *)this + 100);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  char v4 = (std::__shared_weak_count *)*((void *)this + 98);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(v2);

  Espresso::generic_convolution_kernel::~generic_convolution_kernel((void **)this);
}

{
  Espresso::ANECompilerEngine::ane_kernel *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t vars8;

  *(void *)this = &unk_1EE342978;
  uint64_t v2 = (Espresso::ANERuntimeEngine::convolution_kernel *)((char *)this + 560);
  *((void *)this + 70) = &unk_1EE342C08;
  char v3 = (std::__shared_weak_count *)*((void *)this + 100);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  char v4 = (std::__shared_weak_count *)*((void *)this + 98);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(v2);
  Espresso::generic_convolution_kernel::~generic_convolution_kernel((void **)this);

  JUMPOUT(0x192FF16B0);
}

void Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(Espresso::ANECompilerEngine::ane_kernel *this)
{
  *(void *)this = &unk_1EE33E440;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 25);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 136);
  char v3 = (std::__shared_weak_count *)*((void *)this + 15);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  char v4 = (std::__shared_weak_count *)*((void *)this + 13);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  id v5 = (std::__shared_weak_count *)*((void *)this + 11);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 9);
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

{
  uint64_t vars8;

  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);

  JUMPOUT(0x192FF16B0);
}

void Espresso::cpu_context_transfer_algo_t::compute_graph_shortest_path_v3(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t **a4, void *a5, void *a6, uint64_t *a7)
{
  BOOL v7 = 0;
  unint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v280 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v231 = 0x6DB6DB6DB6DB6DB7 * (((*a4)[1] - **a4) >> 5);
  uint64_t v232 = v10 - *a2;
  unint64_t v234 = v232 >> 4;
  unint64_t v274 = 0;
  v275 = 0;
  unint64_t v276 = 0;
  do
  {
    int v12 = (***(uint64_t (****)(void))(*(void *)v11 + 8))(*(void *)(*(void *)v11 + 8));
    int v13 = v12;
    if ((unint64_t)v9 >= v8)
    {
      uint64_t v15 = v9 - v7;
      unint64_t v16 = v15 + 1;
      if ((unint64_t)(v15 + 1) >> 62) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      if ((uint64_t)(v8 - (void)v7) >> 1 > v16) {
        unint64_t v16 = (uint64_t)(v8 - (void)v7) >> 1;
      }
      if (v8 - (unint64_t)v7 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v17 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v17 = v16;
      }
      if (v17) {
        unint64_t v17 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v17);
      }
      else {
        uint64_t v18 = 0;
      }
      char v19 = (_DWORD *)(v17 + 4 * v15);
      _DWORD *v19 = v13;
      char v14 = v19 + 1;
      while (v9 != v7)
      {
        int v20 = *--v9;
        *--char v19 = v20;
      }
      unint64_t v8 = v17 + 4 * v18;
      unint64_t v274 = v19;
      unint64_t v276 = v8;
      if (v7) {
        operator delete(v7);
      }
      BOOL v7 = v19;
    }
    else
    {
      _DWORD *v9 = v12;
      char v14 = v9 + 1;
    }
    v275 = v14;
    v11 += 16;
    uint64_t v9 = v14;
  }
  while (v11 != v10);
  BOOL v21 = (*v7 - 10006) > 5 || ((0x2Fu >> (*(unsigned char *)v7 - 22)) & 1) == 0;
  BOOL v245 = 1;
  if (v21 || (is_cpu(v7 + 1) & 1) == 0)
  {
    if (!is_cpu(v7)
      || ((v7[1] - 10006) <= 5 ? (BOOL v22 = ((0x2Fu >> (*((unsigned char *)v7 + 4) - 22)) & 1) == 0) : (BOOL v22 = 1), v22))
    {
      BOOL v245 = 0;
    }
  }
  unint64_t v23 = *a4;
  long long buf = 0uLL;
  unint64_t v24 = (std::__shared_weak_count *)v23[10];
  if (v24)
  {
    uint64_t v25 = std::__shared_weak_count::lock(v24);
    *((void *)&buf + 1) = v25;
    if (v25) {
      *(void *)&long long buf = v23[9];
    }
  }
  else
  {
    uint64_t v25 = 0;
  }
  uint64_t PlatformHeuristics = GetPlatformHeuristics((Espresso::net **)&buf);
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
  if (!PlatformHeuristics) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Unexpected nullptr.");
  }
  uint64_t v26 = (v231 << 32) + 0x100000000;
  unint64_t v27 = (v26 >> 32) * v234;
  if (v27)
  {
    if (v27 >= 0x492492492492493) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    double v28 = (char *)operator new(56 * v27);
    unint64_t v29 = v28;
    do
    {
      *((void *)v29 + 4) = 0;
      *((void *)v29 + 5) = 0;
      *(_OWORD *)unint64_t v29 = 0uLL;
      *((_OWORD *)v29 + 1) = 0uLL;
      *(_DWORD *)unint64_t v29 = -1;
      *((void *)v29 + 6) = 0;
      v29 += 56;
    }
    while (v29 != &v28[56 * v27]);
  }
  else
  {
    double v28 = 0;
  }
  std::vector<std::unordered_set<std::string>>::vector(&v271, v234);
  std::vector<std::unordered_set<std::string>>::vector(&v268, v234);
  std::vector<std::unordered_map<std::string,int>>::vector(&__p, v234);
  uint64_t v30 = (Espresso *)std::vector<std::unordered_map<std::string,int>>::vector(&v262, v234);
  if (v231 << 32 != 0xFFFFFFFF00000000)
  {
    unint64_t v32 = 0;
    uint64_t v33 = v232 >> 4;
    if (v234 <= 1) {
      uint64_t v33 = 1;
    }
    uint64_t v248 = v33;
    if ((unint64_t)(v26 >> 32) <= 1) {
      uint64_t v34 = 1;
    }
    else {
      uint64_t v34 = v26 >> 32;
    }
    uint64_t v233 = v34;
    uint64_t v35 = 56;
    long long v254 = v28;
    do
    {
      uint64_t v37 = (uint64_t)v262;
      uint64_t v36 = (uint64_t)v263;
      unint64_t v38 = 0xCCCCCCCCCCCCCCCDLL * ((v263 - v262) >> 3);
      uint64_t v39 = (uint64_t)v267;
      unint64_t v40 = (char *)__p;
      if (0xCCCCCCCCCCCCCCCDLL * ((v267 - (unsigned char *)__p) >> 3) >= v38)
      {
        uint64_t v44 = (uint64_t)v266;
        uint64_t v45 = (v266 - (unsigned char *)__p) >> 3;
        unint64_t v46 = 0xCCCCCCCCCCCCCCCDLL * v45;
        if (0xCCCCCCCCCCCCCCCDLL * v45 >= v38)
        {
          if (v262 == v263)
          {
            uint64_t v49 = (uint64_t)__p;
            uint64_t v43 = a4;
          }
          else
          {
            uint64_t v43 = a4;
            do
            {
              if ((char *)v37 != v40)
              {
                *((_DWORD *)v40 + 8) = *(_DWORD *)(v37 + 32);
                std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,int>,void *> *>>(v40, *(uint64_t **)(v37 + 16));
              }
              v37 += 40;
              v40 += 40;
            }
            while (v37 != v36);
            uint64_t v44 = (uint64_t)v266;
            uint64_t v49 = (uint64_t)v40;
          }
          while (v44 != v49)
            uint64_t v44 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::~__hash_table(v44 - 40);
        }
        else
        {
          if (v266 != __p)
          {
            uint64_t v47 = 8 * v45;
            std::string::size_type v48 = v262;
            do
            {
              if (v48 != v40)
              {
                *((_DWORD *)v40 + 8) = *((_DWORD *)v48 + 8);
                std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,int>,void *> *>>(v40, *((uint64_t **)v48 + 2));
              }
              v48 += 40;
              v40 += 40;
              v47 -= 40;
            }
            while (v47);
            unint64_t v40 = v266;
          }
          uint64_t v49 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::unordered_map<std::string,int>>,std::unordered_map<std::string,int>*,std::unordered_map<std::string,int>*,std::unordered_map<std::string,int>*>(v37 + 40 * v46, v36, (uint64_t)v40);
          uint64_t v43 = a4;
        }
      }
      else
      {
        if (__p)
        {
          uint64_t v41 = (uint64_t)v266;
          uint64_t v42 = __p;
          uint64_t v43 = a4;
          if (v266 != __p)
          {
            do
              uint64_t v41 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::~__hash_table(v41 - 40);
            while ((char *)v41 != v40);
            uint64_t v42 = __p;
          }
          long long v266 = v40;
          operator delete(v42);
          uint64_t v39 = 0;
          std::string __p = 0;
          long long v266 = 0;
          int v267 = 0;
        }
        else
        {
          uint64_t v43 = a4;
        }
        if (v38 > 0x666666666666666) {
          goto LABEL_368;
        }
        unint64_t v50 = 0xCCCCCCCCCCCCCCCDLL * (v39 >> 3);
        uint64_t v51 = 2 * v50;
        if (2 * v50 <= v38) {
          uint64_t v51 = v38;
        }
        unint64_t v52 = v50 >= 0x333333333333333 ? 0x666666666666666 : v51;
        if (v52 > 0x666666666666666) {
LABEL_368:
        }
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        std::string __p = std::__allocate_at_least[abi:ne180100]<std::allocator<std::unordered_set<std::string>>>(v52);
        long long v266 = (char *)__p;
        int v267 = (char *)__p + 40 * v53;
        uint64_t v49 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::unordered_map<std::string,int>>,std::unordered_map<std::string,int>*,std::unordered_map<std::string,int>*,std::unordered_map<std::string,int>*>(v37, v36, (uint64_t)__p);
      }
      long long v266 = (char *)v49;
      uint64_t v55 = (uint64_t)v268;
      uint64_t v54 = (uint64_t)v269;
      unint64_t v56 = 0xCCCCCCCCCCCCCCCDLL * (v269 - v268);
      uint64_t v57 = (uint64_t)v273;
      long long v58 = v271;
      if (0xCCCCCCCCCCCCCCCDLL * ((v273 - (char *)v271) >> 3) >= v56)
      {
        uint64_t v66 = (uint64_t)v272;
        uint64_t v67 = v272 - v271;
        unint64_t v68 = 0xCCCCCCCCCCCCCCCDLL * v67;
        if (0xCCCCCCCCCCCCCCCDLL * v67 >= v56)
        {
          if (v268 == v269)
          {
            size_t v65 = v271;
            uint64_t v43 = a4;
          }
          else
          {
            uint64_t v43 = a4;
            do
            {
              if ((uint64_t *)v55 != v58)
              {
                *((_DWORD *)v58 + 8) = *(_DWORD *)(v55 + 32);
                std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::string,void *> *>>(v58, *(uint64_t **)(v55 + 16), 0);
              }
              v55 += 40;
              v58 += 5;
            }
            while (v55 != v54);
            uint64_t v66 = (uint64_t)v272;
            size_t v65 = v58;
          }
          while ((uint64_t *)v66 != v65)
            uint64_t v66 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v66 - 40);
        }
        else
        {
          if (v272 != v271)
          {
            uint64_t v69 = 8 * v67;
            std::string::size_type v70 = v268;
            do
            {
              if (v70 != v58)
              {
                *((_DWORD *)v58 + 8) = *((_DWORD *)v70 + 8);
                std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::string,void *> *>>(v58, (uint64_t *)v70[2], 0);
              }
              v70 += 5;
              v58 += 5;
              v69 -= 40;
            }
            while (v69);
            long long v58 = v272;
          }
          size_t v65 = (uint64_t *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::unordered_set<std::string>>,std::unordered_set<std::string>*,std::unordered_set<std::string>*,std::unordered_set<std::string>*>(v55 + 40 * v68, v54, (uint64_t)v58);
          uint64_t v43 = a4;
        }
      }
      else
      {
        if (v271)
        {
          uint64_t v59 = (uint64_t)v272;
          uint64_t v60 = v271;
          if (v272 != v271)
          {
            do
              uint64_t v59 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v59 - 40);
            while ((uint64_t *)v59 != v58);
            uint64_t v60 = v271;
          }
          long long v272 = v58;
          operator delete(v60);
          uint64_t v57 = 0;
          uint64_t v271 = 0;
          long long v272 = 0;
          uint64_t v273 = 0;
        }
        if (v56 > 0x666666666666666) {
          goto LABEL_367;
        }
        unint64_t v61 = 0xCCCCCCCCCCCCCCCDLL * (v57 >> 3);
        uint64_t v62 = 2 * v61;
        if (2 * v61 <= v56) {
          uint64_t v62 = v56;
        }
        unint64_t v63 = v61 >= 0x333333333333333 ? 0x666666666666666 : v62;
        if (v63 > 0x666666666666666) {
LABEL_367:
        }
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        uint64_t v271 = (uint64_t *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unordered_set<std::string>>>(v63);
        long long v272 = v271;
        uint64_t v273 = (char *)&v271[5 * v64];
        size_t v65 = (uint64_t *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::unordered_set<std::string>>,std::unordered_set<std::string>*,std::unordered_set<std::string>*,std::unordered_set<std::string>*>(v55, v54, (uint64_t)v271);
      }
      long long v272 = v65;
      uint64_t v72 = (uint64_t)v262;
      for (uint64_t i = (uint64_t)v263;
            i != v72;
      long long v263 = (char *)v72;
      size_t v74 = v268;
      uint64_t v73 = (uint64_t)v269;
      if (v269 != v268)
      {
        do
          uint64_t v73 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v73 - 40);
        while ((uint64_t *)v73 != v74);
        uint64_t v72 = (uint64_t)v263;
      }
      uint64_t v269 = v74;
      unint64_t v75 = 0xCCCCCCCCCCCCCCCDLL * ((v72 - (uint64_t)v262) >> 3);
      unint64_t v76 = v234 - v75;
      if (v234 <= v75)
      {
        if (v234 < v75)
        {
          int v96 = &v262[40 * v234];
          while ((char *)v72 != v96)
          {
            v72 -= 40;
            std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::~__hash_table(v72);
          }
          long long v263 = v96;
        }
      }
      else if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v264[-v72] >> 3) >= v76)
      {
        unint64_t v97 = v72 + 40 * v76;
        do
        {
          *(_OWORD *)uint64_t v72 = 0uLL;
          *(_OWORD *)(v72 + 16) = 0uLL;
          *(_DWORD *)(v72 + 32) = 1065353216;
          v72 += 40;
        }
        while (v72 != v97);
        long long v263 = (char *)v97;
      }
      else
      {
        if ((unint64_t)v232 > 0x666666666666666FLL) {
          goto LABEL_368;
        }
        unint64_t v77 = 0x999999999999999ALL * ((v264 - v262) >> 3);
        if (v77 <= v234) {
          unint64_t v77 = v232 >> 4;
        }
        if (0xCCCCCCCCCCCCCCCDLL * ((v264 - v262) >> 3) >= 0x333333333333333) {
          unint64_t v78 = 0x666666666666666;
        }
        else {
          unint64_t v78 = v77;
        }
        BOOL v79 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unordered_set<std::string>>>(v78);
        uint64_t v81 = &v79[40 * v75];
        int v82 = &v79[40 * v234];
        double v83 = v81;
        do
        {
          *(_OWORD *)double v83 = 0uLL;
          *((_OWORD *)v83 + 1) = 0uLL;
          *((_DWORD *)v83 + 8) = 1065353216;
          v83 += 40;
        }
        while (v83 != v82);
        int v84 = &v79[40 * v80];
        unint64_t v86 = v262;
        size_t v85 = v263;
        if (v263 == v262)
        {
          long long v262 = v81;
          long long v263 = v82;
          long long v264 = v84;
          if (!v85) {
            goto LABEL_156;
          }
LABEL_155:
          operator delete(v85);
          goto LABEL_156;
        }
        uint64_t v87 = 0;
        do
        {
          int v88 = &v81[v87];
          BOOL v89 = &v85[v87];
          uint64_t v90 = *(void *)&v85[v87 - 40];
          *((void *)v89 - 5) = 0;
          *((void *)v88 - 5) = v90;
          *((void *)v88 - 4) = *(void *)&v85[v87 - 32];
          *((void *)v89 - 4) = 0;
          uint64_t v91 = *(void *)&v85[v87 - 24];
          *(void *)&v81[v87 - 24] = v91;
          uint64_t v92 = *(void *)&v85[v87 - 16];
          *((void *)v88 - 2) = v92;
          *((_DWORD *)v88 - 2) = *(_DWORD *)&v85[v87 - 8];
          if (v92)
          {
            unint64_t v93 = *(void *)(v91 + 8);
            unint64_t v94 = *((void *)v88 - 4);
            if ((v94 & (v94 - 1)) != 0)
            {
              if (v93 >= v94) {
                v93 %= v94;
              }
            }
            else
            {
              v93 &= v94 - 1;
            }
            *(void *)(v90 + 8 * v93) = &v81[v87 - 24];
            *(void *)&v85[v87 - 24] = 0;
            *(void *)&v85[v87 - 16] = 0;
          }
          v87 -= 40;
        }
        while (&v85[v87] != v86);
        size_t v95 = v262;
        size_t v85 = v263;
        long long v262 = &v81[v87];
        long long v263 = v82;
        long long v264 = v84;
        if (v85 != v95)
        {
          do
            size_t v85 = (char *)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::~__hash_table((uint64_t)(v85 - 40));
          while (v85 != v95);
          size_t v85 = v95;
        }
        if (v85) {
          goto LABEL_155;
        }
      }
LABEL_156:
      uint64_t v98 = (uint64_t)v269;
      unint64_t v99 = 0xCCCCCCCCCCCCCCCDLL * (v269 - v268);
      BOOL v100 = v234 >= v99;
      unint64_t v101 = v234 - v99;
      if (v234 <= v99)
      {
        uint64_t v113 = v248;
        if (!v100)
        {
          uint64_t v114 = &v268[5 * v234];
          while ((uint64_t *)v98 != v114)
            uint64_t v98 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v98 - 40);
          uint64_t v269 = v114;
          uint64_t v113 = v248;
        }
        goto LABEL_184;
      }
      if (0xCCCCCCCCCCCCCCCDLL * ((v270 - (char *)v269) >> 3) >= v101)
      {
        __int16 v115 = &v269[5 * v101];
        uint64_t v113 = v248;
        do
        {
          *(_OWORD *)uint64_t v98 = 0uLL;
          *(_OWORD *)(v98 + 16) = 0uLL;
          *(_DWORD *)(v98 + 32) = 1065353216;
          v98 += 40;
        }
        while ((uint64_t *)v98 != v115);
        uint64_t v269 = v115;
        goto LABEL_184;
      }
      if ((unint64_t)v232 > 0x666666666666666FLL) {
        goto LABEL_367;
      }
      unint64_t v102 = 0x999999999999999ALL * ((v270 - (char *)v268) >> 3);
      if (v102 <= v234) {
        unint64_t v102 = v232 >> 4;
      }
      if (0xCCCCCCCCCCCCCCCDLL * ((v270 - (char *)v268) >> 3) >= 0x333333333333333) {
        unint64_t v103 = 0x666666666666666;
      }
      else {
        unint64_t v103 = v102;
      }
      int v105 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unordered_set<std::string>>>(v103);
      uint64_t v106 = (uint64_t)&v105[40 * v99];
      int v107 = &v105[40 * v234];
      uint64_t v108 = v106;
      do
      {
        *(_OWORD *)uint64_t v108 = 0uLL;
        *(_OWORD *)(v108 + 16) = 0uLL;
        *(_DWORD *)(v108 + 32) = 1065353216;
        v108 += 40;
      }
      while ((char *)v108 != v107);
      int v109 = &v105[40 * v104];
      char v110 = v268;
      BOOL v111 = v269;
      if (v269 == v268)
      {
        std::string::size_type v268 = (uint64_t *)v106;
        uint64_t v269 = (uint64_t *)&v105[40 * v234];
        std::string v270 = &v105[40 * v104];
      }
      else
      {
        do
        {
          v111 -= 5;
          uint64_t v106 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>>>::__hash_table(v106 - 40, v111);
        }
        while (v111 != v110);
        int v112 = v268;
        BOOL v111 = v269;
        std::string::size_type v268 = (uint64_t *)v106;
        uint64_t v269 = (uint64_t *)v107;
        std::string v270 = v109;
        if (v111 != v112)
        {
          uint64_t v43 = a4;
          uint64_t v113 = v248;
          do
          {
            v111 -= 5;
            std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v111);
          }
          while (v111 != v112);
          BOOL v111 = v112;
          if (!v112) {
            goto LABEL_184;
          }
LABEL_183:
          operator delete(v111);
          goto LABEL_184;
        }
      }
      uint64_t v43 = a4;
      uint64_t v113 = v248;
      if (v111) {
        goto LABEL_183;
      }
LABEL_184:
      uint64_t v116 = 0;
      uint64_t v255 = (v32 - 1) * v234;
      unint64_t v237 = v32 * v234;
      unint64_t v242 = &v28[56 * v32 * v234 + 16];
      unint64_t v253 = v32;
      do
      {
        uint64_t v258 = v116;
        unint64_t v117 = v116 + v237;
        int v118 = &v28[56 * v117];
        *((void *)v118 + 6) = 0;
        int v119 = v118 + 48;
        double v120 = *(double *)(*a5 + 8 * v117);
        *((double *)v118 + 1) = v120;
        id v121 = (double *)(v118 + 8);
        unint64_t v246 = v117;
        v118[16] = (*(void *)(*a6 + ((v117 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v117) & 1;
        *((_DWORD *)v118 + 8) = 0;
        long long v122 = v118 + 32;
        long long buf = 0u;
        long long v278 = 0u;
        int v279 = 1065353216;
        if (v32)
        {
          v238 = (double *)(v118 + 8);
          uint64_t v239 = &v28[56 * v117];
          int v240 = v118 + 48;
          uint64_t v241 = v118 + 32;
          char v250 = 0;
          uint64_t v123 = 0;
          double v124 = fmax(v120 * 0.2, 0.5);
          uint64_t v125 = 0xFFFFFFFFLL;
          double v126 = 0.0;
          do
          {
            memset(v260, 0, sizeof(v260));
            int v261 = 1065353216;
            uint64_t v127 = v123 + v255;
            if (v28[56 * v123 + 16 + 56 * v255])
            {
              uint64_t v128 = (double *)&v28[56 * v127];
              double v129 = v128[1];
              char v256 = *((unsigned char *)v128 + 17);
              if (v32 != (int)v231)
              {
                int v130 = v274;
                double v131 = (*(double (**)(uint64_t, void, void))(*(void *)PlatformHeuristics + 176))(PlatformHeuristics, v274[v123], v274[v258]);
                uint64_t v132 = **v43;
                uint64_t v252 = v125;
                if (v131 == 0.0
                  || (uint64_t v133 = v132 + 224 * v32,
                      uint64_t v134 = *(void *)(v133 + 184),
                      uint64_t v135 = *(void *)(v133 + 192),
                      int v136 = (void *)(v133 + 184),
                      v135 == v134))
                {
                  char v147 = (std::__shared_weak_count *)(*v43)[10];
                  if (v147) {
                    v249 = std::__shared_weak_count::lock(v147);
                  }
                  else {
                    v249 = 0;
                  }
                  uint64_t v148 = v132 + 224 * v32;
                  uint64_t v150 = *(void *)(v148 + 136);
                  uint64_t v149 = *(void *)(v148 + 144);
                  if (v150 != v149)
                  {
                    unint64_t v151 = &v28[56 * v127 + 32];
                    do
                    {
                      unsigned int v152 = *v43;
                      if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>((void *)(*v43)[4], (void *)v150))
                      {
                        v259[0] = (long long *)v150;
                        unint64_t v153 = std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v152 + 3), (void *)v150, v259)[7];
                        std::unordered_set<std::string>::unordered_set((uint64_t)v259, (uint64_t)&v271[5 * v123]);
                        if (v153 < v32 - *(unsigned int *)v151
                          && !std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v259, v150)&& std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>((void *)__p + 5 * v123, (unsigned __int8 *)v150))
                        {
                          uint64_t v154 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>((void *)__p + 5 * v123, (unsigned __int8 *)v150);
                          if (!v154) {
                            std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
                          }
                          if (*((_DWORD *)v154 + 10) != v130[v258])
                          {
                            uint64_t v155 = **v43 + 224 * v32;
                            uint64_t v157 = *(void *)(v155 + 136);
                            uint64_t v156 = *(void *)(v155 + 144);
                            if (v156 == v157)
                            {
LABEL_235:
                              unint64_t v32 = v253;
                              goto LABEL_207;
                            }
                            uint64_t v243 = **v43;
                            uint64_t v158 = 0;
                            uint64_t v159 = *(char *)(v150 + 23);
                            if ((int)v159 >= 0) {
                              uint64_t v160 = *(unsigned __int8 *)(v150 + 23);
                            }
                            else {
                              uint64_t v160 = *(void *)(v150 + 8);
                            }
                            if ((unint64_t)((v156 - v157) / 24) <= 1) {
                              uint64_t v161 = 1;
                            }
                            else {
                              uint64_t v161 = (v156 - v157) / 24;
                            }
                            while (1)
                            {
                              std::string::size_type v162 = (unsigned __int8 *)(v157 + 24 * v158);
                              uint64_t v163 = v162[23];
                              if ((v163 & 0x80u) == 0) {
                                uint64_t v164 = v162[23];
                              }
                              else {
                                uint64_t v164 = *((void *)v162 + 1);
                              }
                              if (v164 == v160)
                              {
                                if ((int)v159 >= 0) {
                                  BOOL v165 = (unsigned __int8 *)v150;
                                }
                                else {
                                  BOOL v165 = *(unsigned __int8 **)v150;
                                }
                                if ((v163 & 0x80) != 0)
                                {
                                  uint64_t v166 = v127;
                                  uint64_t v167 = v159;
                                  uint64_t v244 = v130;
                                  uint64_t v168 = v160;
                                  int v169 = memcmp(*(const void **)v162, v165, *((void *)v162 + 1));
                                  uint64_t v160 = v168;
                                  int v130 = v244;
                                  uint64_t v159 = v167;
                                  uint64_t v127 = v166;
                                  if (!v169)
                                  {
LABEL_236:
                                    unint64_t v32 = v253;
                                    uint64_t v170 = Espresso::layer_shape::total_dim((Espresso::layer_shape *)(*(void *)(v243 + 224 * v253 + 184) + (v158 << 6)));
                                    if (v245) {
                                      uint64_t v171 = 6 * v170;
                                    }
                                    else {
                                      uint64_t v171 = 4 * v170;
                                    }
                                    double v28 = v254;
                                    double v172 = (*(double (**)(uint64_t, uint64_t))(*(void *)PlatformHeuristics
                                                                                      + 80))(PlatformHeuristics, 2);
                                    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v260, v150, v150);
                                    float v173 = v172;
                                    double v131 = v131 + (double)(unint64_t)v171 / v173 * 1000.0 + 0.01;
                                    uint64_t v43 = a4;
                                    break;
                                  }
                                }
                                else
                                {
                                  if (!v162[23]) {
                                    goto LABEL_236;
                                  }
                                  while (*v162 == *v165)
                                  {
                                    ++v162;
                                    ++v165;
                                    if (!--v163) {
                                      goto LABEL_236;
                                    }
                                  }
                                }
                              }
                              if (++v158 == v161)
                              {
                                double v28 = v254;
                                uint64_t v43 = a4;
                                goto LABEL_235;
                              }
                            }
                          }
                        }
LABEL_207:
                        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v259);
                      }
                      v150 += 24;
                    }
                    while (v150 != v149);
                  }
                  if (v249) {
                    nitro::nitro_function::nitro_function(v249);
                  }
                }
                else
                {
                  uint64_t v137 = v132 + 224 * v32;
                  uint64_t v140 = *(void *)(v137 + 136);
                  unsigned int v139 = (uint64_t *)(v137 + 136);
                  uint64_t v138 = v140;
                  if (v139[1] == v140)
                  {
                    uint64_t v143 = 0;
                  }
                  else
                  {
                    uint64_t v141 = 0;
                    uint64_t v142 = 0;
                    uint64_t v143 = 0;
                    unint64_t v144 = 0;
                    do
                    {
                      if (std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>((void *)__p + 5 * v123, (unsigned __int8 *)(v138 + v142)))
                      {
                        int v145 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>((void *)__p + 5 * v123, (unsigned __int8 *)(*v139 + v142));
                        if (!v145) {
                          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
                        }
                        if (*((_DWORD *)v145 + 10) != v274[v258])
                        {
                          uint64_t v146 = Espresso::layer_shape::total_dim((Espresso::layer_shape *)(*v136 + v141));
                          std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v260, *v139 + v142, *v139 + v142);
                          v143 += 2 * v146;
                        }
                      }
                      ++v144;
                      uint64_t v138 = *v139;
                      v142 += 24;
                      v141 += 64;
                    }
                    while (v144 < 0xAAAAAAAAAAAAAAABLL * ((v139[1] - *v139) >> 3));
                  }
                  double v28 = v254;
                  float v174 = (*(double (**)(uint64_t, uint64_t))(*(void *)PlatformHeuristics + 80))(PlatformHeuristics, 2);
                  uint64_t v175 = 3 * v143;
                  if (!v245) {
                    uint64_t v175 = 2 * v143;
                  }
                  double v131 = v131 + (double)(unint64_t)v175 / (double)(unint64_t)v174 * 1000.0 + 0.01;
                  ++v256;
                  int v130 = v274;
                  uint64_t v43 = a4;
                  unint64_t v32 = v253;
                }
                uint64_t v113 = v248;
                uint64_t v125 = v252;
                if (v32 == ((v231 << 32) - 0x100000000) >> 32)
                {
                  int v176 = &v130[v258];
                  if (is_gpu(v176))
                  {
                    if (!is_gpu(&v130[v123])
                      || ((uint64_t v177 = (double *)&v28[56 * v127],
                           double v178 = v120 + v177[5],
                           int v179 = *((_DWORD *)v177 + 8),
                           v178 >= 0.01)
                        ? (BOOL v180 = v179 == 1)
                        : (BOOL v180 = 1),
                          v180))
                    {
                      double v131 = v131 + 0.05;
                    }
                  }
                  if (*v176 - 10006) <= 5 && ((0x2Fu >> (*(unsigned char *)v176 - 22)))
                  {
                    if ((unsigned int v182 = v130[v123] - 10006, v182 > 5)
                      || ((0x2Fu >> v182) & 1) == 0
                      || ((uint64_t v183 = (double *)&v28[56 * v127],
                           double v184 = v120 + v183[5],
                           int v185 = *((_DWORD *)v183 + 8),
                           v184 >= 0.01)
                        ? (BOOL v186 = v185 == 1)
                        : (BOOL v186 = 1),
                          v186))
                    {
                      double v131 = v131 + 0.02;
                    }
                  }
                }
                if (v130[v123] - 10006) <= 5 && ((0x2Fu >> (LOBYTE(v130[v123]) - 22)))
                {
                  unsigned int v188 = ((v130[v258] - 10006) < 6) & (0x2Fu >> (LOBYTE(v130[v258]) - 22));
                  if (!*v242) {
                    unsigned int v188 = 1;
                  }
                  double v189 = -0.0;
                  if (!v188) {
                    double v189 = v124;
                  }
                  double v131 = v131 + v189;
                }
                uint64_t v35 = 56;
                double v129 = v129 + v131;
              }
              if (v129 < v126 || v125 == -1)
              {
                int v279 = v261;
                std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::string,void *> *>>(&buf, *(uint64_t **)&v260[16], 0);
                char v250 = v256;
                uint64_t v125 = v123;
                double v126 = v129;
              }
            }
            std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v260);
            ++v123;
          }
          while (v123 != v113);
          id v121 = v238;
          int v118 = v239;
          double v191 = *v238;
          int v119 = v240;
          long long v122 = v241;
        }
        else
        {
          char v250 = 0;
          LODWORD(v125) = 0;
          double v191 = v120;
          double v126 = v120;
        }
        *id v121 = v126 + v191;
        *(_DWORD *)int v118 = v125 + v255;
        *(void *)&v28[56 * v246 + 24] = v258;
        if (v32 && v258 == (int)v125)
        {
          if (v262 != __p)
          {
            __int16 v192 = (char *)__p + 40 * v258;
            unint64_t v193 = &v262[40 * v258];
            *((_DWORD *)v193 + 8) = *((_DWORD *)v192 + 8);
            std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,int>,void *> *>>(v193, *((uint64_t **)v192 + 2));
          }
          if (v268 != v271)
          {
            char v194 = (char *)&v271[5 * v258];
            uint64_t v195 = &v268[5 * v258];
            *((_DWORD *)v195 + 8) = *((_DWORD *)v194 + 8);
            std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::string,void *> *>>(v195, *((uint64_t **)v194 + 2), 0);
          }
          for (unint64_t j = (void *)v278; j; unint64_t j = (void *)*j)
            std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)&v268[5 * v258], (uint64_t)(j + 2), (uint64_t)(j + 2));
          uint64_t v197 = &v28[56 * v255 + 56 * v258];
          *int v119 = *((void *)&v278 + 1) + *((void *)v197 + 6);
          *long long v122 = *((_DWORD *)v197 + 8) + 1;
          *(double *)&v28[56 * v246 + 40] = v120 + *(double *)&v28[56 * v246 + 40];
        }
        else
        {
          if (v32)
          {
            uint64_t v198 = &v268[5 * v258];
            if (v198 != (uint64_t *)&buf)
            {
              *((_DWORD *)v198 + 8) = v279;
              std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::string,void *> *>>(v198, (uint64_t *)v278, 0);
            }
            *int v119 = *((void *)&v278 + 1) + *(void *)&v28[56 * v255 + 48 + 56 * (int)v125];
            uint64_t v199 = (char *)__p + 40 * (int)v125;
            uint64_t v200 = &v262[40 * v258];
            if (v200 != v199)
            {
              *((_DWORD *)v200 + 8) = *((_DWORD *)v199 + 8);
              std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,int>,void *> *>>(v200, *((uint64_t **)v199 + 2));
            }
          }
          *long long v122 = 1;
          *(double *)&v28[56 * v246 + 40] = v120;
        }
        if (v32 < (int)v231)
        {
          uint64_t v201 = **a4 + 224 * v32;
          uint64_t v202 = *(long long **)(v201 + 112);
          uint64_t v203 = *(long long **)(v201 + 120);
          if (v202 != v203)
          {
            long long v257 = v274;
            do
            {
              uint64_t v204 = v262;
              if (*((char *)v202 + 23) < 0)
              {
                std::string::__init_copy_ctor_external((std::string *)v260, *(const std::string::value_type **)v202, *((void *)v202 + 1));
              }
              else
              {
                long long v205 = *v202;
                *(void *)&v260[16] = *((void *)v202 + 2);
                *(_OWORD *)uint64_t v260 = v205;
              }
              uint64_t v206 = (uint64_t)&v204[40 * v258];
              *(_DWORD *)&v260[24] = v257[v258];
              unint64_t v207 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)v260);
              unint64_t v208 = v207;
              unint64_t v209 = *(void *)(v206 + 8);
              if (v209)
              {
                uint8x8_t v210 = (uint8x8_t)vcnt_s8((int8x8_t)v209);
                v210.i16[0] = vaddlv_u8(v210);
                unint64_t v211 = v210.u32[0];
                if (v210.u32[0] > 1uLL)
                {
                  uint64_t v35 = v207;
                  if (v207 >= v209) {
                    uint64_t v35 = v207 % v209;
                  }
                }
                else
                {
                  uint64_t v35 = (v209 - 1) & v207;
                }
                uint64_t v212 = *(unsigned __int8 ***)(*(void *)v206 + 8 * v35);
                if (v212)
                {
                  for (uint64_t k = *v212; k; uint64_t k = *(unsigned __int8 **)k)
                  {
                    unint64_t v214 = *((void *)k + 1);
                    if (v214 == v208)
                    {
                      if (std::equal_to<std::string>::operator()[abi:ne180100](k + 16, v260)) {
                        goto LABEL_345;
                      }
                    }
                    else
                    {
                      if (v211 > 1)
                      {
                        if (v214 >= v209) {
                          v214 %= v209;
                        }
                      }
                      else
                      {
                        v214 &= v209 - 1;
                      }
                      if (v214 != v35) {
                        break;
                      }
                    }
                  }
                }
              }
              uint64_t v215 = operator new(0x30uLL);
              *uint64_t v215 = 0;
              v215[1] = v208;
              *((_OWORD *)v215 + 1) = *(_OWORD *)v260;
              v215[4] = *(void *)&v260[16];
              memset(v260, 0, 24);
              *((_DWORD *)v215 + 10) = *(_DWORD *)&v260[24];
              float v216 = (float)(unint64_t)(*(void *)(v206 + 24) + 1);
              float v217 = *(float *)(v206 + 32);
              if (!v209 || (float)(v217 * (float)v209) < v216)
              {
                BOOL v218 = (v209 & (v209 - 1)) != 0;
                if (v209 < 3) {
                  BOOL v218 = 1;
                }
                unint64_t v219 = v218 | (2 * v209);
                unint64_t v220 = vcvtps_u32_f32(v216 / v217);
                if (v219 <= v220) {
                  size_t v221 = v220;
                }
                else {
                  size_t v221 = v219;
                }
                std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__rehash<true>(v206, v221);
                unint64_t v209 = *(void *)(v206 + 8);
                if ((v209 & (v209 - 1)) != 0)
                {
                  if (v208 >= v209) {
                    uint64_t v35 = v208 % v209;
                  }
                  else {
                    uint64_t v35 = v208;
                  }
                }
                else
                {
                  uint64_t v35 = (v209 - 1) & v208;
                }
              }
              uint64_t v222 = *(void *)v206;
              uint64_t v223 = *(void **)(*(void *)v206 + 8 * v35);
              if (v223)
              {
                *uint64_t v215 = *v223;
              }
              else
              {
                *uint64_t v215 = *(void *)(v206 + 16);
                *(void *)(v206 + 16) = v215;
                *(void *)(v222 + 8 * v35) = v206 + 16;
                if (!*v215) {
                  goto LABEL_344;
                }
                unint64_t v224 = *(void *)(*v215 + 8);
                if ((v209 & (v209 - 1)) != 0)
                {
                  if (v224 >= v209) {
                    v224 %= v209;
                  }
                }
                else
                {
                  v224 &= v209 - 1;
                }
                uint64_t v223 = (void *)(*(void *)v206 + 8 * v224);
              }
              *uint64_t v223 = v215;
LABEL_344:
              ++*(void *)(v206 + 24);
LABEL_345:
              if ((v260[23] & 0x80000000) != 0) {
                operator delete(*(void **)v260);
              }
              uint64_t v202 = (long long *)((char *)v202 + 24);
              unint64_t v32 = v253;
              double v28 = v254;
              uint64_t v35 = 56;
            }
            while (v202 != v203);
          }
        }
        v28[56 * v246 + 17] = v250;
        uint64_t v30 = (Espresso *)std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&buf);
        uint64_t v116 = v258 + 1;
        uint64_t v113 = v248;
        uint64_t v43 = a4;
      }
      while (v258 + 1 != v248);
      ++v32;
    }
    while (v32 != v233);
  }
  int v225 = v234 * v231;
  if ((v231 & 0x80000000) == 0)
  {
    uint64_t v226 = *a7;
    uint64_t v227 = v231;
    while (1)
    {
      if (v227 < (int)v231) {
        *(_DWORD *)(v226 + 4 * v227) = v225 % v234 != 0;
      }
      int v225 = *(_DWORD *)&v28[56 * v225];
      if (v227)
      {
        if (v225 < 0) {
          break;
        }
      }
      if (v227-- <= 0) {
        goto LABEL_362;
      }
    }
    uint64_t v229 = Espresso::espresso_os_log_subsystem(v30, v31);
    if (os_log_type_enabled(v229, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf) = 67109376;
      DWORD1(buf) = v225;
      WORD4(buf) = 1024;
      *(_DWORD *)((char *)&buf + 10) = v227;
      _os_log_error_impl(&dword_1920CB000, v229, OS_LOG_TYPE_ERROR, "assign_to_fallback_context_v2: disconnected graph_position=%d ilayer=%d", (uint8_t *)&buf, 0xEu);
    }
  }
LABEL_362:
  *(void *)&long long buf = &v262;
  std::vector<std::unordered_map<std::string,int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
  *(void *)&long long buf = &__p;
  std::vector<std::unordered_map<std::string,int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
  *(void *)&long long buf = &v268;
  std::vector<std::unordered_set<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
  *(void *)&long long buf = &v271;
  std::vector<std::unordered_set<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
  operator delete(v28);
  if (v274) {
    operator delete(v274);
  }
}

void sub_19211DBCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *__p,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,char a58,uint64_t a59,uint64_t a60,char a61)
{
  *(void *)(v62 - 208) = &a58;
  std::vector<std::unordered_map<std::string,int>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v62 - 208));
  *(void *)(v62 - 208) = &a61;
  std::vector<std::unordered_set<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v62 - 208));
  *(void *)(v62 - 208) = v62 - 256;
  std::vector<std::unordered_set<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v62 - 208));
  if (v61) {
    operator delete(v61);
  }
  uint64_t v64 = *(void **)(v62 - 232);
  if (v64)
  {
    *(void *)(v62 - 224) = v64;
    operator delete(v64);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(a1, *(void ***)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(int a1, void **__p)
{
  if (__p)
  {
    uint64_t v2 = __p;
    do
    {
      char v3 = (void **)*v2;
      if (*((char *)v2 + 39) < 0) {
        operator delete(v2[2]);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::string,void *> *>>(void *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = a1[1];
  if (!v6) {
    goto LABEL_9;
  }
  for (uint64_t i = 0; i != v6; *(void *)(*a1 + 8 * i++) = 0)
    ;
  unint64_t v8 = (char *)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v8)
  {
    while (a2 != a3)
    {
      std::string::operator=((std::string *)(v8 + 16), (const std::string *)(a2 + 2));
      uint64_t v9 = *(char **)v8;
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_multi(a1, (uint64_t)v8);
      a2 = (uint64_t *)*a2;
      unint64_t v8 = v9;
      if (!v9) {
        goto LABEL_9;
      }
    }
    do
    {
      uint64_t v10 = *(char **)v8;
      if (v8[39] < 0) {
        operator delete(*((void **)v8 + 2));
      }
      operator delete(v8);
      unint64_t v8 = v10;
    }
    while (v10);
  }
  else
  {
LABEL_9:
    while (a2 != a3)
    {
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__construct_node<std::string const&>((uint64_t)a1, (uint64_t)(a2 + 2), (uint64_t)v11);
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_multi(a1, v11[0]);
      a2 = (uint64_t *)*a2;
    }
  }
}

void sub_19211DEE0(void *a1)
{
  __cxa_begin_catch(a1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(v1, v2);
  __cxa_rethrow();
}

void sub_19211DEFC(_Unwind_Exception *a1)
{
}

void sub_19211DF10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p)
{
  uint64_t v11 = __p;
  std::string __p = 0;
  if (v11)
  {
    sub_192429EB0((uint64_t)&__p, v11);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19211DF04);
}

uint64_t std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_multi(void *a1, uint64_t a2)
{
  char v4 = (unsigned char *)(a2 + 16);
  unint64_t v5 = *(unsigned __int8 *)(a2 + 39);
  unint64_t v6 = *(void *)(a2 + 24);
  if ((v5 & 0x80u) == 0) {
    BOOL v7 = (uint64_t *)(a2 + 16);
  }
  else {
    BOOL v7 = *(uint64_t **)(a2 + 16);
  }
  if ((v5 & 0x80u) == 0) {
    unint64_t v8 = v5;
  }
  else {
    unint64_t v8 = v6;
  }
  unint64_t v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v16, v7, v8);
  *(void *)(a2 + 8) = v9;
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__node_insert_multi_prepare((uint64_t)a1, v9, v4);
  int8x8_t v11 = (int8x8_t)a1[1];
  unint64_t v12 = *(void *)(a2 + 8);
  uint8x8_t v13 = (uint8x8_t)vcnt_s8(v11);
  v13.i16[0] = vaddlv_u8(v13);
  if (v13.u32[0] > 1uLL)
  {
    if (v12 >= *(void *)&v11) {
      v12 %= *(void *)&v11;
    }
  }
  else
  {
    v12 &= *(void *)&v11 - 1;
  }
  if (!inserted)
  {
    *(void *)a2 = a1[2];
    a1[2] = a2;
    *(void *)(*a1 + 8 * v12) = a1 + 2;
    if (!*(void *)a2) {
      goto LABEL_25;
    }
    unint64_t v14 = *(void *)(*(void *)a2 + 8);
    if (v13.u32[0] > 1uLL)
    {
      if (v14 >= *(void *)&v11) {
        v14 %= *(void *)&v11;
      }
    }
    else
    {
      v14 &= *(void *)&v11 - 1;
    }
LABEL_24:
    *(void *)(*a1 + 8 * v14) = a2;
    goto LABEL_25;
  }
  *(void *)a2 = *inserted;
  uint64_t *inserted = a2;
  if (*(void *)a2)
  {
    unint64_t v14 = *(void *)(*(void *)a2 + 8);
    if (v13.u32[0] > 1uLL)
    {
      if (v14 >= *(void *)&v11) {
        v14 %= *(void *)&v11;
      }
    }
    else
    {
      v14 &= *(void *)&v11 - 1;
    }
    if (v14 != v12) {
      goto LABEL_24;
    }
  }
LABEL_25:
  ++a1[3];
  return a2;
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__node_insert_multi_prepare(uint64_t a1, unint64_t a2, unsigned char *a3)
{
  unint64_t v6 = *(void *)(a1 + 8);
  float v7 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v8 = *(float *)(a1 + 32);
  if (!v6 || (float)(v8 * (float)v6) < v7)
  {
    BOOL v12 = 1;
    if (v6 >= 3) {
      BOOL v12 = (v6 & (v6 - 1)) != 0;
    }
    unint64_t v13 = v12 | (2 * v6);
    unint64_t v14 = vcvtps_u32_f32(v7 / v8);
    if (v13 <= v14) {
      size_t prime = v14;
    }
    else {
      size_t prime = v13;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v6 = *(void *)(a1 + 8);
    }
    if (prime > v6) {
      goto LABEL_15;
    }
    if (prime < v6)
    {
      size_t v16 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v6 >= 3)
      {
        uint8x8_t v17 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
        v17.i16[0] = vaddlv_u8(v17);
        if (v17.u32[0] <= 1uLL)
        {
          uint64_t v18 = 1 << -(char)__clz(v16 - 1);
          if (v16 >= 2) {
            size_t v16 = v18;
          }
          if (prime <= v16) {
            size_t prime = v16;
          }
          if (prime >= v6) {
            goto LABEL_28;
          }
LABEL_15:
          std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__do_rehash<false>(a1, prime);
          goto LABEL_28;
        }
      }
      size_t v19 = std::__next_prime(v16);
      if (prime <= v19) {
        size_t prime = v19;
      }
      if (prime < v6) {
        goto LABEL_15;
      }
    }
LABEL_28:
    unint64_t v6 = *(void *)(a1 + 8);
    uint8x8_t v20 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v20.i16[0] = vaddlv_u8(v20);
    unint64_t v10 = v20.u32[0];
    if (v20.u32[0] <= 1uLL) {
      goto LABEL_4;
    }
    goto LABEL_29;
  }
  uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
  v9.i16[0] = vaddlv_u8(v9);
  unint64_t v10 = v9.u32[0];
  if (v9.u32[0] <= 1uLL)
  {
LABEL_4:
    uint64_t v11 = (v6 - 1) & a2;
    goto LABEL_31;
  }
LABEL_29:
  uint64_t v11 = a2;
  if (v6 <= a2) {
    uint64_t v11 = a2 % v6;
  }
LABEL_31:
  BOOL v21 = *(uint64_t **)(*(void *)a1 + 8 * v11);
  if (!v21) {
    return 0;
  }
  char v22 = a3[23];
  if (v22 >= 0) {
    uint64_t v23 = a3[23];
  }
  else {
    uint64_t v23 = *((void *)a3 + 1);
  }
  if (v22 < 0) {
    a3 = *(unsigned char **)a3;
  }
  if (v10 >= 2)
  {
    int v43 = 0;
    do
    {
      double v28 = v21;
      BOOL v21 = (uint64_t *)*v21;
      if (!v21) {
        break;
      }
      unint64_t v46 = v21[1];
      unint64_t v47 = v46;
      if (v46 >= v6) {
        unint64_t v47 = v46 % v6;
      }
      if (v47 != v11) {
        break;
      }
      if (v46 == a2
        && ((uint64_t v48 = *((unsigned __int8 *)v21 + 39), (v48 & 0x80u) == 0)
          ? (uint64_t v49 = *((unsigned __int8 *)v21 + 39))
          : (uint64_t v49 = v21[3]),
            v49 == v23))
      {
        unint64_t v50 = (const void **)(v21 + 2);
        if ((v48 & 0x80) != 0)
        {
          BOOL v44 = memcmp(*v50, a3, v21[3]) == 0;
        }
        else if (*((unsigned char *)v21 + 39))
        {
          uint64_t v51 = v48 - 1;
          unint64_t v52 = a3;
          do
          {
            int v54 = *(unsigned __int8 *)v50;
            unint64_t v50 = (const void **)((char *)v50 + 1);
            int v53 = v54;
            int v56 = *v52++;
            int v55 = v56;
            BOOL v39 = v51-- != 0;
            char v57 = v39;
            BOOL v41 = v53 == v55;
            BOOL v44 = v53 == v55;
          }
          while (v41 && (v57 & 1) != 0);
        }
        else
        {
          BOOL v44 = 1;
        }
      }
      else
      {
        BOOL v44 = 0;
      }
      int v45 = v43 & !v44;
      v43 |= v44;
    }
    while (v45 != 1);
  }
  else
  {
    int v24 = 0;
    unint64_t v25 = v6 - 1;
    do
    {
      double v28 = v21;
      BOOL v21 = (uint64_t *)*v21;
      if (!v21) {
        break;
      }
      uint64_t v29 = v21[1];
      if ((v29 & v25) != v11) {
        break;
      }
      if (v29 == a2
        && ((uint64_t v30 = *((unsigned __int8 *)v21 + 39), (v30 & 0x80u) == 0)
          ? (uint64_t v31 = *((unsigned __int8 *)v21 + 39))
          : (uint64_t v31 = v21[3]),
            v31 == v23))
      {
        unint64_t v32 = (const void **)(v21 + 2);
        if ((v30 & 0x80) != 0)
        {
          BOOL v26 = memcmp(*v32, a3, v21[3]) == 0;
        }
        else if (*((unsigned char *)v21 + 39))
        {
          uint64_t v33 = v30 - 1;
          uint64_t v34 = a3;
          do
          {
            int v36 = *(unsigned __int8 *)v32;
            unint64_t v32 = (const void **)((char *)v32 + 1);
            int v35 = v36;
            int v38 = *v34++;
            int v37 = v38;
            BOOL v39 = v33-- != 0;
            char v40 = v39;
            BOOL v41 = v35 == v37;
            BOOL v26 = v35 == v37;
          }
          while (v41 && (v40 & 1) != 0);
        }
        else
        {
          BOOL v26 = 1;
        }
      }
      else
      {
        BOOL v26 = 0;
      }
      char v27 = v24 & !v26;
      v24 |= v26;
    }
    while ((v27 & 1) == 0);
  }
  return v28;
}

double newpPlatformHeuristics::get_engine_switch_ms(uint64_t a1, int a2, int a3)
{
  int v8 = a3;
  int v9 = a2;
  double result = 0.0;
  if (a2 != a3)
  {
    unsigned int v5 = ((a2 - 10006) < 6) & (0x2Fu >> (a2 - 22));
    if (v5 == 1 && (is_cpu(&v8) & 1) != 0) {
      return 0.100000001;
    }
    int v6 = is_cpu(&v9);
    if (v6 && (a3 - 10006) <= 5 && ((0x2Fu >> (a3 - 22)) & 1) != 0) {
      return 0.0199999996;
    }
    int v7 = is_gpu(&v9);
    if (v7 && (is_cpu(&v8) & 1) != 0 || v6 && (is_gpu(&v8) & 1) != 0) {
      return 0.150000006;
    }
    if (!v5 || (is_gpu(&v8) & 1) == 0) && v7 && (a3 - 10006) <= 5 && ((0x2Fu >> (a3 - 22))) {
      return 0.0199999996;
    }
    else {
      return 0.100000001;
    }
  }
  return result;
}

uint64_t std::unordered_set<std::string>::unordered_set(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  size_t prime = *(void *)(a2 + 8);
  if (prime == 1)
  {
    size_t prime = 2;
LABEL_17:
    std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(*(void *)(a2 + 8));
    int8x8_t v5 = *(int8x8_t *)(a1 + 8);
    BOOL v6 = prime >= *(void *)&v5;
    if (prime > *(void *)&v5) {
      goto LABEL_17;
    }
  }
  else
  {
    int8x8_t v5 = 0;
    BOOL v6 = 1;
    if (prime) {
      goto LABEL_17;
    }
  }
  if (!v6)
  {
    unint64_t v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v5 < 3uLL || (uint8x8_t v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      unint64_t v7 = std::__next_prime(v7);
    }
    else
    {
      uint64_t v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2) {
        unint64_t v7 = v9;
      }
    }
    if (prime <= v7) {
      size_t prime = v7;
    }
    if (prime < *(void *)&v5) {
      goto LABEL_17;
    }
  }
LABEL_18:
  for (uint64_t i = *(void **)(a2 + 16); i; uint64_t i = (void *)*i)
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a1, (uint64_t)(i + 2), (uint64_t)(i + 2));
  return a1;
}

void sub_19211E628(_Unwind_Exception *a1)
{
  std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_19211E63C(_Unwind_Exception *a1)
{
  std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__construct_node<std::string const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 16;
  BOOL v6 = (char *)operator new(0x28uLL);
  unint64_t v7 = v6;
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint8x8_t v8 = (uint64_t *)(v6 + 16);
  *(void *)BOOL v6 = 0;
  *((void *)v6 + 1) = 0;
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v6 + 16), *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)uint8x8_t v8 = *(_OWORD *)a2;
    *((void *)v6 + 4) = *(void *)(a2 + 16);
  }
  *(unsigned char *)(a3 + 16) = 1;
  int v9 = v7[39];
  if (v9 >= 0) {
    unint64_t v10 = v8;
  }
  else {
    unint64_t v10 = (uint64_t *)*((void *)v7 + 2);
  }
  if (v9 >= 0) {
    unint64_t v11 = v7[39];
  }
  else {
    unint64_t v11 = *((void *)v7 + 3);
  }
  unint64_t result = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v13, v10, v11);
  *((void *)v7 + 1) = result;
  return result;
}

void sub_19211E6F8(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,void *>>>>::~unique_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

double newpPlatformHeuristics::GetDramBW(uint64_t a1, int a2)
{
  uint64_t v2 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((void *)(a1 + 72), a2);
  if (!v2) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  return *((float *)v2 + 5);
}

uint64_t *std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(void *a1, int a2)
{
  unint64_t v2 = a1[1];
  if (!v2) {
    return 0;
  }
  uint8x8_t v3 = (uint8x8_t)vcnt_s8((int8x8_t)v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v4 = a2;
    if (v2 <= a2) {
      unint64_t v4 = a2 % v2;
    }
  }
  else
  {
    unint64_t v4 = (v2 - 1) & a2;
  }
  uint64_t v5 = *(uint64_t ***)(*a1 + 8 * v4);
  if (!v5) {
    return 0;
  }
  for (unint64_t result = *v5; result; unint64_t result = (uint64_t *)*result)
  {
    unint64_t v7 = result[1];
    if (v7 == a2)
    {
      if (*((_DWORD *)result + 4) == a2) {
        return result;
      }
    }
    else
    {
      if (v3.u32[0] > 1uLL)
      {
        if (v7 >= v2) {
          v7 %= v2;
        }
      }
      else
      {
        v7 &= v2 - 1;
      }
      if (v7 != v4) {
        return 0;
      }
    }
  }
  return result;
}

void std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__do_rehash<false>(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    unint64_t v4 = operator new(8 * a2);
    uint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0;
    *(void *)(a1 + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    unint64_t v7 = *(uint64_t ***)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = (unint64_t)v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      unint64_t v10 = v9.u32[0];
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v8) = a1 + 16;
      BOOL v12 = *v7;
      if (*v7)
      {
        unint64_t v35 = v9.u32[0];
        do
        {
          unint64_t v13 = v12[1];
          if (v10 > 1)
          {
            if (v13 >= a2) {
              v13 %= a2;
            }
          }
          else
          {
            v13 &= a2 - 1;
          }
          if (v13 == v8)
          {
            unint64_t v7 = (uint64_t **)v12;
          }
          else
          {
            if (*(void *)(*(void *)a1 + 8 * v13))
            {
              unint64_t v14 = (uint64_t *)*v12;
              unint64_t v36 = v8;
              if (*v12)
              {
                size_t v15 = v12[3];
                if (*((char *)v12 + 39) >= 0) {
                  uint64_t v16 = *((unsigned __int8 *)v12 + 39);
                }
                else {
                  uint64_t v16 = v12[3];
                }
                if ((*((unsigned char *)v12 + 39) & 0x80) == 0)
                {
                  if (*((unsigned char *)v12 + 39))
                  {
                    uint8x8_t v17 = (uint64_t *)*v12;
                    uint64_t v18 = v12;
LABEL_32:
                    unint64_t v14 = v17;
                    uint64_t v19 = *((unsigned __int8 *)v17 + 39);
                    int v20 = (char)v19;
                    if ((v19 & 0x80u) != 0) {
                      uint64_t v19 = v14[3];
                    }
                    if (v16 == v19)
                    {
                      if (v20 >= 0) {
                        BOOL v21 = (unsigned __int8 *)(v14 + 2);
                      }
                      else {
                        BOOL v21 = (unsigned __int8 *)v14[2];
                      }
                      char v22 = (unsigned __int8 *)(v12 + 2);
                      uint64_t v23 = *((unsigned __int8 *)v12 + 39);
                      while (*v22 == *v21)
                      {
                        ++v22;
                        ++v21;
                        if (!--v23)
                        {
                          uint8x8_t v17 = (uint64_t *)*v14;
                          uint64_t v18 = v14;
                          unint64_t v14 = 0;
                          if (v17) {
                            goto LABEL_32;
                          }
                          goto LABEL_58;
                        }
                      }
                    }
                  }
                  else
                  {
                    uint64_t v33 = *((unsigned __int8 *)v14 + 39);
                    if ((v33 & 0x80u) != 0) {
                      uint64_t v33 = v14[3];
                    }
                    uint64_t v18 = v12;
                    if (v33 == *((unsigned __int8 *)v12 + 39))
                    {
                      do
                      {
                        uint64_t v18 = v14;
                        unint64_t v14 = (uint64_t *)*v14;
                        if (!v14) {
                          break;
                        }
                        uint64_t v34 = *((unsigned __int8 *)v14 + 39);
                        if ((v34 & 0x80u) != 0) {
                          uint64_t v34 = v14[3];
                        }
                      }
                      while (v16 == v34);
                    }
                  }
                  goto LABEL_58;
                }
                BOOL v24 = *((char *)v14 + 39) < 0;
                uint64_t v25 = *((unsigned __int8 *)v14 + 39);
                if ((v25 & 0x80u) != 0) {
                  uint64_t v25 = v14[3];
                }
                if (v16 == v25)
                {
                  BOOL v26 = (const void *)v12[2];
                  uint64_t v18 = v12;
                  while (1)
                  {
                    char v27 = v14;
                    uint64_t v30 = (const void *)v14[2];
                    double v28 = v14 + 2;
                    uint64_t v29 = v30;
                    if (v24) {
                      uint64_t v31 = v29;
                    }
                    else {
                      uint64_t v31 = v28;
                    }
                    if (memcmp(v26, v31, v15))
                    {
                      unint64_t v14 = v27;
                      goto LABEL_58;
                    }
                    unint64_t v14 = (uint64_t *)*v27;
                    if (!*v27) {
                      break;
                    }
                    BOOL v24 = *((char *)v14 + 39) < 0;
                    uint64_t v32 = *((unsigned __int8 *)v14 + 39);
                    if ((v32 & 0x80u) != 0) {
                      uint64_t v32 = v14[3];
                    }
                    uint64_t v18 = v27;
                    if (v16 != v32) {
                      goto LABEL_58;
                    }
                  }
                  uint64_t v18 = v27;
                  goto LABEL_58;
                }
              }
              uint64_t v18 = v12;
LABEL_58:
              *unint64_t v7 = v14;
              *uint64_t v18 = **(void **)(*(void *)a1 + 8 * v13);
              **(void **)(*(void *)a1 + 8 * v13) = v12;
              unint64_t v8 = v36;
              unint64_t v10 = v35;
              goto LABEL_18;
            }
            *(void *)(*(void *)a1 + 8 * v13) = v7;
            unint64_t v7 = (uint64_t **)v12;
            unint64_t v8 = v13;
          }
LABEL_18:
          BOOL v12 = *v7;
        }
        while (*v7);
      }
    }
  }
  else
  {
    unint64_t v11 = *(void **)a1;
    *(void *)a1 = 0;
    if (v11) {
      operator delete(v11);
    }
    *(void *)(a1 + 8) = 0;
  }
}

void *std::vector<std::unordered_set<std::string>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::unordered_set<std::string>>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = a1[1];
    uint64_t v5 = v4 + 40 * a2;
    do
    {
      *(_OWORD *)uint64_t v4 = 0uLL;
      *(_OWORD *)(v4 + 16) = 0uLL;
      *(_DWORD *)(v4 + 32) = 1065353216;
      v4 += 40;
    }
    while (v4 != v5);
    a1[1] = v5;
  }
  return a1;
}

void sub_19211EB80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void *std::vector<std::unordered_map<std::string,int>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::unordered_set<std::string>>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = a1[1];
    uint64_t v5 = v4 + 40 * a2;
    do
    {
      *(_OWORD *)uint64_t v4 = 0uLL;
      *(_OWORD *)(v4 + 16) = 0uLL;
      *(_DWORD *)(v4 + 32) = 1065353216;
      v4 += 40;
    }
    while (v4 != v5);
    a1[1] = v5;
  }
  return a1;
}

void sub_19211EC0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

char *std::vector<std::unordered_set<std::string>>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x666666666666667) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  unint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unordered_set<std::string>>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[40 * v4];
  return result;
}

void std::vector<std::unordered_set<std::string>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        uint64_t v4 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v4 - 40);
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::unordered_map<std::string,int>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        uint64_t v4 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::~__hash_table(v4 - 40);
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t Espresso::dev_op_kernel_cpu::dev_op_kernel_cpu(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6 = (_OWORD *)(Espresso::base_kernel::base_kernel(a1, a2) + 280);
  *(void *)(a1 + 280) = 0;
  *(_DWORD *)(a1 + 288) = 0;
  v6[1] = 0u;
  v6[2] = 0u;
  double v6[3] = 0u;
  v6[4] = 0u;
  v6[5] = 0u;
  v6[6] = 0u;
  v6[7] = 0u;
  *(void *)(a1 + 408) = 0;
  *(void *)a1 = &unk_1EE34CA10;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  Espresso::dev_op_params_t::operator=((uint64_t)v6, a4);
  return a1;
}

void sub_19211EE00(_Unwind_Exception *a1)
{
  uint64_t v4 = *(std::__shared_weak_count **)(v1 + 472);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  uint64_t v5 = *(void *)(v1 + 456);
  *(void *)(v1 + 456) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *(std::__shared_weak_count **)(v1 + 448);
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }
  if (*(char *)(v1 + 439) < 0) {
    operator delete(*v2);
  }
  Espresso::generic_dev_op_kernel::~generic_dev_op_kernel((void **)v1);
  _Unwind_Resume(a1);
}

uint64_t Espresso::ANECompilerEngine::dev_op_kernel::dev_op_kernel(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = (_OWORD *)(Espresso::base_kernel::base_kernel(a1, a2) + 280);
  *(void *)(a1 + 280) = 0;
  *(_DWORD *)(a1 + 288) = 0;
  v6[1] = 0u;
  v6[2] = 0u;
  double v6[3] = 0u;
  v6[4] = 0u;
  v6[5] = 0u;
  v6[6] = 0u;
  v6[7] = 0u;
  *(void *)(a1 + 408) = 0;
  char v7 = *(unsigned char *)(*a2 + 123);
  *(_OWORD *)(a1 + 552) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(unsigned char *)(a1 + 472) = 0;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(unsigned char *)(a1 + 544) = 0;
  *(_DWORD *)(a1 + 584) = 1065353216;
  *(_WORD *)(a1 + 592) = 0;
  *(unsigned char *)(a1 + 594) = 0;
  __asm { FMOV            V1.2S, #1.0 }
  *(void *)(a1 + 596) = _D1;
  *(unsigned char *)(a1 + 604) = 0;
  *(_OWORD *)(a1 + 608) = 0u;
  *(unsigned char *)(a1 + 624) = v7;
  *(void *)a1 = &unk_1EE33F720;
  *(void *)(a1 + 416) = &unk_1EE33F880;
  Espresso::dev_op_params_t::operator=((uint64_t)v6, a3);
  return a1;
}

void sub_19211EF60(_Unwind_Exception *a1)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(v2);
  Espresso::generic_dev_op_kernel::~generic_dev_op_kernel(v1);
  _Unwind_Resume(a1);
}

uint64_t Espresso::dev_op_params_t::operator=(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
  *(void *)a1 = v3;
  if ((uint64_t *)a1 == a2)
  {
    std::string::operator=((std::string *)(a1 + 64), (const std::string *)(a1 + 64));
  }
  else
  {
    std::vector<Espresso::dev_op_params_t::shape>::__assign_with_size[abi:ne180100]<Espresso::dev_op_params_t::shape*,Espresso::dev_op_params_t::shape*>((char *)(a1 + 16), (char *)a2[2], a2[3], 0xAAAAAAAAAAAAAAABLL * ((a2[3] - a2[2]) >> 3));
    std::vector<Espresso::dev_op_params_t::shape>::__assign_with_size[abi:ne180100]<Espresso::dev_op_params_t::shape*,Espresso::dev_op_params_t::shape*>((char *)(a1 + 40), (char *)a2[5], a2[6], 0xAAAAAAAAAAAAAAABLL * ((a2[6] - a2[5]) >> 3));
    std::string::operator=((std::string *)(a1 + 64), (const std::string *)(a2 + 8));
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(a1 + 88, (std::string *)a2[11], (std::string *)a2[12], 0xAAAAAAAAAAAAAAABLL * ((a2[12] - a2[11]) >> 3));
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(a1 + 112, (std::string *)a2[14], (std::string *)a2[15], 0xAAAAAAAAAAAAAAABLL * ((a2[15] - a2[14]) >> 3));
  }
  return a1;
}

char *std::vector<Espresso::dev_op_params_t::shape>::__assign_with_size[abi:ne180100]<Espresso::dev_op_params_t::shape*,Espresso::dev_op_params_t::shape*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  char v7 = result;
  uint64_t v8 = *((void *)result + 2);
  uint8x8_t v9 = *(char **)result;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *(void *)result) >> 3) < a4)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *char v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= a4) {
      uint64_t v11 = a4;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v11;
    }
    unint64_t result = std::vector<std::string>::__vallocate[abi:ne180100](v7, v12);
    unint64_t v14 = (char *)v7[1];
    unint64_t v13 = (void **)(v7 + 1);
    uint8x8_t v9 = v14;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      uint64_t v18 = v9;
      uint64_t v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  unint64_t v13 = (void **)(result + 8);
  size_t v15 = (unsigned char *)*((void *)result + 1);
  if (0xAAAAAAAAAAAAAAABLL * ((v15 - v9) >> 3) >= a4) {
    goto LABEL_16;
  }
  uint64_t v16 = &__src[8 * ((v15 - v9) >> 3)];
  if (v15 != v9)
  {
    unint64_t result = (char *)memmove(*(void **)result, __src, v15 - v9);
    uint8x8_t v9 = (char *)*v13;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    uint64_t v18 = v9;
    uint64_t v19 = v16;
LABEL_18:
    unint64_t result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  uint64_t *v13 = &v9[v17];
  return result;
}

char *std::vector<std::string>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  unint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

void Espresso::pass_unpack_layers::run_on_network(Espresso::pass_unpack_layers *this@<X0>, Espresso::net *a2@<X1>, uint64_t a3@<X8>)
{
  v52[2] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = (std::__shared_weak_count *)operator new(0x48uLL);
  v6->__shared_owners_ = 0;
  v6->__shared_weak_owners_ = 0;
  v6->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3887D8;
  char v7 = v6 + 1;
  v6[2].__shared_weak_owners_ = 0;
  v6[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE35FDD0;
  *(_OWORD *)&v6[1].__shared_owners_ = 0u;
  p_uint64_t shared_owners = (uint64_t)&v6[1].__shared_owners_;
  v6[2].std::__shared_count = 0u;
  int v38 = v6;
  LODWORD(v6[2].__shared_weak_owners_) = 1065353216;
  uint64_t v45 = 0;
  long long v44 = 0u;
  memset(v43, 0, sizeof(v43));
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::shared_ptr<Espresso::net>::shared_ptr[abi:ne180100]<Espresso::net,void>(&v50, *(void *)a2, *((std::__shared_weak_count **)a2 + 1));
  uint64_t v37 = a3;
  long long v9 = *(_OWORD *)&v50.__r_.__value_.__l.__data_;
  *(_OWORD *)&v50.__r_.__value_.__l.__data_ = 0uLL;
  long long v44 = v9;
  *(void *)uint64_t v42 = 0;
  if (*((void *)a2 + 5) != *((void *)a2 + 4))
  {
    unint64_t v10 = (char *)a2 + 56;
    BOOL v39 = (char *)this + 24;
    do
    {
      v50.__r_.__value_.__r.__words[0] = (std::string::size_type)v42;
      uint64_t v11 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v10, (unint64_t *)v42, (uint64_t)&std::piecewise_construct, (uint64_t **)&v50);
      if ((void *)((char *)&v43[1] + 8) != v11 + 3) {
        std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v43[1] + 8, (std::string *)v11[3], (std::string *)v11[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11[4] - v11[3]) >> 3));
      }
      v50.__r_.__value_.__r.__words[0] = (std::string::size_type)v42;
      unint64_t v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)a2 + 96, (unint64_t *)v42, (uint64_t)&std::piecewise_construct, (uint64_t **)&v50);
      if (v43 != (_OWORD *)(v12 + 3)) {
        std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)v43, (std::string *)v12[3], (std::string *)v12[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12[4] - v12[3]) >> 3));
      }
      uint64_t v45 = *(void *)v42;
      uint64_t v13 = *(void *)(*(void *)(*((void *)a2 + 4) + 16 * *(void *)v42) + 64);
      if (!(*(unsigned int (**)(uint64_t, _OWORD *))(*(void *)v13 + 288))(v13, v43)) {
        goto LABEL_49;
      }
      uint64_t v14 = *((void *)&v43[0] + 1);
      for (uint64_t i = *(void *)&v43[0]; i != v14; i += 24)
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(p_shared_owners, i, i);
      uint64_t v16 = 16 * *(void *)v42;
      uint64_t v17 = *(void *)(*((void *)a2 + 4) + 16 * *(void *)v42);
      uint64_t v19 = *(void *)(v17 + 64);
      uint64_t v18 = *(std::__shared_weak_count **)(v17 + 72);
      if (v18)
      {
        atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v17 = *(void *)(*((void *)a2 + 4) + v16);
      }
      if (*(char *)(v17 + 63) < 0) {
        std::string::__init_copy_ctor_external(&v41, *(const std::string::value_type **)(v17 + 40), *(void *)(v17 + 48));
      }
      else {
        std::string v41 = *(std::string *)(v17 + 40);
      }
      int v20 = (const std::string::value_type **)(v19 + 176);
      if (*(char *)(v19 + 199) < 0)
      {
        std::string::size_type v21 = *(void *)(v19 + 184);
        if (!v21)
        {
LABEL_20:
          if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            size_t size = HIBYTE(v41.__r_.__value_.__r.__words[2]);
          }
          else {
            size_t size = v41.__r_.__value_.__l.__size_;
          }
          std::string::basic_string[abi:ne180100]((uint64_t)&v50, size + 1);
          if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v23 = &v50;
          }
          else {
            uint64_t v23 = (std::string *)v50.__r_.__value_.__r.__words[0];
          }
          if (size)
          {
            if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              BOOL v24 = &v41;
            }
            else {
              BOOL v24 = (std::string *)v41.__r_.__value_.__r.__words[0];
            }
            memmove(v23, v24, size);
          }
          *(_WORD *)((char *)&v23->__r_.__value_.__l.__data_ + size) = 95;
          uint64_t v51 = &v41;
          uint64_t v25 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v39, (uint64_t)&v41, (uint64_t)&std::piecewise_construct, (long long **)&v51);
          unint64_t v26 = v25[5];
          v25[5] = v26 + 1;
          std::to_string(&v49, v26);
          if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            char v27 = &v49;
          }
          else {
            char v27 = (std::string *)v49.__r_.__value_.__r.__words[0];
          }
          if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v28 = HIBYTE(v49.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v28 = v49.__r_.__value_.__l.__size_;
          }
          uint64_t v29 = std::string::append(&v50, (const std::string::value_type *)v27, v28);
          long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
          v40.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v30;
          v29->__r_.__value_.__l.__size_ = 0;
          v29->__r_.__value_.__r.__words[2] = 0;
          v29->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v49.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v50.__r_.__value_.__l.__data_);
          }
          goto LABEL_41;
        }
        std::string::__init_copy_ctor_external(&v40, *v20, v21);
      }
      else
      {
        if (!*(unsigned char *)(v19 + 199)) {
          goto LABEL_20;
        }
        *(_OWORD *)&v40.__r_.__value_.__l.__data_ = *(_OWORD *)v20;
        v40.__r_.__value_.__r.__words[2] = *(void *)(v19 + 192);
      }
LABEL_41:
      uint64_t v31 = std::string::append(&v40, ":");
      uint64_t v32 = (void *)v31->__r_.__value_.__r.__words[0];
      v52[0] = v31->__r_.__value_.__l.__size_;
      *(void *)((char *)v52 + 7) = *(std::string::size_type *)((char *)&v31->__r_.__value_.__r.__words[1] + 7);
      char v33 = HIBYTE(v31->__r_.__value_.__r.__words[2]);
      v31->__r_.__value_.__l.__size_ = 0;
      v31->__r_.__value_.__r.__words[2] = 0;
      v31->__r_.__value_.__r.__words[0] = 0;
      if (v48 < 0) {
        operator delete(__p);
      }
      std::string __p = v32;
      *(void *)unint64_t v47 = v52[0];
      *(void *)&v47[7] = *(void *)((char *)v52 + 7);
      char v48 = v33;
      if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v40.__r_.__value_.__l.__data_);
      }
      uint64_t v35 = *((void *)a2 + 4);
      uint64_t v34 = *((void *)a2 + 5);
      Espresso::net::remove_layer(a2, v42[0]);
      (*(void (**)(uint64_t, _OWORD *))(*(void *)v19 + 280))(v19, v43);
      *(void *)uint64_t v42 = *(void *)v42 - ((v34 - v35) >> 4) + ((uint64_t)(*((void *)a2 + 5) - *((void *)a2 + 4)) >> 4);
      if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v41.__r_.__value_.__l.__data_);
      }
      unint64_t v10 = (char *)a2 + 56;
      if (v18) {
        nitro::nitro_function::nitro_function(v18);
      }
LABEL_49:
      ++*(void *)v42;
    }
    while (*(void *)v42 < (unint64_t)((uint64_t)(*((void *)a2 + 5) - *((void *)a2 + 4)) >> 4));
  }
  for (unint64_t j = &v38[2].__vftable;
        ;
        std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__erase_unique<std::string>((uint64_t **)a2 + 23, j + 2))
  {
    unint64_t j = (void *)*j;
    if (!j) {
      break;
    }
  }
  atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
  *(unsigned char *)uint64_t v37 = 1;
  *(void *)(v37 + 8) = v7;
  *(void *)(v37 + 16) = v38;
  atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
  nitro::nitro_function::nitro_function(v38);
  if (v48 < 0) {
    operator delete(__p);
  }
  if (*((void *)&v44 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v44 + 1));
  }
  v50.__r_.__value_.__r.__words[0] = (std::string::size_type)&v43[1] + 8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v50);
  v50.__r_.__value_.__r.__words[0] = (std::string::size_type)v43;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v50);
  nitro::nitro_function::nitro_function(v38);
}

void sub_19211F774(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
}

uint64_t Espresso::base_kernel::should_unpack()
{
  return 0;
}

void *std::shared_ptr<Espresso::net>::shared_ptr[abi:ne180100]<Espresso::net,void>(void *a1, uint64_t a2, std::__shared_weak_count *this)
{
  *a1 = a2;
  if (!this)
  {
    a1[1] = 0;
LABEL_5:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v4 = std::__shared_weak_count::lock(this);
  a1[1] = v4;
  if (!v4) {
    goto LABEL_5;
  }
  return a1;
}

void Espresso::net::insert_layers(uint64_t a1, uint64_t **a2)
{
  uint64_t v3 = *a2;
  unint64_t v2 = a2[1];
  if (v2 != *a2)
  {
    unint64_t v5 = 0x8E38E38E38E38E39 * (v2 - *a2);
    uint64_t v29 = 0;
    long long v30 = 0;
    uint64_t v31 = 0;
    uint64_t v32 = &v29;
    char v33 = 0;
    if (v5 >= 0x38E38E38E38E38FLL) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (std::vector<std::string> *)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::net::new_layer_info>>(v5);
    unint64_t v7 = 0;
    uint64_t v29 = v6;
    long long v30 = v6;
    uint64_t v31 = &v6[3 * v8];
    do
    {
      long long v9 = &v6[v7 / 0x18];
      unint64_t v10 = &v3[v7 / 8];
      LODWORD(v9->__begin_) = v3[v7 / 8];
      v9->__end_ = (std::vector<std::string>::pointer)v3[v7 / 8 + 1];
      uint64_t v11 = (std::string *)v3[v7 / 8 + 2];
      v9->__end_cap_.__value_ = v11;
      if (v11) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)&v11->__r_.__value_.__l.__size_, 1uLL, memory_order_relaxed);
      }
      v9[1].__begin_ = 0;
      v9[1].__end_ = 0;
      v9[1].__end_cap_.__value_ = 0;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v9[1].__begin_, v10[3], v10[4], 0xAAAAAAAAAAAAAAABLL * ((v10[4] - v10[3]) >> 3));
      unint64_t v12 = &v6[v7 / 0x18];
      v12[2].__begin_ = 0;
      v12[2].__end_ = 0;
      uint64_t v13 = &v6[v7 / 0x18 + 2];
      v13->__end_cap_.__value_ = 0;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v13, v10[6], v10[7], 0xAAAAAAAAAAAAAAABLL * ((v10[7] - v10[6]) >> 3));
      v7 += 72;
    }
    while (v10 + 9 != v2);
    unint64_t v14 = 126 - 2 * __clz(0x8E38E38E38E38E39 * (((char *)&v6[v7 / 0x18] - (char *)v29) >> 3));
    long long v30 = &v6[v7 / 0x18];
    if (&v6[v7 / 0x18] == v29) {
      uint64_t v15 = 0;
    }
    else {
      uint64_t v15 = v14;
    }
    std::__introsort<std::_ClassicAlgPolicy,Espresso::net::insert_layers(std::vector<Espresso::net::new_layer_info> const&)::$_0 &,Espresso::net::new_layer_info*,false>(v29, &v6[v7 / 0x18], v15, 1);
    uint64_t v16 = v29;
    for (uint64_t i = v30; v16 != i; v16 += 3)
    {
      int64_t begin_low = SLODWORD(v16->__begin_);
      uint64_t v18 = *(void *)(a1 + 40) - *(void *)(a1 + 32);
      if ((int)(((unint64_t)v18 >> 4) - 1) > (int)begin_low)
      {
        unint64_t v19 = (int)(v18 >> 4);
        do
        {
          unint64_t v20 = v19 - 1;
          uint64_t v32 = (std::vector<std::string> **)(v19 - 1);
          std::string::size_type v21 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(a1 + 56, v19 - 1, &v32);
          unint64_t v34 = v19;
          char v22 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(a1 + 56, v19, &v34);
          if (v22 != v21) {
            std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)(v22 + 3), (std::string *)v21[3], (std::string *)v21[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v21[4] - v21[3]) >> 3));
          }
          uint64_t v32 = (std::vector<std::string> **)(v19 - 1);
          uint64_t v23 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(a1 + 96, v19 - 1, &v32);
          unint64_t v34 = v19;
          BOOL v24 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(a1 + 96, v19, &v34);
          if (v24 != v23) {
            std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)(v24 + 3), (std::string *)v23[3], (std::string *)v23[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23[4] - v23[3]) >> 3));
          }
          --v19;
        }
        while ((uint64_t)(v20 - 1) > begin_low);
      }
      uint64_t v32 = (std::vector<std::string> **)(begin_low + 1);
      uint64_t v25 = (std::vector<std::string> *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(a1 + 56, begin_low + 1, &v32);
      if (v25 != v16) {
        std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v25[1], v16[1].__begin_, v16[1].__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v16[1].__end_ - (char *)v16[1].__begin_) >> 3));
      }
      uint64_t v32 = (std::vector<std::string> **)(begin_low + 1);
      unint64_t v26 = (std::vector<std::string> *)(std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(a1 + 96, begin_low + 1, &v32)+ 3);
      if (v26 != &v16[2]) {
        std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)v26, v16[2].__begin_, v16[2].__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v16[2].__end_ - (char *)v16[2].__begin_) >> 3));
      }
      std::vector<std::shared_ptr<Espresso::layer>>::insert((uint64_t *)(a1 + 32), *(void *)(a1 + 32) + 16 * begin_low + 16, (char *)&v16->__end_);
    }
    uint64_t v32 = &v29;
    std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&v32);
  }
}

void sub_19211FBBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(uint64_t a1, std::string *__str, std::string *a3, size_t __sz)
{
  uint64_t v6 = __str;
  uint64_t v8 = *(void *)(a1 + 16);
  long long v9 = *(std::string **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *(void *)a1) >> 3) >= __sz)
  {
    unint64_t v12 = *(std::string **)(a1 + 8);
    if (0xAAAAAAAAAAAAAAABLL * (((char *)v12 - (char *)v9) >> 3) >= __sz)
    {
      if (__str == a3)
      {
        unint64_t v20 = *(std::string **)a1;
      }
      else
      {
        unint64_t v20 = *(std::string **)a1;
        do
        {
          std::string::operator=(v9++, v6++);
          ++v20;
        }
        while (v6 != a3);
        unint64_t v12 = *(std::string **)(a1 + 8);
      }
      while (v12 != v20)
      {
        if (SHIBYTE(v12[-1].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v12[-1].__r_.__value_.__l.__data_);
        }
        --v12;
      }
      *(void *)(a1 + 8) = v20;
    }
    else
    {
      uint64_t v13 = (std::string *)((char *)__str + 8 * (((char *)v12 - (char *)v9) >> 3));
      if (v12 != v9)
      {
        uint64_t v14 = 8 * (((char *)v12 - (char *)v9) >> 3);
        do
        {
          std::string::operator=(v9++, v6++);
          v14 -= 24;
        }
        while (v14);
        long long v9 = *(std::string **)(a1 + 8);
      }
      uint64_t v15 = v9;
      if (v13 != a3)
      {
        uint64_t v16 = 0;
        do
        {
          uint64_t v18 = &v9[v16];
          unint64_t v19 = (char *)&v13[v16];
          if (SHIBYTE(v13[v16].__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(v18, *(const std::string::value_type **)v19, *((void *)v19 + 1));
          }
          else
          {
            long long v17 = *(_OWORD *)v19;
            v18->__r_.__value_.__r.__words[2] = *((void *)v19 + 2);
            *(_OWORD *)&v18->__r_.__value_.__l.__data_ = v17;
          }
          ++v16;
        }
        while (&v13[v16] != a3);
        uint64_t v15 = &v9[v16];
      }
      *(void *)(a1 + 8) = v15;
    }
  }
  else
  {
    if (v9)
    {
      unint64_t v10 = *(std::string **)(a1 + 8);
      uint64_t v11 = *(std::string **)a1;
      if (v10 != v9)
      {
        do
        {
          if (SHIBYTE(v10[-1].__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v10[-1].__r_.__value_.__l.__data_);
          }
          --v10;
        }
        while (v10 != v9);
        uint64_t v11 = *(std::string **)a1;
      }
      *(void *)(a1 + 8) = v9;
      operator delete(v11);
      uint64_t v8 = 0;
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
    }
    if (__sz > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_48;
    }
    unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    uint64_t v22 = 2 * v21;
    if (2 * v21 <= __sz) {
      uint64_t v22 = __sz;
    }
    unint64_t v23 = v21 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v22;
    if (v23 > 0xAAAAAAAAAAAAAAALL) {
LABEL_48:
    }
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    uint64_t v24 = 24 * v23;
    uint64_t v25 = (char *)operator new(24 * v23);
    *(void *)a1 = v25;
    *(void *)(a1 + 8) = v25;
    *(void *)(a1 + 16) = &v25[v24];
    if (v6 != a3)
    {
      uint64_t v26 = 0;
      do
      {
        char v27 = (std::string *)&v25[v26 * 24];
        std::string::size_type v28 = &v6[v26];
        if (SHIBYTE(v6[v26].__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(v27, v28->__r_.__value_.__l.__data_, v28->__r_.__value_.__l.__size_);
        }
        else
        {
          *(_OWORD *)&v27->__r_.__value_.__l.__data_ = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
          v27->__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
        }
        ++v26;
      }
      while (&v6[v26] != a3);
      v25 += v26 * 24;
    }
    *(void *)(a1 + 8) = v25;
  }
}

void std::vector<std::shared_ptr<Espresso::layer>>::insert(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t v3 = a3;
  uint64_t v6 = *a1;
  unint64_t v5 = (char *)a1[1];
  uint64_t v7 = a2 - *a1;
  uint64_t v8 = v7 >> 4;
  long long v9 = (char *)(*a1 + (v7 & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = (uint64_t)(a1 + 2);
  unint64_t v10 = a1[2];
  if ((unint64_t)v5 >= v10)
  {
    unint64_t v15 = ((uint64_t)&v5[-v6] >> 4) + 1;
    if (v15 >> 60) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v17 = v10 - v6;
    if (v17 >> 3 > v15) {
      unint64_t v15 = v17 >> 3;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v18 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v15;
    }
    uint64_t v53 = v11;
    if (v18) {
      unint64_t v18 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v18);
    }
    else {
      uint64_t v19 = 0;
    }
    uint64_t v31 = (void *)(v18 + 16 * v8);
    std::string v50 = (char *)v18;
    *(void *)&long long v51 = v31;
    *((void *)&v51 + 1) = v31;
    unint64_t v52 = (char *)(v18 + 16 * v19);
    if (v8 == v19)
    {
      if (v7 < 1)
      {
        if (v6 == a2) {
          unint64_t v33 = 1;
        }
        else {
          unint64_t v33 = v7 >> 3;
        }
        uint64_t v57 = v11;
        unint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v33);
        uint64_t v36 = v51;
        uint64_t v37 = *((void *)&v51 + 1) - v51;
        if (*((void *)&v51 + 1) == (void)v51)
        {
          int64x2_t v42 = vdupq_n_s64(v51);
          unint64_t v39 = (unint64_t)&v34[16 * (v33 >> 2)];
        }
        else
        {
          uint64_t v38 = v37 >> 4;
          unint64_t v39 = (unint64_t)&v34[16 * (v33 >> 2) + (v37 & 0xFFFFFFFFFFFFFFF0)];
          uint64_t v40 = 16 * v38;
          std::string v41 = &v34[16 * (v33 >> 2)];
          do
          {
            *(_OWORD *)std::string v41 = *(_OWORD *)v36;
            v41 += 16;
            *(void *)uint64_t v36 = 0;
            *(void *)(v36 + 8) = 0;
            v36 += 16;
            v40 -= 16;
          }
          while (v40);
          int64x2_t v42 = (int64x2_t)v51;
        }
        int v43 = v52;
        int v54 = v50;
        std::string v50 = v34;
        *(void *)&long long v51 = &v34[16 * (v33 >> 2)];
        int64x2_t v55 = v42;
        *((void *)&v51 + 1) = v39;
        unint64_t v52 = &v34[16 * v35];
        int v56 = v43;
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v54);
        uint64_t v31 = (void *)*((void *)&v51 + 1);
      }
      else
      {
        unint64_t v32 = v8 + 2;
        if (v8 >= -1) {
          unint64_t v32 = v8 + 1;
        }
        v31 -= 2 * (v32 >> 1);
        *(void *)&long long v51 = v31;
        *((void *)&v51 + 1) = v31;
      }
    }
    *uint64_t v31 = *(void *)v3;
    uint64_t v44 = *((void *)v3 + 1);
    v31[1] = v44;
    if (v44)
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v44 + 8), 1uLL, memory_order_relaxed);
      uint64_t v31 = (void *)*((void *)&v51 + 1);
    }
    *((void *)&v51 + 1) = v31 + 2;
    uint64_t v45 = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::layer>>,std::reverse_iterator<std::shared_ptr<Espresso::layer>*>,std::reverse_iterator<std::shared_ptr<Espresso::layer>*>,std::reverse_iterator<std::shared_ptr<Espresso::layer>*>>(v11, (uint64_t)v9, v9, *a1, (void *)*a1, v51, v51);
    *(void *)&long long v51 = v45;
    unint64_t v46 = (char *)a1[1];
    unint64_t v47 = (_OWORD *)*((void *)&v51 + 1);
    if (v9 != v46)
    {
      do
      {
        *v47++ = *(_OWORD *)v9;
        *(void *)long long v9 = 0;
        *((void *)v9 + 1) = 0;
        v9 += 16;
      }
      while (v9 != v46);
      uint64_t v45 = v51;
      long long v9 = (char *)a1[1];
    }
    uint64_t v48 = *a1;
    *a1 = v45;
    a1[1] = (uint64_t)v47;
    uint64_t v49 = a1[2];
    a1[2] = (uint64_t)v52;
    *((void *)&v51 + 1) = v9;
    unint64_t v52 = (char *)v49;
    std::string v50 = (char *)v48;
    *(void *)&long long v51 = v48;
    std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v50);
  }
  else if (v9 == v5)
  {
    long long v30 = *(_OWORD *)a3;
    *(_OWORD *)long long v9 = *(_OWORD *)a3;
    if (*((void *)&v30 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v30 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    a1[1] = (uint64_t)(v9 + 16);
  }
  else
  {
    unint64_t v12 = v9 + 16;
    uint64_t v13 = v5 - 16;
    uint64_t v14 = (_OWORD *)a1[1];
    while (v13 < v5)
    {
      *v14++ = *(_OWORD *)v13;
      *(void *)uint64_t v13 = 0;
      *((void *)v13 + 1) = 0;
      v13 += 16;
    }
    a1[1] = (uint64_t)v14;
    if (v5 != v12)
    {
      unint64_t v20 = (std::__shared_weak_count **)(v5 - 8);
      uint64_t v21 = 16 * ((v5 - v12) >> 4);
      uint64_t v22 = v6 + 16 * v8 - 16;
      do
      {
        unint64_t v23 = (void *)(v22 + v21);
        long long v24 = *(_OWORD *)(v22 + v21);
        *unint64_t v23 = 0;
        v23[1] = 0;
        uint64_t v25 = *v20;
        *(_OWORD *)(v20 - 1) = v24;
        if (v25) {
          nitro::nitro_function::nitro_function(v25);
        }
        v20 -= 2;
        v21 -= 16;
      }
      while (v21);
    }
    if (v9 <= v3) {
      v3 += 16 * (a1[1] > (unint64_t)v3);
    }
    uint64_t v27 = *(void *)v3;
    uint64_t v26 = *((void *)v3 + 1);
    if (v26) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v26 + 8), 1uLL, memory_order_relaxed);
    }
    *(void *)long long v9 = v27;
    uint64_t v28 = v6 + 16 * v8;
    uint64_t v29 = *(std::__shared_weak_count **)(v28 + 8);
    *(void *)(v28 + 8) = v26;
    if (v29)
    {
      nitro::nitro_function::nitro_function(v29);
    }
  }
}

void sub_192120258(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *anonymous namespace'::add_layer_to_is_valid_for_engine(uint64_t *this, Espresso::net *a2, const Espresso::layer *a3)
{
  if (this)
  {
    unint64_t v5 = (long long *)((char *)a2 + 16);
    uint64_t v4 = std::__tree<std::__value_type<std::string,std::map<Espresso::platform,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<Espresso::platform,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<Espresso::platform,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this + 9, (void *)a2 + 2, (uint64_t)&std::piecewise_construct, &v5);
    this = std::__tree<std::__value_type<Espresso::platform,int>,std::__map_value_compare<Espresso::platform,std::__value_type<Espresso::platform,int>,std::less<Espresso::platform>,true>,std::allocator<std::__value_type<Espresso::platform,int>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform const&>,std::tuple<>>(v4 + 7, *((_DWORD *)a2 + 2), (unsigned int *)a2 + 2);
    *((_DWORD *)this + 8) = 1;
  }
  return this;
}

uint64_t Espresso::cpu_context_transfer_algo_t::check_kernels_availability_on_fallback_context(int *a1, void *a2, uint64_t a3)
{
  uint64_t v103 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(uint64_t **)a3;
  int v70 = (***(uint64_t (****)(void))(*((void *)a1 + 9) + 8))(*(void *)(*((void *)a1 + 9) + 8));
  if (v70 == 50005) {
    int v5 = 50006;
  }
  else {
    int v5 = 50001;
  }
  int v98 = v5;
  Espresso::create_context(&v98, &v96);
  uint64_t v6 = *(void *)a1;
  if (*(unsigned char *)(*(void *)a1 + 127))
  {
    uint64_t v7 = *((void *)a1 + 9);
    *(unsigned char *)(v7 + 127) = 1;
    *(void *)(v7 + 128) = *(void *)(v6 + 128);
    if (*(unsigned char *)(v6 + 127))
    {
      uint64_t v8 = v96;
      *(unsigned char *)(v96 + 127) = *(unsigned char *)(v6 + 127);
      *(void *)(v8 + 128) = *(void *)(v6 + 128);
    }
  }
  uint64_t v9 = *v4;
  if (v4[1] == *v4)
  {
    uint64_t v11 = 1;
  }
  else
  {
    unint64_t v10 = 0;
    LODWORD(v11) = 1;
    unint64_t v68 = v4;
    do
    {
      long long v12 = *(_OWORD *)(*a2 + 16 * v10);
      long long v74 = v12;
      uint64_t v13 = *(std::__shared_weak_count **)(*a2 + 16 * v10 + 8);
      if (*((void *)&v12 + 1))
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v12 + 1) + 8), 1uLL, memory_order_relaxed);
        uint64_t v9 = *v4;
      }
      uint64_t v73 = v13;
      int v71 = v11;
      if ((***(unsigned int (****)(void))(*((void *)a1 + 9) + 8))(*(void *)(*((void *)a1 + 9) + 8)) == 50000
        || (***(unsigned int (****)(void))(*((void *)a1 + 9) + 8))(*(void *)(*((void *)a1 + 9) + 8)) == 50005)
      {
        long long v95 = v74;
        if (v13) {
          atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v93 = v96;
        unint64_t v94 = v97;
        if (v97) {
          atomic_fetch_add_explicit(&v97->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        Espresso::create_kernel_for_engine(buf, v9 + 224 * v10, (uint64_t *)&v95, &v93, a1[5]);
        unint64_t v14 = v9 + 224 * v10;
        long long v15 = *(_OWORD *)buf;
        *(void *)long long buf = 0;
        *(void *)&uint8_t buf[8] = 0;
        uint64_t v17 = (std::__shared_weak_count **)(v14 + 216);
        uint64_t v16 = *(std::__shared_weak_count **)(v14 + 216);
        *(_OWORD *)(v14 + 208) = v15;
        unint64_t v18 = (uint64_t *)(v14 + 208);
        if (v16) {
          nitro::nitro_function::nitro_function(v16);
        }
        if (*(void *)&buf[8]) {
          nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&buf[8]);
        }
        if (v94) {
          nitro::nitro_function::nitro_function(v94);
        }
        if (v13) {
          nitro::nitro_function::nitro_function(v13);
        }
        uint64_t v91 = *v18;
        uint64_t v92 = *v17;
        uint64_t v19 = v92;
        if (v92) {
          atomic_fetch_add_explicit(&v92->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        long long v90 = v74;
        if (v13) {
          atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        unint64_t v20 = v97;
        v89[0] = v96;
        v89[1] = v97;
        if (v97) {
          atomic_fetch_add_explicit(&v97->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        int v21 = a1[5];
        uint64_t v22 = *(std::__shared_weak_count **)(a3 + 8);
        v88[0] = *(void *)a3;
        v88[1] = v22;
        if (v22) {
          atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        unint64_t v86 = 0;
        uint64_t v87 = 0;
        *(unsigned char *)(v9 + 224 * v10 + 106) = is_kernel_available_on_engine(v10, &v91, v9 + 224 * v10, (uint64_t *)&v90, (uint64_t)v89, v21, v88, &v86);
        if (v87) {
          nitro::nitro_function::nitro_function(v87);
        }
        if (v22) {
          nitro::nitro_function::nitro_function(v22);
        }
        if (v20) {
          nitro::nitro_function::nitro_function(v20);
        }
        if (v73) {
          nitro::nitro_function::nitro_function(v73);
        }
        if (v19) {
          nitro::nitro_function::nitro_function(v19);
        }
        unint64_t v23 = *v17;
        *unint64_t v18 = 0;
        v18[1] = 0;
      }
      else
      {
        long long v85 = v74;
        if (v13) {
          atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        unint64_t v47 = (std::__shared_weak_count *)*((void *)a1 + 10);
        uint64_t v83 = *((void *)a1 + 9);
        int v84 = v47;
        if (v47) {
          atomic_fetch_add_explicit(&v47->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        Espresso::create_kernel_for_engine(buf, v9 + 224 * v10, (uint64_t *)&v85, &v83, a1[5]);
        unint64_t v48 = v9 + 224 * v10;
        long long v49 = *(_OWORD *)buf;
        *(void *)long long buf = 0;
        *(void *)&uint8_t buf[8] = 0;
        long long v51 = (std::__shared_weak_count **)(v48 + 216);
        std::string v50 = *(std::__shared_weak_count **)(v48 + 216);
        *(_OWORD *)(v48 + 208) = v49;
        unint64_t v52 = (void *)(v48 + 208);
        if (v50) {
          nitro::nitro_function::nitro_function(v50);
        }
        if (*(void *)&buf[8]) {
          nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&buf[8]);
        }
        if (v84) {
          nitro::nitro_function::nitro_function(v84);
        }
        if (v13) {
          nitro::nitro_function::nitro_function(v13);
        }
        v82[0] = *v52;
        unint64_t v23 = *v51;
        v82[1] = v23;
        if (v23) {
          atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        long long v81 = v74;
        if (v13) {
          atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v53 = (std::__shared_weak_count *)*((void *)a1 + 10);
        v80[0] = *((void *)a1 + 9);
        v80[1] = v53;
        if (v53) {
          atomic_fetch_add_explicit(&v53->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        int v54 = a1[5];
        int64x2_t v55 = *(std::__shared_weak_count **)(a3 + 8);
        v79[0] = *(void *)a3;
        v79[1] = v55;
        if (v55) {
          atomic_fetch_add_explicit(&v55->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        unint64_t v77 = 0;
        unint64_t v78 = 0;
        *(unsigned char *)(v9 + 224 * v10 + 106) = is_kernel_available_on_engine(v10, v82, v9 + 224 * v10, (uint64_t *)&v81, (uint64_t)v80, v54, v79, &v77);
        if (v78) {
          nitro::nitro_function::nitro_function(v78);
        }
        if (v55) {
          nitro::nitro_function::nitro_function(v55);
        }
        if (v53) {
          nitro::nitro_function::nitro_function(v53);
        }
        if (v73) {
          nitro::nitro_function::nitro_function(v73);
        }
      }
      if (v23) {
        nitro::nitro_function::nitro_function(v23);
      }
      uint64_t v4 = v68;
      if (!(!is_metal_but_not_mps_buffers(v70) | ((v70 - 50005) < 4) & (0xBu >> ((v70 - 85) & 0xF))))
      {
        unint64_t v24 = v9 + 224 * v10;
        uint64_t v25 = *(long long **)(v24 + 184);
        uint64_t v26 = *(long long **)(v24 + 192);
        if (v25 != v26)
        {
          uint64_t v27 = (unsigned char *)(v9 + 224 * v10 + 106);
          do
          {
            long long v28 = *v25;
            long long v29 = v25[1];
            *(void *)&unsigned char buf[32] = *((void *)v25 + 4);
            *(_OWORD *)long long buf = v28;
            *(_OWORD *)&uint8_t buf[16] = v29;
            unint64_t v101 = 0;
            uint64_t v102 = 0;
            BOOL v100 = 0;
            std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v100, *((const void **)v25 + 5), *((void *)v25 + 6), (uint64_t)(*((void *)v25 + 6) - *((void *)v25 + 5)) >> 2);
            if (((***(unsigned int (****)(void))(*((void *)a1 + 9) + 8))(*(void *)(*((void *)a1 + 9) + 8)) == 50000
               || (***(unsigned int (****)(void))(*((void *)a1 + 9) + 8))(*(void *)(*((void *)a1 + 9) + 8)) == 50001)
              && (*(int *)buf > 0x4000 || *(int *)&buf[4] > 0x4000))
            {
              *uint64_t v27 = 0;
            }
            if (*(_DWORD *)&buf[8] * *(_DWORD *)&buf[12] * *(_DWORD *)&buf[16] > 0x2000) {
              *uint64_t v27 = 0;
            }
            if (v100)
            {
              unint64_t v101 = v100;
              operator delete(v100);
            }
            v25 += 4;
          }
          while (v25 != v26);
        }
        unint64_t v30 = v9 + 224 * v10;
        uint64_t v31 = *(long long **)(v30 + 160);
        unint64_t v32 = *(long long **)(v30 + 168);
        if (v31 != v32)
        {
          unint64_t v33 = (unsigned char *)(v9 + 224 * v10 + 106);
          do
          {
            long long v34 = *v31;
            long long v35 = v31[1];
            *(void *)&unsigned char buf[32] = *((void *)v31 + 4);
            *(_OWORD *)long long buf = v34;
            *(_OWORD *)&uint8_t buf[16] = v35;
            unint64_t v101 = 0;
            uint64_t v102 = 0;
            BOOL v100 = 0;
            std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v100, *((const void **)v31 + 5), *((void *)v31 + 6), (uint64_t)(*((void *)v31 + 6) - *((void *)v31 + 5)) >> 2);
            if (((***(unsigned int (****)(void))(*((void *)a1 + 9) + 8))(*(void *)(*((void *)a1 + 9) + 8)) == 50000
               || (***(unsigned int (****)(void))(*((void *)a1 + 9) + 8))(*(void *)(*((void *)a1 + 9) + 8)) == 50001)
              && (*(int *)buf > 0x4000 || *(int *)&buf[4] > 0x4000))
            {
              unsigned char *v33 = 0;
            }
            if (*(_DWORD *)&buf[8] * *(_DWORD *)&buf[12] * *(_DWORD *)&buf[16] > 0x2000) {
              unsigned char *v33 = 0;
            }
            if (v100)
            {
              unint64_t v101 = v100;
              operator delete(v100);
            }
            v31 += 4;
          }
          while (v31 != v32);
        }
      }
      unint64_t v36 = v9 + 224 * v10;
      int v39 = *(unsigned __int8 *)(v36 + 106);
      uint64_t v38 = (unsigned char *)(v36 + 106);
      int v37 = v39;
      uint64_t v40 = *(uint64_t **)a3;
      std::string v41 = *(std::__shared_weak_count **)(a3 + 8);
      if (v41) {
        atomic_fetch_add_explicit(&v41->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int64x2_t v42 = (std::__shared_weak_count *)*((void *)a1 + 10);
      v76[0] = *((const void **)a1 + 9);
      v76[1] = v42;
      if (v42) {
        atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v43 = (Espresso *)Espresso::also_check_not_blacklisted(v10, v37 != 0, *v40, v76);
      unsigned char *v38 = (_BYTE)v43;
      if (v42) {
        nitro::nitro_function::nitro_function(v42);
      }
      if (v41) {
        nitro::nitro_function::nitro_function(v41);
      }
      if (*(unsigned char *)(*v68 + 224 * v10 + 105)) {
        BOOL v45 = 1;
      }
      else {
        BOOL v45 = *(unsigned __int8 *)(*v68 + 224 * v10 + 106) != 0;
      }
      uint64_t v11 = v71 & v45;
      if ((v71 & v45 & 1) == 0)
      {
        unint64_t v46 = Espresso::espresso_os_log_subsystem(v43, v44);
        if (os_log_type_enabled(v46, OS_LOG_TYPE_DEBUG))
        {
          unint64_t v56 = v9 + 224 * v10;
          uint64_t v57 = (void *)(v56 + 48);
          if (*(char *)(v56 + 71) < 0) {
            uint64_t v57 = (void *)*v57;
          }
          uint64_t v58 = *v68 + 224 * v10;
          int v59 = *(unsigned __int8 *)(v58 + 105);
          LODWORD(v58) = *(unsigned __int8 *)(v58 + 106);
          *(_DWORD *)long long buf = 134218754;
          *(void *)&uint8_t buf[4] = v10;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = v57;
          *(_WORD *)&buf[22] = 1024;
          *(_DWORD *)&unsigned char buf[24] = v59;
          *(_WORD *)&buf[28] = 1024;
          *(_DWORD *)&buf[30] = v58;
          _os_log_debug_impl(&dword_1920CB000, v46, OS_LOG_TYPE_DEBUG, "layer %zu (%s) not available (%d %d)", buf, 0x22u);
        }
      }
      if (v73) {
        nitro::nitro_function::nitro_function(v73);
      }
      ++v10;
      uint64_t v9 = *v68;
    }
    while (v10 < 0x6DB6DB6DB6DB6DB7 * ((v68[1] - *v68) >> 5));
  }
  (*(void (**)(void))(**(void **)(*((void *)a1 + 9) + 8) + 40))(*(void *)(*((void *)a1 + 9)
                                                                                               + 8));
  uint64_t v60 = v11;
  int v75 = (***(uint64_t (****)(void))(*((void *)a1 + 9) + 8))(*(void *)(*((void *)a1 + 9) + 8));
  uint64_t v61 = *v4;
  if (v4[1] != *v4)
  {
    unint64_t v62 = 0;
    uint64_t v63 = 106;
    do
    {
      int v64 = *(unsigned __int8 *)(v61 + v63);
      size_t v65 = (uint64_t **)(*((void *)a1 + 7) + 72);
      *(void *)long long buf = v61 + v63 - 106;
      uint64_t v66 = std::__tree<std::__value_type<std::string,std::map<Espresso::platform,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<Espresso::platform,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<Espresso::platform,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v65, *(void **)buf, (uint64_t)&std::piecewise_construct, (long long **)buf);
      *((_DWORD *)std::__tree<std::__value_type<Espresso::platform,int>,std::__map_value_compare<Espresso::platform,std::__value_type<Espresso::platform,int>,std::less<Espresso::platform>,true>,std::allocator<std::__value_type<Espresso::platform,int>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform const&>,std::tuple<>>(v66 + 7, v75, (unsigned int *)&v75)+ 8) = v64;
      ++v62;
      uint64_t v61 = *v4;
      v63 += 224;
    }
    while (v62 < 0x6DB6DB6DB6DB6DB7 * ((v4[1] - *v4) >> 5));
  }
  if (v97) {
    nitro::nitro_function::nitro_function(v97);
  }
  return v60;
}

void sub_192120C88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  unint64_t v36 = *(std::__shared_weak_count **)(v34 + 128);
  if (v36) {
    nitro::nitro_function::nitro_function(v36);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::cpu_context_transfer_algo_t::check_all_kernels_availability_on_context(uint64_t a1, void *a2, void *a3, int a4, uint64_t **a5)
{
  uint64_t v6 = *a5;
  uint64_t v7 = **a5;
  unint64_t v56 = *a5;
  if ((*a5)[1] != v7)
  {
    uint64_t v9 = 0;
    unint64_t v10 = 0;
    do
    {
      long long v11 = *(_OWORD *)(*a2 + 16 * v10);
      long long v12 = *(std::__shared_weak_count **)(*a2 + 16 * v10 + 8);
      if (v12)
      {
        atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v7 = *v6;
      }
      std::string::size_type v13 = v7 + v9;
      v71[0] = *(void *)(v7 + v9 + 88);
      unint64_t v14 = *(std::__shared_weak_count **)(v7 + v9 + 96);
      v71[1] = v14;
      if (v14) {
        atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v70 = v11;
      if (v12) {
        atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v15 = (std::__shared_weak_count *)a3[1];
      v69[0] = *a3;
      v69[1] = v15;
      if (v15) {
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v16 = (std::__shared_weak_count *)a5[1];
      v68[0] = *a5;
      v68[1] = v16;
      if (v16) {
        atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v17 = *(int64x2_t **)(a1 + 64);
      v67[0] = *(int64x2_t **)(a1 + 56);
      v67[1] = v17;
      if (v17) {
        atomic_fetch_add_explicit(&v17->i64[1], 1uLL, memory_order_relaxed);
      }
      uint64_t v18 = v7 + v9;
      *(unsigned char *)(v18 + 105) = is_kernel_available_on_engine(v10, v71, v13, (uint64_t *)&v70, (uint64_t)v69, a4, v68, v67);
      if (v17) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v17);
      }
      if (v16) {
        nitro::nitro_function::nitro_function(v16);
      }
      if (v15) {
        nitro::nitro_function::nitro_function(v15);
      }
      uint64_t v6 = v56;
      if (v12) {
        nitro::nitro_function::nitro_function(v12);
      }
      if (v14) {
        nitro::nitro_function::nitro_function(v14);
      }
      int v19 = *(unsigned __int8 *)(v18 + 105);
      unint64_t v20 = *a5;
      int v21 = (std::__shared_weak_count *)a5[1];
      if (v21) {
        atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v22 = (std::__shared_weak_count *)a3[1];
      v66[0] = *(const void **)a3;
      v66[1] = v22;
      if (v22) {
        atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      *(unsigned char *)(v18 + 105) = Espresso::also_check_not_blacklisted(v10, v19 != 0, *v20, v66);
      if (v22) {
        nitro::nitro_function::nitro_function(v22);
      }
      if (v21) {
        nitro::nitro_function::nitro_function(v21);
      }
      if (v12) {
        nitro::nitro_function::nitro_function(v12);
      }
      ++v10;
      uint64_t v7 = *v56;
      v9 += 224;
    }
    while (v10 < 0x6DB6DB6DB6DB6DB7 * ((v56[1] - *v56) >> 5));
  }
  (*(void (**)(void))(**(void **)(*a3 + 8) + 40))(*(void *)(*a3 + 8));
  int v23 = (***(uint64_t (****)(void))(*a3 + 8))();
  int v65 = v23;
  if (!is_metal_but_not_mps_buffers(v23))
  {
    uint64_t v25 = *v6;
    uint64_t v24 = v6[1];
    goto LABEL_79;
  }
  uint64_t v25 = *v6;
  uint64_t v24 = v6[1];
  if ((v23 - 50005) > 3 || ((0xBu >> ((v23 - 85) & 0xF)) & 1) == 0)
  {
    if (v24 == v25) {
      return;
    }
    unint64_t v27 = 0;
    while (1)
    {
      long long v28 = *(std::__shared_weak_count **)(*a2 + 16 * v27 + 8);
      if (v28)
      {
        atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v25 = *v6;
      }
      uint64_t v29 = v25 + 224 * v27;
      unint64_t v30 = *(long long **)(v29 + 184);
      uint64_t v31 = *(long long **)(v29 + 192);
      if (v30 != v31)
      {
        unint64_t v32 = (unsigned char *)(v25 + 224 * v27 + 105);
        unsigned int v33 = v65 & 0xFFFFFFFE;
        do
        {
          long long v34 = *v30;
          long long v35 = v30[1];
          uint64_t v61 = *((void *)v30 + 4);
          long long v59 = v34;
          long long v60 = v35;
          uint64_t v63 = 0;
          uint64_t v64 = 0;
          std::string __p = 0;
          std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *((const void **)v30 + 5), *((void *)v30 + 6), (uint64_t)(*((void *)v30 + 6) - *((void *)v30 + 5)) >> 2);
          if (v33 == 50000)
          {
            if ((int)v59 > 0x4000 || SDWORD1(v59) > 0x4000) {
              *unint64_t v32 = 0;
            }
            int v36 = DWORD2(v59);
            if (DWORD2(v59) * HIDWORD(v59) * (int)v60 <= 0x2000) {
              goto LABEL_57;
            }
          }
          else
          {
            int v36 = DWORD2(v59) * HIDWORD(v59) * v60;
          }
          if (v36 > 0x2000) {
            *unint64_t v32 = 0;
          }
LABEL_57:
          if (__p)
          {
            uint64_t v63 = __p;
            operator delete(__p);
          }
          v30 += 4;
        }
        while (v30 != v31);
      }
      uint64_t v37 = v25 + 224 * v27;
      uint64_t v38 = *(long long **)(v37 + 160);
      int v39 = *(long long **)(v37 + 168);
      if (v38 != v39) {
        break;
      }
LABEL_74:
      if (v28) {
        nitro::nitro_function::nitro_function(v28);
      }
      ++v27;
      uint64_t v6 = v56;
      uint64_t v25 = *v56;
      uint64_t v24 = v56[1];
      uint64_t v45 = a1;
      if (v27 >= 0x6DB6DB6DB6DB6DB7 * ((v24 - *v56) >> 5)) {
        goto LABEL_80;
      }
    }
    uint64_t v40 = (unsigned char *)(v25 + 224 * v27 + 105);
    unsigned int v41 = v65 & 0xFFFFFFFE;
    while (1)
    {
      long long v42 = *v38;
      long long v43 = v38[1];
      uint64_t v61 = *((void *)v38 + 4);
      long long v59 = v42;
      long long v60 = v43;
      uint64_t v63 = 0;
      uint64_t v64 = 0;
      std::string __p = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *((const void **)v38 + 5), *((void *)v38 + 6), (uint64_t)(*((void *)v38 + 6) - *((void *)v38 + 5)) >> 2);
      if (v41 == 50000)
      {
        if ((int)v59 > 0x4000 || SDWORD1(v59) > 0x4000) {
          *uint64_t v40 = 0;
        }
        int v44 = DWORD2(v59);
        if (DWORD2(v59) * HIDWORD(v59) * (int)v60 <= 0x2000) {
          goto LABEL_71;
        }
      }
      else
      {
        int v44 = DWORD2(v59) * HIDWORD(v59) * v60;
      }
      if (v44 > 0x2000) {
        *uint64_t v40 = 0;
      }
LABEL_71:
      if (__p)
      {
        uint64_t v63 = __p;
        operator delete(__p);
      }
      v38 += 4;
      if (v38 == v39) {
        goto LABEL_74;
      }
    }
  }
LABEL_79:
  uint64_t v45 = a1;
LABEL_80:
  if (v24 != v25)
  {
    uint64_t v46 = 0;
    unint64_t v47 = 0;
    do
    {
      unint64_t v48 = (void *)(v25 + v46);
      int v49 = *(unsigned __int8 *)(v25 + v46 + 105);
      std::string v50 = (uint64_t **)(*(void *)(v45 + 56) + 72);
      *(void *)&long long v59 = v48;
      long long v51 = std::__tree<std::__value_type<std::string,std::map<Espresso::platform,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<Espresso::platform,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<Espresso::platform,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v50, v48, (uint64_t)&std::piecewise_construct, (long long **)&v59);
      *((_DWORD *)std::__tree<std::__value_type<Espresso::platform,int>,std::__map_value_compare<Espresso::platform,std::__value_type<Espresso::platform,int>,std::less<Espresso::platform>,true>,std::allocator<std::__value_type<Espresso::platform,int>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform const&>,std::tuple<>>(v51 + 7, v65, (unsigned int *)&v65)+ 8) = v49;
      BOOL v52 = v48[11] != 0;
      uint64_t v53 = (uint64_t **)(*(void *)(v45 + 56) + 96);
      *(void *)&long long v59 = v48;
      int v54 = std::__tree<std::__value_type<std::string,std::map<Espresso::platform,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<Espresso::platform,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<Espresso::platform,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v53, v48, (uint64_t)&std::piecewise_construct, (long long **)&v59);
      *((_DWORD *)std::__tree<std::__value_type<Espresso::platform,int>,std::__map_value_compare<Espresso::platform,std::__value_type<Espresso::platform,int>,std::less<Espresso::platform>,true>,std::allocator<std::__value_type<Espresso::platform,int>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform const&>,std::tuple<>>(v54 + 7, v65, (unsigned int *)&v65)+ 8) = v52;
      ++v47;
      uint64_t v25 = *v6;
      v46 += 224;
    }
    while (v47 < 0x6DB6DB6DB6DB6DB7 * ((v6[1] - *v6) >> 5));
  }
}

void sub_19212133C(_Unwind_Exception *exception_object)
{
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t **std::__tree<std::__value_type<std::string,std::map<Espresso::platform,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<Espresso::platform,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<Espresso::platform,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void *a2, uint64_t a3, long long **a4)
{
  uint64_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  uint64_t v8 = a1 + 1;
  uint64_t v9 = a1 + 1;
  if (v6)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v8 = (uint64_t **)v6;
        long long v11 = v6 + 4;
        if (!std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, v6 + 4)) {
          break;
        }
        uint64_t v6 = *v8;
        uint64_t v9 = v8;
        if (!*v8) {
          goto LABEL_7;
        }
      }
      if (!std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v11, a2)) {
        return v8;
      }
      uint64_t v9 = v8 + 1;
      uint64_t v6 = v8[1];
      if (!v6) {
        goto LABEL_7;
      }
    }
  }
  else
  {
LABEL_7:
    long long v12 = operator new(0x50uLL);
    v19[0] = v12;
    v19[1] = v7;
    char v20 = 0;
    std::string::size_type v13 = (std::string *)(v12 + 4);
    unint64_t v14 = *a4;
    if (*((char *)*a4 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v13, *(const std::string::value_type **)v14, *((void *)v14 + 1));
    }
    else
    {
      long long v15 = *v14;
      v12[6] = *((void *)v14 + 2);
      *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v15;
    }
    v12[9] = 0;
    v12[8] = 0;
    v12[7] = v12 + 8;
    char v20 = 1;
    *long long v12 = 0;
    v12[1] = 0;
    v12[2] = v8;
    char *v9 = v12;
    uint64_t v16 = (uint64_t *)**a1;
    uint64_t v17 = v12;
    if (v16)
    {
      *a1 = v16;
      uint64_t v17 = *v9;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v17);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    v19[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::map<Espresso::platform,int>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::map<Espresso::platform,int>>,void *>>>>::reset[abi:ne180100]((uint64_t)v19);
  }
  return (uint64_t **)v12;
}

void sub_19212150C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::map<Espresso::platform,int>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::map<Espresso::platform,int>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<Espresso::platform,int>,std::__map_value_compare<Espresso::platform,std::__value_type<Espresso::platform,int>,std::less<Espresso::platform>,true>,std::allocator<std::__value_type<Espresso::platform,int>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform const&>,std::tuple<>>(uint64_t **a1, int a2, unsigned int *a3)
{
  uint64_t v6 = a1 + 1;
  int v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v7 = (uint64_t **)v5;
        int v8 = *((_DWORD *)v5 + 7);
        if (v8 <= a2) {
          break;
        }
        int v5 = *v7;
        uint64_t v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      int v5 = v7[1];
      if (!v5)
      {
        uint64_t v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v7 = a1 + 1;
LABEL_9:
    uint64_t v9 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v9 + 28) = *a3;
    std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at(a1, (uint64_t)v7, v6, v9);
    return v9;
  }
  return (uint64_t *)v7;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::map<Espresso::platform,int>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::map<Espresso::platform,int>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::map<Espresso::platform,int>>,0>((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

void std::__introsort<std::_ClassicAlgPolicy,Espresso::net::insert_layers(std::vector<Espresso::net::new_layer_info> const&)::$_0 &,Espresso::net::new_layer_info*,false>(std::vector<std::string> *a1, std::vector<std::string> *a2, uint64_t a3, char a4)
{
  while (2)
  {
    int v8 = a2;
    uint64_t v125 = a2 - 3;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = a1;
        uint64_t v10 = (char *)v8 - (char *)a1;
        unint64_t v11 = 0x8E38E38E38E38E39 * (((char *)v8 - (char *)a1) >> 3);
        if (v5 || !v4)
        {
          switch(v11)
          {
            case 0uLL:
            case 1uLL:
              return;
            case 2uLL:
              if (SLODWORD(v125->__begin_) <= SLODWORD(v9->__begin_)) {
                return;
              }
              int v44 = v9;
              uint64_t v45 = (uint64_t)&a2[-3];
              break;
            case 3uLL:
              std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::net::insert_layers(std::vector<Espresso::net::new_layer_info> const&)::$_0 &,Espresso::net::new_layer_info*>(v9, v9 + 3, v125);
              return;
            case 4uLL:
              std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::net::insert_layers(std::vector<Espresso::net::new_layer_info> const&)::$_0 &,Espresso::net::new_layer_info*>(v9, v9 + 3, v9 + 6, v125);
              return;
            case 5uLL:
              uint64_t v46 = v9 + 6;
              std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::net::insert_layers(std::vector<Espresso::net::new_layer_info> const&)::$_0 &,Espresso::net::new_layer_info*>(v9, v9 + 3, v9 + 6, &v9[9]);
              if (SLODWORD(v125->__begin_) <= SLODWORD(v9[9].__begin_)) {
                return;
              }
              std::swap[abi:ne180100]<Espresso::net::new_layer_info>(v9 + 9, (uint64_t)v125);
              if (SLODWORD(v9[9].__begin_) <= SLODWORD(v46->__begin_)) {
                return;
              }
              std::swap[abi:ne180100]<Espresso::net::new_layer_info>(v9 + 6, (uint64_t)&v9[9]);
              if (SLODWORD(v46->__begin_) <= SLODWORD(v9[3].__begin_)) {
                return;
              }
              std::swap[abi:ne180100]<Espresso::net::new_layer_info>(v9 + 3, (uint64_t)&v9[6]);
              if (SLODWORD(v9[3].__begin_) <= SLODWORD(v9->__begin_)) {
                return;
              }
              int v44 = v9;
              uint64_t v45 = (uint64_t)&v9[3];
              break;
            default:
              JUMPOUT(0);
          }
          std::swap[abi:ne180100]<Espresso::net::new_layer_info>(v44, v45);
          return;
        }
        if (v10 <= 1727)
        {
          if (a4)
          {
            if (v9 != v8)
            {
              unint64_t v47 = v9 + 3;
              if (&v9[3] != a2)
              {
                uint64_t v48 = 0;
                int v49 = v9;
                do
                {
                  std::string v50 = v47;
                  begiuint64_t n = (int)v49[3].__begin_;
                  if (begin > SLODWORD(v49->__begin_))
                  {
                    long long v52 = *(_OWORD *)&v49[4].__begin_;
                    long long v136 = *(_OWORD *)&v49[3].__end_;
                    LODWORD(v135) = begin;
                    v49[3].__end_ = 0;
                    v49[3].__end_cap_.__value_ = 0;
                    long long v137 = v52;
                    value = v49[4].__end_cap_.__value_;
                    v49[4].__begin_ = 0;
                    v49[4].__end_ = 0;
                    long long v139 = *(_OWORD *)&v49[5].__begin_;
                    uint64_t v140 = v49[5].__end_cap_.__value_;
                    v49[4].__end_cap_.__value_ = 0;
                    v49[5].__begin_ = 0;
                    v49[5].__end_ = 0;
                    v49[5].__end_cap_.__value_ = 0;
                    uint64_t v53 = v48;
                    int v54 = (int)v49->__begin_;
                    while (1)
                    {
                      int64x2_t v55 = (char *)v9 + v53;
                      *((_DWORD *)v55 + 18) = v54;
                      long long v56 = *(_OWORD *)((char *)&v9->__end_ + v53);
                      *((void *)v55 + 1) = 0;
                      *((void *)v55 + 2) = 0;
                      uint64_t v57 = *(std::__shared_weak_count **)((char *)&v9[3].__end_cap_.__value_ + v53);
                      *((_OWORD *)v55 + 5) = v56;
                      if (v57) {
                        nitro::nitro_function::nitro_function(v57);
                      }
                      std::vector<std::string>::__vdeallocate((std::vector<std::string> *)v55 + 4);
                      *((_OWORD *)v55 + 6) = *(_OWORD *)(v55 + 24);
                      *((void *)v55 + 14) = *((void *)v55 + 5);
                      *((void *)v55 + 4) = 0;
                      *((void *)v55 + 5) = 0;
                      *((void *)v55 + 3) = 0;
                      std::vector<std::string>::__vdeallocate((std::vector<std::string> *)v55 + 5);
                      *(_OWORD *)(v55 + 120) = *((_OWORD *)v55 + 3);
                      *((void *)v55 + 17) = *((void *)v55 + 8);
                      *((void *)v55 + 6) = 0;
                      *((void *)v55 + 7) = 0;
                      *((void *)v55 + 8) = 0;
                      if (!v53) {
                        break;
                      }
                      uint64_t v58 = (std::vector<std::string> *)((char *)v9 + v53);
                      int v54 = *(_DWORD *)((char *)&v9[-3].__begin_ + v53);
                      v53 -= 72;
                      if ((int)v135 <= v54)
                      {
                        p_std::vector<std::string>::pointer end = &v58->__end_;
                        uint64_t v60 = (uint64_t)&v9[3] + v53;
                        uint64_t v61 = v58 + 1;
                        unint64_t v62 = v58 + 2;
                        goto LABEL_86;
                      }
                    }
                    p_std::vector<std::string>::pointer end = &v9->__end_;
                    uint64_t v61 = v9 + 1;
                    unint64_t v62 = v9 + 2;
                    uint64_t v60 = (uint64_t)v9;
LABEL_86:
                    *(_DWORD *)uint64_t v60 = v135;
                    long long v63 = v136;
                    long long v136 = 0uLL;
                    *p_std::vector<std::string>::pointer end = (std::vector<std::string>::pointer)v63;
                    uint64_t v64 = *(std::__shared_weak_count **)(v60 + 16);
                    *(void *)(v60 + 16) = *((void *)&v63 + 1);
                    if (v64) {
                      nitro::nitro_function::nitro_function(v64);
                    }
                    std::vector<std::string>::__vdeallocate(v61);
                    v61->__begin_ = (std::vector<std::string>::pointer)v137;
                    *(void *)(v60 + 32) = *((void *)&v137 + 1);
                    *(void *)(v60 + 40) = value;
                    long long v137 = 0uLL;
                    value = 0;
                    std::vector<std::string>::__vdeallocate(v62);
                    v62->__begin_ = (std::vector<std::string>::pointer)v139;
                    *(void *)(v60 + 56) = *((void *)&v139 + 1);
                    *(void *)(v60 + 64) = v140;
                    long long v139 = 0uLL;
                    uint64_t v140 = 0;
                    uint64_t v128 = (void **)&v139;
                    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v128);
                    uint64_t v128 = (void **)&v137;
                    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v128);
                    if (*((void *)&v136 + 1)) {
                      nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v136 + 1));
                    }
                  }
                  unint64_t v47 = v50 + 3;
                  v48 += 72;
                  int v49 = v50;
                }
                while (&v50[3] != a2);
              }
            }
          }
          else if (v9 != v8)
          {
            int v107 = v9 + 3;
            if (&v9[3] != a2)
            {
              uint64_t v108 = v9 - 3;
              do
              {
                int v109 = v107;
                int v110 = (int)v9[3].__begin_;
                if (v110 > SLODWORD(v9->__begin_))
                {
                  long long v111 = *(_OWORD *)&v9[4].__begin_;
                  long long v136 = *(_OWORD *)&v9[3].__end_;
                  LODWORD(v135) = v110;
                  v9[3].__end_ = 0;
                  v9[3].__end_cap_.__value_ = 0;
                  long long v137 = v111;
                  value = v9[4].__end_cap_.__value_;
                  v9[4].__begin_ = 0;
                  v9[4].__end_ = 0;
                  long long v139 = *(_OWORD *)&v9[5].__begin_;
                  uint64_t v140 = v9[5].__end_cap_.__value_;
                  v9[4].__end_cap_.__value_ = 0;
                  v9[5].__begin_ = 0;
                  v9[5].__end_ = 0;
                  v9[5].__end_cap_.__value_ = 0;
                  int v112 = v108;
                  int v113 = (int)v9->__begin_;
                  do
                  {
                    LODWORD(v112[6].__begin_) = v113;
                    long long v114 = *(_OWORD *)&v112[3].__end_;
                    v112[3].__end_ = 0;
                    v112[3].__end_cap_.__value_ = 0;
                    __int16 v115 = (std::__shared_weak_count *)v112[6].__end_cap_.__value_;
                    *(_OWORD *)&v112[6].__end_ = v114;
                    if (v115) {
                      nitro::nitro_function::nitro_function(v115);
                    }
                    std::vector<std::string>::__vdeallocate(v112 + 7);
                    uint64_t v116 = v112 + 4;
                    *(_OWORD *)&v112[7].__begin_ = *(_OWORD *)&v112[4].__begin_;
                    v112[7].__end_cap_.__value_ = v112[4].__end_cap_.__value_;
                    v112[4].__end_ = 0;
                    v112[4].__end_cap_.__value_ = 0;
                    v112[4].__begin_ = 0;
                    std::vector<std::string>::__vdeallocate(v112 + 8);
                    unint64_t v117 = v112 + 5;
                    *(_OWORD *)&v112[8].__begin_ = *(_OWORD *)&v112[5].__begin_;
                    v112[8].__end_cap_.__value_ = v112[5].__end_cap_.__value_;
                    v112[5].__begin_ = 0;
                    v112[5].__end_ = 0;
                    v112[5].__end_cap_.__value_ = 0;
                    int v118 = (int)v112->__begin_;
                    v112 -= 3;
                    int v113 = v118;
                  }
                  while ((int)v135 > v118);
                  LODWORD(v112[6].__begin_) = v135;
                  long long v119 = v136;
                  long long v136 = 0uLL;
                  double v120 = (std::__shared_weak_count *)v112[6].__end_cap_.__value_;
                  *(_OWORD *)&v112[6].__end_ = v119;
                  if (v120) {
                    nitro::nitro_function::nitro_function(v120);
                  }
                  std::vector<std::string>::__vdeallocate(v116);
                  *(_OWORD *)&v112[7].__begin_ = v137;
                  v112[7].__end_cap_.__value_ = value;
                  long long v137 = 0uLL;
                  value = 0;
                  std::vector<std::string>::__vdeallocate(v117);
                  *(_OWORD *)&v112[8].__begin_ = v139;
                  v112[8].__end_cap_.__value_ = v140;
                  long long v139 = 0uLL;
                  uint64_t v140 = 0;
                  uint64_t v128 = (void **)&v139;
                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v128);
                  uint64_t v128 = (void **)&v137;
                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v128);
                  if (*((void *)&v136 + 1)) {
                    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v136 + 1));
                  }
                }
                int v107 = v109 + 3;
                v108 += 3;
                uint64_t v9 = v109;
              }
              while (&v109[3] != a2);
            }
          }
          return;
        }
        uint64_t v127 = v9;
        if (!a3)
        {
          if (v9 != v8)
          {
            int64_t v65 = (v11 - 2) >> 1;
            int64_t v66 = v65;
            do
            {
              int64_t v67 = v66;
              if (v65 >= v66)
              {
                uint64_t v68 = (2 * v66) | 1;
                uint64_t v69 = &v9[3 * v68];
                if (2 * v67 + 2 < (uint64_t)v11)
                {
                  int v71 = (int)v69->__begin_;
                  int v70 = (int)v69[3].__begin_;
                  if (SLODWORD(v69->__begin_) >= v70) {
                    int v71 = (int)v69[3].__begin_;
                  }
                  if (SLODWORD(v69->__begin_) > v70)
                  {
                    v69 += 3;
                    uint64_t v68 = 2 * v67 + 2;
                  }
                }
                else
                {
                  int v71 = (int)v69->__begin_;
                }
                uint64_t v72 = &v9[3 * v67];
                if (v71 <= SLODWORD(v72->__begin_))
                {
                  LODWORD(v135) = v72->__begin_;
                  uint64_t v73 = &v9[3 * v67];
                  long long v136 = *(_OWORD *)&v73->__end_;
                  v73->__end_ = 0;
                  v73->__end_cap_.__value_ = 0;
                  long long v137 = *(_OWORD *)&v73[1].__begin_;
                  value = v73[1].__end_cap_.__value_;
                  v73[1].__begin_ = 0;
                  v73[1].__end_ = 0;
                  v73[1].__end_cap_.__value_ = 0;
                  long long v139 = *(_OWORD *)&v73[2].__begin_;
                  uint64_t v140 = v73[2].__end_cap_.__value_;
                  v73[2].__begin_ = 0;
                  v73[2].__end_ = 0;
                  v73[2].__end_cap_.__value_ = 0;
                  int v74 = (int)v69->__begin_;
                  while (1)
                  {
                    int v75 = v69;
                    LODWORD(v72->__begin_) = v74;
                    long long v76 = *(_OWORD *)&v69->__end_;
                    v69->__end_ = 0;
                    v69->__end_cap_.__value_ = 0;
                    unint64_t v77 = (std::__shared_weak_count *)v72->__end_cap_.__value_;
                    *(_OWORD *)&v72->__end_ = v76;
                    if (v77) {
                      nitro::nitro_function::nitro_function(v77);
                    }
                    std::vector<std::string>::__vdeallocate(v72 + 1);
                    *(_OWORD *)&v72[1].__begin_ = *(_OWORD *)&v75[1].__begin_;
                    v72[1].__end_cap_.__value_ = v75[1].__end_cap_.__value_;
                    v75[1].__begin_ = 0;
                    v75[1].__end_ = 0;
                    v75[1].__end_cap_.__value_ = 0;
                    std::vector<std::string>::__vdeallocate(v72 + 2);
                    *(_OWORD *)&v72[2].__begin_ = *(_OWORD *)&v75[2].__begin_;
                    v72[2].__end_cap_.__value_ = v75[2].__end_cap_.__value_;
                    v75[2].__begin_ = 0;
                    v75[2].__end_ = 0;
                    v75[2].__end_cap_.__value_ = 0;
                    if (v65 < v68) {
                      break;
                    }
                    uint64_t v69 = &v127[3 * ((2 * v68) | 1)];
                    if (2 * v68 + 2 < (uint64_t)v11)
                    {
                      int v74 = (int)v69->__begin_;
                      int v78 = (int)v69[3].__begin_;
                      if (SLODWORD(v69->__begin_) >= v78) {
                        int v74 = (int)v69[3].__begin_;
                      }
                      if (SLODWORD(v69->__begin_) <= v78)
                      {
                        uint64_t v68 = (2 * v68) | 1;
                      }
                      else
                      {
                        v69 += 3;
                        uint64_t v68 = 2 * v68 + 2;
                      }
                    }
                    else
                    {
                      int v74 = (int)v69->__begin_;
                      uint64_t v68 = (2 * v68) | 1;
                    }
                    int v79 = (int)v135;
                    uint64_t v72 = v75;
                    if (v74 > (int)v135) {
                      goto LABEL_115;
                    }
                  }
                  int v79 = (int)v135;
LABEL_115:
                  LODWORD(v75->__begin_) = v79;
                  long long v80 = v136;
                  long long v136 = 0uLL;
                  long long v81 = (std::__shared_weak_count *)v75->__end_cap_.__value_;
                  *(_OWORD *)&v75->__end_ = v80;
                  if (v81) {
                    nitro::nitro_function::nitro_function(v81);
                  }
                  std::vector<std::string>::__vdeallocate(v75 + 1);
                  *(_OWORD *)&v75[1].__begin_ = v137;
                  v75[1].__end_cap_.__value_ = value;
                  long long v137 = 0uLL;
                  value = 0;
                  std::vector<std::string>::__vdeallocate(v75 + 2);
                  *(_OWORD *)&v75[2].__begin_ = v139;
                  v75[2].__end_cap_.__value_ = v140;
                  long long v139 = 0uLL;
                  uint64_t v140 = 0;
                  uint64_t v128 = (void **)&v139;
                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v128);
                  uint64_t v128 = (void **)&v137;
                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v128);
                  if (*((void *)&v136 + 1)) {
                    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v136 + 1));
                  }
                  uint64_t v9 = v127;
                }
              }
              int64_t v66 = v67 - 1;
            }
            while (v67);
            int64_t v82 = v10 / 0x48uLL;
            long long v122 = v9 + 1;
            double v124 = &v9->__end_;
            id v121 = v9 + 2;
            do
            {
              uint64_t v83 = 0;
              LODWORD(v128) = v9->__begin_;
              long long v129 = *(_OWORD *)&v9->__end_;
              *double v124 = 0;
              v124[1] = 0;
              long long v130 = *(_OWORD *)&v9[1].__begin_;
              double v131 = v9[1].__end_cap_.__value_;
              v122->__end_ = 0;
              v122->__end_cap_.__value_ = 0;
              v122->__begin_ = 0;
              long long v132 = *(_OWORD *)&v9[2].__begin_;
              uint64_t v133 = v9[2].__end_cap_.__value_;
              v121->__end_ = 0;
              v121->__end_cap_.__value_ = 0;
              uint64_t v84 = (uint64_t)v9;
              v121->__begin_ = 0;
              do
              {
                uint64_t v85 = v84 + 72 * v83 + 72;
                if (2 * v83 + 2 < v82)
                {
                  int v87 = *(_DWORD *)v85;
                  int v86 = *(_DWORD *)(v84 + 72 * v83 + 144);
                  if (*(_DWORD *)v85 >= v86) {
                    int v87 = *(_DWORD *)(v84 + 72 * v83 + 144);
                  }
                  if (*(_DWORD *)v85 <= v86)
                  {
                    uint64_t v83 = (2 * v83) | 1;
                  }
                  else
                  {
                    uint64_t v85 = v84 + 72 * v83 + 144;
                    uint64_t v83 = 2 * v83 + 2;
                  }
                }
                else
                {
                  int v87 = *(_DWORD *)v85;
                  uint64_t v83 = (2 * v83) | 1;
                }
                *(_DWORD *)uint64_t v84 = v87;
                long long v88 = *(_OWORD *)(v85 + 8);
                *(void *)(v85 + 8) = 0;
                *(void *)(v85 + 16) = 0;
                BOOL v89 = *(std::__shared_weak_count **)(v84 + 16);
                *(_OWORD *)(v84 + 8) = v88;
                if (v89) {
                  nitro::nitro_function::nitro_function(v89);
                }
                std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v84 + 24));
                *(_OWORD *)(v84 + 24) = *(_OWORD *)(v85 + 24);
                *(void *)(v84 + 40) = *(void *)(v85 + 40);
                *(void *)(v85 + 24) = 0;
                *(void *)(v85 + 32) = 0;
                *(void *)(v85 + 40) = 0;
                std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v84 + 48));
                *(_OWORD *)(v84 + 48) = *(_OWORD *)(v85 + 48);
                *(void *)(v84 + 64) = *(void *)(v85 + 64);
                *(void *)(v85 + 48) = 0;
                *(void *)(v85 + 56) = 0;
                *(void *)(v85 + 64) = 0;
                uint64_t v84 = v85;
              }
              while (v83 <= (uint64_t)((unint64_t)(v82 - 2) >> 1));
              if ((std::vector<std::string> *)v85 == &a2[-3])
              {
                *(_DWORD *)uint64_t v85 = v128;
                long long v104 = v129;
                long long v129 = 0uLL;
                int v105 = *(std::__shared_weak_count **)(v85 + 16);
                *(_OWORD *)(v85 + 8) = v104;
                if (v105) {
                  nitro::nitro_function::nitro_function(v105);
                }
                std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v85 + 24));
                *(_OWORD *)(v85 + 24) = v130;
                *(void *)(v85 + 40) = v131;
                long long v130 = 0uLL;
                double v131 = 0;
                std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v85 + 48));
                *(_OWORD *)(v85 + 48) = v132;
                *(void *)(v85 + 64) = v133;
                long long v132 = 0uLL;
                uint64_t v133 = 0;
              }
              else
              {
                *(_DWORD *)uint64_t v85 = a2[-3].__begin_;
                long long v90 = *(_OWORD *)&a2[-3].__end_;
                a2[-3].__end_ = 0;
                a2[-3].__end_cap_.__value_ = 0;
                uint64_t v91 = *(std::__shared_weak_count **)(v85 + 16);
                *(_OWORD *)(v85 + 8) = v90;
                if (v91) {
                  nitro::nitro_function::nitro_function(v91);
                }
                std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v85 + 24));
                *(_OWORD *)(v85 + 24) = *(_OWORD *)&a2[-2].__begin_;
                *(void *)(v85 + 40) = a2[-2].__end_cap_.__value_;
                a2[-2].__begin_ = 0;
                a2[-2].__end_ = 0;
                a2[-2].__end_cap_.__value_ = 0;
                std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v85 + 48));
                uint64_t v92 = a2 - 1;
                *(_OWORD *)(v85 + 48) = *(_OWORD *)&a2[-1].__begin_;
                *(void *)(v85 + 64) = a2[-1].__end_cap_.__value_;
                v92->__begin_ = 0;
                v92->__end_ = 0;
                v92->__end_cap_.__value_ = 0;
                LODWORD(a2[-3].__begin_) = v128;
                long long v93 = v129;
                long long v129 = 0uLL;
                unint64_t v94 = (std::__shared_weak_count *)a2[-3].__end_cap_.__value_;
                *(_OWORD *)&a2[-3].__end_ = v93;
                if (v94) {
                  nitro::nitro_function::nitro_function(v94);
                }
                std::vector<std::string>::__vdeallocate(a2 - 2);
                *(_OWORD *)&a2[-2].__begin_ = v130;
                a2[-2].__end_cap_.__value_ = v131;
                long long v130 = 0uLL;
                double v131 = 0;
                std::vector<std::string>::__vdeallocate(a2 - 1);
                *(_OWORD *)&a2[-1].__begin_ = v132;
                a2[-1].__end_cap_.__value_ = v133;
                long long v132 = 0uLL;
                uint64_t v133 = 0;
                uint64_t v95 = v85 + 72 - (void)v127;
                if (v95 >= 73)
                {
                  unint64_t v96 = (v95 / 0x48uLL - 2) >> 1;
                  unint64_t v97 = &v127[3 * v96];
                  if (SLODWORD(v97->__begin_) > *(_DWORD *)v85)
                  {
                    LODWORD(v135) = *(_DWORD *)v85;
                    long long v136 = *(_OWORD *)(v85 + 8);
                    *(void *)(v85 + 8) = 0;
                    *(void *)(v85 + 16) = 0;
                    long long v137 = *(_OWORD *)(v85 + 24);
                    value = *(std::string **)(v85 + 40);
                    *(void *)(v85 + 24) = 0;
                    *(void *)(v85 + 32) = 0;
                    *(void *)(v85 + 40) = 0;
                    long long v139 = *(_OWORD *)(v85 + 48);
                    uint64_t v140 = *(std::string **)(v85 + 64);
                    *(void *)(v85 + 48) = 0;
                    *(void *)(v85 + 56) = 0;
                    *(void *)(v85 + 64) = 0;
                    int v98 = (int)v97->__begin_;
                    do
                    {
                      uint64_t v99 = (uint64_t)v97;
                      *(_DWORD *)uint64_t v85 = v98;
                      long long v100 = *(_OWORD *)&v97->__end_;
                      v97->__end_ = 0;
                      v97->__end_cap_.__value_ = 0;
                      unint64_t v101 = *(std::__shared_weak_count **)(v85 + 16);
                      *(_OWORD *)(v85 + 8) = v100;
                      if (v101) {
                        nitro::nitro_function::nitro_function(v101);
                      }
                      std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v85 + 24));
                      *(_OWORD *)(v85 + 24) = *(_OWORD *)(v99 + 24);
                      *(void *)(v85 + 40) = *(void *)(v99 + 40);
                      *(void *)(v99 + 24) = 0;
                      *(void *)(v99 + 32) = 0;
                      *(void *)(v99 + 40) = 0;
                      std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v85 + 48));
                      *(_OWORD *)(v85 + 48) = *(_OWORD *)(v99 + 48);
                      *(void *)(v85 + 64) = *(void *)(v99 + 64);
                      *(void *)(v99 + 48) = 0;
                      *(void *)(v99 + 56) = 0;
                      *(void *)(v99 + 64) = 0;
                      if (!v96) {
                        break;
                      }
                      unint64_t v96 = (v96 - 1) >> 1;
                      unint64_t v97 = &v127[3 * v96];
                      int v98 = (int)v97->__begin_;
                      uint64_t v85 = v99;
                    }
                    while (SLODWORD(v97->__begin_) > (int)v135);
                    *(_DWORD *)uint64_t v99 = v135;
                    long long v102 = v136;
                    long long v136 = 0uLL;
                    uint64_t v103 = *(std::__shared_weak_count **)(v99 + 16);
                    *(_OWORD *)(v99 + 8) = v102;
                    if (v103) {
                      nitro::nitro_function::nitro_function(v103);
                    }
                    std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v99 + 24));
                    *(_OWORD *)(v99 + 24) = v137;
                    *(void *)(v99 + 40) = value;
                    long long v137 = 0uLL;
                    value = 0;
                    std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v99 + 48));
                    *(_OWORD *)(v99 + 48) = v139;
                    *(void *)(v99 + 64) = v140;
                    long long v139 = 0uLL;
                    uint64_t v140 = 0;
                    uint64_t v134 = (void **)&v139;
                    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v134);
                    uint64_t v134 = (void **)&v137;
                    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v134);
                    if (*((void *)&v136 + 1)) {
                      nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v136 + 1));
                    }
                  }
                }
              }
              uint64_t v135 = (void **)&v132;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v135);
              uint64_t v135 = (void **)&v130;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v135);
              if (*((void *)&v129 + 1)) {
                nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v129 + 1));
              }
              a2 -= 3;
              BOOL v106 = v82-- <= 2;
              uint64_t v9 = v127;
            }
            while (!v106);
          }
          return;
        }
        long long v12 = &v9[3 * (v11 >> 1)];
        if ((unint64_t)v10 >= 0x2401)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::net::insert_layers(std::vector<Espresso::net::new_layer_info> const&)::$_0 &,Espresso::net::new_layer_info*>(v9, &v9[3 * (v11 >> 1)], v125);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::net::insert_layers(std::vector<Espresso::net::new_layer_info> const&)::$_0 &,Espresso::net::new_layer_info*>(v9 + 3, &v9[3 * (v11 >> 1) - 3], a2 - 6);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::net::insert_layers(std::vector<Espresso::net::new_layer_info> const&)::$_0 &,Espresso::net::new_layer_info*>(v9 + 6, &v9[3 * (v11 >> 1) + 3], a2 - 9);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::net::insert_layers(std::vector<Espresso::net::new_layer_info> const&)::$_0 &,Espresso::net::new_layer_info*>(&v9[3 * (v11 >> 1) - 3], v12, &v9[3 * (v11 >> 1) + 3]);
          std::swap[abi:ne180100]<Espresso::net::new_layer_info>(v9, (uint64_t)v12);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::net::insert_layers(std::vector<Espresso::net::new_layer_info> const&)::$_0 &,Espresso::net::new_layer_info*>(&v9[3 * (v11 >> 1)], v9, v125);
        }
        --a3;
        int v13 = (int)v9->__begin_;
        if ((a4 & 1) != 0 || SLODWORD(v9[-3].__begin_) > v13) {
          break;
        }
        a1 = v9;
        long long v32 = *(_OWORD *)&v9[1].__begin_;
        uint64_t v31 = v9 + 1;
        LODWORD(v135) = v13;
        std::vector<std::string>::pointer end = v31[-1].__end_;
        long long v34 = v31[-1].__end_cap_.__value_;
        *(void *)&long long v136 = end;
        *((void *)&v136 + 1) = v34;
        v31[-1].__end_ = 0;
        v31[-1].__end_cap_.__value_ = 0;
        long long v137 = v32;
        value = v31->__end_cap_.__value_;
        v31->__end_ = 0;
        v31->__end_cap_.__value_ = 0;
        v31->__begin_ = 0;
        long long v139 = *(_OWORD *)&v31[1].__begin_;
        uint64_t v140 = v31[1].__end_cap_.__value_;
        v31[1].__begin_ = 0;
        v31[1].__end_ = 0;
        v31[1].__end_cap_.__value_ = 0;
        if (v13 <= SLODWORD(v125->__begin_))
        {
          unint64_t v36 = (unint64_t)&a1[3];
          do
          {
            a1 = (std::vector<std::string> *)v36;
            if (v36 >= (unint64_t)a2) {
              break;
            }
            v36 += 72;
          }
          while (v13 <= SLODWORD(a1->__begin_));
        }
        else
        {
          do
          {
            int v35 = (int)a1[3].__begin_;
            a1 += 3;
          }
          while (v13 <= v35);
        }
        unint64_t v37 = (unint64_t)a2;
        if (a1 < a2)
        {
          unint64_t v37 = (unint64_t)a2;
          do
          {
            int v38 = *(_DWORD *)(v37 - 72);
            v37 -= 72;
          }
          while (v13 > v38);
        }
        while ((unint64_t)a1 < v37)
        {
          std::swap[abi:ne180100]<Espresso::net::new_layer_info>(a1, v37);
          do
          {
            int v39 = (int)a1[3].__begin_;
            a1 += 3;
          }
          while (v13 <= v39);
          do
          {
            int v40 = *(_DWORD *)(v37 - 72);
            v37 -= 72;
          }
          while (v13 > v40);
        }
        if (&a1[-3] != v127)
        {
          LODWORD(v127->__begin_) = a1[-3].__begin_;
          long long v41 = *(_OWORD *)&a1[-3].__end_;
          a1[-3].__end_ = 0;
          a1[-3].__end_cap_.__value_ = 0;
          long long v42 = (std::__shared_weak_count *)v127->__end_cap_.__value_;
          *(_OWORD *)&v127->__end_ = v41;
          if (v42) {
            nitro::nitro_function::nitro_function(v42);
          }
          std::vector<std::string>::__vdeallocate(v31);
          *(_OWORD *)&v127[1].__begin_ = *(_OWORD *)&a1[-2].__begin_;
          v127[1].__end_cap_.__value_ = a1[-2].__end_cap_.__value_;
          a1[-2].__begin_ = 0;
          a1[-2].__end_ = 0;
          a1[-2].__end_cap_.__value_ = 0;
          std::vector<std::string>::__vdeallocate(v31 + 1);
          *(_OWORD *)&v127[2].__begin_ = *(_OWORD *)&a1[-1].__begin_;
          v127[2].__end_cap_.__value_ = a1[-1].__end_cap_.__value_;
          a1[-1].__begin_ = 0;
          a1[-1].__end_ = 0;
          a1[-1].__end_cap_.__value_ = 0;
        }
        LODWORD(a1[-3].__begin_) = v13;
        long long v136 = 0uLL;
        long long v43 = (std::__shared_weak_count *)a1[-3].__end_cap_.__value_;
        a1[-3].__end_ = end;
        a1[-3].__end_cap_.__value_ = v34;
        if (v43) {
          nitro::nitro_function::nitro_function(v43);
        }
        std::vector<std::string>::__vdeallocate(a1 - 2);
        *(_OWORD *)&a1[-2].__begin_ = v137;
        a1[-2].__end_cap_.__value_ = value;
        long long v137 = 0uLL;
        value = 0;
        std::vector<std::string>::__vdeallocate(a1 - 1);
        *(_OWORD *)&a1[-1].__begin_ = v139;
        a1[-1].__end_cap_.__value_ = v140;
        long long v139 = 0uLL;
        uint64_t v140 = 0;
        uint64_t v128 = (void **)&v139;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v128);
        uint64_t v128 = (void **)&v137;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v128);
        int v8 = a2;
        if (*((void *)&v136 + 1)) {
          nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v136 + 1));
        }
LABEL_38:
        a4 = 0;
      }
      LODWORD(v135) = v9->__begin_;
      unint64_t v14 = v9 + 1;
      long long v15 = *(_OWORD *)&v9[1].__begin_;
      uint64_t v17 = v9->__end_;
      uint64_t v16 = v9->__end_cap_.__value_;
      *(void *)&long long v136 = v17;
      *((void *)&v136 + 1) = v16;
      v9->__end_ = 0;
      v9->__end_cap_.__value_ = 0;
      long long v137 = v15;
      value = v9[1].__end_cap_.__value_;
      v9[1].__end_ = 0;
      v9[1].__end_cap_.__value_ = 0;
      v9[1].__begin_ = 0;
      uint64_t v18 = v9 + 2;
      long long v139 = *(_OWORD *)&v9[2].__begin_;
      uint64_t v140 = v9[2].__end_cap_.__value_;
      v9[2].__begin_ = 0;
      int v19 = v9;
      v9[2].__end_ = 0;
      v9[2].__end_cap_.__value_ = 0;
      do
      {
        char v20 = v19;
        int v21 = (int)v19[3].__begin_;
        v19 += 3;
      }
      while (v21 > v13);
      if (v20 == v9)
      {
        int v8 = a2;
        do
        {
          if (v19 >= v8) {
            break;
          }
          int v23 = (int)v8[-3].__begin_;
          v8 -= 3;
        }
        while (v23 <= v13);
      }
      else
      {
        do
        {
          int v22 = (int)v8[-3].__begin_;
          v8 -= 3;
        }
        while (v22 <= v13);
      }
      a1 = v19;
      if (v19 < v8)
      {
        unint64_t v24 = (unint64_t)v8;
        do
        {
          std::swap[abi:ne180100]<Espresso::net::new_layer_info>(a1, v24);
          do
          {
            int v25 = (int)a1[3].__begin_;
            a1 += 3;
          }
          while (v25 > v13);
          do
          {
            int v26 = *(_DWORD *)(v24 - 72);
            v24 -= 72;
          }
          while (v26 <= v13);
        }
        while ((unint64_t)a1 < v24);
      }
      if (&a1[-3] != v127)
      {
        LODWORD(v127->__begin_) = a1[-3].__begin_;
        long long v27 = *(_OWORD *)&a1[-3].__end_;
        a1[-3].__end_ = 0;
        a1[-3].__end_cap_.__value_ = 0;
        long long v28 = (std::__shared_weak_count *)v127->__end_cap_.__value_;
        *(_OWORD *)&v127->__end_ = v27;
        if (v28) {
          nitro::nitro_function::nitro_function(v28);
        }
        std::vector<std::string>::__vdeallocate(v14);
        *(_OWORD *)&v127[1].__begin_ = *(_OWORD *)&a1[-2].__begin_;
        v127[1].__end_cap_.__value_ = a1[-2].__end_cap_.__value_;
        a1[-2].__begin_ = 0;
        a1[-2].__end_ = 0;
        a1[-2].__end_cap_.__value_ = 0;
        std::vector<std::string>::__vdeallocate(v18);
        *(_OWORD *)&v127[2].__begin_ = *(_OWORD *)&a1[-1].__begin_;
        v127[2].__end_cap_.__value_ = a1[-1].__end_cap_.__value_;
        a1[-1].__begin_ = 0;
        a1[-1].__end_ = 0;
        a1[-1].__end_cap_.__value_ = 0;
      }
      LODWORD(a1[-3].__begin_) = v13;
      long long v136 = 0uLL;
      uint64_t v29 = (std::__shared_weak_count *)a1[-3].__end_cap_.__value_;
      a1[-3].__end_ = v17;
      a1[-3].__end_cap_.__value_ = v16;
      if (v29) {
        nitro::nitro_function::nitro_function(v29);
      }
      std::vector<std::string>::__vdeallocate(a1 - 2);
      *(_OWORD *)&a1[-2].__begin_ = v137;
      a1[-2].__end_cap_.__value_ = value;
      long long v137 = 0uLL;
      value = 0;
      std::vector<std::string>::__vdeallocate(a1 - 1);
      *(_OWORD *)&a1[-1].__begin_ = v139;
      a1[-1].__end_cap_.__value_ = v140;
      long long v139 = 0uLL;
      uint64_t v140 = 0;
      uint64_t v128 = (void **)&v139;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v128);
      uint64_t v128 = (void **)&v137;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v128);
      if (*((void *)&v136 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v136 + 1));
      }
      BOOL v4 = v19 >= v8;
      int v8 = a2;
      if (!v4)
      {
LABEL_37:
        std::__introsort<std::_ClassicAlgPolicy,Espresso::net::insert_layers(std::vector<Espresso::net::new_layer_info> const&)::$_0 &,Espresso::net::new_layer_info*,false>(v127, &a1[-3], a3, a4 & 1);
        goto LABEL_38;
      }
      BOOL v30 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::net::insert_layers(std::vector<Espresso::net::new_layer_info> const&)::$_0 &,Espresso::net::new_layer_info*>(v127, a1 - 3);
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::net::insert_layers(std::vector<Espresso::net::new_layer_info> const&)::$_0 &,Espresso::net::new_layer_info*>(a1, a2))
      {
        break;
      }
      if (!v30) {
        goto LABEL_37;
      }
    }
    a2 = a1 - 3;
    a1 = v127;
    if (!v30) {
      continue;
    }
    break;
  }
}

void std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::net::insert_layers(std::vector<Espresso::net::new_layer_info> const&)::$_0 &,Espresso::net::new_layer_info*>(std::vector<std::string> *a1, std::vector<std::string> *a2, std::vector<std::string> *a3, _DWORD *a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::net::insert_layers(std::vector<Espresso::net::new_layer_info> const&)::$_0 &,Espresso::net::new_layer_info*>(a1, a2, a3);
  if (*a4 > SLODWORD(a3->__begin_))
  {
    std::swap[abi:ne180100]<Espresso::net::new_layer_info>(a3, (uint64_t)a4);
    if (SLODWORD(a3->__begin_) > SLODWORD(a2->__begin_))
    {
      std::swap[abi:ne180100]<Espresso::net::new_layer_info>(a2, (uint64_t)a3);
      if (SLODWORD(a2->__begin_) > SLODWORD(a1->__begin_))
      {
        std::swap[abi:ne180100]<Espresso::net::new_layer_info>(a1, (uint64_t)a2);
      }
    }
  }
}

void std::swap[abi:ne180100]<Espresso::net::new_layer_info>(std::vector<std::string> *this, uint64_t a2)
{
  begiuint64_t n = (int)this->__begin_;
  long long v15 = *(_OWORD *)&this->__end_;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  uint64_t v6 = this + 1;
  std::vector<std::string>::pointer end = this[1].__end_;
  value = this[1].__end_cap_.__value_;
  std::vector<std::string>::pointer v20 = this[1].__begin_;
  std::vector<std::string>::pointer v5 = v20;
  std::vector<std::string>::pointer v21 = end;
  this[1].__begin_ = 0;
  this[1].__end_ = 0;
  this[1].__end_cap_.__value_ = 0;
  uint64_t v10 = this + 2;
  std::vector<std::string>::pointer v9 = this[2].__begin_;
  int v22 = value;
  std::vector<std::string>::pointer v23 = v9;
  std::vector<std::string>::pointer v18 = v9;
  std::vector<std::string>::pointer v19 = v5;
  unint64_t v11 = this[2].__end_cap_.__value_;
  std::vector<std::string>::pointer v16 = this[2].__end_;
  std::vector<std::string>::pointer v17 = end;
  std::vector<std::string>::pointer v24 = v16;
  int v25 = v11;
  this[2].__begin_ = 0;
  this[2].__end_ = 0;
  this[2].__end_cap_.__value_ = 0;
  LODWORD(this->__begin_) = *(_DWORD *)a2;
  long long v12 = *(_OWORD *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  int v13 = this->__end_cap_.__value_;
  *(_OWORD *)&this->__end_ = v12;
  if (v13) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v13);
  }
  std::vector<std::string>::__vdeallocate(v6);
  *(_OWORD *)&this[1].__begin_ = *(_OWORD *)(a2 + 24);
  this[1].__end_cap_.__value_ = *(std::string **)(a2 + 40);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  std::vector<std::string>::__vdeallocate(v10);
  *(_OWORD *)&this[2].__begin_ = *(_OWORD *)(a2 + 48);
  this[2].__end_cap_.__value_ = *(std::string **)(a2 + 64);
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(_DWORD *)a2 = begin;
  unint64_t v14 = *(std::__shared_weak_count **)(a2 + 16);
  *(_OWORD *)(a2 + 8) = v15;
  if (v14) {
    nitro::nitro_function::nitro_function(v14);
  }
  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(a2 + 24));
  *(void *)(a2 + 24) = v19;
  *(void *)(a2 + 32) = v17;
  *(void *)(a2 + 40) = value;
  std::vector<std::string>::pointer v21 = 0;
  int v22 = 0;
  std::vector<std::string>::pointer v20 = 0;
  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(a2 + 48));
  *(void *)(a2 + 48) = v18;
  *(void *)(a2 + 56) = v16;
  *(void *)(a2 + 64) = v11;
  std::vector<std::string>::pointer v24 = 0;
  int v25 = 0;
  std::vector<std::string>::pointer v23 = 0;
  int v26 = &v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v26);
  int v26 = &v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v26);
}

void std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::net::insert_layers(std::vector<Espresso::net::new_layer_info> const&)::$_0 &,Espresso::net::new_layer_info*>(std::vector<std::string> *this, std::vector<std::string> *a2, std::vector<std::string> *a3)
{
  std::vector<std::string>::pointer v5 = this;
  begiuint64_t n = (int)a2->__begin_;
  int v7 = (int)a3->__begin_;
  if (SLODWORD(a2->__begin_) <= SLODWORD(this->__begin_))
  {
    if (v7 <= begin) {
      return;
    }
    std::swap[abi:ne180100]<Espresso::net::new_layer_info>(a2, (uint64_t)a3);
    if (SLODWORD(a2->__begin_) <= SLODWORD(v5->__begin_)) {
      return;
    }
    this = v5;
    int v8 = a2;
  }
  else
  {
    if (v7 <= begin)
    {
      std::swap[abi:ne180100]<Espresso::net::new_layer_info>(this, (uint64_t)a2);
      if (SLODWORD(a3->__begin_) <= SLODWORD(a2->__begin_)) {
        return;
      }
      this = a2;
    }
    int v8 = a3;
  }

  std::swap[abi:ne180100]<Espresso::net::new_layer_info>(this, (uint64_t)v8);
}

void Espresso::BNNSEngine::reduce_kernel::on_resized(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  *(void *)&long long v14 = *MEMORY[0x1E4F143B8];
  if (*(void *)(a1 + 328))
  {
    Espresso::abstract_blob_container::shape((char *)v11, **a3);
    int v7 = 0;
    uint64_t v8 = 0;
    v9[0] = 0;
    v9[1] = &v7;
    char v10 = 0;
    int v7 = (char *)operator new(0x40uLL);
    uint64_t v8 = (uint64_t)v7;
    v9[0] = v7 + 64;
    uint64_t v8 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)v9, v11, &v14, (uint64_t)v7);
    if (__p)
    {
      int v13 = __p;
      operator delete(__p);
    }
    (*(void (**)(void *__return_ptr))(**(void **)(a1 + 328) + 64))(v6);
    *(void *)&v11[0] = v6;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v11);
    (*(void (**)(void, uint64_t, uint64_t **))(**(void **)(a1 + 328) + 80))(*(void *)(a1 + 328), a2, a3);
    *(void *)&v11[0] = &v7;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v11);
  }
  else
  {
    BNNSFilterDestroy(*(void **)(a1 + 344));
    *(void *)(a1 + 344) = 0;
  }
}

void sub_192122B94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24)
{
  if (__p)
  {
    a24 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::BNNSEngine::inner_product_kernel::on_resized(Espresso::BNNSEngine::inner_product_kernel *this, const void ***a2, Espresso::layer_data *a3)
{
  uint64_t v75 = *MEMORY[0x1E4F143B8];
  Espresso::inner_product_kernel_cpu::on_resized(this, a2, a3);
  std::string::basic_string[abi:ne180100]<0>(&__p, "bnns_auto_sparse");
  *((unsigned char *)this + 968) = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>((void *)this + 30, (unsigned __int8 *)&__p) != 0;
  if ((v74[7] & 0x80000000) != 0) {
    operator delete((void *)__p);
  }
  int v6 = (***(uint64_t (****)(void))(*((void *)this + 1) + 8))(*(void *)(*((void *)this + 1) + 8));
  Espresso::abstract_blob_container::shape((char *)&__p, **(void **)a3);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v64, (const Espresso::layer_shape *)&__p, 0);
  if (*(void *)&v74[24])
  {
    *(void *)&v74[32] = *(void *)&v74[24];
    operator delete(*(void **)&v74[24]);
  }
  Espresso::abstract_blob_container::shape((char *)&__p, (uint64_t)**a2);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v58, (const Espresso::layer_shape *)&__p, 0);
  if (*(void *)&v74[24])
  {
    *(void *)&v74[32] = *(void *)&v74[24];
    operator delete(*(void **)&v74[24]);
  }
  if (!*((unsigned char *)this + 344) && v69 > 3)
  {
    if (v69 == 5)
    {
      int v8 = v67;
      int v7 = v68;
      uint64_t v9 = v66;
      goto LABEL_16;
    }
    if (v69 == 4)
    {
      int v8 = v66;
      int v7 = v67;
      uint64_t v9 = v65;
LABEL_16:
      uint64_t v10 = v8 * (uint64_t)v7 * v9;
      goto LABEL_17;
    }
    goto LABEL_14;
  }
  if (!v69)
  {
LABEL_14:
    uint64_t v10 = 0;
    goto LABEL_17;
  }
  uint64_t v10 = *(int *)&v64[4 * v69 - 4];
LABEL_17:
  if (*((unsigned char *)this + 344) || v63 <= 3)
  {
    switch(v63)
    {
      case 1u:
        uint64_t v11 = 1;
        if (!v63) {
          goto LABEL_27;
        }
        break;
      case 2u:
        uint64_t v11 = v58;
        if (!v63) {
          goto LABEL_27;
        }
        break;
      case 3u:
        uint64_t v11 = v59 * (uint64_t)v58;
        if (!v63) {
          goto LABEL_27;
        }
        break;
      case 4u:
        uint64_t v11 = v59 * (uint64_t)v58 * v60;
        if (!v63) {
          goto LABEL_27;
        }
        break;
      case 5u:
        uint64_t v11 = v59 * (uint64_t)v58 * v60 * v61;
        if (!v63) {
          goto LABEL_27;
        }
        break;
      default:
        uint64_t v11 = 0;
        if (!v63) {
          goto LABEL_27;
        }
        break;
    }
    uint64_t v12 = *(&v58 + (int)v63 - 1);
  }
  else if (v63 == 5)
  {
    uint64_t v11 = v59 * (uint64_t)v58;
    uint64_t v12 = v61 * (uint64_t)v62 * v60;
  }
  else if (v63 == 4)
  {
    uint64_t v11 = v58;
    uint64_t v12 = v60 * (uint64_t)v61 * v59;
  }
  else
  {
    uint64_t v11 = 0;
LABEL_27:
    uint64_t v12 = 0;
  }
  int v13 = (char *)this + 952;
  if (!*((unsigned char *)this + 968) || v6 != 100)
  {
    int v22 = (std::__shared_weak_count *)*((void *)this + 120);
    *(void *)int v13 = 0;
    *((void *)this + 120) = 0;
    if (!v22) {
      return;
    }
    goto LABEL_73;
  }
  if (!*(void *)v13
    || *(void *)(*(void *)v13 + 224) != v11
    && ((long long v14 = (std::__shared_weak_count *)*((void *)this + 120),
         *(void *)int v13 = 0,
         *((void *)this + 120) = 0,
         !v14)
     || (nitro::nitro_function::nitro_function(v14), !*(void *)v13)))
  {
    int v15 = (*(uint64_t (**)(void))(***(void ***)a3 + 32))(**(void **)a3);
    int v16 = (*(uint64_t (**)(const void *))(*(void *)**a2 + 32))(**a2);
    std::vector<std::string>::pointer v17 = (char *)operator new(0x3F0uLL);
    std::vector<std::string>::pointer v18 = v17;
    *(_OWORD *)(v17 + 8) = 0u;
    *(void *)std::vector<std::string>::pointer v17 = &unk_1EE3813B0;
    int v19 = 131073;
    *((void *)v17 + 29) = v12;
    *((void *)v17 + 30) = v10;
    *((_DWORD *)v17 + 50) = 3145729;
    *((void *)v17 + 31) = v11;
    *(void *)(v17 + 204) = 0;
    *(_OWORD *)(v17 + 212) = 0u;
    *((_DWORD *)v17 + 57) = 0;
    *((void *)v17 + 26) = *((void *)this + 122);
    memset(v70, 0, sizeof(v70));
    uint64_t v20 = *((void *)this + 86);
    if (v20)
    {
      int v19 = 0x20000;
      uint64_t v21 = v10;
    }
    else
    {
      uint64_t v20 = *((void *)this + 88);
      if (!v20)
      {
        uint64_t v57 = "bnns_auto_sparse_helper: need fp16 weights";
        goto LABEL_77;
      }
      uint64_t v21 = v12;
      uint64_t v12 = v10;
    }
    uint64_t v23 = *(void *)(v20 + 16);
    std::vector<std::string>::pointer v24 = v17 + 24;
    DWORD1(v70[0]) = v19;
    *((void *)&v70[0] + 1) = v21;
    *(void *)&v70[1] = v12;
    *(_OWORD *)((char *)&v70[1] + 8) = 0uLL;
    *(_OWORD *)((char *)&v70[2] + 8) = 0uLL;
    *(_OWORD *)((char *)&v70[3] + 8) = 0uLL;
    *(_OWORD *)((char *)&v70[4] + 8) = 0uLL;
    *(_OWORD *)((char *)&v70[5] + 8) = 0uLL;
    *(_OWORD *)((char *)&v70[6] + 8) = 0uLL;
    *(_OWORD *)((char *)&v70[7] + 8) = 0uLL;
    *((void *)&v70[8] + 1) = v23;
    memset((char *)&v70[9] + 4, 0, 28);
    LODWORD(v70[9]) = 65552;
    *(_OWORD *)(v17 + 24) = 0uLL;
    *(_OWORD *)(v17 + 40) = 0uLL;
    *(_OWORD *)(v17 + 56) = 0uLL;
    *(_OWORD *)(v17 + 72) = 0uLL;
    *(_OWORD *)(v17 + 88) = 0uLL;
    *(_OWORD *)(v17 + 104) = 0uLL;
    *(_OWORD *)(v17 + 120) = 0uLL;
    *(_OWORD *)(v17 + 136) = 0uLL;
    *(_OWORD *)(v17 + 152) = 0uLL;
    *(_OWORD *)(v17 + 168) = 0uLL;
    *(_OWORD *)(v17 + 184) = 0uLL;
    if (!MEMORY[0x192FEE970](v70, v17 + 24, 0, v11, 0, 0, v17 + 200))
    {
      uint64_t v25 = 0;
      *(void *)int v74 = 0;
      long long __p = 0uLL;
      *(_DWORD *)&v74[8] = 0;
      if (v15) {
        int v26 = 65552;
      }
      else {
        int v26 = 65568;
      }
      long long v27 = *(_OWORD *)(v18 + 120);
      *(_OWORD *)&v74[124] = *(_OWORD *)(v18 + 136);
      long long v28 = *(_OWORD *)(v18 + 168);
      *(_OWORD *)&v74[140] = *(_OWORD *)(v18 + 152);
      *(_OWORD *)&v74[156] = v28;
      *(_OWORD *)&v74[172] = *(_OWORD *)(v18 + 184);
      long long v29 = *(_OWORD *)(v18 + 56);
      *(_OWORD *)&v74[60] = *(_OWORD *)(v18 + 72);
      long long v30 = *(_OWORD *)(v18 + 104);
      *(_OWORD *)&v74[76] = *(_OWORD *)(v18 + 88);
      *(_OWORD *)&v74[92] = v30;
      *(_OWORD *)&v74[108] = v27;
      long long v31 = *(_OWORD *)(v18 + 40);
      *(_OWORD *)&v74[12] = *v24;
      *(_OWORD *)&v74[28] = v31;
      *(_OWORD *)&v74[44] = v29;
      long long v71 = 0uLL;
      DWORD2(v72[0]) = 0;
      *(void *)&v72[0] = 0;
      uint64_t v32 = *((void *)v18 + 29);
      uint64_t v33 = *((void *)v18 + 30);
      if (v16) {
        int v34 = 65552;
      }
      else {
        int v34 = 65568;
      }
      memset((char *)v72 + 12, 0, 176);
      *((void *)v18 + 32) = 0;
      *((void *)v18 + 33) = v33;
      *((void *)v18 + 41) = 1;
      *((void *)v18 + 42) = v33;
      *((void *)v18 + 34) = v11;
      *(_OWORD *)(v18 + 296) = 0u;
      *(_OWORD *)(v18 + 312) = 0u;
      *(_OWORD *)(v18 + 280) = 0u;
      *((void *)v18 + 49) = 0;
      *(_OWORD *)(v18 + 360) = 0u;
      *(_OWORD *)(v18 + 376) = 0u;
      *(_OWORD *)(v18 + 344) = 0u;
      *((_DWORD *)v18 + 100) = v26;
      *((_OWORD *)v18 + 37) = *(_OWORD *)&v74[172];
      long long v35 = *(_OWORD *)&v74[160];
      *(_OWORD *)(v18 + 564) = *(_OWORD *)&v74[144];
      *(_OWORD *)(v18 + 580) = v35;
      long long v36 = *(_OWORD *)&v74[32];
      *(_OWORD *)(v18 + 436) = *(_OWORD *)&v74[16];
      *(_OWORD *)(v18 + 452) = v36;
      long long v37 = *(_OWORD *)&v74[128];
      *(_OWORD *)(v18 + 532) = *(_OWORD *)&v74[112];
      *(_OWORD *)(v18 + 548) = v37;
      long long v38 = *(_OWORD *)&v74[96];
      *(_OWORD *)(v18 + 500) = *(_OWORD *)&v74[80];
      *(_OWORD *)(v18 + 516) = v38;
      long long v39 = *(_OWORD *)&v74[64];
      *(_OWORD *)(v18 + 468) = *(_OWORD *)&v74[48];
      *(_OWORD *)(v18 + 484) = v39;
      long long v40 = *(_OWORD *)v74;
      *(_OWORD *)(v18 + 404) = __p;
      *(_OWORD *)(v18 + 420) = v40;
      *((void *)v18 + 76) = 0;
      *((void *)v18 + 77) = v32;
      *((void *)v18 + 78) = v11;
      *(_OWORD *)(v18 + 632) = 0u;
      *(_OWORD *)(v18 + 648) = 0u;
      *(_OWORD *)(v18 + 664) = 0u;
      *((void *)v18 + 85) = 1;
      *((void *)v18 + 86) = v32;
      *(_OWORD *)(v18 + 696) = 0u;
      *(_OWORD *)(v18 + 712) = 0u;
      *(_OWORD *)(v18 + 728) = 0u;
      *((void *)v18 + 93) = 0;
      *((_DWORD *)v18 + 188) = v34;
      long long v41 = v72[6];
      *(_OWORD *)(v18 + 852) = v72[5];
      *(_OWORD *)(v18 + 868) = v41;
      long long v42 = v72[2];
      *(_OWORD *)(v18 + 788) = v72[1];
      *(_OWORD *)(v18 + 804) = v42;
      long long v43 = v72[4];
      *(_OWORD *)(v18 + 820) = v72[3];
      *(_OWORD *)(v18 + 836) = v43;
      long long v44 = v72[0];
      *(_OWORD *)(v18 + 756) = v71;
      *(_OWORD *)(v18 + 772) = v44;
      long long v45 = v72[7];
      long long v46 = v72[8];
      *((_OWORD *)v18 + 59) = *(_OWORD *)((char *)&v72[10] + 12);
      *((_OWORD *)v18 + 60) = 0u;
      long long v47 = v72[10];
      *(_OWORD *)(v18 + 916) = v72[9];
      *(_OWORD *)(v18 + 932) = v47;
      *(_OWORD *)(v18 + 884) = v45;
      *(_OWORD *)(v18 + 900) = v46;
      *((_OWORD *)v18 + 61) = 0u;
      *((_OWORD *)v18 + 62) = 0u;
      uint64_t v48 = *((void *)this + 90);
      uint64_t v49 = *((void *)this + 68);
      if (v49 | v48)
      {
        if (!v49) {
          uint64_t v49 = *((void *)this + 90);
        }
        uint64_t v25 = *(void *)(v49 + 16);
      }
      if (v48) {
        int v50 = 65552;
      }
      else {
        int v50 = 65568;
      }
      uint64_t v51 = *(unsigned int *)(*(uint64_t (**)(Espresso::BNNSEngine::inner_product_kernel *))(*(void *)this + 384))(this);
      uint64_t v52 = (*(uint64_t (**)(Espresso::BNNSEngine::inner_product_kernel *))(*(void *)this + 384))(this);
      uint64_t v53 = v18 + 960;
      *((_DWORD *)v18 + 197) = 0x10000;
      *((void *)v18 + 99) = v51;
      *((void *)v18 + 107) = 1;
      *((_DWORD *)v18 + 232) = v50;
      *((void *)v18 + 115) = v25;
      *((_DWORD *)v18 + 240) = 0;
      int v54 = v18 + 964;
      *(void *)(v18 + 964) = 0;
      int v55 = *(_DWORD *)(v52 + 12);
      if (v55 == 2)
      {
        _DWORD *v53 = 2;
        *int v54 = 1048576000;
      }
      else if (v55 == 1)
      {
        _DWORD *v53 = 1;
      }
      if (*(_DWORD *)(v52 + 16))
      {
        _DWORD *v53 = 5;
        *(void *)int v54 = *(void *)(v52 + 20);
      }
      if (*(_DWORD *)(v52 + 28)) {
        _DWORD *v53 = 29;
      }
      *(void *)&long long v56 = v18 + 24;
      *((void *)&v56 + 1) = v18;
      int v22 = (std::__shared_weak_count *)*((void *)this + 120);
      *(_OWORD *)int v13 = v56;
      if (v22)
      {
LABEL_73:
        nitro::nitro_function::nitro_function(v22);
        return;
      }
      return;
    }
    uint64_t v57 = "bnns_auto_sparse_helper: BNNSNDArrayFullyConnectedSparsify failed (check BNNS logs)";
LABEL_77:
    Espresso::throw_exception_selector<Espresso::invalid_state_error>(v57);
  }
}

void sub_192123318(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    BOOL v4 = *(std::__shared_weak_count **)(v2 + 960);
    void *v3 = 0;
    v3[1] = 0;
    if (v4) {
      nitro::nitro_function::nitro_function(v4);
    }
    *(unsigned char *)(v2 + 968) = 0;
    __cxa_end_catch();
    JUMPOUT(0x1921232C0);
  }
  _Unwind_Resume(a1);
}

uint64_t Espresso::net::_on_resized(Espresso::net *this)
{
  uint64_t v2 = *((void *)this + 4);
  if (*((void *)this + 5) != v2)
  {
    for (unint64_t i = 0; i < (*((void *)this + 5) - v2) >> 4; ++i)
    {
      BOOL v4 = (uint64_t *)(v2 + 16 * i);
      uint64_t v6 = *v4;
      std::vector<std::string>::pointer v5 = (std::__shared_weak_count *)v4[1];
      if (v5) {
        atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v110 = v5;
      if (!*((unsigned char *)this + 500)) {
        goto LABEL_50;
      }
      int v7 = (uint64_t **)(v6 + 40);
      int v8 = *(char *)(v6 + 63);
      if (v8 < 0)
      {
        if (*(void *)(v6 + 48) != 13) {
          goto LABEL_15;
        }
        uint64_t v9 = *v7;
      }
      else
      {
        uint64_t v9 = (uint64_t *)(v6 + 40);
        if (v8 != 13) {
          goto LABEL_15;
        }
      }
      uint64_t v10 = *v9;
      uint64_t v11 = *(uint64_t *)((char *)v9 + 5);
      if (v10 != 0x6E6F635F64616F6CLL || v11 != 0x746E6174736E6F63)
      {
LABEL_15:
        uint64_t v13 = *(void *)(v6 + 80);
        if (*(void *)(v6 + 88) != v13)
        {
          uint64_t v14 = 0;
          unint64_t v15 = 0;
          while (1)
          {
            uint64_t v16 = v13 + v14;
            std::vector<std::string>::pointer v18 = *(int **)v16;
            std::vector<std::string>::pointer v17 = *(std::__shared_weak_count **)(v16 + 8);
            if (v17) {
              atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            Espresso::abstract_blob_container::shape((char *)&v131, (uint64_t)v18);
            if (Espresso::layer_shape::total_dim((Espresso::layer_shape *)&v131) <= 0) {
              break;
            }
            BOOL v19 = 0;
LABEL_31:
            if (v132)
            {
              uint64_t v133 = v132;
              operator delete(v132);
            }
            if (v19)
            {
              exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::operator+<char>();
              int v74 = std::string::append(&v117, ":");
              long long v75 = *(_OWORD *)&v74->__r_.__value_.__l.__data_;
              v118.__r_.__value_.__r.__words[2] = v74->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v118.__r_.__value_.__l.__data_ = v75;
              v74->__r_.__value_.__l.__size_ = 0;
              v74->__r_.__value_.__r.__words[2] = 0;
              v74->__r_.__value_.__r.__words[0] = 0;
              std::to_string(&v116, v15);
              if ((v116.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                long long v76 = &v116;
              }
              else {
                long long v76 = (std::string *)v116.__r_.__value_.__r.__words[0];
              }
              if ((v116.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type size = HIBYTE(v116.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type size = v116.__r_.__value_.__l.__size_;
              }
              int v78 = std::string::append(&v118, (const std::string::value_type *)v76, size);
              long long v79 = *(_OWORD *)&v78->__r_.__value_.__l.__data_;
              v119.__r_.__value_.__r.__words[2] = v78->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v119.__r_.__value_.__l.__data_ = v79;
              v78->__r_.__value_.__l.__size_ = 0;
              v78->__r_.__value_.__r.__words[2] = 0;
              v78->__r_.__value_.__r.__words[0] = 0;
              long long v80 = std::string::append(&v119, ": ");
              long long v81 = *(_OWORD *)&v80->__r_.__value_.__l.__data_;
              v120.__r_.__value_.__r.__words[2] = v80->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v120.__r_.__value_.__l.__data_ = v81;
              v80->__r_.__value_.__l.__size_ = 0;
              v80->__r_.__value_.__r.__words[2] = 0;
              v80->__r_.__value_.__r.__words[0] = 0;
              std::to_string(&v115, v18[2]);
              if ((v115.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                int64_t v82 = &v115;
              }
              else {
                int64_t v82 = (std::string *)v115.__r_.__value_.__r.__words[0];
              }
              if ((v115.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type v83 = HIBYTE(v115.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type v83 = v115.__r_.__value_.__l.__size_;
              }
              uint64_t v84 = std::string::append(&v120, (const std::string::value_type *)v82, v83);
              long long v85 = *(_OWORD *)&v84->__r_.__value_.__l.__data_;
              v121.__r_.__value_.__r.__words[2] = v84->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v121.__r_.__value_.__l.__data_ = v85;
              v84->__r_.__value_.__l.__size_ = 0;
              v84->__r_.__value_.__r.__words[2] = 0;
              v84->__r_.__value_.__r.__words[0] = 0;
              int v86 = std::string::append(&v121, ",");
              long long v87 = *(_OWORD *)&v86->__r_.__value_.__l.__data_;
              v122.__r_.__value_.__r.__words[2] = v86->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v122.__r_.__value_.__l.__data_ = v87;
              v86->__r_.__value_.__l.__size_ = 0;
              v86->__r_.__value_.__r.__words[2] = 0;
              v86->__r_.__value_.__r.__words[0] = 0;
              std::to_string(&v114, v18[3]);
              if ((v114.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                long long v88 = &v114;
              }
              else {
                long long v88 = (std::string *)v114.__r_.__value_.__r.__words[0];
              }
              if ((v114.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type v89 = HIBYTE(v114.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type v89 = v114.__r_.__value_.__l.__size_;
              }
              long long v90 = std::string::append(&v122, (const std::string::value_type *)v88, v89);
              long long v91 = *(_OWORD *)&v90->__r_.__value_.__l.__data_;
              v123.__r_.__value_.__r.__words[2] = v90->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v123.__r_.__value_.__l.__data_ = v91;
              v90->__r_.__value_.__l.__size_ = 0;
              v90->__r_.__value_.__r.__words[2] = 0;
              v90->__r_.__value_.__r.__words[0] = 0;
              uint64_t v92 = std::string::append(&v123, ",");
              long long v93 = *(_OWORD *)&v92->__r_.__value_.__l.__data_;
              v124.__r_.__value_.__r.__words[2] = v92->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v124.__r_.__value_.__l.__data_ = v93;
              v92->__r_.__value_.__l.__size_ = 0;
              v92->__r_.__value_.__r.__words[2] = 0;
              v92->__r_.__value_.__r.__words[0] = 0;
              std::to_string(&v113, v18[4]);
              if ((v113.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                unint64_t v94 = &v113;
              }
              else {
                unint64_t v94 = (std::string *)v113.__r_.__value_.__r.__words[0];
              }
              if ((v113.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type v95 = HIBYTE(v113.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type v95 = v113.__r_.__value_.__l.__size_;
              }
              unint64_t v96 = std::string::append(&v124, (const std::string::value_type *)v94, v95);
              long long v97 = *(_OWORD *)&v96->__r_.__value_.__l.__data_;
              v125.__r_.__value_.__r.__words[2] = v96->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v125.__r_.__value_.__l.__data_ = v97;
              v96->__r_.__value_.__l.__size_ = 0;
              v96->__r_.__value_.__r.__words[2] = 0;
              v96->__r_.__value_.__r.__words[0] = 0;
              int v98 = std::string::append(&v125, ",");
              long long v99 = *(_OWORD *)&v98->__r_.__value_.__l.__data_;
              v126.__r_.__value_.__r.__words[2] = v98->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v126.__r_.__value_.__l.__data_ = v99;
              v98->__r_.__value_.__l.__size_ = 0;
              v98->__r_.__value_.__r.__words[2] = 0;
              v98->__r_.__value_.__r.__words[0] = 0;
              std::to_string(&v112, v18[5]);
              if ((v112.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                long long v100 = &v112;
              }
              else {
                long long v100 = (std::string *)v112.__r_.__value_.__r.__words[0];
              }
              if ((v112.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type v101 = HIBYTE(v112.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type v101 = v112.__r_.__value_.__l.__size_;
              }
              long long v102 = std::string::append(&v126, (const std::string::value_type *)v100, v101);
              long long v103 = *(_OWORD *)&v102->__r_.__value_.__l.__data_;
              v127.__r_.__value_.__r.__words[2] = v102->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v127.__r_.__value_.__l.__data_ = v103;
              v102->__r_.__value_.__l.__size_ = 0;
              v102->__r_.__value_.__r.__words[2] = 0;
              v102->__r_.__value_.__r.__words[0] = 0;
              long long v104 = std::string::append(&v127, ",");
              long long v105 = *(_OWORD *)&v104->__r_.__value_.__l.__data_;
              v128.__r_.__value_.__r.__words[2] = v104->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v128.__r_.__value_.__l.__data_ = v105;
              v104->__r_.__value_.__l.__size_ = 0;
              v104->__r_.__value_.__r.__words[2] = 0;
              v104->__r_.__value_.__r.__words[0] = 0;
              std::to_string(&v111, v18[6]);
              if ((v111.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                BOOL v106 = &v111;
              }
              else {
                BOOL v106 = (std::string *)v111.__r_.__value_.__r.__words[0];
              }
              if ((v111.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type v107 = HIBYTE(v111.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type v107 = v111.__r_.__value_.__l.__size_;
              }
              uint64_t v108 = std::string::append(&v128, (const std::string::value_type *)v106, v107);
              long long v109 = *(_OWORD *)&v108->__r_.__value_.__l.__data_;
              v131.__r_.__value_.__r.__words[2] = v108->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v131.__r_.__value_.__l.__data_ = v109;
              v108->__r_.__value_.__l.__size_ = 0;
              v108->__r_.__value_.__r.__words[2] = 0;
              v108->__r_.__value_.__r.__words[0] = 0;
              std::runtime_error::runtime_error(exception, &v131);
              __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
            }
            if (v17) {
              nitro::nitro_function::nitro_function(v17);
            }
            ++v15;
            uint64_t v13 = *(void *)(v6 + 80);
            v14 += 16;
            if (v15 >= (*(void *)(v6 + 88) - v13) >> 4) {
              goto LABEL_40;
            }
          }
          int v20 = *(char *)(v6 + 63);
          if (v20 < 0)
          {
            if (*(void *)(v6 + 48) != 15)
            {
LABEL_30:
              BOOL v19 = 1;
              goto LABEL_31;
            }
            uint64_t v21 = *v7;
          }
          else
          {
            uint64_t v21 = (uint64_t *)(v6 + 40);
            if (v20 != 15) {
              goto LABEL_30;
            }
          }
          uint64_t v22 = *v21;
          uint64_t v23 = *(uint64_t *)((char *)v21 + 7);
          if (v22 == 0x65636E6575716573 && v23 == 0x7461636E6F635F65)
          {
            Espresso::abstract_blob_container::shape((char *)&v128, (uint64_t)v18);
            BOOL v19 = HIDWORD(v128.__r_.__value_.__r.__words[0])
                * LODWORD(v128.__r_.__value_.__l.__data_)
                * LODWORD(v128.__r_.__value_.__r.__words[1])
                * HIDWORD(v128.__r_.__value_.__r.__words[1]) < 1;
            if (v129)
            {
              long long v130 = v129;
              operator delete(v129);
            }
            goto LABEL_31;
          }
          goto LABEL_30;
        }
      }
LABEL_40:
      uint64_t v25 = *(void *)(v6 + 104);
      if (*(void *)(v6 + 112) != v25)
      {
        uint64_t v26 = 0;
        unint64_t v27 = 0;
        do
        {
          uint64_t v28 = v25 + v26;
          long long v30 = *(int **)v28;
          long long v29 = *(std::__shared_weak_count **)(v28 + 8);
          if (v29) {
            atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          Espresso::abstract_blob_container::shape((char *)&v131, (uint64_t)v30);
          uint64_t v31 = Espresso::layer_shape::total_dim((Espresso::layer_shape *)&v131);
          if (v132)
          {
            uint64_t v133 = v132;
            operator delete(v132);
          }
          if (v31 <= 0)
          {
            long long v36 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::operator+<char>();
            long long v37 = std::string::append(&v117, ":");
            long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
            v118.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v118.__r_.__value_.__l.__data_ = v38;
            v37->__r_.__value_.__l.__size_ = 0;
            v37->__r_.__value_.__r.__words[2] = 0;
            v37->__r_.__value_.__r.__words[0] = 0;
            std::to_string(&v116, v27);
            if ((v116.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              long long v39 = &v116;
            }
            else {
              long long v39 = (std::string *)v116.__r_.__value_.__r.__words[0];
            }
            if ((v116.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v40 = HIBYTE(v116.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v40 = v116.__r_.__value_.__l.__size_;
            }
            long long v41 = std::string::append(&v118, (const std::string::value_type *)v39, v40);
            long long v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
            v119.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v119.__r_.__value_.__l.__data_ = v42;
            v41->__r_.__value_.__l.__size_ = 0;
            v41->__r_.__value_.__r.__words[2] = 0;
            v41->__r_.__value_.__r.__words[0] = 0;
            long long v43 = std::string::append(&v119, ": ");
            long long v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
            v120.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v120.__r_.__value_.__l.__data_ = v44;
            v43->__r_.__value_.__l.__size_ = 0;
            v43->__r_.__value_.__r.__words[2] = 0;
            v43->__r_.__value_.__r.__words[0] = 0;
            std::to_string(&v115, v30[2]);
            if ((v115.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              long long v45 = &v115;
            }
            else {
              long long v45 = (std::string *)v115.__r_.__value_.__r.__words[0];
            }
            if ((v115.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v46 = HIBYTE(v115.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v46 = v115.__r_.__value_.__l.__size_;
            }
            long long v47 = std::string::append(&v120, (const std::string::value_type *)v45, v46);
            long long v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
            v121.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v121.__r_.__value_.__l.__data_ = v48;
            v47->__r_.__value_.__l.__size_ = 0;
            v47->__r_.__value_.__r.__words[2] = 0;
            v47->__r_.__value_.__r.__words[0] = 0;
            uint64_t v49 = std::string::append(&v121, ",");
            long long v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
            v122.__r_.__value_.__r.__words[2] = v49->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v122.__r_.__value_.__l.__data_ = v50;
            v49->__r_.__value_.__l.__size_ = 0;
            v49->__r_.__value_.__r.__words[2] = 0;
            v49->__r_.__value_.__r.__words[0] = 0;
            std::to_string(&v114, v30[3]);
            if ((v114.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v51 = &v114;
            }
            else {
              uint64_t v51 = (std::string *)v114.__r_.__value_.__r.__words[0];
            }
            if ((v114.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v52 = HIBYTE(v114.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v52 = v114.__r_.__value_.__l.__size_;
            }
            uint64_t v53 = std::string::append(&v122, (const std::string::value_type *)v51, v52);
            long long v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
            v123.__r_.__value_.__r.__words[2] = v53->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v123.__r_.__value_.__l.__data_ = v54;
            v53->__r_.__value_.__l.__size_ = 0;
            v53->__r_.__value_.__r.__words[2] = 0;
            v53->__r_.__value_.__r.__words[0] = 0;
            int v55 = std::string::append(&v123, ",");
            long long v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
            v124.__r_.__value_.__r.__words[2] = v55->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v124.__r_.__value_.__l.__data_ = v56;
            v55->__r_.__value_.__l.__size_ = 0;
            v55->__r_.__value_.__r.__words[2] = 0;
            v55->__r_.__value_.__r.__words[0] = 0;
            std::to_string(&v113, v30[4]);
            if ((v113.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v57 = &v113;
            }
            else {
              uint64_t v57 = (std::string *)v113.__r_.__value_.__r.__words[0];
            }
            if ((v113.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v58 = HIBYTE(v113.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v58 = v113.__r_.__value_.__l.__size_;
            }
            int v59 = std::string::append(&v124, (const std::string::value_type *)v57, v58);
            long long v60 = *(_OWORD *)&v59->__r_.__value_.__l.__data_;
            v125.__r_.__value_.__r.__words[2] = v59->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v125.__r_.__value_.__l.__data_ = v60;
            v59->__r_.__value_.__l.__size_ = 0;
            v59->__r_.__value_.__r.__words[2] = 0;
            v59->__r_.__value_.__r.__words[0] = 0;
            int v61 = std::string::append(&v125, ",");
            long long v62 = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
            v126.__r_.__value_.__r.__words[2] = v61->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v126.__r_.__value_.__l.__data_ = v62;
            v61->__r_.__value_.__l.__size_ = 0;
            v61->__r_.__value_.__r.__words[2] = 0;
            v61->__r_.__value_.__r.__words[0] = 0;
            std::to_string(&v112, v30[5]);
            if ((v112.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              unsigned int v63 = &v112;
            }
            else {
              unsigned int v63 = (std::string *)v112.__r_.__value_.__r.__words[0];
            }
            if ((v112.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v64 = HIBYTE(v112.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v64 = v112.__r_.__value_.__l.__size_;
            }
            int v65 = std::string::append(&v126, (const std::string::value_type *)v63, v64);
            long long v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
            v127.__r_.__value_.__r.__words[2] = v65->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v127.__r_.__value_.__l.__data_ = v66;
            v65->__r_.__value_.__l.__size_ = 0;
            v65->__r_.__value_.__r.__words[2] = 0;
            v65->__r_.__value_.__r.__words[0] = 0;
            int v67 = std::string::append(&v127, ",");
            long long v68 = *(_OWORD *)&v67->__r_.__value_.__l.__data_;
            v128.__r_.__value_.__r.__words[2] = v67->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v128.__r_.__value_.__l.__data_ = v68;
            v67->__r_.__value_.__l.__size_ = 0;
            v67->__r_.__value_.__r.__words[2] = 0;
            v67->__r_.__value_.__r.__words[0] = 0;
            std::to_string(&v111, v30[6]);
            if ((v111.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              unsigned int v69 = &v111;
            }
            else {
              unsigned int v69 = (std::string *)v111.__r_.__value_.__r.__words[0];
            }
            if ((v111.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v70 = HIBYTE(v111.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v70 = v111.__r_.__value_.__l.__size_;
            }
            long long v71 = std::string::append(&v128, (const std::string::value_type *)v69, v70);
            long long v72 = *(_OWORD *)&v71->__r_.__value_.__l.__data_;
            v131.__r_.__value_.__r.__words[2] = v71->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v131.__r_.__value_.__l.__data_ = v72;
            v71->__r_.__value_.__l.__size_ = 0;
            v71->__r_.__value_.__r.__words[2] = 0;
            v71->__r_.__value_.__r.__words[0] = 0;
            std::runtime_error::runtime_error(v36, &v131);
            __cxa_throw(v36, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          if (v29) {
            nitro::nitro_function::nitro_function(v29);
          }
          ++v27;
          uint64_t v25 = *(void *)(v6 + 104);
          v26 += 16;
        }
        while (v27 < (*(void *)(v6 + 112) - v25) >> 4);
      }
LABEL_50:
      uint64_t v32 = *(void *)(*((void *)this + 4) + 16 * i);
      uint64_t v33 = *(void *)(v32 + 64);
      int v34 = *(std::__shared_weak_count **)(v32 + 72);
      if (v34) {
        atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v33) {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v33 + 80))(v33, v6 + 104, v6 + 80);
      }
      if (v34) {
        nitro::nitro_function::nitro_function(v34);
      }
      if (v110) {
        nitro::nitro_function::nitro_function(v110);
      }
      uint64_t v2 = *((void *)this + 4);
    }
  }
  return Espresso::net::_allocate_temporary_buffer(this);
}

void sub_192123CE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::__shared_weak_count *a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,uint64_t a58,void *a59,uint64_t a60,int a61,__int16 a62,char a63)
{
  if (*(char *)(v86 - 137) < 0) {
    operator delete(*(void **)(v86 - 160));
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v86 - 201) < 0) {
    operator delete(*(void **)(v86 - 224));
  }
  if (*(char *)(v86 - 233) < 0) {
    operator delete(*(void **)(v86 - 256));
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a83 < 0) {
    operator delete(a82);
  }
  if (a81 < 0) {
    operator delete(a80);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a79 < 0) {
    operator delete(a78);
  }
  if (a77 < 0) {
    operator delete(a76);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a75 < 0) {
    operator delete(a74);
  }
  if (a73 < 0) {
    operator delete(a72);
  }
  if (a39 < 0) {
    operator delete(a34);
  }
  if (a71 < 0) {
    operator delete(a66);
  }
  if (a64 < 0) {
    operator delete(a59);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a57 < 0) {
    operator delete(a52);
  }
  if (a51 < 0)
  {
    operator delete(a46);
    if ((v85 & 1) == 0)
    {
LABEL_42:
      if (v83) {
        nitro::nitro_function::nitro_function(v83);
      }
      if (a9) {
        nitro::nitro_function::nitro_function(a9);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v85)
  {
    goto LABEL_42;
  }
  __cxa_free_exception(v84);
  goto LABEL_42;
}

void Espresso::BNNSEngine::elementwise_kernel::on_resized(void *a1)
{
  uint64_t v2 = a1[42];
  if (v2)
  {
    uint64_t v3 = *(void (**)(void))(*(void *)v2 + 80);
    v3();
  }
  else
  {
    BOOL v4 = (void **)a1[44];
    std::vector<std::string>::pointer v5 = (void **)a1[45];
    if (v4 != v5)
    {
      do
      {
        if (*v4) {
          BNNSFilterDestroy(*v4);
        }
        ++v4;
      }
      while (v4 != v5);
      BOOL v4 = (void **)a1[44];
    }
    a1[45] = v4;
  }
}

uint64_t Espresso::generic_load_constant_kernel_impl::on_resized(uint64_t result)
{
  *(unsigned char *)(result + 360) = 1;
  return result;
}

void Espresso::inner_product_kernel_cpu::on_resized(Espresso::inner_product_kernel_cpu *this, const void ***a2, Espresso::layer_data *a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (*((int *)this + 106) >= 1)
  {
    BOOL v4 = **a2;
    std::vector<std::string>::pointer v5 = v4
    uint64_t v6 = *((void *)v5 + 20);
    if (v6)
    {
      std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int const*&,void>(&v13, v6 + 8);
      int v7 = (std::__shared_weak_count *)*((void *)v5 + 21);
      *((_OWORD *)v5 + 10) = v13;
      *((_DWORD *)this + 236) = 0;
      uint64_t v10 = Espresso::espresso_os_log_subsystem(v8, v9);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v11 = (void *)((char *)this + 176);
        if (*((char *)this + 199) < 0) {
          uint64_t v11 = (void *)*v11;
        }
        int v12 = *((_DWORD *)this + 106);
        *(_DWORD *)long long buf = 136315394;
        unint64_t v15 = v11;
        __int16 v16 = 1024;
        int v17 = v12;
        _os_log_debug_impl(&dword_1920CB000, v10, OS_LOG_TYPE_DEBUG, "inner_product_kernel_cpu: layer %s cached for %d uses\n", buf, 0x12u);
      }

      if (v7) {
        nitro::nitro_function::nitro_function(v7);
      }
    }
  }
}

uint64_t Espresso::net::_allocate_temporary_buffer(Espresso::net *this)
{
  long long v29 = 0u;
  long long v30 = 0u;
  int v31 = 1065353216;
  uint64_t v1 = (uint64_t *)*((void *)this + 4);
  uint64_t v2 = (uint64_t *)*((void *)this + 5);
  if (v1 != v2)
  {
    do
    {
      uint64_t v5 = *v1;
      BOOL v4 = (std::__shared_weak_count *)v1[1];
      if (v4) {
        atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      unint64_t v6 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v5 + 64) + 96))(*(void *)(v5 + 64), v5 + 104, v5 + 80);
      unint64_t v7 = (*(uint64_t (**)(void))(**(void **)(v5 + 64) + 104))(*(void *)(v5 + 64));
      if (v6 <= v7) {
        unint64_t v6 = v7;
      }
      unsigned int v9 = *(_DWORD *)(v5 + 8);
      int v8 = (unsigned int *)(v5 + 8);
      if (v6 > std::__hash_table<std::__hash_value_type<Espresso::platform,unsigned long>,std::__unordered_map_hasher<Espresso::platform,std::__hash_value_type<Espresso::platform,unsigned long>,std::hash<Espresso::platform>,std::equal_to<Espresso::platform>,true>,std::__unordered_map_equal<Espresso::platform,std::__hash_value_type<Espresso::platform,unsigned long>,std::equal_to<Espresso::platform>,std::hash<Espresso::platform>,true>,std::allocator<std::__hash_value_type<Espresso::platform,unsigned long>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform const&>,std::tuple<>>((float *)&v29, v9, v8)[3])std::__hash_table<std::__hash_value_type<Espresso::platform,unsigned long>,std::__unordered_map_hasher<Espresso::platform,std::__hash_value_type<Espresso::platform,unsigned long>,std::hash<Espresso::platform>,std::equal_to<Espresso::platform>,true>,std::__unordered_map_equal<Espresso::platform,std::__hash_value_type<Espresso::platform,unsigned long>,std::equal_to<Espresso::platform>,std::hash<Espresso::platform>,true>,std::allocator<std::__hash_value_type<Espresso::platform,unsigned long>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform const&>,std::tuple<>>((float *)&v29, *v8, v8)[3] = v6; {
      if (v4)
      }
        nitro::nitro_function::nitro_function(v4);
      v1 += 2;
    }
    while (v1 != v2);
    if (*((void *)&v30 + 1))
    {
      memset(v27, 0, sizeof(v27));
      int v28 = 1065353216;
      uint64_t v10 = (uint64_t *)*((void *)this + 4);
      for (unint64_t i = (uint64_t *)*((void *)this + 5); v10 != i; v10 += 2)
      {
        uint64_t v13 = *v10;
        int v12 = (std::__shared_weak_count *)v10[1];
        if (v12) {
          atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v14 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v13 + 64) + 96))(*(void *)(v13 + 64), v13 + 104, v13 + 80);
        uint64_t v15 = (*(uint64_t (**)(void))(**(void **)(v13 + 64) + 104))(*(void *)(v13 + 64));
        unsigned int v16 = *(_DWORD *)(v13 + 8);
        unsigned int v26 = v16;
        if (v15 | v14)
        {
          if (std::__hash_table<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::base_kernel>>,std::__unordered_map_hasher<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::base_kernel>>,std::hash<Espresso::platform>,std::equal_to<Espresso::platform>,true>,std::__unordered_map_equal<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::base_kernel>>,std::equal_to<Espresso::platform>,std::hash<Espresso::platform>,true>,std::allocator<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::base_kernel>>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform const&>,std::tuple<>>((uint64_t *)v27, v16, &v26)[3])
          {
            uint64_t v17 = *(void *)(v13 + 64);
            uint64_t v18 = std::__hash_table<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::base_kernel>>,std::__unordered_map_hasher<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::base_kernel>>,std::hash<Espresso::platform>,std::equal_to<Espresso::platform>,true>,std::__unordered_map_equal<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::base_kernel>>,std::equal_to<Espresso::platform>,std::hash<Espresso::platform>,true>,std::allocator<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::base_kernel>>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform const&>,std::tuple<>>((uint64_t *)v27, v16, &v26);
            (*(void (**)(uint64_t, void *))(*(void *)v17 + 120))(v17, v18 + 3);
          }
          else
          {
            BOOL v19 = std::__hash_table<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::base_kernel>>,std::__unordered_map_hasher<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::base_kernel>>,std::hash<Espresso::platform>,std::equal_to<Espresso::platform>,true>,std::__unordered_map_equal<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::base_kernel>>,std::equal_to<Espresso::platform>,std::hash<Espresso::platform>,true>,std::allocator<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::base_kernel>>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform const&>,std::tuple<>>((uint64_t *)v27, v16, &v26);
            uint64_t v21 = *(void *)(v13 + 64);
            uint64_t v20 = *(void *)(v13 + 72);
            if (v20) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
            }
            uint64_t v22 = (std::__shared_weak_count *)v19[4];
            v19[3] = v21;
            v19[4] = v20;
            if (v22) {
              nitro::nitro_function::nitro_function(v22);
            }
            uint64_t v23 = std::__hash_table<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::base_kernel>>,std::__unordered_map_hasher<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::base_kernel>>,std::hash<Espresso::platform>,std::equal_to<Espresso::platform>,true>,std::__unordered_map_equal<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::base_kernel>>,std::equal_to<Espresso::platform>,std::hash<Espresso::platform>,true>,std::allocator<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::base_kernel>>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform const&>,std::tuple<>>((uint64_t *)v27, v16, &v26)[3];
            std::vector<std::string>::pointer v24 = std::__hash_table<std::__hash_value_type<Espresso::platform,unsigned long>,std::__unordered_map_hasher<Espresso::platform,std::__hash_value_type<Espresso::platform,unsigned long>,std::hash<Espresso::platform>,std::equal_to<Espresso::platform>,true>,std::__unordered_map_equal<Espresso::platform,std::__hash_value_type<Espresso::platform,unsigned long>,std::equal_to<Espresso::platform>,std::hash<Espresso::platform>,true>,std::allocator<std::__hash_value_type<Espresso::platform,unsigned long>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform const&>,std::tuple<>>((float *)&v29, *(_DWORD *)(v13 + 8), (_DWORD *)(v13 + 8));
            (*(void (**)(uint64_t, void))(*(void *)v23 + 112))(v23, v24[3]);
          }
        }
        if (v12) {
          nitro::nitro_function::nitro_function(v12);
        }
      }
      std::__hash_table<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::base_kernel>>,std::__unordered_map_hasher<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::base_kernel>>,std::hash<Espresso::platform>,std::equal_to<Espresso::platform>,true>,std::__unordered_map_equal<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::base_kernel>>,std::equal_to<Espresso::platform>,std::hash<Espresso::platform>,true>,std::allocator<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::base_kernel>>>>::~__hash_table((uint64_t)v27);
    }
  }
  return std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&v29);
}

void sub_192124494(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  std::__hash_table<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::base_kernel>>,std::__unordered_map_hasher<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::base_kernel>>,std::hash<Espresso::platform>,std::equal_to<Espresso::platform>,true>,std::__unordered_map_equal<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::base_kernel>>,std::equal_to<Espresso::platform>,std::hash<Espresso::platform>,true>,std::allocator<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::base_kernel>>>>::~__hash_table((uint64_t)va);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t Espresso::base_kernel::tmp_aux_buffer_size(Espresso::base_kernel *this)
{
  return 0;
}

uint64_t Espresso::base_kernel::tmp_aux_buffer_size()
{
  return 0;
}

void *std::__hash_table<std::__hash_value_type<Espresso::platform,unsigned long>,std::__unordered_map_hasher<Espresso::platform,std::__hash_value_type<Espresso::platform,unsigned long>,std::hash<Espresso::platform>,std::equal_to<Espresso::platform>,true>,std::__unordered_map_equal<Espresso::platform,std::__hash_value_type<Espresso::platform,unsigned long>,std::equal_to<Espresso::platform>,std::hash<Espresso::platform>,true>,std::allocator<std::__hash_value_type<Espresso::platform,unsigned long>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform const&>,std::tuple<>>(float *a1, unsigned int a2, _DWORD *a3)
{
  unint64_t v6 = a2;
  unint64_t v7 = *((void *)a1 + 1);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    uint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      uint64_t v10 = *v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  uint64_t v10 = operator new(0x20uLL);
  *uint64_t v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  void v10[3] = 0;
  float v12 = (float)(unint64_t)(*((void *)a1 + 3) + 1);
  float v13 = a1[8];
  if (v7 && (float)(v13 * (float)v7) >= v12)
  {
    unint64_t v6 = v3;
    goto LABEL_64;
  }
  BOOL v14 = 1;
  if (v7 >= 3) {
    BOOL v14 = (v7 & (v7 - 1)) != 0;
  }
  unint64_t v15 = v14 | (2 * v7);
  unint64_t v16 = vcvtps_u32_f32(v12 / v13);
  if (v15 <= v16) {
    int8x8_t prime = (int8x8_t)v16;
  }
  else {
    int8x8_t prime = (int8x8_t)v15;
  }
  if (*(void *)&prime == 1)
  {
    int8x8_t prime = (int8x8_t)2;
  }
  else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
  {
    int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    unint64_t v7 = *((void *)a1 + 1);
  }
  if (*(void *)&prime <= v7)
  {
    if (*(void *)&prime >= v7) {
      goto LABEL_60;
    }
    unint64_t v24 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
    if (v7 < 3 || (uint8x8_t v25 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
    {
      unint64_t v24 = std::__next_prime(v24);
    }
    else
    {
      uint64_t v26 = 1 << -(char)__clz(v24 - 1);
      if (v24 >= 2) {
        unint64_t v24 = v26;
      }
    }
    if (*(void *)&prime <= v24) {
      int8x8_t prime = (int8x8_t)v24;
    }
    if (*(void *)&prime >= v7)
    {
      unint64_t v7 = *((void *)a1 + 1);
      goto LABEL_60;
    }
    if (!*(void *)&prime)
    {
      uint64_t v33 = *(void **)a1;
      *(void *)a1 = 0;
      if (v33) {
        operator delete(v33);
      }
      unint64_t v7 = 0;
      *((void *)a1 + 1) = 0;
      goto LABEL_60;
    }
  }
  if (*(void *)&prime >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  uint64_t v18 = operator new(8 * *(void *)&prime);
  BOOL v19 = *(void **)a1;
  *(void *)a1 = v18;
  if (v19) {
    operator delete(v19);
  }
  uint64_t v20 = 0;
  *((int8x8_t *)a1 + 1) = prime;
  do
    *(void *)(*(void *)a1 + 8 * v20++) = 0;
  while (*(void *)&prime != v20);
  uint64_t v21 = (void *)*((void *)a1 + 2);
  if (v21)
  {
    unint64_t v22 = v21[1];
    uint8x8_t v23 = (uint8x8_t)vcnt_s8(prime);
    v23.i16[0] = vaddlv_u8(v23);
    if (v23.u32[0] > 1uLL)
    {
      if (v22 >= *(void *)&prime) {
        v22 %= *(void *)&prime;
      }
    }
    else
    {
      v22 &= *(void *)&prime - 1;
    }
    *(void *)(*(void *)a1 + 8 * v22) = a1 + 4;
    unint64_t v27 = (void *)*v21;
    if (*v21)
    {
      do
      {
        unint64_t v28 = v27[1];
        if (v23.u32[0] > 1uLL)
        {
          if (v28 >= *(void *)&prime) {
            v28 %= *(void *)&prime;
          }
        }
        else
        {
          v28 &= *(void *)&prime - 1;
        }
        if (v28 != v22)
        {
          if (!*(void *)(*(void *)a1 + 8 * v28))
          {
            *(void *)(*(void *)a1 + 8 * v28) = v21;
            goto LABEL_56;
          }
          *uint64_t v21 = *v27;
          *unint64_t v27 = **(void **)(*(void *)a1 + 8 * v28);
          **(void **)(*(void *)a1 + 8 * v28) = v27;
          unint64_t v27 = v21;
        }
        unint64_t v28 = v22;
LABEL_56:
        uint64_t v21 = v27;
        unint64_t v27 = (void *)*v27;
        unint64_t v22 = v28;
      }
      while (v27);
    }
  }
  unint64_t v7 = (unint64_t)prime;
LABEL_60:
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v6) {
      v6 %= v7;
    }
  }
  else
  {
    unint64_t v6 = (v7 - 1) & v6;
  }
LABEL_64:
  long long v29 = *(void **)a1;
  long long v30 = *(void **)(*(void *)a1 + 8 * v6);
  if (v30)
  {
    *uint64_t v10 = *v30;
LABEL_72:
    *long long v30 = v10;
    goto LABEL_73;
  }
  *uint64_t v10 = *((void *)a1 + 2);
  *((void *)a1 + 2) = v10;
  v29[v6] = a1 + 4;
  if (*v10)
  {
    unint64_t v31 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v31 >= v7) {
        v31 %= v7;
      }
    }
    else
    {
      v31 &= v7 - 1;
    }
    long long v30 = (void *)(*(void *)a1 + 8 * v31);
    goto LABEL_72;
  }
LABEL_73:
  ++*((void *)a1 + 3);
  return v10;
}

void sub_1921248D0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::base_kernel>>,std::__unordered_map_hasher<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::base_kernel>>,std::hash<Espresso::platform>,std::equal_to<Espresso::platform>,true>,std::__unordered_map_equal<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::base_kernel>>,std::equal_to<Espresso::platform>,std::hash<Espresso::platform>,true>,std::allocator<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::base_kernel>>>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      unint64_t v3 = (void *)*v2;
      BOOL v4 = (std::__shared_weak_count *)v2[4];
      if (v4) {
        nitro::nitro_function::nitro_function(v4);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = 0;
  if (v5) {
    operator delete(v5);
  }
  return a1;
}

void Espresso::activation_kernel_cpu::on_resized(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[50];
  a1[49] = 0;
  a1[50] = 0;
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  unint64_t v3 = (std::__shared_weak_count *)a1[52];
  a1[51] = 0;
  a1[52] = 0;
  if (v3)
  {
    nitro::nitro_function::nitro_function(v3);
  }
}

double Espresso::generic_pool_kernel::on_resized(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_DWORD *)(a1 + 360))
  {
    double result = *(double *)(**(void **)a3 + 8);
    *(double *)(a1 + 308) = result;
  }
  return result;
}

void Espresso::general_slice_kernel_cpu::on_resized(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  Espresso::abstract_blob_container::shape(v6, **a3);
  if (v7 == 1) {
    int v4 = 4;
  }
  else {
    int v4 = 5;
  }
  if (v8 == -1) {
    int v5 = v4;
  }
  else {
    int v5 = v8;
  }
  Espresso::general_slice_on_resize(v5, (unsigned char *)(a1 + 280), a1 + 384, a1 + 408, a1 + 432, a1 + 456, a1 + 480, a1 + 504);
  if (__p)
  {
    uint64_t v10 = __p;
    operator delete(__p);
  }
}

void sub_192124A44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::softmax_nd_kernel_cpu::on_resized(std::vector<int> *a1, uint64_t a2, uint64_t **a3)
{
  Espresso::abstract_blob_container::shape(v7, **a3);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v5, (const Espresso::layer_shape *)v7, 0);
  Espresso::layer_nd_shape::shape_vector(&v6, (uint64_t)v5);
  begiuint64_t n = a1[12].__begin_;
  if (begin)
  {
    a1[12].__end_ = begin;
    operator delete(begin);
    a1[12].__begin_ = 0;
    a1[12].__end_ = 0;
    a1[12].__end_cap_.__value_ = 0;
  }
  a1[12] = v6;
  if (__p)
  {
    uint64_t v9 = __p;
    operator delete(__p);
  }
}

void sub_192124AF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::BNNSEngine::batch_matmul_kernel::on_resized(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 283))
  {
    BNNSFilterDestroy(*(void **)(a1 + 288));
    *(void *)(a1 + 288) = 0;
  }
}

uint64_t Espresso::MetalLowmemEngine::elementwise_kernel::is_valid_for_engine(uint64_t a1, uint64_t a2, void *a3)
{
  std::vector<int> v6 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v6)
  {
    int v7 = 0;
    goto LABEL_7;
  }
  {
    int v7 = 0;
    goto LABEL_9;
  }
  int v7 = *(std::__shared_weak_count **)(a1 + 16);
  if (v7)
  {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    std::vector<int> v6 = *(std::__shared_weak_count **)(a1 + 8);
    if (!v6)
    {
LABEL_7:
      int v8 = 0;
      goto LABEL_13;
    }
  }
LABEL_9:
  if (v8)
  {
    std::vector<int> v6 = *(std::__shared_weak_count **)(a1 + 16);
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    std::vector<int> v6 = 0;
  }
LABEL_13:
  uint64_t v9 = *(std::__shared_weak_count **)(a2 + 8);
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = Espresso::DummyMPSEngine::mps_metallowmem_elementwise_dispatch(a3, (unsigned int *)(a1 + 280), v8 != 0);
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  return v10;
}

void sub_192124CC8(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    nitro::nitro_function::nitro_function(v2);
    if (!v3)
    {
LABEL_3:
      if (!v1) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if (!v3)
  {
    goto LABEL_3;
  }
  nitro::nitro_function::nitro_function(v3);
  if (!v1) {
LABEL_5:
  }
    _Unwind_Resume(exception_object);
LABEL_4:
  nitro::nitro_function::nitro_function(v1);
  goto LABEL_5;
}

uint64_t Espresso::DummyMPSEngine::elementwise_kernel::is_valid_for_engine(uint64_t a1, uint64_t a2, void *a3)
{
  unint64_t v3 = *(std::__shared_weak_count **)(a2 + 8);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = Espresso::DummyMPSEngine::mps_metallowmem_elementwise_dispatch(a3, (unsigned int *)(a1 + 280), 1);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  return v4;
}

void sub_192124D58(_Unwind_Exception *exception_object)
{
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::DummyMPSEngine::mps_metallowmem_elementwise_dispatch(void *a1, unsigned int *a2, int a3)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  unsigned int v5 = *a2;
  memset(v36, 0, sizeof(v36));
  int v37 = 1065353216;
  if (a3)
  {
    uint64_t v46 = 0x7500000076;
    long long v43 = xmmword_192DCB0D4;
    long long v44 = unk_192DCB0E4;
    long long v45 = xmmword_192DCB0F4;
    *(_OWORD *)long long v41 = xmmword_192DCB094;
    *(_OWORD *)&v41[16] = unk_192DCB0A4;
    *(_OWORD *)long long v42 = xmmword_192DCB0B4;
    *(_OWORD *)&v42[16] = unk_192DCB0C4;
    std::__hash_table<Espresso::ELEMENTWISE_OPERATION,std::hash<Espresso::ELEMENTWISE_OPERATION>,std::equal_to<Espresso::ELEMENTWISE_OPERATION>,std::allocator<Espresso::ELEMENTWISE_OPERATION>>::__assign_unique<Espresso::ELEMENTWISE_OPERATION const*>((uint64_t)v36, (unsigned int *)v41, (unsigned int *)&v47);
  }
  else
  {
    *(_OWORD *)long long v42 = xmmword_192DCB12C;
    *(_OWORD *)&v42[16] = unk_192DCB13C;
    long long v43 = xmmword_192DCB14C;
    long long v44 = unk_192DCB15C;
    *(_OWORD *)long long v41 = xmmword_192DCB10C;
    *(_OWORD *)&v41[16] = unk_192DCB11C;
    std::__hash_table<Espresso::ELEMENTWISE_OPERATION,std::hash<Espresso::ELEMENTWISE_OPERATION>,std::equal_to<Espresso::ELEMENTWISE_OPERATION>,std::allocator<Espresso::ELEMENTWISE_OPERATION>>::__assign_unique<Espresso::ELEMENTWISE_OPERATION const*>((uint64_t)v36, (unsigned int *)v41, (unsigned int *)&v45);
  }
  uint64_t v6 = 0;
  int v7 = (void *)*a1;
  uint64_t v8 = (a1[1] - *a1) >> 6;
  if (v8)
  {
    if (v8 == 1)
    {
LABEL_75:
      if (std::__hash_table<Espresso::ELEMENTWISE_OPERATION,std::hash<Espresso::ELEMENTWISE_OPERATION>,std::equal_to<Espresso::ELEMENTWISE_OPERATION>,std::allocator<Espresso::ELEMENTWISE_OPERATION>>::find<Espresso::ELEMENTWISE_OPERATION>(*(uint64_t *)&v36[0], *((unint64_t *)&v36[0] + 1), *a2))
      {
        uint64_t v6 = v6 ^ 1;
      }
      else
      {
        uint64_t v6 = 0;
      }
      goto LABEL_79;
    }
    long long v9 = *((_OWORD *)v7 + 1);
    uint64_t v10 = v7[4];
    *(_OWORD *)long long v41 = *(_OWORD *)v7;
    *(_OWORD *)&v41[16] = v9;
    *(void *)long long v42 = v10;
    memset(&v42[8], 0, 24);
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v42[8], (const void *)v7[5], v7[6], (uint64_t)(v7[6] - v7[5]) >> 2);
    unint64_t v11 = (void *)*a1;
    long long v12 = *(_OWORD *)(*a1 + 80);
    *(_OWORD *)uint64_t v32 = *(_OWORD *)(*a1 + 64);
    *(_OWORD *)&v32[16] = v12;
    float v13 = (const void *)v11[13];
    uint64_t v33 = v11[12];
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v35 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(__p, v13, v11[14], (uint64_t)(v11[14] - (void)v13) >> 2);
    uint64_t v14 = a1[1] - *a1;
    if (v14 == 128 && (v5 < 0xA || v5 - 29 <= 3))
    {
      uint64_t v15 = Espresso::layer_shape::total_dim((Espresso::layer_shape *)v41);
      if (v15 < Espresso::layer_shape::total_dim((Espresso::layer_shape *)v32))
      {
        unint64_t v16 = *(void **)&v42[8];
        uint64_t v40 = *(void *)v42;
        long long v38 = *(_OWORD *)v41;
        long long v39 = *(_OWORD *)&v41[16];
        uint64_t v17 = *(void *)&v42[24];
        *(_OWORD *)long long v41 = *(_OWORD *)v32;
        *(_OWORD *)&v41[16] = *(_OWORD *)&v32[16];
        *(void *)long long v42 = v33;
        *(_OWORD *)&v42[8] = *(_OWORD *)__p;
        *(void *)&v42[24] = v35;
        *(_OWORD *)uint64_t v32 = v38;
        *(_OWORD *)&v32[16] = v39;
        uint64_t v33 = v40;
        __p[0] = v16;
        uint64_t v35 = v17;
      }
    }
    if (*(_DWORD *)v32 == *(_DWORD *)v41 && *(_OWORD *)&v41[4] == *(_OWORD *)&v32[4])
    {
      LODWORD(v6) = *a2 == 13 && v14 == 128;
      goto LABEL_69;
    }
    if (*a2 > 1)
    {
      LODWORD(v6) = 0;
      char v26 = 0;
      goto LABEL_70;
    }
    if (*(_DWORD *)&v32[8] == 1)
    {
      int v19 = *(int *)&v32[16] <= 1 ? 1 : *(_DWORD *)&v32[16];
      if (v19 * *(_DWORD *)&v32[12] == 1 && *(void *)v32 == *(void *)v41) {
        goto LABEL_68;
      }
    }
    BOOL v20 = *(_DWORD *)v32 == 1 && *(_DWORD *)&v32[4] == 1;
    char v21 = v20;
    if (v20)
    {
      if (*(int *)&v32[16] <= 1) {
        int v22 = 1;
      }
      else {
        int v22 = *(_DWORD *)&v32[16];
      }
      unsigned int v23 = *(_DWORD *)&v32[12];
      int v24 = v22 * *(_DWORD *)&v32[12];
      unsigned int v25 = *(_DWORD *)&v41[8];
      if (v24 == 1 && *(_DWORD *)&v32[8] == *(_DWORD *)&v41[8]) {
        goto LABEL_68;
      }
    }
    else
    {
      unsigned int v23 = *(_DWORD *)&v32[12];
      unsigned int v25 = *(_DWORD *)&v41[8];
      if (*(int *)&v32[16] <= 1) {
        int v27 = 1;
      }
      else {
        int v27 = *(_DWORD *)&v32[16];
      }
      int v24 = v27 * *(_DWORD *)&v32[12];
    }
    if (*(_DWORD *)v32 != *(_DWORD *)v41 || v24 != 1 || *(void *)&v32[4] != __PAIR64__(v25, *(unsigned int *)&v41[4]))
    {
      char v28 = v21 ^ 1;
      if (*(_DWORD *)&v32[8] != 1) {
        char v28 = 1;
      }
      if ((v28 & 1) != 0
        || v23 * *(_DWORD *)&v32[16] != *(_DWORD *)&v41[16] * *(_DWORD *)&v41[12]
        && (v23 != 1 || *(_DWORD *)&v32[16] != 1))
      {
        if (v8 != 2
          || *(_DWORD *)v32 != 1 && *(_DWORD *)v32 != *(_DWORD *)v41 && *(_DWORD *)v41 != 1
          || (*(_DWORD *)&v41[4] != 1 ? (BOOL v29 = *(_DWORD *)&v32[4] == *(_DWORD *)&v41[4]) : (BOOL v29 = 1),
              !v29 ? (BOOL v30 = *(_DWORD *)&v32[4] == 1) : (BOOL v30 = 1),
              !v30 || *(_DWORD *)&v32[8] != v25 || *(void *)&v41[12] != __PAIR64__(*(unsigned int *)&v32[16], v23)))
        {
          LODWORD(v6) = 1;
          goto LABEL_69;
        }
      }
    }
LABEL_68:
    LODWORD(v6) = 0;
LABEL_69:
    char v26 = 1;
LABEL_70:
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (*(void *)&v42[8])
    {
      *(void *)&v42[16] = *(void *)&v42[8];
      operator delete(*(void **)&v42[8]);
    }
    if ((v26 & 1) == 0)
    {
      uint64_t v6 = 0;
      goto LABEL_79;
    }
    goto LABEL_75;
  }
LABEL_79:
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)v36);
  return v6;
}

void sub_192125180(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35)
{
  if (__p)
  {
    a35 = (uint64_t)__p;
    operator delete(__p);
  }
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<Espresso::ELEMENTWISE_OPERATION,std::hash<Espresso::ELEMENTWISE_OPERATION>,std::equal_to<Espresso::ELEMENTWISE_OPERATION>,std::allocator<Espresso::ELEMENTWISE_OPERATION>>::find<Espresso::ELEMENTWISE_OPERATION>(uint64_t a1, unint64_t a2, unsigned int a3)
{
  if (!a2) {
    return 0;
  }
  uint8x8_t v3 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v4 = a3;
    if (a3 >= a2) {
      unint64_t v4 = a3 % a2;
    }
  }
  else
  {
    unint64_t v4 = (a2 - 1) & a3;
  }
  unsigned int v5 = *(uint64_t ***)(a1 + 8 * v4);
  if (!v5) {
    return 0;
  }
  for (double result = *v5; result; double result = (uint64_t *)*result)
  {
    unint64_t v7 = result[1];
    if (v7 == a3)
    {
      if (*((_DWORD *)result + 4) == a3) {
        return result;
      }
    }
    else
    {
      if (v3.u32[0] > 1uLL)
      {
        if (v7 >= a2) {
          v7 %= a2;
        }
      }
      else
      {
        v7 &= a2 - 1;
      }
      if (v7 != v4) {
        return 0;
      }
    }
  }
  return result;
}

void Espresso::ANECompilerEngine::ane_name_translator::fill_name_table(uint64_t **this, const Espresso::net *a2)
{
  uint64_t v2 = *((void *)a2 + 4);
  uint64_t v56 = *((void *)a2 + 5);
  if (v2 != v56)
  {
    unint64_t v3 = 0;
    long long v54 = (void *)((char *)a2 + 96);
    int v55 = (void *)((char *)a2 + 56);
    unint64_t v4 = this + 3;
    do
    {
      unint64_t v57 = v3;
      unsigned int v5 = *(const void **)(*(void *)v2 + 64);
      if (v5)
      {
        if (v6)
        {
          unint64_t v7 = v6;
          uint64_t v8 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::find<unsigned long>(v55, v57);
          if (!v8) {
            goto LABEL_58;
          }
          long long v9 = v8;
          uint64_t v10 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::find<unsigned long>(v54, v57);
          if (!v10) {
            goto LABEL_58;
          }
          uint64_t v11 = v9[3];
          uint64_t v12 = v9[4];
          if (v12 - v11 != v7[59] - v7[58]) {
            Espresso::throw_exception_selector<Espresso::invalid_state_error>("Mismatched number of bottoms for tunneling kernel.");
          }
          float v13 = v10;
          uint64_t v14 = v10[3];
          uint64_t v15 = v10[4];
          if (v15 - v14 != v7[62] - v7[61]) {
            Espresso::throw_exception_selector<Espresso::invalid_state_error>("Mismatched number of tops for tunneling kernel.");
          }
          if (v12 != v11)
          {
            uint64_t v16 = 0;
            unint64_t v17 = 0;
            do
            {
              uint64_t v18 = (const std::string *)(v7[58] + v16);
              __str.__r_.__value_.__r.__words[0] = v11 + v16;
              int v19 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v4, (void *)(v11 + v16), (uint64_t)&std::piecewise_construct, (long long **)&__str);
              std::string::operator=((std::string *)(v19 + 7), v18);
              ++v17;
              uint64_t v11 = v9[3];
              v16 += 24;
            }
            while (0xAAAAAAAAAAAAAAABLL * ((v9[4] - v11) >> 3) > v17);
            uint64_t v14 = v13[3];
            uint64_t v15 = v13[4];
          }
          if (v15 != v14)
          {
            uint64_t v20 = 0;
            unint64_t v21 = 0;
            do
            {
              int v22 = (const std::string *)(v7[61] + v20);
              __str.__r_.__value_.__r.__words[0] = v14 + v20;
              unsigned int v23 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v4, (void *)(v14 + v20), (uint64_t)&std::piecewise_construct, (long long **)&__str);
              std::string::operator=((std::string *)(v23 + 7), v22);
              ++v21;
              uint64_t v14 = v13[3];
              v20 += 24;
            }
            while (0xAAAAAAAAAAAAAAABLL * ((v13[4] - v14) >> 3) > v21);
          }
        }
        else
        {
          if (v24)
          {
            unsigned int v25 = (void *)(*(uint64_t (**)(void *))(*(void *)v24 + 320))(v24);
            char v26 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::find<unsigned long>(v55, v57);
            if (!v26
              || (int v27 = v26,
                  (char v28 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::find<unsigned long>(v54, v57)) == 0))
            {
LABEL_58:
              std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
            }
            BOOL v29 = v28;
            uint64_t v30 = v25[12] - v25[11];
            if (v30)
            {
              uint64_t v31 = v27[3];
              uint64_t v32 = v27[4];
              if (v32 - v31 != v30) {
                Espresso::throw_exception_selector<Espresso::invalid_state_error>("Mismatched number of bottoms for dev_op non-default names.");
              }
              if (v32 != v31)
              {
                uint64_t v33 = 0;
                unint64_t v34 = 0;
                do
                {
                  uint64_t v35 = (const std::string *)(v25[11] + v33);
                  __str.__r_.__value_.__r.__words[0] = v31 + v33;
                  long long v36 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v4, (void *)(v31 + v33), (uint64_t)&std::piecewise_construct, (long long **)&__str);
                  std::string::operator=((std::string *)(v36 + 7), v35);
                  ++v34;
                  uint64_t v31 = v27[3];
                  v33 += 24;
                }
                while (0xAAAAAAAAAAAAAAABLL * ((v27[4] - v31) >> 3) > v34);
              }
            }
            uint64_t v37 = v25[15] - v25[14];
            if (v37)
            {
              uint64_t v38 = v29[3];
              uint64_t v39 = v29[4];
              if (v39 - v38 != v37) {
                Espresso::throw_exception_selector<Espresso::invalid_state_error>("Mismatched number of tops for dev_op non-default names.");
              }
              if (v39 != v38)
              {
                uint64_t v40 = 0;
                unint64_t v41 = 0;
                do
                {
                  long long v42 = (const std::string *)(v25[14] + v40);
                  __str.__r_.__value_.__r.__words[0] = v38 + v40;
                  long long v43 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v4, (void *)(v38 + v40), (uint64_t)&std::piecewise_construct, (long long **)&__str);
                  std::string::operator=((std::string *)(v43 + 7), v42);
                  ++v41;
                  uint64_t v38 = v29[3];
                  v40 += 24;
                }
                while (0xAAAAAAAAAAAAAAABLL * ((v29[4] - v38) >> 3) > v41);
              }
            }
          }
        }
      }
      unint64_t v3 = v57 + 1;
      v2 += 16;
    }
    while (v2 != v56);
  }
  for (unint64_t i = (long long *)*((void *)a2 + 19); i; unint64_t i = *(long long **)i)
  {
    std::pair<std::string const,std::shared_ptr<Espresso::blob<float,4>>>::pair[abi:ne180100](&__str, i + 1);
    Espresso::ANECompilerEngine::ane_name_translator::ane_name((uint64_t)this, (char *)&__str, &__s1);
    uint64_t v45 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
    if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __s1.__r_.__value_.__l.__size_;
    }
    std::string::size_type v47 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v47 = __str.__r_.__value_.__l.__size_;
    }
    if (size == v47)
    {
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_str = &__str;
      }
      else {
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      }
      if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
      {
        long long v50 = (void *)__s1.__r_.__value_.__r.__words[0];
        if (!memcmp(__s1.__r_.__value_.__l.__data_, p_str, __s1.__r_.__value_.__l.__size_)) {
          goto LABEL_51;
        }
      }
      else
      {
        if (!*((unsigned char *)&__s1.__r_.__value_.__s + 23)) {
          goto LABEL_52;
        }
        p_s1 = &__s1;
        while (p_s1->__r_.__value_.__s.__data_[0] == p_str->__r_.__value_.__s.__data_[0])
        {
          p_s1 = (std::string *)((char *)p_s1 + 1);
          p_str = (std::string *)((char *)p_str + 1);
          if (!--v45)
          {
            if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) == 0) {
              goto LABEL_52;
            }
            goto LABEL_50;
          }
        }
      }
    }
    int v61 = &__s1;
    uint64_t v51 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(this, &__s1, (uint64_t)&std::piecewise_construct, (long long **)&v61);
    std::string::operator=((std::string *)(v51 + 7), &__str);
    if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
    {
LABEL_50:
      long long v50 = (void *)__s1.__r_.__value_.__r.__words[0];
LABEL_51:
      operator delete(v50);
    }
LABEL_52:
    if (v60) {
      nitro::nitro_function::nitro_function(v60);
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
  }
}

void sub_192125748(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
}

void Espresso::ANECompilerEngine::ane_name_translator::ane_name(uint64_t a1@<X0>, char *a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v6 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>(a1 + 24, a2);
  if ((void *)(a1 + 32) == v6)
  {
    std::string::size_type v8 = std::string::find((const std::string *)a2, 58, 0);
    std::string::size_type v9 = std::string::find((const std::string *)a2, 124, 0);
    std::string::size_type v10 = std::string::find((const std::string *)a2, 64, 0);
    *(_OWORD *)long long __p = 0u;
    long long v55 = 0u;
    float v56 = 1.0;
    uint64_t v11 = operator new(0x18uLL);
    *uint64_t v11 = 0;
    v11[1] = 95;
    *((unsigned char *)v11 + 16) = 95;
    unint64_t v12 = vcvtps_u32_f32(1.0 / v56);
    if (v12 <= 1) {
      size_t v13 = 1;
    }
    else {
      size_t v13 = v12;
    }
    if (v12 >= 2)
    {
      if ((v13 & (v13 - 1)) != 0)
      {
        int8x8_t prime = (void *)std::__next_prime(v13);
        size_t v13 = (size_t)prime;
        int8x8_t v14 = (int8x8_t)__p[1];
        if (prime <= __p[1])
        {
          if (prime >= __p[1]) {
            goto LABEL_51;
          }
          unint64_t v26 = vcvtps_u32_f32((float)*((unint64_t *)&v55 + 1) / v56);
          if (__p[1] < (void *)3
            || (uint8x8_t v27 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
          {
            unint64_t v26 = std::__next_prime(v26);
          }
          else
          {
            uint64_t v28 = 1 << -(char)__clz(v26 - 1);
            if (v26 >= 2) {
              unint64_t v26 = v28;
            }
          }
          if (v13 <= v26) {
            size_t v13 = v26;
          }
          if ((void *)v13 >= __p[1])
          {
            int8x8_t v14 = (int8x8_t)__p[1];
            goto LABEL_51;
          }
          if (!v13)
          {
            BOOL v29 = __p[0];
            __p[0] = 0;
            if (v29) {
              operator delete(v29);
            }
            int8x8_t v14 = 0;
            __p[1] = 0;
            BOOL v30 = 1;
            goto LABEL_52;
          }
        }
      }
      int8x8_t v14 = (int8x8_t)v13;
      if (v13 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
    }
    else
    {
      int8x8_t v14 = (int8x8_t)2;
    }
    uint64_t v18 = operator new(8 * *(void *)&v14);
    int v19 = __p[0];
    __p[0] = v18;
    if (v19) {
      operator delete(v19);
    }
    uint64_t v20 = 0;
    __p[1] = (void *)v14;
    do
      *((void *)__p[0] + v20++) = 0;
    while (*(void *)&v14 != v20);
    unint64_t v21 = (void **)v55;
    if ((void)v55)
    {
      unint64_t v22 = *(void *)(v55 + 8);
      uint8x8_t v23 = (uint8x8_t)vcnt_s8(v14);
      v23.i16[0] = vaddlv_u8(v23);
      if (v23.u32[0] > 1uLL)
      {
        if (v22 >= *(void *)&v14) {
          v22 %= *(void *)&v14;
        }
      }
      else
      {
        v22 &= *(void *)&v14 - 1;
      }
      *((void *)__p[0] + v22) = &v55;
      for (i = *v21; i; unint64_t v22 = v25)
      {
        unint64_t v25 = i[1];
        if (v23.u32[0] > 1uLL)
        {
          if (v25 >= *(void *)&v14) {
            v25 %= *(void *)&v14;
          }
        }
        else
        {
          v25 &= *(void *)&v14 - 1;
        }
        if (v25 != v22)
        {
          if (!*((void *)__p[0] + v25))
          {
            *((void *)__p[0] + v25) = v21;
            goto LABEL_33;
          }
          *unint64_t v21 = (void *)*i;
          void *i = **((void **)__p[0] + v25);
          **((void **)__p[0] + v25) = i;
          unint64_t i = v21;
        }
        unint64_t v25 = v22;
LABEL_33:
        unint64_t v21 = (void **)i;
        unint64_t i = (void *)*i;
      }
    }
LABEL_51:
    uint8x8_t v31 = (uint8x8_t)vcnt_s8(v14);
    v31.i16[0] = vaddlv_u8(v31);
    BOOL v30 = v31.u32[0] < 2uLL;
    if (v31.u32[0] >= 2uLL)
    {
      if (*(void *)&v14 <= 0x5FuLL) {
        uint64_t v32 = 0x5FuLL % *(void *)&v14;
      }
      else {
        uint64_t v32 = 95;
      }
LABEL_56:
      uint64_t v33 = __p[0];
      unint64_t v34 = (void *)*((void *)__p[0] + v32);
      if (v34)
      {
        *uint64_t v11 = *v34;
      }
      else
      {
        *uint64_t v11 = v55;
        *(void *)&long long v55 = v11;
        v33[v32] = &v55;
        if (!*v11) {
          goto LABEL_65;
        }
        unint64_t v35 = *(void *)(*v11 + 8);
        if (v30)
        {
          v35 &= *(void *)&v14 - 1;
        }
        else if (v35 >= *(void *)&v14)
        {
          v35 %= *(void *)&v14;
        }
        unint64_t v34 = (char *)__p[0] + 8 * v35;
      }
      void *v34 = v11;
LABEL_65:
      ++*((void *)&v55 + 1);
      LODWORD(v36) = a2[23];
      uint64_t v37 = *(char **)a2;
      if ((v36 & 0x80u) == 0) {
        uint64_t v38 = a2;
      }
      else {
        uint64_t v38 = *(char **)a2;
      }
      if (v14)
      {
        unint64_t v39 = *v38;
        if (v30)
        {
          uint64_t v40 = (*(void *)&v14 - 1) & v39;
        }
        else
        {
          uint64_t v40 = v39;
          if (*(void *)&v14 <= v39) {
            uint64_t v40 = v39 % *(void *)&v14;
          }
        }
        unint64_t j = (uint64_t **)*((void *)__p[0] + v40);
        if (j)
        {
          for (unint64_t j = (uint64_t **)*j; j; unint64_t j = (uint64_t **)*j)
          {
            unint64_t v42 = (unint64_t)j[1];
            if (v42 == v39)
            {
              if (*((unsigned __int8 *)j + 16) == v39) {
                break;
              }
            }
            else
            {
              if (v30)
              {
                v42 &= *(void *)&v14 - 1;
              }
              else if (v42 >= *(void *)&v14)
              {
                v42 %= *(void *)&v14;
              }
              if (v42 != v40) {
                goto LABEL_85;
              }
            }
          }
        }
      }
      else
      {
LABEL_85:
        unint64_t j = 0;
      }
      BOOL v44 = (v9 & v8 & v10) != 0xFFFFFFFFFFFFFFFFLL || j != 0;
      if ((v36 & 0x80) == 0)
      {
        if (v36 == 7)
        {
          int v45 = *(_DWORD *)(a2 + 3);
          BOOL v46 = *(_DWORD *)a2 == 1734960471;
          int v47 = 1937008743;
        }
        else
        {
          if (v36 != 5)
          {
            if (!v44 && v36 < 0x21)
            {
LABEL_107:
              *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
              a3->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
LABEL_124:
              std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)__p);
              return;
            }
            goto LABEL_110;
          }
          int v45 = a2[4];
          BOOL v46 = *(_DWORD *)a2 == 1953066581;
          int v47 = 115;
        }
        if (v46 && v45 == v47) {
          LOBYTE(v44) = 1;
        }
        if (!v44) {
          goto LABEL_107;
        }
LABEL_110:
        uint64_t v37 = a2;
        goto LABEL_122;
      }
      std::string::size_type v36 = *((void *)a2 + 1);
      if (v36 == 5)
      {
        int v48 = v37[4];
        BOOL v49 = *(_DWORD *)v37 == 1953066581;
        int v50 = 115;
      }
      else
      {
        if (v36 != 7)
        {
          if (v44 || v36 > 0x20)
          {
LABEL_122:
            Espresso::sha_hash(&__str, v37, v36, 0);
            std::string::basic_string(a3, &__str, 0, 0x20uLL, (std::allocator<char> *)&v57);
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__str.__r_.__value_.__l.__data_);
            }
            goto LABEL_124;
          }
LABEL_119:
          std::string::__init_copy_ctor_external(a3, v37, v36);
          goto LABEL_124;
        }
        int v48 = *(_DWORD *)(v37 + 3);
        BOOL v49 = *(_DWORD *)v37 == 1734960471;
        int v50 = 1937008743;
      }
      if (v49 && v48 == v50) {
        LOBYTE(v44) = 1;
      }
      if (v44) {
        goto LABEL_122;
      }
      goto LABEL_119;
    }
LABEL_52:
    uint64_t v32 = (v14.i32[0] - 1) & 0x5FLL;
    goto LABEL_56;
  }
  if (*((char *)v6 + 79) < 0)
  {
    uint64_t v15 = (const std::string::value_type *)v6[7];
    std::string::size_type v16 = v6[8];
    std::string::__init_copy_ctor_external(a3, v15, v16);
  }
  else
  {
    long long v7 = *(_OWORD *)(v6 + 7);
    a3->__r_.__value_.__r.__words[2] = v6[9];
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v7;
  }
}

void sub_192125D38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      unint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  unint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void Espresso::sha_hash(std::string *this, const void *a2, CC_LONG a3, int a4)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  std::string::size_type v8 = (unsigned __int8 *)malloc_type_malloc(0x20uLL, 0x1516ED34uLL);
  CC_SHA256(a2, a3, v8);
  std::string::basic_string[abi:ne180100]<0>(this, "");
  uint64_t v9 = 0;
  *(void *)std::string __str = 0;
  if (!a4)
  {
    std::string::size_type v10 = "%02x";
    goto LABEL_4;
  }
  std::string::size_type v10 = "%02X";
  snprintf(__str, 8uLL, "%02X");
  while (1)
  {
    std::string::append(this, __str);
    if (++v9 == 32) {
      break;
    }
LABEL_4:
    snprintf(__str, 8uLL, v10, v8[v9]);
  }
  free(v8);
}

void sub_192125EC4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void *a2, uint64_t a3, long long **a4)
{
  uint64_t v6 = (uint64_t **)std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__find_equal<std::string>((uint64_t)a1, &v15, a2);
  long long v7 = *v6;
  if (!*v6)
  {
    std::string::size_type v8 = v6;
    long long v7 = (uint64_t *)operator new(0x50uLL);
    v13[0] = v7;
    v13[1] = a1 + 1;
    char v14 = 0;
    uint64_t v9 = (std::string *)(v7 + 4);
    std::string::size_type v10 = *a4;
    if (*((char *)*a4 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((void *)v10 + 1));
    }
    else
    {
      long long v11 = *v10;
      v7[6] = *((void *)v10 + 2);
      *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
    }
    v7[7] = 0;
    v7[8] = 0;
    v7[9] = 0;
    char v14 = 1;
    std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at(a1, v15, v8, v7);
    v13[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v13);
  }
  return v7;
}

void sub_192125FB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

void Espresso::ANECompilerEngine::context::setup_blobs_internal_properties_before_resize(Espresso::ANECompilerEngine::context *this, Espresso::net *a2)
{
  std::string::basic_string[abi:ne180100]<0>(&v10, "ane_compiler_batch");
  if (!std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*((void **)a2 + 60), &v10))
  {
    BOOL v6 = 0;
    goto LABEL_12;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "ane_compiler_batch");
  uint64_t v15 = __p;
  unint64_t v3 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)a2 + 59, __p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v15);
  unint64_t v4 = (unsigned __int8 *)v3 + 56;
  int v5 = *((char *)v3 + 79);
  if ((v5 & 0x80000000) == 0)
  {
    if (v5 != 1) {
      goto LABEL_9;
    }
LABEL_8:
    BOOL v6 = *v4 == 49;
    goto LABEL_10;
  }
  if (*((void *)v3 + 8) == 1)
  {
    unint64_t v4 = *(unsigned __int8 **)v4;
    goto LABEL_8;
  }
LABEL_9:
  BOOL v6 = 0;
LABEL_10:
  if (v14 < 0) {
    operator delete(__p[0]);
  }
LABEL_12:
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  long long v7 = (long long *)*((void *)a2 + 19);
  if (v7)
  {
    while (1)
    {
      std::pair<std::string const,std::shared_ptr<Espresso::blob<float,4>>>::pair[abi:ne180100](&v10, v7 + 1);
      if (!lpsrc) {
        goto LABEL_19;
      }
      if (!v8) {
        goto LABEL_19;
      }
      uint64_t v9 = v12;
      if (v12) {
        break;
      }
      v8[50] = v6;
LABEL_22:
      if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v10.__r_.__value_.__l.__data_);
      }
      long long v7 = *(long long **)v7;
      if (!v7) {
        return;
      }
    }
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    v8[50] = v6;
    nitro::nitro_function::nitro_function(v9);
LABEL_19:
    if (v12) {
      nitro::nitro_function::nitro_function(v12);
    }
    goto LABEL_22;
  }
}

void sub_1921261C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::pair<std::string const,std::shared_ptr<Espresso::blob<float,4>>>::pair[abi:ne180100](std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  std::string::size_type v5 = *((void *)a2 + 4);
  this[1].__r_.__value_.__r.__words[0] = *((void *)a2 + 3);
  this[1].__r_.__value_.__l.__size_ = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

uint64_t espresso_network_get_version(void *a1, int a2, char *a3, size_t a4)
{
  std::string::size_type v8 = (void *)MEMORY[0x192FF2020]();
  if (a1)
  {
    uint64_t v10 = 4294967290;
    if (a3 && v9)
    {
      uint64_t v11 = *(void *)(a1[133] + 24);
      if (a2 >= (unint64_t)((*(void *)(a1[133] + 32) - v11) >> 4))
      {
        exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Invalid network_index.");
        __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      uint64_t v12 = (uint64_t *)(v11 + 16 * a2);
      uint64_t v13 = *v12;
      uint64_t v10 = v12[1];
      if (v10) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
      }
      if (!v13)
      {
        uint64_t v18 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v18, "Null network found.");
        __cxa_throw(v18, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "network_version");
      unint64_t v22 = __p;
      char v14 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(v13 + 472), __p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v22);
      if (*((char *)v14 + 79) < 0) {
        std::string::__init_copy_ctor_external(&v21, *((const std::string::value_type **)v14 + 7), *((void *)v14 + 8));
      }
      else {
        std::string v21 = *(std::string *)((char *)v14 + 56);
      }
      if (v20 < 0) {
        operator delete(__p[0]);
      }
      if ((SHIBYTE(v21.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        strncpy(a3, (const char *)&v21, a4);
        if (!v10) {
          goto LABEL_19;
        }
        goto LABEL_18;
      }
      uint64_t v15 = (void *)v21.__r_.__value_.__r.__words[0];
      strncpy(a3, v21.__r_.__value_.__l.__data_, a4);
      operator delete(v15);
      if (v10)
      {
LABEL_18:
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v10);
        uint64_t v10 = 0;
      }
    }
  }
  else
  {
    uint64_t v10 = 4294967290;
  }
LABEL_19:
  return v10;
}

void sub_192126480(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
  if (a2 == 1)
  {
    uint64_t v18 = (EspressoLight *)__cxa_begin_catch(exception_object);
    EspressoLight::handle_ex_(v18, v19);
    __cxa_end_catch();
    JUMPOUT(0x1921263E4);
  }
  _Unwind_Resume(exception_object);
}

_OWORD *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, void *a2, uint64_t a3, _OWORD **a4)
{
  BOOL v6 = (void **)std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__find_equal<std::string>((uint64_t)a1, &v14, a2);
  long long v7 = *v6;
  if (!*v6)
  {
    std::string::size_type v8 = (uint64_t **)v6;
    long long v7 = operator new(0x50uLL);
    v12[1] = a1 + 1;
    uint64_t v9 = *a4;
    uint64_t v10 = *((void *)*a4 + 2);
    v7[2] = **a4;
    *((void *)v7 + 6) = v10;
    void *v9 = 0;
    v9[1] = 0;
    void v9[2] = 0;
    *((void *)v7 + 8) = 0;
    *((void *)v7 + 9) = 0;
    *((void *)v7 + 7) = 0;
    char v13 = 1;
    std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at(a1, v14, v8, (uint64_t *)v7);
    v12[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v12);
  }
  return v7;
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::dev_op_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

uint64_t Espresso::blob_cpu::__copy_from(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  int v5 = (*(uint64_t (**)(void))(*(void *)*a3 + 24))();
  if (v5 != (*(unsigned int (**)(uint64_t))(*(void *)a1 + 24))(a1)) {
    return 0;
  }
  uint64_t result = *a3;
  if (*a3)
  {
    if (result)
    {
      long long v7 = (void *)result;
      *(_DWORD *)(a1 + 240) = *(_DWORD *)(result + 240);
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(result + 8);
      *(void *)(a1 + 24) = *(void *)(result + 24);
      uint64_t v8 = *(void *)(result + 160);
      if (!v8)
      {
        uint64_t v15 = *(std::__shared_weak_count **)(a1 + 168);
        *(void *)(a1 + 160) = 0;
        *(void *)(a1 + 168) = 0;
        if (v15) {
          nitro::nitro_function::nitro_function(v15);
        }
LABEL_26:
        uint64_t v24 = v7[22];
        if (!v24)
        {
          uint8x8_t v31 = *(std::__shared_weak_count **)(a1 + 184);
          *(void *)(a1 + 176) = 0;
          *(void *)(a1 + 184) = 0;
          if (v31) {
            nitro::nitro_function::nitro_function(v31);
          }
LABEL_47:
          uint64_t v40 = v7[24];
          if (!v40)
          {
            int v47 = *(std::__shared_weak_count **)(a1 + 200);
            *(void *)(a1 + 192) = 0;
            *(void *)(a1 + 200) = 0;
            if (v47) {
              nitro::nitro_function::nitro_function(v47);
            }
LABEL_68:
            uint64_t v56 = v7[26];
            if (!v56)
            {
              unsigned int v63 = *(std::__shared_weak_count **)(a1 + 216);
              *(void *)(a1 + 208) = 0;
              *(void *)(a1 + 216) = 0;
              if (v63) {
                nitro::nitro_function::nitro_function(v63);
              }
              return 1;
            }
            uint64_t v57 = *(void *)(a1 + 208);
            if (v57)
            {
              uint64_t v58 = *(int *)(v57 + 8);
              for (uint64_t i = 12; i != 24; i += 4)
                v58 *= *(int *)(v57 + i);
              int v60 = *(_DWORD *)(v56 + 8);
              uint64_t v61 = v60;
              for (uint64_t j = 12; j != 24; j += 4)
                v61 *= *(int *)(v56 + j);
              if (((v61 ^ v58) & 0x3FFFFFFFFFFFFFFFLL) == 0)
              {
LABEL_83:
                for (uint64_t k = 0; k != 16; k += 4)
                  *(_DWORD *)(v57 + 8 + k) = *(_DWORD *)(v56 + 8 + k);
                int v67 = *(void **)(v57 + 24);
                long long v68 = *(const void **)(v56 + 24);
                if (v67 != v68)
                {
                  uint64_t v69 = 0;
                  uint64_t v70 = *(int *)(v57 + 8);
                  uint64_t v71 = v57 + 12;
                  do
                  {
                    v70 *= *(int *)(v71 + v69);
                    v69 += 4;
                  }
                  while (v69 != 12);
                  memcpy(v67, v68, 4 * v70);
                }
                return 1;
              }
            }
            else
            {
              int v60 = *(_DWORD *)(v56 + 8);
            }
            std::allocate_shared[abi:ne180100]<Espresso::blob<int,4>,std::allocator<Espresso::blob<int,4>>,int &,int &,int &,int &,Espresso::blob<int,4>::UnitializedBlobType,void>(&v72, v60, *(_DWORD *)(v56 + 12), *(_DWORD *)(v56 + 16), *(_DWORD *)(v56 + 20));
            uint64_t v64 = v72;
            int v65 = *(std::__shared_weak_count **)(a1 + 216);
            *(_OWORD *)(a1 + 208) = v72;
            if (v65)
            {
              nitro::nitro_function::nitro_function(v65);
              uint64_t v57 = *(void *)(a1 + 208);
            }
            else
            {
              uint64_t v57 = v64;
            }
            uint64_t v56 = v7[26];
            goto LABEL_83;
          }
          uint64_t v41 = *(void *)(a1 + 192);
          if (v41)
          {
            uint64_t v42 = *(int *)(v41 + 8);
            for (uint64_t m = 12; m != 24; m += 4)
              v42 *= *(int *)(v41 + m);
            int v44 = *(_DWORD *)(v40 + 8);
            uint64_t v45 = v44;
            for (uint64_t n = 12; n != 24; n += 4)
              v45 *= *(int *)(v40 + n);
            if (v42 == v45) {
              goto LABEL_62;
            }
          }
          else
          {
            int v44 = *(_DWORD *)(v40 + 8);
          }
          std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,4>,std::allocator<Espresso::blob<unsigned char,4>>,int &,int &,int &,int &,Espresso::blob<unsigned char,4>::UnitializedBlobType,void>(&v72, v44, *(_DWORD *)(v40 + 12), *(_DWORD *)(v40 + 16), *(_DWORD *)(v40 + 20));
          uint64_t v48 = v72;
          BOOL v49 = *(std::__shared_weak_count **)(a1 + 200);
          *(_OWORD *)(a1 + 192) = v72;
          if (v49)
          {
            nitro::nitro_function::nitro_function(v49);
            uint64_t v41 = *(void *)(a1 + 192);
          }
          else
          {
            uint64_t v41 = v48;
          }
          uint64_t v40 = v7[24];
LABEL_62:
          for (iuint64_t i = 0; ii != 16; ii += 4)
            *(_DWORD *)(v41 + 8 + ii) = *(_DWORD *)(v40 + 8 + ii);
          uint64_t v51 = *(void **)(v41 + 24);
          std::string::size_type v52 = *(const void **)(v40 + 24);
          if (v51 != v52)
          {
            uint64_t v53 = 0;
            size_t v54 = *(int *)(v41 + 8);
            uint64_t v55 = v41 + 12;
            do
            {
              v54 *= *(int *)(v55 + v53);
              v53 += 4;
            }
            while (v53 != 12);
            memcpy(v51, v52, v54);
          }
          goto LABEL_68;
        }
        uint64_t v25 = *(void *)(a1 + 176);
        if (v25)
        {
          uint64_t v26 = *(int *)(v25 + 8);
          for (juint64_t j = 12; jj != 24; jj += 4)
            v26 *= *(int *)(v25 + jj);
          int v28 = *(_DWORD *)(v24 + 8);
          uint64_t v29 = v28;
          for (kuint64_t k = 12; kk != 24; kk += 4)
            v29 *= *(int *)(v24 + kk);
          if (((v29 ^ v26) & 0x7FFFFFFFFFFFFFFFLL) == 0) {
            goto LABEL_41;
          }
        }
        else
        {
          int v28 = *(_DWORD *)(v24 + 8);
        }
        std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned short,4>,std::allocator<Espresso::blob<unsigned short,4>>,int &,int &,int &,int &,Espresso::blob<unsigned short,4>::UnitializedBlobType,void>(&v72, v28, *(_DWORD *)(v24 + 12), *(_DWORD *)(v24 + 16), *(_DWORD *)(v24 + 20));
        uint64_t v32 = v72;
        uint64_t v33 = *(std::__shared_weak_count **)(a1 + 184);
        *(_OWORD *)(a1 + 176) = v72;
        if (v33)
        {
          nitro::nitro_function::nitro_function(v33);
          uint64_t v25 = *(void *)(a1 + 176);
        }
        else
        {
          uint64_t v25 = v32;
        }
        uint64_t v24 = v7[22];
LABEL_41:
        for (muint64_t m = 0; mm != 16; mm += 4)
          *(_DWORD *)(v25 + 8 + mm) = *(_DWORD *)(v24 + 8 + mm);
        unint64_t v35 = *(void **)(v25 + 24);
        std::string::size_type v36 = *(const void **)(v24 + 24);
        if (v35 != v36)
        {
          uint64_t v37 = 0;
          uint64_t v38 = *(int *)(v25 + 8);
          uint64_t v39 = v25 + 12;
          do
          {
            v38 *= *(int *)(v39 + v37);
            v37 += 4;
          }
          while (v37 != 12);
          memcpy(v35, v36, 2 * v38);
        }
        goto LABEL_47;
      }
      uint64_t v9 = *(void *)(a1 + 160);
      if (v9)
      {
        uint64_t v10 = *(int *)(v9 + 8);
        for (nuint64_t n = 12; nn != 24; nn += 4)
          v10 *= *(int *)(v9 + nn);
        int v12 = *(_DWORD *)(v8 + 8);
        uint64_t v13 = v12;
        for (uint64_t i1 = 12; i1 != 24; i1 += 4)
          v13 *= *(int *)(v8 + i1);
        if (((v13 ^ v10) & 0x3FFFFFFFFFFFFFFFLL) == 0) {
          goto LABEL_20;
        }
      }
      else
      {
        int v12 = *(_DWORD *)(v8 + 8);
      }
      std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,Espresso::blob<float,4>::UnitializedBlobType,void>(&v72, v12, *(_DWORD *)(v8 + 12), *(_DWORD *)(v8 + 16), *(_DWORD *)(v8 + 20));
      uint64_t v16 = v72;
      unint64_t v17 = *(std::__shared_weak_count **)(a1 + 168);
      *(_OWORD *)(a1 + 160) = v72;
      if (v17)
      {
        nitro::nitro_function::nitro_function(v17);
        uint64_t v9 = *(void *)(a1 + 160);
      }
      else
      {
        uint64_t v9 = v16;
      }
      uint64_t v8 = v7[20];
LABEL_20:
      for (uint64_t i2 = 0; i2 != 16; i2 += 4)
        *(_DWORD *)(v9 + 8 + i2) = *(_DWORD *)(v8 + 8 + i2);
      int v19 = *(void **)(v9 + 24);
      char v20 = *(const void **)(v8 + 24);
      if (v19 != v20)
      {
        uint64_t v21 = 0;
        uint64_t v22 = *(int *)(v9 + 8);
        uint64_t v23 = v9 + 12;
        do
        {
          v22 *= *(int *)(v23 + v21);
          v21 += 4;
        }
        while (v21 != 12);
        memcpy(v19, v20, 4 * v22);
      }
      goto LABEL_26;
    }
  }
  return result;
}

uint64_t Espresso::blob_cpu::platform(Espresso::blob_cpu *this)
{
  return 0;
}

uint64_t std::__shared_ptr_pointer<MIL::IRArgument  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t Espresso::inline_get_cpu_blob<Espresso::blob<unsigned char,4>,false>(void *a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (*a2
    && ((uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 32))(result), result == 2)
     || (uint64_t result = (*(uint64_t (**)(void))(*(void *)*a2 + 32))(), result == 4)))
  {
    uint64_t v5 = *(void *)(*a2 + 200);
    *a1 = *(void *)(*a2 + 192);
    a1[1] = v5;
    if (v5) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
  }
  return result;
}

void Espresso::BNNSEngine::inner_product_kernel::__launch(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t **a4)
{
  int v8 = *(_DWORD *)(a1 + 424);
  if (v8 >= 1)
  {
    int v9 = *(_DWORD *)(a1 + 944);
    if (v9) {
      BOOL v10 = v8 <= v9;
    }
    else {
      BOOL v10 = 1;
    }
    if (!v10)
    {
      *(_DWORD *)(a1 + 944) = v9 + 1;
      return;
    }
    *(_DWORD *)(a1 + 944) = 1;
  }
  int v11 = (***(uint64_t (****)(void))(*(void *)(a1 + 8) + 8))(*(void *)(*(void *)(a1 + 8) + 8));
  if (a3[1] == *a3)
  {
    uint64_t v144 = 0;
    int v145 = 0;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v144, *a3);
  }
  int v12 = a4[1];
  if (v12 == *a4)
  {
    uint64_t v142 = 0;
    uint64_t v143 = 0;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v142, *a4);
    int v12 = *a4;
  }
  Espresso::abstract_blob_container::shape((char *)&v131, *v12);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v136, (const Espresso::layer_shape *)&v131, 0);
  if (v134)
  {
    uint64_t v135 = v134;
    operator delete(v134);
  }
  Espresso::abstract_blob_container::shape((char *)&v131, **a3);
  char v13 = vmaxv_u16((uint16x4_t)vmovn_s32(vcgtq_s32((int32x4_t)xmmword_192DCA240, v132)));
  if (v133 == -1) {
    BOOL v14 = v132.i32[3] != 1;
  }
  else {
    BOOL v14 = v133 == 5;
  }
  if (v132.i32[3]) {
    BOOL v14 = 0;
  }
  if ((v13 & 1) == 0 && v131 >= 1 && !v14)
  {
    Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v125, (const Espresso::layer_shape *)&v131, 0);
    if (*(unsigned char *)(a1 + 344) || v141 <= 3)
    {
      switch(v141)
      {
        case 1u:
          uint64_t v21 = 1;
          if (!v141) {
            goto LABEL_34;
          }
          break;
        case 2u:
          uint64_t v21 = v136;
          if (!v141) {
            goto LABEL_34;
          }
          break;
        case 3u:
          uint64_t v21 = v137 * (uint64_t)v136;
          if (!v141) {
            goto LABEL_34;
          }
          break;
        case 4u:
          uint64_t v21 = v137 * (uint64_t)v136 * v138;
          if (!v141) {
            goto LABEL_34;
          }
          break;
        case 5u:
          uint64_t v21 = v137 * (uint64_t)v136 * v138 * v139;
          if (!v141) {
            goto LABEL_34;
          }
          break;
        default:
          uint64_t v21 = 0;
          if (!v141) {
            goto LABEL_34;
          }
          break;
      }
      uint64_t v22 = *(&v136 + (int)v141 - 1);
    }
    else if (v141 == 5)
    {
      uint64_t v21 = v137 * (uint64_t)v136;
      uint64_t v22 = v139 * (uint64_t)v140 * v138;
    }
    else if (v141 == 4)
    {
      uint64_t v21 = v136;
      uint64_t v22 = v138 * (uint64_t)v139 * v137;
    }
    else
    {
      uint64_t v21 = 0;
LABEL_34:
      uint64_t v22 = 0;
    }
    if (*(unsigned char *)(a1 + 344) || v130 <= 3)
    {
      switch(v130)
      {
        case 1u:
          uint64_t v23 = 1;
          if (!v130) {
            goto LABEL_55;
          }
          break;
        case 2u:
          uint64_t v23 = v125;
          if (!v130) {
            goto LABEL_55;
          }
          break;
        case 3u:
          uint64_t v23 = v126 * (uint64_t)v125;
          if (!v130) {
            goto LABEL_55;
          }
          break;
        case 4u:
          uint64_t v23 = v126 * (uint64_t)v125 * v127;
          if (!v130) {
            goto LABEL_55;
          }
          break;
        case 5u:
          uint64_t v23 = v126 * (uint64_t)v125 * v127 * v128;
          if (!v130) {
            goto LABEL_55;
          }
          break;
        default:
          uint64_t v23 = 0;
          if (!v130) {
            goto LABEL_55;
          }
          break;
      }
      uint64_t v24 = *(&v125 + (int)v130 - 1);
    }
    else if (v130 == 5)
    {
      uint64_t v23 = v126 * (uint64_t)v125;
      uint64_t v24 = v128 * (uint64_t)v129 * v127;
    }
    else if (v130 == 4)
    {
      uint64_t v23 = v125;
      uint64_t v24 = v127 * (uint64_t)v128 * v126;
    }
    else
    {
      uint64_t v23 = 0;
LABEL_55:
      uint64_t v24 = 0;
    }
    if (!v141) {
      Espresso::throw_exception_selector<Espresso::invalid_state_error>("Invalid rank");
    }
    if (v21 != v23) {
      Espresso::throw_exception_selector<Espresso::invalid_state_error,unsigned long &,unsigned long>("Mismatching batch size: %zu / %zu", v21, v23);
    }
    if (v144 | v142)
    {
      uint64_t v25 = 0;
      *((void *)&v106 + 1) = 0;
      uint64_t v26 = 0;
      double v27 = 0.0;
      long long v108 = 0u;
LABEL_81:
      uint64_t v32 = *(void *)(a1 + 952);
      if (v32)
      {
        uint64_t v33 = v144;
        if (v144 && v142)
        {
          uint64_t v34 = *(void *)(v142 + 24);
          *(void *)(v32 + 232) = 0;
          uint64_t v35 = v32 + 232;
          uint64_t v37 = *(void *)(v35 - 16);
          uint64_t v36 = *(void *)(v35 - 8);
          uint64_t v38 = *(void *)(v35 - 24);
          *(void *)(v35 + 8) = v37;
          *(void *)(v35 + 16) = v36;
          *(_OWORD *)(v35 + 24) = 0u;
          *(_OWORD *)(v35 + 40) = 0u;
          *(_OWORD *)(v35 + 56) = 0u;
          *(void *)(v35 + 72) = 1;
          *(void *)(v35 + 80) = v37;
          *(_OWORD *)(v35 + 120) = 0u;
          *(_OWORD *)(v35 + 104) = 0u;
          *(_OWORD *)(v35 + 88) = 0u;
          *(void *)(v35 + 136) = v34;
          *(_DWORD *)(v35 + 144) = 65568;
          *(void *)(v35 + 148) = 0;
          *(_OWORD *)(v35 + 156) = 0u;
          *(_DWORD *)(v35 + 172) = 0;
          uint64_t v39 = *(void *)(v33 + 24);
          *(void *)(v35 + 352) = 0;
          *(void *)(v35 + 360) = v38;
          *(void *)(v35 + 368) = v36;
          *(_OWORD *)(v35 + 408) = 0u;
          *(_OWORD *)(v35 + 392) = 0u;
          *(_OWORD *)(v35 + 376) = 0u;
          *(void *)(v35 + 424) = 1;
          *(void *)(v35 + 432) = v38;
          *(_OWORD *)(v35 + 472) = 0u;
          *(_OWORD *)(v35 + 456) = 0u;
          *(_OWORD *)(v35 + 440) = 0u;
          *(void *)(v35 + 488) = v39;
          *(_DWORD *)(v35 + 496) = 65568;
          *(_DWORD *)(v35 + 524) = 0;
          *(void *)(v35 + 516) = 0;
          *(_OWORD *)(v35 + 500) = 0u;
          int v40 = BNNSDirectApplyFullyConnectedBatch();
        }
        else
        {
          if (!v26 || !v25)
          {
            exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(exception, "Unexpected top and bottom for bnns_auto_sparse_helper.");
            __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          if (!(void)v108)
          {
            long long v100 = "bnns_auto_sparse_helper: only fp16 i/o is supported";
            goto LABEL_229;
          }
          uint64_t v46 = *(void *)(v25 + 24);
          *(void *)(v32 + 232) = 0;
          uint64_t v47 = v32 + 232;
          uint64_t v49 = *(void *)(v47 - 16);
          uint64_t v48 = *(void *)(v47 - 8);
          uint64_t v50 = *(void *)(v47 - 24);
          *(void *)(v47 + 8) = v49;
          *(void *)(v47 + 16) = v48;
          *(_OWORD *)(v47 + 24) = 0u;
          *(_OWORD *)(v47 + 40) = 0u;
          *(_OWORD *)(v47 + 56) = 0u;
          *(void *)(v47 + 72) = 1;
          *(void *)(v47 + 80) = v49;
          *(_OWORD *)(v47 + 120) = 0u;
          *(_OWORD *)(v47 + 104) = 0u;
          *(_OWORD *)(v47 + 88) = 0u;
          *(void *)(v47 + 136) = v46;
          *(_DWORD *)(v47 + 144) = 65552;
          *(void *)(v47 + 148) = 0;
          *(_OWORD *)(v47 + 156) = 0u;
          *(_DWORD *)(v47 + 172) = 0;
          uint64_t v51 = *(void *)(v108 + 24);
          *(void *)(v47 + 352) = 0;
          *(void *)(v47 + 360) = v50;
          *(void *)(v47 + 368) = v48;
          *(_OWORD *)(v47 + 408) = 0u;
          *(_OWORD *)(v47 + 392) = 0u;
          *(_OWORD *)(v47 + 376) = 0u;
          *(void *)(v47 + 424) = 1;
          *(void *)(v47 + 432) = v50;
          *(_OWORD *)(v47 + 472) = 0u;
          *(_OWORD *)(v47 + 456) = 0u;
          *(_OWORD *)(v47 + 440) = 0u;
          *(void *)(v47 + 488) = v51;
          *(_DWORD *)(v47 + 496) = 65552;
          *(_DWORD *)(v47 + 524) = 0;
          *(void *)(v47 + 516) = 0;
          *(_OWORD *)(v47 + 500) = 0u;
          int v40 = BNNSDirectApplyFullyConnectedBatch();
        }
        if (!v40)
        {
LABEL_97:
          std::string::size_type v52 = (std::__shared_weak_count *)*((void *)&v106 + 1);
LABEL_108:
          if (v52) {
            nitro::nitro_function::nitro_function(v52);
          }
          if (*((void *)&v108 + 1)) {
            nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v108 + 1));
          }
          goto LABEL_112;
        }
        long long v100 = "bnns_auto_sparse_helper: BNNSDirectApplyFullyConnectedBatch failed";
LABEL_229:
        Espresso::throw_exception_selector<Espresso::invalid_state_error>(v100);
      }
      if (*(_DWORD *)(a1 + 412)
        && *(_DWORD *)(a1 + 416)
        && (Espresso::__launch_spmv_inner_product((void *)a1, (uint64_t)&v144, (uint64_t)&v142, v11 == 100, v15, v16, v17, v18, v106, v108, v109[0], v109[1], v110, v111, v112, v113, v114, v115, v116,
              v117) & 1) != 0)
      {
        int v43 = 0;
LABEL_91:
        BOOL v44 = 0;
        int v45 = 1;
        goto LABEL_192;
      }
      int v53 = *(_DWORD *)(a1 + 340);
      if (v53 == 5)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t **, uint64_t **, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 592))(a1, a2, a3, a4, v21, v24, v22);
        goto LABEL_97;
      }
      if (v53) {
        goto LABEL_120;
      }
      uint64_t v73 = *(void *)(a1 + 440);
      if (!v73 || !*(void *)v73) {
        goto LABEL_120;
      }
      uint64_t v74 = *(void *)(v73 + 32);
      BOOL v75 = v74 || *(void *)(v73 + 48) || *(void *)(v73 + 64) || *(void *)(v73 + 80) != 0;
      int v43 = 0;
      if (!v75 || *(_DWORD *)(*(void *)(a1 + 8) + 76)) {
        goto LABEL_121;
      }
      if (*(void *)(a1 + 560) || *(void *)(a1 + 688) || *(void *)(a1 + 912) || *(_DWORD *)(v73 + 156) != 8)
      {
LABEL_120:
        int v43 = 0;
      }
      else
      {
        uint64_t v76 = v24;
        uint64_t v77 = v22;
        if (!v74
          && !*(void *)(v73 + 48)
          && !*(void *)(v73 + 64)
          && *(void *)(v73 + 80)
          && !*(_DWORD *)(a1 + 336)
          && v11 == 100)
        {
          std::string::basic_string[abi:ne180100]<0>(&__p, "experimental_sgemv_float_xint8");
          long long v88 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>((void *)(a1 + 240), (unsigned __int8 *)&__p);
          if (v88) {
            int v89 = *((_DWORD *)v88 + 10);
          }
          else {
            int v89 = 0;
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (v89)
          {
            std::string::basic_string[abi:ne180100]<0>(&__p, "experimental_sgemv_use_int8_int16");
            long long v90 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>((void *)(a1 + 240), (unsigned __int8 *)&__p);
            if (v90) {
              int v91 = *((_DWORD *)v90 + 10);
            }
            else {
              int v91 = 0;
            }
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            int v55 = *(_DWORD *)(a1 + 404);
            if (!v55)
            {
              uint64_t v92 = *(void *)(a1 + 440);
              long long v93 = *(Espresso **)(*(void *)v92 + 16);
              unint64_t v94 = *(const signed __int8 **)(*(void *)(v92 + 80) + 16);
              std::string::size_type v95 = *(const float **)(*(void *)(v92 + 96) + 16);
              unint64_t v96 = *(const float **)(v142 + 24);
              long long v97 = *(const float **)(v144 + 24);
              unint64_t v98 = *(unsigned int *)(a1 + 304);
              long long v99 = (const inner_product_uniforms *)*(unsigned int *)(a1 + 308);
              if (*(unsigned char *)(v92 + 164)) {
                Espresso::kaldi_like_sgemv_float_int8(v93, v94, v95, v96, v97, (float *)v21, v98, v99, v91 != 0);
              }
              Espresso::kaldi_like_sgemv_float_uint8(v93, (const unsigned __int8 *)v94, v95, v96, v97, (float *)v21, v98, v99, v91 != 0);
            }
            int v107 = 0;
            uint64_t v22 = v77;
            uint64_t v24 = v76;
            goto LABEL_123;
          }
        }
        Espresso::blob<unsigned short,2>::make_uninitialized(&__p, *(_DWORD *)(a1 + 308), *(_DWORD *)(a1 + 304));
        std::string::size_type size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
        std::string::size_type v79 = __p.__r_.__value_.__r.__words[0];
        *(void *)(a1 + 688) = __p.__r_.__value_.__r.__words[0];
        long long v80 = *(std::__shared_weak_count **)(a1 + 696);
        *(void *)(a1 + 696) = size;
        if (v80)
        {
          nitro::nitro_function::nitro_function(v80);
          std::string::size_type size = *(std::__shared_weak_count **)(a1 + 696);
          std::string::size_type v79 = *(void *)(a1 + 688);
        }
        uint64_t v81 = *(void *)(a1 + 440);
        v122[2] = v79;
        std::string v123 = size;
        if (size) {
          atomic_fetch_add_explicit(&size->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        Espresso::quantized_weights_helper::dequantize_to_float16_2d(v81);
        if (v123) {
          nitro::nitro_function::nitro_function(v123);
        }
        uint64_t v22 = v77;
        uint64_t v24 = v76;
        int v43 = 1;
      }
LABEL_121:
      int v55 = *(_DWORD *)(a1 + 404);
      if (!v55)
      {
        int v82 = *(_DWORD *)(a1 + 340);
        if (v82)
        {
          std::string::size_type v83 = *(void **)(a1 + 440);
          if (!v83 || !*v83 || !v83[4] && !v83[6] && !v83[8] && !v83[10])
          {
            switch(v82)
            {
              case 1:
                int v85 = (void (**)(uint64_t, uint64_t, uint64_t *, uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 536);
                goto LABEL_188;
              case 2:
                uint64_t v84 = (void (**)(uint64_t, uint64_t, uint64_t *, uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 528);
                goto LABEL_190;
              case 3:
                int v85 = (void (**)(uint64_t, uint64_t, uint64_t *, uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 584);
                goto LABEL_188;
              case 4:
                int v85 = (void (**)(uint64_t, uint64_t, uint64_t *, uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 600);
LABEL_188:
                (*v85)(a1, a2, &v144, &v142, v21, v24, v22);
                break;
              default:
                long long v103 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::to_string((std::string *)((char *)v109 + 8), *(_DWORD *)(a1 + 340));
                long long v104 = std::string::insert((std::string *)((char *)v109 + 8), 0, "Quantization not supported ");
                long long v105 = *(_OWORD *)&v104->__r_.__value_.__l.__data_;
                __p.__r_.__value_.__r.__words[2] = v104->__r_.__value_.__r.__words[2];
                *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v105;
                v104->__r_.__value_.__l.__size_ = 0;
                v104->__r_.__value_.__r.__words[2] = 0;
                v104->__r_.__value_.__r.__words[0] = 0;
                std::runtime_error::runtime_error(v103, &__p);
                __cxa_throw(v103, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
            }
            goto LABEL_91;
          }
        }
        if (*(_DWORD *)(a1 + 336))
        {
          if (v142 && v144 && (*(void *)(a1 + 688) || *(void *)(a1 + 704) || *(void *)(a1 + 528)))
          {
            uint64_t v84 = (void (**)(uint64_t, uint64_t, uint64_t *, uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 544);
LABEL_190:
            (*v84)(a1, a2, &v144, &v142, v21, v24, v22);
            goto LABEL_191;
          }
          BOOL v44 = Espresso::BNNSEngine::inner_product_kernel::__bloat_quantized_weights_to_fp32((Espresso::BNNSEngine::inner_product_kernel *)a1, v27, v19, v20);
          (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 576))(a1, a2, &v144, &v142, v21, v24, v22);
        }
        else
        {
          BOOL v44 = Espresso::BNNSEngine::inner_product_kernel::__bloat_quantized_weights_to_fp32((Espresso::BNNSEngine::inner_product_kernel *)a1, v27, v19, v20);
          uint64_t v113 = 0;
          uint64_t v114 = 0;
          uint64_t v115 = 0;
          std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__init_with_size[abi:ne180100]<std::shared_ptr<Espresso::abstract_blob_container>*,std::shared_ptr<Espresso::abstract_blob_container>*>(&v113, *a3, a3[1], ((char *)a3[1] - (char *)*a3) >> 4);
          uint64_t v110 = 0;
          uint64_t v111 = 0;
          uint64_t v112 = 0;
          std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__init_with_size[abi:ne180100]<std::shared_ptr<Espresso::abstract_blob_container>*,std::shared_ptr<Espresso::abstract_blob_container>*>(&v110, *a4, a4[1], ((char *)a4[1] - (char *)*a4) >> 4);
          (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 616))(a1, a2, &v113, &v110, v21, v24, v22);
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v110;
          std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v113;
          std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
        }
        int v45 = 0;
        goto LABEL_192;
      }
      int v107 = v43;
LABEL_123:
      uint64_t v56 = v24;
      uint64_t v57 = *(void **)(a1 + 928);
      int v58 = *(_DWORD *)(a1 + 408);
      int v59 = *(std::__shared_weak_count **)(a1 + 568);
      v122[0] = *(void *)(a1 + 560);
      v122[1] = v59;
      if (v59) {
        atomic_fetch_add_explicit(&v59->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v60 = v22;
      uint64_t v61 = *(std::__shared_weak_count **)(a1 + 584);
      if (v61) {
        atomic_fetch_add_explicit(&v61->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v62 = *(std::__shared_weak_count **)(a1 + 552);
      v121[0] = *(void *)(a1 + 544);
      v121[1] = v62;
      if (v62) {
        atomic_fetch_add_explicit(&v62->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      Espresso::argmax_tree_approximator::__launch(v57, v55, v58, (uint64_t)v122, (uint64_t)v121, (uint64_t)&v144, (uint64_t)&v142);
      if (v62) {
        nitro::nitro_function::nitro_function(v62);
      }
      if (v61) {
        nitro::nitro_function::nitro_function(v61);
      }
      uint64_t v22 = v60;
      if (v59) {
        nitro::nitro_function::nitro_function(v59);
      }
      long long v63 = *(_OWORD *)(a1 + 416);
      v119[6] = *(_OWORD *)(a1 + 400);
      v119[7] = v63;
      int v120 = *(_DWORD *)(a1 + 432);
      long long v64 = *(_OWORD *)(a1 + 352);
      v119[2] = *(_OWORD *)(a1 + 336);
      v119[3] = v64;
      long long v65 = *(_OWORD *)(a1 + 384);
      v119[4] = *(_OWORD *)(a1 + 368);
      v119[5] = v65;
      long long v66 = *(_OWORD *)(a1 + 320);
      v119[0] = *(_OWORD *)(a1 + 304);
      v119[1] = v66;
      uint64_t v67 = v144;
      long long v68 = v145;
      v118[0] = v144;
      v118[1] = (uint64_t)v145;
      uint64_t v24 = v56;
      if (v145) {
        atomic_fetch_add_explicit(&v145->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v69 = 0;
      int v70 = *(_DWORD *)(v67 + 8);
      uint64_t v71 = v67 + 12;
      int v43 = v107;
      do
      {
        v70 *= *(_DWORD *)(v71 + v69);
        v69 += 4;
      }
      while (v69 != 12);
      uint64_t v72 = *(void *)(a1 + 552);
      uint64_t v116 = *(void *)(a1 + 544);
      std::string v117 = (long long *)v72;
      if (v72) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v72 + 8), 1uLL, memory_order_relaxed);
      }
      Espresso::inner_product_kernel_cpu::fused_nonlinearity((uint64_t)v119, v118, v70, (uint64_t)&v116, v24, v21);
      if (v72) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v72);
      }
      if (v68) {
        nitro::nitro_function::nitro_function(v68);
      }
LABEL_191:
      int v45 = 0;
      BOOL v44 = 0;
LABEL_192:
      if ((v43 & 1) != 0 || v44)
      {
        if (v44)
        {
          uint64_t v86 = *(std::__shared_weak_count **)(a1 + 568);
          *(_OWORD *)(a1 + 560) = 0u;
          if (v86) {
            nitro::nitro_function::nitro_function(v86);
          }
        }
        if (v43)
        {
          long long v87 = *(std::__shared_weak_count **)(a1 + 696);
          *(_OWORD *)(a1 + 688) = 0u;
          if (v87) {
            nitro::nitro_function::nitro_function(v87);
          }
        }
        BNNSFilterDestroy(*(void **)(a1 + 912));
        *(void *)(a1 + 912) = 0;
      }
      if (v45) {
        (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t **))(*(void *)a1 + 608))(a1, a2, &v144, &v142, v21, v24, v22, a4);
      }
      goto LABEL_97;
    }
    int v28 = Espresso::layer_data::get_blob<Espresso::blob_cpu>((uint64_t)*a3, (uint64_t)a3[1], 0);
    if (v28)
    {
      long long v29 = v28[11];
      long long v108 = v29;
      if (*((void *)&v29 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v29 + 1) + 8), 1uLL, memory_order_relaxed);
      }
    }
    else
    {
      long long v108 = 0u;
    }
    BOOL v30 = Espresso::layer_data::get_blob<Espresso::blob_cpu>((uint64_t)*a4, (uint64_t)a4[1], 0);
    if (v30)
    {
      uint64_t v25 = v30[22];
      uint64_t v31 = v30[23];
      if (v31)
      {
        *((void *)&v106 + 1) = v30[23];
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v31 + 8), 1uLL, memory_order_relaxed);
      }
      else
      {
        *((void *)&v106 + 1) = 0;
      }
      double v27 = *(double *)&v108;
      uint64_t v26 = v108;
      if ((void)v108 && v25) {
        goto LABEL_81;
      }
    }
    else
    {
      *((void *)&v106 + 1) = 0;
    }
    if (a3[1] == *a3)
    {
      uint64_t v42 = 0;
      std::string::size_type v41 = 0;
    }
    else
    {
      Espresso::inline_get_cpu_blob<Espresso::blob<int,4>,false>(&__p, *a3);
      uint64_t v42 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
      std::string::size_type v41 = __p.__r_.__value_.__r.__words[0];
    }
    if (a4[1] == *a4
      || (Espresso::inline_get_cpu_blob<Espresso::blob<unsigned char,4>,false>(&__p, *a4),
          size_t v54 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_,
          !v41)
      || !__p.__r_.__value_.__r.__words[0])
    {
      std::string::size_type v101 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v101, "Unexpected null blobs");
      __cxa_throw(v101, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t **, uint64_t **, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 592))(a1, a2, a3, a4, v21, v24, v22);
    if (v42) {
      nitro::nitro_function::nitro_function(v42);
    }
    std::string::size_type v52 = (std::__shared_weak_count *)*((void *)&v106 + 1);
    if (v54) {
      nitro::nitro_function::nitro_function(v54);
    }
    goto LABEL_108;
  }
LABEL_112:
  if (v134)
  {
    uint64_t v135 = v134;
    operator delete(v134);
  }
  if (v143) {
    nitro::nitro_function::nitro_function(v143);
  }
  if (v145) {
    nitro::nitro_function::nitro_function(v145);
  }
}

void sub_192127B7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, long long a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *__p,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  if (a58 < 0) {
    operator delete(__p);
  }
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (*((void *)&a11 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&a11 + 1));
  }
  uint64_t v60 = *(void **)(v58 - 176);
  if (v60)
  {
    *(void *)(v58 - 168) = v60;
    operator delete(v60);
  }
  uint64_t v61 = *(std::__shared_weak_count **)(v58 - 120);
  if (v61) {
    nitro::nitro_function::nitro_function(v61);
  }
  long long v62 = *(std::__shared_weak_count **)(v58 - 104);
  if (v62) {
    nitro::nitro_function::nitro_function(v62);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::elementwise_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(void *)(a3 + 8) == *(void *)a3)
  {
    uint64_t v330 = 0;
    v331 = 0;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v330, *(uint64_t **)a3);
  }
  if (*(void *)(a4 + 8) == *(void *)a4)
  {
    long long v329 = 0uLL;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v329, *(uint64_t **)a4);
    uint64_t v7 = v329;
    if ((void)v329)
    {
      int v8 = (std::__shared_weak_count *)*((void *)&v329 + 1);
      goto LABEL_10;
    }
  }
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v324, 1, 1, 1, 1);
  int v9 = (std::__shared_weak_count *)*((void *)&v329 + 1);
  long long v329 = v324;
  int v8 = (std::__shared_weak_count *)*((void *)&v324 + 1);
  uint64_t v7 = v324;
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
LABEL_10:
  if (v8)
  {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    BOOL v10 = v8;
  }
  else
  {
    BOOL v10 = 0;
  }
  Espresso::abstract_blob_container::shape((char *)&v324, **(void **)a4);
  long long v319 = v324;
  long long v320 = v325;
  uint64_t v321 = v326;
  long long v322 = 0uLL;
  uint64_t v323 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v322, (const void *)v327, *((uint64_t *)&v327 + 1), (uint64_t)(*((void *)&v327 + 1) - v327) >> 2);
  long long v314 = v324;
  long long v315 = v325;
  uint64_t v316 = v326;
  long long v317 = 0uLL;
  uint64_t v318 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v317, (const void *)v327, *((uint64_t *)&v327 + 1), (uint64_t)(*((void *)&v327 + 1) - v327) >> 2);
  int v11 = v8;
  uint64_t v12 = v7;
  if (*(void *)(a4 + 8) - *(void *)a4 >= 0x11uLL)
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&__C, (uint64_t *)(*(void *)a4 + 16));
    int v11 = (std::__shared_weak_count *)*((void *)&__C + 1);
    uint64_t v12 = __C;
    if (v8) {
      nitro::nitro_function::nitro_function(v8);
    }
    Espresso::abstract_blob_container::shape((char *)&__C, *(void *)(*(void *)a4 + 16));
    long long v319 = __C;
    long long v320 = v310;
    uint64_t v321 = v311;
    if ((void)v322)
    {
      *((void *)&v322 + 1) = v322;
      operator delete((void *)v322);
    }
    long long v322 = v312;
    uint64_t v323 = v313;
    if (!v12)
    {
      std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&__C, 1, 1, 1, 1);
      char v13 = (std::__shared_weak_count *)*((void *)&__C + 1);
      uint64_t v12 = __C;
      if (v11) {
        nitro::nitro_function::nitro_function(v11);
      }
      int v11 = v13;
    }
  }
  if (*(void *)(a4 + 8) - *(void *)a4 >= 0x21uLL)
  {
    unint64_t v284 = v10;
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&__C, (uint64_t *)(*(void *)a4 + 32));
    BOOL v10 = (std::__shared_weak_count *)*((void *)&__C + 1);
    uint64_t v7 = __C;
    long long __C = 0uLL;
    if (v8)
    {
      nitro::nitro_function::nitro_function(v284);
      if (*((void *)&__C + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&__C + 1));
      }
    }
    Espresso::abstract_blob_container::shape((char *)&__C, *(void *)(*(void *)a4 + 32));
    long long v314 = __C;
    long long v315 = v310;
    uint64_t v316 = v311;
    if ((void)v317)
    {
      *((void *)&v317 + 1) = v317;
      operator delete((void *)v317);
    }
    long long v317 = v312;
    uint64_t v318 = v313;
    if (!v7)
    {
      uint64_t v14 = a1;
      std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&__C, 1, 1, 1, 1);
      uint64_t v15 = (std::__shared_weak_count *)*((void *)&__C + 1);
      uint64_t v7 = __C;
      if (v10) {
        nitro::nitro_function::nitro_function(v10);
      }
      BOOL v10 = v15;
      a1 = v14;
    }
  }
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v307, (const Espresso::layer_shape *)&v324, 0);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&__N_4, (const Espresso::layer_shape *)&v319, 0);
  uint64_t v17 = *(void *)(a4 + 8) - *(void *)a4;
  if (v17 != 32) {
    goto LABEL_44;
  }
  if (v308 < 4) {
    goto LABEL_44;
  }
  if (v306 < 4) {
    goto LABEL_44;
  }
  if (*(unsigned char *)(a1 + 304)) {
    goto LABEL_44;
  }
  unsigned int v18 = *(_DWORD *)(a1 + 280);
  if (v18 > 0x22) {
    goto LABEL_44;
  }
  if (((1 << v18) & 0x5E00003FFLL) == 0) {
    goto LABEL_44;
  }
  uint64_t v19 = v329;
  unint64_t v20 = *(int *)(v329 + 8);
  for (uint64_t i = 12; i != 24; i += 4)
    v20 *= *(int *)(v329 + i);
  unint64_t v22 = *(int *)(v12 + 8);
  for (uint64_t j = 12; j != 24; j += 4)
    v22 *= *(int *)(v12 + j);
  if (v20 < v22)
  {
    uint64_t v24 = (std::__shared_weak_count *)*((void *)&v329 + 1);
    *(void *)&long long v329 = v12;
    *((void *)&v329 + 1) = v11;
    long long __C = v324;
    long long v25 = v324;
    long long v310 = v325;
    uint64_t v311 = v326;
    uint64_t v26 = v326;
    uint64_t v27 = v328;
    long long v324 = v319;
    long long v325 = v320;
    uint64_t v326 = v321;
    uint64_t v328 = v323;
    uint64_t v321 = v26;
    long long v319 = v25;
    long long v320 = v310;
    long long v28 = v327;
    long long v327 = v322;
    long long v322 = v28;
    int v11 = v24;
    uint64_t v323 = v27;
  }
  else
  {
LABEL_44:
    uint64_t v19 = v12;
  }
  if (v330)
  {
    uint64_t v29 = 0;
    int __N = 0;
    int v30 = *(_DWORD *)(v330 + 8);
    do
    {
      v30 *= *(_DWORD *)(v330 + 12 + v29);
      v29 += 4;
    }
    while (v29 != 12);
    int __N = v30;
    uint64_t v31 = v329;
    int v286 = *(_DWORD *)(v329 + 12);
    int v293 = *(_DWORD *)(v329 + 8);
    uint64_t v32 = *(unsigned int *)(v329 + 20);
    uint64_t v295 = a1;
    uint64_t v296 = *(unsigned int *)(v329 + 16);
    uint64_t v33 = *(unsigned int *)(a1 + 280);
    if (v17 == 16)
    {
      switch((int)v33)
      {
        case 'd':
          LODWORD(v33) = 136;
          break;
        case 'e':
        case 'f':
          break;
        case 'g':
          LODWORD(v33) = 131;
          break;
        case 'h':
          LODWORD(v33) = 132;
          break;
        case 'i':
          LODWORD(v33) = 133;
          break;
        case 'j':
          LODWORD(v33) = 134;
          break;
        case 'k':
          LODWORD(v33) = 135;
          break;
        default:
          if (v33) {
            int v38 = *(_DWORD *)(a1 + 280);
          }
          else {
            int v38 = 2;
          }
          if (v33 == 1) {
            LODWORD(v33) = 3;
          }
          else {
            LODWORD(v33) = v38;
          }
          break;
      }
LABEL_170:
      uint64_t v56 = v330;
      uint64_t v300 = a1;
      uint64_t v301 = v330;
      uint64_t v302 = v331;
      if (v331) {
        atomic_fetch_add_explicit(&v331->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v57 = __N;
      vDSP_Length v58 = __N;
      int v303 = __N;
      uint64_t v298 = v56;
      vDSP_Length v59 = v286 * (uint64_t)v293;
      int v60 = v59 * v296;
      v294 = v11;
      switch((int)v33)
      {
        case 0:
          if (*(void *)(a4 + 8) - *(void *)a4 < 0x11uLL)
          {
            uint64_t v259 = 0;
            uint64_t v260 = *(int *)(v31 + 8);
            do
            {
              v260 *= *(int *)(v31 + 12 + v259);
              v259 += 4;
            }
            while (v259 != 12);
            memcpy(*(void **)(v56 + 24), *(const void **)(v31 + 24), 4 * v260);
          }
          else
          {
            vDSP_vadd(*(const float **)(v31 + 24), 1, *(const float **)(v19 + 24), 1, *(float **)(v56 + 24), 1, __N);
          }
          int v261 = *(uint64_t **)a4;
          if (*(void *)(a4 + 8) - *(void *)a4 >= 0x21uLL)
          {
            unint64_t v262 = 2;
            uint64_t v263 = 4;
            do
            {
              long long v264 = *(const float **)(v298 + 24);
              Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&__C, &v261[v263]);
              vDSP_vadd(v264, 1, *(const float **)(__C + 24), 1, *(float **)(v298 + 24), 1, __N);
              if (*((void *)&__C + 1)) {
                nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&__C + 1));
              }
              ++v262;
              int v261 = *(uint64_t **)a4;
              v263 += 2;
            }
            while (v262 < (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 4);
          }
          if (*(float *)(v295 + 288) != 1.0) {
            goto LABEL_347;
          }
          goto LABEL_489;
        case 1:
          vDSP_vmul(*(const float **)(v31 + 24), 1, *(const float **)(v19 + 24), 1, *(float **)(v56 + 24), 1, __N);
          if (*(float *)(v295 + 288) != 1.0) {
LABEL_347:
          }
            vDSP_vsmul(*(const float **)(v298 + 24), 1, (const float *)(v295 + 288), *(float **)(v298 + 24), 1, __N);
          goto LABEL_489;
        case 2:
          uint64_t v196 = *(const float **)(v31 + 24);
          uint64_t v197 = (const float *)(v295 + 288);
          uint64_t v198 = *(float **)(v56 + 24);
          goto LABEL_491;
        case 3:
          vDSP_vsmul(*(const float **)(v31 + 24), 1, (const float *)(v295 + 288), *(float **)(v56 + 24), 1, __N);
          break;
        case 4:
          v285 = v10;
          uint64_t v291 = v31;
          vDSP_Length v279 = __N;
          uint64_t v282 = v32;
          if ((int)v32 >= 1)
          {
            uint64_t v186 = 0;
            uint64_t v187 = 0;
            int v188 = v59;
            vDSP_Length v189 = (int)v59;
            uint64_t v190 = 4 * v60;
            uint64_t v191 = 4 * v188;
            do
            {
              if ((int)v296 >= 1)
              {
                uint64_t v192 = *(void *)(v291 + 24);
                uint64_t v193 = v296;
                uint64_t v194 = *(void *)(v298 + 24);
                uint64_t v195 = v186;
                do
                {
                  vDSP_vadd((const float *)(v192 + v195), 1, *(const float **)(v19 + 24), 1, (float *)(v194 + v195), 1, v189);
                  v195 += v191;
                  --v193;
                }
                while (v193);
              }
              ++v187;
              v186 += v190;
              int v11 = v294;
            }
            while (v187 != v282);
          }
          goto LABEL_487;
        case 5:
          v285 = v10;
          uint64_t v290 = v31;
          vDSP_Length v279 = __N;
          uint64_t v281 = v32;
          if ((int)v32 >= 1)
          {
            uint64_t v180 = 0;
            uint64_t v181 = 0;
            uint64_t v277 = 4 * v60;
            do
            {
              if ((int)v296 >= 1)
              {
                uint64_t v182 = 0;
                uint64_t v183 = *(void *)(v290 + 24);
                uint64_t v184 = *(void *)(v298 + 24);
                uint64_t v185 = v180;
                do
                {
                  LODWORD(__C) = 0;
                  LODWORD(__C) = *(_DWORD *)(*(void *)(v19 + 24) + v182);
                  vDSP_vsadd((const float *)(v183 + v185), 1, (const float *)&__C, (float *)(v184 + v185), 1, (int)v59);
                  v182 += 4;
                  v185 += 4 * (int)v59;
                }
                while (4 * v296 != v182);
              }
              ++v181;
              v180 += v277;
              int v11 = v294;
            }
            while (v181 != v281);
          }
          goto LABEL_487;
        case 6:
          vDSP_Length v279 = __N;
          v285 = v10;
          if ((int)v32 >= 1)
          {
            uint64_t v152 = v31;
            uint64_t v153 = v32;
            uint64_t v154 = 0;
            vDSP_Length v155 = v60;
            uint64_t v156 = 4 * v60;
            do
            {
              vDSP_vadd((const float *)(*(void *)(v152 + 24) + v154), 1, *(const float **)(v19 + 24), 1, (float *)(*(void *)(v298 + 24) + v154), 1, v155);
              v154 += v156;
              --v153;
            }
            while (v153);
          }
          goto LABEL_487;
        case 7:
          v285 = v10;
          uint64_t v288 = v31;
          vDSP_Length v279 = __N;
          uint64_t v280 = v32;
          if ((int)v32 >= 1)
          {
            uint64_t v142 = 0;
            uint64_t v143 = 0;
            int v144 = v59;
            vDSP_Length v145 = (int)v59;
            uint64_t v146 = 4 * v60;
            uint64_t v147 = 4 * v144;
            do
            {
              if ((int)v296 >= 1)
              {
                uint64_t v148 = *(void *)(v288 + 24);
                uint64_t v149 = v296;
                uint64_t v150 = *(void *)(v298 + 24);
                uint64_t v151 = v142;
                do
                {
                  vDSP_vmul((const float *)(v148 + v151), 1, *(const float **)(v19 + 24), 1, (float *)(v150 + v151), 1, v145);
                  v151 += v147;
                  --v149;
                }
                while (v149);
              }
              ++v143;
              v142 += v146;
              int v11 = v294;
            }
            while (v143 != v280);
          }
          goto LABEL_487;
        case 8:
          v285 = v10;
          uint64_t v292 = v31;
          vDSP_Length v279 = __N;
          uint64_t v283 = v32;
          if ((int)v32 >= 1)
          {
            uint64_t v199 = 0;
            uint64_t v200 = 0;
            uint64_t v278 = 4 * v60;
            do
            {
              if ((int)v296 >= 1)
              {
                uint64_t v201 = 0;
                uint64_t v202 = *(void *)(v292 + 24);
                uint64_t v203 = *(void *)(v298 + 24);
                uint64_t v204 = v199;
                do
                {
                  LODWORD(__C) = 0;
                  LODWORD(__C) = *(_DWORD *)(*(void *)(v19 + 24) + v201);
                  vDSP_vsmul((const float *)(v202 + v204), 1, (const float *)&__C, (float *)(v203 + v204), 1, v59);
                  v201 += 4;
                  v204 += 4 * v59;
                }
                while (4 * v296 != v201);
              }
              ++v200;
              v199 += v278;
              int v11 = v294;
            }
            while (v200 != v283);
          }
          goto LABEL_487;
        case 9:
          vDSP_Length v279 = __N;
          v285 = v10;
          if ((int)v32 >= 1)
          {
            uint64_t v130 = v31;
            uint64_t v131 = v32;
            uint64_t v132 = 0;
            vDSP_Length v133 = v60;
            uint64_t v134 = 4 * v60;
            do
            {
              vDSP_vmul((const float *)(*(void *)(v130 + 24) + v132), 1, *(const float **)(v19 + 24), 1, (float *)(*(void *)(v298 + 24) + v132), 1, v133);
              v132 += v134;
              --v131;
            }
            while (v131);
          }
          goto LABEL_487;
        case 10:
          if (__N >= 1)
          {
            int v127 = *(float **)(v31 + 24);
            int v128 = *(float **)(v56 + 24);
            do
            {
              float v129 = *v127++;
              *v128++ = 1.0 / (float)(v129 + *(float *)(v295 + 296));
              --v57;
            }
            while (v57);
          }
          break;
        case 11:
          vvsqrtf(*(float **)(v56 + 24), *(const float **)(v31 + 24), &__N);
          break;
        case 12:
          vDSP_vsadd(*(const float **)(v31 + 24), 1, (const float *)(v295 + 296), *(float **)(v56 + 24), 1, __N);
          vvrsqrtf(*(float **)(v298 + 24), *(const float **)(v298 + 24), &__N);
          break;
        case 13:
          if (__N >= 1)
          {
            uint64_t v215 = *(float **)(v31 + 24);
            float v216 = *(float **)(v56 + 24);
            do
            {
              float v217 = *v215++;
              *v216++ = powf(v217, *(float *)(v295 + 288));
              --v57;
            }
            while (v57);
          }
          break;
        case 14:
        case 15:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 39:
        case 40:
        case 41:
        case 42:
        case 43:
        case 44:
        case 45:
        case 46:
        case 47:
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
        case 58:
        case 59:
        case 60:
        case 61:
        case 62:
        case 63:
        case 64:
        case 65:
        case 66:
        case 67:
        case 68:
        case 69:
        case 70:
        case 71:
        case 72:
        case 73:
        case 74:
        case 75:
        case 76:
        case 77:
        case 78:
        case 79:
        case 80:
        case 81:
        case 82:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 93:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
        case 108:
        case 109:
        case 120:
          break;
        case 21:
          vDSP_Length v279 = __N;
          v285 = v10;
          if ((int)v32 >= 1)
          {
            uint64_t v157 = v31;
            uint64_t v158 = v32;
            uint64_t v159 = 0;
            uint64_t v160 = 0;
            vDSP_Length v161 = v60;
            uint64_t v297 = 4 * v158;
            uint64_t v289 = 4 * v60;
            do
            {
              std::string::size_type v162 = (const float *)(*(void *)(v157 + 24) + v159);
              uint64_t v163 = *(void *)(v19 + 24);
              uint64_t v164 = *(void *)(v298 + 24);
              LODWORD(__C) = 0;
              float v299 = 0.0;
              vDSP_dotpr(v162, 1, v162, 1, (float *)&__C, v161);
              vDSP_dotpr((const float *)(v163 + v159), 1, (const float *)(v163 + v159), 1, &v299, v161);
              float v165 = *(float *)&__C;
              float v166 = v299;
              float v167 = *(float *)(v295 + 296);
              vDSP_dotpr(v162, 1, (const float *)(v163 + v159), 1, (float *)(v164 + v160), v161);
              float v168 = sqrtf(v165 * v166);
              if (v168 < v167) {
                float v168 = v167;
              }
              *(float *)(v164 + v160) = *(float *)(v164 + v160) / v168;
              v160 += 4;
              int v11 = v294;
              v159 += v289;
            }
            while (v297 != v160);
          }
          goto LABEL_487;
        case 22:
          if (*(void *)(a4 + 8) - *(void *)a4 < 0x11uLL)
          {
            uint64_t v271 = 0;
            uint64_t v272 = *(int *)(v31 + 8);
            do
            {
              v272 *= *(int *)(v31 + 12 + v271);
              v271 += 4;
            }
            while (v271 != 12);
            memcpy(*(void **)(v56 + 24), *(const void **)(v31 + 24), 4 * v272);
          }
          else
          {
            vDSP_vmin(*(const float **)(v31 + 24), 1, *(const float **)(v19 + 24), 1, *(float **)(v56 + 24), 1, __N);
          }
          vDSP_Length v279 = __N;
          v285 = v10;
          uint64_t v273 = *(uint64_t **)a4;
          if (*(void *)(a4 + 8) - *(void *)a4 >= 0x21uLL)
          {
            unint64_t v274 = 2;
            uint64_t v275 = 4;
            do
            {
              unint64_t v276 = *(const float **)(v298 + 24);
              Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&__C, &v273[v275]);
              vDSP_vmin(v276, 1, *(const float **)(__C + 24), 1, *(float **)(v298 + 24), 1, __N);
              if (*((void *)&__C + 1)) {
                nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&__C + 1));
              }
              ++v274;
              uint64_t v273 = *(uint64_t **)a4;
              v275 += 2;
            }
            while (v274 < (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 4);
          }
          goto LABEL_487;
        case 23:
          if (*(void *)(a4 + 8) - *(void *)a4 < 0x11uLL)
          {
            uint64_t v265 = 0;
            uint64_t v266 = *(int *)(v31 + 8);
            do
            {
              v266 *= *(int *)(v31 + 12 + v265);
              v265 += 4;
            }
            while (v265 != 12);
            memcpy(*(void **)(v56 + 24), *(const void **)(v31 + 24), 4 * v266);
          }
          else
          {
            vDSP_vmax(*(const float **)(v31 + 24), 1, *(const float **)(v19 + 24), 1, *(float **)(v56 + 24), 1, __N);
          }
          vDSP_Length v279 = __N;
          v285 = v10;
          int v267 = *(uint64_t **)a4;
          if (*(void *)(a4 + 8) - *(void *)a4 >= 0x21uLL)
          {
            unint64_t v268 = 2;
            uint64_t v269 = 4;
            do
            {
              std::string v270 = *(const float **)(v298 + 24);
              Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&__C, &v267[v269]);
              vDSP_vmax(v270, 1, *(const float **)(__C + 24), 1, *(float **)(v298 + 24), 1, __N);
              if (*((void *)&__C + 1)) {
                nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&__C + 1));
              }
              ++v268;
              int v267 = *(uint64_t **)a4;
              v269 += 2;
            }
            while (v268 < (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 4);
          }
          goto LABEL_487;
        case 24:
          vDSP_vabs(*(const float **)(v31 + 24), 1, *(float **)(v56 + 24), 1, __N);
          break;
        case 25:
          vDSP_vthr(*(const float **)(v31 + 24), 1, (const float *)(v295 + 288), *(float **)(v56 + 24), 1, __N);
          break;
        case 26:
          vDSP_vsadd(*(const float **)(v31 + 24), 1, (const float *)(v295 + 296), *(float **)(v56 + 24), 1, __N);
          vvlogf(*(float **)(v298 + 24), *(const float **)(v298 + 24), &__N);
          break;
        case 27:
          if (*(void *)(a4 + 8) - *(void *)a4 != 16) {
            goto LABEL_517;
          }
          vvexpf(*(float **)(v56 + 24), *(const float **)(v31 + 24), &__N);
          break;
        case 28:
          vDSP_Length v279 = __N;
          v285 = v10;
          if ((int)v32 >= 1)
          {
            uint64_t v113 = v31;
            uint64_t v114 = v32;
            uint64_t v115 = 0;
            uint64_t v116 = 0;
            vDSP_Length v117 = v60;
            uint64_t v118 = 4 * v114;
            uint64_t v119 = 4 * v60;
            do
            {
              vDSP_dotpr((const float *)(*(void *)(v113 + 24) + v115), 1, (const float *)(*(void *)(v19 + 24) + v115), 1, (float *)(*(void *)(v298 + 24) + v116), v117);
              v116 += 4;
              v115 += v119;
            }
            while (v118 != v116);
          }
          goto LABEL_487;
        case 29:
          vDSP_Length v279 = __N;
          v285 = v10;
          if ((int)v32 >= 1)
          {
            uint64_t v101 = v31;
            uint64_t v102 = v32;
            uint64_t v103 = 0;
            uint64_t v104 = 0;
            vDSP_Length v105 = v60;
            uint64_t v106 = 4 * v102;
            uint64_t v107 = 4 * v60;
            do
            {
              vDSP_vsadd((const float *)(*(void *)(v101 + 24) + v103), 1, (const float *)(*(void *)(v19 + 24) + v104), (float *)(*(void *)(v298 + 24) + v103), 1, v105);
              v104 += 4;
              v103 += v107;
            }
            while (v106 != v104);
          }
          goto LABEL_487;
        case 30:
          vDSP_Length v279 = __N;
          v285 = v10;
          if ((int)v32 >= 1)
          {
            uint64_t v169 = v31;
            uint64_t v170 = v32;
            uint64_t v171 = 0;
            uint64_t v172 = 0;
            vDSP_Length v173 = v60;
            uint64_t v174 = 4 * v170;
            uint64_t v175 = 4 * v60;
            do
            {
              vDSP_vsmul((const float *)(*(void *)(v169 + 24) + v171), 1, (const float *)(*(void *)(v19 + 24) + v172), (float *)(*(void *)(v298 + 24) + v171), 1, v173);
              v172 += 4;
              v171 += v175;
            }
            while (v174 != v172);
          }
          goto LABEL_487;
        case 31:
          vDSP_Length v279 = __N;
          v285 = v10;
          if ((int)v32 >= 1)
          {
            uint64_t v86 = v31;
            uint64_t v87 = v32;
            uint64_t v88 = 0;
            vDSP_Length v89 = v60;
            uint64_t v90 = 4 * v60;
            do
            {
              vDSP_vsadd((const float *)(*(void *)(v86 + 24) + v88), 1, *(const float **)(v19 + 24), (float *)(*(void *)(v298 + 24) + v88), 1, v89);
              v88 += v90;
              --v87;
            }
            while (v87);
          }
          goto LABEL_487;
        case 32:
          vDSP_Length v279 = __N;
          v285 = v10;
          if ((int)v32 >= 1)
          {
            uint64_t v242 = v31;
            uint64_t v243 = v32;
            uint64_t v244 = 0;
            vDSP_Length v245 = v60;
            uint64_t v246 = 4 * v60;
            do
            {
              vDSP_vsmul((const float *)(*(void *)(v242 + 24) + v244), 1, *(const float **)(v19 + 24), (float *)(*(void *)(v298 + 24) + v244), 1, v245);
              v244 += v246;
              --v243;
            }
            while (v243);
          }
LABEL_487:
          BOOL v10 = v285;
          vDSP_Length v58 = v279;
          if (*(float *)(v295 + 288) != 1.0) {
            vDSP_vsmul(*(const float **)(v298 + 24), 1, (const float *)(v295 + 288), *(float **)(v298 + 24), 1, v279);
          }
LABEL_489:
          if (*(float *)(v295 + 292) != 0.0)
          {
            uint64_t v197 = (const float *)(v295 + 292);
            uint64_t v196 = *(const float **)(v298 + 24);
            uint64_t v198 = (float *)v196;
LABEL_491:
            vDSP_vsadd(v196, 1, v197, v198, 1, v58);
          }
          break;
        case 33:
          if (*(void *)(a4 + 8) - *(void *)a4 != 32) {
            goto LABEL_517;
          }
          vDSP_vsub(*(const float **)(v19 + 24), 1, *(const float **)(v31 + 24), 1, *(float **)(v56 + 24), 1, __N);
          break;
        case 34:
          long long v108 = v10;
          if ((int)v325 >= 1)
          {
            uint64_t v109 = v31;
            uint64_t v110 = 0;
            uint64_t v111 = 0;
            vDSP_Length v112 = SHIDWORD(v324) * (uint64_t)v60;
            do
            {
              vDSP_vadd((const float *)(*(void *)(v109 + 24) + v110), 1, *(const float **)(v19 + 24), 1, (float *)(*(void *)(v298 + 24) + v110), 1, v112);
              ++v111;
              v110 += 4 * v112;
            }
            while (v111 < (int)v325);
          }
          Espresso::elementwise_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_0::operator()(&v300);
          BOOL v10 = v108;
          break;
        case 35:
          if (*(void *)(a4 + 8) - *(void *)a4 != 16) {
            goto LABEL_517;
          }
          vvexp2f(*(float **)(v56 + 24), *(const float **)(v31 + 24), &__N);
          break;
        case 36:
          vvfmodf(*(float **)(v56 + 24), *(const float **)(v31 + 24), *(const float **)(v19 + 24), &__N);
          break;
        case 37:
          vvnintf(*(float **)(v56 + 24), *(const float **)(v31 + 24), &__N);
          break;
        case 38:
          if (*(void *)(a4 + 8) - *(void *)a4 != 16) {
            goto LABEL_517;
          }
          Espresso::compute_sign_fp32(*(float32x4_t **)(v56 + 24), *(float **)(v31 + 24), (float *)&__N, v16);
          break;
        case 100:
          if (*(void *)(a4 + 8) - *(void *)a4 != 32) {
            goto LABEL_517;
          }
          if (__N)
          {
            int v120 = *(float **)(v31 + 24);
            std::string v121 = *(float **)(v19 + 24);
            std::string v122 = *(float **)(v56 + 24);
            do
            {
              float v123 = *v120++;
              float v124 = v123;
              float v125 = *v121++;
              if (v124 == v125) {
                float v126 = 1.0;
              }
              else {
                float v126 = 0.0;
              }
              *v122++ = v126;
              --v58;
            }
            while (v58);
          }
          break;
        case 101:
          if (*(void *)(a4 + 8) - *(void *)a4 != 48) {
            goto LABEL_517;
          }
          if (__N)
          {
            uint64_t v212 = v31;
            unint64_t v213 = 0;
            do
            {
              if (*(float *)(*(void *)(v212 + 24) + 4 * v213) == 0.0)
              {
                Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&__C, (uint64_t *)(*(void *)a4 + 32));
                unint64_t v214 = (std::__shared_weak_count *)*((void *)&__C + 1);
                *(_DWORD *)(*(void *)(v298 + 24) + 4 * v213) = *(_DWORD *)(*(void *)(__C + 24) + 4 * v213);
                if (v214) {
                  nitro::nitro_function::nitro_function(v214);
                }
                LODWORD(v57) = __N;
              }
              else
              {
                *(_DWORD *)(*(void *)(v298 + 24) + 4 * v213) = *(_DWORD *)(*(void *)(v19 + 24) + 4 * v213);
              }
              ++v213;
            }
            while (v213 < (int)v57);
          }
          break;
        case 102:
          if (*(void *)(a4 + 8) - *(void *)a4 != 32) {
            goto LABEL_517;
          }
          if (__N)
          {
            int v236 = *(float **)(v31 + 24);
            unint64_t v237 = *(float **)(v19 + 24);
            v238 = *(float **)(v56 + 24);
            do
            {
              float v239 = *v236++;
              float v240 = v239;
              float v241 = *v237++;
              *v238++ = v240 / v241;
              --v58;
            }
            while (v58);
          }
          break;
        case 103:
          if (*(void *)(a4 + 8) - *(void *)a4 != 32) {
            goto LABEL_517;
          }
          if (__N)
          {
            uint64_t v229 = *(float **)(v31 + 24);
            uint64_t v230 = *(float **)(v19 + 24);
            uint64_t v231 = *(float **)(v56 + 24);
            do
            {
              float v232 = *v229++;
              float v233 = v232;
              float v234 = *v230++;
              if (v233 >= v234) {
                float v235 = 0.0;
              }
              else {
                float v235 = 1.0;
              }
              *v231++ = v235;
              --v58;
            }
            while (v58);
          }
          break;
        case 104:
          if (*(void *)(a4 + 8) - *(void *)a4 != 32) {
            goto LABEL_517;
          }
          if (__N)
          {
            BOOL v75 = *(float **)(v31 + 24);
            uint64_t v76 = *(float **)(v19 + 24);
            uint64_t v77 = *(float **)(v56 + 24);
            do
            {
              float v78 = *v75++;
              float v79 = v78;
              float v80 = *v76++;
              if (v79 > v80) {
                float v81 = 0.0;
              }
              else {
                float v81 = 1.0;
              }
              *v77++ = v81;
              --v58;
            }
            while (v58);
          }
          break;
        case 105:
          if (*(void *)(a4 + 8) - *(void *)a4 != 32) {
            goto LABEL_517;
          }
          if (__N)
          {
            long long v205 = *(float **)(v31 + 24);
            uint64_t v206 = *(float **)(v19 + 24);
            unint64_t v207 = *(float **)(v56 + 24);
            do
            {
              float v208 = *v205++;
              float v209 = v208;
              float v210 = *v206++;
              if (v209 <= v210) {
                float v211 = 0.0;
              }
              else {
                float v211 = 1.0;
              }
              *v207++ = v211;
              --v58;
            }
            while (v58);
          }
          break;
        case 106:
          if (*(void *)(a4 + 8) - *(void *)a4 != 32) {
            goto LABEL_517;
          }
          if (__N)
          {
            uint64_t v135 = *(float **)(v31 + 24);
            int v136 = *(float **)(v19 + 24);
            int v137 = *(float **)(v56 + 24);
            do
            {
              float v138 = *v135++;
              float v139 = v138;
              float v140 = *v136++;
              if (v139 < v140) {
                float v141 = 0.0;
              }
              else {
                float v141 = 1.0;
              }
              *v137++ = v141;
              --v58;
            }
            while (v58);
          }
          break;
        case 107:
          if (*(void *)(a4 + 8) - *(void *)a4 != 32) {
            goto LABEL_517;
          }
          if (__N)
          {
            uint64_t v222 = *(float **)(v31 + 24);
            uint64_t v223 = *(float **)(v19 + 24);
            unint64_t v224 = *(float **)(v56 + 24);
            do
            {
              float v225 = *v222++;
              float v226 = v225;
              float v227 = *v223++;
              if (v226 == v227) {
                float v228 = 0.0;
              }
              else {
                float v228 = 1.0;
              }
              *v224++ = v228;
              --v58;
            }
            while (v58);
          }
          break;
        case 110:
          if (*(void *)(a4 + 8) - *(void *)a4 != 32) {
            goto LABEL_517;
          }
          if (__N)
          {
            uint64_t v176 = 0;
            uint64_t v177 = *(void *)(v31 + 24);
            uint64_t v178 = *(void *)(v56 + 24);
            do
            {
              BOOL v179 = *(float *)(v177 + 4 * v176) != 0.0 && *(float *)(*(void *)(v19 + 24) + 4 * v176) != 0.0;
              *(float *)(v178 + 4 * v176++) = (float)v179;
            }
            while (v58 != v176);
          }
          break;
        case 111:
          if (*(void *)(a4 + 8) - *(void *)a4 != 32) {
            goto LABEL_517;
          }
          if (__N)
          {
            uint64_t v82 = 0;
            uint64_t v83 = *(void *)(v31 + 24);
            uint64_t v84 = *(void *)(v56 + 24);
            do
            {
              BOOL v85 = *(float *)(v83 + 4 * v82) != 0.0 || *(float *)(*(void *)(v19 + 24) + 4 * v82) != 0.0;
              *(float *)(v84 + 4 * v82++) = (float)v85;
            }
            while (v58 != v82);
          }
          break;
        case 112:
          if (*(void *)(a4 + 8) - *(void *)a4 != 16) {
            goto LABEL_517;
          }
          if (__N)
          {
            char v251 = *(float **)(v31 + 24);
            uint64_t v252 = *(float **)(v56 + 24);
            do
            {
              float v253 = *v251++;
              if (v253 == 0.0) {
                float v254 = 1.0;
              }
              else {
                float v254 = 0.0;
              }
              *v252++ = v254;
              --v58;
            }
            while (v58);
          }
          break;
        case 113:
          if (*(void *)(a4 + 8) - *(void *)a4 != 32) {
            goto LABEL_517;
          }
          if (__N)
          {
            int v91 = *(float **)(v31 + 24);
            uint64_t v92 = *(float **)(v19 + 24);
            long long v93 = *(float **)(v56 + 24);
            do
            {
              float v94 = *v91++;
              BOOL v95 = v94 != 0.0;
              float v96 = *v92++;
              *v93++ = (float)(v95 ^ (v96 != 0.0));
              --v58;
            }
            while (v58);
          }
          break;
        case 114:
          if (*(void *)(a4 + 8) - *(void *)a4 != 16) {
            goto LABEL_517;
          }
          vvcosf(*(float **)(v56 + 24), *(const float **)(v31 + 24), &__N);
          break;
        case 115:
          if (*(void *)(a4 + 8) - *(void *)a4 != 16) {
            goto LABEL_517;
          }
          vvsinf(*(float **)(v56 + 24), *(const float **)(v31 + 24), &__N);
          break;
        case 116:
          if (*(void *)(a4 + 8) - *(void *)a4 != 32) {
            goto LABEL_517;
          }
          vDSP_distancesq(*(const float **)(v19 + 24), 1, *(const float **)(v31 + 24), 1, *(float **)(v56 + 24), __N);
          break;
        case 117:
          vvfloorf(*(float **)(v56 + 24), *(const float **)(v31 + 24), &__N);
          break;
        case 118:
          vvceilf(*(float **)(v56 + 24), *(const float **)(v31 + 24), &__N);
          break;
        case 119:
          vDSP_vclip(*(const float **)(v31 + 24), 1, (const float *)(v295 + 288), (const float *)(v295 + 292), *(float **)(v56 + 24), 1, __N);
          break;
        case 121:
          if (*(void *)(a4 + 8) - *(void *)a4 != 16) {
            goto LABEL_517;
          }
          vvtanf(*(float **)(v56 + 24), *(const float **)(v31 + 24), &__N);
          break;
        case 122:
          if (*(void *)(a4 + 8) - *(void *)a4 != 16) {
            goto LABEL_517;
          }
          vvcoshf(*(float **)(v56 + 24), *(const float **)(v31 + 24), &__N);
          break;
        case 123:
          if (*(void *)(a4 + 8) - *(void *)a4 != 16) {
            goto LABEL_517;
          }
          vvsinhf(*(float **)(v56 + 24), *(const float **)(v31 + 24), &__N);
          break;
        case 124:
          if (*(void *)(a4 + 8) - *(void *)a4 != 16) {
            goto LABEL_517;
          }
          vvtanhf(*(float **)(v56 + 24), *(const float **)(v31 + 24), &__N);
          break;
        case 125:
          if (*(void *)(a4 + 8) - *(void *)a4 != 16) {
            goto LABEL_517;
          }
          vvacosf(*(float **)(v56 + 24), *(const float **)(v31 + 24), &__N);
          break;
        case 126:
          if (*(void *)(a4 + 8) - *(void *)a4 != 16) {
            goto LABEL_517;
          }
          vvasinf(*(float **)(v56 + 24), *(const float **)(v31 + 24), &__N);
          break;
        case 127:
          if (*(void *)(a4 + 8) - *(void *)a4 != 16) {
            goto LABEL_517;
          }
          vvatanf(*(float **)(v56 + 24), *(const float **)(v31 + 24), &__N);
          break;
        case 128:
          if (*(void *)(a4 + 8) - *(void *)a4 != 16) {
            goto LABEL_517;
          }
          vvacoshf(*(float **)(v56 + 24), *(const float **)(v31 + 24), &__N);
          break;
        case 129:
          if (*(void *)(a4 + 8) - *(void *)a4 != 16) {
            goto LABEL_517;
          }
          vvasinhf(*(float **)(v56 + 24), *(const float **)(v31 + 24), &__N);
          break;
        case 130:
          if (*(void *)(a4 + 8) - *(void *)a4 != 16) {
            goto LABEL_517;
          }
          vvatanhf(*(float **)(v56 + 24), *(const float **)(v31 + 24), &__N);
          break;
        case 131:
          if (__N)
          {
            uint64_t v71 = *(float **)(v31 + 24);
            uint64_t v72 = *(float **)(v56 + 24);
            do
            {
              float v73 = *v71++;
              if (v73 >= *(float *)(v295 + 288)) {
                float v74 = 0.0;
              }
              else {
                float v74 = 1.0;
              }
              *v72++ = v74;
              --v58;
            }
            while (v58);
          }
          break;
        case 132:
          if (__N)
          {
            __int16 v247 = *(float **)(v31 + 24);
            uint64_t v248 = *(float **)(v56 + 24);
            do
            {
              float v249 = *v247++;
              if (v249 > *(float *)(v295 + 288)) {
                float v250 = 0.0;
              }
              else {
                float v250 = 1.0;
              }
              *v248++ = v250;
              --v58;
            }
            while (v58);
          }
          break;
        case 133:
          if (__N)
          {
            uint64_t v67 = *(float **)(v31 + 24);
            long long v68 = *(float **)(v56 + 24);
            do
            {
              float v69 = *v67++;
              if (v69 <= *(float *)(v295 + 288)) {
                float v70 = 0.0;
              }
              else {
                float v70 = 1.0;
              }
              *v68++ = v70;
              --v58;
            }
            while (v58);
          }
          break;
        case 134:
          if (__N)
          {
            BOOL v218 = *(float **)(v31 + 24);
            unint64_t v219 = *(float **)(v56 + 24);
            do
            {
              float v220 = *v218++;
              if (v220 < *(float *)(v295 + 288)) {
                float v221 = 0.0;
              }
              else {
                float v221 = 1.0;
              }
              *v219++ = v221;
              --v58;
            }
            while (v58);
          }
          break;
        case 135:
          if (__N)
          {
            long long v97 = *(float **)(v31 + 24);
            unint64_t v98 = *(float **)(v56 + 24);
            do
            {
              float v99 = *v97++;
              if (vabds_f32(v99, *(float *)(v295 + 288)) <= *(float *)(v295 + 296)) {
                float v100 = 0.0;
              }
              else {
                float v100 = 1.0;
              }
              *v98++ = v100;
              --v58;
            }
            while (v58);
          }
          break;
        case 136:
          if (__N)
          {
            uint64_t v255 = *(float **)(v31 + 24);
            char v256 = *(float **)(v56 + 24);
            do
            {
              float v257 = *v255++;
              if (vabds_f32(v257, *(float *)(v295 + 288)) > *(float *)(v295 + 296)) {
                float v258 = 0.0;
              }
              else {
                float v258 = 1.0;
              }
              *v256++ = v258;
              --v58;
            }
            while (v58);
          }
          break;
        default:
          if (v33 != 1021) {
            break;
          }
          if (*(void *)(a4 + 8) - *(void *)a4 != 32) {
LABEL_517:
          }
            Espresso::throw_exception_selector<Espresso::invalid_state_error>("Unsupported number of inputs");
          if (__N)
          {
            uint64_t v61 = *(float **)(v31 + 24);
            long long v62 = *(float **)(v19 + 24);
            long long v63 = *(float **)(v56 + 24);
            do
            {
              float v64 = *v61++;
              float v65 = v64;
              float v66 = *v62++;
              *v63++ = floorf(v65 / v66);
              --v58;
            }
            while (v58);
          }
          break;
      }
LABEL_492:
      if (*(_DWORD *)(v295 + 284) == 1)
      {
        LODWORD(__C) = 0;
        vDSP_vthr(*(const float **)(v330 + 24), 1, (const float *)&__C, *(float **)(v330 + 24), 1, __N);
      }
      if (v302) {
        nitro::nitro_function::nitro_function(v302);
      }
      goto LABEL_496;
    }
    if (v19)
    {
      unsigned int v34 = *(_DWORD *)(a1 + 280);
    }
    else
    {
      std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&__C, 1, 1, 1, 1);
      uint64_t v35 = (std::__shared_weak_count *)*((void *)&__C + 1);
      uint64_t v19 = __C;
      long long __C = 0uLL;
      if (v11)
      {
        nitro::nitro_function::nitro_function(v11);
        if (*((void *)&__C + 1)) {
          nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&__C + 1));
        }
      }
      unsigned int v34 = *(_DWORD *)(a1 + 280);
      int v11 = v35;
    }
    int v36 = 0;
    int v37 = 1;
    if ((v34 - 100 > 0xD || ((1 << (v34 - 100)) & 0x2CFD) == 0)
      && (v34 > 0x24 || ((1 << v34) & 0x1000C00000) == 0)
      && v34 != 1021)
    {
      if (v34 > 1)
      {
        int v36 = 0;
        int v37 = 0;
      }
      else
      {
        int v36 = 1;
        if (v308 < 4)
        {
          int v37 = 1;
        }
        else
        {
          int v37 = 1;
          if (v306 >= 4) {
            int v37 = *(unsigned __int8 *)(a1 + 304);
          }
        }
      }
    }
    if (v34 == 33 || v34 == 13)
    {
      BOOL v39 = *(void *)(a4 + 8) - *(void *)a4 == 32;
      if (!v36) {
        goto LABEL_85;
      }
    }
    else
    {
      BOOL v39 = 0;
      if (!v36) {
        goto LABEL_85;
      }
    }
    int v36 = *(unsigned __int8 *)(a1 + 304);
    if (*(unsigned char *)(a1 + 304)) {
      int v36 = *(void *)(a4 + 8) - *(void *)a4 == 32;
    }
LABEL_85:
    int v40 = v39 | v36;
    if (v34 == 101)
    {
      int v41 = *(unsigned __int8 *)(a1 + 304);
      if (*(unsigned char *)(a1 + 304)) {
        int v41 = *(void *)(a4 + 8) - *(void *)a4 == 48;
      }
    }
    else
    {
      int v41 = 0;
    }
    int v42 = v40 | v41;
    uint64_t v31 = v329;
    int v43 = *(_DWORD *)(v329 + 8);
    int v44 = *(_DWORD *)(v19 + 8);
    if (v43 == v44
      && *(_DWORD *)(v329 + 12) == *(_DWORD *)(v19 + 12)
      && *(_DWORD *)(v329 + 16) == *(_DWORD *)(v19 + 16))
    {
      int v45 = *(_DWORD *)(v329 + 20) == *(_DWORD *)(v19 + 20) ? v42 : 1;
      if (v45 != 1) {
        goto LABEL_170;
      }
    }
    if (!*(_DWORD *)(a1 + 300) && v37 | v42)
    {
      uint64_t v287 = v329;
      uint64_t v46 = v324;
      uint64_t v47 = v319;
      if ((v319 == 1 || v324 == 1 || v324 == v319)
        && (DWORD1(v319) == 1 || DWORD1(v324) == 1 || DWORD1(v324) == DWORD1(v319))
        && (DWORD2(v319) == 1 || DWORD2(v324) == 1 || DWORD2(v324) == DWORD2(v319))
        && (HIDWORD(v319) == 1 || HIDWORD(v324) == 1 || HIDWORD(v324) == HIDWORD(v319))
        && (v320 == 1 || v325 == 1 || v325 == v320))
      {
        uint64_t v48 = v330;
        uint64_t v300 = a1;
        uint64_t v301 = v330;
        uint64_t v302 = v331;
        if (v331) {
          atomic_fetch_add_explicit(&v331->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        int v303 = __N;
        if (*(void *)(a4 + 8) - *(void *)a4 <= 0x1FuLL) {
          Espresso::throw_exception_selector<Espresso::invalid_state_error>("Unsupported number of inputs");
        }
        Espresso::abstract_blob_container::shape((char *)&__C, **(void **)a3);
        if ((int)v33 <= 35)
        {
          if ((int)v33 > 21)
          {
            switch(v33)
            {
              case 0x16:
                Espresso::elementwise_kernel_cpu::broadcasted_map<Espresso::elementwise_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::min_op>(*(_DWORD **)(v48 + 24), (int *)&__C, v287, (uint64_t)&v324, v19, (uint64_t)&v319);
                break;
              case 0x17:
                Espresso::elementwise_kernel_cpu::broadcasted_map<Espresso::elementwise_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::max_op>(*(_DWORD **)(v48 + 24), (int *)&__C, v287, (uint64_t)&v324, v19, (uint64_t)&v319);
                break;
              case 0x21:
                Espresso::elementwise_kernel_cpu::broadcasted_map<Espresso::elementwise_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::subtract_op>(*(float **)(v48 + 24), (int *)&__C, v287, (uint64_t)&v324, v19, (uint64_t)&v319);
                break;
              default:
                goto LABEL_519;
            }
          }
          else if (v33)
          {
            if (v33 != 1)
            {
              if (v33 == 13)
              {
                Espresso::elementwise_kernel_cpu::broadcasted_map<Espresso::elementwise_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::pow_op>(*(float **)(v48 + 24), (int *)&__C, v287, (uint64_t)&v324, v19, (uint64_t)&v319);
                goto LABEL_196;
              }
              goto LABEL_519;
            }
            Espresso::elementwise_kernel_cpu::broadcasted_map<Espresso::elementwise_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::mul_op>(*(float **)(v48 + 24), (int *)&__C, v287, (uint64_t)&v324, v19, (uint64_t)&v319);
          }
          else
          {
            Espresso::elementwise_kernel_cpu::broadcasted_map<Espresso::elementwise_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::add_op>(*(float **)(v48 + 24), (int *)&__C, v287, (uint64_t)&v324, v19, (uint64_t)&v319);
          }
        }
        else
        {
          switch((int)v33)
          {
            case 'd':
              Espresso::elementwise_kernel_cpu::broadcasted_map<Espresso::elementwise_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::equal_op>(*(float **)(v48 + 24), (int *)&__C, v287, (uint64_t)&v324, v19, (uint64_t)&v319);
              break;
            case 'e':
              Espresso::elementwise_kernel_cpu::broadcasted_map<Espresso::elementwise_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::if_op>(*(_DWORD **)(v48 + 24), (int *)&__C, v287, (uint64_t)&v324, v19, (uint64_t)&v319, v7, (uint64_t)&v314);
              break;
            case 'f':
              Espresso::elementwise_kernel_cpu::broadcasted_map<Espresso::elementwise_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::div_op>(*(float **)(v48 + 24), (int *)&__C, v287, (uint64_t)&v324, v19, (uint64_t)&v319);
              break;
            case 'g':
              Espresso::elementwise_kernel_cpu::broadcasted_map<Espresso::elementwise_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::less_op>(*(float **)(v48 + 24), (int *)&__C, v287, (uint64_t)&v324, v19, (uint64_t)&v319);
              break;
            case 'h':
              Espresso::elementwise_kernel_cpu::broadcasted_map<Espresso::elementwise_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::less_or_equal_op>(*(float **)(v48 + 24), (int *)&__C, v287, (uint64_t)&v324, v19, (uint64_t)&v319);
              break;
            case 'i':
              Espresso::elementwise_kernel_cpu::broadcasted_map<Espresso::elementwise_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::greater_op>(*(float **)(v48 + 24), (int *)&__C, v287, (uint64_t)&v324, v19, (uint64_t)&v319);
              break;
            case 'j':
              Espresso::elementwise_kernel_cpu::broadcasted_map<Espresso::elementwise_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::greater_or_equal_op>(*(float **)(v48 + 24), (int *)&__C, v287, (uint64_t)&v324, v19, (uint64_t)&v319);
              break;
            case 'k':
              Espresso::elementwise_kernel_cpu::broadcasted_map<Espresso::elementwise_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::not_equal_op>(*(float **)(v48 + 24), (int *)&__C, v287, (uint64_t)&v324, v19, (uint64_t)&v319);
              break;
            case 'l':
            case 'm':
            case 'p':
              goto LABEL_519;
            case 'n':
              Espresso::elementwise_kernel_cpu::broadcasted_map<Espresso::elementwise_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::and_op>(*(float **)(v48 + 24), (int *)&__C, v287, (uint64_t)&v324, v19, (uint64_t)&v319);
              break;
            case 'o':
              Espresso::elementwise_kernel_cpu::broadcasted_map<Espresso::elementwise_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::or_op>(*(float **)(v48 + 24), (int *)&__C, v287, (uint64_t)&v324, v19, (uint64_t)&v319);
              break;
            case 'q':
              Espresso::elementwise_kernel_cpu::broadcasted_map<Espresso::elementwise_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::xor_op>(*(float **)(v48 + 24), (int *)&__C, v287, (uint64_t)&v324, v19, (uint64_t)&v319);
              break;
            default:
              if (v33 != 36)
              {
                if (v33 == 1021)
                {
                  Espresso::elementwise_kernel_cpu::broadcasted_map<Espresso::elementwise_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::floordiv_op>(*(float **)(v48 + 24), (int *)&__C, v287, (uint64_t)&v324, v19, (uint64_t)&v319);
                  break;
                }
LABEL_519:
                Espresso::throw_exception_selector<Espresso::not_implemented_error,int &>("operation %d does not support broadcasting", v33);
              }
              Espresso::elementwise_kernel_cpu::broadcasted_map<Espresso::elementwise_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::mod_op>(*(float **)(v48 + 24), (int *)&__C, v287, (uint64_t)&v324, v19, (uint64_t)&v319);
              break;
          }
        }
LABEL_196:
        if ((void)v312)
        {
          *((void *)&v312 + 1) = v312;
          operator delete((void *)v312);
        }
        goto LABEL_492;
      }
      unsigned int v55 = v320;
LABEL_516:
      Espresso::throw_exception_selector<Espresso::invalid_blob_shape_error,int &,int &,int &,int &,int &,int &,int &,int &,int &,int &>("elementwise_kernel_cpu: Cannot broadcast [%d, %d, %d, %d, %d] and [%d, %d, %d, %d, %d]", v46, DWORD1(v324), HIDWORD(v324), DWORD2(v324), v325, v47, DWORD1(v319), HIDWORD(v319), DWORD2(v319), v55);
    }
    if (v44 == 1 && *(_DWORD *)(v19 + 12) == 1)
    {
      int v50 = *(_DWORD *)(v19 + 16);
      int v49 = *(_DWORD *)(v19 + 20);
      if (v50 == 1)
      {
        if (v49 == 1)
        {
          if (v34 == 1)
          {
            LODWORD(v33) = 32;
          }
          else if (!v34)
          {
            LODWORD(v33) = 31;
          }
          goto LABEL_170;
        }
        if (v49 == *(_DWORD *)(v329 + 20))
        {
          if (v34 == 1)
          {
            LODWORD(v33) = 30;
          }
          else if (!v34)
          {
            LODWORD(v33) = 29;
          }
          goto LABEL_170;
        }
      }
      else if (v49 == 1 && *(_DWORD *)(v329 + 16) == v50)
      {
        if (v33 == 1)
        {
          LODWORD(v33) = 8;
        }
        else if (!v33)
        {
          LODWORD(v33) = 5;
        }
        goto LABEL_170;
      }
    }
    int v51 = *(_DWORD *)(v19 + 16);
    int v52 = *(_DWORD *)(v19 + 20);
    if (v51 == 1)
    {
      if (v52 == 1 && v43 == v44)
      {
        int v53 = *(_DWORD *)(v329 + 12);
        int v54 = *(_DWORD *)(v19 + 12);
        if (v53 == v54)
        {
          if (v33 == 1)
          {
            LODWORD(v33) = 7;
          }
          else if (!v33)
          {
            LODWORD(v33) = 4;
          }
          goto LABEL_170;
        }
        goto LABEL_157;
      }
    }
    else if (v43 == v44 && v52 == 1)
    {
      int v53 = *(_DWORD *)(v329 + 12);
      int v54 = *(_DWORD *)(v19 + 12);
LABEL_157:
      if (v53 == v54 && *(_DWORD *)(v329 + 16) == v51)
      {
        if (v33 == 1)
        {
          LODWORD(v33) = 9;
        }
        else if (!v33)
        {
          LODWORD(v33) = 6;
        }
        goto LABEL_170;
      }
    }
    uint64_t v46 = v324;
    unsigned int v55 = v320;
    uint64_t v47 = v319;
    if (v320 == 1
      && v324 == v319
      && *(void *)((char *)&v324 + 4) == *(void *)((char *)&v319 + 4)
      && HIDWORD(v324) == HIDWORD(v319))
    {
      if (v34)
      {
        if (v34 == 1) {
          Espresso::throw_exception_selector<Espresso::not_implemented_error>("ELEMENTWISE_OPERATION_INTERNAL_MUL_XYKN not implemented");
        }
      }
      else
      {
        LODWORD(v33) = 34;
      }
      goto LABEL_170;
    }
    goto LABEL_516;
  }
LABEL_496:
  if ((void)v317)
  {
    *((void *)&v317 + 1) = v317;
    operator delete((void *)v317);
  }
  if ((void)v322)
  {
    *((void *)&v322 + 1) = v322;
    operator delete((void *)v322);
  }
  if ((void)v327)
  {
    *((void *)&v327 + 1) = v327;
    operator delete((void *)v327);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
  if (*((void *)&v329 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v329 + 1));
  }
  if (v331) {
    nitro::nitro_function::nitro_function(v331);
  }
}

void sub_192129FA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  if (a24) {
    nitro::nitro_function::nitro_function(a24);
  }
  if (a46) {
    operator delete(a46);
  }
  if (a54) {
    operator delete(a54);
  }
  if (a62) {
    operator delete(a62);
  }
  if (v68) {
    nitro::nitro_function::nitro_function(v68);
  }
  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  if (a66) {
    nitro::nitro_function::nitro_function(a66);
  }
  if (a68) {
    nitro::nitro_function::nitro_function(a68);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(void *a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (*a2 && (uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 32))(result), !result))
  {
    uint64_t v5 = *(void *)(*a2 + 168);
    *a1 = *(void *)(*a2 + 160);
    a1[1] = v5;
    if (v5) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
  }
  return result;
}

uint64_t Espresso::blob_cpu::compute_path(Espresso::blob_cpu *this)
{
  return *((unsigned int *)this + 60);
}

uint64_t Espresso::layer_nd_shape::layer_nd_shape(uint64_t this, const Espresso::layer_shape *a2, int a3)
{
  *(void *)this = 0;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  int v3 = *((_DWORD *)a2 + 4);
  if (v3 == 1) {
    int v4 = 4;
  }
  else {
    int v4 = 5;
  }
  if (*((_DWORD *)a2 + 5) == -1) {
    int v5 = v4;
  }
  else {
    int v5 = *((_DWORD *)a2 + 5);
  }
  *(_DWORD *)(this + 20) = v5;
  if (a3)
  {
    switch(v5)
    {
      case 0:
        *(void *)this = 0;
        *(void *)(this + 8) = 0;
        goto LABEL_15;
      case 1:
        *(_DWORD *)this = *((_DWORD *)a2 + 2);
        *(void *)(this + 12) = 0;
        *(void *)(this + 4) = 0;
        return this;
      case 2:
        *(int32x2_t *)this = vrev64_s32(*(int32x2_t *)((char *)a2 + 8));
        *(void *)(this + 8) = 0;
        goto LABEL_15;
      case 3:
        int32x2_t v7 = *(int32x2_t *)((char *)a2 + 8);
        *(_DWORD *)this = v3;
        *(int32x2_t *)(this + 4) = vrev64_s32(v7);
        *(void *)(this + 12) = 0;
        return this;
      case 4:
        int8x16_t v6 = (int8x16_t)vrev64q_s32(*(int32x4_t *)a2);
        *(int8x16_t *)this = vextq_s8(v6, v6, 8uLL);
LABEL_15:
        *(_DWORD *)(this + 16) = 0;
        break;
      case 5:
        int32x4_t v8 = *(int32x4_t *)a2;
        *(_DWORD *)this = v3;
        int8x16_t v9 = (int8x16_t)vrev64q_s32(v8);
        *(int8x16_t *)(this + 4) = vextq_s8(v9, v9, 8uLL);
        break;
      default:
        uint64_t v10 = this;
        exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::to_string(&v18, *(_DWORD *)(v10 + 20));
        uint64_t v12 = std::string::insert(&v18, 0, "Invalid rank: ");
        long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
        v19.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v13;
        v12->__r_.__value_.__l.__size_ = 0;
        v12->__r_.__value_.__r.__words[2] = 0;
        v12->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, &v19);
        __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
  else
  {
    switch(v5)
    {
      case 0:
        return this;
      case 1:
        *(_DWORD *)this = *(_DWORD *)a2;
        break;
      case 2:
        *(_DWORD *)this = *((_DWORD *)a2 + 1);
        *(_DWORD *)(this + 4) = *(_DWORD *)a2;
        break;
      case 3:
        *(_DWORD *)this = *((_DWORD *)a2 + 2);
        *(_DWORD *)(this + 4) = *((_DWORD *)a2 + 1);
        *(_DWORD *)(this + 8) = *(_DWORD *)a2;
        break;
      case 4:
        *(_DWORD *)this = *((_DWORD *)a2 + 3);
        *(_DWORD *)(this + 4) = *((_DWORD *)a2 + 2);
        *(_DWORD *)(this + 8) = *((_DWORD *)a2 + 1);
        *(_DWORD *)(this + 12) = *(_DWORD *)a2;
        break;
      case 5:
        *(_DWORD *)this = v3;
        *(_DWORD *)(this + 4) = *((_DWORD *)a2 + 3);
        *(_DWORD *)(this + 8) = *((_DWORD *)a2 + 2);
        *(_DWORD *)(this + 12) = *((_DWORD *)a2 + 1);
        *(_DWORD *)(this + 16) = *(_DWORD *)a2;
        break;
      default:
        uint64_t v14 = this;
        uint64_t v15 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::to_string(&v18, *(_DWORD *)(v14 + 20));
        uint64_t v16 = std::string::insert(&v18, 0, "Invalid rank: ");
        long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
        v19.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v17;
        v16->__r_.__value_.__l.__size_ = 0;
        v16->__r_.__value_.__r.__words[2] = 0;
        v16->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v15, &v19);
        __cxa_throw(v15, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
  return this;
}

void sub_19212A484(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (v22) {
    __cxa_free_exception(v21);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__init_with_size[abi:ne180100]<std::shared_ptr<Espresso::abstract_blob_container>*,std::shared_ptr<Espresso::abstract_blob_container>*>(void *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    int8x16_t v6 = result;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>,std::shared_ptr<Espresso::abstract_blob_container>*,std::shared_ptr<Espresso::abstract_blob_container>*,std::shared_ptr<Espresso::abstract_blob_container>*>((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_19212A54C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>,std::shared_ptr<Espresso::abstract_blob_container>*,std::shared_ptr<Espresso::abstract_blob_container>*,std::shared_ptr<Espresso::abstract_blob_container>*>(uint64_t a1, void *a2, void *a3, void *a4)
{
  int v4 = a4;
  uint64_t v10 = a4;
  int8x16_t v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      *int v4 = *a2;
      uint64_t v5 = a2[1];
      v4[1] = v5;
      if (v5) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
      }
      v4 += 2;
      a2 += 2;
    }
    while (a2 != a3);
    uint64_t v10 = v4;
  }
  char v8 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>,std::shared_ptr<Espresso::abstract_blob_container>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v7);
  return v4;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>,std::shared_ptr<Espresso::abstract_blob_container>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = **(void **)(a1 + 16);
    uint64_t v4 = **(void **)(a1 + 8);
    while (v3 != v4)
    {
      uint64_t v5 = *(std::__shared_weak_count **)(v3 - 8);
      if (v5) {
        nitro::nitro_function::nitro_function(v5);
      }
      v3 -= 16;
    }
  }
  return a1;
}

char *std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 60) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

BOOL Espresso::BNNSEngine::inner_product_kernel::__bloat_quantized_weights_to_fp32(Espresso::BNNSEngine::inner_product_kernel *this, double a2, double a3, float a4)
{
  uint64_t v5 = (uint64_t *)*((void *)this + 55);
  if (!v5
    || !*v5
    || !v5[4] && !v5[6] && !v5[8] && !v5[10]
    || *((void *)this + 86)
    || *(_DWORD *)(*((void *)this + 1) + 76))
  {
    return 0;
  }
  double v8 = *((double *)this + 70);
  BOOL v6 = *(void *)&v8 == 0;
  if (v8 == 0.0)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,2>,std::allocator<Espresso::blob<float,2>>,int &,int &,int &,int &,Espresso::blob<float,2>::UnitializedBlobType,void>(&v12, *((_DWORD *)this + 77), *((_DWORD *)this + 76), 1, 1);
    a2 = *(double *)&v12;
    int8x16_t v9 = (std::__shared_weak_count *)*((void *)this + 71);
    *((_OWORD *)this + 35) = v12;
    if (v9)
    {
      nitro::nitro_function::nitro_function(v9);
      double v8 = *((double *)this + 70);
    }
    else
    {
      double v8 = a2;
    }
    uint64_t v5 = (uint64_t *)*((void *)this + 55);
  }
  uint64_t v10 = (std::__shared_weak_count *)*((void *)this + 71);
  *(double *)int v11 = v8;
  v11[1] = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::quantized_weights_helper::dequantize_to_float32_2d(v5, (uint64_t)v11, a2, a3, a4);
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  return v6;
}

void sub_19212A77C(_Unwind_Exception *exception_object)
{
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::elementwise_kernel_cpu::broadcasted_map<Espresso::elementwise_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::mul_op>(float *a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = 0;
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  v52[0] = a3;
  v52[1] = a5;
  v51[0] = a4;
  v51[1] = a6;
  unsigned int v7 = a2[1];
  unint64_t v8 = *a2;
  unsigned int v49 = a2[2];
  unsigned int v45 = a2[3];
  v57[0] = 0;
  v57[1] = 0;
  char v9 = 1;
  v56[0] = 0;
  v56[1] = 0;
  v55[0] = 0;
  v55[1] = 0;
  uint64_t result = (uint64_t)v59;
  int v53 = 0;
  int v54 = 0;
  do
  {
    int v11 = (int *)v51[v6];
    int v12 = *v11;
    int v13 = v11[1];
    v59[v6 + 12] = v13 * *v11;
    int v14 = v11[2];
    int v15 = v11[3];
    int v16 = v14 * v13 * v12;
    v59[v6 + 10] = v16;
    v59[v6 + 8] = v15 * v16;
    LOBYTE(v16) = v9;
    v59[v6 + 6] = v11[4] != 1;
    v59[v6 + 4] = v15 != 1;
    v59[v6 + 2] = v14 != 1;
    v59[v6] = v13 != 1;
    v58[v6] = v12 != 1;
    uint64_t v6 = 1;
    char v9 = 0;
  }
  while ((v16 & 1) != 0);
  uint64_t v44 = a2[4];
  if (v44)
  {
    uint64_t v17 = 0;
    int v18 = v7 * v8 * v49;
    int v19 = v45;
    if (v8 <= 1) {
      uint64_t v20 = 1;
    }
    else {
      uint64_t v20 = v8;
    }
    if (v7 <= 1) {
      int v21 = 1;
    }
    else {
      int v21 = v7;
    }
    uint64_t v22 = v21;
    if (v49 <= 1) {
      int v23 = 1;
    }
    else {
      int v23 = v49;
    }
    uint64_t v24 = v23;
    if (v45 <= 1) {
      int v19 = 1;
    }
    uint64_t v25 = 4 * v58[1];
    uint64_t v26 = 4 * v58[0];
    uint64_t v48 = v19;
    do
    {
      uint64_t v27 = 0;
      char v28 = 1;
      do
      {
        char v29 = v28;
        uint64_t result = (int)v59[v27 + 6];
        v57[v27] = *(void *)(v52[v27] + 24) + 4 * v17 * (int)v59[v27 + 8] * result;
        uint64_t v27 = 1;
        char v28 = 0;
      }
      while ((v29 & 1) != 0);
      uint64_t v46 = v17;
      if (v45)
      {
        uint64_t v30 = 0;
        int v50 = a1;
        do
        {
          uint64_t v31 = 0;
          uint64_t v32 = 1;
          do
          {
            uint64_t result = v32;
            v56[v31] = v57[v31] + 4 * v30 * (int)v59[v31 + 10] * (int)v59[v31 + 4];
            uint64_t v31 = 1;
            uint64_t v32 = 0;
          }
          while ((result & 1) != 0);
          if (v49)
          {
            uint64_t v33 = 0;
            unsigned int v34 = v50;
            do
            {
              uint64_t v35 = 0;
              uint64_t v36 = 1;
              do
              {
                uint64_t result = v36;
                v55[v35] = v56[v35] + 4 * v33 * (int)v59[v35 + 12] * (int)v59[v35 + 2];
                uint64_t v35 = 1;
                uint64_t v36 = 0;
              }
              while ((result & 1) != 0);
              if (v7)
              {
                uint64_t v37 = 0;
                int v38 = v34;
                do
                {
                  uint64_t v39 = 0;
                  uint64_t v40 = 1;
                  do
                  {
                    uint64_t result = v40;
                    (&v53)[v39] = (float *)(v55[v39] + 4 * v37 * *(int *)v51[v39] * (int)v59[v39]);
                    uint64_t v39 = 1;
                    uint64_t v40 = 0;
                  }
                  while ((result & 1) != 0);
                  if (v8)
                  {
                    int v42 = v53;
                    int v41 = v54;
                    uint64_t result = (uint64_t)v38;
                    uint64_t v43 = v20;
                    do
                    {
                      *(float *)uint64_t result = *v42 * *v41;
                      result += 4;
                      int v41 = (float *)((char *)v41 + v25);
                      int v42 = (float *)((char *)v42 + v26);
                      --v43;
                    }
                    while (v43);
                  }
                  ++v37;
                  v38 += v8;
                }
                while (v37 != v22);
              }
              ++v33;
              v34 += (int)(v7 * v8);
            }
            while (v33 != v24);
          }
          ++v30;
          v50 += v18;
        }
        while (v30 != v48);
      }
      uint64_t v17 = v46 + 1;
      a1 += (int)(v18 * v45);
    }
    while (v46 + 1 != v44);
  }
  return result;
}

uint64_t Espresso::elementwise_kernel_cpu::broadcasted_map<Espresso::elementwise_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::add_op>(float *a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = 0;
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  v52[0] = a3;
  v52[1] = a5;
  v51[0] = a4;
  v51[1] = a6;
  unsigned int v7 = a2[1];
  unint64_t v8 = *a2;
  unsigned int v49 = a2[2];
  unsigned int v45 = a2[3];
  v57[0] = 0;
  v57[1] = 0;
  char v9 = 1;
  v56[0] = 0;
  v56[1] = 0;
  v55[0] = 0;
  v55[1] = 0;
  uint64_t result = (uint64_t)v59;
  int v53 = 0;
  int v54 = 0;
  do
  {
    int v11 = (int *)v51[v6];
    int v12 = *v11;
    int v13 = v11[1];
    v59[v6 + 12] = v13 * *v11;
    int v14 = v11[2];
    int v15 = v11[3];
    int v16 = v14 * v13 * v12;
    v59[v6 + 10] = v16;
    v59[v6 + 8] = v15 * v16;
    LOBYTE(v16) = v9;
    v59[v6 + 6] = v11[4] != 1;
    v59[v6 + 4] = v15 != 1;
    v59[v6 + 2] = v14 != 1;
    v59[v6] = v13 != 1;
    v58[v6] = v12 != 1;
    uint64_t v6 = 1;
    char v9 = 0;
  }
  while ((v16 & 1) != 0);
  uint64_t v44 = a2[4];
  if (v44)
  {
    uint64_t v17 = 0;
    int v18 = v7 * v8 * v49;
    int v19 = v45;
    if (v8 <= 1) {
      uint64_t v20 = 1;
    }
    else {
      uint64_t v20 = v8;
    }
    if (v7 <= 1) {
      int v21 = 1;
    }
    else {
      int v21 = v7;
    }
    uint64_t v22 = v21;
    if (v49 <= 1) {
      int v23 = 1;
    }
    else {
      int v23 = v49;
    }
    uint64_t v24 = v23;
    if (v45 <= 1) {
      int v19 = 1;
    }
    uint64_t v25 = 4 * v58[1];
    uint64_t v26 = 4 * v58[0];
    uint64_t v48 = v19;
    do
    {
      uint64_t v27 = 0;
      char v28 = 1;
      do
      {
        char v29 = v28;
        uint64_t result = (int)v59[v27 + 6];
        v57[v27] = *(void *)(v52[v27] + 24) + 4 * v17 * (int)v59[v27 + 8] * result;
        uint64_t v27 = 1;
        char v28 = 0;
      }
      while ((v29 & 1) != 0);
      uint64_t v46 = v17;
      if (v45)
      {
        uint64_t v30 = 0;
        int v50 = a1;
        do
        {
          uint64_t v31 = 0;
          uint64_t v32 = 1;
          do
          {
            uint64_t result = v32;
            v56[v31] = v57[v31] + 4 * v30 * (int)v59[v31 + 10] * (int)v59[v31 + 4];
            uint64_t v31 = 1;
            uint64_t v32 = 0;
          }
          while ((result & 1) != 0);
          if (v49)
          {
            uint64_t v33 = 0;
            unsigned int v34 = v50;
            do
            {
              uint64_t v35 = 0;
              uint64_t v36 = 1;
              do
              {
                uint64_t result = v36;
                v55[v35] = v56[v35] + 4 * v33 * (int)v59[v35 + 12] * (int)v59[v35 + 2];
                uint64_t v35 = 1;
                uint64_t v36 = 0;
              }
              while ((result & 1) != 0);
              if (v7)
              {
                uint64_t v37 = 0;
                int v38 = v34;
                do
                {
                  uint64_t v39 = 0;
                  uint64_t v40 = 1;
                  do
                  {
                    uint64_t result = v40;
                    (&v53)[v39] = (float *)(v55[v39] + 4 * v37 * *(int *)v51[v39] * (int)v59[v39]);
                    uint64_t v39 = 1;
                    uint64_t v40 = 0;
                  }
                  while ((result & 1) != 0);
                  if (v8)
                  {
                    int v42 = v53;
                    int v41 = v54;
                    uint64_t result = (uint64_t)v38;
                    uint64_t v43 = v20;
                    do
                    {
                      *(float *)uint64_t result = *v42 + *v41;
                      result += 4;
                      int v41 = (float *)((char *)v41 + v25);
                      int v42 = (float *)((char *)v42 + v26);
                      --v43;
                    }
                    while (v43);
                  }
                  ++v37;
                  v38 += v8;
                }
                while (v37 != v22);
              }
              ++v33;
              v34 += (int)(v7 * v8);
            }
            while (v33 != v24);
          }
          ++v30;
          v50 += v18;
        }
        while (v30 != v48);
      }
      uint64_t v17 = v46 + 1;
      a1 += (int)(v18 * v45);
    }
    while (v46 + 1 != v44);
  }
  return result;
}

uint64_t Espresso::elementwise_kernel_cpu::broadcasted_map<Espresso::elementwise_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::min_op>(_DWORD *a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = 0;
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  v53[0] = a3;
  v53[1] = a5;
  v52[0] = a4;
  v52[1] = a6;
  unsigned int v7 = a2[1];
  unint64_t v8 = *a2;
  unsigned int v50 = a2[2];
  unsigned int v46 = a2[3];
  v58[0] = 0;
  v58[1] = 0;
  char v9 = 1;
  v57[0] = 0;
  v57[1] = 0;
  v56[0] = 0;
  v56[1] = 0;
  uint64_t result = (uint64_t)v60;
  int v54 = 0;
  unsigned int v55 = 0;
  do
  {
    int v11 = (int *)v52[v6];
    int v12 = *v11;
    int v13 = v11[1];
    v60[v6 + 12] = v13 * *v11;
    int v14 = v11[2];
    int v15 = v11[3];
    int v16 = v14 * v13 * v12;
    v60[v6 + 10] = v16;
    v60[v6 + 8] = v15 * v16;
    LOBYTE(v16) = v9;
    v60[v6 + 6] = v11[4] != 1;
    v60[v6 + 4] = v15 != 1;
    v60[v6 + 2] = v14 != 1;
    v60[v6] = v13 != 1;
    v59[v6] = v12 != 1;
    uint64_t v6 = 1;
    char v9 = 0;
  }
  while ((v16 & 1) != 0);
  uint64_t v45 = a2[4];
  if (v45)
  {
    uint64_t v17 = 0;
    int v18 = v7 * v8 * v50;
    int v19 = v46;
    if (v8 <= 1) {
      uint64_t v20 = 1;
    }
    else {
      uint64_t v20 = v8;
    }
    if (v7 <= 1) {
      int v21 = 1;
    }
    else {
      int v21 = v7;
    }
    uint64_t v22 = v21;
    if (v50 <= 1) {
      int v23 = 1;
    }
    else {
      int v23 = v50;
    }
    uint64_t v24 = v23;
    if (v46 <= 1) {
      int v19 = 1;
    }
    uint64_t v25 = 4 * v59[1];
    uint64_t v26 = 4 * v59[0];
    uint64_t v49 = v19;
    do
    {
      uint64_t v27 = 0;
      char v28 = 1;
      do
      {
        char v29 = v28;
        uint64_t result = (int)v60[v27 + 6];
        v58[v27] = *(void *)(v53[v27] + 24) + 4 * v17 * (int)v60[v27 + 8] * result;
        uint64_t v27 = 1;
        char v28 = 0;
      }
      while ((v29 & 1) != 0);
      uint64_t v47 = v17;
      if (v46)
      {
        uint64_t v30 = 0;
        int v51 = a1;
        do
        {
          uint64_t v31 = 0;
          uint64_t v32 = 1;
          do
          {
            uint64_t result = v32;
            v57[v31] = v58[v31] + 4 * v30 * (int)v60[v31 + 10] * (int)v60[v31 + 4];
            uint64_t v31 = 1;
            uint64_t v32 = 0;
          }
          while ((result & 1) != 0);
          if (v50)
          {
            uint64_t v33 = 0;
            unsigned int v34 = v51;
            do
            {
              uint64_t v35 = 0;
              uint64_t v36 = 1;
              do
              {
                uint64_t result = v36;
                v56[v35] = v57[v35] + 4 * v33 * (int)v60[v35 + 12] * (int)v60[v35 + 2];
                uint64_t v35 = 1;
                uint64_t v36 = 0;
              }
              while ((result & 1) != 0);
              if (v7)
              {
                uint64_t v37 = 0;
                int v38 = v34;
                do
                {
                  uint64_t v39 = 0;
                  uint64_t v40 = 1;
                  do
                  {
                    uint64_t result = v40;
                    (&v54)[v39] = (float *)(v56[v39] + 4 * v37 * *(int *)v52[v39] * (int)v60[v39]);
                    uint64_t v39 = 1;
                    uint64_t v40 = 0;
                  }
                  while ((result & 1) != 0);
                  if (v8)
                  {
                    int v42 = v54;
                    int v41 = v55;
                    uint64_t result = (uint64_t)v38;
                    uint64_t v43 = v20;
                    do
                    {
                      float v44 = *v42;
                      if (*v42 > *v41) {
                        float v44 = *v41;
                      }
                      *(float *)uint64_t result = v44;
                      result += 4;
                      int v41 = (float *)((char *)v41 + v25);
                      int v42 = (float *)((char *)v42 + v26);
                      --v43;
                    }
                    while (v43);
                  }
                  ++v37;
                  v38 += v8;
                }
                while (v37 != v22);
              }
              ++v33;
              v34 += (int)(v7 * v8);
            }
            while (v33 != v24);
          }
          ++v30;
          v51 += v18;
        }
        while (v30 != v49);
      }
      uint64_t v17 = v47 + 1;
      a1 += (int)(v18 * v46);
    }
    while (v47 + 1 != v45);
  }
  return result;
}

uint64_t Espresso::elementwise_kernel_cpu::broadcasted_map<Espresso::elementwise_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::max_op>(_DWORD *a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = 0;
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  v53[0] = a3;
  v53[1] = a5;
  v52[0] = a4;
  v52[1] = a6;
  unsigned int v7 = a2[1];
  unint64_t v8 = *a2;
  unsigned int v50 = a2[2];
  unsigned int v46 = a2[3];
  v58[0] = 0;
  v58[1] = 0;
  char v9 = 1;
  v57[0] = 0;
  v57[1] = 0;
  v56[0] = 0;
  v56[1] = 0;
  uint64_t result = (uint64_t)v60;
  int v54 = 0;
  unsigned int v55 = 0;
  do
  {
    int v11 = (int *)v52[v6];
    int v12 = *v11;
    int v13 = v11[1];
    v60[v6 + 12] = v13 * *v11;
    int v14 = v11[2];
    int v15 = v11[3];
    int v16 = v14 * v13 * v12;
    v60[v6 + 10] = v16;
    v60[v6 + 8] = v15 * v16;
    LOBYTE(v16) = v9;
    v60[v6 + 6] = v11[4] != 1;
    v60[v6 + 4] = v15 != 1;
    v60[v6 + 2] = v14 != 1;
    v60[v6] = v13 != 1;
    v59[v6] = v12 != 1;
    uint64_t v6 = 1;
    char v9 = 0;
  }
  while ((v16 & 1) != 0);
  uint64_t v45 = a2[4];
  if (v45)
  {
    uint64_t v17 = 0;
    int v18 = v7 * v8 * v50;
    int v19 = v46;
    if (v8 <= 1) {
      uint64_t v20 = 1;
    }
    else {
      uint64_t v20 = v8;
    }
    if (v7 <= 1) {
      int v21 = 1;
    }
    else {
      int v21 = v7;
    }
    uint64_t v22 = v21;
    if (v50 <= 1) {
      int v23 = 1;
    }
    else {
      int v23 = v50;
    }
    uint64_t v24 = v23;
    if (v46 <= 1) {
      int v19 = 1;
    }
    uint64_t v25 = 4 * v59[1];
    uint64_t v26 = 4 * v59[0];
    uint64_t v49 = v19;
    do
    {
      uint64_t v27 = 0;
      char v28 = 1;
      do
      {
        char v29 = v28;
        uint64_t result = (int)v60[v27 + 6];
        v58[v27] = *(void *)(v53[v27] + 24) + 4 * v17 * (int)v60[v27 + 8] * result;
        uint64_t v27 = 1;
        char v28 = 0;
      }
      while ((v29 & 1) != 0);
      uint64_t v47 = v17;
      if (v46)
      {
        uint64_t v30 = 0;
        int v51 = a1;
        do
        {
          uint64_t v31 = 0;
          uint64_t v32 = 1;
          do
          {
            uint64_t result = v32;
            v57[v31] = v58[v31] + 4 * v30 * (int)v60[v31 + 10] * (int)v60[v31 + 4];
            uint64_t v31 = 1;
            uint64_t v32 = 0;
          }
          while ((result & 1) != 0);
          if (v50)
          {
            uint64_t v33 = 0;
            unsigned int v34 = v51;
            do
            {
              uint64_t v35 = 0;
              uint64_t v36 = 1;
              do
              {
                uint64_t result = v36;
                v56[v35] = v57[v35] + 4 * v33 * (int)v60[v35 + 12] * (int)v60[v35 + 2];
                uint64_t v35 = 1;
                uint64_t v36 = 0;
              }
              while ((result & 1) != 0);
              if (v7)
              {
                uint64_t v37 = 0;
                int v38 = v34;
                do
                {
                  uint64_t v39 = 0;
                  uint64_t v40 = 1;
                  do
                  {
                    uint64_t result = v40;
                    (&v54)[v39] = (float *)(v56[v39] + 4 * v37 * *(int *)v52[v39] * (int)v60[v39]);
                    uint64_t v39 = 1;
                    uint64_t v40 = 0;
                  }
                  while ((result & 1) != 0);
                  if (v8)
                  {
                    int v42 = v54;
                    int v41 = v55;
                    uint64_t result = (uint64_t)v38;
                    uint64_t v43 = v20;
                    do
                    {
                      float v44 = *v41;
                      if (*v41 <= *v42) {
                        float v44 = *v42;
                      }
                      *(float *)uint64_t result = v44;
                      result += 4;
                      int v41 = (float *)((char *)v41 + v25);
                      int v42 = (float *)((char *)v42 + v26);
                      --v43;
                    }
                    while (v43);
                  }
                  ++v37;
                  v38 += v8;
                }
                while (v37 != v22);
              }
              ++v33;
              v34 += (int)(v7 * v8);
            }
            while (v33 != v24);
          }
          ++v30;
          v51 += v18;
        }
        while (v30 != v49);
      }
      uint64_t v17 = v47 + 1;
      a1 += (int)(v18 * v46);
    }
    while (v47 + 1 != v45);
  }
  return result;
}

uint64_t Espresso::elementwise_kernel_cpu::broadcasted_map<Espresso::elementwise_kernel_cpu::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::subtract_op>(float *a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = 0;
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  v52[0] = a3;
  v52[1] = a5;
  v51[0] = a4;
  v51[1] = a6;
  unsigned int v7 = a2[1];
  unint64_t v8 = *a2;
  unsigned int v49 = a2[2];
  unsigned int v45 = a2[3];
  v57[0] = 0;
  v57[1] = 0;
  char v9 = 1;
  v56[0] = 0;
  v56[1] = 0;
  v55[0] = 0;
  v55[1] = 0;
  uint64_t result = (uint64_t)v59;
  int v53 = 0;
  int v54 = 0;
  do
  {
    int v11 = (int *)v51[v6];
    int v12 = *v11;
    int v13 = v11[1];
    v59[v6 + 12] = v13 * *v11;
    int v14 = v11[2];
    int v15 = v11[3];
    int v16 = v14 * v13 * v12;
    v59[v6 + 10] = v16;
    v59[v6 + 8] = v15 * v16;
    LOBYTE(v16) = v9;
    v59[v6 + 6] = v11[4] != 1;
    v59[v6 + 4] = v15 != 1;
    v59[v6 + 2] = v14 != 1;
    v59[v6] = v13 != 1;
    v58[v6] = v12 != 1;
    uint64_t v6 = 1;
    char v9 = 0;
  }
  while ((v16 & 1) != 0);
  uint64_t v44 = a2[4];
  if (v44)
  {
    uint64_t v17 = 0;
    int v18 = v7 * v8 * v49;
    int v19 = v45;
    if (v8 <= 1) {
      uint64_t v20 = 1;
    }
    else {
      uint64_t v20 = v8;
    }
    if (v7 <= 1) {
      int v21 = 1;
    }
    else {
      int v21 = v7;
    }
    uint64_t v22 = v21;
    if (v49 <= 1) {
      int v23 = 1;
    }
    else {
      int v23 = v49;
    }
    uint64_t v24 = v23;
    if (v45 <= 1) {
      int v19 = 1;
    }
    uint64_t v25 = 4 * v58[1];
    uint64_t v26 = 4 * v58[0];
    uint64_t v48 = v19;
    do
    {
      uint64_t v27 = 0;
      char v28 = 1;
      do
      {
        char v29 = v28;
        uint64_t result = (int)v59[v27 + 6];
        v57[v27] = *(void *)(v52[v27] + 24) + 4 * v17 * (int)v59[v27 + 8] * result;
        uint64_t v27 = 1;
        char v28 = 0;
      }
      while ((v29 & 1) != 0);
      uint64_t v46 = v17;
      if (v45)
      {
        uint64_t v30 = 0;
        unsigned int v50 = a1;
        do
        {
          uint64_t v31 = 0;
          uint64_t v32 = 1;
          do
          {
            uint64_t result = v32;
            v56[v31] = v57[v31] + 4 * v30 * (int)v59[v31 + 10] * (int)v59[v31 + 4];
            uint64_t v31 = 1;
            uint64_t v32 = 0;
          }
          while ((result & 1) != 0);
          if (v49)
          {
            uint64_t v33 = 0;
            unsigned int v34 = v50;
            do
            {
              uint64_t v35 = 0;
              uint64_t v36 = 1;
              do
              {
                uint64_t result = v36;
                v55[v35] = v56[v35] + 4 * v33 * (int)v59[v35 + 12] * (int)v59[v35 + 2];
                uint64_t v35 = 1;
                uint64_t v36 = 0;
              }
              while ((result & 1) != 0);
              if (v7)
              {
                uint64_t v37 = 0;
                int v38 = v34;
                do
                {
                  uint64_t v39 = 0;
                  uint64_t v40 = 1;
                  do
                  {
                    uint64_t result = v40;
                    (&v53)[v39] = (float *)(v55[v39] + 4 * v37 * *(int *)v51[v39] * (int)v59[v39]);
                    uint64_t v39 = 1;
                    uint64_t v40 = 0;
                  }
                  while ((result & 1) != 0);
                  if (v8)
                  {
                    int v42 = v53;
                    int v41 = v54;
                    uint64_t result = (uint64_t)v38;
                    uint64_t v43 = v20;
                    do
                    {
                      *(float *)uint64_t result = *v42 - *v41;
                      result += 4;
                      int v41 = (float *)((char *)v41 + v25);
                      int v42 = (float *)((char *)v42 + v26);
                      --v43;
                    }
                    while (v43);
                  }
                  ++v37;
                  v38 += v8;
                }
                while (v37 != v22);
              }
              ++v33;
              v34 += (int)(v7 * v8);
            }
            while (v33 != v24);
          }
          ++v30;
          v50 += v18;
        }
        while (v30 != v48);
      }
      uint64_t v17 = v46 + 1;
      a1 += (int)(v18 * v45);
    }
    while (v46 + 1 != v44);
  }
  return result;
}

void Espresso::get_net_info_ir(uint64_t *a1, uint64_t *a2, Espresso ***a3, uint64_t a4, unsigned int *a5, int *a6, int *a7, uint64_t a8, uint64_t *a9, char **a10)
{
  uint64_t v19 = *a1;
  int v18 = (std::__shared_weak_count *)a1[1];
  if (v18)
  {
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v46 = v18;
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    uint64_t v46 = 0;
  }
  uint64_t v45 = v19;
  int v47 = 100;
  memset(v48, 0, sizeof(v48));
  int v49 = 0;
  __asm { FMOV            V0.2S, #1.0 }
  uint64_t v50 = _D0;
  int v51 = 0;
  int v52 = 0;
  if (v18) {
    nitro::nitro_function::nitro_function(v18);
  }
  uint64_t v25 = *a10;
  if (!*a10)
  {
    uint64_t v26 = (char *)operator new(0xB0uLL);
    *((void *)v26 + 1) = 0;
    *((void *)v26 + 2) = 0;
    *(_OWORD *)(v26 + 24) = 0u;
    uint64_t v25 = v26 + 24;
    *(void *)uint64_t v26 = &unk_1EE388928;
    *(_OWORD *)(v26 + 88) = 0u;
    *(_OWORD *)(v26 + 136) = 0u;
    *(_OWORD *)(v26 + 120) = 0u;
    *(_OWORD *)(v26 + 40) = 0u;
    *(_OWORD *)(v26 + 56) = 0u;
    *(_OWORD *)(v26 + 72) = 0u;
    *(_OWORD *)(v26 + 104) = 0u;
    *((void *)v26 + 12) = v26 + 104;
    *((void *)v26 + 17) = 0;
    *((void *)v26 + 16) = 0;
    *((void *)v26 + 15) = v26 + 128;
    *((void *)v26 + 21) = 0;
    *((void *)v26 + 20) = 0;
    *((void *)v26 + 19) = v26 + 160;
    uint64_t v27 = (std::__shared_weak_count *)a10[1];
    *a10 = v26 + 24;
    a10[1] = v26;
    if (v27)
    {
      nitro::nitro_function::nitro_function(v27);
      uint64_t v25 = *a10;
    }
  }
  char v28 = (std::__shared_weak_count *)a10[1];
  if (v28)
  {
    atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
    char v29 = v52;
    int v51 = v25;
    int v52 = v28;
    if (v29) {
      nitro::nitro_function::nitro_function(v29);
    }
  }
  else
  {
    int v51 = v25;
    int v52 = 0;
  }
  int v30 = *a7;
  int v47 = *a6;
  LODWORD(v48[0]) = v30;
  if (!*(void *)a8)
  {
    std::allocate_shared[abi:ne180100]<Espresso::cpu_context_transfer_algo_t,std::allocator<Espresso::cpu_context_transfer_algo_t>,Espresso::cpu_context_transfer_algo_options &,void>((Espresso::cpu_context_transfer_algo_t **)&v44, (const Espresso::cpu_context_transfer_algo_options *)&v45);
    uint64_t v31 = *(std::__shared_weak_count **)(a8 + 8);
    *(_OWORD *)a8 = v44;
    if (v31) {
      nitro::nitro_function::nitro_function(v31);
    }
  }
  if (!*a9)
  {
    uint64_t v32 = (char *)operator new(0x70uLL);
    *((void *)v32 + 1) = 0;
    *((void *)v32 + 2) = 0;
    *(void *)uint64_t v32 = &unk_1EE381D50;
    *(_OWORD *)(v32 + 24) = 0u;
    uint64_t v33 = v32 + 24;
    *(_OWORD *)(v32 + 56) = 0u;
    *(_OWORD *)(v32 + 40) = 0u;
    *((void *)v32 + 6) = v32 + 56;
    *((void *)v32 + 10) = 0;
    *((void *)v32 + 9) = v32 + 80;
    *((void *)v32 + 12) = 0;
    *((void *)v32 + 13) = 0;
    *((void *)v32 + 11) = 0;
    unsigned int v34 = (std::__shared_weak_count *)a9[1];
    *a9 = (uint64_t)(v32 + 24);
    a9[1] = (uint64_t)v32;
    if (v34)
    {
      nitro::nitro_function::nitro_function(v34);
      uint64_t v33 = (char *)*a9;
    }
    uint64_t v36 = *a2;
    uint64_t v35 = a2[1];
    if (v35) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v35 + 16), 1uLL, memory_order_relaxed);
    }
    uint64_t v37 = (std::__shared_weak_count *)*((void *)v33 + 10);
    *((void *)v33 + 9) = v36;
    *((void *)v33 + 10) = v35;
    if (v37) {
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  uint64_t v38 = *(void *)a8;
  uint64_t v39 = (std::__shared_weak_count *)a1[1];
  v43[0] = *a1;
  v43[1] = v39;
  if (v39) {
    atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v40 = *a5;
  int v41 = (std::__shared_weak_count *)a9[1];
  v42[0] = *a9;
  v42[1] = (uint64_t)v41;
  if (v41) {
    atomic_fetch_add_explicit(&v41->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::cpu_context_transfer_algo_t::create_net_info_ir(v38, a3, v43, a4, v40, v42);
  if (v41) {
    nitro::nitro_function::nitro_function(v41);
  }
  if (v39) {
    nitro::nitro_function::nitro_function(v39);
  }
  if (v52) {
    nitro::nitro_function::nitro_function(v52);
  }
  *(void *)&long long v44 = (char *)v48 + 4;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v44);
  if (v46) {
    nitro::nitro_function::nitro_function(v46);
  }
}

void sub_19212BC78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  Espresso::cpu_context_transfer_algo_options::~cpu_context_transfer_algo_options((Espresso::cpu_context_transfer_algo_options *)va);
  _Unwind_Resume(a1);
}

Espresso::cpu_context_transfer_algo_t *std::allocate_shared[abi:ne180100]<Espresso::cpu_context_transfer_algo_t,std::allocator<Espresso::cpu_context_transfer_algo_t>,Espresso::cpu_context_transfer_algo_options &,void>(Espresso::cpu_context_transfer_algo_t **a1, const Espresso::cpu_context_transfer_algo_options *a2)
{
  uint64_t v4 = operator new(0xB0uLL);
  v4[1] = 0;
  v4[2] = 0;
  *uint64_t v4 = &unk_1EE388880;
  uint64_t result = Espresso::cpu_context_transfer_algo_t::cpu_context_transfer_algo_t((Espresso::cpu_context_transfer_algo_t *)(v4 + 3), a2);
  *a1 = result;
  a1[1] = (Espresso::cpu_context_transfer_algo_t *)v4;
  return result;
}

void sub_19212BD18(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

Espresso::cpu_context_transfer_algo_t *Espresso::cpu_context_transfer_algo_t::cpu_context_transfer_algo_t(Espresso::cpu_context_transfer_algo_t *this, const Espresso::cpu_context_transfer_algo_options *a2)
{
  *(void *)this = *(void *)a2;
  uint64_t v4 = *((void *)a2 + 1);
  *((void *)this + 1) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 3) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((void *)this + 3, *((void *)a2 + 3), *((void *)a2 + 4), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 4) - *((void *)a2 + 3)) >> 3));
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)this + 7) = *((void *)a2 + 7);
  uint64_t v5 = *((void *)a2 + 8);
  *((void *)this + 8) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)this + 9) = 0;
  uint64_t v6 = (uint64_t *)((char *)this + 72);
  *((void *)this + 11) = 850045863;
  *((void *)this + 10) = 0;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((void *)this + 18) = 0;
  Espresso::create_context((int *)this + 4, buf);
  long long v7 = *(_OWORD *)buf;
  memset(buf, 0, sizeof(buf));
  unint64_t v8 = (std::__shared_weak_count *)*((void *)this + 10);
  *(_OWORD *)((char *)this + 72) = v7;
  if (!v8)
  {
    uint64_t v9 = v7;
    if ((void)v7) {
      goto LABEL_9;
    }
LABEL_15:
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_fault_impl(&dword_1920CB000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Error creating fallback context: check process entitlements", buf, 2u);
    }
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Error creating fallback context: check process entitlements");
  }
  nitro::nitro_function::nitro_function(v8);
  if (*(void *)&buf[8]) {
    nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&buf[8]);
  }
  uint64_t v9 = *v6;
  if (!*v6) {
    goto LABEL_15;
  }
LABEL_9:
  uint64_t v10 = (std::__shared_weak_count *)*((void *)this + 1);
  uint64_t v12 = *(void *)this;
  int v13 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v9 + 112))(v9, &v12);
  if (v13) {
    nitro::nitro_function::nitro_function(v13);
  }
  return this;
}

void sub_19212BEF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  std::mutex::~mutex(v11);
  int v13 = (std::__shared_weak_count *)*((void *)v10 + 10);
  if (v13) {
    nitro::nitro_function::nitro_function(v13);
  }
  Espresso::cpu_context_transfer_algo_options::~cpu_context_transfer_algo_options(v10);
  _Unwind_Resume(a1);
}

void sub_19212BF30()
{
  uint64_t v1 = *(std::__shared_weak_count **)(v0 + 8);
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  JUMPOUT(0x19212BF28);
}

void Espresso::abstract_context::set_as_child_of(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (*a2)
  {
    *(unsigned char *)(a1 + 56) = *(unsigned char *)(v2 + 56);
    *(_WORD *)(a1 + 64) = *(_WORD *)(v2 + 64);
    *(_DWORD *)(a1 + 68) = *(_DWORD *)(v2 + 68);
    *(_WORD *)(a1 + 72) = *(_WORD *)(v2 + 72);
    *(void *)(a1 + 76) = *(void *)(v2 + 76);
    uint64_t v6 = *(void *)(v2 + 88);
    uint64_t v5 = *(void *)(v2 + 96);
    if (v5) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    }
    long long v7 = *(std::__shared_weak_count **)(a1 + 96);
    *(void *)(a1 + 88) = v6;
    *(void *)(a1 + 96) = v5;
    if (v7) {
      nitro::nitro_function::nitro_function(v7);
    }
    objc_storeStrong((id *)(a1 + 104), *(id *)(*a2 + 104));
    uint64_t v8 = *a2;
    if (*(unsigned char *)(*a2 + 114))
    {
      (*(void (**)(uint64_t))(*(void *)a1 + 96))(a1);
      uint64_t v8 = *a2;
    }
    *(unsigned char *)(a1 + 127) = *(unsigned char *)(v8 + 127);
    *(unsigned char *)(a1 + 136) = *(unsigned char *)(v8 + 136);
    *(unsigned char *)(a1 + 53) = *(unsigned char *)(v8 + 53);
    *(_WORD *)(a1 + 54) = *(_WORD *)(v8 + 54);
    *(void *)(a1 + 128) = *(void *)(v8 + 128);
    *(unsigned char *)(a1 + 121) = *(unsigned char *)(v8 + 121);
  }
}

void Espresso::abstract_context::~abstract_context(id *this)
{
  *this = &unk_1EE33D8C0;

  uint64_t v2 = (std::__shared_weak_count *)this[12];
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)this[4];
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)this[2];
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
}

void Espresso::cpu_context_transfer_algo_t::create_net_info_ir(uint64_t a1, Espresso ***a2, void *a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  unsigned int v7 = a5;
  Espresso::cpu_context_transfer_algo_t::assemble_input_output_blob_topology(a1, a2, (uint64_t)a3, a4, a5, a6);
  Espresso::cpu_context_transfer_algo_t::assemble_producers_and_consumers(v12, (uint64_t **)a6);
  Espresso::cpu_context_transfer_algo_t::is_kernel_registered_on_engine(v13, a2, (uint64_t **)a6, a3, v7, a4);
  Espresso::cpu_context_transfer_algo_t::check_all_kernels_availability_on_context(a1, a2, a3, v7, (uint64_t **)a6);
  Espresso::cpu_context_transfer_algo_t::may_invalidate_ane_layers_after_custom_layer(v14, v15, (uint64_t)a3, v16, (uint64_t **)a6);
  int v17 = (***(uint64_t (****)(void))(*a3 + 8))();
  if ((v17 - 10006) > 5 || ((0x2Fu >> (v17 - 22)) & 1) == 0) {
    goto LABEL_37;
  }
  uint64_t v20 = *(void *)*a6;
  uint64_t v19 = *(void *)(*a6 + 8);
  if (v19 == v20) {
    goto LABEL_37;
  }
  uint64_t v21 = 0;
  unint64_t v22 = (v19 - v20) / 224;
  if (v22 <= 1) {
    unint64_t v22 = 1;
  }
  uint64_t v23 = v20 + 48;
  uint64_t v24 = -1;
  do
  {
    uint64_t v25 = v24;
    int v26 = *(char *)(v23 + 23);
    if (v26 < 0)
    {
      if (*(void *)(v23 + 8) != 15) {
        goto LABEL_18;
      }
      uint64_t v27 = *(uint64_t **)v23;
    }
    else
    {
      uint64_t v27 = (uint64_t *)v23;
      if (v26 != 15) {
        goto LABEL_18;
      }
    }
    uint64_t v28 = *v27;
    uint64_t v29 = *(uint64_t *)((char *)v27 + 7);
    if (v28 != 0x64656C656E6E7574 || v29 != 0x706F5F656E615F64)
    {
LABEL_18:
      uint64_t v24 = v25;
      goto LABEL_19;
    }
    uint64_t v24 = v21;
    if ((v25 & 0x8000000000000000) == 0)
    {
      uint64_t v24 = v21;
      if (v21 == v25 + 1)
      {
        *(unsigned char *)(v20 + 224 * v21 + 105) = 0;
        Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Multiple contigous tunneled segments are not supported in the same network.");
      }
    }
LABEL_19:
    ++v21;
    v23 += 224;
  }
  while (v22 != v21);
  if ((v24 & 0x8000000000000000) == 0)
  {
    uint64_t v31 = v20 + 56;
    do
    {
      uint64_t v32 = (void *)(v31 - 8);
      int v33 = *(char *)(v31 + 15);
      if (v33 < 0)
      {
        if (*(void *)v31 == 15)
        {
          uint64_t v32 = (void *)*v32;
LABEL_31:
          unsigned int v34 = (void *)*v32;
          uint64_t v35 = *(void *)((char *)v32 + 7);
          if (v34 == (void *)0x64656C656E6E7574 && v35 == 0x706F5F656E615F64) {
            goto LABEL_36;
          }
        }
      }
      else if (v33 == 15)
      {
        goto LABEL_31;
      }
      *(unsigned char *)(v31 + 49) = 0;
LABEL_36:
      v31 += 224;
      --v22;
    }
    while (v22);
  }
LABEL_37:
  int v37 = (***(uint64_t (****)(void))(*a3 + 8))(*(void *)(*a3 + 8));
  if (v37 - 10006) <= 5 && ((0x2Fu >> (v37 - 22)))
  {
    uint64_t v39 = (uint64_t *)*a6;
    uint64_t v40 = *(void *)*a6;
    if (*(void *)(*a6 + 8) != v40)
    {
      for (unint64_t i = 0; i < 0x6DB6DB6DB6DB6DB7 * ((v39[1] - *v39) >> 5); ++i)
      {
        uint64_t v42 = v40 + 224 * i;
        uint64_t v43 = (void *)(v42 + 48);
        int v44 = *(char *)(v42 + 71);
        if (v44 < 0)
        {
          if (v43[1] != 9) {
            goto LABEL_79;
          }
          uint64_t v43 = (void *)*v43;
        }
        else if (v44 != 9)
        {
          goto LABEL_79;
        }
        uint64_t v45 = (void *)*v43;
        int v46 = *((unsigned __int8 *)v43 + 8);
        if (v45 != (void *)0x6E5F726568746167 || v46 != 100) {
          goto LABEL_79;
        }
        uint64_t v48 = *(void **)(v40 + 224 * i + 88);
        if (v48
        {
          int v49 = *(std::__shared_weak_count **)(v40 + 224 * i + 96);
          if (v49) {
            atomic_fetch_add_explicit(&v49->__shared_owners_, 1uLL, memory_order_relaxed);
          }
        }
        else
        {
          int v49 = 0;
        }
        uint64_t v50 = (_DWORD *)(*(uint64_t (**)(void *))(*(void *)v48 + 320))(v48);
        if (v49) {
          nitro::nitro_function::nitro_function(v49);
        }
        if (*v50) {
          goto LABEL_79;
        }
        v100[0] = (uint64_t *)*a6;
        int v51 = v100[0];
        v100[1] = (uint64_t *)&v101;
        uint64_t v101 = v100[0];
        uint64_t v52 = *v100[0];
        uint64_t v53 = *v100[0] + 224 * i;
        int v54 = (void *)(v53 + 48);
        int v55 = *(char *)(v53 + 71);
        if (v55 < 0)
        {
          if (v54[1] != 9) {
            goto LABEL_79;
          }
          int v54 = (void *)*v54;
        }
        else if (v55 != 9)
        {
          goto LABEL_79;
        }
        uint64_t v56 = (void *)*v54;
        int v57 = *((unsigned __int8 *)v54 + 8);
        if (v56 == (void *)0x6E5F726568746167 && v57 == 100)
        {
          vDSP_Length v59 = *(void **)(v52 + 224 * i + 88);
          if (v59
          {
            uint64_t v60 = *(std::__shared_weak_count **)(v52 + 224 * i + 96);
            if (v60) {
              atomic_fetch_add_explicit(&v60->__shared_owners_, 1uLL, memory_order_relaxed);
            }
          }
          else
          {
            uint64_t v60 = 0;
          }
          uint64_t v61 = (_DWORD *)(*(uint64_t (**)(void *))(*(void *)v59 + 320))(v59);
          if (v60) {
            nitro::nitro_function::nitro_function(v60);
          }
          if (!*v61)
          {
            uint64_t v62 = v52 + 224 * i;
            float v65 = *(long long **)(v62 + 136);
            float v64 = (std::string **)(v62 + 136);
            long long v63 = v65;
            if (*((char *)v65 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&v99, *(const std::string::value_type **)v63, *((void *)v63 + 1));
            }
            else
            {
              long long v66 = *v63;
              v99.__r_.__value_.__r.__words[2] = *((void *)v63 + 2);
              *(_OWORD *)&v99.__r_.__value_.__l.__data_ = v66;
            }
            uint64_t v67 = v101;
            long long v68 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>((uint64_t)(v101 + 3), &v99);
            if (v67 + 4 == v68) {
              int v69 = -1;
            }
            else {
              int v69 = *((_DWORD *)v68 + 14);
            }
            if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v99.__r_.__value_.__l.__data_);
            }
            if (v69 != -1)
            {
              uint64_t v70 = *v51 + 224 * v69;
              uint64_t v71 = v70 + 48;
              int v72 = *(char *)(v70 + 71);
              if (v72 < 0)
              {
                if (*(void *)(v71 + 8) == 7)
                {
                  uint64_t v71 = *(void *)v71;
LABEL_95:
                  int v73 = *(_DWORD *)v71;
                  int v74 = *(_DWORD *)(v71 + 3);
                  if (v73 == 1752393074 && v74 == 1701863784)
                  {
                    Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v96, *(const Espresso::layer_shape **)(*v51 + 224 * v69 + 184), 0);
                    if (v98 == 4)
                    {
                      uint64_t v76 = *v64;
                      if (SHIBYTE((*v64)[1].__r_.__value_.__r.__words[2]) < 0) {
                        std::string::__init_copy_ctor_external(&v95, v76[1].__r_.__value_.__l.__data_, v76[1].__r_.__value_.__l.__size_);
                      }
                      else {
                        std::string v95 = v76[1];
                      }
                      if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(v95.__r_.__value_.__l.__data_);
                      }
                      if (v77)
                      {
                        float v78 = *v64;
                        if (SHIBYTE((*v64)[1].__r_.__value_.__r.__words[2]) < 0) {
                          std::string::__init_copy_ctor_external(&v94, v78[1].__r_.__value_.__l.__data_, v78[1].__r_.__value_.__l.__size_);
                        }
                        else {
                          std::string v94 = v78[1];
                        }
                        float v79 = v101;
                        float v80 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>((uint64_t)(v101 + 3), &v94);
                        if (v79 + 4 == v80) {
                          int v81 = -1;
                        }
                        else {
                          int v81 = *((_DWORD *)v80 + 14);
                        }
                        if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0) {
                          operator delete(v94.__r_.__value_.__l.__data_);
                        }
                        uint64_t v82 = *v51 + 224 * v81;
                        uint64_t v83 = *(long long **)(v82 + 136);
                        uint64_t v84 = *(long long **)(v82 + 144);
                        if (v83 != v84)
                        {
                          float v85 = (float)v97;
                          while (1)
                          {
                            if (*((char *)v83 + 23) < 0)
                            {
                              std::string::__init_copy_ctor_external(&v93, *(const std::string::value_type **)v83, *((void *)v83 + 1));
                            }
                            else
                            {
                              long long v86 = *v83;
                              v93.__r_.__value_.__r.__words[2] = *((void *)v83 + 2);
                              *(_OWORD *)&v93.__r_.__value_.__l.__data_ = v86;
                            }
                            if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0) {
                              operator delete(v93.__r_.__value_.__l.__data_);
                            }
                            if (v87) {
                              break;
                            }
                            uint64_t v83 = (long long *)((char *)v83 + 24);
                            if (v83 == v84) {
                              goto LABEL_79;
                            }
                          }
                          if (*((char *)v83 + 23) < 0)
                          {
                            std::string::__init_copy_ctor_external(&v92, *(const std::string::value_type **)v83, *((void *)v83 + 1));
                          }
                          else
                          {
                            long long v88 = *v83;
                            v92.__r_.__value_.__r.__words[2] = *((void *)v83 + 2);
                            *(_OWORD *)&v92.__r_.__value_.__l.__data_ = v88;
                          }
                          vDSP_Length v89 = v101;
                          uint64_t v90 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>((uint64_t)(v101 + 3), &v92);
                          if (v89 + 4 == v90) {
                            int v91 = -1;
                          }
                          else {
                            int v91 = *((_DWORD *)v90 + 14);
                          }
                          if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0) {
                            operator delete(v92.__r_.__value_.__l.__data_);
                          }
                          if (v91 != -1) {
                            operator new();
                          }
                        }
                      }
                    }
                  }
                }
              }
              else if (v72 == 7)
              {
                goto LABEL_95;
              }
            }
          }
        }
LABEL_79:
        uint64_t v40 = *v39;
      }
    }
  }
}

void sub_19212C8D4(_Unwind_Exception *a1)
{
  MEMORY[0x192FF16B0](v1, 0x1000C40E0EAB150);
  _Unwind_Resume(a1);
}

uint64_t Espresso::cpu_context_transfer_algo_t::may_invalidate_ane_layers_after_custom_layer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t **a5)
{
  uint64_t v5 = *a5;
  uint64_t result = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  if (result - 10006) <= 5 && ((0x2Fu >> (result - 22)))
  {
    uint64_t v8 = *v5;
    uint64_t v9 = v5[1];
    if (*v5 != v9)
    {
      char v10 = 0;
      do
      {
        int v11 = (uint64_t **)(v8 + 48);
        int v12 = *(char *)(v8 + 71);
        if (v12 < 0)
        {
          if (*(void *)(v8 + 56) != 5) {
            goto LABEL_16;
          }
          int v11 = (uint64_t **)*v11;
        }
        else if (v12 != 5)
        {
          goto LABEL_16;
        }
        int v13 = *(_DWORD *)v11;
        int v14 = *((unsigned __int8 *)v11 + 4);
        if (v13 == 1667854946 && v14 == 107)
        {
          int v17 = *(int32x4_t **)(v8 + 160);
          int v18 = *(int32x4_t **)(v8 + 168);
          if (v17 != v18)
          {
            while ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(*v17))) & 1) == 0 && !(v10 & 1 | (v17[1].i32[0] == 0)))
            {
              char v10 = 0;
              char v16 = 0;
              v17 += 4;
              if (v17 == v18) {
                goto LABEL_19;
              }
            }
            goto LABEL_17;
          }
        }
LABEL_16:
        if ((v10 & 1) == 0)
        {
          char v16 = 0;
          goto LABEL_19;
        }
LABEL_17:
        *(unsigned char *)(v8 + 105) = 0;
        char v16 = 1;
LABEL_19:
        v8 += 224;
        char v10 = v16;
      }
      while (v8 != v9);
    }
  }
  return result;
}

uint64_t Espresso::compute_network_shape<std::string,Espresso::layer_shape,std::unordered_map<std::string,Espresso::layer_shape>>(uint64_t a1, uint64_t a2, void *a3)
{
  *((void *)&v94 + 1) = *MEMORY[0x1E4F143B8];
  uint64_t v87 = a2;
  *(void *)(a1 + 8) = 0;
  *(void *)a1 = a1 + 8;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = a1 + 32;
  memset(v85, 0, sizeof(v85));
  int v86 = 1065353216;
  memset(v83, 0, sizeof(v83));
  int v84 = 1065353216;
  float v79 = 0;
  if (*(void *)(a2 + 40) != *(void *)(a2 + 32))
  {
    do
    {
      *(void *)long long buf = &v79;
      uint64_t v5 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(a2 + 56, (unint64_t *)&v79, (uint64_t)&std::piecewise_construct, (uint64_t **)buf);
      uint64_t v6 = (unsigned __int8 *)v5[3];
      unsigned int v7 = (unsigned __int8 *)v5[4];
      uint64_t v8 = v6;
      if (v6 != v7)
      {
        do
        {
          if (std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>(a3, v6))
          {
            uint64_t v9 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>(a3, v6);
            *(void *)long long buf = v6;
            char v10 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a1, v6, (long long **)buf);
            long long v11 = *(_OWORD *)(v9 + 40);
            long long v12 = *(_OWORD *)(v9 + 56);
            *((void *)v10 + 11) = *((void *)v9 + 9);
            *(_OWORD *)(v10 + 72) = v12;
            *(_OWORD *)(v10 + 56) = v11;
            if (v10 + 32 != (char *)(v9 + 16)) {
              std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v10 + 96, *((char **)v9 + 10), *((void *)v9 + 11), (uint64_t)(*((void *)v9 + 11) - *((void *)v9 + 10)) >> 2);
            }
          }
          if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v85, (uint64_t)v6))
          {
            std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)v83, (unint64_t *)&v79, &v79);
          }
          v6 += 24;
        }
        while (v6 != v7);
        uint64_t v6 = (unsigned __int8 *)v5[3];
        uint64_t v8 = (unsigned __int8 *)v5[4];
      }
      uint64_t v13 = *(void *)(*(void *)(*(void *)(v87 + 32) + 16 * (void)v79) + 64);
      if (((*(uint64_t (**)(uint64_t, unint64_t))(*(void *)v13 + 264))(v13, 0xAAAAAAAAAAAAAAABLL * ((v8 - v6) >> 3)) & 1) != 0|| std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::find<unsigned long>(v83, (unint64_t)v79))
      {
        *(void *)long long buf = &v79;
        int v14 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v87 + 96, (unint64_t *)&v79, (uint64_t)&std::piecewise_construct, (uint64_t **)buf);
        uint64_t v15 = v14[3];
        uint64_t v16 = v14[4];
        while (v15 != v16)
        {
          std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v85, v15, v15);
          v15 += 24;
        }
      }
      float v79 = (long long *)((char *)v79 + 1);
      a2 = v87;
      uint64_t v18 = *(void *)(v87 + 32);
      uint64_t v17 = *(void *)(v87 + 40);
    }
    while ((unint64_t)v79 < (v17 - v18) >> 4);
    int v82 = 0;
    if (v17 != v18)
    {
      unint64_t v19 = 0;
      do
      {
        *(void *)long long buf = v82;
        uint64_t v20 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(a2 + 56, v82, buf);
        float v79 = 0;
        float v80 = 0;
        unint64_t v81 = 0;
        std::vector<Espresso::layer_shape>::reserve((uint64_t *)&v79, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20[4] - v20[3]) >> 3));
        uint64_t v21 = (char *)v20[3];
        unint64_t v22 = (char *)v20[4];
        while (v21 != v22)
        {
          __p[0] = v21;
          uint64_t v23 = (long long *)(std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a1, v21, (long long **)__p)+ 56);
          uint64_t v24 = v80;
          if ((unint64_t)v80 >= v81)
          {
            uint64_t v25 = (long long *)std::vector<Espresso::layer_shape>::__push_back_slow_path<Espresso::layer_shape const&>((uint64_t *)&v79, v23);
          }
          else
          {
            std::vector<Espresso::layer_shape>::__construct_one_at_end[abi:ne180100]<Espresso::layer_shape const&>((uint64_t)&v79, v23);
            uint64_t v25 = v24 + 4;
          }
          float v80 = v25;
          v21 += 24;
        }
        uint64_t v76 = v18;
        if (!v82)
        {
          std::string::basic_string[abi:ne180100]<0>(buf, "");
          long long v63 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>(a3, buf);
          float v64 = v63;
          if ((buf[23] & 0x80000000) != 0)
          {
            operator delete(*(void **)buf);
            if (v64)
            {
LABEL_70:
              std::string::basic_string[abi:ne180100]<0>(__p, "");
              float v65 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>(a3, (unsigned __int8 *)__p);
              long long v66 = *(_OWORD *)(v65 + 56);
              *(_OWORD *)long long buf = *(_OWORD *)(v65 + 40);
              *(_OWORD *)&uint8_t buf[16] = v66;
              uint64_t v67 = (const void *)*((void *)v65 + 10);
              uint64_t v90 = *((void *)v65 + 9);
              std::string v92 = 0;
              uint64_t v93 = 0;
              int v91 = 0;
              std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v91, v67, *((void *)v65 + 11), (uint64_t)(*((void *)v65 + 11) - (void)v67) >> 2);
              std::vector<Espresso::layer_shape>::__assign_with_size[abi:ne180100]<Espresso::layer_shape const*,Espresso::layer_shape const*>((uint64_t *)&v79, (long long *)buf, &v94, 1uLL);
              if (v91)
              {
                std::string v92 = v91;
                operator delete(v91);
              }
              if (SHIBYTE(v78) < 0) {
                operator delete(__p[0]);
              }
              long long v68 = (char *)v20[3];
              int v69 = (char *)v20[4];
              if (v68 != v69)
              {
                uint64_t v70 = 0;
                do
                {
                  uint64_t v71 = v79;
                  __p[0] = v68;
                  int v72 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a1, v68, (long long **)__p);
                  long long v73 = v71[v70];
                  long long v74 = v71[v70 + 1];
                  *((void *)v72 + 11) = *(void *)&v71[v70 + 2];
                  *(_OWORD *)(v72 + 72) = v74;
                  *(_OWORD *)(v72 + 56) = v73;
                  if (&v71[v70] != (long long *)(v72 + 56)) {
                    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v72 + 96, *((char **)&v71[v70 + 2] + 1), *(void *)&v71[v70 + 3], (uint64_t)(*(void *)&v71[v70 + 3] - *((void *)&v71[v70 + 2] + 1)) >> 2);
                  }
                  v68 += 24;
                  v70 += 4;
                }
                while (v68 != v69);
              }
            }
          }
          else if (v63)
          {
            goto LABEL_70;
          }
        }
        __p[0] = 0;
        __p[1] = 0;
        uint64_t v78 = 0;
        std::vector<Espresso::layer_shape>::__init_with_size[abi:ne180100]<Espresso::layer_shape*,Espresso::layer_shape*>(__p, v79, v80, ((char *)v80 - (char *)v79) >> 6);
        *(void *)long long buf = v82;
        int v26 = (Espresso *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v87 + 96, v82, buf);
        uint64_t v28 = v26;
        int v30 = (unsigned __int8 *)*((void *)v26 + 3);
        uint64_t v29 = (unsigned __int8 *)*((void *)v26 + 4);
        if (v30 == v29)
        {
LABEL_33:
          BOOL v33 = 1;
        }
        else
        {
          uint64_t v31 = 0;
          unint64_t v32 = 1;
          while (1)
          {
            int v26 = (Espresso *)std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>(a3, v30);
            BOOL v33 = v26 != 0;
            if (!v26) {
              break;
            }
            unsigned int v34 = v26;
            uint64_t v35 = (char *)__p[0];
            if (v32 - 1 >= ((char *)__p[1] - (char *)__p[0]) >> 6)
            {
              std::vector<Espresso::layer_shape>::resize((uint64_t *)__p, v32);
              uint64_t v35 = (char *)__p[0];
            }
            uint64_t v36 = &v35[v31];
            long long v37 = *(_OWORD *)((char *)v34 + 40);
            long long v38 = *(_OWORD *)((char *)v34 + 56);
            *((void *)v36 + 4) = *((void *)v34 + 9);
            *(_OWORD *)uint64_t v36 = v37;
            *((_OWORD *)v36 + 1) = v38;
            if (v36 != (char *)v34 + 40) {
              int v26 = (Espresso *)std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v36 + 40, *((char **)v34 + 10), *((void *)v34 + 11), (uint64_t)(*((void *)v34 + 11) - *((void *)v34 + 10)) >> 2);
            }
            v30 += 24;
            ++v32;
            v31 += 64;
            if (v30 == v29) {
              goto LABEL_33;
            }
          }
        }
        if (!v33)
        {
          int v26 = *(Espresso **)(*(void *)(v76 + 16 * v19) + 64);
          if (v26)
          {
            (*(void (**)(unsigned char *__return_ptr))(*(void *)v26 + 64))(buf);
            std::vector<Espresso::layer_shape>::__vdeallocate((uint64_t *)__p);
            *(_OWORD *)std::string __p = *(_OWORD *)buf;
            uint64_t v78 = *(void *)&buf[16];
            long long v88 = (long long *)buf;
            memset(buf, 0, 24);
            std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v88);
          }
        }
        uint64_t v40 = __p[0];
        for (unint64_t i = __p[1]; v40 != i; v40 += 8)
        {
          v40[3] = 0;
          v40[4] = 0;
        }
        uint64_t v42 = (long long *)*((void *)v28 + 3);
        int v41 = (uint64_t *)*((void *)v28 + 4);
        if (v42 != (long long *)v41)
        {
          uint64_t v43 = 0;
          unint64_t v44 = 0;
          do
          {
            uint64_t v45 = (char *)__p[0];
            if (v44 >= ((char *)__p[1] - (char *)__p[0]) >> 6)
            {
              int v49 = Espresso::espresso_os_log_subsystem(v26, v27);
              if (os_log_type_enabled(v49, OS_LOG_TYPE_DEBUG))
              {
                uint64_t v62 = v42;
                if (*((char *)v42 + 23) < 0) {
                  uint64_t v62 = *(long long **)v42;
                }
                *(_DWORD *)long long buf = 136315650;
                *(void *)&uint8_t buf[4] = v62;
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = v82;
                *(_WORD *)&buf[18] = 1024;
                *(_DWORD *)&buf[20] = v44;
                _os_log_debug_impl(&dword_1920CB000, v49, OS_LOG_TYPE_DEBUG, "TODO: Blob shape not found:%s layer:%d j=%d", buf, 0x18u);
              }

              long long v88 = v42;
              uint64_t v50 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a1, v42, &v88);
              *(void *)&long long v51 = 0x100000001;
              *((void *)&v51 + 1) = 0x100000001;
              *(_OWORD *)(v50 + 56) = v51;
              *((void *)v50 + 9) = 0xFFFFFFFF00000001;
              *((void *)v50 + 10) = 0;
              *((void *)v50 + 11) = 0;
              uint64_t v53 = v50 + 96;
              uint64_t v52 = (void *)*((void *)v50 + 12);
              if (v52)
              {
                *((void *)v50 + 13) = v52;
                operator delete(v52);
                void *v53 = 0;
                v53[1] = 0;
                void v53[2] = 0;
              }
              void *v53 = 0;
              v53[1] = 0;
              void v53[2] = 0;
            }
            else
            {
              long long v88 = v42;
              int v46 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a1, v42, &v88);
              long long v47 = *(_OWORD *)&v45[v43];
              long long v48 = *(_OWORD *)&v45[v43 + 16];
              *((void *)v46 + 11) = *(void *)&v45[v43 + 32];
              *(_OWORD *)(v46 + 72) = v48;
              *(_OWORD *)(v46 + 56) = v47;
              if (&v45[v43] != v46 + 56) {
                std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v46 + 96, *(char **)&v45[v43 + 40], *(void *)&v45[v43 + 48], (uint64_t)(*(void *)&v45[v43 + 48] - *(void *)&v45[v43 + 40]) >> 2);
              }
            }
            if (std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::find<unsigned long>(v83, v19))
            {
              long long v88 = v42;
              int v54 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a1, v42, &v88);
              if ((*((_DWORD *)v54 + 18) & 0x80000000) != 0
                || (*((_DWORD *)v54 + 17) & 0x80000000) != 0
                || (*((_DWORD *)v54 + 16) & 0x80000000) != 0
                || (*((_DWORD *)v54 + 15) & 0x80000000) != 0
                || (*((_DWORD *)v54 + 14) & 0x80000000) != 0)
              {
                long long v88 = v42;
                int v55 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a1, v42, &v88);
                *(void *)&long long v56 = 0x100000001;
                *((void *)&v56 + 1) = 0x100000001;
                *(_OWORD *)(v55 + 56) = v56;
                *((void *)v55 + 9) = 0xFFFFFFFF00000001;
                *((void *)v55 + 10) = 0;
                *((void *)v55 + 11) = 0;
                vDSP_Length v58 = v55 + 96;
                int v57 = (void *)*((void *)v55 + 12);
                if (v57)
                {
                  *((void *)v55 + 13) = v57;
                  operator delete(v57);
                  void *v58 = 0;
                  v58[1] = 0;
                  _DWORD v58[2] = 0;
                }
                void *v58 = 0;
                v58[1] = 0;
                _DWORD v58[2] = 0;
              }
            }
            long long v88 = v42;
            vDSP_Length v59 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a1, v42, &v88);
            long long v60 = *(_OWORD *)(v59 + 72);
            *(_OWORD *)long long buf = *(_OWORD *)(v59 + 56);
            *(_OWORD *)&uint8_t buf[16] = v60;
            uint64_t v61 = (const void *)*((void *)v59 + 12);
            uint64_t v90 = *((void *)v59 + 11);
            int v91 = 0;
            std::string v92 = 0;
            uint64_t v93 = 0;
            std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v91, v61, *((void *)v59 + 13), (uint64_t)(*((void *)v59 + 13) - (void)v61) >> 2);
            int v26 = (Espresso *)v91;
            if (v91)
            {
              std::string v92 = v91;
              operator delete(v91);
            }
            uint64_t v42 = (long long *)((char *)v42 + 24);
            v43 += 64;
            ++v44;
          }
          while (v42 != (long long *)v41);
        }
        ++v82;
        *(void *)long long buf = __p;
        std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
        *(void *)long long buf = &v79;
        std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
        ++v19;
        a2 = v87;
        uint64_t v18 = *(void *)(v87 + 32);
      }
      while (v19 < (*(void *)(v87 + 40) - v18) >> 4);
    }
  }
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)v83);
  return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v85);
}

void sub_19212D42C()
{
  __cxa_end_catch();
  *(void *)(v0 - 192) = &v1;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)(v0 - 192));
  JUMPOUT(0x19212D4E0);
}

void sub_19212D440(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x19212D510);
}

void sub_19212D450(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t v25 = *(void **)(v24 - 152);
  if (v25)
  {
    *(void *)(v24 - 144) = v25;
    operator delete(v25);
  }
  if (a24 < 0) {
    operator delete(__p);
  }
  *(void *)(v24 - 192) = &v26;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)(v24 - 192));
  JUMPOUT(0x19212D4F8);
}

void sub_19212D4A4()
{
}

void *std::vector<Espresso::layer_shape>::__construct_one_at_end[abi:ne180100]<Espresso::layer_shape const&>(uint64_t a1, long long *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  long long v4 = *a2;
  long long v5 = a2[1];
  *(void *)(v3 + 32) = *((void *)a2 + 4);
  *(_OWORD *)uint64_t v3 = v4;
  *(_OWORD *)(v3 + 16) = v5;
  *(void *)(v3 + 48) = 0;
  *(void *)(v3 + 56) = 0;
  *(void *)(v3 + 40) = 0;
  uint64_t result = std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((void *)(v3 + 40), *((const void **)a2 + 5), *((void *)a2 + 6), (uint64_t)(*((void *)a2 + 6) - *((void *)a2 + 5)) >> 2);
  *(void *)(a1 + 8) = v3 + 64;
  return result;
}

void sub_19212D574(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t *std::vector<Espresso::layer_shape>::reserve(uint64_t *result, unint64_t a2)
{
  if (a2 > (result[2] - *result) >> 6)
  {
    uint64_t v2 = result;
    if (a2 >> 58) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v3 = result[1] - *result;
    v5[4] = result + 2;
    v5[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::layer_shape>>(a2);
    v5[1] = v5[0] + v3;
    v5[2] = v5[0] + v3;
    v5[3] = v5[0] + (v4 << 6);
    std::vector<Espresso::layer_shape>::__swap_out_circular_buffer(v2, v5);
    return (uint64_t *)std::__split_buffer<Espresso::layer_shape>::~__split_buffer((uint64_t)v5);
  }
  return result;
}

void Espresso::generic_concat_kernel::top_shapes_for_bottom_shapes(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  *((void *)&v37 + 1) = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *a2;
  if (*a2 == a2[1])
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  else
  {
    long long v7 = *(_OWORD *)(v4 + 16);
    uint64_t v8 = *(void *)(v4 + 32);
    long long v24 = *(_OWORD *)v4;
    long long v25 = v7;
    uint64_t v26 = v8;
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    uint64_t v29 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v27, *(const void **)(v4 + 40), *(void *)(v4 + 48), (uint64_t)(*(void *)(v4 + 48) - *(void *)(v4 + 40)) >> 2);
    long long v18 = v24;
    long long v19 = v25;
    uint64_t v20 = v26;
    std::string __p = 0;
    unint64_t v22 = 0;
    uint64_t v23 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v27, (uint64_t)v28, (v28 - (unsigned char *)v27) >> 2);
    uint64_t v9 = a2[1] - *a2;
    if ((unint64_t)v9 >= 0x41)
    {
      unint64_t v10 = v9 >> 6;
      BOOL v12 = DWORD1(v25) == -1 || SDWORD1(v25) > 3;
      int v13 = v18;
      int v14 = DWORD2(v18);
      if (v10 <= 2) {
        unint64_t v10 = 2;
      }
      unint64_t v15 = v10 - 1;
      uint64_t v16 = (_DWORD *)(*a2 + 72);
      do
      {
        if (v12)
        {
          v14 += *v16;
          DWORD2(v18) = v14;
          if (*(_WORD *)(a1 + 320))
          {
            DWORD2(v18) = *(unsigned __int16 *)(a1 + 320);
            int v14 = DWORD2(v18);
          }
        }
        else
        {
          v13 += *(v16 - 2);
          LODWORD(v18) = v13;
        }
        v16 += 16;
        --v15;
      }
      while (v15);
    }
    v32[0] = v18;
    v32[1] = v19;
    uint64_t v33 = v20;
    unsigned int v34 = 0;
    uint64_t v35 = 0;
    uint64_t v36 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v34, __p, (uint64_t)v22, (v22 - (unsigned char *)__p) >> 2);
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    int v30 = a3;
    char v31 = 0;
    uint64_t v17 = (char *)operator new(0x40uLL);
    *a3 = v17;
    a3[1] = v17;
    a3[2] = v17 + 64;
    a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), v32, &v37, (uint64_t)v17);
    if (v34)
    {
      uint64_t v35 = v34;
      operator delete(v34);
    }
    if (__p)
    {
      unint64_t v22 = __p;
      operator delete(__p);
    }
    if (v27)
    {
      uint64_t v28 = v27;
      operator delete(v27);
    }
  }
}

void sub_19212D804(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void **a25)
{
  *(void *)(v25 + 8) = v26;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&a25);
  uint64_t v29 = *(void **)(v27 - 88);
  if (v29)
  {
    *(void *)(v27 - 80) = v29;
    operator delete(v29);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a22) {
    operator delete(a22);
  }
  _Unwind_Resume(a1);
}

void Espresso::cpu_context_transfer_algo_t::is_kernel_registered_on_engine(uint64_t a1, void *a2, uint64_t **a3, void *a4, unsigned int a5, uint64_t a6)
{
  uint64_t v6 = **a3;
  uint64_t v45 = *a3;
  if ((*a3)[1] != v6)
  {
    unint64_t v8 = 0;
    uint64_t v9 = (void *)(a6 + 8);
    do
    {
      long long v10 = *(_OWORD *)(*a2 + 16 * v8);
      long long v11 = *(std::__shared_weak_count **)(*a2 + 16 * v8 + 8);
      long long v48 = v11;
      if (v11)
      {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v6 = *v45;
        long long v51 = v10;
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      else
      {
        long long v51 = (unint64_t)v10;
      }
      BOOL v12 = (std::__shared_weak_count *)a4[1];
      uint64_t v49 = *a4;
      uint64_t v50 = v12;
      if (v12) {
        atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      Espresso::create_kernel_for_engine(&v52, v6 + 224 * v8, (uint64_t *)&v51, &v49, a5);
      uint64_t v13 = v6 + 224 * v8;
      long long v14 = v52;
      long long v52 = 0uLL;
      unint64_t v15 = *(std::__shared_weak_count **)(v13 + 96);
      *(_OWORD *)(v13 + 88) = v14;
      uint64_t v16 = (uint64_t *)(v13 + 88);
      if (v15) {
        nitro::nitro_function::nitro_function(v15);
      }
      if (*((void *)&v52 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v52 + 1));
      }
      if (v50) {
        nitro::nitro_function::nitro_function(v50);
      }
      if (v48) {
        nitro::nitro_function::nitro_function(v48);
      }
      uint64_t v17 = *v16;
      if (*v16 && *(unsigned char *)(*a4 + 72))
      {
        long long v18 = *(_OWORD *)(*a2 + 16 * v8);
        uint64_t v19 = *(void *)(*a2 + 16 * v8 + 8);
        if (v19) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v19 + 8), 1uLL, memory_order_relaxed);
        }
        uint64_t v20 = *(std::__shared_weak_count **)(v17 + 232);
        *(_OWORD *)(v17 + 224) = v18;
        if (v20) {
          nitro::nitro_function::nitro_function(v20);
        }
      }
      uint64_t v47 = v6;
      uint64_t v21 = (void *)(v6 + 224 * v8);
      unint64_t v22 = v21 + 20;
      std::vector<Espresso::layer_shape>::__clear[abi:ne180100](v21 + 20);
      uint64_t v23 = v21 + 23;
      std::vector<Espresso::layer_shape>::__clear[abi:ne180100](v21 + 23);
      uint64_t v25 = (void *)v21[17];
      long long v24 = (void *)v21[18];
      if (v25 != v24)
      {
        uint64_t v26 = v47 + 224 * v8;
        uint64_t v27 = (uint64_t *)(v26 + 192);
        uint64_t v28 = (void *)(v26 + 200);
        while (1)
        {
          uint64_t v29 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>(a6, v25);
          if (v9 == v29) {
            break;
          }
          int v30 = (long long *)(v29 + 7);
          uint64_t v31 = *v27;
          if ((unint64_t)*v27 >= *v28)
          {
            uint64_t v32 = std::vector<Espresso::layer_shape>::__push_back_slow_path<Espresso::layer_shape const&>(v23, v30);
          }
          else
          {
            std::vector<Espresso::layer_shape>::__construct_one_at_end[abi:ne180100]<Espresso::layer_shape const&>((uint64_t)v23, v30);
            uint64_t v32 = v31 + 64;
          }
          *uint64_t v27 = v32;
          v25 += 3;
          if (v25 == v24) {
            goto LABEL_31;
          }
        }
        std::vector<Espresso::layer_shape>::__clear[abi:ne180100](v23);
      }
LABEL_31:
      uint64_t v33 = v47 + 224 * v8;
      uint64_t v35 = *(void **)(v33 + 112);
      unsigned int v34 = *(void **)(v33 + 120);
      if (v35 != v34)
      {
        uint64_t v36 = v47 + 224 * v8;
        long long v37 = (uint64_t *)(v36 + 168);
        long long v38 = (void *)(v36 + 176);
        while (1)
        {
          uint64_t v39 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>(a6, v35);
          if (v9 == v39) {
            break;
          }
          uint64_t v40 = (long long *)(v39 + 7);
          uint64_t v41 = *v37;
          if ((unint64_t)*v37 >= *v38)
          {
            uint64_t v42 = std::vector<Espresso::layer_shape>::__push_back_slow_path<Espresso::layer_shape const&>(v22, v40);
          }
          else
          {
            std::vector<Espresso::layer_shape>::__construct_one_at_end[abi:ne180100]<Espresso::layer_shape const&>((uint64_t)v22, v40);
            uint64_t v42 = v41 + 64;
          }
          uint64_t *v37 = v42;
          v35 += 3;
          if (v35 == v34) {
            goto LABEL_40;
          }
        }
        std::vector<Espresso::layer_shape>::__clear[abi:ne180100](v22);
      }
LABEL_40:
      if (v48) {
        nitro::nitro_function::nitro_function(v48);
      }
      ++v8;
      uint64_t v6 = *v45;
    }
    while (v8 < 0x6DB6DB6DB6DB6DB7 * ((v45[1] - *v45) >> 5));
  }
}

void sub_19212DB30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  if (a14)
  {
    nitro::nitro_function::nitro_function(a14);
    nitro::nitro_function::nitro_function(a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<Espresso::layer_shape>::__push_back_slow_path<Espresso::layer_shape const&>(uint64_t *a1, long long *a2)
{
  uint64_t v3 = (a1[1] - *a1) >> 6;
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 58) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v6 = a1[2] - *a1;
  if (v6 >> 5 > v4) {
    unint64_t v4 = v6 >> 5;
  }
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFC0) {
    unint64_t v7 = 0x3FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v7 = v4;
  }
  uint64_t v17 = a1 + 2;
  if (v7) {
    unint64_t v7 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::layer_shape>>(v7);
  }
  else {
    uint64_t v8 = 0;
  }
  unint64_t v9 = v7 + (v3 << 6);
  v14[0] = v7;
  v14[1] = v9;
  unint64_t v15 = v9;
  unint64_t v16 = v7 + (v8 << 6);
  long long v10 = *a2;
  long long v11 = a2[1];
  *(void *)(v9 + 32) = *((void *)a2 + 4);
  *(_OWORD *)unint64_t v9 = v10;
  *(_OWORD *)(v9 + 16) = v11;
  *(void *)(v9 + 48) = 0;
  *(void *)(v9 + 56) = 0;
  *(void *)(v9 + 40) = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((void *)(v9 + 40), *((const void **)a2 + 5), *((void *)a2 + 6), (uint64_t)(*((void *)a2 + 6) - *((void *)a2 + 5)) >> 2);
  v15 += 64;
  std::vector<Espresso::layer_shape>::__swap_out_circular_buffer(a1, v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<Espresso::layer_shape>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_19212DC6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<Espresso::layer_shape>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::vector<Espresso::layer_shape>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = result[1];
  uint64_t v4 = a2[1];
  if (v3 == *result)
  {
    uint64_t v5 = a2[1];
  }
  else
  {
    do
    {
      uint64_t v5 = v4 - 64;
      long long v6 = *(_OWORD *)(v3 - 48);
      uint64_t v7 = *(void *)(v3 - 32);
      *(_OWORD *)(v4 - 64) = *(_OWORD *)(v3 - 64);
      *(_OWORD *)(v4 - 48) = v6;
      *(void *)(v4 - 32) = v7;
      *(void *)(v4 - 24) = 0;
      *(void *)(v4 - 16) = 0;
      *(void *)(v4 - 8) = 0;
      *(_OWORD *)(v4 - 24) = *(_OWORD *)(v3 - 24);
      *(void *)(v4 - 8) = *(void *)(v3 - 8);
      *(void *)(v3 - 24) = 0;
      *(void *)(v3 - 16) = 0;
      *(void *)(v3 - 8) = 0;
      v4 -= 64;
      v3 -= 64;
    }
    while (v3 != v2);
  }
  a2[1] = v5;
  uint64_t v8 = *result;
  void *result = v5;
  a2[1] = v8;
  uint64_t v9 = result[1];
  result[1] = a2[2];
  a2[2] = v9;
  uint64_t v10 = result[2];
  result[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<Espresso::layer_shape>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != v3)
  {
    *(void *)(a1 + 16) = v2 - 64;
    uint64_t v4 = *(void **)(v2 - 24);
    if (v4)
    {
      *(void *)(v2 - 16) = v4;
      operator delete(v4);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 64;
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void Espresso::generic_deconvolution_kernel::top_shapes_for_bottom_shapes(uint64_t a1@<X0>, long long **a2@<X1>, void *a3@<X8>)
{
  *((void *)&v46 + 1) = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *a2;
  uint64_t v6 = *((void *)*a2 + 4);
  long long v7 = (*a2)[1];
  long long v33 = **a2;
  long long v34 = v7;
  uint64_t v35 = v6;
  uint64_t v36 = 0;
  long long v37 = 0;
  uint64_t v38 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v36, *((const void **)v5 + 5), *((void *)v5 + 6), (uint64_t)(*((void *)v5 + 6) - *((void *)v5 + 5)) >> 2);
  long long v27 = v33;
  long long v28 = v34;
  uint64_t v29 = v35;
  std::string __p = 0;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v36, (uint64_t)v37, (v37 - (unsigned char *)v36) >> 2);
  int v9 = v33;
  int v8 = DWORD1(v33);
  uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 384))(a1);
  int v11 = *(_DWORD *)(v10 + 40);
  int v12 = *(__int16 *)(v10 + 80);
  int v13 = *(__int16 *)(v10 + 82);
  int v14 = *(__int16 *)(v10 + 84);
  int v15 = *(__int16 *)(v10 + 86);
  int v16 = *(__int16 *)(v10 + 92);
  int v17 = *(__int16 *)(v10 + 94);
  int v18 = *(unsigned __int16 *)(v10 + 130);
  if (*(int *)(v10 + 136) < 1 || (int v19 = *(_DWORD *)(v10 + 140), v19 < 1))
  {
    int v20 = *(__int16 *)(v10 + 98);
    int v21 = *(__int16 *)(v10 + 72);
    int v22 = *(_DWORD *)(v10 + 48);
    int v23 = *(_DWORD *)(v10 + 52);
    int v24 = *(__int16 *)(v10 + 96);
    if (v24 > 1) {
      int v22 = (v22 - 1) * v24 + 1;
    }
    if (v20 > 1) {
      int v25 = (v23 - 1) * v20 + 1;
    }
    else {
      int v25 = v23;
    }
    switch(v21)
    {
      case -1:
      case 0:
        LODWORD(v27) = (v9 - 1) * v16 - (v13 + v12) + v22;
        int v19 = (v8 - 1) * v17 - (v15 + v14) + v25;
        goto LABEL_13;
      case 1:
      case 4:
        LODWORD(v27) = v9 * v16;
        int v19 = v8 * v17;
        goto LABEL_13;
      case 2:
      case 3:
        LODWORD(v27) = v22 + v9 * v16 - 1;
        int v19 = v25 + v8 * v17 - 1;
        goto LABEL_13;
      default:
        break;
    }
  }
  else
  {
    LODWORD(v27) = *(_DWORD *)(v10 + 136);
LABEL_13:
    DWORD1(v27) = v19;
  }
  if (v18) {
    int v11 = v18;
  }
  DWORD2(v27) = v11;
  v41[0] = v27;
  v41[1] = v28;
  uint64_t v42 = v29;
  uint64_t v43 = 0;
  unint64_t v44 = 0;
  uint64_t v45 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v43, __p, (uint64_t)v31, (v31 - (unsigned char *)__p) >> 2);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v39 = a3;
  char v40 = 0;
  uint64_t v26 = (char *)operator new(0x40uLL);
  *a3 = v26;
  a3[1] = v26;
  a3[2] = v26 + 64;
  a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), v41, &v46, (uint64_t)v26);
  if (v43)
  {
    unint64_t v44 = v43;
    operator delete(v43);
  }
  if (__p)
  {
    uint64_t v31 = __p;
    operator delete(__p);
  }
  if (v36)
  {
    long long v37 = v36;
    operator delete(v36);
  }
}

void sub_19212E01C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void **a25)
{
  *(void *)(v25 + 8) = v26;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&a25);
  uint64_t v29 = *(void **)(v27 - 88);
  if (v29)
  {
    *(void *)(v27 - 80) = v29;
    operator delete(v29);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a22) {
    operator delete(a22);
  }
  _Unwind_Resume(a1);
}

void Espresso::generic_batchnorm_kernel::top_shapes_for_bottom_shapes(_DWORD *a1@<X0>, long long **a2@<X1>, uint64_t *a3@<X8>)
{
  *((void *)&v58 + 1) = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *a2;
  long long v7 = (*a2)[1];
  int v8 = (uint64_t *)*((void *)*a2 + 4);
  long long v52 = **a2;
  long long v53 = v7;
  int v54 = v8;
  std::string __p = 0;
  long long v56 = 0;
  uint64_t v57 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *((const void **)v6 + 5), *((void *)v6 + 6), (uint64_t)(*((void *)v6 + 6) - *((void *)v6 + 5)) >> 2);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  int v9 = operator new(0x40uLL);
  a3[2] = (uint64_t)v9 + 64;
  *a3 = (uint64_t)v9;
  a3[1] = (uint64_t)v9;
  a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), &v52, &v58, (uint64_t)v9);
  if (__p)
  {
    long long v56 = __p;
    operator delete(__p);
  }
  if (a1[92])
  {
    int v10 = *((_DWORD *)*a2 + 4);
    uint64_t v11 = *((void *)*a2 + 1);
    unint64_t v12 = a3[1];
    unint64_t v13 = a3[2];
    if (v12 >= v13)
    {
      uint64_t v18 = (uint64_t)(v12 - *a3) >> 6;
      unint64_t v19 = v18 + 1;
      if ((unint64_t)(v18 + 1) >> 58) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v20 = v13 - *a3;
      if (v20 >> 5 > v19) {
        unint64_t v19 = v20 >> 5;
      }
      if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFC0) {
        unint64_t v21 = 0x3FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v21 = v19;
      }
      int v54 = a3 + 2;
      int v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::layer_shape>>(v21);
      int v23 = &v22[64 * v18];
      *(void *)&long long v52 = v22;
      *((void *)&v52 + 1) = v23;
      *((void *)&v53 + 1) = &v22[64 * v24];
      *(void *)int v23 = 0x100000001;
      *((void *)v23 + 1) = v11;
      *((_DWORD *)v23 + 4) = v10;
      *((_DWORD *)v23 + 5) = -1;
      *(_OWORD *)(v23 + 24) = 0u;
      *(_OWORD *)(v23 + 40) = 0u;
      *((void *)v23 + 7) = 0;
      *(void *)&long long v53 = v23 + 64;
      std::vector<Espresso::layer_shape>::__swap_out_circular_buffer(a3, &v52);
      unint64_t v14 = a3[1];
      std::__split_buffer<Espresso::layer_shape>::~__split_buffer((uint64_t)&v52);
    }
    else
    {
      *(void *)unint64_t v12 = 0x100000001;
      *(void *)(v12 + 8) = v11;
      *(_DWORD *)(v12 + 16) = v10;
      *(_DWORD *)(v12 + 20) = -1;
      unint64_t v14 = v12 + 64;
      *(_OWORD *)(v12 + 24) = 0u;
      *(_OWORD *)(v12 + 40) = 0u;
      *(void *)(v12 + 56) = 0;
      a3[1] = v12 + 64;
    }
    a3[1] = v14;
    uint64_t v25 = *a2;
    int v26 = *((_DWORD *)*a2 + 4);
    uint64_t v27 = *((void *)v25 + 1);
    unint64_t v28 = a3[2];
    if (v14 < v28)
    {
      *(void *)unint64_t v14 = 0x100000001;
      *(void *)(v14 + 8) = v27;
      *(_DWORD *)(v14 + 16) = v26;
LABEL_19:
      *(_DWORD *)(v14 + 20) = -1;
      uint64_t v29 = v14 + 64;
      *(_OWORD *)(v14 + 24) = 0u;
      *(_OWORD *)(v14 + 40) = 0u;
      *(void *)(v14 + 56) = 0;
      a3[1] = v14 + 64;
LABEL_28:
      a3[1] = v29;
      return;
    }
    uint64_t v30 = (uint64_t)(v14 - *a3) >> 6;
    if ((unint64_t)(v30 + 1) >> 58) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v31 = v28 - *a3;
    uint64_t v32 = v31 >> 5;
    if (v31 >> 5 <= (unint64_t)(v30 + 1)) {
      uint64_t v32 = v30 + 1;
    }
    if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFC0) {
      unint64_t v33 = 0x3FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v33 = v32;
    }
    int v54 = a3 + 2;
    long long v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::layer_shape>>(v33);
    uint64_t v35 = &v34[64 * v30];
    *(void *)&long long v52 = v34;
    *((void *)&v52 + 1) = v35;
    *((void *)&v53 + 1) = &v34[64 * v36];
    *(void *)uint64_t v35 = 0x100000001;
    *((void *)v35 + 1) = v27;
    *((_DWORD *)v35 + 4) = v26;
    goto LABEL_27;
  }
  if (a1[77] && !a1[78])
  {
    int v15 = *((_DWORD *)v6 + 2);
    unint64_t v16 = a3[1];
    unint64_t v17 = a3[2];
    if (v16 >= v17)
    {
      uint64_t v37 = (uint64_t)(v16 - *a3) >> 6;
      unint64_t v38 = v37 + 1;
      if ((unint64_t)(v37 + 1) >> 58) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v39 = v17 - *a3;
      if (v39 >> 5 > v38) {
        unint64_t v38 = v39 >> 5;
      }
      if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFC0) {
        unint64_t v40 = 0x3FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v40 = v38;
      }
      int v54 = a3 + 2;
      uint64_t v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::layer_shape>>(v40);
      uint64_t v42 = &v41[64 * v37];
      *(void *)&long long v52 = v41;
      *((void *)&v52 + 1) = v42;
      *((void *)&v53 + 1) = &v41[64 * v43];
      *(void *)uint64_t v42 = 0x100000001;
      *((_DWORD *)v42 + 2) = v15;
      *(void *)(v42 + 12) = 0x100000001;
      *((_DWORD *)v42 + 5) = -1;
      *(_OWORD *)(v42 + 24) = 0u;
      *(_OWORD *)(v42 + 40) = 0u;
      *((void *)v42 + 7) = 0;
      *(void *)&long long v53 = v42 + 64;
      std::vector<Espresso::layer_shape>::__swap_out_circular_buffer(a3, &v52);
      unint64_t v14 = a3[1];
      std::__split_buffer<Espresso::layer_shape>::~__split_buffer((uint64_t)&v52);
    }
    else
    {
      *(void *)unint64_t v16 = 0x100000001;
      *(_DWORD *)(v16 + 8) = v15;
      *(void *)(v16 + 12) = 0x100000001;
      *(_DWORD *)(v16 + 20) = -1;
      unint64_t v14 = v16 + 64;
      *(_OWORD *)(v16 + 24) = 0u;
      *(_OWORD *)(v16 + 40) = 0u;
      *(void *)(v16 + 56) = 0;
      a3[1] = v16 + 64;
    }
    a3[1] = v14;
    int v44 = *((_DWORD *)v6 + 2);
    unint64_t v45 = a3[2];
    if (v14 < v45)
    {
      *(void *)unint64_t v14 = 0x100000001;
      *(_DWORD *)(v14 + 8) = v44;
      *(void *)(v14 + 12) = 0x100000001;
      goto LABEL_19;
    }
    uint64_t v46 = (uint64_t)(v14 - *a3) >> 6;
    if ((unint64_t)(v46 + 1) >> 58) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v47 = v45 - *a3;
    uint64_t v48 = v47 >> 5;
    if (v47 >> 5 <= (unint64_t)(v46 + 1)) {
      uint64_t v48 = v46 + 1;
    }
    if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFC0) {
      unint64_t v49 = 0x3FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v49 = v48;
    }
    int v54 = a3 + 2;
    uint64_t v50 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::layer_shape>>(v49);
    uint64_t v35 = &v50[64 * v46];
    *(void *)&long long v52 = v50;
    *((void *)&v52 + 1) = v35;
    *((void *)&v53 + 1) = &v50[64 * v51];
    *(void *)uint64_t v35 = 0x100000001;
    *((_DWORD *)v35 + 2) = v44;
    *(void *)(v35 + 12) = 0x100000001;
LABEL_27:
    *((_DWORD *)v35 + 5) = -1;
    *(_OWORD *)(v35 + 24) = 0u;
    *(_OWORD *)(v35 + 40) = 0u;
    *((void *)v35 + 7) = 0;
    *(void *)&long long v53 = v35 + 64;
    std::vector<Espresso::layer_shape>::__swap_out_circular_buffer(a3, &v52);
    uint64_t v29 = a3[1];
    std::__split_buffer<Espresso::layer_shape>::~__split_buffer((uint64_t)&v52);
    goto LABEL_28;
  }
}

void sub_19212E4F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
}

void Espresso::generic_softmax_kernel::top_shapes_for_bottom_shapes(unsigned char *a1@<X0>, long long **a2@<X1>, uint64_t *a3@<X8>)
{
  *((void *)&v61 + 1) = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *a2;
  long long v7 = (uint64_t *)*((void *)*a2 + 4);
  long long v8 = (*a2)[1];
  long long v56 = **a2;
  long long v57 = v8;
  long long v58 = v7;
  long long __p = 0uLL;
  uint64_t v60 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *((const void **)v6 + 5), *((void *)v6 + 6), (uint64_t)(*((void *)v6 + 6) - *((void *)v6 + 5)) >> 2);
  a3[2] = 0;
  *a3 = 0;
  a3[1] = 0;
  uint64_t v51 = a3;
  LOBYTE(v52) = 0;
  int v9 = operator new(0x40uLL);
  *a3 = (uint64_t)v9;
  a3[1] = (uint64_t)v9;
  a3[2] = (uint64_t)v9 + 64;
  a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), &v56, &v61, (uint64_t)v9);
  if ((void)__p)
  {
    *((void *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  if (a1[304])
  {
    int v10 = *a2;
    if ((char *)a2[1] - (char *)*a2 != 128) {
      Espresso::throw_exception_selector<Espresso::invalid_argument_error>("To compute cross entropy, softmax kernel needs 2 inputs");
    }
    if (a1[305])
    {
      if (a1[307])
      {
        int v11 = *((_DWORD *)v10 + 21);
        if (v11 == -1)
        {
          if (*((_DWORD *)v10 + 20) == 1) {
            int v11 = 4;
          }
          else {
            int v11 = 5;
          }
        }
        std::vector<int>::vector(&v50, v11);
        begiuint64_t n = v50.__begin_;
        if (v11 >= 1) {
          memset_pattern16(v50.__begin_, &xmmword_192DCA970, 4 * v11);
        }
        v47[0] = 0;
        v47[1] = 0;
        int v48 = 0;
        uint64_t v13 = (char *)v50.__end_ - (char *)begin;
        if (v50.__end_ != begin)
        {
          uint64_t v14 = v13 >> 2;
          if ((unint64_t)(v13 >> 2) <= 1) {
            uint64_t v14 = 1;
          }
          int v15 = (int *)v47;
          do
          {
            int v16 = *begin++;
            *v15++ = v16;
            --v14;
          }
          while (v14);
        }
        int v49 = (unint64_t)v13 >> 2;
        Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)v47, 0, (uint64_t)&v56);
        unint64_t v17 = a3[1];
        unint64_t v18 = a3[2];
        if (v17 >= v18)
        {
          uint64_t v28 = (uint64_t)(v17 - *a3) >> 6;
          unint64_t v29 = v28 + 1;
          if ((unint64_t)(v28 + 1) >> 58) {
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v30 = v18 - *a3;
          if (v30 >> 5 > v29) {
            unint64_t v29 = v30 >> 5;
          }
          if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFC0) {
            unint64_t v31 = 0x3FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v31 = v29;
          }
          int v55 = a3 + 2;
          uint64_t v32 = (uint64_t *)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::layer_shape>>(v31);
          unint64_t v33 = (char *)&v32[8 * v28];
          uint64_t v51 = v32;
          long long v52 = v33;
          int v54 = (char *)&v32[8 * v34];
          long long v35 = v57;
          uint64_t v36 = v58;
          *(_OWORD *)unint64_t v33 = v56;
          *((_OWORD *)v33 + 1) = v35;
          *((void *)v33 + 4) = v36;
          *((void *)v33 + 5) = 0;
          *((void *)v33 + 6) = 0;
          *((void *)v33 + 7) = 0;
          *(_OWORD *)(v33 + 40) = __p;
          *((void *)v33 + 7) = v60;
          long long __p = 0uLL;
          uint64_t v60 = 0;
          long long v53 = v33 + 64;
          std::vector<Espresso::layer_shape>::__swap_out_circular_buffer(a3, &v51);
          uint64_t v37 = a3[1];
          std::__split_buffer<Espresso::layer_shape>::~__split_buffer((uint64_t)&v51);
          unint64_t v38 = (void *)__p;
          a3[1] = v37;
          if (v38)
          {
            *((void *)&__p + 1) = v38;
            operator delete(v38);
          }
        }
        else
        {
          long long v19 = v57;
          uint64_t v20 = v58;
          *(_OWORD *)unint64_t v17 = v56;
          *(_OWORD *)(v17 + 16) = v19;
          *(void *)(v17 + 32) = v20;
          *(void *)(v17 + 40) = 0;
          *(void *)(v17 + 48) = 0;
          *(void *)(v17 + 56) = 0;
          *(_OWORD *)(v17 + 40) = __p;
          *(void *)(v17 + 56) = v60;
          long long __p = 0uLL;
          uint64_t v60 = 0;
          a3[1] = v17 + 64;
        }
        if (v50.__begin_)
        {
          v50.__end_ = v50.__begin_;
          operator delete(v50.__begin_);
        }
      }
      else
      {
        unint64_t v24 = a3[1];
        unint64_t v25 = a3[2];
        if (v24 >= v25)
        {
          uint64_t v39 = (uint64_t)(v24 - *a3) >> 6;
          unint64_t v40 = v39 + 1;
          if ((unint64_t)(v39 + 1) >> 58) {
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v41 = v25 - *a3;
          if (v41 >> 5 > v40) {
            unint64_t v40 = v41 >> 5;
          }
          if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFC0) {
            unint64_t v42 = 0x3FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v42 = v40;
          }
          long long v58 = a3 + 2;
          uint64_t v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::layer_shape>>(v42);
          int v44 = &v43[64 * v39];
          *(void *)&long long v56 = v43;
          *((void *)&v56 + 1) = v44;
          *((void *)&v57 + 1) = &v43[64 * v45];
          *(void *)&long long v46 = 0x100000001;
          *((void *)&v46 + 1) = 0x100000001;
          *(_OWORD *)int v44 = v46;
          *((void *)v44 + 2) = 0xFFFFFFFF00000001;
          *(_OWORD *)(v44 + 24) = 0u;
          *(_OWORD *)(v44 + 40) = 0u;
          *((void *)v44 + 7) = 0;
          *(void *)&long long v57 = v44 + 64;
          std::vector<Espresso::layer_shape>::__swap_out_circular_buffer(a3, &v56);
          uint64_t v27 = a3[1];
          std::__split_buffer<Espresso::layer_shape>::~__split_buffer((uint64_t)&v56);
        }
        else
        {
          *(void *)&long long v26 = 0x100000001;
          *((void *)&v26 + 1) = 0x100000001;
          *(_OWORD *)unint64_t v24 = v26;
          *(void *)(v24 + 16) = 0xFFFFFFFF00000001;
          uint64_t v27 = v24 + 64;
          *(_OWORD *)(v24 + 24) = 0u;
          *(_OWORD *)(v24 + 40) = 0u;
          *(void *)(v24 + 56) = 0;
          a3[1] = v24 + 64;
        }
        a3[1] = v27;
      }
    }
    else
    {
      unint64_t v21 = v10 + 4;
      unint64_t v22 = a3[1];
      if (v22 >= a3[2])
      {
        uint64_t v23 = std::vector<Espresso::layer_shape>::__push_back_slow_path<Espresso::layer_shape const&>(a3, v21);
      }
      else
      {
        std::vector<Espresso::layer_shape>::__construct_one_at_end[abi:ne180100]<Espresso::layer_shape const&>((uint64_t)a3, v21);
        uint64_t v23 = v22 + 64;
      }
      a3[1] = v23;
    }
  }
}

void sub_19212E930(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27)
{
}

void Espresso::generic_pool_kernel::top_shapes_for_bottom_shapes(char *a1@<X0>, long long **a2@<X1>, void *a3@<X8>)
{
  *((void *)&v78 + 1) = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *a2;
  uint64_t v6 = *((void *)*a2 + 4);
  long long v7 = (*a2)[1];
  long long v60 = **a2;
  long long v61 = v7;
  uint64_t v62 = v6;
  long long v63 = 0;
  float v64 = 0;
  uint64_t v65 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v63, *((const void **)v5 + 5), *((void *)v5 + 6), (uint64_t)(*((void *)v5 + 6) - *((void *)v5 + 5)) >> 2);
  long long v54 = v60;
  long long v55 = v61;
  uint64_t v56 = v62;
  long long v57 = 0;
  long long v58 = 0;
  uint64_t v59 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v57, v63, (uint64_t)v64, (v64 - (unsigned char *)v63) >> 2);
  int v9 = v60;
  int v8 = DWORD1(v60);
  uint64_t v10 = (*(uint64_t (**)(char *))(*(void *)a1 + 384))(a1);
  int v12 = *(_DWORD *)(v10 + 4);
  int v11 = *(_DWORD *)(v10 + 8);
  int v14 = *(_DWORD *)(v10 + 12);
  int v13 = *(_DWORD *)(v10 + 16);
  int v15 = *(_DWORD *)(v10 + 20);
  int v16 = *(_DWORD *)(v10 + 24);
  int v17 = *(_DWORD *)(v10 + 32);
  int v18 = *(__int16 *)(v10 + 36);
  int v19 = *(__int16 *)(v10 + 44);
  int v20 = *(__int16 *)(v10 + 46);
  int v21 = *(__int16 *)(v10 + 48);
  int v22 = *(__int16 *)(v10 + 50);
  int v23 = *(_DWORD *)(v10 + 56);
  int v24 = *(unsigned __int16 *)(v10 + 66);
  int v25 = *(_DWORD *)(v10 + 72);
  if (v17)
  {
    if (v17 == 1)
    {
      LODWORD(v54) = (v9 - v12 + v13) / v13;
      DWORD1(v54) = (v8 - v11 + v15) / v15;
      if (v12 >= 0) {
        int v28 = v12;
      }
      else {
        int v28 = v12 + 1;
      }
      if (v13 == 1 && v28 >> 1 == v19) {
        LODWORD(v54) = v60;
      }
      if (v11 >= 0) {
        int v29 = v11;
      }
      else {
        int v29 = v11 + 1;
      }
      if (v15 == 1 && v29 >> 1 == v21) {
        DWORD1(v54) = DWORD1(v60);
      }
    }
    else if (v17 == 2)
    {
      unsigned int v26 = vcvtps_s32_f32((float)(v9 - v12 + v20 + v19) / (float)v13);
      unsigned int v27 = vcvtps_s32_f32((float)(v8 - v11 + v22 + v21) / (float)v15);
      LODWORD(v54) = v26 + 1;
      DWORD1(v54) = v27 + 1;
      if (!((v20 + v19 < 0) ^ __OFADD__(v20, v19) | (v20 + v19 == 0)) || v22 + v21 >= 1)
      {
        if ((int)(v15 * v27) >= DWORD1(v60) + (v22 + v21) / 2) {
          DWORD1(v54) = v27;
        }
        if ((int)(v13 * v26) >= (int)v60 + (v20 + v19) / 2) {
          LODWORD(v54) = v26;
        }
      }
    }
  }
  else
  {
    switch(*(_WORD *)(v10 + 36))
    {
      case 0xFFFF:
      case 0:
        int v9 = (v9 - v12 + v19 + v20) / v13 + 1;
        int v30 = v8 - v11 + v21 + v22;
        goto LABEL_52;
      case 1:
      case 4:
        int v9 = (v9 - 1) / v13 + 1;
        int v30 = v8 - 1;
        goto LABEL_52;
      case 2:
        int v9 = (v9 - v12) / v13 + 1;
        int v30 = v8 - v11;
LABEL_52:
        int v8 = v30 / v15 + 1;
        break;
      case 3:
        if (v12 >= 0) {
          int v31 = *(_DWORD *)(v10 + 4);
        }
        else {
          int v31 = v12 + 1;
        }
        signed int v32 = v31 & 0xFFFFFFFE;
        if (v11 >= 0) {
          int v33 = *(_DWORD *)(v10 + 8);
        }
        else {
          int v33 = v11 + 1;
        }
        signed int v34 = v33 & 0xFFFFFFFE;
        if (v34 > v32) {
          signed int v32 = v34;
        }
        int v35 = v32 & ~(v32 >> 31);
        if (v13 <= 1) {
          int v36 = 1;
        }
        else {
          int v36 = *(_DWORD *)(v10 + 16);
        }
        if (v15 <= 1) {
          int v37 = 1;
        }
        else {
          int v37 = *(_DWORD *)(v10 + 20);
        }
        if (v13 < 0) {
          int v36 = 1;
        }
        int v38 = ~v35;
        int v39 = (v9 + v38) / v36;
        if (v13 >= 0) {
          int v9 = v39 + 1;
        }
        else {
          int v9 = ~v39;
        }
        if (v15 < 0) {
          int v40 = 1;
        }
        else {
          int v40 = v37;
        }
        int v41 = (v8 + v38) / v40;
        if (v15 >= 0) {
          int v8 = v41 + 1;
        }
        else {
          int v8 = ~v41;
        }
        break;
      default:
        break;
    }
    LODWORD(v54) = v9 & ~(v9 >> 31);
    DWORD1(v54) = v8 & ~(v8 >> 31);
  }
  if (v23) {
    *(void *)&long long v54 = 0x100000001;
  }
  if (v24) {
    DWORD2(v54) = v24;
  }
  if (v25)
  {
    long long v68 = v54;
    long long v69 = v55;
    uint64_t v70 = v56;
    long long __p = 0;
    int v72 = 0;
    uint64_t v73 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v57, (uint64_t)v58, (v58 - (unsigned char *)v57) >> 2);
    v74[0] = v54;
    v74[1] = v55;
    uint64_t v75 = v56;
    uint64_t v76 = 0;
    v77[0] = 0;
    v77[1] = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v76, v57, (uint64_t)v58, (v58 - (unsigned char *)v57) >> 2);
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    long long v66 = a3;
    char v67 = 0;
    unint64_t v42 = (char *)operator new(0x80uLL);
    *a3 = v42;
    a3[1] = v42;
    a3[2] = v42 + 128;
    uint64_t v43 = 0;
    a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), &v68, &v78, (uint64_t)v42);
    do
    {
      int v44 = (void *)v77[v43 - 1];
      if (v44)
      {
        v77[v43] = v44;
        operator delete(v44);
      }
      v43 -= 8;
    }
    while (v43 != -16);
  }
  else
  {
    if (v14 >= 2)
    {
      int v45 = v61;
      switch(v18)
      {
        case -1:
        case 0:
          int v46 = v20 - v14 + v19 + v61;
          goto LABEL_78;
        case 1:
        case 4:
          int v46 = v61 - 1;
          goto LABEL_78;
        case 2:
          int v46 = v61 - v14;
LABEL_78:
          int v45 = v46 / v16 + 1;
          break;
        case 3:
          if (v16 <= 1) {
            int v47 = 1;
          }
          else {
            int v47 = v16;
          }
          int v48 = v61 - (v14 | 1);
          BOOL v49 = v16 < 0;
          if (v16 < 0) {
            int v50 = 1;
          }
          else {
            int v50 = v47;
          }
          int v51 = v48 / v50;
          if (v49) {
            int v45 = ~v51;
          }
          else {
            int v45 = v51 + 1;
          }
          break;
        default:
          break;
      }
      LODWORD(v55) = v45 & ~(v45 >> 31);
    }
    if (!Espresso::layer_shape::total_dim((Espresso::layer_shape *)&v54))
    {
      long long v53 = a1 + 176;
      if (a1[199] < 0) {
        long long v53 = *(const char **)v53;
      }
      Espresso::throw_exception_selector<Espresso::invalid_argument_error,int &,int &,int &,int &,int &,char const*>(v55, SHIDWORD(v54), SDWORD2(v54), SDWORD1(v54), v54, v53);
    }
    long long v68 = v54;
    long long v69 = v55;
    uint64_t v70 = v56;
    long long __p = 0;
    int v72 = 0;
    uint64_t v73 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v57, (uint64_t)v58, (v58 - (unsigned char *)v57) >> 2);
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    long long v66 = a3;
    char v67 = 0;
    long long v52 = (char *)operator new(0x40uLL);
    *a3 = v52;
    a3[1] = v52;
    a3[2] = v52 + 64;
    a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), &v68, v74, (uint64_t)v52);
    if (__p)
    {
      int v72 = __p;
      operator delete(__p);
    }
  }
  if (v57)
  {
    long long v58 = v57;
    operator delete(v57);
  }
  if (v63)
  {
    float v64 = v63;
    operator delete(v63);
  }
}

void sub_19212EF1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void **a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33)
{
  *(void *)(v33 + 8) = v34;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&a25);
  if (__p)
  {
    a33 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a14) {
    operator delete(a14);
  }
  if (a22) {
    operator delete(a22);
  }
  _Unwind_Resume(a1);
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::pool_params,Espresso::abstract_kernel_with_weights_>::get_params(uint64_t a1)
{
  return a1 + 304;
}

BOOL Espresso::ANECompilerEngine::mix_squeeze_kernel::is_valid_for_engine(uint64_t a1, int64x2_t **a2, unsigned int *a3)
{
  uint64_t v6 = (_OWORD *)*((void *)a3 + 6);
  long long v7 = (std::__shared_weak_count *)*((void *)v6 + 10);
  if (v7)
  {
    int v8 = std::__shared_weak_count::lock(v7);
    if (v8) {
      int v9 = (const Espresso::net *)*((void *)v6 + 9);
    }
    else {
      int v9 = 0;
    }
  }
  else
  {
    int v9 = 0;
    int v8 = 0;
  }
  Espresso::ANECompilerEngine::ane_arch_allow_network_override((uint64_t)v9 + 472);
  uint64_t v10 = (Espresso::ANECompilerEngine *)objc_claimAutoreleasedReturnValue();
  if (Espresso::ANECompilerEngine::is_mix(v10, v11))
  {
    int v12 = *a2;
    int v13 = a2[1];
    v86[0] = v12;
    v86[1] = v13;
    if (v13) {
      atomic_fetch_add_explicit(&v13->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(&v80, "squeeze_kernel not supported on requested architecture.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v82, &v80, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v86, (Espresso::base_kernel::validate_for_engine_warning_t *)&v82);
    if (v85) {
      nitro::nitro_function::nitro_function(v85);
    }
    v74[0] = (void **)v84;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v74);
    v74[0] = (void **)v83;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v74);
    if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v82.__r_.__value_.__l.__data_);
    }
    if (v81 < 0) {
      operator delete((void *)v80);
    }
    if (v13) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v13);
    }
    BOOL v14 = 0;
    goto LABEL_93;
  }
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v15 = *(_OWORD **)a3;
  uint64_t v16 = *(void *)(*(void *)a3 + 32);
  long long v17 = *(_OWORD *)(*(void *)a3 + 16);
  v75[0] = *(_OWORD *)*(void *)a3;
  v75[1] = v17;
  uint64_t v76 = v16;
  long long __p = 0;
  long long v78 = 0;
  uint64_t v79 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *((const void **)v15 + 5), *((void *)v15 + 6), (uint64_t)(*((void *)v15 + 6) - *((void *)v15 + 5)) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)&v80, v9, (const Espresso::layer_shape *)v75, 1);
  if (__p)
  {
    long long v78 = __p;
    operator delete(__p);
  }
  if (v8)
  {
    nitro::nitro_function::nitro_function(v8);
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v18 = (_OWORD *)*((void *)a3 + 3);
  uint64_t v19 = *((void *)v18 + 4);
  long long v20 = v18[1];
  v69[0] = *v18;
  v69[1] = v20;
  uint64_t v70 = v19;
  uint64_t v71 = 0;
  int v72 = 0;
  uint64_t v73 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v71, *((const void **)v18 + 5), *((void *)v18 + 6), (uint64_t)(*((void *)v18 + 6) - *((void *)v18 + 5)) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v74, v9, (const Espresso::layer_shape *)v69, 1);
  if (v71)
  {
    int v72 = v71;
    operator delete(v71);
  }
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  int v21 = v10;
  if (Espresso::ANECompilerEngine::blob_shape_ane_compatible(&v80, v21))
  {
    if (Espresso::ANECompilerEngine::blob_shape_ane_compatible(v74, v21))
    {
      char v66 = 1;
      std::string::basic_string[abi:ne180100]<0>(v67, "Success");
    }
    else
    {
      char v66 = 0;
      std::string::basic_string[abi:ne180100]<0>(v67, "Output blob dimensions exceed ANE limit.");
    }
  }
  else
  {
    char v66 = 0;
    std::string::basic_string[abi:ne180100]<0>(v67, "Input blob dimensions exceed ANE limit.");
  }

  if (!v66)
  {
    int v30 = *a2;
    int v31 = a2[1];
    v65[0] = v30;
    v65[1] = v31;
    if (v31) {
      atomic_fetch_add_explicit(&v31->i64[1], 1uLL, memory_order_relaxed);
    }
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v82, (long long *)v67, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v65, (Espresso::base_kernel::validate_for_engine_warning_t *)&v82);
    if (v85) {
      nitro::nitro_function::nitro_function(v85);
    }
    long long v52 = (void **)v84;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v52);
    long long v52 = (void **)v83;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v52);
    if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v82.__r_.__value_.__l.__data_);
    }
    if (v31) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v31);
    }
    BOOL v14 = 0;
    goto LABEL_91;
  }
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v22 = *(_OWORD **)a3;
  uint64_t v23 = *(void *)(*(void *)a3 + 32);
  long long v24 = *(_OWORD *)(*(void *)a3 + 16);
  v59[0] = *(_OWORD *)*(void *)a3;
  v59[1] = v24;
  uint64_t v60 = v23;
  long long v61 = 0;
  uint64_t v62 = 0;
  uint64_t v63 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v61, *((const void **)v22 + 5), *((void *)v22 + 6), (uint64_t)(*((void *)v22 + 6) - *((void *)v22 + 5)) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)&v82, v9, (const Espresso::layer_shape *)v59, 1);
  unsigned int v25 = v83[1];
  if (v61)
  {
    uint64_t v62 = v61;
    operator delete(v61);
  }
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  unsigned int v64 = v25;
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v57, *(const Espresso::layer_shape **)a3, 0);
  long long v55 = xmmword_192DAF430;
  int v56 = 4;
  Espresso::ANECompilerEngine::mix_squeeze_kernel::gen_transpose_params_for_squeeze((uint64_t)&v52, a1, (uint64_t)v57, &v64, v58, (uint64_t)&v55);
  if (!(_BYTE)v52)
  {
    signed int v32 = *a2;
    uint64_t v33 = a2[1];
    v51[0] = v32;
    v51[1] = v33;
    if (v33) {
      atomic_fetch_add_explicit(&v33->i64[1], 1uLL, memory_order_relaxed);
    }
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v82, &v53, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v51, (Espresso::base_kernel::validate_for_engine_warning_t *)&v82);
    if (v85) {
      nitro::nitro_function::nitro_function(v85);
    }
    v43[0] = v84;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v43);
    v43[0] = v83;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v43);
    if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v82.__r_.__value_.__l.__data_);
    }
    if (v33) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v33);
    }
    BOOL v14 = 0;
    goto LABEL_89;
  }
  Espresso::ANECompilerEngine::DecomposeTranspose((unint64_t **)v50, (unsigned int *)&v55, 1);
  unsigned int v26 = Espresso::ANECompilerEngine::bottom_compute_path((Espresso::ANECompilerEngine *)a3, v9, 0);
  uint64_t v27 = **((void **)a3 + 6) + 224 * *((void *)a3 + 9);
  int v28 = *(void **)(v27 + 112);
  if (*(void **)(v27 + 120) == v28) {
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  }
  if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*((void **)v9 + 45), v28))
  {
    unsigned int v29 = *(_DWORD *)(std::map<std::string,Espresso::blob_numerical_properties>::at((uint64_t)v9 + 352, v28) + 8);
    if (v29 == -1) {
      unsigned int v29 = 1;
    }
  }
  else
  {
    unsigned int v29 = a3[16];
  }
  if (v26 <= 1) {
    unsigned int v34 = 1;
  }
  else {
    unsigned int v34 = v26;
  }
  if (v29 <= 1) {
    unsigned int v29 = 1;
  }
  if (v34 == v29)
  {
    if (v34 < 8 && ((0x4Bu >> (v34 - 1)) & 1) != 0)
    {
      uint64_t v39 = *((void *)&off_1E5747AB0 + (int)(v34 - 1));
      Espresso::ANECompilerEngine::ane_kernel::get_ane_validator((Espresso::ANECompilerEngine::ane_kernel *)&v46, (NSString *)(a1 + 424), v21);
      Espresso::ANECompilerEngine::validate_transpose((uint64_t)v43, (uint64_t)&v46, (uint64_t)&v80, v39, (unsigned int **)v50);
      BOOL v14 = LOBYTE(v43[0]) != 0;
      if (!LOBYTE(v43[0]))
      {
        int v40 = *a2;
        int v41 = a2[1];
        v42[0] = v40;
        v42[1] = v41;
        if (v41) {
          atomic_fetch_add_explicit(&v41->i64[1], 1uLL, memory_order_relaxed);
        }
        Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v82, (long long *)&v43[1], (uint64_t)a3, 0);
        Espresso::emit_kernel_validation_warning(v42, (Espresso::base_kernel::validate_for_engine_warning_t *)&v82);
        Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((Espresso::base_kernel::validate_for_engine_warning_t *)&v82);
        if (v41) {
          nitro::nitro_function::nitro_function((std::__shared_weak_count *)v41);
        }
      }
      if (v45 < 0) {
        operator delete(v43[1]);
      }
      if (v47) {
        nitro::nitro_function::nitro_function(v47);
      }
      goto LABEL_87;
    }
    int v35 = *a2;
    int v36 = a2[1];
    v48[0] = v35;
    v48[1] = v36;
    if (v36) {
      atomic_fetch_add_explicit(&v36->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v43, "squeeze_kernel: invalid compute path for input.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v82, (long long *)v43, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v48, (Espresso::base_kernel::validate_for_engine_warning_t *)&v82);
  }
  else
  {
    int v37 = *a2;
    int v36 = a2[1];
    v49[0] = v37;
    v49[1] = v36;
    if (v36) {
      atomic_fetch_add_explicit(&v36->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v43, "squeeze_kernel: cannot change compute paths. Try quantizing your model differently in order to cast.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v82, (long long *)v43, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v49, (Espresso::base_kernel::validate_for_engine_warning_t *)&v82);
  }
  if (v85) {
    nitro::nitro_function::nitro_function(v85);
  }
  int v46 = (void **)v84;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v46);
  int v46 = (void **)v83;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v46);
  if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v82.__r_.__value_.__l.__data_);
  }
  if (v44 < 0) {
    operator delete(v43[0]);
  }
  if (v36) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v36);
  }
  BOOL v14 = 0;
LABEL_87:
  if (v50[0]) {
    operator delete(v50[0]);
  }
LABEL_89:
  if (v54 < 0) {
    operator delete((void *)v53);
  }
LABEL_91:
  if (v68 < 0) {
    operator delete(v67[0]);
  }
LABEL_93:

  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  return v14;
}

void sub_19212F714(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, std::__shared_weak_count *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((Espresso::base_kernel::validate_for_engine_warning_t *)(v64 - 208));
  if (v63) {
    nitro::nitro_function::nitro_function(v63);
  }
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a20) {
    nitro::nitro_function::nitro_function(a20);
  }
  if (a25) {
    operator delete(a25);
  }
  if (a36 < 0) {
    operator delete(a31);
  }
  if (a61 < 0) {
    operator delete(a56);
  }

  if (v61) {
    nitro::nitro_function::nitro_function(v61);
  }
  _Unwind_Resume(a1);
}

void sub_19212F910()
{
  if (!v0) {
    JUMPOUT(0x19212F908);
  }
  JUMPOUT(0x19212F900);
}

BOOL Espresso::ANECompilerEngine::transpose_kernel::is_valid_for_engine(uint64_t a1, int64x2_t **a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a3;
  uint64_t v7 = *(void *)(a3 + 24);
  uint64_t v8 = *(void *)(a3 + 48);
  int v9 = *(std::__shared_weak_count **)(v8 + 80);
  if (v9)
  {
    uint64_t v10 = std::__shared_weak_count::lock(v9);
    if (v10) {
      uint64_t v11 = *(void *)(v8 + 72);
    }
    else {
      uint64_t v11 = 0;
    }
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t v10 = 0;
  }
  int v12 = Espresso::ANECompilerEngine::ane_arch_allow_network_override(v11 + 472);
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v13 = *(_OWORD *)(v6 + 16);
  uint64_t v14 = *(void *)(v6 + 32);
  v65[0] = *(_OWORD *)v6;
  v65[1] = v13;
  uint64_t v66 = v14;
  char v67 = 0;
  char v68 = 0;
  uint64_t v69 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v67, *(const void **)(v6 + 40), *(void *)(v6 + 48), (uint64_t)(*(void *)(v6 + 48) - *(void *)(v6 + 40)) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v70, (const Espresso::net *)v11, (const Espresso::layer_shape *)v65, 1);
  if (v67)
  {
    char v68 = v67;
    operator delete(v67);
  }
  if (v10)
  {
    nitro::nitro_function::nitro_function(v10);
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v15 = *(_OWORD *)(v7 + 16);
  uint64_t v16 = *(void *)(v7 + 32);
  v59[0] = *(_OWORD *)v7;
  v59[1] = v15;
  uint64_t v60 = v16;
  long long __p = 0;
  uint64_t v62 = 0;
  uint64_t v63 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *(const void **)(v7 + 40), *(void *)(v7 + 48), (uint64_t)(*(void *)(v7 + 48) - *(void *)(v7 + 40)) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v64, (const Espresso::net *)v11, (const Espresso::layer_shape *)v59, 1);
  if (__p)
  {
    uint64_t v62 = __p;
    operator delete(__p);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  Espresso::ANECompilerEngine::transpose_kernel::supported_by_hw((uint64_t)v56, v12, v70, v64);
  if (!v56[0])
  {
    int v22 = *a2;
    uint64_t v19 = a2[1];
    v55[0] = v22;
    v55[1] = v19;
    if (v19) {
      atomic_fetch_add_explicit(&v19->i64[1], 1uLL, memory_order_relaxed);
    }
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v51, &v57, a3, 0);
    Espresso::emit_kernel_validation_warning(v55, (Espresso::base_kernel::validate_for_engine_warning_t *)&v51);
    if (v54) {
      nitro::nitro_function::nitro_function(v54);
    }
    v42.__r_.__value_.__r.__words[0] = (std::string::size_type)v53;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v42);
    v42.__r_.__value_.__r.__words[0] = (std::string::size_type)v52;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v42);
    if ((SHIBYTE(v51.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_37;
    }
    long long v20 = (void *)v51.__r_.__value_.__r.__words[0];
    goto LABEL_36;
  }
  if ((v64[6] == 5 || v64[5] != 1)
    && Espresso::ANECompilerEngine::is_mix((Espresso::ANECompilerEngine *)v12, v17))
  {
    int v18 = *a2;
    uint64_t v19 = a2[1];
    v50[0] = v18;
    v50[1] = v19;
    if (v19) {
      atomic_fetch_add_explicit(&v19->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(&v42, "Invalid transpose, rank 5 transpose not supported on specified architecture.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v51, (long long *)&v42, a3, 0);
    Espresso::emit_kernel_validation_warning(v50, (Espresso::base_kernel::validate_for_engine_warning_t *)&v51);
    if (v54) {
      nitro::nitro_function::nitro_function(v54);
    }
    v49[0] = v53;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v49);
    v49[0] = v52;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v49);
    if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v51.__r_.__value_.__l.__data_);
    }
    if ((SHIBYTE(v42.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_37;
    }
    long long v20 = (void *)v42.__r_.__value_.__r.__words[0];
LABEL_36:
    operator delete(v20);
LABEL_37:
    if (v19) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v19);
    }
    BOOL v23 = 0;
    goto LABEL_101;
  }
  if (*(void *)(a1 + 520))
  {
    int v21 = 1;
  }
  else
  {
    int v24 = *(_DWORD *)(v6 + 20);
    if (v24 == 5 || v24 == -1 && *(_DWORD *)(v6 + 16) != 1) {
      int v21 = *(unsigned char *)(v11 + 1281) == 0;
    }
    else {
      int v21 = -1;
    }
  }
  Espresso::ANECompilerEngine::DecomposeTranspose((unint64_t **)v49, (unsigned int *)(a1 + 280), v21);
  if (!Espresso::ANECompilerEngine::is_mix((Espresso::ANECompilerEngine *)v12, v25)) {
    goto LABEL_71;
  }
  std::string::basic_string[abi:ne180100]<0>(&v51, "experimental.ane.early_arch_transposes");
  std::string::basic_string[abi:ne180100]<0>(v47, "0");
  Espresso::map_const_get<std::map<std::string,std::string>>(v11 + 472, (uint64_t)&v51, (uint64_t)v47, &v42);
  if (v48 < 0) {
    operator delete(v47[0]);
  }
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v51.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v42.__r_.__value_.__l.__size_ != 1) {
      goto LABEL_56;
    }
    unsigned int v26 = (std::string *)v42.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) != 1) {
      goto LABEL_56;
    }
    unsigned int v26 = &v42;
  }
  if (v26->__r_.__value_.__s.__data_[0] != 49)
  {
LABEL_56:
    if (v49[1] != v49[0])
    {
      uint64_t v27 = *a2;
      int v28 = a2[1];
      v46[0] = v27;
      v46[1] = v28;
      if (v28) {
        atomic_fetch_add_explicit(&v28->i64[1], 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(v47, "Invalid transpose for requested architecture would require transpose.");
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v51, (long long *)v47, a3, 0);
      Espresso::emit_kernel_validation_warning(v46, (Espresso::base_kernel::validate_for_engine_warning_t *)&v51);
      if (v54) {
        nitro::nitro_function::nitro_function(v54);
      }
      uint64_t v71 = (void **)v53;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v71);
      uint64_t v71 = (void **)v52;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v71);
      if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v51.__r_.__value_.__l.__data_);
      }
      if (v48 < 0) {
        operator delete(v47[0]);
      }
      if (v28) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v28);
      }
      if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v42.__r_.__value_.__l.__data_);
      }
      goto LABEL_98;
    }
  }
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v42.__r_.__value_.__l.__data_);
  }
LABEL_71:
  unsigned int v29 = Espresso::ANECompilerEngine::bottom_compute_path((Espresso::ANECompilerEngine *)a3, (const Espresso::base_kernel::validate_for_engine_args_t *)v11, 0);
  uint64_t v30 = **(void **)(a3 + 48) + 224 * *(void *)(a3 + 72);
  int v31 = *(void **)(v30 + 112);
  if (*(void **)(v30 + 120) == v31) {
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  }
  if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(void **)(v11 + 360), v31))
  {
    unsigned int v32 = *(_DWORD *)(std::map<std::string,Espresso::blob_numerical_properties>::at(v11 + 352, v31) + 8);
    if (v32 == -1) {
      unsigned int v32 = 1;
    }
  }
  else
  {
    unsigned int v32 = *(_DWORD *)(a3 + 64);
  }
  if (v29 <= 1) {
    unsigned int v33 = 1;
  }
  else {
    unsigned int v33 = v29;
  }
  if (v32 <= 1) {
    unsigned int v32 = 1;
  }
  if (v33 == v32)
  {
    if (v33 < 8 && ((0x4Bu >> (v33 - 1)) & 1) != 0)
    {
      int v38 = off_1E5746F40[v33 - 1];
      Espresso::ANECompilerEngine::ane_kernel::get_ane_validator((Espresso::ANECompilerEngine::ane_kernel *)v47, (NSString *)(a1 + 304), v12);
      Espresso::ANECompilerEngine::validate_transpose((uint64_t)&v42, (uint64_t)v47, (uint64_t)v70, (uint64_t)v38, (unsigned int **)v49);
      BOOL v23 = v42.__r_.__value_.__s.__data_[0] != 0;
      if (!v42.__r_.__value_.__s.__data_[0])
      {
        uint64_t v39 = *a2;
        int v40 = a2[1];
        v41[0] = v39;
        v41[1] = v40;
        if (v40) {
          atomic_fetch_add_explicit(&v40->i64[1], 1uLL, memory_order_relaxed);
        }
        Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v51, (long long *)&v42.__r_.__value_.__r.__words[1], a3, 0);
        Espresso::emit_kernel_validation_warning(v41, (Espresso::base_kernel::validate_for_engine_warning_t *)&v51);
        if (v54) {
          nitro::nitro_function::nitro_function(v54);
        }
        uint64_t v71 = (void **)v53;
        std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v71);
        uint64_t v71 = (void **)v52;
        std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v71);
        if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v51.__r_.__value_.__l.__data_);
        }
        if (v40) {
          nitro::nitro_function::nitro_function((std::__shared_weak_count *)v40);
        }
      }
      if (v43 < 0) {
        operator delete((void *)v42.__r_.__value_.__l.__size_);
      }
      if (v47[1]) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v47[1]);
      }
      goto LABEL_99;
    }
    unsigned int v34 = *a2;
    int v35 = a2[1];
    v44[0] = v34;
    v44[1] = v35;
    if (v35) {
      atomic_fetch_add_explicit(&v35->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(&v42, "transpose_kernel: invalid compute path for input.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v51, (long long *)&v42, a3, 0);
    Espresso::emit_kernel_validation_warning(v44, (Espresso::base_kernel::validate_for_engine_warning_t *)&v51);
  }
  else
  {
    int v36 = *a2;
    int v35 = a2[1];
    v45[0] = v36;
    v45[1] = v35;
    if (v35) {
      atomic_fetch_add_explicit(&v35->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(&v42, "Transpose cannot change compute paths. Try quantizing your model differently in order to cast.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v51, (long long *)&v42, a3, 0);
    Espresso::emit_kernel_validation_warning(v45, (Espresso::base_kernel::validate_for_engine_warning_t *)&v51);
  }
  if (v54) {
    nitro::nitro_function::nitro_function(v54);
  }
  v47[0] = v53;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v47);
  v47[0] = v52;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v47);
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v51.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v42.__r_.__value_.__l.__data_);
  }
  if (v35) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v35);
  }
LABEL_98:
  BOOL v23 = 0;
LABEL_99:
  if (v49[0]) {
    operator delete(v49[0]);
  }
LABEL_101:
  if (v58 < 0) {
    operator delete((void *)v57);
  }

  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  return v23;
}

void sub_19213006C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,std::__shared_weak_count *a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((Espresso::base_kernel::validate_for_engine_warning_t *)&a32);
  if (v56) {
    nitro::nitro_function::nitro_function(v56);
  }
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a25) {
    nitro::nitro_function::nitro_function(a25);
  }
  if (a27) {
    operator delete(a27);
  }
  if (a54 < 0) {
    operator delete(a49);
  }

  if (v54) {
    nitro::nitro_function::nitro_function(v54);
  }
  _Unwind_Resume(a1);
}

void sub_192130260()
{
  if (!v0) {
    JUMPOUT(0x192130258);
  }
  JUMPOUT(0x192130250);
}

uint64_t Espresso::ANECompilerEngine::mix_expand_dims_kernel::is_valid_for_engine(uint64_t a1, int64x2_t **a2, unsigned int *a3)
{
  uint64_t v6 = *((void *)a3 + 6);
  uint64_t v7 = *(std::__shared_weak_count **)(v6 + 80);
  if (v7)
  {
    uint64_t v8 = std::__shared_weak_count::lock(v7);
    if (v8) {
      int v9 = *(const Espresso::net **)(v6 + 72);
    }
    else {
      int v9 = 0;
    }
  }
  else
  {
    int v9 = 0;
    uint64_t v8 = 0;
  }
  uint64_t v10 = (uint64_t)v9 + 472;
  uint64_t v11 = Espresso::ANECompilerEngine::ane_arch_allow_network_override((uint64_t)v9 + 472);
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = *(void *)a3;
  uint64_t v13 = *(void *)(*(void *)a3 + 32);
  long long v14 = *(_OWORD *)(*(void *)a3 + 16);
  v89[0] = *(_OWORD *)*(void *)a3;
  v89[1] = v14;
  uint64_t v90 = v13;
  int v91 = 0;
  std::string v92 = 0;
  uint64_t v93 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v91, *(const void **)(v12 + 40), *(void *)(v12 + 48), (uint64_t)(*(void *)(v12 + 48) - *(void *)(v12 + 40)) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v94, v9, (const Espresso::layer_shape *)v89, 1);
  if (v91)
  {
    std::string v92 = v91;
    operator delete(v91);
  }
  if (v8)
  {
    nitro::nitro_function::nitro_function(v8);
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v15 = *((void *)a3 + 3);
  uint64_t v16 = *(void *)(v15 + 32);
  long long v17 = *(_OWORD *)(v15 + 16);
  v83[0] = *(_OWORD *)v15;
  v83[1] = v17;
  uint64_t v84 = v16;
  long long __p = 0;
  uint64_t v87 = 0;
  int v86 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *(const void **)(v15 + 40), *(void *)(v15 + 48), (uint64_t)(*(void *)(v15 + 48) - *(void *)(v15 + 40)) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v88, v9, (const Espresso::layer_shape *)v83, 1);
  if (__p)
  {
    int v86 = __p;
    operator delete(__p);
  }
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  id v18 = v11;
  if (Espresso::ANECompilerEngine::blob_shape_ane_compatible(v94, v18))
  {
    if (Espresso::ANECompilerEngine::blob_shape_ane_compatible(v88, v18))
    {
      char v80 = 1;
      std::string::basic_string[abi:ne180100]<0>(v81, "Success");
    }
    else
    {
      char v80 = 0;
      std::string::basic_string[abi:ne180100]<0>(v81, "Output blob dimensions exceed ANE limit.");
    }
  }
  else
  {
    char v80 = 0;
    std::string::basic_string[abi:ne180100]<0>(v81, "Input blob dimensions exceed ANE limit.");
  }

  if (!v80)
  {
    int v31 = *a2;
    int v21 = a2[1];
    v79[0] = v31;
    v79[1] = v21;
    if (v21) {
      atomic_fetch_add_explicit(&v21->i64[1], 1uLL, memory_order_relaxed);
    }
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v75, (long long *)v81, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v79, (Espresso::base_kernel::validate_for_engine_warning_t *)&v75);
    if (v78) {
      nitro::nitro_function::nitro_function(v78);
    }
    *(void *)&long long v61 = v77;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v61);
    *(void *)&long long v61 = v76;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v61);
    if ((SHIBYTE(v75.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_51;
    }
    int v22 = (void *)v75.__r_.__value_.__r.__words[0];
    goto LABEL_50;
  }
  if ((v88[6] == 5 || v88[5] != 1)
    && Espresso::ANECompilerEngine::is_mix((Espresso::ANECompilerEngine *)v18, v19))
  {
    long long v20 = *a2;
    int v21 = a2[1];
    v74[0] = v20;
    v74[1] = v21;
    if (v21) {
      atomic_fetch_add_explicit(&v21->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(&v61, "Invalid expand_dims, rank 4->5 expand_dims not supported on specified architecture.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v75, &v61, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v74, (Espresso::base_kernel::validate_for_engine_warning_t *)&v75);
    if (v78) {
      nitro::nitro_function::nitro_function(v78);
    }
    v52[0] = v77;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v52);
    v52[0] = v76;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v52);
    if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v75.__r_.__value_.__l.__data_);
    }
    if ((v62 & 0x80000000) == 0) {
      goto LABEL_51;
    }
    int v22 = (void *)v61;
LABEL_50:
    operator delete(v22);
LABEL_51:
    if (v21) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v21);
    }
    uint64_t v32 = 0;
    goto LABEL_91;
  }
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v23 = *((void *)a3 + 3);
  uint64_t v24 = *(void *)(v23 + 32);
  long long v25 = *(_OWORD *)(v23 + 16);
  __val_4[0] = *(_OWORD *)v23;
  __val_4[1] = v25;
  uint64_t v69 = v24;
  uint64_t v70 = 0;
  uint64_t v71 = 0;
  uint64_t v72 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v70, *(const void **)(v23 + 40), *(void *)(v23 + 48), (uint64_t)(*(void *)(v23 + 48) - *(void *)(v23 + 40)) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)&v75, v9, (const Espresso::layer_shape *)__val_4, 1);
  unsigned int v26 = v76[1];
  if (v70)
  {
    uint64_t v71 = v70;
    operator delete(v70);
  }
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  unsigned int v73 = v26;
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v66, *(const Espresso::layer_shape **)a3, 0);
  long long v64 = xmmword_192DAF430;
  int v65 = 4;
  Espresso::ANECompilerEngine::mix_expand_dims_kernel::gen_transpose_params_for_expand_dims((uint64_t)&v61, a1, (uint64_t)v66, &v73, __val, (uint64_t)&v64);
  if (!(_BYTE)v61)
  {
    unsigned int v33 = *a2;
    unsigned int v34 = a2[1];
    v60[0] = v33;
    v60[1] = v34;
    if (v34) {
      atomic_fetch_add_explicit(&v34->i64[1], 1uLL, memory_order_relaxed);
    }
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v75, (long long *)((char *)&v61 + 8), (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v60, (Espresso::base_kernel::validate_for_engine_warning_t *)&v75);
    if (v78) {
      nitro::nitro_function::nitro_function(v78);
    }
    v52[0] = v77;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v52);
    v52[0] = v76;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v52);
    if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v75.__r_.__value_.__l.__data_);
    }
    if (v34) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v34);
    }
    uint64_t v32 = 0;
    goto LABEL_89;
  }
  Espresso::ANECompilerEngine::DecomposeTranspose((unint64_t **)v59, (unsigned int *)&v64, 1);
  unsigned int v27 = Espresso::ANECompilerEngine::bottom_compute_path((Espresso::ANECompilerEngine *)a3, v9, 0);
  uint64_t v28 = **((void **)a3 + 6) + 224 * *((void *)a3 + 9);
  unsigned int v29 = *(void **)(v28 + 112);
  if (*(void **)(v28 + 120) == v29) {
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  }
  if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*((void **)v9 + 45), v29))
  {
    unsigned int v30 = *(_DWORD *)(std::map<std::string,Espresso::blob_numerical_properties>::at((uint64_t)v9 + 352, v29) + 8);
    if (v30 == -1) {
      unsigned int v30 = 1;
    }
  }
  else
  {
    unsigned int v30 = a3[16];
  }
  if (v27 <= 1) {
    unsigned int v35 = 1;
  }
  else {
    unsigned int v35 = v27;
  }
  if (v30 <= 1) {
    unsigned int v30 = 1;
  }
  if (v35 != v30)
  {
    int v38 = *a2;
    int v37 = a2[1];
    v58[0] = v38;
    v58[1] = v37;
    if (v37) {
      atomic_fetch_add_explicit(&v37->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v52, "Expand dims cannot change compute paths. Try quantizing your model differently in order to cast.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v75, (long long *)v52, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v58, (Espresso::base_kernel::validate_for_engine_warning_t *)&v75);
    goto LABEL_78;
  }
  if (v35 < 8 && ((0x4Bu >> (v35 - 1)) & 1) != 0)
  {
    uint64_t v40 = *((void *)&off_1E5747AB0 + (int)(v35 - 1));
    Espresso::ANECompilerEngine::ane_kernel::get_ane_validator((Espresso::ANECompilerEngine::ane_kernel *)v55, (NSString *)(a1 + 416), v18);
    Espresso::ANECompilerEngine::validate_transpose((uint64_t)v52, (uint64_t)v55, (uint64_t)v94, v40, (unsigned int **)v59);
    if (!LOBYTE(v52[0]))
    {
      char v43 = *a2;
      char v44 = a2[1];
      v51[0] = v43;
      v51[1] = v44;
      if (v44) {
        atomic_fetch_add_explicit(&v44->i64[1], 1uLL, memory_order_relaxed);
      }
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v75, (long long *)&v52[1], (uint64_t)a3, 0);
      Espresso::emit_kernel_validation_warning(v51, (Espresso::base_kernel::validate_for_engine_warning_t *)&v75);
      if (v78) {
        nitro::nitro_function::nitro_function(v78);
      }
      v50.__r_.__value_.__r.__words[0] = (std::string::size_type)v77;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v50);
      v50.__r_.__value_.__r.__words[0] = (std::string::size_type)v76;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v50);
      if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v75.__r_.__value_.__l.__data_);
      }
      if (v44) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v44);
      }
      goto LABEL_125;
    }
    if (!Espresso::ANECompilerEngine::is_mix((Espresso::ANECompilerEngine *)v18, v41))
    {
LABEL_128:
      uint64_t v32 = 1;
      goto LABEL_129;
    }
    std::string::basic_string[abi:ne180100]<0>(&v75, "experimental.ane.early_arch_transposes");
    std::string::basic_string[abi:ne180100]<0>(v48, "0");
    Espresso::map_const_get<std::map<std::string,std::string>>(v10, (uint64_t)&v75, (uint64_t)v48, &v50);
    if (v49 < 0) {
      operator delete(v48[0]);
    }
    if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v75.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v50.__r_.__value_.__l.__size_ != 1) {
        goto LABEL_116;
      }
      std::string v42 = (std::string *)v50.__r_.__value_.__r.__words[0];
    }
    else
    {
      if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) != 1) {
        goto LABEL_116;
      }
      std::string v42 = &v50;
    }
    if (v42->__r_.__value_.__s.__data_[0] == 49)
    {
LABEL_126:
      if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v50.__r_.__value_.__l.__data_);
      }
      goto LABEL_128;
    }
LABEL_116:
    if (v59[1] != v59[0])
    {
      char v45 = *a2;
      int v46 = a2[1];
      v47[0] = v45;
      v47[1] = v46;
      if (v46) {
        atomic_fetch_add_explicit(&v46->i64[1], 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(v48, "Invalid expand_dims for requested architecture would require transpose.");
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v75, (long long *)v48, (uint64_t)a3, 0);
      Espresso::emit_kernel_validation_warning(v47, (Espresso::base_kernel::validate_for_engine_warning_t *)&v75);
      Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((Espresso::base_kernel::validate_for_engine_warning_t *)&v75);
      if (v49 < 0) {
        operator delete(v48[0]);
      }
      if (v46) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v46);
      }
      if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v50.__r_.__value_.__l.__data_);
      }
LABEL_125:
      uint64_t v32 = 0;
LABEL_129:
      if (v54 < 0) {
        operator delete(v52[1]);
      }
      if (v56) {
        nitro::nitro_function::nitro_function(v56);
      }
      goto LABEL_87;
    }
    goto LABEL_126;
  }
  int v36 = *a2;
  int v37 = a2[1];
  v57[0] = v36;
  v57[1] = v37;
  if (v37) {
    atomic_fetch_add_explicit(&v37->i64[1], 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(v52, "expand_dims_kernel: invalid compute path for input.");
  Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v75, (long long *)v52, (uint64_t)a3, 0);
  Espresso::emit_kernel_validation_warning(v57, (Espresso::base_kernel::validate_for_engine_warning_t *)&v75);
LABEL_78:
  if (v78) {
    nitro::nitro_function::nitro_function(v78);
  }
  v50.__r_.__value_.__r.__words[0] = (std::string::size_type)v77;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v50);
  v50.__r_.__value_.__r.__words[0] = (std::string::size_type)v76;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v50);
  if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v75.__r_.__value_.__l.__data_);
  }
  if (v53 < 0) {
    operator delete(v52[0]);
  }
  if (v37) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v37);
  }
  uint64_t v32 = 0;
LABEL_87:
  if (v59[0]) {
    operator delete(v59[0]);
  }
LABEL_89:
  if (v63 < 0) {
    operator delete(*((void **)&v61 + 1));
  }
LABEL_91:
  if (v82 < 0) {
    operator delete(v81[0]);
  }

  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  return v32;
}

void sub_192130B1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,void *a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,std::__shared_weak_count *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((Espresso::base_kernel::validate_for_engine_warning_t *)&a69);
  if (a17 < 0) {
    operator delete(__p);
  }
  if (v71) {
    nitro::nitro_function::nitro_function(v71);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  if (a34) {
    nitro::nitro_function::nitro_function(a34);
  }
  if (a39) {
    operator delete(a39);
  }
  if (a50 < 0) {
    operator delete(a45);
  }
  if (SLOBYTE(STACK[0x21F]) < 0) {
    operator delete((void *)STACK[0x208]);
  }

  if (v69) {
    nitro::nitro_function::nitro_function(v69);
  }
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::validate_transpose(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int **a5)
{
  void v31[2] = *MEMORY[0x1E4F143B8];
  ANECTransposeLayerDescInitialize();
  uint64_t v10 = *a5;
  int v9 = a5[1];
  BOOL v11 = v9 == *a5;
  uint64_t v29 = ((char *)v9 - (char *)*a5) >> 3;
  if (!v11)
  {
    uint64_t v12 = &v30;
    do
    {
      ANECDimensionMappingInitialize();
      uint64_t v13 = *v10;
      if (v13 >= 5) {
        Espresso::throw_exception_selector<Espresso::invalid_state_error>("Bad axis.");
      }
      *uint64_t v12 = (uint64_t)off_1E57479A8[v13];
      uint64_t v14 = v10[1];
      if (v14 >= 5) {
        Espresso::throw_exception_selector<Espresso::invalid_state_error>("Bad axis.");
      }
      v12[1] = (uint64_t)off_1E57479A8[v14];
      v12 += 2;
      v10 += 2;
    }
    while (v10 != v9);
  }
  ANECTensorDescInitialize();
  uint64_t v24 = 0;
  uint64_t v25 = a4;
  uint64_t v15 = *(void *)(a3 + 12);
  *(void *)&long long v16 = (int)v15;
  *((void *)&v16 + 1) = SHIDWORD(v15);
  long long v27 = v16;
  uint64_t v28 = *(int *)(a3 + 8);
  *(void *)&long long v16 = (int)*(void *)a3;
  *((void *)&v16 + 1) = (int)HIDWORD(*(void *)a3);
  long long v26 = v16;
  uint64_t v23 = 0;
  int v17 = ANECValidateTransposeLayer();
  if (v17)
  {
    std::to_string(&v22, v17);
    id v18 = std::string::insert(&v22, 0, "ANECValidateTransposeLayer check failed with status ");
    std::string::size_type v19 = v18->__r_.__value_.__r.__words[0];
    v31[0] = v18->__r_.__value_.__l.__size_;
    *(void *)((char *)v31 + 7) = *(std::string::size_type *)((char *)&v18->__r_.__value_.__r.__words[1] + 7);
    char v20 = HIBYTE(v18->__r_.__value_.__r.__words[2]);
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    *(unsigned char *)a1 = 0;
    *(void *)(a1 + 23) = *(void *)((char *)v31 + 7);
    uint64_t v21 = v31[0];
    *(void *)(a1 + 8) = v19;
    *(void *)(a1 + 16) = v21;
    *(unsigned char *)(a1 + 31) = v20;
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v22.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    *(unsigned char *)a1 = 1;
    std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 8), "");
  }
}

void sub_192130F70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::ANECompilerEngine::DecomposeTranspose(unint64_t **a1, unsigned int *a2, int a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  unsigned int v6 = *a2;
  if (*a2)
  {
    if (v6 <= 4)
    {
      uint64_t v7 = 3;
      switch(v6)
      {
        case 1u:
          goto LABEL_10;
        case 2u:
          if (a3) {
            uint64_t v7 = 2;
          }
          else {
            uint64_t v7 = 1;
          }
          goto LABEL_10;
        case 3u:
          uint64_t v7 = 2 * (a3 == 0);
          goto LABEL_10;
        case 4u:
          uint64_t v7 = a3 != 0;
LABEL_10:
          uint64_t v8 = (unint64_t *)operator new(8uLL);
          unint64_t *v8 = v7 | 0x400000000;
          int v9 = v8 + 1;
          *a1 = v8;
          a1[1] = v8 + 1;
          a1[2] = v8 + 1;
          goto LABEL_11;
        default:
          break;
      }
    }
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Failed to query transpose src axis.");
  }
  uint64_t v8 = 0;
  int v9 = 0;
LABEL_11:
  unsigned int v10 = a2[1];
  if (v10 == 1)
  {
    BOOL v11 = v9;
  }
  else
  {
    uint64_t v12 = 4;
    switch(v10)
    {
      case 0u:
        break;
      case 2u:
        if (a3) {
          uint64_t v12 = 2;
        }
        else {
          uint64_t v12 = 1;
        }
        break;
      case 3u:
        uint64_t v12 = 2 * (a3 == 0);
        break;
      case 4u:
        uint64_t v12 = a3 != 0;
        break;
      default:
        Espresso::throw_exception_selector<Espresso::invalid_state_error>("Failed to query transpose src axis.");
    }
    uint64_t v13 = (char *)v9 - (char *)v8;
    uint64_t v14 = v9 - v8;
    unint64_t v15 = v14 + 1;
    if ((unint64_t)(v14 + 1) >> 61) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    if (v13 >> 2 > v15) {
      unint64_t v15 = v13 >> 2;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v16 = v15;
    }
    if (v16) {
      unint64_t v16 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v16);
    }
    else {
      uint64_t v17 = 0;
    }
    id v18 = (uint64_t *)(v16 + 8 * v14);
    *id v18 = v12 | 0x300000000;
    BOOL v11 = (unint64_t *)(v18 + 1);
    if (v9 != v8)
    {
      do
      {
        uint64_t v19 = *--v9;
        *--id v18 = v19;
      }
      while (v9 != v8);
      uint64_t v8 = *a1;
    }
    *a1 = (unint64_t *)v18;
    a1[1] = v11;
    a1[2] = (unint64_t *)(v16 + 8 * v17);
    if (v8) {
      operator delete(v8);
    }
    a1[1] = v11;
  }
  unsigned int v20 = a2[2];
  if (v20 != 2)
  {
    unsigned int v21 = 4;
    switch(v20)
    {
      case 0u:
        break;
      case 1u:
        unsigned int v21 = 3;
        break;
      case 3u:
        unsigned int v21 = 2 * (a3 == 0);
        break;
      case 4u:
        unsigned int v21 = a3 != 0;
        break;
      default:
        Espresso::throw_exception_selector<Espresso::invalid_state_error>("Failed to query transpose src axis.");
    }
    if (a3) {
      uint64_t v22 = 2;
    }
    else {
      uint64_t v22 = 1;
    }
    unint64_t v23 = (unint64_t)a1[2];
    if ((unint64_t)v11 >= v23)
    {
      uint64_t v25 = *a1;
      uint64_t v26 = v11 - *a1;
      unint64_t v27 = v26 + 1;
      if ((unint64_t)(v26 + 1) >> 61) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v28 = v23 - (void)v25;
      if (v28 >> 2 > v27) {
        unint64_t v27 = v28 >> 2;
      }
      if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v29 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v29 = v27;
      }
      if (v29) {
        unint64_t v29 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v29);
      }
      else {
        uint64_t v30 = 0;
      }
      int v31 = (unint64_t *)(v29 + 8 * v26);
      *int v31 = v21 | (unint64_t)(v22 << 32);
      uint64_t v24 = v31 + 1;
      if (v11 != v25)
      {
        do
        {
          unint64_t v32 = *--v11;
          *--int v31 = v32;
        }
        while (v11 != v25);
        BOOL v11 = *a1;
      }
      *a1 = v31;
      a1[1] = v24;
      a1[2] = (unint64_t *)(v29 + 8 * v30);
      if (v11) {
        operator delete(v11);
      }
    }
    else
    {
      *BOOL v11 = v21 | (unint64_t)(v22 << 32);
      uint64_t v24 = v11 + 1;
    }
    a1[1] = v24;
    BOOL v11 = v24;
  }
  unsigned int v33 = a2[3];
  if (v33 != 3)
  {
    if (v33 <= 4)
    {
      unsigned int v34 = 4;
      switch(v33)
      {
        case 0u:
          goto LABEL_67;
        case 1u:
          unsigned int v34 = 3;
          goto LABEL_67;
        case 2u:
          if (a3) {
            unsigned int v34 = 2;
          }
          else {
            unsigned int v34 = 1;
          }
          goto LABEL_67;
        case 4u:
          unsigned int v34 = a3 != 0;
LABEL_67:
          uint64_t v35 = 2 * (a3 == 0);
          unint64_t v36 = (unint64_t)a1[2];
          if ((unint64_t)v11 >= v36)
          {
            int v38 = *a1;
            uint64_t v39 = v11 - *a1;
            unint64_t v40 = v39 + 1;
            if ((unint64_t)(v39 + 1) >> 61) {
              std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v41 = v36 - (void)v38;
            if (v41 >> 2 > v40) {
              unint64_t v40 = v41 >> 2;
            }
            if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v42 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v42 = v40;
            }
            if (v42) {
              unint64_t v42 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v42);
            }
            else {
              uint64_t v43 = 0;
            }
            char v44 = (unint64_t *)(v42 + 8 * v39);
            *char v44 = v34 | (unint64_t)(v35 << 32);
            int v37 = v44 + 1;
            if (v11 != v38)
            {
              do
              {
                unint64_t v45 = *--v11;
                *--char v44 = v45;
              }
              while (v11 != v38);
              BOOL v11 = *a1;
            }
            *a1 = v44;
            a1[1] = v37;
            a1[2] = (unint64_t *)(v42 + 8 * v43);
            if (v11) {
              operator delete(v11);
            }
          }
          else
          {
            *BOOL v11 = v34 | (unint64_t)(v35 << 32);
            int v37 = v11 + 1;
          }
          a1[1] = v37;
          BOOL v11 = v37;
          goto LABEL_84;
        default:
          break;
      }
    }
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Failed to query transpose src axis.");
  }
LABEL_84:
  unsigned int v46 = a2[4];
  if (v46 != 4)
  {
    unsigned int v47 = 4;
    switch(v46)
    {
      case 0u:
        break;
      case 1u:
        unsigned int v47 = 3;
        break;
      case 2u:
        if (a3) {
          unsigned int v47 = 2;
        }
        else {
          unsigned int v47 = 1;
        }
        break;
      case 3u:
        unsigned int v47 = 2 * (a3 == 0);
        break;
      default:
        Espresso::throw_exception_selector<Espresso::invalid_state_error>("Failed to query transpose src axis.");
    }
    unint64_t v48 = (unint64_t)a1[2];
    if ((unint64_t)v11 >= v48)
    {
      std::string v50 = *a1;
      uint64_t v51 = v11 - *a1;
      unint64_t v52 = v51 + 1;
      if ((unint64_t)(v51 + 1) >> 61) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v53 = v48 - (void)v50;
      if (v53 >> 2 > v52) {
        unint64_t v52 = v53 >> 2;
      }
      if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v54 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v54 = v52;
      }
      if (v54) {
        unint64_t v54 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v54);
      }
      else {
        uint64_t v55 = 0;
      }
      int v56 = (unint64_t *)(v54 + 8 * v51);
      *int v56 = v47 | ((unint64_t)(a3 != 0) << 32);
      char v49 = v56 + 1;
      if (v11 != v50)
      {
        do
        {
          unint64_t v57 = *--v11;
          *--int v56 = v57;
        }
        while (v11 != v50);
        BOOL v11 = *a1;
      }
      *a1 = v56;
      a1[1] = v49;
      a1[2] = (unint64_t *)(v54 + 8 * v55);
      if (v11) {
        operator delete(v11);
      }
    }
    else
    {
      *BOOL v11 = v47 | ((unint64_t)(a3 != 0) << 32);
      char v49 = v11 + 1;
    }
    a1[1] = v49;
  }
}

void sub_192131538(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::ANECompilerEngine::mix_expand_dims_kernel::gen_transpose_params_for_expand_dims(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4, unint64_t __val, uint64_t a6)
{
  unint64_t v6 = __val;
  v48[2] = *MEMORY[0x1E4F143B8];
  long long v8 = *(_OWORD *)(a2 + 392);
  v45[6] = *(_OWORD *)(a2 + 376);
  v45[7] = v8;
  uint64_t v46 = *(void *)(a2 + 408);
  long long v9 = *(_OWORD *)(a2 + 296);
  v45[0] = *(_OWORD *)(a2 + 280);
  v45[1] = v9;
  long long v10 = *(_OWORD *)(a2 + 328);
  void v45[2] = *(_OWORD *)(a2 + 312);
  _DWORD v45[3] = v10;
  long long v11 = *(_OWORD *)(a2 + 360);
  v45[4] = *(_OWORD *)(a2 + 344);
  v45[5] = v11;
  int v12 = DWORD1(v45[0]);
  if (SDWORD1(v45[0]) >= 1)
  {
    int v13 = DWORD1(v45[0]) + __val;
    uint64_t v14 = (_DWORD *)v45 + 2;
    uint64_t v15 = DWORD1(v45[0]);
    do
    {
      if ((*v14 & 0x80000000) != 0) {
        *v14 += v13;
      }
      ++v14;
      --v15;
    }
    while (v15);
  }
  if ((v45[0] & 0x80000000) != 0) {
    LODWORD(v45[0]) += __val + 1;
  }
  uint64_t v16 = 0;
  uint64_t v43 = 0;
  uint64_t v44 = 0;
  unint64_t v42 = &v43;
  if (v12 <= 1) {
    uint64_t v17 = 1;
  }
  else {
    uint64_t v17 = v12;
  }
  do
  {
    id v18 = (int *)v45 + v16 + 2;
    if (v12 <= 0) {
      id v18 = (int *)v45;
    }
    int v19 = *v18;
    if (v19 < 0) {
      v19 += v17 + *(_DWORD *)(a3 + 20);
    }
    unint64_t v20 = v19;
    unsigned int v21 = &v43;
    uint64_t v22 = &v43;
    if (v43)
    {
      unint64_t v23 = v43;
      while (1)
      {
        while (1)
        {
          unsigned int v21 = (uint64_t **)v23;
          unint64_t v24 = v23[4];
          if (v24 <= v20) {
            break;
          }
          unint64_t v23 = *v21;
          uint64_t v22 = v21;
          if (!*v21) {
            goto LABEL_23;
          }
        }
        if (v24 >= v20) {
          break;
        }
        unint64_t v23 = v21[1];
        if (!v23)
        {
          uint64_t v22 = v21 + 1;
          goto LABEL_23;
        }
      }
    }
    else
    {
LABEL_23:
      uint64_t v25 = (uint64_t *)operator new(0x28uLL);
      v25[4] = v20;
      *uint64_t v25 = 0;
      v25[1] = 0;
      _OWORD v25[2] = (uint64_t)v21;
      void *v22 = v25;
      if (*v42)
      {
        unint64_t v42 = (uint64_t **)*v42;
        uint64_t v25 = *v22;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v43, v25);
      ++v44;
    }
    ++v16;
  }
  while (v16 != v17);
  long long v40 = xmmword_192DAF430;
  int v41 = 4;
  uint64_t v26 = (uint64_t *)v42;
  if (v42 != &v43)
  {
    unsigned int v27 = -1;
    do
    {
      unint64_t v28 = v26[4];
      if (v6 == 4) {
        unsigned int v27 = *a4;
      }
      *(_OWORD *)uint64_t v39 = xmmword_192DAF430;
      *(_DWORD *)&v39[16] = 4;
      if (v6 >= 5)
      {
        std::to_string(&v47, v6);
        unint64_t v29 = std::string::insert(&v47, 0, "get_transpose_for_expand_dims: dynamic model or invalid input rank ");
        goto LABEL_69;
      }
      if (v6 == 4)
      {
        if (v27 >= 2)
        {
          std::to_string(&v47, v27);
          unint64_t v29 = std::string::insert(&v47, 0, "get_transpose_for_expand_dims: dynamic model or invalid top layout when expanding to rank 5, got ");
          goto LABEL_69;
        }
        if (v27 != 1)
        {
          switch(v28)
          {
            case 0uLL:
              *(_DWORD *)&v39[16] = 2;
              *(void *)&v39[8] = 0x400000003;
              goto LABEL_63;
            case 1uLL:
              *(_DWORD *)&v39[16] = 2;
              *(_DWORD *)&v39[8] = 4;
              goto LABEL_63;
            case 2uLL:
              goto LABEL_63;
            case 3uLL:
              *(_DWORD *)&v39[16] = 1;
              *(_DWORD *)&v39[4] = 4;
              goto LABEL_63;
            case 4uLL:
              *(_DWORD *)&v39[16] = 1;
              *(void *)uint64_t v39 = 4;
              goto LABEL_63;
            default:
              goto LABEL_68;
          }
        }
        switch(v28)
        {
          case 0uLL:
            goto LABEL_63;
          case 1uLL:
            *(void *)&v39[12] = 0x300000004;
            goto LABEL_63;
          case 2uLL:
            *(void *)&v39[8] = 0x200000004;
            break;
          case 3uLL:
            *(_OWORD *)&v39[4] = xmmword_192DCA450;
            goto LABEL_63;
          case 4uLL:
            *(_OWORD *)uint64_t v39 = xmmword_192DCA830;
            break;
          default:
            goto LABEL_68;
        }
        *(_DWORD *)&v39[16] = 3;
      }
      else
      {
        if (v28) {
          BOOL v30 = v6 == 3;
        }
        else {
          BOOL v30 = 0;
        }
        if (v30)
        {
          switch(v28)
          {
            case 3uLL:
              long long v31 = xmmword_192DCA820;
LABEL_62:
              *(_OWORD *)uint64_t v39 = v31;
              break;
            case 2uLL:
              *(void *)&v39[4] = 0x100000003;
              *(_DWORD *)&v39[12] = 2;
              break;
            case 1uLL:
              *(void *)&v39[8] = 0x200000003;
              break;
            default:
              goto LABEL_68;
          }
        }
        else
        {
          if (!v28 || v6 != 2)
          {
            if (!v28 || v6 != 1) {
              goto LABEL_63;
            }
            if (v28 != 1)
            {
LABEL_68:
              std::to_string(&v47, v28);
              unint64_t v29 = std::string::insert(&v47, 0, "get_transpose_for_expand_dims: invalid dimensions ");
LABEL_69:
              std::string::size_type v32 = v29->__r_.__value_.__r.__words[0];
              v48[0] = v29->__r_.__value_.__l.__size_;
              *(void *)((char *)v48 + 7) = *(std::string::size_type *)((char *)&v29->__r_.__value_.__r.__words[1] + 7);
              char v33 = HIBYTE(v29->__r_.__value_.__r.__words[2]);
              v29->__r_.__value_.__l.__size_ = 0;
              v29->__r_.__value_.__r.__words[2] = 0;
              v29->__r_.__value_.__r.__words[0] = 0;
              *(unsigned char *)a1 = 0;
              *(void *)(a1 + 8) = v32;
              *(void *)(a1 + 23) = *(void *)((char *)v48 + 7);
              *(void *)(a1 + 16) = v48[0];
              *(unsigned char *)(a1 + 31) = v33;
              if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v47.__r_.__value_.__l.__data_);
              }
              goto LABEL_71;
            }
            long long v31 = xmmword_192DCA540;
            goto LABEL_62;
          }
          if (v28 == 2)
          {
            long long v31 = xmmword_192DCA520;
            goto LABEL_62;
          }
          if (v28 != 1) {
            goto LABEL_68;
          }
          *(void *)&v39[4] = 0x100000002;
          *(_DWORD *)&v39[12] = 3;
        }
      }
LABEL_63:
      *(unsigned char *)a1 = 1;
      std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 8), "Success");
LABEL_71:
      if (!*(unsigned char *)a1) {
        goto LABEL_86;
      }
      Espresso::ANECompilerEngine::merge_transpose_params((uint64_t)&v47, (int *)&v40, (int *)v39);
      long long v40 = *(_OWORD *)&v47.__r_.__value_.__l.__data_;
      int v41 = v47.__r_.__value_.__r.__words[2];
      if (*(char *)(a1 + 31) < 0) {
        operator delete(*(void **)(a1 + 8));
      }
      unsigned int v34 = (uint64_t *)v26[1];
      if (v34)
      {
        do
        {
          uint64_t v35 = (uint64_t **)v34;
          unsigned int v34 = (uint64_t *)*v34;
        }
        while (v34);
      }
      else
      {
        do
        {
          uint64_t v35 = (uint64_t **)v26[2];
          BOOL v30 = *v35 == v26;
          uint64_t v26 = (uint64_t *)v35;
        }
        while (!v30);
      }
      ++v6;
      uint64_t v26 = (uint64_t *)v35;
    }
    while (v35 != &v43);
  }
  *(_OWORD *)a6 = v40;
  *(_DWORD *)(a6 + 16) = v41;
  *(unsigned char *)a1 = 1;
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 8), "Success");
LABEL_86:
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v42, v43);
}

void sub_192131BB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,void *a35)
{
  if (*(char *)(v35 - 185) < 0) {
    operator delete(*(void **)(v35 - 208));
  }
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&a34, a35);
  _Unwind_Resume(a1);
}

uint64_t Espresso::ANECompilerEngine::merge_transpose_params(uint64_t a1, int *a2, int *a3)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  *(_OWORD *)a1 = xmmword_192DAF430;
  *(_DWORD *)(a1 + 16) = 4;
  int v5 = *a2;
  int v6 = a2[1];
  v12[0] = 0;
  v12[1] = v5;
  void v12[2] = 1;
  v12[3] = v6;
  int v7 = a2[2];
  int v8 = a2[3];
  v12[4] = 2;
  v12[5] = v7;
  v12[6] = 3;
  v12[7] = v8;
  int v9 = a2[4];
  v12[8] = 4;
  v12[9] = v9;
  std::unordered_map<int,int>::unordered_map((uint64_t)v11, v12, 5);
  *(_DWORD *)a1 = *((_DWORD *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)v11, *a3, a3)+ 5);
  *(_DWORD *)(a1 + 4) = *((_DWORD *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)v11, a3[1], a3 + 1)+ 5);
  *(_DWORD *)(a1 + 8) = *((_DWORD *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)v11, a3[2], a3 + 2)+ 5);
  *(_DWORD *)(a1 + 12) = *((_DWORD *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)v11, a3[3], a3 + 3)+ 5);
  *(_DWORD *)(a1 + 16) = *((_DWORD *)std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)v11, a3[4], a3 + 4)+ 5);
  return std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)v11);
}

void sub_192131D50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

void *std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(uint64_t a1, int a2, _DWORD *a3)
{
  unint64_t v6 = a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    int v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      long long v10 = *v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          long long v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  long long v10 = operator new(0x18uLL);
  *long long v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  *((_DWORD *)v10 + 5) = 0;
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__rehash<true>(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v18 = *(void *)a1;
  int v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    *long long v10 = *v19;
LABEL_38:
    void *v19 = v10;
    goto LABEL_39;
  }
  *long long v10 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v10;
  *(void *)(v18 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    unint64_t v20 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7) {
        v20 %= v7;
      }
    }
    else
    {
      v20 &= v7 - 1;
    }
    int v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v10;
}

void sub_192131F68(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<int,int>::unordered_map(uint64_t a1, int *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    int v5 = a2;
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    uint8x8_t v8 = (void *)(a1 + 16);
    int v9 = &a2[2 * a3];
    do
    {
      unint64_t v10 = *v5;
      if (v7)
      {
        uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
        v11.i16[0] = vaddlv_u8(v11);
        if (v11.u32[0] > 1uLL)
        {
          unint64_t v3 = *v5;
          if (v7 <= v10) {
            unint64_t v3 = v10 % v7;
          }
        }
        else
        {
          unint64_t v3 = (v7 - 1) & v10;
        }
        float v12 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
        if (v12)
        {
          for (unint64_t i = *v12; i; unint64_t i = (uint64_t *)*i)
          {
            unint64_t v14 = i[1];
            if (v14 == v10)
            {
              if (*((_DWORD *)i + 4) == v10) {
                goto LABEL_41;
              }
            }
            else
            {
              if (v11.u32[0] > 1uLL)
              {
                if (v14 >= v7) {
                  v14 %= v7;
                }
              }
              else
              {
                v14 &= v7 - 1;
              }
              if (v14 != v3) {
                break;
              }
            }
          }
        }
      }
      unint64_t v15 = operator new(0x18uLL);
      *unint64_t v15 = 0;
      v15[1] = v10;
      void v15[2] = *(void *)v5;
      float v16 = (float)(unint64_t)(v6 + 1);
      float v17 = *(float *)(a1 + 32);
      if (!v7 || (float)(v17 * (float)v7) < v16)
      {
        BOOL v18 = (v7 & (v7 - 1)) != 0;
        if (v7 < 3) {
          BOOL v18 = 1;
        }
        unint64_t v19 = v18 | (2 * v7);
        unint64_t v20 = vcvtps_u32_f32(v16 / v17);
        if (v19 <= v20) {
          size_t v21 = v20;
        }
        else {
          size_t v21 = v19;
        }
        std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__rehash<true>(a1, v21);
        unint64_t v7 = *(void *)(a1 + 8);
        if ((v7 & (v7 - 1)) != 0)
        {
          if (v7 <= v10) {
            unint64_t v3 = v10 % v7;
          }
          else {
            unint64_t v3 = v10;
          }
        }
        else
        {
          unint64_t v3 = (v7 - 1) & v10;
        }
      }
      uint64_t v22 = *(void *)a1;
      unint64_t v23 = *(void **)(*(void *)a1 + 8 * v3);
      if (v23)
      {
        *unint64_t v15 = *v23;
      }
      else
      {
        *unint64_t v15 = *v8;
        void *v8 = v15;
        *(void *)(v22 + 8 * v3) = v8;
        if (!*v15) {
          goto LABEL_40;
        }
        unint64_t v24 = *(void *)(*v15 + 8);
        if ((v7 & (v7 - 1)) != 0)
        {
          if (v24 >= v7) {
            v24 %= v7;
          }
        }
        else
        {
          v24 &= v7 - 1;
        }
        unint64_t v23 = (void *)(*(void *)a1 + 8 * v24);
      }
      *unint64_t v23 = v15;
LABEL_40:
      uint64_t v6 = *(void *)(a1 + 24) + 1;
      *(void *)(a1 + 24) = v6;
LABEL_41:
      v5 += 2;
    }
    while (v5 != v9);
  }
  return a1;
}

void sub_1921321A8(_Unwind_Exception *a1)
{
  operator delete(v2);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::mix_squeeze_kernel::gen_transpose_params_for_squeeze(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4, unint64_t a5, uint64_t a6)
{
  unint64_t v7 = a5;
  long long v10 = *(_OWORD *)(a2 + 408);
  v59[7] = *(_OWORD *)(a2 + 392);
  long long v60 = v10;
  long long v11 = *(_OWORD *)(a2 + 376);
  long long v12 = *(_OWORD *)(a2 + 328);
  _OWORD v59[2] = *(_OWORD *)(a2 + 312);
  v59[3] = v12;
  long long v13 = *(_OWORD *)(a2 + 344);
  v59[5] = *(_OWORD *)(a2 + 360);
  v59[6] = v11;
  v59[4] = v13;
  long long v14 = *(_OWORD *)(a2 + 296);
  v59[0] = *(_OWORD *)(a2 + 280);
  v59[1] = v14;
  int v15 = BYTE8(v60);
  if (BYTE8(v60))
  {
    DWORD1(v59[0]) = 0;
    uint64_t v16 = *(unsigned int *)(a3 + 20);
    if (v16)
    {
      int v17 = 0;
      uint64_t v18 = 0;
      int v19 = 0;
      do
      {
        if (*(_DWORD *)(a3 + 4 * v18) == 1)
        {
          *((_DWORD *)v59 + v19++ + 2) = v18;
          int v17 = ++DWORD1(v59[0]);
        }
        ++v18;
      }
      while (v16 != v18);
    }
    else
    {
      int v17 = 0;
    }
  }
  else
  {
    int v17 = DWORD1(v59[0]);
    if (SDWORD1(v59[0]) >= 1)
    {
      unint64_t v20 = (_DWORD *)v59 + 2;
      uint64_t v21 = DWORD1(v59[0]);
      do
      {
        if ((*v20 & 0x80000000) != 0) {
          *v20 += a5;
        }
        ++v20;
        --v21;
      }
      while (v21);
    }
    if ((v59[0] & 0x80000000) != 0) {
      LODWORD(v59[0]) += a5;
    }
  }
  unint64_t v57 = 0;
  uint64_t v58 = 0;
  uint64_t v22 = &v57;
  int v56 = &v57;
  Espresso::layer_nd_shape::shape_vector(v61, a3);
  if (v15)
  {
    begiuint64_t n = v61[0].__begin_;
    std::vector<int>::pointer end = v61[0].__end_;
    if (v61[0].__end_ != v61[0].__begin_)
    {
      int64_t v25 = 0;
      uint64_t v26 = a4;
      do
      {
        if (begin[v25] == 1)
        {
          unsigned int v27 = v57;
          unint64_t v28 = &v57;
          unint64_t v29 = &v57;
          if (v57)
          {
            while (1)
            {
              while (1)
              {
                unint64_t v29 = (uint64_t **)v27;
                uint64_t v30 = v27[4];
                if (v25 >= v30) {
                  break;
                }
                unsigned int v27 = *v29;
                unint64_t v28 = v29;
                if (!*v29) {
                  goto LABEL_27;
                }
              }
              if (v30 >= v25) {
                break;
              }
              unsigned int v27 = v29[1];
              if (!v27)
              {
                unint64_t v28 = v29 + 1;
                goto LABEL_27;
              }
            }
          }
          else
          {
LABEL_27:
            long long v31 = (uint64_t *)operator new(0x28uLL);
            v31[4] = v25;
            *long long v31 = 0;
            v31[1] = 0;
            void v31[2] = (uint64_t)v29;
            *unint64_t v28 = v31;
            if (*v56)
            {
              int v56 = (uint64_t **)*v56;
              long long v31 = *v28;
            }
            std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v57, v31);
            ++v58;
            begiuint64_t n = v61[0].__begin_;
            std::vector<int>::pointer end = v61[0].__end_;
          }
        }
        ++v25;
      }
      while (v25 < (unint64_t)(end - begin));
      if (begin) {
        goto LABEL_32;
      }
      goto LABEL_33;
    }
    begiuint64_t n = v61[0].__end_;
  }
  else
  {
    uint64_t v49 = a6;
    uint64_t v50 = a1;
    uint64_t v40 = 0;
    if (v17 <= 1) {
      uint64_t v41 = 1;
    }
    else {
      uint64_t v41 = v17;
    }
    do
    {
      unint64_t v42 = (int *)v59 + v40 + 2;
      if (v17 <= 0) {
        unint64_t v42 = (int *)v59;
      }
      uint64_t v43 = *v42 + (uint64_t)(*(_DWORD *)(a3 + 20) & (*v42 >> 31));
      uint64_t v44 = v57;
      unint64_t v45 = &v57;
      uint64_t v46 = &v57;
      if (v57)
      {
        while (1)
        {
          while (1)
          {
            uint64_t v46 = (uint64_t **)v44;
            uint64_t v47 = v44[4];
            if (v43 >= v47) {
              break;
            }
            uint64_t v44 = *v46;
            unint64_t v45 = v46;
            if (!*v46) {
              goto LABEL_67;
            }
          }
          if (v47 >= v43) {
            break;
          }
          uint64_t v44 = v46[1];
          if (!v44)
          {
            unint64_t v45 = v46 + 1;
            goto LABEL_67;
          }
        }
      }
      else
      {
LABEL_67:
        unint64_t v48 = (uint64_t *)operator new(0x28uLL);
        v48[4] = v43;
        uint64_t *v48 = 0;
        v48[1] = 0;
        v48[2] = (uint64_t)v46;
        *unint64_t v45 = v48;
        if (*v56)
        {
          int v56 = (uint64_t **)*v56;
          unint64_t v48 = *v45;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v57, v48);
        ++v58;
      }
      ++v40;
    }
    while (v40 != v41);
    begiuint64_t n = v61[0].__begin_;
    a6 = v49;
    a1 = v50;
  }
  uint64_t v26 = a4;
  if (begin)
  {
LABEL_32:
    v61[0].__end_ = begin;
    operator delete(begin);
  }
LABEL_33:
  *(_OWORD *)&v61[0].__begin_ = xmmword_192DAF430;
  LODWORD(v61[0].__end_cap_.__value_) = 4;
  if (&v57 != v56)
  {
    do
    {
      std::string::size_type v32 = *v22;
      char v33 = *v22;
      unsigned int v34 = v22;
      if (*v22)
      {
        do
        {
          uint64_t v35 = v33;
          char v33 = (uint64_t *)v33[1];
        }
        while (v33);
      }
      else
      {
        do
        {
          uint64_t v35 = v34[2];
          BOOL v36 = *v35 == (void)v34;
          unsigned int v34 = (uint64_t **)v35;
        }
        while (v36);
      }
      uint64_t v37 = v35[4];
      if (v7)
      {
        if (v7 == 5) {
          unsigned int v38 = *v26;
        }
        else {
          unsigned int v38 = -1;
        }
        long long v54 = xmmword_192DAF430;
        int v55 = 4;
        Espresso::ANECompilerEngine::get_transpose_for_squeeze(a1, v37, v7, v38, (uint64_t)&v54);
        if (!*(unsigned char *)a1) {
          goto LABEL_54;
        }
        if (*(char *)(a1 + 31) < 0) {
          operator delete(*(void **)(a1 + 8));
        }
        Espresso::ANECompilerEngine::merge_transpose_params((uint64_t)&v52, (int *)v61, (int *)&v54);
        *(_OWORD *)&v61[0].__begin_ = v52;
        LODWORD(v61[0].__end_cap_.__value_) = v53;
        --v7;
        std::string::size_type v32 = *v22;
        if (!*v22) {
          goto LABEL_51;
        }
      }
      else
      {
        if (v37)
        {
          *(unsigned char *)a1 = 0;
          std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 8), "Squeezing rank 0 with dim other than 0 doesn't make sense.");
          goto LABEL_54;
        }
        unint64_t v7 = 0;
        if (!v32)
        {
          do
          {
LABEL_51:
            uint64_t v39 = (uint64_t **)v22[2];
            BOOL v36 = *v39 == (uint64_t *)v22;
            uint64_t v22 = v39;
          }
          while (v36);
          goto LABEL_52;
        }
      }
      do
      {
        uint64_t v39 = (uint64_t **)v32;
        std::string::size_type v32 = (uint64_t *)v32[1];
      }
      while (v32);
LABEL_52:
      uint64_t v22 = v39;
    }
    while (v39 != v56);
  }
  *(_OWORD *)a6 = *(_OWORD *)&v61[0].__begin_;
  *(_DWORD *)(a6 + 16) = v61[0].__end_cap_.__value_;
  *(unsigned char *)a1 = 1;
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 8), "Success");
LABEL_54:
  std::__tree<int>::destroy(v57);
}

void sub_192132630(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{
}

void Espresso::graph_optimization_rule_status::~graph_optimization_rule_status(Espresso::graph_optimization_rule_status *this)
{
  *(void *)this = &unk_1EE365EC8;
  std::__tree<std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>>>::destroy(*((void **)this + 6));
  std::__tree<int>::destroy(*((void **)this + 3));
}

{
  uint64_t vars8;

  *(void *)this = &unk_1EE365EC8;
  std::__tree<std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>>>::destroy(*((void **)this + 6));
  std::__tree<int>::destroy(*((void **)this + 3));

  JUMPOUT(0x192FF16B0);
}

{
  *(void *)this = &unk_1EE365EC8;
  std::__tree<std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>>>::destroy(*((void **)this + 6));
  std::__tree<int>::destroy(*((void **)this + 3));
}

void std::__tree<std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>>>::destroy(a1[1]);
    std::pair<std::string const,Espresso::graph_node_t<Espresso::base_kernel>>::~pair((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__shared_ptr_emplace<Espresso::kernels_validation_status_t>::__on_zero_shared(uint64_t a1)
{
  std::__tree<std::string>::destroy(a1 + 152, *(char **)(a1 + 160));
  std::__tree<std::__value_type<std::string,std::map<Espresso::platform,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<Espresso::platform,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<Espresso::platform,int>>>>::destroy(*(void **)(a1 + 128));
  std::__tree<std::__value_type<std::string,std::map<Espresso::platform,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<Espresso::platform,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<Espresso::platform,int>>>>::destroy(*(void **)(a1 + 104));
  uint64_t v2 = *(void **)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    operator delete(v2);
  }
  unint64_t v3 = *(void **)(a1 + 48);
  if (v3)
  {
    *(void *)(a1 + 56) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void **)(a1 + 24);
  std::vector<Espresso::base_kernel::validate_for_engine_warning_t>::__destroy_vector::operator()[abi:ne180100](&v4);
}

void std::__tree<std::__value_type<std::string,std::map<Espresso::platform,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<Espresso::platform,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<Espresso::platform,int>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::map<Espresso::platform,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<Espresso::platform,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<Espresso::platform,int>>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,std::map<Espresso::platform,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<Espresso::platform,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<Espresso::platform,int>>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::map<Espresso::platform,int>>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::map<Espresso::platform,int>>,0>(uint64_t a1)
{
  std::__tree<int>::destroy(*(void **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void std::__tree<int>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<int>::destroy(*a1);
    std::__tree<int>::destroy(a1[1]);
    operator delete(a1);
  }
}

uint64_t std::__hash_table<std::shared_ptr<Espresso::abstract_blob_container>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::shared_ptr<Espresso::abstract_blob_container>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>::__deallocate_node(*(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::shared_ptr<Espresso::abstract_blob_container>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>::__deallocate_node(void *__p)
{
  if (__p)
  {
    uint64_t v1 = __p;
    do
    {
      uint64_t v2 = (void *)*v1;
      unint64_t v3 = (std::__shared_weak_count *)v1[3];
      if (v3) {
        nitro::nitro_function::nitro_function(v3);
      }
      operator delete(v1);
      uint64_t v1 = v2;
    }
    while (v2);
  }
}

uint64_t Espresso::blob<float,1>::~blob(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_1EE36BEB0;
  if (*(unsigned char *)(a1 + 24))
  {
    unint64_t v3 = *(void **)(a1 + 16);
    if (v3)
    {
      Espresso::on_dealloc(*(Espresso **)(a1 + 16), a2);
      free(v3);
    }
  }
  *(void *)(a1 + 16) = 0;
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 56);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  int v5 = *(std::__shared_weak_count **)(a1 + 40);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
  return a1;
}

uint64_t Espresso::blob<int,4>::~blob(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_1EE36C050;
  if (*(unsigned char *)(a1 + 32))
  {
    unint64_t v3 = *(void **)(a1 + 24);
    if (v3)
    {
      Espresso::on_dealloc(*(Espresso **)(a1 + 24), a2);
      free(v3);
    }
  }
  *(void *)(a1 + 24) = 0;
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 64);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  int v5 = *(std::__shared_weak_count **)(a1 + 48);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
  return a1;
}

void Espresso::on_dealloc(Espresso *this, void *a2)
{
  if (Espresso::onceToken != -1) {
    dispatch_once(&Espresso::onceToken, &__block_literal_global_4_17806);
  }
  if (Espresso::alloc_dbg_queue) {
    BOOL v3 = Espresso::debug_allocated_mem == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = ___ZN8Espresso10on_deallocEPv_block_invoke_2;
    block[3] = &__block_descriptor_40_e5_v8__0l;
    void block[4] = this;
    dispatch_async((dispatch_queue_t)Espresso::alloc_dbg_queue, block);
  }
}

void Espresso::SerDes::layer_io<Espresso::generic_deconvolution_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v37 = a4;
  __int16 v20 = 1;
  uint64_t v22 = 0;
  __asm { FMOV            V0.2S, #1.0 }
  uint64_t v21 = 0;
  __int16 v23 = 0;
  uint64_t v24 = 0x1000100010001;
  int v25 = 0;
  int v27 = 1;
  int v35 = 0;
  char v36 = 0;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  long long v17 = xmmword_192DCA220;
  memset(v16, 0, 32);
  v16[4] = 1;
  long long v26 = xmmword_192DCA230;
  uint64_t v28 = 0;
  __int16 v30 = 1;
  unint64_t v18 = 0xFFFFFFFF00000000;
  uint64_t v19 = _D0;
  __int16 v29 = 0;
  int v33 = 0;
  __int16 v34 = 1;
  Espresso::SerDes::params_io<Espresso::convolution_uniforms>(a2, (uint64_t)v16, 0);
  Espresso::abstract_engine_factory::shared(&v14);
  uint64_t v10 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "deconvolution");
  int v11 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v10, a3, (uint64_t)__p, (uint64_t)v16, &v11);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
}

void sub_192132C08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_activation_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v21 = a4;
  int v16 = 0;
  __asm { FMOV            V0.2S, #1.0 }
  uint64_t v17 = _D0;
  uint64_t v18 = 0;
  uint64_t v20 = 0;
  uint64_t v19 = 0;
  Espresso::SerDes::params_io<Espresso::activation_params>(a2, (uint64_t)&v16, 0);
  Espresso::abstract_engine_factory::shared(&v14);
  uint64_t v10 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "activation");
  int v11 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v10, a3, (uint64_t)__p, (uint64_t)&v16, &v11);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
}

void sub_192132D20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::params_io<Espresso::activation_params>(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v14, "mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v14, &v16);
    (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v16 + 160))(v16, __p, a2);
    if (v19 < 0) {
      operator delete(__p[0]);
    }
    if (v17) {
      nitro::nitro_function::nitro_function(v17);
    }
    if (v15 < 0) {
      operator delete(v14[0]);
    }
    if (*(float *)(a2 + 4) != 1.0)
    {
      std::string::basic_string[abi:ne180100]<0>(v14, "alpha");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v14, &v16);
      (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v16 + 216))(v16, __p, a2 + 4);
      if (v19 < 0) {
        operator delete(__p[0]);
      }
      if (v17) {
        nitro::nitro_function::nitro_function(v17);
      }
      if (v15 < 0) {
        operator delete(v14[0]);
      }
    }
    float v6 = *(float *)(a2 + 8);
    uint64_t v5 = a2 + 8;
    if (v6 != 1.0)
    {
      std::string::basic_string[abi:ne180100]<0>(v14, "beta");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v14, &v16);
      (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v16 + 216))(v16, __p, v5);
      if (v19 < 0) {
        operator delete(__p[0]);
      }
      if (v17) {
        nitro::nitro_function::nitro_function(v17);
      }
      if (v15 < 0) {
        operator delete(v14[0]);
      }
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v14, "mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v14, &v16);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v16, (_DWORD *)a2);
    if (v19 < 0) {
      operator delete(__p[0]);
    }
    if (v17) {
      nitro::nitro_function::nitro_function(v17);
    }
    if (v15 < 0) {
      operator delete(v14[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v14, "alpha");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v14, &v16);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v16, (float *)(a2 + 4));
    if (v19 < 0) {
      operator delete(__p[0]);
    }
    if (v17) {
      nitro::nitro_function::nitro_function(v17);
    }
    if (v15 < 0) {
      operator delete(v14[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v14, "beta");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v14, &v16);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v16, (float *)(a2 + 8));
    if (v19 < 0) {
      operator delete(__p[0]);
    }
    if (v17) {
      nitro::nitro_function::nitro_function(v17);
    }
    if (v15 < 0) {
      operator delete(v14[0]);
    }
    uint64_t v13 = 0;
    float v11 = 1.0;
    float v12 = 1.0;
    float v10 = 0.0;
    std::string::basic_string[abi:ne180100]<0>(v14, "is_relu");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v14, &v16);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v16, (_DWORD *)&v13 + 1);
    if (v19 < 0) {
      operator delete(__p[0]);
    }
    if (v17) {
      nitro::nitro_function::nitro_function(v17);
    }
    if (v15 < 0) {
      operator delete(v14[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v14, "is_tanh");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v14, &v16);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v16, &v13);
    if (v19 < 0) {
      operator delete(__p[0]);
    }
    if (v17) {
      nitro::nitro_function::nitro_function(v17);
    }
    if (v15 < 0) {
      operator delete(v14[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v14, "leaky_alpha");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v14, &v16);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v16, &v10);
    if (v19 < 0) {
      operator delete(__p[0]);
    }
    if (v17) {
      nitro::nitro_function::nitro_function(v17);
    }
    if (v15 < 0) {
      operator delete(v14[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v14, "tanh_alpha");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v14, &v16);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v16, &v12);
    if (v19 < 0) {
      operator delete(__p[0]);
    }
    if (v17) {
      nitro::nitro_function::nitro_function(v17);
    }
    if (v15 < 0) {
      operator delete(v14[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v14, "tanh_beta");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v14, &v16);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v16, &v11);
    if (v19 < 0) {
      operator delete(__p[0]);
    }
    if (v17) {
      nitro::nitro_function::nitro_function(v17);
    }
    if (v15 < 0) {
      operator delete(v14[0]);
    }
    if (HIDWORD(v13))
    {
      *(_DWORD *)a2 = 0;
      float v7 = v10;
      if (v10 != 0.0)
      {
        *(_DWORD *)a2 = 2;
        *(float *)(a2 + 4) = v7;
      }
    }
    if (v13)
    {
      *(_DWORD *)a2 = 1;
      float v9 = v11;
      float v8 = v12;
      if (v12 != 1.0 || v11 != 1.0)
      {
        *(_DWORD *)a2 = 5;
        *(float *)(a2 + 4) = v8;
        *(float *)(a2 + 8) = v9;
      }
    }
  }
}

void sub_192133250(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t Espresso::ANECompilerEngine::context::transform_network_implement_input_preprocessing(Espresso::ANECompilerEngine::context *this, Espresso::net *a2)
{
  uint64_t v2 = a2;
  v263[1] = *MEMORY[0x1E4F143B8];
  if (*((_DWORD *)this + 20))
  {
    BOOL v3 = (void *)*((void *)a2 + 80);
    for (unint64_t i = (void *)*((void *)a2 + 81); v3 != i; v3 += 3)
    {
      *(void *)&v210[0] = v3;
      uint64_t v5 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v2 + 23, v3, (long long **)v210);
      long long v6 = *(_OWORD *)(v5 + 72);
      *(_OWORD *)int v236 = *(_OWORD *)(v5 + 56);
      *(_OWORD *)&v236[16] = v6;
      float v7 = (const void *)*((void *)v5 + 12);
      *(void *)&v236[32] = *((void *)v5 + 11);
      memset(__p, 0, 24);
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(__p, v7, *((void *)v5 + 13), (uint64_t)(*((void *)v5 + 13) - (void)v7) >> 2);
      if (*(int *)v236 > 1 || *(int *)&v236[4] >= 2)
      {
        *(void *)&v210[0] = v3;
        *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v2 + 41, v3, (uint64_t)&std::piecewise_construct, (long long **)v210)+ 31) = 1;
        *(void *)&v210[0] = v3;
        *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v2 + 41, v3, (uint64_t)&std::piecewise_construct, (long long **)v210)+ 16) = 1;
      }
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
    }
  }
  memset(v225, 0, sizeof(v225));
  int v226 = 1065353216;
  float v8 = (const void **)*((void *)v2 + 41);
  float v9 = (const void **)((char *)v2 + 336);
  if (v8 != (const void **)((char *)v2 + 336))
  {
    do
    {
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v225, (uint64_t)(v8 + 4), (uint64_t)(v8 + 4));
      float v10 = (const void **)v8[1];
      if (v10)
      {
        do
        {
          float v11 = v10;
          float v10 = (const void **)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          float v11 = (const void **)v8[2];
          _ZF = *v11 == v8;
          float v8 = v11;
        }
        while (!_ZF);
      }
      float v8 = v11;
    }
    while (v11 != v9);
  }
  Espresso::net::get_consumers_of_blobs(v2, v225, (uint64_t)v224);
  uint64_t v12 = *((void *)v2 + 4);
  uint64_t v176 = (void *)((char *)v2 + 32);
  uint64_t v13 = *((void *)v2 + 5) - v12;
  unint64_t v14 = v13 >> 4;
  if (!v13)
  {
    unint64_t v16 = 0;
    goto LABEL_29;
  }
  uint64_t v15 = 0;
  unint64_t v16 = 0;
  char v17 = 0;
  unint64_t v18 = 0;
  while (1)
  {
    uint64_t v19 = *(void *)(*(void *)(v12 + v15) + 64);
    if (v19)
    {
      int v20 = (***(uint64_t (****)(void))(*(void *)(v19 + 8) + 8))(*(void *)(*(void *)(v19 + 8) + 8));
      if (v20 == (***(unsigned int (****)(void))(*((void *)v2 + 2) + 8))(*(void *)(*((void *)v2 + 2) + 8)))
      {
        if ((v17 & 1) == 0) {
          unint64_t v16 = v18;
        }
        char v17 = 1;
        goto LABEL_25;
      }
    }
    if (v17) {
      break;
    }
    char v17 = 0;
LABEL_25:
    ++v18;
    uint64_t v12 = *((void *)v2 + 4);
    v15 += 16;
    if (v18 >= (*((void *)v2 + 5) - v12) >> 4) {
      goto LABEL_29;
    }
  }
  unint64_t v14 = v18;
LABEL_29:
  int v21 = (uint64_t **)((char *)v2 + 328);
  v223[1] = 0;
  v223[0] = 0;
  uint64_t v222 = v223;
  uint64_t v22 = (const void **)*((void *)v2 + 41);
  if (v22 != v9)
  {
    do
    {
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&v222, v22 + 4, (uint64_t)(v22 + 4));
      __int16 v23 = (const void **)v22[1];
      if (v23)
      {
        do
        {
          uint64_t v24 = v23;
          __int16 v23 = (const void **)*v23;
        }
        while (v23);
      }
      else
      {
        do
        {
          uint64_t v24 = (const void **)v22[2];
          _ZF = *v24 == v22;
          uint64_t v22 = v24;
        }
        while (!_ZF);
      }
      uint64_t v22 = v24;
    }
    while (v24 != v9);
  }
  int v25 = (const void **)*((void *)v2 + 44);
  if (v25 != (const void **)((char *)v2 + 360))
  {
    do
    {
      if (v25[9] != v25[10]) {
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&v222, v25 + 4, (uint64_t)(v25 + 4));
      }
      long long v26 = (const void **)v25[1];
      if (v26)
      {
        do
        {
          int v27 = (const void ***)v26;
          long long v26 = (const void **)*v26;
        }
        while (v26);
      }
      else
      {
        do
        {
          int v27 = (const void ***)v25[2];
          _ZF = *v27 == v25;
          int v25 = (const void **)v27;
        }
        while (!_ZF);
      }
      int v25 = (const void **)v27;
    }
    while (v27 != (const void ***)((char *)v2 + 360));
  }
  uint64_t v28 = (uint64_t *)v222;
  if (v222 != v223)
  {
    BOOL v179 = (uint64_t **)((char *)v2 + 352);
    uint64_t v180 = (uint64_t **)((char *)v2 + 184);
    uint64_t v182 = (uint64_t **)((char *)v2 + 784);
    uint64_t v175 = (uint64_t *)((char *)v2 + 16);
    uint64_t v178 = (uint64_t)v2 + 56;
    __asm { FMOV            V11.2S, #1.0 }
LABEL_47:
    uint64_t v32 = v28 + 4;
    int v33 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>(v224, (unsigned __int8 *)v28 + 32);
    if (!v33) {
      goto LABEL_382;
    }
    for (uint64_t j = (unint64_t *)*((void *)v33 + 5); j != *((unint64_t **)v33 + 6); ++j)
    {
      if (*j < v16 || *j >= v14) {
        goto LABEL_382;
      }
    }
    LODWORD(v210[0]) = 1065353216;
    memset((char *)v210 + 12, 0, 20);
    *(void *)((char *)v210 + 4) = 0x100000000;
    uint64_t v215 = 0;
    uint64_t v211 = 0;
    uint64_t v212 = 0;
    unint64_t v213 = _D11;
    uint64_t v214 = 0;
    int v216 = 0;
    LODWORD(v217) = 1065353216;
    *(void *)((char *)&v217 + 4) = 0xFFFFFFFF00000000;
    HIDWORD(v217) = 1;
    unint64_t v219 = 0;
    uint64_t v220 = 0;
    __vImage_Buffer src = 0;
    uint64_t v221 = 0x100000003;
    int v37 = (void *)*((void *)v33 + 5);
    char v36 = (void *)*((void *)v33 + 6);
    if (v36 == v37) {
      goto LABEL_380;
    }
    uint64_t v38 = 0;
    uint64_t v39 = v36 - v37;
    uint64_t v40 = *((void *)v2 + 4);
    while (1)
    {
      if ((unint64_t)((*((void *)v2 + 5) - v40) >> 4) <= *v37) {
        std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
      }
      uint64_t v41 = *(void *)(v40 + 16 * *v37);
      unint64_t v42 = (unint64_t *)(v41 + 40);
      int v43 = *(char *)(v41 + 63);
      if (v43 < 0)
      {
        if (*(void *)(v41 + 48) == 15)
        {
          unint64_t v42 = (unint64_t *)*v42;
LABEL_63:
          unint64_t v44 = bswap64(*v42);
          unint64_t v45 = 0x74756E6E656C6564;
          if (v44 == 0x74756E6E656C6564
            && (unint64_t v44 = bswap64(*(unint64_t *)((char *)v42 + 7)),
                unint64_t v45 = 0x645F616E655F6F70,
                v44 == 0x645F616E655F6F70))
          {
            int v46 = 0;
          }
          else if (v44 < v45)
          {
            int v46 = -1;
          }
          else
          {
            int v46 = 1;
          }
          if (!v46) {
            ++v38;
          }
        }
      }
      else if (v43 == 15)
      {
        goto LABEL_63;
      }
      if (++v37 == v36)
      {
        if (v38 == v39) {
          goto LABEL_380;
        }
        if (v38) {
          Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Can't directly bind for tunneled network when input is also consumed by non-tunneled layers.");
        }
        if (((*(uint64_t (**)(Espresso::ANECompilerEngine::context *, Espresso::net *, uint64_t *, _OWORD *))(*(void *)this + 168))(this, v2, v28 + 4, v210) & 1) == 0)goto LABEL_380; {
        BOOL v47 = fabsf(*(float *)&v210[1]) > 0.000001;
        }
        if (fabsf(*((float *)&v210[1] + 1)) > 0.000001) {
          BOOL v47 = 1;
        }
        if (fabsf(*((float *)&v210[1] + 2)) > 0.000001) {
          BOOL v47 = 1;
        }
        if (fabsf(*((float *)&v210[1] + 3)) > 0.000001) {
          BOOL v47 = 1;
        }
        if (fabsf(*(float *)v210 + -1.0) > 0.000001) {
          BOOL v47 = 1;
        }
        if (HIDWORD(v210[0])) {
          char v48 = v47;
        }
        else {
          char v48 = 1;
        }
        *(void *)int v236 = v28 + 4;
        uint64_t v49 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v179, v28 + 4, (uint64_t)&std::piecewise_construct, (long long **)v236);
        long long v206 = *(_OWORD *)(v49 + 56);
        float v208 = 0;
        uint64_t v209 = 0;
        unint64_t v207 = 0;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v207, *((const void **)v49 + 9), *((void *)v49 + 10), (uint64_t)(*((void *)v49 + 10) - *((void *)v49 + 9)) >> 2);
        long long v202 = v217;
        uint64_t v204 = 0;
        uint64_t v205 = 0;
        uint64_t v203 = 0;
        uint64_t v50 = (Espresso *)std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v203, __src, (uint64_t)v219, (v219 - (unsigned char *)__src) >> 2);
        long long v52 = Espresso::espresso_os_log_subsystem(v50, v51);
        if (os_log_type_enabled(v52, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)int v236 = 134218240;
          *(double *)&v236[4] = *(float *)v210;
          *(_WORD *)&v236[12] = 2048;
          *(double *)&v236[14] = *(float *)&v210[1];
          _os_log_debug_impl(&dword_1920CB000, v52, OS_LOG_TYPE_DEBUG, "transform_network_implement_input_preprocessing: scale=%f bias=%f", v236, 0x16u);
        }

        int v55 = Espresso::espresso_os_log_subsystem(v53, v54);
        if (os_log_type_enabled(v55, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)int v236 = 67109888;
          *(_DWORD *)&v236[4] = DWORD2(v206);
          *(_WORD *)&v236[8] = 1024;
          *(_DWORD *)&v236[10] = DWORD1(v206);
          *(_WORD *)&v236[14] = 1024;
          *(_DWORD *)&v236[16] = HIDWORD(v206);
          *(_WORD *)&v236[20] = 2048;
          *(double *)&v236[22] = *(float *)&v206;
          _os_log_debug_impl(&dword_1920CB000, v55, OS_LOG_TYPE_DEBUG, "transform_network_implement_input_preprocessing, p_net: cp=%d is_signed=%d interleave_factor=%d ratio_to_float_model=%f", v236, 0x1Eu);
        }

        uint64_t v58 = Espresso::espresso_os_log_subsystem(v56, v57);
        if (os_log_type_enabled(v58, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)int v236 = 67109888;
          *(_DWORD *)&v236[4] = DWORD2(v202);
          *(_WORD *)&v236[8] = 1024;
          *(_DWORD *)&v236[10] = DWORD1(v202);
          *(_WORD *)&v236[14] = 1024;
          *(_DWORD *)&v236[16] = HIDWORD(v202);
          *(_WORD *)&v236[20] = 2048;
          *(double *)&v236[22] = *(float *)&v202;
          _os_log_debug_impl(&dword_1920CB000, v58, OS_LOG_TYPE_DEBUG, "transform_network_implement_input_preprocessing, p_in: cp=%d is_signed=%d interleave_factor=%d ratio_to_float_model=%f", v236, 0x1Eu);
        }

        if (DWORD2(v206) == DWORD2(v202)) {
          char v59 = v48;
        }
        else {
          char v59 = 1;
        }
        if (DWORD1(v206) != DWORD1(v202)) {
          char v59 = 1;
        }
        if (HIDWORD(v206) == HIDWORD(v221)) {
          char v60 = v59;
        }
        else {
          char v60 = 1;
        }
        *(void *)int v236 = v28 + 4;
        long long v61 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v180, v28 + 4, (long long **)v236);
        long long v62 = *(_OWORD *)(v61 + 72);
        long long v196 = *(_OWORD *)(v61 + 56);
        long long v197 = v62;
        char v63 = (const void *)*((void *)v61 + 12);
        uint64_t v198 = *((void *)v61 + 11);
        uint64_t v199 = 0;
        uint64_t v200 = 0;
        uint64_t v201 = 0;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v199, v63, *((void *)v61 + 13), (uint64_t)(*((void *)v61 + 13) - (void)v63) >> 2);
        int v64 = DWORD2(v196);
        if (DWORD2(v196) != v221) {
          char v60 = 1;
        }
        uint64_t v65 = *((void *)v2 + 89);
        std::string::basic_string[abi:ne180100]<0>(v236, "ane_precompiled_image_transform");
        *(void *)&long long v230 = v236;
        *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(v65 + 128), v236, (_OWORD **)&v230)+ 14) = 1;
        if ((v236[23] & 0x80000000) != 0)
        {
          operator delete(*(void **)v236);
          if ((v60 & 1) == 0) {
            goto LABEL_374;
          }
        }
        else if ((v60 & 1) == 0)
        {
          goto LABEL_374;
        }
        uint64_t v66 = *((void *)v2 + 89);
        std::string::basic_string[abi:ne180100]<0>(v236, "ane_precompiled_image_transform_added_conv");
        *(void *)&long long v230 = v236;
        *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(v66 + 128), v236, (_OWORD **)&v230)+ 14) = 1;
        if ((v236[23] & 0x80000000) != 0) {
          operator delete(*(void **)v236);
        }
        if (v64 > 4 || HIDWORD(v196) != 1) {
          goto LABEL_374;
        }
        vDSP_Length v173 = v21;
        long long v190 = v196;
        long long v191 = v197;
        uint64_t v192 = v198;
        uint64_t v194 = 0;
        uint64_t v195 = 0;
        uint64_t v193 = 0;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v193, v199, (uint64_t)v200, (v200 - (unsigned char *)v199) >> 2);
        uint64_t v67 = DWORD2(v190);
        __p[3] = _D11;
        __int16 v238 = 1;
        uint64_t v239 = 0;
        uint64_t v240 = 0;
        __int16 v241 = 0;
        uint64_t v242 = 0x1000100010001;
        int v243 = 0;
        int v245 = 1;
        int v252 = 0;
        char v253 = 0;
        uint64_t v248 = 0;
        uint64_t v249 = 0;
        memset(v236, 0, 32);
        *(void *)&v236[32] = 1;
        uint64_t v246 = 0;
        int v247 = 0x10000;
        int v250 = 0;
        __int16 v251 = 1;
        *(_OWORD *)&__p[1] = xmmword_192DCA4A0;
        long long v244 = xmmword_192DCA230;
        uint64_t v68 = (int)v221;
        __p[0] = (void *)__PAIR64__(v221, DWORD2(v190));
        std::allocate_shared[abi:ne180100]<Espresso::ANECompilerEngine::convolution_kernel,std::allocator<Espresso::ANECompilerEngine::convolution_kernel>,std::shared_ptr<Espresso::abstract_context> &,Espresso::compute_path,Espresso::convolution_uniforms &,void>(&v230, v175, (long long *)v236);
        long long v69 = v230;
        (*(void (**)(long long *__return_ptr, void))(*(void *)v230 + 472))(&v230, v230);
        (*(void (**)(std::string *__return_ptr, void))(*(void *)v69 + 488))(&v254, v69);
        _ZF = (int)v67 <= 2 || DWORD2(v210[0]) == HIDWORD(v210[0]);
        int v71 = !_ZF;
        long long v262 = v210[1];
        if (HIDWORD(v210[0]))
        {
          LODWORD(v262) = DWORD2(v210[1]);
          DWORD2(v262) = v210[1];
        }
        if ((int)v67 >= 1)
        {
          uint64_t v72 = 0;
          uint64_t v73 = 0;
          uint64_t v74 = 0;
          uint64_t v75 = *(void *)(v254.__r_.__value_.__r.__words[0] + 16);
          do
          {
            *(_DWORD *)(v75 + 4 * v74) = *((_DWORD *)&v263[-2] + v74);
            if ((int)v68 >= 1)
            {
              uint64_t v76 = 0;
              uint64_t v77 = *(void *)(v230 + 24) + v73;
              do
              {
                if (v71)
                {
                  BOOL v79 = v74 == 1 && v76 == 4;
                  BOOL v81 = v74 == 2 && v76 == 0;
                  BOOL v82 = v76 == 8 && v74 == 0;
                  BOOL v83 = 1;
                  if (!v82)
                  {
                    BOOL v85 = v74 == 3 && v76 == 12;
                    int v86 = v81 || v85;
                    if (v79) {
                      BOOL v83 = 1;
                    }
                    else {
                      BOOL v83 = v86;
                    }
                  }
                }
                else
                {
                  BOOL v83 = v72 == v76;
                }
                *(float *)(v77 + v76) = *(float *)v210 * (float)v83;
                v76 += 4;
              }
              while (4 * v68 != v76);
            }
            ++v74;
            v73 += 4 * v68;
            v72 += 4;
          }
          while (v74 != v67);
        }
        std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned short,4>,std::allocator<Espresso::blob<unsigned short,4>>,int const*&,void>(&v260, v230 + 8);
        uint64_t v87 = 0;
        long long v88 = *(int **)(v230 + 24);
        vDSP_Length v89 = (std::string *)v260.__r_.__value_.__r.__words[0];
        uint64_t v90 = *(_WORD **)(v260.__r_.__value_.__r.__words[0] + 24);
        uint64_t v91 = *(int *)(v230 + 8);
        do
        {
          v91 *= *(int *)(v230 + 12 + v87);
          v87 += 4;
        }
        while (v87 != 12);
        for (; v91; --v91)
        {
          int v92 = *v88++;
          _S0 = v92;
          __asm { FCVT            H0, S0 }
          *v90++ = _S0;
        }
        std::string::size_type size = (std::__shared_weak_count *)v260.__r_.__value_.__l.__size_;
        float v227 = v89;
        *(void *)float v228 = v260.__r_.__value_.__l.__size_;
        if (v260.__r_.__value_.__l.__size_) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v260.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
        }
        *(_OWORD *)&v258.__r_.__value_.__l.__data_ = 0uLL;
        (*(void (**)(void, std::string **, std::string *))(*(void *)v69 + 544))(v69, &v227, &v258);
        if (v258.__r_.__value_.__l.__size_) {
          nitro::nitro_function::nitro_function((std::__shared_weak_count *)v258.__r_.__value_.__l.__size_);
        }
        if (*(void *)v228) {
          nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)v228);
        }
        *(_OWORD *)&v258.__r_.__value_.__l.__data_ = *(_OWORD *)&v254.__r_.__value_.__l.__data_;
        if (v254.__r_.__value_.__l.__size_) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v254.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
        }
        (*(void (**)(void, std::string *))(*(void *)v69 + 392))(v69, &v258);
        if (v258.__r_.__value_.__l.__size_) {
          nitro::nitro_function::nitro_function((std::__shared_weak_count *)v258.__r_.__value_.__l.__size_);
        }
        if (size) {
          nitro::nitro_function::nitro_function(size);
        }
        if (v254.__r_.__value_.__l.__size_) {
          nitro::nitro_function::nitro_function((std::__shared_weak_count *)v254.__r_.__value_.__l.__size_);
        }
        if (*((void *)&v230 + 1)) {
          nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v230 + 1));
        }
        if (v193)
        {
          uint64_t v194 = v193;
          operator delete(v193);
        }
        if (*((char *)v28 + 55) >= 0) {
          size_t v95 = *((unsigned __int8 *)v28 + 55);
        }
        else {
          size_t v95 = v28[5];
        }
        std::string::basic_string[abi:ne180100]((uint64_t)&v189, v95 + 15);
        if ((v189.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          float v96 = &v189;
        }
        else {
          float v96 = (std::string *)v189.__r_.__value_.__r.__words[0];
        }
        if (v95)
        {
          if (*((char *)v28 + 55) >= 0) {
            int v97 = v28 + 4;
          }
          else {
            int v97 = (const void *)v28[4];
          }
          memmove(v96, v97, v95);
        }
        strcpy((char *)v96 + v95, "__tmp_inputtx__");
        if (*((char *)v28 + 55) >= 0) {
          size_t v98 = *((unsigned __int8 *)v28 + 55);
        }
        else {
          size_t v98 = v28[5];
        }
        std::string::basic_string[abi:ne180100]((uint64_t)v187, v98 + 15);
        if (v188 >= 0) {
          std::string v99 = v187;
        }
        else {
          std::string v99 = (void **)v187[0];
        }
        if (v98)
        {
          if (*((char *)v28 + 55) >= 0) {
            float v100 = v28 + 4;
          }
          else {
            float v100 = (const void *)v28[4];
          }
          memmove(v99, v100, v98);
        }
        strcpy((char *)v99 + v98, "__tmp_inputtx__");
        if (*((char *)v28 + 55) < 0)
        {
          uint64_t v101 = *((void *)&v69 + 1);
          std::string::__init_copy_ctor_external(&v186, (const std::string::value_type *)v28[4], v28[5]);
        }
        else
        {
          *(_OWORD *)&v186.__r_.__value_.__l.__data_ = *v32;
          v186.__r_.__value_.__r.__words[2] = v28[6];
          uint64_t v101 = *((void *)&v69 + 1);
        }
        if (SHIBYTE(v189.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&__str, v189.__r_.__value_.__l.__data_, v189.__r_.__value_.__l.__size_);
        }
        else {
          std::string __str = v189;
        }
        if (v101) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v101 + 8), 1uLL, memory_order_relaxed);
        }
        std::string::basic_string[abi:ne180100]<0>(&v184, "convolution");
        uint64_t v103 = *((void *)v2 + 2);
        uint64_t v102 = (std::__shared_weak_count *)*((void *)v2 + 3);
        if (v102) {
          atomic_fetch_add_explicit(&v102->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v174 = v102;
        v254.__r_.__value_.__r.__words[0] = 0;
        uint64_t v183 = v2;
        if (*((void *)v2 + 5) == *((void *)v2 + 4)) {
LABEL_397:
        }
          Espresso::throw_exception_selector<Espresso::blob_not_found_error>("Cannot preprocess blob due to blob not found");
        unint64_t v104 = 0;
        int v177 = -1;
        while (2)
        {
          while (2)
          {
            unint64_t v105 = v104;
            *(void *)int v236 = &v254;
            uint64_t v106 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v178, (unint64_t *)&v254, (uint64_t)&std::piecewise_construct, (uint64_t **)v236);
            unint64_t v107 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v106[4] - v106[3]) >> 3);
            if (v105 < v107)
            {
              *(void *)&long long v230 = &v254;
              uint64_t v111 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v178, (unint64_t *)&v254, (uint64_t)&std::piecewise_construct, (uint64_t **)&v230)[3]+ 24 * v105;
              if (*(char *)(v111 + 23) < 0)
              {
                std::string::__init_copy_ctor_external((std::string *)v236, *(const std::string::value_type **)v111, *(void *)(v111 + 8));
              }
              else
              {
                long long v112 = *(_OWORD *)v111;
                *(void *)&v236[16] = *(void *)(v111 + 16);
                *(_OWORD *)int v236 = v112;
              }
              char v113 = v236[23];
              if (v236[23] >= 0) {
                uint64_t v114 = v236[23];
              }
              else {
                uint64_t v114 = *(void *)&v236[8];
              }
              std::string::size_type v115 = HIBYTE(v186.__r_.__value_.__r.__words[2]);
              if ((v186.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                std::string::size_type v115 = v186.__r_.__value_.__l.__size_;
              }
              if (v114 != v115) {
                goto LABEL_237;
              }
              if ((v186.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                uint64_t v110 = &v186;
              }
              else {
                uint64_t v110 = (std::string *)v186.__r_.__value_.__r.__words[0];
              }
              if ((v236[23] & 0x80) != 0)
              {
                if (memcmp(*(const void **)v236, v110, *(size_t *)&v236[8])) {
                  goto LABEL_237;
                }
              }
              else if (v236[23])
              {
                uint64_t v116 = v236;
                uint64_t v117 = v236[23];
                while (*v116 == v110->__r_.__value_.__s.__data_[0])
                {
                  ++v116;
                  uint64_t v110 = (std::string *)((char *)v110 + 1);
                  if (!--v117) {
                    goto LABEL_232;
                  }
                }
LABEL_237:
                int v119 = 1;
                if (v113 < 0) {
LABEL_238:
                }
                  operator delete(*(void **)v236);
LABEL_239:
                unint64_t v104 = v105 + 1;
                if (!v119)
                {
                  int v120 = (std::__shared_weak_count *)*((void *)&v69 + 1);
                  goto LABEL_317;
                }
                continue;
              }
LABEL_232:
              int data = v177;
              if (v177 == -1) {
                int data = (int)v254.__r_.__value_.__l.__data_;
              }
              int v177 = data;
              if (*(void *)(*(void *)(*(void *)(*v176 + 16 * v254.__r_.__value_.__r.__words[0]) + 64) + 8) == v103) {
                goto LABEL_237;
              }
              int v119 = 0;
              if (v113 < 0) {
                goto LABEL_238;
              }
              goto LABEL_239;
            }
            break;
          }
          unint64_t v104 = 0;
          ++v254.__r_.__value_.__r.__words[0];
          uint64_t v109 = *((void *)v183 + 4);
          uint64_t v108 = *((void *)v183 + 5);
          if (v254.__r_.__value_.__r.__words[0] < (v108 - v109) >> 4) {
            continue;
          }
          break;
        }
        if (v177 == -1) {
          goto LABEL_397;
        }
        *(void *)&long long v230 = 0;
        if (v108 != v109)
        {
          for (unint64_t k = 0; ; ++k)
          {
            while (1)
            {
              *(void *)int v236 = &v230;
              std::string v122 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v178, (unint64_t *)&v230, (uint64_t)&std::piecewise_construct, (uint64_t **)v236);
              if (k < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v122[4] - v122[3]) >> 3)) {
                break;
              }
              unint64_t k = 0;
              *(void *)&long long v230 = v230 + 1;
              uint64_t v108 = *((void *)v183 + 4);
              if ((unint64_t)v230 >= (*((void *)v183 + 5) - v108) >> 4) {
                goto LABEL_265;
              }
            }
            *(void *)int v236 = &v230;
            float v123 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v178, (unint64_t *)&v230, (uint64_t)&std::piecewise_construct, (uint64_t **)v236);
            uint64_t v124 = v123[3] + 24 * k;
            uint64_t v125 = *(unsigned __int8 *)(v124 + 23);
            if ((v125 & 0x80u) == 0) {
              uint64_t v126 = *(unsigned __int8 *)(v124 + 23);
            }
            else {
              uint64_t v126 = *(void *)(v124 + 8);
            }
            std::string::size_type v127 = HIBYTE(v186.__r_.__value_.__r.__words[2]);
            if ((v186.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              std::string::size_type v127 = v186.__r_.__value_.__l.__size_;
            }
            if (v126 == v127)
            {
              if ((v186.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                int v128 = &v186;
              }
              else {
                int v128 = (std::string *)v186.__r_.__value_.__r.__words[0];
              }
              if ((v125 & 0x80) != 0)
              {
                if (memcmp(*(const void **)v124, v128, *(void *)(v124 + 8))) {
                  continue;
                }
LABEL_263:
                std::string::operator=((std::string *)v124, &__str);
                continue;
              }
              if (!*(unsigned char *)(v124 + 23)) {
                goto LABEL_263;
              }
              float v129 = (unsigned __int8 *)(v123[3] + 24 * k);
              while (*v129 == v128->__r_.__value_.__s.__data_[0])
              {
                ++v129;
                int v128 = (std::string *)((char *)v128 + 1);
                if (!--v125) {
                  goto LABEL_263;
                }
              }
            }
          }
        }
LABEL_265:
        unint64_t v233 = 0;
        long long v231 = 0u;
        int64x2_t v232 = 0u;
        long long v230 = 0u;
        float v235 = v183;
        int v234 = v177 - 1;
        long long v130 = *(_OWORD *)(v108 + 16 * v177);
        uint64_t v131 = *(void *)(v108 + 16 * v177 + 8);
        if (v131)
        {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v131 + 8), 1uLL, memory_order_relaxed);
          uint64_t v132 = (std::__shared_weak_count *)*((void *)&v231 + 1);
          long long v231 = v130;
          if (v132)
          {
            nitro::nitro_function::nitro_function(v132);
            uint64_t v133 = v231;
LABEL_270:
            uint64_t v135 = *(void *)(v133 + 64);
            uint64_t v134 = *(void *)(v133 + 72);
            if (v134) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v134 + 8), 1uLL, memory_order_relaxed);
            }
            int v136 = (std::__shared_weak_count *)*((void *)&v230 + 1);
            *(void *)&long long v230 = v135;
            *((void *)&v230 + 1) = v134;
            if (v136) {
              nitro::nitro_function::nitro_function(v136);
            }
            if (*((void *)&v69 + 1)) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v69 + 1) + 8), 1uLL, memory_order_relaxed);
            }
            if (SHIBYTE(v186.__r_.__value_.__r.__words[2]) < 0) {
              std::string::__init_copy_ctor_external(&v260, v186.__r_.__value_.__l.__data_, v186.__r_.__value_.__l.__size_);
            }
            else {
              std::string v260 = v186;
            }
            long long v262 = 0uLL;
            v263[0] = 0;
            *(void *)int v236 = &v262;
            v236[8] = 0;
            *(void *)&long long v262 = operator new(0x18uLL);
            *((void *)&v262 + 1) = v262;
            v263[0] = v262 + 24;
            *((void *)&v262 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)v263, (long long *)&v260, (long long *)&v261, (std::string *)v262);
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
              std::string::__init_copy_ctor_external(&v258, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
            }
            else {
              std::string v258 = __str;
            }
            *(void *)float v228 = 0;
            float v227 = 0;
            uint64_t v229 = 0;
            *(void *)int v236 = &v227;
            v236[8] = 0;
            float v227 = (std::string *)operator new(0x18uLL);
            *(void *)float v228 = v227;
            uint64_t v229 = v227 + 1;
            *(void *)float v228 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v229, (long long *)&v258, (long long *)&v259, v227);
            *(_DWORD *)int v236 = 0;
            memset(&v236[8], 0, 32);
            memset(__p, 0, sizeof(__p));
            int v137 = (char *)operator new(0xF8uLL);
            *((void *)v137 + 1) = 0;
            *((void *)v137 + 2) = 0;
            *(void *)int v137 = &unk_1EE389DF0;
            *((void *)v137 + 3) = &unk_1EE36C758;
            *(_OWORD *)(v137 + 40) = 0u;
            *(_OWORD *)(v137 + 56) = 0u;
            *(_OWORD *)(v137 + 72) = 0u;
            *(_OWORD *)(v137 + 88) = 0u;
            *(_OWORD *)(v137 + 104) = 0u;
            *(_OWORD *)(v137 + 120) = 0u;
            *(_OWORD *)(v137 + 136) = 0u;
            *(_OWORD *)(v137 + 152) = 0u;
            *(_OWORD *)(v137 + 161) = 0u;
            *((_OWORD *)v137 + 13) = 0u;
            *((_OWORD *)v137 + 14) = 0u;
            *((void *)v137 + 30) = 0;
            *(void *)&v236[8] = v137 + 24;
            *(void *)&v236[16] = v137;
            if (*((void *)&v69 + 1))
            {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v69 + 1) + 8), 1uLL, memory_order_relaxed);
              float v138 = (std::__shared_weak_count *)*((void *)v137 + 12);
              *(_OWORD *)(v137 + 88) = v69;
              if (v138) {
                nitro::nitro_function::nitro_function(v138);
              }
            }
            else
            {
              *((void *)v137 + 11) = v69;
              *((void *)v137 + 12) = 0;
            }
            std::string::operator=((std::string *)(*(void *)&v236[8] + 16), &v189);
            std::string::operator=((std::string *)(*(void *)&v236[8] + 40), &v184);
            int v139 = (***(uint64_t (****)(void))(*(void *)(v69 + 8) + 8))(*(void *)(*(void *)(v69 + 8)
                                                                                                  + 8));
            uint64_t v140 = *(void *)&v236[8];
            *(_DWORD *)(*(void *)&v236[8] + 8) = v139;
            uint64_t v141 = v231;
            if ((void)v231)
            {
              *(_DWORD *)(v140 + 12) = *(_DWORD *)(v231 + 12);
              if (*(char *)(v141 + 223) < 0) {
                std::string::__init_copy_ctor_external(&v254, *(const std::string::value_type **)(v141 + 200), *(void *)(v141 + 208));
              }
              else {
                std::string v254 = *(std::string *)(v141 + 200);
              }
              std::string::operator=((std::string *)(v140 + 200), &v254);
              if (SHIBYTE(v254.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v254.__r_.__value_.__l.__data_);
              }
            }
            else
            {
              uint64_t v142 = *((void *)v235 + 4);
              if (*((void *)v235 + 5) != v142) {
                *(_DWORD *)(v140 + 12) = *(_DWORD *)(*(void *)v142 + 12);
              }
            }
            std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v236[24], (std::string *)v262, *((std::string **)&v262 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v262 + 1) - v262) >> 3));
            std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&__p[1], v227, *(std::string **)v228, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)v228 - (void)v227) >> 3));
            *(_DWORD *)int v236 = v234;
            uint64_t v143 = v232.i64[1];
            if (v232.i64[1] >= v233)
            {
              uint64_t v144 = std::vector<Espresso::net::new_layer_info>::__push_back_slow_path<Espresso::net::new_layer_info const&>(&v232, (uint64_t)v236);
            }
            else
            {
              std::allocator<Espresso::net::new_layer_info>::construct[abi:ne180100]<Espresso::net::new_layer_info,Espresso::net::new_layer_info const&>(v232.i64[1], (uint64_t)v236);
              uint64_t v144 = v143 + 72;
            }
            v232.i64[1] = v144;
            v254.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p[1];
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v254);
            v254.__r_.__value_.__r.__words[0] = (std::string::size_type)&v236[24];
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v254);
            if (*(void *)&v236[16]) {
              nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&v236[16]);
            }
            *(void *)int v236 = &v227;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v236);
            if (SHIBYTE(v258.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v258.__r_.__value_.__l.__data_);
            }
            *(void *)int v236 = &v262;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v236);
            if (SHIBYTE(v260.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v260.__r_.__value_.__l.__data_);
            }
            if (*((void *)&v69 + 1)) {
              nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v69 + 1));
            }
            *(_DWORD *)int v236 = *(_DWORD *)v232.i64[0];
            uint64_t v145 = *(void *)(v232.i64[0] + 16);
            *(void *)&v236[8] = *(void *)(v232.i64[0] + 8);
            *(void *)&v236[16] = v145;
            if (v145) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v145 + 8), 1uLL, memory_order_relaxed);
            }
            *(void *)&v236[24] = 0;
            *(void *)&v236[32] = 0;
            __p[0] = 0;
            std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v236[24], *(void *)(v69 + 24), *(void *)(v69 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v69 + 32) - *(void *)(v69 + 24)) >> 3));
            memset(&__p[1], 0, 24);
            std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&__p[1], *(void *)(v69 + 48), *(void *)(v69 + 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v69 + 56) - *(void *)(v69 + 48)) >> 3));
            LODWORD(v254.__r_.__value_.__l.__data_) = *(_DWORD *)v236;
            *(_OWORD *)&v254.__r_.__value_.__r.__words[1] = *(_OWORD *)&v236[8];
            int v120 = (std::__shared_weak_count *)*((void *)&v69 + 1);
            if (*(void *)&v236[16]) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&v236[16] + 8), 1uLL, memory_order_relaxed);
            }
            memset(v255, 0, sizeof(v255));
            std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v255, *(uint64_t *)&v236[24], *(uint64_t *)&v236[32], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&v236[32] - *(void *)&v236[24]) >> 3));
            memset(v256, 0, sizeof(v256));
            std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v256, (uint64_t)__p[1], (uint64_t)__p[2], 0xAAAAAAAAAAAAAAABLL * (((char *)__p[2] - (char *)__p[1]) >> 3));
            long long v262 = 0uLL;
            v263[0] = 0;
            v260.__r_.__value_.__r.__words[0] = (std::string::size_type)&v262;
            v260.__r_.__value_.__s.__data_[8] = 0;
            *(void *)&long long v262 = operator new(0x48uLL);
            *((void *)&v262 + 1) = v262;
            v263[0] = v262 + 72;
            *((void *)&v262 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::net::new_layer_info>,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info*>((uint64_t)v263, (uint64_t)&v254, (uint64_t)&v257, v262);
            Espresso::net::insert_layers((uint64_t)v183, (uint64_t **)&v262);
            v260.__r_.__value_.__r.__words[0] = (std::string::size_type)&v262;
            std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&v260);
            v260.__r_.__value_.__r.__words[0] = (std::string::size_type)v256;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v260);
            v260.__r_.__value_.__r.__words[0] = (std::string::size_type)v255;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v260);
            if (v254.__r_.__value_.__r.__words[2]) {
              nitro::nitro_function::nitro_function((std::__shared_weak_count *)v254.__r_.__value_.__r.__words[2]);
            }
            v254.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p[1];
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v254);
            v254.__r_.__value_.__r.__words[0] = (std::string::size_type)&v236[24];
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v254);
            if (*(void *)&v236[16]) {
              nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&v236[16]);
            }
            *(void *)int v236 = &v232;
            std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)v236);
            if (*((void *)&v231 + 1)) {
              nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v231 + 1));
            }
            if (*((void *)&v230 + 1)) {
              nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v230 + 1));
            }
LABEL_317:
            uint64_t v146 = (Espresso *)v174;
            if (v174) {
              nitro::nitro_function::nitro_function(v174);
            }
            if (SHIBYTE(v184.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v184.__r_.__value_.__l.__data_);
            }
            if (v120) {
              nitro::nitro_function::nitro_function(v120);
            }
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__str.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v186.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v186.__r_.__value_.__l.__data_);
            }
            if (v105 < v107)
            {
              uint64_t v147 = Espresso::espresso_os_log_subsystem(v146, (const char *)v110);
              if (os_log_type_enabled(v147, OS_LOG_TYPE_DEBUG))
              {
                uint64_t v170 = v28 + 4;
                if (*((char *)v28 + 55) < 0) {
                  uint64_t v170 = *(uint64_t **)v32;
                }
                *(_DWORD *)int v236 = 136315138;
                *(void *)&v236[4] = v170;
                _os_log_debug_impl(&dword_1920CB000, v147, OS_LOG_TYPE_DEBUG, "Cannot apply input optimization: input blob %s used by multiple engines", v236, 0xCu);
              }
            }
            *(void *)int v236 = v28 + 4;
            uint64_t v148 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v180, v28 + 4, (long long **)v236);
            *(void *)int v236 = &v189;
            uint64_t v149 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v180, &v189, (long long **)v236);
            long long v150 = *(_OWORD *)(v148 + 56);
            long long v151 = *(_OWORD *)(v148 + 72);
            *((void *)v149 + 11) = *((void *)v148 + 11);
            *(_OWORD *)(v149 + 72) = v151;
            *(_OWORD *)(v149 + 56) = v150;
            if (v149 != v148) {
              std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v149 + 96, *((char **)v148 + 12), *((void *)v148 + 13), (uint64_t)(*((void *)v148 + 13) - *((void *)v148 + 12)) >> 2);
            }
            int v152 = v221;
            *(void *)int v236 = v28 + 4;
            *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v180, v28 + 4, (long long **)v236)+ 16) = v152;
            uint64_t v153 = (uint64_t **)*((void *)v183 + 97);
            if (v153 != v182)
            {
              while (1)
              {
                uint64_t v154 = (uint64_t **)v153[10];
                if (v154 != v153 + 11) {
                  break;
                }
LABEL_357:
                uint64_t v164 = v153[1];
                if (v164)
                {
                  do
                  {
                    float v165 = (uint64_t **)v164;
                    uint64_t v164 = (uint64_t *)*v164;
                  }
                  while (v164);
                }
                else
                {
                  do
                  {
                    float v165 = (uint64_t **)v153[2];
                    _ZF = *v165 == (uint64_t *)v153;
                    uint64_t v153 = v165;
                  }
                  while (!_ZF);
                }
                uint64_t v153 = v165;
                if (v165 == v182) {
                  goto LABEL_363;
                }
              }
              while (2)
              {
                uint64_t v155 = *((unsigned __int8 *)v154 + 55);
                if ((v155 & 0x80u) == 0) {
                  uint64_t v156 = (uint64_t *)*((unsigned __int8 *)v154 + 55);
                }
                else {
                  uint64_t v156 = v154[5];
                }
                uint64_t v157 = *((unsigned __int8 *)v28 + 55);
                int v158 = (char)v157;
                if ((v157 & 0x80u) != 0) {
                  uint64_t v157 = v28[5];
                }
                if (v156 == (uint64_t *)v157)
                {
                  if (v158 >= 0) {
                    uint64_t v159 = (unsigned __int8 *)(v28 + 4);
                  }
                  else {
                    uint64_t v159 = *(unsigned __int8 **)v32;
                  }
                  if ((v155 & 0x80) != 0)
                  {
                    if (memcmp(v154[4], v159, (size_t)v154[5])) {
                      goto LABEL_351;
                    }
                  }
                  else if (*((unsigned char *)v154 + 55))
                  {
                    uint64_t v160 = (unsigned __int8 *)(v154 + 4);
                    while (*v160 == *v159)
                    {
                      ++v160;
                      ++v159;
                      if (!--v155) {
                        goto LABEL_350;
                      }
                    }
                    goto LABEL_351;
                  }
LABEL_350:
                  int v161 = v221;
                  *(void *)int v236 = v154 + 4;
                  *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v153 + 10, v154 + 4, (long long **)v236)+ 16) = v161;
                }
LABEL_351:
                std::string::size_type v162 = v154[1];
                if (v162)
                {
                  do
                  {
                    uint64_t v163 = (uint64_t **)v162;
                    std::string::size_type v162 = (uint64_t *)*v162;
                  }
                  while (v162);
                }
                else
                {
                  do
                  {
                    uint64_t v163 = (uint64_t **)v154[2];
                    _ZF = *v163 == (uint64_t *)v154;
                    uint64_t v154 = v163;
                  }
                  while (!_ZF);
                }
                uint64_t v154 = v163;
                if (v163 == v153 + 11) {
                  goto LABEL_357;
                }
                continue;
              }
            }
LABEL_363:
            *(void *)int v236 = v28 + 4;
            int v21 = v173;
            uint64_t v2 = v183;
            *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v173, v28 + 4, (uint64_t)&std::piecewise_construct, (long long **)v236)+ 18) = 0;
            *(void *)int v236 = v28 + 4;
            *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v173, v28 + 4, (uint64_t)&std::piecewise_construct, (long long **)v236)+ 19) = 0;
            *(void *)int v236 = v28 + 4;
            *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v173, v28 + 4, (uint64_t)&std::piecewise_construct, (long long **)v236)+ 20) = 0;
            *(void *)int v236 = v28 + 4;
            *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v173, v28 + 4, (uint64_t)&std::piecewise_construct, (long long **)v236)+ 21) = 0;
            *(void *)int v236 = v28 + 4;
            *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v173, v28 + 4, (uint64_t)&std::piecewise_construct, (long long **)v236)+ 14) = 1065353216;
            *(void *)int v236 = v28 + 4;
            *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v173, v28 + 4, (uint64_t)&std::piecewise_construct, (long long **)v236)+ 16) = 1;
            *(void *)int v236 = v28 + 4;
            *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v173, v28 + 4, (uint64_t)&std::piecewise_construct, (long long **)v236)+ 17) = 1;
            *(void *)int v236 = v28 + 4;
            float v166 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v179, v28 + 4, (uint64_t)&std::piecewise_construct, (long long **)v236);
            *(_OWORD *)(v166 + 56) = v217;
            if (v166 + 56 != (char *)&v217) {
              std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v166 + 72, (char *)__src, (uint64_t)v219, (v219 - (unsigned char *)__src) >> 2);
            }
            if (DWORD2(v206) == 4 || DWORD2(v206) == 2)
            {
              int v167 = v206;
              *(void *)int v236 = &v189;
              *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v179, &v189, (uint64_t)&std::piecewise_construct, (long long **)v236)+ 14) = v167;
            }
            if (v188 < 0) {
              operator delete(v187[0]);
            }
            if (SHIBYTE(v189.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v189.__r_.__value_.__l.__data_);
            }
            if (*((void *)&v69 + 1)) {
              nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v69 + 1));
            }
LABEL_374:
            if (v199)
            {
              uint64_t v200 = v199;
              operator delete(v199);
            }
            if (v203)
            {
              uint64_t v204 = v203;
              operator delete(v203);
            }
            if (v207)
            {
              float v208 = v207;
              operator delete(v207);
            }
LABEL_380:
            if (__src)
            {
              unint64_t v219 = __src;
              operator delete(__src);
            }
LABEL_382:
            float v168 = (char *)v28[1];
            if (v168)
            {
              do
              {
                uint64_t v169 = (char **)v168;
                float v168 = *(char **)v168;
              }
              while (v168);
            }
            else
            {
              do
              {
                uint64_t v169 = (char **)v28[2];
                _ZF = *v169 == (char *)v28;
                uint64_t v28 = (uint64_t *)v169;
              }
              while (!_ZF);
            }
            uint64_t v28 = (uint64_t *)v169;
            if (v169 == v223) {
              break;
            }
            goto LABEL_47;
          }
        }
        else
        {
          long long v231 = v130;
        }
        uint64_t v133 = v130;
        goto LABEL_270;
      }
    }
  }
  std::__tree<std::string>::destroy((uint64_t)&v222, v223[0]);
  std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::__deallocate_node((void *)v224[2]);
  uint64_t v171 = v224[0];
  v224[0] = 0;
  if (v171) {
    operator delete(v171);
  }
  return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v225);
}

void sub_192135018(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,std::__shared_weak_count *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *__p,uint64_t a55,int a56,__int16 a57,char a58,char a59,void *a60,uint64_t a61,int a62,__int16 a63)
{
  Espresso::net::new_layer_info::~new_layer_info((Espresso::net::new_layer_info *)&STACK[0x420]);
  STACK[0x420] = (unint64_t)&STACK[0x3B8];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x420]);
  if (*(char *)(v76 - 233) < 0) {
    operator delete(*(void **)(v76 - 256));
  }
  STACK[0x420] = v76 - 192;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x420]);
  if (*(char *)(v76 - 201) < 0) {
    operator delete(*(void **)(v76 - 224));
  }
  if (a38)
  {
    nitro::nitro_function::nitro_function(a38);
    Espresso::single_match_state<Espresso::generic_inner_product_kernel>::~single_match_state((uint64_t)&STACK[0x3D0]);
  }
  else
  {
    Espresso::single_match_state<Espresso::generic_inner_product_kernel>::~single_match_state((uint64_t)&STACK[0x3D0]);
    a38 = 0;
  }
  if (a12) {
    nitro::nitro_function::nitro_function(a12);
  }
  if (a59 < 0) {
    operator delete(__p);
  }
  if (a38) {
    nitro::nitro_function::nitro_function(a38);
  }
  if (a65 < 0) {
    operator delete(a60);
  }
  if (a72 < 0) {
    operator delete(a67);
  }
  if (a74 < 0) {
    operator delete(a73);
  }
  if (a76 < 0) {
    operator delete(a75);
  }
  if (a38) {
    nitro::nitro_function::nitro_function(a38);
  }
  long long v78 = (void *)STACK[0x258];
  if (STACK[0x258])
  {
    STACK[0x260] = (unint64_t)v78;
    operator delete(v78);
  }
  BOOL v79 = (void *)STACK[0x280];
  if (STACK[0x280])
  {
    STACK[0x288] = (unint64_t)v79;
    operator delete(v79);
  }
  char v80 = (void *)STACK[0x2B0];
  if (STACK[0x2B0])
  {
    STACK[0x2B8] = (unint64_t)v80;
    operator delete(v80);
  }
  BOOL v81 = (void *)STACK[0x330];
  if (STACK[0x330])
  {
    STACK[0x338] = (unint64_t)v81;
    operator delete(v81);
  }
  std::__tree<std::string>::destroy((uint64_t)&STACK[0x350], (char *)STACK[0x358]);
  std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::~__hash_table((uint64_t)&STACK[0x368]);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&STACK[0x390]);
  _Unwind_Resume(a1);
}

uint64_t Espresso::ANERuntimeEngine::direct_engine::platform(Espresso::ANERuntimeEngine::direct_engine *this)
{
  return 10006;
}

char *std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void *a2, uint64_t a3, long long **a4)
{
  long long v6 = (void **)std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__find_equal<std::string>((uint64_t)a1, &v18, a2);
  float v7 = (char *)*v6;
  if (!*v6)
  {
    float v8 = (uint64_t **)v6;
    float v7 = (char *)operator new(0x88uLL);
    float v9 = (std::string *)(v7 + 32);
    float v10 = *a4;
    if (*((char *)*a4 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((void *)v10 + 1));
    }
    else
    {
      long long v11 = *v10;
      *((void *)v7 + 6) = *((void *)v10 + 2);
      *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
    }
    *((_DWORD *)v7 + 14) = 1065353216;
    *(void *)(v7 + 76) = 0;
    *(void *)(v7 + 68) = 0;
    *((_DWORD *)v7 + 21) = 0;
    *(void *)(v7 + 60) = 0x100000000;
    *((_DWORD *)v7 + 32) = 0;
    *((void *)v7 + 14) = 0;
    *((void *)v7 + 15) = 0;
    *((void *)v7 + 11) = 0;
    *((void *)v7 + 12) = 0;
    __asm { FMOV            V0.2S, #1.0 }
    *((void *)v7 + 13) = _D0;
    std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at(a1, v18, v8, (uint64_t *)v7);
  }
  return v7;
}

void sub_1921354B0(_Unwind_Exception *a1)
{
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,int>,void *>>>::operator()[abi:ne180100](0, v1);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(uint64_t **a1, const void **a2, uint64_t a3)
{
  long long v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    int v7 = *((char *)a2 + 23);
    if (v7 >= 0) {
      size_t v8 = *((unsigned __int8 *)a2 + 23);
    }
    else {
      size_t v8 = (size_t)a2[1];
    }
    if (v7 >= 0) {
      float v9 = a2;
    }
    else {
      float v9 = *a2;
    }
    do
    {
      while (1)
      {
        float v10 = (uint64_t **)v5;
        uint64_t v13 = (const void *)v5[4];
        long long v11 = v5 + 4;
        uint64_t v12 = v13;
        int v14 = *((char *)v11 + 23);
        if (v14 >= 0) {
          size_t v15 = *((unsigned __int8 *)v11 + 23);
        }
        else {
          size_t v15 = v11[1];
        }
        if (v14 >= 0) {
          unint64_t v16 = v11;
        }
        else {
          unint64_t v16 = v12;
        }
        if (v15 >= v8) {
          size_t v17 = v8;
        }
        else {
          size_t v17 = v15;
        }
        int v18 = memcmp(v9, v16, v17);
        BOOL v19 = v8 < v15;
        if (v18) {
          BOOL v19 = v18 < 0;
        }
        if (!v19) {
          break;
        }
        uint64_t v5 = *v10;
        long long v6 = v10;
        if (!*v10) {
          goto LABEL_26;
        }
      }
      int v20 = memcmp(v16, v9, v17);
      BOOL v21 = v15 < v8;
      if (v20) {
        BOOL v21 = v20 < 0;
      }
      if (!v21) {
        return v10;
      }
      uint64_t v5 = v10[1];
    }
    while (v5);
    long long v6 = v10 + 1;
LABEL_26:
    uint64_t v22 = operator new(0x38uLL);
    __int16 v23 = (std::string *)(v22 + 4);
    if (*(char *)(a3 + 23) < 0) {
      goto LABEL_29;
    }
  }
  else
  {
    float v10 = a1 + 1;
    uint64_t v22 = operator new(0x38uLL);
    __int16 v23 = (std::string *)(v22 + 4);
    if (*(char *)(a3 + 23) < 0)
    {
LABEL_29:
      std::string::__init_copy_ctor_external(v23, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
      goto LABEL_30;
    }
  }
  *(_OWORD *)&v23->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
  v23->__r_.__value_.__r.__words[2] = *(void *)(a3 + 16);
LABEL_30:
  void *v22 = 0;
  v22[1] = 0;
  long long v22[2] = v10;
  *long long v6 = v22;
  uint64_t v24 = (uint64_t *)**a1;
  int v25 = v22;
  if (v24)
  {
    *a1 = v24;
    int v25 = *v6;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v25);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return (uint64_t **)v22;
}

void sub_192135660(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::__deallocate_node(void *a1)
{
  if (a1)
  {
    uint64_t v1 = a1;
    do
    {
      uint64_t v2 = (void *)*v1;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<unsigned long>>,0>((uint64_t)(v1 + 2));
      operator delete(v1);
      uint64_t v1 = v2;
    }
    while (v2);
  }
}

uint64_t Espresso::ANECompilerEngine::context::needs_precompiled_image_transform_for_blob(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  if (!std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(void **)(a2 + 240), a3))return 0; {
  int v7 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>(a2 + 352, a3);
  }
  *(void *)&long long v43 = a3;
  size_t v8 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a2 + 184), a3, (long long **)&v43);
  long long v9 = *(_OWORD *)(v8 + 72);
  long long v44 = *(_OWORD *)(v8 + 56);
  long long v45 = v9;
  float v10 = (const void *)*((void *)v8 + 12);
  uint64_t v46 = *((void *)v8 + 11);
  long long __p = 0;
  char v48 = 0;
  uint64_t v49 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v10, *((void *)v8 + 13), (uint64_t)(*((void *)v8 + 13) - (void)v10) >> 2);
  long long v43 = 0uLL;
  long long v11 = [MEMORY[0x1E4F1CB18] standardUserDefaults];
  uint64_t v12 = [v11 persistentDomainForName:*MEMORY[0x1E4F283E0]];

  uint64_t v13 = [v12 objectForKeyedSubscript:@"espresso.ane.always_compressed"];
  char v14 = [v13 BOOLValue];

  size_t v15 = getenv("ESPRESSO_PRIVATE_ANE_ALWAYS_COMPRESSED");
  if (v15) {
    BOOL v16 = atoi(v15) != 0;
  }
  else {
    BOOL v16 = 0;
  }
  char v18 = v14 | v16;
  if (DWORD2(v44) == 3) {
    LOBYTE(v19) = v18;
  }
  else {
    LOBYTE(v19) = 0;
  }

  int v20 = (void *)(a2 + 360);
  if ((void *)(a2 + 360) == v7) {
    goto LABEL_17;
  }
  BOOL v21 = (char *)v7[9];
  uint64_t v22 = v7[10];
  if (v21 == (char *)v22) {
    goto LABEL_17;
  }
  if ((void *)(a4 + 96) != v7 + 9) {
    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)(a4 + 96), v21, v22, (v22 - (uint64_t)v21) >> 2);
  }
  int v23 = **(_DWORD **)(a4 + 96);
  if (v23 != 641877825 && v23 != 1111970369)
  {
LABEL_17:
    uint64_t v24 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>(a2 + 328, a3);
    if ((void *)(a2 + 336) == v24)
    {
      uint64_t v17 = 0;
      if ((v19 & 1) == 0) {
        goto LABEL_41;
      }
      int v25 = 0;
      int v26 = 0;
      int v27 = 0;
      int v28 = 0;
      uint64_t v29 = 0x100000000;
      int v19 = 1;
      goto LABEL_24;
    }
  }
  else
  {
    uint64_t v24 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>(a2 + 328, a3);
    int v19 = 1;
    if ((void *)(a2 + 336) == v24)
    {
      int v25 = 0;
      int v26 = 0;
      int v27 = 0;
      int v28 = 0;
      uint64_t v29 = 0x100000000;
LABEL_24:
      uint64_t v34 = 0;
      __asm { FMOV            V6.2S, #1.0 }
      float v30 = 1.0;
      float v31 = 0.0;
      float v32 = 0.0;
      float v33 = 0.0;
      goto LABEL_25;
    }
  }
  float v30 = *((float *)v24 + 14);
  uint64_t v29 = *(void *)((char *)v24 + 60);
  int v26 = *((_DWORD *)v24 + 17);
  float v31 = *((float *)v24 + 18);
  float v32 = *((float *)v24 + 19);
  float v33 = *((float *)v24 + 20);
  int v25 = *((_DWORD *)v24 + 21);
  long long v43 = *(_OWORD *)(v24 + 11);
  _D6 = v24[13];
  uint64_t v34 = v24[14];
  int v27 = *((_DWORD *)v24 + 30);
  int v28 = *((_DWORD *)v24 + 32);
  if (v19)
  {
    int v19 = 1;
LABEL_25:
    *(float *)a4 = v30;
    *(void *)(a4 + 4) = v29;
    *(_DWORD *)(a4 + 12) = v26;
    *(float *)(a4 + 16) = v31;
    *(float *)(a4 + 20) = v32;
    *(float *)(a4 + 24) = v33;
    *(_DWORD *)(a4 + 28) = v25;
    *(_OWORD *)(a4 + 32) = v43;
    *(void *)(a4 + 48) = _D6;
    *(void *)(a4 + 56) = v34;
    *(_DWORD *)(a4 + 64) = v27;
    *(_DWORD *)(a4 + 68) = v19;
    *(_DWORD *)(a4 + 72) = v28;
    if (v20 == v7
      || ((uint64_t v40 = (_DWORD *)v7[9], (_DWORD *)v7[10] == v40)
       || *v40 != 843264102
       || v31 != 0.0
       || v32 != 0.0
       || v33 != 0.0
       || v30 != 1.0)
      && (*((_DWORD *)v7 + 16) != 1 || v31 != 0.0 || v32 != 0.0 || v33 != 0.0 || v30 != 1.0))
    {
      *(void *)(a4 + 84) = 0x400000000;
      int v41 = DWORD2(v44);
      if (DWORD2(v44) == 3) {
        int v41 = 4;
      }
      *(_DWORD *)(a4 + 120) = v41;
      *(_DWORD *)(a4 + 124) = v41;
      *(_DWORD *)(a4 + 80) = 1065353216;
      *(_DWORD *)(a4 + 92) = v41;
      uint64_t v17 = 1;
      goto LABEL_41;
    }
    goto LABEL_37;
  }
  int v19 = *((_DWORD *)v24 + 31);
  if (v19) {
    goto LABEL_25;
  }
LABEL_37:
  uint64_t v17 = 0;
LABEL_41:
  if (__p)
  {
    char v48 = __p;
    operator delete(__p);
  }
  return v17;
}

void sub_192135A24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::load_network_metadata(Espresso::SerDes::generic_serdes_object &,std::string const&,std::string const&,std::shared_ptr<Espresso::abstract_context> const&,std::shared_ptr<Espresso::blob_storage_abstract> const&)::$_0::operator()(uint64_t a1, uint64_t *a2)
{
  context = (void *)MEMORY[0x192FF2020]();
  uint64_t v4 = *a2;
  BOOL v21 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  (*(void (**)(uint64_t, long long **))(*(void *)v4 + 32))(v4, &v21);
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  uint64_t v5 = v21;
  for (i = v22; v5 != i; uint64_t v5 = (long long *)((char *)v5 + 24))
  {
    if (*((char *)v5 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v20, *(const std::string::value_type **)v5, *((void *)v5 + 1));
    }
    else
    {
      long long v7 = *v5;
      v20.__r_.__value_.__r.__words[2] = *((void *)v5 + 2);
      *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v7;
    }
    LODWORD(v16) = 1065353216;
    *(void *)((char *)&v16 + 4) = 0xFFFFFFFF00000000;
    HIDWORD(v16) = 1;
    char v18 = 0;
    uint64_t v19 = 0;
    uint64_t v17 = 0;
    uint64_t v14 = 0;
    size_t v15 = 0;
    Espresso::SerDes::generic_serdes_object::operator[](v4, (uint64_t)&v20, &v10);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v10, (uint64_t)&v14);
    if (v13 < 0) {
      operator delete(__p);
    }
    if (v11) {
      nitro::nitro_function::nitro_function(v11);
    }
    Espresso::SerDes::params_io<Espresso::blob_numerical_properties>(v14, (uint64_t)&v16, 0);
    float v10 = &v20;
    size_t v8 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a1, &v20, (uint64_t)&std::piecewise_construct, (long long **)&v10);
    *(_OWORD *)(v8 + 56) = v16;
    if (v8 + 56 != (char *)&v16) {
      std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v8 + 72, (char *)v17, (uint64_t)v18, (v18 - (unsigned char *)v17) >> 2);
    }
    if (v15) {
      nitro::nitro_function::nitro_function(v15);
    }
    if (v17)
    {
      char v18 = v17;
      operator delete(v17);
    }
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v20.__r_.__value_.__l.__data_);
    }
  }
  *(void *)&long long v16 = &v21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v16);
}

void sub_192135C58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char *a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  a18 = &a29;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
  _Unwind_Resume(a1);
}

char *std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void *a2, uint64_t a3, long long **a4)
{
  long long v6 = (void **)std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__find_equal<std::string>((uint64_t)a1, &v15, a2);
  long long v7 = (char *)*v6;
  if (!*v6)
  {
    size_t v8 = (uint64_t **)v6;
    long long v7 = (char *)operator new(0x60uLL);
    v13[0] = v7;
    v13[1] = a1 + 1;
    char v14 = 0;
    long long v9 = (std::string *)(v7 + 32);
    float v10 = *a4;
    if (*((char *)*a4 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((void *)v10 + 1));
    }
    else
    {
      long long v11 = *v10;
      *((void *)v7 + 6) = *((void *)v10 + 2);
      *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
    }
    *((_DWORD *)v7 + 14) = 1065353216;
    *(void *)(v7 + 60) = 0xFFFFFFFF00000000;
    *((_DWORD *)v7 + 17) = 1;
    *((void *)v7 + 10) = 0;
    *((void *)v7 + 11) = 0;
    *((void *)v7 + 9) = 0;
    char v14 = 1;
    std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at(a1, v15, v8, (uint64_t *)v7);
    v13[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,Espresso::blob_numerical_properties>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,Espresso::blob_numerical_properties>,void *>>>>::reset[abi:ne180100]((uint64_t)v13);
  }
  return v7;
}

void sub_192135DBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,Espresso::blob_numerical_properties>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,Espresso::blob_numerical_properties>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,Espresso::blob_numerical_properties>,0>((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

void Espresso::SerDes::params_io<Espresso::blob_numerical_properties>(uint64_t a1, uint64_t a2, int a3)
{
  if (!a3)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "qspec.ratio_to_float_model");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)&__p, &v32);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v32, (float *)a2);
    if (v33 < 0) {
      operator delete((void *)v32.__r_.__value_.__r.__words[2]);
    }
    if (v32.__r_.__value_.__l.__size_) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v32.__r_.__value_.__l.__size_);
    }
    if ((char)v31 < 0) {
      operator delete(__p);
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "qspec.is_signed");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)&__p, &v32);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v32, (_DWORD *)(a2 + 4));
    if (v33 < 0) {
      operator delete((void *)v32.__r_.__value_.__r.__words[2]);
    }
    if (v32.__r_.__value_.__l.__size_) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v32.__r_.__value_.__l.__size_);
    }
    if ((char)v31 < 0) {
      operator delete(__p);
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "qspec.compute_path");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)&__p, &v32);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v32, (_DWORD *)(a2 + 8));
    goto LABEL_29;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "qspec.ratio_to_float_model");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)&__p, &v32);
  (*(void (**)(std::string::size_type, std::string::size_type *, uint64_t))(*(void *)v32.__r_.__value_.__l.__data_
                                                                                    + 216))(v32.__r_.__value_.__r.__words[0], &v32.__r_.__value_.__r.__words[2], a2);
  if (v33 < 0) {
    operator delete((void *)v32.__r_.__value_.__r.__words[2]);
  }
  if (v32.__r_.__value_.__l.__size_) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v32.__r_.__value_.__l.__size_);
  }
  if ((char)v31 < 0) {
    operator delete(__p);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "qspec.is_signed");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)&__p, &v32);
  (*(void (**)(std::string::size_type, std::string::size_type *, uint64_t))(*(void *)v32.__r_.__value_.__l.__data_
                                                                                    + 160))(v32.__r_.__value_.__r.__words[0], &v32.__r_.__value_.__r.__words[2], a2 + 4);
  if (v33 < 0) {
    operator delete((void *)v32.__r_.__value_.__r.__words[2]);
  }
  if (v32.__r_.__value_.__l.__size_) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v32.__r_.__value_.__l.__size_);
  }
  if ((char)v31 < 0) {
    operator delete(__p);
  }
  if (*(_DWORD *)(a2 + 8) != -1)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "qspec.compute_path");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)&__p, &v32);
    (*(void (**)(std::string::size_type, std::string::size_type *, uint64_t))(*(void *)v32.__r_.__value_.__l.__data_
                                                                                      + 160))(v32.__r_.__value_.__r.__words[0], &v32.__r_.__value_.__r.__words[2], a2 + 8);
LABEL_29:
    if (v33 < 0) {
      operator delete((void *)v32.__r_.__value_.__r.__words[2]);
    }
    if (v32.__r_.__value_.__l.__size_) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v32.__r_.__value_.__l.__size_);
    }
    if ((char)v31 < 0) {
      operator delete(__p);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "ane_interleave_factor");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)&__p, &v32);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v32, (_DWORD *)(a2 + 12));
  if (v33 < 0) {
    operator delete((void *)v32.__r_.__value_.__r.__words[2]);
  }
  if (v32.__r_.__value_.__l.__size_) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v32.__r_.__value_.__l.__size_);
  }
  if ((char)v31 < 0)
  {
    operator delete(__p);
    if (!a3) {
      goto LABEL_50;
    }
  }
  else if (!a3)
  {
    goto LABEL_50;
  }
  if (*(_DWORD *)(a2 + 12) != 1)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "interleave_factor");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)&__p, &v32);
    (*(void (**)(std::string::size_type, std::string::size_type *, uint64_t))(*(void *)v32.__r_.__value_.__l.__data_
                                                                                      + 160))(v32.__r_.__value_.__r.__words[0], &v32.__r_.__value_.__r.__words[2], a2 + 12);
    if (v33 < 0) {
      operator delete((void *)v32.__r_.__value_.__r.__words[2]);
    }
    if (v32.__r_.__value_.__l.__size_) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v32.__r_.__value_.__l.__size_);
    }
    if ((char)v31 < 0) {
      operator delete(__p);
    }
    goto LABEL_51;
  }
LABEL_50:
  if (a3)
  {
LABEL_51:
    uint64_t v6 = *(void *)(a2 + 16);
    if (v6 == *(void *)(a2 + 24)) {
      return;
    }
    unint64_t v7 = 0;
    memset(&v32, 0, sizeof(v32));
    do
    {
      Espresso::convert_supported_4cc_uint_to_string((Espresso *)&__p, *(_DWORD *)(v6 + 4 * v7));
      if ((v31 & 0x80u) == 0) {
        p_p = (const std::string::value_type *)&__p;
      }
      else {
        p_p = (const std::string::value_type *)__p;
      }
      if ((v31 & 0x80u) == 0) {
        std::string::size_type v9 = v31;
      }
      else {
        std::string::size_type v9 = (std::string::size_type)v30;
      }
      std::string::append(&v32, p_p, v9);
      if (v7 < ((uint64_t)(*(void *)(a2 + 24) - *(void *)(a2 + 16)) >> 2) - 1) {
        std::string::append(&v32, ",");
      }
      if ((char)v31 < 0) {
        operator delete(__p);
      }
      ++v7;
      uint64_t v6 = *(void *)(a2 + 16);
    }
    while (v7 < (*(void *)(a2 + 24) - v6) >> 2);
    std::string::basic_string[abi:ne180100]<0>(&__p, "supported_4cc_formats");
    (*(void (**)(uint64_t, void **, std::string *))(*(void *)a1 + 232))(a1, &__p, &v32);
    if ((char)v31 < 0) {
      operator delete(__p);
    }
LABEL_103:
    if ((SHIBYTE(v32.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
    goto LABEL_104;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "interleave_factor");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)&__p, &v32);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v32, (_DWORD *)(a2 + 12));
  if (v33 < 0) {
    operator delete((void *)v32.__r_.__value_.__r.__words[2]);
  }
  if (v32.__r_.__value_.__l.__size_) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v32.__r_.__value_.__l.__size_);
  }
  if ((char)v31 < 0) {
    operator delete(__p);
  }
  std::string::basic_string[abi:ne180100]<0>(&v32, "supported_4cc_formats");
  int v10 = (*(uint64_t (**)(uint64_t, std::string *))(*(void *)a1 + 24))(a1, &v32);
  int v11 = v10;
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v32.__r_.__value_.__l.__data_);
    if (!v11) {
      return;
    }
  }
  else if (!v10)
  {
    return;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "supported_4cc_formats");
  (*(void (**)(std::string *__return_ptr, uint64_t, void **))(*(void *)a1 + 112))(&v32, a1, &__p);
  if ((char)v31 < 0) {
    operator delete(__p);
  }
  if ((SHIBYTE(v32.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (!*((unsigned char *)&v32.__r_.__value_.__s + 23)) {
      return;
    }
    uint64_t v12 = &v32;
    goto LABEL_83;
  }
  if (v32.__r_.__value_.__l.__size_)
  {
    uint64_t v12 = (std::string *)v32.__r_.__value_.__r.__words[0];
LABEL_83:
    Espresso::string_split((Espresso *)&__p, (char *)v12);
    char v13 = (uint64_t *)__p;
    char v14 = v30;
    if (__p != v30)
    {
      uint64_t v15 = (void **)(a2 + 16);
      do
      {
        int v16 = Espresso::convert_supported_4cc_string_to_uint(v13);
        int v17 = v16;
        uint64_t v19 = *(char **)(a2 + 24);
        unint64_t v18 = *(void *)(a2 + 32);
        if ((unint64_t)v19 >= v18)
        {
          BOOL v21 = (char *)*v15;
          uint64_t v22 = (v19 - (unsigned char *)*v15) >> 2;
          unint64_t v23 = v22 + 1;
          if ((unint64_t)(v22 + 1) >> 62) {
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v24 = v18 - (void)v21;
          if (v24 >> 1 > v23) {
            unint64_t v23 = v24 >> 1;
          }
          if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v25 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v25 = v23;
          }
          if (v25)
          {
            unint64_t v25 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v25);
            BOOL v21 = *(char **)(a2 + 16);
            uint64_t v19 = *(char **)(a2 + 24);
          }
          else
          {
            uint64_t v26 = 0;
          }
          int v27 = (_DWORD *)(v25 + 4 * v22);
          *int v27 = v17;
          std::string v20 = v27 + 1;
          while (v19 != v21)
          {
            int v28 = *((_DWORD *)v19 - 1);
            v19 -= 4;
            *--int v27 = v28;
          }
          *(void *)(a2 + 16) = v27;
          *(void *)(a2 + 24) = v20;
          *(void *)(a2 + 32) = v25 + 4 * v26;
          if (v21) {
            operator delete(v21);
          }
        }
        else
        {
          *(_DWORD *)uint64_t v19 = v16;
          std::string v20 = v19 + 4;
        }
        *(void *)(a2 + 24) = v20;
        v13 += 3;
      }
      while (v13 != v14);
    }
    uint64_t v34 = &__p;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v34);
    goto LABEL_103;
  }
LABEL_104:
  operator delete(v32.__r_.__value_.__l.__data_);
}

void sub_1921364E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::net::new_layer_info>,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      std::allocator<Espresso::net::new_layer_info>::construct[abi:ne180100]<Espresso::net::new_layer_info,Espresso::net::new_layer_info const&>(a4 + v7, a2 + v7);
      v7 += 72;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned short,4>,std::allocator<Espresso::blob<unsigned short,4>>,int const*&,void>(void *a1, uint64_t a2)
{
  uint64_t v4 = operator new(0x60uLL);
  uint64_t v5 = v4;
  uint64_t v6 = 0;
  v4[1] = 0;
  v4[2] = 0;
  *uint64_t v4 = &unk_1EE389D80;
  uint64_t v7 = (char *)(v4 + 3);
  v4[3] = &unk_1EE36C130;
  *((_OWORD *)v4 + 4) = 0u;
  *((_OWORD *)v4 + 5) = 0u;
  uint64_t v8 = 1;
  do
  {
    uint64_t v9 = *(int *)(a2 + v6);
    *(_DWORD *)((char *)v4 + v6 + 32) = v9;
    v8 *= v9;
    v6 += 4;
  }
  while (v6 != 16);
  size_t v10 = 2 * v8;
  int v11 = Espresso::kern_alloc_uninitialized((Espresso *)(2 * v8));
  bzero(v11, v10);
  v5[6] = v11;
  *((unsigned char *)v5 + 56) = 1;
  *a1 = v7;
  a1[1] = v5;
}

void sub_192136714(_Unwind_Exception *a1)
{
  uint64_t shared_weak_owners = (std::__shared_weak_count *)v1[3].__shared_weak_owners_;
  if (shared_weak_owners) {
    nitro::nitro_function::nitro_function(shared_weak_owners);
  }
  uint64_t v4 = (std::__shared_weak_count *)v1[3].__vftable;
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v5);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(void *a1, int a2, int a3, int a4, int a5)
{
  size_t v10 = (char *)operator new(0x58uLL);
  *((void *)v10 + 1) = 0;
  *((void *)v10 + 2) = 0;
  *(void *)size_t v10 = &unk_1EE389920;
  *((void *)v10 + 3) = &unk_1EE36BEB0;
  *(_OWORD *)(v10 + 56) = 0u;
  *(_OWORD *)(v10 + 72) = 0u;
  *((_DWORD *)v10 + 8) = a2;
  int v11 = (Espresso *)(4 * a2 * (uint64_t)a3 * a4 * a5);
  uint64_t v12 = Espresso::kern_alloc_uninitialized(v11);
  bzero(v12, (size_t)v11);
  *((void *)v10 + 5) = v12;
  v10[48] = 1;
  *a1 = v10 + 24;
  a1[1] = v10;
}

void sub_192136824(_Unwind_Exception *a1)
{
  uint64_t shared_owners = (std::__shared_weak_count *)v1[3].__shared_owners_;
  if (shared_owners) {
    nitro::nitro_function::nitro_function(shared_owners);
  }
  uint64_t shared_weak_owners = (std::__shared_weak_count *)v1[2].__shared_weak_owners_;
  if (shared_weak_owners) {
    nitro::nitro_function::nitro_function(shared_weak_owners);
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v5);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<Espresso::ANECompilerEngine::convolution_kernel,std::allocator<Espresso::ANECompilerEngine::convolution_kernel>,std::shared_ptr<Espresso::abstract_context> &,Espresso::compute_path,Espresso::convolution_uniforms &,void>(void *a1, uint64_t *a2, long long *a3)
{
  uint64_t v6 = operator new(0x348uLL);
  v6[1] = 0;
  v6[2] = 0;
  *uint64_t v6 = &unk_1EE384F30;
  Espresso::ANECompilerEngine::convolution_kernel::convolution_kernel(v6 + 3, a2, a3);
  *a1 = v7;
  a1[1] = v6;
}

void sub_1921368C0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void Espresso::generic_convolution_kernel::create_weights_blob(Espresso::generic_convolution_kernel *this@<X0>, void *a2@<X8>)
{
  int v2 = *((_DWORD *)this + 114);
  if (v2 <= 1) {
    int v2 = 1;
  }
  int v3 = *((_DWORD *)this + 105);
  if (v3 <= 1) {
    int v3 = 1;
  }
  int v4 = *((_DWORD *)this + 86) * v2;
  int v5 = *((_DWORD *)this + 106);
  if (v5 <= 1) {
    int v5 = 1;
  }
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(a2, *((_DWORD *)this + 88), *((_DWORD *)this + 89), *((_DWORD *)this + 87) / v3, v4 * v5);
}

void Espresso::generic_convolution_kernel::create_biases_blob(Espresso::generic_convolution_kernel *this@<X0>, void *a2@<X8>)
{
  int v4 = *((_DWORD *)this + 86);
  if (*((_DWORD *)this + 104))
  {
    int v5 = 4 * v4;
    int v4 = *((_DWORD *)this + 106);
    if (v4 <= 1) {
      int v4 = 1;
    }
  }
  else
  {
    int v6 = *((_DWORD *)this + 106);
    if (v6 <= 1) {
      int v5 = 1;
    }
    else {
      int v5 = v6;
    }
  }
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(a2, v5 * v4, 1, 1, 1);
}

void Espresso::ANECompilerEngine::convolution_kernel::set_f16_weights(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 792) = v2;
  int v4 = *(std::__shared_weak_count **)(a1 + 800);
  *(void *)(a1 + 800) = v3;
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
}

void Espresso::ANECompilerEngine::convolution_kernel::set_biases(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 640) = v2;
  int v4 = *(std::__shared_weak_count **)(a1 + 648);
  *(void *)(a1 + 648) = v3;
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
}

uint64_t std::__shared_ptr_pointer<MIL::Validation::OpParameterConstraintTarget  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<MIL::Validation::OpOutputConstraintTarget  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__function::__func<MIL::ValidationResult (*)(MIL::IROperation const&),std::allocator<MIL::ValidationResult (*)(MIL::IROperation const&)>,MIL::ValidationResult ()(MIL::IROperation const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE377730;
  a2[1] = v2;
  return result;
}

void E5PlatformManagerImpl::ParsePlatformNames(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  char v10 = 1;
  __p.n128_u16[0] = 44;
  E5Common::StringUtils::Split(a2, (char *)&__p, (uint64_t)&v11);
  if (v10 < 0) {
    operator delete((void *)__p.n128_u64[0]);
  }
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  int v5 = (unsigned __int8 *)v11;
  int v6 = v12;
  if (v11 != v12)
  {
    do
    {
      E5PlatformManagerImpl::PlatformIdForName(a1, v5, &__p);
      std::__hash_table<E5Common::PlatformIdentifier,std::hash<E5Common::PlatformIdentifier>,std::equal_to<E5Common::PlatformIdentifier>,std::allocator<E5Common::PlatformIdentifier>>::__emplace_unique_key_args<E5Common::PlatformIdentifier,E5Common::PlatformIdentifier const&>(a3, (uint64_t)&__p, &__p);
      E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&__p);
      v5 += 24;
    }
    while (v5 != v6);
    int v5 = (unsigned __int8 *)v11;
  }
  if (v5)
  {
    uint64_t v7 = v12;
    uint64_t v8 = v5;
    if (v12 != v5)
    {
      do
      {
        if ((char)*(v7 - 1) < 0) {
          operator delete(*((void **)v7 - 3));
        }
        v7 -= 24;
      }
      while (v7 != v5);
      uint64_t v8 = v11;
    }
    uint64_t v12 = v5;
    operator delete(v8);
  }
}

void sub_192136B50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *std::__hash_table<E5Common::PlatformIdentifier,std::hash<E5Common::PlatformIdentifier>,std::equal_to<E5Common::PlatformIdentifier>,std::allocator<E5Common::PlatformIdentifier>>::__emplace_unique_key_args<E5Common::PlatformIdentifier,E5Common::PlatformIdentifier const&>(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  uint64_t v7 = (void *)(a1 + 24);
  unint64_t v8 = std::hash<E5Common::PlatformIdentifier>::operator()(a1 + 24, a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    uint64_t v12 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      char v13 = *v12;
      if (*v12)
      {
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v15 = v13[1];
            if (v15 == v9)
            {
              if (E5Common::PlatformIdentifier::operator==((uint64_t)(v13 + 2), a2)) {
                return v13;
              }
            }
            else if ((v15 & (v10 - 1)) != v3)
            {
              goto LABEL_23;
            }
            char v13 = (void *)*v13;
            if (!v13) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v14 = v13[1];
          if (v14 == v9)
          {
            if (E5Common::PlatformIdentifier::operator==((uint64_t)(v13 + 2), a2)) {
              return v13;
            }
          }
          else
          {
            if (v14 >= v10) {
              v14 %= v10;
            }
            if (v14 != v3) {
              break;
            }
          }
          char v13 = (void *)*v13;
        }
        while (v13);
      }
    }
  }
LABEL_23:
  int v16 = (void *)(a1 + 16);
  char v13 = operator new(0x20uLL);
  void *v13 = 0;
  v13[1] = v9;
  *((_OWORD *)v13 + 1) = *a3;
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (v10 && (float)(v18 * (float)v10) >= v17)
  {
    uint64_t v19 = *(void *)a1;
    std::string v20 = *(void **)(*(void *)a1 + 8 * v3);
    if (v20)
    {
LABEL_26:
      void *v13 = *v20;
LABEL_61:
      *std::string v20 = v13;
      goto LABEL_62;
    }
  }
  else
  {
    BOOL v21 = 1;
    if (v10 >= 3) {
      BOOL v21 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v22 = v21 | (2 * v10);
    unint64_t v23 = vcvtps_u32_f32(v17 / v18);
    if (v22 <= v23) {
      size_t prime = v23;
    }
    else {
      size_t prime = v22;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v25 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v25) {
      goto LABEL_37;
    }
    if (prime < *(void *)&v25)
    {
      unint64_t v26 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v25 < 3uLL || (uint8x8_t v27 = (uint8x8_t)vcnt_s8(v25), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
      {
        unint64_t v26 = std::__next_prime(v26);
      }
      else
      {
        uint64_t v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2) {
          unint64_t v26 = v28;
        }
      }
      if (prime <= v26) {
        size_t prime = v26;
      }
      if (prime < *(void *)&v25) {
LABEL_37:
      }
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v10 = *(void *)(a1 + 8);
    unint64_t v29 = v10 - 1;
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
      {
        unint64_t v3 = v9 % v10;
        uint64_t v19 = *(void *)a1;
        std::string v20 = *(void **)(*(void *)a1 + 8 * (v9 % v10));
        if (v20) {
          goto LABEL_26;
        }
      }
      else
      {
        unint64_t v3 = v9;
        uint64_t v19 = *(void *)a1;
        std::string v20 = *(void **)(*(void *)a1 + 8 * v9);
        if (v20) {
          goto LABEL_26;
        }
      }
    }
    else
    {
      unint64_t v3 = v29 & v9;
      uint64_t v19 = *(void *)a1;
      std::string v20 = *(void **)(*(void *)a1 + 8 * (v29 & v9));
      if (v20) {
        goto LABEL_26;
      }
    }
  }
  void *v13 = *v16;
  *int v16 = v13;
  *(void *)(v19 + 8 * v3) = v16;
  if (*v13)
  {
    unint64_t v30 = *(void *)(*v13 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v30 >= v10) {
        v30 %= v10;
      }
    }
    else
    {
      v30 &= v10 - 1;
    }
    std::string v20 = (void *)(*(void *)a1 + 8 * v30);
    goto LABEL_61;
  }
LABEL_62:
  ++*v7;
  return v13;
}

void sub_192136ED0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<E5Common::PlatformIdentifier,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<E5Common::PlatformIdentifier,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

__n128 E5PlatformManagerImpl::PlatformIdForName@<Q0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, __n128 *a3@<X8>)
{
  int v5 = (__n128 *)(a1 + 24);
  do
  {
    do
    {
      int v5 = (__n128 *)v5->n128_u64[0];
      if (!v5)
      {
        exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        std::runtime_error::runtime_error(exception, &__s1);
        __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      int v6 = (unsigned __int8 *)v5[5].n128_u64[0];
      uint64_t v7 = (unsigned __int8 *)v5[5].n128_u64[1];
    }
    while (v6 == v7);
    do
    {
      E5Common::StringUtils::ToLower(v6, (uint64_t)&__s1);
      E5Common::StringUtils::ToLower(a2, (uint64_t)__p);
      char v8 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
      if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = __s1.__r_.__value_.__l.__size_;
      }
      unint64_t v10 = v25;
      int v11 = (char)v25;
      if ((v25 & 0x80u) != 0) {
        unint64_t v10 = (unint64_t)__p[1];
      }
      if (size != v10)
      {
        BOOL v21 = 0;
        if (((char)v25 & 0x80000000) == 0) {
          goto LABEL_26;
        }
        goto LABEL_30;
      }
      if ((v25 & 0x80u) == 0) {
        uint64_t v12 = __p;
      }
      else {
        uint64_t v12 = (void **)__p[0];
      }
      if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
      {
        BOOL v21 = memcmp(__s1.__r_.__value_.__l.__data_, v12, __s1.__r_.__value_.__l.__size_) == 0;
        goto LABEL_25;
      }
      if (*((unsigned char *)&__s1.__r_.__value_.__s + 23))
      {
        uint64_t v13 = HIBYTE(__s1.__r_.__value_.__r.__words[2]) - 1;
        p_s1 = &__s1;
        do
        {
          int v16 = p_s1->__r_.__value_.__s.__data_[0];
          p_s1 = (std::string *)((char *)p_s1 + 1);
          int v15 = v16;
          int v18 = *(unsigned __int8 *)v12;
          uint64_t v12 = (void **)((char *)v12 + 1);
          int v17 = v18;
          BOOL v20 = v13-- != 0;
          BOOL v21 = v15 == v17;
        }
        while (v15 == v17 && v20);
LABEL_25:
        if ((v11 & 0x80000000) == 0) {
          goto LABEL_26;
        }
        goto LABEL_30;
      }
      BOOL v21 = 1;
      if (((char)v25 & 0x80000000) == 0)
      {
LABEL_26:
        if ((v8 & 0x80) == 0) {
          goto LABEL_27;
        }
        goto LABEL_31;
      }
LABEL_30:
      operator delete(__p[0]);
      if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) == 0)
      {
LABEL_27:
        if (v21) {
          goto LABEL_34;
        }
        goto LABEL_32;
      }
LABEL_31:
      operator delete(__s1.__r_.__value_.__l.__data_);
      if (v21) {
        goto LABEL_34;
      }
LABEL_32:
      v6 += 24;
    }
    while (v6 != v7);
    int v6 = v7;
LABEL_34:
    ;
  }
  while (v6 == (unsigned __int8 *)v5[5].n128_u64[1]);
  __n128 result = v5[1];
  *a3 = result;
  return result;
}

void sub_1921370B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
  {
    operator delete(__p);
    if ((v18 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v17);
  _Unwind_Resume(a1);
}

void E5Common::StringUtils::ToLower(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = a1;
  int v4 = (char)a1[23];
  if (v4 < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)a2, *(const std::string::value_type **)a1, *((void *)a1 + 1));
    if ((char)v2[23] < 0)
    {
      uint64_t v7 = v2;
      uint64_t v2 = *(unsigned __int8 **)v2;
      uint64_t v5 = *((void *)v7 + 1);
      if (!v5) {
        return;
      }
    }
    else
    {
      uint64_t v5 = v2[23];
      if (!v2[23]) {
        return;
      }
    }
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)a1;
    *(void *)(a2 + 16) = *((void *)a1 + 2);
    uint64_t v5 = v4;
    if (!(_BYTE)v4) {
      return;
    }
  }
  if (*(char *)(a2 + 23) >= 0) {
    int v6 = (unsigned char *)a2;
  }
  else {
    int v6 = *(unsigned char **)a2;
  }
  do
  {
    *v6++ = __tolower(*v2++);
    --v5;
  }
  while (v5);
}

void sub_1921371A8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<E5AOT::Operators::E5ML_ios16::Call::Make(MIL::MILContext &,std::string)::$_0,std::allocator<E5AOT::Operators::E5ML_ios16::Call::Make(MIL::MILContext &,std::string)::$_0>,MIL::ValidationResult ()(MIL::IROperation const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EE379CA8;
}

uint64_t Espresso::ANECompilerEngine::deconvolution_kernel::is_valid_for_engine(uint64_t a1, int64x2_t **a2, void *a3)
{
  uint64_t v6 = a3[6];
  uint64_t v7 = *(std::__shared_weak_count **)(v6 + 80);
  if (v7)
  {
    char v8 = std::__shared_weak_count::lock(v7);
    if (v8) {
      uint64_t v9 = *(void *)(v6 + 72);
    }
    else {
      uint64_t v9 = 0;
    }
  }
  else
  {
    uint64_t v9 = 0;
    char v8 = 0;
  }
  unint64_t v10 = Espresso::ANECompilerEngine::ane_arch_allow_network_override(v9 + 472);
  Espresso::ANECompilerEngine::ane_kernel::get_ane_validator((Espresso::ANECompilerEngine::ane_kernel *)v16, (NSString *)(a1 + 560), v10);
  int v11 = *a2;
  uint64_t v12 = a2[1];
  v15[0] = v11;
  v15[1] = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->i64[1], 1uLL, memory_order_relaxed);
  }
  uint64_t is_valid_for_engine_conv = Espresso::ANECompilerEngine::is_valid_for_engine_conv((uint64_t)v16, (uint64_t *)(a1 + 472), a1 + 304, a3, v15, 1);
  if (v12) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v12);
  }
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }

  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  return is_valid_for_engine_conv;
}

void sub_1921372D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (v14) {
    nitro::nitro_function::nitro_function(v14);
  }
  if (a12) {
    nitro::nitro_function::nitro_function(a12);
  }

  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
  _Unwind_Resume(a1);
}

BOOL Espresso::is_valid_kernel_input_size(uint64_t a1, uint64_t *a2, int a3)
{
  unsigned int v6 = *((_DWORD *)a2 + 16);
  uint64_t v7 = a2[6];
  char v8 = *(std::__shared_weak_count **)(v7 + 80);
  if (v8 && (uint64_t v9 = std::__shared_weak_count::lock(v8)) != 0)
  {
    unint64_t v10 = v9;
    char v11 = 0;
    uint64_t v12 = *(const Espresso::net **)(v7 + 72);
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    unint64_t v10 = 0;
    uint64_t v12 = 0;
    char v11 = 1;
  }
  uint64_t v13 = *a2;
  uint64_t v14 = *(void *)(*a2 + 32);
  long long v15 = *(_OWORD *)(*a2 + 16);
  v55[0] = *(_OWORD *)*a2;
  v55[1] = v15;
  uint64_t v56 = v14;
  __n128 __p = 0;
  uint64_t v58 = 0;
  uint64_t v59 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *(const void **)(v13 + 40), *(void *)(v13 + 48), (uint64_t)(*(void *)(v13 + 48) - *(void *)(v13 + 40)) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v60, v12, (const Espresso::layer_shape *)v55, 1);
  if (__p)
  {
    uint64_t v58 = __p;
    operator delete(__p);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  if ((v11 & 1) == 0) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v16 = a2[3];
  uint64_t v17 = *(void *)(v16 + 32);
  long long v18 = *(_OWORD *)(v16 + 16);
  v49[0] = *(_OWORD *)v16;
  v49[1] = v18;
  uint64_t v50 = v17;
  uint64_t v51 = 0;
  long long v52 = 0;
  uint64_t v53 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v51, *(const void **)(v16 + 40), *(void *)(v16 + 48), (uint64_t)(*(void *)(v16 + 48) - *(void *)(v16 + 40)) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v54, v12, (const Espresso::layer_shape *)v49, 1);
  if (v51)
  {
    long long v52 = v51;
    operator delete(v51);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  int v20 = *(_DWORD *)(a1 + 48);
  int v19 = *(_DWORD *)(a1 + 52);
  BOOL v21 = Espresso::ANECompilerEngine::ane_arch_allow_network_override((uint64_t)v12 + 472);
  if ((Espresso::ANECompilerEngine::convolution_kernel::dilation_rate_supported_by_anec(a1, v21) & 1) == 0)
  {
    int v20 = (*(_DWORD *)(a1 + 48) - 1) * *(__int16 *)(a1 + 96) + 1;
    int v19 = (*(_DWORD *)(a1 + 52) - 1) * *(__int16 *)(a1 + 98) + 1;
  }
  if (*(int *)(a1 + 116) <= 1) {
    int v22 = 1;
  }
  else {
    int v22 = *(_DWORD *)(a1 + 116);
  }
  if (v6 >= 2) {
    int v23 = 15;
  }
  else {
    int v23 = 7;
  }
  BOOL v24 = v20 > v23;
  BOOL v25 = v19 > 15;
  if (a3)
  {
    if (v19 > 15 || v20 > v23)
    {
      BOOL v26 = 0;
      goto LABEL_69;
    }
    int v29 = *(__int16 *)(a1 + 92);
    int v31 = *(__int16 *)(a1 + 94);
    if (v29 == 2)
    {
      if ((v20 & 1) != 0 || (v20 >= 0 ? (char v32 = v20) : (char v32 = v20 + 1), (v32 & 2) != 0))
      {
        BOOL v25 = 0;
        int v33 = (v20 + 1) >> 1;
      }
      else
      {
        BOOL v25 = 0;
        int v33 = (v20 >> 1) + 1;
      }
      int v30 = 1;
      int v29 = 2;
      int v28 = *(__int16 *)(a1 + 94);
      int v27 = 1;
      goto LABEL_47;
    }
    BOOL v25 = 0;
    BOOL v24 = 0;
    int v30 = 1;
    int v28 = *(__int16 *)(a1 + 94);
    int v27 = 1;
  }
  else
  {
    int v27 = *(__int16 *)(a1 + 94);
    int v28 = 1;
    if (v20 <= v23) {
      int v29 = 1;
    }
    else {
      int v29 = 2;
    }
    if (v20 <= v23) {
      int v30 = *(__int16 *)(a1 + 92);
    }
    else {
      int v30 = 2;
    }
    if (v19 <= 15) {
      int v31 = 1;
    }
    else {
      int v31 = 2;
    }
    if (v19 > 15) {
      int v27 = 2;
    }
  }
  int v33 = v20 + (v24 && (v20 & 1) == 0);
LABEL_47:
  int v34 = (*(_DWORD *)(a1 + 44) - 1) / v22 + 1;
  if (v28 == 2)
  {
    if ((v19 & 1) != 0 || (v19 >= 0 ? (char v35 = v19) : (char v35 = v19 + 1), (v35 & 2) != 0)) {
      int v36 = (v19 + 1) >> 1;
    }
    else {
      int v36 = (v19 >> 1) + 1;
    }
  }
  else
  {
    BOOL v37 = (v19 & 1) == 0 && v25;
    int v36 = v19 + v37;
  }
  int v38 = v31 * v29;
  int v39 = 2 * v38;
  int v40 = v38 * v34 * (v33 % v30 + v33) * (v36 % v27 + v36);
  if (v6 >= 2) {
    char v41 = 3;
  }
  else {
    char v41 = 4;
  }
  int v42 = v40 << v41;
  int v44 = v42 + 7;
  BOOL v43 = v42 < -7;
  int v45 = v42 + 14;
  if (!v43) {
    int v45 = v44;
  }
  int v46 = v39 + (v45 >> 3) + 2;
  int v47 = v46 & 0x1F;
  if (v46 <= 0) {
    int v47 = -(-v46 & 0x1F);
  }
  if (v47) {
    int v46 = v46 - v47 + 32;
  }
  BOOL v26 = v46 <= 0x10000;
LABEL_69:

  if ((v11 & 1) == 0) {
    nitro::nitro_function::nitro_function(v10);
  }
  return v26;
}

void sub_192137678(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  if ((v29 & 1) == 0) {
    nitro::nitro_function::nitro_function(v27);
  }
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::query_dilation_options(uint64_t a1, int a2, int a3, char *a4, unsigned char *a5, void *a6)
{
  void v40[2] = *MEMORY[0x1E4F143B8];
  id v11 = a6;
  *a4 = 0;
  *a5 = 0;
  int v12 = Espresso::ANECompilerEngine::convolution_kernel::dilation_rate_supported_by_anec(a1, v11);
  uint64_t v13 = [MEMORY[0x1E4F1CB18] standardUserDefaults];
  uint64_t v14 = [v13 persistentDomainForName:*MEMORY[0x1E4F283E0]];

  BOOL v16 = Espresso::ANECompilerEngine::sparsity_options::force_dense_dilated_convs(v14, v15);
  if (!v12)
  {
    char v17 = 1;
    goto LABEL_29;
  }
  char v17 = 0;
  int v18 = *(__int16 *)(a1 + 96);
  int v19 = *(__int16 *)(a1 + 98);
  BOOL v20 = v19 < 2 && v18 < 2;
  if (!v20 && a2)
  {
    unsigned int v21 = (*(_DWORD *)(a1 + 48) - 1) * v18 + 1;
    if (a3 == 4 || a3 == 2)
    {
      if (v21 >= 0x1E)
      {
        std::to_string(&v38, v21);
        BOOL v25 = std::string::insert(&v38, 0, "Filter width of ");
        long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
        v39.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v26;
        v25->__r_.__value_.__l.__size_ = 0;
        v25->__r_.__value_.__r.__words[2] = 0;
        v25->__r_.__value_.__r.__words[0] = 0;
        BOOL v24 = std::string::append(&v39, " exceeds max filter width in S/Int8.");
        goto LABEL_17;
      }
    }
    else
    {
      if (a3 != 1)
      {
        char v32 = 0;
        int v33 = "Invalid compute path.";
        goto LABEL_23;
      }
      if (v21 >= 0xE)
      {
        std::to_string(&v38, v21);
        int v22 = std::string::insert(&v38, 0, "Filter width of ");
        long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
        v39.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v23;
        v22->__r_.__value_.__l.__size_ = 0;
        v22->__r_.__value_.__r.__words[2] = 0;
        v22->__r_.__value_.__r.__words[0] = 0;
        BOOL v24 = std::string::append(&v39, " exceeds max filter width in fp16.");
LABEL_17:
        int v30 = (void *)v24->__r_.__value_.__r.__words[0];
        v40[0] = v24->__r_.__value_.__l.__size_;
        *(void *)((char *)v40 + 7) = *(std::string::size_type *)((char *)&v24->__r_.__value_.__r.__words[1] + 7);
        char v31 = HIBYTE(v24->__r_.__value_.__r.__words[2]);
        v24->__r_.__value_.__l.__size_ = 0;
        v24->__r_.__value_.__r.__words[2] = 0;
        v24->__r_.__value_.__r.__words[0] = 0;
        char v34 = 0;
        *(void *)&v36[7] = *(void *)((char *)v40 + 7);
        __n128 __p = v30;
        *(void *)int v36 = v40[0];
        char v37 = v31;
        if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v39.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v38.__r_.__value_.__l.__data_);
        }
        goto LABEL_24;
      }
    }
    unsigned int v27 = (*(_DWORD *)(a1 + 52) - 1) * v19 + 1;
    if (v27 >= 0x1E)
    {
      std::to_string(&v38, v27);
      int v28 = std::string::insert(&v38, 0, "Filter height of ");
      long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
      v39.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v29;
      v28->__r_.__value_.__l.__size_ = 0;
      v28->__r_.__value_.__r.__words[2] = 0;
      v28->__r_.__value_.__r.__words[0] = 0;
      BOOL v24 = std::string::append(&v39, " exceeds max filter height.");
      goto LABEL_17;
    }
    int v33 = "Success";
    char v32 = 1;
LABEL_23:
    char v34 = v32;
    std::string::basic_string[abi:ne180100]<0>(&__p, v33);
LABEL_24:
    if (v37 < 0) {
      operator delete(__p);
    }
    if (v34) {
      char v17 = 1;
    }
    else {
      char v17 = v12 ^ 1;
    }
  }
LABEL_29:
  *a4 = v17;
  *a5 = (v12 ^ 1) & !v16;
}

void sub_1921379C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  if (a19 < 0) {
    operator delete(a14);
  }

  _Unwind_Resume(a1);
}

uint64_t Espresso::ANECompilerEngine::is_valid_for_engine_conv(uint64_t a1, uint64_t *a2, uint64_t a3, void *a4, int64x2_t **a5, int a6)
{
  if (!a6
    || (int v11 = *(_DWORD *)(a3 + 116), v11 < 2)
    || (v11 == *(_DWORD *)(a3 + 44) ? (BOOL v12 = v11 == *(_DWORD *)(a3 + 40)) : (BOOL v12 = 0), v12))
  {
    uint64_t v28 = a4[6];
    long long v29 = *(std::__shared_weak_count **)(v28 + 80);
    if (v29 && (int v30 = std::__shared_weak_count::lock(v29)) != 0)
    {
      char v219 = 0;
      char v31 = *(const Espresso::net **)(v28 + 72);
      uint64_t v220 = v30;
      atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    else
    {
      uint64_t v220 = 0;
      char v31 = 0;
      char v219 = 1;
    }
    uint64_t v32 = *a4;
    uint64_t v33 = *(void *)(*a4 + 32);
    long long v34 = *(_OWORD *)(*a4 + 16);
    v265[0] = *(_OWORD *)*a4;
    v265[1] = v34;
    uint64_t v266 = v33;
    int v267 = 0;
    uint64_t v269 = 0;
    unint64_t v268 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v267, *(const void **)(v32 + 40), *(void *)(v32 + 48), (uint64_t)(*(void *)(v32 + 48) - *(void *)(v32 + 40)) >> 2);
    Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)&v270, v31, (const Espresso::layer_shape *)v265, 1);
    if (v267)
    {
      unint64_t v268 = v267;
      operator delete(v267);
    }
    char v35 = v220;
    if (v220)
    {
      nitro::nitro_function::nitro_function(v220);
      char v35 = v220;
    }
    if ((v219 & 1) == 0) {
      atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v36 = a4[3];
    uint64_t v37 = *(void *)(v36 + 32);
    long long v38 = *(_OWORD *)(v36 + 16);
    v259[0] = *(_OWORD *)v36;
    v259[1] = v38;
    uint64_t v260 = v37;
    uint64_t v261 = 0;
    uint64_t v263 = 0;
    long long v262 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v261, *(const void **)(v36 + 40), *(void *)(v36 + 48), (uint64_t)(*(void *)(v36 + 48) - *(void *)(v36 + 40)) >> 2);
    Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)&v264, v31, (const Espresso::layer_shape *)v259, 1);
    if (v261)
    {
      long long v262 = v261;
      operator delete(v261);
    }
    if (v220) {
      nitro::nitro_function::nitro_function(v220);
    }
    int32x2_t v217 = *(int32x2_t *)(a3 + 48);
    uint64_t v213 = (uint64_t)v31 + 472;
    int v216 = Espresso::ANECompilerEngine::ane_arch_allow_network_override((uint64_t)v31 + 472);
    if ((Espresso::ANECompilerEngine::convolution_kernel::dilation_rate_supported_by_anec(a3, v216) & 1) == 0)
    {
      v39.i32[0] = *(__int16 *)(a3 + 96);
      v39.i32[1] = *(__int16 *)(a3 + 98);
      int32x2_t v217 = vmla_s32((int32x2_t)0x100000001, vadd_s32(*(int32x2_t *)(a3 + 48), (int32x2_t)-1), v39);
    }
    if (a4[1] - *a4 == 64)
    {
      uint64_t v40 = *(void *)a4[6] + 224 * a4[9];
      char v41 = *(long long **)(v40 + 136);
      if (*(long long **)(v40 + 144) == v41) {
        std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
      }
      if (*((char *)v41 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v258, *(const std::string::value_type **)v41, *((void *)v41 + 1));
      }
      else
      {
        long long v42 = *v41;
        v258.__r_.__value_.__r.__words[2] = *((void *)v41 + 2);
        *(_OWORD *)&v258.__r_.__value_.__l.__data_ = v42;
      }
      if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*((void **)v31 + 45), &v258))
      {
        int v48 = *(_DWORD *)(std::map<std::string,Espresso::blob_numerical_properties>::at((uint64_t)v31 + 352, &v258) + 8);
        if (v48 == -1) {
          int v49 = 1;
        }
        else {
          int v49 = v48;
        }
      }
      else
      {
        int v49 = 1;
      }
      if (SHIBYTE(v258.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v258.__r_.__value_.__l.__data_);
      }
      BOOL v43 = Espresso::ANECompilerEngine::ane_kernel::call_ane_validate_for_conv(a1, v216, a2, a3, (uint64_t)&v270, v49, (uint64_t)&v264, a6);
      if ((a6 & 1) == 0)
      {
LABEL_75:
        int v50 = *(__int16 *)(a3 + 72);
        if (v50 != 4)
        {
          if (v50 == 2)
          {
            unsigned int v46 = 0;
            unsigned int v47 = 0;
            int v44 = 0;
            int data = 0;
            if (v43) {
              goto LABEL_244;
            }
            goto LABEL_86;
          }
          if (v50 != 1)
          {
            int data = *(__int16 *)(a3 + 80);
            int v44 = *(__int16 *)(a3 + 82);
            unsigned int v47 = *(__int16 *)(a3 + 84);
            unsigned int v46 = *(__int16 *)(a3 + 86);
            if (v43) {
              goto LABEL_244;
            }
            goto LABEL_86;
          }
        }
        int v51 = *(_DWORD *)(a3 + 52)
            - HIDWORD(v270.__r_.__value_.__r.__words[1])
            + (HIDWORD(v264.__r_.__value_.__r.__words[1]) - 1) * *(__int16 *)(a3 + 94);
        unsigned int v52 = v51 & ~(v51 >> 31);
        int v53 = *(_DWORD *)(a3 + 48)
            - LODWORD(v270.__r_.__value_.__r.__words[2])
            + (LODWORD(v264.__r_.__value_.__r.__words[2]) - 1) * *(__int16 *)(a3 + 92);
        unsigned int v54 = v53 & ~(v53 >> 31);
        unsigned int v55 = v54 >> 1;
        int data = v54 - (v54 >> 1);
        unsigned int v47 = v52 - (v52 >> 1);
        if (*(_WORD *)(a3 + 72) == 1)
        {
          unsigned int v46 = v52 - (v52 >> 1);
          unsigned int v47 = v52 >> 1;
          int v44 = data;
          int data = v55;
          if (v43) {
            goto LABEL_244;
          }
        }
        else
        {
          unsigned int v46 = v52 >> 1;
          int v44 = v55;
          if (v43) {
            goto LABEL_244;
          }
        }
LABEL_86:
        int v208 = v44;
        int v209 = v46;
        int v210 = v47;
        int v211 = data;
        int v56 = *(__int16 *)(a3 + 92);
        int v215 = *(__int16 *)(a3 + 94);
        unint64_t v57 = a5[1];
        uint64_t v214 = *a5;
        if (v57) {
          atomic_fetch_add_explicit(&v57->i64[1], 1uLL, memory_order_relaxed);
        }
        uint64_t v58 = a4[6];
        uint64_t v59 = *(void *)v58 + 224 * a4[9];
        char v60 = *(void **)(v59 + 136);
        if (*(void **)(v59 + 144) == v60) {
          std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
        }
        int v207 = *(__int16 *)(a3 + 72);
        unsigned int v61 = *((_DWORD *)a4 + 16);
        uint64_t v212 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(v58 + 80));
        uint64_t v62 = *(void *)(v58 + 72);
        if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(void **)(v62 + 360), v60))
        {
          __p[0] = v60;
          char v63 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v62 + 352), v60, (uint64_t)&std::piecewise_construct, (long long **)__p);
          *(_OWORD *)&buf.__r_.__value_.__l.__data_ = *(_OWORD *)(v63 + 56);
          v278[0] = 0;
          v278[1] = 0;
          buf.__r_.__value_.__r.__words[2] = 0;
          std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&buf.__r_.__value_.__r.__words[2], *((const void **)v63 + 9), *((void *)v63 + 10), (uint64_t)(*((void *)v63 + 10) - *((void *)v63 + 9)) >> 2);
          BOOL v64 = v43;
          if (LODWORD(buf.__r_.__value_.__r.__words[1]) == -1) {
            unsigned int v61 = 1;
          }
          else {
            unsigned int v61 = buf.__r_.__value_.__r.__words[1];
          }
          if (buf.__r_.__value_.__r.__words[2])
          {
            v278[0] = *((void *)&buf.__r_.__value_.__l + 2);
            operator delete((void *)buf.__r_.__value_.__r.__words[2]);
          }
        }
        else
        {
          BOOL v64 = v43;
        }
        if (a6) {
          int v65 = 15;
        }
        else {
          int v65 = 29;
        }
        if (v56 == 2) {
          int v66 = v65;
        }
        else {
          int v66 = 29;
        }
        if ((a6 & (v56 == 2)) != 0) {
          int v67 = 7;
        }
        else {
          int v67 = 13;
        }
        if (v215 == 2) {
          int v68 = v65;
        }
        else {
          int v68 = 29;
        }
        if (v61 > 1)
        {
          if (v61 != 4 && v61 != 2) {
            Espresso::throw_exception_selector<Espresso::invalid_state_error,int &>("Wrong compute path for ANE: %d", *((unsigned int *)a4 + 16));
          }
          std::string::basic_string[abi:ne180100]<0>(&buf, "(dilated)kernel width");
          if (v57) {
            atomic_fetch_add_explicit(&v57->i64[1], 1uLL, memory_order_relaxed);
          }
          BOOL v71 = Espresso::ANECompilerEngine::validate_size(v217.i32[0], v66, (uint64_t)&buf, (uint64_t)a4, v214, v57);
          BOOL v43 = v64;
          if (v71)
          {
            std::string::basic_string[abi:ne180100]<0>(__p, "(dilated)kernel height");
            if (v57) {
              atomic_fetch_add_explicit(&v57->i64[1], 1uLL, memory_order_relaxed);
            }
            BOOL v72 = Espresso::ANECompilerEngine::validate_size(v217.i32[1], v68, (uint64_t)__p, (uint64_t)a4, v214, v57);
            if (v57) {
              nitro::nitro_function::nitro_function((std::__shared_weak_count *)v57);
            }
            char v73 = !v72;
            if (SBYTE7(v223) < 0) {
              operator delete(__p[0]);
            }
          }
          else
          {
            char v73 = 1;
          }
          if (v57) {
            nitro::nitro_function::nitro_function((std::__shared_weak_count *)v57);
          }
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(buf.__r_.__value_.__l.__data_);
          }
          if (v73) {
            goto LABEL_134;
          }
        }
        else
        {
          unsigned int v61 = 1;
          std::string::basic_string[abi:ne180100]<0>(&buf, "(dilated)kernel width");
          BOOL v43 = v64;
          if (v57) {
            atomic_fetch_add_explicit(&v57->i64[1], 1uLL, memory_order_relaxed);
          }
          if (Espresso::ANECompilerEngine::validate_size(v217.i32[0], v67, (uint64_t)&buf, (uint64_t)a4, v214, v57))
          {
            std::string::basic_string[abi:ne180100]<0>(__p, "(dilated)kernel height");
            if (v57) {
              atomic_fetch_add_explicit(&v57->i64[1], 1uLL, memory_order_relaxed);
            }
            BOOL v69 = Espresso::ANECompilerEngine::validate_size(v217.i32[1], v68, (uint64_t)__p, (uint64_t)a4, v214, v57);
            if (v57) {
              nitro::nitro_function::nitro_function((std::__shared_weak_count *)v57);
            }
            char v70 = !v69;
            if (SBYTE7(v223) < 0) {
              operator delete(__p[0]);
            }
          }
          else
          {
            char v70 = 1;
          }
          if (v57) {
            nitro::nitro_function::nitro_function((std::__shared_weak_count *)v57);
          }
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(buf.__r_.__value_.__l.__data_);
            if (v70) {
              goto LABEL_134;
            }
          }
          else if (v70)
          {
LABEL_134:
            BOOL v74 = 0;
            goto LABEL_241;
          }
        }
        if (v215 == 4 && v56 == 4 && a6 && v217.i32[1] <= 9 && v217.i32[0] <= 9 && v217.i32[0] == v217.i32[1])
        {
          int v75 = v210 + v209;
          int v76 = v211 + v208;
          int v77 = v210 + v209 < 0 != __OFADD__(v210, v209) ? v75 + 1 : v210 + v209;
          int v78 = v76 >= 0 ? v211 + v208 : v76 + 1;
          if (v78 >> 1 <= v217.i32[0]
            && v76 - (v78 >> 1) <= v217.i32[0]
            && v77 >> 1 <= v217.i32[0]
            && v75 - (v77 >> 1) <= v217.i32[0])
          {
            goto LABEL_157;
          }
        }
        if (((v61 - 2) & 0xFFFFFFFD) != 0) {
          int v79 = 7;
        }
        else {
          int v79 = 15;
        }
        BOOL v81 = v217.i32[1] > 15 || v79 < v217.i32[0];
        if (v207 == 2 || (int v82 = 0, !v207) && !v211 && !v208 && !v210 && !v209) {
          int v82 = a6 ^ 1;
        }
        if (v207 == 1) {
          int v82 = 1;
        }
        int v83 = v82 | a6;
        BOOL v85 = v56 == 3 && v215 < 4;
        if (a6)
        {
          if (!v85)
          {
            BOOL v86 = v56 == 4;
            BOOL v87 = v56 < 4;
            if (v215 != 3) {
              BOOL v87 = 0;
            }
            if (v215 != 4) {
              BOOL v86 = 0;
            }
            v83 &= v87 || v86;
          }
          if (((v81 | v83 ^ 1) & 1) == 0)
          {
            BOOL v74 = v211 <= v217.i32[0] && v208 <= v217.i32[0] && v210 <= v217.i32[1] && v209 <= v217.i32[1];
            goto LABEL_241;
          }
        }
        else
        {
          if (!v85)
          {
            BOOL v91 = v56 == 4;
            BOOL v92 = v56 < 4;
            if (v215 != 3) {
              BOOL v92 = 0;
            }
            if (v215 != 4) {
              BOOL v91 = 0;
            }
            v83 &= v92 || v91;
          }
          if (((v81 | v83 ^ 1) & 1) == 0)
          {
            BOOL v74 = 0;
            if (v211 <= v217.i32[0] && v208 <= v217.i32[0] && v210 <= v217.i32[1] && v209 <= v217.i32[1])
            {
              if (*(_DWORD *)*a4 % v56 || *(_DWORD *)(*a4 + 4) % v215)
              {
                v275.__r_.__value_.__r.__words[0] = (std::string::size_type)v214;
                v275.__r_.__value_.__l.__size_ = (std::string::size_type)v57;
                if (v57) {
                  atomic_fetch_add_explicit(&v57->i64[1], 1uLL, memory_order_relaxed);
                }
                std::string::basic_string[abi:ne180100]<0>(__p, "Convolution with stride >= 3 requires input blobs where respective axis size is divisible by stride.");
                Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&buf, (long long *)__p, (uint64_t)a4, 1);
                Espresso::emit_kernel_validation_warning((int64x2_t **)&v275, (Espresso::base_kernel::validate_for_engine_warning_t *)&buf);
                if (v280) {
                  nitro::nitro_function::nitro_function(v280);
                }
                v274.__r_.__value_.__r.__words[0] = (std::string::size_type)v279;
                std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v274);
                v274.__r_.__value_.__r.__words[0] = (std::string::size_type)v278;
                std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v274);
                if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(buf.__r_.__value_.__l.__data_);
                }
                if (SBYTE7(v223) < 0) {
                  operator delete(__p[0]);
                }
                if (v57)
                {
                  nitro::nitro_function::nitro_function((std::__shared_weak_count *)v57);
                  nitro::nitro_function::nitro_function(v212);
                  uint64_t v93 = (std::__shared_weak_count *)v57;
                }
                else
                {
                  uint64_t v93 = v212;
                }
                nitro::nitro_function::nitro_function(v93);
                goto LABEL_353;
              }
LABEL_157:
              BOOL v74 = 1;
            }
LABEL_241:
            nitro::nitro_function::nitro_function(v212);
            if (v57) {
              nitro::nitro_function::nitro_function((std::__shared_weak_count *)v57);
            }
            if (v74)
            {
LABEL_244:
              int v94 = *(_DWORD *)(a3 + 44);
              int v95 = *(_DWORD *)(a3 + 116);
              if (v95 <= 1) {
                int v95 = 1;
              }
              int v96 = (v94 - 1) / v95;
              if (v96 >= 0x10000)
              {
                uint64_t v27 = (uint64_t)a5[1];
                v256[0] = *a5;
                v256[1] = (int64x2_t *)v27;
                if (v27) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(v27 + 8), 1uLL, memory_order_relaxed);
                }
                std::to_string(&v274, v96 + 1);
                int v97 = std::string::insert(&v274, 0, "Unsupported: input channel = ");
                long long v98 = *(_OWORD *)&v97->__r_.__value_.__l.__data_;
                v275.__r_.__value_.__r.__words[2] = v97->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v275.__r_.__value_.__l.__data_ = v98;
                v97->__r_.__value_.__l.__size_ = 0;
                v97->__r_.__value_.__r.__words[2] = 0;
                v97->__r_.__value_.__r.__words[0] = 0;
                std::string v99 = std::string::append(&v275, " > 65536");
                *(_OWORD *)__n128 __p = *(_OWORD *)&v99->__r_.__value_.__l.__data_;
                *(void *)&long long v223 = *((void *)&v99->__r_.__value_.__l + 2);
                v99->__r_.__value_.__l.__size_ = 0;
                v99->__r_.__value_.__r.__words[2] = 0;
                v99->__r_.__value_.__r.__words[0] = 0;
                Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&buf, (long long *)__p, (uint64_t)a4, 0);
                Espresso::emit_kernel_validation_warning(v256, (Espresso::base_kernel::validate_for_engine_warning_t *)&buf);
                if (v280) {
                  nitro::nitro_function::nitro_function(v280);
                }
                v273.__r_.__value_.__r.__words[0] = (std::string::size_type)v279;
                std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v273);
                v273.__r_.__value_.__r.__words[0] = (std::string::size_type)v278;
                std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v273);
                if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(buf.__r_.__value_.__l.__data_);
                }
                if (SBYTE7(v223) < 0) {
                  operator delete(__p[0]);
                }
                if (SHIBYTE(v275.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v275.__r_.__value_.__l.__data_);
                }
                if ((SHIBYTE(v274.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                  goto LABEL_363;
                }
                float v100 = (void *)v274.__r_.__value_.__r.__words[0];
                goto LABEL_362;
              }
              if (*a4 == a4[1])
              {
                BOOL v104 = 0;
              }
              else
              {
                double v101 = (double)(v94 / v95) * (double)*(int *)(a3 + 48) * (double)*(int *)(a3 + 52);
                uint64_t v102 = Espresso::layer_shape::total_dim((Espresso::layer_shape *)*a4);
                float v103 = (v101 * (double)v102 + v101 * (double)v102) * 0.000000001;
                BOOL v104 = v103 < 0.004;
              }
              int v105 = *((_DWORD *)a4 + 16);
              if (v105 == 4 || v105 == 2)
              {
                int v110 = *(_DWORD *)(a3 + 40);
                char v111 = (v110 & 7) == 0 || v104;
                if (v111) {
                  goto LABEL_289;
                }
                uint64_t v108 = a5[1];
                v254[0] = *a5;
                v254[1] = v108;
                if (v108)
                {
                  atomic_fetch_add_explicit(&v108->i64[1], 1uLL, memory_order_relaxed);
                  int v110 = *(_DWORD *)(a3 + 40);
                }
                std::to_string(&v275, v110);
                long long v112 = std::string::insert(&v275, 0, "HW utilization loss: Number of channels should be multiple of 8 for best performance. Instead: oc/groups= ");
                *(_OWORD *)__n128 __p = *(_OWORD *)&v112->__r_.__value_.__l.__data_;
                *(void *)&long long v223 = *((void *)&v112->__r_.__value_.__l + 2);
                v112->__r_.__value_.__l.__size_ = 0;
                v112->__r_.__value_.__r.__words[2] = 0;
                v112->__r_.__value_.__r.__words[0] = 0;
                Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&buf, (long long *)__p, (uint64_t)a4, 1);
                Espresso::emit_kernel_validation_warning(v254, (Espresso::base_kernel::validate_for_engine_warning_t *)&buf);
              }
              else
              {
                if (v105 != 1) {
                  goto LABEL_289;
                }
                int v106 = *(_DWORD *)(a3 + 40);
                if ((v106 & 0xF) == 0 || v104) {
                  goto LABEL_289;
                }
                uint64_t v108 = a5[1];
                v255[0] = *a5;
                v255[1] = v108;
                if (v108)
                {
                  atomic_fetch_add_explicit(&v108->i64[1], 1uLL, memory_order_relaxed);
                  int v106 = *(_DWORD *)(a3 + 40);
                }
                std::to_string(&v275, v106);
                uint64_t v109 = std::string::insert(&v275, 0, "HW utilization loss: Number of channels should be multiple of 16 for best performance. Instead: oc/groups= ");
                *(_OWORD *)__n128 __p = *(_OWORD *)&v109->__r_.__value_.__l.__data_;
                *(void *)&long long v223 = *((void *)&v109->__r_.__value_.__l + 2);
                v109->__r_.__value_.__l.__size_ = 0;
                v109->__r_.__value_.__r.__words[2] = 0;
                v109->__r_.__value_.__r.__words[0] = 0;
                Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&buf, (long long *)__p, (uint64_t)a4, 1);
                Espresso::emit_kernel_validation_warning(v255, (Espresso::base_kernel::validate_for_engine_warning_t *)&buf);
              }
              if (v280) {
                nitro::nitro_function::nitro_function(v280);
              }
              v274.__r_.__value_.__r.__words[0] = (std::string::size_type)v279;
              std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v274);
              v274.__r_.__value_.__r.__words[0] = (std::string::size_type)v278;
              std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v274);
              if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(buf.__r_.__value_.__l.__data_);
              }
              if (SBYTE7(v223) < 0) {
                operator delete(__p[0]);
              }
              if (SHIBYTE(v275.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v275.__r_.__value_.__l.__data_);
              }
              if (v108) {
                nitro::nitro_function::nitro_function((std::__shared_weak_count *)v108);
              }
LABEL_289:
              int v113 = *(_DWORD *)a3;
              if (*(int *)a3 > 0x4000 || *(int *)(a3 + 4) > 0x4000)
              {
                uint64_t v27 = (uint64_t)a5[1];
                v253[0] = *a5;
                v253[1] = (int64x2_t *)v27;
                if (v27)
                {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(v27 + 8), 1uLL, memory_order_relaxed);
                  int v113 = *(_DWORD *)a3;
                }
                std::to_string(&v272, v113);
                std::string::size_type v115 = std::string::insert(&v272, 0, "Unsupported: input width = ");
                long long v116 = *(_OWORD *)&v115->__r_.__value_.__l.__data_;
                v273.__r_.__value_.__r.__words[2] = v115->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v273.__r_.__value_.__l.__data_ = v116;
                v115->__r_.__value_.__l.__size_ = 0;
                v115->__r_.__value_.__r.__words[2] = 0;
                v115->__r_.__value_.__r.__words[0] = 0;
                uint64_t v117 = std::string::append(&v273, ". input height = ");
                long long v118 = *(_OWORD *)&v117->__r_.__value_.__l.__data_;
                v274.__r_.__value_.__r.__words[2] = v117->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v274.__r_.__value_.__l.__data_ = v118;
                v117->__r_.__value_.__l.__size_ = 0;
                v117->__r_.__value_.__r.__words[2] = 0;
                v117->__r_.__value_.__r.__words[0] = 0;
                std::to_string(&v271, *(_DWORD *)(a3 + 4));
                if ((v271.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  int v119 = &v271;
                }
                else {
                  int v119 = (std::string *)v271.__r_.__value_.__r.__words[0];
                }
                if ((v271.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  std::string::size_type size = HIBYTE(v271.__r_.__value_.__r.__words[2]);
                }
                else {
                  std::string::size_type size = v271.__r_.__value_.__l.__size_;
                }
                std::string v121 = std::string::append(&v274, (const std::string::value_type *)v119, size);
                long long v122 = *(_OWORD *)&v121->__r_.__value_.__l.__data_;
                v275.__r_.__value_.__r.__words[2] = v121->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v275.__r_.__value_.__l.__data_ = v122;
                v121->__r_.__value_.__l.__size_ = 0;
                v121->__r_.__value_.__r.__words[2] = 0;
                v121->__r_.__value_.__r.__words[0] = 0;
                float v123 = std::string::append(&v275, ", at least one of them > 16384");
                *(_OWORD *)__n128 __p = *(_OWORD *)&v123->__r_.__value_.__l.__data_;
                *(void *)&long long v223 = *((void *)&v123->__r_.__value_.__l + 2);
                v123->__r_.__value_.__l.__size_ = 0;
                v123->__r_.__value_.__r.__words[2] = 0;
                v123->__r_.__value_.__r.__words[0] = 0;
                Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&buf, (long long *)__p, (uint64_t)a4, 0);
                Espresso::emit_kernel_validation_warning(v253, (Espresso::base_kernel::validate_for_engine_warning_t *)&buf);
                if (v280) {
                  nitro::nitro_function::nitro_function(v280);
                }
                v247.__r_.__value_.__r.__words[0] = (std::string::size_type)v279;
                std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v247);
                v247.__r_.__value_.__r.__words[0] = (std::string::size_type)v278;
                std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v247);
                if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(buf.__r_.__value_.__l.__data_);
                }
                if (SBYTE7(v223) < 0) {
                  operator delete(__p[0]);
                }
                if (SHIBYTE(v275.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v275.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v271.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v271.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v274.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v274.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v273.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v273.__r_.__value_.__l.__data_);
                }
                if ((SHIBYTE(v272.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                  goto LABEL_363;
                }
                float v100 = (void *)v272.__r_.__value_.__r.__words[0];
                goto LABEL_362;
              }
              uint64_t v114 = a4[1] - *a4;
              if (v114 == 128 && a6)
              {
                uint64_t v27 = (uint64_t)a5[1];
                v252[0] = *a5;
                v252[1] = (int64x2_t *)v27;
                if (v27) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(v27 + 8), 1uLL, memory_order_relaxed);
                }
                std::string::basic_string[abi:ne180100]<0>(__p, "Dynamic deconvolution not supported");
                Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&buf, (long long *)__p, (uint64_t)a4, 0);
                Espresso::emit_kernel_validation_warning(v252, (Espresso::base_kernel::validate_for_engine_warning_t *)&buf);
LABEL_356:
                if (v280) {
                  nitro::nitro_function::nitro_function(v280);
                }
                v275.__r_.__value_.__r.__words[0] = (std::string::size_type)v279;
                std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v275);
                v275.__r_.__value_.__r.__words[0] = (std::string::size_type)v278;
                std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v275);
                if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(buf.__r_.__value_.__l.__data_);
                }
LABEL_360:
                if ((SBYTE7(v223) & 0x80000000) == 0)
                {
LABEL_363:
                  if (!v27) {
                    goto LABEL_367;
                  }
                  int v139 = (std::__shared_weak_count *)v27;
                  goto LABEL_365;
                }
                float v100 = __p[0];
LABEL_362:
                operator delete(v100);
                goto LABEL_363;
              }
              if (v114 == 192)
              {
                uint64_t v27 = (uint64_t)a5[1];
                v251[0] = *a5;
                v251[1] = (int64x2_t *)v27;
                if (v27) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(v27 + 8), 1uLL, memory_order_relaxed);
                }
                std::string::basic_string[abi:ne180100]<0>(__p, "Dynamic biases not supported");
                Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&buf, (long long *)__p, (uint64_t)a4, 0);
                Espresso::emit_kernel_validation_warning(v251, (Espresso::base_kernel::validate_for_engine_warning_t *)&buf);
                goto LABEL_356;
              }
              uint64_t v124 = (std::__shared_weak_count *)a5[1];
              if (v124) {
                atomic_fetch_add_explicit(&v124->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              is_valid_kernel_input_std::string::size_type size = Espresso::is_valid_kernel_input_size(a3, a4, a6);
              BOOL v127 = is_valid_kernel_input_size;
              if (v124) {
                nitro::nitro_function::nitro_function(v124);
              }
              if (!v127)
              {
                if (!v43)
                {
                  int v135 = *(_DWORD *)(a3 + 44);
                  int v136 = *(_DWORD *)(a3 + 116);
                  unsigned __int32 v137 = vmul_lane_s32(v217, v217, 1).u32[0];
                  if (v136 <= 1) {
                    int v136 = 1;
                  }
                  uint64_t v27 = (uint64_t)a5[1];
                  v250[0] = *a5;
                  v250[1] = (int64x2_t *)v27;
                  if (v27) {
                    atomic_fetch_add_explicit((atomic_ullong *volatile)(v27 + 8), 1uLL, memory_order_relaxed);
                  }
                  std::to_string(&v275, (int)(v137 + v137 * ((v135 - 1) / v136)));
                  float v138 = std::string::insert(&v275, 0, "At least one output channel should fit in HW kernel memory. Roughly, size_oc=Kw*Kh*Cin should be less than 65536 for INT8, 32768 for FP16. Instead size_oc=");
                  *(_OWORD *)__n128 __p = *(_OWORD *)&v138->__r_.__value_.__l.__data_;
                  *(void *)&long long v223 = *((void *)&v138->__r_.__value_.__l + 2);
                  v138->__r_.__value_.__l.__size_ = 0;
                  v138->__r_.__value_.__r.__words[2] = 0;
                  v138->__r_.__value_.__r.__words[0] = 0;
                  Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&buf, (long long *)__p, (uint64_t)a4, 0);
                  Espresso::emit_kernel_validation_warning(v250, (Espresso::base_kernel::validate_for_engine_warning_t *)&buf);
                  goto LABEL_373;
                }
                int v128 = Espresso::espresso_os_log_subsystem((Espresso *)is_valid_kernel_input_size, v126);
                if (os_log_type_enabled(v128, OS_LOG_TYPE_DEBUG))
                {
                  LOWORD(buf.__r_.__value_.__l.__data_) = 0;
                  _os_log_debug_impl(&dword_1920CB000, v128, OS_LOG_TYPE_DEBUG, "Overridding Espresso judgment for input kernel size check based on ANECValidateConvLayer. Likely kernel streaming mode can be used.", (uint8_t *)&buf, 2u);
                }
              }
              int v129 = *(_DWORD *)(a3 + 116);
              if (v129 <= 1) {
                int v129 = 1;
              }
              __int32 v130 = v217.i32[0] * v217.i32[1] + v217.i32[0] * v217.i32[1] * ((*(_DWORD *)(a3 + 44) - 1) / v129);
              unint64_t v131 = 0x10000;
              if (*((_DWORD *)a4 + 16) < 2u) {
                unint64_t v131 = 0x8000;
              }
              if (v131 > v130)
              {
LABEL_342:
                v275.__r_.__value_.__r.__words[2] = 0;
                *(int32x4_t *)&v275.__r_.__value_.__l.__data_ = vmovl_s16(*(int16x4_t *)(a3 + 80));
                uint64_t v133 = (Espresso::layer_shape *)*a4;
                if (*a4 != a4[1])
                {
                  uint64_t v134 = (int *)a4[3];
                  if (v134 != (int *)a4[4])
                  {
                    if (a6)
                    {
                      Espresso::ANECompilerEngine::deconvolution_kernel::get_padding((Espresso::ANECompilerEngine::deconvolution_kernel *)&buf, (const Espresso::convolution_uniforms *)a3, *(_DWORD *)v133, *((_DWORD *)v133 + 1), *v134, v134[1]);
                      std::string v275 = buf;
                    }
                    else
                    {
                      Espresso::padding_params_t::get_final_lrtb((int32x4_t *)&v275, (int16x4_t *)(a3 + 72), *(_DWORD *)v133, *((_DWORD *)v133 + 1), *v134, v134[1], *(__int16 *)(a3 + 92), *(__int16 *)(a3 + 94), v217.i32[0], v217.i32[1]);
                    }
                  }
                }
                int v142 = (v217.i32[0] - 1) * *(__int16 *)(a3 + 96) + 1;
                int v143 = (v217.i32[1] - 1) * *(__int16 *)(a3 + 98) + 1;
                if (a6) {
                  int v144 = 0;
                }
                else {
                  int v144 = 32;
                }
                if (SLODWORD(v275.__r_.__value_.__l.__data_) >= v144 + v142
                  || SHIDWORD(v275.__r_.__value_.__r.__words[0]) >= v144 + v142
                  || (int v145 = v144 + v143, SLODWORD(v275.__r_.__value_.__r.__words[1]) >= v145)
                  || ((uint64_t)v275.__r_.__value_.__l.__data_ & 0x80000000) != 0
                  || SHIDWORD(v275.__r_.__value_.__r.__words[1]) >= v145
                  || (v275.__r_.__value_.__r.__words[1] & 0x80000000) != 0
                  || SHIDWORD(v275.__r_.__value_.__r.__words[0]) <= -*(__int16 *)(a3 + 92)
                  || SHIDWORD(v275.__r_.__value_.__r.__words[1]) <= -*(__int16 *)(a3 + 94))
                {
                  int v152 = a5[1];
                  v248[0] = *a5;
                  v248[1] = v152;
                  if (v152) {
                    atomic_fetch_add_explicit(&v152->i64[1], 1uLL, memory_order_relaxed);
                  }
                  std::to_string(&v237, 32);
                  uint64_t v153 = std::string::insert(&v237, 0, "Padding size at left, right, top, bottom should all < (kernel_size_adjusted + ");
                  long long v154 = *(_OWORD *)&v153->__r_.__value_.__l.__data_;
                  v238.__r_.__value_.__r.__words[2] = v153->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v238.__r_.__value_.__l.__data_ = v154;
                  v153->__r_.__value_.__l.__size_ = 0;
                  v153->__r_.__value_.__r.__words[2] = 0;
                  v153->__r_.__value_.__r.__words[0] = 0;
                  uint64_t v155 = std::string::append(&v238, ") size. ");
                  long long v156 = *(_OWORD *)&v155->__r_.__value_.__l.__data_;
                  v239.__r_.__value_.__r.__words[2] = v155->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v239.__r_.__value_.__l.__data_ = v156;
                  v155->__r_.__value_.__l.__size_ = 0;
                  v155->__r_.__value_.__r.__words[2] = 0;
                  v155->__r_.__value_.__r.__words[0] = 0;
                  uint64_t v157 = std::string::append(&v239, "Instead get padding size (");
                  long long v158 = *(_OWORD *)&v157->__r_.__value_.__l.__data_;
                  v240.__r_.__value_.__r.__words[2] = v157->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v240.__r_.__value_.__l.__data_ = v158;
                  v157->__r_.__value_.__l.__size_ = 0;
                  v157->__r_.__value_.__r.__words[2] = 0;
                  v157->__r_.__value_.__r.__words[0] = 0;
                  std::to_string(&v236, *(__int16 *)(a3 + 80));
                  if ((v236.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    uint64_t v159 = &v236;
                  }
                  else {
                    uint64_t v159 = (std::string *)v236.__r_.__value_.__r.__words[0];
                  }
                  if ((v236.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    std::string::size_type v160 = HIBYTE(v236.__r_.__value_.__r.__words[2]);
                  }
                  else {
                    std::string::size_type v160 = v236.__r_.__value_.__l.__size_;
                  }
                  int v161 = std::string::append(&v240, (const std::string::value_type *)v159, v160);
                  long long v162 = *(_OWORD *)&v161->__r_.__value_.__l.__data_;
                  v241.__r_.__value_.__r.__words[2] = v161->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v241.__r_.__value_.__l.__data_ = v162;
                  v161->__r_.__value_.__l.__size_ = 0;
                  v161->__r_.__value_.__r.__words[2] = 0;
                  v161->__r_.__value_.__r.__words[0] = 0;
                  uint64_t v163 = std::string::append(&v241, ", ");
                  long long v164 = *(_OWORD *)&v163->__r_.__value_.__l.__data_;
                  v242.__r_.__value_.__r.__words[2] = v163->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v242.__r_.__value_.__l.__data_ = v164;
                  v163->__r_.__value_.__l.__size_ = 0;
                  v163->__r_.__value_.__r.__words[2] = 0;
                  v163->__r_.__value_.__r.__words[0] = 0;
                  std::to_string(&v235, *(__int16 *)(a3 + 82));
                  if ((v235.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    float v165 = &v235;
                  }
                  else {
                    float v165 = (std::string *)v235.__r_.__value_.__r.__words[0];
                  }
                  if ((v235.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    std::string::size_type v166 = HIBYTE(v235.__r_.__value_.__r.__words[2]);
                  }
                  else {
                    std::string::size_type v166 = v235.__r_.__value_.__l.__size_;
                  }
                  int v167 = std::string::append(&v242, (const std::string::value_type *)v165, v166);
                  long long v168 = *(_OWORD *)&v167->__r_.__value_.__l.__data_;
                  v243.__r_.__value_.__r.__words[2] = v167->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v243.__r_.__value_.__l.__data_ = v168;
                  v167->__r_.__value_.__l.__size_ = 0;
                  v167->__r_.__value_.__r.__words[2] = 0;
                  v167->__r_.__value_.__r.__words[0] = 0;
                  uint64_t v169 = std::string::append(&v243, ", ");
                  long long v170 = *(_OWORD *)&v169->__r_.__value_.__l.__data_;
                  v244.__r_.__value_.__r.__words[2] = v169->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v244.__r_.__value_.__l.__data_ = v170;
                  v169->__r_.__value_.__l.__size_ = 0;
                  v169->__r_.__value_.__r.__words[2] = 0;
                  v169->__r_.__value_.__r.__words[0] = 0;
                  std::to_string(&v234, *(__int16 *)(a3 + 84));
                  if ((v234.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    uint64_t v171 = &v234;
                  }
                  else {
                    uint64_t v171 = (std::string *)v234.__r_.__value_.__r.__words[0];
                  }
                  if ((v234.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    std::string::size_type v172 = HIBYTE(v234.__r_.__value_.__r.__words[2]);
                  }
                  else {
                    std::string::size_type v172 = v234.__r_.__value_.__l.__size_;
                  }
                  vDSP_Length v173 = std::string::append(&v244, (const std::string::value_type *)v171, v172);
                  long long v174 = *(_OWORD *)&v173->__r_.__value_.__l.__data_;
                  v245.__r_.__value_.__r.__words[2] = v173->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v245.__r_.__value_.__l.__data_ = v174;
                  v173->__r_.__value_.__l.__size_ = 0;
                  v173->__r_.__value_.__r.__words[2] = 0;
                  v173->__r_.__value_.__r.__words[0] = 0;
                  uint64_t v175 = std::string::append(&v245, ", ");
                  long long v176 = *(_OWORD *)&v175->__r_.__value_.__l.__data_;
                  v246.__r_.__value_.__r.__words[2] = v175->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v246.__r_.__value_.__l.__data_ = v176;
                  v175->__r_.__value_.__l.__size_ = 0;
                  v175->__r_.__value_.__r.__words[2] = 0;
                  v175->__r_.__value_.__r.__words[0] = 0;
                  std::to_string(&v233, *(__int16 *)(a3 + 86));
                  if ((v233.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    int v177 = &v233;
                  }
                  else {
                    int v177 = (std::string *)v233.__r_.__value_.__r.__words[0];
                  }
                  if ((v233.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    std::string::size_type v178 = HIBYTE(v233.__r_.__value_.__r.__words[2]);
                  }
                  else {
                    std::string::size_type v178 = v233.__r_.__value_.__l.__size_;
                  }
                  BOOL v179 = std::string::append(&v246, (const std::string::value_type *)v177, v178);
                  long long v180 = *(_OWORD *)&v179->__r_.__value_.__l.__data_;
                  v247.__r_.__value_.__r.__words[2] = v179->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v247.__r_.__value_.__l.__data_ = v180;
                  v179->__r_.__value_.__l.__size_ = 0;
                  v179->__r_.__value_.__r.__words[2] = 0;
                  v179->__r_.__value_.__r.__words[0] = 0;
                  uint64_t v181 = std::string::append(&v247, ") and adjusted kernel size ((kernel_size - 1) * dilation_rate + 1) (");
                  long long v182 = *(_OWORD *)&v181->__r_.__value_.__l.__data_;
                  v271.__r_.__value_.__r.__words[2] = v181->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v271.__r_.__value_.__l.__data_ = v182;
                  v181->__r_.__value_.__l.__size_ = 0;
                  v181->__r_.__value_.__r.__words[2] = 0;
                  v181->__r_.__value_.__r.__words[0] = 0;
                  std::to_string(&v232, v142);
                  if ((v232.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    uint64_t v183 = &v232;
                  }
                  else {
                    uint64_t v183 = (std::string *)v232.__r_.__value_.__r.__words[0];
                  }
                  if ((v232.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    std::string::size_type v184 = HIBYTE(v232.__r_.__value_.__r.__words[2]);
                  }
                  else {
                    std::string::size_type v184 = v232.__r_.__value_.__l.__size_;
                  }
                  uint64_t v185 = std::string::append(&v271, (const std::string::value_type *)v183, v184);
                  long long v186 = *(_OWORD *)&v185->__r_.__value_.__l.__data_;
                  v272.__r_.__value_.__r.__words[2] = v185->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v272.__r_.__value_.__l.__data_ = v186;
                  v185->__r_.__value_.__l.__size_ = 0;
                  v185->__r_.__value_.__r.__words[2] = 0;
                  v185->__r_.__value_.__r.__words[0] = 0;
                  uint64_t v187 = std::string::append(&v272, ", ");
                  long long v188 = *(_OWORD *)&v187->__r_.__value_.__l.__data_;
                  v273.__r_.__value_.__r.__words[2] = v187->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v273.__r_.__value_.__l.__data_ = v188;
                  v187->__r_.__value_.__l.__size_ = 0;
                  v187->__r_.__value_.__r.__words[2] = 0;
                  v187->__r_.__value_.__r.__words[0] = 0;
                  std::to_string(&v231, v143);
                  if ((v231.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    std::string v189 = &v231;
                  }
                  else {
                    std::string v189 = (std::string *)v231.__r_.__value_.__r.__words[0];
                  }
                  if ((v231.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    std::string::size_type v190 = HIBYTE(v231.__r_.__value_.__r.__words[2]);
                  }
                  else {
                    std::string::size_type v190 = v231.__r_.__value_.__l.__size_;
                  }
                  long long v191 = std::string::append(&v273, (const std::string::value_type *)v189, v190);
                  long long v192 = *(_OWORD *)&v191->__r_.__value_.__l.__data_;
                  v274.__r_.__value_.__r.__words[2] = v191->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v274.__r_.__value_.__l.__data_ = v192;
                  v191->__r_.__value_.__l.__size_ = 0;
                  v191->__r_.__value_.__r.__words[2] = 0;
                  v191->__r_.__value_.__r.__words[0] = 0;
                  uint64_t v193 = std::string::append(&v274, ")");
                  *(_OWORD *)__n128 __p = *(_OWORD *)&v193->__r_.__value_.__l.__data_;
                  *(void *)&long long v223 = *((void *)&v193->__r_.__value_.__l + 2);
                  v193->__r_.__value_.__l.__size_ = 0;
                  v193->__r_.__value_.__r.__words[2] = 0;
                  v193->__r_.__value_.__r.__words[0] = 0;
                  Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&buf, (long long *)__p, (uint64_t)a4, 0);
                  Espresso::emit_kernel_validation_warning(v248, (Espresso::base_kernel::validate_for_engine_warning_t *)&buf);
                  if (v280) {
                    nitro::nitro_function::nitro_function(v280);
                  }
                  v281[0] = (void **)v279;
                  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v281);
                  v281[0] = (void **)v278;
                  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v281);
                  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(buf.__r_.__value_.__l.__data_);
                  }
                  if (SBYTE7(v223) < 0) {
                    operator delete(__p[0]);
                  }
                  if (SHIBYTE(v274.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v274.__r_.__value_.__l.__data_);
                  }
                  if (SHIBYTE(v231.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v231.__r_.__value_.__l.__data_);
                  }
                  if (SHIBYTE(v273.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v273.__r_.__value_.__l.__data_);
                  }
                  if (SHIBYTE(v272.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v272.__r_.__value_.__l.__data_);
                  }
                  if (SHIBYTE(v232.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v232.__r_.__value_.__l.__data_);
                  }
                  if (SHIBYTE(v271.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v271.__r_.__value_.__l.__data_);
                  }
                  if (SHIBYTE(v247.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v247.__r_.__value_.__l.__data_);
                  }
                  if (SHIBYTE(v233.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v233.__r_.__value_.__l.__data_);
                  }
                  if (SHIBYTE(v246.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v246.__r_.__value_.__l.__data_);
                  }
                  if (SHIBYTE(v245.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v245.__r_.__value_.__l.__data_);
                  }
                  if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v234.__r_.__value_.__l.__data_);
                  }
                  if (SHIBYTE(v244.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v244.__r_.__value_.__l.__data_);
                  }
                  if (SHIBYTE(v243.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v243.__r_.__value_.__l.__data_);
                  }
                  if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v235.__r_.__value_.__l.__data_);
                  }
                  if (SHIBYTE(v242.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v242.__r_.__value_.__l.__data_);
                  }
                  if (SHIBYTE(v241.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v241.__r_.__value_.__l.__data_);
                  }
                  if (SHIBYTE(v236.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v236.__r_.__value_.__l.__data_);
                  }
                  if (SHIBYTE(v240.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v240.__r_.__value_.__l.__data_);
                  }
                  if (SHIBYTE(v239.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v239.__r_.__value_.__l.__data_);
                  }
                  if (SHIBYTE(v238.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v238.__r_.__value_.__l.__data_);
                  }
                  if (SHIBYTE(v237.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v237.__r_.__value_.__l.__data_);
                  }
                  if (!v152) {
                    goto LABEL_366;
                  }
                  int v139 = (std::__shared_weak_count *)v152;
LABEL_365:
                  nitro::nitro_function::nitro_function(v139);
LABEL_366:
                  uint64_t v27 = 0;
                  goto LABEL_367;
                }
                if (*(_WORD *)(a3 + 92) == 4 && *(_WORD *)(a3 + 94) == 4)
                {
                  if (a6)
                  {
                    int32x2_t v146 = vadd_s32(vmax_s32(vadd_s32(vsub_s32(*(int32x2_t *)a4[3], vadd_s32(v217, vshl_n_s32(*(int32x2_t *)*a4, 2uLL))), (int32x2_t)0x400000004), (int32x2_t)-1), (int32x2_t)0x100000001);
                    int32x2_t v147 = (int32x2_t)vshr_n_u32((uint32x2_t)v146, 1uLL);
                    int32x2_t v148 = vcgt_s32(v217, v147);
                    if ((v148.i8[0] & 1) == 0
                      || (int32x2_t v149 = vsub_s32(v146, v147), v149.i32[0] >= v217.i32[0])
                      || (v148.i8[4] & 1) == 0
                      || v149.i32[1] < -1
                      || v149.i32[1] >= v217.i32[1]
                      || v149.i32[0] <= -2)
                    {
                      uint64_t v27 = (uint64_t)a5[1];
                      v230[0] = *a5;
                      v230[1] = (int64x2_t *)v27;
                      if (v27) {
                        atomic_fetch_add_explicit((atomic_ullong *volatile)(v27 + 8), 1uLL, memory_order_relaxed);
                      }
                      std::string::basic_string[abi:ne180100]<0>(__p, "The 4x4 deconv is decomposed by split_4x4_deconvolution to deconv0 + crop + deconv1. In deconv1, the padding size at left, right, top, bottom should all < kernel_size");
                      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&buf, (long long *)__p, (uint64_t)a4, 0);
                      Espresso::emit_kernel_validation_warning(v230, (Espresso::base_kernel::validate_for_engine_warning_t *)&buf);
                      Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((Espresso::base_kernel::validate_for_engine_warning_t *)&buf);
                      goto LABEL_360;
                    }
                  }
                }
                long long v150 = Espresso::ANECompilerEngine::ane_arch_allow_network_override(v213);
                long long v151 = v150;
                if (*(_WORD *)(a3 + 74))
                {
                  if (*(_WORD *)(a3 + 74) == 1)
                  {
                    if (([v150 isEqualToString:@"H11"] & 1) != 0
                      || [v151 isEqualToString:@"M9"])
                    {
                      uint64_t v27 = (uint64_t)a5[1];
                      v229[0] = *a5;
                      v229[1] = (int64x2_t *)v27;
                      if (v27) {
                        atomic_fetch_add_explicit((atomic_ullong *volatile)(v27 + 8), 1uLL, memory_order_relaxed);
                      }
                      std::string::basic_string[abi:ne180100]<0>(__p, "Border replicate padding not supported on this architecture");
                      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&buf, (long long *)__p, (uint64_t)a4, 0);
                      Espresso::emit_kernel_validation_warning(v229, (Espresso::base_kernel::validate_for_engine_warning_t *)&buf);
LABEL_531:
                      Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((Espresso::base_kernel::validate_for_engine_warning_t *)&buf);
                      if (SBYTE7(v223) < 0) {
                        operator delete(__p[0]);
                      }
                      if (!v27) {
                        goto LABEL_536;
                      }
                      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v27);
LABEL_535:
                      uint64_t v27 = 0;
LABEL_536:

LABEL_367:
                      if (v219) {
                        return v27;
                      }
LABEL_368:
                      nitro::nitro_function::nitro_function(v220);
                      return v27;
                    }
LABEL_497:
                    if (check_kernel_size_vs_input_output_size<Espresso::convolution_uniforms>(v217.i32[0], v217.i32[1], (int *)a4, (int *)&v275, a6, a3, a5))
                    {
                      uint64_t v194 = a4[3];
                      char v195 = v194 == a4[4] || v104;
                      if ((v195 & 1) == 0)
                      {
                        long long v196 = *(_OWORD *)(v194 + 16);
                        uint64_t v197 = *(void *)(v194 + 32);
                        *(_OWORD *)__n128 __p = *(_OWORD *)v194;
                        long long v223 = v196;
                        uint64_t v224 = v197;
                        float v225 = 0;
                        int v226 = 0;
                        uint64_t v227 = 0;
                        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v225, *(const void **)(v194 + 40), *(void *)(v194 + 48), (uint64_t)(*(void *)(v194 + 48) - *(void *)(v194 + 40)) >> 2);
                        int v198 = (int)__p[0];
                        if (SLODWORD(__p[0]) >= 2
                          && SHIDWORD(__p[0]) >= 2
                          && (float)((float)((float)(int)(((8 * LODWORD(__p[0]) - 8) & 0xFFFFFFC0)
                                                        + 64
                                                        + (((8 * LODWORD(__p[0]) - 8) & 0xFFFFFFC0) + 64)
                                                        * ((HIDWORD(__p[0]) - 1) >> 3))
                                           + 1.0)
                                   / (float)((float)(HIDWORD(__p[0]) * LODWORD(__p[0])) + 1.0)) > 1.9)
                        {
                          uint64_t v199 = a5[1];
                          v221[0] = *a5;
                          v221[1] = v199;
                          if (v199) {
                            atomic_fetch_add_explicit(&v199->i64[1], 1uLL, memory_order_relaxed);
                          }
                          std::to_string(&v271, v198);
                          uint64_t v200 = std::string::insert(&v271, 0, "HW utilization loss: HW may round up computation of output sizes to multiple of 8 or 16, but the output size is ");
                          long long v201 = *(_OWORD *)&v200->__r_.__value_.__l.__data_;
                          v272.__r_.__value_.__r.__words[2] = v200->__r_.__value_.__r.__words[2];
                          *(_OWORD *)&v272.__r_.__value_.__l.__data_ = v201;
                          v200->__r_.__value_.__l.__size_ = 0;
                          v200->__r_.__value_.__r.__words[2] = 0;
                          v200->__r_.__value_.__r.__words[0] = 0;
                          long long v202 = std::string::append(&v272, "x");
                          long long v203 = *(_OWORD *)&v202->__r_.__value_.__l.__data_;
                          v273.__r_.__value_.__r.__words[2] = v202->__r_.__value_.__r.__words[2];
                          *(_OWORD *)&v273.__r_.__value_.__l.__data_ = v203;
                          v202->__r_.__value_.__l.__size_ = 0;
                          v202->__r_.__value_.__r.__words[2] = 0;
                          v202->__r_.__value_.__r.__words[0] = 0;
                          std::to_string(&v247, SHIDWORD(__p[0]));
                          if ((v247.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                            uint64_t v204 = &v247;
                          }
                          else {
                            uint64_t v204 = (std::string *)v247.__r_.__value_.__r.__words[0];
                          }
                          if ((v247.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                            std::string::size_type v205 = HIBYTE(v247.__r_.__value_.__r.__words[2]);
                          }
                          else {
                            std::string::size_type v205 = v247.__r_.__value_.__l.__size_;
                          }
                          long long v206 = std::string::append(&v273, (const std::string::value_type *)v204, v205);
                          std::string v274 = *v206;
                          v206->__r_.__value_.__l.__size_ = 0;
                          v206->__r_.__value_.__r.__words[2] = 0;
                          v206->__r_.__value_.__r.__words[0] = 0;
                          Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&buf, (long long *)&v274, (uint64_t)a4, 1);
                          Espresso::emit_kernel_validation_warning(v221, (Espresso::base_kernel::validate_for_engine_warning_t *)&buf);
                          Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((Espresso::base_kernel::validate_for_engine_warning_t *)&buf);
                          if (SHIBYTE(v274.__r_.__value_.__r.__words[2]) < 0) {
                            operator delete(v274.__r_.__value_.__l.__data_);
                          }
                          if (SHIBYTE(v247.__r_.__value_.__r.__words[2]) < 0) {
                            operator delete(v247.__r_.__value_.__l.__data_);
                          }
                          if (SHIBYTE(v273.__r_.__value_.__r.__words[2]) < 0) {
                            operator delete(v273.__r_.__value_.__l.__data_);
                          }
                          if (SHIBYTE(v272.__r_.__value_.__r.__words[2]) < 0) {
                            operator delete(v272.__r_.__value_.__l.__data_);
                          }
                          if (SHIBYTE(v271.__r_.__value_.__r.__words[2]) < 0) {
                            operator delete(v271.__r_.__value_.__l.__data_);
                          }
                          if (v199) {
                            nitro::nitro_function::nitro_function((std::__shared_weak_count *)v199);
                          }
                        }
                        if (v225)
                        {
                          int v226 = v225;
                          operator delete(v225);
                        }
                      }
                      uint64_t v27 = 1;
                      goto LABEL_536;
                    }
                    goto LABEL_535;
                  }
                }
                else if (fabsf(*(float *)(a3 + 76)) < 1.1755e-38)
                {
                  goto LABEL_497;
                }
                uint64_t v27 = (uint64_t)a5[1];
                v228[0] = *a5;
                v228[1] = (int64x2_t *)v27;
                if (v27) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(v27 + 8), 1uLL, memory_order_relaxed);
                }
                std::string::basic_string[abi:ne180100]<0>(__p, "Only CONSTANT fill mode with 0 padding is supported");
                Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&buf, (long long *)__p, (uint64_t)a4, 0);
                Espresso::emit_kernel_validation_warning(v228, (Espresso::base_kernel::validate_for_engine_warning_t *)&buf);
                goto LABEL_531;
              }
              if (v43)
              {
                uint64_t v132 = Espresso::espresso_os_log_subsystem((Espresso *)is_valid_kernel_input_size, v126);
                if (os_log_type_enabled(v132, OS_LOG_TYPE_DEBUG))
                {
                  LOWORD(buf.__r_.__value_.__l.__data_) = 0;
                  _os_log_debug_impl(&dword_1920CB000, v132, OS_LOG_TYPE_DEBUG, "Overridding Espresso judgment for output kernel size check based on ANECValidateConvLayer. Likely kernel streaming mode is used.", (uint8_t *)&buf, 2u);
                }

                goto LABEL_342;
              }
              uint64_t v27 = (uint64_t)a5[1];
              v249[0] = *a5;
              v249[1] = (int64x2_t *)v27;
              if (v27) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v27 + 8), 1uLL, memory_order_relaxed);
              }
              std::to_string(&v275, v130);
              uint64_t v141 = std::string::insert(&v275, 0, "At least one output channel should fit in HW kernel memory. Roughly, size_oc=Kw*Kh*Cin should be less than 65536 for INT8, 32768 for FP16. Instead size_oc=");
              *(_OWORD *)__n128 __p = *(_OWORD *)&v141->__r_.__value_.__l.__data_;
              *(void *)&long long v223 = *((void *)&v141->__r_.__value_.__l + 2);
              v141->__r_.__value_.__l.__size_ = 0;
              v141->__r_.__value_.__r.__words[2] = 0;
              v141->__r_.__value_.__r.__words[0] = 0;
              Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&buf, (long long *)__p, (uint64_t)a4, 0);
              Espresso::emit_kernel_validation_warning(v249, (Espresso::base_kernel::validate_for_engine_warning_t *)&buf);
LABEL_373:
              Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((Espresso::base_kernel::validate_for_engine_warning_t *)&buf);
              if (SBYTE7(v223) < 0) {
                operator delete(__p[0]);
              }
              if ((SHIBYTE(v275.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                goto LABEL_363;
              }
              float v100 = (void *)v275.__r_.__value_.__r.__words[0];
              goto LABEL_362;
            }
LABEL_353:
            uint64_t v27 = (uint64_t)a5[1];
            v257[0] = *a5;
            v257[1] = (int64x2_t *)v27;
            if (v27) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v27 + 8), 1uLL, memory_order_relaxed);
            }
            std::string::basic_string[abi:ne180100]<0>(__p, "Unsupported kernel size, strides or padding");
            Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&buf, (long long *)__p, (uint64_t)a4, 0);
            Espresso::emit_kernel_validation_warning(v257, (Espresso::base_kernel::validate_for_engine_warning_t *)&buf);
            goto LABEL_356;
          }
        }
        std::string::basic_string[abi:ne180100]<0>(&buf, "stride_x");
        if (v57) {
          atomic_fetch_add_explicit(&v57->i64[1], 1uLL, memory_order_relaxed);
        }
        if (Espresso::ANECompilerEngine::validate_size(v56, 2, (uint64_t)&buf, (uint64_t)a4, v214, v57))
        {
          std::string::basic_string[abi:ne180100]<0>(__p, "stride_y");
          if (v57) {
            atomic_fetch_add_explicit(&v57->i64[1], 1uLL, memory_order_relaxed);
          }
          BOOL v74 = Espresso::ANECompilerEngine::validate_size(v215, 2, (uint64_t)__p, (uint64_t)a4, v214, v57);
          if (v57) {
            nitro::nitro_function::nitro_function((std::__shared_weak_count *)v57);
          }
          if (SBYTE7(v223) < 0) {
            operator delete(__p[0]);
          }
        }
        else
        {
          BOOL v74 = 0;
        }
        if (v57) {
          nitro::nitro_function::nitro_function((std::__shared_weak_count *)v57);
        }
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(buf.__r_.__value_.__l.__data_);
        }
        goto LABEL_241;
      }
    }
    else
    {
      BOOL v43 = 0;
      if ((a6 & 1) == 0) {
        goto LABEL_75;
      }
    }
    Espresso::ANECompilerEngine::deconvolution_kernel::get_padding((Espresso::ANECompilerEngine::deconvolution_kernel *)&buf, (const Espresso::convolution_uniforms *)a3, v270.__r_.__value_.__r.__words[2], SHIDWORD(v270.__r_.__value_.__r.__words[1]), v264.__r_.__value_.__r.__words[2], SHIDWORD(v264.__r_.__value_.__r.__words[1]));
    int data = (int)buf.__r_.__value_.__l.__data_;
    int v44 = HIDWORD(buf.__r_.__value_.__r.__words[0]);
    unsigned int v47 = buf.__r_.__value_.__r.__words[1];
    unsigned int v46 = HIDWORD(buf.__r_.__value_.__r.__words[1]);
    if (v43) {
      goto LABEL_244;
    }
    goto LABEL_86;
  }
  uint64_t v13 = a5[1];
  v276[0] = *a5;
  v276[1] = v13;
  uint64_t v220 = (std::__shared_weak_count *)v13;
  if (v13)
  {
    atomic_fetch_add_explicit(&v13->i64[1], 1uLL, memory_order_relaxed);
    int v11 = *(_DWORD *)(a3 + 116);
  }
  std::to_string(&v273, v11);
  uint64_t v14 = std::string::insert(&v273, 0, "[Unsupported Deconvolution] n_groups = ");
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v274.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v274.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  BOOL v16 = std::string::append(&v274, " does not match input channels = ");
  long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v275.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v275.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v272, *(_DWORD *)(a3 + 44));
  if ((v272.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v18 = &v272;
  }
  else {
    int v18 = (std::string *)v272.__r_.__value_.__r.__words[0];
  }
  if ((v272.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v19 = HIBYTE(v272.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v19 = v272.__r_.__value_.__l.__size_;
  }
  BOOL v20 = std::string::append(&v275, (const std::string::value_type *)v18, v19);
  long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v264.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v264.__r_.__value_.__l.__data_ = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  int v22 = std::string::append(&v264, " or output channels = ");
  long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  v270.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v270.__r_.__value_.__l.__data_ = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v271, *(_DWORD *)(a3 + 40));
  if ((v271.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    BOOL v24 = &v271;
  }
  else {
    BOOL v24 = (std::string *)v271.__r_.__value_.__r.__words[0];
  }
  if ((v271.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v25 = HIBYTE(v271.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v25 = v271.__r_.__value_.__l.__size_;
  }
  long long v26 = std::string::append(&v270, (const std::string::value_type *)v24, v25);
  *(_OWORD *)__n128 __p = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  *(void *)&long long v223 = *((void *)&v26->__r_.__value_.__l + 2);
  v26->__r_.__value_.__l.__size_ = 0;
  v26->__r_.__value_.__r.__words[2] = 0;
  v26->__r_.__value_.__r.__words[0] = 0;
  Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&buf, (long long *)__p, (uint64_t)a4, 0);
  Espresso::emit_kernel_validation_warning(v276, (Espresso::base_kernel::validate_for_engine_warning_t *)&buf);
  if (v280) {
    nitro::nitro_function::nitro_function(v280);
  }
  v247.__r_.__value_.__r.__words[0] = (std::string::size_type)v279;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v247);
  v247.__r_.__value_.__r.__words[0] = (std::string::size_type)v278;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v247);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  if (SBYTE7(v223) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v271.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v271.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v270.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v270.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v264.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v264.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v272.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v272.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v275.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v275.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v274.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v274.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v273.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v273.__r_.__value_.__l.__data_);
  }
  uint64_t v27 = 0;
  if (v220) {
    goto LABEL_368;
  }
  return v27;
}

void sub_192139A14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,char a24,std::__shared_weak_count *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33)
{
  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((Espresso::base_kernel::validate_for_engine_warning_t *)(v35 - 224));
  if (SLOBYTE(STACK[0x4E7]) < 0) {
    operator delete((void *)STACK[0x4D0]);
  }
  if (SLOBYTE(STACK[0x2E7]) < 0) {
    operator delete((void *)STACK[0x2D0]);
  }
  if (SLOBYTE(STACK[0x4C7]) < 0) {
    operator delete((void *)STACK[0x4B0]);
  }
  if (SLOBYTE(STACK[0x4A7]) < 0) {
    operator delete((void *)STACK[0x490]);
  }
  if (SLOBYTE(STACK[0x487]) < 0) {
    operator delete((void *)STACK[0x470]);
  }
  if (v33) {
    nitro::nitro_function::nitro_function(v33);
  }
  if (a33) {
    operator delete(a33);
  }

  if ((a24 & 1) == 0) {
    nitro::nitro_function::nitro_function(a25);
  }
  _Unwind_Resume(a1);
}

void sub_19213A11C()
{
}

void sub_19213A124(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24)
{
  BOOL v24 = (void *)STACK[0x3D8];
  if (STACK[0x3D8])
  {
    STACK[0x3E0] = (unint64_t)v24;
    operator delete(v24);
  }
  if (a24)
  {
    nitro::nitro_function::nitro_function(a24);
    JUMPOUT(0x19213A104);
  }
  JUMPOUT(0x19213A114);
}

unint64_t Espresso::ANECompilerEngine::convolution_kernel::dilation_rate_supported_by_anec(uint64_t a1, void *a2)
{
  int v4 = a2;
  unint64_t v5 = *(__int16 *)(a1 + 96);
  if (v5 != 1)
  {
    unsigned int v6 = operator new(0x10uLL);
    uint64_t v7 = 0;
    *unsigned int v6 = xmmword_192DCA350;
    do
    {
      for (unint64_t i = *((void *)v6 + v7); !(v5 % i); v5 /= i)
        ;
      ++v7;
    }
    while (v7 != 2);
    unint64_t v5 = v5 == 1;
    operator delete(v6);
  }
  unint64_t v9 = *(__int16 *)(a1 + 98);
  if (v9 != 1)
  {
    unint64_t v10 = operator new(0x10uLL);
    uint64_t v11 = 0;
    *unint64_t v10 = xmmword_192DCA350;
    do
    {
      for (unint64_t j = *((void *)v10 + v11); !(v9 % j); v9 /= j)
        ;
      ++v11;
    }
    while (v11 != 2);
    if (v9 == 1) {
      unint64_t v5 = v5;
    }
    else {
      unint64_t v5 = 0;
    }
    operator delete(v10);
  }
  if (Espresso::ANECompilerEngine::is_mix(v4, v3))
  {
    if (*(__int16 *)(a1 + 96) < 5 && *(__int16 *)(a1 + 98) < 5) {
      unint64_t v5 = v5;
    }
    else {
      unint64_t v5 = 0;
    }
  }

  return v5;
}

void sub_19213A26C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL Espresso::ANECompilerEngine::ane_kernel::call_ane_validate_for_conv(uint64_t a1, void *a2, uint64_t *a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, int a8)
{
  id v13 = a2;
  int v110 = v13;
  ANECConvLayerDescInitialize();
  int v14 = *(__int16 *)(a4 + 96);
  if (v14 <= 1) {
    int v15 = 1;
  }
  else {
    int v15 = *(__int16 *)(a4 + 96);
  }
  int v16 = *(__int16 *)(a4 + 98);
  if (v16 <= 1) {
    int v17 = 1;
  }
  else {
    int v17 = *(__int16 *)(a4 + 98);
  }
  int v19 = *(_DWORD *)(a4 + 48);
  int v18 = *(_DWORD *)(a4 + 52);
  int v20 = *(_DWORD *)(a4 + 152);
  if (v20 <= 1) {
    int v21 = 1;
  }
  else {
    int v21 = *(_DWORD *)(a4 + 152);
  }
  int v22 = *(_DWORD *)(a5 + 16);
  int v103 = *(_DWORD *)(a5 + 12);
  int v23 = *(_DWORD *)(a5 + 8);
  int v104 = *(_DWORD *)(a7 + 16);
  int v102 = *(_DWORD *)(a7 + 12);
  int v24 = *(_DWORD *)(a7 + 8);
  v117[0] = 1;
  int v25 = *(_DWORD *)(a4 + 88);
  int v126 = *(_DWORD *)(a4 + 92);
  __asm { FMOV            V0.2S, #1.0 }
  uint64_t v122 = _D0;
  uint64_t v134 = 0;
  uint64_t v133 = 0;
  v117[1] = *(void *)(a4 + 40);
  int v118 = v19;
  int v119 = v18;
  int v120 = v21;
  int v121 = -1;
  int v107 = v17;
  int v108 = v21;
  __int16 v128 = v14;
  int v30 = *(__int16 *)(a4 + 156);
  __int16 v127 = *(_WORD *)(a4 + 156);
  __int16 v129 = v16;
  __int16 v130 = 1;
  int v31 = *(_DWORD *)(a4 + 116);
  int v131 = 0;
  int v132 = v31;
  long long v124 = *(_OWORD *)(a4 + 72);
  int v123 = 0;
  int v125 = v25;
  int v111 = a6;
  int v105 = v22;
  uint64_t v106 = a5;
  if (a8)
  {
    long long v32 = *(_OWORD *)(a5 + 16);
    *(_OWORD *)long long v112 = *(_OWORD *)a5;
    *(_OWORD *)&v112[16] = v32;
    long long v33 = *(_OWORD *)(a7 + 16);
    v157[0] = *(_OWORD *)a7;
    v157[1] = v33;
    Espresso::ANECompilerEngine::mix_deconv3d_kernel::get_padding((unsigned int *)v158, (uint64_t)v117, v112, v157);
    BOOL v34 = v158[2] != 0;
    int v20 = *(_DWORD *)(a4 + 152);
    __int16 v35 = *(_WORD *)(a4 + 156);
    goto LABEL_23;
  }
  __int16 v35 = v30;
  int v36 = *(__int16 *)(a4 + 72);
  switch(v36)
  {
    case 4:
      goto LABEL_15;
    case 2:
      unsigned int v41 = 0;
      unsigned int v39 = 0;
      break;
    case 1:
LABEL_15:
      int v37 = *(unsigned __int16 *)(a4 + 72);
      unsigned int v38 = (v21 - v23 + (v24 - 1) * v30) & ~((v21 - v23 + (v24 - 1) * v30) >> 31);
      unsigned int v39 = v38 >> 1;
      unsigned int v40 = v38 - (v38 >> 1);
      if (v37 == 1) {
        unsigned int v41 = v38 - (v38 >> 1);
      }
      else {
        unsigned int v41 = v38 >> 1;
      }
      if (v37 != 1) {
        unsigned int v39 = v40;
      }
      break;
    default:
      unsigned int v39 = *(__int16 *)(a4 + 88);
      unsigned int v41 = *(__int16 *)(a4 + 90);
      break;
  }
  BOOL v34 = (v39 | v41) != 0;
LABEL_23:
  char v43 = v20 > 1 || v35 > 1 || v34;
  __int16 v116 = 0;
  Espresso::ANECompilerEngine::query_dilation_options(a4, a8, v111, (char *)&v116 + 1, &v116, v13);
  int v44 = *(_DWORD *)(a4 + 44);
  uint64_t v45 = *(int *)(a4 + 40);
  BOOL v46 = v45 == v44;
  uint64_t v47 = *(int *)(a4 + 116);
  BOOL v48 = v44 == v47;
  _ZF = !v46 || !v48;
  if (v46 && v48) {
    int v50 = @"ChannelWiseDeConv";
  }
  else {
    int v50 = @"DeConv";
  }
  int v51 = @"Conv";
  if (!_ZF) {
    int v51 = @"ChannelWiseConv";
  }
  if (!a8) {
    int v50 = v51;
  }
  int v135 = v50;
  uint64_t v52 = *a3;
  int v136 = Espresso::ANECompilerEngine::ane_conv_kernel_mode(*a3, v116);
  unsigned __int32 v137 = Espresso::ANECompilerEngine::ane_conv_kernel_format(v52);
  uint64_t v138 = v45;
  uint64_t v139 = v47;
  char v140 = 0;
  ANECKernelSizeInitialize();
  int v53 = (v19 - 1) * v15 + 1;
  int v54 = (v18 - 1) * v107 + 1;
  int v55 = HIBYTE(v116);
  if (HIBYTE(v116))
  {
    int v56 = v53;
    int v57 = v54;
    int v58 = v108;
  }
  else
  {
    int v56 = *(_DWORD *)(a4 + 48);
    int v57 = *(_DWORD *)(a4 + 52);
    int v58 = *(_DWORD *)(a4 + 152);
    if (v58 <= 1) {
      int v58 = 1;
    }
  }
  uint64_t v141 = v56;
  uint64_t v142 = v57;
  uint64_t v143 = v58;
  ANECStepInitialize();
  int v59 = *(__int16 *)(a4 + 94);
  int v144 = *(__int16 *)(a4 + 92);
  int v145 = v59;
  int v146 = *(__int16 *)(a4 + 156);
  char v153 = 0;
  ANECKernelDilationRateInitialize();
  uint64_t v60 = *(__int16 *)(a4 + 96);
  uint64_t v61 = *(__int16 *)(a4 + 98);
  if (v55)
  {
    uint64_t v60 = 1;
    uint64_t v61 = 1;
  }
  uint64_t v154 = v60;
  uint64_t v155 = v61;
  uint64_t v156 = 1;
  ANECPaddingInitialize();
  if ((v43 & 1) == 0)
  {
    if (a8)
    {
      Espresso::ANECompilerEngine::deconvolution_kernel::get_padding((Espresso::ANECompilerEngine::deconvolution_kernel *)v112, (const Espresso::convolution_uniforms *)a4, v105, v103, v104, v102);
      unsigned int v65 = v111;
      unsigned int v73 = *(_DWORD *)v112;
      unsigned int v72 = *(_DWORD *)&v112[4];
      unsigned int v75 = *(_DWORD *)&v112[8];
      unsigned int v74 = *(_DWORD *)&v112[12];
LABEL_77:
      uint64_t v62 = v106;
      unsigned int v147 = v73;
      unsigned int v148 = v72;
      unsigned int v149 = v75;
      unsigned int v150 = v74;
      goto LABEL_78;
    }
    int v88 = *(__int16 *)(a4 + 72);
    unsigned int v65 = v111;
    if (v88 != 4)
    {
      if (v88 == 2)
      {
        unsigned int v74 = 0;
        unsigned int v75 = 0;
        unsigned int v72 = 0;
        unsigned int v73 = 0;
        goto LABEL_77;
      }
      if (v88 != 1)
      {
        unsigned int v73 = *(__int16 *)(a4 + 80);
        unsigned int v72 = *(__int16 *)(a4 + 82);
        unsigned int v75 = *(__int16 *)(a4 + 84);
        unsigned int v74 = *(__int16 *)(a4 + 86);
        goto LABEL_77;
      }
    }
    int v89 = v54 - v103 + (v102 - 1) * *(__int16 *)(a4 + 94);
    int v90 = v53 - v105 + (v104 - 1) * *(__int16 *)(a4 + 92);
    unsigned int v91 = v89 & ~(v89 >> 31);
    unsigned int v92 = v90 & ~(v90 >> 31);
    int v93 = *(unsigned __int16 *)(a4 + 72);
    unsigned int v73 = v92 >> 1;
    unsigned int v94 = v92 - (v92 >> 1);
    unsigned int v95 = v91 >> 1;
    unsigned int v75 = v91 - (v91 >> 1);
    BOOL v96 = v93 == 1;
    if (v93 == 1) {
      unsigned int v74 = v75;
    }
    else {
      unsigned int v74 = v95;
    }
    if (v96)
    {
      unsigned int v75 = v95;
      unsigned int v72 = v94;
    }
    else
    {
      unsigned int v72 = v73;
    }
    if (!v96) {
      unsigned int v73 = v94;
    }
    goto LABEL_77;
  }
  if (!a8)
  {
    int v76 = *(__int16 *)(a4 + 72);
    unsigned int v65 = v111;
    uint64_t v62 = v106;
    if (v76 != 4)
    {
      if (v76 == 2)
      {
        unsigned int v70 = 0;
        unsigned int v71 = 0;
        unsigned int v68 = 0;
        unsigned int v69 = 0;
        unsigned int v66 = 0;
        unsigned int v67 = 0;
        goto LABEL_75;
      }
      if (v76 != 1)
      {
        unsigned int v67 = *(__int16 *)(a4 + 80);
        unsigned int v66 = *(__int16 *)(a4 + 82);
        unsigned int v69 = *(__int16 *)(a4 + 84);
        unsigned int v68 = *(__int16 *)(a4 + 86);
        unsigned int v71 = *(__int16 *)(a4 + 88);
        unsigned int v70 = *(__int16 *)(a4 + 90);
        goto LABEL_75;
      }
    }
    int v77 = v54 - *(_DWORD *)(v106 + 12) + (*(_DWORD *)(a7 + 12) - 1) * *(__int16 *)(a4 + 94);
    int v78 = v53 - *(_DWORD *)(v106 + 16) + (*(_DWORD *)(a7 + 16) - 1) * *(__int16 *)(a4 + 92);
    unsigned int v79 = v77 & ~(v77 >> 31);
    unsigned int v80 = v78 & ~(v78 >> 31);
    int v81 = v108 - *(_DWORD *)(v106 + 8) + (*(_DWORD *)(a7 + 8) - 1) * *(__int16 *)(a4 + 156);
    unsigned int v82 = v81 & ~(v81 >> 31);
    unsigned int v67 = v80 >> 1;
    int v83 = *(unsigned __int16 *)(a4 + 72);
    unsigned int v84 = v80 - (v80 >> 1);
    unsigned int v69 = v79 >> 1;
    unsigned int v85 = v79 - (v79 >> 1);
    unsigned int v86 = v82 >> 1;
    unsigned int v71 = v82 - (v82 >> 1);
    BOOL v87 = v83 == 1;
    if (v83 == 1) {
      unsigned int v70 = v71;
    }
    else {
      unsigned int v70 = v86;
    }
    if (v87)
    {
      unsigned int v71 = v86;
      unsigned int v68 = v85;
    }
    else
    {
      unsigned int v68 = v69;
    }
    if (v87)
    {
      unsigned int v66 = v84;
    }
    else
    {
      unsigned int v69 = v85;
      unsigned int v66 = v67;
    }
    if (!v87) {
      unsigned int v67 = v84;
    }
    goto LABEL_75;
  }
  uint64_t v62 = v106;
  long long v63 = *(_OWORD *)(v106 + 16);
  v115[0] = *(_OWORD *)v106;
  v115[1] = v63;
  long long v64 = *(_OWORD *)(a7 + 16);
  v114[0] = *(_OWORD *)a7;
  v114[1] = v64;
  Espresso::ANECompilerEngine::mix_deconv3d_kernel::get_padding((unsigned int *)v112, (uint64_t)v117, v115, v114);
  unsigned int v65 = v111;
  unsigned int v67 = *(_DWORD *)v112;
  unsigned int v66 = *(_DWORD *)&v112[4];
  unsigned int v69 = *(_DWORD *)&v112[8];
  unsigned int v68 = *(_DWORD *)&v112[12];
  unsigned int v70 = *(_DWORD *)&v112[16];
  unsigned int v71 = *(_DWORD *)&v112[20];
LABEL_75:
  unsigned int v147 = v67;
  unsigned int v148 = v66;
  unsigned int v149 = v69;
  unsigned int v150 = v68;
  unsigned int v151 = v71;
  unsigned int v152 = v70;
LABEL_78:
  if (v65 <= 7 && ((0x97u >> v65) & 1) != 0)
  {
    long long v98 = off_1E5747218[v65];
    ANECTensorDescInitialize();
    *(void *)long long v112 = v98;
    uint64_t v99 = *(void *)(v62 + 12);
    *(void *)&long long v100 = (int)v99;
    *((void *)&v100 + 1) = SHIDWORD(v99);
    *(_OWORD *)&v112[24] = v100;
    uint64_t v113 = *(int *)(v62 + 8);
    *(void *)&long long v100 = (int)*(void *)v62;
    *((void *)&v100 + 1) = (int)HIDWORD(*(void *)v62);
    *(_OWORD *)&v112[8] = v100;
    *(void *)&v157[0] = 0;
    v158[0] = 0;
    BOOL v97 = ANECValidateConvLayer() == 0;
  }
  else
  {
    BOOL v97 = 0;
  }

  return v97;
}

void sub_19213A888(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

__CFString *Espresso::ANECompilerEngine::ane_conv_kernel_format(uint64_t a1)
{
  __n128 result = @"Float16";
  if (!a1) {
    return result;
  }
  uint64_t v3 = *(void *)(a1 + 48);
  if (*(void *)(a1 + 32) | v3)
  {
    if (v3) {
      return @"Int8";
    }
  }
  else if (!*(void *)(a1 + 64))
  {
    int v4 = *(_DWORD *)(a1 + 160);
    if (v4 <= 0) {
      int v4 = *(_DWORD *)(a1 + 156);
    }
    if (v4 == 8)
    {
      if (*(unsigned char *)(a1 + 164)) {
        return @"Int8";
      }
      else {
        return @"UInt8";
      }
    }
    return result;
  }
  if (*(void *)(a1 + 64)) {
    return @"UInt8";
  }
  return result;
}

__CFString *Espresso::ANECompilerEngine::ane_conv_kernel_mode(uint64_t a1, int a2)
{
  if (a1 && (*(void *)(a1 + 32) || *(void *)(a1 + 48) || *(void *)(a1 + 64)))
  {
    switch(*(_DWORD *)(a1 + 156))
    {
      case 1:
        uint64_t v2 = @"Palette2";
        uint64_t v3 = @"Palette2Sparse";
        break;
      case 2:
        uint64_t v2 = @"Palette4";
        uint64_t v3 = @"Palette4Sparse";
        break;
      case 3:
      case 4:
        uint64_t v2 = @"Palette16";
        uint64_t v3 = @"Palette16Sparse";
        break;
      case 5:
      case 6:
        uint64_t v2 = @"Palette64";
        uint64_t v3 = @"Palette64Sparse";
        break;
      case 7:
      case 8:
        uint64_t v2 = @"Palette256";
        uint64_t v3 = @"Palette256Sparse";
        break;
      default:
        goto LABEL_7;
    }
  }
  else
  {
LABEL_7:
    uint64_t v2 = @"Dense";
    uint64_t v3 = @"Sparse";
  }
  if (a2) {
    return v3;
  }
  else {
    return v2;
  }
}

BOOL Espresso::ANECompilerEngine::sparsity_options::force_dense_dilated_convs(Espresso::ANECompilerEngine::sparsity_options *this, const NSDictionary *a2)
{
  uint64_t v3 = [(Espresso::ANECompilerEngine::sparsity_options *)this objectForKeyedSubscript:@"espresso.anecompiler.no_sparse_for_dilated"];

  if (v3)
  {
    int v4 = [(Espresso::ANECompilerEngine::sparsity_options *)this objectForKeyedSubscript:@"espresso.anecompiler.no_sparse_for_dilated"];
    uint64_t v5 = [v4 BOOLValue];
  }
  else
  {
    uint64_t v5 = 0;
  }
  unsigned int v6 = getenv("ESPRESSO_ANEC_NO_SPARSE_FOR_DILATED");
  if (v6)
  {
    __endptr = 0;
    return strtol(v6, &__endptr, 10) != 0;
  }
  return v5;
}

void sub_19213AAA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL check_kernel_size_vs_input_output_size<Espresso::convolution_uniforms>(int a1, int a2, int *a3, int *a4, char a5, uint64_t a6, int64x2_t **a7)
{
  if (*(void *)a3 == *((void *)a3 + 1)) {
    return 1;
  }
  char v8 = (long long *)*((void *)a3 + 3);
  if (v8 == *((long long **)a3 + 4) || (a5 & 1) != 0) {
    return 1;
  }
  long long v14 = v8[1];
  uint64_t v15 = *((void *)v8 + 4);
  long long v164 = *v8;
  long long v165 = v14;
  uint64_t v166 = v15;
  int v167 = 0;
  long long v168 = 0;
  uint64_t v169 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v167, *((const void **)v8 + 5), *((void *)v8 + 6), (uint64_t)(*((void *)v8 + 6) - *((void *)v8 + 5)) >> 2);
  int v16 = *(long long **)a3;
  uint64_t v17 = *(void *)(*(void *)a3 + 32);
  long long v18 = *(_OWORD *)(*(void *)a3 + 16);
  long long v158 = *(_OWORD *)*(void *)a3;
  long long v159 = v18;
  uint64_t v160 = v17;
  int v161 = 0;
  long long v162 = 0;
  uint64_t v163 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v161, *((const void **)v16 + 5), *((void *)v16 + 6), (uint64_t)(*((void *)v16 + 6) - *((void *)v16 + 5)) >> 2);
  int v19 = a4[1];
  int v20 = *a4 + v158;
  if (v19 < a1 + ((int)v164 - 1) * *(__int16 *)(a6 + 92) - v20)
  {
    int v21 = *a7;
    int v22 = a7[1];
    v157[0] = v21;
    v157[1] = v22;
    if (v22) {
      atomic_fetch_add_explicit(&v22->i64[1], 1uLL, memory_order_relaxed);
    }
    std::to_string(&v141, v158);
    int v23 = std::string::insert(&v141, 0, "Declared right pad less than derived value for src_w=");
    long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    v142.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v142.__r_.__value_.__l.__data_ = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    int v25 = std::string::append(&v142, " dst_w=");
    long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    v143.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v143.__r_.__value_.__l.__data_ = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v140, v164);
    if ((v140.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v27 = &v140;
    }
    else {
      uint64_t v27 = (std::string *)v140.__r_.__value_.__r.__words[0];
    }
    if ((v140.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v140.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v140.__r_.__value_.__l.__size_;
    }
    long long v29 = std::string::append(&v143, (const std::string::value_type *)v27, size);
    long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
    v144.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v144.__r_.__value_.__l.__data_ = v30;
    v29->__r_.__value_.__l.__size_ = 0;
    v29->__r_.__value_.__r.__words[2] = 0;
    v29->__r_.__value_.__r.__words[0] = 0;
    int v31 = std::string::append(&v144, " stride_x=");
    long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
    v145.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v145.__r_.__value_.__l.__data_ = v32;
    v31->__r_.__value_.__l.__size_ = 0;
    v31->__r_.__value_.__r.__words[2] = 0;
    v31->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v139, *(__int16 *)(a6 + 92));
    if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v33 = &v139;
    }
    else {
      long long v33 = (std::string *)v139.__r_.__value_.__r.__words[0];
    }
    if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v34 = HIBYTE(v139.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v34 = v139.__r_.__value_.__l.__size_;
    }
    __int16 v35 = std::string::append(&v145, (const std::string::value_type *)v33, v34);
    long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
    v146.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v146.__r_.__value_.__l.__data_ = v36;
    v35->__r_.__value_.__l.__size_ = 0;
    v35->__r_.__value_.__r.__words[2] = 0;
    v35->__r_.__value_.__r.__words[0] = 0;
    int v37 = std::string::append(&v146, " Nx=");
    long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
    v147.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v147.__r_.__value_.__l.__data_ = v38;
    v37->__r_.__value_.__l.__size_ = 0;
    v37->__r_.__value_.__r.__words[2] = 0;
    v37->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v138, a1);
    if ((v138.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unsigned int v39 = &v138;
    }
    else {
      unsigned int v39 = (std::string *)v138.__r_.__value_.__r.__words[0];
    }
    if ((v138.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v40 = HIBYTE(v138.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v40 = v138.__r_.__value_.__l.__size_;
    }
    unsigned int v41 = std::string::append(&v147, (const std::string::value_type *)v39, v40);
    long long v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
    v148.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v148.__r_.__value_.__l.__data_ = v42;
    v41->__r_.__value_.__l.__size_ = 0;
    v41->__r_.__value_.__r.__words[2] = 0;
    v41->__r_.__value_.__r.__words[0] = 0;
    char v43 = std::string::append(&v148, " pad_l=");
    long long v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
    v149.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v149.__r_.__value_.__l.__data_ = v44;
    v43->__r_.__value_.__l.__size_ = 0;
    v43->__r_.__value_.__r.__words[2] = 0;
    v43->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v137, *a4);
    if ((v137.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v45 = &v137;
    }
    else {
      uint64_t v45 = (std::string *)v137.__r_.__value_.__r.__words[0];
    }
    if ((v137.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v46 = HIBYTE(v137.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v46 = v137.__r_.__value_.__l.__size_;
    }
    uint64_t v47 = std::string::append(&v149, (const std::string::value_type *)v45, v46);
    long long v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
    v150.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v150.__r_.__value_.__l.__data_ = v48;
    v47->__r_.__value_.__l.__size_ = 0;
    v47->__r_.__value_.__r.__words[2] = 0;
    v47->__r_.__value_.__r.__words[0] = 0;
    int v49 = std::string::append(&v150, " pad_r=");
    long long v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
    v151.__r_.__value_.__r.__words[2] = v49->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v151.__r_.__value_.__l.__data_ = v50;
    v49->__r_.__value_.__l.__size_ = 0;
    v49->__r_.__value_.__r.__words[2] = 0;
    v49->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v136, a4[1]);
    if ((v136.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v51 = &v136;
    }
    else {
      int v51 = (std::string *)v136.__r_.__value_.__r.__words[0];
    }
    if ((v136.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v52 = HIBYTE(v136.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v52 = v136.__r_.__value_.__l.__size_;
    }
    int v53 = std::string::append(&v151, (const std::string::value_type *)v51, v52);
    std::string v152 = *v53;
    v53->__r_.__value_.__l.__size_ = 0;
    v53->__r_.__value_.__r.__words[2] = 0;
    v53->__r_.__value_.__r.__words[0] = 0;
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)&v152, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v157, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
LABEL_72:
    if (v156) {
      nitro::nitro_function::nitro_function(v156);
    }
    long long v170 = (void **)v155;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v170);
    long long v170 = (void **)v154;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v170);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v152.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v136.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v151.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v150.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v137.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v137.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v149.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v148.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v148.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v138.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v147.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v146.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v139.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v145.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v144.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v140.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v143.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v142.__r_.__value_.__l.__data_);
    }
    if ((SHIBYTE(v141.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_162;
    }
    int v88 = (void *)v141.__r_.__value_.__r.__words[0];
LABEL_161:
    operator delete(v88);
LABEL_162:
    if (v22) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v22);
    }
    int v117 = 1;
    goto LABEL_165;
  }
  int v54 = a4[3];
  int v55 = a4[2] + DWORD1(v158);
  if (v54 < a2 + (DWORD1(v164) - 1) * *(__int16 *)(a6 + 94) - v55)
  {
    int v56 = *a7;
    int v22 = a7[1];
    v135[0] = v56;
    v135[1] = v22;
    if (v22) {
      atomic_fetch_add_explicit(&v22->i64[1], 1uLL, memory_order_relaxed);
    }
    std::to_string(&v141, SDWORD1(v158));
    int v57 = std::string::insert(&v141, 0, "Declared bottom pad less than derived value for src_h=");
    long long v58 = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
    v142.__r_.__value_.__r.__words[2] = v57->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v142.__r_.__value_.__l.__data_ = v58;
    v57->__r_.__value_.__l.__size_ = 0;
    v57->__r_.__value_.__r.__words[2] = 0;
    v57->__r_.__value_.__r.__words[0] = 0;
    int v59 = std::string::append(&v142, " dst_h=");
    long long v60 = *(_OWORD *)&v59->__r_.__value_.__l.__data_;
    v143.__r_.__value_.__r.__words[2] = v59->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v143.__r_.__value_.__l.__data_ = v60;
    v59->__r_.__value_.__l.__size_ = 0;
    v59->__r_.__value_.__r.__words[2] = 0;
    v59->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v140, SDWORD1(v164));
    if ((v140.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v61 = &v140;
    }
    else {
      uint64_t v61 = (std::string *)v140.__r_.__value_.__r.__words[0];
    }
    if ((v140.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v62 = HIBYTE(v140.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v62 = v140.__r_.__value_.__l.__size_;
    }
    long long v63 = std::string::append(&v143, (const std::string::value_type *)v61, v62);
    long long v64 = *(_OWORD *)&v63->__r_.__value_.__l.__data_;
    v144.__r_.__value_.__r.__words[2] = v63->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v144.__r_.__value_.__l.__data_ = v64;
    v63->__r_.__value_.__l.__size_ = 0;
    v63->__r_.__value_.__r.__words[2] = 0;
    v63->__r_.__value_.__r.__words[0] = 0;
    unsigned int v65 = std::string::append(&v144, " stride_y=");
    long long v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
    v145.__r_.__value_.__r.__words[2] = v65->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v145.__r_.__value_.__l.__data_ = v66;
    v65->__r_.__value_.__l.__size_ = 0;
    v65->__r_.__value_.__r.__words[2] = 0;
    v65->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v139, *(__int16 *)(a6 + 94));
    if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unsigned int v67 = &v139;
    }
    else {
      unsigned int v67 = (std::string *)v139.__r_.__value_.__r.__words[0];
    }
    if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v68 = HIBYTE(v139.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v68 = v139.__r_.__value_.__l.__size_;
    }
    unsigned int v69 = std::string::append(&v145, (const std::string::value_type *)v67, v68);
    long long v70 = *(_OWORD *)&v69->__r_.__value_.__l.__data_;
    v146.__r_.__value_.__r.__words[2] = v69->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v146.__r_.__value_.__l.__data_ = v70;
    v69->__r_.__value_.__l.__size_ = 0;
    v69->__r_.__value_.__r.__words[2] = 0;
    v69->__r_.__value_.__r.__words[0] = 0;
    unsigned int v71 = std::string::append(&v146, " Ny=");
    long long v72 = *(_OWORD *)&v71->__r_.__value_.__l.__data_;
    v147.__r_.__value_.__r.__words[2] = v71->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v147.__r_.__value_.__l.__data_ = v72;
    v71->__r_.__value_.__l.__size_ = 0;
    v71->__r_.__value_.__r.__words[2] = 0;
    v71->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v138, a2);
    if ((v138.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unsigned int v73 = &v138;
    }
    else {
      unsigned int v73 = (std::string *)v138.__r_.__value_.__r.__words[0];
    }
    if ((v138.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v74 = HIBYTE(v138.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v74 = v138.__r_.__value_.__l.__size_;
    }
    unsigned int v75 = std::string::append(&v147, (const std::string::value_type *)v73, v74);
    long long v76 = *(_OWORD *)&v75->__r_.__value_.__l.__data_;
    v148.__r_.__value_.__r.__words[2] = v75->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v148.__r_.__value_.__l.__data_ = v76;
    v75->__r_.__value_.__l.__size_ = 0;
    v75->__r_.__value_.__r.__words[2] = 0;
    v75->__r_.__value_.__r.__words[0] = 0;
    int v77 = std::string::append(&v148, " pad_t=");
    long long v78 = *(_OWORD *)&v77->__r_.__value_.__l.__data_;
    v149.__r_.__value_.__r.__words[2] = v77->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v149.__r_.__value_.__l.__data_ = v78;
    v77->__r_.__value_.__l.__size_ = 0;
    v77->__r_.__value_.__r.__words[2] = 0;
    v77->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v137, a4[2]);
    if ((v137.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unsigned int v79 = &v137;
    }
    else {
      unsigned int v79 = (std::string *)v137.__r_.__value_.__r.__words[0];
    }
    if ((v137.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v80 = HIBYTE(v137.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v80 = v137.__r_.__value_.__l.__size_;
    }
    int v81 = std::string::append(&v149, (const std::string::value_type *)v79, v80);
    long long v82 = *(_OWORD *)&v81->__r_.__value_.__l.__data_;
    v150.__r_.__value_.__r.__words[2] = v81->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v150.__r_.__value_.__l.__data_ = v82;
    v81->__r_.__value_.__l.__size_ = 0;
    v81->__r_.__value_.__r.__words[2] = 0;
    v81->__r_.__value_.__r.__words[0] = 0;
    int v83 = std::string::append(&v150, " pad_b");
    long long v84 = *(_OWORD *)&v83->__r_.__value_.__l.__data_;
    v151.__r_.__value_.__r.__words[2] = v83->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v151.__r_.__value_.__l.__data_ = v84;
    v83->__r_.__value_.__l.__size_ = 0;
    v83->__r_.__value_.__r.__words[2] = 0;
    v83->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v136, a4[3]);
    if ((v136.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unsigned int v85 = &v136;
    }
    else {
      unsigned int v85 = (std::string *)v136.__r_.__value_.__r.__words[0];
    }
    if ((v136.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v86 = HIBYTE(v136.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v86 = v136.__r_.__value_.__l.__size_;
    }
    BOOL v87 = std::string::append(&v151, (const std::string::value_type *)v85, v86);
    std::string v152 = *v87;
    v87->__r_.__value_.__l.__size_ = 0;
    v87->__r_.__value_.__r.__words[2] = 0;
    v87->__r_.__value_.__r.__words[0] = 0;
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)&v152, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v135, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    goto LABEL_72;
  }
  if (v20 + v19 < a1)
  {
    int v89 = *a7;
    int v22 = a7[1];
    v134[0] = v89;
    v134[1] = v22;
    if (v22) {
      atomic_fetch_add_explicit(&v22->i64[1], 1uLL, memory_order_relaxed);
    }
    std::to_string(&v147, v158);
    int v90 = std::string::insert(&v147, 0, "Input width ");
    long long v91 = *(_OWORD *)&v90->__r_.__value_.__l.__data_;
    v148.__r_.__value_.__r.__words[2] = v90->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v148.__r_.__value_.__l.__data_ = v91;
    v90->__r_.__value_.__l.__size_ = 0;
    v90->__r_.__value_.__r.__words[2] = 0;
    v90->__r_.__value_.__r.__words[0] = 0;
    unsigned int v92 = std::string::append(&v148, " plus horizontal padding ");
    long long v93 = *(_OWORD *)&v92->__r_.__value_.__l.__data_;
    v149.__r_.__value_.__r.__words[2] = v92->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v149.__r_.__value_.__l.__data_ = v93;
    v92->__r_.__value_.__l.__size_ = 0;
    v92->__r_.__value_.__r.__words[2] = 0;
    v92->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v146, a4[1] + *a4);
    if ((v146.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unsigned int v94 = &v146;
    }
    else {
      unsigned int v94 = (std::string *)v146.__r_.__value_.__r.__words[0];
    }
    if ((v146.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v95 = HIBYTE(v146.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v95 = v146.__r_.__value_.__l.__size_;
    }
    BOOL v96 = std::string::append(&v149, (const std::string::value_type *)v94, v95);
    long long v97 = *(_OWORD *)&v96->__r_.__value_.__l.__data_;
    v150.__r_.__value_.__r.__words[2] = v96->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v150.__r_.__value_.__l.__data_ = v97;
    v96->__r_.__value_.__l.__size_ = 0;
    v96->__r_.__value_.__r.__words[2] = 0;
    v96->__r_.__value_.__r.__words[0] = 0;
    long long v98 = std::string::append(&v150, " is less than the kernel width ");
    long long v99 = *(_OWORD *)&v98->__r_.__value_.__l.__data_;
    v151.__r_.__value_.__r.__words[2] = v98->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v151.__r_.__value_.__l.__data_ = v99;
    v98->__r_.__value_.__l.__size_ = 0;
    v98->__r_.__value_.__r.__words[2] = 0;
    v98->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v145, a1);
    if ((v145.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v100 = &v145;
    }
    else {
      long long v100 = (std::string *)v145.__r_.__value_.__r.__words[0];
    }
    if ((v145.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v101 = HIBYTE(v145.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v101 = v145.__r_.__value_.__l.__size_;
    }
    int v102 = std::string::append(&v151, (const std::string::value_type *)v100, v101);
    std::string v152 = *v102;
    v102->__r_.__value_.__l.__size_ = 0;
    v102->__r_.__value_.__r.__words[2] = 0;
    v102->__r_.__value_.__r.__words[0] = 0;
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)&v152, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v134, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    if (v156) {
      nitro::nitro_function::nitro_function(v156);
    }
    v144.__r_.__value_.__r.__words[0] = (std::string::size_type)v155;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v144);
    v144.__r_.__value_.__r.__words[0] = (std::string::size_type)v154;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v144);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
LABEL_145:
    if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v152.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v145.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v151.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v150.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v146.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v149.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v148.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v148.__r_.__value_.__l.__data_);
    }
    if ((SHIBYTE(v147.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_162;
    }
    int v88 = (void *)v147.__r_.__value_.__r.__words[0];
    goto LABEL_161;
  }
  if (v55 + v54 < a2)
  {
    int v103 = *a7;
    int v22 = a7[1];
    v133[0] = v103;
    v133[1] = v22;
    if (v22) {
      atomic_fetch_add_explicit(&v22->i64[1], 1uLL, memory_order_relaxed);
    }
    std::to_string(&v147, SDWORD1(v158));
    int v104 = std::string::insert(&v147, 0, "Input height ");
    long long v105 = *(_OWORD *)&v104->__r_.__value_.__l.__data_;
    v148.__r_.__value_.__r.__words[2] = v104->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v148.__r_.__value_.__l.__data_ = v105;
    v104->__r_.__value_.__l.__size_ = 0;
    v104->__r_.__value_.__r.__words[2] = 0;
    v104->__r_.__value_.__r.__words[0] = 0;
    uint64_t v106 = std::string::append(&v148, " plus vertical padding ");
    long long v107 = *(_OWORD *)&v106->__r_.__value_.__l.__data_;
    v149.__r_.__value_.__r.__words[2] = v106->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v149.__r_.__value_.__l.__data_ = v107;
    v106->__r_.__value_.__l.__size_ = 0;
    v106->__r_.__value_.__r.__words[2] = 0;
    v106->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v146, a4[3] + a4[2]);
    if ((v146.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v108 = &v146;
    }
    else {
      int v108 = (std::string *)v146.__r_.__value_.__r.__words[0];
    }
    if ((v146.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v109 = HIBYTE(v146.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v109 = v146.__r_.__value_.__l.__size_;
    }
    int v110 = std::string::append(&v149, (const std::string::value_type *)v108, v109);
    long long v111 = *(_OWORD *)&v110->__r_.__value_.__l.__data_;
    v150.__r_.__value_.__r.__words[2] = v110->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v150.__r_.__value_.__l.__data_ = v111;
    v110->__r_.__value_.__l.__size_ = 0;
    v110->__r_.__value_.__r.__words[2] = 0;
    v110->__r_.__value_.__r.__words[0] = 0;
    long long v112 = std::string::append(&v150, " is less than the kernel height ");
    long long v113 = *(_OWORD *)&v112->__r_.__value_.__l.__data_;
    v151.__r_.__value_.__r.__words[2] = v112->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v151.__r_.__value_.__l.__data_ = v113;
    v112->__r_.__value_.__l.__size_ = 0;
    v112->__r_.__value_.__r.__words[2] = 0;
    v112->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v145, a2);
    if ((v145.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v114 = &v145;
    }
    else {
      uint64_t v114 = (std::string *)v145.__r_.__value_.__r.__words[0];
    }
    if ((v145.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v115 = HIBYTE(v145.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v115 = v145.__r_.__value_.__l.__size_;
    }
    __int16 v116 = std::string::append(&v151, (const std::string::value_type *)v114, v115);
    std::string v152 = *v116;
    v116->__r_.__value_.__l.__size_ = 0;
    v116->__r_.__value_.__r.__words[2] = 0;
    v116->__r_.__value_.__r.__words[0] = 0;
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)&v152, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v133, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    goto LABEL_145;
  }
  int v119 = (void *)*((void *)a3 + 6);
  int v120 = *(long long **)(*v119 + 224 * *((void *)a3 + 9) + 136);
  if (*((char *)v120 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v152, *(const std::string::value_type **)v120, *((void *)v120 + 1));
    int v119 = (void *)*((void *)a3 + 6);
  }
  else
  {
    long long v121 = *v120;
    v152.__r_.__value_.__r.__words[2] = *((void *)v120 + 2);
    *(_OWORD *)&v152.__r_.__value_.__l.__data_ = v121;
  }
  uint64_t v122 = (std::__shared_weak_count *)v119[10];
  if (v122)
  {
    int v123 = std::__shared_weak_count::lock(v122);
    if (v123) {
      uint64_t v124 = v119[9];
    }
    else {
      uint64_t v124 = 0;
    }
  }
  else
  {
    uint64_t v124 = 0;
    int v123 = 0;
  }
  Espresso::ANECompilerEngine::ane_arch_allow_network_override(v124 + 472);
  int v125 = (Espresso::ANECompilerEngine *)objc_claimAutoreleasedReturnValue();
  uint64_t v126 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(void **)(v124 + 360), &v152);
  if (a3[16] <= 1) {
    int v128 = 1;
  }
  else {
    int v128 = a3[16];
  }
  if (v126)
  {
    v151.__r_.__value_.__r.__words[0] = (std::string::size_type)&v152;
    __int16 v129 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v124 + 352), &v152, (uint64_t)&std::piecewise_construct, (long long **)&v151);
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)(v129 + 56);
    v154[1] = 0;
    __p.__r_.__value_.__r.__words[2] = 0;
    v154[0] = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p.__r_.__value_.__r.__words[2], *((const void **)v129 + 9), *((void *)v129 + 10), (uint64_t)(*((void *)v129 + 10) - *((void *)v129 + 9)) >> 2);
    int v128 = LODWORD(__p.__r_.__value_.__r.__words[1]) == -1 ? 1 : LODWORD(__p.__r_.__value_.__r.__words[1]);
    if (__p.__r_.__value_.__r.__words[2])
    {
      v154[0] = *((void *)&__p.__r_.__value_.__l + 2);
      operator delete((void *)__p.__r_.__value_.__r.__words[2]);
    }
  }
  if (v128 == 1)
  {
    int v117 = 0;
    int v130 = Espresso::ANECompilerEngine::is_mix(v125, v127) ^ 1;
    if (a1 < 8) {
      LOBYTE(v130) = 1;
    }
    if ((v130 & 1) == 0 && *a4 >= 8)
    {
      int v131 = a7[1];
      v132[0] = *a7;
      v132[1] = v131;
      if (v131) {
        atomic_fetch_add_explicit(&v131->i64[1], 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(&v151, "Left pad exceeds hardware limit.");
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)&v151, (uint64_t)a3, 0);
      Espresso::emit_kernel_validation_warning(v132, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
      Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
      if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v151.__r_.__value_.__l.__data_);
      }
      if (v131) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v131);
      }
      int v117 = 1;
    }
  }
  else
  {
    int v117 = 0;
  }

  if (v123) {
    nitro::nitro_function::nitro_function(v123);
  }
  if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v152.__r_.__value_.__l.__data_);
  }
LABEL_165:
  if (v161)
  {
    long long v162 = v161;
    operator delete(v161);
  }
  if (v167)
  {
    long long v168 = v167;
    operator delete(v167);
  }
  return !v117;
}