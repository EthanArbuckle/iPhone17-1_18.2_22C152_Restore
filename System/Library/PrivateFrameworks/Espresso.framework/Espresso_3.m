uint64_t E5RT::ComputeProgramHeaderPriv::GetPlatformId(E5RT::ComputeProgramHeaderPriv *this)
{
  return *(void *)(*((void *)this + 1) + 8);
}

uint64_t E5PlatformManagerImpl::GetPlatformCompatibility(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == a3) {
    return 0;
  }
  uint64_t v3 = 1;
  if ((a3 & 0xFFFFFFFFFFFFFEFFLL) == 0) {
    return v3;
  }
  uint64_t BasePlatform = E5PlatformManagerImpl::GetBasePlatform(a1, a2);
  if (BasePlatform == E5PlatformManagerImpl::GetBasePlatform(a1, a3)) {
    return 1;
  }
  else {
    return 2;
  }
}

void *E5RT::ComputeProgramHeaderPriv::ComputeProgramHeaderPriv(void *result, uint64_t *a2)
{
  *result = &unk_1EE325C98;
  uint64_t v2 = *a2;
  *a2 = 0;
  result[1] = v2;
  int v3 = *(unsigned __int16 *)(v2 + 4);
  if (*(_WORD *)(v2 + 2)) {
    BOOL v4 = 0;
  }
  else {
    BOOL v4 = v3 == 2;
  }
  if (!v4)
  {
    std::to_string(&v17, *(unsigned __int16 *)(v2 + 2));
    v5 = std::string::insert(&v17, 0, "Detected compute program with major version = ");
    long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    v7 = std::string::append(&v18, " and minor version = ");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v19.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&__p, v3);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    v11 = std::string::append(&v19, (const std::string::value_type *)p_p, size);
    long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v20.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    v13 = std::string::append(&v20, ", which is unsupported.");
    long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    std::string::size_type v22 = v13->__r_.__value_.__r.__words[2];
    long long v21 = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v20.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_15:
        if ((SHIBYTE(v19.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_16;
        }
        goto LABEL_22;
      }
    }
    else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_15;
    }
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v19.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_16:
      if ((SHIBYTE(v18.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_17;
      }
      goto LABEL_23;
    }
LABEL_22:
    operator delete(v19.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v18.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_17:
      if ((SHIBYTE(v17.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_19;
      }
      goto LABEL_18;
    }
LABEL_23:
    operator delete(v18.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v17.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_19:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(&v20, "ComputeProgramHeaderPriv");
      E5RT::Status::Status(&v19, 1, &v21);
      E5RT::E5RTError::E5RTError(exception, &v20, &v19);
    }
LABEL_18:
    operator delete(v17.__r_.__value_.__l.__data_);
    goto LABEL_19;
  }
  return result;
}

void sub_192261AE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  E5RT::Status::~Status((E5RT::Status *)&a28);
  if (*(char *)(v36 - 73) < 0)
  {
    operator delete(*(void **)(v36 - 96));
    if ((v35 & 1) == 0)
    {
LABEL_6:
      if (*(char *)(v36 - 41) < 0) {
        operator delete(*(void **)(v36 - 64));
      }
      uint64_t v38 = *(void *)(v33 + 8);
      *(void *)(v33 + 8) = 0;
      if (v38) {
        MEMORY[0x192FF16B0](v38, 0x1000C40B2B1FC38);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v35)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v34);
  goto LABEL_6;
}

void *E5RT::ComputeProgramHeaderPriv::ComputeProgramHeaderPriv(void *result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  *result = &unk_1EE325C98;
  result[1] = v2;
  return result;
}

void Espresso::net::remove_layer(Espresso::net *this, int a2)
{
  int v3 = ((*((void *)this + 5) - *((void *)this + 4)) >> 4) - 1;
  if (v3 <= a2)
  {
    unint64_t v5 = v3;
    uint64_t v4 = a2;
  }
  else
  {
    uint64_t v4 = a2;
    unint64_t v5 = v3;
    unint64_t v6 = a2;
    do
    {
      unint64_t v7 = v6 + 1;
      unint64_t v18 = v6 + 1;
      long long v8 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)this + 56, v6 + 1, &v18);
      long long v19 = *(_OWORD *)(v8 + 3);
      std::string v20 = (std::string *)v8[5];
      long long v21 = (void **)v6;
      v8[3] = 0;
      v8[4] = 0;
      v8[5] = 0;
      v9 = (std::vector<std::string> *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)this + 56, v6, &v21);
      std::vector<std::string>::__vdeallocate(v9 + 1);
      *(_OWORD *)&v9[1].__begin_ = v19;
      v9[1].__end_cap_.__value_ = v20;
      std::string v20 = 0;
      long long v19 = 0uLL;
      long long v21 = (void **)&v19;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v21);
      unint64_t v18 = v6 + 1;
      v10 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)this + 96, v6 + 1, &v18);
      long long v19 = *(_OWORD *)(v10 + 3);
      std::string v20 = (std::string *)v10[5];
      long long v21 = (void **)v6;
      v10[3] = 0;
      v10[4] = 0;
      v10[5] = 0;
      v11 = (std::vector<std::string> *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)this + 96, v6, &v21);
      std::vector<std::string>::__vdeallocate(v11 + 1);
      *(_OWORD *)&v11[1].__begin_ = v19;
      v11[1].__end_cap_.__value_ = v20;
      std::string v20 = 0;
      long long v19 = 0uLL;
      long long v21 = (void **)&v19;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v21);
      unint64_t v6 = v7;
    }
    while (v5 != v7);
  }
  std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__erase_unique<unsigned long>((void *)this + 7, v5);
  std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__erase_unique<unsigned long>((void *)this + 12, v5);
  uint64_t v12 = *((void *)this + 5);
  uint64_t v13 = *((void *)this + 4) + 16 * v4;
  uint64_t v14 = v13 + 16;
  if (v13 + 16 != v12)
  {
    do
    {
      uint64_t v13 = v14;
      long long v15 = *(_OWORD *)v14;
      *(void *)uint64_t v14 = 0;
      *(void *)(v14 + 8) = 0;
      v16 = *(std::__shared_weak_count **)(v14 - 8);
      *(_OWORD *)(v14 - 16) = v15;
      if (v16) {
        nitro::nitro_function::nitro_function(v16);
      }
      v14 += 16;
    }
    while (v13 + 16 != v12);
    uint64_t v14 = *((void *)this + 5);
  }
  while (v14 != v13)
  {
    std::string v17 = *(std::__shared_weak_count **)(v14 - 8);
    if (v17) {
      nitro::nitro_function::nitro_function(v17);
    }
    v14 -= 16;
  }
  *((void *)this + 5) = v13;
}

void sub_192261E40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void **a14)
{
  a14 = (void **)&a11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a14);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,std::vector<std::string>>,void *>>>::operator()[abi:ne180100](char a1, void **__p)
{
  if (a1)
  {
    int v3 = __p + 3;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
  if (__p)
  {
    operator delete(__p);
  }
}

void std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__erase_unique<unsigned long>(void *a1, unint64_t a2)
{
  int v3 = (void **)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::find<unsigned long>(a1, a2);
  if (v3)
  {
    int8x8_t v4 = (int8x8_t)a1[1];
    unint64_t v5 = (unint64_t)v3[1];
    uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4);
    v6.i16[0] = vaddlv_u8(v6);
    if (v6.u32[0] > 1uLL)
    {
      if (v5 >= *(void *)&v4) {
        v5 %= *(void *)&v4;
      }
    }
    else
    {
      v5 &= *(void *)&v4 - 1;
    }
    unint64_t v7 = *(void ***)(*a1 + 8 * v5);
    do
    {
      long long v8 = v7;
      unint64_t v7 = (void **)*v7;
    }
    while (v7 != v3);
    if (v8 == a1 + 2) {
      goto LABEL_20;
    }
    unint64_t v9 = (unint64_t)v8[1];
    if (v6.u32[0] > 1uLL)
    {
      if (v9 >= *(void *)&v4) {
        v9 %= *(void *)&v4;
      }
    }
    else
    {
      v9 &= *(void *)&v4 - 1;
    }
    if (v9 != v5)
    {
LABEL_20:
      if (!*v3) {
        goto LABEL_21;
      }
      unint64_t v10 = *((void *)*v3 + 1);
      if (v6.u32[0] > 1uLL)
      {
        if (v10 >= *(void *)&v4) {
          v10 %= *(void *)&v4;
        }
      }
      else
      {
        v10 &= *(void *)&v4 - 1;
      }
      if (v10 != v5) {
LABEL_21:
      }
        *(void *)(*a1 + 8 * v5) = 0;
    }
    v11 = *v3;
    if (*v3)
    {
      unint64_t v12 = v11[1];
      if (v6.u32[0] > 1uLL)
      {
        if (v12 >= *(void *)&v4) {
          v12 %= *(void *)&v4;
        }
      }
      else
      {
        v12 &= *(void *)&v4 - 1;
      }
      if (v12 != v5)
      {
        *(void *)(*a1 + 8 * v12) = v8;
        v11 = *v3;
      }
    }
    *long long v8 = v11;
    *int v3 = 0;
    --a1[3];
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,std::vector<std::string>>,void *>>>::operator()[abi:ne180100](1, v3);
  }
}

uint64_t Espresso::AOT::MILCompilerForE5::CanonicalizeForPlatform@<X0>(Espresso::AOT::AbstractMILCompiler *a1@<X0>, MIL::Opsets::Common::ios15::ios15Opset **a2@<X1>, uint64_t a3@<X4>, void *a4@<X8>)
{
  uint64_t v98 = *MEMORY[0x1E4F143B8];
  uint64_t Options = Espresso::AOT::AbstractMILCompiler::GetOptions(a1);
  BOOL v7 = E5Common::PlatformIdentifier::operator==(a3, 256);
  long long v8 = *a2;
  if (!v7)
  {
    Espresso::MILTransforms::FoldTrivialConsts(*a2);
    Espresso::AOT::AbstractMILPass::AbstractMILPass(&v90);
    v90 = &unk_1EE36B448;
    Espresso::AOT::OpPlacementPass::Run((uint64_t)&v90, (uint64_t)*a2);
  }
  *a2 = 0;
  (*(void (**)(MIL::Opsets::Common::ios15::ios15Opset *))(*(void *)v8 + 40))(v8);
  (*(void (**)(void **__return_ptr, MIL::Opsets::Common::ios15::ios15Opset *))(*(void *)v8 + 48))(&v90, v8);
  MIL::Builder::ProgramBuilder::Make();
  unint64_t v9 = v91;
  if (v91 && !atomic_fetch_add(&v91->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    unint64_t v10 = *(const void ***)(Options + 48);
    v11 = *(const void ***)(Options + 56);
    v59 = v8;
    if (v10 == v11) {
      goto LABEL_130;
    }
    while (1)
    {
LABEL_7:
      MIL::Builder::ProgramBuilder::GetFunction();
      MIL::Builder::ProgramBuilder::RemoveFunction();
      int v12 = *((char *)v10 + 23);
      if (v12 >= 0) {
        size_t v13 = *((unsigned __int8 *)v10 + 23);
      }
      else {
        size_t v13 = (size_t)v10[1];
      }
      unint64_t v14 = v13 + 18;
      if (v13 + 18 >= 0x7FFFFFFFFFFFFFF8) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      if (v14 >= 0x17)
      {
        uint64_t v16 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v14 | 7) != 0x17) {
          uint64_t v16 = v14 | 7;
        }
        uint64_t v17 = v16 + 1;
        p_dst = (std::string *)operator new(v16 + 1);
        __dst.__r_.__value_.__l.__size_ = v13 + 18;
        __dst.__r_.__value_.__r.__words[2] = v17 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
      }
      else
      {
        memset(&__dst, 0, sizeof(__dst));
        p_dst = &__dst;
        *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v13 + 18;
        if (!v13) {
          goto LABEL_21;
        }
      }
      if (v12 >= 0) {
        unint64_t v18 = v10;
      }
      else {
        unint64_t v18 = *v10;
      }
      memmove(p_dst, v18, v13);
LABEL_21:
      long long v8 = v59;
      strcpy((char *)p_dst + v13, "__outlined_for_jit");
      v86 = v88;
      v87 = v89;
      if (v89) {
        atomic_fetch_add_explicit(&v89->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      MIL::Builder::ProgramBuilder::AddFunction();
      long long v19 = v87;
      if (v87 && !atomic_fetch_add(&v87->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
      MIL::Builder::FunctionBuilder::GetInputs((uint64_t *)&v60, v88);
      MIL::Builder::ProgramBuilder::AddFunction();
      LocationPtr = (uint64_t *)MIL::Builder::FunctionBuilder::GetLocationPtr(v88);
      long long v21 = (std::__shared_weak_count *)LocationPtr[1];
      uint64_t v83 = *LocationPtr;
      v84 = v21;
      if (v21) {
        atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      MIL::Builder::FunctionBuilder::SetLocation();
      std::string::size_type v22 = v84;
      if (v84 && !atomic_fetch_add(&v84->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
        v23 = (MIL::Builder::Variable *)v62;
        if (!v62) {
          goto LABEL_31;
        }
      }
      else
      {
        v23 = (MIL::Builder::Variable *)v62;
        if (!v62) {
          goto LABEL_31;
        }
      }
      do
      {
        uint64_t Name = MIL::Builder::Variable::GetName(*((MIL::Builder::Variable **)v23 + 2));
        if (*(char *)(Name + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v95, *(const std::string::value_type **)Name, *(void *)(Name + 8));
        }
        else
        {
          long long v30 = *(_OWORD *)Name;
          v95.__r_.__value_.__r.__words[2] = *(void *)(Name + 16);
          *(_OWORD *)&v95.__r_.__value_.__l.__data_ = v30;
        }
        MIL::Builder::Variable::TryGetType(*((MIL::Builder::Variable **)v23 + 2));
        MIL::Builder::FunctionBuilder::AddInput();
        if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v95.__r_.__value_.__l.__data_);
        }
        v23 = *(MIL::Builder::Variable **)v23;
      }
      while (v23);
LABEL_31:
      HIBYTE(v94[2]) = 5;
      strcpy((char *)v94, "ios16");
      MIL::Builder::FunctionBuilder::AddBlock();
      if (SHIBYTE(v94[2]) < 0) {
        operator delete(v94[0]);
      }
      v24 = (uint64_t *)MIL::Builder::FunctionBuilder::GetLocationPtr(v88);
      v25 = (std::__shared_weak_count *)v24[1];
      uint64_t v80 = *v24;
      v81 = v25;
      if (v25) {
        atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      MIL::Builder::BlockBuilder::SetLocation();
      v26 = v81;
      if (v81 && !atomic_fetch_add(&v81->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
      HIBYTE(v93[2]) = 4;
      strcpy((char *)v93, "call");
      uint64_t v77 = 0;
      v78 = 0;
      MIL::Builder::BlockBuilder::AddOperation();
      v27 = v78;
      if (v78 && !atomic_fetch_add(&v78->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
        if (SHIBYTE(v93[2]) < 0)
        {
LABEL_52:
          operator delete((void *)v93[0]);
          v28 = (MIL::Builder::Variable *)v62;
          if (!v62) {
            goto LABEL_53;
          }
LABEL_70:
          while (2)
          {
            while (2)
            {
              uint64_t v36 = MIL::Builder::Variable::GetName(*((MIL::Builder::Variable **)v28 + 2));
              if (*(char *)(v36 + 23) < 0)
              {
                std::string::__init_copy_ctor_external(&v97, *(const std::string::value_type **)v36, *(void *)(v36 + 8));
              }
              else
              {
                long long v37 = *(_OWORD *)v36;
                v97.__r_.__value_.__r.__words[2] = *(void *)(v36 + 16);
                *(_OWORD *)&v97.__r_.__value_.__l.__data_ = v37;
              }
              uint64_t v38 = MIL::Builder::Variable::GetName(*((MIL::Builder::Variable **)v28 + 2));
              if (*(char *)(v38 + 23) < 0)
              {
                std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v38, *(void *)(v38 + 8));
              }
              else
              {
                long long v39 = *(_OWORD *)v38;
                __p.__r_.__value_.__r.__words[2] = *(void *)(v38 + 16);
                *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v39;
              }
              MIL::Builder::OperationBuilder::AddInput();
              v40 = v76;
              if (v76 && !atomic_fetch_add(&v76->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
                std::__shared_weak_count::__release_weak(v40);
                if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                  goto LABEL_79;
                }
              }
              else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_79:
                if ((SHIBYTE(v97.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                {
LABEL_69:
                  v28 = *(MIL::Builder::Variable **)v28;
                  if (!v28) {
                    goto LABEL_53;
                  }
                  continue;
                }
                goto LABEL_80;
              }
              break;
            }
            operator delete(__p.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v97.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_69;
            }
LABEL_80:
            operator delete(v97.__r_.__value_.__l.__data_);
            v28 = *(MIL::Builder::Variable **)v28;
            if (!v28) {
              goto LABEL_53;
            }
            continue;
          }
        }
      }
      else if (SHIBYTE(v93[2]) < 0)
      {
        goto LABEL_52;
      }
      v28 = (MIL::Builder::Variable *)v62;
      if (v62) {
        goto LABEL_70;
      }
LABEL_53:
      MIL::Builder::FunctionBuilder::SelectedSpecialization(v88);
      MIL::Builder::FunctionBuilder::GetBlock();
      MIL::Builder::BlockBuilder::GetOutputs(v93, v73);
      if (v93[1] != v93[0])
      {
        uint64_t v31 = 0;
        if ((unint64_t)((v93[1] - v93[0]) >> 3) <= 1) {
          uint64_t v32 = 1;
        }
        else {
          uint64_t v32 = (v93[1] - v93[0]) >> 3;
        }
        while (1)
        {
          uint64_t v33 = MIL::Builder::Variable::GetName(*(MIL::Builder::Variable **)(v93[0] + 8 * v31));
          if (*(char *)(v33 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v71, *(const std::string::value_type **)v33, *(void *)(v33 + 8));
          }
          else
          {
            long long v34 = *(_OWORD *)v33;
            v71.__r_.__value_.__r.__words[2] = *(void *)(v33 + 16);
            *(_OWORD *)&v71.__r_.__value_.__l.__data_ = v34;
          }
          MIL::Builder::Variable::TryGetType(*(MIL::Builder::Variable **)(v93[0] + 8 * v31));
          MIL::Builder::OperationBuilder::AddOutput();
          int v35 = v72;
          if (v72)
          {
            if (!atomic_fetch_add(&v72->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
              break;
            }
          }
          if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
            goto LABEL_63;
          }
LABEL_64:
          MIL::Builder::Variable::GetName(*(MIL::Builder::Variable **)(v93[0] + 8 * v31));
          MIL::Builder::BlockBuilder::AddOutput();
          if (v32 == ++v31) {
            goto LABEL_84;
          }
        }
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
        if ((SHIBYTE(v71.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_64;
        }
LABEL_63:
        operator delete(v71.__r_.__value_.__l.__data_);
        goto LABEL_64;
      }
LABEL_84:
      MIL::IRTensorValueType::MakeScalar();
      char v69 = 8;
      strcpy((char *)v68, "function");
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v65, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
      }
      else {
        std::string v65 = __dst;
      }
      MIL::IRTensorValueType::MakeStringValue();
      v66 = v63[0];
      if (v63[0]) {
        operator new();
      }
      v67 = 0;
      v63[0] = 0;
      MIL::Builder::OperationBuilder::SetAttribute();
      v41 = v70;
      if (v70 && !atomic_fetch_add(&v70->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
        v42 = v67;
        if (!v67) {
          goto LABEL_95;
        }
      }
      else
      {
        v42 = v67;
        if (!v67) {
          goto LABEL_95;
        }
      }
      if (!atomic_fetch_add(&v42->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
LABEL_95:
      v43 = v63[0];
      v63[0] = 0;
      if (v43) {
        (*(void (**)(MIL::IRListValue *))(*(void *)v43 + 8))(v43);
      }
      if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v65.__r_.__value_.__l.__data_);
        if ((v69 & 0x80000000) == 0) {
          goto LABEL_99;
        }
      }
      else if ((v69 & 0x80000000) == 0)
      {
        goto LABEL_99;
      }
      operator delete(v68[0]);
LABEL_99:
      char v64 = 5;
      strcpy((char *)v63, "ios16");
      MIL::Builder::FunctionBuilder::SetSpecialization();
      if (v64 < 0)
      {
        operator delete(v63[0]);
        v44 = (void *)v93[0];
        if (!v93[0]) {
          goto LABEL_102;
        }
        goto LABEL_101;
      }
      v44 = (void *)v93[0];
      if (v93[0])
      {
LABEL_101:
        v93[1] = (uint64_t)v44;
        operator delete(v44);
      }
LABEL_102:
      v45 = v74;
      if (v74 && !atomic_fetch_add(&v74->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
        v46 = v79;
        if (!v79) {
          goto LABEL_112;
        }
      }
      else
      {
        v46 = v79;
        if (!v79) {
          goto LABEL_112;
        }
      }
      if (!atomic_fetch_add(&v46->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
LABEL_112:
      v47 = v82;
      if (v82 && !atomic_fetch_add(&v82->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
        v48 = v85;
        if (!v85) {
          goto LABEL_118;
        }
      }
      else
      {
        v48 = v85;
        if (!v85) {
          goto LABEL_118;
        }
      }
      if (!atomic_fetch_add(&v48->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
        std::__shared_weak_count::__release_weak(v48);
      }
LABEL_118:
      v49 = v62;
      if (v62)
      {
        do
        {
          v50 = (void *)*v49;
          operator delete(v49);
          v49 = v50;
        }
        while (v50);
      }
      v51 = v60;
      v60 = 0;
      if (v51) {
        operator delete(v51);
      }
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        v52 = v89;
        if (!v89) {
          goto LABEL_6;
        }
LABEL_126:
        if (!atomic_fetch_add(&v52->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
          std::__shared_weak_count::__release_weak(v52);
        }
        goto LABEL_6;
      }
      operator delete(__dst.__r_.__value_.__l.__data_);
      v52 = v89;
      if (v89) {
        goto LABEL_126;
      }
LABEL_6:
      v10 += 3;
      if (v10 == v11) {
        goto LABEL_130;
      }
    }
  }
  unint64_t v10 = *(const void ***)(Options + 48);
  v11 = *(const void ***)(Options + 56);
  v59 = v8;
  if (v10 != v11) {
    goto LABEL_7;
  }
LABEL_130:
  MIL::Builder::ProgramBuilder::CreateProgram((uint64_t *)&v60, v92);
  if (((*((uint64_t (**)(void **))v61 + 2))(&v61) & 1) == 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    MIL::MILResult::GetMessage((MIL::MILResult *)&v61);
    std::operator+<char>();
    std::runtime_error::runtime_error(exception, &__dst);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  v53 = v60;
  v60 = 0;
  *a4 = v53;
  MEMORY[0x192FEF390](&v61);
  v54 = v60;
  v60 = 0;
  if (v54) {
    (*(void (**)(void *))(*(void *)v54 + 8))(v54);
  }
  v55 = v92;
  v92 = 0;
  if (v55) {
    (*(void (**)(MIL::Builder::ProgramBuilder *))(*(void *)v55 + 8))(v55);
  }
  return (*(uint64_t (**)(MIL::Opsets::Common::ios15::ios15Opset *))(*(void *)v8 + 8))(v8);
}

void sub_192263A20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  if (*(char *)(v18 - 129) < 0)
  {
    operator delete(*(void **)(v18 - 152));
    if ((v17 & 1) == 0)
    {
LABEL_6:
      std::pair<std::unique_ptr<MIL::IRProgram>,MIL::ValidationResult>::~pair((uint64_t *)va);
      uint64_t v20 = *(void *)(v18 - 248);
      *(void *)(v18 - 248) = 0;
      if (v20) {
        (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
      }
      (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
      _Unwind_Resume(a1);
    }
  }
  else if (!v17)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v16);
  goto LABEL_6;
}

uint64_t Espresso::AOT::CompilerOptionsForE5::GetMatchE5MinimalCpuPatternsForStates(Espresso::AOT::CompilerOptionsForE5 *this)
{
  return *((unsigned __int8 *)this + 342);
}

uint64_t Espresso::AOT::CompilerOptionsForE5::GetMatchE5MinimalCpuPatterns(Espresso::AOT::CompilerOptionsForE5 *this)
{
  return *((unsigned __int8 *)this + 341);
}

uint64_t Espresso::AOT::CompilerOptionsForE5::GetCoalesceOpsWithConsumers(Espresso::AOT::CompilerOptionsForE5 *this)
{
  return *((unsigned __int8 *)this + 340);
}

uint64_t Espresso::AOT::CompilerOptionsForE5::GetShrinkQuantGroup(Espresso::AOT::CompilerOptionsForE5 *this)
{
  return *((unsigned __int8 *)this + 339);
}

uint64_t Espresso::AOT::CompilerOptionsForE5::GetMoveReadStateOps(Espresso::AOT::CompilerOptionsForE5 *this)
{
  return *((unsigned __int8 *)this + 338);
}

BOOL Espresso::AOT::Utils::IsPlatformHThirteenANE(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unint64_t v9 = (char *)&a9;
  if (a1 <= 24577)
  {
    if (a1 == 24576)
    {
      uint64_t v10 = 0;
      goto LABEL_12;
    }
    if (a1 == 24577)
    {
      uint64_t v10 = 1;
      goto LABEL_12;
    }
  }
  else
  {
    switch(a1)
    {
      case 24578:
        uint64_t v10 = 2;
        goto LABEL_12;
      case 33025:
        uint64_t v10 = 3;
        goto LABEL_12;
      case 33027:
        uint64_t v10 = 4;
LABEL_12:
        unint64_t v9 = (char *)&v12[v10];
        break;
    }
  }
  return v9 - (char *)v12 != 40;
}

uint64_t Espresso::AOT::E5RTGroupMatcher::E5RTGroupMatcher(uint64_t a1, uint64_t a2, int a3, char a4, char a5, char a6)
{
  *(void *)(a1 + 8) = 0;
  *(void *)a1 = &unk_1EE36B0F8;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  int v12 = *(const void **)a2;
  uint64_t v11 = *(void *)(a2 + 8);
  int64_t v13 = v11 - *(void *)a2;
  if (v11 != *(void *)a2)
  {
    if (v13 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v14 = (char *)operator new(v11 - *(void *)a2);
    *(void *)(a1 + 8) = v14;
    *(void *)(a1 + 16) = v14;
    long long v15 = &v14[4 * (v13 >> 2)];
    *(void *)(a1 + 24) = v15;
    memcpy(v14, v12, v13);
    *(void *)(a1 + 16) = v15;
  }
  *(unsigned char *)(a1 + 55) = 7;
  strcpy((char *)(a1 + 32), "isQuant");
  *(_DWORD *)(a1 + 56) = a3;
  *(unsigned char *)(a1 + 60) = a4;
  *(unsigned char *)(a1 + 61) = a5;
  *(unsigned char *)(a1 + 62) = a6;
  return a1;
}

{
  uint64_t v11;
  const void *v12;
  int64_t v13;
  char *v14;
  char *v15;

  *(void *)(a1 + 8) = 0;
  *(void *)a1 = &unk_1EE36B0F8;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  int v12 = *(const void **)a2;
  uint64_t v11 = *(void *)(a2 + 8);
  int64_t v13 = v11 - *(void *)a2;
  if (v11 != *(void *)a2)
  {
    if (v13 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v14 = (char *)operator new(v11 - *(void *)a2);
    *(void *)(a1 + 8) = v14;
    *(void *)(a1 + 16) = v14;
    long long v15 = &v14[4 * (v13 >> 2)];
    *(void *)(a1 + 24) = v15;
    memcpy(v14, v12, v13);
    *(void *)(a1 + 16) = v15;
  }
  *(unsigned char *)(a1 + 55) = 7;
  strcpy((char *)(a1 + 32), "isQuant");
  *(_DWORD *)(a1 + 56) = a3;
  *(unsigned char *)(a1 + 60) = a4;
  *(unsigned char *)(a1 + 61) = a5;
  *(unsigned char *)(a1 + 62) = a6;
  return a1;
}

void sub_192264184(_Unwind_Exception *exception_object)
{
  int8x8_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void E5Common::MinimalCpu::MatchTensorToTensorBufferLoadingWeightsAndAddIntendedBackend(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  if (*a2 != v6)
  {
    uint64_t v7 = v4;
    while (1)
    {
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 64))(&v18, a1, v5);
      if (v18)
      {
        long long v8 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v18 + 120))(v18);
        unint64_t v9 = v8 + 1;
        uint64_t v10 = (void *)*v8;
        if ((void *)*v8 != v8 + 1) {
          break;
        }
      }
LABEL_6:
      uint64_t v11 = v19;
      if (v19)
      {
        if (!atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
      v5 += 24;
      if (v5 == v6) {
        return;
      }
    }
    while (1)
    {
      if (E5Common::MinimalCpu::IsTensorToTensorBufferLoadingWeights(v7, v10[7])
        && (uint64_t v12 = v10[7],
            char v17 = 14,
            strcpy((char *)__p, "e5_minimal_cpu"),
            E5Common::Utils::AddIntendedBackend(v7, v12, (uint64_t)__p),
            v17 < 0))
      {
        operator delete(__p[0]);
        int64_t v13 = (void *)v10[1];
        if (!v13)
        {
          do
          {
LABEL_16:
            unint64_t v14 = (void *)v10[2];
            BOOL v15 = *v14 == (void)v10;
            uint64_t v10 = v14;
          }
          while (!v15);
          goto LABEL_9;
        }
      }
      else
      {
        int64_t v13 = (void *)v10[1];
        if (!v13) {
          goto LABEL_16;
        }
      }
      do
      {
        unint64_t v14 = v13;
        int64_t v13 = (void *)*v13;
      }
      while (v13);
LABEL_9:
      uint64_t v10 = v14;
      if (v14 == v9) {
        goto LABEL_6;
      }
    }
  }
}

void sub_192264380(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
}

uint64_t Espresso::AOT::AbstractMILCompiler::GetOptions(Espresso::AOT::AbstractMILCompiler *this)
{
  return (uint64_t)this + 184;
}

uint64_t Espresso::MILTransforms::FoldTrivialConsts(MIL::Opsets::Common::ios15::ios15Opset *a1)
{
  v58[1] = *MEMORY[0x1E4F143B8];
  Opsetuint64_t Name = (MIL::Opsets::Common::ios16::ios16Opset *)MIL::Opsets::Common::ios15::ios15Opset::GetOpsetName(a1);
  size_t v3 = v2;
  if (v2 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v4 = OpsetName;
  if (v2 >= 0x17)
  {
    uint64_t v6 = (v2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v2 | 7) != 0x17) {
      uint64_t v6 = v2 | 7;
    }
    uint64_t v7 = v6 + 1;
    p_dst = (long long *)operator new(v6 + 1);
    *((void *)&__dst + 1) = v3;
    *(void *)&long long v50 = v7 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
    goto LABEL_8;
  }
  BYTE7(v50) = v2;
  p_dst = &__dst;
  if (v2) {
LABEL_8:
  }
    Opsetuint64_t Name = (MIL::Opsets::Common::ios16::ios16Opset *)memmove(p_dst, v4, v3);
  *((unsigned char *)p_dst + v3) = 0;
  long long v8 = (char *)&v50 + 8;
  unint64_t v9 = (MIL::Opsets::Common::ios17::ios17Opset *)MIL::Opsets::Common::ios16::ios16Opset::GetOpsetName(OpsetName);
  size_t v11 = v10;
  if (v10 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v12 = v9;
  if (v10 >= 0x17)
  {
    uint64_t v13 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17) {
      uint64_t v13 = v10 | 7;
    }
    uint64_t v14 = v13 + 1;
    BOOL v15 = (char *)operator new(v13 + 1);
    size_t v51 = v11;
    unint64_t v52 = v14 | 0x8000000000000000;
    *((void *)&v50 + 1) = v15;
    long long v8 = v15;
    goto LABEL_16;
  }
  HIBYTE(v52) = v10;
  if (v10) {
LABEL_16:
  }
    unint64_t v9 = (MIL::Opsets::Common::ios17::ios17Opset *)memmove(v8, v12, v11);
  v8[v11] = 0;
  uint64_t v16 = v53;
  char v17 = (MIL::Opsets::Common::ios18::ios18Opset *)MIL::Opsets::Common::ios17::ios17Opset::GetOpsetName(v9);
  size_t v19 = v18;
  if (v18 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v20 = v17;
  if (v18 >= 0x17)
  {
    uint64_t v21 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17) {
      uint64_t v21 = v18 | 7;
    }
    uint64_t v22 = v21 + 1;
    v23 = operator new(v21 + 1);
    v53[1] = v19;
    unint64_t v54 = v22 | 0x8000000000000000;
    v53[0] = v23;
    uint64_t v16 = v23;
    goto LABEL_24;
  }
  HIBYTE(v54) = v18;
  if (v18) {
LABEL_24:
  }
    char v17 = (MIL::Opsets::Common::ios18::ios18Opset *)memmove(v16, v20, v19);
  *((unsigned char *)v16 + v19) = 0;
  v24 = v55;
  v25 = (MIL::Opsets::Train::ios16Train::ios16_trainOpset *)MIL::Opsets::Common::ios18::ios18Opset::GetOpsetName(v17);
  size_t v27 = v26;
  if (v26 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  v28 = v25;
  if (v26 >= 0x17)
  {
    uint64_t v29 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v26 | 7) != 0x17) {
      uint64_t v29 = v26 | 7;
    }
    uint64_t v30 = v29 + 1;
    uint64_t v31 = operator new(v29 + 1);
    v55[1] = v27;
    unint64_t v56 = v30 | 0x8000000000000000;
    v55[0] = v31;
    v24 = v31;
    goto LABEL_32;
  }
  HIBYTE(v56) = v26;
  if (v26) {
LABEL_32:
  }
    v25 = (MIL::Opsets::Train::ios16Train::ios16_trainOpset *)memmove(v24, v28, v27);
  *((unsigned char *)v24 + v27) = 0;
  uint64_t v32 = v57;
  uint64_t v33 = MIL::Opsets::Train::ios16Train::ios16_trainOpset::GetOpsetName(v25);
  size_t v35 = v34;
  if (v34 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v36 = (const void *)v33;
  if (v34 >= 0x17)
  {
    uint64_t v37 = (v34 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v34 | 7) != 0x17) {
      uint64_t v37 = v34 | 7;
    }
    uint64_t v38 = v37 + 1;
    long long v39 = operator new(v37 + 1);
    v57[1] = v35;
    v58[0] = v38 | 0x8000000000000000;
    v57[0] = v39;
    uint64_t v32 = v39;
  }
  else
  {
    HIBYTE(v58[0]) = v34;
    if (!v34) {
      goto LABEL_41;
    }
  }
  memmove(v32, v36, v35);
LABEL_41:
  *((unsigned char *)v32 + v35) = 0;
  std::unordered_set<std::string>::unordered_set((uint64_t)v46, (uint64_t)&__dst, 5);
  for (uint64_t i = 0; i != -15; i -= 3)
  {
    if (SHIBYTE(v58[i]) < 0) {
      operator delete((void *)v57[i]);
    }
  }
  long long __dst = 0u;
  long long v50 = 0u;
  LODWORD(v51) = 1065353216;
  int v45 = 0;
  v41 = operator new(0x20uLL);
  void *v41 = &unk_1EE37AE30;
  v41[1] = v46;
  v41[2] = &__dst;
  v41[3] = &v45;
  v48 = v41;
  MIL::Util::Walk();
  std::__function::__value_func<BOOL ()(MIL::IRFunction const&)>::~__value_func[abi:ne180100](v47);
  uint64_t v44 = *((void *)&v50 + 1);
  int v45 = 0;
  v42 = operator new(0x28uLL);
  void *v42 = &unk_1EE37AE88;
  v42[1] = v46;
  v42[2] = &__dst;
  v42[3] = &v45;
  v42[4] = &v44;
  v48 = v42;
  MIL::Util::Rewrite();
  std::__function::__value_func<BOOL ()(MIL::IRFunction &)>::~__value_func[abi:ne180100](v47);
  if (v44) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Foldable map is expected to be empty.");
  }
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>>>>::~__hash_table((uint64_t)&__dst);
  return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v46);
}

void sub_1922647D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>>>>::~__hash_table((uint64_t)va1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_set<std::string>::unordered_set(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 24 * a3;
    do
    {
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a1, a2, a2);
      a2 += 24;
      v5 -= 24;
    }
    while (v5);
  }
  return a1;
}

void sub_1922648E8(_Unwind_Exception *a1)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>>>>::~__hash_table(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      size_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::shared_ptr<MIL::IRValue const>>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      unint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::shared_ptr<MIL::IRValue const>>>,0>(uint64_t a1)
{
  size_t v3 = (void **)(a1 + 24);
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a1 + 23) < 0)
  {
    unint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void *std::__function::__value_func<BOOL ()(MIL::IRFunction &)>::~__value_func[abi:ne180100](void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<BOOL ()(MIL::IRFunction const&)>::~__value_func[abi:ne180100](void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void ___ZN8Espresso25EspressoReporterSingletonINS_27EventReporterImplementationEE11getInstanceEv_block_invoke()
{
}

void sub_192264B5C(_Unwind_Exception *a1)
{
  MEMORY[0x192FF16B0](v1, 0xC400A2AC0F1);
  _Unwind_Resume(a1);
}

void ___ZN8Espresso25EspressoReporterSingletonINS_27EventReporterImplementationEE11getInstanceEv_block_invoke_0()
{
}

void sub_192264BEC(_Unwind_Exception *a1)
{
  MEMORY[0x192FF16B0](v1, 0xC400A2AC0F1);
  _Unwind_Resume(a1);
}

void Espresso::MILTranslator::LayerTranslator::AddSliceByIndexOrSliceByIndexGradOrSliceUpdate(Espresso::MILTranslator::LayerTranslator *this, const MIL::IROperation *a2, int a3, int a4)
{
  *(void *)&long long v166 = *MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:ne180100]<0>(__p, "x");
  Espresso::MILTranslator::LayerTranslator::EnsureInputBlobFromParameter(&__sz, (uint64_t)this, (uint64_t)__p, a2, 0);
  if (SBYTE7(v156) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)__p, __sz.__r_.__value_.__l.__data_, __sz.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)&__sz.__r_.__value_.__l.__data_;
    *(void *)&long long v156 = *((void *)&__sz.__r_.__value_.__l + 2);
  }
  memset(&v152, 0, sizeof(v152));
  v114[0] = &v152;
  LOBYTE(v114[1]) = 0;
  v152.__begin_ = (std::vector<std::string>::pointer)operator new(0x18uLL);
  v152.__end_ = v152.__begin_;
  v152.__end_cap_.__value_ = v152.__begin_ + 1;
  v152.__end_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v152.__end_cap_, (long long *)__p, (long long *)((char *)&v156 + 8), v152.__begin_);
  if (SBYTE7(v156) < 0) {
    operator delete(__p[0]);
  }
  Espresso::MILTranslator::LayerTranslator::GetLayerName(&v151, a2);
  (*(void (**)(uint64_t *__return_ptr, const MIL::IROperation *))(*(void *)a2 + 200))(v150, a2);
  Espresso::MILTranslator::LayerTranslator::EnsureInputBlobs((uint64_t)this, (uint64_t *)&v152, a2);
  std::vector<int>::size_type v149 = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "x");
  ParameterType = (MIL::IRValueType *)MIL::IROperation::GetParameterType();
  uint64_t v9 = MIL::IRValueType::AsTensorType(ParameterType);
  uint64_t v10 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v9 + 96))(v9);
  uint64_t v11 = v10[1] - *v10;
  if (SBYTE7(v156) < 0) {
    operator delete(__p[0]);
  }
  std::vector<int>::size_type v149 = v11 >> 3;
  BOOL v12 = (unint64_t)v11 > 0x28;
  BOOL v148 = (unint64_t)v11 > 0x28;
  memset(&v147, 0, sizeof(v147));
  if (a3)
  {
    if ((__sz.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t size = HIBYTE(__sz.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t size = __sz.__r_.__value_.__l.__size_;
    }
    std::string::basic_string[abi:ne180100]((uint64_t)v114, size + 11);
    if (v115[7] >= 0) {
      uint64_t v14 = v114;
    }
    else {
      uint64_t v14 = (void **)v114[0];
    }
    if (size)
    {
      if ((__sz.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_sz = &__sz;
      }
      else {
        p_sz = (std::string *)__sz.__r_.__value_.__r.__words[0];
      }
      memmove(v14, p_sz, size);
    }
    strcpy((char *)v14 + size, "_zeros_like");
    Espresso::MILTranslator::NameGenerator::NameForPrefix((void *)this + 16, (uint64_t)v114, (uint64_t)__p);
    if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v147.__r_.__value_.__l.__data_);
    }
    *(_OWORD *)&v147.__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    v147.__r_.__value_.__r.__words[2] = v156;
    BYTE7(v156) = 0;
    LOBYTE(__p[0]) = 0;
    if ((v115[7] & 0x80000000) != 0) {
      operator delete(v114[0]);
    }
    if ((v151.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t v16 = HIBYTE(v151.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t v16 = v151.__r_.__value_.__l.__size_;
    }
    std::string::basic_string[abi:ne180100]((uint64_t)__p, v16 + 11);
    if ((SBYTE7(v156) & 0x80u) == 0) {
      char v17 = __p;
    }
    else {
      char v17 = (void **)__p[0];
    }
    if (v16)
    {
      if ((v151.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v18 = &v151;
      }
      else {
        unint64_t v18 = (std::string *)v151.__r_.__value_.__r.__words[0];
      }
      memmove(v17, v18, v16);
    }
    strcpy((char *)v17 + v16, "_zeros_like");
    Espresso::MILTranslator::NameGenerator::NameForPrefix((void *)this + 21, (uint64_t)__p, (uint64_t)v114);
    if (SBYTE7(v156) < 0) {
      operator delete(__p[0]);
    }
    __p[1] = 0;
    __p[0] = 0;
    LODWORD(v156) = 0;
    *(void *)((char *)&v156 + 4) = 0xFFFFFFFF00000001;
    HIDWORD(v156) = 0;
    LOBYTE(v157) = 0;
    uint64_t v19 = *((void *)this + 5);
    std::string::basic_string[abi:ne180100]<0>(&v110, "fill");
    if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v165, __sz.__r_.__value_.__l.__data_, __sz.__r_.__value_.__l.__size_);
    }
    else {
      std::string v165 = __sz;
    }
    memset(&v106, 0, sizeof(v106));
    v142 = &v106;
    LOBYTE(v143) = 0;
    v106.__begin_ = (std::vector<int>::pointer)operator new(0x18uLL);
    v106.__end_ = v106.__begin_;
    v106.__end_cap_.__value_ = v106.__begin_ + 6;
    v106.__end_ = (std::vector<int>::pointer)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v106.__end_cap_, (long long *)&v165, &v166, (std::string *)v106.__begin_);
    if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&__x, v147.__r_.__value_.__l.__data_, v147.__r_.__value_.__l.__size_);
    }
    else {
      std::string __x = v147;
    }
    v143 = 0;
    v142 = 0;
    v144 = 0;
    v139 = &v142;
    char v140 = 0;
    v142 = operator new(0x18uLL);
    v143 = v142;
    v144 = (char *)v142 + 24;
    v143 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v144, (long long *)&__x, (long long *)&v164, (std::string *)v142);
    uint64_t Location = MIL::IRObject::GetLocation(a2);
    Espresso::MILTranslator::TypedEspressoBuilder::AddLayer<Espresso::fill_params_t>(&v145, v19, (uint64_t)&v110, (uint64_t)v114, (uint64_t)__p, (uint64_t)&v106, (uint64_t *)&v142, Location);
    if (v146) {
      nitro::nitro_function::nitro_function(v146);
    }
    v139 = &v142;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v139);
    if (SHIBYTE(__x.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__x.__r_.__value_.__l.__data_);
    }
    v142 = &v106;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v142);
    if (SHIBYTE(v165.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v165.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v110.__end_cap_.__value_) < 0) {
      operator delete(v110.__begin_);
    }
    if ((v115[7] & 0x80000000) != 0) {
      operator delete(v114[0]);
    }
    BOOL v12 = v148;
  }
  if (v12) {
    goto LABEL_220;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "begin");
  if (!MIL::IROperation::TryGetParameterValue())
  {
    BOOL v24 = 0;
    goto LABEL_94;
  }
  std::string::basic_string[abi:ne180100]<0>(v114, "end");
  if (MIL::IROperation::TryGetParameterValue())
  {
    std::string::basic_string[abi:ne180100]<0>(&v110, "stride");
    int IsParameterSet = MIL::IROperation::IsParameterSet();
    if (IsParameterSet)
    {
      std::string::basic_string[abi:ne180100]<0>(&v165, "stride");
      if (!MIL::IROperation::TryGetParameterValue())
      {
        BOOL v24 = 0;
LABEL_88:
        if (SHIBYTE(v165.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v165.__r_.__value_.__l.__data_);
        }
LABEL_90:
        if (SHIBYTE(v110.__end_cap_.__value_) < 0) {
          operator delete(v110.__begin_);
        }
        goto LABEL_92;
      }
    }
    std::string::basic_string[abi:ne180100]<0>(&v106, "begin_mask");
    int v22 = MIL::IROperation::IsParameterSet();
    if (v22)
    {
      std::string::basic_string[abi:ne180100]<0>(&v142, "begin_mask");
      if (!MIL::IROperation::TryGetParameterValue())
      {
        BOOL v24 = 0;
        goto LABEL_83;
      }
    }
    std::string::basic_string[abi:ne180100]<0>(&__x, "end_mask");
    int v23 = MIL::IROperation::IsParameterSet();
    if (v23
      && (std::string::basic_string[abi:ne180100]<0>(&v139, "end_mask"), !MIL::IROperation::TryGetParameterValue()))
    {
      BOOL v24 = 0;
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(v137, "squeeze_mask");
      if (MIL::IROperation::IsParameterSet())
      {
        std::string::basic_string[abi:ne180100]<0>(v135, "squeeze_mask");
        BOOL v24 = MIL::IROperation::TryGetParameterValue() != 0;
        if (v136 < 0) {
          operator delete(v135[0]);
        }
      }
      else
      {
        BOOL v24 = 1;
      }
      if (v138 < 0) {
        operator delete(v137[0]);
      }
      if (!v23)
      {
LABEL_80:
        if (SHIBYTE(__x.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__x.__r_.__value_.__l.__data_);
        }
        if (!v22)
        {
LABEL_85:
          if (SHIBYTE(v106.__end_cap_.__value_) < 0) {
            operator delete(v106.__begin_);
          }
          if (!IsParameterSet) {
            goto LABEL_90;
          }
          goto LABEL_88;
        }
LABEL_83:
        if (SHIBYTE(v144) < 0) {
          operator delete(v142);
        }
        goto LABEL_85;
      }
    }
    if (v141 < 0) {
      operator delete(v139);
    }
    goto LABEL_80;
  }
  BOOL v24 = 0;
LABEL_92:
  if ((v115[7] & 0x80000000) != 0) {
    operator delete(v114[0]);
  }
LABEL_94:
  if ((SBYTE7(v156) & 0x80000000) == 0)
  {
    if (!v24) {
      goto LABEL_220;
    }
LABEL_98:
    std::string::basic_string[abi:ne180100]<0>(__p, "begin");
    Espresso::MILTranslator::LayerTranslator::AddSliceByIndexOrSliceByIndexGradOrSliceUpdate(MIL::IROperation const&,BOOL,BOOL)::$_0::operator()(&v110, (uint64_t)a2, (uint64_t)__p, 0, v149);
    if (SBYTE7(v156) < 0) {
      operator delete(__p[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "end");
    Espresso::MILTranslator::LayerTranslator::AddSliceByIndexOrSliceByIndexGradOrSliceUpdate(MIL::IROperation const&,BOOL,BOOL)::$_0::operator()(&v106, (uint64_t)a2, (uint64_t)__p, 0, v149);
    if (SBYTE7(v156) < 0) {
      operator delete(__p[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "begin_mask");
    Espresso::MILTranslator::CopyOptionalParamWithDefaultValueToVector<BOOL>(&__x, (uint64_t)a2, (uint64_t)__p, v149);
    if (SBYTE7(v156) < 0) {
      operator delete(__p[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "end_mask");
    Espresso::MILTranslator::CopyOptionalParamWithDefaultValueToVector<BOOL>(v137, (uint64_t)a2, (uint64_t)__p, v149);
    if (SBYTE7(v156) < 0) {
      operator delete(__p[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "squeeze_mask");
    Espresso::MILTranslator::CopyOptionalParamWithDefaultValueToVector<BOOL>(v135, (uint64_t)a2, (uint64_t)__p, v149);
    if (SBYTE7(v156) < 0) {
      operator delete(__p[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "stride");
    Espresso::MILTranslator::LayerTranslator::AddSliceByIndexOrSliceByIndexGradOrSliceUpdate(MIL::IROperation const&,BOOL,BOOL)::$_0::operator()(&v134, (uint64_t)a2, (uint64_t)__p, 1, v149);
    if (SBYTE7(v156) < 0) {
      operator delete(__p[0]);
    }
    v131 = 0;
    v132 = 0;
    unint64_t v133 = 0;
    std::string::basic_string[abi:ne180100]<0>(__p, "x");
    v25 = (MIL::IRValueType *)MIL::IROperation::GetParameterType();
    uint64_t v26 = MIL::IRValueType::AsTensorType(v25);
    size_t v27 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v26 + 96))(v26);
    if (SBYTE7(v156) < 0) {
      operator delete(__p[0]);
    }
    uint64_t v28 = *v27;
    uint64_t v29 = v27[1];
    if (*v27 != v29)
    {
      do
      {
        uint64_t v30 = (*(uint64_t (**)(void))(**(void **)v28 + 16))();
        if (v30)
        {
          int v31 = (*(uint64_t (**)(uint64_t))(*(void *)v30 + 48))(v30);
          int v32 = v31;
          uint64_t v33 = v132;
          if ((unint64_t)v132 >= v133)
          {
            uint64_t v37 = (char *)v131;
            uint64_t v38 = (v132 - (unsigned char *)v131) >> 2;
            unint64_t v39 = v38 + 1;
            if ((unint64_t)(v38 + 1) >> 62) {
              std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v40 = v133 - (void)v131;
            if ((uint64_t)(v133 - (void)v131) >> 1 > v39) {
              unint64_t v39 = v40 >> 1;
            }
            if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v41 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v41 = v39;
            }
            if (v41)
            {
              unint64_t v41 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v41);
              uint64_t v37 = (char *)v131;
              uint64_t v33 = v132;
            }
            else
            {
              uint64_t v42 = 0;
            }
            v46 = (char *)(v41 + 4 * v38);
            *(_DWORD *)v46 = v32;
            uint64_t v36 = v46 + 4;
            while (v33 != v37)
            {
              int v47 = *((_DWORD *)v33 - 1);
              v33 -= 4;
              *((_DWORD *)v46 - 1) = v47;
              v46 -= 4;
            }
LABEL_143:
            v131 = v46;
            v132 = v36;
            unint64_t v133 = v41 + 4 * v42;
            if (v37) {
              operator delete(v37);
            }
            goto LABEL_145;
          }
          *(_DWORD *)v132 = v31;
          unint64_t v34 = v33 + 4;
        }
        else
        {
          size_t v35 = v132;
          if ((unint64_t)v132 >= v133)
          {
            uint64_t v37 = (char *)v131;
            uint64_t v43 = (v132 - (unsigned char *)v131) >> 2;
            unint64_t v44 = v43 + 1;
            if ((unint64_t)(v43 + 1) >> 62) {
              std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v45 = v133 - (void)v131;
            if ((uint64_t)(v133 - (void)v131) >> 1 > v44) {
              unint64_t v44 = v45 >> 1;
            }
            if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v41 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v41 = v44;
            }
            if (v41)
            {
              unint64_t v41 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v41);
              uint64_t v37 = (char *)v131;
              size_t v35 = v132;
            }
            else
            {
              uint64_t v42 = 0;
            }
            v46 = (char *)(v41 + 4 * v43);
            *(_DWORD *)v46 = -1;
            uint64_t v36 = v46 + 4;
            while (v35 != v37)
            {
              int v48 = *((_DWORD *)v35 - 1);
              v35 -= 4;
              *((_DWORD *)v46 - 1) = v48;
              v46 -= 4;
            }
            goto LABEL_143;
          }
          *(_DWORD *)v132 = -1;
          unint64_t v34 = v35 + 4;
        }
        uint64_t v36 = v34;
LABEL_145:
        v132 = v36;
        v28 += 8;
      }
      while (v28 != v29);
    }
    std::vector<int>::size_type v49 = v149;
    if (v149)
    {
      uint64_t v50 = 0;
      size_t v51 = v131;
      std::vector<int>::pointer begin = v110.__begin_;
      std::vector<int>::pointer v53 = v106.__begin_;
      do
      {
        int v54 = v51[v50];
        if (v54 != -1)
        {
          int v55 = begin[v50];
          if (v55 < 0) {
            begin[v50] = v55 + v54;
          }
          int v56 = v53[v50];
          if (v56 < 0) {
            v53[v50] = v51[v50] + v56;
          }
        }
        ++v50;
      }
      while (v49 != v50);
      v57 = 0;
      std::vector<int>::size_type v58 = 0;
      v128 = 0;
      v129 = 0;
      unint64_t v130 = 0;
      do
      {
        if ((*(void *)(__x.__r_.__value_.__r.__words[0] + 8 * (v58 >> 6)) & (1 << v58)) == 0 && v110.__begin_[v58]
          || (*((void *)v137[0] + (v58 >> 6)) & (1 << v58)) == 0
          && ((int v59 = *((_DWORD *)v131 + v58), v106.__begin_[v58] == v59) ? (v60 = v59 == -1) : (v60 = 1), v60)
          || v134.__begin_[v58] != 1 && v110.__begin_[v58] != v106.__begin_[v58])
        {
          if ((unint64_t)v57 >= v130)
          {
            v62 = (char *)v128;
            uint64_t v63 = (v57 - (unsigned char *)v128) >> 2;
            unint64_t v64 = v63 + 1;
            if ((unint64_t)(v63 + 1) >> 62) {
              std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v65 = v130 - (void)v128;
            if ((uint64_t)(v130 - (void)v128) >> 1 > v64) {
              unint64_t v64 = v65 >> 1;
            }
            if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v66 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v66 = v64;
            }
            if (v66)
            {
              unint64_t v66 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v66);
              v62 = (char *)v128;
              v57 = v129;
            }
            else
            {
              uint64_t v67 = 0;
            }
            v68 = (char *)(v66 + 4 * v63);
            *(_DWORD *)v68 = v58;
            v61 = v68 + 4;
            while (v57 != v62)
            {
              int v69 = *((_DWORD *)v57 - 1);
              v57 -= 4;
              *((_DWORD *)v68 - 1) = v69;
              v68 -= 4;
            }
            v128 = v68;
            v129 = v61;
            unint64_t v130 = v66 + 4 * v67;
            if (v62) {
              operator delete(v62);
            }
          }
          else
          {
            *(_DWORD *)v57 = v58;
            v61 = v57 + 4;
          }
          v129 = v61;
          std::vector<int>::size_type v49 = v149;
          v57 = v61;
        }
        ++v58;
      }
      while (v49 > v58);
      v70 = (char *)v128;
    }
    else
    {
      v70 = 0;
      v57 = 0;
      v128 = 0;
      v129 = 0;
      unint64_t v130 = 0;
    }
    int64_t v71 = v57 - v70;
    BOOL v72 = v71 != 4;
    if (v71 != 4)
    {
LABEL_186:
      char v73 = v72;
      if (!v70)
      {
LABEL_205:
        if (v131)
        {
          v132 = (char *)v131;
          operator delete(v131);
        }
        if (v134.__begin_)
        {
          v134.__end_ = v134.__begin_;
          operator delete(v134.__begin_);
        }
        if (v135[0]) {
          operator delete(v135[0]);
        }
        if (v137[0]) {
          operator delete(v137[0]);
        }
        if (__x.__r_.__value_.__r.__words[0]) {
          operator delete(__x.__r_.__value_.__l.__data_);
        }
        if (v106.__begin_)
        {
          v106.__end_ = v106.__begin_;
          operator delete(v106.__begin_);
        }
        if (v110.__begin_)
        {
          v110.__end_ = v110.__begin_;
          operator delete(v110.__begin_);
        }
        if (!v72) {
          goto LABEL_255;
        }
        goto LABEL_220;
      }
LABEL_204:
      v129 = v70;
      operator delete(v70);
      BOOL v72 = v73;
      goto LABEL_205;
    }
    unint64_t v74 = *(int *)v70;
    unint64_t v75 = v74 >> 6;
    char v73 = 1;
    uint64_t v76 = 1 << v74;
    if (((1 << v74) & *((void *)v135[0] + (v74 >> 6))) != 0) {
      goto LABEL_204;
    }
    unsigned int v77 = v74 - v49;
    *(_OWORD *)&v127[4] = xmmword_192DBFE30;
    *(_DWORD *)&v127[20] = 1;
    if (v77 < 0xFFFFFFFD)
    {
LABEL_203:
      char v73 = 1;
      goto LABEL_204;
    }
    *(_DWORD *)v127 = ~v77;
    if ((*(void *)(__x.__r_.__value_.__r.__words[0] + 8 * v75) & v76) != 0) {
      int v78 = 0;
    }
    else {
      int v78 = v110.__begin_[v74];
    }
    if ((*((void *)v137[0] + v75) & v76) != 0)
    {
      int v79 = *((_DWORD *)v131 + v74);
      if (v79 == -1) {
        goto LABEL_203;
      }
    }
    else
    {
      int v79 = v106.__begin_[v74];
    }
    if (!v79 || v78 < 0 || v134.__begin_[v74] < 1) {
      goto LABEL_203;
    }
    *(_DWORD *)&v127[4] = v78;
    *(_DWORD *)&v127[8] = v79;
    *(_DWORD *)&v127[12] = v134.__begin_[v74];
    if (a3)
    {
      *(_OWORD *)v114 = *(_OWORD *)v127;
      *(void *)v115 = *(void *)&v127[16];
      *(_DWORD *)&v115[8] = 1;
      uint64_t v80 = *((void *)this + 5);
      std::string::basic_string[abi:ne180100]<0>(v123, "slice_update");
      if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)__p, v147.__r_.__value_.__l.__data_, v147.__r_.__value_.__l.__size_);
      }
      else
      {
        *(_OWORD *)std::string __p = *(_OWORD *)&v147.__r_.__value_.__l.__data_;
        *(void *)&long long v156 = *((void *)&v147.__r_.__value_.__l + 2);
      }
      std::string::basic_string[abi:ne180100]<0>(v120, "dy");
      Espresso::MILTranslator::LayerTranslator::EnsureInputBlobFromParameter((std::string *)((char *)&v156 + 8), (uint64_t)this, (uint64_t)v120, a2, 0);
      std::vector<std::string>::vector[abi:ne180100]((uint64_t)v122, (long long *)__p, 2uLL);
      uint64_t v98 = MIL::IRObject::GetLocation(a2);
      Espresso::MILTranslator::TypedEspressoBuilder::AddLayer<Espresso::slice_update_params_t>(&v125, v80, (uint64_t)v123, (uint64_t)&v151, (uint64_t)v114, (uint64_t)v122, v150, v98);
      if (v126) {
        nitro::nitro_function::nitro_function(v126);
      }
      v154 = (void **)v122;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v154);
      for (uint64_t i = 0; i != -48; i -= 24)
      {
        if (*((char *)&v157 + i + 15) < 0) {
          operator delete(*(void **)((char *)&v156 + i + 8));
        }
      }
      if (v121 < 0) {
        operator delete(v120[0]);
      }
      if ((v124 & 0x80000000) == 0) {
        goto LABEL_289;
      }
      std::string v95 = v123[0];
    }
    else if (a4)
    {
      *(_OWORD *)std::string __p = *(_OWORD *)v127;
      *(void *)&long long v156 = *(void *)&v127[16];
      DWORD2(v156) = 0;
      std::string::basic_string[abi:ne180100]<0>(v123, "update");
      Espresso::MILTranslator::LayerTranslator::EnsureInputBlobFromParameter((std::string *)v114, (uint64_t)this, (uint64_t)v123, a2, 0);
      std::vector<std::string>::push_back[abi:ne180100](&v152, (long long *)v114);
      if ((v115[7] & 0x80000000) != 0) {
        operator delete(v114[0]);
      }
      if (v124 < 0) {
        operator delete(v123[0]);
      }
      uint64_t v93 = *((void *)this + 5);
      std::string::basic_string[abi:ne180100]<0>(v114, "slice_update");
      uint64_t v94 = MIL::IRObject::GetLocation(a2);
      Espresso::MILTranslator::TypedEspressoBuilder::AddLayer<Espresso::slice_update_params_t>(&v118, v93, (uint64_t)v114, (uint64_t)&v151, (uint64_t)__p, (uint64_t)&v152, v150, v94);
      if (v119) {
        nitro::nitro_function::nitro_function(v119);
      }
      if ((v115[7] & 0x80000000) == 0) {
        goto LABEL_289;
      }
      std::string v95 = v114[0];
    }
    else
    {
      uint64_t v96 = *((void *)this + 5);
      std::string::basic_string[abi:ne180100]<0>(__p, "slice");
      Espresso::MILTranslator::LayerTranslator::GetLayerName((std::string *)v114, a2);
      uint64_t v97 = MIL::IRObject::GetLocation(a2);
      Espresso::MILTranslator::TypedEspressoBuilder::AddLayer<Espresso::slice_params_t>(&v116, v96, (uint64_t)__p, (uint64_t)v114, (uint64_t)v127, (uint64_t)&v152, v150, v97);
      if (v117) {
        nitro::nitro_function::nitro_function(v117);
      }
      if ((v115[7] & 0x80000000) != 0) {
        operator delete(v114[0]);
      }
      if ((SBYTE7(v156) & 0x80000000) == 0) {
        goto LABEL_289;
      }
      std::string v95 = __p[0];
    }
    operator delete(v95);
LABEL_289:
    v70 = (char *)v128;
    goto LABEL_186;
  }
  operator delete(__p[0]);
  if (v24) {
    goto LABEL_98;
  }
LABEL_220:
  v114[0] = 0;
  v114[1] = 0;
  *(_DWORD *)v115 = 0;
  *(_DWORD *)&v115[20] = 1;
  *(_OWORD *)&v115[4] = xmmword_192E06E0C;
  *(_DWORD *)&v115[40] = 1;
  *(_OWORD *)&v115[24] = xmmword_192E06E0C;
  memset(&v115[44], 0, 32);
  *(void *)&v115[76] = 0xFFFFFFFF00000000;
  v110.__begin_ = (std::vector<int>::pointer)&v148;
  v110.__end_ = (std::vector<int>::pointer)&v151;
  v110.__end_cap_.__value_ = (int *)a2;
  v111 = &v152;
  v112 = &v149;
  v113 = this;
  std::string::basic_string[abi:ne180100]<0>(__p, "squeeze_mask");
  Espresso::MILTranslator::LayerTranslator::AddSliceByIndexOrSliceByIndexGradOrSliceUpdate(MIL::IROperation const&,BOOL,BOOL)::$_1::operator()((uint64_t)&v110, (uint64_t)__p, &v115[54]);
  if (SBYTE7(v156) < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "end_mask");
  Espresso::MILTranslator::LayerTranslator::AddSliceByIndexOrSliceByIndexGradOrSliceUpdate(MIL::IROperation const&,BOOL,BOOL)::$_1::operator()((uint64_t)&v110, (uint64_t)__p, &v115[49]);
  if (SBYTE7(v156) < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "begin_mask");
  Espresso::MILTranslator::LayerTranslator::AddSliceByIndexOrSliceByIndexGradOrSliceUpdate(MIL::IROperation const&,BOOL,BOOL)::$_1::operator()((uint64_t)&v110, (uint64_t)__p, &v115[44]);
  if (SBYTE7(v156) < 0) {
    operator delete(__p[0]);
  }
  v106.__begin_ = (std::vector<int>::pointer)&v148;
  v106.__end_ = (std::vector<int>::pointer)&v151;
  v106.__end_cap_.__value_ = (int *)a2;
  v107 = &v152;
  v108 = &v149;
  v109 = this;
  std::string::basic_string[abi:ne180100]<0>(__p, "stride");
  Espresso::MILTranslator::LayerTranslator::AddSliceByIndexOrSliceByIndexGradOrSliceUpdate(MIL::IROperation const&,BOOL,BOOL)::$_2::operator()((uint64_t)&v106, (uint64_t)__p, (std::vector<int>::value_type *)&v115[24]);
  if (SBYTE7(v156) < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "end");
  Espresso::MILTranslator::LayerTranslator::AddSliceByIndexOrSliceByIndexGradOrSliceUpdate(MIL::IROperation const&,BOOL,BOOL)::$_2::operator()((uint64_t)&v106, (uint64_t)__p, (std::vector<int>::value_type *)&v115[4]);
  if (SBYTE7(v156) < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "begin");
  Espresso::MILTranslator::LayerTranslator::AddSliceByIndexOrSliceByIndexGradOrSliceUpdate(MIL::IROperation const&,BOOL,BOOL)::$_2::operator()((uint64_t)&v106, (uint64_t)__p, (std::vector<int>::value_type *)v114);
  if (SBYTE7(v156) < 0) {
    operator delete(__p[0]);
  }
  if (v149 - 1 <= 4) {
    *(_DWORD *)&v115[80] = v149;
  }
  if (a3)
  {
    long long v159 = *(_OWORD *)&v115[48];
    long long v160 = *(_OWORD *)&v115[64];
    *(_OWORD *)std::string __p = *(_OWORD *)v114;
    long long v156 = *(_OWORD *)v115;
    long long v157 = *(_OWORD *)&v115[16];
    long long v158 = *(_OWORD *)&v115[32];
    int v161 = *(_DWORD *)&v115[80];
    int v162 = 1;
    std::string::operator=(v152.__begin_, &v147);
    std::vector<std::string>::pointer v81 = v152.__begin_;
    std::string::basic_string[abi:ne180100]<0>(v137, "dy");
    Espresso::MILTranslator::LayerTranslator::EnsureInputBlobFromParameter(&__x, (uint64_t)this, (uint64_t)v137, a2, 0);
    v82.__i_ = v81 + 1;
    std::vector<std::string>::insert(&v152, v82, &__x);
    if (SHIBYTE(__x.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__x.__r_.__value_.__l.__data_);
    }
    if (v138 < 0) {
      operator delete(v137[0]);
    }
    uint64_t v83 = *((void *)this + 5);
    std::string::basic_string[abi:ne180100]<0>(&__x, "general_slice_update");
    uint64_t v84 = MIL::IRObject::GetLocation(a2);
    Espresso::MILTranslator::TypedEspressoBuilder::AddLayer<Espresso::general_slice_update_params_t>(&v104, v83, (uint64_t)&__x, (uint64_t)&v151, (uint64_t)__p, (uint64_t)&v152, v150, v84);
    v85 = v105;
    if (!v105) {
      goto LABEL_241;
    }
    goto LABEL_240;
  }
  if (a4)
  {
    long long v159 = *(_OWORD *)&v115[48];
    long long v160 = *(_OWORD *)&v115[64];
    *(_OWORD *)std::string __p = *(_OWORD *)v114;
    long long v156 = *(_OWORD *)v115;
    long long v157 = *(_OWORD *)&v115[16];
    long long v158 = *(_OWORD *)&v115[32];
    int v161 = *(_DWORD *)&v115[80];
    int v162 = 0;
    std::vector<std::string>::pointer v87 = v152.__begin_;
    std::string::basic_string[abi:ne180100]<0>(v137, "update");
    Espresso::MILTranslator::LayerTranslator::EnsureInputBlobFromParameter(&__x, (uint64_t)this, (uint64_t)v137, a2, 0);
    v88.__i_ = v87 + 1;
    std::vector<std::string>::insert(&v152, v88, &__x);
    if (SHIBYTE(__x.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__x.__r_.__value_.__l.__data_);
    }
    if (v138 < 0) {
      operator delete(v137[0]);
    }
    uint64_t v89 = *((void *)this + 5);
    std::string::basic_string[abi:ne180100]<0>(&__x, "general_slice_update");
    uint64_t v90 = MIL::IRObject::GetLocation(a2);
    Espresso::MILTranslator::TypedEspressoBuilder::AddLayer<Espresso::general_slice_update_params_t>(&v102, v89, (uint64_t)&__x, (uint64_t)&v151, (uint64_t)__p, (uint64_t)&v152, v150, v90);
    v85 = v103;
    if (!v103) {
      goto LABEL_241;
    }
LABEL_240:
    nitro::nitro_function::nitro_function(v85);
LABEL_241:
    if ((SHIBYTE(__x.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_255;
    }
    v86 = (void *)__x.__r_.__value_.__r.__words[0];
    goto LABEL_254;
  }
  uint64_t v91 = *((void *)this + 5);
  std::string::basic_string[abi:ne180100]<0>(__p, "general_slice");
  uint64_t v92 = MIL::IRObject::GetLocation(a2);
  Espresso::MILTranslator::TypedEspressoBuilder::AddLayer<Espresso::general_slice_params_t>(&v100, v91, (uint64_t)__p, (uint64_t)&v151, (uint64_t)v114, (uint64_t)&v152, v150, v92);
  if (v101) {
    nitro::nitro_function::nitro_function(v101);
  }
  if (SBYTE7(v156) < 0)
  {
    v86 = __p[0];
LABEL_254:
    operator delete(v86);
  }
LABEL_255:
  if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v147.__r_.__value_.__l.__data_);
  }
  __p[0] = v150;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v151.__r_.__value_.__l.__data_);
  }
  __p[0] = &v152;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__sz.__r_.__value_.__l.__data_);
  }
}

void sub_192266088(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *__p,uint64_t a53,int a54,__int16 a55,char a56,char a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  if (a57 < 0) {
    operator delete(__p);
  }
  if (a63) {
    operator delete(a63);
  }
  if (a66) {
    operator delete(a66);
  }
  if (a69) {
    operator delete(a69);
  }
  if (a72) {
    operator delete(a72);
  }
  if (a73) {
    operator delete(a73);
  }
  unint64_t v75 = *(void **)(v73 - 160);
  if (v75) {
    operator delete(v75);
  }
  if (a17) {
    operator delete(a17);
  }
  if (a23) {
    operator delete(a23);
  }
  if (SLOBYTE(STACK[0x267]) < 0) {
    operator delete((void *)STACK[0x250]);
  }
  STACK[0x2E0] = (unint64_t)&STACK[0x278];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x2E0]);
  if (SLOBYTE(STACK[0x2A7]) < 0) {
    operator delete((void *)STACK[0x290]);
  }
  STACK[0x2E0] = (unint64_t)&STACK[0x2A8];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x2E0]);
  if (SLOBYTE(STACK[0x2D7]) < 0) {
    operator delete((void *)STACK[0x2C0]);
  }
  _Unwind_Resume(a1);
}

double Espresso::MILTranslator::LayerTranslator::AddSliceByIndexOrSliceByIndexGradOrSliceUpdate(MIL::IROperation const&,BOOL,BOOL)::$_0::operator()(std::vector<int> *a1, uint64_t a2, uint64_t a3, std::vector<int>::value_type a4, std::vector<int>::size_type a5)
{
  std::vector<int>::value_type __x = a4;
  uint64_t ParameterValue = MIL::IROperation::TryGetParameterValue();
  if (ParameterValue)
  {
    uint64_t v8 = (MIL::IRValue *)ParameterValue;
    uint64_t v9 = (MIL::IRValueType *)(*(uint64_t (**)(uint64_t))(*(void *)ParameterValue + 32))(ParameterValue);
    uint64_t v10 = MIL::IRValueType::AsTensorType(v9);
    int v11 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 88))(v10);
    a1->__end_ = 0;
    a1->__end_cap_.__value_ = 0;
    a1->__begin_ = 0;
    switch(v11)
    {
      case 9:
        CopyFromTensorToVector<int,signed char>((uint64_t)&v15, v8);
        break;
      case 10:
        CopyFromTensorToVector<int,short>((uint64_t)&v15, v8);
        break;
      case 11:
        MIL::IRValueUtils::CopyTensorToVector<int>(&v15, v8);
        break;
      default:
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Unexpected data types.");
        __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    uint64_t v13 = v16;
    double result = *(double *)&v15;
    *(_OWORD *)&a1->__begin_ = v15;
    a1->__end_cap_.__value_ = v13;
  }
  else
  {
    std::vector<int>::vector(a1, a5, &__x);
  }
  return result;
}

void sub_192266764(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *MIL::IRValueUtils::CopyTensorToVector<int>(void *a1, MIL::IRValue *this)
{
  MIL::IRValue::AsTensor(this);
  Data = (const void *)MIL::IRTensorValue::GetDataView<int>();
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;

  return std::vector<int>::__init_with_size[abi:ne180100]<int const*,int const*>(a1, Data, (uint64_t)Data + 4 * v3, (4 * v3) >> 2);
}

void *Espresso::MILTranslator::CopyOptionalParamWithDefaultValueToVector<BOOL>(void *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unsigned __int8 v10 = 0;
  uint64_t ParameterValue = (MIL::IRValue *)MIL::IROperation::TryGetParameterValue();
  if (!ParameterValue) {
    return std::vector<BOOL>::vector(a1, a4, &v10);
  }
  MIL::IRValue::AsTensor(ParameterValue);
  Data = (unsigned char *)MIL::IRTensorValue::GetDataView<BOOL>();
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  double result = std::vector<BOOL>::__init_with_size[abi:ne180100]<BOOL const*,BOOL const*>(a1, Data, &Data[v8], v8);
  if (a1[1] != a4) {
    Espresso::throw_exception_selector<Espresso::network_translation_error>("Trying to copy values to a vector with a different size.");
  }
  return result;
}

void sub_192266868(_Unwind_Exception *exception_object)
{
  if (*v1) {
    operator delete(*v1);
  }
  _Unwind_Resume(exception_object);
}

double Espresso::general_slice_on_resize(int a1, unsigned char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  memset(v20, 0, 24);
  unint64_t v15 = a1;
  std::vector<int>::__init_with_size[abi:ne180100]<int const*,int const*>(v20, a2, (uint64_t)&a2[4 * a1], a1);
  size_t v16 = *(void **)a3;
  if (*(void *)a3)
  {
    *(void *)(a3 + 8) = v16;
    operator delete(v16);
  }
  *(_OWORD *)a3 = v20[0];
  *(void *)(a3 + 16) = *(void *)&v20[1];
  memset(v20, 0, 24);
  std::vector<int>::__init_with_size[abi:ne180100]<int const*,int const*>(v20, a2 + 20, (uint64_t)&a2[4 * v15 + 20], v15);
  char v17 = *(void **)a4;
  if (*(void *)a4)
  {
    *(void *)(a4 + 8) = v17;
    operator delete(v17);
  }
  *(_OWORD *)a4 = v20[0];
  *(void *)(a4 + 16) = *(void *)&v20[1];
  memset(v20, 0, 24);
  std::vector<int>::__init_with_size[abi:ne180100]<int const*,int const*>(v20, a2 + 40, (uint64_t)&a2[4 * v15 + 40], v15);
  unint64_t v18 = *(void **)a5;
  if (*(void *)a5)
  {
    *(void *)(a5 + 8) = v18;
    operator delete(v18);
  }
  *(_OWORD *)a5 = v20[0];
  *(void *)(a5 + 16) = *(void *)&v20[1];
  memset(v20, 0, 24);
  std::vector<BOOL>::__init_with_size[abi:ne180100]<BOOL const*,BOOL const*>(v20, a2 + 60, &a2[v15 + 60], v15);
  if (*(void *)a6) {
    operator delete(*(void **)a6);
  }
  *(void *)a6 = *(void *)&v20[0];
  *(_OWORD *)(a6 + 8) = *(_OWORD *)((char *)v20 + 8);
  memset(v20, 0, 24);
  std::vector<BOOL>::__init_with_size[abi:ne180100]<BOOL const*,BOOL const*>(v20, a2 + 65, &a2[v15 + 65], v15);
  if (*(void *)a7) {
    operator delete(*(void **)a7);
  }
  *(void *)a7 = *(void *)&v20[0];
  *(_OWORD *)(a7 + 8) = *(_OWORD *)((char *)v20 + 8);
  memset(v20, 0, 24);
  std::vector<BOOL>::__init_with_size[abi:ne180100]<BOOL const*,BOOL const*>(v20, a2 + 70, &a2[v15 + 70], v15);
  if (*(void *)a8) {
    operator delete(*(void **)a8);
  }
  *(void *)a8 = *(void *)&v20[0];
  double result = *((double *)v20 + 1);
  *(_OWORD *)(a8 + 8) = *(_OWORD *)((char *)v20 + 8);
  return result;
}

void *std::vector<int>::__init_with_size[abi:ne180100]<int const*,int const*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    double result = std::vector<unsigned int>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      double result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_192266A94(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<BOOL>::__construct_at_end<BOOL const*,BOOL const*>(void *result, unsigned char *a2, unsigned char *a3, uint64_t a4)
{
  unint64_t v4 = result[1];
  unint64_t v5 = v4 + a4;
  result[1] = v4 + a4;
  if (v4)
  {
    unint64_t v6 = v5 - 1;
    if (((v5 - 1) ^ (v4 - 1)) < 0x40) {
      goto LABEL_9;
    }
  }
  else
  {
    unint64_t v6 = v5 - 1;
  }
  unint64_t v7 = v6 >> 6;
  if (v5 >= 0x41) {
    unint64_t v8 = v7;
  }
  else {
    unint64_t v8 = 0;
  }
  *(void *)(*result + 8 * v8) = 0;
LABEL_9:
  if (a2 != a3)
  {
    int v9 = v4 & 0x3F;
    unsigned __int8 v10 = (uint64_t *)(*result + 8 * (v4 >> 6));
    do
    {
      uint64_t v11 = 1 << v9;
      if (*a2) {
        uint64_t v12 = *v10 | v11;
      }
      else {
        uint64_t v12 = *v10 & ~v11;
      }
      uint64_t *v10 = v12;
      ++a2;
      v10 += v9 == 63;
      if (v9 == 63) {
        int v9 = 0;
      }
      else {
        ++v9;
      }
    }
    while (a2 != a3);
  }
  return result;
}

void *std::vector<BOOL>::__init_with_size[abi:ne180100]<BOOL const*,BOOL const*>(void *result, unsigned char *a2, unsigned char *a3, uint64_t a4)
{
  if (a4)
  {
    unint64_t v7 = result;
    std::vector<BOOL>::__vallocate[abi:ne180100](result, a4);
    return std::vector<BOOL>::__construct_at_end<BOOL const*,BOOL const*>(v7, a2, a3, a4);
  }
  return result;
}

void sub_192266BC0(_Unwind_Exception *exception_object)
{
  if (*v1) {
    operator delete(*v1);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::MILTranslator::LayerTranslator::AddSliceByIndexOrSliceByIndexGradOrSliceUpdate(MIL::IROperation const&,BOOL,BOOL)::$_2::operator()(uint64_t a1, uint64_t a2, std::vector<int>::value_type *a3)
{
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t ParameterValue = (MIL::IRValue *)MIL::IROperation::TryGetParameterValue();
  int IsParameterSet = MIL::IROperation::IsParameterSet();
  int v9 = *(unsigned char **)a1;
  if (**(unsigned char **)a1)
  {
    unsigned char *v9 = 1;
  }
  else
  {
    if (ParameterValue) {
      char v10 = 0;
    }
    else {
      char v10 = IsParameterSet;
    }
    unsigned char *v9 = v10;
    if ((v10 & 1) == 0)
    {
      if (!IsParameterSet) {
        return;
      }
      size_t v27 = (MIL::IRValueType *)(*(uint64_t (**)(MIL::IRValue *))(*(void *)ParameterValue + 32))(ParameterValue);
      uint64_t v28 = MIL::IRValueType::AsTensorType(v27);
      int v29 = (*(uint64_t (**)(uint64_t))(*(void *)v28 + 88))(v28);
      if (v29 == 9)
      {
        CopyFromTensorToVector<int,signed char>((uint64_t)&__x, ParameterValue);
      }
      else if (v29 == 10)
      {
        CopyFromTensorToVector<int,short>((uint64_t)&__x, ParameterValue);
      }
      else
      {
        MIL::IRValueUtils::CopyTensorToVector<int>(&__x, ParameterValue);
      }
      std::vector<int>::pointer begin = (std::vector<int>::pointer)__x.__r_.__value_.__r.__words[0];
      if (__x.__r_.__value_.__l.__size_ == __x.__r_.__value_.__r.__words[0])
      {
        if (!__x.__r_.__value_.__r.__words[0]) {
          return;
        }
      }
      else
      {
        unint64_t v34 = (uint64_t)(__x.__r_.__value_.__l.__size_ - __x.__r_.__value_.__r.__words[0]) >> 2;
        if (v34 <= 1) {
          unint64_t v34 = 1;
        }
        size_t v35 = (std::vector<int>::value_type *)__x.__r_.__value_.__r.__words[0];
        do
        {
          std::vector<int>::value_type v36 = *v35++;
          *a3++ = v36;
          --v34;
        }
        while (v34);
      }
      goto LABEL_42;
    }
  }
  if (IsParameterSet)
  {
    uint64_t v11 = *(MIL::IRObject **)(a1 + 16);
    uint64_t v12 = *(std::vector<std::string> **)(a1 + 24);
    uint64_t v13 = v12->__begin_ + 1;
    Espresso::MILTranslator::LayerTranslator::EnsureInputBlobFromParameter(&__x, v6, a2, v11, 0);
    v14.__i_ = v13;
    std::vector<std::string>::insert(v12, v14, &__x);
    if ((SHIBYTE(__x.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
    std::vector<int>::pointer begin = (std::vector<int>::pointer)__x.__r_.__value_.__r.__words[0];
    goto LABEL_42;
  }
  std::vector<int>::vector(&v47, **(void **)(a1 + 32), a3);
  uint64_t v16 = **(void **)(a1 + 32);
  char v17 = operator new(8uLL);
  __x.__r_.__value_.__r.__words[0] = (std::string::size_type)v17;
  *char v17 = v16;
  __x.__r_.__value_.__l.__size_ = (std::string::size_type)(v17 + 1);
  __x.__r_.__value_.__r.__words[2] = (std::string::size_type)(v17 + 1);
  MIL::IRTensorValueType::Make();
  if (__x.__r_.__value_.__r.__words[0])
  {
    __x.__r_.__value_.__l.__size_ = __x.__r_.__value_.__r.__words[0];
    operator delete(__x.__r_.__value_.__l.__data_);
  }
  MIL::IRTensorValueType::MakeInt32Value();
  Espresso::MILTranslator::LayerTranslator::GetLayerName(&v39, *(const MIL::IROperation **)(a1 + 16));
  unint64_t v18 = std::string::append(&v39, "_");
  long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v40.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  int v20 = *(char *)(a2 + 23);
  if (v20 >= 0) {
    uint64_t v21 = (const std::string::value_type *)a2;
  }
  else {
    uint64_t v21 = *(const std::string::value_type **)a2;
  }
  if (v20 >= 0) {
    std::string::size_type v22 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v22 = *(void *)(a2 + 8);
  }
  int v23 = std::string::append(&v40, v21, v22);
  long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  v41.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  v25 = std::string::append(&v41, "_blob");
  long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  std::string::size_type v43 = v25->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v26;
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  Espresso::MILTranslator::LayerTranslator::GetUniqueLayerAndBlobNames((uint64_t)&__x, v6, (uint64_t)__p);
  if (SHIBYTE(v43) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v41.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v40.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v39.__r_.__value_.__l.__data_);
  }
  uint64_t v37 = v46;
  if (v46) {
    operator new();
  }
  uint64_t v38 = 0;
  uint64_t v46 = 0;
  uint64_t Location = MIL::IRObject::GetLocation(*(MIL::IRObject **)(a1 + 16));
  Espresso::MILTranslator::LayerTranslator::LoadConstant(v6, (uint64_t)&__x, (uint64_t)&v45, (uint64_t)&v37, Location);
  if (v38) {
    nitro::nitro_function::nitro_function(v38);
  }
  int v31 = *(std::vector<std::string> **)(a1 + 24);
  v32.__i_ = v31->__begin_ + 1;
  std::vector<std::string>::insert(v31, v32, &v45);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v45.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__x.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__x.__r_.__value_.__l.__data_);
  }
  uint64_t v33 = v46;
  uint64_t v46 = 0;
  if (v33) {
    (*(void (**)(uint64_t))(*(void *)v33 + 8))(v33);
  }
  std::vector<int>::pointer begin = v47.__begin_;
  if (v47.__begin_)
  {
    v47.__end_ = v47.__begin_;
LABEL_42:
    operator delete(begin);
  }
}

void sub_192266FB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  std::pair<std::string const,std::string>::~pair(v37 - 128);
  uint64_t v39 = *(void *)(v37 - 80);
  *(void *)(v37 - 80) = 0;
  if (v39) {
    (*(void (**)(uint64_t))(*(void *)v39 + 8))(v39);
  }
  std::string v40 = *(void **)(v37 - 72);
  if (v40)
  {
    *(void *)(v37 - 64) = v40;
    operator delete(v40);
  }
  _Unwind_Resume(a1);
}

void Espresso::MILTranslator::LayerTranslator::AddSliceByIndexOrSliceByIndexGradOrSliceUpdate(MIL::IROperation const&,BOOL,BOOL)::$_1::operator()(uint64_t a1, uint64_t a2, std::string::value_type *a3)
{
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t ParameterValue = (MIL::IRValue *)MIL::IROperation::TryGetParameterValue();
  int IsParameterSet = MIL::IROperation::IsParameterSet();
  int v9 = *(unsigned char **)a1;
  if (**(unsigned char **)a1)
  {
    unsigned char *v9 = 1;
  }
  else
  {
    if (ParameterValue) {
      char v10 = 0;
    }
    else {
      char v10 = IsParameterSet;
    }
    unsigned char *v9 = v10;
    if ((v10 & 1) == 0)
    {
      if (IsParameterSet)
      {
        MIL::IRValue::AsTensor(ParameterValue);
        for (uint64_t i = (std::string::value_type *)MIL::IRTensorValue::GetDataView<BOOL>(); v29; --v29)
        {
          std::string::value_type v30 = *i++;
          *a3++ = v30;
        }
      }
      return;
    }
  }
  if (IsParameterSet)
  {
    uint64_t v11 = *(MIL::IRObject **)(a1 + 16);
    uint64_t v12 = *(std::vector<std::string> **)(a1 + 24);
    uint64_t v13 = v12->__begin_ + 1;
    Espresso::MILTranslator::LayerTranslator::EnsureInputBlobFromParameter(&__x, v6, a2, v11, 0);
    v14.__i_ = v13;
    std::vector<std::string>::insert(v12, v14, &__x);
    if ((SHIBYTE(__x.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
    unint64_t v15 = (void *)__x.__r_.__value_.__r.__words[0];
    goto LABEL_42;
  }
  size_t v16 = **(void **)(a1 + 32);
  __x.__r_.__value_.__s.__data_[0] = *a3;
  std::vector<unsigned char>::vector(v45, v16, &__x);
  uint64_t v17 = **(void **)(a1 + 32);
  unint64_t v18 = operator new(8uLL);
  __x.__r_.__value_.__r.__words[0] = (std::string::size_type)v18;
  *unint64_t v18 = v17;
  __x.__r_.__value_.__l.__size_ = (std::string::size_type)(v18 + 1);
  __x.__r_.__value_.__r.__words[2] = (std::string::size_type)(v18 + 1);
  MIL::IRTensorValueType::Make();
  if (__x.__r_.__value_.__r.__words[0])
  {
    __x.__r_.__value_.__l.__size_ = __x.__r_.__value_.__r.__words[0];
    operator delete(__x.__r_.__value_.__l.__data_);
  }
  MIL::IRTensorValueType::MakeBoolValue();
  Espresso::MILTranslator::LayerTranslator::GetLayerName(&v37, *(const MIL::IROperation **)(a1 + 16));
  long long v19 = std::string::append(&v37, "_");
  long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  int v21 = *(char *)(a2 + 23);
  if (v21 >= 0) {
    std::string::size_type v22 = (const std::string::value_type *)a2;
  }
  else {
    std::string::size_type v22 = *(const std::string::value_type **)a2;
  }
  if (v21 >= 0) {
    std::string::size_type v23 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v23 = *(void *)(a2 + 8);
  }
  long long v24 = std::string::append(&v38, v22, v23);
  long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
  v39.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v25;
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  long long v26 = std::string::append(&v39, "_blob");
  long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  std::string::size_type v41 = v26->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v27;
  v26->__r_.__value_.__l.__size_ = 0;
  v26->__r_.__value_.__r.__words[2] = 0;
  v26->__r_.__value_.__r.__words[0] = 0;
  Espresso::MILTranslator::LayerTranslator::GetUniqueLayerAndBlobNames((uint64_t)&__x, v6, (uint64_t)__p);
  if (SHIBYTE(v41) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v39.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v38.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
  uint64_t v35 = v44;
  if (v44) {
    operator new();
  }
  std::vector<int>::value_type v36 = 0;
  uint64_t v44 = 0;
  uint64_t Location = MIL::IRObject::GetLocation(*(MIL::IRObject **)(a1 + 16));
  Espresso::MILTranslator::LayerTranslator::LoadConstant(v6, (uint64_t)&__x, (uint64_t)&v43, (uint64_t)&v35, Location);
  if (v36) {
    nitro::nitro_function::nitro_function(v36);
  }
  std::vector<std::string>::const_iterator v32 = *(std::vector<std::string> **)(a1 + 24);
  v33.__i_ = v32->__begin_ + 1;
  std::vector<std::string>::insert(v32, v33, &v43);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v43.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__x.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__x.__r_.__value_.__l.__data_);
  }
  uint64_t v34 = v44;
  uint64_t v44 = 0;
  if (v34) {
    (*(void (**)(uint64_t))(*(void *)v34 + 8))(v34);
  }
  unint64_t v15 = (void *)v45[0];
  if (v45[0])
  {
    v45[1] = v45[0];
LABEL_42:
    operator delete(v15);
  }
}

void sub_19226740C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  std::pair<std::string const,std::string>::~pair(v37 - 128);
  uint64_t v39 = *(void *)(v37 - 80);
  *(void *)(v37 - 80) = 0;
  if (v39) {
    (*(void (**)(uint64_t))(*(void *)v39 + 8))(v39);
  }
  std::string v40 = *(void **)(v37 - 72);
  if (v40)
  {
    *(void *)(v37 - 64) = v40;
    operator delete(v40);
  }
  _Unwind_Resume(a1);
}

void ___ZN8Espresso17ANECompilerEngine25precompilation_settings_t6sharedEv_block_invoke()
{
  if (!Espresso::ANECompilerEngine::precompilation_settings_t::global) {
    operator new();
  }
}

void sub_192267588(_Unwind_Exception *a1)
{
  MEMORY[0x192FF16B0](v1, 0x1012C40688F0EE3);
  _Unwind_Resume(a1);
}

uint64_t espresso_plan_set_priority(void *a1, int a2)
{
  unint64_t v4 = (void *)MEMORY[0x192FF2020]();
  if (a1
  {
    if (a2 > 16382)
    {
      if (a2 != 0x3FFF && a2 != 24574 && a2 != 0x7FFF) {
LABEL_27:
      }
        Espresso::throw_exception_selector<Espresso::invalid_argument_error>("The priority passed is not a valid value.");
    }
    else if (a2 >= 2 && a2 != 0x2000)
    {
      goto LABEL_27;
    }
    uint64_t v6 = a1[133];
    int v7 = *(_DWORD *)(v6 + 160);
    if (v7) {
      Espresso::throw_exception_selector<Espresso::invalid_state_error,espresso_plan_phase_t &>(v7);
    }
    if (*(_DWORD *)(v6 + 164) == a2) {
      goto LABEL_23;
    }
    unint64_t v8 = *(unsigned int (*****)(void))v6;
    if (*(void *)v6)
    {
      if (v9)
      {
        uint64_t v10 = 2;
        uint64_t v11 = 1;
        if (a2 != 0x7FFF && a2 != 24574)
        {
          uint64_t v11 = 0;
          if (a2 == 1) {
            uint64_t v10 = 4;
          }
          else {
            uint64_t v10 = 1;
          }
        }
        (*(void (**)(void *, uint64_t, uint64_t, float))(*(void *)v9 + 16))(v9, v11, v10, 4.0);
LABEL_23:
        uint64_t v5 = 0;
        goto LABEL_24;
      }
    }
    if ((**v8[1])(v8[1]) >> 1 != 5003) {
      Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Setting the priority is not supported on this engine.");
    }
    uint64_t v5 = 0;
    *(_DWORD *)(a1[133] + 164) = a2;
  }
  else
  {
    uint64_t v5 = 4294967290;
  }
LABEL_24:
  return v5;
}

void sub_1922677C0(_Unwind_Exception *exception_object, int a2)
{
  if (a2 == 1)
  {
    uint64_t v3 = (std::exception *)__cxa_begin_catch(exception_object);
    handle_ex_plan(v2, v3);
    __cxa_end_catch();
    JUMPOUT(0x19226777CLL);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::net::restore_additional_configurations(uint64_t a1, uint64_t *a2)
{
  if (!*a2) {
    return 0;
  }
  long long v26 = (uint64_t **)(a1 + 776);
  std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::destroy(a1 + 776, *(char **)(a1 + 784));
  *(void *)(a1 + 776) = a1 + 784;
  *(void *)(a1 + 792) = 0;
  *(void *)(a1 + 784) = 0;
  uint64_t v4 = *a2;
  uint64_t v42 = 0;
  std::vector<std::string>::value_type v43 = 0;
  uint64_t v44 = 0;
  (*(void (**)(uint64_t, long long **))(*(void *)v4 + 32))(v4, &v42);
  uint64_t v5 = v42;
  uint64_t v6 = v43;
  if (v42 == v43)
  {
LABEL_38:
    uint64_t v24 = 1;
    goto LABEL_43;
  }
  while (1)
  {
    uint64_t v37 = 0;
    std::string v38 = 0;
    long long v41 = 0uLL;
    uint64_t v39 = 0;
    std::string v40 = &v41;
    (*(void (**)(uint64_t *__return_ptr, uint64_t, long long *))(*(void *)v4 + 120))(&v35, v4, v5);
    uint64_t v7 = v35;
    if (!v35) {
      break;
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "outputs");
    int v8 = (*(uint64_t (**)(uint64_t, void **))(*(void *)v7 + 24))(v7, &__p);
    int v9 = v8;
    if (SHIBYTE(v34) < 0)
    {
      operator delete(__p);
      if (!v9) {
        goto LABEL_15;
      }
    }
    else if (!v8)
    {
      goto LABEL_15;
    }
    uint64_t v10 = v35;
    std::string::basic_string[abi:ne180100]<0>(&__p, "outputs");
    (*(void (**)(void **__return_ptr, uint64_t, void **))(*(void *)v10 + 120))(&p_p, v10, &__p);
    uint64_t v12 = p_p;
    uint64_t v11 = v30;
    p_p = 0;
    std::string::value_type v30 = 0;
    if (SHIBYTE(v34) < 0)
    {
      operator delete(__p);
      if (!v12) {
        goto LABEL_13;
      }
LABEL_12:
      (*(void (**)(void *, std::string **))(*(void *)v12 + 32))(v12, &v37);
      goto LABEL_13;
    }
    if (v12) {
      goto LABEL_12;
    }
LABEL_13:
    if (v11) {
      nitro::nitro_function::nitro_function(v11);
    }
LABEL_15:
    std::string __p = 0;
    std::vector<std::string>::const_iterator v33 = 0;
    uint64_t v34 = 0;
    uint64_t v13 = v35;
    std::string::basic_string[abi:ne180100]<0>(&p_p, "input_shapes");
    int v14 = (*(uint64_t (**)(uint64_t, void **))(*(void *)v13 + 24))(v13, &p_p);
    int v15 = v14;
    if (v31 < 0)
    {
      operator delete(p_p);
      if (!v15)
      {
LABEL_21:
        unint64_t v18 = 0;
        uint64_t v17 = 0;
        goto LABEL_24;
      }
    }
    else if (!v14)
    {
      goto LABEL_21;
    }
    uint64_t v16 = v35;
    std::string::basic_string[abi:ne180100]<0>(&p_p, "input_shapes");
    (*(void (**)(long long **__return_ptr, uint64_t, void **))(*(void *)v16 + 120))(&v27, v16, &p_p);
    unint64_t v18 = v27;
    uint64_t v17 = v28;
    long long v27 = 0;
    uint64_t v28 = 0;
    if (v31 < 0)
    {
      operator delete(p_p);
      if (!v18) {
        goto LABEL_24;
      }
LABEL_23:
      (*(void (**)(long long *, void **))(*(void *)v18 + 32))(v18, &__p);
      goto LABEL_24;
    }
    if (v18) {
      goto LABEL_23;
    }
LABEL_24:
    long long v20 = (long long *)__p;
    long long v19 = v33;
    while (v20 != v19)
    {
      (*(void (**)(void **__return_ptr, long long *, long long *))(*(void *)v18 + 120))(&p_p, v18, v20);
      int v21 = p_p;
      if (p_p)
      {
        long long v27 = v20;
        std::string::size_type v22 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v40, v20, &v27);
        Espresso::SerDes::params_io<Espresso::layer_shape>((uint64_t)v21, (uint64_t)(v22 + 56), 0);
      }
      if (v30) {
        nitro::nitro_function::nitro_function(v30);
      }
      long long v20 = (long long *)((char *)v20 + 24);
    }
    long long v27 = v5;
    std::string::size_type v23 = std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v26, v5, &v27);
    if (v23 + 7 != (uint64_t *)&v37)
    {
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)(v23 + 7), v37, v38, 0xAAAAAAAAAAAAAAABLL * (((char *)v38 - (char *)v37) >> 3));
      std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,Espresso::layer_shape>,std::__tree_node<std::__value_type<std::string,Espresso::layer_shape>,void *> *,long>>((uint64_t **)v23 + 10, v40, &v41);
    }
    if (v17) {
      nitro::nitro_function::nitro_function(v17);
    }
    p_p = &__p;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p);
    if (v36) {
      nitro::nitro_function::nitro_function(v36);
    }
    std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v40, (char *)v41);
    std::string __p = &v37;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    uint64_t v5 = (long long *)((char *)v5 + 24);
    if (v5 == v6) {
      goto LABEL_38;
    }
  }
  if (v36) {
    nitro::nitro_function::nitro_function(v36);
  }
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v40, (char *)v41);
  std::string __p = &v37;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  uint64_t v24 = 0;
LABEL_43:
  uint64_t v37 = (std::string *)&v42;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v37);
  return v24;
}

void sub_192267C78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  a27 = v27 - 112;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a27);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void *a2, long long **a3)
{
  uint64_t v5 = (uint64_t **)std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__find_equal<std::string>((uint64_t)a1, &v14, a2);
  uint64_t v6 = *v5;
  if (!*v5)
  {
    uint64_t v7 = v5;
    uint64_t v6 = (uint64_t *)operator new(0x68uLL);
    v12[0] = v6;
    v12[1] = a1 + 1;
    char v13 = 0;
    int v8 = (std::string *)(v6 + 4);
    int v9 = *a3;
    if (*((char *)*a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)v9, *((void *)v9 + 1));
    }
    else
    {
      long long v10 = *v9;
      v6[6] = *((void *)v9 + 2);
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v10;
    }
    v6[7] = 0;
    v6[8] = 0;
    v6[11] = 0;
    v6[12] = 0;
    v6[9] = 0;
    v6[10] = (uint64_t)(v6 + 11);
    char v13 = 1;
    std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at(a1, v14, v7, v6);
    v12[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,Espresso::net_configuration>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,Espresso::net_configuration>,void *>>>>::reset[abi:ne180100]((uint64_t)v12);
  }
  return v6;
}

void sub_192267E34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,Espresso::net_configuration>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,Espresso::net_configuration>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,Espresso::net_configuration>,0>((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

void Espresso::MILTranslator::MILProgramTranslator::ConvertFunction(uint64_t *a1, uint64_t a2)
{
  v271[20] = *MEMORY[0x1E4F143B8];
  uint64_t Function = MIL::IRProgram::GetFunction();
  v230[0] = 80000;
  Espresso::create_context(v230, &v242);
  int v5 = *(unsigned __int8 *)(a2 + 32);
  uint64_t v6 = v242;
  *(unsigned char *)(v242 + 123) = v5;
  if (v5) {
    *(unsigned char *)(v6 + 53) = 1;
  }
  *(_OWORD *)__n = 0u;
  long long v226 = 0u;
  float v227 = 1.0;
  uint64_t v7 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)Function + 128))(Function);
  int v8 = (unsigned __int8 *)(v7 + 1);
  int v9 = (unsigned __int8 *)*v7;
  if ((void *)*v7 != v7 + 1)
  {
    do
    {
      uint64_t v10 = MIL::IRValueType::AsTensorType(*((MIL::IRValueType **)v9 + 7));
      unsigned int v11 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 88))(v10) - 2;
      if (v11 >= 0x10 || ((0xF79Du >> v11) & 1) == 0) {
        Espresso::throw_exception_selector<Espresso::network_translation_error>("Type unsupported by Espresso encountered");
      }
      unint64_t v3 = dword_192E06160[v11];
      unint64_t v12 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(v9 + 32));
      size_t v13 = v12;
      unint64_t v14 = __n[1];
      if (__n[1])
      {
        uint8x8_t v15 = (uint8x8_t)vcnt_s8((int8x8_t)__n[1]);
        v15.i16[0] = vaddlv_u8(v15);
        unint64_t v4 = v15.u32[0];
        if (v15.u32[0] > 1uLL)
        {
          size_t v2 = v12;
          if (v12 >= __n[1]) {
            size_t v2 = v12 % __n[1];
          }
        }
        else
        {
          size_t v2 = (__n[1] - 1) & v12;
        }
        uint64_t v16 = *(void ***)(__n[0] + 8 * v2);
        if (v16)
        {
          uint64_t v17 = (char *)*v16;
          if (*v16)
          {
            do
            {
              unint64_t v18 = *((void *)v17 + 1);
              if (v18 == v13)
              {
                if (std::equal_to<std::string>::operator()[abi:ne180100]((unsigned __int8 *)v17 + 16, v9 + 32)) {
                  goto LABEL_47;
                }
              }
              else
              {
                if (v4 > 1)
                {
                  if (v18 >= v14) {
                    v18 %= v14;
                  }
                }
                else
                {
                  v18 &= v14 - 1;
                }
                if (v18 != v2) {
                  break;
                }
              }
              uint64_t v17 = *(char **)v17;
            }
            while (v17);
          }
        }
      }
      uint64_t v17 = (char *)operator new(0x30uLL);
      *(void *)uint64_t v17 = 0;
      *((void *)v17 + 1) = v13;
      long long v19 = (std::string *)(v17 + 16);
      if ((char)v9[55] < 0)
      {
        std::string::__init_copy_ctor_external(v19, *((const std::string::value_type **)v9 + 4), *((void *)v9 + 5));
      }
      else
      {
        long long v20 = *((_OWORD *)v9 + 2);
        *((void *)v17 + 4) = *((void *)v9 + 6);
        *(_OWORD *)&v19->__r_.__value_.__l.__data_ = v20;
      }
      *((_DWORD *)v17 + 10) = 0;
      float v21 = (float)(unint64_t)(*((void *)&v226 + 1) + 1);
      if (!v14 || (float)(v227 * (float)v14) < v21)
      {
        BOOL v22 = (v14 & (v14 - 1)) != 0;
        if (v14 < 3) {
          BOOL v22 = 1;
        }
        unint64_t v23 = v22 | (2 * v14);
        unint64_t v24 = vcvtps_u32_f32(v21 / v227);
        if (v23 <= v24) {
          size_t v25 = v24;
        }
        else {
          size_t v25 = v23;
        }
        std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__rehash<true>((uint64_t)__n, v25);
        unint64_t v14 = __n[1];
        if ((__n[1] & (__n[1] - 1)) != 0)
        {
          if (v13 >= __n[1]) {
            size_t v2 = v13 % __n[1];
          }
          else {
            size_t v2 = v13;
          }
        }
        else
        {
          size_t v2 = (__n[1] - 1) & v13;
        }
      }
      size_t v26 = __n[0];
      uint64_t v27 = *(void **)(__n[0] + 8 * v2);
      if (v27)
      {
        *(void *)uint64_t v17 = *v27;
      }
      else
      {
        *(void *)uint64_t v17 = v226;
        *(void *)&long long v226 = v17;
        *(void *)(v26 + 8 * v2) = &v226;
        if (!*(void *)v17) {
          goto LABEL_46;
        }
        unint64_t v28 = *(void *)(*(void *)v17 + 8);
        if ((v14 & (v14 - 1)) != 0)
        {
          if (v28 >= v14) {
            v28 %= v14;
          }
        }
        else
        {
          v28 &= v14 - 1;
        }
        uint64_t v27 = (void *)(__n[0] + 8 * v28);
      }
      void *v27 = v17;
LABEL_46:
      ++*((void *)&v226 + 1);
LABEL_47:
      *((_DWORD *)v17 + 10) = v3;
      uint64_t v29 = (unsigned __int8 *)*((void *)v9 + 1);
      if (v29)
      {
        do
        {
          std::string::value_type v30 = v29;
          uint64_t v29 = *(unsigned __int8 **)v29;
        }
        while (v29);
      }
      else
      {
        do
        {
          std::string::value_type v30 = (unsigned __int8 *)*((void *)v9 + 2);
          BOOL v31 = *(void *)v30 == (void)v9;
          int v9 = v30;
        }
        while (!v31);
      }
      int v9 = v30;
    }
    while (v30 != v8);
  }
  long long v32 = v242;
  long long v242 = 0uLL;
  *(_OWORD *)std::string __p = v32;
  long long __str = 0uLL;
  std::vector<std::string>::const_iterator v33 = (std::__shared_weak_count *)*((void *)&v32 + 1);
  Espresso::sequential_builder::sequential_builder((uint64_t)v230, (uint64_t *)__p, 0, (uint64_t *)&__str);
  if (v33) {
    nitro::nitro_function::nitro_function(v33);
  }
  long long v234 = 0u;
  long long v233 = 0u;
  float v235 = v227;
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__rehash<true>((uint64_t)&v233, __n[1]);
  uint64_t v34 = (unsigned __int8 *)v226;
  if ((void)v226)
  {
    while (1)
    {
      unint64_t v35 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(v34 + 16));
      unint64_t v36 = v35;
      unint64_t v3 = *((void *)&v233 + 1);
      if (*((void *)&v233 + 1))
      {
        uint8x8_t v37 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v233 + 8));
        v37.i16[0] = vaddlv_u8(v37);
        unint64_t v38 = v37.u32[0];
        if (v37.u32[0] > 1uLL)
        {
          unint64_t v4 = v35;
          if (v35 >= *((void *)&v233 + 1)) {
            unint64_t v4 = v35 % *((void *)&v233 + 1);
          }
        }
        else
        {
          unint64_t v4 = (*((void *)&v233 + 1) - 1) & v35;
        }
        uint64_t v39 = *(unsigned __int8 ***)(v233 + 8 * v4);
        if (v39)
        {
          for (uint64_t i = *v39; i; uint64_t i = *(unsigned __int8 **)i)
          {
            unint64_t v41 = *((void *)i + 1);
            if (v41 == v36)
            {
              if (std::equal_to<std::string>::operator()[abi:ne180100](i + 16, v34 + 16)) {
                goto LABEL_97;
              }
            }
            else
            {
              if (v38 > 1)
              {
                if (v41 >= v3) {
                  v41 %= v3;
                }
              }
              else
              {
                v41 &= v3 - 1;
              }
              if (v41 != v4) {
                break;
              }
            }
          }
        }
      }
      uint64_t v42 = (char *)operator new(0x30uLL);
      *(void *)uint64_t v42 = 0;
      *((void *)v42 + 1) = v36;
      std::vector<std::string>::value_type v43 = (std::string *)(v42 + 16);
      if ((char)v34[39] < 0)
      {
        std::string::__init_copy_ctor_external(v43, *((const std::string::value_type **)v34 + 2), *((void *)v34 + 3));
      }
      else
      {
        long long v44 = *((_OWORD *)v34 + 1);
        *((void *)v42 + 4) = *((void *)v34 + 4);
        *(_OWORD *)&v43->__r_.__value_.__l.__data_ = v44;
      }
      *((_DWORD *)v42 + 10) = *((_DWORD *)v34 + 10);
      float v45 = (float)(unint64_t)(*((void *)&v234 + 1) + 1);
      if (!v3 || (float)(v235 * (float)v3) < v45)
      {
        BOOL v46 = (v3 & (v3 - 1)) != 0;
        if (v3 < 3) {
          BOOL v46 = 1;
        }
        unint64_t v47 = v46 | (2 * v3);
        unint64_t v48 = vcvtps_u32_f32(v45 / v235);
        if (v47 <= v48) {
          size_t v49 = v48;
        }
        else {
          size_t v49 = v47;
        }
        std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__rehash<true>((uint64_t)&v233, v49);
        unint64_t v3 = *((void *)&v233 + 1);
        if ((*((void *)&v233 + 1) & (*((void *)&v233 + 1) - 1)) != 0)
        {
          if (v36 >= *((void *)&v233 + 1)) {
            unint64_t v4 = v36 % *((void *)&v233 + 1);
          }
          else {
            unint64_t v4 = v36;
          }
        }
        else
        {
          unint64_t v4 = (*((void *)&v233 + 1) - 1) & v36;
        }
      }
      uint64_t v50 = v233;
      size_t v51 = *(void **)(v233 + 8 * v4);
      if (v51)
      {
        *(void *)uint64_t v42 = *v51;
      }
      else
      {
        *(void *)uint64_t v42 = v234;
        *(void *)&long long v234 = v42;
        *(void *)(v50 + 8 * v4) = &v234;
        if (!*(void *)v42) {
          goto LABEL_96;
        }
        unint64_t v52 = *(void *)(*(void *)v42 + 8);
        if ((v3 & (v3 - 1)) != 0)
        {
          if (v52 >= v3) {
            v52 %= v3;
          }
        }
        else
        {
          v52 &= v3 - 1;
        }
        size_t v51 = (void *)(v233 + 8 * v52);
      }
      void *v51 = v42;
LABEL_96:
      ++*((void *)&v234 + 1);
LABEL_97:
      uint64_t v34 = *(unsigned __int8 **)v34;
      if (!v34)
      {
        uint64_t v34 = (unsigned __int8 *)v226;
        break;
      }
    }
  }
  memset(v236, 0, sizeof(v236));
  int v237 = 1065353216;
  size_t v53 = __n[0];
  size_t v54 = __n[1];
  __n[0] = 0;
  __n[1] = 0;
  size_t v238 = v53;
  size_t v239 = v54;
  v240[0] = v34;
  v240[1] = *((void *)&v226 + 1);
  float v241 = v227;
  if (*((void *)&v226 + 1))
  {
    size_t v55 = *((void *)v34 + 1);
    if ((v54 & (v54 - 1)) != 0)
    {
      if (v55 >= v54) {
        v55 %= v54;
      }
    }
    else
    {
      v55 &= v54 - 1;
    }
    *(void *)(v53 + 8 * v55) = v240;
    long long v226 = 0uLL;
  }
  for (j = &v234;
        ;
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v236, (uint64_t)(j + 1), (uint64_t)(j + 1)))
  {
    j = *(long long **)j;
    if (!j) {
      break;
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,Espresso::training_transform_options>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::training_transform_options>>>::~__hash_table((uint64_t)__n);
  v57 = (MIL::MILContext *)(*(uint64_t (**)(void))(**(void **)(a2 + 16) + 40))(*(void *)(a2 + 16));
  (*(void (**)(uint64_t))(*(void *)Function + 32))(Function);
  Opset = (const MIL::IROpset *)MIL::MILContext::GetOpset();
  Espresso::MILTranslator::LayerTranslator::LayerTranslator((Espresso::MILTranslator::LayerTranslator *)__n, (Espresso::MILTranslator::TypedEspressoBuilder *)v230, v57, Opset, *(unsigned char *)(a2 + 34));
  uint64_t v59 = v231;
  BOOL v60 = v232;
  if (v232) {
    atomic_fetch_add_explicit(&v232->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "E5_FlagsEir");
  uint64_t Attribute = MIL::IRObject::TryGetAttribute();
  v62 = (MIL::IRValue *)Attribute;
  if (SBYTE7(v266) < 0)
  {
    operator delete(__p[0]);
    if (!v62) {
      goto LABEL_120;
    }
  }
  else if (!Attribute)
  {
    goto LABEL_120;
  }
  uint64_t v63 = (MIL::IRDictionaryValue *)MIL::IRValue::AsDictionary(v62);
  unint64_t v64 = (void *)MIL::IRDictionaryValue::begin(v63);
  for (k = MIL::IRDictionaryValue::end(v63); v64 != (void *)k; unint64_t v64 = (void *)*v64)
  {
    MIL::IRValue::GetScalar<std::string>();
    MIL::IRValue::GetScalar<std::string>();
    v223[0].__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
    unint64_t v66 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v59 + 472), __p, (uint64_t)&std::piecewise_construct, (long long **)v223);
    std::string::operator=((std::string *)(v66 + 7), (const std::string *)&__str);
    if (SBYTE7(__str_16) < 0) {
      operator delete((void *)__str);
    }
    if (SBYTE7(v266) < 0) {
      operator delete(__p[0]);
    }
  }
LABEL_120:
  if (v60) {
    nitro::nitro_function::nitro_function(v60);
  }
  uint64_t v67 = (MIL::IRObject *)(*(uint64_t (**)(uint64_t))(*(void *)Function + 40))(Function);
  Espresso::MILTranslator::LayerTranslator::Translate((uint64_t)__n, v67);
  std::string::basic_string[abi:ne180100]<0>(__p, "UpgradeMetadata");
  uint64_t v68 = MIL::IRObject::TryGetAttribute();
  uint64_t v69 = v68;
  if (SBYTE7(v266) < 0)
  {
    operator delete(__p[0]);
    if (!v69)
    {
LABEL_144:
      BOOL v219 = 1;
      goto LABEL_145;
    }
  }
  else if (!v68)
  {
    goto LABEL_144;
  }
  v70 = (MIL::IRDictionaryValue *)(*(uint64_t (**)(uint64_t))(*(void *)v69 + 64))(v69);
  if (!v70) {
    goto LABEL_144;
  }
  std::string::basic_string[abi:ne180100]<0>(&v256, "ExplicitPrecision");
  std::string::basic_string[abi:ne180100]<0>(&v254, "false");
  if (v255 < 0) {
    operator delete((void *)v254.n128_u64[0]);
  }
  if (SHIBYTE(v256.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v256.__r_.__value_.__l.__data_);
  }
  std::istringstream::basic_istringstream[abi:ne180100]((uint64_t *)__p, v223);
  char v253 = 0;
  *(_DWORD *)((char *)&__p[1] + *((void *)__p[0] - 3)) |= 1u;
  MEMORY[0x192FF10A0](__p, &v253);
  std::string::basic_string[abi:ne180100]<0>(v250, "UpgradeToolVersion");
  std::string::basic_string[abi:ne180100]<0>(&v248, "3402.5.1");
  if (v249 < 0) {
    operator delete((void *)v248.n128_u64[0]);
  }
  if (v251 < 0) {
    operator delete(v250[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v245, "MILVersion");
  if (v244 < 0) {
    operator delete((void *)v243.n128_u64[0]);
  }
  if (v246 < 0) {
    operator delete(v245[0]);
  }
  *(void *)&long long __str_16 = v252.__r_.__value_.__l.__size_;
  *(void *)((char *)&__str_16 + 7) = *(std::string::size_type *)((char *)&v252.__r_.__value_.__r.__words[1] + 7);
  *(void *)&v259[8] = v247.__r_.__value_.__l.__size_;
  *(void *)&v259[15] = *(std::string::size_type *)((char *)&v247.__r_.__value_.__r.__words[1] + 7);
  LOBYTE(__str) = v253;
  *((void *)&__str + 1) = v252.__r_.__value_.__r.__words[0];
  HIBYTE(__str_16) = *((unsigned char *)&v252.__r_.__value_.__s + 23);
  *(void *)v259 = v247.__r_.__value_.__r.__words[0];
  char v260 = HIBYTE(v247.__r_.__value_.__r.__words[2]);
  __p[0] = *(void **)MEMORY[0x1E4FBA410];
  *(void **)((char *)__p + *((void *)__p[0] - 3)) = *(void **)(MEMORY[0x1E4FBA410] + 24);
  *(void *)&long long v266 = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v268[1].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v268[1].__r_.__value_.__l.__data_);
  }
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x192FF15B0](v271);
  if (SHIBYTE(v223[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v223[0].__r_.__value_.__l.__data_);
  }
  BOOL v219 = (_BYTE)__str != 0;
  Espresso::MILTranslator::MILUpgradeMetadata::~MILUpgradeMetadata((void **)&__str);
LABEL_145:
  (*(void (**)(void))(**(void **)(a2 + 16) + 40))(*(void *)(a2 + 16));
  long long __str_16 = 0u;
  long long __str = 0u;
  *(_DWORD *)v259 = 1065353216;
  MIL::Attributes::FlexibleShapeInfo::Make();
  MIL::Attributes::FlexibleShapeInfo::TryGetDefaultShapes((uint64_t *)&v254, v250[0]);
  if (v254.n128_u64[0])
  {
    int64_t v71 = *(uint64_t **)(v254.n128_u64[0] + 16);
    if (v71)
    {
      while (1)
      {
        unint64_t v72 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(v71 + 2));
        unint64_t v73 = v72;
        unint64_t v74 = *((void *)&__str + 1);
        if (*((void *)&__str + 1))
        {
          uint8x8_t v75 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&__str + 8));
          v75.i16[0] = vaddlv_u8(v75);
          unint64_t v76 = v75.u32[0];
          if (v75.u32[0] > 1uLL)
          {
            unint64_t v3 = v72;
            if (v72 >= *((void *)&__str + 1)) {
              unint64_t v3 = v72 % *((void *)&__str + 1);
            }
          }
          else
          {
            unint64_t v3 = (*((void *)&__str + 1) - 1) & v72;
          }
          unsigned int v77 = *(void ***)(__str + 8 * v3);
          if (v77)
          {
            int v78 = (char *)*v77;
            if (*v77)
            {
              do
              {
                unint64_t v79 = *((void *)v78 + 1);
                if (v79 == v73)
                {
                  if (std::equal_to<std::string>::operator()[abi:ne180100]((unsigned __int8 *)v78 + 16, (unsigned __int8 *)v71 + 16))
                  {
                    goto LABEL_222;
                  }
                }
                else
                {
                  if (v76 > 1)
                  {
                    if (v79 >= v74) {
                      v79 %= v74;
                    }
                  }
                  else
                  {
                    v79 &= v74 - 1;
                  }
                  if (v79 != v3) {
                    break;
                  }
                }
                int v78 = *(char **)v78;
              }
              while (v78);
            }
          }
        }
        uint64_t v80 = operator new(0x40uLL);
        __p[0] = v80;
        __p[1] = &__str_16;
        LOBYTE(v266) = 0;
        *uint64_t v80 = 0;
        v80[1] = v73;
        std::vector<std::string>::pointer v81 = (std::string *)(v80 + 2);
        if (*((char *)v71 + 39) < 0)
        {
          std::string::__init_copy_ctor_external(v81, (const std::string::value_type *)v71[2], v71[3]);
        }
        else
        {
          long long v82 = *((_OWORD *)v71 + 1);
          v80[4] = v71[4];
          *(_OWORD *)&v81->__r_.__value_.__l.__data_ = v82;
        }
        v80[5] = 0;
        v80[6] = 0;
        v80[7] = 0;
        LOBYTE(v266) = 1;
        float v83 = (float)(unint64_t)(*((void *)&__str_16 + 1) + 1);
        if (!v74 || (float)(*(float *)v259 * (float)v74) < v83) {
          break;
        }
LABEL_212:
        v99 = *(void **)(__str + 8 * v3);
        int v78 = (char *)__p[0];
        if (v99)
        {
          *(void *)__p[0] = *v99;
        }
        else
        {
          *(void *)__p[0] = __str_16;
          *(void *)&long long __str_16 = v78;
          *(void *)(__str + 8 * v3) = &__str_16;
          if (!*(void *)v78) {
            goto LABEL_221;
          }
          unint64_t v100 = *(void *)(*(void *)v78 + 8);
          if ((v74 & (v74 - 1)) != 0)
          {
            if (v100 >= v74) {
              v100 %= v74;
            }
          }
          else
          {
            v100 &= v74 - 1;
          }
          v99 = (void *)(__str + 8 * v100);
        }
        void *v99 = v78;
LABEL_221:
        __p[0] = 0;
        ++*((void *)&__str_16 + 1);
        std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<unsigned long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<unsigned long>>,void *>>>>::reset[abi:ne180100]((uint64_t)__p);
LABEL_222:
        v101 = (void *)*((void *)v78 + 5);
        if (v101)
        {
          *((void *)v78 + 6) = v101;
          operator delete(v101);
          *((void *)v78 + 5) = 0;
          *((void *)v78 + 6) = 0;
          *((void *)v78 + 7) = 0;
        }
        *(std::string *)(v78 + 40) = v223[0];
        int64_t v71 = (uint64_t *)*v71;
        if (!v71) {
          goto LABEL_235;
        }
      }
      BOOL v84 = (v74 & (v74 - 1)) != 0;
      if (v74 < 3) {
        BOOL v84 = 1;
      }
      unint64_t v85 = v84 | (2 * v74);
      unint64_t v86 = vcvtps_u32_f32(v83 / *(float *)v259);
      if (v85 <= v86) {
        int8x8_t prime = (int8x8_t)v86;
      }
      else {
        int8x8_t prime = (int8x8_t)v85;
      }
      if (*(void *)&prime == 1)
      {
        int8x8_t prime = (int8x8_t)2;
      }
      else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
      {
        int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      }
      unint64_t v74 = *((void *)&__str + 1);
      if (*(void *)&prime > *((void *)&__str + 1)) {
        goto LABEL_178;
      }
      if (*(void *)&prime < *((void *)&__str + 1))
      {
        unint64_t v94 = vcvtps_u32_f32((float)*((unint64_t *)&__str_16 + 1) / *(float *)v259);
        if (*((void *)&__str + 1) < 3uLL
          || (uint8x8_t v95 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&__str + 8)), v95.i16[0] = vaddlv_u8(v95),
                                                                           v95.u32[0] > 1uLL))
        {
          unint64_t v94 = std::__next_prime(v94);
        }
        else
        {
          uint64_t v96 = 1 << -(char)__clz(v94 - 1);
          if (v94 >= 2) {
            unint64_t v94 = v96;
          }
        }
        if (*(void *)&prime <= v94) {
          int8x8_t prime = (int8x8_t)v94;
        }
        if (*(void *)&prime >= v74)
        {
          unint64_t v74 = *((void *)&__str + 1);
        }
        else
        {
          if (prime)
          {
LABEL_178:
            if (*(void *)&prime >> 61) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            std::vector<std::string>::const_iterator v88 = operator new(8 * *(void *)&prime);
            uint64_t v89 = (void *)__str;
            *(void *)&long long __str = v88;
            if (v89) {
              operator delete(v89);
            }
            uint64_t v90 = 0;
            *((int8x8_t *)&__str + 1) = prime;
            do
              *(void *)(__str + 8 * v90++) = 0;
            while (*(void *)&prime != v90);
            uint64_t v91 = (void **)__str_16;
            if ((void)__str_16)
            {
              unint64_t v92 = *(void *)(__str_16 + 8);
              uint8x8_t v93 = (uint8x8_t)vcnt_s8(prime);
              v93.i16[0] = vaddlv_u8(v93);
              if (v93.u32[0] > 1uLL)
              {
                if (v92 >= *(void *)&prime) {
                  v92 %= *(void *)&prime;
                }
              }
              else
              {
                v92 &= *(void *)&prime - 1;
              }
              *(void *)(__str + 8 * v92) = &__str_16;
              for (m = *v91; m; unint64_t v92 = v98)
              {
                unint64_t v98 = m[1];
                if (v93.u32[0] > 1uLL)
                {
                  if (v98 >= *(void *)&prime) {
                    v98 %= *(void *)&prime;
                  }
                }
                else
                {
                  v98 &= *(void *)&prime - 1;
                }
                if (v98 != v92)
                {
                  if (!*(void *)(__str + 8 * v98))
                  {
                    *(void *)(__str + 8 * v98) = v91;
                    goto LABEL_203;
                  }
                  std::__shared_weak_count *v91 = (void *)*m;
                  void *m = **(void **)(__str + 8 * v98);
                  **(void **)(__str + 8 * v98) = m;
                  m = v91;
                }
                unint64_t v98 = v92;
LABEL_203:
                uint64_t v91 = (void **)m;
                m = (void *)*m;
              }
            }
            unint64_t v74 = (unint64_t)prime;
            goto LABEL_207;
          }
          uint64_t v102 = (void *)__str;
          *(void *)&long long __str = 0;
          if (v102) {
            operator delete(v102);
          }
          unint64_t v74 = 0;
          *((void *)&__str + 1) = 0;
        }
      }
LABEL_207:
      if ((v74 & (v74 - 1)) != 0)
      {
        if (v73 >= v74) {
          unint64_t v3 = v73 % v74;
        }
        else {
          unint64_t v3 = v73;
        }
      }
      else
      {
        unint64_t v3 = (v74 - 1) & v73;
      }
      goto LABEL_212;
    }
  }
LABEL_235:
  if (v254.n128_u64[1]) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v254.n128_u64[1]);
  }
  *(_OWORD *)&v256.__r_.__value_.__r.__words[1] = 0uLL;
  v256.__r_.__value_.__r.__words[0] = (std::string::size_type)&v256.__r_.__value_.__l.__size_;
  v103 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)Function + 128))(Function);
  uint64_t v104 = (unsigned __int8 *)(v103 + 1);
  v105 = (unsigned __int8 *)*v103;
  if ((void *)*v103 != v103 + 1)
  {
    do
    {
      uint64_t v106 = MIL::IRValueType::AsTensorType(*((MIL::IRValueType **)v105 + 7));
      if (((*(uint64_t (**)(uint64_t))(*(void *)v106 + 104))(v106) & 1) == 0) {
        Espresso::throw_exception_selector<Espresso::network_translation_error>("Non-fixed rank tensors cannot be used as function arguments.");
      }
      unint64_t v107 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(v105 + 32));
      unint64_t v108 = *((void *)&__str + 1);
      if (*((void *)&__str + 1))
      {
        unint64_t v109 = v107;
        uint8x8_t v110 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&__str + 8));
        v110.i16[0] = vaddlv_u8(v110);
        unint64_t v111 = v110.u32[0];
        if (v110.u32[0] > 1uLL)
        {
          unint64_t v112 = v107;
          if (v107 >= *((void *)&__str + 1)) {
            unint64_t v112 = v107 % *((void *)&__str + 1);
          }
        }
        else
        {
          unint64_t v112 = (*((void *)&__str + 1) - 1) & v107;
        }
        v113 = *(unsigned __int8 ***)(__str + 8 * v112);
        if (v113)
        {
          for (n = *v113; n; n = *(unsigned __int8 **)n)
          {
            unint64_t v115 = *((void *)n + 1);
            if (v115 == v109)
            {
              if (std::equal_to<std::string>::operator()[abi:ne180100](n + 16, v105 + 32))
              {
                memset(v223, 0, 24);
                unint64_t v130 = (int *)*((void *)n + 5);
                uint64_t v131 = *((void *)n + 6) - (void)v130;
                if (v131)
                {
                  uint64_t v132 = v131 >> 2;
                  if ((unint64_t)(v131 >> 2) <= 1) {
                    uint64_t v132 = 1;
                  }
                  unint64_t v133 = v223;
                  do
                  {
                    int v134 = *v130++;
                    LODWORD(v133->__r_.__value_.__l.__data_) = v134;
                    unint64_t v133 = (std::string *)((char *)v133 + 4);
                    --v132;
                  }
                  while (v132);
                }
                HIDWORD(v223[0].__r_.__value_.__r.__words[2]) = (unint64_t)v131 >> 2;
                Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)v223, 0, (uint64_t)__p);
                v254.n128_u64[0] = (unint64_t)(v105 + 32);
                v123 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v256, (void *)v105 + 4, (long long **)&v254);
                goto LABEL_263;
              }
            }
            else
            {
              if (v111 > 1)
              {
                if (v115 >= v108) {
                  v115 %= v108;
                }
              }
              else
              {
                v115 &= v108 - 1;
              }
              if (v115 != v112) {
                break;
              }
            }
          }
        }
      }
      uint64_t v116 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v106 + 96))(v106);
      uint64_t v117 = *v116;
      uint64_t v118 = v116[1];
      while (v117 != v118)
      {
        v119 = (Espresso *)(*(uint64_t (**)(void))(**(void **)v117 + 24))();
        if (v119)
        {
          char v121 = Espresso::espresso_os_log_subsystem(v119, v120);
          if (os_log_type_enabled(v121, OS_LOG_TYPE_ERROR))
          {
            LOWORD(__p[0]) = 0;
            _os_log_error_impl(&dword_1920CB000, v121, OS_LOG_TYPE_ERROR, "Got input with flexible dimension but no default shapes provided. Will use 1 for such dimensions.", (uint8_t *)__p, 2u);
          }

          break;
        }
        v117 += 8;
      }
      v122 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v106 + 96))(v106);
      Espresso::MILUtil::ToEspressoShape((uint64_t)__p, v122);
      v223[0].__r_.__value_.__r.__words[0] = (std::string::size_type)(v105 + 32);
      v123 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v256, (void *)v105 + 4, (long long **)v223);
LABEL_263:
      char v124 = v123;
      long long v125 = v266;
      *(_OWORD *)(v123 + 56) = *(_OWORD *)__p;
      *(_OWORD *)(v123 + 72) = v125;
      *((void *)v123 + 11) = *(void *)v267;
      v127 = v123 + 96;
      v126 = (void *)*((void *)v123 + 12);
      if (v126)
      {
        *((void *)v124 + 13) = v126;
        operator delete(v126);
        void *v127 = 0;
        v127[1] = 0;
        v127[2] = 0;
      }
      *((_OWORD *)v124 + 6) = *(_OWORD *)&v267[8];
      *((void *)v124 + 14) = v268[0].__r_.__value_.__r.__words[0];
      v128 = (unsigned __int8 *)*((void *)v105 + 1);
      if (v128)
      {
        do
        {
          v129 = v128;
          v128 = *(unsigned __int8 **)v128;
        }
        while (v128);
      }
      else
      {
        do
        {
          v129 = (unsigned __int8 *)*((void *)v105 + 2);
          BOOL v31 = *(void *)v129 == (void)v105;
          v105 = v129;
        }
        while (!v31);
      }
      v105 = v129;
    }
    while (v129 != v104);
  }
  v135 = v250[0];
  v250[0] = 0;
  if (v135)
  {
    MIL::Attributes::FlexibleShapeInfo::~FlexibleShapeInfo(v135);
    MEMORY[0x192FF16B0]();
  }
  std::__hash_table<std::__hash_value_type<std::string,std::vector<int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<int>>>>::~__hash_table((uint64_t)&__str);
  char v136 = operator new(0x48uLL);
  v136[1] = 0;
  v136[2] = 0;
  *char v136 = &unk_1EE388DF8;
  *((_OWORD *)v136 + 2) = 0u;
  uint64_t v137 = (uint64_t)(v136 + 4);
  v136[3] = &unk_1EE364DE0;
  *((_OWORD *)v136 + 3) = 0u;
  *((_DWORD *)v136 + 16) = 1065353216;
  __p[0] = v136 + 3;
  __p[1] = v136;
  if (v219)
  {
    for (iuint64_t i = (uint64_t *)v234; ii; iuint64_t i = (uint64_t *)*ii)
    {
      int v139 = *((_DWORD *)ii + 10);
      *(void *)&long long __str = ii + 2;
      *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v137, (unsigned __int8 *)ii + 16, (uint64_t)&std::piecewise_construct, (long long **)&__str)+ 10) = v139;
    }
  }
  Espresso::net::set_analysis<Espresso::analysis_to_preserve_mil_types>(v231, __p);
  Espresso::sequential_builder::build_from_shapes((uint64_t)v230, (uint64_t)&v256, &v252);
  if (__p[1]) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)__p[1]);
  }
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v256, (char *)v256.__r_.__value_.__l.__size_);
  if (*(unsigned char *)(a2 + 32))
  {
    std::string::size_type v140 = v252.__r_.__value_.__r.__words[0];
    uint64_t v141 = *(void *)(v252.__r_.__value_.__r.__words[0] + 32);
    if (*(void *)(v252.__r_.__value_.__r.__words[0] + 40) != v141)
    {
      unint64_t v142 = 0;
      do
      {
        if (v229)
        {
          uint8x8_t v143 = (uint8x8_t)vcnt_s8(v229);
          v143.i16[0] = vaddlv_u8(v143);
          if (v143.u32[0] > 1uLL)
          {
            unint64_t v144 = v142;
            if (v142 >= *(void *)&v229) {
              unint64_t v144 = v142 % *(void *)&v229;
            }
          }
          else
          {
            unint64_t v144 = (*(void *)&v229 - 1) & v142;
          }
          uint64_t v145 = *(void **)(v228 + 8 * v144);
          if (v145)
          {
            for (jj = (void *)*v145; jj; jj = (void *)*jj)
            {
              unint64_t v147 = jj[1];
              if (v142 == v147)
              {
                if (jj[2] == v142)
                {
                  std::string::basic_string[abi:ne180100]<0>(__p, "milId");
                  BOOL v148 = (MIL::IRValue *)MIL::IRObject::TryGetAttribute();
                  if (SBYTE7(v266) < 0) {
                    operator delete(__p[0]);
                  }
                  uint64_t v141 = *(void *)(v140 + 32);
                  if (v148)
                  {
                    MIL::IRValue::AsTensor(v148);
                    unint64_t v149 = MIL::IRValue::GetScalar<unsigned long long>();
                    uint64_t v150 = *(void *)(v141 + 16 * v142);
                    std::to_string((std::string *)__p, v149);
                    std::string::operator=((std::string *)(v150 + 200), (const std::string *)__p);
                    if (SBYTE7(v266) < 0) {
                      operator delete(__p[0]);
                    }
                    uint64_t v141 = *(void *)(v140 + 32);
                  }
                  break;
                }
              }
              else
              {
                if (v143.u32[0] > 1uLL)
                {
                  if (v147 >= *(void *)&v229) {
                    v147 %= *(void *)&v229;
                  }
                }
                else
                {
                  v147 &= *(void *)&v229 - 1;
                }
                if (v147 != v144) {
                  break;
                }
              }
            }
          }
        }
        ++v142;
      }
      while (v142 < (*(void *)(v140 + 40) - v141) >> 4);
    }
  }
  uint64_t v151 = MIL::IRProgram::GetFunction();
  uint64_t v152 = (*(uint64_t (**)(uint64_t))(*(void *)v151 + 40))(v151);
  uint64_t v154 = v252.__r_.__value_.__r.__words[0];
  if (HasLoop || Espresso::net::needs_interpreter((Espresso::net *)v252.__r_.__value_.__l.__data_))
  {
    v224[0] = 0;
    v224[1] = 0;
    Espresso::net::setup_script(v154, v224, 0);
  }
  if (*(unsigned char *)(a2 + 33))
  {
    std::string::size_type size = v252.__r_.__value_.__l.__size_;
    if (v252.__r_.__value_.__l.__size_) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v252.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
    }
    v220 = (std::__shared_weak_count *)size;
    uint64_t v156 = MIL::IRProgram::GetFunction();
    uint64_t v157 = (*(uint64_t (**)(uint64_t))(*(void *)v156 + 40))(v156);
    long long v158 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v157 + 88))(v157);
    std::unordered_set<std::string>::unordered_set<std::__wrap_iter<std::string const*>>((uint64_t)v223, *v158, v158[1]);
    __p[0] = (void *)0x4220000000000000;
    LODWORD(__p[1]) = 0;
    *(_DWORD *)((char *)&__p[1] + 3) = 0;
    long long v266 = 0u;
    memset(v267, 0, 17);
    memset(v268, 0, sizeof(v268));
    int v269 = 4096;
    __int16 v270 = 257;
    v254.n128_u64[0] = 0;
    if (*(void *)(v154 + 40) != *(void *)(v154 + 32))
    {
      unint64_t v159 = 0;
      while (1)
      {
        while (1)
        {
          *(void *)&long long __str = &v254;
          long long v160 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v154 + 96, v254.n128_u64, (uint64_t)&std::piecewise_construct, (uint64_t **)&__str);
          if (v159 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v160[4] - v160[3]) >> 3)) {
            break;
          }
LABEL_324:
          unint64_t v159 = 0;
          if (++v254.n128_u64[0] >= (uint64_t)(*(void *)(v154 + 40) - *(void *)(v154 + 32)) >> 4) {
            goto LABEL_325;
          }
        }
        *(void *)&long long __str = &v254;
        int v161 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v154 + 96, v254.n128_u64, (uint64_t)&std::piecewise_construct, (uint64_t **)&__str);
        if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v223, v161[3] + 24 * v159++))
        {
          uint64_t v163 = *(void *)(*(void *)(*(void *)(v154 + 32) + 16 * v254.n128_u64[0]) + 64);
          std::string::basic_string[abi:ne180100]<0>(&__str, "is_output");
          v256.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
          *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v163 + 240, (unsigned __int8 *)&__str, (uint64_t)&std::piecewise_construct, (long long **)&v256)+ 10) = 1;
          if (SBYTE7(__str_16) < 0) {
            operator delete((void *)__str);
          }
          goto LABEL_324;
        }
      }
    }
LABEL_325:
    v256.__r_.__value_.__r.__words[0] = v154;
    v256.__r_.__value_.__l.__size_ = (std::string::size_type)v220;
    if (v220) {
      atomic_fetch_add_explicit(&v220->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long __str = *(_OWORD *)__p;
    long long __str_16 = v266;
    *(_OWORD *)v259 = *(_OWORD *)v267;
    v259[16] = v267[16];
    memset(v261, 0, sizeof(v261));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v261, (uint64_t)v268[0].__r_.__value_.__l.__data_, v268[0].__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v268[0].__r_.__value_.__l.__size_ - v268[0].__r_.__value_.__r.__words[0]) >> 3));
    if (SHIBYTE(v268[1].__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v262, v268[1].__r_.__value_.__l.__data_, v268[1].__r_.__value_.__l.__size_);
    }
    else {
      std::string v262 = v268[1];
    }
    int v263 = v269;
    __int16 v264 = v270;
    Espresso::auto_optimize((uint64_t)&v256, (uint64_t)&__str, a1);
    if (SHIBYTE(v262.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v262.__r_.__value_.__l.__data_);
    }
    v254.n128_u64[0] = (unint64_t)v261;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v254);
    if (v256.__r_.__value_.__l.__size_) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v256.__r_.__value_.__l.__size_);
    }
    if (SHIBYTE(v268[1].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v268[1].__r_.__value_.__l.__data_);
    }
    v254.n128_u64[0] = (unint64_t)v268;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v254);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v223);
    if (v220) {
      nitro::nitro_function::nitro_function(v220);
    }
  }
  else
  {
    std::string::size_type v164 = v252.__r_.__value_.__l.__size_;
    *a1 = v154;
    a1[1] = v164;
    if (v164) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v164 + 8), 1uLL, memory_order_relaxed);
    }
  }
  uint64_t v165 = *(void *)(a2 + 16);
  *(_OWORD *)&v223[0].__r_.__value_.__r.__words[1] = 0uLL;
  v223[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v223[0].__r_.__value_.__l.__size_;
  uint64_t v166 = MIL::IRProgram::GetFunction();
  uint64_t v167 = (*(uint64_t (**)(uint64_t))(*(void *)v166 + 40))(v166);
  v215 = (std::string **)(*(uint64_t (**)(uint64_t))(*(void *)v167 + 88))(v167);
  (*(void (**)(uint64_t))(*(void *)v165 + 40))(v165);
  MIL::Attributes::FlexibleShapeInfo::Make();
  EnumeratedShapes = (Espresso *)MIL::Attributes::FlexibleShapeInfo::GetEnumeratedShapes((MIL::Attributes::FlexibleShapeInfo *)v254.n128_u64[0]);
  v170 = (void *)*((void *)EnumeratedShapes + 2);
  if (v170)
  {
    while (1)
    {
      __p[1] = 0;
      __p[0] = 0;
      *(void *)v267 = 0;
      *(void *)&v267[8] = 0;
      *(void *)&long long v266 = 0;
      *((void *)&v266 + 1) = v267;
      if (__p != (void **)v215) {
        std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)__p, *v215, v215[1], 0xAAAAAAAAAAAAAAABLL * (((char *)v215[1] - (char *)*v215) >> 3));
      }
      v216 = v170;
      v171 = (void *)v170[7];
      if (v171) {
        break;
      }
LABEL_364:
      *(void *)&long long __str = v216 + 2;
      v189 = std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v223, v216 + 2, (long long **)&__str);
      if (v189 + 7 != (uint64_t *)__p)
      {
        std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)(v189 + 7), (std::string *)__p[0], (std::string *)__p[1], 0xAAAAAAAAAAAAAAABLL * (((char *)__p[1] - (char *)__p[0]) >> 3));
        std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,Espresso::layer_shape>,std::__tree_node<std::__value_type<std::string,Espresso::layer_shape>,void *> *,long>>((uint64_t **)v189 + 10, *((long long **)&v266 + 1), (long long *)v267);
      }
      std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v266 + 8, *(char **)v267);
      *(void *)&long long __str = __p;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
      v170 = (void *)*v216;
      if (!*v216) {
        goto LABEL_367;
      }
    }
    while (1)
    {
      if (v171[6] - v171[5] >= 0x29uLL)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Flexible shape of rank greater than 5 found when extracting configurations.");
        __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      unint64_t v172 = v171[6] - v171[5];
      if (!v172)
      {
        LODWORD(v179) = 1;
        int v217 = 1;
        int v218 = 1;
        v174 = (void *)__str;
        int v177 = 1;
        int v221 = 1;
        int v180 = 1;
        int v181 = 1;
        int v182 = 1;
        int v183 = 1;
        int v184 = 1;
        int v185 = 1;
        if (!(void)__str) {
          goto LABEL_361;
        }
        goto LABEL_360;
      }
      uint64_t v173 = (uint64_t)v172 >> 3;
      v174 = (void *)__str;
      uint64_t v175 = __str + 4 * ((uint64_t)v172 >> 3);
      if (v172 < 9)
      {
        int v217 = 1;
        int v218 = 1;
        int v177 = 1;
        int v221 = 1;
      }
      else
      {
        int v221 = *(_DWORD *)(v175 - 8);
        if (v172 < 0x11)
        {
          int v217 = 1;
          int v218 = 1;
        }
        else
        {
          uint64_t v176 = __str + 4 * v173;
          int v218 = *(_DWORD *)(v176 - 12);
          if (v172 >= 0x19)
          {
            int v177 = *(_DWORD *)(v176 - 16);
            if (v172 < 0x21) {
              int v178 = 1;
            }
            else {
              int v178 = *(_DWORD *)(__str + 4 * v173 - 20);
            }
            int v217 = v178;
            goto LABEL_359;
          }
          int v217 = 1;
        }
        int v177 = 1;
      }
LABEL_359:
      int v180 = *(_DWORD *)(v175 - 4);
      unint64_t v179 = v172 >> 3;
LABEL_360:
      *((void *)&__str + 1) = v174;
      operator delete(v174);
      int v181 = v217;
      int v183 = v218;
      int v182 = v177;
      int v184 = v221;
      int v185 = v180;
LABEL_361:
      *(void *)&long long __str = v171 + 2;
      v186 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v266 + 1, v171 + 2, (long long **)&__str);
      *((_DWORD *)v186 + 14) = v185;
      *((_DWORD *)v186 + 15) = v184;
      *((_DWORD *)v186 + 16) = v183;
      *((_DWORD *)v186 + 17) = v182;
      *((_DWORD *)v186 + 18) = v181;
      *((_DWORD *)v186 + 19) = v179;
      *((void *)v186 + 10) = 0;
      *((void *)v186 + 11) = 0;
      v188 = v186 + 96;
      v187 = (void *)*((void *)v186 + 12);
      if (v187)
      {
        *((void *)v186 + 13) = v187;
        operator delete(v187);
        void *v188 = 0;
        v188[1] = 0;
        v188[2] = 0;
      }
      void *v188 = 0;
      v188[1] = 0;
      v188[2] = 0;
      v171 = (void *)*v171;
      if (!v171) {
        goto LABEL_364;
      }
    }
  }
LABEL_367:
  if (v223[0].__r_.__value_.__r.__words[2] <= 0x80)
  {
    std::string v256 = v223[0];
    if (v223[0].__r_.__value_.__r.__words[2])
    {
      *(void *)(v223[0].__r_.__value_.__l.__size_ + 16) = &v256.__r_.__value_.__l.__size_;
      v223[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v223[0].__r_.__value_.__l.__size_;
      *(_OWORD *)&v223[0].__r_.__value_.__r.__words[1] = 0uLL;
    }
    else
    {
      v256.__r_.__value_.__r.__words[0] = (std::string::size_type)&v256.__r_.__value_.__l.__size_;
    }
  }
  else
  {
    v190 = Espresso::espresso_os_log_subsystem(EnumeratedShapes, v169);
    if (os_log_type_enabled(v190, OS_LOG_TYPE_ERROR))
    {
      LODWORD(__p[0]) = 134217984;
      *(std::string::size_type *)((char *)__p + 4) = v223[0].__r_.__value_.__r.__words[2];
      _os_log_error_impl(&dword_1920CB000, v190, OS_LOG_TYPE_ERROR, "No net configurations would be written. A total of %lu net configurations were generated, limitation is 128.\n", (uint8_t *)__p, 0xCu);
    }

    *(_OWORD *)&v256.__r_.__value_.__r.__words[1] = 0uLL;
    v256.__r_.__value_.__r.__words[0] = (std::string::size_type)&v256.__r_.__value_.__l.__size_;
  }
  v191 = (MIL::Attributes::FlexibleShapeInfo *)v254.n128_u64[0];
  v254.n128_u64[0] = 0;
  if (v191)
  {
    MIL::Attributes::FlexibleShapeInfo::~FlexibleShapeInfo(v191);
    MEMORY[0x192FF16B0]();
  }
  std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::destroy((uint64_t)v223, (char *)v223[0].__r_.__value_.__l.__size_);
  uint64_t v192 = *a1;
  memset(&v222, 0, sizeof(v222));
  std::vector<std::string>::size_type v193 = v256.__r_.__value_.__r.__words[2];
  if (v256.__r_.__value_.__r.__words[2])
  {
    if ((std::string *)(v192 + 776) != &v256)
    {
      std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,Espresso::net_configuration>,std::__tree_node<std::__value_type<std::string,Espresso::net_configuration>,void *> *,long>>((uint64_t **)(v192 + 776), (uint64_t *)v256.__r_.__value_.__l.__data_, (uint64_t *)&v256.__r_.__value_.__l.__size_);
      std::vector<std::string>::size_type v193 = v256.__r_.__value_.__r.__words[2];
    }
    std::vector<std::string>::reserve(&v222, v193);
    std::string::size_type v194 = v256.__r_.__value_.__r.__words[0];
    if ((std::string::size_type *)v256.__r_.__value_.__l.__data_ != &v256.__r_.__value_.__r.__words[1])
    {
      std::vector<std::string>::pointer end = v222.__end_;
      do
      {
        v196 = (long long *)(v194 + 32);
        if (end >= v222.__end_cap_.__value_)
        {
          std::vector<std::string>::pointer end = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v222, (uint64_t)v196);
        }
        else
        {
          if (*(char *)(v194 + 55) < 0)
          {
            std::string::__init_copy_ctor_external(end, *(const std::string::value_type **)(v194 + 32), *(void *)(v194 + 40));
          }
          else
          {
            long long v197 = *v196;
            end->__r_.__value_.__r.__words[2] = *(void *)(v194 + 48);
            *(_OWORD *)&end->__r_.__value_.__l.__data_ = v197;
          }
          ++end;
        }
        v222.__end_ = end;
        v198 = *(std::string **)(v194 + 8);
        if (v198)
        {
          do
          {
            v199 = v198;
            v198 = (std::string *)v198->__r_.__value_.__r.__words[0];
          }
          while (v198);
        }
        else
        {
          do
          {
            v199 = *(std::string **)(v194 + 16);
            BOOL v31 = v199->__r_.__value_.__r.__words[0] == v194;
            std::string::size_type v194 = (std::string::size_type)v199;
          }
          while (!v31);
        }
        std::string::size_type v194 = (std::string::size_type)v199;
      }
      while (v199 != (std::string *)&v256.__r_.__value_.__r.__words[1]);
    }
    uint64_t v200 = *std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__find_equal<std::string>((uint64_t)&v256, v223, v222.__begin_->__r_.__value_.__r.__words);
    if (!v200) {
      std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
    }
    if (v192 + 800 != v200 + 56)
    {
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(v192 + 800, *(std::string **)(v200 + 56), *(std::string **)(v200 + 64), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v200 + 64) - *(void *)(v200 + 56)) >> 3));
      std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,Espresso::layer_shape>,std::__tree_node<std::__value_type<std::string,Espresso::layer_shape>,void *> *,long>>((uint64_t **)(v192 + 824), *(long long **)(v200 + 80), (long long *)(v200 + 88));
    }
  }
  __p[0] = &v222;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  v201 = (const std::string *)(*(uint64_t (**)(uint64_t))(*(void *)Function + 32))(Function);
  uint64_t v202 = *a1;
  std::string::operator=((std::string *)(*a1 + 1384), v201);
  v203 = *(std::__shared_weak_count **)(v202 + 584);
  *(_OWORD *)(v202 + 576) = 0u;
  if (v203) {
    nitro::nitro_function::nitro_function(v203);
  }
  v204 = *(std::__shared_weak_count **)(a2 + 24);
  if (v204) {
    atomic_fetch_add_explicit(&v204->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::net::get_analysis_if_existing<Espresso::analysis_debug_metadata>(v202, &__str);
  v205 = (char *)__str;
  if (!(void)__str)
  {
    v206 = operator new(0xF0uLL);
    v206[1] = 0;
    v206[2] = 0;
    void *v206 = &unk_1EE387A80;
    v205 = (char *)(v206 + 3);
    v206[3] = &unk_1EE359F38;
    *((_OWORD *)v206 + 2) = 0u;
    *((_OWORD *)v206 + 3) = 0u;
    *((_OWORD *)v206 + 4) = 0u;
    *((_OWORD *)v206 + 5) = 0u;
    *((_OWORD *)v206 + 6) = 0u;
    *((_OWORD *)v206 + 7) = 0u;
    *((_OWORD *)v206 + 8) = 0u;
    *((_OWORD *)v206 + 9) = 0u;
    *((_OWORD *)v206 + 10) = 0u;
    *((_OWORD *)v206 + 11) = 0u;
    *((_OWORD *)v206 + 12) = 0u;
    *((_OWORD *)v206 + 13) = 0u;
    v206[28] = 0;
    *((_DWORD *)v206 + 58) = 1065353216;
    *(void *)&long long v207 = v206 + 3;
    *((void *)&v207 + 1) = v206;
    v208 = (std::__shared_weak_count *)*((void *)&__str + 1);
    long long __str = v207;
    if (v208)
    {
      nitro::nitro_function::nitro_function(v208);
      v205 = (char *)__str;
    }
  }
  MIL::Attributes::BuildInfo::Make();
  MIL::Attributes::BuildInfo::GetField();
  v209 = (void **)(v205 + 152);
  if (v205[175] < 0) {
    operator delete(*v209);
  }
  *(_OWORD *)v209 = *(_OWORD *)__p;
  *((void *)v205 + 21) = v266;
  Espresso::net::set_analysis<Espresso::analysis_debug_metadata>(v202, &__str);
  v210 = (MIL::Attributes::BuildInfo *)v254.n128_u64[0];
  v254.n128_u64[0] = 0;
  if (v210)
  {
    MIL::Attributes::BuildInfo::~BuildInfo(v210);
    MEMORY[0x192FF16B0]();
  }
  if (*((void *)&__str + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&__str + 1));
  }
  if (v204) {
    nitro::nitro_function::nitro_function(v204);
  }
  std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::destroy((uint64_t)&v256, (char *)v256.__r_.__value_.__l.__size_);
  if (v252.__r_.__value_.__l.__size_) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v252.__r_.__value_.__l.__size_);
  }
  Espresso::MILTranslator::LayerTranslator::~LayerTranslator((Espresso::MILTranslator::LayerTranslator *)__n);
  Espresso::MILTranslator::TypedEspressoBuilder::~TypedEspressoBuilder((Espresso::MILTranslator::TypedEspressoBuilder *)v230);
  if (*((void *)&v242 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v242 + 1));
  }
}

void sub_192269F60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  STACK[0x3E0] = v72;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x3E0]);
  if (v71) {
    nitro::nitro_function::nitro_function(v71);
  }
  Espresso::auto_optimize_options::~auto_optimize_options((void **)&STACK[0x480]);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&a23);
  if (a19) {
    nitro::nitro_function::nitro_function(a19);
  }
  if (STACK[0x3C8]) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)STACK[0x3C8]);
  }
  Espresso::MILTranslator::LayerTranslator::~LayerTranslator((Espresso::MILTranslator::LayerTranslator *)&a31);
  Espresso::MILTranslator::TypedEspressoBuilder::~TypedEspressoBuilder((Espresso::MILTranslator::TypedEspressoBuilder *)&a71);
  if (STACK[0x338]) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)STACK[0x338]);
  }
  _Unwind_Resume(a1);
}

uint64_t Espresso::net::needs_interpreter(Espresso::net *this)
{
  memset(v31, 0, sizeof(v31));
  int v32 = 1065353216;
  unint64_t v30 = 0;
  uint64_t v1 = *((void *)this + 4);
  if (*((void *)this + 5) != v1)
  {
    unint64_t v3 = 0;
    unint64_t v28 = (char *)this + 56;
    uint64_t v29 = (char *)this + 96;
    do
    {
      uint64_t v4 = v1 + 16 * v3;
      int v5 = *(void **)v4;
      uint64_t v6 = (void *)(*(void *)v4 + 40);
      int v7 = *(char *)(*(void *)v4 + 63);
      if (v7 < 0)
      {
        uint64_t v9 = v5[5];
        uint64_t v8 = v5[6];
      }
      else
      {
        uint64_t v8 = *(unsigned __int8 *)(*(void *)v4 + 63);
        uint64_t v9 = *(void *)v4 + 40;
      }
      if (v8 >= 3)
      {
        uint64_t v10 = (char *)(v9 + v8);
        unsigned int v11 = (void *)v9;
        do
        {
          unint64_t v12 = (char *)memchr(v11, 99, v8 - 2);
          if (!v12) {
            break;
          }
          if (*(_WORD *)v12 == 26211 && v12[2] == 95)
          {
            if (v12 != v10 && &v12[-v9] != (char *)-1) {
              goto LABEL_48;
            }
            break;
          }
          unsigned int v11 = v12 + 1;
          uint64_t v8 = v10 - (unsigned char *)v11;
        }
        while (v10 - (unsigned char *)v11 >= 3);
      }
      if (v7 < 0)
      {
        if (v5[6] == 11)
        {
          uint64_t v6 = (void *)*v6;
LABEL_22:
          if (*v6 == 0x747269765F696870 && *(void *)((char *)v6 + 3) == 0x6C6175747269765FLL) {
            goto LABEL_28;
          }
        }
      }
      else if (v7 == 11)
      {
        goto LABEL_22;
      }
      uint64_t v15 = v5[8];
      std::vector<std::string>::const_iterator v33 = &v30;
      uint64_t v16 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v28, &v30, (uint64_t)&std::piecewise_construct, (uint64_t **)&v33);
      if ((*(uint64_t (**)(uint64_t, unint64_t))(*(void *)v15 + 264))(v15, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16[4] - v16[3]) >> 3)))
      {
LABEL_48:
        uint64_t v26 = 1;
        goto LABEL_49;
      }
      int v5 = *(void **)v4;
      LOBYTE(v7) = *(unsigned char *)(*(void *)v4 + 63);
LABEL_28:
      if ((v7 & 0x80) != 0)
      {
        uint64_t v17 = (void *)v5[5];
        uint64_t v18 = v5[6];
      }
      else
      {
        uint64_t v17 = v5 + 5;
        uint64_t v18 = v7;
      }
      if (v18 >= 7)
      {
        long long v19 = (char *)v17 + v18;
        long long v20 = v17;
        do
        {
          float v21 = (char *)memchr(v20, 95, v18 - 6);
          if (!v21) {
            break;
          }
          if (*(_DWORD *)v21 == 1869375327 && *(_DWORD *)(v21 + 3) == 1818321519)
          {
            if (v21 != v19 && v21 - (char *)v17 != -1) {
              goto LABEL_48;
            }
            break;
          }
          long long v20 = v21 + 1;
          uint64_t v18 = v19 - (unsigned char *)v20;
        }
        while (v19 - (unsigned char *)v20 >= 7);
      }
      std::vector<std::string>::const_iterator v33 = &v30;
      unint64_t v23 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v29, &v30, (uint64_t)&std::piecewise_construct, (uint64_t **)&v33);
      uint64_t v25 = v23[3];
      uint64_t v24 = v23[4];
      while (v25 != v24)
      {
        if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v31, v25))
        {
          goto LABEL_48;
        }
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v31, v25, v25);
        v25 += 24;
      }
      unint64_t v3 = v30 + 1;
      unint64_t v30 = v3;
      uint64_t v1 = *((void *)this + 4);
    }
    while (v3 < (*((void *)this + 5) - v1) >> 4);
  }
  uint64_t v26 = 0;
LABEL_49:
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v31);
  return v26;
}

void sub_19226A754(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::destroy(a1, *(void *)a2);
    std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::destroy(a1, *((void *)a2 + 1));
    std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)(a2 + 80), *((char **)a2 + 11));
    uint64_t v4 = *((void *)a2 + 7);
    if (v4)
    {
      uint64_t v5 = *((void *)a2 + 8);
      uint64_t v6 = (void *)*((void *)a2 + 7);
      if (v5 != v4)
      {
        do
        {
          if (*(char *)(v5 - 1) < 0) {
            operator delete(*(void **)(v5 - 24));
          }
          v5 -= 24;
        }
        while (v5 != v4);
        uint64_t v6 = (void *)*((void *)a2 + 7);
      }
      *((void *)a2 + 8) = v4;
      operator delete(v6);
    }
    if (a2[55] < 0)
    {
      operator delete(*((void **)a2 + 4));
      int v7 = a2;
    }
    else
    {
      int v7 = a2;
    }
    operator delete(v7);
  }
}

uint64_t Espresso::sequential_builder::sequential_builder(uint64_t a1, uint64_t *a2, int a3, uint64_t *a4)
{
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 16) = a1 + 24;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)(a1 + 136) = 0u;
  *(void *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(void *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(unsigned char *)(a1 + 184) = 0;
  uint64_t v7 = *a4;
  uint64_t v8 = a4[1];
  if (v8)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    uint64_t v9 = *(std::__shared_weak_count **)(a1 + 104);
    *(void *)(a1 + 96) = v7;
    *(void *)(a1 + 104) = v8;
    if (v9) {
      nitro::nitro_function::nitro_function(v9);
    }
  }
  else
  {
    *(void *)(a1 + 104) = 0;
    *(void *)(a1 + 96) = v7;
  }
  uint64_t v11 = *a2;
  uint64_t v10 = a2[1];
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v12 = *(std::__shared_weak_count **)(a1 + 120);
  *(void *)(a1 + 112) = v11;
  *(void *)(a1 + 120) = v10;
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
  *(_DWORD *)(a1 + 128) = a3;
  if (*(char *)(a1 + 79) < 0)
  {
    **(unsigned char **)(a1 + 56) = 0;
    *(void *)(a1 + 64) = 0;
  }
  else
  {
    *(unsigned char *)(a1 + 56) = 0;
    *(unsigned char *)(a1 + 79) = 0;
  }
  if (!*(void *)(a1 + 96))
  {
    Espresso::abstract_engine_factory::shared(&v22);
    uint64_t v13 = *((void *)&v22 + 1);
    unint64_t v14 = *(std::__shared_weak_count **)(a1 + 104);
    *(void *)(a1 + 96) = v22;
    *(void *)(a1 + 104) = v13;
    if (v14) {
      nitro::nitro_function::nitro_function(v14);
    }
  }
  _ZNSt3__115allocate_sharedB8ne180100IN8Espresso3netENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v22);
  uint64_t v15 = v22;
  uint64_t v16 = *(std::__shared_weak_count **)(a1 + 88);
  *(_OWORD *)(a1 + 80) = v22;
  if (v16)
  {
    nitro::nitro_function::nitro_function(v16);
    uint64_t v17 = *(void *)(a1 + 80);
  }
  else
  {
    uint64_t v17 = v15;
  }
  uint64_t v19 = *a2;
  uint64_t v18 = a2[1];
  if (v18) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 8), 1uLL, memory_order_relaxed);
  }
  long long v20 = *(std::__shared_weak_count **)(v17 + 24);
  *(void *)(v17 + 16) = v19;
  *(void *)(v17 + 24) = v18;
  if (v20) {
    nitro::nitro_function::nitro_function(v20);
  }
  return a1;
}

void sub_19226A9D4(_Unwind_Exception *a1)
{
  std::deque<std::pair<std::shared_ptr<Espresso::abstract_context>,Espresso::compute_path>>::~deque[abi:ne180100](v3);
  uint64_t v6 = *(std::__shared_weak_count **)(v1 + 120);
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }
  if (*v4) {
    nitro::nitro_function::nitro_function(*v4);
  }
  uint64_t v7 = *(std::__shared_weak_count **)(v1 + 88);
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  if (*(char *)(v1 + 79) < 0) {
    operator delete(*(void **)(v1 + 56));
  }
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy(v2, *(void **)(v1 + 24));
  uint64_t v8 = *(std::__shared_weak_count **)(v1 + 8);
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  _Unwind_Resume(a1);
}

BOOL Espresso::generic_topk_kernel::has_dynamic_top_shape(Espresso::generic_topk_kernel *this, unint64_t a2)
{
  return a2 > 1;
}

void Espresso::net::set_analysis<Espresso::analysis_debug_metadata>(uint64_t a1, void *a2)
{
  if (!*a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v9, "Null analysis");
    std::runtime_error::runtime_error(exception, &v9);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v8 = *(void *)(*(void *)*a2 - 8);
  v9.__r_.__value_.__r.__words[0] = (std::string::size_type)&v8;
  uint64_t v3 = std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::__emplace_unique_key_args<std::type_index,std::piecewise_construct_t const&,std::tuple<std::type_index&&>,std::tuple<>>(a1 + 1120, (uint64_t)&v8, (uint64_t)&std::piecewise_construct, (uint64_t **)&v9);
  uint64_t v5 = (void *)*a2;
  uint64_t v4 = a2[1];
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = (std::__shared_weak_count *)v3[4];
  v3[3] = v5;
  v3[4] = v4;
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }
}

void sub_19226AB30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
  {
    operator delete(__p);
    if ((v17 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v17)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v16);
  goto LABEL_6;
}

void anonymous namespace'::SetStringProperties(uint64_t a1, int a2, char *__s)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, __s);
  uint64_t Attribute = MIL::IRObject::TryGetAttribute();
  uint64_t v6 = (MIL::IRValue *)Attribute;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!v6) {
      return;
    }
  }
  else if (!Attribute)
  {
    return;
  }
  uint64_t v7 = (MIL::IRDictionaryValue *)MIL::IRValue::AsDictionary(v6);
  uint64_t v8 = (void *)MIL::IRDictionaryValue::begin(v7);
  uint64_t v9 = MIL::IRDictionaryValue::end(v7);
  if (v8 != (void *)v9)
  {
    uint64_t v10 = (void *)v9;
    uint64_t v11 = (uint64_t **)(a1 + 472);
    do
    {
      MIL::IRValue::GetScalar<std::string>();
      MIL::IRValue::GetScalar<std::string>();
      if (__s == "E5_FlagsEir")
      {
        v20[0] = &__p;
        uint64_t v16 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v11, &__p, (uint64_t)&std::piecewise_construct, (long long **)v20);
        std::string::operator=((std::string *)(v16 + 7), &__str);
      }
      else if (__s == "E5_FlagsAne")
      {
        std::string::basic_string[abi:ne180100]<0>(v20, "anec_flags");
        unint64_t v12 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>((uint64_t)v11, v20);
        if ((char)v21 < 0) {
          operator delete(v20[0]);
        }
        if ((void *)(a1 + 480) == v12)
        {
          std::string::basic_string[abi:ne180100]<0>(v20, "anec_flags");
          v18[0] = v20;
          int v17 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v11, v20, (uint64_t)&std::piecewise_construct, (_OWORD **)v18);
          std::string::operator=((std::string *)((char *)v17 + 56), &__p);
        }
        else
        {
          std::operator+<char>();
          std::string::basic_string[abi:ne180100]<0>(v18, "anec_flags");
          uint64_t v24 = v18;
          uint64_t v13 = (std::string *)((char *)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v11, v18, (uint64_t)&std::piecewise_construct, (_OWORD **)&v24)+ 56);
          if ((v21 & 0x80u) == 0) {
            unint64_t v14 = v20;
          }
          else {
            unint64_t v14 = (void **)v20[0];
          }
          if ((v21 & 0x80u) == 0) {
            std::string::size_type v15 = v21;
          }
          else {
            std::string::size_type v15 = (std::string::size_type)v20[1];
          }
          std::string::append(v13, (const std::string::value_type *)v14, v15);
          if (v19 < 0) {
            operator delete(v18[0]);
          }
        }
        if ((char)v21 < 0) {
          operator delete(v20[0]);
        }
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      uint64_t v8 = (void *)*v8;
    }
    while (v8 != v10);
  }
}

void sub_19226ADB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  _Unwind_Resume(exception_object);
}

void *std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  unint64_t v8 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v4 = v8;
      if (v8 >= v10) {
        unint64_t v4 = v8 % v10;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v8;
    }
    uint64_t v13 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(void **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100]((unsigned __int8 *)i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x30uLL);
  *(void *)uint64_t i = 0;
  *((void *)i + 1) = v9;
  uint64_t v16 = *a4;
  long long v17 = **a4;
  *((void *)i + 4) = *((void *)*a4 + 2);
  *((_OWORD *)i + 1) = v17;
  *((void *)v16 + 1) = 0;
  *((void *)v16 + 2) = 0;
  *(void *)uint64_t v16 = 0;
  *((_DWORD *)i + 10) = 0;
  float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v19 = *(float *)(a1 + 32);
  if (!v10 || (float)(v19 * (float)v10) < v18)
  {
    BOOL v20 = 1;
    if (v10 >= 3) {
      BOOL v20 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v10);
    unint64_t v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22) {
      size_t v23 = v22;
    }
    else {
      size_t v23 = v21;
    }
    std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__rehash<true>(a1, v23);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
      else {
        unint64_t v4 = v9;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v9;
    }
  }
  uint64_t v24 = *(void *)a1;
  uint64_t v25 = *(void **)(*(void *)a1 + 8 * v4);
  if (v25)
  {
    *(void *)uint64_t i = *v25;
LABEL_38:
    void *v25 = i;
    goto LABEL_39;
  }
  *(void *)uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v24 + 8 * v4) = a1 + 16;
  if (*(void *)i)
  {
    unint64_t v26 = *(void *)(*(void *)i + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v26 >= v10) {
        v26 %= v10;
      }
    }
    else
    {
      v26 &= v10 - 1;
    }
    uint64_t v25 = (void *)(*(void *)a1 + 8 * v26);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_19226B070(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,unsigned long>,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

BOOL Espresso::generic_general_slice_kernel::has_dynamic_top_shape(Espresso::generic_general_slice_kernel *this, unint64_t a2)
{
  uint64_t v2 = *((int *)this + 94);
  if (v2 != -1)
  {
    if (!v2) {
      return 0;
    }
    for (uint64_t i = (char *)this + 345; *(i - 5) && *i; ++i)
    {
      if (!--v2) {
        return 0;
      }
    }
  }
  return a2 > 1;
}

void Espresso::net::set_analysis<Espresso::analysis_to_preserve_mil_types>(uint64_t a1, void *a2)
{
  if (!*a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v9, "Null analysis");
    std::runtime_error::runtime_error(exception, &v9);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v8 = *(void *)(*(void *)*a2 - 8);
  v9.__r_.__value_.__r.__words[0] = (std::string::size_type)&v8;
  uint64_t v3 = std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::__emplace_unique_key_args<std::type_index,std::piecewise_construct_t const&,std::tuple<std::type_index&&>,std::tuple<>>(a1 + 1120, (uint64_t)&v8, (uint64_t)&std::piecewise_construct, (uint64_t **)&v9);
  uint64_t v5 = (void *)*a2;
  uint64_t v4 = a2[1];
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = (std::__shared_weak_count *)v3[4];
  v3[3] = v5;
  v3[4] = v4;
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }
}

void sub_19226B1BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
  {
    operator delete(__p);
    if ((v17 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v17)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v16);
  goto LABEL_6;
}

void Espresso::net::get_analysis_if_existing<Espresso::analysis_debug_metadata>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::find<std::type_index>((void *)(a1 + 1120), (uint64_t)&v8);
  if (!v3)
  {
    *a2 = 0;
    a2[1] = 0;
    return;
  }
  uint64_t v4 = v3;
  uint64_t v5 = (const void *)v3[3];
  uint64_t v6 = (std::__shared_weak_count *)v4[4];
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v5
  {
    *a2 = v7;
    a2[1] = v6;
    if (!v6) {
      return;
    }
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    if (!v6) {
      return;
    }
  }
  nitro::nitro_function::nitro_function(v6);
}

void Espresso::MILTranslator::TypedEspressoBuilder::~TypedEspressoBuilder(Espresso::MILTranslator::TypedEspressoBuilder *this)
{
  std::__hash_table<std::__hash_value_type<std::string,Espresso::training_transform_options>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::training_transform_options>>>::~__hash_table((uint64_t)this + 280);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 240);
  std::__hash_table<std::__hash_value_type<std::string,Espresso::training_transform_options>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::training_transform_options>>>::~__hash_table((uint64_t)this + 200);
  std::deque<std::pair<std::shared_ptr<Espresso::abstract_context>,Espresso::compute_path>>::~deque[abi:ne180100]((uint64_t)this + 136);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 15);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 13);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 11);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  if (*((char *)this + 79) < 0) {
    operator delete(*((void **)this + 7));
  }
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)this + 16, *((void **)this + 3));
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,Espresso::training_transform_options>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::training_transform_options>>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void **)*v2;
      if (*((char *)v2 + 39) < 0) {
        operator delete(v2[2]);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

uint64_t std::deque<std::pair<std::shared_ptr<Espresso::abstract_context>,Espresso::compute_path>>::~deque[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 8);
  uint64_t v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    uint64_t v3 = *(void ***)(a1 + 8);
    *(void *)(a1 + 40) = 0;
    unint64_t v10 = 0;
  }
  else
  {
    unint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = &v2[v4 / 0xAA];
    unint64_t v6 = (unint64_t)*v5 + 24 * (v4 % 0xAA);
    unint64_t v7 = (unint64_t)v2[(*(void *)(a1 + 40) + v4) / 0xAA] + 24 * ((*(void *)(a1 + 40) + v4) % 0xAA);
    if (v6 != v7)
    {
      while (1)
      {
        uint64_t v8 = *(std::__shared_weak_count **)(v6 + 8);
        if (v8)
        {
          if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
            break;
          }
        }
        v6 += 24;
        if (v6 - (void)*v5 == 4080) {
          goto LABEL_8;
        }
LABEL_4:
        if (v6 == v7)
        {
          uint64_t v2 = *(void ***)(a1 + 8);
          uint64_t v3 = *(void ***)(a1 + 16);
          goto LABEL_12;
        }
      }
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
      v6 += 24;
      if (v6 - (void)*v5 != 4080) {
        goto LABEL_4;
      }
LABEL_8:
      unint64_t v9 = (unint64_t)v5[1];
      ++v5;
      unint64_t v6 = v9;
      goto LABEL_4;
    }
LABEL_12:
    *(void *)(a1 + 40) = 0;
    unint64_t v10 = (char *)v3 - (char *)v2;
    if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
    {
      do
      {
        operator delete(*v2);
        uint64_t v3 = *(void ***)(a1 + 16);
        uint64_t v2 = (void **)(*(void *)(a1 + 8) + 8);
        *(void *)(a1 + 8) = v2;
        unint64_t v10 = (char *)v3 - (char *)v2;
      }
      while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
    }
  }
  unint64_t v11 = v10 >> 3;
  if (v11 == 1)
  {
    uint64_t v12 = 85;
    goto LABEL_19;
  }
  if (v11 == 2)
  {
    uint64_t v12 = 170;
LABEL_19:
    *(void *)(a1 + 32) = v12;
  }
  if (v2 != v3)
  {
    do
    {
      uint64_t v13 = *v2++;
      operator delete(v13);
    }
    while (v2 != v3);
    uint64_t v15 = *(void *)(a1 + 8);
    uint64_t v14 = *(void *)(a1 + 16);
    if (v14 != v15) {
      *(void *)(a1 + 16) = v14 + ((v15 - v14 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::unordered_set<std::string>::unordered_set<std::__wrap_iter<std::string const*>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a2 != a3)
  {
    uint64_t v5 = a2;
    do
    {
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a1, v5, v5);
      v5 += 24;
    }
    while (v5 != a3);
  }
  return a1;
}

void sub_19226B60C(_Unwind_Exception *a1)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::vector<int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<int>>>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<unsigned long>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  unint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

BOOL anonymous namespace'::HasLoop(uint64_t a1)
{
  uint64_t v1 = (void ***)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  uint64_t v2 = **v1;
  uint64_t v3 = (*v1)[1];
  if (v2 != v3)
  {
    while (1)
    {
      uint64_t v4 = *v2;
      uint64_t v5 = (void **)(*(uint64_t (**)(void))(*(void *)*v2 + 208))(*v2);
      unint64_t v6 = (void *)**v5;
      unint64_t v7 = (void *)(*v5)[1];
      while (v6 != v7)
      {
          return v2 != (*v1)[1];
        v6 += 2;
      }
      uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 56))(v4);
      int v9 = *(char *)(v8 + 23);
      if (v9 < 0)
      {
        if (*(void *)(v8 + 8) == 10)
        {
          uint64_t v8 = *(void *)v8;
LABEL_11:
          if (*(void *)v8 == 0x6F6C5F656C696877 && *(_WORD *)(v8 + 8) == 28783) {
            return v2 != (*v1)[1];
          }
        }
      }
      else if (v9 == 10)
      {
        goto LABEL_11;
      }
      v2 += 2;
      if (v2 == v3)
      {
        uint64_t v2 = v3;
        return v2 != (*v1)[1];
      }
    }
  }
  return v2 != (*v1)[1];
}

void Espresso::run_dispatch_v2(uint64_t a1, uint64_t *a2, void *a3, Espresso ***a4, uint64_t a5, unsigned int *a6, void *a7)
{
  uint64_t v386 = *MEMORY[0x1E4F143B8];
  v366 = a7;
  int v9 = (***(uint64_t (****)(void))(*a2 + 8))(*(void *)(*a2 + 8));
  v327 = a3;
  v328 = a2;
  uint64_t v10 = *a2;
  uint64_t v11 = *(void *)(*a2 + 128);
  int v326 = v9;
  uint64_t v314 = v11;
  BOOL v311 = (v9 & 0xFFFFFFFE) == 10006;
  if ((v9 & 0xFFFFFFFE) != 0x2716) {
    goto LABEL_20;
  }
  uint64_t v12 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&__p, "experimental.ane.use_faux_dispatch");
  std::string::basic_string[abi:ne180100]<0>(&buf, "0");
  Espresso::map_const_get<std::map<std::string,std::string>>(v12 + 472, (uint64_t)&__p, (uint64_t)&buf, (std::string *)&v356);
  a3 = v327;
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  if ((v372[7] & 0x80000000) != 0) {
    operator delete((void *)__p);
  }
  char v14 = BYTE7(v357);
  if (SBYTE7(v357) < 0)
  {
    uint64_t v15 = (long long *)v356;
    if (*((void *)&v356 + 1) != 1)
    {
LABEL_18:
      operator delete(v15);
      goto LABEL_19;
    }
LABEL_10:
    if (*(unsigned char *)v15 == 49)
    {
      uint64_t v16 = v366;
      if (v366 && !*(_DWORD *)((char *)v366 + *(void *)(*v366 - 24) + 32))
      {
        uint64_t v239 = *a2;
        v240 = (std::__shared_weak_count *)a2[1];
        if (v240) {
          atomic_fetch_add_explicit(&v240->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        long long v242 = (Espresso::net *)*v327;
        float v241 = (std::__shared_weak_count *)v327[1];
        if (v241) {
          atomic_fetch_add_explicit(&v241->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        __n128 v243 = (Espresso *)(***(uint64_t (****)(void))(v239 + 8))(*(void *)(v239 + 8));
        *(_DWORD *)(a1 + 48) = 0;
        *(_OWORD *)(a1 + 16) = 0u;
        *(_OWORD *)(a1 + 32) = 0u;
        *(_OWORD *)a1 = 0u;
        *(_WORD *)(a1 + 52) = 256;
        v245 = Espresso::espresso_os_log_subsystem(v243, v244);
        if (os_log_type_enabled(v245, OS_LOG_TYPE_DEBUG))
        {
          LOWORD(__p) = 0;
          _os_log_debug_impl(&dword_1920CB000, v245, OS_LOG_TYPE_DEBUG, "Restoring network precompilation info", (uint8_t *)&__p, 2u);
        }

        char v246 = Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::shared();
        std::string::basic_string[abi:ne180100]<0>(&__p, "json");
        Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::make(&buf, (uint64_t)v246, &__p);
        if ((v372[7] & 0x80000000) != 0) {
          operator delete((void *)__p);
        }
        std::string::size_type v247 = buf.__r_.__value_.__r.__words[0];
        (*(void (**)(std::string::size_type, void *))(*(void *)buf.__r_.__value_.__l.__data_ + 280))(buf.__r_.__value_.__r.__words[0], v16);
        std::string::size_type size = (std::__shared_weak_count *)buf.__r_.__value_.__l.__size_;
        *(void *)v376 = v247;
        *(void *)v377 = buf.__r_.__value_.__l.__size_;
        if (buf.__r_.__value_.__l.__size_) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(buf.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
        }
        Espresso::net::restore_precompilation_info(v242, (uint64_t *)v376);
        if (size) {
          nitro::nitro_function::nitro_function(size);
        }
        uint64_t v249 = *((void *)v242 + 89);
        v250 = (std::__shared_weak_count *)*((void *)v242 + 90);
        if (v250) {
          atomic_fetch_add_explicit(&v250->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        *(void *)(a1 + 32) = v249;
        *(void *)(a1 + 40) = v250;
        if (*(unsigned char *)(v239 + 56))
        {
          if (v240)
          {
            atomic_fetch_add_explicit(&v240->__shared_owners_, 1uLL, memory_order_relaxed);
            *((void *)&__p + 1) = v240;
            atomic_fetch_add_explicit(&v240->__shared_owners_, 1uLL, memory_order_relaxed);
            *(void *)&long long __p = v239;
            memset(&v372[8], 0, 24);
            __asm { FMOV            V0.2S, #1.0 }
            uint64_t v373 = _D0;
            nitro::nitro_function::nitro_function(v240);
          }
          else
          {
            long long __p = (unint64_t)v239;
            memset(&v372[8], 0, 24);
            __asm { FMOV            V0.2S, #1.0 }
            uint64_t v373 = _D0;
          }
          if (v250) {
            atomic_fetch_add_explicit(&v250->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v374 = v249;
          v375 = v250;
          *(void *)v372 = 100;
          std::allocate_shared[abi:ne180100]<Espresso::cpu_context_transfer_algo_t,std::allocator<Espresso::cpu_context_transfer_algo_t>,Espresso::cpu_context_transfer_algo_options &,void>((Espresso::cpu_context_transfer_algo_t **)&v341, (const Espresso::cpu_context_transfer_algo_options *)&__p);
          *(_OWORD *)a1 = v341;
          if (v375) {
            nitro::nitro_function::nitro_function(v375);
          }
          *(void *)&long long v341 = &v372[8];
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v341);
          if (*((void *)&__p + 1)) {
            nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&__p + 1));
          }
        }
        v291 = (char *)operator new(0x70uLL);
        *((void *)v291 + 1) = 0;
        *((void *)v291 + 2) = 0;
        *(void *)v291 = &unk_1EE381D50;
        *(_OWORD *)(v291 + 40) = 0u;
        *(_OWORD *)(v291 + 24) = 0u;
        *(_OWORD *)(v291 + 56) = 0u;
        *((void *)v291 + 6) = v291 + 56;
        *((void *)v291 + 10) = 0;
        *((void *)v291 + 9) = v291 + 80;
        *((void *)v291 + 12) = 0;
        *((void *)v291 + 13) = 0;
        *((void *)v291 + 11) = 0;
        *(void *)(a1 + 16) = v291 + 24;
        *(void *)(a1 + 24) = v291;
        if (size) {
          nitro::nitro_function::nitro_function(size);
        }
        if (v241) {
          nitro::nitro_function::nitro_function(v241);
        }
        if (v240) {
          nitro::nitro_function::nitro_function(v240);
        }
        if (SBYTE7(v357) < 0) {
          operator delete((void *)v356);
        }
        return;
      }
      int v17 = Espresso::espresso_os_log_subsystem((Espresso *)v15, v13);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(__p) = 0;
        _os_log_debug_impl(&dword_1920CB000, v17, OS_LOG_TYPE_DEBUG, "Missing precompilation info. Fallback to full dispatch.", (uint8_t *)&__p, 2u);
      }

      char v14 = BYTE7(v357);
      a3 = v327;
    }
    if ((v14 & 0x80) == 0) {
      goto LABEL_19;
    }
    uint64_t v15 = (long long *)v356;
    goto LABEL_18;
  }
  if (SBYTE7(v357) == 1)
  {
    uint64_t v15 = &v356;
    goto LABEL_10;
  }
LABEL_19:
  uint64_t v10 = *a2;
  uint64_t v11 = *(void *)(*a2 + 128);
LABEL_20:
  int v18 = *(unsigned __int8 *)(v10 + 127);
  BOOL v20 = (v11 & 2) == 0 && v11 != 0;
  BOOL v21 = (v11 & 2) == 0;
  if (v18) {
    int v22 = v21;
  }
  else {
    int v22 = v20;
  }
  uint64_t v23 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&v356, "multi_head");
  std::string::basic_string[abi:ne180100]<0>(&buf, "0");
  Espresso::map_const_get<std::map<std::string,std::string>>(v23 + 472, (uint64_t)&v356, (uint64_t)&buf, (std::string *)&__p);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  if (SBYTE7(v357) < 0) {
    operator delete((void *)v356);
  }
  if ((v372[7] & 0x80000000) != 0)
  {
    if (*((void *)&__p + 1) == 1)
    {
      p_p = (long long *)__p;
      goto LABEL_38;
    }
LABEL_39:
    BOOL v316 = 0;
    goto LABEL_40;
  }
  if (v372[7] != 1) {
    goto LABEL_39;
  }
  p_p = &__p;
LABEL_38:
  BOOL v316 = *(unsigned __int8 *)p_p == 49;
LABEL_40:
  uint64_t v25 = [MEMORY[0x1E4F1CB18] standardUserDefaults];
  uint64_t v318 = *MEMORY[0x1E4F283E0];
  unint64_t v26 = objc_msgSend(v25, "persistentDomainForName:");

  uint64_t v27 = [v26 objectForKeyedSubscript:@"com.espresso.dispatch_version"];
  unint64_t v28 = v27;
  if (v27) {
    int v321 = [v27 intValue];
  }
  else {
    int v321 = 3;
  }

  uint64_t v29 = [v26 objectForKeyedSubscript:@"com.espresso.dispatch_avoid_gpu"];
  unint64_t v30 = v29;
  if (v29) {
    int v22 = [v29 BOOLValue];
  }

  BOOL v31 = [v26 objectForKeyedSubscript:@"com.espresso.dispatch_avoid_cpu"];
  int v32 = v31;
  if (v31) {
    int v33 = [v31 BOOLValue];
  }
  else {
    int v33 = 0;
  }

  uint64_t v34 = getenv("ESPRESSO_DISPATCH_VERSION");
  if (v34) {
    int v321 = atoi(v34);
  }
  unint64_t v35 = [v26 objectForKeyedSubscript:@"features.MPSGraph"];
  unint64_t v36 = v35;
  if (v35) {
    int v18 = [v35 BOOLValue];
  }

  uint8x8_t v37 = [v26 objectForKeyedSubscript:@"com.apple.espresso.dispatch_allow_loop_accelerate"];
  if (v37)
  {
    int v38 = *(unsigned __int8 *)(*a2 + 115);
    if (!*(unsigned char *)(*a2 + 115)) {
      int v38 = [v37 BOOLValue];
    }
    BOOL v39 = v38 != 0;
  }
  else
  {
    BOOL v39 = 0;
  }

  if ((v372[7] & 0x80000000) != 0) {
    operator delete((void *)__p);
  }
  uint64_t v40 = *v327;
  std::string::basic_string[abi:ne180100]<0>(&v356, "dispatch_ane_mpsgraph");
  std::string::basic_string[abi:ne180100]<0>(&buf, "0");
  Espresso::map_const_get<std::map<std::string,std::string>>(v40 + 472, (uint64_t)&v356, (uint64_t)&buf, (std::string *)&__p);
  if ((v372[7] & 0x80000000) != 0)
  {
    if (*((void *)&__p + 1) == 1) {
      v18 |= *(unsigned char *)__p == 49;
    }
    operator delete((void *)__p);
  }
  else if (v372[7] == 1)
  {
    v18 |= __p == 49;
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  if (SBYTE7(v357) < 0) {
    operator delete((void *)v356);
  }
  BOOL is_mil = Espresso::net::model_is_mil((Espresso::net *)*v327);
  BOOL v43 = is_mil;
  BOOL v44 = v33 == 0;
  if (v33) {
    int v45 = 0;
  }
  else {
    int v45 = v22;
  }
  int v325 = v45;
  if (v33 && ((v22 ^ 1) & 1) == 0)
  {
    BOOL v46 = Espresso::espresso_os_log_subsystem((Espresso *)is_mil, v42);
    if (os_log_type_enabled(v46, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(__p) = 0;
      _os_log_debug_impl(&dword_1920CB000, v46, OS_LOG_TYPE_DEBUG, "[run_dispatch_v2] Both avoid_cpu and avoid_gpu were set! resetting them to false.", (uint8_t *)&__p, 2u);
    }

    int v325 = 0;
    BOOL v44 = 1;
  }
  BOOL v317 = v44;
  uint64_t v47 = *v328;
  unint64_t v48 = (std::__shared_weak_count *)v328[1];
  if (v48) {
    atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  LODWORD(__p) = v326;
  if (is_espresso_running_on_virtual_apple_machine(void)::onceToken != -1) {
    dispatch_once(&is_espresso_running_on_virtual_apple_machine(void)::onceToken, &__block_literal_global_9369);
  }
  int v315 = is_espresso_running_on_virtual_apple_machine(void)::result;
  if (is_espresso_running_on_virtual_apple_machine(void)::result || *(unsigned char *)(v47 + 121))
  {
    int v325 = 1;
    *(unsigned char *)(v47 + 121) = 1;
    if (is_gpu((int *)&__p))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Found virtual machine - falling back to CPU.");
      exception->__vftable = (std::runtime_error_vtbl *)&unk_1EE364200;
    }
  }
  int v319 = v18 | v43;
  if (v48) {
    nitro::nitro_function::nitro_function(v48);
  }
  uint64_t v49 = *v328;
  *(unsigned char *)(*v328 + 115) = v39;
  if (v39)
  {
    uint64_t v50 = (Espresso::net **)v327;
    goto LABEL_88;
  }
  if ((v326 - 100) < 2)
  {
    uint64_t v50 = (Espresso::net **)v327;
    goto LABEL_244;
  }
  uint64_t v50 = (Espresso::net **)v327;
  if (!v326 || v326 == 80000)
  {
LABEL_244:
    v363[0] = &v366;
    v363[1] = v50;
    if (v326 == 50000 && !v325)
    {
      *(_DWORD *)v376 = 101;
      LODWORD(v341) = 50002;
      v127 = (std::__shared_weak_count *)v328[1];
      v362[0] = *v328;
      v362[1] = v127;
      if (v127) {
        atomic_fetch_add_explicit(&v127->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      v128 = (std::__shared_weak_count *)v50[1];
      v361[0] = (uint64_t)*v50;
      v361[1] = (uint64_t)v128;
      if (v128) {
        atomic_fetch_add_explicit(&v128->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      LODWORD(v356) = 1;
      try_dispatch((uint64_t)&__p, v362, v361, a4, a5, a6, (int *)v376, (int *)&v356);
      if (v128) {
        nitro::nitro_function::nitro_function(v128);
      }
      if (v127) {
        nitro::nitro_function::nitro_function(v127);
      }
      uint64_t v129 = **(void **)v372;
      uint64_t v130 = *(void *)(*(void *)v372 + 8);
      if (check_network_has_no_convolutions(**(void **)v372, v130)
        && check_network_has_batch_matmul_and_softmax_nd(v129, v130))
      {
        Espresso::create_context((int *)&v341, &buf);
        long long v131 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
        *(unsigned char *)(buf.__r_.__value_.__r.__words[0] + 56) = 1;
        long long v355 = v131;
        if (*((void *)&v131 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v131 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        uint64_t v132 = (std::__shared_weak_count *)v50[1];
        v354[0] = (uint64_t)*v50;
        v354[1] = (uint64_t)v132;
        if (v132) {
          atomic_fetch_add_explicit(&v132->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        LODWORD(v338) = 0;
        LODWORD(v368) = 0;
        try_dispatch((uint64_t)&v356, &v355, v354, a4, a5, (unsigned int *)&v338, (int *)v376, (int *)&v368);
        if (v132) {
          nitro::nitro_function::nitro_function(v132);
        }
        if (*((void *)&v131 + 1)) {
          nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v131 + 1));
        }
        if (v359 < *(float *)&v373)
        {
          v296 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v296, "");
          v296->__vftable = (std::runtime_error_vtbl *)&unk_1EE364E10;
        }
        if (*((void *)&v358 + 1)) {
          nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v358 + 1));
        }
        if (*((void *)&v357 + 1)) {
          nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v357 + 1));
        }
        if (*((void *)&v356 + 1)) {
          nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v356 + 1));
        }
        if (buf.__r_.__value_.__l.__size_) {
          nitro::nitro_function::nitro_function((std::__shared_weak_count *)buf.__r_.__value_.__l.__size_);
        }
      }
      if (*(void *)&v372[24]) {
        nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&v372[24]);
      }
      if (*(void *)&v372[8]) {
        nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&v372[8]);
      }
      if (*((void *)&__p + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&__p + 1));
      }
    }
    BOOL v133 = !Espresso::net::model_is_mil(*v50);
    if (v326 != 50005) {
      LOBYTE(v133) = 1;
    }
    if (!v133)
    {
      int v134 = (void *)(*(uint64_t (**)(void))(*(void *)*v328 + 120))();
      id v135 = [v134 device];
      if (Espresso::hardware::enable_mpsgraph_for_hardware(void *)::once_token != -1) {
        dispatch_once(&Espresso::hardware::enable_mpsgraph_for_hardware(void *)::once_token, &__block_literal_global_32_7286);
      }
      if (!Espresso::hardware::enable_mpsgraph_for_hardware(void *)::has_ane)
      {
        v293 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v293, "MPSGraph is not enabled for this hardware; re-loading on classic MPS engine.");
        v293->__vftable = (std::runtime_error_vtbl *)&unk_1EE368F10;
      }
    }
    if (v321 < 2 || (v326 - 10006) > 5 || ((1 << (v326 - 22)) & 0x27) == 0)
    {
      if ((***(unsigned int (****)(void))(*v328 + 8))(*(void *)(*v328 + 8))
        && (***(unsigned int (****)(void))(*v328 + 8))(*(void *)(*v328 + 8)) != 100)
      {
        LODWORD(__p) = 100;
        uint64_t v137 = (std::__shared_weak_count *)v328[1];
        v331[0] = *v328;
        v331[1] = v137;
        if (v137) {
          atomic_fetch_add_explicit(&v137->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        char v138 = (std::__shared_weak_count *)v327[1];
        v330[0] = *v327;
        v330[1] = (uint64_t)v138;
        uint64_t v139 = a1;
        if (v138) {
          atomic_fetch_add_explicit(&v138->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        LODWORD(v356) = 0;
        try_dispatch(a1, v331, v330, a4, a5, a6, (int *)&__p, (int *)&v356);
      }
      else
      {
        LODWORD(__p) = 0;
        uint64_t v137 = (std::__shared_weak_count *)v328[1];
        v333[0] = *v328;
        v333[1] = v137;
        if (v137) {
          atomic_fetch_add_explicit(&v137->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        char v138 = (std::__shared_weak_count *)v327[1];
        v332[0] = *v327;
        v332[1] = (uint64_t)v138;
        uint64_t v139 = a1;
        if (v138) {
          atomic_fetch_add_explicit(&v138->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        LODWORD(v356) = 0;
        try_dispatch(a1, v333, v332, a4, a5, a6, (int *)&__p, (int *)&v356);
      }
      if (v138) {
        nitro::nitro_function::nitro_function(v138);
      }
      if (v137) {
        nitro::nitro_function::nitro_function(v137);
      }
      unint64_t v147 = (Espresso::net *)*v327;
      uint64_t v149 = *(void *)(v139 + 32);
      uint64_t v148 = *(void *)(v139 + 40);
      if (v148) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v148 + 8), 1uLL, memory_order_relaxed);
      }
      *((void *)v147 + 89) = v149;
      uint64_t v150 = (std::__shared_weak_count *)*((void *)v147 + 90);
      *((void *)v147 + 90) = v148;
      if (!v150) {
        return;
      }
LABEL_538:
      nitro::nitro_function::nitro_function(v150);
      return;
    }
    int v353 = 1;
    unsigned int v352 = 50001;
    int v351 = 101;
    int v350 = 50003;
    if (v319)
    {
      unsigned int v352 = 50006;
      int v353 = 0;
      char v136 = v327;
      if (v326 != 10008)
      {
        int v350 = 50002;
        unsigned int v352 = 50005;
LABEL_321:
        int v351 = 100;
      }
    }
    else
    {
      char v136 = v327;
      if (v326 != 10008)
      {
        unsigned int v352 = 50000;
        int v350 = 50002;
        goto LABEL_321;
      }
    }
    uint64_t v151 = *v328;
    if (*(unsigned char *)(*v328 + 127))
    {
      unsigned int v352 = 50008;
      int v350 = 50008;
      int v353 = 0;
      if (v314)
      {
        unsigned int v152 = (***(uint64_t (****)(void))(v151 + 8))(*(void *)(v151 + 8));
        BOOL v154 = 1;
        if (v152 == 10008)
        {
          char v136 = v327;
        }
        else
        {
          char v136 = v327;
          if (v152 != 10011) {
            BOOL v154 = v152 >> 1 == 5003;
          }
          if (!v154) {
            goto LABEL_389;
          }
        }
        if ((v314 & 4) == 0)
        {
          Espresso::run_dispatch_v2(std::shared_ptr<Espresso::abstract_context>,std::shared_ptr<Espresso::net>,std::vector<std::shared_ptr<Espresso::SerDes::generic_serdes_object>> const&,Espresso::network_shape const&,Espresso::compute_path const&,std::istream *)::$_0::operator()((Espresso *)v363, v153);
          v294 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          v295 = v294;
          if ((v314 & 2) == 0)
          {
            Espresso::dispatch_error_use_cpu_script::dispatch_error_use_cpu_script(v294);
          }
          Espresso::dispatch_error_use_mpsgraph_compiler::dispatch_error_use_mpsgraph_compiler(v294);
        }
      }
    }
LABEL_389:
    if (v315)
    {
      unsigned int v352 = 50001;
      int v350 = 50003;
      if (v319)
      {
        unsigned int v352 = 50006;
        int v353 = 0;
      }
    }
    int v178 = (std::__shared_weak_count *)v328[1];
    v349[0] = *v328;
    v349[1] = v178;
    if (v178) {
      atomic_fetch_add_explicit(&v178->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    unint64_t v179 = (std::__shared_weak_count *)v136[1];
    v348[0] = *v136;
    v348[1] = (uint64_t)v179;
    if (v179) {
      atomic_fetch_add_explicit(&v179->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    LODWORD(v356) = 0;
    try_dispatch((uint64_t)&__p, v349, v348, a4, a5, a6, &v351, (int *)&v356);
    if (v179) {
      nitro::nitro_function::nitro_function(v179);
    }
    if (v178) {
      nitro::nitro_function::nitro_function(v178);
    }
    int v180 = (std::__shared_weak_count *)v328[1];
    v347[0] = *v328;
    v347[1] = v180;
    if (v180) {
      atomic_fetch_add_explicit(&v180->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v181 = (std::__shared_weak_count *)v136[1];
    v346[0] = *v136;
    v346[1] = (uint64_t)v181;
    if (v181) {
      atomic_fetch_add_explicit(&v181->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    try_dispatch((uint64_t)&v356, v347, v346, a4, a5, a6, (int *)&v352, &v353);
    if (v181) {
      nitro::nitro_function::nitro_function(v181);
    }
    if (v180) {
      nitro::nitro_function::nitro_function(v180);
    }
    if (v316)
    {
      HIBYTE(v360) = 0;
      int v184 = Espresso::espresso_os_log_subsystem(v182, v183);
      if (os_log_type_enabled(v184, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        _os_log_debug_impl(&dword_1920CB000, v184, OS_LOG_TYPE_DEBUG, "[run_dispatch_v2]: rejecting ane-gpu due to multihead", (uint8_t *)&buf, 2u);
      }
    }
    int v185 = Espresso::espresso_os_log_subsystem(v182, v183);
    if (os_log_type_enabled(v185, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 67109888;
      HIDWORD(buf.__r_.__value_.__r.__words[0]) = HIBYTE(v360);
      LOWORD(buf.__r_.__value_.__r.__words[1]) = 2048;
      *(double *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = v359;
      WORD1(buf.__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(buf.__r_.__value_.__r.__words[2]) = BYTE5(v373);
      LOWORD(v382[0]) = 2048;
      *(double *)((char *)v382 + 2) = *(float *)&v373;
      _os_log_debug_impl(&dword_1920CB000, v185, OS_LOG_TYPE_DEBUG, "[run_dispatch_v2] fb_gpu=(%d %.3f) fb_cpu=(%d %.3f)", (uint8_t *)&buf, 0x22u);
    }

    *(void *)&long long v341 = &v350;
    *((void *)&v341 + 1) = v327;
    v342 = a4;
    uint64_t v343 = a5;
    v344 = &v366;
    v345 = &v351;
    uint64_t PlatformHeuristics = GetPlatformHeuristics((Espresso::net **)v327);
    v187 = (Espresso::net *)*v327;
    std::string::basic_string[abi:ne180100]<0>(v376, "espresso.dispatch.v3_enable");
    BOOL v188 = v317;
    std::string::basic_string[abi:ne180100]<0>(&v338, "1");
    Espresso::map_const_get<std::map<std::string,std::string>>((uint64_t)v187 + 472, (uint64_t)v376, (uint64_t)&v338, &buf);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    {
      if (buf.__r_.__value_.__l.__size_ == 1)
      {
        v190 = (void *)buf.__r_.__value_.__r.__words[0];
        BOOL v192 = *buf.__r_.__value_.__l.__data_ == 48 || v321 != 3;
      }
      else
      {
        BOOL v192 = v321 != 3;
        v190 = (void *)buf.__r_.__value_.__r.__words[0];
      }
      if (PlatformHeuristics) {
        int v194 = v192;
      }
      else {
        int v194 = 1;
      }
      operator delete(v190);
    }
    else
    {
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) == 1) {
        BOOL v189 = buf.__r_.__value_.__s.__data_[0] != 48 && v321 == 3;
      }
      else {
        BOOL v189 = v321 == 3;
      }
      int v194 = !v189 || PlatformHeuristics == 0;
    }
    if (v340 < 0) {
      operator delete(v338);
    }
    if (v378 < 0) {
      operator delete(*(void **)v376);
    }
    double v195 = 0.0;
    if ((v194 & 1) == 0) {
      double v195 = (*(double (**)(uint64_t))(*(void *)PlatformHeuristics + 168))(PlatformHeuristics);
    }
    uint64_t v196 = *v328;
    if (HIBYTE(v360) | v325 || *(unsigned char *)(v196 + 137))
    {
LABEL_476:
      uint64_t v206 = __p;
      long long v207 = (std::__shared_weak_count *)v328[1];
      v337[0] = v196;
      v337[1] = v207;
      if (v207) {
        atomic_fetch_add_explicit(&v207->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      v208 = *(std::__shared_weak_count **)&v372[8];
      v336[0] = *(uint64_t **)v372;
      v336[1] = *(uint64_t **)&v372[8];
      if (*(void *)&v372[8]) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&v372[8] + 8), 1uLL, memory_order_relaxed);
      }
      has_any_fallbacuint64_t k = Espresso::cpu_context_transfer_algo_t::has_any_fallback(v206, (uint64_t)v337, v336);
      if (v208) {
        nitro::nitro_function::nitro_function(v208);
      }
      if (v207) {
        nitro::nitro_function::nitro_function(v207);
      }
      uint64_t v210 = v356;
      v211 = (std::__shared_weak_count *)v328[1];
      v335[0] = *v328;
      v335[1] = v211;
      if (v211) {
        atomic_fetch_add_explicit(&v211->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      v212 = (std::__shared_weak_count *)*((void *)&v357 + 1);
      long long v334 = v357;
      if (*((void *)&v357 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v357 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      v213 = (Espresso *)Espresso::cpu_context_transfer_algo_t::has_any_fallback(v210, (uint64_t)v335, (uint64_t **)&v334);
      int v215 = (int)v213;
      if (v212) {
        nitro::nitro_function::nitro_function(v212);
      }
      if (v211) {
        nitro::nitro_function::nitro_function(v211);
      }
      if (!HIBYTE(v360)) {
        goto LABEL_507;
      }
      int v216 = has_any_fallback | v215;
      if (v359 > *(float *)&v373) {
        int v216 = 0;
      }
      if (v216 != 1 || v325 || (v195 < *(float *)&v373 ? (char v217 = 1) : (char v217 = v194), (v217 & 1) == 0))
      {
LABEL_507:
        BOOL v218 = HIBYTE(v360) && BYTE5(v373) == 0;
        if (!v218 && v188)
        {
          v220 = Espresso::espresso_os_log_subsystem(v213, v214);
          if (os_log_type_enabled(v220, OS_LOG_TYPE_DEBUG))
          {
            LOWORD(buf.__r_.__value_.__l.__data_) = 0;
            _os_log_debug_impl(&dword_1920CB000, v220, OS_LOG_TYPE_DEBUG, "[run_dispatch_v2] selected cpu", (uint8_t *)&buf, 2u);
          }

          std::vector<std::string> v222 = (Espresso::net *)*v327;
          uint64_t v223 = *(void *)&v372[16];
          uint64_t v224 = *(void *)&v372[24];
          if (*(void *)&v372[24]) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&v372[24] + 8), 1uLL, memory_order_relaxed);
          }
          *((void *)v222 + 89) = v223;
          v225 = (std::__shared_weak_count *)*((void *)v222 + 90);
          *((void *)v222 + 90) = v224;
          if (v225) {
            nitro::nitro_function::nitro_function(v225);
          }
          if (!v194) {
            goto LABEL_517;
          }
          BOOL v226 = is_fully_on_fallback(*(char **)(*(void *)&v372[16] + 48), *(char **)(*(void *)&v372[16] + 56));
          if (!v226)
          {
            to_fallback_if_bouncing_too_much((uint64_t)&__p, (const char *)(v319 != 0));
LABEL_517:
            Espresso::run_dispatch_v2(std::shared_ptr<Espresso::abstract_context>,std::shared_ptr<Espresso::net>,std::vector<std::shared_ptr<Espresso::SerDes::generic_serdes_object>> const&,Espresso::network_shape const&,Espresso::compute_path const&,std::istream *)::$_0::operator()((Espresso *)v363, v221);
            long long v228 = __p;
            long long v229 = *(_OWORD *)v372;
            long long __p = 0uLL;
            *(_OWORD *)a1 = v228;
            *(_OWORD *)(a1 + 16) = v229;
            *(void *)v372 = 0;
            *(void *)&v372[8] = 0;
            *(_OWORD *)(a1 + 32) = *(_OWORD *)&v372[16];
            *(void *)&v372[16] = 0;
            *(void *)&v372[24] = 0;
            *(_DWORD *)(a1 + 48) = v373;
            *(_WORD *)(a1 + 52) = WORD2(v373);
            if (*((void *)&v358 + 1)) {
              nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v358 + 1));
            }
LABEL_529:
            if (*((void *)&v357 + 1)) {
              nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v357 + 1));
            }
            if (*((void *)&v356 + 1)) {
              nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v356 + 1));
            }
            if (*(void *)&v372[24]) {
              nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&v372[24]);
            }
            if (*(void *)&v372[8]) {
              nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&v372[8]);
            }
            uint64_t v150 = (std::__shared_weak_count *)*((void *)&__p + 1);
            if (!*((void *)&__p + 1)) {
              return;
            }
            goto LABEL_538;
          }
          v300 = Espresso::espresso_os_log_subsystem((Espresso *)v226, v227);
          if (os_log_type_enabled(v300, OS_LOG_TYPE_DEBUG))
          {
            LOWORD(buf.__r_.__value_.__l.__data_) = 0;
            _os_log_debug_impl(&dword_1920CB000, v300, OS_LOG_TYPE_DEBUG, "[run_dispatch_v2] The network falls back to CPU too often. Please consider running the network on CPU or change the architecture.", (uint8_t *)&buf, 2u);
          }

          v298 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          v299 = &v298->__vftable;
          if (!v319)
          {
            std::runtime_error::runtime_error(v298, "The network falls back to CPU too often. Please consider running the network on CPU or change the architecture.");
            goto LABEL_686;
          }
          goto LABEL_696;
        }
      }
      v230 = Espresso::espresso_os_log_subsystem(v213, v214);
      if (os_log_type_enabled(v230, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        _os_log_debug_impl(&dword_1920CB000, v230, OS_LOG_TYPE_DEBUG, "[run_dispatch_v2] selected gpu", (uint8_t *)&buf, 2u);
      }

      v232 = (Espresso::net *)*v327;
      long long v233 = v358;
      if (*((void *)&v358 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v358 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      *((void *)v232 + 89) = v233;
      long long v234 = (std::__shared_weak_count *)*((void *)v232 + 90);
      *((void *)v232 + 90) = *((void *)&v233 + 1);
      if (v234) {
        nitro::nitro_function::nitro_function(v234);
      }
      if (v194)
      {
        BOOL v235 = is_fully_on_fallback(*(char **)(v358 + 48), *(char **)(v358 + 56));
        if (v235)
        {
          v297 = Espresso::espresso_os_log_subsystem((Espresso *)v235, v236);
          if (os_log_type_enabled(v297, OS_LOG_TYPE_DEBUG))
          {
            LOWORD(buf.__r_.__value_.__l.__data_) = 0;
            _os_log_debug_impl(&dword_1920CB000, v297, OS_LOG_TYPE_DEBUG, "[run_dispatch_v2] The network falls back to GPU too often. Please consider running the network on GPU or change the architecture.", (uint8_t *)&buf, 2u);
          }

          v298 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          v299 = &v298->__vftable;
          if (!v319)
          {
            std::runtime_error::runtime_error(v298, "The network falls back to GPU too often. Please consider running the network on GPU or change the architecture.");
LABEL_686:
            v301 = Espresso::dispatch_error_fallback_at_c_level::~dispatch_error_fallback_at_c_level;
            v303 = &unk_1EE368F10;
            goto LABEL_697;
          }
LABEL_696:
          std::runtime_error::runtime_error(v298, "The network falls back to MPSGraph too often.  Please consider running the network on MPSGraph or change the architecture.");
          v301 = Espresso::dispatch_error_use_mpsgraph::~dispatch_error_use_mpsgraph;
          v303 = &unk_1EE3605B8;
LABEL_697:
          void *v299 = v303;
          __cxa_throw(v299, v302, (void (*)(void *))v301);
        }
        to_fallback_if_bouncing_too_much((uint64_t)&v356, (const char *)(v319 != 0));
      }
      Espresso::run_dispatch_v2(std::shared_ptr<Espresso::abstract_context>,std::shared_ptr<Espresso::net>,std::vector<std::shared_ptr<Espresso::SerDes::generic_serdes_object>> const&,Espresso::network_shape const&,Espresso::compute_path const&,std::istream *)::$_0::operator()((Espresso *)v363, v231);
      long long v237 = v356;
      long long v238 = v357;
      long long v356 = 0uLL;
      *(_OWORD *)a1 = v237;
      *(_OWORD *)(a1 + 16) = v238;
      long long v357 = 0uLL;
      *(_OWORD *)(a1 + 32) = v358;
      long long v358 = 0uLL;
      *(float *)(a1 + 48) = v359;
      *(_WORD *)(a1 + 52) = v360;
      goto LABEL_529;
    }
    Espresso::create_context((int *)&v352, &v338);
    long long v197 = (char *)v338;
    if (!v338) {
      Espresso::throw_exception_selector<Espresso::invalid_context_error>("Could not create GPU context.");
    }
    BOOL v370 = v352 >> 1 == 25000;
    *((unsigned char *)v338 + 56) = 1;
    v198 = v339;
    v368 = v197;
    v369 = v339;
    if (v339) {
      atomic_fetch_add_explicit(&v339->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v199 = (std::__shared_weak_count *)v327[1];
    v367[0] = *v327;
    v367[1] = (uint64_t)v199;
    if (v199) {
      atomic_fetch_add_explicit(&v199->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    *(_DWORD *)v376 = 0;
    try_dispatch((uint64_t)&buf, &v368, v367, a4, a5, (unsigned int *)&v370, &v351, (int *)v376);
    if (v199) {
      nitro::nitro_function::nitro_function(v199);
    }
    if (v198) {
      nitro::nitro_function::nitro_function(v198);
    }
    uint64_t v202 = Espresso::espresso_os_log_subsystem(v200, v201);
    if (os_log_type_enabled(v202, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)v376 = 67109376;
      *(_DWORD *)&v376[4] = v385;
      *(_WORD *)v377 = 2048;
      *(double *)&v377[2] = v384;
      _os_log_debug_impl(&dword_1920CB000, v202, OS_LOG_TYPE_DEBUG, "[run_dispatch_v2] fb_gpu_cpu=(%d %.3f)", v376, 0x12u);
    }

    if (v339) {
      nitro::nitro_function::nitro_function(v339);
    }
    if (v319) {
      goto LABEL_466;
    }
    if (Espresso::net::model_is_mil((Espresso::net *)*v327))
    {
      v306 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v306, "Control flow detected, Please change to use CPU backend for performance boost");
      v307 = Espresso::dispatch_error_use_cpu_script::~dispatch_error_use_cpu_script;
      v309 = (std::runtime_error_vtbl *)&unk_1EE364200;
      goto LABEL_699;
    }
    uint64_t v203 = *(void *)buf.__r_.__value_.__r.__words[2];
    uint64_t v204 = *(void *)(buf.__r_.__value_.__r.__words[2] + 8);
    if (check_network_has_no_convolutions(*(void *)buf.__r_.__value_.__r.__words[2], v204)
      && check_network_has_batch_matmul_and_softmax_nd(v203, v204))
    {
      Espresso::run_dispatch_v2(std::shared_ptr<Espresso::abstract_context>,std::shared_ptr<Espresso::net>,std::vector<std::shared_ptr<Espresso::SerDes::generic_serdes_object>> const&,Espresso::network_shape const&,Espresso::compute_path const&,std::istream *)::$_2::operator()((uint64_t)v376, (uint64_t)&v341);
      if (v380 && v379 < v384)
      {
        Espresso::dispatch_status_t::operator=((uint64_t)&buf, (uint64_t *)v376);
        int v205 = 1;
      }
      else
      {
        int v205 = 0;
      }
      Espresso::quantized_weights_helper::linear_quantization_data::~linear_quantization_data((Espresso::quantized_weights_helper::linear_quantization_data *)v376);
    }
    else
    {
LABEL_466:
      int v205 = 0;
    }
    if (!v385 || v384 >= *(float *)&v373)
    {
      if (v383) {
        nitro::nitro_function::nitro_function(v383);
      }
      BOOL v188 = v317;
      if (v382[0]) {
        nitro::nitro_function::nitro_function(v382[0]);
      }
      if (buf.__r_.__value_.__l.__size_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)buf.__r_.__value_.__l.__size_);
      }
      uint64_t v196 = *v328;
      goto LABEL_476;
    }
    v305 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v306 = v305;
    if (v205)
    {
      std::runtime_error::runtime_error(v305, "ERROR: Internal exception for retry 'use_mps_buffers'. It is a bug if this is thrown to users.");
      v307 = Espresso::dispatch_error_use_mps_buffers::~dispatch_error_use_mps_buffers;
      v309 = (std::runtime_error_vtbl *)&unk_1EE364E10;
    }
    else if (v319)
    {
      std::runtime_error::runtime_error(v305, "ERROR: Internal exception for retry 'use_mps_graph'. It is a bug if this is thrown to users.");
      v307 = Espresso::dispatch_error_use_mpsgraph::~dispatch_error_use_mpsgraph;
      v309 = (std::runtime_error_vtbl *)&unk_1EE3605B8;
    }
    else
    {
      std::runtime_error::runtime_error(v305, "ERROR: Internal exception for retry 'fallback_at_c_level'. It is a bug if this is thrown to users.");
      v307 = Espresso::dispatch_error_fallback_at_c_level::~dispatch_error_fallback_at_c_level;
      v309 = (std::runtime_error_vtbl *)&unk_1EE368F10;
    }
LABEL_699:
    v306->__vftable = v309;
    __cxa_throw(v306, v308, (void (*)(void *))v307);
  }
  long long v341 = 0uLL;
  v338 = 0;
  v339 = 0;
  v369 = 0;
  v368 = 0;
  LODWORD(v363[0]) = 100;
  uint64_t v59 = (std::__shared_weak_count *)v328[1];
  v365[0] = v49;
  v365[1] = (uint64_t)v59;
  if (v59) {
    atomic_fetch_add_explicit(&v59->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  BOOL v60 = (std::__shared_weak_count *)v327[1];
  v364[0] = *v327;
  v364[1] = (uint64_t)v60;
  if (v60) {
    atomic_fetch_add_explicit(&v60->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::get_net_info_ir(v365, v364, a4, a5, a6, (int *)v363, (int *)a6, (uint64_t)&v341, (uint64_t *)&v338, &v368);
  if (v60) {
    nitro::nitro_function::nitro_function(v60);
  }
  if (v59) {
    nitro::nitro_function::nitro_function(v59);
  }
  v61 = (uint64_t *)v338;
  long long __p = 0u;
  *(_OWORD *)v372 = 0u;
  *(_DWORD *)&v372[16] = 1065353216;
  uint64_t v62 = *(void *)v338;
  if (*((void *)v338 + 1) == *(void *)v338)
  {
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&__p);
  }
  else
  {
    unint64_t v63 = 0;
    uint64_t v312 = 0;
    unint64_t v64 = 0;
    while (2)
    {
      uint64_t v65 = v62 + 224 * v63;
      unint64_t v66 = (uint64_t *)(v65 + 48);
      int v67 = *(char *)(v65 + 71);
      if ((v67 & 0x80000000) == 0)
      {
        int v68 = v67 - 5;
        uint64_t v69 = v66;
        switch(v68)
        {
          case 0:
            goto LABEL_115;
          case 1:
            int v70 = *((unsigned __int16 *)v66 + 2);
            BOOL v71 = *(_DWORD *)v66 == 1717528163;
            int v72 = 29295;
            goto LABEL_122;
          case 2:
            int v70 = *(_DWORD *)((char *)v66 + 3);
            BOOL v71 = *(_DWORD *)v66 == 1818191459;
            int v72 = 1886351212;
LABEL_122:
            if (!v71 || v70 != v72) {
              goto LABEL_172;
            }
            goto LABEL_558;
          case 4:
            if (*v66 != 0x706168735F746567 || *((unsigned char *)v66 + 8) != 101) {
              goto LABEL_172;
            }
            goto LABEL_164;
          case 6:
            uint64_t v78 = *(uint64_t *)((char *)v66 + 3);
            BOOL v79 = *v66 == 0x77746E656D656C65;
            uint64_t v80 = 0x65736977746E656DLL;
            goto LABEL_140;
          case 8:
            if (*v66 == 0x6E6F635F64616F6CLL && *(uint64_t *)((char *)v66 + 5) == 0x746E6174736E6F63) {
              goto LABEL_164;
            }
            uint64_t v78 = *(uint64_t *)((char *)v66 + 5);
            BOOL v79 = *v66 == 0x5F6C6172656E6567;
            uint64_t v80 = 0x6563696C735F6C61;
LABEL_140:
            if (!v79 || v78 != v80) {
              goto LABEL_172;
            }
            goto LABEL_207;
          default:
            goto LABEL_172;
        }
      }
      switch(v66[1])
      {
        case 5:
          uint64_t v69 = (uint64_t *)*v66;
LABEL_115:
          int v73 = *(_DWORD *)v69;
          int v74 = *((unsigned __int8 *)v69 + 4);
          if (v73 != 1667853427 || v74 != 101) {
            goto LABEL_172;
          }
          goto LABEL_207;
        case 6:
          int v83 = *(unsigned __int16 *)(*v66 + 4);
          BOOL v84 = *(_DWORD *)*v66 == 1717528163;
          int v85 = 29295;
          goto LABEL_153;
        case 7:
          int v83 = *(_DWORD *)(*v66 + 3);
          BOOL v84 = *(_DWORD *)*v66 == 1818191459;
          int v85 = 1886351212;
LABEL_153:
          if (!v84 || v83 != v85) {
            goto LABEL_172;
          }
LABEL_558:
          int v107 = 1;
          goto LABEL_559;
        case 9:
          if (*(void *)*v66 != 0x706168735F746567 || *(unsigned char *)(*v66 + 8) != 101) {
            goto LABEL_172;
          }
          goto LABEL_164;
        case 11:
          uint64_t v89 = *(void *)(*v66 + 3);
          BOOL v90 = *(void *)*v66 == 0x77746E656D656C65;
          uint64_t v91 = 0x65736977746E656DLL;
          goto LABEL_168;
        case 13:
          unint64_t v86 = (uint64_t *)*v66;
          if (*(void *)*v66 == 0x6E6F635F64616F6CLL && *(void *)(*v66 + 5) == 0x746E6174736E6F63)
          {
LABEL_164:
            uint64_t v94 = v62 + 224 * v63;
            uint64_t v96 = *(void *)(v94 + 112);
            uint64_t v95 = *(void *)(v94 + 120);
            while (v96 != v95)
            {
              std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)&__p, v96, v96);
              v96 += 24;
            }
          }
          else
          {
            uint64_t v88 = *v86;
            uint64_t v89 = *(uint64_t *)((char *)v86 + 5);
            BOOL v90 = v88 == 0x5F6C6172656E6567;
            uint64_t v91 = 0x6563696C735F6C61;
LABEL_168:
            if (v90 && v89 == v91)
            {
LABEL_207:
              uint64_t v110 = v62 + 224 * v63;
              uint64_t v112 = *(void *)(v110 + 136);
              uint64_t v111 = *(void *)(v110 + 144);
              if (v112 != v111)
              {
                do
                {
                  if (!std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(&__p, v112))goto LABEL_172; {
                  v112 += 24;
                  }
                }
                while (v112 != v111);
                uint64_t v62 = *v61;
              }
              uint64_t v113 = v62 + 224 * v63;
              uint64_t v115 = *(void *)(v113 + 112);
              uint64_t v114 = *(void *)(v113 + 120);
              while (v115 != v114)
              {
                std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)&__p, v115, v115);
                v115 += 24;
              }
            }
          }
LABEL_172:
          uint64_t v98 = *v61 + 224 * v63;
          unint64_t v100 = *(uint64_t **)(v98 + 88);
          v99 = *(std::__shared_weak_count **)(v98 + 96);
          if (v99) {
            atomic_fetch_add_explicit(&v99->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (!v100)
          {
            if (!v312)
            {
              LODWORD(v367[0]) = 0;
              Espresso::create_context((int *)v367, &v356);
              v101 = (std::__shared_weak_count *)*((void *)&v356 + 1);
              uint64_t v312 = v356;
              long long v356 = 0uLL;
              if (v64)
              {
                nitro::nitro_function::nitro_function(v64);
                if (*((void *)&v356 + 1)) {
                  nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v356 + 1));
                }
              }
              unint64_t v64 = v101;
            }
            uint64_t v102 = *v61;
            long long v103 = *(_OWORD *)&(*a4)[2 * v63];
            *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v103;
            if (*((void *)&v103 + 1)) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v103 + 1) + 8), 1uLL, memory_order_relaxed);
            }
            *(void *)v376 = v312;
            *(void *)v377 = v64;
            if (v64) {
              atomic_fetch_add_explicit(&v64->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            Espresso::create_kernel_for_engine(&v356, v102 + 224 * v63, (uint64_t *)&buf, (uint64_t *)v376, 0);
            uint64_t v104 = (std::__shared_weak_count *)*((void *)&v356 + 1);
            unint64_t v100 = (uint64_t *)v356;
            long long v356 = 0uLL;
            if (v99)
            {
              nitro::nitro_function::nitro_function(v99);
              if (*((void *)&v356 + 1)) {
                nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v356 + 1));
              }
            }
            if (*(void *)v377) {
              nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)v377);
            }
            if (buf.__r_.__value_.__l.__size_) {
              nitro::nitro_function::nitro_function((std::__shared_weak_count *)buf.__r_.__value_.__l.__size_);
            }
            v99 = v104;
          }
          uint64_t v105 = *v100;
          if (!v106)
          {
            if (!(*(unsigned int (**)(uint64_t *, unint64_t))(v105 + 264))(v100, 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(*(void *)(*v61 + 224 * v63 + 144) - *(void *)(*v61 + 224 * v63 + 136)) >> 3)))goto LABEL_235; {
            if (*((char *)v66 + 23) < 0)
            }
            {
              uint64_t v116 = v66[1];
              if (v116 == 5)
              {
                unint64_t v66 = (uint64_t *)*v66;
                goto LABEL_226;
              }
              if (v116 == 13
                && *(void *)*v66 == 0x5F6C6172656E6567
                && *(void *)(*v66 + 5) == 0x6563696C735F6C61)
              {
                goto LABEL_221;
              }
LABEL_230:
              int v107 = 1;
              goto LABEL_236;
            }
            int v108 = *((unsigned __int8 *)v66 + 23);
            if (v108 != 5)
            {
              if (v108 != 13) {
                goto LABEL_230;
              }
              if (*v66 != 0x5F6C6172656E6567 || *(uint64_t *)((char *)v66 + 5) != 0x6563696C735F6C61) {
                goto LABEL_230;
              }
LABEL_221:
              uint64_t v118 = *(void *)(*v61 + 224 * v63 + 136);
              if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(*v61 + 224 * v63 + 144) - v118) >> 3) >= 2)
              {
                unint64_t v119 = 1;
                uint64_t v120 = 24;
                LOBYTE(v121) = 1;
                do
                {
                  int v121 = (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(&__p, v118 + v120) != 0) & v121;
                  ++v119;
                  uint64_t v118 = *(void *)(*v61 + 224 * v63 + 136);
                  v120 += 24;
                }
                while (v119 < 0xAAAAAAAAAAAAAAABLL * ((*(void *)(*v61 + 224 * v63 + 144) - v118) >> 3));
                goto LABEL_234;
              }
LABEL_235:
              int v107 = 0;
              goto LABEL_236;
            }
LABEL_226:
            if (*(_DWORD *)v66 != 1735287154 || *((unsigned char *)v66 + 4) != 101) {
              goto LABEL_230;
            }
            uint64_t v123 = *(void *)(*v61 + 224 * v63 + 136);
            if (*(void *)(*v61 + 224 * v63 + 144) == v123) {
              goto LABEL_235;
            }
            uint64_t v124 = 0;
            unint64_t v125 = 0;
            LOBYTE(v121) = 1;
            do
            {
              int v121 = (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(&__p, v123 + v124) != 0) & v121;
              ++v125;
              uint64_t v123 = *(void *)(*v61 + 224 * v63 + 136);
              v124 += 24;
            }
            while (v125 < 0xAAAAAAAAAAAAAAABLL * ((*(void *)(*v61 + 224 * v63 + 144) - v123) >> 3));
LABEL_234:
            int v107 = v121 ^ 1;
LABEL_236:
            if (!v99) {
              goto LABEL_238;
            }
LABEL_237:
            nitro::nitro_function::nitro_function(v99);
            goto LABEL_238;
          }
          if (v99) {
            atomic_fetch_add_explicit(&v99->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          int v107 = *(unsigned __int8 *)((*(uint64_t (**)(void *))(*(void *)v106 + 320))(v106) + 24);
          if (v99)
          {
            nitro::nitro_function::nitro_function(v99);
            goto LABEL_237;
          }
LABEL_238:
          ++v63;
          uint64_t v62 = *v61;
          if (v63 < 0x6DB6DB6DB6DB6DB7 * ((v61[1] - *v61) >> 5) && v107 == 0) {
            continue;
          }
LABEL_559:
          std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&__p);
          if (v64) {
            nitro::nitro_function::nitro_function(v64);
          }
          uint64_t v50 = (Espresso::net **)v327;
          if (v107)
          {
            v304 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v304, "Dynamic loop detected, Please change to use CPU backend for performance boost");
            v304->__vftable = (std::runtime_error_vtbl *)&unk_1EE364200;
          }
          return;
        default:
          goto LABEL_172;
      }
    }
  }
  if (((v326 - 10006) > 5 || ((1 << (v326 - 22)) & 0x27) == 0) && (v326 - 50005) >= 2) {
    goto LABEL_650;
  }
  long long __p = 0u;
  *(_OWORD *)v372 = 0u;
  *(_DWORD *)&v372[16] = 1065353216;
  std::string v252 = (uint64_t *)v338;
  uint64_t v253 = *(void *)v338;
  if (*((void *)v338 + 1) == *(void *)v338)
  {
    BOOL v272 = 1;
    goto LABEL_640;
  }
  unint64_t v254 = 0;
  uint64_t v313 = 0;
  v310 = 0;
  do
  {
    uint64_t v255 = v253 + 224 * v254;
    uint64_t v257 = *(void *)(v255 + 88);
    std::string v256 = *(std::__shared_weak_count **)(v255 + 96);
    if (v256) {
      atomic_fetch_add_explicit(&v256->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (!v257)
    {
      if (!v313)
      {
        LODWORD(v367[0]) = 0;
        Espresso::create_context((int *)v367, &v356);
        v258 = (std::__shared_weak_count *)*((void *)&v356 + 1);
        uint64_t v313 = v356;
        long long v356 = 0uLL;
        if (v310)
        {
          nitro::nitro_function::nitro_function(v310);
          if (*((void *)&v356 + 1)) {
            nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v356 + 1));
          }
        }
        v310 = v258;
      }
      uint64_t v259 = *v252;
      long long v260 = *(_OWORD *)&(*a4)[2 * v254];
      *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v260;
      if (*((void *)&v260 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v260 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      *(void *)v376 = v313;
      *(void *)v377 = v310;
      if (v310) {
        atomic_fetch_add_explicit(&v310->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      Espresso::create_kernel_for_engine(&v356, v259 + 224 * v254, (uint64_t *)&buf, (uint64_t *)v376, 0);
      v261 = (std::__shared_weak_count *)*((void *)&v356 + 1);
      uint64_t v257 = v356;
      long long v356 = 0uLL;
      if (v256)
      {
        nitro::nitro_function::nitro_function(v256);
        if (*((void *)&v356 + 1)) {
          nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v356 + 1));
        }
      }
      if (*(void *)v377) {
        nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)v377);
      }
      if (buf.__r_.__value_.__l.__size_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)buf.__r_.__value_.__l.__size_);
      }
      std::string v256 = v261;
    }
    uint64_t v262 = *v252;
    uint64_t v263 = *v252 + 224 * v254;
    uint64_t v264 = v263 + 48;
    int v265 = *(char *)(v263 + 71);
    if (v265 < 0)
    {
      v267 = *(uint64_t **)v264;
      uint64_t v266 = *(void *)(v263 + 56);
    }
    else
    {
      uint64_t v266 = *(unsigned __int8 *)(v263 + 71);
      v267 = (uint64_t *)v264;
    }
    if (v266 >= 3)
    {
      v268 = (char *)v267 + v266;
      int v269 = v267;
      do
      {
        __int16 v270 = (char *)memchr(v269, 99, v266 - 2);
        if (!v270) {
          break;
        }
        if (*(_WORD *)v270 == 26211 && v270[2] == 95)
        {
          if (v270 != v268 && v270 - (char *)v267 != -1)
          {
            BOOL v272 = 0;
            goto LABEL_633;
          }
          break;
        }
        int v269 = (uint64_t *)(v270 + 1);
        uint64_t v266 = v268 - (char *)v269;
      }
      while (v268 - (char *)v269 >= 3);
    }
    if (v265 < 0)
    {
      if (*(void *)(v264 + 8) == 11)
      {
        v273 = *(uint64_t **)v264;
LABEL_607:
        uint64_t v274 = *v273;
        uint64_t v275 = *(uint64_t *)((char *)v273 + 3);
        if (v274 == 0x747269765F696870 && v275 == 0x6C6175747269765FLL) {
          goto LABEL_614;
        }
      }
    }
    else
    {
      v273 = (uint64_t *)v264;
      if (v265 == 11) {
        goto LABEL_607;
      }
    }
    if ((*(uint64_t (**)(uint64_t, unint64_t))(*(void *)v257 + 264))(v257, 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(*(void *)(v262 + 224 * v254 + 144) - *(void *)(v262 + 224 * v254 + 136)) >> 3)))
    {
LABEL_612:
      BOOL v272 = 0;
      goto LABEL_633;
    }
    LOBYTE(v265) = *(unsigned char *)(v264 + 23);
LABEL_614:
    if ((v265 & 0x80) != 0)
    {
      uint64_t v278 = v264;
      uint64_t v264 = *(void *)v264;
      uint64_t v277 = *(void *)(v278 + 8);
    }
    else
    {
      uint64_t v277 = v265;
    }
    if (v277 >= 7)
    {
      v279 = (char *)(v264 + v277);
      v280 = (void *)v264;
      do
      {
        v281 = (char *)memchr(v280, 95, v277 - 6);
        if (!v281) {
          break;
        }
        if (*(_DWORD *)v281 == 1869375327 && *(_DWORD *)(v281 + 3) == 1818321519)
        {
          if (v281 != v279 && &v281[-v264] != (char *)-1) {
            goto LABEL_612;
          }
          break;
        }
        v280 = v281 + 1;
        uint64_t v277 = v279 - (unsigned char *)v280;
      }
      while (v279 - (unsigned char *)v280 >= 7);
    }
    uint64_t v283 = *v252 + 224 * v254;
    uint64_t v284 = *(void *)(v283 + 112);
    uint64_t v285 = *(void *)(v283 + 120);
    while (v284 != v285)
    {
      v286 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(&__p, v284);
      BOOL v272 = v286 == 0;
      if (v286) {
        goto LABEL_633;
      }
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)&__p, v284, v284);
      v284 += 24;
    }
    BOOL v272 = 1;
LABEL_633:
    if (v256) {
      nitro::nitro_function::nitro_function(v256);
    }
    if (!v272) {
      break;
    }
    ++v254;
    uint64_t v253 = *v252;
  }
  while (v254 < 0x6DB6DB6DB6DB6DB7 * ((v252[1] - *v252) >> 5));
  if (v310) {
    nitro::nitro_function::nitro_function(v310);
  }
LABEL_640:
  uint64_t v50 = (Espresso::net **)v327;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&__p);
  int v287 = 1;
  if (v326 != 10008 && v326 != 10011) {
    int v287 = v311;
  }
  if ((v272 | v287 ^ 1))
  {
    char v288 = (v326 - 50007) < 0xFFFFFFFE || v272;
    if ((v288 & 1) == 0)
    {
      v289 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v289, "Control flow detected, Please change to use CPU backend for performance boost");
      v289->__vftable = (std::runtime_error_vtbl *)&unk_1EE364200;
    }
  }
  else
  {
    int v319 = 0;
  }
LABEL_650:
  if (v369) {
    nitro::nitro_function::nitro_function(v369);
  }
  if (v339) {
    nitro::nitro_function::nitro_function(v339);
  }
  if (*((void *)&v341 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v341 + 1));
  }
LABEL_88:
  if (v326 != 20000 || v325) {
    goto LABEL_244;
  }
  std::string::size_type v52 = *v328;
  size_t v51 = (std::__shared_weak_count *)v328[1];
  if (v51) {
    atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  size_t v54 = *v50;
  size_t v53 = (std::__shared_weak_count *)v50[1];
  if (v53) {
    atomic_fetch_add_explicit(&v53->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  size_t v55 = (char *)operator new(0x70uLL);
  int v56 = (std::__shared_weak_count *)v55;
  *((void *)v55 + 1) = 0;
  *((void *)v55 + 2) = 0;
  *(void *)size_t v55 = &unk_1EE381D50;
  *(_OWORD *)(v55 + 24) = 0u;
  v57 = v55 + 24;
  *(_OWORD *)(v55 + 40) = 0u;
  *(_OWORD *)(v55 + 56) = 0u;
  *((void *)v55 + 6) = v55 + 56;
  *((void *)v55 + 10) = 0;
  *((void *)v55 + 9) = v55 + 80;
  *((void *)v55 + 12) = 0;
  *((void *)v55 + 13) = 0;
  *((void *)v55 + 11) = 0;
  if (v53)
  {
    atomic_fetch_add_explicit(&v53->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    std::vector<int>::size_type v58 = (std::__shared_weak_count *)*((void *)v55 + 13);
    v56[4].__vftable = (std::__shared_weak_count_vtbl *)v54;
    v56[4].__shared_owners_ = (uint64_t)v53;
    if (v58) {
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  else
  {
    *((void *)v55 + 12) = v54;
    *((void *)v55 + 13) = 0;
  }
  LOBYTE(v367[0]) = 0;
  std::string::size_type v140 = (char *)operator new(0xB0uLL);
  *((void *)v140 + 1) = 0;
  *((void *)v140 + 2) = 0;
  *(void *)std::string::size_type v140 = &unk_1EE388928;
  *(_OWORD *)(v140 + 88) = 0u;
  *(_OWORD *)(v140 + 136) = 0u;
  *(_OWORD *)(v140 + 120) = 0u;
  *(_OWORD *)(v140 + 40) = 0u;
  *(_OWORD *)(v140 + 56) = 0u;
  *(_OWORD *)(v140 + 24) = 0u;
  *(_OWORD *)(v140 + 72) = 0u;
  *(_OWORD *)(v140 + 104) = 0u;
  *((void *)v140 + 12) = v140 + 104;
  *((void *)v140 + 17) = 0;
  *((void *)v140 + 16) = 0;
  *((void *)v140 + 15) = v140 + 128;
  *((void *)v140 + 21) = 0;
  *((void *)v140 + 20) = 0;
  *((void *)v140 + 19) = v140 + 160;
  *((void *)v54 + 89) = v140 + 24;
  uint64_t v141 = (std::__shared_weak_count *)*((void *)v54 + 90);
  *((void *)v54 + 90) = v140;
  if (v141) {
    nitro::nitro_function::nitro_function(v141);
  }
  unint64_t v142 = [MEMORY[0x1E4F1CB18] standardUserDefaults];
  v329 = [v142 persistentDomainForName:v318];

  if (*(unsigned char *)(v52 + 56))
  {
    if (v51)
    {
      atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
      *((void *)&__p + 1) = v51;
      atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    else
    {
      *((void *)&__p + 1) = 0;
    }
    *(void *)&long long __p = v52;
    memset(&v372[4], 0, 28);
    *(_DWORD *)v372 = 100;
    __asm { FMOV            V0.2S, #1.0 }
    uint64_t v373 = _D0;
    v375 = 0;
    uint64_t v374 = 0;
    if (v51) {
      nitro::nitro_function::nitro_function(v51);
    }
    uint64_t v159 = *((void *)v54 + 89);
    long long v160 = (std::__shared_weak_count *)*((void *)v54 + 90);
    if (v160)
    {
      atomic_fetch_add_explicit(&v160->__shared_owners_, 1uLL, memory_order_relaxed);
      int v161 = v375;
      uint64_t v374 = v159;
      v375 = v160;
      if (v161) {
        nitro::nitro_function::nitro_function(v161);
      }
    }
    else
    {
      uint64_t v374 = *((void *)v54 + 89);
      v375 = 0;
    }
    int v162 = [v329 objectForKeyedSubscript:@"espresso.ane_fallback_to_mps"];
    int v163 = [v162 BOOLValue];

    if (v163)
    {
      NSLog(&cfstr_SettingEspress.isa);
      *(void *)v372 = 0x10000C350;
    }
    std::string::size_type v164 = [v329 objectForKeyedSubscript:@"espresso.mps_fallback_to_cpu_no_bnns"];
    int v165 = [v164 BOOLValue];

    if (v165)
    {
      NSLog(&cfstr_SettingEspress_0.isa);
      *(_DWORD *)v372 = 0;
    }
    if ((***(unsigned int (****)(void))(v52 + 8))(*(void *)(v52 + 8)) == 20000)
    {
      uint64_t v166 = [v329 objectForKeyedSubscript:@"espresso.metal_lowmem_conservative_context_transfer"];
      int v167 = [v166 BOOLValue];

      if (v167) {
        LODWORD(v373) = 1101004800;
      }
    }
    std::allocate_shared[abi:ne180100]<Espresso::cpu_context_transfer_algo_t,std::allocator<Espresso::cpu_context_transfer_algo_t>,Espresso::cpu_context_transfer_algo_options &,void>((Espresso::cpu_context_transfer_algo_t **)&v356, (const Espresso::cpu_context_transfer_algo_options *)&__p);
    unint64_t v144 = (std::__shared_weak_count *)*((void *)&v356 + 1);
    uint8x8_t v143 = (void *)v356;
    *(void *)&long long v341 = v52;
    *((void *)&v341 + 1) = v51;
    if (v51) {
      atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v168 = *a6;
    v338 = v57;
    v339 = v56;
    atomic_fetch_add_explicit(&v56->__shared_owners_, 1uLL, memory_order_relaxed);
    Espresso::cpu_context_transfer_algo_t::create_net_info_ir((uint64_t)v143, a4, &v341, a5, v168, (uint64_t *)&v338);
    nitro::nitro_function::nitro_function(v56);
    if (v51) {
      nitro::nitro_function::nitro_function(v51);
    }
    std::string::basic_string[abi:ne180100]<0>(&buf, "engine_availability_reordering");
    std::string::basic_string[abi:ne180100]<0>(v376, "0");
    Espresso::map_const_get<std::map<std::string,std::string>>((uint64_t)v54 + 472, (uint64_t)&buf, (uint64_t)v376, (std::string *)&v356);
    if (SBYTE7(v357) < 0)
    {
      BOOL v172 = *((void *)&v356 + 1) == 1 && *(unsigned char *)v356 == 49;
      operator delete((void *)v356);
    }
    else
    {
      BOOL v172 = SBYTE7(v357) == 1 && v356 == 49;
    }
    if (v378 < 0) {
      operator delete(*(void **)v376);
    }
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(buf.__r_.__value_.__l.__data_);
      if (v172) {
        goto LABEL_362;
      }
    }
    else if (v172)
    {
LABEL_362:
      if (v51) {
        atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      *(void *)&long long v356 = v57;
      *((void *)&v356 + 1) = v56;
      atomic_fetch_add_explicit(&v56->__shared_owners_, 1uLL, memory_order_relaxed);
      Espresso::cpu_context_transfer_algo_t::engine_availability_reordering((uint64_t)v143, v169, v170, v171, (uint64_t **)&v356);
      nitro::nitro_function::nitro_function(v56);
      if (v51) {
        nitro::nitro_function::nitro_function(v51);
      }
      LOBYTE(v367[0]) = 1;
      goto LABEL_368;
    }
    uint64_t v173 = [v329 objectForKeyedSubscript:@"espresso.engine_availability_reordering"];
    int v174 = [v173 BOOLValue];

    if (v174) {
      goto LABEL_362;
    }
    *(void *)&long long v356 = v57;
    *((void *)&v356 + 1) = v56;
    atomic_fetch_add_explicit(&v56->__shared_owners_, 1uLL, memory_order_relaxed);
    Espresso::cpu_context_transfer_algo_t::reorder_load_constants((uint64_t)v143, (uint64_t **)&v356, v367);
    nitro::nitro_function::nitro_function(v56);
LABEL_368:
    buf.__r_.__value_.__r.__words[0] = v52;
    buf.__r_.__value_.__l.__size_ = (std::string::size_type)v51;
    if (v51) {
      atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    *(void *)v376 = v57;
    *(void *)v377 = v56;
    atomic_fetch_add_explicit(&v56->__shared_owners_, 1uLL, memory_order_relaxed);
    Espresso::cpu_context_transfer_algo_t::assign_to_fallback_context(v143, (uint64_t)&buf, v175, (uint64_t **)v376);
    nitro::nitro_function::nitro_function(v56);
    if (v51) {
      nitro::nitro_function::nitro_function(v51);
    }
    if (v375) {
      nitro::nitro_function::nitro_function(v375);
    }
    v368 = &v372[8];
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v368);
    if (*((void *)&__p + 1)) {
      nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&__p + 1));
    }
    *(void *)(a1 + 45) = 0;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
    char v146 = 1;
    *(unsigned char *)(a1 + 53) = 1;
    if (v144)
    {
      char v146 = 0;
      atomic_fetch_add_explicit(&v144->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v145 = a1;
  }
  else
  {
    uint8x8_t v143 = 0;
    unint64_t v144 = 0;
    uint64_t v145 = a1;
    *(void *)(a1 + 45) = 0;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
    char v146 = 1;
    *(unsigned char *)(a1 + 53) = 1;
  }
  *(void *)uint64_t v145 = v143;
  *(void *)(v145 + 8) = v144;
  atomic_fetch_add_explicit(&v56->__shared_owners_, 1uLL, memory_order_relaxed);
  *(void *)(v145 + 16) = v57;
  *(void *)(v145 + 24) = v56;
  uint64_t v176 = *((void *)v54 + 89);
  uint64_t v177 = *((void *)v54 + 90);
  *(unsigned char *)(v145 + 52) = v367[0];
  if (v177) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v177 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(v145 + 32) = v176;
  *(void *)(v145 + 40) = v177;
  *(unsigned char *)(v145 + 53) = 1;

  nitro::nitro_function::nitro_function(v56);
  if ((v146 & 1) == 0) {
    nitro::nitro_function::nitro_function(v144);
  }
  if (v53) {
    nitro::nitro_function::nitro_function(v53);
  }
  if (v51)
  {
    uint64_t v150 = v51;
    goto LABEL_538;
  }
}

void sub_19226E5AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, Espresso::quantized_weights_helper::linear_quantization_data *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  __cxa_free_exception(v67);
  Espresso::quantized_weights_helper::linear_quantization_data::~linear_quantization_data((Espresso::quantized_weights_helper::linear_quantization_data *)(v68 - 176));
  Espresso::quantized_weights_helper::linear_quantization_data::~linear_quantization_data((Espresso::quantized_weights_helper::linear_quantization_data *)&__p);
  Espresso::quantized_weights_helper::linear_quantization_data::~linear_quantization_data((Espresso::quantized_weights_helper::linear_quantization_data *)&STACK[0x290]);
  _Unwind_Resume(a1);
}

BOOL Espresso::net::model_is_mil(Espresso::net *this)
{
  uint64_t v1 = (void *)((char *)this + 592);
  uint64_t v2 = *((unsigned __int8 *)this + 615);
  if ((*((char *)this + 615) & 0x80000000) == 0)
  {
    if (*((unsigned char *)this + 615))
    {
      uint64_t v3 = *((unsigned __int8 *)this + 615);
      goto LABEL_6;
    }
    return 0;
  }
  uint64_t v3 = *((void *)this + 75);
  if (!v3) {
    return 0;
  }
  uint64_t v1 = (void *)*v1;
LABEL_6:
  uint64_t v4 = (char *)v1 + v3;
  uint64_t v5 = v1;
  unint64_t v6 = v4;
  do
  {
    if (*v5 == 46)
    {
      uint64_t v7 = 1u;
      while (v7 != 4)
      {
        if (&v5[v7] == v4) {
          goto LABEL_16;
        }
        int v8 = v5[v7];
        int v9 = aMil[v7++];
        if (v8 != v9) {
          goto LABEL_8;
        }
      }
      unint64_t v6 = v5;
    }
LABEL_8:
    ++v5;
  }
  while (v5 != v4);
LABEL_16:
  uint64_t v10 = v6 - (unsigned char *)v1;
  if (v6 == v4) {
    uint64_t v10 = -1;
  }
  if ((v2 & 0x80) != 0) {
    uint64_t v2 = *((void *)this + 75);
  }
  if (v10 == v2 - 4) {
    return 1;
  }
  Espresso::net::get_analysis_if_existing<Espresso::analysis_to_preserve_mil_types>(&v13, (uint64_t)this);
  BOOL v11 = v13 != 0;
  if (v14) {
    nitro::nitro_function::nitro_function(v14);
  }
  return v11;
}

void try_dispatch(uint64_t a1, void *a2, uint64_t *a3, Espresso ***a4, uint64_t a5, unsigned int *a6, int *a7, int *a8)
{
  v63[0] = 0;
  v61 = 0;
  uint64_t v62 = 0;
  uint64_t v16 = (char *)operator new(0x70uLL);
  int v17 = (std::__shared_weak_count *)v16;
  *((void *)v16 + 1) = 0;
  *((void *)v16 + 2) = 0;
  *(void *)uint64_t v16 = &unk_1EE381D50;
  *(_OWORD *)(v16 + 24) = 0u;
  int v18 = (uint64_t *)(v16 + 24);
  *(_OWORD *)(v16 + 40) = 0u;
  *(_OWORD *)(v16 + 56) = 0u;
  *((void *)v16 + 6) = v16 + 56;
  *((void *)v16 + 10) = 0;
  *((void *)v16 + 9) = v16 + 80;
  *((void *)v16 + 12) = 0;
  *((void *)v16 + 13) = 0;
  *((void *)v16 + 11) = 0;
  uint64_t v59 = (uint64_t *)(v16 + 24);
  BOOL v60 = (std::__shared_weak_count *)v16;
  uint64_t v19 = *a3;
  uint64_t v20 = a3[1];
  if (v20)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 16), 1uLL, memory_order_relaxed);
    BOOL v21 = (std::__shared_weak_count *)*((void *)v16 + 13);
    v17[4].__vftable = (std::__shared_weak_count_vtbl *)v19;
    v17[4].__shared_owners_ = v20;
    if (v21) {
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  else
  {
    *((void *)v16 + 12) = v19;
    *((void *)v16 + 13) = 0;
  }
  int v22 = (char *)operator new(0xB0uLL);
  *((void *)v22 + 1) = 0;
  *((void *)v22 + 2) = 0;
  *(void *)int v22 = &unk_1EE388928;
  *(_OWORD *)(v22 + 88) = 0u;
  *(_OWORD *)(v22 + 136) = 0u;
  *(_OWORD *)(v22 + 120) = 0u;
  *(_OWORD *)(v22 + 40) = 0u;
  *(_OWORD *)(v22 + 56) = 0u;
  *(_OWORD *)(v22 + 72) = 0u;
  *(_OWORD *)(v22 + 24) = 0u;
  *(_OWORD *)(v22 + 104) = 0u;
  *((void *)v22 + 12) = v22 + 104;
  *((void *)v22 + 17) = 0;
  *((void *)v22 + 16) = 0;
  *((void *)v22 + 15) = v22 + 128;
  *((void *)v22 + 20) = 0;
  *((void *)v22 + 21) = 0;
  *((void *)v22 + 19) = v22 + 160;
  v57 = v22 + 24;
  std::vector<int>::size_type v58 = (std::__shared_weak_count *)v22;
  *(void *)(a1 + 45) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(unsigned char *)(a1 + 53) = 1;
  if (!*(unsigned char *)(*a2 + 56))
  {
    uint64_t v34 = 0;
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    BOOL v35 = 1;
LABEL_55:
    char v42 = 0;
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    goto LABEL_57;
  }
  uint64_t v23 = (std::__shared_weak_count *)a2[1];
  v56[0] = *a2;
  v56[1] = (uint64_t)v23;
  if (v23) {
    atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v24 = (std::__shared_weak_count *)a3[1];
  v55[0] = *a3;
  v55[1] = (uint64_t)v24;
  if (v24) {
    atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::get_net_info_ir(v56, v55, a4, a5, a6, a7, a8, (uint64_t)&v61, (uint64_t *)&v59, &v57);
  if (v24) {
    nitro::nitro_function::nitro_function(v24);
  }
  if (v23) {
    nitro::nitro_function::nitro_function(v23);
  }
  int v17 = v60;
  uint64_t v25 = v61;
  int v18 = v59;
  v54[0] = v59;
  v54[1] = v60;
  if (v60) {
    atomic_fetch_add_explicit(&v60->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v26 = Espresso::cpu_context_transfer_algo_t::check_kernels_availability_on_fallback_context(v25, a4, (uint64_t)v54);
  *(unsigned char *)(a1 + 53) = v26;
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
  uint64_t v27 = [MEMORY[0x1E4F1CB18] standardUserDefaults];
  unint64_t v28 = [v27 persistentDomainForName:*MEMORY[0x1E4F283E0]];

  uint64_t v29 = *a3;
  std::string::basic_string[abi:ne180100]<0>(v51, "engine_availability_reordering");
  std::string::basic_string[abi:ne180100]<0>(__p, "0");
  Espresso::map_const_get<std::map<std::string,std::string>>(v29 + 472, (uint64_t)v51, (uint64_t)__p, &v53);
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
  {
    BOOL v33 = v53.__r_.__value_.__l.__size_ == 1 && *v53.__r_.__value_.__l.__data_ == 49;
    operator delete(v53.__r_.__value_.__l.__data_);
  }
  else
  {
    BOOL v33 = SHIBYTE(v53.__r_.__value_.__r.__words[2]) == 1 && v53.__r_.__value_.__s.__data_[0] == 49;
  }
  if (v50 < 0) {
    operator delete(__p[0]);
  }
  if (v52 < 0)
  {
    operator delete(v51[0]);
    if (v33)
    {
LABEL_34:
      int v38 = (std::__shared_weak_count *)a2[1];
      if (v38) {
        atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      v48[0] = v18;
      v48[1] = (uint64_t *)v17;
      if (v17) {
        atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      Espresso::cpu_context_transfer_algo_t::engine_availability_reordering((uint64_t)v25, v30, v31, v32, v48);
      if (v17) {
        nitro::nitro_function::nitro_function(v17);
      }
      if (v38) {
        nitro::nitro_function::nitro_function(v38);
      }
      v63[0] = 1;
      goto LABEL_43;
    }
  }
  else if (v33)
  {
    goto LABEL_34;
  }
  unint64_t v36 = [v28 objectForKeyedSubscript:@"espresso.engine_availability_reordering"];
  int v37 = [v36 BOOLValue];

  if (v37) {
    goto LABEL_34;
  }
  v47[0] = v18;
  v47[1] = (uint64_t *)v17;
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::cpu_context_transfer_algo_t::reorder_load_constants((uint64_t)v25, v47, v63);
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
LABEL_43:
  if (v26)
  {
    uint64_t v40 = *a2;
    unint64_t v41 = (std::__shared_weak_count *)a2[1];
    v46[0] = v40;
    v46[1] = v41;
    if (v41) {
      atomic_fetch_add_explicit(&v41->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v45[0] = v18;
    v45[1] = (uint64_t *)v17;
    if (v17) {
      atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    *(float *)(a1 + 48) = Espresso::cpu_context_transfer_algo_t::assign_to_fallback_context_v2(v25, v46, v39, v45, a4);
    if (v17) {
      nitro::nitro_function::nitro_function(v17);
    }
    if (v41) {
      nitro::nitro_function::nitro_function(v41);
    }
  }

  uint64_t v34 = v62;
  BOOL v35 = v62 == 0;
  if (v62) {
    atomic_fetch_add_explicit(&v62->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)a1 = v25;
  *(void *)(a1 + 8) = v34;
  if (v17) {
    goto LABEL_55;
  }
  char v42 = 1;
LABEL_57:
  *(void *)(a1 + 16) = v18;
  *(void *)(a1 + 24) = v17;
  *(unsigned char *)(a1 + 52) = v63[0];
  BOOL v44 = v57;
  BOOL v43 = v58;
  if (v58)
  {
    atomic_fetch_add_explicit(&v58->__shared_owners_, 1uLL, memory_order_relaxed);
    *(void *)(a1 + 32) = v44;
    *(void *)(a1 + 40) = v43;
    nitro::nitro_function::nitro_function(v43);
    if (v42) {
      goto LABEL_60;
    }
    goto LABEL_59;
  }
  *(void *)(a1 + 32) = v57;
  *(void *)(a1 + 40) = 0;
  if ((v42 & 1) == 0) {
LABEL_59:
  }
    nitro::nitro_function::nitro_function(v17);
LABEL_60:
  if (!v35) {
    nitro::nitro_function::nitro_function(v34);
  }
}

void sub_19226F128(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (v32) {
    nitro::nitro_function::nitro_function(v32);
  }

  Espresso::quantized_weights_helper::linear_quantization_data::~linear_quantization_data(v31);
  unint64_t v36 = *(std::__shared_weak_count **)(v34 - 136);
  if (v36) {
    nitro::nitro_function::nitro_function(v36);
  }
  int v37 = *(std::__shared_weak_count **)(v34 - 120);
  if (v37) {
    nitro::nitro_function::nitro_function(v37);
  }
  int v38 = *(std::__shared_weak_count **)(v34 - 104);
  if (v38) {
    nitro::nitro_function::nitro_function(v38);
  }
  _Unwind_Resume(a1);
}

void Espresso::run_dispatch_v2(std::shared_ptr<Espresso::abstract_context>,std::shared_ptr<Espresso::net>,std::vector<std::shared_ptr<Espresso::SerDes::generic_serdes_object>> const&,Espresso::network_shape const&,Espresso::compute_path const&,std::istream *)::$_0::operator()(Espresso *a1, const char *a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = **(void ***)a1;
  if (v2 && !*(_DWORD *)((char *)v2 + *(void *)(*v2 - 24) + 32))
  {
    uint64_t v4 = Espresso::espresso_os_log_subsystem(a1, a2);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(__p[0]) = 0;
      _os_log_debug_impl(&dword_1920CB000, v4, OS_LOG_TYPE_DEBUG, "Restoring network precompilation info", (uint8_t *)__p, 2u);
    }

    uint64_t v5 = Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::shared();
    std::string::basic_string[abi:ne180100]<0>(__p, "json");
    Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::make(&v10, (uint64_t)v5, __p);
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v6 = v10;
    (*(void (**)(uint64_t, void))(*(void *)v10 + 280))(v10, **(void **)a1);
    uint64_t v7 = (void *)**((void **)a1 + 1);
    int v8 = (std::__shared_weak_count *)v11;
    v9[0] = v6;
    v9[1] = v11;
    if (v11) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
    }
    Espresso::net::restore_precompilation_info(v7, v9);
    if (v8)
    {
      nitro::nitro_function::nitro_function(v8);
      nitro::nitro_function::nitro_function(v8);
    }
  }
}

void sub_19226F3B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, long long buf, int a16, __int16 a17, char a18, char a19)
{
  BOOL v21 = v19;
  uint64_t v27 = v21;
  if (v21)
  {
    nitro::nitro_function::nitro_function(v21);
    nitro::nitro_function::nitro_function(v27);
  }
  if (a2 == 1)
  {
    uint64_t v23 = (Espresso *)__cxa_begin_catch(exception_object);
    uint64_t v25 = Espresso::espresso_os_log_subsystem(v23, v24);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      uint64_t v26 = (*(uint64_t (**)(Espresso *))(*(void *)v23 + 16))(v23);
      LODWORD(buf) = 136315138;
      *(void *)((char *)&buf + 4) = v26;
      _os_log_error_impl(&dword_1920CB000, v25, OS_LOG_TYPE_ERROR, "Error while restoring network precompilation info %s", (uint8_t *)&buf, 0xCu);
    }

    __cxa_end_catch();
    JUMPOUT(0x19226F360);
  }
  _Unwind_Resume(exception_object);
}

double newpPlatformHeuristics::ane_gpu_net_compute_threshold(newpPlatformHeuristics *this)
{
  return 0.03;
}

BOOL Espresso::generic_non_maximum_suppression_kernel::has_dynamic_top_shape(Espresso::generic_non_maximum_suppression_kernel *this, unint64_t a2)
{
  return ((uint64_t)(*((void *)this + 40) - *((void *)this + 39)) >> 2) + 4 < a2;
}

BOOL check_network_has_batch_matmul_and_softmax_nd(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    uint64_t v2 = 0;
    char v3 = 0;
    char v4 = 0;
    unint64_t v5 = (a2 - a1) / 224;
    if (v5 <= 1) {
      uint64_t v6 = 1;
    }
    else {
      uint64_t v6 = (a2 - a1) / 224;
    }
    uint64_t v7 = a1 + 48;
    BOOL v8 = 1;
    while (1)
    {
      if (*(char *)(v7 + 23) < 0)
      {
        uint64_t v10 = *(void *)(v7 + 8);
        if (v10 == 10)
        {
          int v9 = *(uint64_t **)v7;
LABEL_24:
          uint64_t v14 = *v9;
          int v15 = *((unsigned __int16 *)v9 + 4);
          BOOL v11 = v14 == 0x5F78616D74666F73 && v15 == 25710;
          goto LABEL_30;
        }
        if (v10 == 12)
        {
          BOOL v11 = 0;
          BOOL v12 = **(void **)v7 == 0x616D5F6863746162 && *(_DWORD *)(*(void *)v7 + 8) == 1819635060;
LABEL_19:
          char v13 = v12;
          v3 |= v13;
          goto LABEL_30;
        }
      }
      else
      {
        if (*(unsigned char *)(v7 + 23) == 12)
        {
          BOOL v11 = 0;
          BOOL v12 = *(void *)v7 == 0x616D5F6863746162 && *(_DWORD *)(v7 + 8) == 1819635060;
          goto LABEL_19;
        }
        int v9 = (uint64_t *)v7;
        if (*(unsigned char *)(v7 + 23) == 10) {
          goto LABEL_24;
        }
      }
      BOOL v11 = 0;
LABEL_30:
      v4 |= v11;
      if ((v3 & 1) == 0 || (v4 & 1) == 0)
      {
        BOOL v8 = ++v2 < v5;
        v7 += 224;
        if (v6 != v2) {
          continue;
        }
      }
      return v8;
    }
  }
  return 0;
}

BOOL check_network_has_no_convolutions(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    BOOL v2 = 0;
    uint64_t v3 = 0;
    unint64_t v4 = (a2 - a1) / 224;
    if (v4 <= 1) {
      uint64_t v5 = 1;
    }
    else {
      uint64_t v5 = (a2 - a1) / 224;
    }
    for (uint64_t i = a1 + 48; ; i += 224)
    {
      int v7 = *(char *)(i + 23);
      if (v7 < 0)
      {
        if (*(void *)(i + 8) != 11) {
          goto LABEL_15;
        }
        BOOL v8 = *(uint64_t **)i;
      }
      else
      {
        BOOL v8 = (uint64_t *)i;
        if (v7 != 11) {
          goto LABEL_15;
        }
      }
      uint64_t v9 = *v8;
      uint64_t v10 = *(uint64_t *)((char *)v8 + 3);
      if (v9 == 0x74756C6F766E6F63 && v10 == 0x6E6F6974756C6F76) {
        return v2;
      }
LABEL_15:
      BOOL v2 = ++v3 >= v4;
      if (v5 == v3) {
        return v2;
      }
    }
  }
  return 1;
}

uint64_t e5rt_tensor_desc_dtype_create(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v5[0] = &unk_1EE398AF8;
  v5[1] = a1;
  v5[2] = a2 | (unint64_t)(a3 << 32);
  uint64_t v6 = v5;
  uint64_t v3 = E5RT::ExceptionSafeExecute((uint64_t)v5);
  if (v6 == v5)
  {
    (*(void (**)(void *))(v5[0] + 32))(v5);
  }
  else if (v6)
  {
    (*(void (**)(void))(*v6 + 40))();
  }
  return v3;
}

void sub_19226F7CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

void anonymous namespace'::MakeVectorFromMILShape(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2 != a3)
  {
    uint64_t v3 = a3;
    uint64_t v4 = a2;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    BOOL v8 = 0;
    do
    {
      while (1)
      {
        uint64_t v9 = (*(uint64_t (**)(void))(**(void **)v4 + 16))();
        if (v9) {
          break;
        }
        uint64_t v10 = -1;
        if (v8 >= v7) {
          goto LABEL_8;
        }
LABEL_3:
        *v8++ = v10;
        a1[1] = v8;
        v4 += 8;
        if (v4 == v3) {
          return;
        }
      }
      uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 48))(v9);
      if (v8 < v7) {
        goto LABEL_3;
      }
LABEL_8:
      uint64_t v11 = v8 - v6;
      unint64_t v12 = v11 + 1;
      if ((unint64_t)(v11 + 1) >> 61) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      if (((char *)v7 - (char *)v6) >> 2 > v12) {
        unint64_t v12 = ((char *)v7 - (char *)v6) >> 2;
      }
      if ((unint64_t)((char *)v7 - (char *)v6) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v13 = v12;
      }
      if (v13)
      {
        if (v13 >> 61) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        uint64_t v14 = operator new(8 * v13);
        int v15 = (uint64_t *)&v14[8 * v11];
        *int v15 = v10;
        uint64_t v16 = (uint64_t)(v15 + 1);
        if (v8 == v6) {
          goto LABEL_22;
        }
      }
      else
      {
        uint64_t v14 = 0;
        int v15 = (uint64_t *)(8 * v11);
        *(void *)(8 * v11) = v10;
        uint64_t v16 = 8 * v11 + 8;
        if (v8 == v6) {
          goto LABEL_22;
        }
      }
      unint64_t v17 = (char *)(v8 - 1) - (char *)v6;
      if (v17 < 0x168)
      {
        int v18 = v8;
        goto LABEL_21;
      }
      if (&v14[(char *)v8 - (char *)v6 - 8 - (v17 & 0xFFFFFFFFFFFFFFF8)] > &v14[(char *)v8 - (char *)v6 - 8])
      {
        int v18 = v8;
        do
        {
LABEL_21:
          uint64_t v19 = *--v18;
          *--int v15 = v19;
        }
        while (v18 != v6);
        goto LABEL_22;
      }
      if ((uint64_t *)((char *)v8 - (v17 & 0xFFFFFFFFFFFFFFF8) - 8) > v8 - 1)
      {
        int v18 = v8;
        goto LABEL_21;
      }
      if ((unint64_t)((char *)v6 - v14) < 0x20)
      {
        int v18 = v8;
        goto LABEL_21;
      }
      uint64_t v20 = (v17 >> 3) + 1;
      uint64_t v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
      int v18 = &v8[v21 / 0xFFFFFFFFFFFFFFF8];
      int v15 = (uint64_t *)((char *)v15 - v21);
      int v22 = &v14[8 * v11 - 16];
      uint64_t v23 = v8 - 2;
      uint64_t v24 = v20 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v25 = *(_OWORD *)v23;
        *(v22 - 1) = *((_OWORD *)v23 - 1);
        *int v22 = v25;
        v22 -= 2;
        v23 -= 4;
        v24 -= 4;
      }
      while (v24);
      if (v20 != (v20 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_21;
      }
LABEL_22:
      uint64_t v7 = (uint64_t *)&v14[8 * v13];
      *a1 = v15;
      a1[1] = (uint64_t *)v16;
      a1[2] = v7;
      if (v6) {
        operator delete(v6);
      }
      uint64_t v6 = v15;
      uint64_t v3 = a3;
      a1[1] = (uint64_t *)v16;
      v4 += 8;
      BOOL v8 = (uint64_t *)v16;
    }
    while (v4 != a3);
  }
}

void sub_19226FA5C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::AOT::BuildTensorDescriptor(uint64_t a1, uint64_t a2)
{
  int v3 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 88))(a2);
  E5RT::TensorDataType::TensorDataType(&v5);
}

void sub_19226FE38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22)
{
  *int v22 = 0;
  if (__p)
  {
    operator delete(__p);
    long long v25 = a21;
    if (!a21) {
      goto LABEL_6;
    }
  }
  else
  {
    long long v25 = a21;
    if (!a21)
    {
LABEL_6:
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)(v23 - 80));
      _Unwind_Resume(a1);
    }
  }
  operator delete(v25);
  goto LABEL_6;
}

void Espresso::AOT::E5RTGroupMatcher::MoveDequantPastGatherNd(uint64_t a1, MIL::Builder::BlockBuilder **a2, uint64_t a3, void *a4, int a5)
{
  unint64_t v7 = 0;
  int v8 = 0;
  BOOL v71 = 0;
  int v72 = 0;
  unint64_t v73 = 0;
  while (MIL::Builder::BlockBuilder::GetNumOperations(*a2) > v7)
  {
    MIL::Builder::BlockBuilder::GetOperation(*a2);
    uint64_t Operator = MIL::Builder::OperationBuilder::GetOperator(v65[0]);
    uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)Operator + 16))(Operator);
    Espresso::AOT::GetOperatorType(v10, (std::string *)v68);
    if (SBYTE7(v69) < 0)
    {
      if (v68[1] == (void *)8)
      {
        uint64_t v11 = *(void *)v68[0];
        operator delete(v68[0]);
        if (v11 == 0x657A69746E617571) {
          goto LABEL_10;
        }
      }
      else
      {
        operator delete(v68[0]);
      }
    }
    else if (SBYTE7(v69) == 8 && v68[0] == (void *)0x657A69746E617571)
    {
LABEL_10:
      char v12 = 1;
      unint64_t v13 = (std::__shared_weak_count *)v65[1];
      if (v65[1]) {
        goto LABEL_57;
      }
      goto LABEL_2;
    }
    uint64_t v14 = MIL::Builder::OperationBuilder::GetOperator(v65[0]);
    uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)v14 + 16))(v14);
    Espresso::AOT::GetOperatorType(v15, (std::string *)v68);
    if ((SBYTE7(v69) & 0x80000000) == 0)
    {
      if (SBYTE7(v69) != 9) {
        goto LABEL_36;
      }
      if (v68[0] != (void *)0x6E5F726568746167 || LOBYTE(v68[1]) != 100) {
        goto LABEL_36;
      }
LABEL_29:
      uint64_t v19 = v72;
      if ((unint64_t)v72 >= v73)
      {
        uint64_t v21 = (MIL::Builder::OperationBuilder **)std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__push_back_slow_path<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions> const&>((uint64_t)&v71, (long long *)v65);
      }
      else
      {
        std::__shared_weak_count *v72 = v65[0];
        uint64_t v20 = v65[1];
        v19[1] = v65[1];
        if (v20) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)v20 + 1, 1uLL, memory_order_relaxed);
        }
        uint64_t v21 = v19 + 2;
      }
      int v72 = v21;
      goto LABEL_36;
    }
    if (v68[1] != (void *)9)
    {
      operator delete(v68[0]);
      goto LABEL_36;
    }
    BOOL v18 = *(void *)v68[0] != 0x6E5F726568746167 || *((unsigned char *)v68[0] + 8) != 100;
    operator delete(v68[0]);
    if (!v18) {
      goto LABEL_29;
    }
LABEL_36:
    uint64_t v22 = MIL::Builder::OperationBuilder::GetOperator(v65[0]);
    uint64_t v23 = (*(uint64_t (**)(uint64_t))(*(void *)v22 + 16))(v22);
    Espresso::AOT::GetOperatorType(v23, (std::string *)v68);
    if (SBYTE7(v69) < 0)
    {
      BOOL v27 = v68[1] == (void *)10 && *(void *)v68[0] == 0x69746E6175716564 && *((_WORD *)v68[0] + 4) == 25978;
      operator delete(v68[0]);
      char v12 = 0;
      v8 |= v27;
      unint64_t v13 = (std::__shared_weak_count *)v65[1];
      if (v65[1])
      {
LABEL_57:
        if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
    }
    else if (SBYTE7(v69) == 10)
    {
      BOOL v25 = v68[0] == (void *)0x69746E6175716564 && LOWORD(v68[1]) == 25978;
      char v12 = 0;
      v8 |= v25;
      unint64_t v13 = (std::__shared_weak_count *)v65[1];
      if (v65[1]) {
        goto LABEL_57;
      }
    }
    else
    {
      char v12 = 0;
      unint64_t v13 = (std::__shared_weak_count *)v65[1];
      if (v65[1]) {
        goto LABEL_57;
      }
    }
LABEL_2:
    ++v7;
    if (v12) {
      goto LABEL_113;
    }
  }
  if ((v8 & 1) == 0) {
    goto LABEL_113;
  }
  unint64_t v28 = v71;
  if (v71 == v72) {
    goto LABEL_114;
  }
  v68[0] = *a2;
  uint64_t v29 = std::__hash_table<std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::__unordered_map_hasher<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::hash<E5RT::AsyncEvent const*>,std::equal_to<E5RT::AsyncEvent const*>,true>,std::__unordered_map_equal<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::equal_to<E5RT::AsyncEvent const*>,std::hash<E5RT::AsyncEvent const*>,true>,std::allocator<std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>>>::find<E5RT::AsyncEvent const*>(a4, (uint64_t *)v68);
  if (!v29) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  *(_OWORD *)uint64_t v68 = 0u;
  long long v69 = 0u;
  int v70 = 1065353216;
  uint64_t v30 = (uint64_t *)v71;
  uint64_t v59 = (uint64_t *)v72;
  if (v71 == v72)
  {
    v68[0] = 0;
    goto LABEL_113;
  }
  uint64_t v31 = v29 + 3;
  while (2)
  {
    *(_OWORD *)uint64_t v65 = 0u;
    *(_OWORD *)long long __p = 0u;
    int v67 = 1065353216;
    v62.__r_.__value_.__r.__words[0] = *v30;
    uint64_t v32 = std::__hash_table<std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::__unordered_map_hasher<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::hash<E5RT::AsyncEvent const*>,std::equal_to<E5RT::AsyncEvent const*>,true>,std::__unordered_map_equal<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::equal_to<E5RT::AsyncEvent const*>,std::hash<E5RT::AsyncEvent const*>,true>,std::allocator<std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>>>::find<E5RT::AsyncEvent const*>(v31, (uint64_t *)&v62);
    if (!v32) {
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    }
    if (a5 >= 2)
    {
      uint64_t v33 = *((unsigned int *)v32 + 6);
      int v34 = 2;
      int v35 = -1;
      unsigned int v61 = *((_DWORD *)v32 + 6);
      while (1)
      {
        if ((int)v33 + v35 < 0)
        {
LABEL_90:
          if (v33 != v61)
          {
            if (__p[1])
            {
              unint64_t v41 = __p[0];
              if (__p[0])
              {
                char v42 = *(void **)__p[0];
                if (*(void *)__p[0])
                {
                  do
                  {
                    BOOL v43 = (MIL::Builder::OperationBuilder *)*((void *)v41 + 2);
                    v62.__r_.__value_.__r.__words[0] = v42[2];
                    unint64_t v63 = v43;
                    BOOL v44 = std::__hash_table<std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::__unordered_map_hasher<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::hash<E5RT::AsyncEvent const*>,std::equal_to<E5RT::AsyncEvent const*>,true>,std::__unordered_map_equal<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::equal_to<E5RT::AsyncEvent const*>,std::hash<E5RT::AsyncEvent const*>,true>,std::allocator<std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>>>::find<E5RT::AsyncEvent const*>(v31, (uint64_t *)&v62);
                    if (!v44
                      || (int v45 = *((_DWORD *)v44 + 6),
                          (BOOL v46 = std::__hash_table<std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::__unordered_map_hasher<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::hash<E5RT::AsyncEvent const*>,std::equal_to<E5RT::AsyncEvent const*>,true>,std::__unordered_map_equal<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::equal_to<E5RT::AsyncEvent const*>,std::hash<E5RT::AsyncEvent const*>,true>,std::allocator<std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>>>::find<E5RT::AsyncEvent const*>(v31, (uint64_t *)&v63)) == 0))
                    {
                      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
                    }
                    if (v45 < *((_DWORD *)v46 + 6)) {
                      unint64_t v41 = v42;
                    }
                    char v42 = (void *)*v42;
                  }
                  while (v42);
                }
              }
              uint64_t v47 = std::__hash_table<std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::__unordered_map_hasher<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::hash<E5RT::AsyncEvent const*>,std::equal_to<E5RT::AsyncEvent const*>,true>,std::__unordered_map_equal<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::equal_to<E5RT::AsyncEvent const*>,std::hash<E5RT::AsyncEvent const*>,true>,std::allocator<std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>>>::find<E5RT::AsyncEvent const*>(v31, (uint64_t *)v41 + 2);
              if (!v47) {
                std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
              }
              Espresso::AOT::GroupTagger::MoveOps((uint64_t)v47, v48, v61, v33, a2, v65, v31);
            }
          }
          break;
        }
        MIL::Builder::BlockBuilder::GetOperation(*a2);
        uint64_t v37 = MIL::Builder::OperationBuilder::GetOperator(v63);
        uint64_t v38 = (*(uint64_t (**)(uint64_t))(*(void *)v37 + 16))(v37);
        Espresso::AOT::GetOperatorType(v38, &v62);
        if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
        {
          if (v62.__r_.__value_.__l.__size_ != 10)
          {
            operator delete(v62.__r_.__value_.__l.__data_);
            char v39 = 0;
            uint64_t v40 = v64;
            if (v64) {
              goto LABEL_85;
            }
            goto LABEL_68;
          }
          if (bswap64(*(void *)v62.__r_.__value_.__l.__data_) != 0x64657175616E7469
            || bswap32(*(unsigned __int16 *)(v62.__r_.__value_.__r.__words[0] + 8)) >> 16 != 31333)
          {
            operator delete(v62.__r_.__value_.__l.__data_);
LABEL_84:
            char v39 = 0;
            uint64_t v40 = v64;
            if (v64) {
              goto LABEL_85;
            }
            goto LABEL_68;
          }
          operator delete(v62.__r_.__value_.__l.__data_);
        }
        else if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) != 10 {
               || bswap64(v62.__r_.__value_.__r.__words[0]) != 0x64657175616E7469
        }
               || bswap32(LOWORD(v62.__r_.__value_.__r.__words[1])) >> 16 != 31333)
        {
          goto LABEL_84;
        }
        char v39 = 1;
        uint64_t v33 = (v33 + v35);
        uint64_t v40 = v64;
        if (v64)
        {
LABEL_85:
          if (!atomic_fetch_add(&v40->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
            std::__shared_weak_count::__release_weak(v40);
          }
        }
LABEL_68:
        if (v34 >= a5) {
          char v36 = 1;
        }
        else {
          char v36 = v39;
        }
        ++v34;
        --v35;
        if (v36) {
          goto LABEL_90;
        }
      }
    }
    uint64_t v49 = __p[0];
    if (__p[0])
    {
      do
      {
        char v50 = (void *)*v49;
        operator delete(v49);
        uint64_t v49 = v50;
      }
      while (v50);
    }
    size_t v51 = v65[0];
    v65[0] = 0;
    if (v51) {
      operator delete(v51);
    }
    v30 += 2;
    if (v30 != v59) {
      continue;
    }
    break;
  }
  char v52 = (void *)v69;
  while (v52)
  {
    std::string v53 = v52;
    char v52 = (void *)*v52;
    size_t v54 = (std::__shared_weak_count *)v53[3];
    if (v54 && !atomic_fetch_add(&v54->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
    operator delete(v53);
  }
  size_t v55 = v68[0];
  v68[0] = 0;
  if (v55) {
    operator delete(v55);
  }
LABEL_113:
  unint64_t v28 = v71;
LABEL_114:
  if (v28)
  {
    int v56 = v72;
    v57 = v28;
    if (v72 != v28)
    {
      do
      {
        std::vector<int>::size_type v58 = (std::__shared_weak_count *)*(v56 - 1);
        if (v58)
        {
          if (!atomic_fetch_add(&v58->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
            std::__shared_weak_count::__release_weak(v58);
          }
        }
        v56 -= 2;
      }
      while (v56 != v28);
      v57 = v71;
    }
    int v72 = v28;
    operator delete(v57);
  }
}

void sub_1922707A4(_Unwind_Exception *a1)
{
  std::vector<std::shared_ptr<E5RT::IOPort>>::~vector[abi:ne180100]((void **)(v1 - 112));
  _Unwind_Resume(a1);
}

void sub_1922707B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)va);
  std::unordered_set<std::shared_ptr<E5RT::AsyncEvent const>>::~unordered_set[abi:ne180100]((uint64_t)va1);
  std::vector<std::shared_ptr<E5RT::IOPort>>::~vector[abi:ne180100]((void **)(v9 - 112));
  _Unwind_Resume(a1);
}

void *anonymous namespace'::RecursiveBackwardTagUntil(uint64_t *a1, uint64_t a2, uint64_t a3, void *a4, void *a5, uint64_t a6)
{
  double result = std::__hash_table<std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,std::__unordered_map_hasher<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,std::hash<E5RT::AsyncEvent const*>,std::equal_to<E5RT::AsyncEvent const*>,true>,std::__unordered_map_equal<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,std::equal_to<E5RT::AsyncEvent const*>,std::hash<E5RT::AsyncEvent const*>,true>,std::allocator<std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>>>::find<E5RT::AsyncEvent const*>(a4, a1);
  if (!result)
  {
    v21[0] = (void *)*a1;
    uint64_t v13 = std::__hash_table<std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,std::__unordered_map_hasher<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,std::hash<E5RT::AsyncEvent const*>,std::equal_to<E5RT::AsyncEvent const*>,true>,std::__unordered_map_equal<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,std::equal_to<E5RT::AsyncEvent const*>,std::hash<E5RT::AsyncEvent const*>,true>,std::allocator<std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>>>::find<E5RT::AsyncEvent const*>(a5, (uint64_t *)v21);
    if (!v13) {
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    }
    if (*((_DWORD *)v13 + 6) > (int)a6)
    {
      v21[0] = (void *)*a1;
      std::__hash_table<MIL::Builder::OperationBuilder *,std::hash<MIL::Builder::OperationBuilder *>,std::equal_to<MIL::Builder::OperationBuilder *>,std::allocator<MIL::Builder::OperationBuilder *>>::__emplace_unique_key_args<MIL::Builder::OperationBuilder *,MIL::Builder::OperationBuilder *>(a3, (uint64_t *)v21, v21);
      MIL::Builder::OperationBuilder::GetInputArguments((uint64_t *)v21, (MIL::Builder::OperationBuilder *)*a1);
      uint64_t v14 = (MIL::Builder::Variable *)__p;
      if (__p)
      {
        do
        {
          if (MIL::Builder::Variable::TryGetName(*((MIL::Builder::Variable **)v14 + 2)))
          {
            MIL::Builder::BlockBuilder::TryGetOperation();
            if (v19) {
            uint64_t v15 = v20;
            }
            if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
              std::__shared_weak_count::__release_weak(v15);
            }
          }
          uint64_t v14 = *(MIL::Builder::Variable **)v14;
        }
        while (v14);
        uint64_t v16 = __p;
        if (__p)
        {
          do
          {
            uint64_t v17 = (void *)*v16;
            operator delete(v16);
            uint64_t v16 = v17;
          }
          while (v17);
        }
      }
      BOOL v18 = v21[0];
      v21[0] = 0;
      if (v18) {
        operator delete(v18);
      }
    }
    v21[0] = a1;
    double result = std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,BOOL>,std::__unordered_map_hasher<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,BOOL>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::__unordered_map_equal<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,BOOL>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,BOOL>>>::__emplace_unique_key_args<std::shared_ptr<MIL::Builder::OperationBuilder>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<MIL::Builder::OperationBuilder> const&>,std::tuple<>>((uint64_t)a4, a1, (uint64_t)&std::piecewise_construct, (void **)v21);
    *((unsigned char *)result + 32) = 1;
  }
  return result;
}

void sub_192270A08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_192270A24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_192270A38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void Espresso::inner_product_kernel_cpu::set_f16_biases(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v7 = *a2;
  uint64_t v6 = a2[1];
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 720) = v7;
  int v8 = *(std::__shared_weak_count **)(a1 + 728);
  *(void *)(a1 + 728) = v6;
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  uint64_t v9 = *a2;
  *(_DWORD *)(a1 + 312) = *a2 != 0;
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int const*&,void>(&v16, (int *)(v9 + 8));
  uint64_t v10 = v16;
  uint64_t v11 = *(void **)(v16 + 16);
  vImagePixelCount v12 = *(int *)(*a2 + 8);
  src.data = *(void **)(*a2 + 16);
  src.height = 1;
  src.width = v12;
  src.rowBytes = 2 * v12;
  dest.data = v11;
  dest.height = 1;
  dest.width = v12;
  dest.rowBytes = 4 * v12;
  vImageConvert_Planar16FtoPlanarF(&src, &dest, 0);
  uint64_t v13 = (std::__shared_weak_count *)v17;
  v15[0] = v10;
  v15[1] = v17;
  if (v17) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v14 = *(std::__shared_weak_count **)(a3 + 8);
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::generic_inner_product_kernel::set_biases(a1, v15);
  if (v14) {
    nitro::nitro_function::nitro_function(v14);
  }
  if (v13)
  {
    nitro::nitro_function::nitro_function(v13);
    nitro::nitro_function::nitro_function(v13);
  }
}

void sub_192270B60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (v13) {
    nitro::nitro_function::nitro_function(v13);
  }
  if (v12)
  {
    nitro::nitro_function::nitro_function(v12);
    nitro::nitro_function::nitro_function(v12);
  }
  _Unwind_Resume(exception_object);
}

void std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int const*&,void>(void *a1, int *a2)
{
  unint64_t v4 = (char *)operator new(0x58uLL);
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = 0;
  *(void *)unint64_t v4 = &unk_1EE389920;
  *((void *)v4 + 3) = &unk_1EE36BEB0;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  uint64_t v5 = *a2;
  *((_DWORD *)v4 + 8) = v5;
  size_t v6 = 4 * v5;
  uint64_t v7 = Espresso::kern_alloc_uninitialized((Espresso *)(4 * v5));
  bzero(v7, v6);
  *((void *)v4 + 5) = v7;
  v4[48] = 1;
  *a1 = v4 + 24;
  a1[1] = v4;
}

void sub_192270C58(_Unwind_Exception *a1)
{
  shared_owners = (std::__shared_weak_count *)v1[3].__shared_owners_;
  if (shared_owners) {
    nitro::nitro_function::nitro_function(shared_owners);
  }
  shared_weak_owners = (std::__shared_weak_count *)v1[2].__shared_weak_owners_;
  if (shared_weak_owners) {
    nitro::nitro_function::nitro_function(shared_weak_owners);
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v5);
  _Unwind_Resume(a1);
}

void Espresso::generic_inner_product_kernel::set_biases(uint64_t a1, uint64_t *a2)
{
  BOOL v2 = (std::__shared_weak_count *)a2[1];
  uint64_t v3 = *a2;
  unint64_t v4 = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 392))(a1, &v3);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
}

void sub_192270D00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::inner_product_kernel_cpu::set_biases(uint64_t a1, uint64_t *a2)
{
  uint64_t v5 = *a2;
  uint64_t v4 = a2[1];
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 544) = v5;
  size_t v6 = *(std::__shared_weak_count **)(a1 + 552);
  *(void *)(a1 + 552) = v4;
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }
  *(_DWORD *)(a1 + 312) = *a2 != 0;
}

void nitro::ndarray<float>::pairwise_element_visitor<unsigned char,nitro::ndarray<float>& nitro::ndarray<float>::operator-=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(float &,unsigned char const&)#1}>(nitro::ndarray<unsigned char> const&,nitro::ndarray<float>& nitro::ndarray<float>::operator-=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(float &,unsigned char const&)#1})::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  BOOL v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  uint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    size_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    int v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      uint64_t v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        uint64_t v10 = __p;
      }
      else {
        uint64_t v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  void nitro::ndarray<float>::pairwise_element_visitor<unsigned char,nitro::ndarray<float>& nitro::ndarray<float>::operator-=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(float &,unsigned char const&)#1}>(nitro::ndarray<unsigned char> const&,nitro::ndarray<float>& nitro::ndarray<float>::operator-=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(float &,unsigned char const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_192271000(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void void nitro::ndarray<half>::pairwise_element_visitor<int,nitro::ndarray<half>& nitro::ndarray<half>::assign<int>(nitro::ndarray<int> const&)::{lambda(half &,int const&)#1}>(nitro::ndarray<int> const&,nitro::ndarray<half>& nitro::ndarray<half>::assign<int>(nitro::ndarray<int> const&)::{lambda(half &,int const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    BOOL v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      uint64_t v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        uint64_t v4 = __p;
      }
      else {
        uint64_t v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    size_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_192271188(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19227119C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x192271194);
}

file_logger *file_logger::start_stream(file_logger *this, int a2, const char *a3, const char *a4, int a5, char a6)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  unsigned __int8 v10 = pthread_getspecific(*((void *)this + 74));
  if (!v10) {
    operator new();
  }
  std::stringbuf::str();
  if (v25 < 0)
  {
    operator delete(v23);
    if (!v24) {
      goto LABEL_10;
    }
  }
  else if (!v25)
  {
    goto LABEL_10;
  }
  uint64_t v11 = pthread_getspecific(*((void *)this + 74));
  if (v11)
  {
    if (*((unsigned char *)v11 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11 + 2, (uint64_t)"\n", 1);
      file_logger::stream_flush(this);
      if (*((_DWORD *)this + 150) == 7)
      {
        __print_back_trace();
        exception = __cxa_allocate_exception(8uLL);
        void *exception = "LOG_FATAL encountered";
        __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
      }
    }
  }
LABEL_10:
  v10[74] = a2;
  if (*((_DWORD *)this + 169) > a2 || (a6 & 1) == 0)
  {
    *((unsigned char *)v10 + 280) = 0;
    return this;
  }
  std::stringbuf::str();
  if (v25 < 0)
  {
    operator delete(v23);
    if (v24) {
      goto LABEL_19;
    }
  }
  else if (v25)
  {
    goto LABEL_19;
  }
  time(0);
  unsigned __int8 v13 = (void *)std::ostream::operator<<();
  uint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" : ", 3);
  size_t v15 = strlen((&messages)[a2]);
  uint64_t v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)(&messages)[a2], v15);
  uint64_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"(", 1);
  size_t v18 = strlen(a4);
  uint64_t v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)a4, v18);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)":", 1);
  uint64_t v20 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"): ", 3);
LABEL_19:
  *((unsigned char *)v10 + 280) = 1;
  *((_DWORD *)this + 150) = a2;
  uint64_t v21 = (uint64_t)v10 + *(void *)(*((void *)v10 + 2) - 24) + 16;
  if ((*(unsigned char *)(v21 + 32) & 5) != 0)
  {
    *((void *)v10 + 36) = -1;
  }
  else
  {
    (*(void (**)(void **__return_ptr))(**(void **)(v21 + 40) + 32))(&v23);
    *((void *)v10 + 36) = v26;
  }
  return this;
}

void sub_192271470(_Unwind_Exception *a1)
{
  MEMORY[0x192FF16B0](v1, 0x10B2C40F675228ALL);
  _Unwind_Resume(a1);
}

void Espresso::analysis_debug_metadata::~analysis_debug_metadata(Espresso::analysis_debug_metadata *this)
{
  *(void *)this = &unk_1EE359F38;
  uint64_t v1 = (void **)((char *)this + 8);
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>>>::~__hash_table((uint64_t)this + 176);
  Espresso::model_metadata_t::~model_metadata_t(v1);
}

{
  void **v1;
  uint64_t vars8;

  *(void *)this = &unk_1EE359F38;
  uint64_t v1 = (void **)((char *)this + 8);
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>>>::~__hash_table((uint64_t)this + 176);
  Espresso::model_metadata_t::~model_metadata_t(v1);

  JUMPOUT(0x192FF16B0);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>>>::__deallocate_node(*(void **)(a1 + 16));
  BOOL v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

uint64_t Espresso::analysis_debug_metadata::deserialize(uint64_t a1, void *a2)
{
  uint64_t v65 = 0;
  uint64_t v66 = 0;
  uint64_t v67 = 0;
  (*(void (**)(void, uint64_t *))(*(void *)*a2 + 32))(*a2, &v65);
  uint64_t v64 = 0;
  long long v62 = 0u;
  long long v63 = 0u;
  long long __p = 0u;
  long long v61 = 0u;
  long long v58 = 0u;
  long long v59 = 0u;
  long long v56 = 0u;
  long long v57 = 0u;
  long long v54 = 0u;
  long long v55 = 0u;
  *(_OWORD *)size_t v51 = 0u;
  long long v52 = 0u;
  int v53 = 1065353216;
  uint64_t v3 = v65;
  uint64_t v4 = v66;
  if (v65 != v66)
  {
    while (1)
    {
      if ((*(char *)(v3 + 23) & 0x80000000) == 0)
      {
        uint64_t v5 = (uint64_t *)v3;
        switch(*(unsigned char *)(v3 + 23))
        {
          case 4:
            if (*(_DWORD *)v3 == 1701667182) {
              goto LABEL_40;
            }
            int v6 = *(_DWORD *)v3;
            goto LABEL_9;
          case 6:
            if (*(_DWORD *)v3 != 1684960610 || *(_WORD *)(v3 + 4) != 25964) {
              goto LABEL_64;
            }
            goto LABEL_51;
          case 7:
            if (*(_DWORD *)v3 == 1936876918 && *(_DWORD *)(v3 + 3) == 1852795251) {
              goto LABEL_43;
            }
            if (*(_DWORD *)v3 != 1685025392 || *(_DWORD *)(v3 + 3) != 1952675172) {
              goto LABEL_64;
            }
            goto LABEL_37;
          case 8:
            uint64_t v10 = *(void *)v3;
            goto LABEL_55;
          case 0xA:
            goto LABEL_60;
          default:
            goto LABEL_64;
        }
      }
      switch(*(void *)(v3 + 8))
      {
        case 4:
          if (**(_DWORD **)v3 == 1701667182)
          {
LABEL_40:
            (*(void (**)(long long *__return_ptr))(*(void *)*a2 + 112))(&v43);
            if (SHIBYTE(v56) < 0) {
              operator delete(*((void **)&v55 + 1));
            }
            long long v16 = v43;
            p_p = (long long *)((char *)&v55 + 8);
            goto LABEL_76;
          }
          int v6 = **(_DWORD **)v3;
LABEL_9:
          if (v6 != 1752457584) {
            goto LABEL_64;
          }
          goto LABEL_43;
        case 6:
          if (**(_DWORD **)v3 != 1684960610 || *(_WORD *)(*(void *)v3 + 4) != 25964) {
            goto LABEL_64;
          }
LABEL_51:
          (*(void (**)(long long *__return_ptr))(*(void *)*a2 + 112))(&v43);
          if (SBYTE7(v55) < 0) {
            operator delete((void *)v54);
          }
          long long v54 = v43;
          *(void *)&long long v55 = v44;
          goto LABEL_77;
        case 7:
          uint64_t v11 = *(int **)v3;
          if (**(_DWORD **)v3 == 1936876918 && *(_DWORD *)(*(void *)v3 + 3) == 1852795251)
          {
LABEL_43:
            (*(void (**)(long long *__return_ptr))(*(void *)*a2 + 112))(&v43);
            if (SBYTE7(v58) < 0) {
              operator delete((void *)v57);
            }
            long long v16 = v43;
            p_p = &v57;
LABEL_76:
            long long *p_p = v16;
            *((void *)p_p + 2) = v44;
            goto LABEL_77;
          }
          int v13 = *v11;
          int v14 = *(int *)((char *)v11 + 3);
          if (v13 == 1685025392 && v14 == 1952675172)
          {
LABEL_37:
            (*(void (**)(long long *__return_ptr))(*(void *)*a2 + 112))(&v43);
            if (SBYTE7(v61) < 0) {
              operator delete((void *)__p);
            }
            long long v16 = v43;
            p_p = &__p;
            goto LABEL_76;
          }
LABEL_64:
          (*(void (**)(uint64_t *__return_ptr))(*(void *)*a2 + 120))(&v49);
          BOOL v46 = 0;
          uint64_t v47 = 0;
          uint64_t v48 = 0;
          (*(void (**)(uint64_t, long long **))(*(void *)v49 + 32))(v49, &v46);
          long long v43 = 0u;
          long long v44 = 0u;
          int v45 = 1065353216;
          uint64_t v22 = v46;
          uint64_t v23 = v47;
          while (v22 != v23)
          {
            (*(void (**)(long long *__return_ptr))(*(void *)v49 + 112))(&v41);
            uint64_t v68 = v22;
            uint64_t v24 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v43, (uint64_t)v22, (uint64_t)&std::piecewise_construct, &v68);
            char v25 = v24 + 5;
            if (*((char *)v24 + 63) < 0) {
              operator delete((void *)*v25);
            }
            *(_OWORD *)char v25 = v41;
            v25[2] = v42;
            uint64_t v22 = (long long *)((char *)v22 + 24);
          }
          *(void *)&long long v41 = v3;
          uint64_t v26 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v51, v3, (uint64_t)&std::piecewise_construct, (long long **)&v41);
          if (v26 + 5 != (uint64_t *)&v43)
          {
            *((_DWORD *)v26 + 18) = v45;
            std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *> *>>(v26 + 5, (uint64_t *)v44, 0);
          }
          std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&v43);
          *(void *)&long long v43 = &v46;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v43);
          if (v50) {
            nitro::nitro_function::nitro_function(v50);
          }
LABEL_77:
          v3 += 24;
          if (v3 == v4) {
            goto LABEL_78;
          }
          break;
        case 8:
          uint64_t v10 = **(void **)v3;
LABEL_55:
          if (v10 != 0x657361635F657375) {
            goto LABEL_64;
          }
          (*(void (**)(long long *__return_ptr))(*(void *)*a2 + 112))(&v43);
          if (SHIBYTE(v62) < 0) {
            operator delete(*((void **)&v61 + 1));
          }
          long long v16 = v43;
          p_p = (long long *)((char *)&v61 + 8);
          goto LABEL_76;
        case 0xALL:
          uint64_t v5 = *(uint64_t **)v3;
LABEL_60:
          uint64_t v19 = *v5;
          int v20 = *((unsigned __int16 *)v5 + 4);
          if (v19 != 0x6B6F745F62646C6DLL || v20 != 28261) {
            goto LABEL_64;
          }
          (*(void (**)(long long *__return_ptr))(*(void *)*a2 + 112))(&v43);
          if (SHIBYTE(v64) < 0) {
            operator delete((void *)v63);
          }
          long long v16 = v43;
          p_p = &v63;
          goto LABEL_76;
        default:
          goto LABEL_64;
      }
    }
  }
LABEL_78:
  Espresso::analysis_debug_metadata::set_model_metadata(a1, (const std::string *)&v54);
  uint64_t v27 = (void *)(a1 + 176);
  if ((void **)(a1 + 176) != v51)
  {
    *(_DWORD *)(a1 + 208) = v53;
    unint64_t v28 = (uint64_t *)v52;
    uint64_t v29 = *(void *)(a1 + 184);
    if (v29)
    {
      for (uint64_t i = 0; i != v29; ++i)
        *(void *)(*v27 + 8 * i) = 0;
      uint64_t v31 = *(void *)(a1 + 192);
      *(void *)(a1 + 192) = 0;
      *(void *)(a1 + 200) = 0;
      if (v31) {
        BOOL v32 = v28 == 0;
      }
      else {
        BOOL v32 = 1;
      }
      if (v32)
      {
        uint64_t v33 = (void *)v31;
      }
      else
      {
        do
        {
          std::string::operator=((std::string *)(v31 + 16), (const std::string *)(v28 + 2));
          if ((uint64_t *)v31 != v28)
          {
            *(_DWORD *)(v31 + 72) = *((_DWORD *)v28 + 18);
            std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *> *>>((void *)(v31 + 40), (uint64_t *)v28[7], 0);
          }
          uint64_t v33 = *(void **)v31;
          std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__node_insert_multi(a1 + 176, v31);
          unint64_t v28 = (uint64_t *)*v28;
          if (!v33) {
            break;
          }
          uint64_t v31 = (uint64_t)v33;
        }
        while (v28);
      }
      std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>>>::__deallocate_node(v33);
    }
    for (; v28; unint64_t v28 = (uint64_t *)*v28)
    {
      int v34 = (char *)operator new(0x50uLL);
      int v35 = v34;
      *(void *)&long long v43 = v34;
      *((void *)&v43 + 1) = a1 + 192;
      LOBYTE(v44) = 0;
      char v36 = v34 + 16;
      *(void *)int v34 = 0;
      *((void *)v34 + 1) = 0;
      if (*((char *)v28 + 39) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)(v34 + 16), (const std::string::value_type *)v28[2], v28[3]);
      }
      else
      {
        long long v37 = *((_OWORD *)v28 + 1);
        *((void *)v34 + 4) = v28[4];
        *char v36 = v37;
      }
      std::unordered_map<std::string,std::string>::unordered_map((uint64_t)(v35 + 40), (uint64_t)(v28 + 5));
      LOBYTE(v44) = 1;
      *((void *)v35 + 1) = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)v36);
      std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__node_insert_multi((uint64_t)v27, v43);
      *(void *)&long long v43 = 0;
      std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v43);
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>>>::__deallocate_node((void *)v52);
  uint64_t v38 = v51[0];
  v51[0] = 0;
  if (v38) {
    operator delete(v38);
  }
  if (SHIBYTE(v64) < 0) {
    operator delete((void *)v63);
  }
  if (SHIBYTE(v62) < 0) {
    operator delete(*((void **)&v61 + 1));
  }
  if (SBYTE7(v61) < 0) {
    operator delete((void *)__p);
  }
  if (SHIBYTE(v59) < 0) {
    operator delete(*((void **)&v58 + 1));
  }
  if (SBYTE7(v58) < 0) {
    operator delete((void *)v57);
  }
  if (SHIBYTE(v56) < 0) {
    operator delete(*((void **)&v55 + 1));
  }
  if (SBYTE7(v55) < 0) {
    operator delete((void *)v54);
  }
  *(void *)&long long v54 = &v65;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v54);
  return 1;
}

void sub_192271D58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>>>::~__hash_table((uint64_t)&a32);
  Espresso::model_metadata_t::~model_metadata_t((void **)&a38);
  a38 = v38 - 136;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a38);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>>>::__deallocate_node(void *a1)
{
  if (a1)
  {
    uint64_t v1 = a1;
    do
    {
      BOOL v2 = (void *)*v1;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_map<std::string,std::string>>,0>((uint64_t)(v1 + 2));
      operator delete(v1);
      uint64_t v1 = v2;
    }
    while (v2);
  }
}

std::string *Espresso::analysis_debug_metadata::set_model_metadata(uint64_t a1, const std::string *a2)
{
  std::string::operator=((std::string *)(a1 + 8), a2);
  std::string::operator=((std::string *)(a1 + 32), a2 + 1);
  std::string::operator=((std::string *)(a1 + 56), a2 + 2);
  std::string::operator=((std::string *)(a1 + 80), a2 + 3);
  std::string::operator=((std::string *)(a1 + 104), a2 + 4);
  std::string::operator=((std::string *)(a1 + 128), a2 + 5);

  return std::string::operator=((std::string *)(a1 + 152), a2 + 6);
}

void Espresso::model_metadata_t::~model_metadata_t(void **this)
{
  if (*((char *)this + 167) < 0) {
    operator delete(this[18]);
  }
  if (*((char *)this + 143) < 0) {
    operator delete(this[15]);
  }
  if (*((char *)this + 119) < 0) {
    operator delete(this[12]);
  }
  if (*((char *)this + 95) < 0) {
    operator delete(this[9]);
  }
  if (*((char *)this + 71) < 0) {
    operator delete(this[6]);
  }
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

void E5RT::E5CompilerImpl::CompileInternal(uint64_t a1@<X0>, std::string::size_type a2@<X1>, E5RT::E5CompilerOptions *a3@<X2>, void *a4@<X8>)
{
  std::string::size_type v5 = a2;
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  memset(__replacement, 0, 24);
  uint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  uint64_t v9 = *(void *)(a2 + 8);
  if ((v8 & 0x80u) != 0)
  {
    a2 = *(void *)a2;
    uint64_t v8 = v9;
  }
  std::string::append[abi:ne180100]<char const*,0>((std::string *)__replacement, (std::string *)a2, (std::string *)(a2 + v8));
  std::__fs::filesystem::__status((const std::__fs::filesystem::path *)__replacement, 0);
  if ((__replacement[23] & 0x80000000) != 0) {
    operator delete(*(void **)__replacement);
  }
  if (__from.__pn_.__r_.__value_.__s.__data_[0] == 255
    || __from.__pn_.__r_.__value_.__s.__data_[0] == 0)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(__replacement, "CompileInternal");
    std::operator+<char>();
    E5RT::Status::Status(&v30, 1, &__from);
    E5RT::E5RTError::E5RTError(exception, __replacement, &v30);
  }
  if (E5RT::E5CompilerOptions::GetForceRecompilation(a3)
    && E5RT::E5CompilerOptions::GetForceFetchFromCache(a3))
  {
    uint64_t v27 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(__replacement, "CompileInternal");
    std::string::basic_string[abi:ne180100]<0>(&__from, "ForceRecompilation and ForceFetchFromCache can not be set to true at the same time.");
    E5RT::Status::Status(&v30, 2, &__from);
    E5RT::E5RTError::E5RTError(v27, __replacement, &v30);
  }
  memset(&__p, 0, sizeof(__p));
  *a4 = 0;
  E5RT::E5CompilerImpl::IsNewCompileRequiredInternal(a3, a1, v5, (uint64_t)__replacement);
  int v11 = __replacement[0];
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string __p = *(std::string *)&__replacement[8];
  uint64_t v12 = v33;
  *a4 = v33;
  if (v11)
  {
    if (!E5RT::E5CompilerOptions::GetForceFetchFromCache(a3))
    {
      memset(&__from, 0, sizeof(__from));
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      std::string::append[abi:ne180100]<char const*,0>(&__from.__pn_, p_p, (std::string *)((char *)p_p + size));
      memset(__replacement, 0, 24);
      int v15 = *(char *)(a1 + 63);
      if (v15 >= 0) {
        long long v16 = (std::string *)(a1 + 40);
      }
      else {
        long long v16 = *(std::string **)(a1 + 40);
      }
      uint64_t v17 = *(void *)(a1 + 48);
      if (v15 >= 0) {
        uint64_t v17 = *(unsigned __int8 *)(a1 + 63);
      }
      std::string::append[abi:ne180100]<char const*,0>((std::string *)__replacement, v16, (std::string *)((char *)v16 + v17));
      std::__fs::filesystem::path::replace_extension(&__from, (const std::__fs::filesystem::path *)__replacement);
      if ((__replacement[23] & 0x80000000) != 0) {
        operator delete(*(void **)__replacement);
      }
      __replacement[23] = 4;
      strcpy(__replacement, "e5rt");
      size_t v18 = E5RT::GetE5RTLog((uint64_t)__replacement);
      if ((__replacement[23] & 0x80000000) != 0) {
        operator delete(*(void **)__replacement);
      }
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
      {
        if (*(char *)(v5 + 23) >= 0) {
          std::string::size_type v23 = v5;
        }
        else {
          std::string::size_type v23 = *(void *)v5;
        }
        uint64_t v24 = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          uint64_t v24 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        p_from = &__from;
        if ((__from.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          p_from = (std::__fs::filesystem::path *)__from.__pn_.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)__replacement = 136315650;
        *(void *)&__replacement[4] = v23;
        *(_WORD *)&__replacement[12] = 2080;
        *(void *)&__replacement[14] = v24;
        *(_WORD *)&__replacement[22] = 2080;
        *(void *)&__replacement[24] = p_from;
        _os_log_debug_impl(&dword_1920CB000, v18, OS_LOG_TYPE_DEBUG, "E5CompilerImpl::CompileInternal::performCompilation input=%s output=%s tmp-output=%s\n", __replacement, 0x20u);
      }

      if (SHIBYTE(__from.__pn_.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external((std::string *)__replacement, __from.__pn_.__r_.__value_.__l.__data_, __from.__pn_.__r_.__value_.__l.__size_);
      }
      else {
        *(std::__fs::filesystem::path *)__replacement = __from;
      }
      E5RT::OnDeviceAOTCompilerInterface::Compile();
    }
    uint64_t v26 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(__replacement, "CompileInternal");
    std::string::basic_string[abi:ne180100]<0>(&__from, "E5 bundle does not exist in cache, but skipping compiling based on forceFetchFromCache.");
    E5RT::Status::Status(&v30, 13, &__from);
    E5RT::E5RTError::E5RTError(v26, __replacement, &v30);
  }
  if (!v12)
  {
    std::operator+<char>();
    uint64_t v19 = std::string::append(&__from.__pn_, " model was a cache hit but ProgramLibrary is null");
    long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    *(void *)&__replacement[16] = *((void *)&v19->__r_.__value_.__l + 2);
    *(_OWORD *)__replacement = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__from.__pn_.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__from.__pn_.__r_.__value_.__l.__data_);
    }
    uint64_t v21 = *(E5RT::E5BundleCacheManager **)(a1 + 24);
    std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&__from.__pn_, &__p);
    E5RT::E5BundleCacheManager::PurgeBundle(v21, &__from);
    if (SHIBYTE(__from.__pn_.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__from.__pn_.__r_.__value_.__l.__data_);
    }
    uint64_t v22 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&__from, "CompileInternal");
    E5RT::Status::Status(&v30, 11, __replacement);
    E5RT::E5RTError::E5RTError(v22, &__from, &v30);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_192272A24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,std::__fs::filesystem::path *a29,std::__fs::filesystem::path *a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a28 < 0)
  {
    operator delete(__p);
    if ((v39 & 1) == 0) {
      goto LABEL_7;
    }
  }
  else if (!v39)
  {
LABEL_7:
    if (a37 < 0) {
      operator delete(a32);
    }
    __cxa_begin_catch(exception_object);
    E5RT::E5BundleCacheManager::PurgeBundle(*(E5RT::E5BundleCacheManager **)(v37 + 24), (const std::__fs::filesystem::path *)&a29);
    long long v41 = *(E5RT::E5BundleCacheManager **)(v37 + 24);
    std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>((std::string *)&a32, (std::string *)&a9);
    E5RT::E5BundleCacheManager::PurgeBundle(v41, (const std::__fs::filesystem::path *)&a32);
    if (a37 < 0) {
      operator delete(a32);
    }
    std::current_exception();
    v42.__ptr_ = &a32;
    std::rethrow_exception(v42);
    sub_192272CA8();
  }
  __cxa_free_exception(v38);
  goto LABEL_7;
}

void sub_192272CAC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::exception_ptr a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
}

void sub_192272D24(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x192272F00);
}

void sub_192272D38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  E5RT::Status::~Status((E5RT::Status *)&a17);
  if (a25 < 0)
  {
    operator delete(__p);
    if ((v33 & 1) == 0)
    {
LABEL_6:
      if (a31 < 0) {
        operator delete(a26);
      }
      uint64_t v35 = *v31;
      *uint64_t v31 = 0;
      if (v35) {
        (*(void (**)(uint64_t))(*(void *)v35 + 8))(v35);
      }
      if (SHIBYTE(a11) < 0) {
        operator delete(a9);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v33)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v32);
  goto LABEL_6;
}

void sub_192272DBC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  if (a31 < 0) {
    JUMPOUT(0x192272DECLL);
  }
  JUMPOUT(0x192272B18);
}

void sub_192272DFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  E5RT::Status::~Status((E5RT::Status *)&a17);
  if (a25 < 0) {
    operator delete(__p);
  }
  if (a31 < 0)
  {
    operator delete(a26);
    if ((v33 & 1) == 0)
    {
LABEL_8:
      uint64_t v35 = *v31;
      *uint64_t v31 = 0;
      if (v35) {
        (*(void (**)(uint64_t))(*(void *)v35 + 8))(v35);
      }
      if (SHIBYTE(a11) < 0) {
        operator delete(a9);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v33)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v32);
  goto LABEL_8;
}

void sub_192272E44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  uint64_t v27 = *v25;
  uint64_t *v25 = 0;
  if (v27) {
    (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
  }
  if (SHIBYTE(a11) < 0) {
    operator delete(a9);
  }
  _Unwind_Resume(a1);
}

void sub_192272E80(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  __cxa_free_exception(v28);
  JUMPOUT(0x192272EC0);
}

void E5RT::E5BundleCacheManager::PurgeBundle(E5RT::E5BundleCacheManager *this, const std::__fs::filesystem::path *a2)
{
  std::__fs::filesystem::__status(a2, 0);
  if (!__dst.__r_.__value_.__s.__data_[0] || __dst.__r_.__value_.__s.__data_[0] == 255) {
    return;
  }
  std::__fs::filesystem::path::__string_view v2 = std::__fs::filesystem::path::__extension(a2);
  if (v2.__size_ >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v2.__size_ >= 0x17)
  {
    std::basic_string_view<_CharT, _Traits>::size_type v4 = (v2.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v2.__size_ | 7) != 0x17) {
      std::basic_string_view<_CharT, _Traits>::size_type v4 = v2.__size_ | 7;
    }
    std::basic_string_view<_CharT, _Traits>::size_type v5 = v4 + 1;
    p_dst = (std::string *)operator new(v4 + 1);
    __dst.__r_.__value_.__l.__size_ = v2.__size_;
    __dst.__r_.__value_.__r.__words[2] = v5 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_10;
  }
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v2.__size_;
  p_dst = &__dst;
  if (v2.__size_) {
LABEL_10:
  }
    memmove(p_dst, v2.__data_, v2.__size_);
  p_dst->__r_.__value_.__s.__data_[v2.__size_] = 0;
  v10.__pn_ = __dst;
  memset(&__dst, 0, sizeof(__dst));
  std::string::append[abi:ne180100]<char const*,0>(&__dst, (std::string *)".bundle", (std::string *)"");
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v6.__data_ = (const std::string_view::value_type *)&__dst;
  }
  else {
    v6.__data_ = (const std::string_view::value_type *)__dst.__r_.__value_.__r.__words[0];
  }
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v6.__size_ = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  }
  else {
    v6.__size_ = __dst.__r_.__value_.__l.__size_;
  }
  int v7 = std::__fs::filesystem::path::__compare(&v10, v6);
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v10.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_19;
    }
LABEL_22:
    operator delete(v10.__pn_.__r_.__value_.__l.__data_);
    if (!v7) {
      goto LABEL_23;
    }
    return;
  }
  operator delete(__dst.__r_.__value_.__l.__data_);
  if (SHIBYTE(v10.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_22;
  }
LABEL_19:
  if (!v7)
  {
LABEL_23:
    if (SHIBYTE(a2->__pn_.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&__dst, a2->__pn_.__r_.__value_.__l.__data_, a2->__pn_.__r_.__value_.__l.__size_);
    }
    else {
      std::string __dst = a2->__pn_;
    }
    v9[0] = 0;
    v9[16] = 0;
    E5RT::E5Program::LoadProgram((uint64_t)&__dst, (uint64_t)v9);
  }
}

void sub_1922733A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a2 == 2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x192273374);
  }
  _Unwind_Resume(a1);
}

uint64_t E5RT::E5CompilerOptions::GetForceRecompilation(E5RT::E5CompilerOptions *this)
{
  uint64_t v1 = (void *)*((void *)this + 1);
  if (v1) {
  std::__fs::filesystem::path::__string_view v2 = (void *)(*(uint64_t (**)(void *, const char *, uint64_t))(*(void *)v1 + 16))(v1, "forceRecompilation<BOOL>", 24);
  }
  if (!*v2
    || (uint64_t v3 = (unsigned __int8 *)((uint64_t (*)(uint64_t, void *, void, void, void *))*v2)(3, v2, 0, MEMORY[0x1E4FBA378], &std::__any_imp::__unique_typeinfo<BOOL>::__id)) == 0)
  {
    std::__throw_bad_any_cast[abi:ne180100]();
  }
  return *v3;
}

double E5RT::E5CompilerImpl::IsNewCompileRequiredInternal@<D0>(E5RT::E5CompilerOptions *this@<X2>, uint64_t a2@<X0>, std::string::size_type a3@<X1>, uint64_t a4@<X8>)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v21 = 0;
  if (!E5RT::E5CompilerOptions::GetForceRecompilation(this))
  {
    E5RT::E5BundleCacheManager::Lookup(*(void *)(a2 + 24), a3, (uint64_t)this, (uint64_t)&buf);
    int v11 = buf.__r_.__value_.__s.__data_[0];
    if (SHIBYTE(v21) < 0)
    {
      operator delete(__p[0]);
      *(_OWORD *)std::string __p = *(_OWORD *)&buf.__r_.__value_.__r.__words[1];
      uint64_t v21 = v23;
      if (!v11)
      {
LABEL_27:
        int v15 = *(E5RT::E5BundleCacheManager **)(a2 + 24);
        memset(&buf, 0, sizeof(buf));
        long long v16 = (char *)HIBYTE(v21);
        if (v21 >= 0) {
          uint64_t v17 = (std::string *)__p;
        }
        else {
          uint64_t v17 = (std::string *)__p[0];
        }
        if (v21 < 0) {
          long long v16 = (char *)__p[1];
        }
        std::string::append[abi:ne180100]<char const*,0>(&buf, v17, (std::string *)&v16[(void)v17]);
        E5RT::E5BundleCacheManager::PurgeBundle(v15, (const std::__fs::filesystem::path *)&buf);
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(buf.__r_.__value_.__l.__data_);
        }
        goto LABEL_34;
      }
    }
    else
    {
      *(_OWORD *)std::string __p = *(_OWORD *)&buf.__r_.__value_.__r.__words[1];
      uint64_t v21 = v23;
      if (!buf.__r_.__value_.__s.__data_[0]) {
        goto LABEL_27;
      }
    }
    E5RT::ProgramLibrary::OpenLibrary((E5RT::SharedResourceManager *)__p);
  }
  E5RT::E5CompilerOptions::operator=(*(void *)(a2 + 32), (uint64_t)this);
  E5RT::E5CompilerOptions::SetForceRecompilation(*(E5RT::E5CompilerOptions **)(a2 + 32), 0);
  *((unsigned char *)&buf.__r_.__value_.__s + 23) = 4;
  strcpy((char *)&buf, "e5rt");
  int v7 = E5RT::GetE5RTLog((uint64_t)&buf);
  uint64_t v8 = v7;
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(buf.__r_.__value_.__l.__data_);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO)) {
      goto LABEL_4;
    }
  }
  else if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
LABEL_4:
    if (*(char *)(a3 + 23) >= 0) {
      std::string::size_type v9 = a3;
    }
    else {
      std::string::size_type v9 = *(void *)a3;
    }
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v9;
    _os_log_impl(&dword_1920CB000, v8, OS_LOG_TYPE_INFO, "E5BundleCache IsNewCompileRequired: input=%s forceRecompile=True\n", (uint8_t *)&buf, 0xCu);
  }

  E5RT::E5BundleCacheManager::Lookup(*(void *)(a2 + 24), a3, *(void *)(a2 + 32), (uint64_t)&buf);
  int v10 = buf.__r_.__value_.__s.__data_[0];
  if (SHIBYTE(v21) < 0)
  {
    operator delete(__p[0]);
    *(_OWORD *)std::string __p = *(_OWORD *)&buf.__r_.__value_.__r.__words[1];
    uint64_t v21 = v23;
    if (!v10) {
      goto LABEL_34;
    }
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)&buf.__r_.__value_.__r.__words[1];
    uint64_t v21 = v23;
    if (!buf.__r_.__value_.__s.__data_[0]) {
      goto LABEL_34;
    }
  }
  uint64_t v12 = *(E5RT::E5BundleCacheManager **)(a2 + 24);
  memset(&buf, 0, sizeof(buf));
  int v13 = (char *)HIBYTE(v21);
  if (v21 >= 0) {
    int v14 = (std::string *)__p;
  }
  else {
    int v14 = (std::string *)__p[0];
  }
  if (v21 < 0) {
    int v13 = (char *)__p[1];
  }
  std::string::append[abi:ne180100]<char const*,0>(&buf, v14, (std::string *)&v13[(void)v14]);
  E5RT::E5BundleCacheManager::PurgeBundle(v12, (const std::__fs::filesystem::path *)&buf);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
LABEL_34:
  *(unsigned char *)a4 = 1;
  double result = *(double *)__p;
  *(_OWORD *)(a4 + 8) = *(_OWORD *)__p;
  *(void *)(a4 + 24) = v21;
  *(void *)(a4 + 32) = 0;
  return result;
}

void sub_192273CBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 121) < 0) {
    operator delete(*(void **)(v33 - 144));
  }

  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  if (a33 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void E5RT::E5BundleCacheManager::Lookup(uint64_t a1@<X0>, std::string::size_type a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  v25[2] = *MEMORY[0x1E4F143B8];
  E5RT::E5BundleCacheManager::GetPathToAllBundlesForInput<std::string>(a1, (std::string *)a2, &v22);
  std::__fs::filesystem::__status(&v22, 0);
  if (pn.__r_.__value_.__s.__data_[0] == 255 || pn.__r_.__value_.__s.__data_[0] == 0)
  {
    std::__fs::filesystem::__create_directories(&v22, 0);
    if (*(unsigned char *)(a1 + 56))
    {
      if (SHIBYTE(v22.__pn_.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&pn, v22.__pn_.__r_.__value_.__l.__data_, v22.__pn_.__r_.__value_.__l.__size_);
      }
      else {
        std::string pn = v22.__pn_;
      }
      E5RT::E5BundleCacheManager::MarkAsMobileOwned(a1, (std::string::size_type)&pn);
      if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(pn.__r_.__value_.__l.__data_);
      }
    }
  }
  E5RT::E5BundleCacheManager::GetPathToAllBundlesForInput<std::string>(a1, (std::string *)a2, (std::__fs::filesystem::path *)&pn);
  E5RT::E5BundleCacheKeyUtils::ToE5BundleCacheKey((std::string *)a2, a3, (uint64_t)&v19);
  std::string::size_type v9 = std::string::append(&v19, ".bundle");
  std::string::size_type v10 = v9->__r_.__value_.__r.__words[0];
  v25[0] = v9->__r_.__value_.__l.__size_;
  *(void *)((char *)v25 + 7) = *(std::string::size_type *)((char *)&v9->__r_.__value_.__r.__words[1] + 7);
  char v11 = HIBYTE(v9->__r_.__value_.__r.__words[2]);
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  *(std::string::size_type *)((char *)&__p.__pn_.__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v25 + 7);
  __p.__pn_.__r_.__value_.__r.__words[0] = v10;
  __p.__pn_.__r_.__value_.__l.__size_ = v25[0];
  *((unsigned char *)&__p.__pn_.__r_.__value_.__s + 23) = v11;
  std::__fs::filesystem::operator/[abi:ne180100](&__p, (uint64_t)&pn, &v21);
  if ((SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v19.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_14;
    }
LABEL_33:
    operator delete(v19.__r_.__value_.__l.__data_);
    if ((SHIBYTE(pn.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_34;
  }
  operator delete(__p.__pn_.__r_.__value_.__l.__data_);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_33;
  }
LABEL_14:
  if ((SHIBYTE(pn.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_15;
  }
LABEL_34:
  operator delete(pn.__r_.__value_.__l.__data_);
LABEL_15:
  std::__fs::filesystem::__status(&v21, 0);
  if (pn.__r_.__value_.__s.__data_[0]) {
    BOOL v12 = pn.__r_.__value_.__s.__data_[0] == 255;
  }
  else {
    BOOL v12 = 1;
  }
  int v13 = !v12;
  *((unsigned char *)&pn.__r_.__value_.__s + 23) = 4;
  strcpy((char *)&pn, "e5rt");
  int v14 = E5RT::GetE5RTLog((uint64_t)&pn);
  int v15 = v14;
  if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(pn.__r_.__value_.__l.__data_);
    if (!os_log_type_enabled(v15, OS_LOG_TYPE_INFO)) {
      goto LABEL_29;
    }
  }
  else if (!os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    goto LABEL_29;
  }
  if (*(char *)(a2 + 23) >= 0) {
    std::string::size_type v16 = a2;
  }
  else {
    std::string::size_type v16 = *(void *)a2;
  }
  uint64_t v17 = &v21;
  if ((v21.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    uint64_t v17 = (std::__fs::filesystem::path *)v21.__pn_.__r_.__value_.__r.__words[0];
  }
  LODWORD(pn.__r_.__value_.__l.__data_) = 136315650;
  *(std::string::size_type *)((char *)pn.__r_.__value_.__r.__words + 4) = v16;
  WORD2(pn.__r_.__value_.__r.__words[1]) = 2080;
  *(std::string::size_type *)((char *)&pn.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v17;
  HIWORD(pn.__r_.__value_.__r.__words[2]) = 1024;
  int v24 = v13;
  _os_log_impl(&dword_1920CB000, v15, OS_LOG_TYPE_INFO, "E5BundleCache Lookup: input=%s output=%s exists=%d\n", (uint8_t *)&pn, 0x1Cu);
LABEL_29:

  if (SHIBYTE(v21.__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&pn, v21.__pn_.__r_.__value_.__l.__data_, v21.__pn_.__r_.__value_.__l.__size_);
    int v18 = SHIBYTE(v21.__pn_.__r_.__value_.__r.__words[2]);
    *(unsigned char *)a4 = v13;
    *(std::string *)(a4 + 8) = pn;
    if (v18 < 0)
    {
      operator delete(v21.__pn_.__r_.__value_.__l.__data_);
      if (SHIBYTE(v22.__pn_.__r_.__value_.__r.__words[2]) < 0) {
        goto LABEL_31;
      }
    }
    else if (SHIBYTE(v22.__pn_.__r_.__value_.__r.__words[2]) < 0)
    {
      goto LABEL_31;
    }
  }
  else
  {
    *(unsigned char *)a4 = v13;
    *(std::__fs::filesystem::path *)(a4 + 8) = v21;
    if (SHIBYTE(v22.__pn_.__r_.__value_.__r.__words[2]) < 0) {
LABEL_31:
    }
      operator delete(v22.__pn_.__r_.__value_.__l.__data_);
  }
}

void sub_192274148(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a32 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void E5RT::E5BundleCacheManager::GetPathToAllBundlesForInput<std::string>(uint64_t a1@<X0>, std::string *a2@<X1>, std::__fs::filesystem::path *a3@<X8>)
{
  memset(&v11, 0, sizeof(v11));
  int v6 = *(char *)(a1 + 55);
  if (v6 >= 0) {
    int v7 = (std::string *)(a1 + 32);
  }
  else {
    int v7 = *(std::string **)(a1 + 32);
  }
  uint64_t v8 = *(void *)(a1 + 40);
  if (v6 >= 0) {
    uint64_t v8 = *(unsigned __int8 *)(a1 + 55);
  }
  std::string::append[abi:ne180100]<char const*,0>(&v11.__pn_, v7, (std::string *)((char *)v7 + v8));
  std::__fs::filesystem::operator/[abi:ne180100](&v11, a1 + 8, &v12);
  E5RT::E5BundleCacheKeyUtils::ToE5BundleCacheKey(a2, 0, (uint64_t)&v9);
  std::__fs::filesystem::path __p = v9;
  memset(&v9, 0, sizeof(v9));
  std::__fs::filesystem::operator/[abi:ne180100](&__p, (uint64_t)&v12, a3);
  if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__pn_.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v9.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_8:
      if ((SHIBYTE(v12.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_13;
    }
  }
  else if ((SHIBYTE(v9.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_8;
  }
  operator delete(v9.__pn_.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v12.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_9:
    if ((SHIBYTE(v11.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_14:
    operator delete(v11.__pn_.__r_.__value_.__l.__data_);
    return;
  }
LABEL_13:
  operator delete(v12.__pn_.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_14;
  }
}

void sub_192274338(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a21 < 0)
  {
    operator delete(a16);
    if ((a15 & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v28 - 33) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((a15 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a10);
  if ((*(char *)(v28 - 33) & 0x80000000) == 0)
  {
LABEL_4:
    if ((a28 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_9:
  operator delete(*(void **)(v28 - 56));
  if ((a28 & 0x80000000) == 0) {
LABEL_6:
  }
    _Unwind_Resume(exception_object);
LABEL_5:
  operator delete(__p);
  goto LABEL_6;
}

void sub_1922743B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if ((a22 & 0x80000000) == 0) {
    JUMPOUT(0x192274364);
  }
  JUMPOUT(0x19227435CLL);
}

void E5RT::RemoveAll(std::__fs::filesystem::path *this, const std::__fs::filesystem::path *a2)
{
  std::__fs::filesystem::__status(this, 0);
  if (LOBYTE(__p[0]))
  {
    if (LOBYTE(__p[0]) != 255)
    {
      __ec.__val_ = 0;
      __ec.__cat_ = std::system_category();
      std::__fs::filesystem::__remove_all(this, &__ec);
      if (__ec.__val_)
      {
        char v5 = 4;
        strcpy((char *)__p, "e5rt");
        E5RTLog = E5RT::GetE5RTLog((uint64_t)__p);
        if (v5 < 0) {
          operator delete(__p[0]);
        }
        if (os_log_type_enabled(E5RTLog, OS_LOG_TYPE_ERROR)) {
          sub_192457C10((uint64_t *)this, &__ec.__val_, E5RTLog);
        }
      }
    }
  }
}

void sub_19227448C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t E5RT::E5CompilerOptions::GetForceFetchFromCache(E5RT::E5CompilerOptions *this)
{
  uint64_t v1 = (void *)*((void *)this + 1);
  if (v1) {
  std::__fs::filesystem::path::__string_view v2 = (void *)(*(uint64_t (**)(void *, const char *, uint64_t))(*(void *)v1 + 16))(v1, "forceFetchFromCache<BOOL>", 25);
  }
  if (!*v2
    || (uint64_t v3 = (unsigned __int8 *)((uint64_t (*)(uint64_t, void *, void, void, void *))*v2)(3, v2, 0, MEMORY[0x1E4FBA378], &std::__any_imp::__unique_typeinfo<BOOL>::__id)) == 0)
  {
    std::__throw_bad_any_cast[abi:ne180100]();
  }
  return *v3;
}

void E5RT::E5Program::LoadProgram(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = 0x2B23400000000000;
  long long v8 = 0u;
  long long v9 = 0u;
  kdebug_trace();
  LOBYTE(v4) = 0;
  char v5 = 0;
  if (*(unsigned char *)(a2 + 16))
  {
    long long v4 = *(_OWORD *)a2;
    char v5 = 1;
  }
  E5RT::GetE5PathFromCompositeBundle(a1, &v4, &__p);
  if (v5) {
    E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v4);
  }
  E5RT::ComputeProgram::LoadProgram();
}

void sub_1922748B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, E5RT::E5ProgramImpl *a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23,uint64_t a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  std::unique_ptr<E5RT::E5ProgramImpl>::~unique_ptr[abi:ne180100](&a15);
  if (a21 < 0) {
    operator delete(__p);
  }
  uint64_t v34 = a22;
  a22 = 0;
  if (v34) {
    (*(void (**)(uint64_t))(*(void *)v34 + 8))(v34);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)(v32 - 104));
  _Unwind_Resume(a1);
}

uint64_t E5RT::E5ProgramImpl::GetPublicFunctions(E5RT::E5ProgramImpl *this)
{
  return (uint64_t)this + 16;
}

uint64_t E5RT::E5ProgramImpl::GetPrivateFunctions(E5RT::E5ProgramImpl *this)
{
  return (uint64_t)this + 40;
}

void E5AOT::Operators::E5ML_ios16::Cast::Make()
{
  uint64_t v1 = *MEMORY[0x1E4F143B8];
  uint64_t v0 = 0;
  operator new();
}

void sub_1922762BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void **a27,void *__p,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,uint64_t a63)
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  uint64_t v73 = a24;
  a24 = 0;
  if (v73) {
    (*(void (**)(uint64_t))(*(void *)v73 + 8))(v73);
  }
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  if (__p)
  {
    a29 = (uint64_t)__p;
    operator delete(__p);
    int v74 = a31;
    if (!a31)
    {
LABEL_5:
      uint8x8_t v75 = a34;
      if (!a34) {
        goto LABEL_6;
      }
      goto LABEL_33;
    }
  }
  else
  {
    int v74 = a31;
    if (!a31) {
      goto LABEL_5;
    }
  }
  a32 = (uint64_t)v74;
  operator delete(v74);
  uint8x8_t v75 = a34;
  if (!a34)
  {
LABEL_6:
    unint64_t v76 = a37;
    if (!a37) {
      goto LABEL_7;
    }
    goto LABEL_34;
  }
LABEL_33:
  a35 = (uint64_t)v75;
  operator delete(v75);
  unint64_t v76 = a37;
  if (!a37)
  {
LABEL_7:
    unsigned int v77 = a40;
    if (!a40) {
      goto LABEL_8;
    }
    goto LABEL_35;
  }
LABEL_34:
  a38 = (uint64_t)v76;
  operator delete(v76);
  unsigned int v77 = a40;
  if (!a40)
  {
LABEL_8:
    uint64_t v78 = a43;
    if (!a43) {
      goto LABEL_9;
    }
    goto LABEL_36;
  }
LABEL_35:
  a41 = (uint64_t)v77;
  operator delete(v77);
  uint64_t v78 = a43;
  if (!a43)
  {
LABEL_9:
    BOOL v79 = a46;
    if (!a46) {
      goto LABEL_10;
    }
    goto LABEL_37;
  }
LABEL_36:
  a44 = (uint64_t)v78;
  operator delete(v78);
  BOOL v79 = a46;
  if (!a46)
  {
LABEL_10:
    uint64_t v80 = a49;
    if (!a49) {
      goto LABEL_11;
    }
    goto LABEL_38;
  }
LABEL_37:
  a47 = (uint64_t)v79;
  operator delete(v79);
  uint64_t v80 = a49;
  if (!a49)
  {
LABEL_11:
    std::vector<std::string>::pointer v81 = a52;
    if (!a52) {
      goto LABEL_12;
    }
    goto LABEL_39;
  }
LABEL_38:
  a50 = (uint64_t)v80;
  operator delete(v80);
  std::vector<std::string>::pointer v81 = a52;
  if (!a52)
  {
LABEL_12:
    long long v82 = a55;
    if (!a55) {
      goto LABEL_13;
    }
    goto LABEL_40;
  }
LABEL_39:
  a53 = (uint64_t)v81;
  operator delete(v81);
  long long v82 = a55;
  if (!a55)
  {
LABEL_13:
    int v83 = a58;
    if (!a58) {
      goto LABEL_14;
    }
    goto LABEL_41;
  }
LABEL_40:
  a56 = (uint64_t)v82;
  operator delete(v82);
  int v83 = a58;
  if (!a58)
  {
LABEL_14:
    BOOL v84 = a61;
    if (!a61) {
      goto LABEL_15;
    }
    goto LABEL_42;
  }
LABEL_41:
  a59 = (uint64_t)v83;
  operator delete(v83);
  BOOL v84 = a61;
  if (!a61)
  {
LABEL_15:
    int v85 = a64;
    if (!a64) {
      goto LABEL_16;
    }
    goto LABEL_43;
  }
LABEL_42:
  a62 = (uint64_t)v84;
  operator delete(v84);
  int v85 = a64;
  if (!a64)
  {
LABEL_16:
    unint64_t v86 = a67;
    if (!a67) {
      goto LABEL_17;
    }
    goto LABEL_44;
  }
LABEL_43:
  a65 = (uint64_t)v85;
  operator delete(v85);
  unint64_t v86 = a67;
  if (!a67)
  {
LABEL_17:
    std::vector<std::string>::pointer v87 = a70;
    if (!a70) {
      goto LABEL_18;
    }
    goto LABEL_45;
  }
LABEL_44:
  a68 = (uint64_t)v86;
  operator delete(v86);
  std::vector<std::string>::pointer v87 = a70;
  if (!a70)
  {
LABEL_18:
    uint64_t v88 = (void *)STACK[0x200];
    if (!STACK[0x200]) {
      goto LABEL_19;
    }
    goto LABEL_46;
  }
LABEL_45:
  a71 = (uint64_t)v87;
  operator delete(v87);
  uint64_t v88 = (void *)STACK[0x200];
  if (!STACK[0x200])
  {
LABEL_19:
    uint64_t v89 = (void *)STACK[0x218];
    if (!STACK[0x218]) {
      goto LABEL_20;
    }
    goto LABEL_47;
  }
LABEL_46:
  STACK[0x208] = (unint64_t)v88;
  operator delete(v88);
  uint64_t v89 = (void *)STACK[0x218];
  if (!STACK[0x218])
  {
LABEL_20:
    BOOL v90 = (void *)STACK[0x230];
    if (!STACK[0x230]) {
      goto LABEL_21;
    }
    goto LABEL_48;
  }
LABEL_47:
  STACK[0x220] = (unint64_t)v89;
  operator delete(v89);
  BOOL v90 = (void *)STACK[0x230];
  if (!STACK[0x230])
  {
LABEL_21:
    uint64_t v91 = (void *)STACK[0x248];
    if (!STACK[0x248]) {
      goto LABEL_22;
    }
    goto LABEL_49;
  }
LABEL_48:
  STACK[0x238] = (unint64_t)v90;
  operator delete(v90);
  uint64_t v91 = (void *)STACK[0x248];
  if (!STACK[0x248])
  {
LABEL_22:
    unint64_t v92 = (void *)STACK[0x260];
    if (!STACK[0x260]) {
      goto LABEL_23;
    }
    goto LABEL_50;
  }
LABEL_49:
  STACK[0x250] = (unint64_t)v91;
  operator delete(v91);
  unint64_t v92 = (void *)STACK[0x260];
  if (!STACK[0x260])
  {
LABEL_23:
    uint8x8_t v93 = (void *)STACK[0x278];
    if (!STACK[0x278]) {
      goto LABEL_24;
    }
    goto LABEL_51;
  }
LABEL_50:
  STACK[0x268] = (unint64_t)v92;
  operator delete(v92);
  uint8x8_t v93 = (void *)STACK[0x278];
  if (!STACK[0x278])
  {
LABEL_24:
    uint64_t v94 = (void *)STACK[0x290];
    if (!STACK[0x290]) {
      goto LABEL_25;
    }
    goto LABEL_52;
  }
LABEL_51:
  STACK[0x280] = (unint64_t)v93;
  operator delete(v93);
  uint64_t v94 = (void *)STACK[0x290];
  if (!STACK[0x290])
  {
LABEL_25:
    uint64_t v95 = (void *)STACK[0x2A8];
    if (!STACK[0x2A8]) {
      goto LABEL_26;
    }
    goto LABEL_53;
  }
LABEL_52:
  STACK[0x298] = (unint64_t)v94;
  operator delete(v94);
  uint64_t v95 = (void *)STACK[0x2A8];
  if (!STACK[0x2A8])
  {
LABEL_26:
    uint64_t v96 = (void *)STACK[0x2C0];
    if (!STACK[0x2C0]) {
      goto LABEL_27;
    }
    goto LABEL_54;
  }
LABEL_53:
  STACK[0x2B0] = (unint64_t)v95;
  operator delete(v95);
  uint64_t v96 = (void *)STACK[0x2C0];
  if (!STACK[0x2C0])
  {
LABEL_27:
    uint64_t v97 = *(void **)(v71 - 248);
    if (!v97) {
      goto LABEL_28;
    }
    goto LABEL_55;
  }
LABEL_54:
  STACK[0x2C8] = (unint64_t)v96;
  operator delete(v96);
  uint64_t v97 = *(void **)(v71 - 248);
  if (!v97)
  {
LABEL_28:
    uint64_t v98 = *(void **)(v71 - 224);
    if (!v98) {
      goto LABEL_29;
    }
    goto LABEL_56;
  }
LABEL_55:
  *(void *)(v71 - 240) = v97;
  operator delete(v97);
  uint64_t v98 = *(void **)(v71 - 224);
  if (!v98)
  {
LABEL_29:
    v99 = (void *)STACK[0x2D8];
    if (!STACK[0x2D8]) {
      goto LABEL_58;
    }
LABEL_57:
    STACK[0x2E0] = (unint64_t)v99;
    operator delete(v99);
LABEL_58:
    std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::~unique_ptr[abi:ne180100](&a27);
    uint64_t v100 = STACK[0x300];
    STACK[0x300] = 0;
    if (v100)
    {
      std::default_delete<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::operator()[abi:ne180100]((uint64_t)&STACK[0x300], v100);
      _Unwind_Resume(a1);
    }
    _Unwind_Resume(a1);
  }
LABEL_56:
  *(void *)(v71 - 216) = v98;
  operator delete(v98);
  v99 = (void *)STACK[0x2D8];
  if (!STACK[0x2D8]) {
    goto LABEL_58;
  }
  goto LABEL_57;
}

void std::vector<std::shared_ptr<MIL::IRParameter>>::reserve(uint64_t a1, unint64_t a2)
{
  std::__fs::filesystem::path::__string_view v2 = *(char **)a1;
  if (a2 <= (uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4) {
    return;
  }
  if (a2 >> 60) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  long long v4 = *(char **)(a1 + 8);
  uint64_t v5 = 16 * a2;
  int v6 = (char *)operator new(16 * a2);
  uint64_t v7 = &v6[v5];
  long long v8 = &v6[v4 - v2];
  if (v4 == v2)
  {
    *(void *)a1 = v8;
    *(void *)(a1 + 8) = v8;
    *(void *)(a1 + 16) = v7;
    if (!v2) {
      return;
    }
    goto LABEL_14;
  }
  long long v9 = &v6[v4 - v2];
  do
  {
    long long v10 = *((_OWORD *)v4 - 1);
    v4 -= 16;
    *((_OWORD *)v9 - 1) = v10;
    v9 -= 16;
    *(void *)long long v4 = 0;
    *((void *)v4 + 1) = 0;
  }
  while (v4 != v2);
  std::__fs::filesystem::path v11 = *(char **)a1;
  std::__fs::filesystem::path::__string_view v2 = *(char **)(a1 + 8);
  *(void *)a1 = v9;
  *(void *)(a1 + 8) = v8;
  *(void *)(a1 + 16) = v7;
  if (v2 != v11)
  {
    do
    {
      std::__fs::filesystem::path v12 = (std::__shared_weak_count *)*((void *)v2 - 1);
      if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
      v2 -= 16;
    }
    while (v2 != v11);
    std::__fs::filesystem::path::__string_view v2 = v11;
  }
  if (v2)
  {
LABEL_14:
    operator delete(v2);
  }
}

uint64_t e5rt_tensor_desc_create(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  long long v8 = operator new(0x28uLL);
  *long long v8 = &unk_1EE399018;
  v8[1] = a1;
  v8[2] = a2;
  v8[3] = a4;
  v8[4] = a3;
  std::__fs::filesystem::path v12 = v8;
  uint64_t v9 = E5RT::ExceptionSafeExecute((uint64_t)v11);
  if (v12 == v11)
  {
    (*(void (**)(void *))(v11[0] + 32))(v11);
  }
  else if (v12)
  {
    (*(void (**)(void))(*v12 + 40))();
  }
  return v9;
}

void sub_1922775A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

void Espresso::AOT::Validators::JitCallValidator::Validate(uint64_t a1)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  HIBYTE(v48) = 5;
  strcpy((char *)&v46, "ios15");
  char v50 = 5;
  strcpy((char *)v49, "ios16");
  char v52 = 5;
  strcpy((char *)v51, "ios17");
  char v54 = 5;
  strcpy((char *)v53, "ios18");
  *(_OWORD *)std::exception_ptr v42 = 0u;
  *(_OWORD *)long long v43 = 0u;
  int v44 = 1065353216;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v42, (uint64_t)&v46, (uint64_t)&v46);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v42, (uint64_t)v49, (uint64_t)v49);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v42, (uint64_t)v51, (uint64_t)v51);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v42, (uint64_t)v53, (uint64_t)v53);
  if (v54 < 0)
  {
    operator delete(v53[0]);
    if ((v52 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v50 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_52;
    }
  }
  else if ((v52 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v51[0]);
  if ((v50 & 0x80000000) == 0)
  {
LABEL_4:
    if ((SHIBYTE(v48) & 0x80000000) == 0)
    {
LABEL_5:
      uint64_t Function = MIL::IRProgram::GetFunction();
      uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)Function + 40))(Function);
      long long v4 = (uint64_t **)(*(uint64_t (**)(uint64_t))(*(void *)v3 + 56))(v3);
      uint64_t v5 = **v4;
      uint64_t v6 = (*v4)[1];
      BOOL v46 = 0;
      uint64_t v47 = 0;
      uint64_t v48 = 0;
      uint64_t v7 = v6 - v5;
      if (!v7) {
LABEL_49:
      }
        operator new();
      uint64_t v8 = 0;
      uint64_t v9 = (void *)(a1 + 8);
      unint64_t v10 = v7 >> 4;
      if (v10 <= 1) {
        uint64_t v11 = 1;
      }
      else {
        uint64_t v11 = v10;
      }
      while (1)
      {
        uint64_t v13 = *(void *)(**v4 + 16 * v8);
        uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 232))(v13);
        if (!v14)
        {
          BOOL v20 = 0;
          goto LABEL_27;
        }
        uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)v14 + 16))(v14);
        std::string::size_type v17 = v16;
        if (v16 >= 0x7FFFFFFFFFFFFFF8) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        int v18 = (const void *)v15;
        if (v16 >= 0x17) {
          break;
        }
        *((unsigned char *)&__p.__r_.__value_.__s + 23) = v16;
        p_p = &__p;
        if (v16) {
          goto LABEL_24;
        }
LABEL_25:
        p_p->__r_.__value_.__s.__data_[v17] = 0;
        BOOL v20 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v42, (uint64_t)&__p) == 0;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
LABEL_27:
        uint64_t v23 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 56))(v13);
        Espresso::AOT::GetOperatorType(v23, &__p);
        if (v20
          || !std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v9, (uint64_t)&__p))
        {
          goto LABEL_11;
        }
        int v24 = v47;
        if (v47 >= v48)
        {
          char v25 = (char *)v46;
          int64_t v26 = v47 - (unsigned char *)v46;
          uint64_t v27 = (v47 - (unsigned char *)v46) >> 3;
          unint64_t v28 = v27 + 1;
          if ((unint64_t)(v27 + 1) >> 61) {
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v29 = v48 - (unsigned char *)v46;
          if ((v48 - (unsigned char *)v46) >> 2 > v28) {
            unint64_t v28 = v29 >> 2;
          }
          if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v30 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v30 = v28;
          }
          if (v30)
          {
            if (v30 >> 61) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            uint64_t v31 = (char *)operator new(8 * v30);
            uint64_t v32 = &v31[8 * v27];
            *(void *)uint64_t v32 = v8;
            uint64_t v12 = (uint64_t)(v32 + 8);
            if (v24 == v25) {
              goto LABEL_47;
            }
LABEL_41:
            unint64_t v33 = v24 - 8 - v25;
            if (v33 < 0x58) {
              goto LABEL_59;
            }
            if ((unint64_t)(v24 - &v31[v26]) < 0x20) {
              goto LABEL_59;
            }
            uint64_t v34 = (v33 >> 3) + 1;
            uint64_t v35 = 8 * (v34 & 0x3FFFFFFFFFFFFFFCLL);
            char v36 = &v24[-v35];
            v32 -= v35;
            uint64_t v37 = &v31[8 * v27 - 16];
            uint64_t v38 = v24 - 16;
            uint64_t v39 = v34 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v40 = *(_OWORD *)v38;
              *((_OWORD *)v37 - 1) = *((_OWORD *)v38 - 1);
              *(_OWORD *)uint64_t v37 = v40;
              v37 -= 32;
              v38 -= 32;
              v39 -= 4;
            }
            while (v39);
            int v24 = v36;
            if (v34 != (v34 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_59:
              do
              {
                uint64_t v41 = *((void *)v24 - 1);
                v24 -= 8;
                *((void *)v32 - 1) = v41;
                v32 -= 8;
              }
              while (v24 != v25);
            }
          }
          else
          {
            uint64_t v31 = 0;
            uint64_t v32 = (char *)(8 * v27);
            *(void *)(8 * v27) = v8;
            uint64_t v12 = 8 * v27 + 8;
            if (v24 != v25) {
              goto LABEL_41;
            }
          }
LABEL_47:
          BOOL v46 = v32;
          uint64_t v47 = (char *)v12;
          uint64_t v48 = &v31[8 * v30];
          if (v25) {
            operator delete(v25);
          }
          goto LABEL_10;
        }
        *(void *)uint64_t v47 = v8;
        uint64_t v12 = (uint64_t)(v24 + 8);
LABEL_10:
        uint64_t v47 = (char *)v12;
LABEL_11:
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__p.__r_.__value_.__l.__data_);
          if (++v8 == v11) {
            goto LABEL_49;
          }
        }
        else if (++v8 == v11)
        {
          goto LABEL_49;
        }
      }
      uint64_t v21 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v16 | 7) != 0x17) {
        uint64_t v21 = v16 | 7;
      }
      uint64_t v22 = v21 + 1;
      p_p = (std::string *)operator new(v21 + 1);
      __p.__r_.__value_.__l.__size_ = v17;
      __p.__r_.__value_.__r.__words[2] = v22 | 0x8000000000000000;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
LABEL_24:
      memmove(p_p, v18, v17);
      goto LABEL_25;
    }
LABEL_53:
    operator delete(v46);
    goto LABEL_5;
  }
LABEL_52:
  operator delete(v49[0]);
  if ((SHIBYTE(v48) & 0x80000000) == 0) {
    goto LABEL_5;
  }
  goto LABEL_53;
}

void sub_192277AFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  MEMORY[0x192FF16B0](v45, 0x10B1C40E94733EDLL);
  if (!__p)
  {
    std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100]((uint64_t)&a11);
    _Unwind_Resume(a1);
  }
  a23 = (uint64_t)__p;
  operator delete(__p);
  std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t Espresso::AOT::ValidationResult::ValidationResult(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = 0;
  *(void *)a1 = &unk_1EE36B1D0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  long long v4 = *(const void **)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  int64_t v5 = v3 - *(void *)a2;
  if (v3 != *(void *)a2)
  {
    if (v5 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (char *)operator new(v3 - *(void *)a2);
    *(void *)(a1 + 8) = v6;
    *(void *)(a1 + 16) = v6;
    uint64_t v7 = &v6[8 * (v5 >> 3)];
    *(void *)(a1 + 24) = v7;
    memcpy(v6, v4, v5);
    *(void *)(a1 + 16) = v7;
  }
  *(void *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_DWORD *)(a1 + 88) = 1065353216;
  return a1;
}

{
  uint64_t v3;
  const void *v4;
  int64_t v5;
  char *v6;
  char *v7;

  *(void *)(a1 + 8) = 0;
  *(void *)a1 = &unk_1EE36B1D0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  long long v4 = *(const void **)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  int64_t v5 = v3 - *(void *)a2;
  if (v3 != *(void *)a2)
  {
    if (v5 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (char *)operator new(v3 - *(void *)a2);
    *(void *)(a1 + 8) = v6;
    *(void *)(a1 + 16) = v6;
    uint64_t v7 = &v6[8 * (v5 >> 3)];
    *(void *)(a1 + 24) = v7;
    memcpy(v6, v4, v5);
    *(void *)(a1 + 16) = v7;
  }
  *(void *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_DWORD *)(a1 + 88) = 1065353216;
  return a1;
}

void sub_192277CF4(_Unwind_Exception *exception_object)
{
  long long v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN13EspressoLight37intermediate_buffer_sharing_singleton6sharedEv_block_invoke()
{
}

void Espresso::AOT::E5RTGroupMatcher::TagStateOpsGroupsInBlockWithShrinking(uint64_t a1, MIL::Builder::BlockBuilder **a2, void *a3, void *a4, int a5)
{
  uint64_t v102 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a1 + 56) < a5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    uint64_t Location = (MIL::Location *)MIL::Builder::BlockBuilder::GetLocation(*a2);
    MIL::Location::GetDescription((uint64_t *)v90, Location);
    uint64_t v78 = std::string::insert((std::string *)v90, 0, "reached max supported Block nesting level at ");
    long long v79 = *(_OWORD *)&v78->__r_.__value_.__l.__data_;
    *(void *)&long long v93 = *((void *)&v78->__r_.__value_.__l + 2);
    *(_OWORD *)std::string __p = v79;
    v78->__r_.__value_.__l.__size_ = 0;
    v78->__r_.__value_.__r.__words[2] = 0;
    v78->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, (const std::string *)__p);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  unint64_t v8 = 0;
  uint64_t v97 = 0;
  uint64_t v98 = 0;
  uint64_t v9 = (a5 + 1);
  unint64_t v99 = 0;
  while (MIL::Builder::BlockBuilder::GetNumOperations(*a2) > v8)
  {
    MIL::Builder::BlockBuilder::GetOperation(*a2);
    uint64_t Operator = MIL::Builder::OperationBuilder::GetOperator(*(MIL::Builder::OperationBuilder **)v90);
    uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)Operator + 16))(Operator);
    Espresso::AOT::GetOperatorType(v11, (std::string *)__p);
    if ((SBYTE7(v93) & 0x80000000) == 0)
    {
      if (SBYTE7(v93) != 11) {
        goto LABEL_28;
      }
      if (__p[0] != (void *)0x74735F6574697277 || *(void **)((char *)__p + 3) != (void *)0x65746174735F6574) {
        goto LABEL_28;
      }
LABEL_21:
      uint64_t v15 = v98;
      if ((unint64_t)v98 >= v99)
      {
        std::string::size_type v17 = (MIL::Builder::OperationBuilder **)std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__push_back_slow_path<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions> const&>((uint64_t)&v97, (long long *)v90);
      }
      else
      {
        *uint64_t v98 = *(MIL::Builder::OperationBuilder **)v90;
        uint64_t v16 = *(void *)&v90[8];
        v15[1] = *(MIL::Builder::OperationBuilder **)&v90[8];
        if (v16) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
        }
        std::string::size_type v17 = v15 + 2;
      }
      uint64_t v98 = v17;
      goto LABEL_28;
    }
    if (__p[1] != (void *)11)
    {
      operator delete(__p[0]);
      goto LABEL_28;
    }
    BOOL v14 = *(void *)__p[0] != 0x74735F6574697277 || *(void *)((char *)__p[0] + 3) != 0x65746174735F6574;
    operator delete(__p[0]);
    if (!v14) {
      goto LABEL_21;
    }
LABEL_28:
    MIL::Builder::OperationBuilder::GetBlocks((uint64_t *)__p, *(MIL::Builder::OperationBuilder **)v90);
    std::string v19 = (void **)__p[0];
    int v18 = (void **)__p[1];
    if (__p[0] == __p[1])
    {
      if (!__p[0]) {
        goto LABEL_49;
      }
      goto LABEL_30;
    }
    do
    {
      uint64_t v22 = *v19;
      v84[0] = *v19;
      uint64_t v23 = (std::__shared_weak_count *)v19[1];
      v84[1] = v23;
      if (v23)
      {
        atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v95 = v22;
        uint64_t v96 = v23;
        atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      else
      {
        uint64_t v95 = v22;
        uint64_t v96 = 0;
      }
      Espresso::AOT::E5RTGroupMatcher::TagStateOpsGroupsInBlockWithShrinking(a1, &v95, a3, a4, v9);
      if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
        int v24 = (std::__shared_weak_count *)v84[1];
        if (!v84[1]) {
          goto LABEL_33;
        }
      }
      else
      {
        int v24 = (std::__shared_weak_count *)v84[1];
        if (!v84[1]) {
          goto LABEL_33;
        }
      }
      if (!atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
LABEL_33:
      v19 += 2;
    }
    while (v19 != v18);
    std::string v19 = (void **)__p[0];
    if (!__p[0])
    {
LABEL_49:
      uint64_t v21 = *(std::__shared_weak_count **)&v90[8];
      if (!*(void *)&v90[8]) {
        goto LABEL_3;
      }
LABEL_52:
      if (!atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
      goto LABEL_3;
    }
LABEL_30:
    BOOL v20 = (void **)__p[1];
    if (__p[1] == v19)
    {
      __p[1] = v19;
      operator delete(v19);
      uint64_t v21 = *(std::__shared_weak_count **)&v90[8];
      if (!*(void *)&v90[8]) {
        goto LABEL_3;
      }
      goto LABEL_52;
    }
    do
    {
      char v25 = (std::__shared_weak_count *)*(v20 - 1);
      if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
      v20 -= 2;
    }
    while (v20 != v19);
    __p[1] = v19;
    operator delete(__p[0]);
    uint64_t v21 = *(std::__shared_weak_count **)&v90[8];
    if (*(void *)&v90[8]) {
      goto LABEL_52;
    }
LABEL_3:
    ++v8;
  }
  __p[0] = *a2;
  int64_t v26 = (int8x8_t *)std::__hash_table<std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::__unordered_map_hasher<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::hash<E5RT::AsyncEvent const*>,std::equal_to<E5RT::AsyncEvent const*>,true>,std::__unordered_map_equal<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::equal_to<E5RT::AsyncEvent const*>,std::hash<E5RT::AsyncEvent const*>,true>,std::allocator<std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>>>::find<E5RT::AsyncEvent const*>(a4, (uint64_t *)__p);
  if (!v26) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  *(_OWORD *)std::string __p = 0u;
  long long v93 = 0u;
  int v94 = 1065353216;
  uint64_t v27 = v97;
  std::vector<std::string>::pointer v81 = v98;
  if (v97 == v98)
  {
    __p[0] = 0;
    goto LABEL_143;
  }
  unint64_t v28 = v26 + 3;
  uint64_t v80 = v26;
  while (2)
  {
    memset(v90, 0, sizeof(v90));
    int v91 = 1065353216;
    v84[0] = *v27;
    uint64_t v29 = std::__hash_table<std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::__unordered_map_hasher<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::hash<E5RT::AsyncEvent const*>,std::equal_to<E5RT::AsyncEvent const*>,true>,std::__unordered_map_equal<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::equal_to<E5RT::AsyncEvent const*>,std::hash<E5RT::AsyncEvent const*>,true>,std::allocator<std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>>>::find<E5RT::AsyncEvent const*>(v28, (uint64_t *)v84);
    if (!v29) {
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    }
    unsigned int v82 = *((_DWORD *)v29 + 6);
    std::vector<std::string>::pointer v87 = 0;
    uint64_t v88 = 0;
    uint64_t v89 = 0;
    char v101 = 10;
    strcpy((char *)v100, "read_state");
    *(_OWORD *)BOOL v84 = 0u;
    *(_OWORD *)int v85 = 0u;
    int v86 = 1065353216;
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v84, (uint64_t)v100, (uint64_t)v100);
    unint64_t v30 = (void **)v85[0];
    if (v85[0])
    {
      do
      {
        uint64_t v32 = (void **)*v30;
        if (*((char *)v30 + 39) < 0) {
          operator delete(v30[2]);
        }
        operator delete(v30);
        unint64_t v30 = v32;
      }
      while (v32);
    }
    uint64_t v31 = v84[0];
    v84[0] = 0;
    if (v31) {
      operator delete(v31);
    }
    if (v101 < 0)
    {
      operator delete((void *)v100[0]);
      if (!*(void *)&v90[24]) {
        goto LABEL_129;
      }
    }
    else if (!*(void *)&v90[24])
    {
      goto LABEL_129;
    }
    uint64_t v34 = (MIL::Builder::OperationBuilder **)v87;
    unint64_t v33 = v88;
    while (v34 != v33)
    {
      MIL::Builder::OperationBuilder::GetChildOperations((uint64_t *)v84, *v34);
      uint64_t v35 = v85[0];
      if (v85[0])
      {
        do
        {
          v100[0] = v35[2];
          std::__hash_table<MIL::Builder::OperationBuilder *,std::hash<MIL::Builder::OperationBuilder *>,std::equal_to<MIL::Builder::OperationBuilder *>,std::allocator<MIL::Builder::OperationBuilder *>>::__emplace_unique_key_args<MIL::Builder::OperationBuilder *,MIL::Builder::OperationBuilder *>((uint64_t)v90, v100, v100);
          uint64_t v35 = (void *)*v35;
        }
        while (v35);
        char v36 = v85[0];
        if (v85[0])
        {
          do
          {
            uint64_t v38 = v36;
            char v36 = (void *)*v36;
            uint64_t v39 = (std::__shared_weak_count *)v38[3];
            if (v39 && !atomic_fetch_add(&v39->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
              std::__shared_weak_count::__release_weak(v39);
            }
            operator delete(v38);
          }
          while (v36);
        }
      }
      uint64_t v37 = v84[0];
      v84[0] = 0;
      if (v37) {
        operator delete(v37);
      }
      ++v34;
    }
    long long v40 = *(void **)&v90[16];
    if (!*(void *)&v90[16]) {
      goto LABEL_127;
    }
    uint64_t v41 = **(void ***)&v90[16];
    if (!**(void **)&v90[16]) {
      goto LABEL_127;
    }
    int8x8_t v42 = v80[4];
    uint8x8_t v43 = (uint8x8_t)vcnt_s8(v42);
    v43.i16[0] = vaddlv_u8(v43);
    uint64_t v44 = *(void *)&v42 - 1;
    while (2)
    {
      if (!*(void *)&v42) {
        goto LABEL_154;
      }
      unint64_t v45 = v41[2];
      unint64_t v46 = 0x9DDFEA08EB382D69 * (((8 * v45) + 8) ^ HIDWORD(v45));
      unint64_t v47 = 0x9DDFEA08EB382D69 * (HIDWORD(v45) ^ (v46 >> 47) ^ v46);
      unint64_t v48 = 0x9DDFEA08EB382D69 * (v47 ^ (v47 >> 47));
      if (v43.u32[0] > 1uLL)
      {
        unint64_t v49 = 0x9DDFEA08EB382D69 * (v47 ^ (v47 >> 47));
        if (v48 >= *(void *)&v42) {
          unint64_t v49 = v48 % *(void *)&v42;
        }
      }
      else
      {
        unint64_t v49 = v48 & v44;
      }
      char v50 = *(uint64_t ***)(*(void *)v28 + 8 * v49);
      if (!v50 || (size_t v51 = *v50) == 0) {
LABEL_154:
      }
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      unint64_t v52 = v40[2];
      if (v43.u32[0] < 2uLL)
      {
        while (1)
        {
          uint64_t v53 = v51[1];
          if (v53 == v48)
          {
            if (v51[2] == v45) {
              goto LABEL_100;
            }
          }
          else if ((v53 & v44) != v49)
          {
            goto LABEL_154;
          }
          size_t v51 = (uint64_t *)*v51;
          if (!v51) {
            goto LABEL_154;
          }
        }
      }
      while (2)
      {
        unint64_t v58 = v51[1];
        if (v58 != v48)
        {
          if (v58 >= *(void *)&v42) {
            v58 %= *(void *)&v42;
          }
          if (v58 != v49) {
            goto LABEL_154;
          }
          goto LABEL_103;
        }
        if (v51[2] != v45)
        {
LABEL_103:
          size_t v51 = (uint64_t *)*v51;
          if (!v51) {
            goto LABEL_154;
          }
          continue;
        }
        break;
      }
LABEL_100:
      unint64_t v54 = 0x9DDFEA08EB382D69 * (((8 * v52) + 8) ^ HIDWORD(v52));
      unint64_t v55 = 0x9DDFEA08EB382D69 * (HIDWORD(v52) ^ (v54 >> 47) ^ v54);
      unint64_t v56 = 0x9DDFEA08EB382D69 * (v55 ^ (v55 >> 47));
      if (v43.u32[0] > 1uLL)
      {
        unint64_t v57 = v56;
        if (v56 >= *(void *)&v42) {
          unint64_t v57 = v56 % *(void *)&v42;
        }
      }
      else
      {
        unint64_t v57 = v56 & v44;
      }
      long long v59 = *(uint64_t ***)(*(void *)v28 + 8 * v57);
      if (!v59) {
        goto LABEL_154;
      }
      BOOL v60 = *v59;
      if (!v60) {
        goto LABEL_154;
      }
      int v61 = *((_DWORD *)v51 + 6);
      if (v43.u32[0] < 2uLL)
      {
        while (1)
        {
          uint64_t v62 = v60[1];
          if (v62 == v56)
          {
            if (v60[2] == v52) {
              goto LABEL_84;
            }
          }
          else if ((v62 & v44) != v57)
          {
            goto LABEL_154;
          }
          BOOL v60 = (uint64_t *)*v60;
          if (!v60) {
            goto LABEL_154;
          }
        }
      }
      while (2)
      {
        unint64_t v63 = v60[1];
        if (v63 != v56)
        {
          if (v63 >= *(void *)&v42) {
            v63 %= *(void *)&v42;
          }
          if (v63 != v57) {
            goto LABEL_154;
          }
LABEL_121:
          BOOL v60 = (uint64_t *)*v60;
          if (!v60) {
            goto LABEL_154;
          }
          continue;
        }
        break;
      }
      if (v60[2] != v52) {
        goto LABEL_121;
      }
LABEL_84:
      if (v61 < *((_DWORD *)v60 + 6)) {
        long long v40 = v41;
      }
      uint64_t v41 = (void *)*v41;
      if (v41) {
        continue;
      }
      break;
    }
LABEL_127:
    uint64_t v64 = std::__hash_table<std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::__unordered_map_hasher<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::hash<E5RT::AsyncEvent const*>,std::equal_to<E5RT::AsyncEvent const*>,true>,std::__unordered_map_equal<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::equal_to<E5RT::AsyncEvent const*>,std::hash<E5RT::AsyncEvent const*>,true>,std::allocator<std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>>>::find<E5RT::AsyncEvent const*>(v28, v40 + 2);
    if (!v64) {
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    }
    Espresso::AOT::GroupTagger::MoveOpsAndAssignGroupIdsForInterval(a3, *((unsigned int *)v64 + 6), v82, (uint64_t)a2, v90, v28, (unsigned int **)(a1 + 8));
LABEL_129:
    if (v87)
    {
      uint64_t v88 = (MIL::Builder::OperationBuilder **)v87;
      operator delete(v87);
    }
    uint64_t v65 = *(void **)&v90[16];
    if (*(void *)&v90[16])
    {
      do
      {
        uint64_t v66 = (void *)*v65;
        operator delete(v65);
        uint64_t v65 = v66;
      }
      while (v66);
    }
    uint64_t v67 = *(void **)v90;
    *(void *)BOOL v90 = 0;
    if (v67) {
      operator delete(v67);
    }
    v27 += 2;
    if (v27 != v81) {
      continue;
    }
    break;
  }
  uint64_t v68 = (void *)v93;
  while (v68)
  {
    long long v69 = v68;
    uint64_t v68 = (void *)*v68;
    int v70 = (std::__shared_weak_count *)v69[3];
    if (v70 && !atomic_fetch_add(&v70->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
    operator delete(v69);
  }
  uint64_t v71 = __p[0];
  __p[0] = 0;
  if (v71) {
    operator delete(v71);
  }
LABEL_143:
  int v72 = v97;
  if (v97)
  {
    uint64_t v73 = v98;
    int v74 = v97;
    if (v98 != v97)
    {
      do
      {
        uint8x8_t v75 = (std::__shared_weak_count *)*(v73 - 1);
        if (v75 && !atomic_fetch_add(&v75->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
          std::__shared_weak_count::__release_weak(v75);
        }
        v73 -= 2;
      }
      while (v73 != v72);
      int v74 = v97;
    }
    uint64_t v98 = v72;
    operator delete(v74);
  }
}

void sub_1922787A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a37 < 0) {
    operator delete(__p);
  }
  if (a28 < 0)
  {
    operator delete(a23);
    if (v38)
    {
LABEL_7:
      __cxa_free_exception(v37);
      _Unwind_Resume(a1);
    }
  }
  else if (v38)
  {
    goto LABEL_7;
  }
  _Unwind_Resume(a1);
}

void *nitro::ndarray<half>::canonicalize@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  if (!nitro::ndarray<float>::is_canonical(a1))
  {
    if (a1[3] - a1[2] == a1[6] - a1[5]) {
      nitro::ndarray<half>::ndarray((uint64_t)a2);
    }
    nitro::ndarray<half>::canonicalize(void)const::{lambda(void)#1}::operator()();
  }

  return nitro::ndarray<half>::ndarray(a2, a1);
}

void sub_192279020(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char a15)
{
  nitro::ndarray<float>::~ndarray(v15);
  _Unwind_Resume(a1);
}

uint64_t e5rt_execution_stream_operation_create_precompiled_compute_operation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = operator new(0x38uLL);
  *uint64_t v12 = &unk_1EE391F18;
  v12[1] = a1;
  void v12[2] = a2;
  v12[3] = a3;
  v12[4] = a4;
  void v12[5] = a5;
  *((unsigned char *)v12 + 48) = a6;
  uint64_t v16 = v12;
  uint64_t v13 = E5RT::ExceptionSafeExecute((uint64_t)v15);
  if (v16 == v15)
  {
    (*(void (**)(void *))(v15[0] + 32))(v15);
  }
  else if (v16)
  {
    (*(void (**)(void))(*v16 + 40))();
  }
  return v13;
}

void sub_192279188(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

void Espresso::MILTranslator::LayerTranslator::TranslateReduceMean(Espresso::MILTranslator::LayerTranslator *this, const MIL::IROperation *a2)
{
  std::string::basic_string[abi:ne180100]<0>(v6, "");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  Espresso::MILTranslator::LayerTranslator::AddReduction((uint64_t)this, a2, 1, (const std::string::value_type *)v6, (const std::string::value_type *)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_192279228(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::MILTranslator::LayerTranslator::ReductionLayerNameStack::PushIOName(uint64_t a1, uint64_t a2)
{
  std::__fs::filesystem::path::__string_view v2 = (void *)(a1 + 64);
  Espresso::MILTranslator::NameGenerator::NameForPrefix((void *)(*(void *)(a1 + 8) + 128), a2, (uint64_t)&__p);
  std::deque<std::string>::push_back(v2, &__p);
  if (v4 < 0) {
    operator delete((void *)__p.n128_u64[0]);
  }
}

void sub_1922792B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::MILTranslator::LayerTranslator::TranslateReduceSum(Espresso::MILTranslator::LayerTranslator *this, const MIL::IROperation *a2)
{
  std::string::basic_string[abi:ne180100]<0>(v6, "");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  Espresso::MILTranslator::LayerTranslator::AddReduction((uint64_t)this, a2, 0, (const std::string::value_type *)v6, (const std::string::value_type *)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_192279358(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::MILTranslator::LayerTranslator::AddReduction(uint64_t a1, MIL::IRObject *a2, int a3, const std::string::value_type *a4, const std::string::value_type *a5)
{
  *(void *)&long long v252 = *MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:ne180100]<0>(&__p, "x");
  Espresso::MILTranslator::LayerTranslator::EnsureInputBlobFromParameter(&__s, a1, (uint64_t)&__p, a2, 0);
  if (SHIBYTE(v231[0]) < 0) {
    operator delete(__p);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "keep_dims");
  MIL::IROperation::GetParameterValue();
  char v143 = MIL::IRValue::GetScalar<BOOL>();
  if (SHIBYTE(v231[0]) < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external((std::string *)__dst, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  }
  else {
    *(std::string *)std::string __dst = __s;
  }
  v230 = 0;
  __n128 __p = 0;
  v231[0] = 0;
  v238.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  v238.__r_.__value_.__s.__data_[8] = 0;
  __n128 __p = operator new(0x18uLL);
  v230 = __p;
  v231[0] = (char *)__p + 24;
  v230 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)v231, (long long *)__dst, (long long *)&__dst[24], (std::string *)__p);
  Espresso::MILTranslator::LayerTranslator::EnsureInputBlobs(a1, (uint64_t *)&__p, a2);
  v238.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v238);
  if ((__dst[23] & 0x80000000) != 0) {
    operator delete(*(void **)__dst);
  }
  uint64_t Location = (void *)MIL::IRObject::GetLocation(a2);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v228, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  }
  else {
    std::string v228 = __s;
  }
  int v147 = a3;
  (*(void (**)(unsigned char *__return_ptr, MIL::IRObject *))(*(void *)a2 + 200))(__dst, a2);
  if (*(char *)(*(void *)__dst + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v227, **(const std::string::value_type ***)__dst, *(void *)(*(void *)__dst + 8));
  }
  else
  {
    long long v11 = **(_OWORD **)__dst;
    v227.__r_.__value_.__r.__words[2] = *(void *)(*(void *)__dst + 16);
    *(_OWORD *)&v227.__r_.__value_.__l.__data_ = v11;
  }
  __n128 __p = Location;
  v230 = (void *)a1;
  memset(v231, 0, sizeof(v231));
  long long v232 = 0u;
  memset(v233, 0, sizeof(v233));
  std::string v234 = v228;
  memset(&v228, 0, sizeof(v228));
  std::deque<std::string>::push_back(v233, (long long *)&v227);
  if (SHIBYTE(v227.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v227.__r_.__value_.__l.__data_);
  }
  v238.__r_.__value_.__r.__words[0] = (std::string::size_type)__dst;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v238);
  if (SHIBYTE(v228.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v228.__r_.__value_.__l.__data_);
  }
  uint64_t v12 = *((unsigned __int8 *)a5 + 23);
  if ((v12 & 0x80u) != 0) {
    uint64_t v12 = *((void *)a5 + 1);
  }
  if (!v12) {
    goto LABEL_43;
  }
  Espresso::MILTranslator::LayerTranslator::ReductionLayerNameStack::GetNextOutputName(&v238, &__p);
  uint64_t v13 = std::string::append(&v238, "_pre");
  long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  *(void *)&__dst[16] = *((void *)&v13->__r_.__value_.__l + 2);
  *(_OWORD *)std::string __dst = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  int v15 = a5[23];
  if (v15 >= 0) {
    uint64_t v16 = a5;
  }
  else {
    uint64_t v16 = *(const std::string::value_type **)a5;
  }
  if (v15 >= 0) {
    std::string::size_type v17 = *((unsigned __int8 *)a5 + 23);
  }
  else {
    std::string::size_type v17 = *((void *)a5 + 1);
  }
  int v18 = std::string::append((std::string *)__dst, v16, v17);
  std::string v19 = (std::string::value_type *)v18->__r_.__value_.__r.__words[0];
  std::string::size_type size = v18->__r_.__value_.__l.__size_;
  LODWORD(v251.__r_.__value_.__l.__data_) = v18->__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v251.__r_.__value_.__r.__words + 3) = *(_DWORD *)((char *)&v18->__r_.__value_.__r.__words[2] + 3);
  int v21 = SHIBYTE(v18->__r_.__value_.__r.__words[2]);
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if ((__dst[23] & 0x80000000) != 0) {
    operator delete(*(void **)__dst);
  }
  if (SHIBYTE(v238.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v238.__r_.__value_.__l.__data_);
    if ((v21 & 0x80000000) == 0) {
      goto LABEL_33;
    }
  }
  else if ((v21 & 0x80000000) == 0)
  {
LABEL_33:
    v226.__r_.__value_.__r.__words[0] = (std::string::size_type)v19;
    v226.__r_.__value_.__l.__size_ = size;
    LODWORD(v226.__r_.__value_.__r.__words[2]) = v251.__r_.__value_.__l.__data_;
    *(_DWORD *)((char *)&v226.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v251.__r_.__value_.__r.__words + 3);
    *((unsigned char *)&v226.__r_.__value_.__s + 23) = v21;
    goto LABEL_36;
  }
  std::string::__init_copy_ctor_external(&v226, v19, size);
LABEL_36:
  Espresso::MILTranslator::LayerTranslator::ReductionLayerNameStack::PushLayerName((uint64_t)&__p, (uint64_t)&v226);
  if (SHIBYTE(v226.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v226.__r_.__value_.__l.__data_);
    if ((v21 & 0x80000000) == 0) {
      goto LABEL_38;
    }
LABEL_40:
    std::string::__init_copy_ctor_external(&v225, v19, size);
    goto LABEL_41;
  }
  if (v21 < 0) {
    goto LABEL_40;
  }
LABEL_38:
  v225.__r_.__value_.__r.__words[0] = (std::string::size_type)v19;
  v225.__r_.__value_.__l.__size_ = size;
  LODWORD(v225.__r_.__value_.__r.__words[2]) = v251.__r_.__value_.__l.__data_;
  *(_DWORD *)((char *)&v225.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v251.__r_.__value_.__r.__words + 3);
  *((unsigned char *)&v225.__r_.__value_.__s + 23) = v21;
LABEL_41:
  Espresso::MILTranslator::LayerTranslator::ReductionLayerNameStack::PushIOName((uint64_t)&__p, (uint64_t)&v225);
  if (SHIBYTE(v225.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v225.__r_.__value_.__l.__data_);
    if ((v21 & 0x80000000) == 0) {
      goto LABEL_43;
    }
  }
  else if ((v21 & 0x80000000) == 0)
  {
    goto LABEL_43;
  }
  operator delete(v19);
LABEL_43:
  if (v143) {
    goto LABEL_58;
  }
  Espresso::MILTranslator::LayerTranslator::ReductionLayerNameStack::GetNextOutputName((std::string *)__dst, &__p);
  uint64_t v22 = std::string::append((std::string *)__dst, "_presqueeze");
  uint64_t v23 = (std::string::value_type *)v22->__r_.__value_.__r.__words[0];
  std::string::size_type v24 = v22->__r_.__value_.__l.__size_;
  LODWORD(v238.__r_.__value_.__l.__data_) = v22->__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v238.__r_.__value_.__r.__words + 3) = *(_DWORD *)((char *)&v22->__r_.__value_.__r.__words[2] + 3);
  int v25 = SHIBYTE(v22->__r_.__value_.__r.__words[2]);
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  if ((__dst[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__dst);
    if ((v25 & 0x80000000) == 0) {
      goto LABEL_46;
    }
  }
  else if ((v25 & 0x80000000) == 0)
  {
LABEL_46:
    v224.__r_.__value_.__r.__words[0] = (std::string::size_type)v23;
    v224.__r_.__value_.__l.__size_ = v24;
    LODWORD(v224.__r_.__value_.__r.__words[2]) = v238.__r_.__value_.__l.__data_;
    *(_DWORD *)((char *)&v224.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v238.__r_.__value_.__r.__words + 3);
    *((unsigned char *)&v224.__r_.__value_.__s + 23) = v25;
    goto LABEL_51;
  }
  std::string::__init_copy_ctor_external(&v224, v23, v24);
LABEL_51:
  Espresso::MILTranslator::LayerTranslator::ReductionLayerNameStack::PushLayerName((uint64_t)&__p, (uint64_t)&v224);
  if (SHIBYTE(v224.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v224.__r_.__value_.__l.__data_);
    if ((v25 & 0x80000000) == 0) {
      goto LABEL_53;
    }
  }
  else if ((v25 & 0x80000000) == 0)
  {
LABEL_53:
    v223.__r_.__value_.__r.__words[0] = (std::string::size_type)v23;
    v223.__r_.__value_.__l.__size_ = v24;
    LODWORD(v223.__r_.__value_.__r.__words[2]) = v238.__r_.__value_.__l.__data_;
    *(_DWORD *)((char *)&v223.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v238.__r_.__value_.__r.__words + 3);
    *((unsigned char *)&v223.__r_.__value_.__s + 23) = v25;
    goto LABEL_56;
  }
  std::string::__init_copy_ctor_external(&v223, v23, v24);
LABEL_56:
  Espresso::MILTranslator::LayerTranslator::ReductionLayerNameStack::PushIOName((uint64_t)&__p, (uint64_t)&v223);
  if (SHIBYTE(v223.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v223.__r_.__value_.__l.__data_);
    if ((v25 & 0x80000000) == 0) {
      goto LABEL_58;
    }
  }
  else if ((v25 & 0x80000000) == 0)
  {
    goto LABEL_58;
  }
  operator delete(v23);
LABEL_58:
  Espresso::MILTranslator::LayerTranslator::GetLayerName(&v222, a2);
  Espresso::MILTranslator::LayerTranslator::ReductionLayerNameStack::PushLayerName((uint64_t)&__p, (uint64_t)&v222);
  if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v222.__r_.__value_.__l.__data_);
  }
  std::string::size_type v26 = *((unsigned __int8 *)a4 + 23);
  std::string::size_type v27 = *((void *)a4 + 1);
  if ((v26 & 0x80u) == 0) {
    uint64_t v28 = *((unsigned __int8 *)a4 + 23);
  }
  else {
    uint64_t v28 = *((void *)a4 + 1);
  }
  if (v28)
  {
    if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)__dst, v234.__r_.__value_.__l.__data_, v234.__r_.__value_.__l.__size_);
      std::string::size_type v26 = *((unsigned __int8 *)a4 + 23);
      std::string::size_type v27 = *((void *)a4 + 1);
    }
    else
    {
      *(std::string *)std::string __dst = v234;
    }
    if ((v26 & 0x80u) == 0) {
      uint64_t v29 = a4;
    }
    else {
      uint64_t v29 = *(const std::string::value_type **)a4;
    }
    if ((v26 & 0x80u) == 0) {
      std::string::size_type v30 = v26;
    }
    else {
      std::string::size_type v30 = v27;
    }
    uint64_t v31 = std::string::insert((std::string *)__dst, 0, v29, v30);
    uint64_t v32 = (std::string::value_type *)v31->__r_.__value_.__r.__words[0];
    std::string::size_type v33 = v31->__r_.__value_.__l.__size_;
    LODWORD(v238.__r_.__value_.__l.__data_) = v31->__r_.__value_.__r.__words[2];
    *(_DWORD *)((char *)v238.__r_.__value_.__r.__words + 3) = *(_DWORD *)((char *)&v31->__r_.__value_.__r.__words[2] + 3);
    int v34 = SHIBYTE(v31->__r_.__value_.__r.__words[2]);
    v31->__r_.__value_.__l.__size_ = 0;
    v31->__r_.__value_.__r.__words[2] = 0;
    v31->__r_.__value_.__r.__words[0] = 0;
    if ((__dst[23] & 0x80000000) != 0)
    {
      operator delete(*(void **)__dst);
      if ((v34 & 0x80000000) == 0) {
        goto LABEL_75;
      }
    }
    else if ((v34 & 0x80000000) == 0)
    {
LABEL_75:
      v221.__r_.__value_.__r.__words[0] = (std::string::size_type)v32;
      v221.__r_.__value_.__l.__size_ = v33;
      LODWORD(v221.__r_.__value_.__r.__words[2]) = v238.__r_.__value_.__l.__data_;
      *(_DWORD *)((char *)&v221.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v238.__r_.__value_.__r.__words
                                                                              + 3);
      *((unsigned char *)&v221.__r_.__value_.__s + 23) = v34;
      goto LABEL_78;
    }
    std::string::__init_copy_ctor_external(&v221, v32, v33);
LABEL_78:
    Espresso::MILTranslator::LayerTranslator::ReductionLayerNameStack::PushLayerName((uint64_t)&__p, (uint64_t)&v221);
    if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v221.__r_.__value_.__l.__data_);
      if ((v34 & 0x80000000) == 0) {
        goto LABEL_80;
      }
    }
    else if ((v34 & 0x80000000) == 0)
    {
LABEL_80:
      v220.__r_.__value_.__r.__words[0] = (std::string::size_type)v32;
      v220.__r_.__value_.__l.__size_ = v33;
      LODWORD(v220.__r_.__value_.__r.__words[2]) = v238.__r_.__value_.__l.__data_;
      *(_DWORD *)((char *)&v220.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v238.__r_.__value_.__r.__words
                                                                              + 3);
      *((unsigned char *)&v220.__r_.__value_.__s + 23) = v34;
      goto LABEL_83;
    }
    std::string::__init_copy_ctor_external(&v220, v32, v33);
LABEL_83:
    Espresso::MILTranslator::LayerTranslator::ReductionLayerNameStack::PushIOName((uint64_t)&__p, (uint64_t)&v220);
    if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v220.__r_.__value_.__l.__data_);
      if ((v34 & 0x80000000) == 0) {
        goto LABEL_85;
      }
    }
    else if ((v34 & 0x80000000) == 0)
    {
LABEL_85:
      LODWORD(v26) = *((unsigned __int8 *)a4 + 23);
      goto LABEL_86;
    }
    operator delete(v32);
    goto LABEL_85;
  }
LABEL_86:
  if ((v26 & 0x80) != 0)
  {
    uint64_t v35 = *((void *)a4 + 1);
    if (!v35) {
      goto LABEL_111;
    }
    if (v35 != 3)
    {
      if (v35 != 6) {
        goto LABEL_165;
      }
      a4 = *(const std::string::value_type **)a4;
LABEL_95:
      if (*(_DWORD *)a4 != 1096110419 || *((_WORD *)a4 + 2) != 17746) {
        goto LABEL_165;
      }
      float v37 = 2.0;
      int v38 = 13;
      goto LABEL_109;
    }
    if (**(_WORD **)a4 != 22597 || *(unsigned char *)(*(void *)a4 + 2) != 80)
    {
LABEL_165:
      uint64_t v78 = MIL::IRObject::GetLocation(a2);
      (*(void (**)(unsigned char *__return_ptr))(*(void *)v78 + 24))(__dst);
      int v79 = __dst[23];
      uint64_t v80 = *(unsigned char **)__dst;
      std::string::basic_string[abi:ne180100]<0>(&v238, "Unsupported preprocess mode in reduction");
      if (v79 >= 0) {
        std::vector<std::string>::pointer v81 = __dst;
      }
      else {
        std::vector<std::string>::pointer v81 = v80;
      }
      if ((v238.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unsigned int v82 = &v238;
      }
      else {
        unsigned int v82 = (std::string *)v238.__r_.__value_.__r.__words[0];
      }
      Espresso::throw_exception_selector<Espresso::network_translation_error,char const*,char const*>("MIL->EIR translation error %s: %s", (uint64_t)v81, (uint64_t)v82);
    }
  }
  else
  {
    if (!v26) {
      goto LABEL_111;
    }
    if (v26 != 3)
    {
      if (v26 != 6) {
        goto LABEL_165;
      }
      goto LABEL_95;
    }
    if (*(_WORD *)a4 != 22597 || a4[2] != 80) {
      goto LABEL_165;
    }
  }
  float v37 = 1.0;
  int v38 = 27;
LABEL_109:
  std::string::basic_string[abi:ne180100]<0>(&v218, "elementwise");
  v212[0] = v38;
  v212[1] = 0;
  *(float *)&v212[2] = v37;
  uint64_t v213 = 0x358637BD00000000;
  int v214 = 0;
  char v215 = 0;
  *(_OWORD *)int v216 = *(_OWORD *)&v251.__r_.__value_.__l.__data_;
  uint64_t v217 = 0;
  *(_DWORD *)&v216[15] = *(_DWORD *)((char *)&v251.__r_.__value_.__r.__words[1] + 7);
  Espresso::MILTranslator::LayerTranslator::ReductionLayerNameStack::PopNextLayerToEspressoNet<Espresso::elementwise_params>((uint64_t)&__p, (uint64_t)&v218, (uint64_t)v212);
  if (v219 < 0) {
    operator delete(v218);
  }
LABEL_111:
  if ((a3 & 0xFFFFFFF7) != 1) {
    goto LABEL_117;
  }
  std::string::basic_string[abi:ne180100]<0>(__dst, "x");
  ParameterType = (MIL::IRValueType *)MIL::IROperation::GetParameterType();
  uint64_t v41 = MIL::IRValueType::AsTensorType(ParameterType);
  int8x8_t v42 = (MIL::IRDimension ***)(*(uint64_t (**)(uint64_t))(*(void *)v41 + 96))(v41);
  if ((__dst[23] & 0x80000000) != 0) {
    operator delete(*(void **)__dst);
  }
  if ((((char *)v42[1] - (char *)*v42) & 0xFFFFFFFFFFFFFFF0) != 0x20
    || (*(uint64_t (**)(void))(*(void *)*(v42[1] - 1) + 24))(*(v42[1] - 1))
    || (*(uint64_t (**)(void))(*(void *)*(v42[1] - 2) + 24))(*(v42[1] - 2))
    || (char *)v42[1] - (char *)*v42 == 40
    && (*(uint64_t (**)(MIL::IRDimension *))(*(void *)(*v42)[2] + 24))((*v42)[2]))
  {
    goto LABEL_117;
  }
  std::string::basic_string[abi:ne180100]<0>(__dst, "axes");
  char IsParameterSet = MIL::IROperation::IsParameterSet();
  if ((__dst[23] & 0x80000000) != 0) {
    operator delete(*(void **)__dst);
  }
  if ((IsParameterSet & 1) == 0)
  {
    uint64_t v113 = MIL::IRDimension::AsConstant(**v42);
    if ((*(uint64_t (**)(uint64_t))(*(void *)v113 + 48))(v113) != 1) {
      goto LABEL_117;
    }
    uint64_t v114 = MIL::IRDimension::AsConstant((*v42)[1]);
    if ((*(uint64_t (**)(uint64_t))(*(void *)v114 + 48))(v114) != 1) {
      goto LABEL_117;
    }
LABEL_240:
    std::string::basic_string[abi:ne180100]<0>(__dst, "axes");
    uint64_t ParameterValue = (MIL::IRValue *)MIL::IROperation::GetParameterValue();
    MIL::IRValue::AsTensor(ParameterValue);
    Data = (_DWORD *)MIL::IRTensorValue::GetDataView<int>();
    uint64_t v118 = v117;
    if ((__dst[23] & 0x80000000) != 0) {
      operator delete(*(void **)__dst);
    }
    std::string::basic_string[abi:ne180100]<0>(__dst, "x");
    unint64_t v119 = (MIL::IRValueType *)MIL::IROperation::GetParameterType();
    uint64_t v120 = MIL::IRValueType::AsTensorType(v119);
    int v121 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v120 + 96))(v120);
    if (v121[1] - *v121 == 40)
    {
      if (v118)
      {
        uint64_t v122 = 4 * v118;
        while (*Data != -3 && *Data != 2)
        {
          ++Data;
          v122 -= 4;
          if (!v122) {
            goto LABEL_250;
          }
        }
        int v124 = 1;
      }
      else
      {
LABEL_250:
        int v124 = 0;
      }
      if ((__dst[23] & 0x80000000) != 0) {
        operator delete(*(void **)__dst);
      }
      if (v124)
      {
        std::string::basic_string[abi:ne180100]<0>(v210, "pool3d");
        v203[0] = xmmword_192DC3600;
        v203[1] = xmmword_192DCA240;
        int v209 = 1;
        int v204 = 0;
        uint64_t v207 = 0;
        uint64_t v206 = 0;
        __int16 v208 = 0;
        __int16 v205 = 2;
        if (a3 == 1)
        {
          int v134 = 0;
        }
        else
        {
          if (a3 != 9) {
            goto LABEL_314;
          }
          int v134 = 1;
        }
        LODWORD(v203[0]) = v134;
LABEL_314:
        Espresso::MILTranslator::LayerTranslator::ReductionLayerNameStack::PopNextLayerToEspressoNet<Espresso::pool3d_params_t>((uint64_t)&__p, (uint64_t)v210, (uint64_t)v203);
        if (v211 < 0)
        {
          char v136 = v210[0];
          goto LABEL_316;
        }
        goto LABEL_317;
      }
    }
    else if ((__dst[23] & 0x80000000) != 0)
    {
      operator delete(*(void **)__dst);
    }
    std::string::basic_string[abi:ne180100]<0>(v201, "pool");
    v187[0] = xmmword_192DCA400;
    v187[1] = xmmword_192DCA240;
    uint64_t v194 = 0;
    __int16 v195 = 0;
    uint64_t v197 = 0;
    uint64_t v196 = 0;
    uint64_t v198 = 0x100000001;
    uint64_t v200 = 0;
    uint64_t v199 = 0;
    int v193 = 1;
    int v188 = 0;
    uint64_t v191 = 0;
    uint64_t v190 = 0;
    __int16 v192 = 0;
    __int16 v189 = 2;
    if (a3 == 1)
    {
      int v135 = 0;
    }
    else
    {
      if (a3 != 9) {
        goto LABEL_310;
      }
      int v135 = 1;
    }
    LODWORD(v187[0]) = v135;
LABEL_310:
    Espresso::MILTranslator::LayerTranslator::ReductionLayerNameStack::PopNextLayerToEspressoNet<Espresso::pool_params>((uint64_t)&__p, (uint64_t)v201, (uint64_t)v187);
    if (v202 < 0)
    {
      char v136 = (void *)v201[0];
LABEL_316:
      operator delete(v136);
    }
LABEL_317:
    int v70 = 0;
    goto LABEL_257;
  }
  uint64_t v97 = MIL::IRDimension::AsConstant(*(v42[1] - 1));
  char v98 = (*(uint64_t (**)(uint64_t))(*(void *)v97 + 48))(v97) == 1;
  uint64_t v99 = MIL::IRDimension::AsConstant(*(v42[1] - 2));
  BOOL v100 = (*(uint64_t (**)(uint64_t))(*(void *)v99 + 48))(v99) == 1;
  std::string::basic_string[abi:ne180100]<0>(__dst, "axes");
  char v101 = (MIL::IRValue *)MIL::IROperation::GetParameterValue();
  MIL::IRValue::AsTensor(v101);
  uint64_t v102 = (int *)MIL::IRTensorValue::GetDataView<int>();
  uint64_t v104 = v103;
  if ((__dst[23] & 0x80000000) != 0) {
    operator delete(*(void **)__dst);
  }
  if (!v104)
  {
LABEL_232:
    if ((v98 & 1) == 0 || !v100) {
      goto LABEL_117;
    }
    goto LABEL_240;
  }
  uint64_t v105 = *v42;
  uint64_t v106 = v42[1];
  uint64_t v107 = 4 * v104;
  while (1)
  {
    signed int v108 = (((unint64_t)((char *)v106 - (char *)v105) >> 3) & (*v102 >> 31)) + *v102;
    if ((*(uint64_t (**)(MIL::IRDimension *))(*(void *)v105[v108] + 24))(v105[v108])) {
      break;
    }
    if (v108 <= 1)
    {
      uint64_t v109 = MIL::IRDimension::AsConstant((*v42)[v108]);
      if ((*(uint64_t (**)(uint64_t))(*(void *)v109 + 48))(v109) != 1) {
        break;
      }
    }
    uint64_t v105 = *v42;
    uint64_t v106 = v42[1];
    uint64_t v110 = v106 - *v42;
    uint64_t v111 = v110 - 1;
    int v112 = v110 - 2 == v108 || v100;
    v98 |= v111 == v108;
    if (v111 != v108) {
      BOOL v100 = v112;
    }
    ++v102;
    v107 -= 4;
    if (!v107) {
      goto LABEL_232;
    }
  }
LABEL_117:
  long long v236 = 0uLL;
  LODWORD(v237) = 0;
  std::string::basic_string[abi:ne180100]<0>(__dst, "axes");
  char v43 = MIL::IROperation::IsParameterSet();
  char v44 = v43;
  if ((__dst[23] & 0x80000000) == 0)
  {
    if (v43) {
      goto LABEL_119;
    }
LABEL_147:
    LOBYTE(v68) = 0;
    int v69 = -1;
    int v146 = 31;
    int v70 = 1;
    goto LABEL_255;
  }
  operator delete(*(void **)__dst);
  if ((v44 & 1) == 0) {
    goto LABEL_147;
  }
LABEL_119:
  std::string::basic_string[abi:ne180100]<0>(__dst, "x");
  unint64_t v45 = (MIL::IRValueType *)MIL::IROperation::GetParameterType();
  uint64_t v46 = MIL::IRValueType::AsTensorType(v45);
  unint64_t v47 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v46 + 96))(v46);
  uint64_t v49 = *v47;
  uint64_t v48 = v47[1];
  if ((__dst[23] & 0x80000000) != 0) {
    operator delete(*(void **)__dst);
  }
  std::string::basic_string[abi:ne180100]<0>(__dst, "axes");
  char v50 = (MIL::IRValue *)MIL::IROperation::GetParameterValue();
  MIL::IRValue::AsTensor(v50);
  size_t v51 = (int *)MIL::IRTensorValue::GetDataView<int>();
  std::vector<int>::size_type v53 = v52;
  if ((__dst[23] & 0x80000000) != 0) {
    operator delete(*(void **)__dst);
  }
  memset(__dst, 0, 24);
  std::vector<int>::reserve((std::vector<int> *)__dst, v53);
  unint64_t v54 = (unint64_t)(v48 - v49) >> 3;
  if (v53)
  {
    unint64_t v55 = &v51[v53];
    unint64_t v56 = *(_DWORD **)&__dst[8];
    do
    {
      if (*v51 >= 0) {
        int v57 = v54;
      }
      else {
        int v57 = 0;
      }
      int v58 = *v51 - v57;
      if ((unint64_t)v56 >= *(void *)&__dst[16])
      {
        BOOL v60 = *(_DWORD **)__dst;
        uint64_t v61 = ((uint64_t)v56 - *(void *)__dst) >> 2;
        unint64_t v62 = v61 + 1;
        if ((unint64_t)(v61 + 1) >> 62) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v63 = *(void *)&__dst[16] - *(void *)__dst;
        if ((uint64_t)(*(void *)&__dst[16] - *(void *)__dst) >> 1 > v62) {
          unint64_t v62 = v63 >> 1;
        }
        if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v64 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v64 = v62;
        }
        if (v64)
        {
          unint64_t v64 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v64);
          unint64_t v56 = *(_DWORD **)&__dst[8];
          BOOL v60 = *(_DWORD **)__dst;
        }
        else
        {
          uint64_t v65 = 0;
        }
        uint64_t v66 = (_DWORD *)(v64 + 4 * v61);
        _DWORD *v66 = v58;
        long long v59 = v66 + 1;
        while (v56 != v60)
        {
          int v67 = *--v56;
          *--uint64_t v66 = v67;
        }
        *(void *)std::string __dst = v66;
        *(void *)&__dst[8] = v59;
        *(void *)&__dst[16] = v64 + 4 * v65;
        if (v60) {
          operator delete(v60);
        }
      }
      else
      {
        *unint64_t v56 = v58;
        long long v59 = v56 + 1;
      }
      *(void *)&__dst[8] = v59;
      ++v51;
      unint64_t v56 = v59;
    }
    while (v51 != v55);
  }
  std::__sort<std::__less<int,int> &,int *>();
  uint64_t v71 = (uint64_t)(*(void *)&__dst[8] - *(void *)__dst) >> 2;
  if (v71 != (int)v54)
  {
LABEL_154:
    if (v71 == 3)
    {
      if (**(_DWORD **)__dst == -3
        && *(_DWORD *)(*(void *)__dst + 4) == -2
        && *(_DWORD *)(*(void *)__dst + 8) == -1)
      {
        int v70 = 0;
        int v68 = 0;
        int v76 = 7;
        goto LABEL_252;
      }
    }
    else
    {
      if (v71 != 2)
      {
        if (v71 == 1)
        {
          int v70 = 0;
          int v68 = 0;
          int v146 = 1;
          switch(**(_DWORD **)__dst)
          {
            case 0xFFFFFFFB:
              int v70 = 0;
              int v68 = 0;
              int v76 = 16;
              goto LABEL_252;
            case 0xFFFFFFFC:
              int v70 = 0;
              int v68 = 0;
              int v76 = 8;
              goto LABEL_252;
            case 0xFFFFFFFD:
              int v70 = 0;
              int v68 = 0;
              int v76 = 4;
              goto LABEL_252;
            case 0xFFFFFFFE:
              int v70 = 0;
              int v68 = 0;
              int v76 = 2;
              goto LABEL_252;
            case 0xFFFFFFFF:
              goto LABEL_253;
            default:
              goto LABEL_178;
          }
        }
        else
        {
          int v70 = 0;
          int v68 = 1;
          int v146 = 7;
          if (!*(void *)__dst) {
            goto LABEL_180;
          }
        }
        goto LABEL_253;
      }
      if (**(_DWORD **)__dst == -2 && *(_DWORD *)(*(void *)__dst + 4) == -1)
      {
        int v70 = 0;
        int v68 = 0;
        int v76 = 3;
LABEL_252:
        int v146 = v76;
        goto LABEL_253;
      }
    }
LABEL_178:
    int v70 = 0;
    int v146 = 7;
    int v68 = 1;
    goto LABEL_253;
  }
  int v72 = ~v54;
  uint64_t v73 = (uint64_t)(*(void *)&__dst[8] - *(void *)__dst) >> 2;
  int v74 = *(int **)__dst;
  while (v73)
  {
    int v75 = *v74++;
    ++v72;
    --v73;
    if (v72 != v75) {
      goto LABEL_154;
    }
  }
  int v68 = 0;
  int v146 = 31;
  int v70 = 1;
  if (!*(void *)__dst)
  {
LABEL_180:
    if (v68)
    {
LABEL_181:
      std::string::basic_string[abi:ne180100]<0>(__dst, "axes");
      int v142 = v70;
      int v83 = (MIL::IRValue *)MIL::IROperation::GetParameterValue();
      MIL::IRValue::AsTensor(v83);
      uint64_t v145 = MIL::IRTensorValue::GetDataView<int>();
      uint64_t v85 = v84;
      if ((__dst[23] & 0x80000000) != 0) {
        operator delete(*(void **)__dst);
      }
      uint64_t v144 = v85 - 1;
      if (v85 != 1)
      {
        uint64_t v86 = 0;
        do
        {
          int v87 = *(_DWORD *)(v145 + 4 * v86);
          if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&v238, v234.__r_.__value_.__l.__data_, v234.__r_.__value_.__l.__size_);
          }
          else {
            std::string v238 = v234;
          }
          uint64_t v88 = std::string::append(&v238, "_axis_");
          long long v89 = *(_OWORD *)&v88->__r_.__value_.__l.__data_;
          *(void *)&__dst[16] = *((void *)&v88->__r_.__value_.__l + 2);
          *(_OWORD *)std::string __dst = v89;
          v88->__r_.__value_.__l.__size_ = 0;
          v88->__r_.__value_.__r.__words[2] = 0;
          v88->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v251, ++v86);
          if ((v251.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            BOOL v90 = &v251;
          }
          else {
            BOOL v90 = (std::string *)v251.__r_.__value_.__r.__words[0];
          }
          if ((v251.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v91 = HIBYTE(v251.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v91 = v251.__r_.__value_.__l.__size_;
          }
          unint64_t v92 = std::string::append((std::string *)__dst, (const std::string::value_type *)v90, v91);
          long long v93 = (std::string::value_type *)v92->__r_.__value_.__r.__words[0];
          std::string::size_type v94 = v92->__r_.__value_.__l.__size_;
          LODWORD(v250.__r_.__value_.__l.__data_) = v92->__r_.__value_.__r.__words[2];
          *(_DWORD *)((char *)v250.__r_.__value_.__r.__words + 3) = *(_DWORD *)((char *)&v92->__r_.__value_.__r.__words[2]
                                                                              + 3);
          int v95 = SHIBYTE(v92->__r_.__value_.__r.__words[2]);
          v92->__r_.__value_.__l.__size_ = 0;
          v92->__r_.__value_.__r.__words[2] = 0;
          v92->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v251.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v251.__r_.__value_.__l.__data_);
          }
          if ((__dst[23] & 0x80000000) != 0) {
            operator delete(*(void **)__dst);
          }
          if (SHIBYTE(v238.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v238.__r_.__value_.__l.__data_);
            if ((v95 & 0x80000000) == 0)
            {
LABEL_200:
              v186.__r_.__value_.__r.__words[0] = (std::string::size_type)v93;
              v186.__r_.__value_.__l.__size_ = v94;
              LODWORD(v186.__r_.__value_.__r.__words[2]) = v250.__r_.__value_.__l.__data_;
              *(_DWORD *)((char *)&v186.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v250.__r_.__value_.__r.__words
                                                                                      + 3);
              *((unsigned char *)&v186.__r_.__value_.__s + 23) = v95;
              goto LABEL_203;
            }
          }
          else if ((v95 & 0x80000000) == 0)
          {
            goto LABEL_200;
          }
          std::string::__init_copy_ctor_external(&v186, v93, v94);
LABEL_203:
          Espresso::MILTranslator::LayerTranslator::ReductionLayerNameStack::PushLayerName((uint64_t)&__p, (uint64_t)&v186);
          if (SHIBYTE(v186.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v186.__r_.__value_.__l.__data_);
            if ((v95 & 0x80000000) == 0)
            {
LABEL_205:
              v185.__r_.__value_.__r.__words[0] = (std::string::size_type)v93;
              v185.__r_.__value_.__l.__size_ = v94;
              LODWORD(v185.__r_.__value_.__r.__words[2]) = v250.__r_.__value_.__l.__data_;
              *(_DWORD *)((char *)&v185.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v250.__r_.__value_.__r.__words
                                                                                      + 3);
              *((unsigned char *)&v185.__r_.__value_.__s + 23) = v95;
              goto LABEL_208;
            }
          }
          else if ((v95 & 0x80000000) == 0)
          {
            goto LABEL_205;
          }
          std::string::__init_copy_ctor_external(&v185, v93, v94);
LABEL_208:
          Espresso::MILTranslator::LayerTranslator::ReductionLayerNameStack::PushIOName((uint64_t)&__p, (uint64_t)&v185);
          if (SHIBYTE(v185.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v185.__r_.__value_.__l.__data_);
          }
          std::string::basic_string[abi:ne180100]<0>(v183, "reduce");
          v176[0] = v147;
          v176[1] = 897988541;
          v176[2] = v146;
          v176[3] = 1;
          long long v177 = v236;
          int v178 = v237;
          int v179 = v87;
          char v180 = 1;
          __int16 v181 = (__int16)v239;
          char v182 = BYTE2(v239);
          Espresso::MILTranslator::LayerTranslator::ReductionLayerNameStack::PopNextLayerToEspressoNet<Espresso::reduce_params_t>((uint64_t)&__p, (uint64_t)v183, (uint64_t)v176);
          if (v184 < 0)
          {
            operator delete(v183[0]);
            if (v95 < 0) {
LABEL_215:
            }
              operator delete(v93);
          }
          else if (v95 < 0)
          {
            goto LABEL_215;
          }
        }
        while (v144 != v86);
      }
      int v69 = *(_DWORD *)(v145 + 4 * v144);
      LOBYTE(v68) = 1;
      int v70 = v142;
      goto LABEL_255;
    }
    goto LABEL_254;
  }
LABEL_253:
  *(void *)&__dst[8] = *(void *)__dst;
  operator delete(*(void **)__dst);
  if (v68) {
    goto LABEL_181;
  }
LABEL_254:
  int v69 = -1;
LABEL_255:
  std::string::basic_string[abi:ne180100]<0>(v174, "reduce");
  v167[0] = v147;
  v167[1] = 897988541;
  v167[2] = v146;
  v167[3] = 1;
  long long v168 = v236;
  int v169 = v237;
  int v170 = v69;
  char v171 = v68;
  __int16 v172 = (__int16)v239;
  char v173 = BYTE2(v239);
  Espresso::MILTranslator::LayerTranslator::ReductionLayerNameStack::PopNextLayerToEspressoNet<Espresso::reduce_params_t>((uint64_t)&__p, (uint64_t)v174, (uint64_t)v167);
  if (v175 < 0) {
    operator delete(v174[0]);
  }
LABEL_257:
  if ((v143 & 1) == 0)
  {
    LOBYTE(v249) = 0;
    long long v247 = 0u;
    long long v248 = 0u;
    long long v245 = 0u;
    long long v246 = 0u;
    long long v243 = 0u;
    long long v244 = 0u;
    memset(__dst, 0, sizeof(__dst));
    HIDWORD(v249) = 1;
    if (v70)
    {
      LODWORD(v125) = 0;
      LOBYTE(v249) = 1;
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&v238, "axes");
      v126 = (MIL::IRValue *)MIL::IROperation::GetParameterValue();
      MIL::IRValue::AsTensor(v126);
      v127 = (const void *)MIL::IRTensorValue::GetDataView<int>();
      uint64_t v125 = v128;
      if (SHIBYTE(v238.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v238.__r_.__value_.__l.__data_);
      }
      if (v125) {
        memcpy(__dst, v127, 4 * v125);
      }
    }
    std::string::basic_string[abi:ne180100]<0>(v165, "squeeze");
    long long v161 = v246;
    long long v162 = v247;
    long long v163 = v248;
    long long v157 = *(_OWORD *)&__dst[16];
    long long v158 = v243;
    long long v159 = v244;
    long long v160 = v245;
    v155[0] = 0;
    v155[1] = v125;
    uint64_t v164 = v249;
    long long v156 = *(_OWORD *)__dst;
    uint64_t v129 = v230[5];
    unint64_t v130 = *((void *)&v232 + 1) + v232 - 1;
    uint64_t v131 = *(void *)(v231[1] + 8 * (v130 / 0xAA));
    if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v251, v234.__r_.__value_.__l.__data_, v234.__r_.__value_.__l.__size_);
    }
    else {
      std::string v251 = v234;
    }
    memset(&v238, 0, sizeof(v238));
    *(void *)&long long v236 = &v238;
    BYTE8(v236) = 0;
    v238.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
    v238.__r_.__value_.__l.__size_ = v238.__r_.__value_.__r.__words[0];
    v238.__r_.__value_.__r.__words[2] = v238.__r_.__value_.__r.__words[0] + 24;
    v238.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v238.__r_.__value_.__r.__words[2], (long long *)&v251, &v252, (std::string *)v238.__r_.__value_.__l.__data_);
    Espresso::MILTranslator::LayerTranslator::ReductionLayerNameStack::GetNextOutputName(&v250, &__p);
    long long v236 = 0uLL;
    uint64_t v237 = 0;
    uint64_t v239 = &v236;
    LOBYTE(v240) = 0;
    *(void *)&long long v236 = operator new(0x18uLL);
    *((void *)&v236 + 1) = v236;
    uint64_t v237 = v236 + 24;
    *((void *)&v236 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v237, (long long *)&v250, (long long *)&v251, (std::string *)v236);
    Espresso::MILTranslator::TypedEspressoBuilder::AddLayer<Espresso::squeeze_params_t>((uint64_t *)&v239, v129, (uint64_t)v165, v131 + 24 * (v130 % 0xAA), (uint64_t)v155, (uint64_t)&v238, (uint64_t *)&v236, (uint64_t)__p);
    if (v240) {
      nitro::nitro_function::nitro_function(v240);
    }
    float v241 = (void **)&v236;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v241);
    if (SHIBYTE(v250.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v250.__r_.__value_.__l.__data_);
    }
    *(void *)&long long v236 = &v238;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v236);
    if (SHIBYTE(v251.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v251.__r_.__value_.__l.__data_);
    }
    Espresso::MILTranslator::LayerTranslator::ReductionLayerNameStack::GetNextOutputName(&v238, &__p);
    if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v234.__r_.__value_.__l.__data_);
    }
    std::string v234 = v238;
    std::deque<std::string>::pop_back(v233);
    std::deque<std::string>::pop_back(v231);
    if (v166 < 0) {
      operator delete(v165[0]);
    }
  }
  if (a5[23] < 0)
  {
    uint64_t v132 = *((void *)a5 + 1);
    if (!v132) {
      goto LABEL_291;
    }
    if (v132 != 3) {
      goto LABEL_319;
    }
    a5 = *(const std::string::value_type **)a5;
  }
  else
  {
    if (!a5[23]) {
      goto LABEL_291;
    }
    if (a5[23] != 3) {
      goto LABEL_319;
    }
  }
  if (*(_WORD *)a5 != 20300 || a5[2] != 71)
  {
LABEL_319:
    uint64_t v137 = MIL::IRObject::GetLocation(a2);
    (*(void (**)(unsigned char *__return_ptr))(*(void *)v137 + 24))(__dst);
    int v138 = __dst[23];
    uint64_t v139 = *(unsigned char **)__dst;
    std::string::basic_string[abi:ne180100]<0>(&v238, "Unsupported postprocess mode in reduction");
    if (v138 >= 0) {
      std::string::size_type v140 = __dst;
    }
    else {
      std::string::size_type v140 = v139;
    }
    if ((v238.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v141 = &v238;
    }
    else {
      uint64_t v141 = (std::string *)v238.__r_.__value_.__r.__words[0];
    }
    Espresso::throw_exception_selector<Espresso::network_translation_error,char const*,char const*>("MIL->EIR translation error %s: %s", (uint64_t)v140, (uint64_t)v141);
  }
  std::string::basic_string[abi:ne180100]<0>(v153, "elementwise");
  v148[0] = 26;
  v148[1] = 1065353216;
  v148[2] = 897988541;
  char v149 = 0;
  *(_OWORD *)uint64_t v150 = *(_OWORD *)&v251.__r_.__value_.__l.__data_;
  int v151 = 0;
  int v152 = 0;
  *(_DWORD *)&v150[15] = *(_DWORD *)((char *)&v251.__r_.__value_.__r.__words[1] + 7);
  Espresso::MILTranslator::LayerTranslator::ReductionLayerNameStack::PopNextLayerToEspressoNet<Espresso::elementwise_params>((uint64_t)&__p, (uint64_t)v153, (uint64_t)v148);
  if (v154 < 0) {
    operator delete(v153[0]);
  }
LABEL_291:
  if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v234.__r_.__value_.__l.__data_);
  }
  std::deque<std::string>::~deque[abi:ne180100]((uint64_t)v233);
  std::deque<std::string>::~deque[abi:ne180100]((uint64_t)v231);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s.__r_.__value_.__l.__data_);
  }
}

void sub_19227ACA4(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x2F7]) < 0) {
    operator delete((void *)STACK[0x2E0]);
  }
  Espresso::MILTranslator::LayerTranslator::ReductionLayerNameStack::~ReductionLayerNameStack((void **)&STACK[0x428]);
  if (SLOBYTE(STACK[0x4C7]) < 0) {
    operator delete((void *)STACK[0x4B0]);
  }
  _Unwind_Resume(a1);
}

uint64_t std::deque<std::string>::~deque[abi:ne180100](uint64_t a1)
{
  std::__fs::filesystem::path::__string_view v2 = *(void ***)(a1 + 8);
  uint64_t v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    char v4 = (void *)(a1 + 40);
    uint64_t v3 = *(void ***)(a1 + 8);
  }
  else
  {
    char v4 = (void *)(a1 + 40);
    unint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = &v2[v5 / 0xAA];
    unint64_t v7 = (unint64_t)*v6;
    unint64_t v8 = (unint64_t)*v6 + 24 * (v5 % 0xAA);
    unint64_t v9 = (unint64_t)v2[(*(void *)(a1 + 40) + v5) / 0xAA] + 24 * ((*(void *)(a1 + 40) + v5) % 0xAA);
    if (v8 != v9)
    {
      do
      {
        if (*(char *)(v8 + 23) < 0)
        {
          operator delete(*(void **)v8);
          unint64_t v7 = (unint64_t)*v6;
        }
        v8 += 24;
        if (v8 - v7 == 4080)
        {
          unint64_t v10 = (unint64_t)v6[1];
          ++v6;
          unint64_t v7 = v10;
          unint64_t v8 = v10;
        }
      }
      while (v8 != v9);
      std::__fs::filesystem::path::__string_view v2 = *(void ***)(a1 + 8);
      uint64_t v3 = *(void ***)(a1 + 16);
    }
  }
  *char v4 = 0;
  unint64_t v11 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = *(void ***)(a1 + 16);
      std::__fs::filesystem::path::__string_view v2 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v2;
      unint64_t v11 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v12 = v11 >> 3;
  if (v12 == 1)
  {
    uint64_t v13 = 85;
    goto LABEL_16;
  }
  if (v12 == 2)
  {
    uint64_t v13 = 170;
LABEL_16:
    *(void *)(a1 + 32) = v13;
  }
  if (v2 != v3)
  {
    do
    {
      long long v14 = *v2++;
      operator delete(v14);
    }
    while (v2 != v3);
    uint64_t v16 = *(void *)(a1 + 8);
    uint64_t v15 = *(void *)(a1 + 16);
    if (v15 != v16) {
      *(void *)(a1 + 16) = v15 + ((v16 - v15 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void Espresso::MILTranslator::LayerTranslator::ReductionLayerNameStack::PushLayerName(uint64_t a1, uint64_t a2)
{
  std::__fs::filesystem::path::__string_view v2 = (void *)(a1 + 16);
  Espresso::MILTranslator::NameGenerator::NameForPrefix((void *)(*(void *)(a1 + 8) + 168), a2, (uint64_t)&__p);
  std::deque<std::string>::push_back(v2, &__p);
  if (v4 < 0) {
    operator delete((void *)__p.n128_u64[0]);
  }
}

void sub_19227B27C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

__n128 std::deque<std::string>::push_back(void *a1, __n128 *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 170 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<std::string>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  unint64_t v8 = (__n128 *)(*(void *)(v5 + 8 * (v7 / 0xAA)) + 24 * (v7 % 0xAA));
  __n128 result = *a2;
  v8[1].n128_u64[0] = a2[1].n128_u64[0];
  *unint64_t v8 = result;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  a2->n128_u64[0] = 0;
  ++a1[5];
  return result;
}

void std::deque<std::string>::push_back(void *a1, long long *a2)
{
  uint64_t v4 = a1[1];
  uint64_t v5 = a1[2];
  uint64_t v6 = 170 * ((v5 - v4) >> 3) - 1;
  if (v5 == v4) {
    uint64_t v6 = 0;
  }
  if (v6 == a1[5] + a1[4])
  {
    std::deque<std::string>::__add_back_capacity(a1);
    uint64_t v4 = a1[1];
    uint64_t v5 = a1[2];
  }
  if (v5 == v4)
  {
    unint64_t v8 = 0;
  }
  else
  {
    unint64_t v7 = a1[5] + a1[4];
    unint64_t v8 = (std::string *)(*(void *)(v4 + 8 * (v7 / 0xAA)) + 24 * (v7 % 0xAA));
  }
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v9 = *a2;
    v8->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
  }
  ++a1[5];
}

void std::deque<std::string>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0xAA;
  unint64_t v4 = v2 - 170;
  if (v3)
  {
    a1[4] = v4;
    uint64_t v5 = (void *)a1[1];
    uint64_t v6 = (char *)a1[2];
    uint64_t v9 = *v5;
    unint64_t v7 = (char *)(v5 + 1);
    uint64_t v8 = v9;
    a1[1] = v7;
    if (v6 != (char *)a1[3]) {
      goto LABEL_41;
    }
    uint64_t v10 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1) {
        unint64_t v40 = 1;
      }
      else {
        unint64_t v40 = (uint64_t)&v6[-*a1] >> 2;
      }
      uint64_t v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v40);
      int8x8_t v42 = &v41[8 * (v40 >> 2)];
      char v44 = &v41[8 * v43];
      unint64_t v45 = (uint64_t *)a1[1];
      uint64_t v6 = v42;
      uint64_t v46 = a1[2] - (void)v45;
      if (v46)
      {
        uint64_t v6 = &v42[v46 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v47 = 8 * (v46 >> 3);
        uint64_t v48 = &v41[8 * (v40 >> 2)];
        do
        {
          uint64_t v49 = *v45++;
          *(void *)uint64_t v48 = v49;
          v48 += 8;
          v47 -= 8;
        }
        while (v47);
      }
      goto LABEL_29;
    }
LABEL_5:
    uint64_t v11 = v10 >> 3;
    BOOL v12 = v10 >> 3 < -1;
    uint64_t v13 = (v10 >> 3) + 2;
    if (v12) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = v11 + 1;
    }
    uint64_t v15 = -(v14 >> 1);
    uint64_t v16 = v14 >> 1;
    std::string::size_type v17 = &v7[-8 * v16];
    int64_t v18 = v6 - v7;
    if (v6 != v7)
    {
      memmove(&v7[-8 * v16], v7, v6 - v7);
      unint64_t v7 = (char *)a1[1];
    }
    uint64_t v6 = &v17[v18];
    a1[1] = &v7[8 * v15];
    a1[2] = &v17[v18];
    goto LABEL_41;
  }
  BOOL v20 = (char *)a1[2];
  std::string v19 = (char *)a1[3];
  int v21 = (char *)*a1;
  uint64_t v22 = (char *)a1[1];
  unint64_t v23 = (v20 - v22) >> 3;
  uint64_t v24 = (uint64_t)&v19[-*a1];
  if (v23 < v24 >> 3)
  {
    int v25 = operator new(0xFF0uLL);
    std::string::size_type v26 = v25;
    if (v19 != v20)
    {
      *(void *)BOOL v20 = v25;
LABEL_42:
      a1[2] += 8;
      return;
    }
    if (v22 == v21)
    {
      if (v20 == v22) {
        unint64_t v51 = 1;
      }
      else {
        unint64_t v51 = (v19 - v22) >> 2;
      }
      uint64_t v52 = 2 * v51;
      std::vector<int>::size_type v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v51);
      uint64_t v22 = &v53[(v52 + 6) & 0xFFFFFFFFFFFFFFF8];
      unint64_t v55 = (uint64_t *)a1[1];
      unint64_t v56 = v22;
      uint64_t v57 = a1[2] - (void)v55;
      if (v57)
      {
        unint64_t v56 = &v22[v57 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v58 = 8 * (v57 >> 3);
        long long v59 = &v53[(v52 + 6) & 0xFFFFFFFFFFFFFFF8];
        do
        {
          uint64_t v60 = *v55++;
          *(void *)long long v59 = v60;
          v59 += 8;
          v58 -= 8;
        }
        while (v58);
      }
      uint64_t v61 = (char *)*a1;
      *a1 = v53;
      a1[1] = v22;
      a1[2] = v56;
      a1[3] = &v53[8 * v54];
      if (v61)
      {
        operator delete(v61);
        uint64_t v22 = (char *)a1[1];
      }
    }
    *((void *)v22 - 1) = v26;
    unint64_t v7 = (char *)a1[1];
    uint64_t v6 = (char *)a1[2];
    a1[1] = v7 - 8;
    uint64_t v8 = *((void *)v7 - 1);
    a1[1] = v7;
    if (v6 != (char *)a1[3])
    {
LABEL_41:
      *(void *)uint64_t v6 = v8;
      goto LABEL_42;
    }
    uint64_t v10 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1) {
        unint64_t v85 = 1;
      }
      else {
        unint64_t v85 = (uint64_t)&v6[-*a1] >> 2;
      }
      uint64_t v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v85);
      int8x8_t v42 = &v41[8 * (v85 >> 2)];
      char v44 = &v41[8 * v86];
      int v87 = (uint64_t *)a1[1];
      uint64_t v6 = v42;
      uint64_t v88 = a1[2] - (void)v87;
      if (v88)
      {
        uint64_t v6 = &v42[v88 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v89 = 8 * (v88 >> 3);
        BOOL v90 = &v41[8 * (v85 >> 2)];
        do
        {
          uint64_t v91 = *v87++;
          *(void *)BOOL v90 = v91;
          v90 += 8;
          v89 -= 8;
        }
        while (v89);
      }
LABEL_29:
      char v50 = (char *)*a1;
      *a1 = v41;
      a1[1] = v42;
      a1[2] = v6;
      a1[3] = v44;
      if (v50)
      {
        operator delete(v50);
        uint64_t v6 = (char *)a1[2];
      }
      goto LABEL_41;
    }
    goto LABEL_5;
  }
  uint64_t v27 = v24 >> 2;
  if (v19 == v21) {
    unint64_t v28 = 1;
  }
  else {
    unint64_t v28 = v27;
  }
  uint64_t v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v28);
  uint64_t v31 = v30;
  uint64_t v32 = &v29[8 * v23];
  *(void *)&long long v33 = v29;
  *((void *)&v33 + 1) = v32;
  long long v95 = v33;
  int v34 = operator new(0xFF0uLL);
  *(void *)&long long v35 = v32;
  *((void *)&v35 + 1) = &v29[8 * v31];
  if (v23 == v31)
  {
    uint64_t v36 = 8 * v23;
    *(void *)&long long v37 = v95;
    if (v20 - v22 >= 1)
    {
      uint64_t v38 = v36 >> 3;
      if (v38 >= -1) {
        unint64_t v39 = v38 + 1;
      }
      else {
        unint64_t v39 = v38 + 2;
      }
      v32 -= 8 * (v39 >> 1);
      *(void *)&long long v35 = v32;
      *((void *)&v37 + 1) = v32;
      goto LABEL_50;
    }
    uint64_t v62 = v36 >> 2;
    if (v20 == v22) {
      unint64_t v63 = 1;
    }
    else {
      unint64_t v63 = v62;
    }
    unint64_t v64 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v63);
    uint64_t v32 = &v64[8 * (v63 >> 2)];
    *(void *)&long long v37 = v64;
    *((void *)&v37 + 1) = v32;
    *(void *)&long long v35 = v32;
    *((void *)&v35 + 1) = &v64[8 * v65];
    if (!v29) {
      goto LABEL_50;
    }
    long long v92 = v35;
    long long v95 = v37;
    operator delete(v29);
    long long v35 = v92;
  }
  long long v37 = v95;
LABEL_50:
  *(void *)uint64_t v32 = v34;
  *(void *)&long long v35 = v35 + 8;
  for (uint64_t i = a1[2]; i != a1[1]; i -= 8)
  {
    int v67 = (void *)*((void *)&v37 + 1);
    if (*((void *)&v37 + 1) == (void)v37)
    {
      int v69 = (unsigned char *)v35;
      if ((unint64_t)v35 >= *((void *)&v35 + 1))
      {
        if (*((void *)&v35 + 1) == *((void *)&v37 + 1)) {
          unint64_t v74 = 1;
        }
        else {
          unint64_t v74 = (uint64_t)(*((void *)&v35 + 1) - *((void *)&v37 + 1)) >> 2;
        }
        int v75 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v74);
        int v68 = &v75[(2 * v74 + 6) & 0xFFFFFFFFFFFFFFF8];
        unsigned int v77 = v68;
        uint64_t v78 = v69 - (unsigned char *)v67;
        if (v69 != (unsigned char *)v67)
        {
          unsigned int v77 = &v68[v78 & 0xFFFFFFFFFFFFFFF8];
          uint64_t v79 = 8 * (v78 >> 3);
          uint64_t v80 = v68;
          std::vector<std::string>::pointer v81 = v67;
          do
          {
            uint64_t v82 = *v81++;
            *(void *)uint64_t v80 = v82;
            v80 += 8;
            v79 -= 8;
          }
          while (v79);
        }
        *(void *)&long long v37 = v75;
        *((void *)&v37 + 1) = v68;
        *(void *)&long long v35 = v77;
        *((void *)&v35 + 1) = &v75[8 * v76];
        if (v67)
        {
          long long v93 = v35;
          long long v97 = v37;
          operator delete(v67);
          long long v35 = v93;
          long long v37 = v97;
        }
      }
      else
      {
        uint64_t v70 = (uint64_t)(*((void *)&v35 + 1) - v35) >> 3;
        if (v70 >= -1) {
          uint64_t v71 = v70 + 1;
        }
        else {
          uint64_t v71 = v70 + 2;
        }
        uint64_t v72 = v71 >> 1;
        uint64_t v73 = v35 + 8 * (v71 >> 1);
        int v68 = (char *)(v73 - (v35 - *((void *)&v37 + 1)));
        if ((void)v35 == *((void *)&v37 + 1))
        {
          int v69 = (unsigned char *)*((void *)&v37 + 1);
        }
        else
        {
          uint64_t v94 = *((void *)&v35 + 1);
          uint64_t v96 = v37;
          memmove((void *)(v73 - (v35 - *((void *)&v37 + 1))), *((const void **)&v37 + 1), v35 - *((void *)&v37 + 1));
          *((void *)&v35 + 1) = v94;
          *(void *)&long long v37 = v96;
        }
        *((void *)&v37 + 1) = v68;
        *(void *)&long long v35 = &v69[8 * v72];
      }
    }
    else
    {
      int v68 = (char *)*((void *)&v37 + 1);
    }
    uint64_t v83 = *(void *)(i - 8);
    *((void *)v68 - 1) = v83;
    *((void *)&v37 + 1) -= 8;
  }
  uint64_t v84 = (char *)*a1;
  *(_OWORD *)a1 = v37;
  *((_OWORD *)a1 + 1) = v35;
  if (v84)
  {
    operator delete(v84);
  }
}

void sub_19227B8DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, long long a11)
{
  operator delete(v11);
  if ((void)a11) {
    operator delete((void *)a11);
  }
  _Unwind_Resume(a1);
}

void Espresso::MILTranslator::LayerTranslator::ReductionLayerNameStack::PopNextLayerToEspressoNet<Espresso::reduce_params_t>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)&long long v20 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)(*(void *)(a1 + 8) + 40);
  unint64_t v7 = *(void *)(a1 + 56) + *(void *)(a1 + 48) - 1;
  uint64_t v8 = *(void *)(*(void *)(a1 + 24) + 8 * (v7 / 0xAA));
  uint64_t v9 = (void **)(a1 + 112);
  if (*(char *)(a1 + 135) < 0)
  {
    std::string::__init_copy_ctor_external(&v19, *(const std::string::value_type **)(a1 + 112), *(void *)(a1 + 120));
  }
  else
  {
    *(_OWORD *)&v19.__r_.__value_.__l.__data_ = *(_OWORD *)v9;
    v19.__r_.__value_.__r.__words[2] = *(void *)(a1 + 128);
  }
  memset(&v13, 0, sizeof(v13));
  v13.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
  v13.__r_.__value_.__l.__size_ = v13.__r_.__value_.__r.__words[0];
  v13.__r_.__value_.__r.__words[2] = v13.__r_.__value_.__r.__words[0] + 24;
  v13.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v13.__r_.__value_.__r.__words[2], (long long *)&v19, &v20, (std::string *)v13.__r_.__value_.__l.__data_);
  Espresso::MILTranslator::LayerTranslator::ReductionLayerNameStack::GetNextOutputName(&__p, (void *)a1);
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  p_data = 0;
  uint64_t v16 = (void ***)&v10;
  char v17 = 0;
  uint64_t v10 = (std::string *)operator new(0x18uLL);
  uint64_t v11 = v10;
  p_data = (void **)&v10[1].__r_.__value_.__l.__data_;
  uint64_t v11 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&p_data, (long long *)&__p, (long long *)&v19, v10);
  Espresso::MILTranslator::TypedEspressoBuilder::AddLayer<Espresso::reduce_params_t>(&v14, v6, a2, v8 + 24 * (v7 % 0xAA), a3, (uint64_t)&v13, (uint64_t *)&v10, *(void *)a1);
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
  uint64_t v16 = (void ***)&v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v16);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v10 = &v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v10);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
  Espresso::MILTranslator::LayerTranslator::ReductionLayerNameStack::GetNextOutputName(&v13, (void *)a1);
  if (*(char *)(a1 + 135) < 0) {
    operator delete(*v9);
  }
  *(std::string *)uint64_t v9 = v13;
  std::deque<std::string>::pop_back((void *)(a1 + 64));
  std::deque<std::string>::pop_back((void *)(a1 + 16));
}

void sub_19227BB3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  a10 = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  if (a31 < 0) {
    operator delete(a26);
  }
  _Unwind_Resume(a1);
}

void Espresso::MILTranslator::LayerTranslator::ReductionLayerNameStack::GetNextOutputName(std::string *this, void *a2)
{
  unint64_t v2 = a2[13] + a2[12] - 1;
  unint64_t v3 = *(void *)(a2[9] + 8 * (v2 / 0xAA)) + 24 * (v2 % 0xAA);
  if (*(char *)(v3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)v3, *(void *)(v3 + 8));
  }
  else
  {
    long long v4 = *(_OWORD *)v3;
    this->__r_.__value_.__r.__words[2] = *(void *)(v3 + 16);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
}

void std::deque<std::string>::pop_back(void *a1)
{
  uint64_t v2 = a1[5] - 1;
  unint64_t v3 = v2 + a1[4];
  uint64_t v4 = a1[1];
  unint64_t v5 = *(void *)(v4 + 8 * (v3 / 0xAA)) + 24 * (v3 % 0xAA);
  if (*(char *)(v5 + 23) < 0)
  {
    operator delete(*(void **)v5);
    uint64_t v2 = a1[5] - 1;
    uint64_t v4 = a1[1];
    unint64_t v3 = v2 + a1[4];
  }
  uint64_t v6 = a1[2];
  a1[5] = v2;
  if (v6 == v4) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = 170 * ((v6 - v4) >> 3) - 1;
  }
  if (v7 - v3 >= 0x154)
  {
    operator delete(*(void **)(v6 - 8));
    a1[2] -= 8;
  }
}

void Espresso::MILTranslator::TypedEspressoBuilder::AddLayer<Espresso::reduce_params_t>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t a8)
{
  if (*(void *)(a6 + 8) == *(void *)a6) {
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v15 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>((void *)(a2 + 200), *(unsigned __int8 **)a6);
  if (!v15) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  int v20 = *((_DWORD *)v15 + 10);
  std::vector<Espresso::compute_path>::vector(__p, 0xAAAAAAAAAAAAAAABLL * ((a7[1] - *a7) >> 3), &v20);
  uint64_t v17 = *a7;
  uint64_t v16 = a7[1];
  if (*a7 != v16)
  {
    do
    {
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a2 + 240, v17, v17);
      v17 += 24;
    }
    while (v17 != v16);
  }
  Espresso::MILTranslator::TypedEspressoBuilder::PropagateOutputTypes(a2, a7, (uint64_t *)__p);
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)a8 + 24))(&__str, a8);
  std::string::operator=((std::string *)(a2 + 56), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  memset(&__str, 0, sizeof(__str));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&__str, *(void *)a6, *(void *)(a6 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a6 + 8) - *(void *)a6) >> 3));
  memset(v21, 0, sizeof(v21));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v21, *a7, a7[1], 0xAAAAAAAAAAAAAAABLL * ((a7[1] - *a7) >> 3));
  Espresso::sequential_builder::add<Espresso::reduce_params_t>(a1, (uint64_t *)a2, a3, a4, a5, (uint64_t)__str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_, v21);
  p_str = (std::string *)v21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_str);
  p_str = &__str;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_str);
  if (*(char *)(a2 + 79) < 0)
  {
    **(unsigned char **)(a2 + 56) = 0;
    *(void *)(a2 + 64) = 0;
  }
  else
  {
    *(unsigned char *)(a2 + 56) = 0;
    *(unsigned char *)(a2 + 79) = 0;
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_19227BEC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void **a23)
{
  a23 = &a17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a23);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::sequential_builder::add<Espresso::reduce_params_t>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  std::string v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v19, a6, a7, 0xAAAAAAAAAAAAAAABLL * ((a7 - a6) >> 3));
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v16, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * ((a8[1] - *a8) >> 3));
  uint64_t v14 = a2[12];
  LODWORD(v23[0]) = (***(uint64_t (****)(void))(a2[14] + 8))(*(void *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v14, (uint64_t)(a2 + 14), a3, a5, (int *)v23);
  uint64_t v15 = (std::__shared_weak_count *)a1[1];
  v24[0] = *a1;
  v24[1] = v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(v23, 0, sizeof(v23));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v23, (uint64_t)v19, v20, 0xAAAAAAAAAAAAAAABLL * ((v20 - (uint64_t)v19) >> 3));
  memset(v22, 0, sizeof(v22));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v22, v16, v17, 0xAAAAAAAAAAAAAAABLL * ((v17 - v16) >> 3));
  Espresso::sequential_builder::add_kernel_dbg((uint64_t)a2, v24, a3, a4, (uint64_t)(a2 + 7), v23, v22);
  int v25 = v22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
  int v25 = v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
  if (*a2) {
    Espresso::sequential_builder::add_shape_from_kernel(a2, *a1, &v19, &v16);
  }
  v23[0] = (std::string *)&v16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v23);
  v23[0] = (std::string *)&v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v23);
}

void sub_19227C108(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v16 = *(std::__shared_weak_count **)(v13 + 8);
  if (v16) {
    nitro::nitro_function::nitro_function(v16);
  }
  *(void *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(void *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

void nitro::ndarray<unsigned char>::operator-<half>(void *a1, void *a2)
{
  unint64_t v5 = (char *)a1[2];
  uint64_t v4 = (char *)a1[3];
  size_t v6 = v4 - v5;
  unint64_t v7 = (v4 - v5) >> 3;
  uint64_t v8 = (char *)a2[2];
  uint64_t v9 = (char *)a2[3];
  uint64_t v10 = (v9 - v8) >> 3;
  if (v7 != v10) {
    goto LABEL_11;
  }
  if (v4 != v5)
  {
    uint64_t v11 = v7 <= 1 ? 1 : (v4 - v5) >> 3;
    if (*(void *)v5 != *(void *)v8) {
      goto LABEL_11;
    }
    uint64_t v12 = 1;
    do
    {
      unint64_t v13 = v12;
      if (v11 == v12) {
        break;
      }
      uint64_t v14 = *(void *)&v5[8 * v12];
      uint64_t v15 = *(void *)&v8[8 * v12++];
    }
    while (v14 == v15);
    if (v13 < v7)
    {
LABEL_11:
      uint64_t v38 = 0;
      unint64_t v39 = 0;
      unint64_t v40 = 0;
      if (v4 != v5)
      {
        if ((v6 & 0x8000000000000000) != 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v38 = (char *)operator new(v4 - v5);
        unint64_t v40 = &v38[8 * v7];
        memcpy(v38, v5, v6);
        unint64_t v39 = v40;
      }
      long long v35 = 0;
      uint64_t v36 = 0;
      long long v37 = 0;
      uint64_t v17 = (unsigned char *)a1[5];
      uint64_t v16 = (unsigned char *)a1[6];
      int64_t v18 = v16 - v17;
      if (v16 != v17)
      {
        if (v18 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        std::string v19 = (char *)operator new(v16 - v17);
        uint64_t v20 = &v19[8 * (v18 >> 3)];
        long long v35 = v19;
        long long v37 = v20;
        memcpy(v19, v17, v18);
        uint64_t v36 = v20;
      }
      uint64_t v32 = 0;
      long long v33 = 0;
      int v34 = 0;
      if (v9 != v8)
      {
        if (v9 - v8 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v21 = (char *)operator new(v9 - v8);
        uint64_t v22 = &v21[8 * v10];
        uint64_t v32 = v21;
        int v34 = v22;
        memcpy(v21, v8, v9 - v8);
        long long v33 = v22;
      }
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      uint64_t v31 = 0;
      uint64_t v24 = (unsigned char *)a2[5];
      unint64_t v23 = (unsigned char *)a2[6];
      int64_t v25 = v23 - v24;
      if (v23 != v24)
      {
        if (v25 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        std::string::size_type v26 = (char *)operator new(v23 - v24);
        uint64_t v27 = &v26[8 * (v25 >> 3)];
        uint64_t v29 = v26;
        uint64_t v31 = v27;
        memcpy(v26, v24, v25);
        uint64_t v30 = v27;
      }
      nitro::ndarray_impl::compute_broadcast((const void **)&v38, (const void **)&v35, (uint64_t)&v32, (uint64_t)&v29);
      nitro::ndarray<unsigned char>::ndarray(&v28, a1, (uint64_t)&v38, (uint64_t)&v35, 0);
      nitro::ndarray<unsigned char>::copy(&v28);
    }
  }
  nitro::ndarray<unsigned char>::copy(a1);
}

void sub_19227C4F8(_Unwind_Exception *a1)
{
  nitro::ndarray<float>::~ndarray(v1);
  _Unwind_Resume(a1);
}

void sub_19227C50C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  nitro::ndarray<float>::~ndarray(&a9);
  nitro::ndarray<float>::~ndarray(v25);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
    uint64_t v28 = a21;
    if (!a21)
    {
LABEL_3:
      uint64_t v29 = a24;
      if (!a24) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v28 = a21;
    if (!a21) {
      goto LABEL_3;
    }
  }
  a22 = (uint64_t)v28;
  operator delete(v28);
  uint64_t v29 = a24;
  if (!a24)
  {
LABEL_4:
    uint64_t v30 = *(void **)(v26 - 112);
    if (!v30) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_9:
  a25 = (uint64_t)v29;
  operator delete(v29);
  uint64_t v30 = *(void **)(v26 - 112);
  if (!v30) {
LABEL_6:
  }
    _Unwind_Resume(a1);
LABEL_5:
  *(void *)(v26 - 104) = v30;
  operator delete(v30);
  goto LABEL_6;
}

void sub_19227C5A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a21) {
    JUMPOUT(0x19227C584);
  }
  JUMPOUT(0x19227C554);
}

void sub_19227C5B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a24) {
    JUMPOUT(0x19227C594);
  }
  JUMPOUT(0x19227C55CLL);
}

void sub_19227C5C8()
{
  if (!*(void *)(v0 - 112)) {
    JUMPOUT(0x19227C56CLL);
  }
  JUMPOUT(0x19227C564);
}

void nitro::ndarray<unsigned char>::pairwise_element_visitor<half,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator-=<half>(nitro::ndarray<half> const&)::{lambda(unsigned char &,half const&)#1}>(nitro::ndarray<half> const&,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator-=<half>(nitro::ndarray<half> const&)::{lambda(unsigned char &,half const&)#1})::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  unint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    size_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    uint64_t v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      uint64_t v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        uint64_t v10 = __p;
      }
      else {
        uint64_t v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  void nitro::ndarray<unsigned char>::pairwise_element_visitor<half,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator-=<half>(nitro::ndarray<half> const&)::{lambda(unsigned char &,half const&)#1}>(nitro::ndarray<half> const&,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator-=<half>(nitro::ndarray<half> const&)::{lambda(unsigned char &,half const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_19227C864(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void Espresso::generic_non_maximum_suppression_kernel::top_shapes_for_bottom_shapes(uint64_t a1@<X0>, const Espresso::layer_shape **a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v154 = *MEMORY[0x1E4F143B8];
  unint64_t v5 = *a2;
  if ((unint64_t)(a2[1] - v5) <= 0x7F) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("non_maximum_suppression_kernel: must have at least 2 inputs.");
  }
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v142, v5, 0);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v140, (const Espresso::layer_shape *)((char *)*a2 + 64), 0);
  int v8 = *(unsigned __int8 *)(a1 + 307);
  if (*(unsigned char *)(a1 + 307))
  {
    if (v143 != 4 || v141 != 4) {
      Espresso::throw_exception_selector<Espresso::invalid_state_error>("non_maximum_suppression_kernel  with ANE layout: first two inputs must have rank 4.");
    }
    uint64_t v9 = 1;
    uint64_t v10 = 3;
  }
  else
  {
    if (v143 != 3 || v141 != 3) {
      Espresso::throw_exception_selector<Espresso::invalid_state_error>("non_maximum_suppression_kernel: first two inputs must have rank 3.");
    }
    uint64_t v9 = 2;
    uint64_t v10 = 1;
  }
  uint64_t v123 = a2;
  uint64_t v11 = v142[0];
  if (v142[0] != v140[0] || (int v124 = v140[v10], v142[v10] != v124) || v142[v9] != 4) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("non_maximum_suppression_kernel: invalid input shape.");
  }
  unint64_t v12 = *(void *)(a1 + 320) - *(void *)(a1 + 312);
  unsigned int v14 = v140[1];
  int v13 = v140[2];
  unsigned int v15 = *(_DWORD *)(a1 + 280);
  if (v124 >= 10) {
    int v16 = 10;
  }
  else {
    int v16 = v140[v10];
  }
  if ((a2[1] - *a2) >> 6 > (unint64_t)((uint64_t)((v12 << 30) + 0x400000000) >> 32)) {
    unsigned int v15 = v16;
  }
  uint64_t v137 = 0;
  int v138 = 0;
  if (v15 <= 1) {
    int v17 = 1;
  }
  else {
    int v17 = v15;
  }
  uint64_t v139 = 0;
  int v134 = 0;
  int v135 = 0;
  uint64_t v136 = 0;
  uint64_t v131 = 0;
  uint64_t v132 = 0;
  uint64_t v133 = 0;
  std::string __p = 0;
  uint64_t v129 = 0;
  uint64_t v130 = 0;
  if (v8)
  {
    *(void *)((char *)&__src + 4) = 0x100000004;
    LODWORD(__src) = v142[0];
    HIDWORD(__src) = v17;
    std::vector<int>::__assign_with_size[abi:ne180100]<int const*,int const*>((char *)&v137, (char *)&__src, (uint64_t)&v150, 4uLL);
    *(void *)&__vImage_Buffer src = __PAIR64__(v14, v11);
    DWORD2(__src) = 1;
    HIDWORD(__src) = v17;
    std::vector<int>::__assign_with_size[abi:ne180100]<int const*,int const*>((char *)&v134, (char *)&__src, (uint64_t)&v150, 4uLL);
    int64_t v18 = v123;
    *(void *)((char *)&__src + 4) = 0x100000001;
    LODWORD(__src) = v11;
    HIDWORD(__src) = v17;
    std::vector<int>::__assign_with_size[abi:ne180100]<int const*,int const*>((char *)&v131, (char *)&__src, (uint64_t)&v150, 4uLL);
  }
  else
  {
    *(void *)&__vImage_Buffer src = __PAIR64__(v17, v142[0]);
    DWORD2(__src) = 4;
    std::vector<int>::__assign_with_size[abi:ne180100]<int const*,int const*>((char *)&v137, (char *)&__src, (uint64_t)&__src + 12, 3uLL);
    *(void *)&__vImage_Buffer src = __PAIR64__(v17, v11);
    DWORD2(__src) = v13;
    std::vector<int>::__assign_with_size[abi:ne180100]<int const*,int const*>((char *)&v134, (char *)&__src, (uint64_t)&__src + 12, 3uLL);
    LODWORD(__src) = v11;
    std::vector<int>::__assign_with_size[abi:ne180100]<int const*,int const*>((char *)&__p, (char *)&__src, (uint64_t)&__src + 4, 1uLL);
    int64_t v18 = v123;
    *(void *)&__vImage_Buffer src = __PAIR64__(v17, v11);
    std::vector<int>::__assign_with_size[abi:ne180100]<int const*,int const*>((char *)&v131, (char *)&__src, (uint64_t)&__src + 8, 2uLL);
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v125 = 0;
  uint64_t v126 = 0;
  uint64_t v127 = 0;
  std::string v19 = (int *)v137;
  uint64_t v20 = v138 - (unsigned char *)v137;
  if (v138 != v137)
  {
    uint64_t v21 = v20 >> 2;
    if ((unint64_t)(v20 >> 2) <= 1) {
      uint64_t v21 = 1;
    }
    uint64_t v22 = &v125;
    do
    {
      int v23 = *v19++;
      *(_DWORD *)uint64_t v22 = v23;
      uint64_t v22 = (uint64_t *)((char *)v22 + 4);
      --v21;
    }
    while (v21);
  }
  HIDWORD(v127) = (unint64_t)v20 >> 2;
  Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)&v125, 0, (uint64_t)&__src);
  unint64_t v24 = a3[2];
  unint64_t v25 = a3[1];
  if (v25 >= v24)
  {
    uint64_t v28 = (uint64_t)(v25 - *a3) >> 6;
    unint64_t v29 = v28 + 1;
    if ((unint64_t)(v28 + 1) >> 58) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v30 = v24 - *a3;
    if (v30 >> 5 > v29) {
      unint64_t v29 = v30 >> 5;
    }
    if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFC0) {
      unint64_t v31 = 0x3FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v31 = v29;
    }
    uint64_t v148 = a3 + 2;
    uint64_t v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::layer_shape>>(v31);
    long long v33 = &v32[64 * v28];
    uint64_t v144 = v32;
    uint64_t v145 = v33;
    int v147 = &v32[64 * v34];
    long long v35 = v150;
    uint64_t v36 = v151;
    *(_OWORD *)long long v33 = __src;
    *((_OWORD *)v33 + 1) = v35;
    *((void *)v33 + 4) = v36;
    *((void *)v33 + 5) = 0;
    *((void *)v33 + 6) = 0;
    *((void *)v33 + 7) = 0;
    *(_OWORD *)(v33 + 40) = v152;
    *((void *)v33 + 7) = v153;
    long long v152 = 0uLL;
    uint64_t v153 = 0;
    int v146 = v33 + 64;
    std::vector<Espresso::layer_shape>::__swap_out_circular_buffer(a3, &v144);
    uint64_t v37 = a3[1];
    std::__split_buffer<Espresso::layer_shape>::~__split_buffer((uint64_t)&v144);
    uint64_t v38 = (void *)v152;
    a3[1] = v37;
    if (v38)
    {
      *((void *)&v152 + 1) = v38;
      operator delete(v38);
    }
  }
  else
  {
    long long v26 = v150;
    uint64_t v27 = v151;
    *(_OWORD *)unint64_t v25 = __src;
    *(_OWORD *)(v25 + 16) = v26;
    *(void *)(v25 + 32) = v27;
    *(void *)(v25 + 40) = 0;
    *(void *)(v25 + 48) = 0;
    *(void *)(v25 + 56) = 0;
    *(_OWORD *)(v25 + 40) = v152;
    *(void *)(v25 + 56) = v153;
    long long v152 = 0uLL;
    uint64_t v153 = 0;
    a3[1] = v25 + 64;
  }
  if (!*(unsigned char *)(a1 + 304))
  {
    uint64_t v125 = 0;
    uint64_t v126 = 0;
    uint64_t v127 = 0;
    unint64_t v39 = (int *)v134;
    uint64_t v40 = v135 - (unsigned char *)v134;
    if (v135 != v134)
    {
      uint64_t v41 = v40 >> 2;
      if ((unint64_t)(v40 >> 2) <= 1) {
        uint64_t v41 = 1;
      }
      int8x8_t v42 = &v125;
      do
      {
        int v43 = *v39++;
        *(_DWORD *)int8x8_t v42 = v43;
        int8x8_t v42 = (uint64_t *)((char *)v42 + 4);
        --v41;
      }
      while (v41);
    }
    HIDWORD(v127) = (unint64_t)v40 >> 2;
    Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)&v125, 0, (uint64_t)&__src);
    unint64_t v44 = a3[1];
    unint64_t v45 = a3[2];
    if (v44 >= v45)
    {
      uint64_t v48 = (uint64_t)(v44 - *a3) >> 6;
      unint64_t v49 = v48 + 1;
      if ((unint64_t)(v48 + 1) >> 58) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v50 = v45 - *a3;
      if (v50 >> 5 > v49) {
        unint64_t v49 = v50 >> 5;
      }
      if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFC0) {
        unint64_t v51 = 0x3FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v51 = v49;
      }
      uint64_t v148 = a3 + 2;
      uint64_t v52 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::layer_shape>>(v51);
      std::vector<int>::size_type v53 = &v52[64 * v48];
      uint64_t v144 = v52;
      uint64_t v145 = v53;
      int v147 = &v52[64 * v54];
      long long v55 = v150;
      uint64_t v56 = v151;
      *(_OWORD *)std::vector<int>::size_type v53 = __src;
      *((_OWORD *)v53 + 1) = v55;
      *((void *)v53 + 4) = v56;
      *((void *)v53 + 5) = 0;
      *((void *)v53 + 6) = 0;
      *((void *)v53 + 7) = 0;
      *(_OWORD *)(v53 + 40) = v152;
      *((void *)v53 + 7) = v153;
      long long v152 = 0uLL;
      uint64_t v153 = 0;
      int v146 = v53 + 64;
      std::vector<Espresso::layer_shape>::__swap_out_circular_buffer(a3, &v144);
      uint64_t v57 = a3[1];
      std::__split_buffer<Espresso::layer_shape>::~__split_buffer((uint64_t)&v144);
      uint64_t v58 = (void *)v152;
      a3[1] = v57;
      if (v58)
      {
        *((void *)&v152 + 1) = v58;
        operator delete(v58);
      }
    }
    else
    {
      long long v46 = v150;
      uint64_t v47 = v151;
      *(_OWORD *)unint64_t v44 = __src;
      *(_OWORD *)(v44 + 16) = v46;
      *(void *)(v44 + 32) = v47;
      *(void *)(v44 + 40) = 0;
      *(void *)(v44 + 48) = 0;
      *(void *)(v44 + 56) = 0;
      *(_OWORD *)(v44 + 40) = v152;
      *(void *)(v44 + 56) = v153;
      long long v152 = 0uLL;
      uint64_t v153 = 0;
      a3[1] = v44 + 64;
    }
  }
  if (!*(unsigned char *)(a1 + 306))
  {
    uint64_t v125 = 0;
    uint64_t v126 = 0;
    uint64_t v127 = 0;
    long long v59 = (int *)v131;
    uint64_t v60 = v132 - (unsigned char *)v131;
    if (v132 != v131)
    {
      uint64_t v61 = v60 >> 2;
      if ((unint64_t)(v60 >> 2) <= 1) {
        uint64_t v61 = 1;
      }
      uint64_t v62 = &v125;
      do
      {
        int v63 = *v59++;
        *(_DWORD *)uint64_t v62 = v63;
        uint64_t v62 = (uint64_t *)((char *)v62 + 4);
        --v61;
      }
      while (v61);
    }
    HIDWORD(v127) = (unint64_t)v60 >> 2;
    Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)&v125, 0, (uint64_t)&__src);
    unint64_t v64 = a3[1];
    unint64_t v65 = a3[2];
    if (v64 >= v65)
    {
      uint64_t v68 = (uint64_t)(v64 - *a3) >> 6;
      unint64_t v69 = v68 + 1;
      if ((unint64_t)(v68 + 1) >> 58) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v70 = v65 - *a3;
      if (v70 >> 5 > v69) {
        unint64_t v69 = v70 >> 5;
      }
      if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFC0) {
        unint64_t v71 = 0x3FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v71 = v69;
      }
      uint64_t v148 = a3 + 2;
      uint64_t v72 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::layer_shape>>(v71);
      uint64_t v73 = &v72[64 * v68];
      uint64_t v144 = v72;
      uint64_t v145 = v73;
      int v147 = &v72[64 * v74];
      long long v75 = v150;
      uint64_t v76 = v151;
      *(_OWORD *)uint64_t v73 = __src;
      *((_OWORD *)v73 + 1) = v75;
      *((void *)v73 + 4) = v76;
      *((void *)v73 + 5) = 0;
      *((void *)v73 + 6) = 0;
      *((void *)v73 + 7) = 0;
      *(_OWORD *)(v73 + 40) = v152;
      *((void *)v73 + 7) = v153;
      long long v152 = 0uLL;
      uint64_t v153 = 0;
      int v146 = v73 + 64;
      std::vector<Espresso::layer_shape>::__swap_out_circular_buffer(a3, &v144);
      uint64_t v77 = a3[1];
      std::__split_buffer<Espresso::layer_shape>::~__split_buffer((uint64_t)&v144);
      uint64_t v78 = (void *)v152;
      a3[1] = v77;
      if (v78)
      {
        *((void *)&v152 + 1) = v78;
        operator delete(v78);
      }
    }
    else
    {
      long long v66 = v150;
      uint64_t v67 = v151;
      *(_OWORD *)unint64_t v64 = __src;
      *(_OWORD *)(v64 + 16) = v66;
      *(void *)(v64 + 32) = v67;
      *(void *)(v64 + 40) = 0;
      *(void *)(v64 + 48) = 0;
      *(void *)(v64 + 56) = 0;
      *(_OWORD *)(v64 + 40) = v152;
      *(void *)(v64 + 56) = v153;
      long long v152 = 0uLL;
      uint64_t v153 = 0;
      a3[1] = v64 + 64;
    }
  }
  if (!*(unsigned char *)(a1 + 305))
  {
    if (*(unsigned char *)(a1 + 307))
    {
      int v121 = "non_maximum_suppression_kernel: no_count must be true if ane_layout is true.";
LABEL_130:
      Espresso::throw_exception_selector<Espresso::invalid_state_error>(v121);
    }
    uint64_t v125 = 0;
    uint64_t v126 = 0;
    uint64_t v127 = 0;
    uint64_t v79 = (int *)__p;
    uint64_t v80 = v129 - (unsigned char *)__p;
    if (v129 != __p)
    {
      uint64_t v81 = v80 >> 2;
      if ((unint64_t)(v80 >> 2) <= 1) {
        uint64_t v81 = 1;
      }
      uint64_t v82 = &v125;
      do
      {
        int v83 = *v79++;
        *(_DWORD *)uint64_t v82 = v83;
        uint64_t v82 = (uint64_t *)((char *)v82 + 4);
        --v81;
      }
      while (v81);
    }
    HIDWORD(v127) = (unint64_t)v80 >> 2;
    Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)&v125, 0, (uint64_t)&__src);
    unint64_t v84 = a3[1];
    unint64_t v85 = a3[2];
    if (v84 >= v85)
    {
      uint64_t v88 = (uint64_t)(v84 - *a3) >> 6;
      unint64_t v89 = v88 + 1;
      if ((unint64_t)(v88 + 1) >> 58) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v90 = v85 - *a3;
      if (v90 >> 5 > v89) {
        unint64_t v89 = v90 >> 5;
      }
      if ((unint64_t)v90 >= 0x7FFFFFFFFFFFFFC0) {
        unint64_t v91 = 0x3FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v91 = v89;
      }
      uint64_t v148 = a3 + 2;
      long long v92 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::layer_shape>>(v91);
      long long v93 = &v92[64 * v88];
      uint64_t v144 = v92;
      uint64_t v145 = v93;
      int v147 = &v92[64 * v94];
      long long v95 = v150;
      uint64_t v96 = v151;
      *(_OWORD *)long long v93 = __src;
      *((_OWORD *)v93 + 1) = v95;
      *((void *)v93 + 4) = v96;
      *((void *)v93 + 5) = 0;
      *((void *)v93 + 6) = 0;
      *((void *)v93 + 7) = 0;
      *(_OWORD *)(v93 + 40) = v152;
      *((void *)v93 + 7) = v153;
      long long v152 = 0uLL;
      uint64_t v153 = 0;
      int v146 = v93 + 64;
      std::vector<Espresso::layer_shape>::__swap_out_circular_buffer(a3, &v144);
      uint64_t v97 = a3[1];
      std::__split_buffer<Espresso::layer_shape>::~__split_buffer((uint64_t)&v144);
      char v98 = (void *)v152;
      a3[1] = v97;
      if (v98)
      {
        *((void *)&v152 + 1) = v98;
        operator delete(v98);
      }
    }
    else
    {
      long long v86 = v150;
      uint64_t v87 = v151;
      *(_OWORD *)unint64_t v84 = __src;
      *(_OWORD *)(v84 + 16) = v86;
      *(void *)(v84 + 32) = v87;
      *(void *)(v84 + 40) = 0;
      *(void *)(v84 + 48) = 0;
      *(void *)(v84 + 56) = 0;
      *(_OWORD *)(v84 + 40) = v152;
      *(void *)(v84 + 56) = v153;
      long long v152 = 0uLL;
      uint64_t v153 = 0;
      a3[1] = v84 + 64;
    }
  }
  if ((v18[1] - *v18) >> 6 < (unint64_t)((uint64_t)((v12 << 30) + 0x200000000) >> 32))
  {
    int v121 = "non_maximum_suppression_kernel: expected additional inputs from expected_gather_bottom_count.";
    goto LABEL_130;
  }
  if ((int)(v12 >> 2) >= 1)
  {
    unint64_t v99 = 0;
    uint64_t v100 = (v12 >> 2);
    uint64_t v101 = 128;
    uint64_t v122 = "Gather index out of bounds of rank.";
    while (1)
    {
      if (v99 + 2 >= (v18[1] - *v18) >> 6) {
        std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
      }
      Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v125, (const Espresso::layer_shape *)((char *)*v18 + v101), 0);
      uint64_t v102 = *(void *)(a1 + 312);
      if (v99 >= (*(void *)(a1 + 320) - v102) >> 2) {
        std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
      }
      uint64_t v103 = *(_DWORD *)(v102 + 4 * v99) + (HIDWORD(v127) & (*(int *)(v102 + 4 * v99) >> 31));
      if ((int)v103 < 1 || SHIDWORD(v127) <= (unint64_t)v103) {
        goto LABEL_119;
      }
      if (*((_DWORD *)&v125 + v103) != v124) {
        break;
      }
      if (v125 != v11)
      {
        uint64_t v120 = "Gather batch dimension expected to match NMS batch.";
LABEL_118:
        uint64_t v122 = v120;
LABEL_119:
        Espresso::throw_exception_selector<Espresso::invalid_state_error>(v122);
      }
      *((_DWORD *)&v125 + v103) = v17;
      Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)&v125, 0, (uint64_t)&__src);
      unint64_t v104 = a3[1];
      unint64_t v105 = a3[2];
      if (v104 >= v105)
      {
        uint64_t v108 = v11;
        uint64_t v109 = (uint64_t)(v104 - *a3) >> 6;
        unint64_t v110 = v109 + 1;
        if ((unint64_t)(v109 + 1) >> 58) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v111 = v105 - *a3;
        if (v111 >> 5 > v110) {
          unint64_t v110 = v111 >> 5;
        }
        if ((unint64_t)v111 >= 0x7FFFFFFFFFFFFFC0) {
          unint64_t v112 = 0x3FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v112 = v110;
        }
        uint64_t v148 = a3 + 2;
        uint64_t v113 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::layer_shape>>(v112);
        uint64_t v114 = &v113[64 * v109];
        uint64_t v144 = v113;
        uint64_t v145 = v114;
        int v147 = &v113[64 * v115];
        long long v116 = v150;
        uint64_t v117 = v151;
        *(_OWORD *)uint64_t v114 = __src;
        *((_OWORD *)v114 + 1) = v116;
        *((void *)v114 + 4) = v117;
        *((void *)v114 + 5) = 0;
        *((void *)v114 + 6) = 0;
        *((void *)v114 + 7) = 0;
        *(_OWORD *)(v114 + 40) = v152;
        *((void *)v114 + 7) = v153;
        long long v152 = 0uLL;
        uint64_t v153 = 0;
        int v146 = v114 + 64;
        std::vector<Espresso::layer_shape>::__swap_out_circular_buffer(a3, &v144);
        uint64_t v118 = a3[1];
        std::__split_buffer<Espresso::layer_shape>::~__split_buffer((uint64_t)&v144);
        unint64_t v119 = (void *)v152;
        a3[1] = v118;
        uint64_t v11 = v108;
        int64_t v18 = v123;
        if (v119)
        {
          *((void *)&v152 + 1) = v119;
          operator delete(v119);
        }
      }
      else
      {
        long long v106 = v150;
        uint64_t v107 = v151;
        *(_OWORD *)unint64_t v104 = __src;
        *(_OWORD *)(v104 + 16) = v106;
        *(void *)(v104 + 32) = v107;
        *(void *)(v104 + 40) = 0;
        *(void *)(v104 + 48) = 0;
        *(void *)(v104 + 56) = 0;
        *(_OWORD *)(v104 + 40) = v152;
        *(void *)(v104 + 56) = v153;
        long long v152 = 0uLL;
        uint64_t v153 = 0;
        a3[1] = v104 + 64;
      }
      ++v99;
      v101 += 64;
      if (v100 == v99) {
        goto LABEL_107;
      }
    }
    uint64_t v120 = "Gather index dimensions expected to match number of boxes.";
    goto LABEL_118;
  }
LABEL_107:
  if (__p)
  {
    uint64_t v129 = __p;
    operator delete(__p);
  }
  if (v131)
  {
    uint64_t v132 = v131;
    operator delete(v131);
  }
  if (v134)
  {
    int v135 = v134;
    operator delete(v134);
  }
  if (v137)
  {
    int v138 = v137;
    operator delete(v137);
  }
}

void sub_19227D37C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26)
{
  unint64_t v29 = *(void **)(v27 - 120);
  if (v29)
  {
    *(void *)(v27 - 112) = v29;
    operator delete(v29);
  }
  *(void *)(v27 - 160) = v26;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)(v27 - 160));
  if (__p) {
    operator delete(__p);
  }
  if (a19) {
    operator delete(a19);
  }
  if (a22) {
    operator delete(a22);
  }
  if (a25) {
    operator delete(a25);
  }
  _Unwind_Resume(a1);
}

char *std::vector<int>::__assign_with_size[abi:ne180100]<int const*,int const*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  unint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  uint64_t v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 2)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      void *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    uint64_t v10 = v8 >> 1;
    if (v8 >> 1 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v11 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    __n128 result = std::vector<unsigned int>::__vallocate[abi:ne180100](v7, v11);
    int v13 = (char *)v7[1];
    unint64_t v12 = (void **)(v7 + 1);
    uint64_t v9 = v13;
LABEL_15:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      int64_t v18 = v9;
      std::string v19 = __src;
      goto LABEL_17;
    }
    goto LABEL_18;
  }
  unint64_t v12 = (void **)(result + 8);
  unsigned int v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 2;
  if (v15 >= a4) {
    goto LABEL_15;
  }
  int v16 = &__src[4 * v15];
  if (v14 != v9)
  {
    __n128 result = (char *)memmove(*(void **)result, __src, v14 - v9);
    uint64_t v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    int64_t v18 = v9;
    std::string v19 = v16;
LABEL_17:
    __n128 result = (char *)memmove(v18, v19, v17);
  }
LABEL_18:
  *unint64_t v12 = &v9[v17];
  return result;
}

void Espresso::SerDes::layer_io<Espresso::generic_topk_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v16 = a4;
  int v11 = 5;
  __int16 v12 = 0;
  int v13 = -1;
  __int16 v14 = 256;
  char v15 = 1;
  Espresso::SerDes::params_io<Espresso::topk_params_t>(a2, (uint64_t)&v11, 0);
  Espresso::abstract_engine_factory::shared(&v9);
  uint64_t v5 = v9;
  std::string::basic_string[abi:ne180100]<0>(__p, "topk");
  int v6 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)&v11, &v6);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
}

void sub_19227D638(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::params_io<Espresso::topk_params_t>(uint64_t a1, uint64_t a2, int a3)
{
  if (!a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v7, "num_k");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v9, (_DWORD *)a2);
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v7, "nd_mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v9, (unsigned char *)(a2 + 4));
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v7, "single_axis_topk");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v9, (unsigned char *)(a2 + 5));
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v7, "axis");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v9, (_DWORD *)(a2 + 8));
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v7, "do_bottomk");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v9, (unsigned char *)(a2 + 12));
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v7, "return_indices");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v9, (unsigned char *)(a2 + 14));
    goto LABEL_68;
  }
  std::string::basic_string[abi:ne180100]<0>(v7, "num_k");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
  (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v9 + 160))(v9, __p, a2);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  if (*(unsigned char *)(a2 + 4))
  {
    std::string::basic_string[abi:ne180100]<0>(v7, "nd_mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
    (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v9 + 208))(v9, __p, a2 + 4);
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
  }
  if (*(unsigned char *)(a2 + 5))
  {
    std::string::basic_string[abi:ne180100]<0>(v7, "single_axis_topk");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
    (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v9 + 208))(v9, __p, a2 + 5);
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(v7, "axis");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
  (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v9 + 160))(v9, __p, a2 + 8);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  if (*(unsigned char *)(a2 + 12))
  {
    std::string::basic_string[abi:ne180100]<0>(v7, "do_bottomk");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
    (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v9 + 208))(v9, __p, a2 + 12);
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
  }
  int v6 = *(unsigned __int8 *)(a2 + 14);
  uint64_t v5 = a2 + 14;
  if (!v6)
  {
    std::string::basic_string[abi:ne180100]<0>(v7, "return_indices");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
    (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v9 + 208))(v9, __p, v5);
LABEL_68:
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
  }
}

void sub_19227DBA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_gather_nd_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v14 = a4;
  uint64_t v11 = 0;
  int v12 = 0;
  __int16 v13 = 257;
  Espresso::SerDes::params_io<Espresso::gather_nd_params_t>(a2, (uint64_t)&v11, 0);
  Espresso::abstract_engine_factory::shared(&v9);
  uint64_t v5 = v9;
  std::string::basic_string[abi:ne180100]<0>(__p, "gather_nd");
  int v6 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)&v11, &v6);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
}

void sub_19227DD0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::params_io<Espresso::gather_nd_params_t>(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v5, "mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v5, &v7);
    (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v7 + 160))(v7, __p, a2);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    if (v8) {
      nitro::nitro_function::nitro_function(v8);
    }
    if (v6 < 0) {
      operator delete(v5[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v5, "axis");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v5, &v7);
    (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v7 + 160))(v7, __p, a2 + 4);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    if (v8) {
      nitro::nitro_function::nitro_function(v8);
    }
    if (v6 < 0) {
      operator delete(v5[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v5, "batch_dims");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v5, &v7);
    (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v7 + 160))(v7, __p, a2 + 8);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    if (v8) {
      nitro::nitro_function::nitro_function(v8);
    }
    if (v6 < 0) {
      operator delete(v5[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v5, "validate_indices");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v5, &v7);
    (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v7 + 208))(v7, __p, a2 + 12);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    if (v8) {
      nitro::nitro_function::nitro_function(v8);
    }
    if (v6 < 0) {
      operator delete(v5[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v5, "allow_negative_indices");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v5, &v7);
    (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v7 + 208))(v7, __p, a2 + 13);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v5, "mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v5, &v7);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v7, (_DWORD *)a2);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    if (v8) {
      nitro::nitro_function::nitro_function(v8);
    }
    if (v6 < 0) {
      operator delete(v5[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v5, "axis");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v5, &v7);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v7, (_DWORD *)(a2 + 4));
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    if (v8) {
      nitro::nitro_function::nitro_function(v8);
    }
    if (v6 < 0) {
      operator delete(v5[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v5, "batch_dims");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v5, &v7);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v7, (_DWORD *)(a2 + 8));
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    if (v8) {
      nitro::nitro_function::nitro_function(v8);
    }
    if (v6 < 0) {
      operator delete(v5[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v5, "validate_indices");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v5, &v7);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v7, (unsigned char *)(a2 + 12));
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    if (v8) {
      nitro::nitro_function::nitro_function(v8);
    }
    if (v6 < 0) {
      operator delete(v5[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v5, "allow_negative_indices");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v5, &v7);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v7, (unsigned char *)(a2 + 13));
  }
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  if (v6 < 0) {
    operator delete(v5[0]);
  }
}

void sub_19227E178(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::params_io<Espresso::general_slice_params_t>(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v5, "begin_w");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v5, &v7);
    (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v7 + 160))(v7, __p, a2);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    if (v8) {
      nitro::nitro_function::nitro_function(v8);
    }
    if (v6 < 0) {
      operator delete(v5[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v5, "begin_h");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v5, &v7);
    (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v7 + 160))(v7, __p, a2 + 4);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    if (v8) {
      nitro::nitro_function::nitro_function(v8);
    }
    if (v6 < 0) {
      operator delete(v5[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v5, "begin_k");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v5, &v7);
    (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v7 + 160))(v7, __p, a2 + 8);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    if (v8) {
      nitro::nitro_function::nitro_function(v8);
    }
    if (v6 < 0) {
      operator delete(v5[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v5, "begin_n");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v5, &v7);
    (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v7 + 160))(v7, __p, a2 + 12);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    if (v8) {
      nitro::nitro_function::nitro_function(v8);
    }
    if (v6 < 0) {
      operator delete(v5[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v5, "begin_seq");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v5, &v7);
    (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v7 + 160))(v7, __p, a2 + 16);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    if (v8) {
      nitro::nitro_function::nitro_function(v8);
    }
    if (v6 < 0) {
      operator delete(v5[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v5, "begin_mask_w");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v5, &v7);
    (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v7 + 208))(v7, __p, a2 + 60);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    if (v8) {
      nitro::nitro_function::nitro_function(v8);
    }
    if (v6 < 0) {
      operator delete(v5[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v5, "begin_mask_h");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v5, &v7);
    (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v7 + 208))(v7, __p, a2 + 61);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    if (v8) {
      nitro::nitro_function::nitro_function(v8);
    }
    if (v6 < 0) {
      operator delete(v5[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v5, "begin_mask_k");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v5, &v7);
    (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v7 + 208))(v7, __p, a2 + 62);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    if (v8) {
      nitro::nitro_function::nitro_function(v8);
    }
    if (v6 < 0) {
      operator delete(v5[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v5, "begin_mask_n");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v5, &v7);
    (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v7 + 208))(v7, __p, a2 + 63);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    if (v8) {
      nitro::nitro_function::nitro_function(v8);
    }
    if (v6 < 0) {
      operator delete(v5[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v5, "begin_mask_seq");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v5, &v7);
    (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v7 + 208))(v7, __p, a2 + 64);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    if (v8) {
      nitro::nitro_function::nitro_function(v8);
    }
    if (v6 < 0) {
      operator delete(v5[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v5, "end_w");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v5, &v7);
    (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v7 + 160))(v7, __p, a2 + 20);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    if (v8) {
      nitro::nitro_function::nitro_function(v8);
    }
    if (v6 < 0) {
      operator delete(v5[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v5, "end_h");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v5, &v7);
    (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v7 + 160))(v7, __p, a2 + 24);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    if (v8) {
      nitro::nitro_function::nitro_function(v8);
    }
    if (v6 < 0) {
      operator delete(v5[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v5, "end_k");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v5, &v7);
    (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v7 + 160))(v7, __p, a2 + 28);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    if (v8) {
      nitro::nitro_function::nitro_function(v8);
    }
    if (v6 < 0) {
      operator delete(v5[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v5, "end_n");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v5, &v7);
    (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v7 + 160))(v7, __p, a2 + 32);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    if (v8) {
      nitro::nitro_function::nitro_function(v8);
    }
    if (v6 < 0) {
      operator delete(v5[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v5, "end_seq");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v5, &v7);
    (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v7 + 160))(v7, __p, a2 + 36);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    if (v8) {
      nitro::nitro_function::nitro_function(v8);
    }
    if (v6 < 0) {
      operator delete(v5[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v5, "end_mask_w");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v5, &v7);
    (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v7 + 208))(v7, __p, a2 + 65);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    if (v8) {
      nitro::nitro_function::nitro_function(v8);
    }
    if (v6 < 0) {
      operator delete(v5[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v5, "end_mask_h");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v5, &v7);
    (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v7 + 208))(v7, __p, a2 + 66);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    if (v8) {
      nitro::nitro_function::nitro_function(v8);
    }
    if (v6 < 0) {
      operator delete(v5[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v5, "end_mask_k");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v5, &v7);
    (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v7 + 208))(v7, __p, a2 + 67);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    if (v8) {
      nitro::nitro_function::nitro_function(v8);
    }
    if (v6 < 0) {
      operator delete(v5[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v5, "end_mask_n");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v5, &v7);
    (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v7 + 208))(v7, __p, a2 + 68);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    if (v8) {
      nitro::nitro_function::nitro_function(v8);
    }
    if (v6 < 0) {
      operator delete(v5[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v5, "end_mask_seq");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v5, &v7);
    (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v7 + 208))(v7, __p, a2 + 69);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    if (v8) {
      nitro::nitro_function::nitro_function(v8);
    }
    if (v6 < 0) {
      operator delete(v5[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v5, "stride_w");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v5, &v7);
    (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v7 + 160))(v7, __p, a2 + 40);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    if (v8) {
      nitro::nitro_function::nitro_function(v8);
    }
    if (v6 < 0) {
      operator delete(v5[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v5, "stride_h");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v5, &v7);
    (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v7 + 160))(v7, __p, a2 + 44);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    if (v8) {
      nitro::nitro_function::nitro_function(v8);
    }
    if (v6 < 0) {
      operator delete(v5[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v5, "stride_k");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v5, &v7);
    (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v7 + 160))(v7, __p, a2 + 48);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    if (v8) {
      nitro::nitro_function::nitro_function(v8);
    }
    if (v6 < 0) {
      operator delete(v5[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v5, "stride_n");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v5, &v7);
    (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v7 + 160))(v7, __p, a2 + 52);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    if (v8) {
      nitro::nitro_function::nitro_function(v8);
    }
    if (v6 < 0) {
      operator delete(v5[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v5, "stride_seq");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v5, &v7);
    (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v7 + 160))(v7, __p, a2 + 56);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    if (v8) {
      nitro::nitro_function::nitro_function(v8);
    }
    if (v6 < 0) {
      operator delete(v5[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v5, "squeeze_mask_w");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v5, &v7);
    (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v7 + 208))(v7, __p, a2 + 70);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    if (v8) {
      nitro::nitro_function::nitro_function(v8);
    }
    if (v6 < 0) {
      operator delete(v5[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v5, "squeeze_mask_h");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v5, &v7);
    (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v7 + 208))(v7, __p, a2 + 71);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    if (v8) {
      nitro::nitro_function::nitro_function(v8);
    }
    if (v6 < 0) {
      operator delete(v5[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v5, "squeeze_mask_k");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v5, &v7);
    (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v7 + 208))(v7, __p, a2 + 72);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    if (v8) {
      nitro::nitro_function::nitro_function(v8);
    }
    if (v6 < 0) {
      operator delete(v5[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v5, "squeeze_mask_n");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v5, &v7);
    (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v7 + 208))(v7, __p, a2 + 73);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    if (v8) {
      nitro::nitro_function::nitro_function(v8);
    }
    if (v6 < 0) {
      operator delete(v5[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v5, "squeeze_mask_seq");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v5, &v7);
    (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v7 + 208))(v7, __p, a2 + 74);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    if (v8) {
      nitro::nitro_function::nitro_function(v8);
    }
    if (v6 < 0) {
      operator delete(v5[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v5, "use_static_sizes");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v5, &v7);
    (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v7 + 208))(v7, __p, a2 + 75);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    if (v8) {
      nitro::nitro_function::nitro_function(v8);
    }
    if (v6 < 0) {
      operator delete(v5[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v5, "static_sizes_w");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v5, &v7);
    (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v7 + 160))(v7, __p, a2 + 76);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    if (v8) {
      nitro::nitro_function::nitro_function(v8);
    }
    if (v6 < 0) {
      operator delete(v5[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v5, "static_sizes_h");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v5, &v7);
    (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v7 + 160))(v7, __p, a2 + 80);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    if (v8) {
      nitro::nitro_function::nitro_function(v8);
    }
    if (v6 < 0) {
      operator delete(v5[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v5, "static_sizes_k");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v5, &v7);
    (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v7 + 160))(v7, __p, a2 + 84);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    if (v8) {
      nitro::nitro_function::nitro_function(v8);
    }
    if (v6 < 0) {
      operator delete(v5[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v5, "static_sizes_n");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v5, &v7);
    (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v7 + 160))(v7, __p, a2 + 88);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    if (v8) {
      nitro::nitro_function::nitro_function(v8);
    }
    if (v6 < 0) {
      operator delete(v5[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v5, "static_sizes_seq");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v5, &v7);
    (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v7 + 160))(v7, __p, a2 + 92);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v5, "begin_w");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v5, &v7);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v7, (_DWORD *)a2);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    if (v8) {
      nitro::nitro_function::nitro_function(v8);
    }
    if (v6 < 0) {
      operator delete(v5[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v5, "begin_h");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v5, &v7);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v7, (_DWORD *)(a2 + 4));
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    if (v8) {
      nitro::nitro_function::nitro_function(v8);
    }
    if (v6 < 0) {
      operator delete(v5[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v5, "begin_k");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v5, &v7);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v7, (_DWORD *)(a2 + 8));
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    if (v8) {
      nitro::nitro_function::nitro_function(v8);
    }
    if (v6 < 0) {
      operator delete(v5[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v5, "begin_n");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v5, &v7);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v7, (_DWORD *)(a2 + 12));
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    if (v8) {
      nitro::nitro_function::nitro_function(v8);
    }
    if (v6 < 0) {
      operator delete(v5[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v5, "begin_seq");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v5, &v7);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v7, (_DWORD *)(a2 + 16));
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    if (v8) {
      nitro::nitro_function::nitro_function(v8);
    }
    if (v6 < 0) {
      operator delete(v5[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v5, "begin_mask_w");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v5, &v7);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v7, (unsigned char *)(a2 + 60));
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    if (v8) {
      nitro::nitro_function::nitro_function(v8);
    }
    if (v6 < 0) {
      operator delete(v5[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v5, "begin_mask_h");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v5, &v7);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v7, (unsigned char *)(a2 + 61));
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    if (v8) {
      nitro::nitro_function::nitro_function(v8);
    }
    if (v6 < 0) {
      operator delete(v5[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v5, "begin_mask_k");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v5, &v7);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v7, (unsigned char *)(a2 + 62));
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    if (v8) {
      nitro::nitro_function::nitro_function(v8);
    }
    if (v6 < 0) {
      operator delete(v5[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v5, "begin_mask_n");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v5, &v7);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v7, (unsigned char *)(a2 + 63));
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    if (v8) {
      nitro::nitro_function::nitro_function(v8);
    }
    if (v6 < 0) {
      operator delete(v5[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v5, "begin_mask_seq");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v5, &v7);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v7, (unsigned char *)(a2 + 64));
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    if (v8) {
      nitro::nitro_function::nitro_function(v8);
    }
    if (v6 < 0) {
      operator delete(v5[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v5, "end_w");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v5, &v7);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v7, (_DWORD *)(a2 + 20));
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    if (v8) {
      nitro::nitro_function::nitro_function(v8);
    }
    if (v6 < 0) {
      operator delete(v5[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v5, "end_h");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v5, &v7);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v7, (_DWORD *)(a2 + 24));
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    if (v8) {
      nitro::nitro_function::nitro_function(v8);
    }
    if (v6 < 0) {
      operator delete(v5[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v5, "end_k");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v5, &v7);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v7, (_DWORD *)(a2 + 28));
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    if (v8) {
      nitro::nitro_function::nitro_function(v8);
    }
    if (v6 < 0) {
      operator delete(v5[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v5, "end_n");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v5, &v7);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v7, (_DWORD *)(a2 + 32));
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    if (v8) {
      nitro::nitro_function::nitro_function(v8);
    }
    if (v6 < 0) {
      operator delete(v5[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v5, "end_seq");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v5, &v7);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v7, (_DWORD *)(a2 + 36));
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    if (v8) {
      nitro::nitro_function::nitro_function(v8);
    }
    if (v6 < 0) {
      operator delete(v5[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v5, "end_mask_w");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v5, &v7);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v7, (unsigned char *)(a2 + 65));
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    if (v8) {
      nitro::nitro_function::nitro_function(v8);
    }
    if (v6 < 0) {
      operator delete(v5[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v5, "end_mask_h");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v5, &v7);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v7, (unsigned char *)(a2 + 66));
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    if (v8) {
      nitro::nitro_function::nitro_function(v8);
    }
    if (v6 < 0) {
      operator delete(v5[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v5, "end_mask_k");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v5, &v7);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v7, (unsigned char *)(a2 + 67));
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    if (v8) {
      nitro::nitro_function::nitro_function(v8);
    }
    if (v6 < 0) {
      operator delete(v5[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v5, "end_mask_n");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v5, &v7);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v7, (unsigned char *)(a2 + 68));
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    if (v8) {
      nitro::nitro_function::nitro_function(v8);
    }
    if (v6 < 0) {
      operator delete(v5[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v5, "end_mask_seq");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v5, &v7);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v7, (unsigned char *)(a2 + 69));
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    if (v8) {
      nitro::nitro_function::nitro_function(v8);
    }
    if (v6 < 0) {
      operator delete(v5[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v5, "stride_w");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v5, &v7);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v7, (_DWORD *)(a2 + 40));
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    if (v8) {
      nitro::nitro_function::nitro_function(v8);
    }
    if (v6 < 0) {
      operator delete(v5[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v5, "stride_h");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v5, &v7);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v7, (_DWORD *)(a2 + 44));
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    if (v8) {
      nitro::nitro_function::nitro_function(v8);
    }
    if (v6 < 0) {
      operator delete(v5[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v5, "stride_k");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v5, &v7);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v7, (_DWORD *)(a2 + 48));
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    if (v8) {
      nitro::nitro_function::nitro_function(v8);
    }
    if (v6 < 0) {
      operator delete(v5[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v5, "stride_n");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v5, &v7);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v7, (_DWORD *)(a2 + 52));
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    if (v8) {
      nitro::nitro_function::nitro_function(v8);
    }
    if (v6 < 0) {
      operator delete(v5[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v5, "stride_seq");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v5, &v7);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v7, (_DWORD *)(a2 + 56));
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    if (v8) {
      nitro::nitro_function::nitro_function(v8);
    }
    if (v6 < 0) {
      operator delete(v5[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v5, "squeeze_mask_w");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v5, &v7);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v7, (unsigned char *)(a2 + 70));
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    if (v8) {
      nitro::nitro_function::nitro_function(v8);
    }
    if (v6 < 0) {
      operator delete(v5[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v5, "squeeze_mask_h");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v5, &v7);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v7, (unsigned char *)(a2 + 71));
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    if (v8) {
      nitro::nitro_function::nitro_function(v8);
    }
    if (v6 < 0) {
      operator delete(v5[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v5, "squeeze_mask_k");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v5, &v7);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v7, (unsigned char *)(a2 + 72));
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    if (v8) {
      nitro::nitro_function::nitro_function(v8);
    }
    if (v6 < 0) {
      operator delete(v5[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v5, "squeeze_mask_n");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v5, &v7);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v7, (unsigned char *)(a2 + 73));
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    if (v8) {
      nitro::nitro_function::nitro_function(v8);
    }
    if (v6 < 0) {
      operator delete(v5[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v5, "squeeze_mask_seq");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v5, &v7);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v7, (unsigned char *)(a2 + 74));
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    if (v8) {
      nitro::nitro_function::nitro_function(v8);
    }
    if (v6 < 0) {
      operator delete(v5[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v5, "use_static_sizes");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v5, &v7);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v7, (unsigned char *)(a2 + 75));
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    if (v8) {
      nitro::nitro_function::nitro_function(v8);
    }
    if (v6 < 0) {
      operator delete(v5[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v5, "static_sizes_w");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v5, &v7);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v7, (_DWORD *)(a2 + 76));
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    if (v8) {
      nitro::nitro_function::nitro_function(v8);
    }
    if (v6 < 0) {
      operator delete(v5[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v5, "static_sizes_h");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v5, &v7);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v7, (_DWORD *)(a2 + 80));
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    if (v8) {
      nitro::nitro_function::nitro_function(v8);
    }
    if (v6 < 0) {
      operator delete(v5[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v5, "static_sizes_k");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v5, &v7);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v7, (_DWORD *)(a2 + 84));
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    if (v8) {
      nitro::nitro_function::nitro_function(v8);
    }
    if (v6 < 0) {
      operator delete(v5[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v5, "static_sizes_n");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v5, &v7);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v7, (_DWORD *)(a2 + 88));
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    if (v8) {
      nitro::nitro_function::nitro_function(v8);
    }
    if (v6 < 0) {
      operator delete(v5[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v5, "static_sizes_seq");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v5, &v7);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v7, (_DWORD *)(a2 + 92));
  }
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  if (v6 < 0) {
    operator delete(v5[0]);
  }
}

void sub_192280050(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::serdes_object_json_objc::set_BOOL(uint64_t a1, uint64_t *a2, unsigned __int8 *a3)
{
  id v7 = [NSNumber numberWithBool:*a3];
  if (*((char *)a2 + 23) >= 0) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = (uint64_t *)*a2;
  }
  char v6 = [NSString stringWithUTF8String:v5];
  [*(id *)(a1 + 24) setObject:v7 forKeyedSubscript:v6];
}

void sub_192280344(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void E5RT::ProgramLibraryImpl::~ProgramLibraryImpl(void **this)
{
  if (*((char *)this + 87) < 0) {
    operator delete(this[8]);
  }
  uint64_t v2 = (void **)this[5];
  if (v2)
  {
    do
    {
      while (1)
      {
        unint64_t v3 = (void **)*v2;
        uint64_t v4 = (std::__shared_weak_count *)v2[6];
        if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
        if (*((char *)v2 + 39) < 0) {
          break;
        }
        operator delete(v2);
        uint64_t v2 = v3;
        if (!v3) {
          goto LABEL_11;
        }
      }
      operator delete(v2[2]);
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
LABEL_11:
  uint64_t v5 = this[3];
  this[3] = 0;
  if (v5) {
    operator delete(v5);
  }
  uint64_t v6 = *((unsigned int *)this + 4);
  if (v6 != -1) {
    ((void (*)(char *, void **))off_1EE397698[v6])(&v7, this);
  }
  *((_DWORD *)this + 4) = -1;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJNS_10unique_ptrIKN4E5RT9E5ProgramENS_14default_deleteISB_EEEENS_10shared_ptrINS9_14SharedResourceEEEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSE_SH_EEEEEEDcSL_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a2 + 8);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
}

uint64_t std::__shared_ptr_emplace<E5RT::SharedResourcePriv<E5RT::E5Program &>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t E5RT::SharedResourcePriv<E5RT::E5Program &>::~SharedResourcePriv(uint64_t a1)
{
  *(void *)a1 = &unk_1EE325B60;
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void E5RT::E5ProgramImpl::~E5ProgramImpl(void **this)
{
  E5RT::E5ProgramImpl::~E5ProgramImpl(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  char *v3;
  char *v4;
  char *v5;
  std::__shared_weak_count *v6;
  char *v7;
  char *v8;
  void *v9;
  std::__shared_weak_count *v10;
  uint64_t vars8;

  if (*((char *)this + 103) < 0)
  {
    operator delete(this[10]);
    uint64_t v2 = (std::__shared_weak_count *)this[9];
    if (!v2) {
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v2 = (std::__shared_weak_count *)this[9];
    if (!v2) {
      goto LABEL_6;
    }
  }
  if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    unint64_t v3 = (char *)this[5];
    if (!v3) {
      goto LABEL_15;
    }
    goto LABEL_7;
  }
LABEL_6:
  unint64_t v3 = (char *)this[5];
  if (!v3) {
    goto LABEL_15;
  }
LABEL_7:
  uint64_t v4 = (char *)this[6];
  uint64_t v5 = v3;
  if (v4 != v3)
  {
    do
    {
      uint64_t v6 = (std::__shared_weak_count *)*((void *)v4 - 1);
      if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
      v4 -= 16;
    }
    while (v4 != v3);
    uint64_t v5 = (char *)this[5];
  }
  this[6] = v3;
  operator delete(v5);
LABEL_15:
  char v7 = (char *)this[2];
  if (v7)
  {
    char v8 = (char *)this[3];
    uint64_t v9 = this[2];
    if (v8 != v7)
    {
      do
      {
        char v10 = (std::__shared_weak_count *)*((void *)v8 - 1);
        if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
        v8 -= 16;
      }
      while (v8 != v7);
      uint64_t v9 = this[2];
    }
    this[3] = v7;
    operator delete(v9);
  }
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)(this + 1));

  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)this);
}

void std::__shared_ptr_emplace<E5RT::E5BuildInfoImpl>::__on_zero_shared(uint64_t a1)
{
}

void E5RT::E5BuildInfoImpl::~E5BuildInfoImpl(E5RT::E5BuildInfoImpl *this)
{
  uint64_t v2 = (void **)*((void *)this + 4);
  if (v2)
  {
    do
    {
      uint64_t v4 = (void **)*v2;
      if (*((char *)v2 + 63) < 0)
      {
        operator delete(v2[5]);
        if (*((char *)v2 + 39) < 0) {
LABEL_12:
        }
          operator delete(v2[2]);
      }
      else if (*((char *)v2 + 39) < 0)
      {
        goto LABEL_12;
      }
      operator delete(v2);
      uint64_t v2 = v4;
    }
    while (v4);
  }
  unint64_t v3 = (void *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    operator delete(v3);
  }
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::E5BuildInfoImpl *)((char *)this + 8));

  E5RT::AsyncEventImpl::~AsyncEventImpl(this);
}

{
  uint64_t vars8;

  E5RT::E5BuildInfoImpl::~E5BuildInfoImpl(this);

  JUMPOUT(0x192FF16B0);
}

uint64_t e5rt_execution_stream_operation_get_num_outputs(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EE392218;
  v4[1] = a1;
  v4[2] = a2;
  uint64_t v5 = v4;
  uint64_t v2 = E5RT::ExceptionSafeExecute((uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

void sub_192280934(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_execution_stream_operation_get_num_inputs(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EE392098;
  v4[1] = a1;
  v4[2] = a2;
  uint64_t v5 = v4;
  uint64_t v2 = E5RT::ExceptionSafeExecute((uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

void sub_192280A30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_execution_stream_create(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  v3[0] = &unk_1EE392E18;
  v3[1] = a1;
  uint64_t v4 = v3;
  uint64_t v1 = E5RT::ExceptionSafeExecute((uint64_t)v3);
  if (v4 == v3)
  {
    (*(void (**)(void *))(v3[0] + 32))(v3);
  }
  else if (v4)
  {
    (*(void (**)(void))(*v4 + 40))();
  }
  return v1;
}

void sub_192280B2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

void Espresso::base_kernel::set_parameter_blob<unsigned short,1>()
{
}

{
  while (1)
    ;
}

void sub_192280D34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a14) {
    (*(void (**)(uint64_t))(*(void *)a14 + 8))(a14);
  }
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string const,std::shared_ptr<Espresso::blob_cpu>>::pair[abi:ne180100]<std::string,std::unique_ptr<Espresso::blob_cpu>,0>(uint64_t result, long long *a2, uint64_t *a3)
{
  long long v3 = *a2;
  *(void *)(result + 16) = *((void *)a2 + 2);
  *(_OWORD *)__n128 result = v3;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  uint64_t v4 = *a3;
  *(void *)(result + 24) = *a3;
  if (v4) {
    operator new();
  }
  *(void *)(result + 32) = 0;
  *a3 = 0;
  return result;
}

void sub_192280E38(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob_cpu>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob_cpu>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob_cpu>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob_cpu>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<Espresso::blob_cpu>>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v7 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v9) {
        unint64_t v3 = v7 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v7;
    }
    int v12 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      for (uint64_t i = *v12; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v14 = *((void *)i + 1);
        if (v14 == v8)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](i + 16, a2)) {
            return;
          }
        }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9) {
              v14 %= v9;
            }
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v3) {
            break;
          }
        }
      }
    }
  }
  char v15 = (void *)(a1 + 16);
  int v16 = (char *)operator new(0x38uLL);
  v39[0] = v16;
  v39[1] = a1 + 16;
  char v40 = 0;
  *(void *)int v16 = 0;
  *((void *)v16 + 1) = v8;
  size_t v17 = (std::string *)(v16 + 16);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v17, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v17->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    *((void *)v16 + 4) = *(void *)(a3 + 16);
  }
  *(_OWORD *)(v16 + 40) = *(_OWORD *)(a3 + 24);
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0;
  char v40 = 1;
  float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v19 = *(float *)(a1 + 32);
  if (!v9 || (float)(v19 * (float)v9) < v18)
  {
    BOOL v20 = 1;
    if (v9 >= 3) {
      BOOL v20 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v9);
    unint64_t v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22) {
      int8x8_t prime = (int8x8_t)v22;
    }
    else {
      int8x8_t prime = (int8x8_t)v21;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v9 = *(void *)(a1 + 8);
    if (*(void *)&prime > v9) {
      goto LABEL_33;
    }
    if (*(void *)&prime < v9)
    {
      unint64_t v30 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v9 < 3 || (uint8x8_t v31 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v31.i16[0] = vaddlv_u8(v31), v31.u32[0] > 1uLL))
      {
        unint64_t v30 = std::__next_prime(v30);
      }
      else
      {
        uint64_t v32 = 1 << -(char)__clz(v30 - 1);
        if (v30 >= 2) {
          unint64_t v30 = v32;
        }
      }
      if (*(void *)&prime <= v30) {
        int8x8_t prime = (int8x8_t)v30;
      }
      if (*(void *)&prime >= v9)
      {
        unint64_t v9 = *(void *)(a1 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_33:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          unint64_t v24 = operator new(8 * *(void *)&prime);
          unint64_t v25 = *(void **)a1;
          *(void *)a1 = v24;
          if (v25) {
            operator delete(v25);
          }
          uint64_t v26 = 0;
          *(int8x8_t *)(a1 + 8) = prime;
          do
            *(void *)(*(void *)a1 + 8 * v26++) = 0;
          while (*(void *)&prime != v26);
          uint64_t v27 = (void *)*v15;
          if (*v15)
          {
            unint64_t v28 = v27[1];
            uint8x8_t v29 = (uint8x8_t)vcnt_s8(prime);
            v29.i16[0] = vaddlv_u8(v29);
            if (v29.u32[0] > 1uLL)
            {
              if (v28 >= *(void *)&prime) {
                v28 %= *(void *)&prime;
              }
            }
            else
            {
              v28 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)a1 + 8 * v28) = v15;
            long long v33 = (void *)*v27;
            if (*v27)
            {
              do
              {
                unint64_t v34 = v33[1];
                if (v29.u32[0] > 1uLL)
                {
                  if (v34 >= *(void *)&prime) {
                    v34 %= *(void *)&prime;
                  }
                }
                else
                {
                  v34 &= *(void *)&prime - 1;
                }
                if (v34 != v28)
                {
                  if (!*(void *)(*(void *)a1 + 8 * v34))
                  {
                    *(void *)(*(void *)a1 + 8 * v34) = v27;
                    goto LABEL_58;
                  }
                  void *v27 = *v33;
                  *long long v33 = **(void **)(*(void *)a1 + 8 * v34);
                  **(void **)(*(void *)a1 + 8 * v34) = v33;
                  long long v33 = v27;
                }
                unint64_t v34 = v28;
LABEL_58:
                uint64_t v27 = v33;
                long long v33 = (void *)*v33;
                unint64_t v28 = v34;
              }
              while (v33);
            }
          }
          unint64_t v9 = (unint64_t)prime;
          goto LABEL_62;
        }
        uint64_t v38 = *(void **)a1;
        *(void *)a1 = 0;
        if (v38) {
          operator delete(v38);
        }
        unint64_t v9 = 0;
        *(void *)(a1 + 8) = 0;
      }
    }
LABEL_62:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  long long v35 = *(void **)(*(void *)a1 + 8 * v3);
  uint64_t v36 = v39[0];
  if (v35)
  {
    *(void *)v39[0] = *v35;
LABEL_75:
    *long long v35 = v36;
    goto LABEL_76;
  }
  *(void *)v39[0] = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v36;
  *(void *)(*(void *)a1 + 8 * v3) = v15;
  if (*(void *)v36)
  {
    unint64_t v37 = *(void *)(*(void *)v36 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v37 >= v9) {
        v37 %= v9;
      }
    }
    else
    {
      v37 &= v9 - 1;
    }
    long long v35 = (void *)(*(void *)a1 + 8 * v37);
    goto LABEL_75;
  }
LABEL_76:
  v39[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>>>>::reset[abi:ne180100]((uint64_t)v39);
}

void sub_192281298(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void Espresso::AOT::AlignCalleeWithCallOp(E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset *a1, unsigned __int8 **a2)
{
  long long v430 = 0u;
  long long v431 = 0u;
  int v432 = 1065353216;
  Opsetuint64_t Name = E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset::GetOpsetName(a1);
  size_t v5 = v4;
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v6 = OpsetName;
  if (v4 >= 0x17)
  {
    uint64_t v8 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v8 = v4 | 7;
    }
    uint64_t v9 = v8 + 1;
    p_dst = (void **)operator new(v8 + 1);
    size_t v428 = v5;
    int64_t v429 = v9 | 0x8000000000000000;
    std::string __dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v429) = v4;
  p_dst = (void **)&__dst;
  if (v4) {
LABEL_8:
  }
    memmove(p_dst, v6, v5);
  *((unsigned char *)p_dst + v5) = 0;
  (*(void (**)(E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset *))(*(void *)a1 + 40))(a1);
  MIL::MILContext::GetOpset();
  __p[23] = 4;
  strcpy(__p, "call");
  uint64_t Operator = MIL::IROpset::GetOperator();
  long long v424 = 0u;
  long long v425 = 0u;
  int v426 = 1065353216;
  uint8x8_t v10 = *a2;
  v383 = a2[1];
  if (*a2 != v383)
  {
    while (1)
    {
      float v384 = v10;
      (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 64))(&v422);
      if (!v422)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        v381 = std::string::append((std::string *)&v400, " does not exist");
        long long v382 = *(_OWORD *)&v381->__r_.__value_.__l.__data_;
        *(void *)&__p[16] = *((void *)&v381->__r_.__value_.__l + 2);
        *(_OWORD *)std::string __p = v382;
        v381->__r_.__value_.__l.__size_ = 0;
        v381->__r_.__value_.__r.__words[2] = 0;
        v381->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, (const std::string *)__p);
        __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      (*(void (**)(long long *__return_ptr))(*(void *)v422 + 232))(&v400);
      *(void *)std::string __p = v384;
      unint64_t v11 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v430, v384, (uint64_t)&std::piecewise_construct, (long long **)__p);
      if ((void)v400) {
        operator new();
      }
      *(void *)&long long v400 = 0;
      int v12 = (std::__shared_weak_count *)*((void *)v11 + 6);
      *((void *)v11 + 5) = 0;
      *((void *)v11 + 6) = 0;
      if (v12)
      {
        if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
          break;
        }
      }
      uint64_t v13 = v400;
      *(void *)&long long v400 = 0;
      if (v13) {
        goto LABEL_18;
      }
LABEL_19:
      *(void *)std::string __p = v384;
      unint64_t v14 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v430, v384, (uint64_t)&std::piecewise_construct, (long long **)__p);
      uint64_t v16 = *((void *)v14 + 5);
      char v15 = (std::__shared_weak_count *)*((void *)v14 + 6);
      if (v15) {
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      size_t v17 = v423;
      uint64_t v422 = v16;
      v423 = v15;
      if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
      float v18 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(void *)v422 + 32))(v422);
      uint64_t v19 = v18[23];
      if ((v19 & 0x80u) == 0) {
        uint64_t v20 = v18[23];
      }
      else {
        uint64_t v20 = *((void *)v18 + 1);
      }
      size_t v21 = HIBYTE(v429);
      if (v429 < 0) {
        size_t v21 = v428;
      }
      if (v20 != v21) {
        goto LABEL_834;
      }
      if (v429 >= 0) {
        unint64_t v22 = (void **)&__dst;
      }
      else {
        unint64_t v22 = __dst;
      }
      if ((v19 & 0x80) != 0)
      {
        if (memcmp(*(const void **)v18, v22, *((void *)v18 + 1))) {
          goto LABEL_834;
        }
      }
      else if (v18[23])
      {
        while (*v18 == *(unsigned __int8 *)v22)
        {
          ++v18;
          unint64_t v22 = (void **)((char *)v22 + 1);
          if (!--v19) {
            goto LABEL_39;
          }
        }
LABEL_834:
        v376 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v376, "Entry point function has unexpected opset");
        __cxa_throw(v376, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
LABEL_39:
      uint64_t v23 = (*(uint64_t (**)(uint64_t, void **))(*(void *)v422 + 48))(v422, v22);
      unint64_t v24 = (uint64_t ***)(*(uint64_t (**)(uint64_t))(*(void *)v23 + 64))(v23);
      uint64_t v26 = **v24;
      unint64_t v25 = (*v24)[1];
      v387 = v25;
      while (v26 != v25)
      {
        uint64_t v389 = *v26;
        uint64_t v27 = (*(uint64_t (**)(void))(*(void *)*v26 + 64))();
        if (!(*(unsigned int (**)(uint64_t))(*(void *)v27 + 128))(v27)) {
          goto LABEL_41;
        }
        (*(void (**)(long long **__return_ptr))(*(void *)Operator + 120))(v420);
        v418[0] = 0;
        v418[1] = 0;
        v419 = 0;
        v416 = 0;
        uint64_t v417 = 0;
        v415 = &v416;
        unint64_t v28 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v389 + 160))(v389);
        uint64_t v386 = v26;
        unint64_t v30 = v28 + 1;
        uint8x8_t v29 = (void *)*v28;
        if ((void *)*v28 != v28 + 1)
        {
          do
          {
            uint64_t Name = MIL::IRArgument::GetName(*(MIL::IRArgument **)v29[7]);
            uint64_t v38 = Name;
            unint64_t v39 = v416;
            char v40 = &v416;
            uint64_t v41 = &v416;
            if (v416)
            {
              int v42 = *(char *)(Name + 23);
              if (v42 >= 0) {
                size_t v43 = *(unsigned __int8 *)(Name + 23);
              }
              else {
                size_t v43 = *(void *)(Name + 8);
              }
              if (v42 >= 0) {
                unint64_t v44 = (const void *)Name;
              }
              else {
                unint64_t v44 = *(const void **)Name;
              }
              while (1)
              {
                while (1)
                {
                  char v40 = (char **)v39;
                  uint64_t v47 = (char *)*((void *)v39 + 4);
                  unint64_t v45 = v39 + 32;
                  long long v46 = v47;
                  int v48 = v45[23];
                  if (v48 >= 0) {
                    size_t v49 = v45[23];
                  }
                  else {
                    size_t v49 = *((void *)v45 + 1);
                  }
                  if (v48 >= 0) {
                    uint64_t v50 = v45;
                  }
                  else {
                    uint64_t v50 = v46;
                  }
                  if (v49 >= v43) {
                    size_t v51 = v43;
                  }
                  else {
                    size_t v51 = v49;
                  }
                  int v52 = memcmp(v44, v50, v51);
                  BOOL v53 = v43 < v49;
                  if (v52) {
                    BOOL v53 = v52 < 0;
                  }
                  if (!v53) {
                    break;
                  }
                  unint64_t v39 = *v40;
                  uint64_t v41 = v40;
                  if (!*v40) {
                    goto LABEL_74;
                  }
                }
                int v54 = memcmp(v50, v44, v51);
                BOOL v55 = v49 < v43;
                if (v54) {
                  BOOL v55 = v54 < 0;
                }
                if (!v55) {
                  break;
                }
                unint64_t v39 = v40[1];
                if (!v39)
                {
                  uint64_t v41 = v40 + 1;
                  goto LABEL_74;
                }
              }
              uint64_t v56 = v40;
              if ((v42 & 0x80) != 0)
              {
LABEL_97:
                std::string::__init_copy_ctor_external(&v414, *(const std::string::value_type **)v38, *(void *)(v38 + 8));
                goto LABEL_105;
              }
            }
            else
            {
LABEL_74:
              uint64_t v56 = operator new(0x50uLL);
              uint64_t v57 = (std::string *)(v56 + 4);
              if (*(char *)(v38 + 23) < 0)
              {
                std::string::__init_copy_ctor_external(v57, *(const std::string::value_type **)v38, *(void *)(v38 + 8));
              }
              else
              {
                long long v58 = *(_OWORD *)v38;
                v56[6] = *(void *)(v38 + 16);
                *(_OWORD *)&v57->__r_.__value_.__l.__data_ = v58;
              }
              v56[7] = 0;
              v56[8] = 0;
              v56[9] = 0;
              *uint64_t v56 = 0;
              v56[1] = 0;
              uint64_t v56[2] = v40;
              char *v41 = (char *)v56;
              long long v59 = (char *)v56;
              if (*v415)
              {
                v415 = (char **)*v415;
                long long v59 = *v41;
              }
              uint64_t v60 = v416;
              BOOL v61 = v59 == v416;
              v59[24] = v59 == v416;
              if (!v61)
              {
                do
                {
                  uint64_t v62 = *((void *)v59 + 2);
                  if (*(unsigned char *)(v62 + 24)) {
                    break;
                  }
                  int v63 = *(char **)(v62 + 16);
                  uint64_t v64 = *(void *)v63;
                  if (*(void *)v63 == v62)
                  {
                    uint64_t v67 = *((void *)v63 + 1);
                    if (!v67 || (v68 = *(unsigned __int8 *)(v67 + 24), unint64_t v65 = (unsigned char *)(v67 + 24), v68))
                    {
                      if (*(char **)v62 == v59)
                      {
                        *(unsigned char *)(v62 + 24) = 1;
                        v63[24] = 0;
                        uint64_t v71 = *(void *)(v62 + 8);
                        *(void *)int v63 = v71;
                        if (v71) {
                          goto LABEL_94;
                        }
                      }
                      else
                      {
                        unint64_t v69 = *(uint64_t **)(v62 + 8);
                        uint64_t v70 = *v69;
                        *(void *)(v62 + 8) = *v69;
                        if (v70)
                        {
                          *(void *)(v70 + 16) = v62;
                          int v63 = *(char **)(v62 + 16);
                        }
                        v69[2] = (uint64_t)v63;
                        *(void *)(*(void *)(v62 + 16) + 8 * (**(void **)(v62 + 16) != v62)) = v69;
                        *unint64_t v69 = v62;
                        *(void *)(v62 + 16) = v69;
                        int v63 = (char *)v69[2];
                        uint64_t v62 = *(void *)v63;
                        *((unsigned char *)v69 + 24) = 1;
                        v63[24] = 0;
                        uint64_t v71 = *(void *)(v62 + 8);
                        *(void *)int v63 = v71;
                        if (v71) {
LABEL_94:
                        }
                          *(void *)(v71 + 16) = v63;
                      }
                      *(void *)(v62 + 16) = *((void *)v63 + 2);
                      *(void *)(*((void *)v63 + 2) + 8 * (**((void **)v63 + 2) != (void)v63)) = v62;
                      *(void *)(v62 + 8) = v63;
LABEL_102:
                      *((void *)v63 + 2) = v62;
                      break;
                    }
                  }
                  else if (!v64 || (v66 = *(unsigned __int8 *)(v64 + 24), unint64_t v65 = (unsigned char *)(v64 + 24), v66))
                  {
                    if (*(char **)v62 == v59)
                    {
                      uint64_t v120 = *((void *)v59 + 1);
                      *(void *)uint64_t v62 = v120;
                      if (v120)
                      {
                        *(void *)(v120 + 16) = v62;
                        int v63 = *(char **)(v62 + 16);
                      }
                      *((void *)v59 + 2) = v63;
                      *(void *)(*(void *)(v62 + 16) + 8 * (**(void **)(v62 + 16) != v62)) = v59;
                      *((void *)v59 + 1) = v62;
                      *(void *)(v62 + 16) = v59;
                      int v63 = (char *)*((void *)v59 + 2);
                      v59[24] = 1;
                      v63[24] = 0;
                      uint64_t v62 = *((void *)v63 + 1);
                      uint64_t v72 = *(char **)v62;
                      *((void *)v63 + 1) = *(void *)v62;
                      if (v72) {
LABEL_100:
                      }
                        *((void *)v72 + 2) = v63;
                    }
                    else
                    {
                      *(unsigned char *)(v62 + 24) = 1;
                      v63[24] = 0;
                      uint64_t v62 = *((void *)v63 + 1);
                      uint64_t v72 = *(char **)v62;
                      *((void *)v63 + 1) = *(void *)v62;
                      if (v72) {
                        goto LABEL_100;
                      }
                    }
                    *(void *)(v62 + 16) = *((void *)v63 + 2);
                    *(void *)(*((void *)v63 + 2) + 8 * (**((void **)v63 + 2) != (void)v63)) = v62;
                    *(void *)uint64_t v62 = v63;
                    goto LABEL_102;
                  }
                  *(unsigned char *)(v62 + 24) = 1;
                  long long v59 = v63;
                  v63[24] = v63 == v60;
                  *unint64_t v65 = 1;
                }
                while (v63 != v60);
              }
              ++v417;
              if ((*(unsigned char *)(v38 + 23) & 0x80) != 0) {
                goto LABEL_97;
              }
            }
            long long v73 = *(_OWORD *)v38;
            v414.__r_.__value_.__r.__words[2] = *(void *)(v38 + 16);
            *(_OWORD *)&v414.__r_.__value_.__l.__data_ = v73;
LABEL_105:
            MIL::IRArgument::Make();
            *(void *)std::string __p = v400;
            if ((void)v400) {
              operator new();
            }
            *(void *)&__p[8] = 0;
            *(void *)&long long v400 = 0;
            long long v75 = (void *)v56[8];
            unint64_t v76 = v56[9];
            if ((unint64_t)v75 < v76)
            {
              *long long v75 = *(void *)__p;
              v75[1] = 0;
              *(void *)std::string __p = 0;
              *(void *)&__p[8] = 0;
              uint64_t v74 = v75 + 2;
            }
            else
            {
              uint64_t v77 = v56[7];
              uint64_t v78 = (char *)v75 - v77;
              uint64_t v79 = ((uint64_t)v75 - v77) >> 4;
              unint64_t v80 = v79 + 1;
              if ((unint64_t)(v79 + 1) >> 60) {
                std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v81 = v76 - v77;
              if (v81 >> 3 > v80) {
                unint64_t v80 = v81 >> 3;
              }
              if ((unint64_t)v81 >= 0x7FFFFFFFFFFFFFF0) {
                unint64_t v82 = 0xFFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v82 = v80;
              }
              if (v82 >> 60) {
                std::__throw_bad_array_new_length[abi:ne180100]();
              }
              int v83 = operator new(16 * v82);
              unint64_t v84 = (char *)v83 + 16 * v79;
              unint64_t v85 = (char *)v83 + 16 * v82;
              *(void *)unint64_t v84 = *(void *)__p;
              uint64_t v74 = v84 + 16;
              *(void *)&v78[(void)v83 + 8] = 0;
              *(void *)std::string __p = 0;
              *(void *)&__p[8] = 0;
              long long v86 = (void *)v56[7];
              uint64_t v87 = (void *)v56[8];
              if (v87 == v86)
              {
                v56[7] = v84;
                v56[8] = v74;
                v56[9] = v85;
              }
              else
              {
                do
                {
                  long long v88 = *((_OWORD *)v87 - 1);
                  v87 -= 2;
                  *((_OWORD *)v84 - 1) = v88;
                  v84 -= 16;
                  void *v87 = 0;
                  v87[1] = 0;
                }
                while (v87 != v86);
                uint64_t v87 = (void *)v56[7];
                unint64_t v89 = (void *)v56[8];
                v56[7] = v84;
                v56[8] = v74;
                v56[9] = v85;
                while (v89 != v87)
                {
                  uint64_t v90 = (std::__shared_weak_count *)*(v89 - 1);
                  if (v90 && !atomic_fetch_add(&v90->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                  {
                    ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
                    std::__shared_weak_count::__release_weak(v90);
                  }
                  v89 -= 2;
                }
              }
              if (v87) {
                operator delete(v87);
              }
            }
            v56[8] = v74;
            unint64_t v91 = *(std::__shared_weak_count **)&__p[8];
            if (!*(void *)&__p[8]
              || atomic_fetch_add((atomic_ullong *volatile)(*(void *)&__p[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
            {
              uint64_t v92 = v400;
              *(void *)&long long v400 = 0;
              if (!v92) {
                goto LABEL_131;
              }
LABEL_130:
              (*(void (**)(uint64_t))(*(void *)v92 + 8))(v92);
              goto LABEL_131;
            }
            ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
            std::__shared_weak_count::__release_weak(v91);
            uint64_t v92 = v400;
            *(void *)&long long v400 = 0;
            if (v92) {
              goto LABEL_130;
            }
LABEL_131:
            if (SHIBYTE(v414.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v414.__r_.__value_.__l.__data_);
            }
            long long v93 = (const void **)(v29 + 4);
            std::string::size_type v94 = v29[5];
            if (*((char *)v29 + 55) >= 0) {
              uint64_t v95 = *((unsigned __int8 *)v29 + 55);
            }
            else {
              uint64_t v95 = v29[5];
            }
            uint64_t v96 = *(unsigned __int8 *)(v38 + 23);
            int v97 = (char)v96;
            if ((v96 & 0x80u) != 0) {
              uint64_t v96 = *(void *)(v38 + 8);
            }
            if (v95 == v96)
            {
              if (v97 >= 0) {
                char v98 = (const std::string::value_type *)v38;
              }
              else {
                char v98 = *(const std::string::value_type **)v38;
              }
              if ((*((unsigned char *)v29 + 55) & 0x80) != 0)
              {
                uint64_t v101 = (const std::string::value_type *)*v93;
                if (!memcmp(*v93, v98, v29[5])) {
                  goto LABEL_185;
                }
                goto LABEL_154;
              }
              if (!*((unsigned char *)v29 + 55)) {
                goto LABEL_185;
              }
              unint64_t v99 = (unsigned __int8 *)(v29 + 4);
              uint64_t v100 = *((unsigned __int8 *)v29 + 55);
              while (*v99 == *(unsigned __int8 *)v98)
              {
                ++v99;
                ++v98;
                if (!--v100) {
                  goto LABEL_185;
                }
              }
            }
            if ((*((unsigned char *)v29 + 55) & 0x80) == 0)
            {
              *(_OWORD *)std::string __p = *(_OWORD *)v93;
              *(void *)&__p[16] = v29[6];
              goto LABEL_155;
            }
            uint64_t v101 = (const std::string::value_type *)*v93;
LABEL_154:
            std::string::__init_copy_ctor_external((std::string *)__p, v101, v94);
LABEL_155:
            if (*(char *)(v38 + 23) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)&__p[24], *(const std::string::value_type **)v38, *(void *)(v38 + 8));
            }
            else
            {
              long long v102 = *(_OWORD *)v38;
              *(void *)&long long v392 = *(void *)(v38 + 16);
              *(_OWORD *)&__p[24] = v102;
            }
            uint64_t v103 = v418[1];
            if (v418[1] < v419)
            {
              long long v104 = *(_OWORD *)__p;
              *((void *)v418[1] + 2) = *(void *)&__p[16];
              *(_OWORD *)uint64_t v103 = v104;
              memset(__p, 0, 24);
              uint64_t v105 = v392;
              *(_OWORD *)((char *)v103 + 24) = *(_OWORD *)&__p[24];
              *((void *)v103 + 5) = v105;
              *(void *)&__p[32] = 0;
              *(void *)&long long v392 = 0;
              *(void *)&__p[24] = 0;
              long long v106 = (MIL::Attributes::FlexibleShapeInfo *)((char *)v103 + 48);
              goto LABEL_183;
            }
            uint64_t v107 = v418[0];
            int64_t v108 = v418[1] - v418[0];
            unint64_t v109 = 0xAAAAAAAAAAAAAAABLL * ((v418[1] - v418[0]) >> 4);
            unint64_t v110 = v109 + 1;
            if (v109 + 1 > 0x555555555555555) {
              std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
            }
            if (0x5555555555555556 * ((v419 - v418[0]) >> 4) > v110) {
              unint64_t v110 = 0x5555555555555556 * ((v419 - v418[0]) >> 4);
            }
            if (0xAAAAAAAAAAAAAAABLL * ((v419 - v418[0]) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
              unint64_t v111 = 0x555555555555555;
            }
            else {
              unint64_t v111 = v110;
            }
            if (v111)
            {
              if (v111 > 0x555555555555555) {
                std::__throw_bad_array_new_length[abi:ne180100]();
              }
              unint64_t v112 = (char *)operator new(48 * v111);
            }
            else
            {
              unint64_t v112 = 0;
            }
            uint64_t v113 = &v112[48 * v109];
            *(_OWORD *)uint64_t v113 = *(_OWORD *)__p;
            *((void *)v113 + 2) = *(void *)&__p[16];
            memset(__p, 0, 24);
            uint64_t v114 = &v112[v108];
            *(_OWORD *)(v114 + 24) = *(_OWORD *)&__p[24];
            *((void *)v114 + 5) = v392;
            *(void *)&__p[24] = 0;
            *(void *)&__p[32] = 0;
            long long v106 = (MIL::Attributes::FlexibleShapeInfo *)(v113 + 48);
            *(void *)&long long v392 = 0;
            if (v103 == v107)
            {
              v418[0] = (MIL::Attributes::FlexibleShapeInfo *)&v112[48 * v109];
              v418[1] = (MIL::Attributes::FlexibleShapeInfo *)(v113 + 48);
              v419 = (MIL::Attributes::FlexibleShapeInfo *)&v112[48 * v111];
              goto LABEL_181;
            }
            do
            {
              long long v115 = *((_OWORD *)v103 - 3);
              *((void *)v113 - 4) = *((void *)v103 - 4);
              *((_OWORD *)v113 - 3) = v115;
              *((void *)v103 - 5) = 0;
              *((void *)v103 - 4) = 0;
              *((void *)v103 - 6) = 0;
              long long v116 = *(_OWORD *)((char *)v103 - 24);
              *((void *)v113 - 1) = *((void *)v103 - 1);
              *(_OWORD *)(v113 - 24) = v116;
              v113 -= 48;
              *((void *)v103 - 2) = 0;
              *((void *)v103 - 1) = 0;
              *((void *)v103 - 3) = 0;
              uint64_t v103 = (MIL::Attributes::FlexibleShapeInfo *)((char *)v103 - 48);
            }
            while (v103 != v107);
            uint64_t v103 = v418[0];
            uint64_t v117 = v418[1];
            v418[0] = (MIL::Attributes::FlexibleShapeInfo *)v113;
            v418[1] = v106;
            v419 = (MIL::Attributes::FlexibleShapeInfo *)&v112[48 * v111];
            if (v117 != v103)
            {
              while (1)
              {
                if (*((char *)v117 - 1) < 0)
                {
                  operator delete(*((void **)v117 - 3));
                  if ((*((char *)v117 - 25) & 0x80000000) == 0) {
                    goto LABEL_175;
                  }
LABEL_178:
                  operator delete(*((void **)v117 - 6));
                  uint64_t v117 = (MIL::Attributes::FlexibleShapeInfo *)((char *)v117 - 48);
                  if (v117 == v103) {
                    break;
                  }
                }
                else
                {
                  if (*((char *)v117 - 25) < 0) {
                    goto LABEL_178;
                  }
LABEL_175:
                  uint64_t v117 = (MIL::Attributes::FlexibleShapeInfo *)((char *)v117 - 48);
                  if (v117 == v103) {
                    break;
                  }
                }
              }
            }
LABEL_181:
            if (v103) {
              operator delete(v103);
            }
LABEL_183:
            v418[1] = v106;
            if (SBYTE7(v392) < 0)
            {
              operator delete(*(void **)&__p[24]);
              if ((__p[23] & 0x80000000) == 0)
              {
LABEL_185:
                uint64_t v118 = (void *)v29[1];
                if (v118) {
                  goto LABEL_189;
                }
                goto LABEL_191;
              }
            }
            else if ((__p[23] & 0x80000000) == 0)
            {
              goto LABEL_185;
            }
            operator delete(*(void **)__p);
            uint64_t v118 = (void *)v29[1];
            if (v118)
            {
              do
              {
LABEL_189:
                unint64_t v119 = v118;
                uint64_t v118 = (void *)*v118;
              }
              while (v118);
              goto LABEL_48;
            }
            do
            {
LABEL_191:
              unint64_t v119 = (void *)v29[2];
              BOOL v61 = *v119 == (void)v29;
              uint8x8_t v29 = v119;
            }
            while (!v61);
LABEL_48:
            uint8x8_t v29 = v119;
          }
          while (v119 != v30);
        }
        (*(void (**)(uint64_t, char ***))(*(void *)v389 + 168))(v389, &v415);
        (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 64))(&v412);
        if (!v412)
        {
          v377 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::operator+<char>();
          char v378 = std::string::append((std::string *)&v400, " does not exist");
          long long v379 = *(_OWORD *)&v378->__r_.__value_.__l.__data_;
          *(void *)&__p[16] = *((void *)&v378->__r_.__value_.__l + 2);
          *(_OWORD *)std::string __p = v379;
          v378->__r_.__value_.__l.__size_ = 0;
          v378->__r_.__value_.__r.__words[2] = 0;
          v378->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(v377, (const std::string *)__p);
          __cxa_throw(v377, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v389 + 200))(&v410, v389);
        uint64_t v31 = (*(uint64_t (**)(uint64_t))(*(void *)v412 + 48))(v412);
        uint64_t v32 = (*(uint64_t (**)(uint64_t))(*(void *)v31 + 88))(v31);
        unint64_t v34 = (char *)v410;
        long long v33 = v411;
        if (v411 != v410)
        {
          long long v35 = (void *)v32;
          for (unint64_t i = 0; i < 0xAAAAAAAAAAAAAAABLL * (((char *)v33 - v34) >> 3); ++i)
          {
            uint64_t v121 = *v35 + 24 * i;
            uint64_t v122 = &v34[24 * i];
            std::string::size_type v123 = *(void *)(v121 + 8);
            if (*(char *)(v121 + 23) >= 0) {
              uint64_t v124 = *(unsigned __int8 *)(v121 + 23);
            }
            else {
              uint64_t v124 = *(void *)(v121 + 8);
            }
            uint64_t v125 = v122[23];
            int v126 = (char)v125;
            if ((v125 & 0x80u) != 0) {
              uint64_t v125 = *((void *)v122 + 1);
            }
            if (v124 == v125)
            {
              if (v126 >= 0) {
                uint64_t v127 = &v34[24 * i];
              }
              else {
                uint64_t v127 = *(const std::string::value_type **)v122;
              }
              if ((*(unsigned char *)(v121 + 23) & 0x80) != 0)
              {
                if (!memcmp(*(const void **)v121, v127, *(void *)(v121 + 8))) {
                  continue;
                }
                goto LABEL_221;
              }
              if (!*(unsigned char *)(v121 + 23)) {
                continue;
              }
              uint64_t v128 = (unsigned __int8 *)(*v35 + 24 * i);
              uint64_t v129 = *(unsigned __int8 *)(v121 + 23);
              while (*v128 == *(unsigned __int8 *)v127)
              {
                ++v128;
                ++v127;
                if (!--v129) {
                  goto LABEL_202;
                }
              }
            }
            if ((*(unsigned char *)(v121 + 23) & 0x80) == 0)
            {
              long long v130 = *(_OWORD *)v121;
              *(void *)&__p[16] = *(void *)(v121 + 16);
              *(_OWORD *)std::string __p = v130;
              goto LABEL_222;
            }
LABEL_221:
            std::string::__init_copy_ctor_external((std::string *)__p, *(const std::string::value_type **)v121, v123);
LABEL_222:
            if (v122[23] < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)&__p[24], *(const std::string::value_type **)v122, *((void *)v122 + 1));
            }
            else
            {
              long long v131 = *(_OWORD *)v122;
              *(void *)&long long v392 = *((void *)v122 + 2);
              *(_OWORD *)&__p[24] = v131;
            }
            uint64_t v132 = v418[1];
            if (v418[1] >= v419)
            {
              uint64_t v136 = v418[0];
              int64_t v137 = v418[1] - v418[0];
              unint64_t v138 = 0xAAAAAAAAAAAAAAABLL * ((v418[1] - v418[0]) >> 4);
              unint64_t v139 = v138 + 1;
              if (v138 + 1 > 0x555555555555555) {
                std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
              }
              if (0x5555555555555556 * ((v419 - v418[0]) >> 4) > v139) {
                unint64_t v139 = 0x5555555555555556 * ((v419 - v418[0]) >> 4);
              }
              if (0xAAAAAAAAAAAAAAABLL * ((v419 - v418[0]) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
                unint64_t v140 = 0x555555555555555;
              }
              else {
                unint64_t v140 = v139;
              }
              if (v140)
              {
                if (v140 > 0x555555555555555) {
                  std::__throw_bad_array_new_length[abi:ne180100]();
                }
                int v141 = (char *)operator new(48 * v140);
              }
              else
              {
                int v141 = 0;
              }
              int v142 = &v141[48 * v138];
              *(_OWORD *)int v142 = *(_OWORD *)__p;
              *((void *)v142 + 2) = *(void *)&__p[16];
              memset(__p, 0, 24);
              int v143 = &v141[v137];
              *(_OWORD *)(v143 + 24) = *(_OWORD *)&__p[24];
              *((void *)v143 + 5) = v392;
              *(void *)&__p[24] = 0;
              *(void *)&__p[32] = 0;
              int v135 = (MIL::Attributes::FlexibleShapeInfo *)(v142 + 48);
              *(void *)&long long v392 = 0;
              if (v132 != v136)
              {
                do
                {
                  long long v144 = *((_OWORD *)v132 - 3);
                  *((void *)v142 - 4) = *((void *)v132 - 4);
                  *((_OWORD *)v142 - 3) = v144;
                  *((void *)v132 - 5) = 0;
                  *((void *)v132 - 4) = 0;
                  *((void *)v132 - 6) = 0;
                  long long v145 = *(_OWORD *)((char *)v132 - 24);
                  *((void *)v142 - 1) = *((void *)v132 - 1);
                  *(_OWORD *)(v142 - 24) = v145;
                  v142 -= 48;
                  *((void *)v132 - 2) = 0;
                  *((void *)v132 - 1) = 0;
                  *((void *)v132 - 3) = 0;
                  uint64_t v132 = (MIL::Attributes::FlexibleShapeInfo *)((char *)v132 - 48);
                }
                while (v132 != v136);
                uint64_t v132 = v418[0];
                int v146 = v418[1];
                v418[0] = (MIL::Attributes::FlexibleShapeInfo *)v142;
                v418[1] = v135;
                v419 = (MIL::Attributes::FlexibleShapeInfo *)&v141[48 * v140];
                while (2)
                {
                  if (v146 == v132) {
                    goto LABEL_247;
                  }
                  if (*((char *)v146 - 1) < 0)
                  {
                    operator delete(*((void **)v146 - 3));
                    if (*((char *)v146 - 25) < 0) {
                      goto LABEL_245;
                    }
                  }
                  else if (*((char *)v146 - 25) < 0)
                  {
LABEL_245:
                    operator delete(*((void **)v146 - 6));
                  }
                  int v146 = (MIL::Attributes::FlexibleShapeInfo *)((char *)v146 - 48);
                  continue;
                }
              }
              v418[0] = (MIL::Attributes::FlexibleShapeInfo *)&v141[48 * v138];
              v418[1] = (MIL::Attributes::FlexibleShapeInfo *)(v142 + 48);
              v419 = (MIL::Attributes::FlexibleShapeInfo *)&v141[48 * v140];
LABEL_247:
              if (v132) {
                operator delete(v132);
              }
            }
            else
            {
              long long v133 = *(_OWORD *)__p;
              *((void *)v418[1] + 2) = *(void *)&__p[16];
              *(_OWORD *)uint64_t v132 = v133;
              memset(__p, 0, 24);
              uint64_t v134 = v392;
              *(_OWORD *)((char *)v132 + 24) = *(_OWORD *)&__p[24];
              *((void *)v132 + 5) = v134;
              *(void *)&__p[32] = 0;
              *(void *)&long long v392 = 0;
              *(void *)&__p[24] = 0;
              int v135 = (MIL::Attributes::FlexibleShapeInfo *)((char *)v132 + 48);
            }
            v418[1] = v135;
            if (SBYTE7(v392) < 0)
            {
              operator delete(*(void **)&__p[24]);
              if ((__p[23] & 0x80000000) != 0) {
                goto LABEL_251;
              }
            }
            else if ((__p[23] & 0x80000000) != 0)
            {
LABEL_251:
              operator delete(*(void **)__p);
            }
            unint64_t v34 = (char *)v410;
            long long v33 = v411;
LABEL_202:
            ;
          }
        }
        if (std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::find<std::string>(&v424, (uint64_t)v420))
        {
          *(void *)std::string __p = v420;
          int v147 = std::__hash_table<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v424, (uint64_t)v420, (uint64_t)&std::piecewise_construct, (long long **)__p);
          char v149 = v418[0];
          uint64_t v148 = v418[1];
          uint64_t v150 = v147[5];
          if (v418[1] - v418[0] != v147[6] - v150) {
            goto LABEL_827;
          }
          while (v149 != v148)
          {
            uint64_t v151 = *((unsigned __int8 *)v149 + 23);
            if ((v151 & 0x80u) == 0) {
              uint64_t v152 = *((unsigned __int8 *)v149 + 23);
            }
            else {
              uint64_t v152 = *((void *)v149 + 1);
            }
            uint64_t v153 = *(unsigned __int8 *)(v150 + 23);
            int v154 = (char)v153;
            if ((v153 & 0x80u) != 0) {
              uint64_t v153 = *(void *)(v150 + 8);
            }
            if (v152 != v153) {
              goto LABEL_827;
            }
            if (v154 >= 0) {
              v155 = (unsigned __int8 *)v150;
            }
            else {
              v155 = *(unsigned __int8 **)v150;
            }
            if ((v151 & 0x80) != 0)
            {
              if (memcmp(*(const void **)v149, v155, *((void *)v149 + 1))) {
                goto LABEL_827;
              }
            }
            else if (*((unsigned char *)v149 + 23))
            {
              uint64_t v156 = 0;
              while (*((unsigned __int8 *)v149 + v156) == v155[v156])
              {
                if (v151 == ++v156) {
                  goto LABEL_274;
                }
              }
LABEL_827:
              v375 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v375, "Multiple call ops call the same callee with different argument names.");
              __cxa_throw(v375, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
            }
LABEL_274:
            uint64_t v157 = *((unsigned __int8 *)v149 + 47);
            if ((v157 & 0x80u) == 0) {
              uint64_t v158 = *((unsigned __int8 *)v149 + 47);
            }
            else {
              uint64_t v158 = *((void *)v149 + 4);
            }
            uint64_t v159 = *(unsigned __int8 *)(v150 + 47);
            int v160 = (char)v159;
            if ((v159 & 0x80u) != 0) {
              uint64_t v159 = *(void *)(v150 + 32);
            }
            if (v158 != v159) {
              goto LABEL_827;
            }
            if (v160 >= 0) {
              long long v161 = (unsigned __int8 *)(v150 + 24);
            }
            else {
              long long v161 = *(unsigned __int8 **)(v150 + 24);
            }
            if ((v157 & 0x80) != 0)
            {
              if (memcmp(*((const void **)v149 + 3), v161, *((void *)v149 + 4))) {
                goto LABEL_827;
              }
            }
            else if (*((unsigned char *)v149 + 47))
            {
              uint64_t v162 = 0;
              while (*((unsigned __int8 *)v149 + v162 + 24) == v161[v162])
              {
                if (v157 == ++v162) {
                  goto LABEL_256;
                }
              }
              goto LABEL_827;
            }
LABEL_256:
            char v149 = (MIL::Attributes::FlexibleShapeInfo *)((char *)v149 + 48);
            v150 += 48;
          }
        }
        *(void *)std::string __p = operator new(0x20uLL);
        *(_OWORD *)&__p[8] = xmmword_192DB5600;
        strcpy(*(char **)__p, "NeuralEngineOptimizedIOBuffer");
        MIL::IRObject::TryGetAttributeSharedPtr();
        if ((__p[23] & 0x80000000) != 0)
        {
          operator delete(*(void **)__p);
          if (!v408) {
            goto LABEL_299;
          }
LABEL_291:
          (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 48))(&v405);
          uint64_t v403 = v412;
          v404 = v413;
          if (v413) {
            atomic_fetch_add_explicit(&v413->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          MIL::Builder::FunctionBuilder::Make();
          long long v163 = v404;
          if (v404 && !atomic_fetch_add(&v404->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
            std::__shared_weak_count::__release_weak(v163);
            uint64_t v164 = v406;
            if (!v406) {
              goto LABEL_302;
            }
          }
          else
          {
            uint64_t v164 = v406;
            if (!v406) {
              goto LABEL_302;
            }
          }
          if (!atomic_fetch_add(&v164->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
            std::__shared_weak_count::__release_weak(v164);
          }
LABEL_302:
          memset(__p, 0, 32);
          *(_DWORD *)&__p[32] = 1065353216;
          char v166 = (MIL::IRDictionaryValue *)MIL::IRValue::AsDictionary(v408);
          uint64_t v167 = MIL::IRDictionaryValue::begin(v166);
          uint64_t v168 = MIL::IRDictionaryValue::end(v166);
          while (v167 != v168)
          {
            MIL::IRValue::AsTensor(*(MIL::IRValue **)(v167 + 32));
            unsigned __int8 v169 = MIL::IRValue::GetScalar<BOOL>();
            MIL::IRValue::AsTensor(*(MIL::IRValue **)(v167 + 16));
            MIL::IRValue::GetScalar<std::string>();
            v433[0] = &v400;
            std::__hash_table<std::__hash_value_type<std::string,BOOL>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,BOOL>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,BOOL>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)__p, (uint64_t)&v400, (uint64_t)&std::piecewise_construct, v433)[40] = v169;
            if (SBYTE7(v401) < 0) {
              operator delete((void *)v400);
            }
            uint64_t v167 = *(void *)v167;
          }
          long long v400 = 0u;
          long long v401 = 0u;
          float v402 = *(float *)&__p[32];
          size_t prime = *(void *)&__p[8];
          if (*(void *)&__p[8] == 1)
          {
            size_t prime = 2;
LABEL_331:
            int v178 = operator new(8 * prime);
            int v179 = (void *)v400;
            *(void *)&long long v400 = v178;
            if (v179) {
              operator delete(v179);
            }
            uint64_t v180 = 0;
            *((void *)&v400 + 1) = prime;
            do
              *(void *)(v400 + 8 * v180++) = 0;
            while (prime != v180);
            __int16 v181 = (void **)v401;
            if (!(void)v401) {
              goto LABEL_355;
            }
            size_t v182 = *(void *)(v401 + 8);
            size_t v183 = prime - 1;
            if ((prime & (prime - 1)) == 0)
            {
              size_t v184 = v182 & v183;
              *(void *)(v400 + 8 * v184) = &v401;
              while (1)
              {
                std::string v185 = *v181;
                if (!*v181) {
                  break;
                }
                size_t v186 = v185[1] & v183;
                if (v186 == v184)
                {
                  __int16 v181 = (void **)*v181;
                }
                else if (*(void *)(v400 + 8 * v186))
                {
                  *__int16 v181 = (void *)*v185;
                  uint64_t v187 = 8 * v186;
                  *std::string v185 = **(void **)(v400 + v187);
                  **(void **)(v400 + v187) = v185;
                }
                else
                {
                  *(void *)(v400 + 8 * v186) = v181;
                  __int16 v181 = (void **)v185;
                  size_t v184 = v186;
                }
              }
              goto LABEL_355;
            }
            if (v182 >= prime) {
              v182 %= prime;
            }
            *(void *)(v400 + 8 * v182) = &v401;
            int v188 = *v181;
            if (!*v181)
            {
LABEL_355:
              uint64_t v191 = *(void **)&__p[16];
              if (!*(void *)&__p[16]) {
                goto LABEL_358;
              }
              do
              {
LABEL_356:
                std::__hash_table<std::__hash_value_type<std::string,BOOL>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,BOOL>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,BOOL>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,BOOL> const&>((uint64_t)&v400, (uint64_t)(v191 + 2), (uint64_t)(v191 + 2));
                uint64_t v191 = (void *)*v191;
              }
              while (v191);
              __int16 v192 = *(uint64_t **)&__p[16];
              if (!*(void *)&__p[16]) {
                goto LABEL_358;
              }
              while (1)
              {
                uint64_t v194 = v418[0];
                int v193 = v418[1];
                if (v418[0] != v418[1]) {
                  break;
                }
LABEL_360:
                __int16 v192 = (uint64_t *)*v192;
                if (!v192) {
                  goto LABEL_358;
                }
              }
              while (1)
              {
                uint64_t v195 = *((unsigned __int8 *)v192 + 39);
                if ((v195 & 0x80u) == 0) {
                  uint64_t v196 = *((unsigned __int8 *)v192 + 39);
                }
                else {
                  uint64_t v196 = v192[3];
                }
                uint64_t v197 = *((unsigned __int8 *)v194 + 23);
                int v198 = (char)v197;
                if ((v197 & 0x80u) != 0) {
                  uint64_t v197 = *((void *)v194 + 1);
                }
                if (v196 != v197) {
                  goto LABEL_366;
                }
                uint64_t v199 = v198 >= 0 ? v194 : *(MIL::Attributes::FlexibleShapeInfo **)v194;
                if ((v195 & 0x80) == 0) {
                  break;
                }
                if (!memcmp((const void *)v192[2], v199, v192[3])) {
                  goto LABEL_383;
                }
LABEL_366:
                uint64_t v194 = (MIL::Attributes::FlexibleShapeInfo *)((char *)v194 + 48);
                if (v194 == v193) {
                  goto LABEL_360;
                }
              }
              if (*((unsigned char *)v192 + 39))
              {
                uint64_t v200 = (unsigned __int8 *)(v192 + 2);
                while (*v200 == *(unsigned __int8 *)v199)
                {
                  ++v200;
                  uint64_t v199 = (MIL::Attributes::FlexibleShapeInfo *)((char *)v199 + 1);
                  if (!--v195) {
                    goto LABEL_383;
                  }
                }
                goto LABEL_366;
              }
LABEL_383:
              char v201 = *((unsigned char *)v192 + 40);
              v433[0] = (long long *)((char *)v194 + 24);
              std::__hash_table<std::__hash_value_type<std::string,BOOL>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,BOOL>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,BOOL>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v400, (unsigned __int8 *)v194 + 24, (uint64_t)&std::piecewise_construct, v433)[40] = v201;
              char v202 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>(&v400, (unsigned __int8 *)v194);
              uint64_t v203 = v202;
              if (v202)
              {
                unint64_t v204 = *((void *)&v400 + 1);
                unint64_t v205 = *((void *)v202 + 1);
                uint8x8_t v206 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v400 + 8));
                v206.i16[0] = vaddlv_u8(v206);
                if (v206.u32[0] > 1uLL)
                {
                  if (v205 >= *((void *)&v400 + 1)) {
                    v205 %= *((void *)&v400 + 1);
                  }
                }
                else
                {
                  v205 &= *((void *)&v400 + 1) - 1;
                }
                uint64_t v207 = *(unsigned __int8 **)(v400 + 8 * v205);
                do
                {
                  __int16 v208 = v207;
                  uint64_t v207 = *(unsigned __int8 **)v207;
                }
                while (v207 != v202);
                if (v208 == (unsigned __int8 *)&v401) {
                  goto LABEL_401;
                }
                unint64_t v209 = *((void *)v208 + 1);
                if (v206.u32[0] > 1uLL)
                {
                  if (v209 >= *((void *)&v400 + 1)) {
                    v209 %= *((void *)&v400 + 1);
                  }
                }
                else
                {
                  v209 &= *((void *)&v400 + 1) - 1;
                }
                if (v209 != v205)
                {
LABEL_401:
                  if (!*(void *)v202) {
                    goto LABEL_402;
                  }
                  unint64_t v210 = *(void *)(*(void *)v202 + 8);
                  if (v206.u32[0] > 1uLL)
                  {
                    if (v210 >= *((void *)&v400 + 1)) {
                      v210 %= *((void *)&v400 + 1);
                    }
                  }
                  else
                  {
                    v210 &= *((void *)&v400 + 1) - 1;
                  }
                  if (v210 != v205) {
LABEL_402:
                  }
                    *(void *)(v400 + 8 * v205) = 0;
                }
                uint64_t v211 = *(void *)v202;
                if (*(void *)v202)
                {
                  unint64_t v212 = *(void *)(v211 + 8);
                  if (v206.u32[0] > 1uLL)
                  {
                    if (v212 >= v204) {
                      v212 %= v204;
                    }
                  }
                  else
                  {
                    v212 &= v204 - 1;
                  }
                  if (v212 != v205)
                  {
                    *(void *)(v400 + 8 * v212) = v208;
                    uint64_t v211 = *(void *)v202;
                  }
                }
                *(void *)__int16 v208 = v211;
                *(void *)char v202 = 0;
                --*((void *)&v401 + 1);
                if ((char)v202[39] < 0) {
                  operator delete(*((void **)v202 + 2));
                }
                operator delete(v203);
              }
              goto LABEL_366;
            }
            while (1)
            {
              size_t v190 = v188[1];
              if (v190 >= prime) {
                v190 %= prime;
              }
              if (v190 == v182) {
                goto LABEL_349;
              }
              if (*(void *)(v400 + 8 * v190))
              {
                *__int16 v181 = (void *)*v188;
                uint64_t v189 = 8 * v190;
                void *v188 = **(void **)(v400 + v189);
                **(void **)(v400 + v189) = v188;
                int v188 = v181;
LABEL_349:
                __int16 v181 = (void **)v188;
                int v188 = (void *)*v188;
                if (!v188) {
                  goto LABEL_355;
                }
              }
              else
              {
                *(void *)(v400 + 8 * v190) = v181;
                __int16 v181 = (void **)v188;
                int v188 = (void *)*v188;
                size_t v182 = v190;
                if (!v188) {
                  goto LABEL_355;
                }
              }
            }
          }
          if ((*(void *)&__p[8] & (*(void *)&__p[8] - 1)) != 0)
          {
            size_t prime = std::__next_prime(*(size_t *)&__p[8]);
            int8x8_t v171 = *(int8x8_t *)((char *)&v400 + 8);
            BOOL v172 = prime >= *((void *)&v400 + 1);
            if (prime > *((void *)&v400 + 1)) {
              goto LABEL_330;
            }
          }
          else
          {
            int8x8_t v171 = 0;
            BOOL v172 = 1;
            if (*(void *)&__p[8])
            {
LABEL_330:
              if (prime >> 61) {
                std::__throw_bad_array_new_length[abi:ne180100]();
              }
              goto LABEL_331;
            }
          }
          if (v172) {
            goto LABEL_355;
          }
          unint64_t v173 = vcvtps_u32_f32((float)*((unint64_t *)&v401 + 1) / v402);
          if (*(void *)&v171 < 3uLL
            || (uint8x8_t v174 = (uint8x8_t)vcnt_s8(v171), v174.i16[0] = vaddlv_u8(v174), v174.u32[0] > 1uLL))
          {
            unint64_t v173 = std::__next_prime(v173);
          }
          else
          {
            uint64_t v175 = 1 << -(char)__clz(v173 - 1);
            if (v173 >= 2) {
              unint64_t v173 = v175;
            }
          }
          if (prime <= v173) {
            size_t prime = v173;
          }
          if (prime >= *(void *)&v171) {
            goto LABEL_355;
          }
          if (!prime)
          {
            uint64_t v239 = (void *)v400;
            *(void *)&long long v400 = 0;
            if (v239) {
              operator delete(v239);
            }
            *((void *)&v400 + 1) = 0;
            uint64_t v191 = *(void **)&__p[16];
            if (!*(void *)&__p[16])
            {
LABEL_358:
              (*(void (**)(E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset *))(*(void *)a1 + 40))(a1);
              E5Common::Utils::MILDictFromCpp<std::string,BOOL>((uint64_t)&v400, (void **)&v399);
              v397 = operator new(0x20uLL);
              long long v398 = xmmword_192DB5600;
              strcpy((char *)v397, "NeuralEngineOptimizedIOBuffer");
              v395[1] = v399;
              if (v399) {
                operator new();
              }
              v396 = 0;
              uint64_t v399 = 0;
              MIL::Builder::FunctionBuilder::SetAttribute();
              uint64_t v213 = v396;
              if (v396 && !atomic_fetch_add(&v396->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v213->__on_zero_shared)(v213);
                std::__shared_weak_count::__release_weak(v213);
                if ((SHIBYTE(v398) & 0x80000000) == 0)
                {
LABEL_414:
                  MIL::Builder::FunctionBuilder::CreateFunction(v395, v407);
                  (*(void (**)(uint64_t, E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset *))(*(void *)v395[0] + 184))(v395[0], a1);
                  (*(void (**)(uint64_t *__return_ptr))(*(void *)v395[0] + 224))(&v394);
                  v433[0] = (long long *)v420;
                  int v214 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v430, (unsigned __int8 *)v420, (uint64_t)&std::piecewise_construct, v433);
                  if (v394) {
                    operator new();
                  }
                  uint64_t v394 = 0;
                  char v215 = (std::__shared_weak_count *)*((void *)v214 + 6);
                  *((void *)v214 + 5) = 0;
                  *((void *)v214 + 6) = 0;
                  if (v215 && !atomic_fetch_add(&v215->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                  {
                    ((void (*)(std::__shared_weak_count *))v215->__on_zero_shared)(v215);
                    std::__shared_weak_count::__release_weak(v215);
                    uint64_t v216 = v394;
                    uint64_t v394 = 0;
                    if (!v216)
                    {
LABEL_420:
                      uint64_t v217 = v395[0];
                      v395[0] = 0;
                      if (v217) {
                        (*(void (**)(uint64_t))(*(void *)v217 + 8))(v217);
                      }
                      BOOL v218 = (void *)v399;
                      uint64_t v399 = 0;
                      if (v218) {
                        (*(void (**)(void *))(*(void *)v218 + 8))(v218);
                      }
                      char v219 = (void **)v401;
                      if ((void)v401)
                      {
                        do
                        {
                          long long v229 = (void **)*v219;
                          if (*((char *)v219 + 39) < 0) {
                            operator delete(v219[2]);
                          }
                          operator delete(v219);
                          char v219 = v229;
                        }
                        while (v229);
                      }
                      std::string v220 = (void *)v400;
                      *(void *)&long long v400 = 0;
                      if (v220) {
                        operator delete(v220);
                      }
                      std::string v221 = *(void ***)&__p[16];
                      if (*(void *)&__p[16])
                      {
                        do
                        {
                          v230 = (void **)*v221;
                          if (*((char *)v221 + 39) < 0) {
                            operator delete(v221[2]);
                          }
                          operator delete(v221);
                          std::string v221 = v230;
                        }
                        while (v230);
                      }
                      std::string v222 = *(void **)__p;
                      *(void *)std::string __p = 0;
                      if (v222) {
                        operator delete(v222);
                      }
                      long long v177 = v407;
                      v407 = 0;
                      if (v177) {
                        goto LABEL_431;
                      }
                      goto LABEL_432;
                    }
                  }
                  else
                  {
                    uint64_t v216 = v394;
                    uint64_t v394 = 0;
                    if (!v216) {
                      goto LABEL_420;
                    }
                  }
                  (*(void (**)(uint64_t))(*(void *)v216 + 8))(v216);
                  goto LABEL_420;
                }
              }
              else if ((SHIBYTE(v398) & 0x80000000) == 0)
              {
                goto LABEL_414;
              }
              operator delete(v397);
              goto LABEL_414;
            }
            goto LABEL_356;
          }
          goto LABEL_330;
        }
        if (v408) {
          goto LABEL_291;
        }
LABEL_299:
        (*(void (**)(long long *__return_ptr))(*(void *)v412 + 224))(&v400);
        *(void *)std::string __p = v420;
        int v165 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v430, (unsigned __int8 *)v420, (uint64_t)&std::piecewise_construct, (long long **)__p);
        if ((void)v400) {
          operator new();
        }
        *(void *)&long long v400 = 0;
        uint64_t v176 = (std::__shared_weak_count *)*((void *)v165 + 6);
        *((void *)v165 + 5) = 0;
        *((void *)v165 + 6) = 0;
        if (!v176 || atomic_fetch_add(&v176->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          long long v177 = (MIL::Builder::FunctionBuilder *)v400;
          *(void *)&long long v400 = 0;
          if (!v177) {
            goto LABEL_432;
          }
LABEL_431:
          (*(void (**)(MIL::Builder::FunctionBuilder *))(*(void *)v177 + 8))(v177);
          goto LABEL_432;
        }
        ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
        std::__shared_weak_count::__release_weak(v176);
        long long v177 = (MIL::Builder::FunctionBuilder *)v400;
        *(void *)&long long v400 = 0;
        if (v177) {
          goto LABEL_431;
        }
LABEL_432:
        *(void *)std::string __p = v420;
        std::string v223 = std::__hash_table<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v424, (uint64_t)v420, (uint64_t)&std::piecewise_construct, (long long **)__p);
        std::string v224 = v223;
        std::string v225 = (void **)(v223 + 5);
        uint64_t v226 = v223[5];
        if (v226)
        {
          uint64_t v227 = v223[6];
          std::string v228 = (void *)v223[5];
          if (v227 == v226)
          {
LABEL_447:
            v224[6] = v226;
            operator delete(v228);
            std::__shared_weak_count *v225 = 0;
            v225[1] = 0;
            v225[2] = 0;
            goto LABEL_448;
          }
          while (1)
          {
            if (*(char *)(v227 - 1) < 0)
            {
              operator delete(*(void **)(v227 - 24));
              if ((*(char *)(v227 - 25) & 0x80000000) == 0) {
                goto LABEL_442;
              }
LABEL_445:
              operator delete(*(void **)(v227 - 48));
              v227 -= 48;
              if (v227 == v226)
              {
LABEL_446:
                std::string v228 = *v225;
                goto LABEL_447;
              }
            }
            else
            {
              if (*(char *)(v227 - 25) < 0) {
                goto LABEL_445;
              }
LABEL_442:
              v227 -= 48;
              if (v227 == v226) {
                goto LABEL_446;
              }
            }
          }
        }
LABEL_448:
        *(_OWORD *)(v224 + 5) = *(_OWORD *)v418;
        v224[7] = (uint64_t)v419;
        v418[1] = 0;
        v419 = 0;
        v418[0] = 0;
        uint64_t v231 = v409;
        if (v409 && !atomic_fetch_add(&v409->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v231->__on_zero_shared)(v231);
          std::__shared_weak_count::__release_weak(v231);
          long long v232 = (void **)v410;
          if (!v410) {
            goto LABEL_458;
          }
        }
        else
        {
          long long v232 = (void **)v410;
          if (!v410) {
            goto LABEL_458;
          }
        }
        long long v233 = v411;
        std::string v234 = v232;
        if (v411 != v232)
        {
          do
          {
            if (*((char *)v233 - 1) < 0) {
              operator delete(*(v233 - 3));
            }
            v233 -= 3;
          }
          while (v233 != v232);
          std::string v234 = v410;
        }
        v411 = v232;
        operator delete(v234);
LABEL_458:
        BOOL v235 = v413;
        if (v413 && !atomic_fetch_add(&v413->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v235->__on_zero_shared)(v235);
          std::__shared_weak_count::__release_weak(v235);
          std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>>>::destroy((uint64_t)&v415, v416);
          long long v236 = v418[0];
          if (!v418[0]) {
            goto LABEL_470;
          }
LABEL_461:
          uint64_t v237 = v418[1];
          std::string v238 = v236;
          if (v418[1] == v236)
          {
LABEL_469:
            v418[1] = v236;
            operator delete(v238);
            goto LABEL_470;
          }
          while (1)
          {
            if (*((char *)v237 - 1) < 0)
            {
              operator delete(*((void **)v237 - 3));
              if ((*((char *)v237 - 25) & 0x80000000) == 0) {
                goto LABEL_464;
              }
LABEL_467:
              operator delete(*((void **)v237 - 6));
              uint64_t v237 = (MIL::Attributes::FlexibleShapeInfo *)((char *)v237 - 48);
              if (v237 == v236)
              {
LABEL_468:
                std::string v238 = v418[0];
                goto LABEL_469;
              }
            }
            else
            {
              if (*((char *)v237 - 25) < 0) {
                goto LABEL_467;
              }
LABEL_464:
              uint64_t v237 = (MIL::Attributes::FlexibleShapeInfo *)((char *)v237 - 48);
              if (v237 == v236) {
                goto LABEL_468;
              }
            }
          }
        }
        std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>>>::destroy((uint64_t)&v415, v416);
        long long v236 = v418[0];
        if (v418[0]) {
          goto LABEL_461;
        }
LABEL_470:
        if (v421 < 0) {
          operator delete(v420[0]);
        }
        uint64_t v26 = v386;
LABEL_41:
        v26 += 2;
        unint64_t v25 = v387;
      }
      v240 = v423;
      if (v423 && !atomic_fetch_add(&v423->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v240->__on_zero_shared)(v240);
        std::__shared_weak_count::__release_weak(v240);
      }
      uint8x8_t v10 = v384 + 24;
      if (v384 + 24 == v383) {
        goto LABEL_489;
      }
    }
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    uint64_t v13 = v400;
    *(void *)&long long v400 = 0;
    if (!v13) {
      goto LABEL_19;
    }
LABEL_18:
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
    goto LABEL_19;
  }
LABEL_489:
  for (j = *(unsigned __int8 **)((*(uint64_t (**)(E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset *))(*(void *)a1 + 72))(a1)
                                + 16); j; j = *(unsigned __int8 **)j)
  {
    if (!std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::find<std::string>(&v430, (uint64_t)(j + 16)))
    {
      (*(void (**)(long long *__return_ptr))(**((void **)j + 5) + 232))(&v400);
      *(void *)std::string __p = j + 16;
      long long v242 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v430, j + 16, (uint64_t)&std::piecewise_construct, (long long **)__p);
      if ((void)v400) {
        operator new();
      }
      *(void *)&long long v400 = 0;
      long long v243 = (std::__shared_weak_count *)*((void *)v242 + 6);
      *((void *)v242 + 5) = 0;
      *((void *)v242 + 6) = 0;
      if (v243 && !atomic_fetch_add(&v243->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v243->__on_zero_shared)(v243);
        std::__shared_weak_count::__release_weak(v243);
        uint64_t v244 = v400;
        *(void *)&long long v400 = 0;
        if (!v244) {
          continue;
        }
LABEL_498:
        (*(void (**)(uint64_t))(*(void *)v244 + 8))(v244);
        continue;
      }
      uint64_t v244 = v400;
      *(void *)&long long v400 = 0;
      if (v244) {
        goto LABEL_498;
      }
    }
  }
  long long v245 = (unsigned __int8 *)v425;
  if ((void)v425)
  {
LABEL_504:
    (*(void (**)(unsigned char *__return_ptr))(*(void *)a1 + 48))(__p);
    *(void *)&long long v400 = v245 + 16;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v430, v245 + 16, (uint64_t)&std::piecewise_construct, (long long **)&v400);
    MIL::Attributes::FlexibleShapeInfo::Make();
    long long v246 = *(std::__shared_weak_count **)&__p[8];
    if (*(void *)&__p[8]
      && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&__p[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v246->__on_zero_shared)(v246);
      std::__shared_weak_count::__release_weak(v246);
    }
    MIL::Attributes::FlexibleShapeInfo::TryGetDefaultShapes((uint64_t *)__p, v418[0]);
    uint64_t v248 = *(void *)__p;
    long long v247 = *(std::__shared_weak_count **)&__p[8];
    if (*(void *)&__p[8]
      && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&__p[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v247->__on_zero_shared)(v247);
      std::__shared_weak_count::__release_weak(v247);
      if (!v248) {
        goto LABEL_576;
      }
    }
    else if (!v248)
    {
      goto LABEL_576;
    }
    MIL::Attributes::FlexibleShapeInfo::TryGetDefaultShapes((uint64_t *)&v400, v418[0]);
    std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>::unordered_map((uint64_t)__p, v400);
    uint64_t v249 = (std::__shared_weak_count *)*((void *)&v400 + 1);
    if (*((void *)&v400 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v400 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v249->__on_zero_shared)(v249);
      std::__shared_weak_count::__release_weak(v249);
    }
    std::string v251 = (std::string *)*((void *)v245 + 5);
    std::string v250 = (std::string *)*((void *)v245 + 6);
    while (1)
    {
      if (v251 == v250)
      {
        MIL::Attributes::FlexibleShapeInfo::SetDefaultShapes();
        v273 = *(char **)&__p[16];
        if (*(void *)&__p[16])
        {
          do
          {
            v280 = *(char **)v273;
            v281 = (void *)*((void *)v273 + 5);
            if (v281)
            {
              *((void *)v273 + 6) = v281;
              operator delete(v281);
            }
            if (v273[39] < 0) {
              operator delete(*((void **)v273 + 2));
            }
            operator delete(v273);
            v273 = v280;
          }
          while (v280);
        }
        uint64_t v274 = *(void **)__p;
        *(void *)std::string __p = 0;
        if (v274) {
          operator delete(v274);
        }
LABEL_576:
        MIL::Attributes::FlexibleShapeInfo::TryGetRangeShapes((uint64_t *)__p, v418[0]);
        uint64_t v276 = *(void *)__p;
        uint64_t v275 = *(std::__shared_weak_count **)&__p[8];
        if (*(void *)&__p[8]
          && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&__p[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v275->__on_zero_shared)(v275);
          std::__shared_weak_count::__release_weak(v275);
          if (!v276) {
            goto LABEL_650;
          }
        }
        else if (!v276)
        {
          goto LABEL_650;
        }
        MIL::Attributes::FlexibleShapeInfo::TryGetRangeShapes((uint64_t *)&v400, v418[0]);
        std::unordered_map<std::string,std::vector<std::pair<int,int>>>::unordered_map((uint64_t)__p, v400);
        uint64_t v277 = (std::__shared_weak_count *)*((void *)&v400 + 1);
        if (*((void *)&v400 + 1)
          && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v400 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v277->__on_zero_shared)(v277);
          std::__shared_weak_count::__release_weak(v277);
        }
        v279 = (const std::string *)*((void *)v245 + 5);
        uint64_t v278 = (const std::string *)*((void *)v245 + 6);
        while (2)
        {
          if (v279 != v278)
          {
            v282 = std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::find<std::string>(__p, (uint64_t)v279);
            if (!v282) {
              goto LABEL_589;
            }
            unint64_t v283 = *(void *)&__p[8];
            unint64_t v284 = v282[1];
            uint8x8_t v285 = (uint8x8_t)vcnt_s8(*(int8x8_t *)&__p[8]);
            v285.i16[0] = vaddlv_u8(v285);
            if (v285.u32[0] > 1uLL)
            {
              if (v284 >= *(void *)&__p[8]) {
                v284 %= *(void *)&__p[8];
              }
            }
            else
            {
              v284 &= *(void *)&__p[8] - 1;
            }
            v286 = *(uint64_t **)(*(void *)__p + 8 * v284);
            do
            {
              int v287 = v286;
              v286 = (uint64_t *)*v286;
            }
            while (v286 != v282);
            if (v287 == (uint64_t *)&__p[16]) {
              goto LABEL_609;
            }
            unint64_t v288 = v287[1];
            if (v285.u32[0] > 1uLL)
            {
              if (v288 >= *(void *)&__p[8]) {
                v288 %= *(void *)&__p[8];
              }
            }
            else
            {
              v288 &= *(void *)&__p[8] - 1;
            }
            if (v288 != v284)
            {
LABEL_609:
              if (!*v282) {
                goto LABEL_610;
              }
              unint64_t v289 = *(void *)(*v282 + 8);
              if (v285.u32[0] > 1uLL)
              {
                if (v289 >= *(void *)&__p[8]) {
                  v289 %= *(void *)&__p[8];
                }
              }
              else
              {
                v289 &= *(void *)&__p[8] - 1;
              }
              if (v289 != v284) {
LABEL_610:
              }
                *(void *)(*(void *)__p + 8 * v284) = 0;
            }
            uint64_t v290 = *v282;
            if (*v282)
            {
              unint64_t v291 = *(void *)(v290 + 8);
              if (v285.u32[0] > 1uLL)
              {
                if (v291 >= v283) {
                  v291 %= v283;
                }
              }
              else
              {
                v291 &= v283 - 1;
              }
              if (v291 != v284)
              {
                *(void *)(*(void *)__p + 8 * v291) = v287;
                uint64_t v290 = *v282;
              }
            }
            *int v287 = v290;
            uint64_t *v282 = 0;
            --*(void *)&__p[24];
            *(void *)&long long v400 = v282;
            BYTE9(v400) = 1;
            std::string::operator=((std::string *)(v282 + 2), v279 + 1);
            uint64_t v292 = v400;
            if (!(void)v400) {
              goto LABEL_589;
            }
            int v293 = *(char *)(v400 + 39);
            if (v293 >= 0) {
              v294 = (uint64_t *)(v400 + 16);
            }
            else {
              v294 = *(uint64_t **)(v400 + 16);
            }
            if (v293 >= 0) {
              unint64_t v295 = *(unsigned __int8 *)(v400 + 39);
            }
            else {
              unint64_t v295 = *(void *)(v400 + 24);
            }
            unint64_t v296 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v420, v294, v295);
            *(void *)(v292 + 8) = v296;
            if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_unique_prepare[abi:ne180100]((uint64_t)__p, v296, (unsigned __int8 **)(v292 + 16)))
            {
              if (v292)
              {
                v297 = *(void **)(v292 + 40);
                if (v297)
                {
                  *(void *)(v292 + 48) = v297;
                  operator delete(v297);
                }
                if (*(char *)(v292 + 39) < 0) {
                  operator delete(*(void **)(v292 + 16));
                }
                operator delete((void *)v292);
              }
LABEL_589:
              v279 += 2;
              continue;
            }
            unint64_t v298 = *(void *)&__p[8];
            unint64_t v299 = *(void *)(v292 + 8);
            uint8x8_t v300 = (uint8x8_t)vcnt_s8(*(int8x8_t *)&__p[8]);
            v300.i16[0] = vaddlv_u8(v300);
            if (v300.u32[0] > 1uLL)
            {
              if (v299 >= *(void *)&__p[8]) {
                v299 %= *(void *)&__p[8];
              }
            }
            else
            {
              v299 &= *(void *)&__p[8] - 1;
            }
            v301 = *(void **)(*(void *)__p + 8 * v299);
            if (v301)
            {
              *(void *)uint64_t v292 = *v301;
              goto LABEL_643;
            }
            *(void *)uint64_t v292 = *(void *)&__p[16];
            *(void *)&__p[16] = v292;
            *(void *)(*(void *)__p + 8 * v299) = &__p[16];
            if (*(void *)v292)
            {
              unint64_t v302 = *(void *)(*(void *)v292 + 8);
              if (v300.u32[0] > 1uLL)
              {
                if (v302 >= v298) {
                  v302 %= v298;
                }
              }
              else
              {
                v302 &= v298 - 1;
              }
              v301 = (void *)(*(void *)__p + 8 * v302);
LABEL_643:
              void *v301 = v292;
            }
            ++*(void *)&__p[24];
            if (BYTE9(v400)) {
              BYTE9(v400) = 0;
            }
            goto LABEL_589;
          }
          break;
        }
        MIL::Attributes::FlexibleShapeInfo::SetRangeShapes();
        v303 = *(char **)&__p[16];
        if (*(void *)&__p[16])
        {
          do
          {
            long long v357 = *(char **)v303;
            long long v358 = (void *)*((void *)v303 + 5);
            if (v358)
            {
              *((void *)v303 + 6) = v358;
              operator delete(v358);
            }
            if (v303[39] < 0) {
              operator delete(*((void **)v303 + 2));
            }
            operator delete(v303);
            v303 = v357;
          }
          while (v357);
        }
        v304 = *(void **)__p;
        *(void *)std::string __p = 0;
        if (v304) {
          operator delete(v304);
        }
LABEL_650:
        uint64_t EnumeratedShapes = MIL::Attributes::FlexibleShapeInfo::GetEnumeratedShapes(v418[0]);
        std::unordered_map<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>::unordered_map((uint64_t)&v400, EnumeratedShapes);
        v306 = (uint64_t *)v401;
        if (!(void)v401)
        {
LABEL_651:
          (*(void (**)(unsigned char *__return_ptr))(*(void *)a1 + 48))(__p);
          v420[0] = (long long *)(v245 + 16);
          std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v430, v245 + 16, (uint64_t)&std::piecewise_construct, v420);
          MIL::Attributes::FlexibleShapeInfo::Rewrite();
          v420[0] = (long long *)(v245 + 16);
          v307 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v430, v245 + 16, (uint64_t)&std::piecewise_construct, v420);
          if (v415) {
            operator new();
          }
          v415 = 0;
          float v359 = (std::__shared_weak_count *)*((void *)v307 + 6);
          *((void *)v307 + 5) = 0;
          *((void *)v307 + 6) = 0;
          if (v359 && !atomic_fetch_add(&v359->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v359->__on_zero_shared)(v359);
            std::__shared_weak_count::__release_weak(v359);
            __int16 v360 = v415;
            v415 = 0;
            if (v360) {
LABEL_785:
            }
              (*((void (**)(char **))*v360 + 1))(v360);
          }
          else
          {
            __int16 v360 = v415;
            v415 = 0;
            if (v360) {
              goto LABEL_785;
            }
          }
          v361 = *(std::__shared_weak_count **)&__p[8];
          if (*(void *)&__p[8]
            && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&__p[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v361->__on_zero_shared)(v361);
            std::__shared_weak_count::__release_weak(v361);
            v362 = (char *)v401;
            if ((void)v401) {
              goto LABEL_802;
            }
          }
          else
          {
            v362 = (char *)v401;
            if (!(void)v401) {
              goto LABEL_789;
            }
            do
            {
LABEL_802:
              v365 = *(char **)v362;
              v366 = (char *)*((void *)v362 + 7);
              if (v366)
              {
                do
                {
                  v368 = *(char **)v366;
                  v369 = (void *)*((void *)v366 + 5);
                  if (v369)
                  {
                    *((void *)v366 + 6) = v369;
                    operator delete(v369);
                  }
                  if (v366[39] < 0) {
                    operator delete(*((void **)v366 + 2));
                  }
                  operator delete(v366);
                  v366 = v368;
                }
                while (v368);
              }
              v367 = (void *)*((void *)v362 + 5);
              *((void *)v362 + 5) = 0;
              if (v367) {
                operator delete(v367);
              }
              if (v362[39] < 0) {
                operator delete(*((void **)v362 + 2));
              }
              operator delete(v362);
              v362 = v365;
            }
            while (v365);
          }
LABEL_789:
          v363 = (void *)v400;
          *(void *)&long long v400 = 0;
          if (v363) {
            operator delete(v363);
          }
          v364 = v418[0];
          v418[0] = 0;
          if (v364)
          {
            MIL::Attributes::FlexibleShapeInfo::~FlexibleShapeInfo(v364);
            MEMORY[0x192FF16B0]();
          }
          long long v245 = *(unsigned __int8 **)v245;
          if (!v245) {
            goto LABEL_812;
          }
          goto LABEL_504;
        }
        while (2)
        {
          if (*((char *)v306 + 39) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)__p, (const std::string::value_type *)v306[2], v306[3]);
          }
          else
          {
            *(_OWORD *)std::string __p = *((_OWORD *)v306 + 1);
            *(void *)&__p[16] = v306[4];
          }
          *(_OWORD *)&__p[24] = 0u;
          long long v392 = 0u;
          float v393 = *((float *)v306 + 18);
          size_t v308 = v306[6];
          if (v308 == 1)
          {
            size_t v308 = 2;
            goto LABEL_675;
          }
          if ((v308 & (v308 - 1)) != 0)
          {
            size_t v308 = std::__next_prime(v306[6]);
            int8x8_t v309 = *(int8x8_t *)&__p[32];
            BOOL v310 = v308 >= *(void *)&__p[32];
            if (v308 > *(void *)&__p[32]) {
              goto LABEL_674;
            }
          }
          else
          {
            int8x8_t v309 = 0;
            BOOL v310 = 1;
            if (v308)
            {
LABEL_674:
              if (v308 >> 61) {
                std::__throw_bad_array_new_length[abi:ne180100]();
              }
LABEL_675:
              uint64_t v314 = operator new(8 * v308);
              int v315 = *(void **)&__p[24];
              *(void *)&__p[24] = v314;
              if (v315) {
                operator delete(v315);
              }
              uint64_t v316 = 0;
              *(void *)&__p[32] = v308;
              do
                *(void *)(*(void *)&__p[24] + 8 * v316++) = 0;
              while (v308 != v316);
              BOOL v317 = (void **)v392;
              if (!(void)v392) {
                goto LABEL_699;
              }
              size_t v318 = *(void *)(v392 + 8);
              size_t v319 = v308 - 1;
              if ((v308 & (v308 - 1)) == 0)
              {
                size_t v320 = v318 & v319;
                *(void *)(*(void *)&__p[24] + 8 * v320) = &v392;
                while (1)
                {
                  int v321 = *v317;
                  if (!*v317) {
                    break;
                  }
                  size_t v322 = v321[1] & v319;
                  if (v322 == v320)
                  {
                    BOOL v317 = (void **)*v317;
                  }
                  else if (*(void *)(*(void *)&__p[24] + 8 * v322))
                  {
                    *BOOL v317 = (void *)*v321;
                    uint64_t v323 = 8 * v322;
                    *int v321 = **(void **)(*(void *)&__p[24] + v323);
                    **(void **)(*(void *)&__p[24] + v323) = v321;
                  }
                  else
                  {
                    *(void *)(*(void *)&__p[24] + 8 * v322) = v317;
                    BOOL v317 = (void **)v321;
                    size_t v320 = v322;
                  }
                }
                goto LABEL_699;
              }
              if (v318 >= v308) {
                v318 %= v308;
              }
              *(void *)(*(void *)&__p[24] + 8 * v318) = &v392;
              v324 = *v317;
              if (!*v317)
              {
LABEL_699:
                uint64_t k = (unsigned __int8 *)v306[7];
                if (k) {
                  goto LABEL_700;
                }
                goto LABEL_701;
              }
              while (1)
              {
LABEL_694:
                size_t v326 = v324[1];
                if (v326 >= v308) {
                  v326 %= v308;
                }
                if (v326 == v318) {
                  goto LABEL_693;
                }
                if (*(void *)(*(void *)&__p[24] + 8 * v326)) {
                  break;
                }
                *(void *)(*(void *)&__p[24] + 8 * v326) = v317;
                BOOL v317 = (void **)v324;
                v324 = (void *)*v324;
                size_t v318 = v326;
                if (!v324) {
                  goto LABEL_699;
                }
              }
              *BOOL v317 = (void *)*v324;
              uint64_t v325 = 8 * v326;
              void *v324 = **(void **)(*(void *)&__p[24] + v325);
              **(void **)(*(void *)&__p[24] + v325) = v324;
              v324 = v317;
LABEL_693:
              BOOL v317 = (void **)v324;
              v324 = (void *)*v324;
              if (!v324) {
                goto LABEL_699;
              }
              goto LABEL_694;
            }
          }
          if (v310) {
            goto LABEL_699;
          }
          unint64_t v311 = vcvtps_u32_f32((float)*((unint64_t *)&v392 + 1) / v393);
          if (*(void *)&v309 < 3uLL
            || (uint8x8_t v312 = (uint8x8_t)vcnt_s8(v309), v312.i16[0] = vaddlv_u8(v312), v312.u32[0] > 1uLL))
          {
            unint64_t v311 = std::__next_prime(v311);
          }
          else
          {
            uint64_t v313 = 1 << -(char)__clz(v311 - 1);
            if (v311 >= 2) {
              unint64_t v311 = v313;
            }
          }
          if (v308 <= v311) {
            size_t v308 = v311;
          }
          if (v308 >= *(void *)&v309) {
            goto LABEL_699;
          }
          if (v308) {
            goto LABEL_674;
          }
          long long v356 = *(void **)&__p[24];
          *(void *)&__p[24] = 0;
          if (v356) {
            operator delete(v356);
          }
          *(void *)&__p[32] = 0;
          for (uint64_t k = (unsigned __int8 *)v306[7]; k; uint64_t k = *(unsigned __int8 **)k)
LABEL_700:
            std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::vector<MIL::IRDimension const*>> const&>((uint64_t)&__p[24], k + 16, (long long *)k + 1);
LABEL_701:
          v329 = (std::string *)*((void *)v245 + 5);
          v328 = (std::string *)*((void *)v245 + 6);
          if (v329 == v328)
          {
LABEL_757:
            if ((__p[23] & 0x80000000) != 0) {
              std::string::__init_copy_ctor_external(&v390, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
            }
            else {
              std::string v390 = *(std::string *)__p;
            }
            MIL::Attributes::FlexibleShapeInfo::AddEnumeratedShapes();
            if (SHIBYTE(v390.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(v390.__r_.__value_.__l.__data_);
              unsigned int v352 = (char *)v392;
              if (!(void)v392) {
                goto LABEL_764;
              }
            }
            else
            {
              unsigned int v352 = (char *)v392;
              if (!(void)v392) {
                goto LABEL_764;
              }
            }
            do
            {
              v354 = *(char **)v352;
              long long v355 = (void *)*((void *)v352 + 5);
              if (v355)
              {
                *((void *)v352 + 6) = v355;
                operator delete(v355);
              }
              if (v352[39] < 0) {
                operator delete(*((void **)v352 + 2));
              }
              operator delete(v352);
              unsigned int v352 = v354;
            }
            while (v354);
LABEL_764:
            int v353 = *(void **)&__p[24];
            *(void *)&__p[24] = 0;
            if (v353) {
              operator delete(v353);
            }
            if ((__p[23] & 0x80000000) != 0) {
              operator delete(*(void **)__p);
            }
            v306 = (uint64_t *)*v306;
            if (!v306) {
              goto LABEL_651;
            }
            continue;
          }
          break;
        }
        while (2)
        {
          while (2)
          {
            v330 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>(&__p[24], (unsigned __int8 *)v329);
            v331 = v330;
            if (!v330) {
              goto LABEL_704;
            }
            unint64_t v332 = *(void *)&__p[32];
            unint64_t v333 = *((void *)v330 + 1);
            uint8x8_t v334 = (uint8x8_t)vcnt_s8(*(int8x8_t *)&__p[32]);
            v334.i16[0] = vaddlv_u8(v334);
            if (v334.u32[0] > 1uLL)
            {
              if (v333 >= *(void *)&__p[32]) {
                v333 %= *(void *)&__p[32];
              }
            }
            else
            {
              v333 &= *(void *)&__p[32] - 1;
            }
            v335 = *(unsigned __int8 **)(*(void *)&__p[24] + 8 * v333);
            do
            {
              v336 = v335;
              v335 = *(unsigned __int8 **)v335;
            }
            while (v335 != v330);
            if (v336 == (unsigned __int8 *)&v392) {
              goto LABEL_723;
            }
            unint64_t v337 = *((void *)v336 + 1);
            if (v334.u32[0] > 1uLL)
            {
              if (v337 >= *(void *)&__p[32]) {
                v337 %= *(void *)&__p[32];
              }
            }
            else
            {
              v337 &= *(void *)&__p[32] - 1;
            }
            if (v337 != v333)
            {
LABEL_723:
              if (!*(void *)v330) {
                goto LABEL_724;
              }
              unint64_t v338 = *(void *)(*(void *)v330 + 8);
              if (v334.u32[0] > 1uLL)
              {
                if (v338 >= *(void *)&__p[32]) {
                  v338 %= *(void *)&__p[32];
                }
              }
              else
              {
                v338 &= *(void *)&__p[32] - 1;
              }
              if (v338 != v333) {
LABEL_724:
              }
                *(void *)(*(void *)&__p[24] + 8 * v333) = 0;
            }
            uint64_t v339 = *(void *)v330;
            if (*(void *)v330)
            {
              unint64_t v340 = *(void *)(v339 + 8);
              if (v334.u32[0] > 1uLL)
              {
                if (v340 >= v332) {
                  v340 %= v332;
                }
              }
              else
              {
                v340 &= v332 - 1;
              }
              if (v340 != v333)
              {
                *(void *)(*(void *)&__p[24] + 8 * v340) = v336;
                uint64_t v339 = *(void *)v330;
              }
            }
            *(void *)v336 = v339;
            *(void *)v330 = 0;
            long long v341 = (void **)(v330 + 16);
            --*((void *)&v392 + 1);
            std::string::operator=((std::string *)(v330 + 16), v329 + 1);
            int v342 = (char)v331[39];
            if (v342 >= 0) {
              uint64_t v343 = (uint64_t *)(v331 + 16);
            }
            else {
              uint64_t v343 = (uint64_t *)*((void *)v331 + 2);
            }
            if (v342 >= 0) {
              unint64_t v344 = v331[39];
            }
            else {
              unint64_t v344 = *((void *)v331 + 3);
            }
            unint64_t v345 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v420, v343, v344);
            *((void *)v331 + 1) = v345;
            if (std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__node_insert_unique_prepare[abi:ne180100]((uint64_t)&__p[24], v345, (unsigned __int8 **)v331 + 2))
            {
              v346 = (void *)*((void *)v331 + 5);
              if (v346)
              {
                *((void *)v331 + 6) = v346;
                operator delete(v346);
              }
              if ((char)v331[39] < 0) {
                operator delete(*v341);
              }
              operator delete(v331);
LABEL_704:
              v329 += 2;
              if (v329 == v328) {
                goto LABEL_757;
              }
              continue;
            }
            break;
          }
          unint64_t v347 = *(void *)&__p[32];
          unint64_t v348 = *((void *)v331 + 1);
          uint8x8_t v349 = (uint8x8_t)vcnt_s8(*(int8x8_t *)&__p[32]);
          v349.i16[0] = vaddlv_u8(v349);
          if (v349.u32[0] > 1uLL)
          {
            if (v348 >= *(void *)&__p[32]) {
              v348 %= *(void *)&__p[32];
            }
          }
          else
          {
            v348 &= *(void *)&__p[32] - 1;
          }
          int v350 = *(unsigned __int8 ***)(*(void *)&__p[24] + 8 * v348);
          if (v350)
          {
            *(void *)v331 = *v350;
            goto LABEL_755;
          }
          *(void *)v331 = v392;
          *(void *)&long long v392 = v331;
          *(void *)(*(void *)&__p[24] + 8 * v348) = &v392;
          if (*(void *)v331)
          {
            unint64_t v351 = *(void *)(*(void *)v331 + 8);
            if (v349.u32[0] > 1uLL)
            {
              if (v351 >= v347) {
                v351 %= v347;
              }
            }
            else
            {
              v351 &= v347 - 1;
            }
            int v350 = (unsigned __int8 **)(*(void *)&__p[24] + 8 * v351);
LABEL_755:
            *int v350 = v331;
          }
          ++*((void *)&v392 + 1);
          v329 += 2;
          if (v329 == v328) {
            goto LABEL_757;
          }
          continue;
        }
      }
      long long v252 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>(__p, (unsigned __int8 *)v251);
      if (v252)
      {
        unint64_t v253 = *(void *)&__p[8];
        unint64_t v254 = *((void *)v252 + 1);
        uint8x8_t v255 = (uint8x8_t)vcnt_s8(*(int8x8_t *)&__p[8]);
        v255.i16[0] = vaddlv_u8(v255);
        if (v255.u32[0] > 1uLL)
        {
          if (v254 >= *(void *)&__p[8]) {
            v254 %= *(void *)&__p[8];
          }
        }
        else
        {
          v254 &= *(void *)&__p[8] - 1;
        }
        std::string v256 = *(unsigned __int8 **)(*(void *)__p + 8 * v254);
        do
        {
          uint64_t v257 = v256;
          std::string v256 = *(unsigned __int8 **)v256;
        }
        while (v256 != v252);
        if (v257 == &__p[16]) {
          goto LABEL_535;
        }
        unint64_t v258 = *((void *)v257 + 1);
        if (v255.u32[0] > 1uLL)
        {
          if (v258 >= *(void *)&__p[8]) {
            v258 %= *(void *)&__p[8];
          }
        }
        else
        {
          v258 &= *(void *)&__p[8] - 1;
        }
        if (v258 != v254)
        {
LABEL_535:
          if (!*(void *)v252) {
            goto LABEL_536;
          }
          unint64_t v259 = *(void *)(*(void *)v252 + 8);
          if (v255.u32[0] > 1uLL)
          {
            if (v259 >= *(void *)&__p[8]) {
              v259 %= *(void *)&__p[8];
            }
          }
          else
          {
            v259 &= *(void *)&__p[8] - 1;
          }
          if (v259 != v254) {
LABEL_536:
          }
            *(void *)(*(void *)__p + 8 * v254) = 0;
        }
        uint64_t v260 = *(void *)v252;
        if (*(void *)v252)
        {
          unint64_t v261 = *(void *)(v260 + 8);
          if (v255.u32[0] > 1uLL)
          {
            if (v261 >= v253) {
              v261 %= v253;
            }
          }
          else
          {
            v261 &= v253 - 1;
          }
          if (v261 != v254)
          {
            *(void *)(*(void *)__p + 8 * v261) = v257;
            uint64_t v260 = *(void *)v252;
          }
        }
        *(void *)uint64_t v257 = v260;
        *(void *)long long v252 = 0;
        --*(void *)&__p[24];
        *(void *)&long long v400 = v252;
        BYTE9(v400) = 1;
        std::string::operator=((std::string *)(v252 + 16), v251 + 1);
        uint64_t v262 = v400;
        if ((void)v400) {
          break;
        }
      }
LABEL_515:
      v251 += 2;
    }
    int v263 = *(char *)(v400 + 39);
    if (v263 >= 0) {
      uint64_t v264 = (uint64_t *)(v400 + 16);
    }
    else {
      uint64_t v264 = *(uint64_t **)(v400 + 16);
    }
    if (v263 >= 0) {
      unint64_t v265 = *(unsigned __int8 *)(v400 + 39);
    }
    else {
      unint64_t v265 = *(void *)(v400 + 24);
    }
    unint64_t v266 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v420, v264, v265);
    *(void *)(v262 + 8) = v266;
    if (std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__node_insert_unique_prepare[abi:ne180100]((uint64_t)__p, v266, (unsigned __int8 **)(v262 + 16)))
    {
      if (v262)
      {
        v267 = *(void **)(v262 + 40);
        if (v267)
        {
          *(void *)(v262 + 48) = v267;
          operator delete(v267);
        }
        if (*(char *)(v262 + 39) < 0) {
          operator delete(*(void **)(v262 + 16));
        }
        operator delete((void *)v262);
      }
      goto LABEL_515;
    }
    unint64_t v268 = *(void *)&__p[8];
    unint64_t v269 = *(void *)(v262 + 8);
    uint8x8_t v270 = (uint8x8_t)vcnt_s8(*(int8x8_t *)&__p[8]);
    v270.i16[0] = vaddlv_u8(v270);
    if (v270.u32[0] > 1uLL)
    {
      if (v269 >= *(void *)&__p[8]) {
        v269 %= *(void *)&__p[8];
      }
    }
    else
    {
      v269 &= *(void *)&__p[8] - 1;
    }
    v271 = *(void **)(*(void *)__p + 8 * v269);
    if (v271)
    {
      *(void *)uint64_t v262 = *v271;
    }
    else
    {
      *(void *)uint64_t v262 = *(void *)&__p[16];
      *(void *)&__p[16] = v262;
      *(void *)(*(void *)__p + 8 * v269) = &__p[16];
      if (!*(void *)v262) {
        goto LABEL_570;
      }
      unint64_t v272 = *(void *)(*(void *)v262 + 8);
      if (v270.u32[0] > 1uLL)
      {
        if (v272 >= v268) {
          v272 %= v268;
        }
      }
      else
      {
        v272 &= v268 - 1;
      }
      v271 = (void *)(*(void *)__p + 8 * v272);
    }
    void *v271 = v262;
LABEL_570:
    ++*(void *)&__p[24];
    if (BYTE9(v400)) {
      BYTE9(v400) = 0;
    }
    goto LABEL_515;
  }
LABEL_812:
  (*(void (**)(E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset *, long long *))(*(void *)a1 + 88))(a1, &v430);
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>>>::__deallocate_node((int)&v424, (char *)v425);
  BOOL v370 = (void *)v424;
  *(void *)&long long v424 = 0;
  if (v370) {
    operator delete(v370);
  }
  if (SHIBYTE(v429) < 0) {
    operator delete(__dst);
  }
  v371 = (void **)v431;
  if ((void)v431)
  {
    do
    {
      while (1)
      {
        v372 = (void **)*v371;
        uint64_t v373 = (std::__shared_weak_count *)v371[6];
        if (v373 && !atomic_fetch_add(&v373->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v373->__on_zero_shared)(v373);
          std::__shared_weak_count::__release_weak(v373);
        }
        if (*((char *)v371 + 39) < 0) {
          break;
        }
        operator delete(v371);
        v371 = v372;
        if (!v372) {
          goto LABEL_824;
        }
      }
      operator delete(v371[2]);
      operator delete(v371);
      v371 = v372;
    }
    while (v372);
  }
LABEL_824:
  uint64_t v374 = (void *)v430;
  *(void *)&long long v430 = 0;
  if (v374) {
    operator delete(v374);
  }
}

void sub_1922849CC(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>>>::__deallocate_node(v1 - 208, *(char **)(v1 - 192));
  unint64_t v3 = *(void **)(v1 - 208);
  *(void *)(v1 - 208) = 0;
  if (v3) {
    operator delete(v3);
  }
  if (*(char *)(v1 - 145) < 0) {
    operator delete(*(void **)(v1 - 168));
  }
  unint64_t v4 = *(void ***)(v1 - 128);
  if (v4)
  {
    do
    {
      while (1)
      {
        size_t v5 = (void **)*v4;
        uint64_t v6 = (std::__shared_weak_count *)v4[6];
        if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
        if (*((char *)v4 + 39) < 0) {
          break;
        }
        operator delete(v4);
        unint64_t v4 = v5;
        if (!v5) {
          goto LABEL_13;
        }
      }
      operator delete(v4[2]);
      operator delete(v4);
      unint64_t v4 = v5;
    }
    while (v5);
  }
LABEL_13:
  unint64_t v7 = *(void **)(v1 - 144);
  *(void *)(v1 - 144) = 0;
  if (v7) {
    operator delete(v7);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_pointer<MIL::IRFunction  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,BOOL>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,BOOL>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,BOOL>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,BOOL> const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  size_t v5 = (unsigned char *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v8 = v7;
  }
  unint64_t v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v44, (uint64_t *)a2, v8);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v3 = v9;
      if (v9 >= v11) {
        unint64_t v3 = v9 % v11;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v9;
    }
    uint64_t v13 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      unint64_t v14 = *v13;
      if (*v13)
      {
        char v15 = v5[23];
        if (v15 >= 0) {
          uint64_t v16 = v5[23];
        }
        else {
          uint64_t v16 = *((void *)v5 + 1);
        }
        if (v15 < 0) {
          size_t v5 = *(unsigned char **)v5;
        }
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v22 = v14[1];
            if (v22 == v10)
            {
              uint64_t v23 = *((unsigned __int8 *)v14 + 39);
              if ((v23 & 0x80u) == 0) {
                uint64_t v24 = *((unsigned __int8 *)v14 + 39);
              }
              else {
                uint64_t v24 = v14[3];
              }
              if (v24 == v16)
              {
                unint64_t v25 = (const void **)(v14 + 2);
                if ((v23 & 0x80) != 0)
                {
                  if (!memcmp(*v25, v5, v14[3])) {
                    return v14;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v14 + 39)) {
                    return v14;
                  }
                  for (unint64_t i = v5; *(unsigned __int8 *)v25 == *i; ++i)
                  {
                    unint64_t v25 = (const void **)((char *)v25 + 1);
                    if (!--v23) {
                      return v14;
                    }
                  }
                }
              }
            }
            else if ((v22 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            unint64_t v14 = (uint64_t *)*v14;
            if (!v14) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v17 = v14[1];
          if (v17 == v10)
          {
            uint64_t v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0) {
              uint64_t v19 = *((unsigned __int8 *)v14 + 39);
            }
            else {
              uint64_t v19 = v14[3];
            }
            if (v19 == v16)
            {
              uint64_t v20 = (const void **)(v14 + 2);
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp(*v20, v5, v14[3])) {
                  return v14;
                }
              }
              else
              {
                if (!*((unsigned char *)v14 + 39)) {
                  return v14;
                }
                for (j = v5; *(unsigned __int8 *)v20 == *j; ++j)
                {
                  uint64_t v20 = (const void **)((char *)v20 + 1);
                  if (!--v18) {
                    return v14;
                  }
                }
              }
            }
          }
          else
          {
            if (v17 >= v11) {
              v17 %= v11;
            }
            if (v17 != v3) {
              break;
            }
          }
          unint64_t v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  uint64_t v27 = (char *)operator new(0x30uLL);
  v44[0] = v27;
  v44[1] = a1 + 16;
  char v45 = 0;
  *(void *)uint64_t v27 = 0;
  *((void *)v27 + 1) = v10;
  unint64_t v28 = (std::string *)(v27 + 16);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v28, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v28->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    *((void *)v27 + 4) = *(void *)(a3 + 16);
  }
  v27[40] = *(unsigned char *)(a3 + 24);
  char v45 = 1;
  float v29 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v30 = *(float *)(a1 + 32);
  if (!v11 || (float)(v30 * (float)v11) < v29)
  {
    BOOL v33 = 1;
    if (v11 >= 3) {
      BOOL v33 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v34 = v33 | (2 * v11);
    unint64_t v35 = vcvtps_u32_f32(v29 / v30);
    if (v34 <= v35) {
      size_t prime = v35;
    }
    else {
      size_t prime = v34;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v37 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v37) {
      goto LABEL_68;
    }
    if (prime < *(void *)&v37)
    {
      unint64_t v38 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v37 < 3uLL || (uint8x8_t v39 = (uint8x8_t)vcnt_s8(v37), v39.i16[0] = vaddlv_u8(v39), v39.u32[0] > 1uLL))
      {
        unint64_t v38 = std::__next_prime(v38);
      }
      else
      {
        uint64_t v40 = 1 << -(char)__clz(v38 - 1);
        if (v38 >= 2) {
          unint64_t v38 = v40;
        }
      }
      if (prime <= v38) {
        size_t prime = v38;
      }
      if (prime < *(void *)&v37) {
LABEL_68:
      }
        std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    unint64_t v41 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        unint64_t v3 = v10 % v11;
        uint64_t v31 = *(void **)(*(void *)a1 + 8 * (v10 % v11));
        uint64_t v32 = (void *)v44[0];
        if (v31) {
          goto LABEL_57;
        }
      }
      else
      {
        unint64_t v3 = v10;
        uint64_t v31 = *(void **)(*(void *)a1 + 8 * v10);
        uint64_t v32 = (void *)v44[0];
        if (v31) {
          goto LABEL_57;
        }
      }
    }
    else
    {
      unint64_t v3 = v41 & v10;
      uint64_t v31 = *(void **)(*(void *)a1 + 8 * (v41 & v10));
      uint64_t v32 = (void *)v44[0];
      if (v31) {
        goto LABEL_57;
      }
    }
LABEL_81:
    *uint64_t v32 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v44[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v44[0])
    {
      unint64_t v42 = *(void *)(*(void *)v44[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v42 >= v11) {
          v42 %= v11;
        }
      }
      else
      {
        v42 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v42) = v44[0];
    }
    goto LABEL_92;
  }
  uint64_t v31 = *(void **)(*(void *)a1 + 8 * v3);
  uint64_t v32 = (void *)v44[0];
  if (!v31) {
    goto LABEL_81;
  }
LABEL_57:
  *uint64_t v32 = *v31;
  *uint64_t v31 = v44[0];
LABEL_92:
  unint64_t v14 = (uint64_t *)v44[0];
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_192285788(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19228579C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, long long **a4)
{
  uint64_t v6 = (unsigned char *)a2;
  unint64_t v8 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v9 = v8;
  }
  unint64_t v10 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v47, (uint64_t *)a2, v9);
  unint64_t v11 = v10;
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v12) {
        unint64_t v4 = v10 % v12;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v10;
    }
    unint64_t v14 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      char v15 = *v14;
      if (*v14)
      {
        char v16 = v6[23];
        if (v16 >= 0) {
          uint64_t v17 = v6[23];
        }
        else {
          uint64_t v17 = *((void *)v6 + 1);
        }
        if (v16 < 0) {
          uint64_t v6 = *(unsigned char **)v6;
        }
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v23 = v15[1];
            if (v23 == v11)
            {
              uint64_t v24 = *((unsigned __int8 *)v15 + 39);
              if ((v24 & 0x80u) == 0) {
                uint64_t v25 = *((unsigned __int8 *)v15 + 39);
              }
              else {
                uint64_t v25 = v15[3];
              }
              if (v25 == v17)
              {
                uint64_t v26 = (const void **)(v15 + 2);
                if ((v24 & 0x80) != 0)
                {
                  if (!memcmp(*v26, v6, v15[3])) {
                    return v15;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v15 + 39)) {
                    return v15;
                  }
                  for (unint64_t i = v6; *(unsigned __int8 *)v26 == *i; ++i)
                  {
                    uint64_t v26 = (const void **)((char *)v26 + 1);
                    if (!--v24) {
                      return v15;
                    }
                  }
                }
              }
            }
            else if ((v23 & (v12 - 1)) != v4)
            {
              goto LABEL_51;
            }
            char v15 = (uint64_t *)*v15;
            if (!v15) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v18 = v15[1];
          if (v18 == v11)
          {
            uint64_t v19 = *((unsigned __int8 *)v15 + 39);
            if ((v19 & 0x80u) == 0) {
              uint64_t v20 = *((unsigned __int8 *)v15 + 39);
            }
            else {
              uint64_t v20 = v15[3];
            }
            if (v20 == v17)
            {
              size_t v21 = (const void **)(v15 + 2);
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp(*v21, v6, v15[3])) {
                  return v15;
                }
              }
              else
              {
                if (!*((unsigned char *)v15 + 39)) {
                  return v15;
                }
                for (j = v6; *(unsigned __int8 *)v21 == *j; ++j)
                {
                  size_t v21 = (const void **)((char *)v21 + 1);
                  if (!--v19) {
                    return v15;
                  }
                }
              }
            }
          }
          else
          {
            if (v18 >= v12) {
              v18 %= v12;
            }
            if (v18 != v4) {
              break;
            }
          }
          char v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_51:
  unint64_t v28 = operator new(0x40uLL);
  v47[0] = v28;
  v47[1] = a1 + 16;
  char v48 = 0;
  void *v28 = 0;
  v28[1] = v11;
  float v29 = (std::string *)(v28 + 2);
  float v30 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v29, *(const std::string::value_type **)v30, *((void *)v30 + 1));
  }
  else
  {
    long long v31 = *v30;
    v28[4] = *((void *)v30 + 2);
    *(_OWORD *)&v29->__r_.__value_.__l.__data_ = v31;
  }
  v28[5] = 0;
  v28[6] = 0;
  v28[7] = 0;
  char v48 = 1;
  float v32 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v33 = *(float *)(a1 + 32);
  if (!v12 || (float)(v33 * (float)v12) < v32)
  {
    BOOL v36 = 1;
    if (v12 >= 3) {
      BOOL v36 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v37 = v36 | (2 * v12);
    unint64_t v38 = vcvtps_u32_f32(v32 / v33);
    if (v37 <= v38) {
      size_t prime = v38;
    }
    else {
      size_t prime = v37;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v40 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v40) {
      goto LABEL_68;
    }
    if (prime < *(void *)&v40)
    {
      unint64_t v41 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v40 < 3uLL || (uint8x8_t v42 = (uint8x8_t)vcnt_s8(v40), v42.i16[0] = vaddlv_u8(v42), v42.u32[0] > 1uLL))
      {
        unint64_t v41 = std::__next_prime(v41);
      }
      else
      {
        uint64_t v43 = 1 << -(char)__clz(v41 - 1);
        if (v41 >= 2) {
          unint64_t v41 = v43;
        }
      }
      if (prime <= v41) {
        size_t prime = v41;
      }
      if (prime < *(void *)&v40) {
LABEL_68:
      }
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v12 = *(void *)(a1 + 8);
    unint64_t v44 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        unint64_t v4 = v11 % v12;
        unint64_t v34 = *(void **)(*(void *)a1 + 8 * (v11 % v12));
        unint64_t v35 = (void *)v47[0];
        if (v34) {
          goto LABEL_57;
        }
      }
      else
      {
        unint64_t v4 = v11;
        unint64_t v34 = *(void **)(*(void *)a1 + 8 * v11);
        unint64_t v35 = (void *)v47[0];
        if (v34) {
          goto LABEL_57;
        }
      }
    }
    else
    {
      unint64_t v4 = v44 & v11;
      unint64_t v34 = *(void **)(*(void *)a1 + 8 * (v44 & v11));
      unint64_t v35 = (void *)v47[0];
      if (v34) {
        goto LABEL_57;
      }
    }
LABEL_81:
    *unint64_t v35 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v47[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v47[0])
    {
      unint64_t v45 = *(void *)(*(void *)v47[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v45 >= v12) {
          v45 %= v12;
        }
      }
      else
      {
        v45 &= v12 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v45) = v47[0];
    }
    goto LABEL_92;
  }
  unint64_t v34 = *(void **)(*(void *)a1 + 8 * v4);
  unint64_t v35 = (void *)v47[0];
  if (!v34) {
    goto LABEL_81;
  }
LABEL_57:
  *unint64_t v35 = *v34;
  void *v34 = v47[0];
LABEL_92:
  char v15 = (uint64_t *)v47[0];
  ++*(void *)(a1 + 24);
  return v15;
}

void sub_192285C10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,void *>>>::operator()[abi:ne180100](v10, v11);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::pair<std::string,std::string>>>>>::__deallocate_node(int a1, char *__p)
{
  if (!__p) {
    return;
  }
  uint64_t v2 = __p;
  do
  {
    unint64_t v3 = *(char **)v2;
    uint64_t v4 = *((void *)v2 + 5);
    if (!v4) {
      goto LABEL_15;
    }
    uint64_t v5 = *((void *)v2 + 6);
    uint64_t v6 = (void *)*((void *)v2 + 5);
    if (v5 != v4)
    {
      while (1)
      {
        if (*(char *)(v5 - 1) < 0)
        {
          operator delete(*(void **)(v5 - 24));
          if (*(char *)(v5 - 25) < 0) {
LABEL_12:
          }
            operator delete(*(void **)(v5 - 48));
        }
        else if (*(char *)(v5 - 25) < 0)
        {
          goto LABEL_12;
        }
        v5 -= 48;
        if (v5 == v4)
        {
          uint64_t v6 = (void *)*((void *)v2 + 5);
          break;
        }
      }
    }
    *((void *)v2 + 6) = v4;
    operator delete(v6);
LABEL_15:
    if (v2[39] < 0) {
      operator delete(*((void **)v2 + 2));
    }
    operator delete(v2);
    uint64_t v2 = v3;
  }
  while (v3);
}

uint64_t nitro::ndarray<int>::operator==<half>(uint64_t *a1, uint64_t *a2)
{
  if (a2 == a1) {
    return 1;
  }
  uint64_t v5 = (char *)a1[2];
  uint64_t v4 = (char *)a1[3];
  unint64_t v6 = v4 - v5;
  unint64_t v7 = (v4 - v5) >> 3;
  unint64_t v8 = (void *)a2[2];
  if (v7 != (a2[3] - (uint64_t)v8) >> 3) {
    return 0;
  }
  int64_t v9 = v4 - v5;
  if (v4 == v5) {
    return 1;
  }
  uint64_t v10 = v7 <= 1 ? 1 : (v4 - v5) >> 3;
  if (*(void *)v5 != *v8) {
    return 0;
  }
  uint64_t v11 = 1;
  do
  {
    unint64_t v12 = v11;
    if (v10 == v11) {
      break;
    }
    uint64_t v13 = *(void *)&v5[8 * v11];
    uint64_t v14 = v8[v11++];
  }
  while (v13 == v14);
  BOOL v15 = v12 >= v7;
  if (v12 >= v7)
  {
    uint64_t v16 = *a1;
    if (!*a1) {
      return 1;
    }
    if ((unint64_t)(v9 - 8) >= 8)
    {
      unint64_t v19 = ((unint64_t)(v9 - 8) >> 3) + 1;
      unint64_t v18 = &v5[8 * (v19 & 0x3FFFFFFFFFFFFFFELL)];
      uint64_t v20 = v5 + 8;
      uint64_t v21 = 1;
      uint64_t v22 = v19 & 0x3FFFFFFFFFFFFFFELL;
      uint64_t v23 = 1;
      do
      {
        v21 *= *(v20 - 1);
        v23 *= *v20;
        v20 += 2;
        v22 -= 2;
      }
      while (v22);
      uint64_t v17 = v23 * v21;
      if (v19 == (v19 & 0x3FFFFFFFFFFFFFFELL))
      {
LABEL_20:
        if (v17)
        {
          if ((v6 & 0x8000000000000000) != 0) {
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v25 = operator new(v4 - v5);
          bzero(v25, v6 & 0xFFFFFFFFFFFFFFF8);
          uint64_t v26 = *a2;
          if (v6 >> 3 <= 1) {
            unint64_t v27 = 1;
          }
          else {
            unint64_t v27 = v6 >> 3;
          }
          uint64_t v28 = a2[5];
          uint64_t v29 = a2[8];
          uint64_t v30 = v27 & 0x1FFFFFFFFFFFFFFELL;
          while (1)
          {
            if (v6 <= 7)
            {
              uint64_t v31 = 0;
              int v32 = *(_DWORD *)(v16 + 4 * a1[8]);
              goto LABEL_42;
            }
            uint64_t v33 = a1[5];
            if (v27 < 2) {
              break;
            }
            uint64_t v36 = 0;
            uint64_t v37 = 0;
            unint64_t v38 = (void *)(v33 + 8);
            uint64_t v39 = v27 & 0x1FFFFFFFFFFFFFFELL;
            int8x8_t v40 = v25 + 1;
            do
            {
              v36 += *(v38 - 1) * *(v40 - 1);
              v37 += *v38 * *v40;
              v40 += 2;
              v38 += 2;
              v39 -= 2;
            }
            while (v39);
            uint64_t v34 = v37 + v36;
            uint64_t v35 = v27 & 0x1FFFFFFFFFFFFFFELL;
            if (v27 != v30) {
              goto LABEL_33;
            }
LABEL_35:
            int v32 = *(_DWORD *)(v16 + 4 * (a1[8] + v34));
            if (v27 < 2)
            {
              uint64_t v31 = 0;
              uint64_t v48 = 0;
LABEL_40:
              unint64_t v54 = v27 - v48;
              uint64_t v55 = v48;
              uint64_t v56 = (uint64_t *)(v28 + 8 * v48);
              uint64_t v57 = &v25[v55];
              do
              {
                uint64_t v59 = *v57++;
                uint64_t v58 = v59;
                uint64_t v60 = *v56++;
                v31 += v60 * v58;
                --v54;
              }
              while (v54);
              goto LABEL_42;
            }
            uint64_t v49 = 0;
            uint64_t v50 = 0;
            uint64_t v51 = v27 & 0x1FFFFFFFFFFFFFFELL;
            int v52 = (void *)(v28 + 8);
            BOOL v53 = v25 + 1;
            do
            {
              v49 += *(v52 - 1) * *(v53 - 1);
              v50 += *v52 * *v53;
              v53 += 2;
              v52 += 2;
              v51 -= 2;
            }
            while (v51);
            uint64_t v31 = v50 + v49;
            uint64_t v48 = v27 & 0x1FFFFFFFFFFFFFFELL;
            if (v27 != v30) {
              goto LABEL_40;
            }
LABEL_42:
            _H1 = *(_WORD *)(v26 + 2 * (v29 + v31));
            __asm { FCVT            S1, H1 }
            BOOL v15 = (float)v32 == _S1;
            if ((int)(v6 >> 3) >= 1 && (float)v32 == _S1)
            {
              uint64_t v67 = (v6 >> 3) + 1;
              unint64_t v68 = v6 >> 3;
              while (1)
              {
                uint64_t v69 = (v67 - 2);
                unint64_t v70 = v25[v69] + 1;
                v25[v69] = v70;
                if (v70 < *(void *)&v5[v69 * 8]) {
                  break;
                }
                v25[(v67 - 2)] = 0;
                LODWORD(v68) = v68 - 1;
                if ((unint64_t)--v67 <= 1) {
                  goto LABEL_49;
                }
              }
              if ((int)v68 > 0) {
                continue;
              }
            }
LABEL_49:
            operator delete(v25);
            return v15;
          }
          uint64_t v34 = 0;
          uint64_t v35 = 0;
LABEL_33:
          unint64_t v41 = v27 - v35;
          uint64_t v42 = v35;
          uint64_t v43 = (uint64_t *)(v33 + v42 * 8);
          unint64_t v44 = &v25[v42];
          do
          {
            uint64_t v46 = *v44++;
            uint64_t v45 = v46;
            uint64_t v47 = *v43++;
            v34 += v47 * v45;
            --v41;
          }
          while (v41);
          goto LABEL_35;
        }
        return 1;
      }
    }
    else
    {
      uint64_t v17 = 1;
      unint64_t v18 = (char *)a1[2];
    }
    do
    {
      uint64_t v24 = *(void *)v18;
      v18 += 8;
      v17 *= v24;
    }
    while (v18 != v4);
    goto LABEL_20;
  }
  return v15;
}

void sub_192286040(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void nitro::ndarray_container::visit<nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::assign(nitro::ndarray_container const&)::$_0,nitro::ndarray<half>>>(nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::assign(nitro::ndarray_container const&)::$_0,nitro::ndarray<half>>)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v22);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    unint64_t v7 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v7 && v7[280])
    {
      unint64_t v8 = v7 + 16;
      if ((v21 & 0x80u) == 0) {
        int64_t v9 = __p;
      }
      else {
        int64_t v9 = (void **)__p[0];
      }
      if ((v21 & 0x80u) == 0) {
        uint64_t v10 = v21;
      }
      else {
        uint64_t v10 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
    }
    if ((char)v21 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v11 = (file_logger *)global_logger();
    unint64_t v12 = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    uint64_t v13 = (char *)pthread_getspecific(*((void *)v12 + 74));
    if (v13 && v13[280])
    {
      uint64_t v14 = v13 + 16;
      if ((v24 & 0x80u) == 0) {
        BOOL v15 = v23;
      }
      else {
        BOOL v15 = (void **)v23[0];
      }
      if ((v24 & 0x80u) == 0) {
        uint64_t v16 = v24;
      }
      else {
        uint64_t v16 = (uint64_t)v23[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    uint64_t v17 = pthread_getspecific(*((void *)v12 + 74));
    if (v17)
    {
      if (*((unsigned char *)v17 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v12);
        if (*((_DWORD *)v12 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v24 < 0) {
      operator delete(v23[0]);
    }
  }
  unint64_t v18 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1922862AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

uint64_t Espresso::AOT::E5RTGroupMatcher::TagGroups(uint64_t a1, MIL::Transform::ProgramTransformer *a2, uint64_t *a3)
{
  kdebug_trace();
  MIL::Transform::ProgramTransformer::GetProgramBuilder((uint64_t *)&v91, a2);
  uint64_t v5 = v92;
  uint64_t v64 = v91;
  if (v92 && !atomic_fetch_add(&v92->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  Functions = (void *)MIL::Builder::ProgramBuilder::GetFunctions(v64);
  uint64_t v6 = *a3;
  uint64_t v65 = a3[1];
  if (*a3 != v65)
  {
    while (1)
    {
      if (!std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::find<std::string>(Functions, v6))goto LABEL_7; {
      uint64_t v67 = v6;
      }
      MIL::Builder::ProgramBuilder::GetFunction();
      MIL::Builder::FunctionBuilder::SelectedSpecialization(v99);
      MIL::Builder::FunctionBuilder::GetBlock();
      Espresso::AOT::GroupTagger::GroupTagger((Espresso::AOT::GroupTagger *)&v91, (MIL::Builder::BlockBuilder *)v98);
      long long v88 = 0;
      unint64_t v89 = 0;
      unint64_t v90 = 0;
      unint64_t v7 = (uint64_t *)std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__push_back_slow_path<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions> const&>((uint64_t)&v88, &v98);
      unint64_t v8 = (uint64_t *)v88;
      unint64_t v89 = v7;
      *(_OWORD *)unint64_t v85 = 0u;
      *(_OWORD *)long long v86 = 0u;
      int v87 = 1065353216;
      while (v8 != v7)
      {
        unint64_t v84 = 0;
        unint64_t v84 = (MIL::Builder::BlockBuilder *)*(v7 - 2);
        MIL::Builder::BlockBuilder::GetOperations((uint64_t *)&__p, v84);
        uint64_t v10 = v89;
        uint64_t v11 = (std::__shared_weak_count *)*(v89 - 1);
        if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
          unint64_t v89 = v10 - 2;
          unint64_t v12 = (MIL::Builder::OperationBuilder **)__p;
          int64_t v9 = v83;
          if (v83 == __p) {
            goto LABEL_59;
          }
LABEL_17:
          unint64_t v13 = 0;
          while (2)
          {
            MIL::Builder::OperationBuilder::GetBlocks((uint64_t *)&v80, v12[2 * v13]);
            uint64_t v14 = (uint64_t *)v80;
            BOOL v15 = v81;
            if (v80 == v81)
            {
              if (!v80) {
                goto LABEL_55;
              }
LABEL_47:
              uint64_t v31 = v81;
              int v32 = v14;
              if (v81 != v14)
              {
                do
                {
                  uint64_t v33 = (std::__shared_weak_count *)*(v31 - 1);
                  if (v33 && !atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                  {
                    ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
                    std::__shared_weak_count::__release_weak(v33);
                  }
                  v31 -= 2;
                }
                while (v31 != v14);
                int v32 = v80;
              }
              uint64_t v81 = v14;
              operator delete(v32);
            }
            else
            {
              do
              {
                uint64_t v79 = *v14;
                v101[0] = &v79;
                std::__hash_table<std::__hash_value_type<MIL::Builder::BlockBuilder *,std::unordered_map<MIL::Builder::OperationBuilder const*,int>>,std::__unordered_map_hasher<MIL::Builder::BlockBuilder *,std::__hash_value_type<MIL::Builder::BlockBuilder *,std::unordered_map<MIL::Builder::OperationBuilder const*,int>>,std::hash<MIL::Builder::BlockBuilder *>,std::equal_to<MIL::Builder::BlockBuilder *>,true>,std::__unordered_map_equal<MIL::Builder::BlockBuilder *,std::__hash_value_type<MIL::Builder::BlockBuilder *,std::unordered_map<MIL::Builder::OperationBuilder const*,int>>,std::equal_to<MIL::Builder::BlockBuilder *>,std::hash<MIL::Builder::BlockBuilder *>,true>,std::allocator<std::__hash_value_type<MIL::Builder::BlockBuilder *,std::unordered_map<MIL::Builder::OperationBuilder const*,int>>>>::__emplace_unique_key_args<MIL::Builder::BlockBuilder *,std::piecewise_construct_t const&,std::tuple<MIL::Builder::BlockBuilder *&&>,std::tuple<>>((uint64_t)v85, &v79, (uint64_t)&std::piecewise_construct, v101);
                uint64_t v17 = v89;
                if ((unint64_t)v89 >= v90)
                {
                  unint64_t v19 = (uint64_t *)v88;
                  uint64_t v20 = ((char *)v89 - (unsigned char *)v88) >> 4;
                  unint64_t v21 = v20 + 1;
                  if ((unint64_t)(v20 + 1) >> 60) {
                    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                  }
                  uint64_t v22 = v90 - (void)v88;
                  if ((uint64_t)(v90 - (void)v88) >> 3 > v21) {
                    unint64_t v21 = v22 >> 3;
                  }
                  if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF0) {
                    unint64_t v23 = 0xFFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v23 = v21;
                  }
                  if (v23 >> 60) {
                    std::__throw_bad_array_new_length[abi:ne180100]();
                  }
                  unsigned __int8 v24 = (char *)operator new(16 * v23);
                  uint64_t v25 = &v24[16 * v20];
                  long long v26 = *(_OWORD *)v14;
                  *(_OWORD *)uint64_t v25 = *(_OWORD *)v14;
                  if (*((void *)&v26 + 1))
                  {
                    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v26 + 1) + 8), 1uLL, memory_order_relaxed);
                    uint64_t v17 = v89;
                  }
                  unint64_t v27 = &v24[16 * v23];
                  uint64_t v16 = (uint64_t *)(v25 + 16);
                  if (v17 == v19)
                  {
                    long long v88 = &v24[16 * v20];
                    unint64_t v89 = (uint64_t *)(v25 + 16);
                    unint64_t v90 = (unint64_t)v27;
                  }
                  else
                  {
                    do
                    {
                      long long v28 = *((_OWORD *)v17 - 1);
                      v17 -= 2;
                      *((_OWORD *)v25 - 1) = v28;
                      v25 -= 16;
                      *uint64_t v17 = 0;
                      v17[1] = 0;
                    }
                    while (v17 != v19);
                    unint64_t v19 = (uint64_t *)v88;
                    uint64_t v29 = v89;
                    long long v88 = v25;
                    unint64_t v89 = v16;
                    unint64_t v90 = (unint64_t)v27;
                    while (v29 != v19)
                    {
                      uint64_t v30 = (std::__shared_weak_count *)*(v29 - 1);
                      if (v30 && !atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                      {
                        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
                        std::__shared_weak_count::__release_weak(v30);
                      }
                      v29 -= 2;
                    }
                  }
                  if (v19) {
                    operator delete(v19);
                  }
                }
                else
                {
                  uint64_t *v89 = *v14;
                  uint64_t v18 = v14[1];
                  v17[1] = v18;
                  if (v18) {
                    atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 8), 1uLL, memory_order_relaxed);
                  }
                  uint64_t v16 = v17 + 2;
                }
                unint64_t v89 = v16;
                v14 += 2;
              }
              while (v14 != v15);
              uint64_t v14 = (uint64_t *)v80;
              if (v80) {
                goto LABEL_47;
              }
            }
LABEL_55:
            unint64_t v80 = &v84;
            uint64_t v34 = std::__hash_table<std::__hash_value_type<MIL::Builder::BlockBuilder *,std::unordered_map<MIL::Builder::OperationBuilder const*,int>>,std::__unordered_map_hasher<MIL::Builder::BlockBuilder *,std::__hash_value_type<MIL::Builder::BlockBuilder *,std::unordered_map<MIL::Builder::OperationBuilder const*,int>>,std::hash<MIL::Builder::BlockBuilder *>,std::equal_to<MIL::Builder::BlockBuilder *>,true>,std::__unordered_map_equal<MIL::Builder::BlockBuilder *,std::__hash_value_type<MIL::Builder::BlockBuilder *,std::unordered_map<MIL::Builder::OperationBuilder const*,int>>,std::equal_to<MIL::Builder::BlockBuilder *>,std::hash<MIL::Builder::BlockBuilder *>,true>,std::allocator<std::__hash_value_type<MIL::Builder::BlockBuilder *,std::unordered_map<MIL::Builder::OperationBuilder const*,int>>>>::__emplace_unique_key_args<MIL::Builder::BlockBuilder *,std::piecewise_construct_t const&,std::tuple<MIL::Builder::BlockBuilder *&&>,std::tuple<>>((uint64_t)v85, (uint64_t *)&v84, (uint64_t)&std::piecewise_construct, (void **)&v80);
            v101[0] = *((void **)__p + 2 * v13);
            unint64_t v80 = v101;
            *((_DWORD *)std::__hash_table<std::__hash_value_type<MIL::Builder::OperationBuilder const*,int>,std::__unordered_map_hasher<MIL::Builder::OperationBuilder const*,std::__hash_value_type<MIL::Builder::OperationBuilder const*,int>,std::hash<MIL::Builder::OperationBuilder const*>,std::equal_to<MIL::Builder::OperationBuilder const*>,true>,std::__unordered_map_equal<MIL::Builder::OperationBuilder const*,std::__hash_value_type<MIL::Builder::OperationBuilder const*,int>,std::equal_to<MIL::Builder::OperationBuilder const*>,std::hash<MIL::Builder::OperationBuilder const*>,true>,std::allocator<std::__hash_value_type<MIL::Builder::OperationBuilder const*,int>>>::__emplace_unique_key_args<MIL::Builder::OperationBuilder const*,std::piecewise_construct_t const&,std::tuple<MIL::Builder::OperationBuilder const*&&>,std::tuple<>>((uint64_t)(v34 + 24), (uint64_t *)v101, (uint64_t)&std::piecewise_construct, (void **)&v80)+ 6) = v13++;
            unint64_t v12 = (MIL::Builder::OperationBuilder **)__p;
            int64_t v9 = v83;
            if (v13 >= ((char *)v83 - (unsigned char *)__p) >> 4)
            {
              if (!__p) {
                goto LABEL_12;
              }
              goto LABEL_60;
            }
            continue;
          }
        }
        unint64_t v89 = v10 - 2;
        unint64_t v12 = (MIL::Builder::OperationBuilder **)__p;
        int64_t v9 = v83;
        if (v83 != __p) {
          goto LABEL_17;
        }
LABEL_59:
        unint64_t v12 = v9;
        if (!v9) {
          goto LABEL_12;
        }
LABEL_60:
        if (v9 != v12)
        {
          do
          {
            uint64_t v35 = (std::__shared_weak_count *)*(v9 - 1);
            if (v35)
            {
              if (!atomic_fetch_add(&v35->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
                std::__shared_weak_count::__release_weak(v35);
              }
            }
            v9 -= 2;
          }
          while (v9 != v12);
          int64_t v9 = (MIL::Builder::OperationBuilder **)__p;
        }
        int v83 = v12;
        operator delete(v9);
LABEL_12:
        unint64_t v8 = (uint64_t *)v88;
        unint64_t v7 = v89;
      }
      long long v78 = v98;
      if (*((void *)&v98 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v98 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      Espresso::AOT::E5RTGroupMatcher::TagE5RTEnforcedGroupsInBlock(a1, (MIL::Builder::BlockBuilder **)&v78, &v91, v85);
      uint64_t v36 = (std::__shared_weak_count *)*((void *)&v78 + 1);
      if (*((void *)&v78 + 1)
        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v78 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
        uint64_t v37 = (MIL::Builder::BlockBuilder *)v98;
        if (!*(unsigned char *)(a1 + 60))
        {
LABEL_80:
          long long v73 = v37;
          uint64_t v74 = (std::__shared_weak_count *)*((void *)&v98 + 1);
          if (*((void *)&v98 + 1)) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v98 + 1) + 8), 1uLL, memory_order_relaxed);
          }
          Espresso::AOT::E5RTGroupMatcher::TagQuantizationGroupsInBlock(a1, &v73, &v91, v85, 0);
          uint64_t v42 = v74;
          if (!v74) {
            goto LABEL_84;
          }
          goto LABEL_83;
        }
      }
      else
      {
        uint64_t v37 = (MIL::Builder::BlockBuilder *)v98;
        if (!*(unsigned char *)(a1 + 60)) {
          goto LABEL_80;
        }
      }
      unint64_t v76 = v37;
      uint64_t v77 = (std::__shared_weak_count *)*((void *)&v98 + 1);
      if (*((void *)&v98 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v98 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      Espresso::AOT::E5RTGroupMatcher::TagQuantizationGroupsInBlockWithShrinking(a1, &v76, &v91, v85, 0);
      int8x8_t v40 = v77;
      if (!v77 || atomic_fetch_add(&v77->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
        break;
      }
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
      uint64_t v41 = *((void *)&v98 + 1);
      long long v75 = v98;
      if (*((void *)&v98 + 1)) {
        goto LABEL_76;
      }
LABEL_77:
      Espresso::AOT::E5RTGroupMatcher::MoveDequantPastGatherNd(v38, (MIL::Builder::BlockBuilder **)&v75, v39, v85, 40);
      uint64_t v42 = (std::__shared_weak_count *)*((void *)&v75 + 1);
      if (!*((void *)&v75 + 1)) {
        goto LABEL_84;
      }
LABEL_83:
      if (!atomic_fetch_add(&v42->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
        if (!*(unsigned char *)(a1 + 61)) {
          goto LABEL_91;
        }
        goto LABEL_85;
      }
LABEL_84:
      if (!*(unsigned char *)(a1 + 61)) {
        goto LABEL_91;
      }
LABEL_85:
      long long v72 = v98;
      if (*((void *)&v98 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v98 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      Espresso::AOT::E5RTGroupMatcher::TagStateOpsGroupsInBlockWithShrinking(a1, (MIL::Builder::BlockBuilder **)&v72, &v91, v85, 0);
      uint64_t v43 = (std::__shared_weak_count *)*((void *)&v72 + 1);
      if (*((void *)&v72 + 1)
        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v72 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
LABEL_91:
      unint64_t v44 = *(_DWORD **)(a1 + 8);
      uint64_t v45 = *(_DWORD **)(a1 + 16);
      if (v44 != v45)
      {
        while (*v44 != 9)
        {
          if (++v44 == v45)
          {
            unint64_t v44 = *(_DWORD **)(a1 + 16);
            break;
          }
        }
      }
      if (v44 != v45)
      {
        unint64_t v70 = v99;
        uint64_t v71 = v100;
        if (v100) {
          atomic_fetch_add_explicit(&v100->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        long long v69 = v98;
        if (*((void *)&v98 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v98 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        Espresso::AOT::E5RTGroupMatcher::TagE5MinimalCpuGroupsInProgram(a1, &v70, (MIL::Builder::BlockBuilder **)&v69, &v91);
        uint64_t v46 = (std::__shared_weak_count *)*((void *)&v69 + 1);
        if (*((void *)&v69 + 1)
          && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v69 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
          std::__shared_weak_count::__release_weak(v46);
          uint64_t v47 = v71;
          if (!v71) {
            goto LABEL_108;
          }
        }
        else
        {
          uint64_t v47 = v71;
          if (!v71) {
            goto LABEL_108;
          }
        }
        if (!atomic_fetch_add(&v47->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
          std::__shared_weak_count::__release_weak(v47);
        }
      }
LABEL_108:
      Espresso::AOT::GroupTagger::Finalize((Espresso::AOT::GroupTagger *)&v91);
      uint64_t v48 = v86[0];
      if (v86[0])
      {
        do
        {
          BOOL v53 = (void *)*v48;
          unint64_t v54 = (void *)v48[5];
          if (v54)
          {
            do
            {
              uint64_t v55 = (void *)*v54;
              operator delete(v54);
              unint64_t v54 = v55;
            }
            while (v55);
          }
          uint64_t v56 = (void *)v48[3];
          v48[3] = 0;
          if (v56) {
            operator delete(v56);
          }
          operator delete(v48);
          uint64_t v48 = v53;
        }
        while (v53);
      }
      uint64_t v49 = v85[0];
      v85[0] = 0;
      if (v49) {
        operator delete(v49);
      }
      uint64_t v50 = (uint64_t *)v88;
      if (v88)
      {
        uint64_t v51 = v89;
        int v52 = v88;
        if (v89 != v88)
        {
          do
          {
            uint64_t v57 = (std::__shared_weak_count *)*(v51 - 1);
            if (v57 && !atomic_fetch_add(&v57->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
              std::__shared_weak_count::__release_weak(v57);
            }
            v51 -= 2;
          }
          while (v51 != v50);
          int v52 = v88;
        }
        unint64_t v89 = v50;
        operator delete(v52);
      }
      if (v97 < 0)
      {
        operator delete(v96);
        uint64_t v58 = v95;
        if (!v95) {
          goto LABEL_128;
        }
      }
      else
      {
        uint64_t v58 = v95;
        if (!v95) {
          goto LABEL_128;
        }
      }
      do
      {
        uint64_t v59 = (void *)*v58;
        operator delete(v58);
        uint64_t v58 = v59;
      }
      while (v59);
LABEL_128:
      uint64_t v60 = v94;
      std::string::size_type v94 = 0;
      if (v60) {
        operator delete(v60);
      }
      std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_map<unsigned int,unsigned long long>>,std::__unordered_map_hasher<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_map<unsigned int,unsigned long long>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::__unordered_map_equal<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_map<unsigned int,unsigned long long>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_map<unsigned int,unsigned long long>>>>::~__hash_table((uint64_t)&v93);
      BOOL v61 = (std::__shared_weak_count *)*((void *)&v98 + 1);
      if (*((void *)&v98 + 1)
        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v98 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
        std::__shared_weak_count::__release_weak(v61);
        uint64_t v62 = v100;
        if (v100)
        {
LABEL_133:
          if (!atomic_fetch_add(&v62->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
            std::__shared_weak_count::__release_weak(v62);
          }
        }
      }
      else
      {
        uint64_t v62 = v100;
        if (v100) {
          goto LABEL_133;
        }
      }
      uint64_t v6 = v67;
LABEL_7:
      v6 += 24;
      if (v6 == v65) {
        return kdebug_trace();
      }
    }
    uint64_t v41 = *((void *)&v98 + 1);
    long long v75 = v98;
    if (!*((void *)&v98 + 1)) {
      goto LABEL_77;
    }
LABEL_76:
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v41 + 8), 1uLL, memory_order_relaxed);
    goto LABEL_77;
  }
  return kdebug_trace();
}

void sub_192286E44(_Unwind_Exception *a1)
{
}

char *std::__hash_table<std::__hash_value_type<MIL::Builder::BlockBuilder *,std::unordered_map<MIL::Builder::OperationBuilder const*,int>>,std::__unordered_map_hasher<MIL::Builder::BlockBuilder *,std::__hash_value_type<MIL::Builder::BlockBuilder *,std::unordered_map<MIL::Builder::OperationBuilder const*,int>>,std::hash<MIL::Builder::BlockBuilder *>,std::equal_to<MIL::Builder::BlockBuilder *>,true>,std::__unordered_map_equal<MIL::Builder::BlockBuilder *,std::__hash_value_type<MIL::Builder::BlockBuilder *,std::unordered_map<MIL::Builder::OperationBuilder const*,int>>,std::equal_to<MIL::Builder::BlockBuilder *>,std::hash<MIL::Builder::BlockBuilder *>,true>,std::allocator<std::__hash_value_type<MIL::Builder::BlockBuilder *,std::unordered_map<MIL::Builder::OperationBuilder const*,int>>>>::__emplace_unique_key_args<MIL::Builder::BlockBuilder *,std::piecewise_construct_t const&,std::tuple<MIL::Builder::BlockBuilder *&&>,std::tuple<>>(uint64_t a1, uint64_t *a2, uint64_t a3, void **a4)
{
  uint64_t v7 = *a2;
  unint64_t v8 = HIDWORD(*a2);
  unint64_t v9 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ v8);
  unint64_t v10 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) ^ ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) >> 47));
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) ^ ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) >> 47));
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
    }
    else
    {
      unint64_t v4 = v10 & (v11 - 1);
    }
    unint64_t v13 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v13)
    {
      uint64_t v14 = (char *)*v13;
      if (*v13)
      {
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v16 = *((void *)v14 + 1);
            if (v16 == v10)
            {
              if (*((void *)v14 + 2) == v7) {
                return v14;
              }
            }
            else if ((v16 & (v11 - 1)) != v4)
            {
              goto LABEL_23;
            }
            uint64_t v14 = *(char **)v14;
            if (!v14) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v15 = *((void *)v14 + 1);
          if (v15 == v10)
          {
            if (*((void *)v14 + 2) == v7) {
              return v14;
            }
          }
          else
          {
            if (v15 >= v11) {
              v15 %= v11;
            }
            if (v15 != v4) {
              break;
            }
          }
          uint64_t v14 = *(char **)v14;
        }
        while (v14);
      }
    }
  }
LABEL_23:
  uint64_t v17 = (void *)(a1 + 16);
  uint64_t v14 = (char *)operator new(0x40uLL);
  *(void *)uint64_t v14 = 0;
  *((void *)v14 + 1) = v10;
  *((void *)v14 + 2) = **a4;
  *(_OWORD *)(v14 + 24) = 0u;
  *(_OWORD *)(v14 + 40) = 0u;
  *((_DWORD *)v14 + 14) = 1065353216;
  float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v19 = *(float *)(a1 + 32);
  if (v11 && (float)(v19 * (float)v11) >= v18)
  {
    uint64_t v20 = *(void *)a1;
    unint64_t v21 = *(void **)(*(void *)a1 + 8 * v4);
    if (v21)
    {
LABEL_26:
      *(void *)uint64_t v14 = *v21;
LABEL_61:
      *unint64_t v21 = v14;
      goto LABEL_62;
    }
  }
  else
  {
    BOOL v22 = 1;
    if (v11 >= 3) {
      BOOL v22 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v23 = v22 | (2 * v11);
    unint64_t v24 = vcvtps_u32_f32(v18 / v19);
    if (v23 <= v24) {
      size_t prime = v24;
    }
    else {
      size_t prime = v23;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v11 = *(void *)(a1 + 8);
    }
    if (prime > v11) {
      goto LABEL_37;
    }
    if (prime < v11)
    {
      unint64_t v26 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v11 < 3 || (uint8x8_t v27 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
      {
        unint64_t v26 = std::__next_prime(v26);
      }
      else
      {
        uint64_t v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2) {
          unint64_t v26 = v28;
        }
      }
      if (prime <= v26) {
        size_t prime = v26;
      }
      if (prime < v11) {
LABEL_37:
      }
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    unint64_t v29 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        unint64_t v4 = v10 % v11;
        uint64_t v20 = *(void *)a1;
        unint64_t v21 = *(void **)(*(void *)a1 + 8 * (v10 % v11));
        if (v21) {
          goto LABEL_26;
        }
      }
      else
      {
        unint64_t v4 = v10;
        uint64_t v20 = *(void *)a1;
        unint64_t v21 = *(void **)(*(void *)a1 + 8 * v10);
        if (v21) {
          goto LABEL_26;
        }
      }
    }
    else
    {
      unint64_t v4 = v29 & v10;
      uint64_t v20 = *(void *)a1;
      unint64_t v21 = *(void **)(*(void *)a1 + 8 * (v29 & v10));
      if (v21) {
        goto LABEL_26;
      }
    }
  }
  *(void *)uint64_t v14 = *v17;
  *uint64_t v17 = v14;
  *(void *)(v20 + 8 * v4) = v17;
  if (*(void *)v14)
  {
    unint64_t v30 = *(void *)(*(void *)v14 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v30 >= v11) {
        v30 %= v11;
      }
    }
    else
    {
      v30 &= v11 - 1;
    }
    unint64_t v21 = (void *)(*(void *)a1 + 8 * v30);
    goto LABEL_61;
  }
LABEL_62:
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_1922875C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<E5RT::AsyncEvent const*,std::unordered_set<unsigned long long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<E5RT::AsyncEvent const*,std::unordered_set<unsigned long long>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<MIL::Builder::OperationBuilder const*,int>,std::__unordered_map_hasher<MIL::Builder::OperationBuilder const*,std::__hash_value_type<MIL::Builder::OperationBuilder const*,int>,std::hash<MIL::Builder::OperationBuilder const*>,std::equal_to<MIL::Builder::OperationBuilder const*>,true>,std::__unordered_map_equal<MIL::Builder::OperationBuilder const*,std::__hash_value_type<MIL::Builder::OperationBuilder const*,int>,std::equal_to<MIL::Builder::OperationBuilder const*>,std::hash<MIL::Builder::OperationBuilder const*>,true>,std::allocator<std::__hash_value_type<MIL::Builder::OperationBuilder const*,int>>>::__emplace_unique_key_args<MIL::Builder::OperationBuilder const*,std::piecewise_construct_t const&,std::tuple<MIL::Builder::OperationBuilder const*&&>,std::tuple<>>(uint64_t a1, uint64_t *a2, uint64_t a3, void **a4)
{
  uint64_t v7 = *a2;
  unint64_t v8 = HIDWORD(*a2);
  unint64_t v9 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ v8);
  unint64_t v10 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) ^ ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) >> 47));
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) ^ ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) >> 47));
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
    }
    else
    {
      unint64_t v4 = v10 & (v11 - 1);
    }
    unint64_t v13 = *(void **)(*(void *)a1 + 8 * v4);
    if (v13)
    {
      uint64_t v14 = (void *)*v13;
      if (*v13)
      {
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v16 = v14[1];
            if (v16 == v10)
            {
              if (v14[2] == v7) {
                return v14;
              }
            }
            else if ((v16 & (v11 - 1)) != v4)
            {
              goto LABEL_23;
            }
            uint64_t v14 = (void *)*v14;
            if (!v14) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v15 = v14[1];
          if (v15 == v10)
          {
            if (v14[2] == v7) {
              return v14;
            }
          }
          else
          {
            if (v15 >= v11) {
              v15 %= v11;
            }
            if (v15 != v4) {
              break;
            }
          }
          uint64_t v14 = (void *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_23:
  float v18 = operator new(0x20uLL);
  *float v18 = 0;
  v18[1] = v10;
  v18[2] = **a4;
  *((_DWORD *)v18 + 6) = 0;
  float v19 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v20 = *(float *)(a1 + 32);
  if (v11 && (float)(v20 * (float)v11) >= v19)
  {
    uint64_t v21 = *(void *)a1;
    BOOL v22 = *(void **)(*(void *)a1 + 8 * v4);
    if (v22)
    {
LABEL_26:
      *float v18 = *v22;
LABEL_61:
      *BOOL v22 = v18;
      goto LABEL_62;
    }
  }
  else
  {
    BOOL v23 = 1;
    if (v11 >= 3) {
      BOOL v23 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v24 = v23 | (2 * v11);
    unint64_t v25 = vcvtps_u32_f32(v19 / v20);
    if (v24 <= v25) {
      size_t prime = v25;
    }
    else {
      size_t prime = v24;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v11 = *(void *)(a1 + 8);
    }
    if (prime > v11) {
      goto LABEL_37;
    }
    if (prime < v11)
    {
      unint64_t v27 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v11 < 3 || (uint8x8_t v28 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v28.i16[0] = vaddlv_u8(v28), v28.u32[0] > 1uLL))
      {
        unint64_t v27 = std::__next_prime(v27);
      }
      else
      {
        uint64_t v29 = 1 << -(char)__clz(v27 - 1);
        if (v27 >= 2) {
          unint64_t v27 = v29;
        }
      }
      if (prime <= v27) {
        size_t prime = v27;
      }
      if (prime < v11) {
LABEL_37:
      }
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    unint64_t v30 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        unint64_t v4 = v10 % v11;
        uint64_t v21 = *(void *)a1;
        BOOL v22 = *(void **)(*(void *)a1 + 8 * (v10 % v11));
        if (v22) {
          goto LABEL_26;
        }
      }
      else
      {
        unint64_t v4 = v10;
        uint64_t v21 = *(void *)a1;
        BOOL v22 = *(void **)(*(void *)a1 + 8 * v10);
        if (v22) {
          goto LABEL_26;
        }
      }
    }
    else
    {
      unint64_t v4 = v30 & v10;
      uint64_t v21 = *(void *)a1;
      BOOL v22 = *(void **)(*(void *)a1 + 8 * (v30 & v10));
      if (v22) {
        goto LABEL_26;
      }
    }
  }
  *float v18 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v18;
  *(void *)(v21 + 8 * v4) = a1 + 16;
  if (*v18)
  {
    unint64_t v31 = *(void *)(*v18 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v31 >= v11) {
        v31 %= v11;
      }
    }
    else
    {
      v31 &= v11 - 1;
    }
    BOOL v22 = (void *)(*(void *)a1 + 8 * v31);
    goto LABEL_61;
  }
LABEL_62:
  ++*(void *)(a1 + 24);
  return v18;
}

void sub_192287928(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void Espresso::AOT::E5RTGroupMatcher::TagQuantizationGroupsInBlock(uint64_t a1, MIL::Builder::BlockBuilder **a2, void *a3, void *a4, int a5)
{
  uint64_t v141 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a1 + 56) < a5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    uint64_t Location = (MIL::Location *)MIL::Builder::BlockBuilder::GetLocation(*a2);
    MIL::Location::GetDescription((uint64_t *)v139, Location);
    unint64_t v110 = std::string::insert((std::string *)v139, 0, "reached max supported Block nesting level at ");
    long long v111 = *(_OWORD *)&v110->__r_.__value_.__l.__data_;
    *(void *)&long long v127 = *((void *)&v110->__r_.__value_.__l + 2);
    *(_OWORD *)std::string __p = v111;
    v110->__r_.__value_.__l.__size_ = 0;
    v110->__r_.__value_.__r.__words[2] = 0;
    v110->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, (const std::string *)__p);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v136 = 0;
  int64_t v137 = 0;
  unint64_t v138 = 0;
  MIL::Builder::BlockBuilder::GetOperations((uint64_t *)&v134, *a2);
  uint64_t v9 = (uint64_t)v134;
  if ((void *)v135 != v134)
  {
    unint64_t v10 = 0;
    uint64_t v11 = (a5 + 1);
    do
    {
      unint64_t v13 = (MIL::Builder::OperationBuilder **)(v9 + 16 * v10);
      uint64_t Operator = MIL::Builder::OperationBuilder::GetOperator(*v13);
      uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)Operator + 16))(Operator);
      Espresso::AOT::GetOperatorType(v15, (std::string *)__p);
      if (SBYTE7(v127) < 0)
      {
        if (__p[1] != (void *)8)
        {
          operator delete(__p[0]);
          goto LABEL_20;
        }
        uint64_t v16 = *(void *)__p[0];
        operator delete(__p[0]);
        if (v16 != 0x657A69746E617571) {
          goto LABEL_20;
        }
      }
      else if (SBYTE7(v127) != 8 || __p[0] != (void *)0x657A69746E617571)
      {
        goto LABEL_20;
      }
      uint64_t v17 = v137;
      if ((unint64_t)v137 >= v138)
      {
        float v19 = std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__push_back_slow_path<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions> const&>((uint64_t)&v136, (long long *)v13);
      }
      else
      {
        long long v18 = *(_OWORD *)v13;
        *int64_t v137 = *(_OWORD *)v13;
        if (*((void *)&v18 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v18 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        float v19 = v17 + 1;
      }
      int64_t v137 = v19;
LABEL_20:
      MIL::Builder::OperationBuilder::GetBlocks((uint64_t *)__p, *v13);
      uint64_t v21 = (uint64_t *)__p[0];
      float v20 = (uint64_t *)__p[1];
      if (__p[0] == __p[1])
      {
        if (__p[0]) {
          goto LABEL_35;
        }
        goto LABEL_6;
      }
      do
      {
        uint64_t v22 = *v21;
        *(void *)unint64_t v139 = *v21;
        BOOL v23 = (std::__shared_weak_count *)v21[1];
        *(void *)&v139[8] = v23;
        if (v23)
        {
          atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
          uint64_t v132 = v22;
          long long v133 = v23;
          atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        else
        {
          uint64_t v132 = v22;
          long long v133 = 0;
        }
        Espresso::AOT::E5RTGroupMatcher::TagQuantizationGroupsInBlock(a1, &v132, a3, a4, v11);
        if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
          unint64_t v24 = *(std::__shared_weak_count **)&v139[8];
          if (!*(void *)&v139[8]) {
            goto LABEL_23;
          }
        }
        else
        {
          unint64_t v24 = *(std::__shared_weak_count **)&v139[8];
          if (!*(void *)&v139[8]) {
            goto LABEL_23;
          }
        }
        if (!atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
LABEL_23:
        v21 += 2;
      }
      while (v21 != v20);
      uint64_t v21 = (uint64_t *)__p[0];
      if (__p[0])
      {
LABEL_35:
        unint64_t v25 = (uint64_t *)__p[1];
        uint8x8_t v12 = v21;
        if (__p[1] != v21)
        {
          do
          {
            unint64_t v26 = (std::__shared_weak_count *)*(v25 - 1);
            if (v26 && !atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
              std::__shared_weak_count::__release_weak(v26);
            }
            v25 -= 2;
          }
          while (v25 != v21);
          uint8x8_t v12 = (uint64_t *)__p[0];
        }
        __p[1] = v21;
        operator delete(v12);
      }
LABEL_6:
      ++v10;
      uint64_t v9 = (uint64_t)v134;
    }
    while (v10 < (v135 - (uint64_t)v134) >> 4);
  }
  __p[0] = *a2;
  unint64_t v27 = (int8x8_t *)std::__hash_table<std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,std::__unordered_map_hasher<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,std::hash<E5RT::AsyncEvent const*>,std::equal_to<E5RT::AsyncEvent const*>,true>,std::__unordered_map_equal<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,std::equal_to<E5RT::AsyncEvent const*>,std::hash<E5RT::AsyncEvent const*>,true>,std::allocator<std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>>>::find<E5RT::AsyncEvent const*>(a4, (uint64_t *)__p);
  if (!v27) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  MIL::Builder::BlockBuilder::GetContext((uint64_t *)__p, *a2);
  Scalar = (MIL::IRTensorValueType *)MIL::IRTensorValueType::MakeScalar();
  long long v115 = v27;
  uint8x8_t v28 = (std::__shared_weak_count *)__p[1];
  if (__p[1] && !atomic_fetch_add((atomic_ullong *volatile)__p[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
    uint64_t v29 = v136;
    unint64_t v112 = v137;
    if (v136 != (void *)v137)
    {
LABEL_45:
      long long v116 = v115 + 3;
      while (1)
      {
        uint64_t v129 = 0;
        long long v130 = 0;
        unint64_t v131 = 0;
        uint64_t v31 = v29[1];
        *(void *)unint64_t v139 = *v29;
        *(void *)&v139[8] = v31;
        if (v31) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v31 + 8), 1uLL, memory_order_relaxed);
        }
        long long v127 = 0u;
        int64x2_t v128 = 0u;
        *(_OWORD *)std::string __p = 0u;
        std::deque<std::shared_ptr<MIL::Builder::OperationBuilder>>::__append_with_size[abi:ne180100]<std::shared_ptr<MIL::Builder::OperationBuilder> const*>(__p, v139, 1uLL);
        int v32 = *(std::__shared_weak_count **)&v139[8];
        if (*(void *)&v139[8]
          && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&v139[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
        }
        memset(v139, 0, sizeof(v139));
        int v140 = 1065353216;
        v125.__r_.__value_.__r.__words[0] = *v29;
        uint64_t v33 = std::__hash_table<std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,std::__unordered_map_hasher<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,std::hash<E5RT::AsyncEvent const*>,std::equal_to<E5RT::AsyncEvent const*>,true>,std::__unordered_map_equal<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,std::equal_to<E5RT::AsyncEvent const*>,std::hash<E5RT::AsyncEvent const*>,true>,std::allocator<std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>>>::find<E5RT::AsyncEvent const*>(v116, (uint64_t *)&v125);
        uint64_t v114 = v29;
        if (!v33) {
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        }
        if (v128.i64[1]) {
          break;
        }
LABEL_172:
        unint64_t v89 = *(void **)&v139[16];
        if (*(void *)&v139[16])
        {
          do
          {
            uint64_t v93 = v89;
            unint64_t v89 = (void *)*v89;
            std::string::size_type v94 = (std::__shared_weak_count *)v93[3];
            if (v94 && !atomic_fetch_add(&v94->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
              std::__shared_weak_count::__release_weak(v94);
            }
            operator delete(v93);
          }
          while (v89);
        }
        unint64_t v90 = *(void **)v139;
        *(void *)unint64_t v139 = 0;
        if (v90) {
          operator delete(v90);
        }
        std::deque<std::shared_ptr<MIL::Builder::OperationBuilder>>::~deque[abi:ne180100]((uint64_t)__p);
        unint64_t v91 = v129;
        if (v129)
        {
          uint64_t v92 = v130;
          unint64_t v30 = v129;
          if (v130 != v129)
          {
            do
            {
              uint64_t v95 = (std::__shared_weak_count *)*((void *)v92 - 1);
              if (v95 && !atomic_fetch_add(&v95->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
                std::__shared_weak_count::__release_weak(v95);
              }
              v92 -= 16;
            }
            while (v92 != v91);
            unint64_t v30 = v129;
          }
          long long v130 = v91;
          operator delete(v30);
        }
        uint64_t v29 = v114 + 2;
        if (v114 + 2 == (void *)v112) {
          goto LABEL_203;
        }
      }
      int v113 = *((_DWORD *)v33 + 6);
      int v118 = v113;
      while (1)
      {
        long long v34 = *(_OWORD *)(*(void *)((char *)__p[1] + (((unint64_t)v128.i64[0] >> 5) & 0x7FFFFFFFFFFFFF8))
                        + 16 * v128.u8[0]);
        long long v120 = v34;
        uint64_t v35 = *(std::__shared_weak_count **)(*(void *)((char *)__p[1]
                                                       + (((unint64_t)v128.i64[0] >> 5) & 0x7FFFFFFFFFFFFF8))
                                           + 16 * v128.u8[0]
                                           + 8);
        if (*((void *)&v34 + 1))
        {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v34 + 1) + 8), 1uLL, memory_order_relaxed);
          uint64_t v37 = v130;
          unint64_t v36 = v131;
          if ((unint64_t)v130 >= v131) {
            goto LABEL_63;
          }
          *(_OWORD *)long long v130 = v34;
          atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
          uint64_t v38 = v37 + 16;
        }
        else
        {
          uint64_t v37 = v130;
          unint64_t v36 = v131;
          if ((unint64_t)v130 >= v131)
          {
LABEL_63:
            uint64_t v39 = v129;
            uint64_t v40 = (v37 - v129) >> 4;
            unint64_t v41 = v40 + 1;
            if ((unint64_t)(v40 + 1) >> 60) {
              std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v42 = v36 - (void)v129;
            if (v42 >> 3 > v41) {
              unint64_t v41 = v42 >> 3;
            }
            if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v43 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v43 = v41;
            }
            if (v43 >> 60) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            unint64_t v44 = (char *)operator new(16 * v43);
            uint64_t v45 = &v44[16 * v40];
            *(_OWORD *)uint64_t v45 = v120;
            if (v35)
            {
              atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
              uint64_t v37 = v130;
            }
            uint64_t v46 = &v44[16 * v43];
            uint64_t v38 = v45 + 16;
            if (v37 == v39)
            {
              uint64_t v129 = &v44[16 * v40];
              long long v130 = v45 + 16;
              unint64_t v131 = (unint64_t)v46;
            }
            else
            {
              do
              {
                long long v47 = *((_OWORD *)v37 - 1);
                v37 -= 16;
                *((_OWORD *)v45 - 1) = v47;
                v45 -= 16;
                *(void *)uint64_t v37 = 0;
                *((void *)v37 + 1) = 0;
              }
              while (v37 != v39);
              uint64_t v39 = v129;
              uint64_t v48 = v130;
              uint64_t v129 = v45;
              long long v130 = v38;
              unint64_t v131 = (unint64_t)v46;
              while (v48 != v39)
              {
                uint64_t v49 = (std::__shared_weak_count *)*((void *)v48 - 1);
                if (v49 && !atomic_fetch_add(&v49->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
                  std::__shared_weak_count::__release_weak(v49);
                }
                v48 -= 16;
              }
            }
            if (v39) {
              operator delete(v39);
            }
            goto LABEL_83;
          }
          *(_OWORD *)long long v130 = (unint64_t)v34;
          uint64_t v38 = v37 + 16;
        }
LABEL_83:
        long long v130 = v38;
        uint64_t v50 = MIL::Builder::OperationBuilder::GetOperator((MIL::Builder::OperationBuilder *)v120);
        uint64_t v51 = (*(uint64_t (**)(uint64_t))(*(void *)v50 + 16))(v50);
        Espresso::AOT::GetOperatorType(v51, &v125);
        if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0)
        {
          if (v125.__r_.__value_.__l.__size_ == 10)
          {
            BOOL v54 = *(void *)v125.__r_.__value_.__l.__data_ != 0x69746E6175716564
               || *(_WORD *)(v125.__r_.__value_.__r.__words[0] + 8) != 25978;
            operator delete(v125.__r_.__value_.__l.__data_);
            if (!v54)
            {
LABEL_99:
              int8x8_t v55 = v115[4];
              if (!*(void *)&v55) {
                goto LABEL_222;
              }
              unint64_t v56 = 0x9DDFEA08EB382D69 * (((8 * v120) + 8) ^ DWORD1(v120));
              unint64_t v57 = 0x9DDFEA08EB382D69 * (DWORD1(v120) ^ (v56 >> 47) ^ v56);
              unint64_t v58 = 0x9DDFEA08EB382D69 * (v57 ^ (v57 >> 47));
              uint8x8_t v59 = (uint8x8_t)vcnt_s8(v55);
              v59.i16[0] = vaddlv_u8(v59);
              if (v59.u32[0] > 1uLL)
              {
                unint64_t v60 = v58;
                if (v58 >= *(void *)&v55) {
                  unint64_t v60 = v58 % *(void *)&v55;
                }
              }
              else
              {
                unint64_t v60 = (*(void *)&v55 - 1) & v58;
              }
              unint64_t v82 = *(uint64_t ***)(*(void *)v116 + 8 * v60);
              if (!v82 || (int v83 = *v82) == 0) {
LABEL_222:
              }
                std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
              if (v59.u32[0] < 2uLL)
              {
                uint64_t v84 = *(void *)&v55 - 1;
                while (1)
                {
                  uint64_t v86 = v83[1];
                  if (v58 == v86)
                  {
                    if (v83[2] == (void)v120) {
                      goto LABEL_160;
                    }
                  }
                  else if ((v86 & v84) != v60)
                  {
                    goto LABEL_222;
                  }
                  int v83 = (uint64_t *)*v83;
                  if (!v83) {
                    goto LABEL_222;
                  }
                }
              }
              while (1)
              {
                unint64_t v85 = v83[1];
                if (v58 == v85)
                {
                  if (v83[2] == (void)v120)
                  {
LABEL_160:
                    int v87 = v118;
                    if (*((_DWORD *)v83 + 6) < v118) {
                      int v87 = *((_DWORD *)v83 + 6);
                    }
                    int v118 = v87;
                    goto LABEL_163;
                  }
                }
                else
                {
                  if (v85 >= *(void *)&v55) {
                    v85 %= *(void *)&v55;
                  }
                  if (v85 != v60) {
                    goto LABEL_222;
                  }
                }
                int v83 = (uint64_t *)*v83;
                if (!v83) {
                  goto LABEL_222;
                }
              }
            }
          }
          else
          {
            operator delete(v125.__r_.__value_.__l.__data_);
          }
        }
        else if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) == 10 {
               && v125.__r_.__value_.__r.__words[0] == 0x69746E6175716564
        }
               && LOWORD(v125.__r_.__value_.__r.__words[1]) == 25978)
        {
          goto LABEL_99;
        }
        MIL::Builder::OperationBuilder::GetInputArguments((uint64_t *)&v125, (MIL::Builder::OperationBuilder *)v120);
        BOOL v61 = (uint64_t **)v125.__r_.__value_.__r.__words[2];
        if (v125.__r_.__value_.__r.__words[2])
        {
          do
          {
            if (MIL::Builder::Variable::TryGetName((MIL::Builder::Variable *)v61[2]))
            {
              MIL::Builder::BlockBuilder::TryGetOperation();
              unint64_t v62 = v123;
              if (v123)
              {
                if (*(void *)&v139[8])
                {
                  unint64_t v63 = 0x9DDFEA08EB382D69 * (((8 * v123) + 8) ^ HIDWORD(v123));
                  unint64_t v64 = 0x9DDFEA08EB382D69 * (HIDWORD(v123) ^ (v63 >> 47) ^ v63);
                  unint64_t v65 = 0x9DDFEA08EB382D69 * (v64 ^ (v64 >> 47));
                  uint8x8_t v66 = (uint8x8_t)vcnt_s8(*(int8x8_t *)&v139[8]);
                  v66.i16[0] = vaddlv_u8(v66);
                  if (v66.u32[0] > 1uLL)
                  {
                    unint64_t v67 = v65;
                    if (v65 >= *(void *)&v139[8]) {
                      unint64_t v67 = v65 % *(void *)&v139[8];
                    }
                  }
                  else
                  {
                    unint64_t v67 = (*(void *)&v139[8] - 1) & v65;
                  }
                  unint64_t v68 = *(void **)(*(void *)v139 + 8 * v67);
                  if (v68)
                  {
                    long long v69 = (void *)*v68;
                    if (v69)
                    {
                      if (v66.u32[0] < 2uLL)
                      {
                        while (1)
                        {
                          uint64_t v71 = v69[1];
                          if (v65 == v71)
                          {
                            if (v69[2] == v123) {
                              goto LABEL_136;
                            }
                          }
                          else if ((v71 & (*(void *)&v139[8] - 1)) != v67)
                          {
                            goto LABEL_128;
                          }
                          long long v69 = (void *)*v69;
                          if (!v69) {
                            goto LABEL_128;
                          }
                        }
                      }
                      do
                      {
                        unint64_t v70 = v69[1];
                        if (v65 == v70)
                        {
                          if (v69[2] == v123) {
                            goto LABEL_136;
                          }
                        }
                        else
                        {
                          if (v70 >= *(void *)&v139[8]) {
                            v70 %= *(void *)&v139[8];
                          }
                          if (v70 != v67) {
                            break;
                          }
                        }
                        long long v69 = (void *)*v69;
                      }
                      while (v69);
                    }
                  }
                }
LABEL_128:
                long long v72 = (char *)__p[1];
                if ((void *)v127 == __p[1]) {
                  unint64_t v73 = 0;
                }
                else {
                  unint64_t v73 = 32 * (v127 - (unint64_t)__p[1]) - 1;
                }
                uint64_t v74 = v128.i64[1];
                unint64_t v75 = v128.i64[1] + v128.i64[0];
                if (v73 == v128.i64[1] + v128.i64[0])
                {
                  std::deque<std::shared_ptr<MIL::Builder::OperationBuilder>>::__add_back_capacity((uint64_t)__p);
                  long long v72 = (char *)__p[1];
                  uint64_t v74 = v128.i64[1];
                  unint64_t v75 = v128.i64[1] + v128.i64[0];
                  unint64_t v62 = v123;
                }
                unint64_t v76 = (unint64_t *)(*(void *)&v72[(v75 >> 5) & 0x7FFFFFFFFFFFFF8]
                                         + 16 * v75);
                unint64_t *v76 = v62;
                uint64_t v77 = v124;
                v76[1] = (unint64_t)v124;
                if (v77)
                {
                  atomic_fetch_add_explicit(&v77->__shared_owners_, 1uLL, memory_order_relaxed);
                  uint64_t v74 = v128.i64[1];
                }
                v128.i64[1] = v74 + 1;
                std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__emplace_unique_key_args<std::shared_ptr<MIL::Builder::OperationBuilder>,std::shared_ptr<MIL::Builder::OperationBuilder> const&>((uint64_t)v139, &v123, &v123);
              }
LABEL_136:
              long long v78 = v124;
              if (v124 && !atomic_fetch_add(&v124->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
                std::__shared_weak_count::__release_weak(v78);
              }
            }
            BOOL v61 = (uint64_t **)*v61;
          }
          while (v61);
          uint64_t v79 = (void *)v125.__r_.__value_.__r.__words[2];
          if (v125.__r_.__value_.__r.__words[2])
          {
            do
            {
              unint64_t v80 = (void *)*v79;
              operator delete(v79);
              uint64_t v79 = v80;
            }
            while (v80);
          }
        }
        uint64_t v81 = (void *)v125.__r_.__value_.__r.__words[0];
        v125.__r_.__value_.__r.__words[0] = 0;
        if (v81) {
          operator delete(v81);
        }
LABEL_163:
        long long v88 = *(std::__shared_weak_count **)(*(void *)((char *)__p[1]
                                                       + (((unint64_t)v128.i64[0] >> 5) & 0x7FFFFFFFFFFFFF8))
                                           + 16 * v128.u8[0]
                                           + 8);
        if (v88 && !atomic_fetch_add(&v88->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
          std::__shared_weak_count::__release_weak(v88);
        }
        int64x2_t v128 = vaddq_s64(v128, (int64x2_t)xmmword_192DC5030);
        if (v128.i64[0] >= 0x200uLL)
        {
          operator delete(*(void **)__p[1]);
          __p[1] = (char *)__p[1] + 8;
          v128.i64[0] -= 256;
        }
        if (v35 && !atomic_fetch_add(&v35->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v35);
        }
        if (!v128.i64[1])
        {
          if (v118 != v113)
          {
            Espresso::AOT::GroupTagger::AssignGroupIdsForInterval(a3, v118, v113, &v134, (unsigned int **)(a1 + 8));
            uint64_t v96 = v129;
            char v97 = v130;
            while (v96 != v97)
            {
              if (*(char *)(a1 + 55) < 0) {
                std::string::__init_copy_ctor_external(&v121, *(const std::string::value_type **)(a1 + 32), *(void *)(a1 + 40));
              }
              else {
                std::string v121 = *(std::string *)(a1 + 32);
              }
              MIL::IRTensorValueType::MakeBoolValue(Scalar);
              if (v125.__r_.__value_.__r.__words[0]) {
                operator new();
              }
              v125.__r_.__value_.__r.__words[0] = 0;
              MIL::Builder::OperationBuilder::SetAttribute();
              long long v98 = v122;
              if (v122 && !atomic_fetch_add(&v122->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
                std::__shared_weak_count::__release_weak(v98);
              }
              std::string::size_type v99 = v125.__r_.__value_.__r.__words[0];
              v125.__r_.__value_.__r.__words[0] = 0;
              if (v99) {
                (*(void (**)(std::string::size_type))(*(void *)v99 + 8))(v99);
              }
              if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v121.__r_.__value_.__l.__data_);
              }
              v96 += 16;
            }
          }
          goto LABEL_172;
        }
      }
    }
  }
  else
  {
    uint64_t v29 = v136;
    unint64_t v112 = v137;
    if (v136 != (void *)v137) {
      goto LABEL_45;
    }
  }
LABEL_203:
  uint64_t v100 = (uint64_t)v134;
  if (v134)
  {
    uint64_t v101 = v135;
    long long v102 = v134;
    if ((void *)v135 != v134)
    {
      do
      {
        uint64_t v103 = *(std::__shared_weak_count **)(v101 - 8);
        if (v103 && !atomic_fetch_add(&v103->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
          std::__shared_weak_count::__release_weak(v103);
        }
        v101 -= 16;
      }
      while (v101 != v100);
      long long v102 = v134;
    }
    uint64_t v135 = v100;
    operator delete(v102);
  }
  long long v104 = v136;
  if (v136)
  {
    uint64_t v105 = v137;
    long long v106 = v136;
    if (v137 != (_OWORD *)v136)
    {
      do
      {
        uint64_t v107 = (std::__shared_weak_count *)*((void *)v105 - 1);
        if (v107)
        {
          if (!atomic_fetch_add(&v107->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
            std::__shared_weak_count::__release_weak(v107);
          }
        }
        --v105;
      }
      while (v105 != v104);
      long long v106 = v136;
    }
    int64_t v137 = v104;
    operator delete(v106);
  }
}

void sub_1922888F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,void *a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  if (a47 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v49 - 121) < 0)
  {
    operator delete(*(void **)(v49 - 144));
    if ((v48 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v48)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v47);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,std::__unordered_map_hasher<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,std::hash<E5RT::AsyncEvent const*>,std::equal_to<E5RT::AsyncEvent const*>,true>,std::__unordered_map_equal<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,std::equal_to<E5RT::AsyncEvent const*>,std::hash<E5RT::AsyncEvent const*>,true>,std::allocator<std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>>>::find<E5RT::AsyncEvent const*>(void *a1, uint64_t *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  uint64_t v3 = *a2;
  unint64_t v4 = HIDWORD(*a2);
  unint64_t v5 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ v4);
  unint64_t v6 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (v4 ^ (v5 >> 47) ^ v5)) ^ ((0x9DDFEA08EB382D69 * (v4 ^ (v5 >> 47) ^ v5)) >> 47));
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v2);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v8 = v6;
    if (v6 >= *(void *)&v2) {
      unint64_t v8 = v6 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v8 = v6 & (*(void *)&v2 - 1);
  }
  uint64_t v9 = *(void **)(*a1 + 8 * v8);
  if (!v9) {
    return 0;
  }
  uint64_t result = (void *)*v9;
  if (*v9)
  {
    if (v7.u32[0] < 2uLL)
    {
      uint64_t v11 = *(void *)&v2 - 1;
      while (1)
      {
        uint64_t v13 = result[1];
        if (v6 == v13)
        {
          if (result[2] == v3) {
            return result;
          }
        }
        else if ((v13 & v11) != v8)
        {
          return 0;
        }
        uint64_t result = (void *)*result;
        if (!result) {
          return result;
        }
      }
    }
    do
    {
      unint64_t v12 = result[1];
      if (v6 == v12)
      {
        if (result[2] == v3) {
          return result;
        }
      }
      else
      {
        if (v12 >= *(void *)&v2) {
          v12 %= *(void *)&v2;
        }
        if (v12 != v8) {
          return 0;
        }
      }
      uint64_t result = (void *)*result;
    }
    while (result);
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_map<unsigned int,unsigned long long>>,std::__unordered_map_hasher<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_map<unsigned int,unsigned long long>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::__unordered_map_equal<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_map<unsigned int,unsigned long long>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_map<unsigned int,unsigned long long>>>>::~__hash_table(uint64_t a1)
{
  int8x8_t v2 = *(void **)(a1 + 16);
  while (v2)
  {
    uint64_t v3 = v2;
    int8x8_t v2 = (void *)*v2;
    unint64_t v4 = (void *)v3[6];
    if (v4)
    {
      do
      {
        unint64_t v5 = (void *)*v4;
        operator delete(v4);
        unint64_t v4 = v5;
      }
      while (v5);
    }
    unint64_t v6 = (void *)v3[4];
    v3[4] = 0;
    if (v6) {
      operator delete(v6);
    }
    uint8x8_t v7 = (std::__shared_weak_count *)v3[3];
    if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    operator delete(v3);
  }
  unint64_t v8 = *(void **)a1;
  *(void *)a1 = 0;
  if (v8) {
    operator delete(v8);
  }
  return a1;
}

uint64_t Espresso::AOT::E5RTGroupMatcher::TagE5MinimalCpuGroupsInProgram(uint64_t a1, MIL::Builder::FunctionBuilder **a2, MIL::Builder::BlockBuilder **a3, void *a4)
{
  MIL::Builder::FunctionBuilder::CreateFunction(&v34, *a2);
  long long v32 = 0uLL;
  uint64_t v33 = 0;
  if (*(unsigned char *)(a1 + 62))
  {
    MIL::Builder::FunctionBuilder::GetContext((uint64_t *)&__p, *a2);
    unint64_t v8 = __p;
    uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v34 + 48))(v34);
    E5Common::MinimalCpu::MatchStatePatterns((uint64_t)v8, v9, (uint64_t)&v35);
  }
  else
  {
    MIL::Builder::FunctionBuilder::GetContext((uint64_t *)&__p, *a2);
    unint64_t v10 = __p;
    uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v34 + 48))(v34);
    E5Common::MinimalCpu::MatchAllPatterns((uint64_t)v10, v11, (uint64_t)&v35);
  }
  unint64_t v12 = (std::__shared_weak_count *)v31;
  long long v32 = v35;
  uint64_t v33 = v36;
  unint64_t v36 = 0;
  long long v35 = 0uLL;
  if (v31 && !atomic_fetch_add(v31 + 1, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    uint64_t v14 = (void *)*((void *)&v32 + 1);
    uint64_t v13 = (void *)v32;
    if ((void)v32 == *((void *)&v32 + 1)) {
      goto LABEL_31;
    }
LABEL_11:
    while (1)
    {
      std::vector<std::shared_ptr<MIL::Builder::OperationBuilder>>::vector(&__p, (uint64_t)(v13[2] - v13[1]) >> 3);
      uint64_t v16 = v13[1];
      uint64_t v17 = v13[2];
      if (v16 != v17) {
        break;
      }
LABEL_21:
      uint64_t v22 = (atomic_ullong *)__p;
      BOOL v23 = v31;
      if (__p != v31)
      {
        unint64_t v24 = operator new(4uLL);
        _DWORD *v24 = 9;
        *((void *)&v35 + 1) = v24 + 1;
        unint64_t v36 = v24 + 1;
        *(void *)&long long v35 = v24;
        Espresso::AOT::GroupTagger::AssignGroupIdsForInterval(a4, 0, ((unint64_t)((char *)v23 - (char *)v22) >> 4) - 1, &__p, (unsigned int **)&v35);
        operator delete(v24);
        uint64_t v22 = (atomic_ullong *)__p;
      }
      if (v22)
      {
        unint64_t v25 = v31;
        uint64_t v15 = v22;
        if (v31 != v22)
        {
          do
          {
            unint64_t v26 = (std::__shared_weak_count *)*(v25 - 1);
            if (v26 && !atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
              std::__shared_weak_count::__release_weak(v26);
            }
            v25 -= 2;
          }
          while (v25 != v22);
          uint64_t v15 = __p;
        }
        uint64_t v31 = v22;
        operator delete(v15);
      }
      v13 += 4;
      if (v13 == v14)
      {
        uint64_t v13 = (void *)v32;
        goto LABEL_31;
      }
    }
    long long v18 = (std::__shared_weak_count **)((char *)__p + 8);
    while (1)
    {
      MIL::Builder::BlockBuilder::GetOperation(*a3);
      long long v19 = v35;
      long long v35 = 0uLL;
      float v20 = *v18;
      *(_OWORD *)(v18 - 1) = v19;
      if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
        uint64_t v21 = (std::__shared_weak_count *)*((void *)&v35 + 1);
        if (*((void *)&v35 + 1))
        {
LABEL_17:
          if (!atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      else
      {
        uint64_t v21 = (std::__shared_weak_count *)*((void *)&v35 + 1);
        if (*((void *)&v35 + 1)) {
          goto LABEL_17;
        }
      }
      v16 += 8;
      v18 += 2;
      if (v16 == v17) {
        goto LABEL_21;
      }
    }
  }
  uint64_t v14 = (void *)*((void *)&v32 + 1);
  uint64_t v13 = (void *)v32;
  if ((void)v32 != *((void *)&v32 + 1)) {
    goto LABEL_11;
  }
LABEL_31:
  if (v13)
  {
    for (unint64_t i = (void *)*((void *)&v32 + 1); i != v13; i -= 4)
    {
      uint8x8_t v28 = (void *)*(i - 3);
      if (v28)
      {
        *(i - 2) = v28;
        operator delete(v28);
      }
    }
    operator delete(v13);
  }
  uint64_t result = v34;
  uint64_t v34 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_192289318(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  std::vector<E5Common::MinimalCpu::Match>::~vector[abi:ne180100](&a13);
  uint64_t v17 = a16;
  a16 = 0;
  if (v17) {
    (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
  }
  _Unwind_Resume(a1);
}

void Espresso::AOT::E5RTGroupMatcher::TagE5RTEnforcedGroupsInBlock(uint64_t a1, MIL::Builder::BlockBuilder **a2, void *a3, void *a4)
{
  uint64_t v120 = *MEMORY[0x1E4F143B8];
  MIL::Builder::BlockBuilder::GetOperations((uint64_t *)&v115, *a2);
  uint64_t v117 = *a2;
  uint8x8_t v7 = std::__hash_table<std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,std::__unordered_map_hasher<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,std::hash<E5RT::AsyncEvent const*>,std::equal_to<E5RT::AsyncEvent const*>,true>,std::__unordered_map_equal<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,std::equal_to<E5RT::AsyncEvent const*>,std::hash<E5RT::AsyncEvent const*>,true>,std::allocator<std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>>>::find<E5RT::AsyncEvent const*>(a4, (uint64_t *)&v117);
  if (!v7) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  long long v104 = a2;
  MIL::Builder::BlockBuilder::GetOutputs((uint64_t *)&__p, *a2);
  unint64_t v8 = (MIL::Builder::Variable **)__p;
  uint64_t v9 = v114;
  if (__p != v114)
  {
    do
    {
      uint64_t Type = MIL::Builder::Variable::TryGetType(*v8);
      uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)Type + 24))(Type);
      if (v11)
      {
        unsigned int v12 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 88))(v11);
        if ((v12 & 0xFFFFFFFA) != 0xA && (v12 > 0x10 || ((1 << v12) & 0x10234) == 0))
        {
          MIL::IRDataTypeToString();
          if (SHIBYTE(v119) >= 0) {
            uint64_t v14 = &v117;
          }
          else {
            uint64_t v14 = (MIL::Builder::BlockBuilder **)v117;
          }
          long long v111 = v14;
          Espresso::throw_exception_selector<Espresso::not_implemented_error,unsigned long long &>("Unsupported function output dtype %s", &v111);
        }
      }
      ++v8;
    }
    while (v8 != v9);
  }
  uint64_t v15 = v116;
  if (v116 != v115)
  {
    unint64_t v16 = 0;
    uint64_t v100 = (unsigned int **)(a1 + 8);
    uint64_t v15 = (char *)v115;
    while (1)
    {
      long long v102 = (MIL::Builder::OperationBuilder **)&v15[16 * v16];
      MIL::Builder::OperationBuilder::GetOutputs((uint64_t *)&v111, *v102);
      uint64_t v17 = v111;
      long long v18 = v112;
      if (v111 != v112) {
        break;
      }
LABEL_178:
      if (v17)
      {
        unint64_t v112 = v17;
        operator delete(v17);
      }
      ++v16;
      uint64_t v15 = (char *)v115;
      if (v16 >= (v116 - (unsigned char *)v115) >> 4) {
        goto LABEL_180;
      }
    }
    unint64_t v103 = v16;
    long long v98 = v112;
    std::string::size_type v99 = &v15[16 * v16];
    while (1)
    {
      float v20 = *v17;
      uint64_t v21 = MIL::Builder::Variable::TryGetType(*v17);
      if (!v21 || !(*(uint64_t (**)(uint64_t))(*(void *)v21 + 32))(v21)) {
        goto LABEL_75;
      }
      uint64_t v22 = *v102;
      uint64_t v117 = *v102;
      BOOL v23 = (std::__shared_weak_count *)*((void *)v99 + 1);
      int v118 = v23;
      if (v23) {
        atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      unint64_t v24 = operator new(0x10uLL);
      void *v24 = v22;
      v24[1] = v23;
      if (v23)
      {
        atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
        if (!atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
          break;
        }
      }
      unint64_t v25 = (std::__shared_weak_count *)v104[1];
      unint64_t v109 = *v104;
      unint64_t v110 = v25;
      if (v25) {
        goto LABEL_31;
      }
LABEL_32:
      MIL::Builder::Variable::GetName(v20);
      if (!v25 || atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        unint64_t v26 = v119;
        if (v119) {
          goto LABEL_35;
        }
        goto LABEL_67;
      }
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
      unint64_t v26 = v119;
      if (v119)
      {
LABEL_35:
        int v27 = -1;
        while (1)
        {
          unint64_t v28 = v26[2];
          uint64_t v29 = (std::__shared_weak_count *)v26[3];
          unint64_t v107 = v28;
          int64_t v108 = v29;
          if (v29) {
            atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          int8x8_t v30 = (int8x8_t)v7[4];
          if (!*(void *)&v30) {
            goto LABEL_192;
          }
          unint64_t v31 = 0x9DDFEA08EB382D69 * (((8 * v28) + 8) ^ HIDWORD(v28));
          unint64_t v32 = 0x9DDFEA08EB382D69 * (HIDWORD(v28) ^ (v31 >> 47) ^ v31);
          unint64_t v33 = 0x9DDFEA08EB382D69 * (v32 ^ (v32 >> 47));
          uint8x8_t v34 = (uint8x8_t)vcnt_s8(v30);
          v34.i16[0] = vaddlv_u8(v34);
          if (v34.u32[0] > 1uLL)
          {
            unint64_t v35 = v33;
            if (v33 >= *(void *)&v30) {
              unint64_t v35 = v33 % *(void *)&v30;
            }
          }
          else
          {
            unint64_t v35 = (*(void *)&v30 - 1) & v33;
          }
          unint64_t v36 = *(uint64_t ***)(v7[3] + 8 * v35);
          if (!v36 || (uint64_t v37 = *v36) == 0) {
LABEL_192:
          }
            std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
          if (v34.u32[0] < 2uLL)
          {
            uint64_t v38 = *(void *)&v30 - 1;
            while (1)
            {
              uint64_t v40 = v37[1];
              if (v33 == v40)
              {
                if (v37[2] == v28) {
                  goto LABEL_59;
                }
              }
              else if ((v40 & v38) != v35)
              {
                goto LABEL_192;
              }
              uint64_t v37 = (uint64_t *)*v37;
              if (!v37) {
                goto LABEL_192;
              }
            }
          }
          while (1)
          {
            unint64_t v39 = v37[1];
            if (v33 == v39) {
              break;
            }
            if (v39 >= *(void *)&v30) {
              v39 %= *(void *)&v30;
            }
            if (v39 != v35) {
              goto LABEL_192;
            }
LABEL_49:
            uint64_t v37 = (uint64_t *)*v37;
            if (!v37) {
              goto LABEL_192;
            }
          }
          if (v37[2] != v28) {
            goto LABEL_49;
          }
LABEL_59:
          if (v27 <= *((_DWORD *)v37 + 6)) {
            int v27 = *((_DWORD *)v37 + 6);
          }
          unint64_t v41 = v108;
          if (v108 && !atomic_fetch_add(&v108->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
            std::__shared_weak_count::__release_weak(v41);
          }
          unint64_t v26 = (void *)*v26;
          if (!v26) {
            goto LABEL_68;
          }
        }
      }
LABEL_67:
      int v27 = -1;
LABEL_68:
      Espresso::AOT::GroupTagger::AssignGroupIdsForInterval(a3, v103, v27, &v115, v100);
      uint64_t v42 = v119;
      while (v42)
      {
        int8x8_t v55 = v42;
        uint64_t v42 = (void *)*v42;
        unint64_t v56 = (std::__shared_weak_count *)v55[3];
        if (v56 && !atomic_fetch_add(&v56->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
          std::__shared_weak_count::__release_weak(v56);
        }
        operator delete(v55);
      }
      unint64_t v43 = v117;
      uint64_t v117 = 0;
      if (v43) {
        operator delete(v43);
      }
      unint64_t v44 = (std::__shared_weak_count *)v24[1];
      if (v44 && !atomic_fetch_add(&v44->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
      }
      operator delete(v24);
      long long v18 = v98;
LABEL_75:
      uint64_t v45 = MIL::Builder::Variable::TryGetType(v20);
      uint64_t v46 = (*(uint64_t (**)(uint64_t))(*(void *)v45 + 24))(v45);
      if (!v46) {
        goto LABEL_81;
      }
      unsigned int v47 = (*(uint64_t (**)(uint64_t))(*(void *)v46 + 88))(v46);
      if ((v47 & 0xFFFFFFFA) == 0xA) {
        goto LABEL_81;
      }
      if (v47 <= 0x10 && ((1 << v47) & 0x10234) != 0) {
        goto LABEL_81;
      }
      unint64_t v70 = *v102;
      uint64_t v117 = *v102;
      uint64_t v71 = (std::__shared_weak_count *)*((void *)v99 + 1);
      int v118 = v71;
      if (v71) {
        atomic_fetch_add_explicit(&v71->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v72 = operator new(0x10uLL);
      void *v72 = v70;
      v72[1] = v71;
      if (v71)
      {
        atomic_fetch_add_explicit(&v71->__shared_owners_, 1uLL, memory_order_relaxed);
        if (!atomic_fetch_add(&v71->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
          std::__shared_weak_count::__release_weak(v71);
          unint64_t v73 = (std::__shared_weak_count *)v104[1];
          uint64_t v105 = *v104;
          long long v106 = v73;
          if (!v73) {
            goto LABEL_128;
          }
LABEL_127:
          atomic_fetch_add_explicit(&v73->__shared_owners_, 1uLL, memory_order_relaxed);
          goto LABEL_128;
        }
      }
      unint64_t v73 = (std::__shared_weak_count *)v104[1];
      uint64_t v105 = *v104;
      long long v106 = v73;
      if (v73) {
        goto LABEL_127;
      }
LABEL_128:
      MIL::Builder::Variable::GetName(v20);
      if (!v73 || atomic_fetch_add(&v73->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        uint64_t v74 = v119;
        if (v119) {
          goto LABEL_131;
        }
        goto LABEL_165;
      }
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
      uint64_t v74 = v119;
      if (v119)
      {
LABEL_131:
        int v75 = -1;
        while (1)
        {
          unint64_t v76 = v74[2];
          uint64_t v77 = (std::__shared_weak_count *)v74[3];
          unint64_t v107 = v76;
          int64_t v108 = v77;
          if (v77) {
            atomic_fetch_add_explicit(&v77->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          int8x8_t v78 = (int8x8_t)v7[4];
          if (!*(void *)&v78) {
            goto LABEL_194;
          }
          unint64_t v79 = 0x9DDFEA08EB382D69 * (((8 * v76) + 8) ^ HIDWORD(v76));
          unint64_t v80 = 0x9DDFEA08EB382D69 * (HIDWORD(v76) ^ (v79 >> 47) ^ v79);
          unint64_t v81 = 0x9DDFEA08EB382D69 * (v80 ^ (v80 >> 47));
          uint8x8_t v82 = (uint8x8_t)vcnt_s8(v78);
          v82.i16[0] = vaddlv_u8(v82);
          if (v82.u32[0] > 1uLL)
          {
            unint64_t v83 = v81;
            if (v81 >= *(void *)&v78) {
              unint64_t v83 = v81 % *(void *)&v78;
            }
          }
          else
          {
            unint64_t v83 = (*(void *)&v78 - 1) & v81;
          }
          uint64_t v84 = *(uint64_t ***)(v7[3] + 8 * v83);
          if (!v84 || (unint64_t v85 = *v84) == 0) {
LABEL_194:
          }
            std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
          if (v82.u32[0] < 2uLL)
          {
            uint64_t v86 = *(void *)&v78 - 1;
            while (1)
            {
              uint64_t v88 = v85[1];
              if (v81 == v88)
              {
                if (v85[2] == v76) {
                  goto LABEL_155;
                }
              }
              else if ((v88 & v86) != v83)
              {
                goto LABEL_194;
              }
              unint64_t v85 = (uint64_t *)*v85;
              if (!v85) {
                goto LABEL_194;
              }
            }
          }
          while (1)
          {
            unint64_t v87 = v85[1];
            if (v81 == v87) {
              break;
            }
            if (v87 >= *(void *)&v78) {
              v87 %= *(void *)&v78;
            }
            if (v87 != v83) {
              goto LABEL_194;
            }
LABEL_145:
            unint64_t v85 = (uint64_t *)*v85;
            if (!v85) {
              goto LABEL_194;
            }
          }
          if (v85[2] != v76) {
            goto LABEL_145;
          }
LABEL_155:
          if (v75 <= *((_DWORD *)v85 + 6)) {
            int v75 = *((_DWORD *)v85 + 6);
          }
          unint64_t v89 = v108;
          if (v108 && !atomic_fetch_add(&v108->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
            std::__shared_weak_count::__release_weak(v89);
          }
          uint64_t v74 = (void *)*v74;
          if (!v74) {
            goto LABEL_166;
          }
        }
      }
LABEL_165:
      int v75 = -1;
LABEL_166:
      Espresso::AOT::GroupTagger::AssignGroupIdsForInterval(a3, v103, v75, &v115, v100);
      unint64_t v90 = v119;
      while (v90)
      {
        uint64_t v93 = v90;
        unint64_t v90 = (void *)*v90;
        std::string::size_type v94 = (std::__shared_weak_count *)v93[3];
        if (v94 && !atomic_fetch_add(&v94->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
          std::__shared_weak_count::__release_weak(v94);
        }
        operator delete(v93);
      }
      unint64_t v91 = v117;
      uint64_t v117 = 0;
      if (v91) {
        operator delete(v91);
      }
      uint64_t v92 = (std::__shared_weak_count *)v72[1];
      if (v92 && !atomic_fetch_add(&v92->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
        std::__shared_weak_count::__release_weak(v92);
      }
      operator delete(v72);
      long long v18 = v98;
LABEL_81:
      uint64_t Value = MIL::Builder::Variable::TryGetValue(v20);
      if (Value)
      {
        uint64_t v50 = (*(uint64_t (**)(uint64_t))(*(void *)Value + 40))(Value);
        if (v50)
        {
          if ((*(uint64_t (**)(uint64_t))(*(void *)v50 + 120))(v50)) {
            goto LABEL_87;
          }
          MIL::Builder::OperationBuilder::TryGetConstant((uint64_t *)&v117, *v102);
          uint64_t v51 = v117;
          int v52 = v118;
          if (v118 && !atomic_fetch_add(&v118->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
            std::__shared_weak_count::__release_weak(v52);
            if (v51)
            {
LABEL_87:
              MIL::Builder::Variable::GetName(v20);
              uint64_t OperationsByInput = MIL::Builder::BlockBuilder::GetOperationsByInput();
              if (*(void *)(OperationsByInput + 24))
              {
                BOOL v54 = *(void **)(OperationsByInput + 16);
                if (v54)
                {
                  int v19 = -1;
                  while (1)
                  {
                    unint64_t v57 = (MIL::Builder::BlockBuilder *)v54[2];
                    unint64_t v58 = (std::__shared_weak_count *)v54[3];
                    uint64_t v117 = v57;
                    int v118 = v58;
                    if (v58) {
                      atomic_fetch_add_explicit(&v58->__shared_owners_, 1uLL, memory_order_relaxed);
                    }
                    int8x8_t v59 = (int8x8_t)v7[4];
                    if (!*(void *)&v59) {
                      goto LABEL_193;
                    }
                    unint64_t v60 = 0x9DDFEA08EB382D69
                        * (((8 * v57) + 8) ^ ((unint64_t)v57 >> 32));
                    unint64_t v61 = 0x9DDFEA08EB382D69 * (((unint64_t)v57 >> 32) ^ (v60 >> 47) ^ v60);
                    unint64_t v62 = 0x9DDFEA08EB382D69 * (v61 ^ (v61 >> 47));
                    uint8x8_t v63 = (uint8x8_t)vcnt_s8(v59);
                    v63.i16[0] = vaddlv_u8(v63);
                    if (v63.u32[0] > 1uLL)
                    {
                      unint64_t v64 = v62;
                      if (v62 >= *(void *)&v59) {
                        unint64_t v64 = v62 % *(void *)&v59;
                      }
                    }
                    else
                    {
                      unint64_t v64 = (*(void *)&v59 - 1) & v62;
                    }
                    unint64_t v65 = *(uint64_t ***)(v7[3] + 8 * v64);
                    if (!v65 || (uint8x8_t v66 = *v65) == 0) {
LABEL_193:
                    }
                      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
                    if (v63.u32[0] < 2uLL)
                    {
                      uint64_t v67 = *(void *)&v59 - 1;
                      while (1)
                      {
                        uint64_t v69 = v66[1];
                        if (v62 == v69)
                        {
                          if ((MIL::Builder::BlockBuilder *)v66[2] == v57) {
                            goto LABEL_117;
                          }
                        }
                        else if ((v69 & v67) != v64)
                        {
                          goto LABEL_193;
                        }
                        uint8x8_t v66 = (uint64_t *)*v66;
                        if (!v66) {
                          goto LABEL_193;
                        }
                      }
                    }
                    while (1)
                    {
                      unint64_t v68 = v66[1];
                      if (v62 == v68) {
                        break;
                      }
                      if (v68 >= *(void *)&v59) {
                        v68 %= *(void *)&v59;
                      }
                      if (v68 != v64) {
                        goto LABEL_193;
                      }
LABEL_107:
                      uint8x8_t v66 = (uint64_t *)*v66;
                      if (!v66) {
                        goto LABEL_193;
                      }
                    }
                    if ((MIL::Builder::BlockBuilder *)v66[2] != v57) {
                      goto LABEL_107;
                    }
LABEL_117:
                    if (v19 <= *((_DWORD *)v66 + 6)) {
                      int v19 = *((_DWORD *)v66 + 6);
                    }
                    if (v58 && !atomic_fetch_add(&v58->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                    {
                      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
                      std::__shared_weak_count::__release_weak(v58);
                    }
                    BOOL v54 = (void *)*v54;
                    if (!v54) {
                      goto LABEL_22;
                    }
                  }
                }
                int v19 = -1;
LABEL_22:
                Espresso::AOT::GroupTagger::AssignGroupIdsForInterval(a3, v103, v19, &v115, v100);
              }
            }
          }
          else if (v51)
          {
            goto LABEL_87;
          }
        }
      }
      if (++v17 == v18)
      {
        uint64_t v17 = v111;
        unint64_t v16 = v103;
        goto LABEL_178;
      }
    }
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
    unint64_t v25 = (std::__shared_weak_count *)v104[1];
    unint64_t v109 = *v104;
    unint64_t v110 = v25;
    if (!v25) {
      goto LABEL_32;
    }
LABEL_31:
    atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
    goto LABEL_32;
  }
LABEL_180:
  if (__p)
  {
    uint64_t v114 = (MIL::Builder::Variable **)__p;
    operator delete(__p);
    uint64_t v15 = (char *)v115;
  }
  if (v15)
  {
    uint64_t v95 = v116;
    uint64_t v96 = v15;
    if (v116 != v15)
    {
      do
      {
        char v97 = (std::__shared_weak_count *)*((void *)v95 - 1);
        if (v97)
        {
          if (!atomic_fetch_add(&v97->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
            std::__shared_weak_count::__release_weak(v97);
          }
        }
        v95 -= 16;
      }
      while (v95 != v15);
      uint64_t v96 = v115;
    }
    long long v116 = v15;
    operator delete(v96);
  }
}

void sub_19228A084(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,uint64_t a28,char *a29,char *a30)
{
  if (*(char *)(v30 - 113) < 0) {
    operator delete(*(void **)(v30 - 136));
  }
  if (__p) {
    operator delete(__p);
  }
  if (!a29) {
    _Unwind_Resume(exception_object);
  }
  unint64_t v32 = a30;
  unint64_t v33 = a29;
  if (a30 != a29)
  {
    do
    {
      uint8x8_t v34 = (std::__shared_weak_count *)*((void *)v32 - 1);
      if (v34)
      {
        if (!atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
        }
      }
      v32 -= 16;
    }
    while (v32 != a29);
    unint64_t v33 = a29;
  }
  operator delete(v33);
  _Unwind_Resume(exception_object);
}

Espresso::AOT::GroupTagger *Espresso::AOT::GroupTagger::GroupTagger(Espresso::AOT::GroupTagger *this, MIL::Builder::BlockBuilder *a2)
{
  MIL::Builder::BlockBuilder::GetContext((uint64_t *)v37, a2);
  unint64_t v5 = v37[0];
  unint64_t v4 = (std::__shared_weak_count *)v37[1];
  if (v37[1] && !atomic_fetch_add((atomic_ullong *volatile)v37[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  *(void *)this = v5;
  *((void *)this + 1) = a2;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_DWORD *)this + 12) = 1065353216;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_DWORD *)this + 22) = 1065353216;
  strcpy((char *)this + 104, "groupId");
  *((void *)this + 12) = 0;
  *((unsigned char *)this + 127) = 7;
  MIL::Builder::BlockBuilder::GetOperations((uint64_t *)&v40, a2);
  unint64_t v6 = (char *)v40;
  uint8x8_t v7 = v41;
  if (v40 != v41)
  {
    while (1)
    {
      *(_OWORD *)uint64_t v37 = 0u;
      *(_OWORD *)std::string __p = 0u;
      int v39 = 1065353216;
      MIL::Builder::OperationBuilder::TryGetAttribute();
      if (v35)
      {
        E5Common::Utils::MILDictToCpp<unsigned int,unsigned long long>(v35, (uint64_t)&v30);
        if (__p[1])
        {
          unint64_t v8 = __p[0];
          if (__p[0])
          {
            do
            {
              uint64_t v9 = (void *)*v8;
              operator delete(v8);
              unint64_t v8 = v9;
            }
            while (v9);
          }
          __p[0] = 0;
          unint64_t v10 = (char *)v37[1];
          if (v37[1])
          {
            uint64_t v11 = 0;
            do
              *((void *)v37[0] + (void)v11++) = 0;
            while (v10 != v11);
          }
          __p[1] = 0;
        }
        unsigned int v12 = v30;
        uint64_t v30 = 0;
        uint64_t v13 = v37[0];
        v37[0] = v12;
        if (v13) {
          operator delete(v13);
        }
        unint64_t v15 = v31;
        uint64_t v14 = v32;
        unint64_t v31 = 0;
        __p[0] = v32;
        __p[1] = v33;
        int v39 = v34;
        v37[1] = (void *)v15;
        if (v33)
        {
          unint64_t v16 = v32[1];
          if ((v15 & (v15 - 1)) != 0)
          {
            if (v16 >= v15) {
              v16 %= v15;
            }
          }
          else
          {
            v16 &= v15 - 1;
          }
          *((void *)v37[0] + v16) = __p;
          unint64_t v32 = 0;
          unint64_t v33 = 0;
        }
        else if (v32)
        {
          do
          {
            uint64_t v17 = (void *)*v14;
            operator delete(v14);
            uint64_t v14 = v17;
          }
          while (v17);
        }
        long long v18 = v30;
        uint64_t v30 = 0;
        if (v18) {
          operator delete(v18);
        }
        uint64_t v30 = v6;
        int v19 = std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_map<unsigned int,unsigned long long>>,std::__unordered_map_hasher<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_map<unsigned int,unsigned long long>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::__unordered_map_equal<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_map<unsigned int,unsigned long long>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_map<unsigned int,unsigned long long>>>>::__emplace_unique_key_args<std::shared_ptr<MIL::Builder::OperationBuilder>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<MIL::Builder::OperationBuilder> const&>,std::tuple<>>((uint64_t)this + 16, (uint64_t *)v6, (uint64_t)&std::piecewise_construct, (void **)&v30);
        if (v19 + 4 != v37)
        {
          *((_DWORD *)v19 + 16) = v39;
          std::__hash_table<std::__hash_value_type<unsigned int,unsigned long long>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned long long>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned long long>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned long long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<unsigned int,unsigned long long>,void *> *>>(v19 + 4, (uint64_t *)__p[0], 0);
        }
      }
      float v20 = v36;
      if (v36 && !atomic_fetch_add(&v36->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
        uint64_t v21 = __p[0];
        if (__p[0])
        {
          do
          {
LABEL_37:
            uint64_t v22 = v21[3];
            uint64_t v30 = v21 + 3;
            std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)this + 56, v21 + 3, (uint64_t)&std::piecewise_construct, (void **)&v30)[3] = v22;
            if (*((void *)this + 12) <= v21[3]) {
              *((void *)this + 12) = v21[3] + 1;
            }
            uint64_t v21 = (void *)*v21;
          }
          while (v21);
          BOOL v23 = __p[0];
          if (__p[0])
          {
            do
            {
              unint64_t v24 = (void *)*v23;
              operator delete(v23);
              BOOL v23 = v24;
            }
            while (v24);
          }
        }
      }
      else
      {
        uint64_t v21 = __p[0];
        if (__p[0]) {
          goto LABEL_37;
        }
      }
      unint64_t v25 = v37[0];
      v37[0] = 0;
      if (v25) {
        operator delete(v25);
      }
      v6 += 16;
      if (v6 == v7)
      {
        unint64_t v6 = (char *)v40;
        break;
      }
    }
  }
  if (v6)
  {
    unint64_t v26 = v41;
    int v27 = v6;
    if (v41 != v6)
    {
      do
      {
        unint64_t v28 = (std::__shared_weak_count *)*((void *)v26 - 1);
        if (v28 && !atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
        v26 -= 16;
      }
      while (v26 != v6);
      int v27 = v40;
    }
    unint64_t v41 = v6;
    operator delete(v27);
  }
  return this;
}

void sub_19228A7F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (*(char *)(v11 + 127) < 0) {
    operator delete(*v13);
  }
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100](v12);
  std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_map<unsigned int,unsigned long long>>,std::__unordered_map_hasher<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_map<unsigned int,unsigned long long>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::__unordered_map_equal<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_map<unsigned int,unsigned long long>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_map<unsigned int,unsigned long long>>>>::~__hash_table(a11);
  _Unwind_Resume(a1);
}

void Espresso::AOT::GroupTagger::Finalize(Espresso::AOT::GroupTagger *this)
{
  uint64_t v1 = (void *)*((void *)this + 4);
  if (v1)
  {
    uint64_t v3 = (void *)((char *)this + 56);
    unint64_t v4 = (std::string *)((char *)this + 104);
    do
    {
      *(_OWORD *)uint64_t v22 = 0u;
      *(_OWORD *)std::string __p = 0u;
      int v24 = 1065353216;
      unint64_t v5 = (void *)v1[6];
      if (!v5) {
        goto LABEL_28;
      }
      do
      {
        unint64_t v6 = v5[3];
        do
        {
          unint64_t v25 = v6;
          int8x8_t v7 = *(int8x8_t *)((char *)this + 64);
          if (!*(void *)&v7) {
            goto LABEL_47;
          }
          uint8x8_t v8 = (uint8x8_t)vcnt_s8(v7);
          v8.i16[0] = vaddlv_u8(v8);
          if (v8.u32[0] > 1uLL)
          {
            unint64_t v9 = v6;
            if (v6 >= *(void *)&v7) {
              unint64_t v9 = v6 % *(void *)&v7;
            }
          }
          else
          {
            unint64_t v9 = (*(void *)&v7 - 1) & v6;
          }
          unint64_t v10 = *(void **)(*v3 + 8 * v9);
          if (!v10 || (uint64_t v11 = (void *)*v10) == 0) {
LABEL_47:
          }
            Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long long &>("Invalid group id %lu", &v25);
          if (v8.u32[0] < 2uLL)
          {
            uint64_t v12 = *(void *)&v7 - 1;
            while (1)
            {
              uint64_t v14 = v11[1];
              if (v14 == v6)
              {
                if (v11[2] == v6) {
                  goto LABEL_26;
                }
              }
              else if ((v14 & v12) != v9)
              {
                goto LABEL_47;
              }
              uint64_t v11 = (void *)*v11;
              if (!v11) {
                goto LABEL_47;
              }
            }
          }
          while (1)
          {
            unint64_t v13 = v11[1];
            if (v13 == v6) {
              break;
            }
            if (v13 >= *(void *)&v7) {
              v13 %= *(void *)&v7;
            }
            if (v13 != v9) {
              goto LABEL_47;
            }
LABEL_16:
            uint64_t v11 = (void *)*v11;
            if (!v11) {
              goto LABEL_47;
            }
          }
          if (v11[2] != v6) {
            goto LABEL_16;
          }
LABEL_26:
          unint64_t v26 = &v25;
          unint64_t v6 = std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)v3, &v25, (uint64_t)&std::piecewise_construct, &v26)[3];
        }
        while (v6 != v25);
        unint64_t v26 = v5 + 2;
        std::__hash_table<std::__hash_value_type<unsigned int,unsigned long long>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned long long>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned long long>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned long long>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>((uint64_t)v22, (unsigned int *)v5 + 4, (uint64_t)&std::piecewise_construct, (_DWORD **)&v26)[3] = v6;
        unint64_t v5 = (void *)*v5;
      }
      while (v5);
LABEL_28:
      if (*((char *)this + 127) < 0) {
        std::string::__init_copy_ctor_external(&v20, *((const std::string::value_type **)this + 13), *((void *)this + 14));
      }
      else {
        std::string v20 = *v4;
      }
      E5Common::Utils::MILDictFromCpp<unsigned int,unsigned long long>((uint64_t)v22, (void **)&v26);
      if (v26) {
        operator new();
      }
      unint64_t v26 = 0;
      MIL::Builder::OperationBuilder::SetAttribute();
      unint64_t v15 = v21;
      if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
      unint64_t v16 = v26;
      unint64_t v26 = 0;
      if (v16) {
        (*(void (**)(unint64_t *))(*v16 + 8))(v16);
      }
      if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v20.__r_.__value_.__l.__data_);
        uint64_t v17 = __p[0];
        if (__p[0]) {
          goto LABEL_41;
        }
      }
      else
      {
        uint64_t v17 = __p[0];
        if (__p[0])
        {
          do
          {
LABEL_41:
            long long v18 = (void *)*v17;
            operator delete(v17);
            uint64_t v17 = v18;
          }
          while (v18);
        }
      }
      int v19 = v22[0];
      v22[0] = 0;
      if (v19) {
        operator delete(v19);
      }
      uint64_t v1 = (void *)*v1;
    }
    while (v1);
  }
}

void sub_19228ABD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19228ABE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  uint64_t v22 = *(void *)(v20 - 88);
  *(void *)(v20 - 88) = 0;
  if (v22)
  {
    (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
    if ((a16 & 0x80000000) == 0)
    {
LABEL_3:
      std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&a20);
      _Unwind_Resume(a1);
    }
  }
  else if ((a16 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&a20);
  _Unwind_Resume(a1);
}

void sub_19228AC70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19228AC84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19228AC98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void nitro::ndarray<half>::pairwise_element_visitor<int,nitro::ndarray<half>& nitro::ndarray<half>::assign<int>(nitro::ndarray<int> const&)::{lambda(half &,int const&)#1}>(uint64_t *a1, uint64_t *a2)
{
  unint64_t v4 = (unint64_t *)a1[2];
  uint64_t v3 = (char *)a1[3];
  unint64_t v5 = (v3 - (char *)v4) >> 3;
  unint64_t v6 = (void *)a2[2];
  if (v5 != (a2[3] - (uint64_t)v6) >> 3) {
    goto LABEL_13;
  }
  if (v3 == (char *)v4) {
    return;
  }
  uint64_t v7 = v5 <= 1 ? 1 : (v3 - (char *)v4) >> 3;
  if (*v4 != *v6) {
    goto LABEL_13;
  }
  uint64_t v8 = 1;
  do
  {
    unint64_t v9 = v8;
    if (v7 == v8) {
      break;
    }
    unint64_t v10 = v4[v8];
    uint64_t v11 = v6[v8++];
  }
  while (v10 == v11);
  if (v9 < v5) {
LABEL_13:
  }
    nitro::ndarray<half>::pairwise_element_visitor<int,nitro::ndarray<half>& nitro::ndarray<half>::assign<int>(nitro::ndarray<int> const&)::{lambda(half &,int const&)#1}>(nitro::ndarray<int> const&,nitro::ndarray<half>& nitro::ndarray<half>::assign<int>(nitro::ndarray<int> const&)::{lambda(half &,int const&)#1})::{lambda(void)#1}::operator()();
  size_t v12 = v3 - (char *)v4;
  if (v3 == (char *)v4) {
    return;
  }
  uint64_t v13 = *a1;
  if (!*a1) {
    return;
  }
  if (v12 - 8 < 8)
  {
    uint64_t v14 = 1;
    unint64_t v15 = (unint64_t *)a1[2];
    do
    {
LABEL_20:
      uint64_t v21 = *v15++;
      v14 *= v21;
    }
    while (v15 != (unint64_t *)v3);
    goto LABEL_21;
  }
  unint64_t v16 = ((v12 - 8) >> 3) + 1;
  unint64_t v15 = &v4[v16 & 0x3FFFFFFFFFFFFFFELL];
  uint64_t v17 = v4 + 1;
  uint64_t v18 = 1;
  uint64_t v19 = v16 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v20 = 1;
  do
  {
    v18 *= *(v17 - 1);
    v20 *= *v17;
    v17 += 2;
    v19 -= 2;
  }
  while (v19);
  uint64_t v14 = v20 * v18;
  if (v16 != (v16 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_20;
  }
LABEL_21:
  if (!v14) {
    return;
  }
  uint64_t v22 = (uint64_t)v12 >> 3;
  if ((uint64_t)v12 >> 3 == 3)
  {
    unint64_t v164 = *v4;
    if (!*v4) {
      return;
    }
    uint64_t v73 = 0;
    uint64_t v74 = a2[8];
    uint64_t v75 = a1[8];
    unint64_t v76 = v4[1];
    uint64_t v77 = (uint64_t *)a1[5];
    uint64_t v159 = (uint64_t *)a2[5];
    uint64_t v78 = v13 + 2 * v75 + 16;
    uint64_t v162 = *v159;
    uint64_t v163 = *v77;
    uint64_t v161 = 2 * *v77;
    uint64_t v79 = 4 * v74 + 32;
    uint64_t v160 = 4 * *v159;
    while (!v76)
    {
LABEL_50:
      v75 += v163;
      v74 += v162;
      ++v73;
      v78 += v161;
      v79 += v160;
      if (v73 == v164) {
        return;
      }
    }
    uint64_t v80 = 0;
    unint64_t v81 = v4[2];
    uint64_t v82 = *a2;
    uint64_t v83 = a2[5];
    uint64_t v84 = v77[1];
    unint64_t v85 = v81 & 0xFFFFFFFFFFFFFFF0;
    uint64_t v86 = (int32x4_t *)(*a2 + v79);
    uint64_t v87 = v159[1];
    uint64_t v88 = (float16x8_t *)v78;
    uint64_t v89 = v74;
    uint64_t v90 = v75;
    while (1)
    {
      if (v81)
      {
        uint64_t v91 = v77[2];
        uint64_t v92 = *(void *)(v83 + 16);
        if (v81 >= 0x10 && (v92 == 1 ? (BOOL v93 = v91 == 1) : (BOOL v93 = 0), v93))
        {
          uint64_t v95 = v89 + v85 * v92;
          unint64_t v103 = v86;
          long long v104 = v88;
          unint64_t v105 = v81 & 0xFFFFFFFFFFFFFFF0;
          uint64_t v96 = v90 + v85 * v91;
          do
          {
            int32x4_t v106 = v103[-2];
            int32x4_t v107 = v103[-1];
            int32x4_t v108 = *v103;
            int32x4_t v109 = v103[1];
            v103 += 4;
            v104[-1] = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vcvtq_f32_s32(v106)), vcvtq_f32_s32(v107));
            *long long v104 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vcvtq_f32_s32(v108)), vcvtq_f32_s32(v109));
            v104 += 2;
            v105 -= 16;
          }
          while (v105);
          unint64_t v94 = v81 & 0xFFFFFFFFFFFFFFF0;
          if (v81 == v85) {
            goto LABEL_53;
          }
        }
        else
        {
          unint64_t v94 = 0;
          uint64_t v95 = v89;
          uint64_t v96 = v90;
        }
        unint64_t v97 = v81 - v94;
        long long v98 = (int *)(v82 + 4 * v95);
        uint64_t v99 = 4 * v92;
        uint64_t v100 = 2 * v91;
        uint64_t v101 = (_WORD *)(v13 + 2 * v96);
        do
        {
          _S0 = (float)*v98;
          __asm { FCVT            H0, S0 }
          _WORD *v101 = LOWORD(_S0);
          long long v98 = (int *)((char *)v98 + v99);
          uint64_t v101 = (_WORD *)((char *)v101 + v100);
          --v97;
        }
        while (v97);
      }
LABEL_53:
      v90 += v84;
      v89 += v87;
      ++v80;
      uint64_t v88 = (float16x8_t *)((char *)v88 + 2 * v84);
      uint64_t v86 = (int32x4_t *)((char *)v86 + 4 * v87);
      if (v80 == v76) {
        goto LABEL_50;
      }
    }
  }
  if (v22 == 2)
  {
    unint64_t v39 = *v4;
    if (!*v4) {
      return;
    }
    uint64_t v40 = 0;
    uint64_t v41 = a2[8];
    uint64_t v42 = a1[8];
    unint64_t v43 = v4[1];
    uint64_t v44 = *a2;
    uint64_t v45 = (uint64_t *)a2[5];
    uint64_t v46 = (uint64_t *)a1[5];
    uint64_t v47 = *v46;
    uint64_t v48 = *v45;
    unint64_t v49 = v43 & 0xFFFFFFFFFFFFFFF0;
    uint64_t v50 = v13 + 2 * v42 + 16;
    uint64_t v51 = 2 * *v46;
    uint64_t v52 = *a2 + 4 * v41 + 32;
    uint64_t v53 = 4 * *v45;
    while (1)
    {
      if (v43)
      {
        uint64_t v54 = v46[1];
        uint64_t v55 = v45[1];
        if (v43 >= 0x10 && (v55 == 1 ? (_ZF = v54 == 1) : (_ZF = 0), _ZF))
        {
          uint64_t v58 = v41 + v49 * v55;
          uint8x8_t v66 = (int32x4_t *)v52;
          uint64_t v67 = (float16x8_t *)v50;
          unint64_t v68 = v43 & 0xFFFFFFFFFFFFFFF0;
          uint64_t v59 = v42 + v49 * v54;
          do
          {
            int32x4_t v69 = v66[-2];
            int32x4_t v70 = v66[-1];
            int32x4_t v71 = *v66;
            int32x4_t v72 = v66[1];
            v66 += 4;
            v67[-1] = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vcvtq_f32_s32(v69)), vcvtq_f32_s32(v70));
            float16x8_t *v67 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vcvtq_f32_s32(v71)), vcvtq_f32_s32(v72));
            v67 += 2;
            v68 -= 16;
          }
          while (v68);
          unint64_t v57 = v43 & 0xFFFFFFFFFFFFFFF0;
          if (v43 == v49) {
            goto LABEL_33;
          }
        }
        else
        {
          unint64_t v57 = 0;
          uint64_t v58 = v41;
          uint64_t v59 = v42;
        }
        unint64_t v60 = v43 - v57;
        unint64_t v61 = (int *)(v44 + 4 * v58);
        uint64_t v62 = 4 * v55;
        uint64_t v63 = 2 * v54;
        unint64_t v64 = (_WORD *)(v13 + 2 * v59);
        do
        {
          _S0 = (float)*v61;
          __asm { FCVT            H0, S0 }
          *unint64_t v64 = LOWORD(_S0);
          unint64_t v61 = (int *)((char *)v61 + v62);
          unint64_t v64 = (_WORD *)((char *)v64 + v63);
          --v60;
        }
        while (v60);
      }
LABEL_33:
      v42 += v47;
      v41 += v48;
      ++v40;
      v50 += v51;
      v52 += v53;
      if (v40 == v39) {
        return;
      }
    }
  }
  if (v22 != 1)
  {
    if ((v12 & 0x8000000000000000) != 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v110 = operator new(v12);
    bzero(v110, v12 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v111 = *a2;
    if (v12 >> 3 <= 1) {
      unint64_t v112 = 1;
    }
    else {
      unint64_t v112 = v12 >> 3;
    }
    uint64_t v113 = a2[5];
    uint64_t v114 = a2[8];
    uint64_t v115 = v112 & 0x1FFFFFFFFFFFFFFELL;
    uint64_t v116 = a1[5];
    while (v112 >= 2)
    {
      uint64_t v119 = 0;
      uint64_t v120 = 0;
      uint64_t v121 = v112 & 0x1FFFFFFFFFFFFFFELL;
      uint64_t v122 = (void *)(v116 + 8);
      unint64_t v123 = v110 + 1;
      do
      {
        v119 += *(v122 - 1) * *(v123 - 1);
        v120 += *v122 * *v123;
        v123 += 2;
        v122 += 2;
        v121 -= 2;
      }
      while (v121);
      uint64_t v117 = v120 + v119;
      uint64_t v118 = v112 & 0x1FFFFFFFFFFFFFFELL;
      if (v112 != v115) {
        goto LABEL_78;
      }
LABEL_80:
      if (v112 < 2)
      {
        uint64_t v131 = 0;
        uint64_t v132 = 0;
LABEL_85:
        unint64_t v138 = v112 - v132;
        uint64_t v139 = v132;
        int v140 = (uint64_t *)(v113 + 8 * v132);
        uint64_t v141 = &v110[v139];
        do
        {
          uint64_t v143 = *v141++;
          uint64_t v142 = v143;
          uint64_t v144 = *v140++;
          v131 += v144 * v142;
          --v138;
        }
        while (v138);
        goto LABEL_87;
      }
      uint64_t v133 = 0;
      uint64_t v134 = 0;
      uint64_t v135 = v112 & 0x1FFFFFFFFFFFFFFELL;
      uint64_t v136 = (void *)(v113 + 8);
      int64_t v137 = v110 + 1;
      do
      {
        v133 += *(v136 - 1) * *(v137 - 1);
        v134 += *v136 * *v137;
        v137 += 2;
        v136 += 2;
        v135 -= 2;
      }
      while (v135);
      uint64_t v131 = v134 + v133;
      uint64_t v132 = v112 & 0x1FFFFFFFFFFFFFFELL;
      if (v112 != v115) {
        goto LABEL_85;
      }
LABEL_87:
      _S0 = (float)*(int *)(v111 + 4 * (v114 + v131));
      __asm { FCVT            H0, S0 }
      *(_WORD *)(v13 + 2 * v117) = LOWORD(_S0);
      if ((int)(v12 >> 3) >= 1)
      {
        uint64_t v146 = (v12 >> 3) + 1;
        int v147 = v12 >> 3;
        while (1)
        {
          uint64_t v148 = (v146 - 2);
          unint64_t v149 = v110[v148] + 1;
          v110[v148] = v149;
          if (v149 < v4[v148]) {
            break;
          }
          v110[(v146 - 2)] = 0;
          --v147;
          if ((unint64_t)--v146 <= 1) {
            goto LABEL_93;
          }
        }
        if (v147 > 0) {
          continue;
        }
      }
LABEL_93:
      operator delete(v110);
      return;
    }
    uint64_t v117 = 0;
    uint64_t v118 = 0;
LABEL_78:
    unint64_t v124 = v112 - v118;
    uint64_t v125 = v118;
    int v126 = (uint64_t *)(v116 + 8 * v118);
    long long v127 = &v110[v125];
    do
    {
      uint64_t v129 = *v127++;
      uint64_t v128 = v129;
      uint64_t v130 = *v126++;
      v117 += v130 * v128;
      --v124;
    }
    while (v124);
    goto LABEL_80;
  }
  unint64_t v23 = *v4;
  if (!*v4) {
    return;
  }
  uint64_t v24 = a2[8];
  uint64_t v25 = a1[8];
  uint64_t v26 = *a2;
  uint64_t v27 = *(void *)a1[5];
  uint64_t v28 = *(void *)a2[5];
  if (v23 < 0x10)
  {
    unint64_t v29 = 0;
LABEL_28:
    unint64_t v30 = v23 - v29;
    unint64_t v31 = (int *)(v26 + 4 * v24);
    uint64_t v32 = 4 * v28;
    uint64_t v33 = 2 * v27;
    int v34 = (_WORD *)(v13 + 2 * v25);
    do
    {
      _S0 = (float)*v31;
      __asm { FCVT            H0, S0 }
      _WORD *v34 = LOWORD(_S0);
      unint64_t v31 = (int *)((char *)v31 + v32);
      int v34 = (_WORD *)((char *)v34 + v33);
      --v30;
    }
    while (v30);
    return;
  }
  unint64_t v29 = 0;
  if (v28 != 1) {
    goto LABEL_28;
  }
  if (v27 != 1) {
    goto LABEL_28;
  }
  unint64_t v29 = v23 & 0xFFFFFFFFFFFFFFF0;
  uint64_t v150 = v24 + (v23 & 0xFFFFFFFFFFFFFFF0);
  uint64_t v151 = v25 + (v23 & 0xFFFFFFFFFFFFFFF0);
  uint64_t v152 = (int32x4_t *)(v26 + 4 * v24 + 32);
  uint64_t v153 = (float16x8_t *)(v13 + 2 * v25 + 16);
  unint64_t v154 = v23 & 0xFFFFFFFFFFFFFFF0;
  do
  {
    int32x4_t v155 = v152[-2];
    int32x4_t v156 = v152[-1];
    int32x4_t v157 = *v152;
    int32x4_t v158 = v152[1];
    v152 += 4;
    v153[-1] = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vcvtq_f32_s32(v155)), vcvtq_f32_s32(v156));
    float16x8_t *v153 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vcvtq_f32_s32(v157)), vcvtq_f32_s32(v158));
    v153 += 2;
    v154 -= 16;
  }
  while (v154);
  uint64_t v24 = v150;
  uint64_t v25 = v151;
  if (v23 != v29) {
    goto LABEL_28;
  }
}

void sub_19228B3A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<half>::pairwise_element_visitor<int,nitro::ndarray<half>& nitro::ndarray<half>::assign<int>(nitro::ndarray<int> const&)::{lambda(half &,int const&)#1}>(nitro::ndarray<int> const&,nitro::ndarray<half>& nitro::ndarray<half>::assign<int>(nitro::ndarray<int> const&)::{lambda(half &,int const&)#1})::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  int8x8_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  unint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  unint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    unint64_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    uint64_t v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      unint64_t v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        unint64_t v10 = __p;
      }
      else {
        unint64_t v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  void nitro::ndarray<half>::pairwise_element_visitor<int,nitro::ndarray<half>& nitro::ndarray<half>::assign<int>(nitro::ndarray<int> const&)::{lambda(half &,int const&)#1}>(nitro::ndarray<int> const&,nitro::ndarray<half>& nitro::ndarray<half>::assign<int>(nitro::ndarray<int> const&)::{lambda(half &,int const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_19228B64C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void EspressoLight::espresso_plan::change_input_shapes(uint64_t a1, int a2, uint64_t *a3, void *a4, void *a5, void *a6, void *a7, void *a8, uint64_t *a9)
{
  uint64_t v87 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = *(void *)(a1 + 1064);
  if (*(_DWORD *)(v10 + 160))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
    std::to_string(&buf, *(_DWORD *)(*(void *)(a1 + 1064) + 160));
    unint64_t v57 = std::string::insert(&buf, 0, "Inconsistent phase of espresso_plan: ");
    long long v58 = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
    v69.__r_.__value_.__r.__words[0] = v57->__r_.__value_.__r.__words[2];
    long long v68 = v58;
    v57->__r_.__value_.__l.__size_ = 0;
    v57->__r_.__value_.__r.__words[2] = 0;
    v57->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, (const std::string *)&v68);
    exception->__vftable = (std::runtime_error_vtbl *)&unk_1EE324018;
    LODWORD(exception[1].__vftable) = -5;
  }
  *(unsigned char *)(a1 + 1096) = 1;
  uint64_t v13 = v10 + 24;
  uint64_t v12 = *(void *)(v10 + 24);
  if (a2 >= (unint64_t)((*(void *)(v13 + 8) - v12) >> 4))
  {
    uint64_t v59 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v59, "Invalid network_index.");
    __cxa_throw(v59, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v15 = v12 + 16 * a2;
  unint64_t v16 = *(std::__shared_weak_count **)(v15 + 8);
  unint64_t v60 = *(Espresso::net **)v15;
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)uint64_t v73 = 0u;
  long long v74 = 0u;
  int v75 = 1065353216;
  uint64_t v17 = *a3;
  if (a3[1] != *a3)
  {
    unint64_t v18 = 0;
    unint64_t v61 = (_DWORD *)((char *)v60 + 192);
    uint64_t v62 = (uint64_t)v60 + 184;
    do
    {
      EspressoLight::espresso_plan::default_blob_name_if_null(&__p, *(void **)(a1 + 1064), a2, 0, *(char **)(v17 + 8 * v18));
      if (!std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>((void *)v60 + 17, (unsigned __int8 *)&__p))
      {
        uint64_t v52 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        uint64_t v53 = std::string::append(&buf, "' not found.");
        long long v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
        v69.__r_.__value_.__r.__words[0] = v53->__r_.__value_.__r.__words[2];
        long long v68 = v54;
        v53->__r_.__value_.__l.__size_ = 0;
        v53->__r_.__value_.__r.__words[2] = 0;
        v53->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v52, (const std::string *)&v68);
        __cxa_throw(v52, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      unsigned int v19 = *(_DWORD *)(*a4 + 4 * v18);
      unsigned int v20 = *(_DWORD *)(*a5 + 4 * v18);
      unsigned int v21 = *(_DWORD *)(*a6 + 4 * v18);
      unsigned int v22 = *(_DWORD *)(*a7 + 4 * v18);
      int v23 = *(_DWORD *)(*a8 + 4 * v18);
      *(_OWORD *)&v69.__r_.__value_.__r.__words[1] = 0u;
      long long v70 = 0u;
      uint64_t v71 = 0;
      *(void *)&long long v68 = __PAIR64__(v20, v19);
      *((void *)&v68 + 1) = __PAIR64__(v22, v21);
      uint64_t v24 = *a9;
      BOOL v25 = v18 >= (a9[1] - *a9) >> 2;
      LODWORD(v69.__r_.__value_.__l.__data_) = v23;
      HIDWORD(v69.__r_.__value_.__r.__words[0]) = -1;
      if (!v25) {
        HIDWORD(v69.__r_.__value_.__r.__words[0]) = *(_DWORD *)(v24 + 4 * v18);
      }
      uint64_t v26 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>(v62, &__p);
      if (v61 == v26) {
        goto LABEL_22;
      }
      uint64_t v27 = v26 + 14;
      if (v19 == -1) {
        LODWORD(v68) = *v27;
      }
      if (v20 == -1) {
        DWORD1(v68) = v26[15];
      }
      if (v21 == -1) {
        DWORD2(v68) = v26[16];
      }
      if (v22 == -1) {
        HIDWORD(v68) = v26[17];
      }
      if (v23 == -1) {
        LODWORD(v69.__r_.__value_.__l.__data_) = v26[18];
      }
      if (!Espresso::layer_shape::operator==((uint64_t)&v68, (uint64_t)v27))
      {
LABEL_22:
        buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
        uint64_t v28 = std::__hash_table<std::__hash_value_type<std::string,Espresso::layer_shape>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v73, (unsigned __int8 *)&__p, (long long **)&buf);
        long long v29 = *(_OWORD *)&v69.__r_.__value_.__l.__data_;
        *(_OWORD *)(v28 + 40) = v68;
        *(_OWORD *)(v28 + 56) = v29;
        *((void *)v28 + 9) = *((void *)&v69.__r_.__value_.__l + 2);
        unint64_t v30 = std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v28 + 80, 0, 0, 0);
        uint64_t v32 = Espresso::espresso_os_log_subsystem((Espresso *)v30, v31);
        if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
        {
          unint64_t v33 = (unint64_t)(a3[1] - *a3) >> 3;
          p_p = &__p;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          int v35 = *(_DWORD *)(*a4 + 4 * v18);
          int v36 = *(_DWORD *)(*a5 + 4 * v18);
          int v37 = *(_DWORD *)(*a6 + 4 * v18);
          int v38 = *(_DWORD *)(*a7 + 4 * v18);
          int v39 = *(_DWORD *)(*a8 + 4 * v18);
          LODWORD(buf.__r_.__value_.__l.__data_) = 67110914;
          HIDWORD(buf.__r_.__value_.__r.__words[0]) = v18;
          LOWORD(buf.__r_.__value_.__r.__words[1]) = 1024;
          *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = v33;
          HIWORD(buf.__r_.__value_.__r.__words[1]) = 2080;
          buf.__r_.__value_.__r.__words[2] = (std::string::size_type)p_p;
          __int16 v77 = 1024;
          int v78 = v35;
          __int16 v79 = 1024;
          int v80 = v36;
          __int16 v81 = 1024;
          int v82 = v37;
          __int16 v83 = 1024;
          int v84 = v38;
          __int16 v85 = 1024;
          int v86 = v39;
          _os_log_impl(&dword_1920CB000, v32, OS_LOG_TYPE_INFO, "[change_input_shapes] index=%d/%d name=%s w=%d h=%d k=%d n=%d seq=%d", (uint8_t *)&buf, 0x36u);
        }
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      ++v18;
      uint64_t v17 = *a3;
    }
    while (v18 < (a3[1] - *a3) >> 3);
    if (*((void *)&v74 + 1))
    {
      uint64_t v40 = v60;
      uint64_t v41 = (void *)*((void *)v60 + 29);
      if (v41 != (void *)((char *)v60 + 240))
      {
        do
        {
          if (*((char *)v41 + 55) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&v68, (const std::string::value_type *)v41[4], v41[5]);
          }
          else
          {
            long long v68 = *((_OWORD *)v41 + 2);
            v69.__r_.__value_.__r.__words[0] = v41[6];
          }
          v69.__r_.__value_.__s.__data_[8] = *((unsigned char *)v41 + 56);
          if (!std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>(v73, (unsigned __int8 *)&v68))
          {
            uint64_t v42 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>(v62, &v68);
            if (v61 == (_DWORD *)v42)
            {
              uint64_t v55 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::operator+<char>();
              std::runtime_error::runtime_error(v55, &buf);
              __cxa_throw(v55, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
            }
            unint64_t v43 = v42;
            buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v68;
            uint64_t v44 = std::__hash_table<std::__hash_value_type<std::string,Espresso::layer_shape>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v73, (unsigned __int8 *)&v68, (long long **)&buf);
            long long v45 = *(_OWORD *)(v43 + 7);
            long long v46 = *(_OWORD *)(v43 + 9);
            *((void *)v44 + 9) = v43[11];
            *(_OWORD *)(v44 + 56) = v46;
            *(_OWORD *)(v44 + 40) = v45;
            if (v44 + 16 != (char *)(v43 + 4)) {
              std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v44 + 80, (char *)v43[12], v43[13], (uint64_t)(v43[13] - v43[12]) >> 2);
            }
          }
          if (v69.__r_.__value_.__s.__data_[7] < 0) {
            operator delete((void *)v68);
          }
          uint64_t v47 = (void *)v41[1];
          if (v47)
          {
            do
            {
              uint64_t v48 = v47;
              uint64_t v47 = (void *)*v47;
            }
            while (v47);
          }
          else
          {
            do
            {
              uint64_t v48 = (void *)v41[2];
              BOOL v49 = *v48 == (void)v41;
              uint64_t v41 = v48;
            }
            while (!v49);
          }
          uint64_t v41 = v48;
        }
        while (v48 != (void *)((char *)v60 + 240));
      }
      if (Espresso::net::fast_reshape_enabled(v60))
      {
        if (Espresso::net::try_fast_reshape((uint64_t)v60, (uint64_t)v73)) {
          goto LABEL_56;
        }
        uint64_t v40 = v60;
        uint64_t v50 = (std::__shared_weak_count *)*((void *)v60 + 146);
        *(_OWORD *)((char *)v60 + 1160) = 0u;
        if (v50) {
          nitro::nitro_function::nitro_function(v50);
        }
      }
      if (v16) {
        atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      Espresso::compute_network_shape<std::string,Espresso::layer_shape,std::unordered_map<std::string,Espresso::layer_shape>>((uint64_t)&v68, (uint64_t)v40, v73);
      if (v16) {
        nitro::nitro_function::nitro_function(v16);
      }
      *((unsigned char *)v40 + 180) = 0;
      Espresso::shape_network_recursive(v40, (Espresso::net *)&v68, 0, 0);
      std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v69.__r_.__value_.__l.__size_, (char *)v69.__r_.__value_.__r.__words[2]);
      std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v68, *((char **)&v68 + 1));
    }
  }
LABEL_56:
  std::__hash_table<std::__hash_value_type<std::string,Espresso::layer_shape>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::layer_shape>>>::__deallocate_node((void *)v74);
  uint64_t v51 = v73[0];
  v73[0] = 0;
  if (v51) {
    operator delete(v51);
  }
  if (v16) {
    nitro::nitro_function::nitro_function(v16);
  }
}

void sub_19228BD98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v43 - 137) < 0)
  {
    operator delete(*(void **)(v43 - 160));
    if ((v42 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v42)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v41);
  goto LABEL_8;
}

char *std::__hash_table<std::__hash_value_type<std::string,Espresso::layer_shape>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, long long **a3)
{
  unint64_t v7 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v9) {
        unint64_t v3 = v7 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v7;
    }
    uint64_t v12 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      uint64_t v13 = (char *)*v12;
      if (*v12)
      {
        do
        {
          unint64_t v14 = *((void *)v13 + 1);
          if (v14 == v8)
          {
            if (std::equal_to<std::string>::operator()[abi:ne180100]((unsigned __int8 *)v13 + 16, a2)) {
              return v13;
            }
          }
          else
          {
            if (v11 > 1)
            {
              if (v14 >= v9) {
                v14 %= v9;
              }
            }
            else
            {
              v14 &= v9 - 1;
            }
            if (v14 != v3) {
              break;
            }
          }
          uint64_t v13 = *(char **)v13;
        }
        while (v13);
      }
    }
  }
  uint64_t v15 = (void *)(a1 + 16);
  uint64_t v13 = (char *)operator new(0x68uLL);
  v26[0] = v13;
  v26[1] = a1 + 16;
  char v27 = 0;
  *(void *)uint64_t v13 = 0;
  *((void *)v13 + 1) = v8;
  std::pair<std::string const,Espresso::layer_shape>::pair[abi:ne180100]<std::string const&>((std::string *)(v13 + 16), *a3);
  char v27 = 1;
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v9 || (float)(v17 * (float)v9) < v16)
  {
    BOOL v18 = 1;
    if (v9 >= 3) {
      BOOL v18 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v9);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__rehash<true>(a1, v21);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v22 = *(void *)a1;
  int v23 = *(void **)(*(void *)a1 + 8 * v3);
  if (v23)
  {
    *(void *)uint64_t v13 = *v23;
LABEL_38:
    void *v23 = v13;
    goto LABEL_39;
  }
  *(void *)uint64_t v13 = *v15;
  *uint64_t v15 = v13;
  *(void *)(v22 + 8 * v3) = v15;
  if (*(void *)v13)
  {
    unint64_t v24 = *(void *)(*(void *)v13 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v24 >= v9) {
        v24 %= v9;
      }
    }
    else
    {
      v24 &= v9 - 1;
    }
    int v23 = (void *)(*(void *)a1 + 8 * v24);
    goto LABEL_38;
  }
LABEL_39:
  v26[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,Espresso::layer_shape>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,Espresso::layer_shape>,void *>>>>::reset[abi:ne180100]((uint64_t)v26);
  return v13;
}

void sub_19228C14C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,Espresso::layer_shape>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,Espresso::layer_shape>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,Espresso::layer_shape>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,Espresso::layer_shape>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,Espresso::layer_shape>,0>((uint64_t)v1 + 16);
    }
    operator delete(v1);
  }
}

void std::__hash_table<std::__hash_value_type<std::string,Espresso::layer_shape>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::layer_shape>>>::__deallocate_node(void *a1)
{
  if (a1)
  {
    uint64_t v1 = a1;
    do
    {
      int8x8_t v2 = (void *)*v1;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,Espresso::layer_shape>,0>((uint64_t)(v1 + 2));
      operator delete(v1);
      uint64_t v1 = v2;
    }
    while (v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,Espresso::layer_shape>,0>(uint64_t a1)
{
  int8x8_t v2 = *(void **)(a1 + 64);
  if (v2)
  {
    *(void *)(a1 + 72) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    unint64_t v3 = *(void **)a1;
    operator delete(v3);
  }
}

void void nitro::ndarray<float>::pairwise_element_visitor<int,nitro::ndarray<float>& nitro::ndarray<float>::assign<int>(nitro::ndarray<int> const&)::{lambda(float &,int const&)#1}>(nitro::ndarray<int> const&,nitro::ndarray<float>& nitro::ndarray<float>::assign<int>(nitro::ndarray<int> const&)::{lambda(float &,int const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    int8x8_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      unint64_t v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        unint64_t v4 = __p;
      }
      else {
        unint64_t v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    unint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  unint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_19228C3A0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19228C3B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19228C3ACLL);
}

void Espresso::AOT::Backends::CostModel::ConvOpEstimator::EstimateComputeResources(Espresso::AOT::Backends::CostModel::ConvOpEstimator *this, const MIL::IROperation *a2)
{
}

void sub_19228C8C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  *a9 = 0;
  MEMORY[0x192FF16B0](v15, 0x1000C401CC6BE04);
  _Unwind_Resume(a1);
}

void Espresso::AOT::SegmentsIOTransformer::Run(E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset *a1@<X1>, void *a2@<X2>, uint64_t *a3@<X8>)
{
  unint64_t v4 = a1;
  uint64_t v5 = (_anonymous_namespace_ *)(*(uint64_t (**)(E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset *))(*(void *)a1 + 40))(a1);
  MEMORY[0x192FEFD50](v315, v4);
  MIL::Transform::ProgramTransformer::GetProgramBuilder(&v313, (MIL::Transform::ProgramTransformer *)v315);
  uint64_t v6 = *a2;
  uint64_t v267 = a2[1];
  if (*a2 != v267)
  {
    long long v271 = xmmword_192DB5600;
    unint64_t v265 = v4;
    unint64_t v266 = a2;
    unint64_t v269 = v5;
    do
    {
      uint64_t v268 = v6;
      if ((Espresso::AOT::IsFunctionSegmented(v4) & 1) == 0)
      {
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        std::logic_error::logic_error(exception, (const std::string *)__p);
        exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
        __cxa_throw(exception, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
      }
      uint64_t Function = MIL::IRProgram::GetFunction();
      MIL::Builder::ProgramBuilder::GetFunction();
      MIL::Builder::FunctionBuilder::SelectedSpecialization(v311);
      MIL::Builder::FunctionBuilder::GetBlock();
      MIL::Builder::BlockBuilder::GetOperations((uint64_t *)&v307, v309);
      MIL::Builder::BlockBuilder::GetOutputNames((uint64_t *)&v305, v309);
      unint64_t v8 = (char *)v305;
      unint64_t v9 = (char *)v306;
      *(_OWORD *)unint64_t v302 = 0u;
      *(_OWORD *)v303 = 0u;
      int v304 = 1065353216;
      if (v305 != v306)
      {
        do
        {
          std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v302, (uint64_t)v8, (uint64_t)v8);
          v8 += 24;
        }
        while (v8 != v9);
      }
      *(void *)std::string __p = operator new(0x20uLL);
      *(_OWORD *)&__p[8] = v271;
      strcpy(*(char **)__p, "NeuralEngineOptimizedIOBuffer");
      qmemcpy(v270, "ptimizedIOBufferNeuralEngineOpti", sizeof(v270));
      MIL::IRObject::TryGetAttributeSharedPtr();
      if ((__p[23] & 0x80000000) != 0)
      {
        operator delete(*(void **)__p);
        *(_OWORD *)v297 = 0u;
        *(_OWORD *)unint64_t v298 = 0u;
        int v299 = 1065353216;
        unsigned __int8 v10 = v300;
        if (v300)
        {
LABEL_11:
          E5Common::Utils::MILDictToCpp<std::string,BOOL>(v10, (uint64_t)__p);
          if (v298[1])
          {
            unint64_t v11 = (void **)v298[0];
            if (v298[0])
            {
              do
              {
                unint64_t v19 = (void **)*v11;
                if (*((char *)v11 + 39) < 0) {
                  operator delete(v11[2]);
                }
                operator delete(v11);
                unint64_t v11 = v19;
              }
              while (v19);
            }
            v298[0] = 0;
            uint64_t v12 = (char *)v297[1];
            if (v297[1])
            {
              uint64_t v13 = 0;
              do
                *((void *)v297[0] + (void)v13++) = 0;
              while (v12 != v13);
            }
            v298[1] = 0;
          }
          unint64_t v14 = *(void **)__p;
          *(void *)std::string __p = 0;
          uint64_t v15 = v297[0];
          v297[0] = v14;
          if (v15) {
            operator delete(v15);
          }
          unint64_t v16 = *(void *)&__p[8];
          float v17 = *(void ***)&__p[16];
          *(void *)&__p[8] = 0;
          v298[0] = *(void **)&__p[16];
          v298[1] = *(void **)&__p[24];
          int v299 = LODWORD(v285);
          v297[1] = (void *)v16;
          if (*(void *)&__p[24])
          {
            unint64_t v18 = *(void *)(*(void *)&__p[16] + 8);
            if ((v16 & (v16 - 1)) != 0)
            {
              if (v18 >= v16) {
                v18 %= v16;
              }
            }
            else
            {
              v18 &= v16 - 1;
            }
            *((void *)v297[0] + v18) = v298;
            *(void *)&__p[16] = 0;
            *(void *)&__p[24] = 0;
          }
          else if (*(void *)&__p[16])
          {
            do
            {
              unint64_t v20 = (void **)*v17;
              if (*((char *)v17 + 39) < 0) {
                operator delete(v17[2]);
              }
              operator delete(v17);
              float v17 = v20;
            }
            while (v20);
          }
          size_t v21 = *(void **)__p;
          *(void *)std::string __p = 0;
          if (v21) {
            operator delete(v21);
          }
        }
      }
      else
      {
        *(_OWORD *)v297 = 0u;
        *(_OWORD *)unint64_t v298 = 0u;
        int v299 = 1065353216;
        unsigned __int8 v10 = v300;
        if (v300) {
          goto LABEL_11;
        }
      }
      MIL::Builder::FunctionBuilder::GetInputs((uint64_t *)__p, v311);
      uint64_t v22 = *(void **)&__p[16];
      if (*(void *)&__p[16])
      {
        do
        {
          int v23 = (MIL::Builder::Variable *)v22[2];
          uint64_t Name = MIL::Builder::Variable::GetName(v23);
          uint64_t Type = (MIL::MILContext *)MIL::Builder::Variable::TryGetType(v23);
          MIL::Builder::FunctionBuilder::RemoveInput();
          if (*(char *)(Name + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v296, *(const std::string::value_type **)Name, *(void *)(Name + 8));
          }
          else
          {
            long long v28 = *(_OWORD *)Name;
            v296.__r_.__value_.__r.__words[2] = *(void *)(Name + 16);
            *(_OWORD *)&v296.__r_.__value_.__l.__data_ = v28;
          }
          MIL::Builder::FunctionBuilder::AddInput();
          if (SHIBYTE(v296.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v296.__r_.__value_.__l.__data_);
          }
          uint64_t v22 = (void *)*v22;
        }
        while (v22);
        long long v29 = *(void **)&__p[16];
        if (*(void *)&__p[16])
        {
          do
          {
            unint64_t v30 = (void *)*v29;
            operator delete(v29);
            long long v29 = v30;
          }
          while (v30);
        }
      }
      unint64_t v31 = *(void **)__p;
      *(void *)std::string __p = 0;
      if (v31) {
        operator delete(v31);
      }
      int v293 = 0;
      v294 = 0;
      uint64_t v295 = 0;
      uint64_t v32 = (MIL::Builder::OperationBuilder **)v307;
      unint64_t v33 = v308;
      unint64_t v272 = v308;
      while (v32 != v33)
      {
        int v34 = *v32;
        int v35 = v32[1];
        *(void *)&long long v292 = *v32;
        *((void *)&v292 + 1) = v35;
        if (v35) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)v35 + 1, 1uLL, memory_order_relaxed);
        }
        uint64_t Operator = MIL::Builder::OperationBuilder::GetOperator(v34);
        uint64_t v37 = (*(uint64_t (**)(uint64_t))(*(void *)Operator + 16))(Operator);
        int v38 = *(char *)(v37 + 23);
        if (v38 < 0)
        {
          if (*(void *)(v37 + 8) != 19) {
            goto LABEL_64;
          }
          uint64_t v37 = *(void *)v37;
        }
        else if (v38 != 19)
        {
          goto LABEL_64;
        }
        if (*(void *)v37 != 0x736F695F4C4D3545
          || *(void *)(v37 + 8) != 0x736E6172742E3631
          || *(void *)(v37 + 11) != 0x726566736E617274)
        {
LABEL_64:
          uint64_t v41 = MIL::Builder::OperationBuilder::GetOperator((MIL::Builder::OperationBuilder *)v292);
          if ((*(unsigned int (**)(uint64_t))(*(void *)v41 + 128))(v41))
          {
            int v42 = (MIL::Builder::OperationBuilder *)v292;
            long long v283 = v292;
            if (*((void *)&v292 + 1)) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v292 + 1) + 8), 1uLL, memory_order_relaxed);
            }
            v281 = v309;
            v282 = v310;
            if (v310) {
              atomic_fetch_add_explicit(&v310->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            MIL::Builder::OperationBuilder::GetInputArguments((uint64_t *)v339, v42);
            long long __dst = 0u;
            long long v337 = 0u;
            int v338 = 1065353216;
            unint64_t v333 = 0;
            uint8x8_t v334 = 0;
            v335 = 0;
            *((unsigned char *)&v330.__r_.__value_.__s + 23) = 4;
            strcpy((char *)&v330, "call");
            long long v331 = v283;
            if (*((void *)&v283 + 1)) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v283 + 1) + 8), 1uLL, memory_order_relaxed);
            }
            MIL::Builder::BlockBuilder::AddOperation();
            uint64_t v43 = (std::__shared_weak_count *)*((void *)&v331 + 1);
            if (*((void *)&v331 + 1)
              && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v331 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
              std::__shared_weak_count::__release_weak(v43);
              if ((SHIBYTE(v330.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_75:
                MIL::Builder::OperationBuilder::GetParameterNames((uint64_t *)&v330, (MIL::Builder::OperationBuilder *)v283);
                uint64_t v44 = (uint64_t *)v330.__r_.__value_.__r.__words[2];
                if (!v330.__r_.__value_.__r.__words[2]) {
                  goto LABEL_89;
                }
                while (1)
                {
                  ArgumentForParameter = (MIL::Builder::Variable *)MIL::Builder::OperationBuilder::GetArgumentForParameter();
                  if (*((char *)v44 + 39) < 0) {
                    std::string::__init_copy_ctor_external(&v327, (const std::string::value_type *)v44[2], v44[3]);
                  }
                  else {
                    std::string v327 = *(std::string *)(v44 + 2);
                  }
                  MIL::Builder::OperationBuilder::AddInput();
                  long long v46 = v329;
                  if (v329)
                  {
                    if (!atomic_fetch_add(&v329->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
                      break;
                    }
                  }
                  if (SHIBYTE(v327.__r_.__value_.__r.__words[2]) < 0) {
                    goto LABEL_82;
                  }
LABEL_83:
                  if (!MIL::Builder::Variable::TryGetType(ArgumentForParameter))
                  {
                    unint64_t v261 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                    std::operator+<char>();
                    std::runtime_error::runtime_error(v261, &v326);
                    __cxa_throw(v261, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                  }
                  v326.__r_.__value_.__r.__words[0] = MIL::Builder::Variable::TryGetType(ArgumentForParameter);
                  std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::__emplace_unique_key_args<std::string,std::string const&,MIL::IRValueType const*>((uint64_t)&__dst, (uint64_t)(v44 + 2), (uint64_t)(v44 + 2), &v326);
                  uint64_t v44 = (uint64_t *)*v44;
                  if (!v44)
                  {
                    uint64_t v47 = (void **)v330.__r_.__value_.__r.__words[2];
                    if (v330.__r_.__value_.__r.__words[2])
                    {
                      do
                      {
                        uint64_t v51 = (void **)*v47;
                        if (*((char *)v47 + 39) < 0) {
                          operator delete(v47[2]);
                        }
                        operator delete(v47);
                        uint64_t v47 = v51;
                      }
                      while (v51);
                    }
LABEL_89:
                    uint64_t v48 = (void *)v330.__r_.__value_.__r.__words[0];
                    v330.__r_.__value_.__r.__words[0] = 0;
                    if (v48) {
                      operator delete(v48);
                    }
                    long long v325 = v283;
                    if (*((void *)&v283 + 1)) {
                      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v283 + 1) + 8), 1uLL, memory_order_relaxed);
                    }
                    MIL::Builder::BlockBuilder::RemoveOperation();
                    BOOL v49 = (std::__shared_weak_count *)*((void *)&v325 + 1);
                    if (*((void *)&v325 + 1)
                      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v325 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
                    {
                      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
                      std::__shared_weak_count::__release_weak(v49);
                    }
                    unint64_t v50 = 0;
                    while (2)
                    {
                      while (2)
                      {
                        if (v50 >= MIL::Builder::OperationBuilder::GetNumOutputs((MIL::Builder::OperationBuilder *)v283))
                        {
                          unint64_t v123 = *(uint64_t **)(MIL::Builder::OperationBuilder::GetAttributes((MIL::Builder::OperationBuilder *)v283)
                                             + 16);
                          if (!v123)
                          {
LABEL_207:
                            memset(__p, 0, sizeof(__p));
                            float v285 = *(float *)&v338;
                            size_t prime = *((void *)&__dst + 1);
                            if (*((void *)&__dst + 1) == 1)
                            {
                              size_t prime = 2;
                              goto LABEL_312;
                            }
                            if ((*((void *)&__dst + 1) & (*((void *)&__dst + 1) - 1)) != 0)
                            {
                              size_t prime = std::__next_prime(*((size_t *)&__dst + 1));
                              int8x8_t v128 = *(int8x8_t *)&__p[8];
                              BOOL v129 = prime >= *(void *)&__p[8];
                              if (prime > *(void *)&__p[8]) {
                                goto LABEL_311;
                              }
                            }
                            else
                            {
                              int8x8_t v128 = 0;
                              BOOL v129 = 1;
                              if (*((void *)&__dst + 1))
                              {
LABEL_311:
                                if (prime >> 61) {
                                  std::__throw_bad_array_new_length[abi:ne180100]();
                                }
LABEL_312:
                                int32x4_t v157 = operator new(8 * prime);
                                int32x4_t v158 = *(void **)__p;
                                *(void *)std::string __p = v157;
                                if (v158) {
                                  operator delete(v158);
                                }
                                uint64_t v159 = 0;
                                *(void *)&__p[8] = prime;
                                do
                                  *(void *)(*(void *)__p + 8 * v159++) = 0;
                                while (prime != v159);
                                uint64_t v160 = *(void ***)&__p[16];
                                if (!*(void *)&__p[16]) {
                                  goto LABEL_336;
                                }
                                size_t v161 = *(void *)(*(void *)&__p[16] + 8);
                                size_t v162 = prime - 1;
                                if ((prime & (prime - 1)) == 0)
                                {
                                  size_t v163 = v161 & v162;
                                  *(void *)(*(void *)__p + 8 * v163) = &__p[16];
                                  while (1)
                                  {
                                    unint64_t v164 = *v160;
                                    if (!*v160) {
                                      break;
                                    }
                                    size_t v165 = v164[1] & v162;
                                    if (v165 == v163)
                                    {
                                      uint64_t v160 = (void **)*v160;
                                    }
                                    else if (*(void *)(*(void *)__p + 8 * v165))
                                    {
                                      *uint64_t v160 = (void *)*v164;
                                      uint64_t v166 = 8 * v165;
                                      *unint64_t v164 = **(void **)(*(void *)__p + v166);
                                      **(void **)(*(void *)__p + v166) = v164;
                                    }
                                    else
                                    {
                                      *(void *)(*(void *)__p + 8 * v165) = v160;
                                      uint64_t v160 = (void **)v164;
                                      size_t v163 = v165;
                                    }
                                  }
                                  goto LABEL_336;
                                }
                                if (v161 >= prime) {
                                  v161 %= prime;
                                }
                                *(void *)(*(void *)__p + 8 * v161) = &__p[16];
                                uint64_t v167 = *v160;
                                if (!*v160)
                                {
LABEL_336:
                                  unint64_t i = (unsigned __int8 *)v337;
                                  if ((void)v337) {
                                    goto LABEL_337;
                                  }
                                  goto LABEL_338;
                                }
                                while (1)
                                {
LABEL_331:
                                  size_t v169 = v167[1];
                                  if (v169 >= prime) {
                                    v169 %= prime;
                                  }
                                  if (v169 == v161) {
                                    goto LABEL_330;
                                  }
                                  if (*(void *)(*(void *)__p + 8 * v169)) {
                                    break;
                                  }
                                  *(void *)(*(void *)__p + 8 * v169) = v160;
                                  uint64_t v160 = (void **)v167;
                                  uint64_t v167 = (void *)*v167;
                                  size_t v161 = v169;
                                  if (!v167) {
                                    goto LABEL_336;
                                  }
                                }
                                *uint64_t v160 = (void *)*v167;
                                uint64_t v168 = 8 * v169;
                                *uint64_t v167 = **(void **)(*(void *)__p + v168);
                                **(void **)(*(void *)__p + v168) = v167;
                                uint64_t v167 = v160;
LABEL_330:
                                uint64_t v160 = (void **)v167;
                                uint64_t v167 = (void *)*v167;
                                if (!v167) {
                                  goto LABEL_336;
                                }
                                goto LABEL_331;
                              }
                            }
                            if (v129) {
                              goto LABEL_336;
                            }
                            unint64_t v136 = vcvtps_u32_f32((float)*(unint64_t *)&__p[24] / v285);
                            if (*(void *)&v128 < 3uLL
                              || (uint8x8_t v137 = (uint8x8_t)vcnt_s8(v128), v137.i16[0] = vaddlv_u8(v137), v137.u32[0] > 1uLL))
                            {
                              unint64_t v136 = std::__next_prime(v136);
                            }
                            else
                            {
                              uint64_t v138 = 1 << -(char)__clz(v136 - 1);
                              if (v136 >= 2) {
                                unint64_t v136 = v138;
                              }
                            }
                            if (prime <= v136) {
                              size_t prime = v136;
                            }
                            if (prime >= *(void *)&v128) {
                              goto LABEL_336;
                            }
                            if (prime) {
                              goto LABEL_311;
                            }
                            uint64_t v194 = *(void **)__p;
                            *(void *)std::string __p = 0;
                            if (v194) {
                              operator delete(v194);
                            }
                            *(void *)&__p[8] = 0;
                            for (unint64_t i = (unsigned __int8 *)v337; i; unint64_t i = *(unsigned __int8 **)i)
LABEL_337:
                              std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,MIL::IRValueType const*> const&>((uint64_t)__p, i + 16, (uint64_t)(i + 16));
LABEL_338:
                            v286 = 0;
                            int v287 = 0;
                            unint64_t v288 = 0;
                            int8x8_t v171 = v333;
                            int64_t v172 = v334 - v333;
                            if (v334 != v333)
                            {
                              if (v172 < 0) {
                                std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                              }
                              v286 = operator new(v334 - v333);
                              int v287 = v286;
                              unint64_t v173 = (char *)v286 + 8 * (v172 >> 3);
                              unint64_t v288 = v173;
                              memcpy(v286, v171, v172);
                              int v287 = v173;
                            }
                            uint8x8_t v174 = v332;
                            if (v332 && !atomic_fetch_add(&v332->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                            {
                              ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
                              std::__shared_weak_count::__release_weak(v174);
                              uint64_t v175 = v333;
                              if (v333)
                              {
LABEL_344:
                                uint8x8_t v334 = v175;
                                operator delete(v175);
                              }
                            }
                            else
                            {
                              uint64_t v175 = v333;
                              if (v333) {
                                goto LABEL_344;
                              }
                            }
                            uint64_t v176 = (void **)v337;
                            if ((void)v337)
                            {
                              do
                              {
                                size_t v182 = (void **)*v176;
                                if (*((char *)v176 + 39) < 0) {
                                  operator delete(v176[2]);
                                }
                                operator delete(v176);
                                uint64_t v176 = v182;
                              }
                              while (v182);
                            }
                            long long v177 = (void *)__dst;
                            *(void *)&long long __dst = 0;
                            if (v177) {
                              operator delete(v177);
                            }
                            int v178 = *(void **)&v339[16];
                            if (*(void *)&v339[16])
                            {
                              do
                              {
                                int v179 = (void *)*v178;
                                operator delete(v178);
                                int v178 = v179;
                              }
                              while (v179);
                            }
                            uint64_t v180 = *(void **)v339;
                            *(void *)uint64_t v339 = 0;
                            if (v180) {
                              operator delete(v180);
                            }
                            if (v282 && !atomic_fetch_add(&v282->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                            {
                              ((void (*)(std::__shared_weak_count *))v282->__on_zero_shared)(v282);
                              std::__shared_weak_count::__release_weak(v282);
                              __int16 v181 = (std::__shared_weak_count *)*((void *)&v283 + 1);
                              if (*((void *)&v283 + 1)) {
                                goto LABEL_355;
                              }
                            }
                            else
                            {
                              __int16 v181 = (std::__shared_weak_count *)*((void *)&v283 + 1);
                              if (*((void *)&v283 + 1))
                              {
LABEL_355:
                                if (!atomic_fetch_add(&v181->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                                {
                                  ((void (*)(std::__shared_weak_count *))v181->__on_zero_shared)(v181);
                                  std::__shared_weak_count::__release_weak(v181);
                                }
                              }
                            }
                            BYTE7(v337) = 8;
                            strcpy((char *)&__dst, "function");
                            MIL::Builder::OperationBuilder::TryGetAttribute();
                            MIL::IRValue::AsTensor((MIL::IRValue *)v330.__r_.__value_.__l.__data_);
                            MIL::IRValue::GetScalar<std::string>();
                            std::string::size_type size = (std::__shared_weak_count *)v330.__r_.__value_.__l.__size_;
                            if (v330.__r_.__value_.__l.__size_
                              && !atomic_fetch_add((atomic_ullong *volatile)(v330.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
                            {
                              ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
                              std::__shared_weak_count::__release_weak(size);
                              if (SBYTE7(v337) < 0) {
LABEL_366:
                              }
                                operator delete((void *)__dst);
                            }
                            else if (SBYTE7(v337) < 0)
                            {
                              goto LABEL_366;
                            }
                            MIL::Builder::ProgramBuilder::GetFunction();
                            Espresso::AOT::UpdateFunctionIO((MIL::Builder::FunctionBuilder *)__dst);
                          }
                          while (2)
                          {
                            if (*((char *)v123 + 39) < 0) {
                              std::string::__init_copy_ctor_external(&v326, (const std::string::value_type *)v123[2], v123[3]);
                            }
                            else {
                              std::string v326 = *(std::string *)(v123 + 2);
                            }
                            uint64_t v125 = (std::__shared_weak_count *)v123[6];
                            size_t v318 = (void *)v123[5];
                            size_t v319 = v125;
                            if (v125) {
                              atomic_fetch_add_explicit(&v125->__shared_owners_, 1uLL, memory_order_relaxed);
                            }
                            MIL::Builder::OperationBuilder::SetAttribute();
                            int v126 = (std::__shared_weak_count *)v323.__r_.__value_.__l.__size_;
                            if (v323.__r_.__value_.__l.__size_
                              && !atomic_fetch_add((atomic_ullong *volatile)(v323.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
                            {
                              ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
                              std::__shared_weak_count::__release_weak(v126);
                              long long v127 = v319;
                              if (v319) {
                                goto LABEL_219;
                              }
                            }
                            else
                            {
                              long long v127 = v319;
                              if (v319)
                              {
LABEL_219:
                                if (!atomic_fetch_add(&v127->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                                {
                                  ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
                                  std::__shared_weak_count::__release_weak(v127);
                                }
                              }
                            }
                            if (SHIBYTE(v326.__r_.__value_.__r.__words[2]) < 0)
                            {
                              operator delete(v326.__r_.__value_.__l.__data_);
                              unint64_t v123 = (uint64_t *)*v123;
                              if (!v123) {
                                goto LABEL_207;
                              }
                            }
                            else
                            {
                              unint64_t v123 = (uint64_t *)*v123;
                              if (!v123) {
                                goto LABEL_207;
                              }
                            }
                            continue;
                          }
                        }
                        Outputuint64_t Name = MIL::Builder::OperationBuilder::GetOutputName((MIL::Builder::OperationBuilder *)v283);
                        Outputuint64_t Type = (MIL::MILContext *)MIL::Builder::OperationBuilder::GetOutputType((MIL::Builder::OperationBuilder *)v283);
                        if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v302, OutputName))
                        {
                          uint64_t v55 = (*(uint64_t (**)(uint64_t))(*(void *)Function + 168))(Function);
                          unint64_t v56 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t))(*(void *)v55 + 40))(v55);
                          if (*(char *)(OutputName + 23) < 0)
                          {
                            std::string::__init_copy_ctor_external(&v330, *(const std::string::value_type **)OutputName, *(void *)(OutputName + 8));
                          }
                          else
                          {
                            long long v59 = *(_OWORD *)OutputName;
                            v330.__r_.__value_.__r.__words[2] = *(void *)(OutputName + 16);
                            *(_OWORD *)&v330.__r_.__value_.__l.__data_ = v59;
                          }
                          MIL::Builder::OperationBuilder::AddOutput();
                          long long v74 = v324;
                          if (!v324 || atomic_fetch_add(&v324->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                          {
                            if ((SHIBYTE(v330.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                              goto LABEL_130;
                            }
LABEL_133:
                            operator delete(v330.__r_.__value_.__l.__data_);
                            unint64_t v76 = v334;
                            int v75 = v335;
                            if (v334 >= v335) {
                              goto LABEL_134;
                            }
LABEL_100:
                            *(void *)unint64_t v76 = v58;
                            uint64_t v52 = v76 + 8;
LABEL_101:
                            uint8x8_t v334 = v52;
LABEL_102:
                            ++v50;
                            continue;
                          }
                          ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
                          std::__shared_weak_count::__release_weak(v74);
                          if (SHIBYTE(v330.__r_.__value_.__r.__words[2]) < 0) {
                            goto LABEL_133;
                          }
LABEL_130:
                          unint64_t v76 = v334;
                          int v75 = v335;
                          if (v334 < v335) {
                            goto LABEL_100;
                          }
LABEL_134:
                          __int16 v77 = v333;
                          uint64_t v78 = (v76 - v333) >> 3;
                          unint64_t v79 = v78 + 1;
                          if ((unint64_t)(v78 + 1) >> 61) {
                            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                          }
                          uint64_t v80 = v75 - v333;
                          if (v80 >> 2 > v79) {
                            unint64_t v79 = v80 >> 2;
                          }
                          if ((unint64_t)v80 >= 0x7FFFFFFFFFFFFFF8) {
                            unint64_t v81 = 0x1FFFFFFFFFFFFFFFLL;
                          }
                          else {
                            unint64_t v81 = v79;
                          }
                          if (v81)
                          {
                            if (v81 >> 61) {
                              std::__throw_bad_array_new_length[abi:ne180100]();
                            }
                            int v82 = operator new(8 * v81);
                            __int16 v83 = (MIL::IRValueType **)&v82[8 * v78];
                            *__int16 v83 = v58;
                            uint64_t v52 = (char *)(v83 + 1);
                            if (v76 != v77) {
                              goto LABEL_143;
                            }
LABEL_152:
                            unint64_t v333 = v83;
                            uint8x8_t v334 = v52;
                            v335 = &v82[8 * v81];
                            if (!v76) {
                              goto LABEL_101;
                            }
                          }
                          else
                          {
                            int v82 = 0;
                            __int16 v83 = (MIL::IRValueType **)(8 * v78);
                            BOOL v93 = (MIL::IRValueType **)(8 * v78);
                            *BOOL v93 = v58;
                            uint64_t v52 = (char *)(v93 + 1);
                            if (v76 == v77) {
                              goto LABEL_152;
                            }
LABEL_143:
                            unint64_t v84 = v76 - 8 - v77;
                            if (v84 < 0x58) {
                              goto LABEL_591;
                            }
                            if ((unint64_t)(v77 - v82) < 0x20) {
                              goto LABEL_591;
                            }
                            uint64_t v85 = (v84 >> 3) + 1;
                            uint64_t v86 = 8 * (v85 & 0x3FFFFFFFFFFFFFFCLL);
                            uint64_t v87 = &v76[-v86];
                            __int16 v83 = (MIL::IRValueType **)((char *)v83 - v86);
                            uint64_t v88 = &v82[v76 - v77 - 16];
                            uint64_t v89 = v76 - 16;
                            uint64_t v90 = v85 & 0x3FFFFFFFFFFFFFFCLL;
                            do
                            {
                              long long v91 = *(_OWORD *)v89;
                              *(v88 - 1) = *((_OWORD *)v89 - 1);
                              _OWORD *v88 = v91;
                              v88 -= 2;
                              v89 -= 32;
                              v90 -= 4;
                            }
                            while (v90);
                            unint64_t v76 = v87;
                            if (v85 != (v85 & 0x3FFFFFFFFFFFFFFCLL))
                            {
LABEL_591:
                              do
                              {
                                uint64_t v92 = (MIL::IRValueType *)*((void *)v76 - 1);
                                v76 -= 8;
                                *--__int16 v83 = v92;
                              }
                              while (v76 != v77);
                            }
                            unint64_t v76 = v333;
                            unint64_t v333 = v83;
                            uint8x8_t v334 = v52;
                            v335 = &v82[8 * v81];
                            if (!v76) {
                              goto LABEL_101;
                            }
                          }
                          operator delete(v76);
                          goto LABEL_101;
                        }
                        break;
                      }
                      Attributes = (void *)MIL::Builder::OperationBuilder::GetAttributes((MIL::Builder::OperationBuilder *)v283);
                      *((unsigned char *)&v323.__r_.__value_.__s + 23) = 7;
                      strcpy((char *)&v323, "backend");
                      unint64_t v61 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(Attributes, (uint64_t)&v323);
                      if (!v61) {
                        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
                      }
                      MIL::IRValue::AsTensor((MIL::IRValue *)v61[5]);
                      MIL::IRValue::GetScalar<std::string>();
                      if (SHIBYTE(v323.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(v323.__r_.__value_.__l.__data_);
                      }
                      std::string::size_type v62 = HIBYTE(v326.__r_.__value_.__r.__words[2]);
                      if ((v326.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                        std::string::size_type v62 = v326.__r_.__value_.__l.__size_;
                      }
                      if (v62 != 9) {
                        goto LABEL_173;
                      }
                      uint64_t v63 = &v326;
                      if ((v326.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                        uint64_t v63 = (std::string *)v326.__r_.__value_.__r.__words[0];
                      }
                      std::string::size_type v64 = v63->__r_.__value_.__r.__words[0];
                      int v65 = v63->__r_.__value_.__s.__data_[8];
                      if (v64 != 0x706172675F73706DLL || v65 != 104) {
                        goto LABEL_173;
                      }
                      uint64_t OperationsByInput = MIL::Builder::BlockBuilder::GetOperationsByInput();
                      if (*(void *)(OperationsByInput + 24) != 1) {
                        goto LABEL_173;
                      }
                      uint64_t v68 = *(void *)(OperationsByInput + 16);
                      long long v70 = *(MIL::Builder::OperationBuilder **)(v68 + 16);
                      std::string v69 = *(std::__shared_weak_count **)(v68 + 24);
                      int v321 = v70;
                      size_t v322 = v69;
                      if (v69) {
                        atomic_fetch_add_explicit(&v69->__shared_owners_, 1uLL, memory_order_relaxed);
                      }
                      uint64_t v71 = MIL::Builder::OperationBuilder::GetOperator(v70);
                      uint64_t v72 = (*(uint64_t (**)(uint64_t))(*(void *)v71 + 16))(v71);
                      int v73 = *(char *)(v72 + 23);
                      if (v73 < 0)
                      {
                        if (*(void *)(v72 + 8) != 19) {
                          goto LABEL_163;
                        }
                        uint64_t v72 = *(void *)v72;
                      }
                      else if (v73 != 19)
                      {
                        goto LABEL_163;
                      }
                      if (*(void *)v72 == 0x736F695F4C4D3545
                        && *(void *)(v72 + 8) == 0x736E6172742E3631
                        && *(void *)(v72 + 11) == 0x726566736E617274)
                      {
                        char v320 = 2;
                        strcpy((char *)&v318, "to");
                        uint64_t v121 = (MIL::Builder::Variable *)MIL::Builder::OperationBuilder::GetArgumentForParameter();
                        uint64_t Value = (MIL::IRValue *)MIL::Builder::Variable::GetValue(v121);
                        MIL::IRValue::AsTensor(Value);
                        MIL::IRValue::GetScalar<std::string>();
                      }
                      else
                      {
LABEL_163:
                        uint64_t v96 = (void *)MIL::Builder::OperationBuilder::GetAttributes(v70);
                        char v320 = 7;
                        strcpy((char *)&v318, "backend");
                        unint64_t v97 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(v96, (uint64_t)&v318);
                        if (!v97) {
                          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
                        }
                        MIL::IRValue::AsTensor((MIL::IRValue *)v97[5]);
                        MIL::IRValue::GetScalar<std::string>();
                      }
                      if (SHIBYTE(v326.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(v326.__r_.__value_.__l.__data_);
                      }
                      std::string v326 = v323;
                      *((unsigned char *)&v323.__r_.__value_.__s + 23) = 0;
                      v323.__r_.__value_.__s.__data_[0] = 0;
                      if (v320 < 0)
                      {
                        operator delete(v318);
                        if (!v69) {
                          goto LABEL_173;
                        }
                      }
                      else if (!v69)
                      {
                        goto LABEL_173;
                      }
                      if (!atomic_fetch_add(&v69->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                      {
                        ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
                        std::__shared_weak_count::__release_weak(v69);
                      }
LABEL_173:
                      if (*(char *)(OutputName + 23) < 0)
                      {
                        std::string::__init_copy_ctor_external(&v316, *(const std::string::value_type **)OutputName, *(void *)(OutputName + 8));
                      }
                      else
                      {
                        long long v99 = *(_OWORD *)OutputName;
                        v316.__r_.__value_.__r.__words[2] = *(void *)(OutputName + 16);
                        *(_OWORD *)&v316.__r_.__value_.__l.__data_ = v99;
                      }
                      MIL::Builder::OperationBuilder::AddOutput();
                      uint64_t v100 = v317;
                      if (v317 && !atomic_fetch_add(&v317->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                      {
                        ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
                        std::__shared_weak_count::__release_weak(v100);
                        if ((SHIBYTE(v316.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                        {
LABEL_179:
                          long long v102 = (uint64_t *)v334;
                          uint64_t v101 = v335;
                          if (v334 < v335) {
                            goto LABEL_180;
                          }
                          goto LABEL_183;
                        }
                      }
                      else if ((SHIBYTE(v316.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                      {
                        goto LABEL_179;
                      }
                      operator delete(v316.__r_.__value_.__l.__data_);
                      long long v102 = (uint64_t *)v334;
                      uint64_t v101 = v335;
                      if (v334 < v335)
                      {
LABEL_180:
                        *long long v102 = BackendCompatibleType;
                        unint64_t v103 = (char *)(v102 + 1);
                        goto LABEL_203;
                      }
LABEL_183:
                      long long v104 = (uint64_t *)v333;
                      uint64_t v105 = ((char *)v102 - v333) >> 3;
                      unint64_t v106 = v105 + 1;
                      if ((unint64_t)(v105 + 1) >> 61) {
                        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                      }
                      uint64_t v107 = v101 - v333;
                      if (v107 >> 2 > v106) {
                        unint64_t v106 = v107 >> 2;
                      }
                      if ((unint64_t)v107 >= 0x7FFFFFFFFFFFFFF8) {
                        unint64_t v108 = 0x1FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v108 = v106;
                      }
                      if (v108)
                      {
                        if (v108 >> 61) {
                          std::__throw_bad_array_new_length[abi:ne180100]();
                        }
                        int32x4_t v109 = operator new(8 * v108);
                        unint64_t v110 = (uint64_t *)&v109[8 * v105];
                        *unint64_t v110 = BackendCompatibleType;
                        unint64_t v103 = (char *)(v110 + 1);
                        if (v102 == v104)
                        {
LABEL_201:
                          unint64_t v333 = v110;
                          uint8x8_t v334 = v103;
                          v335 = &v109[8 * v108];
                          if (!v102) {
                            goto LABEL_203;
                          }
LABEL_202:
                          operator delete(v102);
                          goto LABEL_203;
                        }
                      }
                      else
                      {
                        int32x4_t v109 = 0;
                        unint64_t v110 = (uint64_t *)(8 * v105);
                        uint64_t v120 = (uint64_t *)(8 * v105);
                        uint64_t *v120 = BackendCompatibleType;
                        unint64_t v103 = (char *)(v120 + 1);
                        if (v102 == v104) {
                          goto LABEL_201;
                        }
                      }
                      unint64_t v111 = (char *)(v102 - 1) - (char *)v104;
                      if (v111 < 0x58) {
                        goto LABEL_592;
                      }
                      if ((unint64_t)((char *)v104 - v109) < 0x20) {
                        goto LABEL_592;
                      }
                      uint64_t v112 = (v111 >> 3) + 1;
                      uint64_t v113 = 8 * (v112 & 0x3FFFFFFFFFFFFFFCLL);
                      uint64_t v114 = &v102[v113 / 0xFFFFFFFFFFFFFFF8];
                      unint64_t v110 = (uint64_t *)((char *)v110 - v113);
                      uint64_t v115 = &v109[(char *)v102 - (char *)v104 - 16];
                      uint64_t v116 = v102 - 2;
                      uint64_t v117 = v112 & 0x3FFFFFFFFFFFFFFCLL;
                      do
                      {
                        long long v118 = *(_OWORD *)v116;
                        *(v115 - 1) = *((_OWORD *)v116 - 1);
                        *uint64_t v115 = v118;
                        v115 -= 2;
                        v116 -= 4;
                        v117 -= 4;
                      }
                      while (v117);
                      long long v102 = v114;
                      if (v112 != (v112 & 0x3FFFFFFFFFFFFFFCLL))
                      {
LABEL_592:
                        do
                        {
                          uint64_t v119 = *--v102;
                          *--unint64_t v110 = v119;
                        }
                        while (v102 != v104);
                      }
                      long long v102 = (uint64_t *)v333;
                      unint64_t v333 = v110;
                      uint8x8_t v334 = v103;
                      v335 = &v109[8 * v108];
                      if (v102) {
                        goto LABEL_202;
                      }
LABEL_203:
                      uint8x8_t v334 = v103;
                      if ((SHIBYTE(v326.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                        goto LABEL_102;
                      }
                      operator delete(v326.__r_.__value_.__l.__data_);
                      ++v50;
                      continue;
                    }
                  }
                }
                ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
                std::__shared_weak_count::__release_weak(v46);
                if ((SHIBYTE(v327.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                  goto LABEL_83;
                }
LABEL_82:
                operator delete(v327.__r_.__value_.__l.__data_);
                goto LABEL_83;
              }
            }
            else if ((SHIBYTE(v330.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
              goto LABEL_75;
            }
            operator delete(v330.__r_.__value_.__l.__data_);
            goto LABEL_75;
          }
          goto LABEL_402;
        }
        uint64_t v130 = (MIL::Builder::OperationBuilder *)v292;
        long long v291 = v292;
        if (*((void *)&v292 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v292 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        unint64_t v289 = v309;
        uint64_t v290 = v310;
        if (v310) {
          atomic_fetch_add_explicit(&v310->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if ((unint64_t)MIL::Builder::OperationBuilder::GetNumOutputs(v130) >= 2)
        {
          uint64_t v262 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(v262, "Found more than one output in E5ML_ios16.transfer.");
          v262->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
          __cxa_throw(v262, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
        }
        uint64_t v131 = (MIL::MILContext *)MIL::Builder::OperationBuilder::GetOutputType((MIL::Builder::OperationBuilder *)v291);
        uint64_t v132 = MIL::Builder::OperationBuilder::GetOutputName((MIL::Builder::OperationBuilder *)v291);
        __p[23] = 8;
        strcpy(__p, "transfer");
        *(_OWORD *)&v323.__r_.__value_.__l.__data_ = v291;
        if (*((void *)&v291 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v291 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        MIL::Builder::BlockBuilder::AddOperation();
        uint64_t v133 = (std::__shared_weak_count *)v323.__r_.__value_.__l.__size_;
        if (v323.__r_.__value_.__l.__size_
          && !atomic_fetch_add((atomic_ullong *volatile)(v323.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
          std::__shared_weak_count::__release_weak(v133);
          if ((__p[23] & 0x80000000) == 0) {
            goto LABEL_239;
          }
LABEL_238:
          operator delete(*(void **)__p);
          goto LABEL_239;
        }
        if ((__p[23] & 0x80000000) != 0) {
          goto LABEL_238;
        }
LABEL_239:
        __p[23] = 6;
        strcpy(__p, "values");
        v339[23] = 6;
        strcpy(v339, "values");
        MIL::Builder::OperationBuilder::GetArgumentForParameter();
        MIL::Builder::OperationBuilder::AddInput();
        BYTE7(v337) = 4;
        strcpy((char *)&__dst, "from");
        *((unsigned char *)&v330.__r_.__value_.__s + 23) = 4;
        strcpy((char *)&v330, "from");
        MIL::Builder::OperationBuilder::GetArgumentForParameter();
        MIL::Builder::OperationBuilder::AddInput();
        HIBYTE(v335) = 2;
        strcpy((char *)&v333, "to");
        *((unsigned char *)&v327.__r_.__value_.__s + 23) = 2;
        strcpy((char *)&v327, "to");
        MIL::Builder::OperationBuilder::GetArgumentForParameter();
        MIL::Builder::OperationBuilder::AddInput();
        uint64_t v134 = v319;
        if (v319 && !atomic_fetch_add(&v319->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
          std::__shared_weak_count::__release_weak(v134);
          if ((SHIBYTE(v327.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_242:
            if ((SHIBYTE(v335) & 0x80000000) == 0) {
              goto LABEL_243;
            }
            goto LABEL_258;
          }
        }
        else if ((SHIBYTE(v327.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_242;
        }
        operator delete(v327.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v335) & 0x80000000) == 0)
        {
LABEL_243:
          uint64_t v135 = (std::__shared_weak_count *)v316.__r_.__value_.__l.__size_;
          if (!v316.__r_.__value_.__l.__size_) {
            goto LABEL_260;
          }
          goto LABEL_259;
        }
LABEL_258:
        operator delete(v333);
        uint64_t v135 = (std::__shared_weak_count *)v316.__r_.__value_.__l.__size_;
        if (!v316.__r_.__value_.__l.__size_) {
          goto LABEL_260;
        }
LABEL_259:
        if (atomic_fetch_add(&v135->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
LABEL_260:
          if ((SHIBYTE(v330.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_261;
          }
          goto LABEL_265;
        }
        ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
        std::__shared_weak_count::__release_weak(v135);
        if ((SHIBYTE(v330.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_261:
          if ((SBYTE7(v337) & 0x80000000) == 0) {
            goto LABEL_262;
          }
          goto LABEL_266;
        }
LABEL_265:
        operator delete(v330.__r_.__value_.__l.__data_);
        if ((SBYTE7(v337) & 0x80000000) == 0)
        {
LABEL_262:
          uint64_t v139 = v332;
          if (!v332) {
            goto LABEL_268;
          }
          goto LABEL_267;
        }
LABEL_266:
        operator delete((void *)__dst);
        uint64_t v139 = v332;
        if (!v332) {
          goto LABEL_268;
        }
LABEL_267:
        if (atomic_fetch_add(&v139->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
LABEL_268:
          if ((v339[23] & 0x80000000) != 0) {
            goto LABEL_298;
          }
          goto LABEL_269;
        }
        ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
        std::__shared_weak_count::__release_weak(v139);
        if ((v339[23] & 0x80000000) != 0)
        {
LABEL_298:
          operator delete(*(void **)v339);
          if ((__p[23] & 0x80000000) == 0) {
            goto LABEL_270;
          }
          goto LABEL_299;
        }
LABEL_269:
        if ((__p[23] & 0x80000000) == 0) {
          goto LABEL_270;
        }
LABEL_299:
        operator delete(*(void **)__p);
LABEL_270:
        if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v302, v132))
        {
          uint64_t v140 = (*(uint64_t (**)(uint64_t))(*(void *)Function + 168))(Function);
          uint64_t v141 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t))(*(void *)v140 + 40))(v140);
          *(_OWORD *)&v330.__r_.__value_.__l.__data_ = v291;
          if (*((void *)&v291 + 1)) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v291 + 1) + 8), 1uLL, memory_order_relaxed);
          }
          MIL::Builder::BlockBuilder::RemoveOperation();
          uint64_t v143 = (std::__shared_weak_count *)v330.__r_.__value_.__l.__size_;
          if (v330.__r_.__value_.__l.__size_
            && !atomic_fetch_add((atomic_ullong *volatile)(v330.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
            std::__shared_weak_count::__release_weak(v143);
            if (*(char *)(v132 + 23) < 0) {
              goto LABEL_301;
            }
LABEL_276:
            long long v144 = *(_OWORD *)v132;
            *(void *)&v339[16] = *(void *)(v132 + 16);
            *(_OWORD *)uint64_t v339 = v144;
          }
          else
          {
            if ((*(char *)(v132 + 23) & 0x80000000) == 0) {
              goto LABEL_276;
            }
LABEL_301:
            std::string::__init_copy_ctor_external((std::string *)v339, *(const std::string::value_type **)v132, *(void *)(v132 + 8));
          }
          MIL::Builder::OperationBuilder::AddOutput();
          int32x4_t v156 = (std::__shared_weak_count *)v316.__r_.__value_.__l.__size_;
          if (!v316.__r_.__value_.__l.__size_
            || atomic_fetch_add((atomic_ullong *volatile)(v316.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
          {
LABEL_375:
            if ((v339[23] & 0x80000000) == 0) {
              goto LABEL_377;
            }
          }
          else
          {
            ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
            std::__shared_weak_count::__release_weak(v156);
            if ((v339[23] & 0x80000000) == 0) {
              goto LABEL_377;
            }
          }
LABEL_376:
          operator delete(*(void **)v339);
          goto LABEL_377;
        }
        *((unsigned char *)&v330.__r_.__value_.__s + 23) = 2;
        strcpy((char *)&v330, "to");
        long long v145 = (MIL::Builder::Variable *)MIL::Builder::OperationBuilder::GetArgumentForParameter();
        uint64_t v146 = (MIL::IRValue *)MIL::Builder::Variable::GetValue(v145);
        MIL::IRValue::AsTensor(v146);
        MIL::IRValue::GetScalar<std::string>();
        if (SHIBYTE(v330.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v330.__r_.__value_.__l.__data_);
        }
        uint64_t v147 = v339[23];
        if (v339[23] < 0) {
          uint64_t v147 = *(void *)&v339[8];
        }
        if (v147 != 9) {
          goto LABEL_288;
        }
        uint64_t v148 = v339;
        if (v339[23] < 0) {
          uint64_t v148 = *(unsigned char **)v339;
        }
        uint64_t v149 = *(void *)v148;
        int v150 = v148[8];
        if (v149 == 0x706172675F73706DLL && v150 == 104)
        {
          *((unsigned char *)&v330.__r_.__value_.__s + 23) = 6;
          strcpy((char *)&v330, "values");
          int v193 = (MIL::Builder::Variable *)MIL::Builder::OperationBuilder::GetArgumentForParameter();
          MIL::Builder::Variable::TryGetType(v193);
          if (SHIBYTE(v330.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v330.__r_.__value_.__l.__data_);
          }
        }
        else
        {
LABEL_288:
          *((unsigned char *)&v330.__r_.__value_.__s + 23) = 6;
          strcpy((char *)&v330, "values");
          uint64_t v152 = (MIL::Builder::Variable *)MIL::Builder::OperationBuilder::GetArgumentForParameter();
          uint64_t v153 = MIL::Builder::Variable::GetName(v152);
          if (SHIBYTE(v330.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v330.__r_.__value_.__l.__data_);
          }
        }
        *(_OWORD *)&v316.__r_.__value_.__l.__data_ = v291;
        if (*((void *)&v291 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v291 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        MIL::Builder::BlockBuilder::RemoveOperation();
        unint64_t v154 = (std::__shared_weak_count *)v316.__r_.__value_.__l.__size_;
        if (v316.__r_.__value_.__l.__size_
          && !atomic_fetch_add((atomic_ullong *volatile)(v316.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
          std::__shared_weak_count::__release_weak(v154);
          if (*(char *)(v132 + 23) < 0)
          {
LABEL_371:
            std::string::__init_copy_ctor_external(&v330, *(const std::string::value_type **)v132, *(void *)(v132 + 8));
            goto LABEL_372;
          }
        }
        else if (*(char *)(v132 + 23) < 0)
        {
          goto LABEL_371;
        }
        long long v155 = *(_OWORD *)v132;
        v330.__r_.__value_.__r.__words[2] = *(void *)(v132 + 16);
        *(_OWORD *)&v330.__r_.__value_.__l.__data_ = v155;
LABEL_372:
        MIL::Builder::OperationBuilder::AddOutput();
        size_t v184 = v332;
        if (v332 && !atomic_fetch_add(&v332->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v184->__on_zero_shared)(v184);
          std::__shared_weak_count::__release_weak(v184);
          if ((SHIBYTE(v330.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_375;
          }
        }
        else if ((SHIBYTE(v330.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_375;
        }
        operator delete(v330.__r_.__value_.__l.__data_);
        if ((v339[23] & 0x80000000) != 0) {
          goto LABEL_376;
        }
LABEL_377:
        std::string v185 = *(uint64_t **)(MIL::Builder::OperationBuilder::GetAttributes((MIL::Builder::OperationBuilder *)v291) + 16);
        if (v185)
        {
          while (1)
          {
            if (*((char *)v185 + 39) < 0) {
              std::string::__init_copy_ctor_external(&v327, (const std::string::value_type *)v185[2], v185[3]);
            }
            else {
              std::string v327 = *(std::string *)(v185 + 2);
            }
            int v188 = (std::__shared_weak_count *)v185[6];
            uint64_t v328 = v185[5];
            v329 = v188;
            if (v188) {
              atomic_fetch_add_explicit(&v188->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            MIL::Builder::OperationBuilder::SetAttribute();
            uint64_t v189 = (std::__shared_weak_count *)*((void *)&v331 + 1);
            if (*((void *)&v331 + 1)
              && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v331 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v189->__on_zero_shared)(v189);
              std::__shared_weak_count::__release_weak(v189);
              size_t v190 = v329;
              if (v329)
              {
LABEL_393:
                if (!atomic_fetch_add(&v190->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v190->__on_zero_shared)(v190);
                  std::__shared_weak_count::__release_weak(v190);
                }
              }
            }
            else
            {
              size_t v190 = v329;
              if (v329) {
                goto LABEL_393;
              }
            }
            if (SHIBYTE(v327.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(v327.__r_.__value_.__l.__data_);
              std::string v185 = (uint64_t *)*v185;
              if (!v185) {
                break;
              }
            }
            else
            {
              std::string v185 = (uint64_t *)*v185;
              if (!v185) {
                break;
              }
            }
          }
        }
        size_t v186 = (std::__shared_weak_count *)v326.__r_.__value_.__l.__size_;
        if (v326.__r_.__value_.__l.__size_
          && !atomic_fetch_add((atomic_ullong *volatile)(v326.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v186->__on_zero_shared)(v186);
          std::__shared_weak_count::__release_weak(v186);
          uint64_t v187 = v290;
          if (!v290) {
            goto LABEL_400;
          }
        }
        else
        {
          uint64_t v187 = v290;
          if (!v290) {
            goto LABEL_400;
          }
        }
        if (!atomic_fetch_add(&v187->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v187->__on_zero_shared)(v187);
          std::__shared_weak_count::__release_weak(v187);
        }
LABEL_400:
        uint64_t v191 = (std::__shared_weak_count *)*((void *)&v291 + 1);
        if (*((void *)&v291 + 1)
          && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v291 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v191->__on_zero_shared)(v191);
          std::__shared_weak_count::__release_weak(v191);
          __int16 v192 = (std::__shared_weak_count *)*((void *)&v292 + 1);
          if (!*((void *)&v292 + 1)) {
            goto LABEL_48;
          }
          goto LABEL_403;
        }
LABEL_402:
        __int16 v192 = (std::__shared_weak_count *)*((void *)&v292 + 1);
        if (!*((void *)&v292 + 1)) {
          goto LABEL_48;
        }
LABEL_403:
        if (!atomic_fetch_add(&v192->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v192->__on_zero_shared)(v192);
          std::__shared_weak_count::__release_weak(v192);
        }
LABEL_48:
        v32 += 2;
        unint64_t v33 = v272;
      }
      uint64_t v5 = v269;
      if (!v300) {
        goto LABEL_512;
      }
      E5Common::Utils::MILDictToCpp<std::string,BOOL>(v300, (uint64_t)__p);
      if (*(void **)&__p[24] != v298[1]) {
        goto LABEL_437;
      }
      uint64_t v195 = &__p[16];
      while (2)
      {
        uint64_t v195 = *(unsigned char **)v195;
        if (!v195) {
          goto LABEL_509;
        }
        uint64_t v196 = (const void **)(v195 + 16);
        uint64_t v197 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::find<std::string>(v297, (uint64_t)(v195 + 16));
        int v198 = v197;
        if (!v197) {
          goto LABEL_437;
        }
        uint64_t v199 = v195[39];
        if ((v199 & 0x80u) == 0) {
          uint64_t v200 = v195[39];
        }
        else {
          uint64_t v200 = *((void *)v195 + 3);
        }
        uint64_t v201 = *((unsigned __int8 *)v197 + 39);
        int v202 = (char)v201;
        if ((v201 & 0x80u) != 0) {
          uint64_t v201 = v197[3];
        }
        if (v200 != v201) {
          goto LABEL_437;
        }
        if (v202 >= 0) {
          uint64_t v203 = (unsigned __int8 *)(v197 + 2);
        }
        else {
          uint64_t v203 = (unsigned __int8 *)v197[2];
        }
        if ((v199 & 0x80) != 0)
        {
          if (memcmp(*v196, v203, *((void *)v195 + 3))) {
            goto LABEL_437;
          }
LABEL_419:
          if (v195[40] != *((unsigned char *)v198 + 40)) {
            goto LABEL_437;
          }
          continue;
        }
        break;
      }
      if (!v195[39]) {
        goto LABEL_419;
      }
      while (*(unsigned __int8 *)v196 == *v203)
      {
        uint64_t v196 = (const void **)((char *)v196 + 1);
        ++v203;
        if (!--v199) {
          goto LABEL_419;
        }
      }
LABEL_437:
      E5Common::Utils::MILDictFromCpp<std::string,BOOL>((uint64_t)v297, (void **)&v323.__r_.__value_.__l.__data_);
      unint64_t v204 = operator new(0x20uLL);
      v279 = v204;
      long long v280 = v271;
      _OWORD *v204 = v270[1];
      *(_OWORD *)((char *)v204 + 13) = v270[0];
      *((unsigned char *)v204 + 29) = 0;
      std::string::size_type v277 = v323.__r_.__value_.__r.__words[0];
      if (v323.__r_.__value_.__r.__words[0]) {
        operator new();
      }
      uint64_t v278 = 0;
      v323.__r_.__value_.__r.__words[0] = 0;
      MIL::Builder::FunctionBuilder::SetAttribute();
      if (SHIBYTE(v280) < 0) {
        operator delete(v279);
      }
      unint64_t v205 = (char *)v293;
      uint8x8_t v206 = (char *)v294;
      while (2)
      {
        if (v205 != v206)
        {
          if (v205[23] < 0)
          {
            std::string::__init_copy_ctor_external(&v330, *(const std::string::value_type **)v205, *((void *)v205 + 1));
          }
          else
          {
            long long v207 = *(_OWORD *)v205;
            v330.__r_.__value_.__r.__words[2] = *((void *)v205 + 2);
            *(_OWORD *)&v330.__r_.__value_.__l.__data_ = v207;
          }
          MIL::Builder::ProgramBuilder::GetFunction();
          __int16 v208 = (char *)operator new(0x20uLL);
          *(void *)uint64_t v339 = v208;
          *(_OWORD *)&v339[8] = v271;
          *(_OWORD *)__int16 v208 = v270[1];
          *(_OWORD *)(v208 + 13) = v270[0];
          v208[29] = 0;
          MIL::Builder::FunctionBuilder::TryGetAttribute();
          if ((v339[23] & 0x80000000) != 0)
          {
            operator delete(*(void **)v339);
            unint64_t v209 = (MIL::IRValue *)v327.__r_.__value_.__r.__words[0];
            if (v327.__r_.__value_.__r.__words[0]) {
              goto LABEL_453;
            }
            goto LABEL_494;
          }
          unint64_t v209 = (MIL::IRValue *)v327.__r_.__value_.__r.__words[0];
          if (!v327.__r_.__value_.__r.__words[0]) {
            goto LABEL_494;
          }
LABEL_453:
          memset(v339, 0, sizeof(v339));
          int v340 = 1065353216;
          unint64_t v210 = (MIL::IRDictionaryValue *)MIL::IRValue::AsDictionary(v209);
          uint64_t v211 = MIL::IRDictionaryValue::begin(v210);
          uint64_t v212 = MIL::IRDictionaryValue::end(v210);
          while (v211 != v212)
          {
            MIL::IRValue::AsTensor(*(MIL::IRValue **)(v211 + 32));
            unsigned __int8 v213 = MIL::IRValue::GetScalar<BOOL>();
            MIL::IRValue::AsTensor(*(MIL::IRValue **)(v211 + 16));
            MIL::IRValue::GetScalar<std::string>();
            v326.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst;
            std::__hash_table<std::__hash_value_type<std::string,BOOL>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,BOOL>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,BOOL>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v339, (uint64_t)&__dst, (uint64_t)&std::piecewise_construct, (long long **)&v326)[40] = v213;
            if (SBYTE7(v337) < 0) {
              operator delete((void *)__dst);
            }
            uint64_t v211 = *(void *)v211;
          }
          int v214 = *(uint64_t **)&v339[16];
          if (!*(void *)&v339[16])
          {
LABEL_459:
            E5Common::Utils::MILDictFromCpp<std::string,BOOL>((uint64_t)v339, (void **)&__dst);
            char v215 = operator new(0x20uLL);
            uint64_t v275 = v215;
            long long v276 = v271;
            *char v215 = v270[1];
            *(_OWORD *)((char *)v215 + 13) = v270[0];
            *((unsigned char *)v215 + 29) = 0;
            uint64_t v273 = __dst;
            if ((void)__dst) {
              operator new();
            }
            uint64_t v274 = 0;
            *(void *)&long long __dst = 0;
            MIL::Builder::FunctionBuilder::SetAttribute();
            if (SHIBYTE(v276) < 0)
            {
              operator delete(v275);
              uint64_t v224 = __dst;
              *(void *)&long long __dst = 0;
              if (v224) {
LABEL_490:
              }
                (*(void (**)(uint64_t))(*(void *)v224 + 8))(v224);
            }
            else
            {
              uint64_t v224 = __dst;
              *(void *)&long long __dst = 0;
              if (v224) {
                goto LABEL_490;
              }
            }
            std::string v225 = *(void ***)&v339[16];
            if (*(void *)&v339[16])
            {
              do
              {
                long long v229 = (void **)*v225;
                if (*((char *)v225 + 39) < 0) {
                  operator delete(v225[2]);
                }
                operator delete(v225);
                std::string v225 = v229;
              }
              while (v229);
            }
            uint64_t v226 = *(void **)v339;
            *(void *)uint64_t v339 = 0;
            if (v226) {
              operator delete(v226);
            }
LABEL_494:
            uint64_t v227 = (std::__shared_weak_count *)v327.__r_.__value_.__l.__size_;
            if (v327.__r_.__value_.__l.__size_
              && !atomic_fetch_add((atomic_ullong *volatile)(v327.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v227->__on_zero_shared)(v227);
              std::__shared_weak_count::__release_weak(v227);
              std::string v228 = (std::__shared_weak_count *)v334;
              if (v334) {
                goto LABEL_497;
              }
            }
            else
            {
              std::string v228 = (std::__shared_weak_count *)v334;
              if (v334)
              {
LABEL_497:
                if (!atomic_fetch_add(&v228->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v228->__on_zero_shared)(v228);
                  std::__shared_weak_count::__release_weak(v228);
                }
              }
            }
            if (SHIBYTE(v330.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v330.__r_.__value_.__l.__data_);
            }
            v205 += 24;
            continue;
          }
          while (2)
          {
            uint64_t v216 = v214 + 2;
            if (std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::find<std::string>(v297, (uint64_t)(v214 + 2)))
            {
              uint64_t v217 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>(v297, (unsigned __int8 *)v214 + 16);
              if (!v217) {
                std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
              }
              *((unsigned char *)v214 + 40) = v217[40];
              goto LABEL_461;
            }
            std::string::size_type v218 = std::string::rfind((const std::string *)(v214 + 2), 95, 0xFFFFFFFFFFFFFFFFLL);
            if (v218 == -1) {
              goto LABEL_461;
            }
            if (*((char *)v214 + 39) < 0)
            {
              uint64_t v216 = (const void *)v214[2];
              if (v214[3] >= v218) {
                size_t v219 = v218;
              }
              else {
                size_t v219 = v214[3];
              }
              if (v219 >= 0x7FFFFFFFFFFFFFF8) {
LABEL_581:
              }
                std::string::__throw_length_error[abi:ne180100]();
            }
            else
            {
              if (*((unsigned __int8 *)v214 + 39) >= v218) {
                size_t v219 = v218;
              }
              else {
                size_t v219 = *((unsigned __int8 *)v214 + 39);
              }
              if (v219 >= 0x7FFFFFFFFFFFFFF8) {
                goto LABEL_581;
              }
            }
            if (v219 >= 0x17)
            {
              uint64_t v221 = (v219 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v219 | 7) != 0x17) {
                uint64_t v221 = v219 | 7;
              }
              uint64_t v222 = v221 + 1;
              p_dst = (long long *)operator new(v221 + 1);
              *((void *)&__dst + 1) = v219;
              *(void *)&long long v337 = v222 | 0x8000000000000000;
              *(void *)&long long __dst = p_dst;
            }
            else
            {
              BYTE7(v337) = v219;
              p_dst = &__dst;
              if (!v219) {
                goto LABEL_483;
              }
            }
            memmove(p_dst, v216, v219);
LABEL_483:
            *((unsigned char *)p_dst + v219) = 0;
            if (std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::find<std::string>(v297, (uint64_t)&__dst))
            {
              std::string v223 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>(v297, (unsigned __int8 *)&__dst);
              if (!v223) {
                std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
              }
              *((unsigned char *)v214 + 40) = v223[40];
            }
            if (SBYTE7(v337) < 0) {
              operator delete((void *)__dst);
            }
LABEL_461:
            int v214 = (uint64_t *)*v214;
            if (!v214) {
              goto LABEL_459;
            }
            continue;
          }
        }
        break;
      }
      std::string::size_type v230 = v323.__r_.__value_.__r.__words[0];
      v323.__r_.__value_.__r.__words[0] = 0;
      if (v230) {
        (*(void (**)(std::string::size_type))(*(void *)v230 + 8))(v230);
      }
      uint64_t v5 = v269;
LABEL_509:
      uint64_t v231 = *(void ***)&__p[16];
      if (*(void *)&__p[16])
      {
        do
        {
          v240 = (void **)*v231;
          if (*((char *)v231 + 39) < 0) {
            operator delete(v231[2]);
          }
          operator delete(v231);
          uint64_t v231 = v240;
        }
        while (v240);
      }
      long long v232 = *(void **)__p;
      *(void *)std::string __p = 0;
      if (v232) {
        operator delete(v232);
      }
LABEL_512:
      long long v233 = (char *)v305;
      std::string v234 = (char *)v306;
      if (v305 != v306)
      {
        do
        {
          MIL::Builder::BlockBuilder::RemoveOutput();
          v233 += 24;
        }
        while (v233 != v234);
        BOOL v235 = (char *)v305;
        long long v236 = (char *)v306;
        if (v305 != v306)
        {
          do
          {
            MIL::Builder::BlockBuilder::AddOutput();
            v235 += 24;
          }
          while (v235 != v236);
        }
      }
      uint64_t v237 = (void **)v293;
      if (v293)
      {
        std::string v238 = v294;
        uint64_t v239 = v293;
        if (v294 != v293)
        {
          do
          {
            if (*((char *)v238 - 1) < 0) {
              operator delete(*(v238 - 3));
            }
            v238 -= 3;
          }
          while (v238 != v237);
          uint64_t v239 = v293;
        }
        v294 = v237;
        operator delete(v239);
      }
      float v241 = (void **)v298[0];
      if (v298[0])
      {
        do
        {
          uint64_t v249 = (void **)*v241;
          if (*((char *)v241 + 39) < 0) {
            operator delete(v241[2]);
          }
          operator delete(v241);
          float v241 = v249;
        }
        while (v249);
      }
      long long v242 = v297[0];
      v297[0] = 0;
      if (v242) {
        operator delete(v242);
      }
      long long v243 = v301;
      if (v301 && !atomic_fetch_add(&v301->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v243->__on_zero_shared)(v243);
        std::__shared_weak_count::__release_weak(v243);
        uint64_t v244 = (void **)v303[0];
        if (v303[0]) {
          goto LABEL_563;
        }
      }
      else
      {
        uint64_t v244 = (void **)v303[0];
        if (!v303[0]) {
          goto LABEL_533;
        }
        do
        {
LABEL_563:
          std::string v256 = (void **)*v244;
          if (*((char *)v244 + 39) < 0) {
            operator delete(v244[2]);
          }
          operator delete(v244);
          uint64_t v244 = v256;
        }
        while (v256);
      }
LABEL_533:
      long long v245 = v302[0];
      v302[0] = 0;
      if (v245) {
        operator delete(v245);
      }
      long long v246 = (void **)v305;
      if (v305)
      {
        long long v247 = v306;
        uint64_t v248 = v305;
        if (v306 != v305)
        {
          do
          {
            if (*((char *)v247 - 1) < 0) {
              operator delete(*(v247 - 3));
            }
            v247 -= 3;
          }
          while (v247 != v246);
          uint64_t v248 = v305;
        }
        v306 = v246;
        operator delete(v248);
      }
      std::string v250 = (MIL::Builder::OperationBuilder **)v307;
      if (v307)
      {
        std::string v251 = v308;
        long long v252 = v307;
        if (v308 != v307)
        {
          do
          {
            unint64_t v253 = (std::__shared_weak_count *)*(v251 - 1);
            if (v253 && !atomic_fetch_add(&v253->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v253->__on_zero_shared)(v253);
              std::__shared_weak_count::__release_weak(v253);
            }
            v251 -= 2;
          }
          while (v251 != v250);
          long long v252 = v307;
        }
        size_t v308 = v250;
        operator delete(v252);
      }
      unint64_t v254 = v310;
      if (v310 && !atomic_fetch_add(&v310->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v254->__on_zero_shared)(v254);
        std::__shared_weak_count::__release_weak(v254);
        uint8x8_t v255 = v312;
        a2 = v266;
        if (v312) {
          goto LABEL_558;
        }
      }
      else
      {
        uint8x8_t v255 = v312;
        a2 = v266;
        if (v312)
        {
LABEL_558:
          if (!atomic_fetch_add(&v255->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v255->__on_zero_shared)(v255);
            std::__shared_weak_count::__release_weak(v255);
          }
        }
      }
      uint64_t v6 = v268 + 24;
      unint64_t v4 = v265;
    }
    while (v268 + 24 != v267);
  }
  MIL::Transform::ProgramTransformer::GetProgram((uint64_t *)__p, (MIL::Transform::ProgramTransformer *)v315);
  uint64_t v257 = *a2;
  for (uint64_t j = a2[1]; v257 != j; v257 += 24)
    Espresso::AOT::ValidateAlignmentsAttrForE5Backend(*(E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset **)__p);
  MIL::Transform::ProgramTransformer::GetProgram(a3, (MIL::Transform::ProgramTransformer *)v315);
  uint64_t v259 = *(void *)__p;
  *(void *)std::string __p = 0;
  if (v259) {
    (*(void (**)(uint64_t))(*(void *)v259 + 8))(v259);
  }
  uint64_t v260 = v314;
  if (v314 && !atomic_fetch_add(&v314->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v260->__on_zero_shared)(v260);
    std::__shared_weak_count::__release_weak(v260);
  }
  MIL::Transform::ProgramTransformer::~ProgramTransformer((MIL::Transform::ProgramTransformer *)v315);
}

void sub_19228F5E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41)
{
  if (a41) {
    (*(void (**)(void *))(*(void *)a41 + 8))(a41);
  }
  int v42 = (std::__shared_weak_count *)STACK[0x270];
  if (STACK[0x270])
  {
    if (!atomic_fetch_add(&v42->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  MIL::Transform::ProgramTransformer::~ProgramTransformer((MIL::Transform::ProgramTransformer *)&STACK[0x278]);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::__emplace_unique_key_args<std::string,std::string const&,MIL::IRValueType const*>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  unint64_t v7 = (unsigned char *)a2;
  unint64_t v9 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v10 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v10 = v9;
  }
  unint64_t v11 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v46, (uint64_t *)a2, v10);
  unint64_t v12 = v11;
  unint64_t v13 = *(void *)(a1 + 8);
  if (v13)
  {
    uint8x8_t v14 = (uint8x8_t)vcnt_s8((int8x8_t)v13);
    v14.i16[0] = vaddlv_u8(v14);
    if (v14.u32[0] > 1uLL)
    {
      unint64_t v4 = v11;
      if (v11 >= v13) {
        unint64_t v4 = v11 % v13;
      }
    }
    else
    {
      unint64_t v4 = (v13 - 1) & v11;
    }
    uint64_t v15 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v15)
    {
      unint64_t v16 = *v15;
      if (*v15)
      {
        char v17 = v7[23];
        if (v17 >= 0) {
          uint64_t v18 = v7[23];
        }
        else {
          uint64_t v18 = *((void *)v7 + 1);
        }
        if (v17 < 0) {
          unint64_t v7 = *(unsigned char **)v7;
        }
        if (v14.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v24 = v16[1];
            if (v24 == v12)
            {
              uint64_t v25 = *((unsigned __int8 *)v16 + 39);
              if ((v25 & 0x80u) == 0) {
                uint64_t v26 = *((unsigned __int8 *)v16 + 39);
              }
              else {
                uint64_t v26 = v16[3];
              }
              if (v26 == v18)
              {
                char v27 = (const void **)(v16 + 2);
                if ((v25 & 0x80) != 0)
                {
                  if (!memcmp(*v27, v7, v16[3])) {
                    return v16;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v16 + 39)) {
                    return v16;
                  }
                  for (unint64_t i = v7; *(unsigned __int8 *)v27 == *i; ++i)
                  {
                    char v27 = (const void **)((char *)v27 + 1);
                    if (!--v25) {
                      return v16;
                    }
                  }
                }
              }
            }
            else if ((v24 & (v13 - 1)) != v4)
            {
              goto LABEL_51;
            }
            unint64_t v16 = (uint64_t *)*v16;
            if (!v16) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v19 = v16[1];
          if (v19 == v12)
          {
            uint64_t v20 = *((unsigned __int8 *)v16 + 39);
            if ((v20 & 0x80u) == 0) {
              uint64_t v21 = *((unsigned __int8 *)v16 + 39);
            }
            else {
              uint64_t v21 = v16[3];
            }
            if (v21 == v18)
            {
              uint64_t v22 = (const void **)(v16 + 2);
              if ((v20 & 0x80) != 0)
              {
                if (!memcmp(*v22, v7, v16[3])) {
                  return v16;
                }
              }
              else
              {
                if (!*((unsigned char *)v16 + 39)) {
                  return v16;
                }
                for (uint64_t j = v7; *(unsigned __int8 *)v22 == *j; ++j)
                {
                  uint64_t v22 = (const void **)((char *)v22 + 1);
                  if (!--v20) {
                    return v16;
                  }
                }
              }
            }
          }
          else
          {
            if (v19 >= v13) {
              v19 %= v13;
            }
            if (v19 != v4) {
              break;
            }
          }
          unint64_t v16 = (uint64_t *)*v16;
        }
        while (v16);
      }
    }
  }
LABEL_51:
  long long v29 = operator new(0x30uLL);
  v46[0] = v29;
  v46[1] = a1 + 16;
  char v47 = 0;
  *long long v29 = 0;
  v29[1] = v12;
  unint64_t v30 = (std::string *)(v29 + 2);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v30, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v30->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    v29[4] = *(void *)(a3 + 16);
  }
  v29[5] = *a4;
  char v47 = 1;
  float v31 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v32 = *(float *)(a1 + 32);
  if (!v13 || (float)(v32 * (float)v13) < v31)
  {
    BOOL v35 = 1;
    if (v13 >= 3) {
      BOOL v35 = (v13 & (v13 - 1)) != 0;
    }
    unint64_t v36 = v35 | (2 * v13);
    unint64_t v37 = vcvtps_u32_f32(v31 / v32);
    if (v36 <= v37) {
      size_t prime = v37;
    }
    else {
      size_t prime = v36;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v39 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v39) {
      goto LABEL_68;
    }
    if (prime < *(void *)&v39)
    {
      unint64_t v40 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v39 < 3uLL || (uint8x8_t v41 = (uint8x8_t)vcnt_s8(v39), v41.i16[0] = vaddlv_u8(v41), v41.u32[0] > 1uLL))
      {
        unint64_t v40 = std::__next_prime(v40);
      }
      else
      {
        uint64_t v42 = 1 << -(char)__clz(v40 - 1);
        if (v40 >= 2) {
          unint64_t v40 = v42;
        }
      }
      if (prime <= v40) {
        size_t prime = v40;
      }
      if (prime < *(void *)&v39) {
LABEL_68:
      }
        std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v13 = *(void *)(a1 + 8);
    unint64_t v43 = v13 - 1;
    if ((v13 & (v13 - 1)) != 0)
    {
      if (v12 >= v13)
      {
        unint64_t v4 = v12 % v13;
        unint64_t v33 = *(void **)(*(void *)a1 + 8 * (v12 % v13));
        int v34 = (void *)v46[0];
        if (v33) {
          goto LABEL_57;
        }
      }
      else
      {
        unint64_t v4 = v12;
        unint64_t v33 = *(void **)(*(void *)a1 + 8 * v12);
        int v34 = (void *)v46[0];
        if (v33) {
          goto LABEL_57;
        }
      }
    }
    else
    {
      unint64_t v4 = v43 & v12;
      unint64_t v33 = *(void **)(*(void *)a1 + 8 * (v43 & v12));
      int v34 = (void *)v46[0];
      if (v33) {
        goto LABEL_57;
      }
    }
LABEL_81:
    void *v34 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v46[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v46[0])
    {
      unint64_t v44 = *(void *)(*(void *)v46[0] + 8);
      if ((v13 & (v13 - 1)) != 0)
      {
        if (v44 >= v13) {
          v44 %= v13;
        }
      }
      else
      {
        v44 &= v13 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v44) = v46[0];
    }
    goto LABEL_92;
  }
  unint64_t v33 = *(void **)(*(void *)a1 + 8 * v4);
  int v34 = (void *)v46[0];
  if (!v33) {
    goto LABEL_81;
  }
LABEL_57:
  void *v34 = *v33;
  *unint64_t v33 = v46[0];
LABEL_92:
  unint64_t v16 = (uint64_t *)v46[0];
  ++*(void *)(a1 + 24);
  return v16;
}

void sub_192290500(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_192290514(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

char *std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,MIL::IRValueType const*> const&>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v7 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v9) {
        unint64_t v3 = v7 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v7;
    }
    unint64_t v12 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      unint64_t v13 = (char *)*v12;
      if (*v12)
      {
        do
        {
          unint64_t v14 = *((void *)v13 + 1);
          if (v14 == v8)
          {
            if (std::equal_to<std::string>::operator()[abi:ne180100]((unsigned __int8 *)v13 + 16, a2)) {
              return v13;
            }
          }
          else
          {
            if (v11 > 1)
            {
              if (v14 >= v9) {
                v14 %= v9;
              }
            }
            else
            {
              v14 &= v9 - 1;
            }
            if (v14 != v3) {
              break;
            }
          }
          unint64_t v13 = *(char **)v13;
        }
        while (v13);
      }
    }
  }
  unint64_t v13 = (char *)operator new(0x30uLL);
  *(void *)unint64_t v13 = 0;
  *((void *)v13 + 1) = v8;
  uint64_t v15 = (std::string *)(v13 + 16);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v15, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v15->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    *((void *)v13 + 4) = *(void *)(a3 + 16);
  }
  *((void *)v13 + 5) = *(void *)(a3 + 24);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v9 || (float)(v17 * (float)v9) < v16)
  {
    BOOL v18 = 1;
    if (v9 >= 3) {
      BOOL v18 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v9);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__rehash<true>(a1, v21);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v22 = *(void *)a1;
  int v23 = *(void **)(*(void *)a1 + 8 * v3);
  if (v23)
  {
    *(void *)unint64_t v13 = *v23;
LABEL_41:
    void *v23 = v13;
    goto LABEL_42;
  }
  *(void *)unint64_t v13 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v13;
  *(void *)(v22 + 8 * v3) = a1 + 16;
  if (*(void *)v13)
  {
    unint64_t v24 = *(void *)(*(void *)v13 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v24 >= v9) {
        v24 %= v9;
      }
    }
    else
    {
      v24 &= v9 - 1;
    }
    int v23 = (void *)(*(void *)a1 + 8 * v24);
    goto LABEL_41;
  }
LABEL_42:
  ++*(void *)(a1 + 24);
  return v13;
}

void sub_192290778(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,unsigned long>,void *>>>::operator()[abi:ne180100](0, v1);
  _Unwind_Resume(a1);
}

void E5Common::Utils::MILDictToCpp<std::string,BOOL>(MIL::IRValue *a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  unint64_t v3 = (MIL::IRDictionaryValue *)MIL::IRValue::AsDictionary(a1);
  uint64_t v4 = MIL::IRDictionaryValue::begin(v3);
  for (i = MIL::IRDictionaryValue::end(v3); v4 != i; uint64_t v4 = *(void *)v4)
  {
    MIL::IRValue::AsTensor(*(MIL::IRValue **)(v4 + 32));
    unsigned __int8 v6 = MIL::IRValue::GetScalar<BOOL>();
    MIL::IRValue::AsTensor(*(MIL::IRValue **)(v4 + 16));
    MIL::IRValue::GetScalar<std::string>();
    unint64_t v9 = __p;
    std::__hash_table<std::__hash_value_type<std::string,BOOL>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,BOOL>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,BOOL>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a2, (uint64_t)__p, (uint64_t)&std::piecewise_construct, (long long **)&v9)[40] = v6;
    if (v8 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_192290878(_Unwind_Exception *a1)
{
  std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_19229088C(_Unwind_Exception *a1)
{
  std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_1922908A0(_Unwind_Exception *a1)
{
  std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_1922908B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100](v15);
    _Unwind_Resume(a1);
  }
  std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100](v15);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,BOOL>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,BOOL>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,BOOL>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, long long **a4)
{
  unsigned __int8 v6 = (unsigned char *)a2;
  unint64_t v8 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v9 = v8;
  }
  unint64_t v10 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v46, (uint64_t *)a2, v9);
  unint64_t v11 = v10;
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v12) {
        unint64_t v4 = v10 % v12;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v10;
    }
    unint64_t v14 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      uint64_t v15 = (unsigned __int8 *)*v14;
      if (*v14)
      {
        char v16 = v6[23];
        if (v16 >= 0) {
          uint64_t v17 = v6[23];
        }
        else {
          uint64_t v17 = *((void *)v6 + 1);
        }
        if (v16 < 0) {
          unsigned __int8 v6 = *(unsigned char **)v6;
        }
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v23 = *((void *)v15 + 1);
            if (v23 == v11)
            {
              uint64_t v24 = v15[39];
              if ((v24 & 0x80u) == 0) {
                uint64_t v25 = v15[39];
              }
              else {
                uint64_t v25 = *((void *)v15 + 3);
              }
              if (v25 == v17)
              {
                uint64_t v26 = (const void **)(v15 + 16);
                if ((v24 & 0x80) != 0)
                {
                  if (!memcmp(*v26, v6, *((void *)v15 + 3))) {
                    return v15;
                  }
                }
                else
                {
                  if (!v15[39]) {
                    return v15;
                  }
                  for (uint64_t i = v6; *(unsigned __int8 *)v26 == *i; ++i)
                  {
                    uint64_t v26 = (const void **)((char *)v26 + 1);
                    if (!--v24) {
                      return v15;
                    }
                  }
                }
              }
            }
            else if ((v23 & (v12 - 1)) != v4)
            {
              goto LABEL_51;
            }
            uint64_t v15 = *(unsigned __int8 **)v15;
            if (!v15) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v18 = *((void *)v15 + 1);
          if (v18 == v11)
          {
            uint64_t v19 = v15[39];
            if ((v19 & 0x80u) == 0) {
              uint64_t v20 = v15[39];
            }
            else {
              uint64_t v20 = *((void *)v15 + 3);
            }
            if (v20 == v17)
            {
              size_t v21 = (const void **)(v15 + 16);
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp(*v21, v6, *((void *)v15 + 3))) {
                  return v15;
                }
              }
              else
              {
                if (!v15[39]) {
                  return v15;
                }
                for (uint64_t j = v6; *(unsigned __int8 *)v21 == *j; ++j)
                {
                  size_t v21 = (const void **)((char *)v21 + 1);
                  if (!--v19) {
                    return v15;
                  }
                }
              }
            }
          }
          else
          {
            if (v18 >= v12) {
              v18 %= v12;
            }
            if (v18 != v4) {
              break;
            }
          }
          uint64_t v15 = *(unsigned __int8 **)v15;
        }
        while (v15);
      }
    }
  }
LABEL_51:
  long long v28 = (void *)(a1 + 16);
  uint64_t v15 = (unsigned __int8 *)operator new(0x30uLL);
  v46[0] = v15;
  v46[1] = a1 + 16;
  *(void *)uint64_t v15 = 0;
  *((void *)v15 + 1) = v11;
  long long v29 = *a4;
  long long v30 = **a4;
  *((void *)v15 + 4) = *((void *)*a4 + 2);
  *((_OWORD *)v15 + 1) = v30;
  *((void *)v29 + 1) = 0;
  *((void *)v29 + 2) = 0;
  *(void *)long long v29 = 0;
  v15[40] = 0;
  char v47 = 1;
  float v31 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v32 = *(float *)(a1 + 32);
  if (v12 && (float)(v32 * (float)v12) >= v31)
  {
    uint64_t v33 = *(void *)a1;
    int v34 = *(void **)(*(void *)a1 + 8 * v4);
    if (v34)
    {
LABEL_54:
      *(void *)uint64_t v15 = *v34;
LABEL_89:
      void *v34 = v15;
      goto LABEL_90;
    }
  }
  else
  {
    BOOL v35 = 1;
    if (v12 >= 3) {
      BOOL v35 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v36 = v35 | (2 * v12);
    unint64_t v37 = vcvtps_u32_f32(v31 / v32);
    if (v36 <= v37) {
      size_t prime = v37;
    }
    else {
      size_t prime = v36;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v39 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v39) {
      goto LABEL_65;
    }
    if (prime < *(void *)&v39)
    {
      unint64_t v40 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v39 < 3uLL || (uint8x8_t v41 = (uint8x8_t)vcnt_s8(v39), v41.i16[0] = vaddlv_u8(v41), v41.u32[0] > 1uLL))
      {
        unint64_t v40 = std::__next_prime(v40);
      }
      else
      {
        uint64_t v42 = 1 << -(char)__clz(v40 - 1);
        if (v40 >= 2) {
          unint64_t v40 = v42;
        }
      }
      if (prime <= v40) {
        size_t prime = v40;
      }
      if (prime < *(void *)&v39) {
LABEL_65:
      }
        std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v12 = *(void *)(a1 + 8);
    unint64_t v43 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        unint64_t v4 = v11 % v12;
        uint64_t v33 = *(void *)a1;
        int v34 = *(void **)(*(void *)a1 + 8 * (v11 % v12));
        if (v34) {
          goto LABEL_54;
        }
      }
      else
      {
        unint64_t v4 = v11;
        uint64_t v33 = *(void *)a1;
        int v34 = *(void **)(*(void *)a1 + 8 * v11);
        if (v34) {
          goto LABEL_54;
        }
      }
    }
    else
    {
      unint64_t v4 = v43 & v11;
      uint64_t v33 = *(void *)a1;
      int v34 = *(void **)(*(void *)a1 + 8 * (v43 & v11));
      if (v34) {
        goto LABEL_54;
      }
    }
  }
  *(void *)uint64_t v15 = *v28;
  void *v28 = v15;
  *(void *)(v33 + 8 * v4) = v28;
  if (*(void *)v15)
  {
    unint64_t v44 = *(void *)(*(void *)v15 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v44 >= v12) {
        v44 %= v12;
      }
    }
    else
    {
      v44 &= v12 - 1;
    }
    int v34 = (void *)(*(void *)a1 + 8 * v44);
    goto LABEL_89;
  }
LABEL_90:
  ++*(void *)(a1 + 24);
  return v15;
}

void sub_192290D1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void E5PlatformManagerImpl::GetPlatformBundleNamesForPlatform(uint64_t a1@<X1>, char **a2@<X8>)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (a1 <= 32773)
  {
    if (a1 < 24576)
    {
      if (!a1) {
        goto LABEL_45;
      }
      if (a1 == 256)
      {
        unint64_t v3 = (char *)operator new(0x10uLL);
        *(_OWORD *)unint64_t v3 = xmmword_1E5745AE8;
        a2[1] = v3 + 16;
        a2[2] = v3 + 16;
        *a2 = v3;
        return;
      }
      goto LABEL_83;
    }
    switch(a1)
    {
      case 24576:
        long long v29 = xmmword_1E5745B28;
        long long v30 = *(_OWORD *)&off_1E5745B38;
        long long v31 = xmmword_1E5745B48;
        long long v32 = *(_OWORD *)&off_1E5745B58;
        __vImage_Buffer src = xmmword_1E5745B08;
        long long v28 = *(_OWORD *)&off_1E5745B18;
        std::vector<std::string_view>::__assign_with_size[abi:ne180100]<std::string_view const*,std::string_view const*>(a2, (char *)&__src, (char *)&v33, 6uLL);
        break;
      case 24577:
        long long v29 = xmmword_1E5745B88;
        long long v30 = *(_OWORD *)&off_1E5745B98;
        long long v31 = xmmword_1E5745BA8;
        long long v32 = *(_OWORD *)&off_1E5745BB8;
        __vImage_Buffer src = xmmword_1E5745B68;
        long long v28 = *(_OWORD *)&off_1E5745B78;
        std::vector<std::string_view>::__assign_with_size[abi:ne180100]<std::string_view const*,std::string_view const*>(a2, (char *)&__src, (char *)&v33, 6uLL);
        break;
      case 24578:
        long long v29 = xmmword_1E5745BE8;
        long long v30 = *(_OWORD *)&off_1E5745BF8;
        long long v31 = xmmword_1E5745C08;
        long long v32 = *(_OWORD *)&off_1E5745C18;
        __vImage_Buffer src = xmmword_1E5745BC8;
        long long v28 = *(_OWORD *)&off_1E5745BD8;
        std::vector<std::string_view>::__assign_with_size[abi:ne180100]<std::string_view const*,std::string_view const*>(a2, (char *)&__src, (char *)&v33, 6uLL);
        break;
      case 24579:
      case 24580:
      case 24581:
      case 24582:
      case 24583:
      case 24584:
      case 24585:
      case 24586:
      case 24587:
      case 24588:
      case 24589:
      case 24590:
      case 24591:
      case 24592:
      case 24593:
      case 24594:
      case 24595:
      case 24596:
      case 24597:
      case 24598:
      case 24599:
      case 24600:
      case 24601:
      case 24602:
      case 24603:
      case 24604:
      case 24605:
      case 24606:
      case 24607:
      case 24611:
      case 24612:
      case 24613:
      case 24614:
      case 24615:
      case 24616:
      case 24617:
      case 24618:
      case 24619:
      case 24620:
      case 24621:
      case 24622:
      case 24623:
      case 24627:
      case 24629:
      case 24630:
      case 24631:
      case 24632:
      case 24633:
      case 24634:
      case 24635:
      case 24636:
      case 24637:
      case 24638:
      case 24639:
        goto LABEL_83;
      case 24608:
        long long v29 = xmmword_1E5745C48;
        long long v30 = *(_OWORD *)&off_1E5745C58;
        long long v31 = xmmword_1E5745C68;
        long long v32 = *(_OWORD *)&off_1E5745C78;
        __vImage_Buffer src = xmmword_1E5745C28;
        long long v28 = *(_OWORD *)&off_1E5745C38;
        std::vector<std::string_view>::__assign_with_size[abi:ne180100]<std::string_view const*,std::string_view const*>(a2, (char *)&__src, (char *)&v33, 6uLL);
        break;
      case 24609:
        long long v29 = xmmword_1E5745CA8;
        long long v30 = *(_OWORD *)&off_1E5745CB8;
        long long v31 = xmmword_1E5745CC8;
        long long v32 = *(_OWORD *)&off_1E5745CD8;
        __vImage_Buffer src = xmmword_1E5745C88;
        long long v28 = *(_OWORD *)&off_1E5745C98;
        std::vector<std::string_view>::__assign_with_size[abi:ne180100]<std::string_view const*,std::string_view const*>(a2, (char *)&__src, (char *)&v33, 6uLL);
        break;
      case 24610:
        long long v29 = xmmword_1E5745D08;
        long long v30 = *(_OWORD *)&off_1E5745D18;
        long long v31 = xmmword_1E5745D28;
        long long v32 = *(_OWORD *)&off_1E5745D38;
        __vImage_Buffer src = xmmword_1E5745CE8;
        long long v28 = *(_OWORD *)&off_1E5745CF8;
        std::vector<std::string_view>::__assign_with_size[abi:ne180100]<std::string_view const*,std::string_view const*>(a2, (char *)&__src, (char *)&v33, 6uLL);
        break;
      case 24624:
        long long v29 = xmmword_1E5745D68;
        long long v30 = *(_OWORD *)&off_1E5745D78;
        long long v31 = xmmword_1E5745D88;
        __vImage_Buffer src = xmmword_1E5745D48;
        long long v28 = *(_OWORD *)&off_1E5745D58;
        std::vector<std::string_view>::__assign_with_size[abi:ne180100]<std::string_view const*,std::string_view const*>(a2, (char *)&__src, (char *)&v32, 5uLL);
        break;
      case 24625:
        long long v29 = xmmword_1E5745DB8;
        long long v30 = *(_OWORD *)&off_1E5745DC8;
        long long v31 = xmmword_1E5745DD8;
        __vImage_Buffer src = xmmword_1E5745D98;
        long long v28 = *(_OWORD *)&off_1E5745DA8;
        std::vector<std::string_view>::__assign_with_size[abi:ne180100]<std::string_view const*,std::string_view const*>(a2, (char *)&__src, (char *)&v32, 5uLL);
        break;
      case 24626:
        long long v31 = xmmword_1E5745E28;
        long long v32 = *(_OWORD *)&off_1E5745E38;
        long long v33 = xmmword_1E5745E48;
        __vImage_Buffer src = xmmword_1E5745DE8;
        long long v28 = *(_OWORD *)&off_1E5745DF8;
        long long v29 = xmmword_1E5745E08;
        long long v30 = *(_OWORD *)&off_1E5745E18;
        std::vector<std::string_view>::__assign_with_size[abi:ne180100]<std::string_view const*,std::string_view const*>(a2, (char *)&__src, v34, 7uLL);
        break;
      case 24628:
        long long v31 = xmmword_1E5745E98;
        long long v32 = *(_OWORD *)&off_1E5745EA8;
        long long v33 = xmmword_1E5745EB8;
        __vImage_Buffer src = xmmword_1E5745E58;
        long long v28 = *(_OWORD *)&off_1E5745E68;
        long long v29 = xmmword_1E5745E78;
        long long v30 = *(_OWORD *)&off_1E5745E88;
        std::vector<std::string_view>::__assign_with_size[abi:ne180100]<std::string_view const*,std::string_view const*>(a2, (char *)&__src, v34, 7uLL);
        break;
      case 24640:
        long long v29 = xmmword_1E5746208;
        long long v30 = *(_OWORD *)&off_1E5746218;
        long long v31 = xmmword_1E5746228;
        __vImage_Buffer src = xmmword_1E57461E8;
        long long v28 = *(_OWORD *)&off_1E57461F8;
        std::vector<std::string_view>::__assign_with_size[abi:ne180100]<std::string_view const*,std::string_view const*>(a2, (char *)&__src, (char *)&v32, 5uLL);
        break;
      case 24641:
        long long v29 = xmmword_1E5746258;
        long long v30 = *(_OWORD *)&off_1E5746268;
        long long v31 = xmmword_1E5746278;
        __vImage_Buffer src = xmmword_1E5746238;
        long long v28 = *(_OWORD *)&off_1E5746248;
        std::vector<std::string_view>::__assign_with_size[abi:ne180100]<std::string_view const*,std::string_view const*>(a2, (char *)&__src, (char *)&v32, 5uLL);
        break;
      default:
        if (a1 != 28672) {
          goto LABEL_83;
        }
        __vImage_Buffer src = xmmword_1E5746318;
        long long v28 = *(_OWORD *)&off_1E5746328;
        std::vector<std::string_view>::__assign_with_size[abi:ne180100]<std::string_view const*,std::string_view const*>(a2, (char *)&__src, (char *)&v29, 2uLL);
        break;
    }
  }
  else
  {
    if (a1 <= 33024)
    {
      switch(a1)
      {
        case 32774:
          __vImage_Buffer src = xmmword_1E5745EC8;
          std::vector<std::string_view>::__assign_with_size[abi:ne180100]<std::string_view const*,std::string_view const*>(a2, (char *)&__src, (char *)&v28, 1uLL);
          goto LABEL_45;
        case 32784:
          __vImage_Buffer src = xmmword_1E5746338;
          long long v28 = *(_OWORD *)&off_1E5746348;
          std::vector<std::string_view>::__assign_with_size[abi:ne180100]<std::string_view const*,std::string_view const*>(a2, (char *)&__src, (char *)&v29, 2uLL);
          goto LABEL_45;
        case 32785:
          __vImage_Buffer src = xmmword_1E5746358;
          std::vector<std::string_view>::__assign_with_size[abi:ne180100]<std::string_view const*,std::string_view const*>(a2, (char *)&__src, (char *)&v28, 1uLL);
          goto LABEL_45;
        case 32786:
          __vImage_Buffer src = xmmword_1E5745AF8;
          std::vector<std::string_view>::__assign_with_size[abi:ne180100]<std::string_view const*,std::string_view const*>(a2, (char *)&__src, (char *)&v28, 1uLL);
          goto LABEL_45;
        case 32789:
          __vImage_Buffer src = xmmword_1E5745ED8;
          long long v28 = *(_OWORD *)&off_1E5745EE8;
          std::vector<std::string_view>::__assign_with_size[abi:ne180100]<std::string_view const*,std::string_view const*>(a2, (char *)&__src, (char *)&v29, 2uLL);
          goto LABEL_45;
        case 32800:
          __vImage_Buffer src = xmmword_1E5745EF8;
          long long v28 = *(_OWORD *)&off_1E5745F08;
          long long v29 = xmmword_1E5745F18;
          std::vector<std::string_view>::__assign_with_size[abi:ne180100]<std::string_view const*,std::string_view const*>(a2, (char *)&__src, (char *)&v30, 3uLL);
          goto LABEL_45;
        case 32807:
          __vImage_Buffer src = xmmword_1E5745F28;
          long long v28 = *(_OWORD *)&off_1E5745F38;
          long long v29 = xmmword_1E5745F48;
          std::vector<std::string_view>::__assign_with_size[abi:ne180100]<std::string_view const*,std::string_view const*>(a2, (char *)&__src, (char *)&v30, 3uLL);
          goto LABEL_45;
        case 32816:
          __vImage_Buffer src = xmmword_1E5745F58;
          long long v28 = *(_OWORD *)&off_1E5745F68;
          std::vector<std::string_view>::__assign_with_size[abi:ne180100]<std::string_view const*,std::string_view const*>(a2, (char *)&__src, (char *)&v29, 2uLL);
          goto LABEL_45;
        default:
          goto LABEL_83;
      }
    }
    switch(a1)
    {
      case 33025:
        long long v29 = xmmword_1E5745F98;
        long long v30 = *(_OWORD *)&off_1E5745FA8;
        long long v31 = xmmword_1E5745FB8;
        long long v32 = *(_OWORD *)&off_1E5745FC8;
        __vImage_Buffer src = xmmword_1E5745F78;
        long long v28 = *(_OWORD *)&off_1E5745F88;
        std::vector<std::string_view>::__assign_with_size[abi:ne180100]<std::string_view const*,std::string_view const*>(a2, (char *)&__src, (char *)&v33, 6uLL);
        break;
      case 33026:
      case 33028:
      case 33029:
      case 33030:
      case 33031:
      case 33032:
      case 33033:
      case 33034:
      case 33035:
      case 33036:
      case 33037:
      case 33038:
      case 33039:
      case 33041:
      case 33043:
      case 33044:
      case 33045:
      case 33046:
      case 33047:
      case 33048:
      case 33049:
      case 33050:
      case 33051:
      case 33052:
      case 33053:
      case 33054:
      case 33055:
      case 33057:
      case 33059:
      case 33060:
      case 33061:
      case 33062:
      case 33063:
      case 33064:
      case 33065:
      case 33066:
      case 33067:
      case 33068:
      case 33069:
      case 33070:
      case 33071:
      case 33073:
      case 33075:
      case 33076:
      case 33077:
      case 33078:
      case 33079:
      case 33080:
      case 33081:
      case 33082:
      case 33083:
      case 33084:
      case 33085:
      case 33086:
      case 33087:
        goto LABEL_83;
      case 33027:
        long long v29 = xmmword_1E5745FF8;
        long long v30 = *(_OWORD *)&off_1E5746008;
        long long v31 = xmmword_1E5746018;
        long long v32 = *(_OWORD *)&off_1E5746028;
        __vImage_Buffer src = xmmword_1E5745FD8;
        long long v28 = *(_OWORD *)&off_1E5745FE8;
        std::vector<std::string_view>::__assign_with_size[abi:ne180100]<std::string_view const*,std::string_view const*>(a2, (char *)&__src, (char *)&v33, 6uLL);
        break;
      case 33040:
        long long v29 = xmmword_1E5746058;
        long long v30 = *(_OWORD *)&off_1E5746068;
        long long v31 = xmmword_1E5746078;
        long long v32 = *(_OWORD *)&off_1E5746088;
        __vImage_Buffer src = xmmword_1E5746038;
        long long v28 = *(_OWORD *)&off_1E5746048;
        std::vector<std::string_view>::__assign_with_size[abi:ne180100]<std::string_view const*,std::string_view const*>(a2, (char *)&__src, (char *)&v33, 6uLL);
        break;
      case 33042:
        long long v29 = xmmword_1E57460B8;
        long long v30 = *(_OWORD *)&off_1E57460C8;
        long long v31 = xmmword_1E57460D8;
        long long v32 = *(_OWORD *)&off_1E57460E8;
        __vImage_Buffer src = xmmword_1E5746098;
        long long v28 = *(_OWORD *)&off_1E57460A8;
        std::vector<std::string_view>::__assign_with_size[abi:ne180100]<std::string_view const*,std::string_view const*>(a2, (char *)&__src, (char *)&v33, 6uLL);
        break;
      case 33056:
        long long v29 = xmmword_1E5746118;
        long long v30 = *(_OWORD *)&off_1E5746128;
        long long v31 = xmmword_1E5746138;
        __vImage_Buffer src = xmmword_1E57460F8;
        long long v28 = *(_OWORD *)&off_1E5746108;
        std::vector<std::string_view>::__assign_with_size[abi:ne180100]<std::string_view const*,std::string_view const*>(a2, (char *)&__src, (char *)&v32, 5uLL);
        break;
      case 33058:
        long long v29 = xmmword_1E5746168;
        long long v30 = *(_OWORD *)&off_1E5746178;
        long long v31 = xmmword_1E5746188;
        __vImage_Buffer src = xmmword_1E5746148;
        long long v28 = *(_OWORD *)&off_1E5746158;
        std::vector<std::string_view>::__assign_with_size[abi:ne180100]<std::string_view const*,std::string_view const*>(a2, (char *)&__src, (char *)&v32, 5uLL);
        break;
      case 33072:
        long long v29 = xmmword_1E57461B8;
        long long v30 = *(_OWORD *)&off_1E57461C8;
        long long v31 = xmmword_1E57461D8;
        __vImage_Buffer src = xmmword_1E5746198;
        long long v28 = *(_OWORD *)&off_1E57461A8;
        std::vector<std::string_view>::__assign_with_size[abi:ne180100]<std::string_view const*,std::string_view const*>(a2, (char *)&__src, (char *)&v32, 5uLL);
        break;
      case 33074:
        long long v29 = xmmword_1E57462A8;
        long long v30 = *(_OWORD *)&off_1E57462B8;
        long long v31 = xmmword_1E57462C8;
        __vImage_Buffer src = xmmword_1E5746288;
        long long v28 = *(_OWORD *)&off_1E5746298;
        std::vector<std::string_view>::__assign_with_size[abi:ne180100]<std::string_view const*,std::string_view const*>(a2, (char *)&__src, (char *)&v32, 5uLL);
        break;
      case 33088:
        __vImage_Buffer src = xmmword_1E57462D8;
        long long v28 = *(_OWORD *)&off_1E57462E8;
        std::vector<std::string_view>::__assign_with_size[abi:ne180100]<std::string_view const*,std::string_view const*>(a2, (char *)&__src, (char *)&v29, 2uLL);
        break;
      default:
        if (a1 != 33537)
        {
          if (a1 == 33552)
          {
            __vImage_Buffer src = xmmword_1E5746308;
            std::vector<std::string_view>::__assign_with_size[abi:ne180100]<std::string_view const*,std::string_view const*>(a2, (char *)&__src, (char *)&v28, 1uLL);
            break;
          }
LABEL_83:
          exception = __cxa_allocate_exception(0x18uLL);
          std::string::basic_string[abi:ne180100]<0>(&__src, "GetPlatformBundleNamesForPlatform");
          std::string::basic_string[abi:ne180100]<0>(v25, "Unknown platform.");
          E5RT::Status::Status(v26, 8, v25);
          E5RT::E5RTError::E5RTError(exception, &__src, v26);
        }
        __vImage_Buffer src = xmmword_1E57462F8;
        std::vector<std::string_view>::__assign_with_size[abi:ne180100]<std::string_view const*,std::string_view const*>(a2, (char *)&__src, (char *)&v28, 1uLL);
        break;
    }
  }
LABEL_45:
  uint64_t v5 = a2[1];
  unint64_t v4 = (unint64_t)a2[2];
  if ((unint64_t)v5 >= v4)
  {
    unint64_t v7 = *a2;
    uint64_t v8 = (v5 - *a2) >> 4;
    unint64_t v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 60) {
      goto LABEL_81;
    }
    uint64_t v10 = v4 - (void)v7;
    if (v10 >> 3 > v9) {
      unint64_t v9 = v10 >> 3;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11)
    {
      if (v11 >> 60) {
        goto LABEL_82;
      }
      unint64_t v12 = (char *)operator new(16 * v11);
    }
    else
    {
      unint64_t v12 = 0;
    }
    uint8x8_t v13 = &v12[16 * v8];
    *(_OWORD *)uint8x8_t v13 = xmmword_1E5746368;
    unsigned __int8 v6 = v13 + 16;
    if (v5 != v7)
    {
      do
      {
        *((_OWORD *)v13 - 1) = *((_OWORD *)v5 - 1);
        v13 -= 16;
        v5 -= 16;
      }
      while (v5 != v7);
      uint64_t v5 = *a2;
    }
    *a2 = v13;
    a2[1] = v6;
    a2[2] = &v12[16 * v11];
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(_OWORD *)uint64_t v5 = xmmword_1E5746368;
    unsigned __int8 v6 = v5 + 16;
  }
  a2[1] = v6;
  unint64_t v14 = (unint64_t)a2[2];
  if ((unint64_t)v6 < v14)
  {
    *(_OWORD *)unsigned __int8 v6 = xmmword_1E5745AE8;
    uint64_t v15 = v6 + 16;
    goto LABEL_80;
  }
  char v16 = *a2;
  uint64_t v17 = (v6 - *a2) >> 4;
  unint64_t v18 = v17 + 1;
  if ((unint64_t)(v17 + 1) >> 60) {
LABEL_81:
  }
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  uint64_t v19 = v14 - (void)v16;
  if (v19 >> 3 > v18) {
    unint64_t v18 = v19 >> 3;
  }
  if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v20 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v20 = v18;
  }
  if (!v20)
  {
    size_t v21 = 0;
    goto LABEL_74;
  }
  if (v20 >> 60) {
LABEL_82:
  }
    std::__throw_bad_array_new_length[abi:ne180100]();
  size_t v21 = (char *)operator new(16 * v20);
LABEL_74:
  uint64_t v22 = &v21[16 * v17];
  uint64_t v23 = &v21[16 * v20];
  *(_OWORD *)uint64_t v22 = xmmword_1E5745AE8;
  uint64_t v15 = v22 + 16;
  if (v6 == v16)
  {
    *a2 = v22;
    a2[1] = v15;
    a2[2] = v23;
  }
  else
  {
    do
    {
      *((_OWORD *)v22 - 1) = *((_OWORD *)v6 - 1);
      v22 -= 16;
      v6 -= 16;
    }
    while (v6 != v16);
    unsigned __int8 v6 = *a2;
    *a2 = v22;
    a2[1] = v15;
    a2[2] = v23;
    if (!v6) {
      goto LABEL_80;
    }
  }
  operator delete(v6);
LABEL_80:
  a2[1] = v15;
}

void sub_1922917B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  E5RT::Status::~Status((E5RT::Status *)&a15);
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0)
  {
    operator delete(a16);
    if ((v23 & 1) == 0)
    {
LABEL_8:
      uint64_t v25 = *(void **)v21;
      if (*(void *)v21)
      {
        *(void *)(v21 + 8) = v25;
        operator delete(v25);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

void *std::vector<std::string_view>::__assign_with_size[abi:ne180100]<std::string_view const*,std::string_view const*>(void *result, char *__src, char *a3, size_t __sz)
{
  unsigned __int8 v6 = __src;
  unint64_t v7 = result;
  uint64_t v8 = result[2];
  unint64_t v9 = (char *)*result;
  if (__sz > (v8 - *result) >> 4)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      void *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz >> 60) {
      goto LABEL_22;
    }
    uint64_t v10 = v8 >> 3;
    if (v8 >> 3 <= __sz) {
      uint64_t v10 = __sz;
    }
    BOOL v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0;
    unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    if (!v11) {
      unint64_t v12 = v10;
    }
    if (v12 >> 60) {
LABEL_22:
    }
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    uint64_t v13 = 2 * v12;
    uint64_t result = operator new(16 * v12);
    unint64_t v9 = (char *)result;
    void *v7 = result;
    v7[1] = result;
    v7[2] = &result[v13];
    size_t v14 = a3 - v6;
    if (v14) {
      uint64_t result = memcpy(result, v6, v14);
    }
    uint64_t v15 = (void **)(v7 + 1);
    goto LABEL_21;
  }
  uint64_t v15 = (void **)(result + 1);
  char v16 = (unsigned char *)result[1];
  unint64_t v17 = (v16 - v9) >> 4;
  if (v17 >= __sz)
  {
    size_t v14 = a3 - __src;
    if (a3 == __src) {
      goto LABEL_21;
    }
    uint64_t v19 = (void *)*result;
LABEL_20:
    uint64_t result = memmove(v19, __src, v14);
    goto LABEL_21;
  }
  unint64_t v18 = &__src[16 * v17];
  if (v16 != v9)
  {
    uint64_t result = memmove((void *)*result, __src, v16 - v9);
    unint64_t v9 = (char *)*v15;
  }
  size_t v14 = a3 - v18;
  if (v14)
  {
    uint64_t v19 = v9;
    __vImage_Buffer src = v18;
    goto LABEL_20;
  }
LABEL_21:
  *uint64_t v15 = &v9[v14];
  return result;
}

void Espresso::dump_network_layers(void *a1, Espresso::net **a2, int a3, void **a4, uint64_t a5, char a6)
{
  uint64_t v490 = *MEMORY[0x1E4F143B8];
  int v478 = a3;
  char v477 = a6;
  std::string::basic_string[abi:ne180100]<0>(v475, "json");
  unint64_t v7 = Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::shared();
  Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::make(v474, (uint64_t)v7, v475);
  uint64_t v8 = Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::shared();
  Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::make(&v472, (uint64_t)v8, v475);
  uint64_t v399 = v474[0];
  unint64_t v9 = Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::shared();
  Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::make(&v470, (uint64_t)v9, v475);
  uint64_t v10 = a4;
  if (*((char *)*a2 + 447) < 0)
  {
    if (!*((void *)*a2 + 54)) {
      goto LABEL_11;
    }
  }
  else if (!*((unsigned char *)*a2 + 447))
  {
    goto LABEL_11;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "name");
  Espresso::SerDes::generic_serdes_object::operator[](v399, (uint64_t)&__p, buf);
  (*(void (**)(void, unsigned char *, uint64_t))(**(void **)buf + 232))(*(void *)buf, v484, (uint64_t)*a2 + 424);
  if ((v484[23] & 0x80000000) != 0) {
    operator delete(*(void **)v484);
  }
  if (*(void *)&buf[8]) {
    nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&buf[8]);
  }
  if (SHIBYTE(v459) < 0) {
    operator delete(__p);
  }
LABEL_11:
  BOOL v11 = Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::shared();
  Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::make(&__p, (uint64_t)v11, v475);
  unint64_t v12 = (long long *)*((void *)*a2 + 59);
  uint64_t v13 = (uint64_t)*a2 + 480;
  if (v12 != (long long *)v13)
  {
    do
    {
      std::pair<std::string const,std::string>::pair[abi:ne180100]((std::string *)buf, v12 + 2);
      (*(void (**)(void *, uint8_t *, unsigned char *))(*(void *)__p + 232))(__p, buf, &v484[8]);
      if (SHIBYTE(v485) < 0) {
        operator delete(*(void **)&v484[8]);
      }
      if ((v484[7] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      size_t v14 = (long long *)*((void *)v12 + 1);
      if (v14)
      {
        do
        {
          uint64_t v15 = v14;
          size_t v14 = *(long long **)v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          uint64_t v15 = (long long *)*((void *)v12 + 2);
          BOOL v107 = *(void *)v15 == (void)v12;
          unint64_t v12 = v15;
        }
        while (!v107);
      }
      unint64_t v12 = v15;
    }
    while (v15 != (long long *)v13);
  }
  std::string::basic_string[abi:ne180100]<0>(buf, "properties");
  (*(void (**)(uint64_t, uint8_t *, void **))(*(void *)v399 + 240))(v399, buf, &__p);
  if ((v484[7] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  if (v458) {
    nitro::nitro_function::nitro_function(v458);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "format_version");
  Espresso::SerDes::generic_serdes_object::operator[](v399, (uint64_t)&__p, buf);
  (*(void (**)(void, unsigned char *, int *))(**(void **)buf + 160))(*(void *)buf, v484, &v478);
  if ((v484[23] & 0x80000000) != 0) {
    operator delete(*(void **)v484);
  }
  if (*(void *)&buf[8]) {
    nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&buf[8]);
  }
  if (SHIBYTE(v459) < 0) {
    operator delete(__p);
  }
  char v16 = Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::shared();
  Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::make(v410, (uint64_t)v16, v475);
  unint64_t v17 = *a2;
  unint64_t v18 = (void *)*((void *)*a2 + 41);
  uint64_t v19 = (uint64_t)*a2 + 336;
  if (v18 != (void *)v19)
  {
    uint64_t v20 = *(void *)v410;
    do
    {
      uint64_t v21 = Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::shared();
      Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::make(&__p, (uint64_t)v21, v475);
      Espresso::SerDes::params_io<Espresso::vimage2espresso_param>((uint64_t)__p, (uint64_t)(v18 + 7), 1);
      Espresso::SerDes::generic_serdes_object::operator[](v20, (uint64_t)(v18 + 4), buf);
      (*(void (**)(void, unsigned char *, void **))(**(void **)buf + 240))(*(void *)buf, v484, &__p);
      if ((v484[23] & 0x80000000) != 0) {
        operator delete(*(void **)v484);
      }
      if (*(void *)&buf[8]) {
        nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&buf[8]);
      }
      if (v458) {
        nitro::nitro_function::nitro_function(v458);
      }
      uint64_t v22 = (void *)v18[1];
      if (v22)
      {
        do
        {
          int v23 = v22;
          uint64_t v22 = (void *)*v22;
        }
        while (v22);
      }
      else
      {
        do
        {
          int v23 = (void *)v18[2];
          BOOL v107 = *v23 == (void)v18;
          unint64_t v18 = v23;
        }
        while (!v107);
      }
      unint64_t v18 = v23;
    }
    while (v23 != (void *)v19);
    unint64_t v17 = *a2;
  }
  if (*((void *)v17 + 43))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "transform_params");
    Espresso::SerDes::generic_serdes_object::operator[](v399, (uint64_t)&__p, buf);
    (*(void (**)(void, unsigned char *, unsigned char *))(**(void **)buf + 240))(*(void *)buf, v484, v410);
    if ((v484[23] & 0x80000000) != 0) {
      operator delete(*(void **)v484);
    }
    if (*(void *)&buf[8]) {
      nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&buf[8]);
    }
    if (SHIBYTE(v459) < 0) {
      operator delete(__p);
    }
  }
  if (*(void *)&v410[8]) {
    nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&v410[8]);
  }
  v469 = v475;
  uint64_t v24 = Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::shared();
  Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::make(v410, (uint64_t)v24, v475);
  Espresso::dump_network_layers(std::shared_ptr<Espresso::net>,int,Espresso::dump_network_layers_blobs_state &,std::string const&,BOOL)::$_0::operator()(&v469, (void *)*a2 + 44, *(uint64_t *)v410);
  if (*((void *)*a2 + 46))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "numerical_parameters");
    Espresso::SerDes::generic_serdes_object::operator[](v399, (uint64_t)&__p, buf);
    (*(void (**)(void, unsigned char *, unsigned char *))(**(void **)buf + 240))(*(void *)buf, v484, v410);
    if ((v484[23] & 0x80000000) != 0) {
      operator delete(*(void **)v484);
    }
    if (*(void *)&buf[8]) {
      nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&buf[8]);
    }
    if (SHIBYTE(v459) < 0) {
      operator delete(__p);
    }
  }
  if (*(void *)&v410[8]) {
    nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&v410[8]);
  }
  uint64_t v25 = Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::shared();
  Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::make(v410, (uint64_t)v25, v475);
  uint64_t v26 = *a2;
  char v27 = (int *)*((void *)*a2 + 50);
  uint64_t v28 = (uint64_t)*a2 + 408;
  if (v27 != (int *)v28)
  {
    uint64_t v29 = *(void *)v410;
    while (1)
    {
      v458 = 0;
      std::string __p = 0;
      v459 = 0;
      Espresso::abstract_engine_factory::shared(buf);
      Espresso::abstract_engine_factory::engine_for_platform(*(uint64_t *)buf, v27 + 8, &v479);
      long long v31 = *(Espresso **)&buf[8];
      if (*(void *)&buf[8]) {
        nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&buf[8]);
      }
      std::string::size_type v32 = v479.__r_.__value_.__r.__words[0];
      if (v479.__r_.__value_.__r.__words[0])
      {
        long long v31 = (Espresso *)(*(uint64_t (**)(std::string::size_type))(*(void *)v479.__r_.__value_.__l.__data_
                                                                            + 16))(v479.__r_.__value_.__r.__words[0]);
        if (v31)
        {
          uint64_t v33 = (*(uint64_t (**)(std::string::size_type))(*(void *)v32 + 16))(v32);
          long long v31 = (Espresso *)MEMORY[0x192FF0F50](&__p, v33);
        }
      }
      if (SHIBYTE(v459) < 0)
      {
        if (!v458)
        {
LABEL_76:
          int v34 = Espresso::espresso_os_log_subsystem(v31, v30);
          if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
          {
            int v38 = v27[8];
            *(_DWORD *)std::string buf = 67109120;
            *(_DWORD *)&buf[4] = v38;
            _os_log_error_impl(&dword_1920CB000, v34, OS_LOG_TYPE_ERROR, "Cannot find engine for: %d", buf, 8u);
          }
        }
      }
      else if (!HIBYTE(v459))
      {
        goto LABEL_76;
      }
      uint64_t v35 = Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::shared();
      Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::make(&v466[1], (uint64_t)v35, v475);
      Espresso::dump_network_layers(std::shared_ptr<Espresso::net>,int,Espresso::dump_network_layers_blobs_state &,std::string const&,BOOL)::$_0::operator()(&v469, (void *)v27 + 5, *(uint64_t *)&v466[1]);
      Espresso::SerDes::generic_serdes_object::operator[](v29, (uint64_t)&__p, buf);
      uint64_t v10 = a4;
      (*(void (**)(void, unsigned char *, unsigned char *))(**(void **)buf + 240))(*(void *)buf, v484, &v466[1]);
      if ((v484[23] & 0x80000000) != 0) {
        operator delete(*(void **)v484);
      }
      if (*(void *)&buf[8]) {
        nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&buf[8]);
      }
      if (v467) {
        nitro::nitro_function::nitro_function(v467);
      }
      if (v479.__r_.__value_.__l.__size_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v479.__r_.__value_.__l.__size_);
      }
      if (SHIBYTE(v459) < 0) {
        operator delete(__p);
      }
      unint64_t v36 = (int *)*((void *)v27 + 1);
      if (v36)
      {
        do
        {
          unint64_t v37 = v36;
          unint64_t v36 = *(int **)v36;
        }
        while (v36);
      }
      else
      {
        do
        {
          unint64_t v37 = (int *)*((void *)v27 + 2);
          BOOL v107 = *(void *)v37 == (void)v27;
          char v27 = v37;
        }
        while (!v107);
      }
      char v27 = v37;
      if (v37 == (int *)v28)
      {
        uint64_t v26 = *a2;
        break;
      }
    }
  }
  if (*((void *)v26 + 52))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "numerical_properties");
    Espresso::SerDes::generic_serdes_object::operator[](v399, (uint64_t)&__p, buf);
    (*(void (**)(void, unsigned char *, unsigned char *))(**(void **)buf + 240))(*(void *)buf, v484, v410);
    if ((v484[23] & 0x80000000) != 0) {
      operator delete(*(void **)v484);
    }
    if (*(void *)&buf[8]) {
      nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&buf[8]);
    }
    if (SHIBYTE(v459) < 0) {
      operator delete(__p);
    }
  }
  if (*(void *)&v410[8]) {
    nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&v410[8]);
  }
  int8x8_t v39 = Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::shared();
  Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::make(v410, (uint64_t)v39, v475);
  Espresso::dump_network_layers(std::shared_ptr<Espresso::net>,int,Espresso::dump_network_layers_blobs_state &,std::string const&,BOOL)::$_0::operator()(&v469, (void *)*a2 + 47, *(uint64_t *)v410);
  if (*((void *)*a2 + 49))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "io_bind_info");
    Espresso::SerDes::generic_serdes_object::operator[](v399, (uint64_t)&__p, buf);
    (*(void (**)(void, unsigned char *, unsigned char *))(**(void **)buf + 240))(*(void *)buf, v484, v410);
    if ((v484[23] & 0x80000000) != 0) {
      operator delete(*(void **)v484);
    }
    if (*(void *)&buf[8]) {
      nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&buf[8]);
    }
    if (SHIBYTE(v459) < 0) {
      operator delete(__p);
    }
  }
  if (*(void *)&v410[8]) {
    nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&v410[8]);
  }
  unint64_t v40 = *a2;
  if (*((void *)*a2 + 99))
  {
    Espresso::net::save_additional_configurations(v40, (uint64_t *)&__p);
    std::string::basic_string[abi:ne180100]<0>(buf, "configurations");
    (*(void (**)(uint64_t, uint8_t *, void **))(*(void *)v399 + 240))(v399, buf, &__p);
    if ((v484[7] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    if (v458) {
      nitro::nitro_function::nitro_function(v458);
    }
    unint64_t v40 = *a2;
  }
  if (*((void *)v40 + 143))
  {
    uint8x8_t v41 = Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::shared();
    Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::make(&__p, (uint64_t)v41, v475);
    for (uint64_t i = (void *)*((void *)*a2 + 142); i; uint64_t i = (void *)*i)
    {
      if ((*(void *)(i[2] + 8) & 0x7FFFFFFFFFFFFFFFLL) != ((unint64_t)"N8Espresso26analysis_pass_insert_castsE" & 0x7FFFFFFFFFFFFFFFLL))
      {
        uint64_t v43 = i[3];
        if (v43)
        {
          (*(void (**)(unsigned char *__return_ptr))(*(void *)v43 + 24))(v410);
          if (*(void *)v410)
          {
            unint64_t v44 = __p;
            std::string::basic_string[abi:ne180100]<0>(buf, (char *)(*(void *)(i[2] + 8) & 0x7FFFFFFFFFFFFFFFLL));
            (*(void (**)(void *, uint8_t *, unsigned char *))(*(void *)v44 + 240))(v44, buf, v410);
            if ((v484[7] & 0x80000000) != 0) {
              operator delete(*(void **)buf);
            }
          }
          if (*(void *)&v410[8]) {
            nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&v410[8]);
          }
        }
      }
    }
    std::string::basic_string[abi:ne180100]<0>(buf, "analyses");
    (*(void (**)(uint64_t, uint8_t *, void **))(*(void *)v399 + 240))(v399, buf, &__p);
    if ((v484[7] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    if (v458) {
      nitro::nitro_function::nitro_function(v458);
    }
    unint64_t v40 = *a2;
  }
  v467 = 0;
  v466[8] = 0;
  unint64_t v468 = 0;
  *(void *)v466 = Espresso::blob_storage_write_version == 1;
  std::string __p = v10;
  v458 = (std::__shared_weak_count *)v466;
  v459 = &v477;
  v460 = a2;
  v461 = v10;
  long long v398 = v10 + 3;
  v462 = (char *)(v10 + 3);
  v463 = (char *)(v10 + 6);
  v464 = (char *)(v10 + 9);
  v465 = (char *)(v10 + 12);
  long long v45 = (void *)*((void *)v40 + 4);
  float v402 = (void *)*((void *)v40 + 5);
  if (v45 != v402)
  {
    while (1)
    {
      long long v46 = (std::__shared_weak_count *)v45[1];
      uint64_t v407 = *v45;
      uint64_t v403 = v45;
      if (v46) {
        atomic_fetch_add_explicit(&v46->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v405 = v46;
      context = (void *)MEMORY[0x192FF2020]();
      char v47 = v467;
      uint64_t v48 = *(void *)&v466[1];
      BOOL v49 = Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::shared();
      Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::make(&v456, (uint64_t)v49, v475);
      uint64_t v50 = v456;
      std::string::basic_string[abi:ne180100]<0>(v410, "type");
      Espresso::SerDes::generic_serdes_object::operator[](v50, (uint64_t)v410, buf);
      (*(void (**)(void, unsigned char *, uint64_t))(**(void **)buf + 232))(*(void *)buf, v484, v407 + 40);
      if ((v484[23] & 0x80000000) != 0) {
        operator delete(*(void **)v484);
      }
      if (*(void *)&buf[8]) {
        nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&buf[8]);
      }
      if ((v410[23] & 0x80000000) != 0) {
        operator delete(*(void **)v410);
      }
      std::string::basic_string[abi:ne180100]<0>(v410, "name");
      Espresso::SerDes::generic_serdes_object::operator[](v50, (uint64_t)v410, buf);
      (*(void (**)(void, unsigned char *, uint64_t))(**(void **)buf + 232))(*(void *)buf, v484, v407 + 16);
      if ((v484[23] & 0x80000000) != 0) {
        operator delete(*(void **)v484);
      }
      if (*(void *)&buf[8]) {
        nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&buf[8]);
      }
      if ((v410[23] & 0x80000000) != 0) {
        operator delete(*(void **)v410);
      }
      std::string::basic_string[abi:ne180100]<0>(v410, "debug_info");
      Espresso::SerDes::generic_serdes_object::operator[](v50, (uint64_t)v410, buf);
      if (*(char *)(v407 + 223) < 0) {
        std::string::__init_copy_ctor_external(&v479, *(const std::string::value_type **)(v407 + 200), *(void *)(v407 + 208));
      }
      else {
        std::string v479 = *(std::string *)(v407 + 200);
      }
      (*(void (**)(void, unsigned char *, std::string *))(**(void **)buf + 232))(*(void *)buf, v484, &v479);
      if (SHIBYTE(v479.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v479.__r_.__value_.__l.__data_);
      }
      if ((v484[23] & 0x80000000) != 0) {
        operator delete(*(void **)v484);
      }
      if (*(void *)&buf[8]) {
        nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&buf[8]);
      }
      if ((v410[23] & 0x80000000) != 0) {
        operator delete(*(void **)v410);
      }
      uint64_t v52 = (uint64_t *)(v407 + 64);
      uint64_t v51 = *(void *)(v407 + 64);
      uint64_t v408 = v50;
      if (v51)
      {
        if (*(_DWORD *)(v51 + 136))
        {
          std::string::basic_string[abi:ne180100]<0>(v410, "hint_fallback_from_metal");
          Espresso::SerDes::generic_serdes_object::operator[](v50, (uint64_t)v410, buf);
          (*(void (**)(void, unsigned char *, uint64_t))(**(void **)buf + 160))(*(void *)buf, v484, *v52 + 136);
          if ((v484[23] & 0x80000000) != 0) {
            operator delete(*(void **)v484);
          }
          if (*(void *)&buf[8]) {
            nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&buf[8]);
          }
          if ((v410[23] & 0x80000000) != 0) {
            operator delete(*(void **)v410);
          }
          uint64_t v51 = *v52;
        }
        if (*(_DWORD *)(v51 + 144))
        {
          std::string::basic_string[abi:ne180100]<0>(v410, "hint_fallback_from_cpu");
          Espresso::SerDes::generic_serdes_object::operator[](v50, (uint64_t)v410, buf);
          (*(void (**)(void, unsigned char *, uint64_t))(**(void **)buf + 160))(*(void *)buf, v484, *v52 + 144);
          if ((v484[23] & 0x80000000) != 0) {
            operator delete(*(void **)v484);
          }
          if (*(void *)&buf[8]) {
            nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&buf[8]);
          }
          if ((v410[23] & 0x80000000) != 0) {
            operator delete(*(void **)v410);
          }
          uint64_t v51 = *v52;
        }
        if (*(_DWORD *)(v51 + 140))
        {
          std::string::basic_string[abi:ne180100]<0>(v410, "hint_fallback_from_ane");
          Espresso::SerDes::generic_serdes_object::operator[](v50, (uint64_t)v410, buf);
          (*(void (**)(void, unsigned char *, uint64_t))(**(void **)buf + 160))(*(void *)buf, v484, *v52 + 140);
          if ((v484[23] & 0x80000000) != 0) {
            operator delete(*(void **)v484);
          }
          if (*(void *)&buf[8]) {
            nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&buf[8]);
          }
          if ((v410[23] & 0x80000000) != 0) {
            operator delete(*(void **)v410);
          }
          uint64_t v51 = *v52;
        }
        if (*(void *)(v51 + 264))
        {
          uint64_t v53 = Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::shared();
          Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::make(v410, (uint64_t)v53, v475);
          for (uint64_t j = (void *)(*v52 + 256);
                ;
                (*(void (**)(void, void *, void *))(**(void **)v410 + 160))(*(void *)v410, j + 2, j + 5))
          {
            uint64_t j = (void *)*j;
            if (!j) {
              break;
            }
          }
          std::string::basic_string[abi:ne180100]<0>(buf, "attributes");
          uint64_t v50 = v408;
          (*(void (**)(uint64_t, uint8_t *, unsigned char *))(*(void *)v408 + 240))(v408, buf, v410);
          if ((v484[7] & 0x80000000) != 0) {
            operator delete(*(void **)buf);
          }
          if (*(void *)&v410[8]) {
            nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&v410[8]);
          }
        }
      }
      if (*(char *)(v407 + 151) < 0) {
        uint64_t v55 = *(void *)(v407 + 136);
      }
      else {
        uint64_t v55 = *(unsigned __int8 *)(v407 + 151);
      }
      if (v55)
      {
        std::string::basic_string[abi:ne180100]<0>(v410, "share_weights_from_layer_named");
        Espresso::SerDes::generic_serdes_object::operator[](v50, (uint64_t)v410, buf);
        (*(void (**)(void, unsigned char *, uint64_t))(**(void **)buf + 232))(*(void *)buf, v484, v407 + 128);
        if ((v484[23] & 0x80000000) != 0) {
          operator delete(*(void **)v484);
        }
        if (*(void *)&buf[8]) {
          nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&buf[8]);
        }
        if ((v410[23] & 0x80000000) != 0) {
          operator delete(*(void **)v410);
        }
      }
      uint64_t v56 = 0;
      unint64_t v57 = 0;
      memset(&v479, 0, sizeof(v479));
      unint64_t v58 = (int)(((uint64_t)v47 - v48) >> 4);
      while (1)
      {
        uint64_t v59 = (uint64_t)*a2 + 56;
        *(void *)std::string buf = v58;
        unint64_t v60 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v59, v58, buf);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v60[4] - v60[3]) >> 3) <= v57) {
          break;
        }
        if (v57) {
          std::string::append(&v479, ",");
        }
        uint64_t v61 = (uint64_t)*a2 + 56;
        *(void *)std::string buf = v58;
        std::string::size_type v62 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v61, v58, buf);
        uint64_t v63 = v62[3] + v56;
        int v64 = *(char *)(v63 + 23);
        if (v64 >= 0) {
          int v65 = (const std::string::value_type *)(v62[3] + v56);
        }
        else {
          int v65 = *(const std::string::value_type **)v63;
        }
        if (v64 >= 0) {
          std::string::size_type v66 = *(unsigned __int8 *)(v63 + 23);
        }
        else {
          std::string::size_type v66 = *(void *)(v63 + 8);
        }
        std::string::append(&v479, v65, v66);
        ++v57;
        v56 += 24;
      }
      std::string::basic_string[abi:ne180100]<0>(v410, "bottom");
      Espresso::SerDes::generic_serdes_object::operator[](v408, (uint64_t)v410, buf);
      (*(void (**)(void, unsigned char *, std::string *))(**(void **)buf + 232))(*(void *)buf, v484, &v479);
      if ((v484[23] & 0x80000000) != 0) {
        operator delete(*(void **)v484);
      }
      if (*(void *)&buf[8]) {
        nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&buf[8]);
      }
      if ((v410[23] & 0x80000000) != 0) {
        operator delete(*(void **)v410);
      }
      uint64_t v67 = 0;
      unint64_t v68 = 0;
      memset(&v455, 0, sizeof(v455));
      while (1)
      {
        uint64_t v69 = (uint64_t)*a2 + 96;
        *(void *)std::string buf = v58;
        long long v70 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v69, v58, buf);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v70[4] - v70[3]) >> 3) <= v68) {
          break;
        }
        if (v68) {
          std::string::append(&v455, ",");
        }
        uint64_t v71 = (uint64_t)*a2 + 96;
        *(void *)std::string buf = v58;
        uint64_t v72 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v71, v58, buf);
        uint64_t v73 = v72[3] + v67;
        int v74 = *(char *)(v73 + 23);
        if (v74 >= 0) {
          int v75 = (const std::string::value_type *)(v72[3] + v67);
        }
        else {
          int v75 = *(const std::string::value_type **)v73;
        }
        if (v74 >= 0) {
          std::string::size_type v76 = *(unsigned __int8 *)(v73 + 23);
        }
        else {
          std::string::size_type v76 = *(void *)(v73 + 8);
        }
        std::string::append(&v455, v75, v76);
        ++v68;
        v67 += 24;
      }
      std::string::basic_string[abi:ne180100]<0>(v410, "top");
      Espresso::SerDes::generic_serdes_object::operator[](v408, (uint64_t)v410, buf);
      (*(void (**)(void, unsigned char *, std::string *))(**(void **)buf + 232))(*(void *)buf, v484, &v455);
      if ((v484[23] & 0x80000000) != 0) {
        operator delete(*(void **)v484);
      }
      if (*(void *)&buf[8]) {
        nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&buf[8]);
      }
      if ((v410[23] & 0x80000000) != 0) {
        operator delete(*(void **)v410);
      }
      __int16 v77 = Espresso::factory_t<Espresso::SerDes::layer_io_base>::shared();
      Espresso::factory_t<Espresso::SerDes::layer_io_base>::get(&v453, (uint64_t)v77, (void *)(v407 + 40));
      if (!v453)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        uint64_t v394 = std::string::append((std::string *)v410, "'");
        long long v395 = *(_OWORD *)&v394->__r_.__value_.__l.__data_;
        *(void *)v484 = *((void *)&v394->__r_.__value_.__l + 2);
        *(_OWORD *)std::string buf = v395;
        v394->__r_.__value_.__l.__size_ = 0;
        v394->__r_.__value_.__r.__words[2] = 0;
        v394->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, (const std::string *)buf);
        __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v453 + 24))(v453, v408, *v52);
      uint64_t v78 = (const void *)*v52;
      if (v55)
      {
        if (!v78) {
          goto LABEL_831;
        }
        if (*(char *)(v407 + 151) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)buf, *(const std::string::value_type **)(v407 + 128), *(void *)(v407 + 136));
        }
        else
        {
          *(_OWORD *)std::string buf = *(_OWORD *)(v407 + 128);
          *(void *)v484 = *(void *)(v407 + 144);
        }
        uint64_t v85 = *((void *)*a2 + 4);
        uint64_t v84 = *((void *)*a2 + 5);
        char v86 = v484[7];
        long long v401 = *(uint8_t **)buf;
        if (v84 == v85) {
          goto LABEL_996;
        }
        unint64_t v87 = 0;
        if (v484[7] >= 0) {
          uint64_t v88 = v484[7];
        }
        else {
          uint64_t v88 = *(void *)&buf[8];
        }
        if (v484[7] >= 0) {
          uint64_t v89 = buf;
        }
        else {
          uint64_t v89 = *(uint8_t **)buf;
        }
        unint64_t v400 = (v84 - v85) >> 4;
        if (v400 <= 1) {
          uint64_t v90 = 1;
        }
        else {
          uint64_t v90 = (v84 - v85) >> 4;
        }
        while (1)
        {
          uint64_t v91 = 16 * v87;
          uint64_t v92 = *(void *)(v85 + 16 * v87);
          uint64_t v93 = *(unsigned __int8 *)(v92 + 39);
          size_t v94 = *(void *)(v92 + 24);
          if ((v93 & 0x80u) == 0) {
            uint64_t v95 = *(unsigned __int8 *)(v92 + 39);
          }
          else {
            uint64_t v95 = *(void *)(v92 + 24);
          }
          if (v95 == v88)
          {
            uint64_t v96 = (const void **)(v92 + 16);
            if ((v93 & 0x80) != 0)
            {
              if (!memcmp(*v96, v89, v94))
              {
LABEL_276:
                if (v87 != v400 && v87 < ((uint64_t)v467 - *(void *)&v466[1]) >> 4)
                {
                  uint64_t v98 = *(void *)(*(void *)&v466[1] + 16 * v87);
                  std::string::basic_string[abi:ne180100]<0>(v410, "weights");
                  (*(void (**)(std::string *__return_ptr, uint64_t, unsigned char *))(*(void *)v98 + 120))(&v426, v98, v410);
                  if ((v410[23] & 0x80000000) != 0) {
                    operator delete(*(void **)v410);
                  }
                  if (v426.__r_.__value_.__r.__words[0])
                  {
                    std::string::basic_string[abi:ne180100]<0>(v410, "weights");
                    (*(void (**)(uint64_t, unsigned char *, std::string *))(*(void *)v408 + 240))(v408, v410, &v426);
                    if ((v410[23] & 0x80000000) != 0) {
                      operator delete(*(void **)v410);
                    }
                  }
                  if (v426.__r_.__value_.__l.__size_) {
                    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v426.__r_.__value_.__l.__size_);
                  }
                  memset(v410, 0, 24);
                  (*(void (**)(void, unsigned char *))(**(void **)(*(void *)&v466[1] + 16 * v87) + 32))(*(void *)(*(void *)&v466[1] + 16 * v87), v410);
                  uint64_t v100 = *(void *)&v410[8];
                  uint64_t v99 = *(void *)v410;
                  while (2)
                  {
                    if (v99 == v100)
                    {
                      v426.__r_.__value_.__r.__words[0] = (std::string::size_type)v410;
                      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v426);
                      if ((v484[7] & 0x80000000) != 0) {
                        operator delete(*(void **)buf);
                      }
                      goto LABEL_831;
                    }
                    int v101 = *(unsigned __int8 *)(v99 + 23);
                    if (*(char *)(v99 + 23) < 0)
                    {
                      long long v102 = *(char **)v99;
                      uint64_t v103 = *(void *)(v99 + 8);
                    }
                    else
                    {
                      long long v102 = (char *)v99;
                      uint64_t v103 = *(unsigned __int8 *)(v99 + 23);
                    }
                    long long v104 = &v102[v103];
                    if (v103 >= 5)
                    {
                      uint64_t v105 = v102;
                      do
                      {
                        unint64_t v106 = (char *)memchr(v105, 98, v103 - 4);
                        if (!v106) {
                          break;
                        }
                        BOOL v107 = *(_DWORD *)v106 == 1651469410 && v106[4] == 95;
                        if (v107) {
                          goto LABEL_299;
                        }
                        uint64_t v105 = v106 + 1;
                        uint64_t v103 = v104 - v105;
                      }
                      while (v104 - v105 > 4);
                    }
                    unint64_t v106 = v104;
LABEL_299:
                    BOOL v109 = v106 != v104 && v106 == v102;
                    if ((v101 & 0x80) != 0)
                    {
                      uint64_t v114 = *(void *)(v99 + 8);
                      if (v114 == 13)
                      {
                        BOOL v110 = 0;
                        BOOL v120 = **(void **)v99 == 0x746E6174736E6F63
                            && *(void *)(*(void *)v99 + 5) == 0x626F6C625F746E61;
                        goto LABEL_345;
                      }
                      uint64_t v111 = v408;
                      if (v114 == 29)
                      {
                        BOOL v110 = 0;
                        BOOL v113 = **(void **)v99 == 0x617A69746E617571
                            && *(void *)(*(void *)v99 + 8) == 0x74756C5F6E6F6974
                            && *(void *)(*(void *)v99 + 16) == 0x737468676965775FLL
                            && *(void *)(*(void *)v99 + 21) == 0x626F6C625F737468;
                        goto LABEL_355;
                      }
                      if (v114 == 21)
                      {
                        BOOL v110 = 0;
                        BOOL v113 = **(void **)v99 == 0x617A69746E617571
                            && *(void *)(*(void *)v99 + 8) == 0x74756C5F6E6F6974
                            && *(void *)(*(void *)v99 + 13) == 0x626F6C625F74756CLL;
                        goto LABEL_355;
                      }
                      if (v114 != 24)
                      {
                        BOOL v110 = 0;
                        if (v109) {
                          goto LABEL_374;
                        }
                        goto LABEL_373;
                      }
                      uint64_t v117 = *(char **)v99;
                    }
                    else
                    {
                      BOOL v110 = 0;
                      if (v101 <= 23)
                      {
                        if (v101 != 13)
                        {
                          BOOL v107 = v101 == 21;
                          uint64_t v111 = v408;
                          if (!v107) {
                            goto LABEL_372;
                          }
                          BOOL v110 = 0;
                          BOOL v113 = *(void *)v99 == 0x617A69746E617571
                              && *(void *)(v99 + 8) == 0x74756C5F6E6F6974
                              && *(void *)(v99 + 13) == 0x626F6C625F74756CLL;
LABEL_355:
                          if (v113) {
                            BOOL v109 = 1;
                          }
                          if (v109)
                          {
LABEL_374:
                            v426.__r_.__value_.__r.__words[0] = (*(uint64_t (**)(void, uint64_t))(**(void **)(*(void *)&v466[1] + v91) + 80))(*(void *)(*(void *)&v466[1] + v91), v99);
                            (*(void (**)(uint64_t, uint64_t, std::string *))(*(void *)v111 + 200))(v111, v99, &v426);
                            goto LABEL_375;
                          }
LABEL_373:
                          if (v110) {
                            goto LABEL_374;
                          }
LABEL_375:
                          v99 += 24;
                          continue;
                        }
                        BOOL v110 = 0;
                        BOOL v120 = *(void *)v99 == 0x746E6174736E6F63 && *(void *)(v99 + 5) == 0x626F6C625F746E61;
LABEL_345:
                        if (v120) {
                          BOOL v109 = 1;
                        }
LABEL_371:
                        uint64_t v111 = v408;
                        goto LABEL_372;
                      }
                      uint64_t v117 = (char *)v99;
                      if (v101 != 24)
                      {
                        BOOL v107 = v101 == 29;
                        uint64_t v111 = v408;
                        if (v107)
                        {
                          BOOL v110 = 0;
                          BOOL v113 = *(void *)v99 == 0x617A69746E617571
                              && *(void *)(v99 + 8) == 0x74756C5F6E6F6974
                              && *(void *)(v99 + 16) == 0x737468676965775FLL
                              && *(void *)(v99 + 21) == 0x626F6C625F737468;
                          goto LABEL_355;
                        }
LABEL_372:
                        if (v109) {
                          goto LABEL_374;
                        }
                        goto LABEL_373;
                      }
                    }
                    break;
                  }
                  uint64_t v122 = *(void *)v117;
                  uint64_t v123 = *((void *)v117 + 1);
                  uint64_t v124 = *((void *)v117 + 2);
                  BOOL v110 = v122 == 0x617A69746E617571 && v123 == 0x6E61725F6E6F6974 && v124 == 0x626F6C625F736567;
                  goto LABEL_371;
                }
LABEL_996:
                if (v86 >= 0) {
                  long long v392 = buf;
                }
                else {
                  long long v392 = v401;
                }
                Espresso::throw_exception_selector<Espresso::io_error,char const*>("Invalid source layer %s", (uint64_t)v392);
              }
            }
            else
            {
              if (!v93) {
                goto LABEL_276;
              }
              unint64_t v97 = v89;
              while (*(unsigned __int8 *)v96 == *v97)
              {
                uint64_t v96 = (const void **)((char *)v96 + 1);
                ++v97;
                if (!--v93) {
                  goto LABEL_276;
                }
              }
            }
          }
          if (++v87 == v90) {
            goto LABEL_996;
          }
        }
      }
      if (!v78) {
        goto LABEL_831;
      }
      (*(void (**)(std::string *__return_ptr))(*(void *)v79 + 456))(&v426);
      (*(void (**)(std::string *__return_ptr, int8x8_t *))(*(void *)v79 + 552))(&v416, v79);
      (*(void (**)(std::string *__return_ptr, int8x8_t *))(*(void *)v79 + 440))(&v415, v79);
      (*(void (**)(long long *__return_ptr, int8x8_t *))(*(void *)v79 + 584))(&v452, v79);
      (*(void (**)(long long *__return_ptr, int8x8_t *))(*(void *)v79 + 600))(&v451, v79);
      (*(void (**)(long long *__return_ptr, int8x8_t *))(*(void *)v79 + 568))(&v450, v79);
      std::string::basic_string[abi:ne180100]<0>(buf, "W_f32_compressed_f16");
      uint64_t v80 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(void **)&v79[20], buf);
      if ((v484[7] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      std::string::basic_string[abi:ne180100]<0>(buf, "b_f32_compressed_f16");
      uint64_t v81 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(void **)&v79[20], buf);
      if ((v484[7] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      std::string::basic_string[abi:ne180100]<0>(buf, "b_f16");
      BOOL has_parameter_blob = Espresso::base_kernel::has_parameter_blob(v79, buf);
      BOOL v83 = has_parameter_blob;
      if ((v484[7] & 0x80000000) != 0)
      {
        operator delete(*(void **)buf);
        if (v83)
        {
LABEL_251:
          std::string::basic_string[abi:ne180100]<0>(buf, "b_f16");
          Espresso::base_kernel::get_parameter_blob<unsigned short,1>();
        }
      }
      else if (has_parameter_blob)
      {
        goto LABEL_251;
      }
      if (!v81)
      {
        (*(void (**)(uint8_t *__return_ptr, int8x8_t *))(*(void *)v79 + 448))(buf, v79);
        uint64_t v164 = *(void *)buf;
        if (*(void *)&buf[8]) {
          nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&buf[8]);
        }
        if (v164)
        {
          std::string::basic_string[abi:ne180100]<0>(buf, "blob_biases");
          (*(void (**)(long long *__return_ptr, int8x8_t *))(*(void *)v79 + 448))(&v449, v79);
          long long v447 = v449;
          long long v449 = 0uLL;
          size_t v165 = (std::__shared_weak_count *)*((void *)&v447 + 1);
          (*(void (**)(uint64_t *__return_ptr, int8x8_t *))(*(void *)v79 + 448))(&v445, v79);
          uint64_t v166 = *(void *)(v445 + 16);
          (*(void (**)(uint64_t *__return_ptr, int8x8_t *))(*(void *)v79 + 448))(&v443, v79);
          uint64_t v167 = *(int *)(v443 + 8);
          std::string::basic_string[abi:ne180100]<0>(v410, "b");
          uint64_t v448 = Espresso::dump_network_layers(std::shared_ptr<Espresso::net>,int,Espresso::dump_network_layers_blobs_state &,std::string const&,BOOL)::$_1::operator()((unsigned __int8 **)&__p, v52, &v447, v166, 4 * v167, v410);
          (*(void (**)(uint64_t, uint8_t *, uint64_t *))(*(void *)v408 + 200))(v408, buf, &v448);
          if ((v410[23] & 0x80000000) != 0) {
            operator delete(*(void **)v410);
          }
          if (v444) {
            nitro::nitro_function::nitro_function(v444);
          }
          if (v446) {
            nitro::nitro_function::nitro_function(v446);
          }
          if (v165) {
            nitro::nitro_function::nitro_function(v165);
          }
          if (*((void *)&v449 + 1)) {
            nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v449 + 1));
          }
          if ((v484[7] & 0x80000000) != 0) {
            operator delete(*(void **)buf);
          }
        }
      }
      uint64_t v127 = v408;
      if (v415.__r_.__value_.__r.__words[0]) {
        break;
      }
LABEL_393:
      if (!v426.__r_.__value_.__r.__words[0] || (void)v450) {
        goto LABEL_407;
      }
      std::string::size_type v133 = v416.__r_.__value_.__r.__words[0];
      if (!v416.__r_.__value_.__r.__words[0] && !v80)
      {
        std::string::basic_string[abi:ne180100]<0>(buf, "blob_weights");
        long long v134 = *(_OWORD *)&v426.__r_.__value_.__l.__data_;
        long long v441 = *(_OWORD *)&v426.__r_.__value_.__l.__data_;
        if (v426.__r_.__value_.__l.__size_) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v426.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
        }
        uint64_t v135 = 0;
        uint64_t v136 = *(void *)(v134 + 24);
        uint64_t v137 = *(int *)(v134 + 8);
        do
        {
          v137 *= *(int *)(v134 + 12 + v135);
          v135 += 4;
        }
        while (v135 != 12);
        std::string::basic_string[abi:ne180100]<0>(v410, "W");
        uint64_t v138 = Espresso::dump_network_layers(std::shared_ptr<Espresso::net>,int,Espresso::dump_network_layers_blobs_state &,std::string const&,BOOL)::$_1::operator()((unsigned __int8 **)&__p, v52, &v441, v136, 4 * v137, v410);
        uint64_t v127 = v408;
        *(void *)&long long v449 = v138;
        (*(void (**)(uint64_t, uint8_t *, long long *))(*(void *)v408 + 200))(v408, buf, &v449);
        if ((v410[23] & 0x80000000) != 0) {
          operator delete(*(void **)v410);
        }
        if (*((void *)&v134 + 1)) {
          nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v134 + 1));
        }
        if ((v484[7] & 0x80000000) != 0) {
          operator delete(*(void **)buf);
        }
LABEL_407:
        std::string::size_type v133 = v416.__r_.__value_.__r.__words[0];
      }
      if (!v133) {
        goto LABEL_418;
      }
      std::string::basic_string[abi:ne180100]<0>(buf, "blob_weights_f16");
      long long v139 = *(_OWORD *)&v416.__r_.__value_.__l.__data_;
      long long v440 = *(_OWORD *)&v416.__r_.__value_.__l.__data_;
      if (v416.__r_.__value_.__l.__size_) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v416.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v140 = 0;
      uint64_t v141 = *(void *)(v139 + 24);
      uint64_t v142 = *(int *)(v139 + 8);
      do
      {
        v142 *= *(int *)(v139 + 12 + v140);
        v140 += 4;
      }
      while (v140 != 12);
      std::string::basic_string[abi:ne180100]<0>(v410, "W_f16");
      uint64_t v143 = Espresso::dump_network_layers(std::shared_ptr<Espresso::net>,int,Espresso::dump_network_layers_blobs_state &,std::string const&,BOOL)::$_1::operator()((unsigned __int8 **)&__p, v52, &v440, v141, 2 * v142, v410);
      uint64_t v127 = v408;
      *(void *)&long long v449 = v143;
      (*(void (**)(uint64_t, uint8_t *, long long *))(*(void *)v408 + 200))(v408, buf, &v449);
      if ((v410[23] & 0x80000000) == 0)
      {
        if (!*((void *)&v139 + 1)) {
          goto LABEL_416;
        }
LABEL_415:
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v139 + 1));
        goto LABEL_416;
      }
      operator delete(*(void **)v410);
      if (*((void *)&v139 + 1)) {
        goto LABEL_415;
      }
LABEL_416:
      if ((v484[7] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
LABEL_418:
      if (!(void)v450) {
        goto LABEL_428;
      }
      std::string::basic_string[abi:ne180100]<0>(buf, "quantization_lut_weights_blob");
      long long v144 = v450;
      long long v439 = v450;
      if (*((void *)&v450 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v450 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v145 = 0;
      uint64_t v146 = *(void *)(v144 + 24);
      uint64_t v147 = *(int *)(v144 + 8);
      do
      {
        v147 *= *(int *)(v144 + 12 + v145);
        v145 += 4;
      }
      while (v145 != 12);
      std::string::basic_string[abi:ne180100]<0>(v410, "");
      *(void *)&long long v449 = Espresso::dump_network_layers(std::shared_ptr<Espresso::net>,int,Espresso::dump_network_layers_blobs_state &,std::string const&,BOOL)::$_1::operator()((unsigned __int8 **)&__p, v52, &v439, v146, v147, v410);
      (*(void (**)(uint64_t, uint8_t *, long long *))(*(void *)v127 + 200))(v127, buf, &v449);
      if ((v410[23] & 0x80000000) == 0)
      {
        if (!*((void *)&v144 + 1)) {
          goto LABEL_426;
        }
LABEL_425:
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v144 + 1));
        goto LABEL_426;
      }
      operator delete(*(void **)v410);
      if (*((void *)&v144 + 1)) {
        goto LABEL_425;
      }
LABEL_426:
      if ((v484[7] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
LABEL_428:
      if (!(void)v452) {
        goto LABEL_436;
      }
      std::string::basic_string[abi:ne180100]<0>(buf, "quantization_lut_blob");
      long long v148 = v452;
      long long v438 = v452;
      if (*((void *)&v452 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v452 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v149 = *(void *)(v148 + 16);
      uint64_t v150 = *(int *)(v148 + 8);
      std::string::basic_string[abi:ne180100]<0>(v410, "");
      uint64_t v151 = Espresso::dump_network_layers(std::shared_ptr<Espresso::net>,int,Espresso::dump_network_layers_blobs_state &,std::string const&,BOOL)::$_1::operator()((unsigned __int8 **)&__p, v52, &v438, v149, 4 * v150, v410);
      uint64_t v127 = v408;
      *(void *)&long long v449 = v151;
      (*(void (**)(uint64_t, uint8_t *, long long *))(*(void *)v408 + 200))(v408, buf, &v449);
      if ((v410[23] & 0x80000000) == 0)
      {
        if (!*((void *)&v148 + 1)) {
          goto LABEL_434;
        }
LABEL_433:
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v148 + 1));
        goto LABEL_434;
      }
      operator delete(*(void **)v410);
      if (*((void *)&v148 + 1)) {
        goto LABEL_433;
      }
LABEL_434:
      if ((v484[7] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
LABEL_436:
      if (!(void)v451) {
        goto LABEL_444;
      }
      std::string::basic_string[abi:ne180100]<0>(buf, "quantization_ranges_blob");
      long long v152 = v451;
      long long v437 = v451;
      if (*((void *)&v451 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v451 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v153 = *(void *)(v152 + 16);
      uint64_t v154 = *(int *)(v152 + 8);
      std::string::basic_string[abi:ne180100]<0>(v410, "");
      uint64_t v155 = Espresso::dump_network_layers(std::shared_ptr<Espresso::net>,int,Espresso::dump_network_layers_blobs_state &,std::string const&,BOOL)::$_1::operator()((unsigned __int8 **)&__p, v52, &v437, v153, 4 * v154, v410);
      uint64_t v127 = v408;
      *(void *)&long long v449 = v155;
      (*(void (**)(uint64_t, uint8_t *, long long *))(*(void *)v408 + 200))(v408, buf, &v449);
      if ((v410[23] & 0x80000000) == 0)
      {
        if (!*((void *)&v152 + 1)) {
          goto LABEL_442;
        }
LABEL_441:
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v152 + 1));
        goto LABEL_442;
      }
      operator delete(*(void **)v410);
      if (*((void *)&v152 + 1)) {
        goto LABEL_441;
      }
LABEL_442:
      if ((v484[7] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
LABEL_444:
      if (*((void *)&v450 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v450 + 1));
      }
      if (*((void *)&v451 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v451 + 1));
      }
      if (*((void *)&v452 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v452 + 1));
      }
      if (v415.__r_.__value_.__l.__size_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v415.__r_.__value_.__l.__size_);
      }
      if (v416.__r_.__value_.__l.__size_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v416.__r_.__value_.__l.__size_);
      }
      if (v426.__r_.__value_.__l.__size_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v426.__r_.__value_.__l.__size_);
      }
      uint64_t v78 = (const void *)*v52;
      if (!*v52) {
        goto LABEL_707;
      }
LABEL_457:
      {
        std::string::basic_string[abi:ne180100]<0>(buf, "b_f16");
        BOOL v157 = Espresso::base_kernel::has_parameter_blob(v156, buf);
        BOOL v158 = v157;
        if ((v484[7] & 0x80000000) != 0)
        {
          operator delete(*(void **)buf);
          if (v158)
          {
LABEL_460:
            std::string::basic_string[abi:ne180100]<0>(buf, "b_f16");
            Espresso::base_kernel::get_parameter_blob<unsigned short,1>();
          }
        }
        else if (v157)
        {
          goto LABEL_460;
        }
        (*(void (**)(uint8_t *__return_ptr, int8x8_t *))(*(void *)v156 + 408))(buf, v156);
        uint64_t v159 = *(void *)buf;
        if (*(void *)&buf[8]) {
          nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&buf[8]);
        }
        if (v159)
        {
          std::string::basic_string[abi:ne180100]<0>(buf, "blob_biases");
          (*(void (**)(std::string *__return_ptr, int8x8_t *))(*(void *)v156 + 408))(&v426, v156);
          long long v436 = *(_OWORD *)&v426.__r_.__value_.__l.__data_;
          *(_OWORD *)&v426.__r_.__value_.__l.__data_ = 0uLL;
          uint64_t v160 = (std::__shared_weak_count *)*((void *)&v436 + 1);
          (*(void (**)(std::string *__return_ptr, int8x8_t *))(*(void *)v156 + 408))(&v416, v156);
          uint64_t v161 = *(void *)(v416.__r_.__value_.__r.__words[0] + 16);
          (*(void (**)(std::string *__return_ptr, int8x8_t *))(*(void *)v156 + 408))(&v415, v156);
          uint64_t v162 = *(int *)(v415.__r_.__value_.__r.__words[0] + 8);
          std::string::basic_string[abi:ne180100]<0>(v410, "b");
          uint64_t v163 = Espresso::dump_network_layers(std::shared_ptr<Espresso::net>,int,Espresso::dump_network_layers_blobs_state &,std::string const&,BOOL)::$_1::operator()((unsigned __int8 **)&__p, v52, &v436, v161, 4 * v162, v410);
          uint64_t v127 = v408;
          *(void *)&long long v452 = v163;
          (*(void (**)(uint64_t, uint8_t *, long long *))(*(void *)v408 + 200))(v408, buf, &v452);
          if ((v410[23] & 0x80000000) != 0) {
            operator delete(*(void **)v410);
          }
          if (v415.__r_.__value_.__l.__size_) {
            nitro::nitro_function::nitro_function((std::__shared_weak_count *)v415.__r_.__value_.__l.__size_);
          }
          if (v416.__r_.__value_.__l.__size_) {
            nitro::nitro_function::nitro_function((std::__shared_weak_count *)v416.__r_.__value_.__l.__size_);
          }
          if (v160) {
            nitro::nitro_function::nitro_function(v160);
          }
          if (v426.__r_.__value_.__l.__size_) {
            nitro::nitro_function::nitro_function((std::__shared_weak_count *)v426.__r_.__value_.__l.__size_);
          }
          if ((v484[7] & 0x80000000) != 0) {
            operator delete(*(void **)buf);
          }
        }
        else
        {
          uint64_t v127 = v408;
        }
        (*(void (**)(std::string *__return_ptr, int8x8_t *))(*(void *)v156 + 416))(&v426, v156);
        (*(void (**)(std::string *__return_ptr, int8x8_t *))(*(void *)v156 + 472))(&v416, v156);
        if (*(void *)&v156[64] || *(void *)&v156[66])
        {
          if (v426.__r_.__value_.__r.__words[0])
          {
            std::string::basic_string[abi:ne180100]<0>(buf, "blob_weights_t");
            long long v168 = *(_OWORD *)&v426.__r_.__value_.__l.__data_;
            long long v435 = *(_OWORD *)&v426.__r_.__value_.__l.__data_;
            if (v426.__r_.__value_.__l.__size_) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v426.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
            }
            uint64_t v169 = *(void *)(v168 + 16);
            int v170 = *(_DWORD *)(v168 + 8);
            int v171 = *(_DWORD *)(v168 + 12);
            std::string::basic_string[abi:ne180100]<0>(v410, "w_f32_t");
            uint64_t v172 = Espresso::dump_network_layers(std::shared_ptr<Espresso::net>,int,Espresso::dump_network_layers_blobs_state &,std::string const&,BOOL)::$_1::operator()((unsigned __int8 **)&__p, v52, &v435, v169, 4 * v170 * (uint64_t)v171, v410);
            uint64_t v127 = v408;
            v415.__r_.__value_.__r.__words[0] = v172;
            (*(void (**)(uint64_t, uint8_t *, std::string *))(*(void *)v408 + 200))(v408, buf, &v415);
            if ((v410[23] & 0x80000000) != 0) {
              operator delete(*(void **)v410);
            }
            if (*((void *)&v168 + 1)) {
              nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v168 + 1));
            }
            if ((v484[7] & 0x80000000) != 0) {
              operator delete(*(void **)buf);
            }
          }
          if (v416.__r_.__value_.__r.__words[0])
          {
            std::string::basic_string[abi:ne180100]<0>(buf, "blob_weights_f16_t");
            std::string::size_type size = (std::__shared_weak_count *)v416.__r_.__value_.__l.__size_;
            std::string::size_type v173 = v416.__r_.__value_.__r.__words[0];
            long long v434 = *(_OWORD *)&v416.__r_.__value_.__l.__data_;
            if (v416.__r_.__value_.__l.__size_) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v416.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
            }
            uint64_t v175 = *(void *)(v173 + 16);
            int v176 = *(_DWORD *)(v173 + 8);
            int v177 = *(_DWORD *)(v173 + 12);
            std::string::basic_string[abi:ne180100]<0>(v410, "w_f16_t");
            uint64_t v178 = Espresso::dump_network_layers(std::shared_ptr<Espresso::net>,int,Espresso::dump_network_layers_blobs_state &,std::string const&,BOOL)::$_1::operator()((unsigned __int8 **)&__p, v52, &v434, v175, 2 * v176 * (uint64_t)v177, v410);
            uint64_t v127 = v408;
            v415.__r_.__value_.__r.__words[0] = v178;
            (*(void (**)(uint64_t, uint8_t *, std::string *))(*(void *)v408 + 200))(v408, buf, &v415);
            goto LABEL_518;
          }
LABEL_523:
          if (v416.__r_.__value_.__l.__size_) {
            nitro::nitro_function::nitro_function((std::__shared_weak_count *)v416.__r_.__value_.__l.__size_);
          }
          if (v426.__r_.__value_.__l.__size_) {
            nitro::nitro_function::nitro_function((std::__shared_weak_count *)v426.__r_.__value_.__l.__size_);
          }
          uint64_t v78 = (const void *)*v52;
          if (!*v52) {
            goto LABEL_707;
          }
          goto LABEL_528;
        }
        if (v426.__r_.__value_.__r.__words[0])
        {
          std::string::basic_string[abi:ne180100]<0>(buf, "blob_weights");
          long long v209 = *(_OWORD *)&v426.__r_.__value_.__l.__data_;
          long long v433 = *(_OWORD *)&v426.__r_.__value_.__l.__data_;
          if (v426.__r_.__value_.__l.__size_) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v426.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
          }
          uint64_t v210 = *(void *)(v209 + 16);
          int v211 = *(_DWORD *)(v209 + 8);
          int v212 = *(_DWORD *)(v209 + 12);
          std::string::basic_string[abi:ne180100]<0>(v410, "W");
          uint64_t v213 = Espresso::dump_network_layers(std::shared_ptr<Espresso::net>,int,Espresso::dump_network_layers_blobs_state &,std::string const&,BOOL)::$_1::operator()((unsigned __int8 **)&__p, v52, &v433, v210, 4 * v211 * (uint64_t)v212, v410);
          uint64_t v127 = v408;
          v415.__r_.__value_.__r.__words[0] = v213;
          (*(void (**)(uint64_t, uint8_t *, std::string *))(*(void *)v408 + 200))(v408, buf, &v415);
          if ((v410[23] & 0x80000000) != 0) {
            operator delete(*(void **)v410);
          }
          if (*((void *)&v209 + 1)) {
            nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v209 + 1));
          }
          if ((v484[7] & 0x80000000) != 0) {
            operator delete(*(void **)buf);
          }
        }
        if (!v416.__r_.__value_.__r.__words[0]) {
          goto LABEL_523;
        }
        std::string::basic_string[abi:ne180100]<0>(buf, "blob_weights_f16");
        std::string::size_type size = (std::__shared_weak_count *)v416.__r_.__value_.__l.__size_;
        std::string::size_type v214 = v416.__r_.__value_.__r.__words[0];
        long long v432 = *(_OWORD *)&v416.__r_.__value_.__l.__data_;
        if (v416.__r_.__value_.__l.__size_) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v416.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
        }
        uint64_t v215 = *(void *)(v214 + 16);
        int v216 = *(_DWORD *)(v214 + 8);
        int v217 = *(_DWORD *)(v214 + 12);
        std::string::basic_string[abi:ne180100]<0>(v410, "W_f16");
        uint64_t v218 = Espresso::dump_network_layers(std::shared_ptr<Espresso::net>,int,Espresso::dump_network_layers_blobs_state &,std::string const&,BOOL)::$_1::operator()((unsigned __int8 **)&__p, v52, &v432, v215, 2 * v216 * (uint64_t)v217, v410);
        uint64_t v127 = v408;
        v415.__r_.__value_.__r.__words[0] = v218;
        (*(void (**)(uint64_t, uint8_t *, std::string *))(*(void *)v408 + 200))(v408, buf, &v415);
LABEL_518:
        if ((v410[23] & 0x80000000) != 0)
        {
          operator delete(*(void **)v410);
          if (size) {
LABEL_520:
          }
            nitro::nitro_function::nitro_function(size);
        }
        else if (size)
        {
          goto LABEL_520;
        }
        if ((v484[7] & 0x80000000) != 0) {
          operator delete(*(void **)buf);
        }
        goto LABEL_523;
      }
LABEL_528:
      {
        std::string::basic_string[abi:ne180100]<0>(buf, "b_f16");
        BOOL v180 = Espresso::base_kernel::has_parameter_blob(v179, buf);
        BOOL v181 = v180;
        if ((v484[7] & 0x80000000) != 0)
        {
          operator delete(*(void **)buf);
          if (v181)
          {
LABEL_531:
            std::string::basic_string[abi:ne180100]<0>(buf, "b_f16");
            Espresso::base_kernel::get_parameter_blob<unsigned short,1>();
          }
        }
        else if (v180)
        {
          goto LABEL_531;
        }
        (*(void (**)(uint8_t *__return_ptr, int8x8_t *))(*(void *)v179 + 408))(buf, v179);
        uint64_t v182 = *(void *)buf;
        if (*(void *)&buf[8]) {
          nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&buf[8]);
        }
        if (v182)
        {
          std::string::basic_string[abi:ne180100]<0>(buf, "blob_biases");
          (*(void (**)(std::string *__return_ptr, int8x8_t *))(*(void *)v179 + 408))(&v426, v179);
          long long v431 = *(_OWORD *)&v426.__r_.__value_.__l.__data_;
          *(_OWORD *)&v426.__r_.__value_.__l.__data_ = 0uLL;
          size_t v183 = (std::__shared_weak_count *)*((void *)&v431 + 1);
          (*(void (**)(std::string *__return_ptr, int8x8_t *))(*(void *)v179 + 408))(&v416, v179);
          uint64_t v184 = *(void *)(v416.__r_.__value_.__r.__words[0] + 16);
          (*(void (**)(std::string *__return_ptr, int8x8_t *))(*(void *)v179 + 408))(&v415, v179);
          uint64_t v185 = *(int *)(v415.__r_.__value_.__r.__words[0] + 8);
          std::string::basic_string[abi:ne180100]<0>(v410, "b");
          *(void *)&long long v452 = Espresso::dump_network_layers(std::shared_ptr<Espresso::net>,int,Espresso::dump_network_layers_blobs_state &,std::string const&,BOOL)::$_1::operator()((unsigned __int8 **)&__p, v52, &v431, v184, 4 * v185, v410);
          (*(void (**)(uint64_t, uint8_t *, long long *))(*(void *)v408 + 200))(v408, buf, &v452);
          if ((v410[23] & 0x80000000) != 0) {
            operator delete(*(void **)v410);
          }
          if (v415.__r_.__value_.__l.__size_) {
            nitro::nitro_function::nitro_function((std::__shared_weak_count *)v415.__r_.__value_.__l.__size_);
          }
          if (v416.__r_.__value_.__l.__size_) {
            nitro::nitro_function::nitro_function((std::__shared_weak_count *)v416.__r_.__value_.__l.__size_);
          }
          if (v183) {
            nitro::nitro_function::nitro_function(v183);
          }
          if (v426.__r_.__value_.__l.__size_) {
            nitro::nitro_function::nitro_function((std::__shared_weak_count *)v426.__r_.__value_.__l.__size_);
          }
          if ((v484[7] & 0x80000000) != 0) {
            operator delete(*(void **)buf);
          }
        }
        std::string::basic_string[abi:ne180100]<0>(buf, "W_f16");
        BOOL v186 = Espresso::base_kernel::has_parameter_blob(v179, buf);
        BOOL v187 = v186;
        if ((v484[7] & 0x80000000) != 0)
        {
          operator delete(*(void **)buf);
          if (v187)
          {
LABEL_550:
            std::string::basic_string[abi:ne180100]<0>(buf, "W_f16");
            Espresso::base_kernel::get_parameter_blob<unsigned short,5>();
          }
        }
        else if (v186)
        {
          goto LABEL_550;
        }
        (*(void (**)(uint8_t *__return_ptr, int8x8_t *))(*(void *)v179 + 416))(buf, v179);
        uint64_t v188 = *(void *)buf;
        if (*(void *)&buf[8]) {
          nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&buf[8]);
        }
        if (v188)
        {
          std::string::basic_string[abi:ne180100]<0>(buf, "blob_weights");
          (*(void (**)(std::string *__return_ptr, int8x8_t *))(*(void *)v179 + 416))(&v426, v179);
          long long v430 = *(_OWORD *)&v426.__r_.__value_.__l.__data_;
          *(_OWORD *)&v426.__r_.__value_.__l.__data_ = 0uLL;
          uint64_t v189 = (std::__shared_weak_count *)*((void *)&v430 + 1);
          (*(void (**)(std::string *__return_ptr, int8x8_t *))(*(void *)v179 + 416))(&v416, v179);
          uint64_t v190 = *(void *)(v416.__r_.__value_.__r.__words[0] + 32);
          (*(void (**)(std::string *__return_ptr, int8x8_t *))(*(void *)v179 + 416))(&v415, v179);
          uint64_t v191 = 0;
          uint64_t v192 = *(int *)(v415.__r_.__value_.__r.__words[0] + 8);
          do
          {
            v192 *= *(int *)(v415.__r_.__value_.__r.__words[0] + 12 + v191);
            v191 += 4;
          }
          while (v191 != 16);
          std::string::basic_string[abi:ne180100]<0>(v410, "W");
          *(void *)&long long v452 = Espresso::dump_network_layers(std::shared_ptr<Espresso::net>,int,Espresso::dump_network_layers_blobs_state &,std::string const&,BOOL)::$_1::operator()((unsigned __int8 **)&__p, v52, &v430, v190, 4 * v192, v410);
          (*(void (**)(uint64_t, uint8_t *, long long *))(*(void *)v408 + 200))(v408, buf, &v452);
          if ((v410[23] & 0x80000000) != 0) {
            operator delete(*(void **)v410);
          }
          if (v415.__r_.__value_.__l.__size_) {
            nitro::nitro_function::nitro_function((std::__shared_weak_count *)v415.__r_.__value_.__l.__size_);
          }
          if (v416.__r_.__value_.__l.__size_) {
            nitro::nitro_function::nitro_function((std::__shared_weak_count *)v416.__r_.__value_.__l.__size_);
          }
          if (v189) {
            nitro::nitro_function::nitro_function(v189);
          }
          if (v426.__r_.__value_.__l.__size_) {
            nitro::nitro_function::nitro_function((std::__shared_weak_count *)v426.__r_.__value_.__l.__size_);
          }
          if ((v484[7] & 0x80000000) != 0) {
            operator delete(*(void **)buf);
          }
        }
      }
      int v193 = (const void *)*v52;
      uint64_t v127 = v408;
      if (*v52)
      {
        {
          std::string::basic_string[abi:ne180100]<0>(buf, "batchnorm_params_f16");
          BOOL v195 = Espresso::base_kernel::has_parameter_blob(v194, buf);
          BOOL v196 = v195;
          if ((v484[7] & 0x80000000) != 0)
          {
            operator delete(*(void **)buf);
            if (v196)
            {
LABEL_573:
              std::string::basic_string[abi:ne180100]<0>(buf, "batchnorm_params_f16");
              Espresso::base_kernel::get_parameter_blob<unsigned short,1>();
            }
          }
          else if (v195)
          {
            goto LABEL_573;
          }
          (*(void (**)(uint8_t *__return_ptr, int8x8_t *))(*(void *)v194 + 408))(buf, v194);
          uint64_t v197 = *(void *)buf;
          if (*(void *)&buf[8]) {
            nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&buf[8]);
          }
          if (v197)
          {
            std::string::basic_string[abi:ne180100]<0>(buf, "blob_batchnorm_params");
            (*(void (**)(std::string *__return_ptr, int8x8_t *))(*(void *)v194 + 408))(&v426, v194);
            long long v429 = *(_OWORD *)&v426.__r_.__value_.__l.__data_;
            *(_OWORD *)&v426.__r_.__value_.__l.__data_ = 0uLL;
            int v198 = (std::__shared_weak_count *)*((void *)&v429 + 1);
            (*(void (**)(std::string *__return_ptr, int8x8_t *))(*(void *)v194 + 408))(&v416, v194);
            uint64_t v199 = *(void *)(v416.__r_.__value_.__r.__words[0] + 16);
            (*(void (**)(std::string *__return_ptr, int8x8_t *))(*(void *)v194 + 408))(&v415, v194);
            uint64_t v200 = *(int *)(v415.__r_.__value_.__r.__words[0] + 8);
            std::string::basic_string[abi:ne180100]<0>(v410, "");
            *(void *)&long long v452 = Espresso::dump_network_layers(std::shared_ptr<Espresso::net>,int,Espresso::dump_network_layers_blobs_state &,std::string const&,BOOL)::$_1::operator()((unsigned __int8 **)&__p, v52, &v429, v199, 4 * v200, v410);
            (*(void (**)(uint64_t, uint8_t *, long long *))(*(void *)v408 + 200))(v408, buf, &v452);
            if ((v410[23] & 0x80000000) != 0) {
              operator delete(*(void **)v410);
            }
            if (v415.__r_.__value_.__l.__size_) {
              nitro::nitro_function::nitro_function((std::__shared_weak_count *)v415.__r_.__value_.__l.__size_);
            }
            if (v416.__r_.__value_.__l.__size_) {
              nitro::nitro_function::nitro_function((std::__shared_weak_count *)v416.__r_.__value_.__l.__size_);
            }
            if (v198) {
              nitro::nitro_function::nitro_function(v198);
            }
            if (v426.__r_.__value_.__l.__size_) {
              nitro::nitro_function::nitro_function((std::__shared_weak_count *)v426.__r_.__value_.__l.__size_);
            }
            if ((v484[7] & 0x80000000) != 0) {
              operator delete(*(void **)buf);
            }
          }
        }
        uint64_t v201 = (const void *)*v52;
        uint64_t v127 = v408;
        if (*v52)
        {
          Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v426, v202 + 43);
          std::string::size_type v203 = v426.__r_.__value_.__r.__words[0];
          uint64_t v127 = v408;
          if (v426.__r_.__value_.__r.__words[0])
          {
            std::string::basic_string[abi:ne180100]<0>(buf, "constant_blob");
            unint64_t v204 = (std::__shared_weak_count *)v426.__r_.__value_.__l.__size_;
            *(void *)&long long v428 = v203;
            *((void *)&v428 + 1) = v426.__r_.__value_.__l.__size_;
            if (v426.__r_.__value_.__l.__size_) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v426.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
            }
            uint64_t v205 = 0;
            uint64_t v206 = *(void *)(v203 + 24);
            uint64_t v207 = *(int *)(v203 + 8);
            do
            {
              v207 *= *(int *)(v203 + 12 + v205);
              v205 += 4;
            }
            while (v205 != 12);
            std::string::basic_string[abi:ne180100]<0>(v410, "constant_blob");
            uint64_t v208 = Espresso::dump_network_layers(std::shared_ptr<Espresso::net>,int,Espresso::dump_network_layers_blobs_state &,std::string const&,BOOL)::$_1::operator()((unsigned __int8 **)&__p, v52, &v428, v206, 4 * v207, v410);
            uint64_t v127 = v408;
            v416.__r_.__value_.__r.__words[0] = v208;
            (*(void (**)(uint64_t, uint8_t *, std::string *))(*(void *)v408 + 200))(v408, buf, &v416);
            if ((v410[23] & 0x80000000) != 0) {
              operator delete(*(void **)v410);
            }
            if (v204) {
              nitro::nitro_function::nitro_function(v204);
            }
            if ((v484[7] & 0x80000000) != 0) {
              operator delete(*(void **)buf);
            }
          }
          else
          {
            unint64_t v204 = (std::__shared_weak_count *)v426.__r_.__value_.__l.__size_;
          }
          if (v204) {
            nitro::nitro_function::nitro_function(v204);
          }
          uint64_t v201 = (const void *)*v52;
          if (*v52)
          {
LABEL_1007:
            std::string v220 = Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::shared();
            Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::make(&v426, (uint64_t)v220, v475);
            uint64_t v221 = (void *)v219[35];
            uint64_t v222 = v219 + 36;
            std::string v223 = a4;
            uint64_t v127 = v408;
            if (v221 != v219 + 36)
            {
              uint64_t v224 = v426.__r_.__value_.__r.__words[0];
              do
              {
                Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(v410, (void *)v221[7], (std::__shared_weak_count *)v221[8]);
                std::string v225 = *v223;
                uint64_t v226 = v223[1];
                uint64_t v227 = v223;
                uint64_t v228 = ((char *)v226 - (unsigned char *)*v223) >> 3;
                v416.__r_.__value_.__r.__words[0] = v228;
                uint64_t v229 = *(void *)(*(void *)v410 + 24);
                unint64_t v230 = (unint64_t)v227[2];
                if ((unint64_t)v226 >= v230)
                {
                  if ((unint64_t)(v228 + 1) >> 61) {
                    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                  }
                  uint64_t v232 = v230 - (void)v225;
                  uint64_t v233 = v232 >> 2;
                  if (v232 >> 2 <= (unint64_t)(v228 + 1)) {
                    uint64_t v233 = v228 + 1;
                  }
                  if ((unint64_t)v232 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v234 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v234 = v233;
                  }
                  if (v234) {
                    unint64_t v234 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v234);
                  }
                  else {
                    uint64_t v235 = 0;
                  }
                  long long v236 = (void *)(v234 + 8 * v228);
                  void *v236 = v229;
                  uint64_t v231 = v236 + 1;
                  std::string v238 = (char *)*a4;
                  uint64_t v237 = (char *)a4[1];
                  if (v237 != *a4)
                  {
                    do
                    {
                      uint64_t v239 = *((void *)v237 - 1);
                      v237 -= 8;
                      *--long long v236 = v239;
                    }
                    while (v237 != v238);
                    uint64_t v237 = (char *)*a4;
                  }
                  *a4 = v236;
                  a4[1] = v231;
                  a4[2] = (void *)(v234 + 8 * v235);
                  if (v237) {
                    operator delete(v237);
                  }
                }
                else
                {
                  *uint64_t v226 = v229;
                  uint64_t v231 = v226 + 1;
                }
                uint64_t v240 = 0;
                a4[1] = v231;
                uint64_t v241 = *(int *)(*(void *)v410 + 8);
                do
                {
                  v241 *= *(int *)(*(void *)v410 + 12 + v240);
                  v240 += 4;
                }
                while (v240 != 12);
                uint64_t v242 = 4 * v241;
                uint64_t v244 = (uint64_t *)a4[4];
                unint64_t v243 = (unint64_t)a4[5];
                if ((unint64_t)v244 >= v243)
                {
                  long long v246 = (uint64_t *)*v398;
                  uint64_t v247 = ((char *)v244 - (unsigned char *)*v398) >> 3;
                  unint64_t v248 = v247 + 1;
                  if ((unint64_t)(v247 + 1) >> 61) {
                    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                  }
                  uint64_t v249 = v243 - (void)v246;
                  if (v249 >> 2 > v248) {
                    unint64_t v248 = v249 >> 2;
                  }
                  BOOL v250 = (unint64_t)v249 >= 0x7FFFFFFFFFFFFFF8;
                  unint64_t v251 = 0x1FFFFFFFFFFFFFFFLL;
                  if (!v250) {
                    unint64_t v251 = v248;
                  }
                  if (v251)
                  {
                    unint64_t v251 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v251);
                    long long v246 = (uint64_t *)a4[3];
                    uint64_t v244 = (uint64_t *)a4[4];
                  }
                  else
                  {
                    uint64_t v252 = 0;
                  }
                  unint64_t v253 = (uint64_t *)(v251 + 8 * v247);
                  *unint64_t v253 = v242;
                  long long v245 = v253 + 1;
                  if (v244 == v246)
                  {
                    uint64_t v127 = v408;
                  }
                  else
                  {
                    uint64_t v127 = v408;
                    do
                    {
                      uint64_t v254 = *--v244;
                      *--unint64_t v253 = v254;
                    }
                    while (v244 != v246);
                  }
                  a4[3] = v253;
                  a4[4] = v245;
                  a4[5] = (void *)(v251 + 8 * v252);
                  if (v246) {
                    operator delete(v246);
                  }
                }
                else
                {
                  *uint64_t v244 = v242;
                  long long v245 = v244 + 1;
                  uint64_t v127 = v408;
                }
                a4[4] = v245;
                Espresso::SerDes::generic_serdes_object::operator[](v224, (uint64_t)(v221 + 4), buf);
                (*(void (**)(void, unsigned char *, std::string *))(**(void **)buf + 192))(*(void *)buf, v484, &v416);
                std::string v223 = a4;
                if ((v484[23] & 0x80000000) != 0) {
                  operator delete(*(void **)v484);
                }
                if (*(void *)&buf[8]) {
                  nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&buf[8]);
                }
                if (*(void *)&v410[8]) {
                  nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&v410[8]);
                }
                uint8x8_t v255 = (void *)v221[1];
                if (v255)
                {
                  do
                  {
                    std::string v256 = v255;
                    uint8x8_t v255 = (void *)*v255;
                  }
                  while (v255);
                }
                else
                {
                  do
                  {
                    std::string v256 = (void *)v221[2];
                    BOOL v107 = *v256 == (void)v221;
                    uint64_t v221 = v256;
                  }
                  while (!v107);
                }
                uint64_t v221 = v256;
              }
              while (v256 != v222);
            }
            std::string::basic_string[abi:ne180100]<0>(v410, "weights");
            Espresso::SerDes::generic_serdes_object::operator[](v127, (uint64_t)v410, buf);
            (*(void (**)(void, unsigned char *, std::string *))(**(void **)buf + 240))(*(void *)buf, v484, &v426);
            if ((v484[23] & 0x80000000) != 0) {
              operator delete(*(void **)v484);
            }
            if (*(void *)&buf[8]) {
              nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&buf[8]);
            }
            if ((v410[23] & 0x80000000) != 0) {
              operator delete(*(void **)v410);
            }
            if (v426.__r_.__value_.__l.__size_) {
              nitro::nitro_function::nitro_function((std::__shared_weak_count *)v426.__r_.__value_.__l.__size_);
            }
            uint64_t v201 = (const void *)*v52;
            if (*v52)
            {
LABEL_1008:
              uint64_t v127 = v408;
              {
                unint64_t v258 = (long long *)v257[48];
                uint64_t v259 = (long long *)(v257 + 49);
                if (v258 != (long long *)(v257 + 49))
                {
                  while (1)
                  {
                    std::pair<std::string const,std::shared_ptr<Espresso::blob<float,4>>>::pair[abi:ne180100]((std::string *)buf, v258 + 2);
                    if (*(void *)&v484[8]) {
                      break;
                    }
LABEL_694:
                    if (*(void *)&v484[16]) {
                      nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&v484[16]);
                    }
                    if ((v484[7] & 0x80000000) != 0) {
                      operator delete(*(void **)buf);
                    }
                    unint64_t v265 = (long long *)*((void *)v258 + 1);
                    if (v265)
                    {
                      do
                      {
                        unint64_t v266 = v265;
                        unint64_t v265 = *(long long **)v265;
                      }
                      while (v265);
                    }
                    else
                    {
                      do
                      {
                        unint64_t v266 = (long long *)*((void *)v258 + 2);
                        BOOL v107 = *(void *)v266 == (void)v258;
                        unint64_t v258 = v266;
                      }
                      while (!v107);
                    }
                    unint64_t v258 = v266;
                    if (v266 == v259) {
                      goto LABEL_707;
                    }
                  }
                  if (v484[7] >= 0) {
                    uint64_t v260 = (char *)buf;
                  }
                  else {
                    uint64_t v260 = *(char **)buf;
                  }
                  std::string::basic_string[abi:ne180100]<0>(v410, v260);
                  uint64_t v261 = *(void *)&v484[8];
                  uint64_t v262 = *(std::__shared_weak_count **)&v484[16];
                  long long v427 = *(_OWORD *)&v484[8];
                  if (*(void *)&v484[16])
                  {
                    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&v484[16] + 8), 1uLL, memory_order_relaxed);
                    uint64_t v261 = *(void *)&v484[8];
                  }
                  uint64_t v263 = *(void *)(v261 + 16);
                  uint64_t v264 = *(int *)(v261 + 8);
                  std::string::basic_string[abi:ne180100]<0>(&v426, "");
                  v416.__r_.__value_.__r.__words[0] = Espresso::dump_network_layers(std::shared_ptr<Espresso::net>,int,Espresso::dump_network_layers_blobs_state &,std::string const&,BOOL)::$_1::operator()((unsigned __int8 **)&__p, v52, &v427, v263, v264, (unsigned __int8 *)&v426);
                  (*(void (**)(uint64_t, unsigned char *, std::string *))(*(void *)v408 + 200))(v408, v410, &v416);
                  if (SHIBYTE(v426.__r_.__value_.__r.__words[2]) < 0)
                  {
                    operator delete(v426.__r_.__value_.__l.__data_);
                    if (v262) {
LABEL_691:
                    }
                      nitro::nitro_function::nitro_function(v262);
                  }
                  else if (v262)
                  {
                    goto LABEL_691;
                  }
                  if ((v410[23] & 0x80000000) != 0) {
                    operator delete(*(void **)v410);
                  }
                  goto LABEL_694;
                }
              }
            }
          }
        }
      }
LABEL_707:
      *(_OWORD *)&v416.__r_.__value_.__l.__data_ = 0uLL;
      std::string::basic_string[abi:ne180100]<0>(buf, "weights");
      int v267 = (*(uint64_t (**)(uint64_t, uint8_t *))(*(void *)v127 + 24))(v127, buf);
      int v268 = v267;
      if ((v484[7] & 0x80000000) != 0)
      {
        operator delete(*(void **)buf);
        if (v268)
        {
LABEL_709:
          std::string::basic_string[abi:ne180100]<0>(buf, "weights");
          (*(void (**)(unsigned char *__return_ptr))(*(void *)v408 + 120))(v410);
          long long v269 = *(_OWORD *)v410;
          *(_OWORD *)v410 = 0uLL;
          uint8x8_t v270 = (std::__shared_weak_count *)v416.__r_.__value_.__l.__size_;
          *(_OWORD *)&v416.__r_.__value_.__l.__data_ = v269;
          if (v270)
          {
            nitro::nitro_function::nitro_function(v270);
            if (*(void *)&v410[8]) {
              nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&v410[8]);
            }
          }
          if ((v484[7] & 0x80000000) != 0) {
            operator delete(*(void **)buf);
          }
          goto LABEL_717;
        }
      }
      else if (v267)
      {
        goto LABEL_709;
      }
      long long v271 = Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::shared();
      Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::make(buf, (uint64_t)v271, v475);
      unint64_t v272 = (std::__shared_weak_count *)v416.__r_.__value_.__l.__size_;
      *(_OWORD *)&v416.__r_.__value_.__l.__data_ = *(_OWORD *)buf;
      if (v272) {
        nitro::nitro_function::nitro_function(v272);
      }
LABEL_717:
      std::string::size_type v273 = v416.__r_.__value_.__r.__words[0];
      std::string::size_type v274 = *(void *)(v407 + 64);
      std::string::size_type v275 = *(void *)(v407 + 72);
      v415.__r_.__value_.__r.__words[0] = v274;
      v415.__r_.__value_.__l.__size_ = v275;
      if (v275) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v275 + 8), 1uLL, memory_order_relaxed);
      }
      *(_OWORD *)std::string buf = 0u;
      *(_OWORD *)v484 = 0u;
      *(_DWORD *)&v484[16] = 1065353216;
      long long v276 = *(void **)(v274 + 152);
      std::string::size_type v277 = (void *)(v274 + 160);
      if (v276 != (void *)(v274 + 160))
      {
        do
        {
          (*(void (**)(std::string *__return_ptr))(*(void *)v415.__r_.__value_.__l.__data_ + 184))(&v426);
          std::string::size_type v278 = v426.__r_.__value_.__r.__words[0];
          long long v425 = *(_OWORD *)&v426.__r_.__value_.__l.__data_;
          if (v426.__r_.__value_.__l.__size_) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v426.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
          }
          uint64_t v279 = *(void *)(v278 + 16);
          uint64_t v280 = *(int *)(v278 + 8);
          std::string::basic_string[abi:ne180100]<0>(v410, "");
          *(void *)&long long v452 = Espresso::dump_network_layers(std::shared_ptr<Espresso::net>,int,Espresso::dump_network_layers_blobs_state &,std::string const&,BOOL)::$_1::operator()((unsigned __int8 **)&__p, (uint64_t *)&v415, &v425, v279, v280, v410);
          (*(void (**)(std::string::size_type, void *, long long *))(*(void *)v273 + 200))(v273, v276 + 4, &v452);
          if ((v410[23] & 0x80000000) != 0) {
            operator delete(*(void **)v410);
          }
          if (*((void *)&v425 + 1)) {
            nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v425 + 1));
          }
          std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)buf, (uint64_t)(v276 + 4), (uint64_t)(v276 + 4));
          if (v426.__r_.__value_.__l.__size_) {
            nitro::nitro_function::nitro_function((std::__shared_weak_count *)v426.__r_.__value_.__l.__size_);
          }
          v281 = (void *)v276[1];
          if (v281)
          {
            do
            {
              v282 = v281;
              v281 = (void *)*v281;
            }
            while (v281);
          }
          else
          {
            do
            {
              v282 = (void *)v276[2];
              BOOL v107 = *v282 == (void)v276;
              long long v276 = v282;
            }
            while (!v107);
          }
          long long v276 = v282;
        }
        while (v282 != v277);
      }
      long long v283 = (const void *)*v52;
      if (*v52)
      {
        {
          float v285 = (void *)v284[35];
          v286 = v284 + 36;
          if (v285 != v284 + 36)
          {
            do
            {
              if (!std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(buf, (uint64_t)(v285 + 4)))
              {
                Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v426, v285 + 7);
                std::string::size_type v287 = v426.__r_.__value_.__r.__words[0];
                if (v426.__r_.__value_.__r.__words[0])
                {
                  long long v424 = *(_OWORD *)&v426.__r_.__value_.__l.__data_;
                  if (v426.__r_.__value_.__l.__size_) {
                    atomic_fetch_add_explicit((atomic_ullong *volatile)(v426.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
                  }
                  uint64_t v288 = 0;
                  uint64_t v289 = *(void *)(v287 + 24);
                  uint64_t v290 = *(int *)(v287 + 8);
                  std::string::size_type v291 = v287 + 12;
                  do
                  {
                    v290 *= *(int *)(v291 + v288);
                    v288 += 4;
                  }
                  while (v288 != 12);
                  std::string::basic_string[abi:ne180100]<0>(v410, "");
                  *(void *)&long long v452 = Espresso::dump_network_layers(std::shared_ptr<Espresso::net>,int,Espresso::dump_network_layers_blobs_state &,std::string const&,BOOL)::$_1::operator()((unsigned __int8 **)&__p, v52, &v424, v289, 4 * v290, v410);
                  (*(void (**)(std::string::size_type, void *, long long *))(*(void *)v273 + 200))(v273, v285 + 4, &v452);
                  if ((v410[23] & 0x80000000) != 0) {
                    operator delete(*(void **)v410);
                  }
                  if (*((void *)&v424 + 1)) {
                    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v424 + 1));
                  }
                }
                if (v426.__r_.__value_.__l.__size_) {
                  nitro::nitro_function::nitro_function((std::__shared_weak_count *)v426.__r_.__value_.__l.__size_);
                }
              }
              long long v292 = (void *)v285[1];
              if (v292)
              {
                do
                {
                  int v293 = v292;
                  long long v292 = (void *)*v292;
                }
                while (v292);
              }
              else
              {
                do
                {
                  int v293 = (void *)v285[2];
                  BOOL v107 = *v293 == (void)v285;
                  float v285 = v293;
                }
                while (!v107);
              }
              float v285 = v293;
            }
            while (v293 != v286);
          }
          goto LABEL_821;
        }
        {
          if (v294[43])
          {
            std::string::basic_string[abi:ne180100]<0>(v410, "params_prelu");
            uint64_t v295 = v294[43];
            std::string v296 = (std::__shared_weak_count *)v294[44];
            *(void *)&long long v423 = v295;
            *((void *)&v423 + 1) = v296;
            if (v296)
            {
              atomic_fetch_add_explicit(&v296->__shared_owners_, 1uLL, memory_order_relaxed);
              uint64_t v295 = v294[43];
            }
            uint64_t v297 = *(void *)(v295 + 16);
            uint64_t v298 = *(int *)(v295 + 8);
            std::string::basic_string[abi:ne180100]<0>(&v426, "");
            *(void *)&long long v452 = Espresso::dump_network_layers(std::shared_ptr<Espresso::net>,int,Espresso::dump_network_layers_blobs_state &,std::string const&,BOOL)::$_1::operator()((unsigned __int8 **)&__p, v52, &v423, v297, 4 * v298, (unsigned __int8 *)&v426);
            (*(void (**)(std::string::size_type, unsigned char *, long long *))(*(void *)v273 + 200))(v273, v410, &v452);
            if (SHIBYTE(v426.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v426.__r_.__value_.__l.__data_);
            }
            if (v296) {
              nitro::nitro_function::nitro_function(v296);
            }
            if ((v410[23] & 0x80000000) != 0) {
              operator delete(*(void **)v410);
            }
          }
          if (v294[45])
          {
            std::string::basic_string[abi:ne180100]<0>(v410, "softplus_alphas");
            uint64_t v299 = v294[45];
            uint8x8_t v300 = (std::__shared_weak_count *)v294[46];
            *(void *)&long long v422 = v299;
            *((void *)&v422 + 1) = v300;
            if (v300)
            {
              atomic_fetch_add_explicit(&v300->__shared_owners_, 1uLL, memory_order_relaxed);
              uint64_t v299 = v294[45];
            }
            uint64_t v301 = *(void *)(v299 + 16);
            uint64_t v302 = *(int *)(v299 + 8);
            std::string::basic_string[abi:ne180100]<0>(&v426, "");
            *(void *)&long long v452 = Espresso::dump_network_layers(std::shared_ptr<Espresso::net>,int,Espresso::dump_network_layers_blobs_state &,std::string const&,BOOL)::$_1::operator()((unsigned __int8 **)&__p, v52, &v422, v301, 4 * v302, (unsigned __int8 *)&v426);
            (*(void (**)(std::string::size_type, unsigned char *, long long *))(*(void *)v273 + 200))(v273, v410, &v452);
            if (SHIBYTE(v426.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v426.__r_.__value_.__l.__data_);
            }
            if (v300) {
              nitro::nitro_function::nitro_function(v300);
            }
            if ((v410[23] & 0x80000000) != 0) {
              operator delete(*(void **)v410);
            }
          }
          if (v294[47])
          {
            std::string::basic_string[abi:ne180100]<0>(v410, "softplus_betas");
            uint64_t v303 = v294[47];
            int v304 = (std::__shared_weak_count *)v294[48];
            *(void *)&long long v421 = v303;
            *((void *)&v421 + 1) = v304;
            if (v304)
            {
              atomic_fetch_add_explicit(&v304->__shared_owners_, 1uLL, memory_order_relaxed);
              uint64_t v303 = v294[47];
            }
            uint64_t v305 = *(void *)(v303 + 16);
            uint64_t v306 = *(int *)(v303 + 8);
            std::string::basic_string[abi:ne180100]<0>(&v426, "");
            *(void *)&long long v452 = Espresso::dump_network_layers(std::shared_ptr<Espresso::net>,int,Espresso::dump_network_layers_blobs_state &,std::string const&,BOOL)::$_1::operator()((unsigned __int8 **)&__p, v52, &v421, v305, 4 * v306, (unsigned __int8 *)&v426);
            (*(void (**)(std::string::size_type, unsigned char *, long long *))(*(void *)v273 + 200))(v273, v410, &v452);
LABEL_815:
            if (SHIBYTE(v426.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v426.__r_.__value_.__l.__data_);
            }
            if (v304) {
              nitro::nitro_function::nitro_function(v304);
            }
            if ((v410[23] & 0x80000000) != 0) {
              operator delete(*(void **)v410);
            }
          }
        }
        {
          if (v307[36])
          {
            std::string::basic_string[abi:ne180100]<0>(v410, "scale");
            uint64_t v308 = v307[36];
            int8x8_t v309 = (std::__shared_weak_count *)v307[37];
            *(void *)&long long v420 = v308;
            *((void *)&v420 + 1) = v309;
            if (v309)
            {
              atomic_fetch_add_explicit(&v309->__shared_owners_, 1uLL, memory_order_relaxed);
              uint64_t v308 = v307[36];
            }
            uint64_t v310 = 0;
            uint64_t v311 = *(void *)(v308 + 24);
            uint64_t v312 = *(int *)(v308 + 8);
            uint64_t v313 = v308 + 12;
            do
            {
              v312 *= *(int *)(v313 + v310);
              v310 += 4;
            }
            while (v310 != 12);
            std::string::basic_string[abi:ne180100]<0>(&v426, "");
            *(void *)&long long v452 = Espresso::dump_network_layers(std::shared_ptr<Espresso::net>,int,Espresso::dump_network_layers_blobs_state &,std::string const&,BOOL)::$_1::operator()((unsigned __int8 **)&__p, v52, &v420, v311, 4 * v312, (unsigned __int8 *)&v426);
            (*(void (**)(std::string::size_type, unsigned char *, long long *))(*(void *)v273 + 200))(v273, v410, &v452);
            if (SHIBYTE(v426.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v426.__r_.__value_.__l.__data_);
            }
            if (v309) {
              nitro::nitro_function::nitro_function(v309);
            }
            if ((v410[23] & 0x80000000) != 0) {
              operator delete(*(void **)v410);
            }
          }
          if (v307[38])
          {
            std::string::basic_string[abi:ne180100]<0>(v410, "zero_point");
            uint64_t v314 = v307[38];
            int v304 = (std::__shared_weak_count *)v307[39];
            *(void *)&long long v419 = v314;
            *((void *)&v419 + 1) = v304;
            if (v304)
            {
              atomic_fetch_add_explicit(&v304->__shared_owners_, 1uLL, memory_order_relaxed);
              uint64_t v314 = v307[38];
            }
            uint64_t v315 = 0;
            uint64_t v316 = *(void *)(v314 + 24);
            uint64_t v317 = *(int *)(v314 + 8);
            uint64_t v318 = v314 + 12;
            do
            {
              v317 *= *(int *)(v318 + v315);
              v315 += 4;
            }
            while (v315 != 12);
            std::string::basic_string[abi:ne180100]<0>(&v426, "");
            *(void *)&long long v452 = Espresso::dump_network_layers(std::shared_ptr<Espresso::net>,int,Espresso::dump_network_layers_blobs_state &,std::string const&,BOOL)::$_1::operator()((unsigned __int8 **)&__p, v52, &v419, v316, 4 * v317, (unsigned __int8 *)&v426);
            (*(void (**)(std::string::size_type, unsigned char *, long long *))(*(void *)v273 + 200))(v273, v410, &v452);
            goto LABEL_815;
          }
        }
        {
          if (v319[36])
          {
            std::string::basic_string[abi:ne180100]<0>(v410, "scale");
            uint64_t v320 = v319[36];
            int v321 = (std::__shared_weak_count *)v319[37];
            *(void *)&long long v418 = v320;
            *((void *)&v418 + 1) = v321;
            if (v321)
            {
              atomic_fetch_add_explicit(&v321->__shared_owners_, 1uLL, memory_order_relaxed);
              uint64_t v320 = v319[36];
            }
            uint64_t v322 = 0;
            uint64_t v323 = *(void *)(v320 + 24);
            uint64_t v324 = *(int *)(v320 + 8);
            uint64_t v325 = v320 + 12;
            do
            {
              v324 *= *(int *)(v325 + v322);
              v322 += 4;
            }
            while (v322 != 12);
            std::string::basic_string[abi:ne180100]<0>(&v426, "");
            *(void *)&long long v452 = Espresso::dump_network_layers(std::shared_ptr<Espresso::net>,int,Espresso::dump_network_layers_blobs_state &,std::string const&,BOOL)::$_1::operator()((unsigned __int8 **)&__p, v52, &v418, v323, 4 * v324, (unsigned __int8 *)&v426);
            (*(void (**)(std::string::size_type, unsigned char *, long long *))(*(void *)v273 + 200))(v273, v410, &v452);
            if (SHIBYTE(v426.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v426.__r_.__value_.__l.__data_);
            }
            if (v321) {
              nitro::nitro_function::nitro_function(v321);
            }
            if ((v410[23] & 0x80000000) != 0) {
              operator delete(*(void **)v410);
            }
          }
          if (v319[38])
          {
            std::string::basic_string[abi:ne180100]<0>(v410, "zero_point");
            uint64_t v326 = v319[38];
            int v304 = (std::__shared_weak_count *)v319[39];
            *(void *)&long long v417 = v326;
            *((void *)&v417 + 1) = v304;
            if (v304)
            {
              atomic_fetch_add_explicit(&v304->__shared_owners_, 1uLL, memory_order_relaxed);
              uint64_t v326 = v319[38];
            }
            uint64_t v327 = 0;
            uint64_t v328 = *(void *)(v326 + 24);
            uint64_t v329 = *(int *)(v326 + 8);
            uint64_t v330 = v326 + 12;
            do
            {
              v329 *= *(int *)(v330 + v327);
              v327 += 4;
            }
            while (v327 != 12);
            std::string::basic_string[abi:ne180100]<0>(&v426, "");
            *(void *)&long long v452 = Espresso::dump_network_layers(std::shared_ptr<Espresso::net>,int,Espresso::dump_network_layers_blobs_state &,std::string const&,BOOL)::$_1::operator()((unsigned __int8 **)&__p, v52, &v417, v328, 4 * v329, (unsigned __int8 *)&v426);
            (*(void (**)(std::string::size_type, unsigned char *, long long *))(*(void *)v273 + 200))(v273, v410, &v452);
            goto LABEL_815;
          }
        }
      }
LABEL_821:
      std::string::basic_string[abi:ne180100]<0>(&v426, "weights");
      Espresso::SerDes::generic_serdes_object::operator[](v408, (uint64_t)&v426, v410);
      (*(void (**)(void, unsigned char *, std::string *))(**(void **)v410 + 240))(*(void *)v410, &v410[16], &v416);
      if (SHIBYTE(v411) < 0) {
        operator delete(*(void **)&v410[16]);
      }
      if (*(void *)&v410[8]) {
        nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&v410[8]);
      }
      if (SHIBYTE(v426.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v426.__r_.__value_.__l.__data_);
      }
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)buf);
      if (v415.__r_.__value_.__l.__size_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v415.__r_.__value_.__l.__size_);
      }
      if (v416.__r_.__value_.__l.__size_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v416.__r_.__value_.__l.__size_);
      }
LABEL_831:
      long long v331 = v467;
      if ((unint64_t)v467 >= v468)
      {
        uint64_t v335 = ((uint64_t)v467 - *(void *)&v466[1]) >> 4;
        unint64_t v336 = v335 + 1;
        if ((unint64_t)(v335 + 1) >> 60) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v337 = v468 - *(void *)&v466[1];
        if ((uint64_t)(v468 - *(void *)&v466[1]) >> 3 > v336) {
          unint64_t v336 = v337 >> 3;
        }
        if ((unint64_t)v337 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v338 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v338 = v336;
        }
        *(void *)&v484[16] = &v468;
        uint64_t v339 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v338);
        int v340 = &v339[16 * v335];
        *(void *)std::string buf = v339;
        *(void *)&buf[8] = v340;
        *(void *)&v484[8] = &v339[16 * v341];
        uint64_t v342 = *((void *)&v456 + 1);
        *(_OWORD *)int v340 = v456;
        if (v342) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v342 + 8), 1uLL, memory_order_relaxed);
        }
        *(void *)v484 = v340 + 16;
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v466[1], buf);
        p_shared_weak_owners = v467;
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)buf);
        uint64_t v333 = v407;
      }
      else
      {
        v467->__vftable = (std::__shared_weak_count_vtbl *)v456;
        uint64_t v332 = *((void *)&v456 + 1);
        v331->__shared_owners_ = *((void *)&v456 + 1);
        uint64_t v333 = v407;
        if (v332) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v332 + 8), 1uLL, memory_order_relaxed);
        }
        p_shared_weak_owners = (std::__shared_weak_count *)&v331->__shared_weak_owners_;
      }
      v467 = p_shared_weak_owners;
      Espresso::layer_data::shapes((Espresso::layer_data *)&v426, *(uint64_t **)(v333 + 104), *(uint64_t **)(v333 + 112));
      std::string::size_type v343 = v426.__r_.__value_.__r.__words[0];
      if (v426.__r_.__value_.__l.__size_ != v426.__r_.__value_.__r.__words[0])
      {
        uint64_t v344 = 0;
        uint64_t v345 = 0;
        unint64_t v346 = 0;
        do
        {
          unint64_t v347 = (long long *)(v343 + v344);
          long long v348 = *v347;
          long long v349 = v347[1];
          *(void *)&v484[16] = *((void *)v347 + 4);
          *(_OWORD *)std::string buf = v348;
          *(_OWORD *)v484 = v349;
          v486 = 0;
          uint64_t v487 = 0;
          v485 = 0;
          std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v485, *((const void **)v347 + 5), *((void *)v347 + 6), (uint64_t)(*((void *)v347 + 6) - *((void *)v347 + 5)) >> 2);
          uint64_t v350 = (uint64_t)*a2 + 96;
          *(void *)v410 = v58;
          unint64_t v351 = (long long *)(std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v350, v58, v410)[3]+ v345);
          if (*((char *)v351 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v416, *(const std::string::value_type **)v351, *((void *)v351 + 1));
          }
          else
          {
            long long v352 = *v351;
            v416.__r_.__value_.__r.__words[2] = *((void *)v351 + 2);
            *(_OWORD *)&v416.__r_.__value_.__l.__data_ = v352;
          }
          int v353 = Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::shared();
          Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::make(&v415, (uint64_t)v353, v475);
          Espresso::SerDes::params_io<Espresso::layer_shape>((uint64_t)v415.__r_.__value_.__l.__data_, (uint64_t)buf, 1);
          Espresso::SerDes::generic_serdes_object::operator[](v472, (uint64_t)&v416, v410);
          (*(void (**)(void, unsigned char *, std::string *))(**(void **)v410 + 240))(*(void *)v410, &v410[16], &v415);
          if (SHIBYTE(v411) < 0) {
            operator delete(*(void **)&v410[16]);
          }
          if (*(void *)&v410[8]) {
            nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&v410[8]);
          }
          if (v415.__r_.__value_.__l.__size_) {
            nitro::nitro_function::nitro_function((std::__shared_weak_count *)v415.__r_.__value_.__l.__size_);
          }
          if (SHIBYTE(v416.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v416.__r_.__value_.__l.__data_);
          }
          if (v485)
          {
            v486 = v485;
            operator delete(v485);
          }
          ++v346;
          std::string::size_type v343 = v426.__r_.__value_.__r.__words[0];
          v345 += 24;
          v344 += 64;
        }
        while (v346 < (uint64_t)(v426.__r_.__value_.__l.__size_ - v426.__r_.__value_.__r.__words[0]) >> 6);
      }
      Espresso::layer_data::shapes((Espresso::layer_data *)&v416, *(uint64_t **)(v407 + 80), *(uint64_t **)(v407 + 88));
      std::string::size_type v354 = v416.__r_.__value_.__r.__words[0];
      if (v416.__r_.__value_.__l.__size_ != v416.__r_.__value_.__r.__words[0])
      {
        uint64_t v355 = 0;
        uint64_t v356 = 0;
        unint64_t v357 = 0;
        do
        {
          long long v358 = (long long *)(v354 + v355);
          long long v359 = *v358;
          long long v360 = v358[1];
          *(void *)&v484[16] = *((void *)v358 + 4);
          *(_OWORD *)std::string buf = v359;
          *(_OWORD *)v484 = v360;
          v486 = 0;
          uint64_t v487 = 0;
          v485 = 0;
          std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v485, *((const void **)v358 + 5), *((void *)v358 + 6), (uint64_t)(*((void *)v358 + 6) - *((void *)v358 + 5)) >> 2);
          uint64_t v361 = (uint64_t)*a2 + 56;
          *(void *)v410 = v58;
          v362 = (long long *)(std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v361, v58, v410)[3]+ v356);
          if (*((char *)v362 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v415, *(const std::string::value_type **)v362, *((void *)v362 + 1));
          }
          else
          {
            long long v363 = *v362;
            v415.__r_.__value_.__r.__words[2] = *((void *)v362 + 2);
            *(_OWORD *)&v415.__r_.__value_.__l.__data_ = v363;
          }
          v364 = Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::shared();
          Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::make(&v452, (uint64_t)v364, v475);
          Espresso::SerDes::params_io<Espresso::layer_shape>(v452, (uint64_t)buf, 1);
          Espresso::SerDes::generic_serdes_object::operator[](v472, (uint64_t)&v415, v410);
          (*(void (**)(void, unsigned char *, long long *))(**(void **)v410 + 240))(*(void *)v410, &v410[16], &v452);
          if (SHIBYTE(v411) < 0) {
            operator delete(*(void **)&v410[16]);
          }
          if (*(void *)&v410[8]) {
            nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&v410[8]);
          }
          if (*((void *)&v452 + 1)) {
            nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v452 + 1));
          }
          if (SHIBYTE(v415.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v415.__r_.__value_.__l.__data_);
          }
          if (v485)
          {
            v486 = v485;
            operator delete(v485);
          }
          ++v357;
          std::string::size_type v354 = v416.__r_.__value_.__r.__words[0];
          v356 += 24;
          v355 += 64;
        }
        while (v357 < (uint64_t)(v416.__r_.__value_.__l.__size_ - v416.__r_.__value_.__r.__words[0]) >> 6);
      }
      *(void *)std::string buf = &v416;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
      *(void *)std::string buf = &v426;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
      if (v454) {
        nitro::nitro_function::nitro_function(v454);
      }
      if (SHIBYTE(v455.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v455.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v479.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v479.__r_.__value_.__l.__data_);
      }
      if (*((void *)&v456 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v456 + 1));
      }
      if (v405) {
        nitro::nitro_function::nitro_function(v405);
      }
      long long v45 = v403 + 2;
      if (v403 + 2 == v402) {
        goto LABEL_887;
      }
    }
    std::string::basic_string[abi:ne180100]<0>(buf, "blob_shuffled_weights");
    long long v128 = *(_OWORD *)&v415.__r_.__value_.__l.__data_;
    long long v442 = *(_OWORD *)&v415.__r_.__value_.__l.__data_;
    if (v415.__r_.__value_.__l.__size_) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v415.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v129 = *(void *)(v128 + 32);
    uint64_t v130 = *(int *)(v128 + 8);
    for (uint64_t k = 12; k != 32; k += 4)
      v130 *= *(int *)(v128 + k);
    std::string::basic_string[abi:ne180100]<0>(v410, "");
    uint64_t v132 = Espresso::dump_network_layers(std::shared_ptr<Espresso::net>,int,Espresso::dump_network_layers_blobs_state &,std::string const&,BOOL)::$_1::operator()((unsigned __int8 **)&__p, v52, &v442, v129, 4 * v130, v410);
    uint64_t v127 = v408;
    *(void *)&long long v449 = v132;
    (*(void (**)(uint64_t, uint8_t *, long long *))(*(void *)v408 + 200))(v408, buf, &v449);
    if ((v410[23] & 0x80000000) != 0)
    {
      operator delete(*(void **)v410);
      if (!*((void *)&v128 + 1))
      {
LABEL_391:
        if ((v484[7] & 0x80000000) != 0) {
          operator delete(*(void **)buf);
        }
        goto LABEL_393;
      }
    }
    else if (!*((void *)&v128 + 1))
    {
      goto LABEL_391;
    }
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v128 + 1));
    goto LABEL_391;
  }
LABEL_887:
  uint64_t v365 = v470;
  std::string::basic_string[abi:ne180100]<0>(buf, "layer_shapes");
  (*(void (**)(uint64_t, uint8_t *, uint64_t *))(*(void *)v365 + 240))(v365, buf, &v472);
  if ((v484[7] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  std::string::basic_string[abi:ne180100]<0>(v410, "layers");
  Espresso::SerDes::generic_serdes_object::operator[](v399, (uint64_t)v410, buf);
  (*(void (**)(void, unsigned char *, unsigned char *))(**(void **)buf + 248))(*(void *)buf, v484, &v466[1]);
  if ((v484[23] & 0x80000000) != 0) {
    operator delete(*(void **)v484);
  }
  if (*(void *)&buf[8]) {
    nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&buf[8]);
  }
  if ((v410[23] & 0x80000000) != 0) {
    operator delete(*(void **)v410);
  }
  memset(&v455, 0, sizeof(v455));
  v366 = (uint64_t *)*((void *)*a2 + 165);
  if (v366)
  {
    while (1)
    {
      v367 = Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::shared();
      Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::make(&v415, (uint64_t)v367, v475);
      uint64_t v368 = v415.__r_.__value_.__r.__words[0];
      if (*((char *)v366 + 39) < 0) {
        std::string::__init_copy_ctor_external(&v426, (const std::string::value_type *)v366[2], v366[3]);
      }
      else {
        std::string v426 = *(std::string *)(v366 + 2);
      }
      std::pair<Espresso::layer_shape,std::shared_ptr<Espresso::blob<float,5>>>::pair[abi:ne180100]((uint64_t)buf, (long long *)(v366 + 5));
      *(_OWORD *)v410 = *(_OWORD *)buf;
      *(_OWORD *)&v410[16] = *(_OWORD *)v484;
      uint64_t v411 = *(void *)&v484[16];
      v413 = 0;
      uint64_t v414 = 0;
      uint64_t v412 = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v412, v485, (uint64_t)v486, (v486 - v485) >> 2);
      uint64_t v370 = v488;
      v369 = v489;
      if (v489) {
        atomic_fetch_add_explicit(&v489->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      v371 = Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::shared();
      Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::make(&v456, (uint64_t)v371, v475);
      Espresso::SerDes::params_io<Espresso::layer_shape>(v456, (uint64_t)v410, 1);
      std::string::basic_string[abi:ne180100]<0>(&v479, "data");
      v454 = 0;
      uint64_t v453 = 0;
      *(void *)&long long v409 = v370;
      *((void *)&v409 + 1) = v369;
      if (v369) {
        atomic_fetch_add_explicit(&v369->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v372 = 0;
      uint64_t v373 = *(void *)(v370 + 32);
      uint64_t v374 = *(int *)(v370 + 8);
      do
      {
        v374 *= *(int *)(v370 + 12 + v372);
        v372 += 4;
      }
      while (v372 != 16);
      std::string::basic_string[abi:ne180100]<0>(&v416, "");
      *(void *)&long long v452 = Espresso::dump_network_layers(std::shared_ptr<Espresso::net>,int,Espresso::dump_network_layers_blobs_state &,std::string const&,BOOL)::$_1::operator()((unsigned __int8 **)&__p, &v453, &v409, v373, 4 * v374, (unsigned __int8 *)&v416);
      (*(void (**)(uint64_t, std::string *, long long *))(*(void *)v368 + 200))(v368, &v479, &v452);
      if (SHIBYTE(v416.__r_.__value_.__r.__words[2]) < 0) {
        break;
      }
      if (v369) {
        goto LABEL_907;
      }
LABEL_908:
      if (SHIBYTE(v479.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v479.__r_.__value_.__l.__data_);
      }
      std::string::basic_string[abi:ne180100]<0>(&v416, "shape");
      Espresso::SerDes::generic_serdes_object::operator[](v368, (uint64_t)&v416, &v479);
      (*(void (**)(std::string::size_type, std::string::size_type *, long long *))(*(void *)v479.__r_.__value_.__l.__data_
                                                                                           + 240))(v479.__r_.__value_.__r.__words[0], &v479.__r_.__value_.__r.__words[2], &v456);
      if (SHIBYTE(v481) < 0) {
        operator delete((void *)v479.__r_.__value_.__r.__words[2]);
      }
      if (v479.__r_.__value_.__l.__size_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v479.__r_.__value_.__l.__size_);
      }
      if (SHIBYTE(v416.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v416.__r_.__value_.__l.__data_);
      }
      std::string::basic_string[abi:ne180100]<0>(&v416, "name");
      Espresso::SerDes::generic_serdes_object::operator[](v368, (uint64_t)&v416, &v479);
      (*(void (**)(std::string::size_type, std::string::size_type *, std::string *))(*(void *)v479.__r_.__value_.__l.__data_
                                                                                              + 232))(v479.__r_.__value_.__r.__words[0], &v479.__r_.__value_.__r.__words[2], &v426);
      if (SHIBYTE(v481) < 0) {
        operator delete((void *)v479.__r_.__value_.__r.__words[2]);
      }
      if (v479.__r_.__value_.__l.__size_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v479.__r_.__value_.__l.__size_);
      }
      if (SHIBYTE(v416.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v416.__r_.__value_.__l.__data_);
      }
      std::string::size_type v375 = v455.__r_.__value_.__l.__size_;
      if (v455.__r_.__value_.__l.__size_ >= v455.__r_.__value_.__r.__words[2])
      {
        uint64_t v378 = (uint64_t)(v455.__r_.__value_.__l.__size_ - v455.__r_.__value_.__r.__words[0]) >> 4;
        unint64_t v379 = v378 + 1;
        if ((unint64_t)(v378 + 1) >> 60) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        int64_t v380 = v455.__r_.__value_.__r.__words[2] - v455.__r_.__value_.__r.__words[0];
        if ((uint64_t)(v455.__r_.__value_.__r.__words[2] - v455.__r_.__value_.__r.__words[0]) >> 3 > v379) {
          unint64_t v379 = v380 >> 3;
        }
        if ((unint64_t)v380 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v381 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v381 = v379;
        }
        v481 = &v455.__r_.__value_.__s.__data_[16];
        long long v382 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v381);
        v383 = &v382[16 * v378];
        v479.__r_.__value_.__r.__words[0] = (std::string::size_type)v382;
        v479.__r_.__value_.__l.__size_ = (std::string::size_type)v383;
        v480 = &v382[16 * v384];
        std::string::size_type v385 = v415.__r_.__value_.__l.__size_;
        *(_OWORD *)v383 = *(_OWORD *)&v415.__r_.__value_.__l.__data_;
        if (v385) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v385 + 8), 1uLL, memory_order_relaxed);
        }
        v479.__r_.__value_.__r.__words[2] = (std::string::size_type)(v383 + 16);
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v455, &v479);
        std::string::size_type v377 = v455.__r_.__value_.__l.__size_;
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v479);
      }
      else
      {
        *(void *)v455.__r_.__value_.__l.__size_ = v368;
        std::string::size_type v376 = v415.__r_.__value_.__l.__size_;
        *(void *)(v375 + 8) = v415.__r_.__value_.__l.__size_;
        if (v376) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v376 + 8), 1uLL, memory_order_relaxed);
        }
        std::string::size_type v377 = v375 + 16;
      }
      v455.__r_.__value_.__l.__size_ = v377;
      if (*((void *)&v456 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v456 + 1));
      }
      if (v369) {
        nitro::nitro_function::nitro_function(v369);
      }
      if (v412)
      {
        v413 = v412;
        operator delete(v412);
      }
      if (v489) {
        nitro::nitro_function::nitro_function(v489);
      }
      if (v485)
      {
        v486 = v485;
        operator delete(v485);
      }
      if (SHIBYTE(v426.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v426.__r_.__value_.__l.__data_);
      }
      if (v415.__r_.__value_.__l.__size_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v415.__r_.__value_.__l.__size_);
      }
      v366 = (uint64_t *)*v366;
      if (!v366) {
        goto LABEL_953;
      }
    }
    operator delete(v416.__r_.__value_.__l.__data_);
    if (!v369) {
      goto LABEL_908;
    }
LABEL_907:
    nitro::nitro_function::nitro_function(v369);
    goto LABEL_908;
  }
LABEL_953:
  std::string::basic_string[abi:ne180100]<0>(v410, "metadata_in_weights");
  Espresso::SerDes::generic_serdes_object::operator[](v399, (uint64_t)v410, buf);
  (*(void (**)(void, unsigned char *, std::string *))(**(void **)buf + 248))(*(void *)buf, v484, &v455);
  if ((v484[23] & 0x80000000) != 0) {
    operator delete(*(void **)v484);
  }
  if (*(void *)&buf[8]) {
    nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&buf[8]);
  }
  if ((v410[23] & 0x80000000) != 0) {
    operator delete(*(void **)v410);
  }
  if (v478 >= 300 && Espresso::net::is_root_module(*a2))
  {
    uint64_t v386 = Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::shared();
    Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::make(v410, (uint64_t)v386, v475);
    v387 = *a2;
    v482[0] = &unk_1EE37C590;
    v482[1] = v475;
    v482[2] = v410;
    v482[3] = v482;
    Espresso::net::apply_to_all_globals(v387, v482);
    std::__function::__value_func<void ()(std::pair<std::string,std::shared_ptr<Espresso::abstract_blob_container>> &)>::~__value_func[abi:ne180100](v482);
    uint64_t v388 = v470;
    std::string::basic_string[abi:ne180100]<0>(buf, "global_shapes");
    (*(void (**)(uint64_t, uint8_t *, unsigned char *))(*(void *)v388 + 240))(v388, buf, v410);
    if ((v484[7] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    if (*(void *)&v410[8]) {
      nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&v410[8]);
    }
  }
  if (*(char *)(a5 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)v410, *(const std::string::value_type **)a5, *(void *)(a5 + 8));
  }
  else
  {
    *(_OWORD *)v410 = *(_OWORD *)a5;
    *(void *)&v410[16] = *(void *)(a5 + 16);
  }
  std::string::size_type v389 = std::string::rfind((const std::string *)a5, 47, 0xFFFFFFFFFFFFFFFFLL);
  if (v389 != -1)
  {
    std::string::basic_string((std::string *)buf, (const std::string *)a5, v389 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v479);
    if ((v410[23] & 0x80000000) != 0) {
      operator delete(*(void **)v410);
    }
    *(_OWORD *)v410 = *(_OWORD *)buf;
    *(void *)&v410[16] = *(void *)v484;
  }
  std::string::basic_string[abi:ne180100]<0>(&v479, "storage");
  Espresso::SerDes::generic_serdes_object::operator[](v399, (uint64_t)&v479, buf);
  (*(void (**)(void, unsigned char *, unsigned char *))(**(void **)buf + 232))(*(void *)buf, v484, v410);
  if ((v484[23] & 0x80000000) != 0) {
    operator delete(*(void **)v484);
  }
  if (*(void *)&buf[8]) {
    nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&buf[8]);
  }
  if (SHIBYTE(v479.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v479.__r_.__value_.__l.__data_);
  }
  if (v478 >= 300)
  {
    std::string::basic_string[abi:ne180100]<0>(buf, "shape");
    (*(void (**)(uint64_t, uint8_t *, uint64_t *))(*(void *)v399 + 240))(v399, buf, &v470);
    if ((v484[7] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
  }
  std::string v390 = (std::__shared_weak_count *)v474[1];
  *a1 = v474[0];
  a1[1] = v390;
  if (v390) {
    atomic_fetch_add_explicit(&v390->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v391 = v471;
  a1[2] = v470;
  a1[3] = v391;
  if (v391) {
    atomic_fetch_add_explicit(&v391->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if ((v410[23] & 0x80000000) != 0) {
    operator delete(*(void **)v410);
  }
  *(void *)std::string buf = &v455;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(void *)std::string buf = &v466[1];
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (v471) {
    nitro::nitro_function::nitro_function(v471);
  }
  if (v473) {
    nitro::nitro_function::nitro_function(v473);
  }
  if (v390) {
    nitro::nitro_function::nitro_function(v390);
  }
  if (v476 < 0) {
    operator delete(v475[0]);
  }
}

void sub_192296E5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,void *a37,std::__shared_weak_count *a38,uint64_t a39,uint64_t a40,void *a41,std::__shared_weak_count *a42)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v42 - 176);
  if (a38) {
    nitro::nitro_function::nitro_function(a38);
  }
  if (a42) {
    nitro::nitro_function::nitro_function(a42);
  }
  if (STACK[0x3B0]) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)STACK[0x3B0]);
  }
  if (SLOBYTE(STACK[0x3CF]) < 0) {
    operator delete((void *)STACK[0x3B8]);
  }
  if (*(char *)(v42 - 233) < 0) {
    operator delete(*(void **)(v42 - 256));
  }
  if (STACK[0x3D8]) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)STACK[0x3D8]);
  }
  if (a21) {
    nitro::nitro_function::nitro_function(a21);
  }
  STACK[0x3E0] = (unint64_t)&STACK[0x430];
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x3E0]);
  if (STACK[0x458]) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)STACK[0x458]);
  }
  if (STACK[0x468]) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)STACK[0x468]);
  }
  if (STACK[0x478]) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)STACK[0x478]);
  }
  if (SLOBYTE(STACK[0x497]) < 0) {
    operator delete((void *)STACK[0x480]);
  }
  _Unwind_Resume(a1);
}

void Espresso::layer_data::shapes(Espresso::layer_data *this, uint64_t *a2, uint64_t *a3)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  if (a2 != a3)
  {
    unint64_t v4 = a2;
    unsigned __int8 v6 = (char *)this + 16;
    do
    {
      uint64_t v7 = *v4;
      uint64_t v8 = (std::__shared_weak_count *)v4[1];
      if (v8) {
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      Espresso::abstract_blob_container::shape((char *)&v24, v7);
      unint64_t v9 = *((void *)this + 1);
      unint64_t v10 = *((void *)this + 2);
      if (v9 >= v10)
      {
        uint64_t v13 = (uint64_t)(v9 - *(void *)this) >> 6;
        unint64_t v14 = v13 + 1;
        if ((unint64_t)(v13 + 1) >> 58) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v15 = v10 - *(void *)this;
        if (v15 >> 5 > v14) {
          unint64_t v14 = v15 >> 5;
        }
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFC0) {
          unint64_t v16 = 0x3FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v16 = v14;
        }
        v29[4] = v6;
        unint64_t v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::layer_shape>>(v16);
        unint64_t v18 = &v17[64 * v13];
        v29[0] = v17;
        v29[1] = v18;
        v29[3] = &v17[64 * v19];
        long long v20 = v25;
        uint64_t v21 = v26;
        *(_OWORD *)unint64_t v18 = v24;
        *((_OWORD *)v18 + 1) = v20;
        *((void *)v18 + 4) = v21;
        *((void *)v18 + 5) = 0;
        *((void *)v18 + 6) = 0;
        *((void *)v18 + 7) = 0;
        *(_OWORD *)(v18 + 40) = *(_OWORD *)__p;
        *((void *)v18 + 7) = v28;
        __p[0] = 0;
        __p[1] = 0;
        uint64_t v28 = 0;
        v29[2] = v18 + 64;
        std::vector<Espresso::layer_shape>::__swap_out_circular_buffer((uint64_t *)this, v29);
        uint64_t v22 = *((void *)this + 1);
        std::__split_buffer<Espresso::layer_shape>::~__split_buffer((uint64_t)v29);
        int v23 = __p[0];
        *((void *)this + 1) = v22;
        if (v23)
        {
          __p[1] = v23;
          operator delete(v23);
        }
      }
      else
      {
        long long v11 = v25;
        uint64_t v12 = v26;
        *(_OWORD *)unint64_t v9 = v24;
        *(_OWORD *)(v9 + 16) = v11;
        *(void *)(v9 + 32) = v12;
        *(void *)(v9 + 40) = 0;
        *(void *)(v9 + 48) = 0;
        *(void *)(v9 + 56) = 0;
        *(_OWORD *)(v9 + 40) = *(_OWORD *)__p;
        *(void *)(v9 + 56) = v28;
        __p[0] = 0;
        __p[1] = 0;
        uint64_t v28 = 0;
        *((void *)this + 1) = v9 + 64;
      }
      if (v8) {
        nitro::nitro_function::nitro_function(v8);
      }
      v4 += 2;
    }
    while (v4 != a3);
  }
}

void sub_192297E14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p)
  {
    a16 = (uint64_t)__p;
    operator delete(__p);
  }
  if (v16) {
    nitro::nitro_function::nitro_function(v16);
  }
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  _Unwind_Resume(a1);
}

void Espresso::dump_network_layers(std::shared_ptr<Espresso::net>,int,Espresso::dump_network_layers_blobs_state &,std::string const&,BOOL)::$_0::operator()(void **a1, void *a2, uint64_t a3)
{
  unint64_t v3 = a2 + 1;
  unint64_t v4 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    do
    {
      uint64_t v7 = Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::shared();
      Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::make(&v15, (uint64_t)v7, *a1);
      Espresso::SerDes::params_io<Espresso::blob_numerical_properties>(v15, (uint64_t)(v4 + 7), 1);
      Espresso::SerDes::generic_serdes_object::operator[](a3, (uint64_t)(v4 + 4), &v11);
      (*(void (**)(uint64_t, void **, uint64_t *))(*(void *)v11 + 240))(v11, &__p, &v15);
      if (v14 < 0) {
        operator delete(__p);
      }
      if (v12) {
        nitro::nitro_function::nitro_function(v12);
      }
      if (v16) {
        nitro::nitro_function::nitro_function(v16);
      }
      uint64_t v8 = (void *)v4[1];
      if (v8)
      {
        do
        {
          unint64_t v9 = v8;
          uint64_t v8 = (void *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          unint64_t v9 = (void *)v4[2];
          BOOL v10 = *v9 == (void)v4;
          unint64_t v4 = v9;
        }
        while (!v10);
      }
      unint64_t v4 = v9;
    }
    while (v9 != v3);
  }
}

void sub_192297F6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::serdes_object_json_objc::set_obj_array(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  if (*((char *)a2 + 23) >= 0) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = (uint64_t *)*a2;
  }
  id v14 = [NSString stringWithUTF8String:v5];
  unsigned __int8 v6 = objc_opt_new();
  uint64_t v7 = *a3;
  uint64_t v8 = a3[1];
  if (*a3 != v8)
  {
    do
    {
      unint64_t v9 = *(const void **)v7;
      BOOL v10 = *(std::__shared_weak_count **)(v7 + 8);
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v12 = 0;
      if (v10) {
        BOOL v13 = v11 == 0;
      }
      else {
        BOOL v13 = 1;
      }
      if (!v13)
      {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v12 = v10;
      }
      [v6 addObject:v11[3]];
      if (v12) {
        nitro::nitro_function::nitro_function(v12);
      }
      if (v10) {
        nitro::nitro_function::nitro_function(v10);
      }
      v7 += 16;
    }
    while (v7 != v8);
  }
  [*(id *)(a1 + 24) setObject:v6 forKeyedSubscript:v14];
}

void sub_1922980F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t Espresso::dump_network_layers(std::shared_ptr<Espresso::net>,int,Espresso::dump_network_layers_blobs_state &,std::string const&,BOOL)::$_1::operator()(unsigned __int8 **a1, uint64_t *a2, long long *a3, uint64_t a4, uint64_t a5, unsigned __int8 *a6)
{
  uint64_t v10 = *((void *)*a1 + 1);
  uint64_t v85 = *(void *)*a1;
  int v11 = *a1[1];
  if (*a1[2]
    && *a2
    && std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>((void *)(*a2 + 24), a6))
  {
    Espresso::base_kernel::get_blob_file_metadata(*a2, a6);
    operator new();
  }
  id v14 = (void **)*a1;
  unint64_t v16 = (void *)*((void *)*a1 + 1);
  unint64_t v15 = *((void *)*a1 + 2);
  if ((unint64_t)v16 >= v15)
  {
    uint64_t v18 = ((char *)v16 - (unsigned char *)*v14) >> 3;
    if ((unint64_t)(v18 + 1) >> 61) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v19 = v15 - (void)*v14;
    uint64_t v20 = v19 >> 2;
    if (v19 >> 2 <= (unint64_t)(v18 + 1)) {
      uint64_t v20 = v18 + 1;
    }
    if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v21 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v21 = v20;
    }
    if (v21) {
      unint64_t v21 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v21);
    }
    else {
      uint64_t v22 = 0;
    }
    int v23 = (void *)(v21 + 8 * v18);
    unint64_t v24 = v21 + 8 * v22;
    void *v23 = a4;
    unint64_t v17 = v23 + 1;
    uint64_t v26 = (char *)*v14;
    long long v25 = (char *)v14[1];
    if (v25 != *v14)
    {
      do
      {
        uint64_t v27 = *((void *)v25 - 1);
        v25 -= 8;
        *--int v23 = v27;
      }
      while (v25 != v26);
      long long v25 = (char *)*v14;
    }
    *id v14 = v23;
    v14[1] = v17;
    v14[2] = (void *)v24;
    if (v25) {
      operator delete(v25);
    }
  }
  else
  {
    void *v16 = a4;
    unint64_t v17 = v16 + 1;
  }
  v14[1] = v17;
  uint64_t v28 = a1[5];
  long long v30 = (void *)*((void *)v28 + 1);
  unint64_t v29 = *((void *)v28 + 2);
  if ((unint64_t)v30 >= v29)
  {
    std::string::size_type v32 = *(void **)v28;
    uint64_t v33 = ((uint64_t)v30 - *(void *)v28) >> 3;
    unint64_t v34 = v33 + 1;
    if ((unint64_t)(v33 + 1) >> 61) {
      goto LABEL_89;
    }
    uint64_t v35 = v29 - (void)v32;
    if (v35 >> 2 > v34) {
      unint64_t v34 = v35 >> 2;
    }
    BOOL v36 = (unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8;
    unint64_t v37 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v36) {
      unint64_t v37 = v34;
    }
    if (v37)
    {
      unint64_t v37 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v37);
      std::string::size_type v32 = *(void **)v28;
      long long v30 = (void *)*((void *)v28 + 1);
    }
    else
    {
      uint64_t v38 = 0;
    }
    int8x8_t v39 = (void *)(v37 + 8 * v33);
    unint64_t v40 = v37 + 8 * v38;
    *int8x8_t v39 = a5;
    long long v31 = v39 + 1;
    while (v30 != v32)
    {
      uint64_t v41 = *--v30;
      *--int8x8_t v39 = v41;
    }
    *(void *)uint64_t v28 = v39;
    *((void *)v28 + 1) = v31;
    *((void *)v28 + 2) = v40;
    if (v32) {
      operator delete(v32);
    }
  }
  else
  {
    *long long v30 = a5;
    long long v31 = v30 + 1;
  }
  *((void *)v28 + 1) = v31;
  uint64_t v42 = a1[6];
  uint64_t v43 = (void *)*((void *)v42 + 1);
  unint64_t v44 = *((void *)v42 + 2);
  if ((unint64_t)v43 >= v44)
  {
    uint64_t v47 = ((uint64_t)v43 - *(void *)v42) >> 4;
    unint64_t v48 = v47 + 1;
    if ((unint64_t)(v47 + 1) >> 60) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v49 = v44 - *(void *)v42;
    if (v49 >> 3 > v48) {
      unint64_t v48 = v49 >> 3;
    }
    if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v50 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v50 = v48;
    }
    v86[4] = v42 + 16;
    uint64_t v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v50);
    uint64_t v52 = &v51[16 * v47];
    v86[0] = v51;
    v86[1] = v52;
    v86[3] = &v51[16 * v53];
    long long v54 = *a3;
    *(_OWORD *)uint64_t v52 = *a3;
    if (*((void *)&v54 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v54 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    v86[2] = v52 + 16;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(v42, v86);
    long long v46 = (void *)*((void *)v42 + 1);
    std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v86);
  }
  else
  {
    void *v43 = *(void *)a3;
    uint64_t v45 = *((void *)a3 + 1);
    v43[1] = v45;
    if (v45) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v45 + 8), 1uLL, memory_order_relaxed);
    }
    long long v46 = v43 + 2;
    *((void *)v42 + 1) = v43 + 2;
  }
  *((void *)v42 + 1) = v46;
  uint64_t v55 = a1[7];
  unint64_t v57 = (void *)*((void *)v55 + 1);
  unint64_t v56 = *((void *)v55 + 2);
  if ((unint64_t)v57 < v56)
  {
    void *v57 = -1;
    unint64_t v58 = v57 + 1;
    goto LABEL_64;
  }
  uint64_t v59 = *(void **)v55;
  uint64_t v60 = ((uint64_t)v57 - *(void *)v55) >> 3;
  unint64_t v61 = v60 + 1;
  if ((unint64_t)(v60 + 1) >> 61) {
LABEL_89:
  }
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  uint64_t v62 = v56 - (void)v59;
  if (v62 >> 2 > v61) {
    unint64_t v61 = v62 >> 2;
  }
  BOOL v36 = (unint64_t)v62 >= 0x7FFFFFFFFFFFFFF8;
  unint64_t v63 = 0x1FFFFFFFFFFFFFFFLL;
  if (!v36) {
    unint64_t v63 = v61;
  }
  if (v63)
  {
    unint64_t v63 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v63);
    uint64_t v59 = *(void **)v55;
    unint64_t v57 = (void *)*((void *)v55 + 1);
  }
  else
  {
    uint64_t v64 = 0;
  }
  int v65 = (void *)(v63 + 8 * v60);
  unint64_t v66 = v63 + 8 * v64;
  *int v65 = -1;
  unint64_t v58 = v65 + 1;
  while (v57 != v59)
  {
    uint64_t v67 = *--v57;
    *--int v65 = v67;
  }
  *(void *)uint64_t v55 = v65;
  *((void *)v55 + 1) = v58;
  *((void *)v55 + 2) = v66;
  if (v59) {
    operator delete(v59);
  }
LABEL_64:
  *((void *)v55 + 1) = v58;
  unint64_t v68 = (char **)a1[8];
  long long v70 = v68[1];
  unint64_t v69 = (unint64_t)v68[2];
  if ((unint64_t)v70 >= v69)
  {
    uint64_t v72 = *v68;
    uint64_t v73 = (v70 - *v68) >> 3;
    unint64_t v74 = v73 + 1;
    if ((unint64_t)(v73 + 1) >> 61) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v75 = v69 - (void)v72;
    if (v75 >> 2 > v74) {
      unint64_t v74 = v75 >> 2;
    }
    if ((unint64_t)v75 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v76 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v76 = v74;
    }
    if (v76)
    {
      if (v76 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      __int16 v77 = (char *)operator new(8 * v76);
    }
    else
    {
      __int16 v77 = 0;
    }
    uint64_t v78 = &v77[8 * v73];
    unint64_t v79 = &v77[8 * v76];
    *(void *)uint64_t v78 = 0;
    uint64_t v71 = v78 + 8;
    if (v70 == v72)
    {
      void *v68 = v78;
      v68[1] = v71;
      v68[2] = v79;
    }
    else
    {
      do
      {
        uint64_t v80 = *((void *)v70 - 1);
        v70 -= 8;
        *(void *)long long v70 = 0;
        *((void *)v78 - 1) = v80;
        v78 -= 8;
      }
      while (v70 != v72);
      long long v70 = *v68;
      uint64_t v81 = v68[1];
      void *v68 = v78;
      v68[1] = v71;
      v68[2] = v79;
      while (v81 != v70)
      {
        uint64_t v83 = *((void *)v81 - 1);
        v81 -= 8;
        uint64_t v82 = v83;
        *(void *)uint64_t v81 = 0;
        if (v83) {
          std::default_delete<Espresso::blob_file_metadata>::operator()[abi:ne180100](v82);
        }
      }
    }
    if (v70) {
      operator delete(v70);
    }
  }
  else
  {
    *(void *)long long v70 = 0;
    uint64_t v71 = v70 + 8;
  }
  v68[1] = v71;
  if (v11) {
    return ((v10 - v85) >> 2) | 1;
  }
  else {
    return (v10 - v85) >> 3;
  }
}

void sub_1922986F0(_Unwind_Exception *a1)
{
  MEMORY[0x192FF16B0](v1, 0x1012C40B400CDBBLL);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::serdes_object_json_objc::set_ulonglong(uint64_t a1, uint64_t *a2, void *a3)
{
  id v7 = [NSNumber numberWithUnsignedLongLong:*a3];
  if (*((char *)a2 + 23) >= 0) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = (uint64_t *)*a2;
  }
  unsigned __int8 v6 = [NSString stringWithUTF8String:v5];
  [*(id *)(a1 + 24) setObject:v7 forKeyedSubscript:v6];
}

void sub_1922987C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void Espresso::analysis_debug_metadata::serialize(Espresso::analysis_debug_metadata *this@<X0>, void *a2@<X8>)
{
  unint64_t v4 = Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::shared();
  std::string::basic_string[abi:ne180100]<0>(__p, "json");
  Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::make(a2, (uint64_t)v4, __p);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v5 = *a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "bundle");
  (*(void (**)(uint64_t, void **, char *))(*(void *)v5 + 232))(v5, __p, (char *)this + 8);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "name");
  (*(void (**)(uint64_t, void **, char *))(*(void *)v5 + 232))(v5, __p, (char *)this + 32);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "path");
  (*(void (**)(uint64_t, void **, char *))(*(void *)v5 + 232))(v5, __p, (char *)this + 56);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "version");
  (*(void (**)(uint64_t, void **, char *))(*(void *)v5 + 232))(v5, __p, (char *)this + 80);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "product");
  (*(void (**)(uint64_t, void **, char *))(*(void *)v5 + 232))(v5, __p, (char *)this + 104);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "use_case");
  (*(void (**)(uint64_t, void **, char *))(*(void *)v5 + 232))(v5, __p, (char *)this + 128);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "mldb_token");
  (*(void (**)(uint64_t, void **, char *))(*(void *)v5 + 232))(v5, __p, (char *)this + 152);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  for (uint64_t i = (void *)*((void *)this + 24); i; uint64_t i = (void *)*i)
  {
    id v7 = Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::shared();
    std::string::basic_string[abi:ne180100]<0>(__p, "json");
    Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::make(&v9, (uint64_t)v7, __p);
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    for (uint64_t j = i + 7; ; (*(void (**)(uint64_t, void *, void *))(*(void *)v9 + 232))(v9, j + 2, j + 5))
    {
      uint64_t j = (void *)*j;
      if (!j) {
        break;
      }
    }
    (*(void (**)(void, void *, uint64_t *))(*(void *)*a2 + 240))(*a2, i + 2, &v9);
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
  }
}

void sub_192298B54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  uint64_t v19 = *(std::__shared_weak_count **)(v17 + 8);
  if (v19) {
    nitro::nitro_function::nitro_function(v19);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::analysis_result::serialize(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t Espresso::base_kernel::get_blob_file_metadata(uint64_t a1, unsigned __int8 *a2)
{
  int8x8_t v2 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>((void *)(a1 + 24), a2);
  if (!v2) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Could not find details for given blob type.");
  }
  return *((void *)v2 + 5);
}

BOOL Espresso::base_kernel::has_parameter_blob(int8x8_t *a1, unsigned __int8 *a2)
{
  unint64_t v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  int8x8_t v5 = a1[9];
  if (!*(void *)&v5) {
    goto LABEL_18;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  uint64_t v10 = *(unsigned __int8 ***)(*(void *)&a1[8] + 8 * v9);
  if (v10)
  {
    for (uint64_t i = *v10; i; uint64_t i = *(unsigned __int8 **)i)
    {
      unint64_t v12 = *((void *)i + 1);
      if (v6 == v12)
      {
        if (std::equal_to<std::string>::operator()[abi:ne180100](i + 16, a2)) {
          return i != 0;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v12 >= *(void *)&v5) {
            v12 %= *(void *)&v5;
          }
        }
        else
        {
          v12 &= *(void *)&v5 - 1;
        }
        if (v12 != v9) {
          goto LABEL_18;
        }
      }
    }
  }
  else
  {
LABEL_18:
    uint64_t i = 0;
  }
  return i != 0;
}

void *Espresso::inner_product_kernel_cpu::get_f16_weights@<X0>(void *this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = this[86];
  if (v2)
  {
    uint64_t v3 = this[87];
  }
  else
  {
    uint64_t v2 = this[66];
    uint64_t v3 = this[67];
  }
  *a2 = v2;
  a2[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

void *Espresso::inner_product_kernel_cpu::get_weights@<X0>(void *this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = this[70];
  if (v2)
  {
    uint64_t v3 = this[71];
  }
  else
  {
    uint64_t v2 = this[64];
    uint64_t v3 = this[65];
  }
  *a2 = v2;
  a2[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

void Espresso::SerDes::layer_io<Espresso::generic_general_slice_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v5 = (*(uint64_t (**)(void *))(*(void *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::general_slice_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v6, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v6, &v8);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v8, "general_slice");
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_192298E9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_slice_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v5 = (_DWORD *)(*(uint64_t (**)(void *))(*(void *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::slice_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v6, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v6, &v8);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v8, "slice");
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_192298FDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_topk_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v5 = (*(uint64_t (**)(void *))(*(void *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::topk_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v6, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v6, &v8);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v8, "topk");
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_19229911C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t Espresso::inner_product_kernel_cpu::get_biases@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 552);
  *a2 = *(void *)(this + 544);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::general_slice_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::slice_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::topk_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

void Espresso::base_kernel::get_parameter_blob<unsigned short,1>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, void *a3@<X8>)
{
  unint64_t v4 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>((void *)(a1 + 64), a2);
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Unsupported blob_key for kernel parameter.");
  }
  uint64_t v5 = v4;
  unint64_t v6 = (std::__shared_weak_count *)*((void *)v4 + 5);
  char v7 = (std::__shared_weak_count *)*((void *)v5 + 6);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v6) {
    goto LABEL_14;
  }
  if (!v6) {
    goto LABEL_14;
  }
  uint64_t v8 = v6;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v9 = ((uint64_t (*)(std::__shared_weak_count *))v6->__on_zero_shared_weak)(v6);
  unint64_t v6 = v7;
  if (v9 != 1 || (shared_owners = v8[7].__shared_owners_, unint64_t v6 = v7, !shared_owners))
  {
LABEL_14:
    *a3 = 0;
    a3[1] = 0;
    goto LABEL_15;
  }
  char v11 = *(const void **)(shared_owners + 56);
  if (v11)
  {
    if (v12)
    {
      uint64_t v13 = *(void *)(shared_owners + 64);
      *a3 = v12;
      a3[1] = v13;
      unint64_t v6 = v7;
      if (v13)
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
        goto LABEL_23;
      }
LABEL_15:
      if (!v6) {
        goto LABEL_17;
      }
      goto LABEL_16;
    }
  }
  *a3 = 0;
  a3[1] = 0;
LABEL_23:
  unint64_t v6 = v7;
  if (v7) {
LABEL_16:
  }
    nitro::nitro_function::nitro_function(v6);
LABEL_17:
  if (v7)
  {
    nitro::nitro_function::nitro_function(v7);
  }
}

void sub_19229932C(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    nitro::nitro_function::nitro_function(v1);
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_9,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_9>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::operator()()
{
}

void std::make_unique[abi:ne180100]<Espresso::AOT::Backends::CostModel::BaseMatmulOpEstimator,char const(&)[7],char const(&)[5]>()
{
}

void sub_1922995D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (v20[31] < 0) {
    operator delete(*v21);
  }
  Espresso::AOT::AbstractMILOpResourceEstimator::~AbstractMILOpResourceEstimator((Espresso::AOT::AbstractMILOpResourceEstimator *)v20);
  operator delete(__p);
  if (v22 < 0) {
    operator delete(a15);
  }
  MEMORY[0x192FF16B0](v20, 0x1093C403F48558ALL);
  _Unwind_Resume(a1);
}

void Espresso::AOT::E5BackendFlexibleShapeTransformer::Run(uint64_t a1@<X1>, uint64_t *a2@<X2>, void *a3@<X8>)
{
  uint64_t v421 = 0x2B2382A400000000;
  long long v422 = 0u;
  long long v423 = 0u;
  uint64_t v5 = kdebug_trace();
  if (!Espresso::AOT::E5BackendFlexibleShapeTransformer::HasAnEntryPointWithFlexibleShapeAttribute(v5, a1, a2))
  {
    (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)a1 + 32))(v437, a1);
    uint64_t v308 = *(void *)v437;
    *(void *)long long v437 = 0;
    *a3 = v308;
    a3[2] = 0;
    a3[3] = 0;
    a3[1] = 0;
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a3 + 1, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
    uint64_t v309 = *(void *)v437;
    *(void *)long long v437 = 0;
    if (v309) {
      (*(void (**)(uint64_t))(*(void *)v309 + 8))(v309);
    }
LABEL_705:
    kdebug_trace();
    return;
  }
  uint64_t v374 = (MIL::IRObject *)a1;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 48))(&v419, a1);
  long long v417 = 0;
  std::string v416 = 0;
  unint64_t v418 = 0;
  *(_OWORD *)v413 = 0u;
  *(_OWORD *)uint64_t v414 = 0u;
  int v415 = 1065353216;
  *(_OWORD *)v410 = 0u;
  *(_OWORD *)uint64_t v411 = 0u;
  int v412 = 1065353216;
  v409[0] = 0;
  v409[1] = 0;
  uint64_t v408 = v409;
  uint64_t v370 = a2[1];
  if (*a2 != v370)
  {
    uint64_t v6 = *a2;
    while (1)
    {
      uint64_t v371 = v6;
      MIL::IRProgram::GetFunction();
      (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 48))(__p, a1);
      MIL::Attributes::FlexibleShapeInfo::Make();
      char v7 = (std::__shared_weak_count *)__p[1];
      if (__p[1] && !atomic_fetch_add((atomic_ullong *volatile)__p[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
      uint64_t EnumeratedShapes = MIL::Attributes::FlexibleShapeInfo::GetEnumeratedShapes(v407);
      std::unordered_map<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>::unordered_map((uint64_t)&v404, EnumeratedShapes);
      MIL::Attributes::FlexibleShapeInfo::TryGetRangeShapes(&v402, v407);
      if (!v406) {
        break;
      }
      if (v402)
      {
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        uint64_t v365 = std::string::append((std::string *)v437, " has both enumerated and range shape configs which is not supported.");
        long long v366 = *(_OWORD *)&v365->__r_.__value_.__l.__data_;
        v380[0] = (void *)v365->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string __p = v366;
        v365->__r_.__value_.__l.__size_ = 0;
        v365->__r_.__value_.__r.__words[2] = 0;
        v365->__r_.__value_.__r.__words[0] = 0;
        std::logic_error::logic_error(exception, (const std::string *)__p);
        exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
        __cxa_throw(exception, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
      }
      memset(v435, 0, sizeof(v435));
      int v436 = 1065353216;
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&v408, (const void **)v371, v371);
      if (*(char *)(v371 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v401, *(const std::string::value_type **)v371, *(void *)(v371 + 8));
      }
      else
      {
        long long v9 = *(_OWORD *)v371;
        v401.__r_.__value_.__r.__words[2] = *(void *)(v371 + 16);
        *(_OWORD *)&v401.__r_.__value_.__l.__data_ = v9;
      }
      (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)a1 + 48))(&v433, a1);
      uint64_t Function = MIL::IRProgram::GetFunction();
      uint64_t v11 = MIL::Attributes::FlexibleShapeInfo::GetEnumeratedShapes(v407);
      MIL::Attributes::FlexibleShapeInfo::TryGetDefaultShapes((uint64_t *)&v432, v407);
      *(_OWORD *)std::string __p = 0u;
      *(_OWORD *)int64_t v380 = 0u;
      int v381 = 1065353216;
      v425[1] = 0;
      v426[0] = 0;
      v425[0] = (MIL::Builder::ProgramBuilder *)&v425[1];
      unint64_t v12 = *(uint64_t **)(v11 + 16);
      if (!v12)
      {
        char v375 = 0;
        goto LABEL_183;
      }
      char v375 = 0;
      do
      {
        memset(v437, 0, sizeof(v437));
        int v438 = 1065353216;
        v398[1] = 0;
        v399[0] = 0;
        v398[0] = &v398[1];
        long long v443 = *(_OWORD *)&v433.__r_.__value_.__l.__data_;
        if (v433.__r_.__value_.__l.__size_) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v433.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
        }
        MIL::Builder::FunctionBuilder::Make();
        uint64_t v13 = (std::__shared_weak_count *)*((void *)&v443 + 1);
        if (*((void *)&v443 + 1)
          && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v443 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
          std::string::size_type v377 = v12;
          id v14 = (unsigned __int8 *)v12[7];
          if (!v14) {
            goto LABEL_24;
          }
LABEL_72:
          while (2)
          {
            *(void *)&long long v439 = v14 + 16;
            uint64_t v35 = std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v437, v14 + 16, (uint64_t)&std::piecewise_construct, (long long **)&v439);
            BOOL v36 = v35;
            if (v14 != (unsigned __int8 *)v35)
            {
              unint64_t v37 = (char *)*((void *)v14 + 5);
              uint64_t v38 = (unsigned char *)*((void *)v14 + 6);
              size_t v39 = v38 - v37;
              unint64_t v40 = (v38 - v37) >> 3;
              uint64_t v41 = *((void *)v35 + 7);
              uint64_t v42 = (char *)*((void *)v35 + 5);
              if (v40 > (v41 - (uint64_t)v42) >> 3)
              {
                uint64_t v43 = v35 + 40;
                if (v42)
                {
                  *((void *)v35 + 6) = v42;
                  operator delete(v42);
                  uint64_t v41 = 0;
                  void *v43 = 0;
                  *((void *)v36 + 6) = 0;
                  *((void *)v36 + 7) = 0;
                }
                if ((v39 & 0x8000000000000000) != 0) {
                  goto LABEL_707;
                }
                uint64_t v44 = v41 >> 2;
                if (v41 >> 2 <= v40) {
                  uint64_t v44 = (v38 - v37) >> 3;
                }
                unint64_t v45 = (unint64_t)v41 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v44;
                if (v45 >> 61) {
LABEL_707:
                }
                  std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                long long v46 = (char *)operator new(8 * v45);
                uint64_t v42 = v46;
                *((void *)v36 + 6) = v46;
                uint64_t v47 = v36 + 48;
                *((void *)v47 - 1) = v46;
                *((void *)v47 + 1) = &v46[8 * v45];
                if (v38 != v37) {
                  memcpy(v46, v37, v38 - v37);
                }
                goto LABEL_93;
              }
              uint64_t v47 = v35 + 48;
              unint64_t v48 = (unsigned char *)*((void *)v35 + 6);
              unint64_t v49 = (v48 - v42) >> 3;
              if (v49 >= v40)
              {
                if (v38 == v37) {
                  goto LABEL_93;
                }
                uint64_t v51 = (void *)*((void *)v35 + 5);
                unint64_t v50 = (char *)*((void *)v14 + 5);
                goto LABEL_92;
              }
              if (v48 != v42)
              {
                memmove(*((void **)v35 + 5), *((const void **)v14 + 5), v48 - v42);
                uint64_t v42 = *(char **)v47;
              }
              unint64_t v50 = &v37[8 * v49];
              size_t v39 = v38 - v50;
              if (v38 != v50)
              {
                uint64_t v51 = v42;
LABEL_92:
                memmove(v51, v50, v39);
              }
LABEL_93:
              *(void *)uint64_t v47 = &v42[v39];
            }
            uint64_t v52 = (void **)v398[1];
            uint64_t v53 = &v398[1];
            long long v54 = &v398[1];
            if (v398[1])
            {
              int v55 = (char)v14[39];
              if (v55 >= 0) {
                size_t v56 = v14[39];
              }
              else {
                size_t v56 = *((void *)v14 + 3);
              }
              if (v55 >= 0) {
                unint64_t v57 = v14 + 16;
              }
              else {
                unint64_t v57 = (const void *)*((void *)v14 + 2);
              }
              while (1)
              {
                while (1)
                {
                  uint64_t v53 = v52;
                  uint64_t v60 = v52[4];
                  unint64_t v58 = (char *)(v52 + 4);
                  uint64_t v59 = v60;
                  int v61 = v58[23];
                  if (v61 >= 0) {
                    size_t v62 = v58[23];
                  }
                  else {
                    size_t v62 = *((void *)v58 + 1);
                  }
                  if (v61 >= 0) {
                    unint64_t v63 = v58;
                  }
                  else {
                    unint64_t v63 = v59;
                  }
                  if (v62 >= v56) {
                    size_t v64 = v56;
                  }
                  else {
                    size_t v64 = v62;
                  }
                  int v65 = memcmp(v57, v63, v64);
                  BOOL v66 = v56 < v62;
                  if (v65) {
                    BOOL v66 = v65 < 0;
                  }
                  if (!v66) {
                    break;
                  }
                  uint64_t v52 = (void **)*v53;
                  long long v54 = v53;
                  if (!*v53) {
                    goto LABEL_119;
                  }
                }
                int v67 = memcmp(v63, v57, v64);
                BOOL v68 = v62 < v56;
                if (v67) {
                  BOOL v68 = v67 < 0;
                }
                if (!v68) {
                  break;
                }
                uint64_t v52 = (void **)v53[1];
                if (!v52)
                {
                  long long v54 = v53 + 1;
                  goto LABEL_119;
                }
              }
            }
            else
            {
LABEL_119:
              unint64_t v69 = operator new(0x38uLL);
              long long v70 = (std::string *)(v69 + 4);
              if ((char)v14[39] < 0)
              {
                std::string::__init_copy_ctor_external(v70, *((const std::string::value_type **)v14 + 2), *((void *)v14 + 3));
              }
              else
              {
                long long v71 = *((_OWORD *)v14 + 1);
                v69[6] = *((void *)v14 + 4);
                *(_OWORD *)&v70->__r_.__value_.__l.__data_ = v71;
              }
              *unint64_t v69 = 0;
              v69[1] = 0;
              v69[2] = v53;
              void *v54 = v69;
              if (*(void *)v398[0])
              {
                v398[0] = *(void **)v398[0];
                unint64_t v69 = *v54;
              }
              uint64_t v72 = v398[1];
              BOOL v220 = v69 == v398[1];
              *((unsigned char *)v69 + 24) = v69 == v398[1];
              if (!v220)
              {
                do
                {
                  uint64_t v73 = v69[2];
                  if (*(unsigned char *)(v73 + 24)) {
                    break;
                  }
                  unint64_t v74 = *(void **)(v73 + 16);
                  uint64_t v75 = *v74;
                  if (*v74 == v73)
                  {
                    uint64_t v78 = v74[1];
                    if (!v78 || (v79 = *(unsigned __int8 *)(v78 + 24), unint64_t v76 = (unsigned char *)(v78 + 24), v79))
                    {
                      if (*(void **)v73 == v69)
                      {
                        *(unsigned char *)(v73 + 24) = 1;
                        *((unsigned char *)v74 + 24) = 0;
                        uint64_t v82 = *(void *)(v73 + 8);
                        void *v74 = v82;
                        if (v82) {
                          goto LABEL_139;
                        }
                      }
                      else
                      {
                        uint64_t v80 = *(uint64_t **)(v73 + 8);
                        uint64_t v81 = *v80;
                        *(void *)(v73 + 8) = *v80;
                        if (v81)
                        {
                          *(void *)(v81 + 16) = v73;
                          unint64_t v74 = *(void **)(v73 + 16);
                        }
                        v80[2] = (uint64_t)v74;
                        *(void *)(*(void *)(v73 + 16) + 8 * (**(void **)(v73 + 16) != v73)) = v80;
                        *uint64_t v80 = v73;
                        *(void *)(v73 + 16) = v80;
                        unint64_t v74 = (void *)v80[2];
                        uint64_t v73 = *v74;
                        *((unsigned char *)v80 + 24) = 1;
                        *((unsigned char *)v74 + 24) = 0;
                        uint64_t v82 = *(void *)(v73 + 8);
                        void *v74 = v82;
                        if (v82) {
LABEL_139:
                        }
                          *(void *)(v82 + 16) = v74;
                      }
                      *(void *)(v73 + 16) = v74[2];
                      *(void *)(v74[2] + 8 * (*(void *)v74[2] != (void)v74)) = v73;
                      *(void *)(v73 + 8) = v74;
LABEL_69:
                      v74[2] = v73;
                      break;
                    }
                  }
                  else if (!v75 || (int v77 = *(unsigned __int8 *)(v75 + 24), v76 = (unsigned char *)(v75 + 24), v77))
                  {
                    if (*(void **)v73 == v69)
                    {
                      uint64_t v84 = v69[1];
                      *(void *)uint64_t v73 = v84;
                      if (v84)
                      {
                        *(void *)(v84 + 16) = v73;
                        unint64_t v74 = *(void **)(v73 + 16);
                      }
                      v69[2] = v74;
                      *(void *)(*(void *)(v73 + 16) + 8 * (**(void **)(v73 + 16) != v73)) = v69;
                      v69[1] = v73;
                      *(void *)(v73 + 16) = v69;
                      unint64_t v74 = (void *)v69[2];
                      *((unsigned char *)v69 + 24) = 1;
                      *((unsigned char *)v74 + 24) = 0;
                      uint64_t v73 = v74[1];
                      uint64_t v83 = *(void **)v73;
                      v74[1] = *(void *)v73;
                      if (!v83) {
                        goto LABEL_68;
                      }
                    }
                    else
                    {
                      *(unsigned char *)(v73 + 24) = 1;
                      *((unsigned char *)v74 + 24) = 0;
                      uint64_t v73 = v74[1];
                      uint64_t v83 = *(void **)v73;
                      v74[1] = *(void *)v73;
                      if (!v83) {
                        goto LABEL_68;
                      }
                    }
                    v83[2] = v74;
LABEL_68:
                    *(void *)(v73 + 16) = v74[2];
                    *(void *)(v74[2] + 8 * (*(void *)v74[2] != (void)v74)) = v73;
                    *(void *)uint64_t v73 = v74;
                    goto LABEL_69;
                  }
                  *(unsigned char *)(v73 + 24) = 1;
                  unint64_t v69 = v74;
                  *((unsigned char *)v74 + 24) = v74 == v72;
                  unsigned char *v76 = 1;
                }
                while (v74 != v72);
              }
              ++v399[0];
            }
            id v14 = *(unsigned __int8 **)v14;
            if (!v14) {
              goto LABEL_24;
            }
            continue;
          }
        }
        std::string::size_type v377 = v12;
        id v14 = (unsigned __int8 *)v12[7];
        if (v14) {
          goto LABEL_72;
        }
LABEL_24:
        MIL::Builder::FunctionBuilder::CreateFunction((uint64_t *)&v442, (MIL::Builder::FunctionBuilder *)v424);
        (*(void (**)(uint64_t *__return_ptr))(*(void *)v442 + 232))(&v431);
        int v15 = SHIBYTE(v401.__r_.__value_.__r.__words[2]);
        if ((v401.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          size_t size = HIBYTE(v401.__r_.__value_.__r.__words[2]);
        }
        else {
          size_t size = v401.__r_.__value_.__l.__size_;
        }
        unint64_t v17 = size + 1;
        if (size + 1 >= 0x7FFFFFFFFFFFFFF8) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        if (v17 >= 0x17)
        {
          uint64_t v19 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v17 | 7) != 0x17) {
            uint64_t v19 = v17 | 7;
          }
          uint64_t v20 = v19 + 1;
          p_dst = (std::string *)operator new(v19 + 1);
          __dst.__r_.__value_.__r.__words[2] = v20 | 0x8000000000000000;
          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
          __dst.__r_.__value_.__l.__size_ = size + 1;
        }
        else
        {
          memset(&__dst, 0, sizeof(__dst));
          p_dst = &__dst;
          *((unsigned char *)&__dst.__r_.__value_.__s + 23) = size + 1;
          if (!size) {
            goto LABEL_38;
          }
        }
        if (v15 >= 0) {
          unint64_t v21 = &v401;
        }
        else {
          unint64_t v21 = (std::string *)v401.__r_.__value_.__r.__words[0];
        }
        memmove(p_dst, v21, size);
LABEL_38:
        *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + size) = 95;
        int v22 = *((char *)v377 + 39);
        if (v22 >= 0) {
          int v23 = (const std::string::value_type *)(v377 + 2);
        }
        else {
          int v23 = (const std::string::value_type *)v377[2];
        }
        if (v22 >= 0) {
          std::string::size_type v24 = *((unsigned __int8 *)v377 + 39);
        }
        else {
          std::string::size_type v24 = v377[3];
        }
        long long v25 = std::string::append(&__dst, v23, v24);
        long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
        std::string::size_type v440 = v25->__r_.__value_.__r.__words[2];
        long long v439 = v26;
        v25->__r_.__value_.__l.__size_ = 0;
        v25->__r_.__value_.__r.__words[2] = 0;
        v25->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          uint64_t v27 = v417;
          if ((unint64_t)v417 >= v418)
          {
LABEL_50:
            long long v417 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v416, (uint64_t)&v439);
            std::string::size_type v29 = v433.__r_.__value_.__l.__size_;
            long long v441 = *(_OWORD *)&v433.__r_.__value_.__l.__data_;
            if (!v433.__r_.__value_.__l.__size_) {
              goto LABEL_52;
            }
            goto LABEL_51;
          }
        }
        else
        {
          uint64_t v27 = v417;
          if ((unint64_t)v417 >= v418) {
            goto LABEL_50;
          }
        }
        if (SHIBYTE(v440) < 0)
        {
          std::string::__init_copy_ctor_external(v27, (const std::string::value_type *)v439, *((std::string::size_type *)&v439 + 1));
          long long v417 = v27 + 1;
          std::string::size_type v29 = v433.__r_.__value_.__l.__size_;
          long long v441 = *(_OWORD *)&v433.__r_.__value_.__l.__data_;
          if (!v433.__r_.__value_.__l.__size_) {
            goto LABEL_52;
          }
LABEL_51:
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v29 + 8), 1uLL, memory_order_relaxed);
          goto LABEL_52;
        }
        long long v28 = v439;
        v27->__r_.__value_.__r.__words[2] = v440;
        *(_OWORD *)&v27->__r_.__value_.__l.__data_ = v28;
        long long v417 = v27 + 1;
        std::string::size_type v29 = v433.__r_.__value_.__l.__size_;
        long long v441 = *(_OWORD *)&v433.__r_.__value_.__l.__data_;
        if (v433.__r_.__value_.__l.__size_) {
          goto LABEL_51;
        }
LABEL_52:
        uint64_t v428 = v431;
        if (v431) {
          operator new();
        }
        long long v429 = 0;
        uint64_t v431 = 0;
        MIL::Builder::FunctionBuilder::Make();
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v439;
        long long v30 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v413, (uint64_t)&v439, (uint64_t)&std::piecewise_construct, (long long **)&__dst);
        if (v430) {
          operator new();
        }
        std::string::size_type v430 = 0;
        long long v31 = (std::__shared_weak_count *)v30[6];
        v30[5] = 0;
        v30[6] = 0;
        if (v31 && !atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
          std::string::size_type v32 = v430;
          std::string::size_type v430 = 0;
          if (!v32) {
            goto LABEL_60;
          }
LABEL_59:
          (*(void (**)(std::string::size_type))(*(void *)v32 + 8))(v32);
          goto LABEL_60;
        }
        std::string::size_type v32 = v430;
        std::string::size_type v430 = 0;
        if (v32) {
          goto LABEL_59;
        }
LABEL_60:
        uint64_t v33 = v429;
        if (v429 && !atomic_fetch_add(&v429->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
          unint64_t v34 = (std::__shared_weak_count *)*((void *)&v441 + 1);
          if (!*((void *)&v441 + 1)) {
            goto LABEL_153;
          }
        }
        else
        {
          unint64_t v34 = (std::__shared_weak_count *)*((void *)&v441 + 1);
          if (!*((void *)&v441 + 1)) {
            goto LABEL_153;
          }
        }
        if (!atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
        }
LABEL_153:
        if ((v432.__r_.__value_.__r.__words[0] == 0) | v375 & 1)
        {
LABEL_167:
          if ((SHIBYTE(v440) & 0x80000000) == 0)
          {
LABEL_168:
            uint64_t v90 = v431;
            uint64_t v431 = 0;
            if (!v90) {
              goto LABEL_170;
            }
            goto LABEL_169;
          }
        }
        else
        {
          std::string::size_type v85 = v432.__r_.__value_.__r.__words[0] + 16;
          while (1)
          {
            std::string::size_type v85 = *(void *)v85;
            if (!v85) {
              break;
            }
            if (!std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::find<std::string>(v437, v85 + 16))
            {
              char v375 = 0;
              goto LABEL_167;
            }
            __dst.__r_.__value_.__r.__words[0] = v85 + 16;
            unint64_t v87 = std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v437, (unsigned __int8 *)(v85 + 16), (uint64_t)&std::piecewise_construct, (long long **)&__dst)+ 40;
            char v86 = *(const void **)v87;
            size_t v88 = *((void *)v87 + 1) - *(void *)v87;
            uint64_t v89 = *(const void **)(v85 + 40);
            if (v88 != *(void *)(v85 + 48) - (void)v89 || memcmp(v86, v89, v88))
            {
              char v375 = 0;
              if ((SHIBYTE(v440) & 0x80000000) == 0) {
                goto LABEL_168;
              }
              goto LABEL_160;
            }
          }
          int v381 = v438;
          std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,void *> *>>(__p, *(char **)&v437[16], 0);
          std::__tree<std::string>::__assign_multi<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>((uint64_t **)v425, (void *)v398[0], &v398[1]);
          char v375 = 1;
          if ((SHIBYTE(v440) & 0x80000000) == 0) {
            goto LABEL_168;
          }
        }
LABEL_160:
        operator delete((void *)v439);
        uint64_t v90 = v431;
        uint64_t v431 = 0;
        if (v90) {
LABEL_169:
        }
          (*(void (**)(uint64_t))(*(void *)v90 + 8))(v90);
LABEL_170:
        uint64_t v91 = v442;
        long long v442 = 0;
        if (v91) {
          (*(void (**)(MIL::Builder::FunctionBuilder *))(*(void *)v91 + 8))(v91);
        }
        uint64_t v92 = v424;
        *(void *)&long long v424 = 0;
        if (v92) {
          (*(void (**)(uint64_t))(*(void *)v92 + 8))(v92);
        }
        std::__tree<std::string>::destroy((uint64_t)v398, (char *)v398[1]);
        uint64_t v93 = *(char **)&v437[16];
        if (*(void *)&v437[16])
        {
          do
          {
            uint64_t v95 = *(char **)v93;
            uint64_t v96 = (void *)*((void *)v93 + 5);
            if (v96)
            {
              *((void *)v93 + 6) = v96;
              operator delete(v96);
            }
            if (v93[39] < 0) {
              operator delete(*((void **)v93 + 2));
            }
            operator delete(v93);
            uint64_t v93 = v95;
          }
          while (v95);
        }
        size_t v94 = *(void **)v437;
        *(void *)long long v437 = 0;
        if (v94) {
          operator delete(v94);
        }
        unint64_t v12 = (uint64_t *)*v377;
      }
      while (*v377);
LABEL_183:
      if (!v432.__r_.__value_.__r.__words[0]) {
        goto LABEL_191;
      }
      *(_OWORD *)long long v398 = *(_OWORD *)&v433.__r_.__value_.__l.__data_;
      if (v433.__r_.__value_.__l.__size_) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v433.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
      }
      MIL::Builder::FunctionBuilder::Make();
      unint64_t v97 = (std::__shared_weak_count *)v398[1];
      if (!v398[1] || atomic_fetch_add((atomic_ullong *volatile)v398[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
      {
        uint64_t v98 = *(unsigned __int8 **)(v432.__r_.__value_.__r.__words[0] + 16);
        if (v98) {
          goto LABEL_227;
        }
        goto LABEL_189;
      }
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
      uint64_t v98 = *(unsigned __int8 **)(v432.__r_.__value_.__r.__words[0] + 16);
      if (v98)
      {
LABEL_227:
        while (1)
        {
          *(void *)long long v437 = v98 + 16;
          uint64_t v112 = std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)__p, v98 + 16, (uint64_t)&std::piecewise_construct, (long long **)v437);
          BOOL v113 = v112;
          if (v98 != (unsigned __int8 *)v112) {
            break;
          }
LABEL_249:
          uint64_t v129 = v425[1];
          uint64_t v130 = &v425[1];
          uint64_t v131 = &v425[1];
          if (v425[1])
          {
            int v132 = (char)v98[39];
            if (v132 >= 0) {
              size_t v133 = v98[39];
            }
            else {
              size_t v133 = *((void *)v98 + 3);
            }
            if (v132 >= 0) {
              long long v134 = v98 + 16;
            }
            else {
              long long v134 = (const void *)*((void *)v98 + 2);
            }
            while (1)
            {
              while (1)
              {
                uint64_t v130 = (MIL::Builder::ProgramBuilder **)v129;
                uint64_t v137 = (const void *)*((void *)v129 + 4);
                uint64_t v135 = (char *)v129 + 32;
                uint64_t v136 = v137;
                int v138 = v135[23];
                if (v138 >= 0) {
                  size_t v139 = v135[23];
                }
                else {
                  size_t v139 = *((void *)v135 + 1);
                }
                if (v138 >= 0) {
                  uint64_t v140 = v135;
                }
                else {
                  uint64_t v140 = v136;
                }
                if (v139 >= v133) {
                  size_t v141 = v133;
                }
                else {
                  size_t v141 = v139;
                }
                int v142 = memcmp(v134, v140, v141);
                BOOL v143 = v133 < v139;
                if (v142) {
                  BOOL v143 = v142 < 0;
                }
                if (!v143) {
                  break;
                }
                uint64_t v129 = *v130;
                uint64_t v131 = v130;
                if (!*v130) {
                  goto LABEL_274;
                }
              }
              int v144 = memcmp(v140, v134, v141);
              BOOL v145 = v139 < v133;
              if (v144) {
                BOOL v145 = v144 < 0;
              }
              if (!v145) {
                break;
              }
              uint64_t v129 = v130[1];
              if (!v129)
              {
                uint64_t v131 = v130 + 1;
                goto LABEL_274;
              }
            }
          }
          else
          {
LABEL_274:
            uint64_t v146 = (MIL::Builder::ProgramBuilder *)operator new(0x38uLL);
            uint64_t v147 = (std::string *)((char *)v146 + 32);
            if ((char)v98[39] < 0)
            {
              std::string::__init_copy_ctor_external(v147, *((const std::string::value_type **)v98 + 2), *((void *)v98 + 3));
            }
            else
            {
              long long v148 = *((_OWORD *)v98 + 1);
              *((void *)v146 + 6) = *((void *)v98 + 4);
              *(_OWORD *)&v147->__r_.__value_.__l.__data_ = v148;
            }
            *(void *)uint64_t v146 = 0;
            *((void *)v146 + 1) = 0;
            *((void *)v146 + 2) = v130;
            MIL::MILContext *v131 = v146;
            if (*(void *)v425[0])
            {
              v425[0] = *(MIL::Builder::ProgramBuilder **)v425[0];
              uint64_t v146 = *v131;
            }
            uint64_t v149 = v425[1];
            BOOL v220 = v146 == v425[1];
            *((unsigned char *)v146 + 24) = v146 == v425[1];
            if (!v220)
            {
              do
              {
                uint64_t v150 = *((void *)v146 + 2);
                if (*(unsigned char *)(v150 + 24)) {
                  break;
                }
                uint64_t v151 = *(MIL::Builder::ProgramBuilder **)(v150 + 16);
                uint64_t v152 = *(void *)v151;
                if (*(void *)v151 == v150)
                {
                  uint64_t v155 = *((void *)v151 + 1);
                  if (!v155 || (int v156 = *(unsigned __int8 *)(v155 + 24), v153 = (unsigned char *)(v155 + 24), v156))
                  {
                    if (*(MIL::Builder::ProgramBuilder **)v150 == v146)
                    {
                      *(unsigned char *)(v150 + 24) = 1;
                      *((unsigned char *)v151 + 24) = 0;
                      uint64_t v159 = *(void *)(v150 + 8);
                      *(void *)uint64_t v151 = v159;
                      if (v159) {
                        goto LABEL_294;
                      }
                    }
                    else
                    {
                      BOOL v157 = *(uint64_t **)(v150 + 8);
                      uint64_t v158 = *v157;
                      *(void *)(v150 + 8) = *v157;
                      if (v158)
                      {
                        *(void *)(v158 + 16) = v150;
                        uint64_t v151 = *(MIL::Builder::ProgramBuilder **)(v150 + 16);
                      }
                      v157[2] = (uint64_t)v151;
                      *(void *)(*(void *)(v150 + 16) + 8 * (**(void **)(v150 + 16) != v150)) = v157;
                      *BOOL v157 = v150;
                      *(void *)(v150 + 16) = v157;
                      uint64_t v151 = (MIL::Builder::ProgramBuilder *)v157[2];
                      uint64_t v150 = *(void *)v151;
                      *((unsigned char *)v157 + 24) = 1;
                      *((unsigned char *)v151 + 24) = 0;
                      uint64_t v159 = *(void *)(v150 + 8);
                      *(void *)uint64_t v151 = v159;
                      if (v159) {
LABEL_294:
                      }
                        *(void *)(v159 + 16) = v151;
                    }
                    *(void *)(v150 + 16) = *((void *)v151 + 2);
                    *(void *)(*((void *)v151 + 2) + 8 * (**((void **)v151 + 2) != (void)v151)) = v150;
                    *(void *)(v150 + 8) = v151;
LABEL_224:
                    *((void *)v151 + 2) = v150;
                    break;
                  }
                }
                else if (!v152 || (int v154 = *(unsigned __int8 *)(v152 + 24), v153 = (unsigned char *)(v152 + 24), v154))
                {
                  if (*(MIL::Builder::ProgramBuilder **)v150 == v146)
                  {
                    uint64_t v161 = *((void *)v146 + 1);
                    *(void *)uint64_t v150 = v161;
                    if (v161)
                    {
                      *(void *)(v161 + 16) = v150;
                      uint64_t v151 = *(MIL::Builder::ProgramBuilder **)(v150 + 16);
                    }
                    *((void *)v146 + 2) = v151;
                    *(void *)(*(void *)(v150 + 16) + 8 * (**(void **)(v150 + 16) != v150)) = v146;
                    *((void *)v146 + 1) = v150;
                    *(void *)(v150 + 16) = v146;
                    uint64_t v151 = (MIL::Builder::ProgramBuilder *)*((void *)v146 + 2);
                    *((unsigned char *)v146 + 24) = 1;
                    *((unsigned char *)v151 + 24) = 0;
                    uint64_t v150 = *((void *)v151 + 1);
                    uint64_t v160 = *(MIL::Builder::ProgramBuilder **)v150;
                    *((void *)v151 + 1) = *(void *)v150;
                    if (!v160) {
                      goto LABEL_223;
                    }
                  }
                  else
                  {
                    *(unsigned char *)(v150 + 24) = 1;
                    *((unsigned char *)v151 + 24) = 0;
                    uint64_t v150 = *((void *)v151 + 1);
                    uint64_t v160 = *(MIL::Builder::ProgramBuilder **)v150;
                    *((void *)v151 + 1) = *(void *)v150;
                    if (!v160) {
                      goto LABEL_223;
                    }
                  }
                  *((void *)v160 + 2) = v151;
LABEL_223:
                  *(void *)(v150 + 16) = *((void *)v151 + 2);
                  *(void *)(*((void *)v151 + 2) + 8 * (**((void **)v151 + 2) != (void)v151)) = v150;
                  *(void *)uint64_t v150 = v151;
                  goto LABEL_224;
                }
                *(unsigned char *)(v150 + 24) = 1;
                uint64_t v146 = v151;
                *((unsigned char *)v151 + 24) = v151 == v149;
                unsigned char *v153 = 1;
              }
              while (v151 != v149);
            }
            ++v426[0];
          }
          uint64_t v98 = *(unsigned __int8 **)v98;
          if (!v98) {
            goto LABEL_189;
          }
        }
        uint64_t v114 = v112 + 40;
        uint64_t v115 = (char *)*((void *)v112 + 5);
        uint64_t v116 = (char *)*((void *)v98 + 5);
        uint64_t v117 = (unsigned char *)*((void *)v98 + 6);
        size_t v118 = v117 - v116;
        unint64_t v119 = (v117 - v116) >> 3;
        uint64_t v120 = *((void *)v112 + 7);
        if (v119 > (v120 - (uint64_t)v115) >> 3)
        {
          if (v115)
          {
            *((void *)v112 + 6) = v115;
            operator delete(v115);
            uint64_t v120 = 0;
            *uint64_t v114 = 0;
            *((void *)v113 + 6) = 0;
            *((void *)v113 + 7) = 0;
          }
          if ((v118 & 0x8000000000000000) != 0) {
            goto LABEL_714;
          }
          uint64_t v121 = v120 >> 2;
          if (v120 >> 2 <= v119) {
            uint64_t v121 = (v117 - v116) >> 3;
          }
          unint64_t v122 = (unint64_t)v120 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v121;
          if (v122 >> 61) {
LABEL_714:
          }
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          uint64_t v123 = (char *)operator new(8 * v122);
          uint64_t v115 = v123;
          *((void *)v113 + 6) = v123;
          uint64_t v124 = (char **)(v113 + 48);
          *(v124 - 1) = v123;
          v124[1] = &v123[8 * v122];
          if (v117 != v116) {
            memcpy(v123, v116, v117 - v116);
          }
          goto LABEL_248;
        }
        uint64_t v124 = (char **)(v112 + 48);
        uint64_t v125 = (unsigned char *)*((void *)v112 + 6);
        unint64_t v126 = (v125 - v115) >> 3;
        if (v126 >= v119)
        {
          if (v117 == v116)
          {
LABEL_248:
            *uint64_t v124 = &v115[v118];
            goto LABEL_249;
          }
          long long v128 = (void *)*((void *)v112 + 5);
          uint64_t v127 = (char *)*((void *)v98 + 5);
        }
        else
        {
          if (v125 != v115)
          {
            memmove(*((void **)v112 + 5), *((const void **)v98 + 5), v125 - v115);
            uint64_t v115 = *v124;
          }
          uint64_t v127 = &v116[8 * v126];
          size_t v118 = v117 - v127;
          if (v117 == v127) {
            goto LABEL_248;
          }
          long long v128 = v115;
        }
        memmove(v128, v127, v118);
        goto LABEL_248;
      }
LABEL_189:
      v437[23] = 0;
      v437[0] = 0;
      uint64_t v99 = v439;
      *(void *)&long long v439 = 0;
      if (v99) {
        (*(void (**)(uint64_t))(*(void *)v99 + 8))(v99);
      }
LABEL_191:
      std::__tree<std::string>::destroy((uint64_t)v425, (char *)v425[1]);
      uint64_t v100 = (char *)v380[0];
      if (v380[0])
      {
        do
        {
          long long v104 = *(char **)v100;
          uint64_t v105 = (void *)*((void *)v100 + 5);
          if (v105)
          {
            *((void *)v100 + 6) = v105;
            operator delete(v105);
          }
          if (v100[39] < 0) {
            operator delete(*((void **)v100 + 2));
          }
          operator delete(v100);
          uint64_t v100 = v104;
        }
        while (v104);
      }
      int v101 = __p[0];
      __p[0] = 0;
      if (v101) {
        operator delete(v101);
      }
      long long v102 = (std::__shared_weak_count *)v432.__r_.__value_.__l.__size_;
      if (v432.__r_.__value_.__l.__size_
        && !atomic_fetch_add((atomic_ullong *volatile)(v432.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
        std::__shared_weak_count::__release_weak(v102);
        uint64_t v103 = (std::__shared_weak_count *)v433.__r_.__value_.__l.__size_;
        if (!v433.__r_.__value_.__l.__size_) {
          goto LABEL_205;
        }
      }
      else
      {
        uint64_t v103 = (std::__shared_weak_count *)v433.__r_.__value_.__l.__size_;
        if (!v433.__r_.__value_.__l.__size_) {
          goto LABEL_205;
        }
      }
      if (!atomic_fetch_add(&v103->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
        std::__shared_weak_count::__release_weak(v103);
      }
LABEL_205:
      if (SHIBYTE(v401.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v401.__r_.__value_.__l.__data_);
        unint64_t v106 = *(char **)&v435[16];
        if (!*(void *)&v435[16]) {
          goto LABEL_209;
        }
      }
      else
      {
        unint64_t v106 = *(char **)&v435[16];
        if (!*(void *)&v435[16]) {
          goto LABEL_209;
        }
      }
      do
      {
        unint64_t v108 = *(char **)v106;
        BOOL v109 = (void *)*((void *)v106 + 5);
        if (v109)
        {
          *((void *)v106 + 6) = v109;
          operator delete(v109);
        }
        if (v106[39] < 0) {
          operator delete(*((void **)v106 + 2));
        }
        operator delete(v106);
        unint64_t v106 = v108;
      }
      while (v108);
LABEL_209:
      if (*(void *)v435)
      {
        operator delete(*(void **)v435);
        BOOL v107 = v403;
        if (!v403) {
          goto LABEL_544;
        }
LABEL_542:
        if (!atomic_fetch_add(&v107->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
          std::__shared_weak_count::__release_weak(v107);
        }
        goto LABEL_544;
      }
LABEL_541:
      BOOL v107 = v403;
      if (v403) {
        goto LABEL_542;
      }
LABEL_544:
      uint64_t v298 = (char *)v405;
      if (v405)
      {
        do
        {
          uint64_t v301 = *(char **)v298;
          uint64_t v302 = (char *)*((void *)v298 + 7);
          if (v302)
          {
            do
            {
              int v304 = *(char **)v302;
              uint64_t v305 = (void *)*((void *)v302 + 5);
              if (v305)
              {
                *((void *)v302 + 6) = v305;
                operator delete(v305);
              }
              if (v302[39] < 0) {
                operator delete(*((void **)v302 + 2));
              }
              operator delete(v302);
              uint64_t v302 = v304;
            }
            while (v304);
          }
          uint64_t v303 = (void *)*((void *)v298 + 5);
          *((void *)v298 + 5) = 0;
          if (v303) {
            operator delete(v303);
          }
          if (v298[39] < 0) {
            operator delete(*((void **)v298 + 2));
          }
          operator delete(v298);
          uint64_t v298 = v301;
        }
        while (v301);
      }
      uint64_t v299 = v404;
      v404 = 0;
      if (v299) {
        operator delete(v299);
      }
      uint8x8_t v300 = v407;
      uint64_t v407 = 0;
      if (v300)
      {
        MIL::Attributes::FlexibleShapeInfo::~FlexibleShapeInfo(v300);
        MEMORY[0x192FF16B0]();
      }
      uint64_t v6 = v371 + 24;
      if (v371 + 24 == v370) {
        goto LABEL_570;
      }
    }
    if (!v402)
    {
      BOOL v110 = v417;
      if ((unint64_t)v417 >= v418)
      {
        long long v417 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v416, v371);
        BOOL v107 = v403;
        if (!v403) {
          goto LABEL_544;
        }
      }
      else
      {
        if (*(char *)(v371 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v417, *(const std::string::value_type **)v371, *(void *)(v371 + 8));
        }
        else
        {
          long long v111 = *(_OWORD *)v371;
          v417->__r_.__value_.__r.__words[2] = *(void *)(v371 + 16);
          *(_OWORD *)&v110->__r_.__value_.__l.__data_ = v111;
        }
        long long v417 = v110 + 1;
        BOOL v107 = v403;
        if (!v403) {
          goto LABEL_544;
        }
      }
      goto LABEL_542;
    }
    *(_OWORD *)long long v398 = 0u;
    *(_OWORD *)uint64_t v399 = 0u;
    int v400 = 1065353216;
    std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&v408, (const void **)v371, v371);
    if (*(char *)(v371 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v397, *(const std::string::value_type **)v371, *(void *)(v371 + 8));
    }
    else
    {
      long long v10 = *(_OWORD *)v371;
      v397.__r_.__value_.__r.__words[2] = *(void *)(v371 + 16);
      *(_OWORD *)&v397.__r_.__value_.__l.__data_ = v10;
    }
    (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)a1 + 48))(&v443, a1);
    uint64_t v369 = MIL::IRProgram::GetFunction();
    long long v441 = v443;
    if (*((void *)&v443 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v443 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    MIL::Builder::FunctionBuilder::Make();
    uint64_t v162 = (std::__shared_weak_count *)*((void *)&v441 + 1);
    if (*((void *)&v441 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v441 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
      std::__shared_weak_count::__release_weak(v162);
    }
    *(_OWORD *)std::string __p = 0u;
    *(_OWORD *)int64_t v380 = 0u;
    int v381 = 1065353216;
    *((void *)&v439 + 1) = 0;
    std::string::size_type v440 = 0;
    *(void *)&long long v439 = (char *)&v439 + 8;
    memset(v437, 0, sizeof(v437));
    int v438 = 1065353216;
    memset(v435, 0, sizeof(v435));
    int v436 = 1065353216;
    MIL::Attributes::FlexibleShapeInfo::TryGetRangeShapes((uint64_t *)v425, v407);
    uint64_t v163 = v425[0];
    uint64_t v164 = (std::__shared_weak_count *)v425[1];
    if (!v425[1] || atomic_fetch_add((atomic_ullong *volatile)v425[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
    {
      uint64_t v165 = *((void *)v163 + 2);
      if (v165) {
        goto LABEL_401;
      }
LABEL_314:
      uint64_t v166 = *(unsigned __int8 **)&v437[16];
      if (*(void *)&v437[16])
      {
        do
        {
          v425[0] = (MIL::Builder::ProgramBuilder *)(v166 + 16);
          int v170 = std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)__p, v166 + 16, (uint64_t)&std::piecewise_construct, (long long **)v425);
          if (v166 != (unsigned __int8 *)v170) {
            std::vector<MIL::IRDimension const*>::__assign_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(v170 + 40, *((char **)v166 + 5), *((void *)v166 + 6), (uint64_t)(*((void *)v166 + 6) - *((void *)v166 + 5)) >> 3);
          }
          int v171 = (char *)*((void *)&v439 + 1);
          uint64_t v172 = (char **)&v439 + 1;
          std::string::size_type v173 = (char **)&v439 + 1;
          if (*((void *)&v439 + 1))
          {
            int v174 = (char)v166[39];
            if (v174 >= 0) {
              size_t v175 = v166[39];
            }
            else {
              size_t v175 = *((void *)v166 + 3);
            }
            if (v174 >= 0) {
              int v176 = v166 + 16;
            }
            else {
              int v176 = (const void *)*((void *)v166 + 2);
            }
            while (1)
            {
              while (1)
              {
                uint64_t v172 = (char **)v171;
                int v179 = (const void *)*((void *)v171 + 4);
                int v177 = v171 + 32;
                uint64_t v178 = v179;
                int v180 = *((char *)v177 + 23);
                if (v180 >= 0) {
                  size_t v181 = *((unsigned __int8 *)v177 + 23);
                }
                else {
                  size_t v181 = v177[1];
                }
                if (v180 >= 0) {
                  uint64_t v182 = v177;
                }
                else {
                  uint64_t v182 = v178;
                }
                if (v181 >= v175) {
                  size_t v183 = v175;
                }
                else {
                  size_t v183 = v181;
                }
                int v184 = memcmp(v176, v182, v183);
                BOOL v185 = v175 < v181;
                if (v184) {
                  BOOL v185 = v184 < 0;
                }
                if (!v185) {
                  break;
                }
                int v171 = *v172;
                std::string::size_type v173 = v172;
                if (!*v172) {
                  goto LABEL_351;
                }
              }
              int v186 = memcmp(v182, v176, v183);
              BOOL v187 = v181 < v175;
              if (v186) {
                BOOL v187 = v186 < 0;
              }
              if (!v187) {
                break;
              }
              int v171 = v172[1];
              if (!v171)
              {
                std::string::size_type v173 = v172 + 1;
                goto LABEL_351;
              }
            }
          }
          else
          {
LABEL_351:
            uint64_t v188 = (char *)operator new(0x38uLL);
            uint64_t v189 = (std::string *)(v188 + 32);
            if ((char)v166[39] < 0)
            {
              std::string::__init_copy_ctor_external(v189, *((const std::string::value_type **)v166 + 2), *((void *)v166 + 3));
            }
            else
            {
              long long v190 = *((_OWORD *)v166 + 1);
              *((void *)v188 + 6) = *((void *)v166 + 4);
              *(_OWORD *)&v189->__r_.__value_.__l.__data_ = v190;
            }
            *(void *)uint64_t v188 = 0;
            *((void *)v188 + 1) = 0;
            *((void *)v188 + 2) = v172;
            *std::string::size_type v173 = v188;
            if (*(void *)v439)
            {
              *(void *)&long long v439 = *(void *)v439;
              uint64_t v188 = *v173;
            }
            uint64_t v191 = (char *)*((void *)&v439 + 1);
            v188[24] = v188 == *((char **)&v439 + 1);
            if (v188 != v191)
            {
              do
              {
                uint64_t v192 = *((void *)v188 + 2);
                if (*(unsigned char *)(v192 + 24)) {
                  break;
                }
                int v193 = *(char **)(v192 + 16);
                uint64_t v194 = *(void *)v193;
                if (*(void *)v193 == v192)
                {
                  uint64_t v197 = *((void *)v193 + 1);
                  if (!v197 || (v198 = *(unsigned __int8 *)(v197 + 24), BOOL v195 = (unsigned char *)(v197 + 24), v198))
                  {
                    if (*(char **)v192 == v188)
                    {
                      *(unsigned char *)(v192 + 24) = 1;
                      v193[24] = 0;
                      uint64_t v201 = *(void *)(v192 + 8);
                      *(void *)int v193 = v201;
                      if (v201) {
                        goto LABEL_370;
                      }
                    }
                    else
                    {
                      uint64_t v199 = *(uint64_t **)(v192 + 8);
                      uint64_t v200 = *v199;
                      *(void *)(v192 + 8) = *v199;
                      if (v200)
                      {
                        *(void *)(v200 + 16) = v192;
                        int v193 = *(char **)(v192 + 16);
                      }
                      v199[2] = (uint64_t)v193;
                      *(void *)(*(void *)(v192 + 16) + 8 * (**(void **)(v192 + 16) != v192)) = v199;
                      uint64_t *v199 = v192;
                      *(void *)(v192 + 16) = v199;
                      int v193 = (char *)v199[2];
                      uint64_t v192 = *(void *)v193;
                      *((unsigned char *)v199 + 24) = 1;
                      v193[24] = 0;
                      uint64_t v201 = *(void *)(v192 + 8);
                      *(void *)int v193 = v201;
                      if (v201) {
LABEL_370:
                      }
                        *(void *)(v201 + 16) = v193;
                    }
                    *(void *)(v192 + 16) = *((void *)v193 + 2);
                    *(void *)(*((void *)v193 + 2) + 8 * (**((void **)v193 + 2) != (void)v193)) = v192;
                    *(void *)(v192 + 8) = v193;
LABEL_321:
                    *((void *)v193 + 2) = v192;
                    break;
                  }
                }
                else if (!v194 || (v196 = *(unsigned __int8 *)(v194 + 24), BOOL v195 = (unsigned char *)(v194 + 24), v196))
                {
                  if (*(char **)v192 == v188)
                  {
                    uint64_t v203 = *((void *)v188 + 1);
                    *(void *)uint64_t v192 = v203;
                    if (v203)
                    {
                      *(void *)(v203 + 16) = v192;
                      int v193 = *(char **)(v192 + 16);
                    }
                    *((void *)v188 + 2) = v193;
                    *(void *)(*(void *)(v192 + 16) + 8 * (**(void **)(v192 + 16) != v192)) = v188;
                    *((void *)v188 + 1) = v192;
                    *(void *)(v192 + 16) = v188;
                    int v193 = (char *)*((void *)v188 + 2);
                    v188[24] = 1;
                    v193[24] = 0;
                    uint64_t v192 = *((void *)v193 + 1);
                    int v202 = *(char **)v192;
                    *((void *)v193 + 1) = *(void *)v192;
                    if (!v202) {
                      goto LABEL_320;
                    }
                  }
                  else
                  {
                    *(unsigned char *)(v192 + 24) = 1;
                    v193[24] = 0;
                    uint64_t v192 = *((void *)v193 + 1);
                    int v202 = *(char **)v192;
                    *((void *)v193 + 1) = *(void *)v192;
                    if (!v202) {
                      goto LABEL_320;
                    }
                  }
                  *((void *)v202 + 2) = v193;
LABEL_320:
                  *(void *)(v192 + 16) = *((void *)v193 + 2);
                  *(void *)(*((void *)v193 + 2) + 8 * (**((void **)v193 + 2) != (void)v193)) = v192;
                  *(void *)uint64_t v192 = v193;
                  goto LABEL_321;
                }
                *(unsigned char *)(v192 + 24) = 1;
                uint64_t v188 = v193;
                v193[24] = v193 == v191;
                *BOOL v195 = 1;
              }
              while (v193 != v191);
            }
            ++v440;
          }
          uint64_t v166 = *(unsigned __int8 **)v166;
        }
        while (v166);
      }
      HIBYTE(v426[0]) = 0;
      LOBYTE(v425[0]) = 0;
      MIL::Builder::FunctionBuilder::CreateFunction(&v431, v442);
      (*(void (**)(std::string::size_type *__return_ptr))(*(void *)v431 + 232))(&v430);
      MIL::Attributes::FlexibleShapeInfo::Replace();
      uint64_t v167 = v417;
      if ((unint64_t)v417 >= v418)
      {
        long long v417 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v416, (uint64_t)&v397);
        uint64_t v169 = *((void *)&v443 + 1);
        *(_OWORD *)&v433.__r_.__value_.__l.__data_ = v443;
        if (!*((void *)&v443 + 1)) {
          goto LABEL_383;
        }
      }
      else if (SHIBYTE(v397.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(v417, v397.__r_.__value_.__l.__data_, v397.__r_.__value_.__l.__size_);
        long long v417 = v167 + 1;
        uint64_t v169 = *((void *)&v443 + 1);
        *(_OWORD *)&v433.__r_.__value_.__l.__data_ = v443;
        if (!*((void *)&v443 + 1))
        {
LABEL_383:
          v432.__r_.__value_.__r.__words[0] = v430;
          if (v430) {
            operator new();
          }
          *(_OWORD *)&v432.__r_.__value_.__l.__data_ = 0uLL;
          std::string::size_type v430 = 0;
          MIL::Builder::FunctionBuilder::Make();
          v425[0] = (MIL::Builder::ProgramBuilder *)&v397;
          unint64_t v204 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v413, (uint64_t)&v397, (uint64_t)&std::piecewise_construct, (long long **)v425);
          if (__dst.__r_.__value_.__r.__words[0]) {
            operator new();
          }
          __dst.__r_.__value_.__r.__words[0] = 0;
          uint64_t v205 = (std::__shared_weak_count *)v204[6];
          v204[5] = 0;
          v204[6] = 0;
          if (v205 && !atomic_fetch_add(&v205->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v205->__on_zero_shared)(v205);
            std::__shared_weak_count::__release_weak(v205);
            std::string::size_type v206 = __dst.__r_.__value_.__r.__words[0];
            __dst.__r_.__value_.__r.__words[0] = 0;
            if (!v206) {
              goto LABEL_391;
            }
          }
          else
          {
            std::string::size_type v206 = __dst.__r_.__value_.__r.__words[0];
            __dst.__r_.__value_.__r.__words[0] = 0;
            if (!v206)
            {
LABEL_391:
              uint64_t v207 = (std::__shared_weak_count *)v432.__r_.__value_.__l.__size_;
              if (v432.__r_.__value_.__l.__size_
                && !atomic_fetch_add((atomic_ullong *volatile)(v432.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v207->__on_zero_shared)(v207);
                std::__shared_weak_count::__release_weak(v207);
                uint64_t v208 = (std::__shared_weak_count *)v433.__r_.__value_.__l.__size_;
                if (!v433.__r_.__value_.__l.__size_) {
                  goto LABEL_467;
                }
              }
              else
              {
                uint64_t v208 = (std::__shared_weak_count *)v433.__r_.__value_.__l.__size_;
                if (!v433.__r_.__value_.__l.__size_) {
                  goto LABEL_467;
                }
              }
              if (!atomic_fetch_add(&v208->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v208->__on_zero_shared)(v208);
                std::__shared_weak_count::__release_weak(v208);
              }
LABEL_467:
              MIL::Attributes::FlexibleShapeInfo::TryGetDefaultShapes(&v428, v407);
              if (v428)
              {
                *(_OWORD *)long long v425 = 0u;
                *(_OWORD *)std::string v426 = 0u;
                int v427 = 1065353216;
                uint64_t v264 = *(unsigned __int8 **)(v428 + 16);
                if (!v264) {
                  goto LABEL_486;
                }
                char v265 = 1;
                do
                {
                  while (1)
                  {
                    long long v424 = v443;
                    if (*((void *)&v443 + 1)) {
                      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v443 + 1) + 8), 1uLL, memory_order_relaxed);
                    }
                    MIL::Builder::FunctionBuilder::Make();
                    int v267 = (MIL::Builder::FunctionBuilder *)__dst.__r_.__value_.__r.__words[0];
                    __dst.__r_.__value_.__r.__words[0] = 0;
                    int v268 = v442;
                    long long v442 = v267;
                    if (v268)
                    {
                      (*(void (**)(MIL::Builder::FunctionBuilder *))(*(void *)v268 + 8))(v268);
                      std::string::size_type v269 = __dst.__r_.__value_.__r.__words[0];
                      __dst.__r_.__value_.__r.__words[0] = 0;
                      if (v269) {
                        (*(void (**)(std::string::size_type))(*(void *)v269 + 8))(v269);
                      }
                    }
                    uint8x8_t v270 = (std::__shared_weak_count *)*((void *)&v424 + 1);
                    if (*((void *)&v424 + 1)
                      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v424 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
                    {
                      ((void (*)(std::__shared_weak_count *))v270->__on_zero_shared)(v270);
                      std::__shared_weak_count::__release_weak(v270);
                    }
                    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)(v264 + 16);
                    long long v271 = std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v425, v264 + 16, (uint64_t)&std::piecewise_construct, (long long **)&__dst);
                    if (v264 != (unsigned __int8 *)v271) {
                      std::vector<MIL::IRDimension const*>::__assign_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(v271 + 40, *((char **)v264 + 5), *((void *)v264 + 6), (uint64_t)(*((void *)v264 + 6) - *((void *)v264 + 5)) >> 3);
                    }
                    if (std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::find<std::string>(__p, (uint64_t)(v264 + 16)))
                    {
                      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)(v264 + 16);
                      std::string::size_type v273 = std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)__p, v264 + 16, (uint64_t)&std::piecewise_construct, (long long **)&__dst)+ 40;
                      unint64_t v272 = *(const void **)v273;
                      size_t v274 = *((void *)v273 + 1) - *(void *)v273;
                      std::string::size_type v275 = (const void *)*((void *)v264 + 5);
                      if (v274 == *((void *)v264 + 6) - (void)v275 && !memcmp(v272, v275, v274)) {
                        break;
                      }
                    }
                    char v265 = 0;
                    char v266 = 0;
                    uint64_t v264 = *(unsigned __int8 **)v264;
                    if (!v264) {
                      goto LABEL_490;
                    }
                  }
                  uint64_t v264 = *(unsigned __int8 **)v264;
                }
                while (v264);
                if ((v265 & 1) == 0)
                {
                  char v266 = 0;
                }
                else
                {
LABEL_486:
                  int v427 = v381;
                  std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,void *> *>>(v425, (char *)v380[0], 0);
                  char v266 = 1;
                }
LABEL_490:
                *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 0;
                __dst.__r_.__value_.__s.__data_[0] = 0;
                long long v276 = (char *)v426[0];
                if (v426[0])
                {
                  do
                  {
                    std::string v296 = *(char **)v276;
                    uint64_t v297 = (void *)*((void *)v276 + 5);
                    if (v297)
                    {
                      *((void *)v276 + 6) = v297;
                      operator delete(v297);
                    }
                    if (v276[39] < 0) {
                      operator delete(*((void **)v276 + 2));
                    }
                    operator delete(v276);
                    long long v276 = v296;
                  }
                  while (v296);
                }
                std::string::size_type v277 = v425[0];
                v425[0] = 0;
                if (v277) {
                  operator delete(v277);
                }
              }
              std::string::size_type v278 = v429;
              if (v429 && !atomic_fetch_add(&v429->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v278->__on_zero_shared)(v278);
                std::__shared_weak_count::__release_weak(v278);
                std::string::size_type v279 = v430;
                std::string::size_type v430 = 0;
                if (!v279)
                {
LABEL_497:
                  uint64_t v280 = v431;
                  uint64_t v431 = 0;
                  if (v280) {
                    (*(void (**)(uint64_t))(*(void *)v280 + 8))(v280);
                  }
                  v281 = *(char **)&v435[16];
                  if (*(void *)&v435[16])
                  {
                    do
                    {
                      uint64_t v290 = *(char **)v281;
                      std::string::size_type v291 = (void *)*((void *)v281 + 5);
                      if (v291)
                      {
                        *((void *)v281 + 6) = v291;
                        operator delete(v291);
                      }
                      if (v281[39] < 0) {
                        operator delete(*((void **)v281 + 2));
                      }
                      operator delete(v281);
                      v281 = v290;
                    }
                    while (v290);
                  }
                  v282 = *(void **)v435;
                  *(void *)long long v435 = 0;
                  if (v282) {
                    operator delete(v282);
                  }
                  long long v283 = *(char **)&v437[16];
                  if (*(void *)&v437[16])
                  {
                    do
                    {
                      long long v292 = *(char **)v283;
                      int v293 = (void *)*((void *)v283 + 5);
                      if (v293)
                      {
                        *((void *)v283 + 6) = v293;
                        operator delete(v293);
                      }
                      if (v283[39] < 0) {
                        operator delete(*((void **)v283 + 2));
                      }
                      operator delete(v283);
                      long long v283 = v292;
                    }
                    while (v292);
                  }
                  unint64_t v284 = *(void **)v437;
                  *(void *)long long v437 = 0;
                  if (v284) {
                    operator delete(v284);
                  }
                  std::__tree<std::string>::destroy((uint64_t)&v439, *((char **)&v439 + 1));
                  float v285 = (char *)v380[0];
                  if (v380[0])
                  {
                    do
                    {
                      v294 = *(char **)v285;
                      uint64_t v295 = (void *)*((void *)v285 + 5);
                      if (v295)
                      {
                        *((void *)v285 + 6) = v295;
                        operator delete(v295);
                      }
                      if (v285[39] < 0) {
                        operator delete(*((void **)v285 + 2));
                      }
                      operator delete(v285);
                      float v285 = v294;
                    }
                    while (v294);
                  }
                  v286 = __p[0];
                  __p[0] = 0;
                  if (v286) {
                    operator delete(v286);
                  }
                  std::string::size_type v287 = v442;
                  long long v442 = 0;
                  if (v287) {
                    (*(void (**)(MIL::Builder::FunctionBuilder *))(*(void *)v287 + 8))(v287);
                  }
                  uint64_t v288 = (std::__shared_weak_count *)*((void *)&v443 + 1);
                  if (*((void *)&v443 + 1)
                    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v443 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
                  {
                    ((void (*)(std::__shared_weak_count *))v288->__on_zero_shared)(v288);
                    std::__shared_weak_count::__release_weak(v288);
                    if ((SHIBYTE(v397.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    {
LABEL_513:
                      uint64_t v289 = (char *)v399[0];
                      if (!v399[0])
                      {
LABEL_539:
                        if (v398[0]) {
                          operator delete(v398[0]);
                        }
                        goto LABEL_541;
                      }
                      do
                      {
LABEL_561:
                        uint64_t v306 = *(char **)v289;
                        v307 = (void *)*((void *)v289 + 5);
                        if (v307)
                        {
                          *((void *)v289 + 6) = v307;
                          operator delete(v307);
                        }
                        if (v289[39] < 0) {
                          operator delete(*((void **)v289 + 2));
                        }
                        operator delete(v289);
                        uint64_t v289 = v306;
                      }
                      while (v306);
                      goto LABEL_539;
                    }
                  }
                  else if ((SHIBYTE(v397.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  {
                    goto LABEL_513;
                  }
                  operator delete(v397.__r_.__value_.__l.__data_);
                  uint64_t v289 = (char *)v399[0];
                  if (!v399[0]) {
                    goto LABEL_539;
                  }
                  goto LABEL_561;
                }
              }
              else
              {
                std::string::size_type v279 = v430;
                std::string::size_type v430 = 0;
                if (!v279) {
                  goto LABEL_497;
                }
              }
              (*(void (**)(std::string::size_type))(*(void *)v279 + 8))(v279);
              goto LABEL_497;
            }
          }
          (*(void (**)(std::string::size_type))(*(void *)v206 + 8))(v206);
          goto LABEL_391;
        }
      }
      else
      {
        long long v168 = *(_OWORD *)&v397.__r_.__value_.__l.__data_;
        v417->__r_.__value_.__r.__words[2] = v397.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v167->__r_.__value_.__l.__data_ = v168;
        long long v417 = v167 + 1;
        uint64_t v169 = *((void *)&v443 + 1);
        *(_OWORD *)&v433.__r_.__value_.__l.__data_ = v443;
        if (!*((void *)&v443 + 1)) {
          goto LABEL_383;
        }
      }
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v169 + 8), 1uLL, memory_order_relaxed);
      goto LABEL_383;
    }
    ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
    std::__shared_weak_count::__release_weak(v164);
    uint64_t v165 = *((void *)v163 + 2);
    if (!v165) {
      goto LABEL_314;
    }
LABEL_401:
    while (1)
    {
      uint64_t v373 = (unsigned __int8 *)(v165 + 16);
      v425[1] = 0;
      v425[0] = 0;
      v426[0] = 0;
      memset(&__dst, 0, sizeof(__dst));
      uint64_t v210 = *(void *)(v165 + 40);
      uint64_t v209 = *(void *)(v165 + 48);
      std::string::size_type v376 = (uint64_t *)v165;
      uint64_t v211 = v209 - v210;
      if (v209 != v210)
      {
        if (v211 < 0) {
          goto LABEL_715;
        }
        v425[0] = (MIL::Builder::ProgramBuilder *)operator new(v209 - v210);
        v425[1] = v425[0];
        v426[0] = (char *)v425[0] + 8 * (v211 >> 3);
        uint64_t v213 = v376[5];
        uint64_t v212 = v376[6];
        uint64_t v214 = v212 - v213;
        if (v212 != v213) {
          break;
        }
      }
LABEL_456:
      v433.__r_.__value_.__r.__words[0] = (std::string::size_type)v373;
      uint64_t v262 = std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v437, v373, (uint64_t)&std::piecewise_construct, (long long **)&v433)+ 40;
      if (v262 != (char *)v425) {
        std::vector<MIL::IRDimension const*>::__assign_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(v262, (char *)v425[0], (uint64_t)v425[1], (v425[1] - v425[0]) >> 3);
      }
      v433.__r_.__value_.__r.__words[0] = (std::string::size_type)v373;
      uint64_t v263 = (std::string *)(std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v435, v373, (uint64_t)&std::piecewise_construct, (long long **)&v433)+ 40);
      if (v263 != &__dst) {
        std::vector<MIL::IRDimension const*>::__assign_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>((char *)v263, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_, (uint64_t)(__dst.__r_.__value_.__l.__size_ - __dst.__r_.__value_.__r.__words[0]) >> 3);
      }
      if (__dst.__r_.__value_.__r.__words[0])
      {
        __dst.__r_.__value_.__l.__size_ = __dst.__r_.__value_.__r.__words[0];
        operator delete(__dst.__r_.__value_.__l.__data_);
      }
      if (v425[0])
      {
        v425[1] = v425[0];
        operator delete(v425[0]);
      }
      uint64_t v165 = *v376;
      if (!*v376) {
        goto LABEL_314;
      }
    }
    if (v214 < 0) {
LABEL_715:
    }
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(v212 - v213);
    __dst.__r_.__value_.__l.__size_ = __dst.__r_.__value_.__r.__words[0];
    __dst.__r_.__value_.__r.__words[2] = __dst.__r_.__value_.__r.__words[0] + 8 * (v214 >> 3);
    int v216 = (int *)v376[5];
    uint64_t v215 = (int *)v376[6];
    for (uint64_t i = v215; ; v215 = i)
    {
      if (v216 == v215) {
        goto LABEL_456;
      }
      int v218 = v216[1];
      size_t v219 = (MIL::MILContext *)*v216;
      BOOL v220 = v219 == -1 || v218 == -1;
      if (v220)
      {
        uint64_t v361 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        v362 = std::string::append(&v432, " has unbounded dimension which is not supported. Please consult MIL Framework or milPython on adding a bound for this dimension.");
        long long v363 = *(_OWORD *)&v362->__r_.__value_.__l.__data_;
        v433.__r_.__value_.__r.__words[2] = v362->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v433.__r_.__value_.__l.__data_ = v363;
        v362->__r_.__value_.__l.__size_ = 0;
        v362->__r_.__value_.__r.__words[2] = 0;
        v362->__r_.__value_.__r.__words[0] = 0;
        std::logic_error::logic_error(v361, &v433);
        v361->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
        __cxa_throw(v361, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
      }
      uint64_t v221 = MIL::IRConstantDimension::Make((MIL::IRConstantDimension *)v443, (MIL::MILContext *)v218);
      uint64_t v222 = v221;
      std::string v223 = v425[1];
      if (v425[1] < v426[0])
      {
        *(void *)v425[1] = v221;
        uint64_t v224 = (MIL::Builder::ProgramBuilder *)((char *)v223 + 8);
        goto LABEL_435;
      }
      std::string v225 = v425[0];
      int64_t v226 = v425[1] - v425[0];
      int64_t v227 = (v425[1] - v425[0]) >> 3;
      unint64_t v228 = v227 + 1;
      if ((unint64_t)(v227 + 1) >> 61) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      int64_t v229 = (MIL::Builder::ProgramBuilder *)v426[0] - v425[0];
      if (((MIL::Builder::ProgramBuilder *)v426[0] - v425[0]) >> 2 > v228) {
        unint64_t v228 = v229 >> 2;
      }
      if ((unint64_t)v229 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v230 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v230 = v228;
      }
      if (v230)
      {
        if (v230 >> 61) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        uint64_t v231 = operator new(8 * v230);
        uint64_t v232 = (MIL::Builder::ProgramBuilder *)&v231[8 * v227];
        *(void *)uint64_t v232 = v222;
        uint64_t v224 = (MIL::Builder::ProgramBuilder *)((char *)v232 + 8);
        if (v223 == v225)
        {
LABEL_433:
          v425[0] = v232;
          v425[1] = v224;
          v426[0] = &v231[8 * v230];
          if (!v223) {
            goto LABEL_435;
          }
LABEL_434:
          operator delete(v223);
          goto LABEL_435;
        }
      }
      else
      {
        uint64_t v231 = 0;
        uint64_t v232 = (MIL::Builder::ProgramBuilder *)(8 * v227);
        *(void *)(8 * v227) = v222;
        uint64_t v224 = (MIL::Builder::ProgramBuilder *)(8 * v227 + 8);
        if (v223 == v225) {
          goto LABEL_433;
        }
      }
      unint64_t v233 = (MIL::Builder::ProgramBuilder *)((char *)v223 - 8) - v225;
      if (v233 < 0x58) {
        goto LABEL_720;
      }
      if ((unint64_t)(v223 - (MIL::Builder::ProgramBuilder *)&v231[v226]) < 0x20) {
        goto LABEL_720;
      }
      uint64_t v234 = (v233 >> 3) + 1;
      uint64_t v235 = 8 * (v234 & 0x3FFFFFFFFFFFFFFCLL);
      long long v236 = (MIL::Builder::ProgramBuilder *)((char *)v223 - v235);
      uint64_t v232 = (MIL::Builder::ProgramBuilder *)((char *)v232 - v235);
      uint64_t v237 = &v231[8 * v227 - 16];
      std::string v238 = (long long *)((char *)v223 - 16);
      uint64_t v239 = v234 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v240 = *v238;
        *(v237 - 1) = *(v238 - 1);
        *uint64_t v237 = v240;
        v237 -= 2;
        v238 -= 2;
        v239 -= 4;
      }
      while (v239);
      std::string v223 = v236;
      if (v234 != (v234 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_720:
        do
        {
          uint64_t v241 = *((void *)v223 - 1);
          std::string v223 = (MIL::Builder::ProgramBuilder *)((char *)v223 - 8);
          *((void *)v232 - 1) = v241;
          uint64_t v232 = (MIL::Builder::ProgramBuilder *)((char *)v232 - 8);
        }
        while (v223 != v225);
      }
      std::string v223 = v425[0];
      v425[0] = v232;
      v425[1] = v224;
      v426[0] = &v231[8 * v230];
      if (v223) {
        goto LABEL_434;
      }
LABEL_435:
      v425[1] = v224;
      uint64_t v242 = MIL::IRConstantDimension::Make((MIL::IRConstantDimension *)v443, v219);
      uint64_t v243 = v242;
      uint64_t v244 = (char *)__dst.__r_.__value_.__l.__size_;
      if (__dst.__r_.__value_.__l.__size_ < __dst.__r_.__value_.__r.__words[2])
      {
        *(void *)__dst.__r_.__value_.__l.__size_ = v242;
        std::string::size_type v217 = (std::string::size_type)(v244 + 8);
        goto LABEL_407;
      }
      std::string::size_type v245 = __dst.__r_.__value_.__r.__words[0];
      std::string::size_type v246 = __dst.__r_.__value_.__l.__size_ - __dst.__r_.__value_.__r.__words[0];
      uint64_t v247 = (uint64_t)(__dst.__r_.__value_.__l.__size_ - __dst.__r_.__value_.__r.__words[0]) >> 3;
      unint64_t v248 = v247 + 1;
      if ((unint64_t)(v247 + 1) >> 61) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      int64_t v249 = __dst.__r_.__value_.__r.__words[2] - __dst.__r_.__value_.__r.__words[0];
      if ((uint64_t)(__dst.__r_.__value_.__r.__words[2] - __dst.__r_.__value_.__r.__words[0]) >> 2 > v248) {
        unint64_t v248 = v249 >> 2;
      }
      if ((unint64_t)v249 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v250 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v250 = v248;
      }
      if (v250)
      {
        if (v250 >> 61) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        unint64_t v251 = operator new(8 * v250);
        uint64_t v252 = (uint64_t *)&v251[8 * v247];
        *uint64_t v252 = v243;
        std::string::size_type v217 = (std::string::size_type)(v252 + 1);
        if (v244 == (char *)v245)
        {
LABEL_454:
          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v252;
          __dst.__r_.__value_.__l.__size_ = v217;
          __dst.__r_.__value_.__r.__words[2] = (std::string::size_type)&v251[8 * v250];
          if (!v244) {
            goto LABEL_407;
          }
LABEL_455:
          operator delete(v244);
          goto LABEL_407;
        }
      }
      else
      {
        unint64_t v251 = 0;
        uint64_t v252 = (uint64_t *)(8 * v247);
        *(void *)(8 * v247) = v243;
        std::string::size_type v217 = 8 * v247 + 8;
        if (v244 == (char *)v245) {
          goto LABEL_454;
        }
      }
      unint64_t v253 = (unint64_t)&v244[-v245 - 8];
      if (v253 < 0x58) {
        goto LABEL_721;
      }
      if ((unint64_t)(v244 - &v251[v246]) < 0x20) {
        goto LABEL_721;
      }
      uint64_t v254 = (v253 >> 3) + 1;
      uint64_t v255 = 8 * (v254 & 0x3FFFFFFFFFFFFFFCLL);
      std::string v256 = &v244[-v255];
      uint64_t v252 = (uint64_t *)((char *)v252 - v255);
      uint64_t v257 = &v251[8 * v247 - 16];
      unint64_t v258 = v244 - 16;
      uint64_t v259 = v254 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v260 = *(_OWORD *)v258;
        *(v257 - 1) = *((_OWORD *)v258 - 1);
        *uint64_t v257 = v260;
        v257 -= 2;
        v258 -= 32;
        v259 -= 4;
      }
      while (v259);
      uint64_t v244 = v256;
      if (v254 != (v254 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_721:
        do
        {
          uint64_t v261 = *((void *)v244 - 1);
          v244 -= 8;
          *--uint64_t v252 = v261;
        }
        while (v244 != (char *)v245);
      }
      uint64_t v244 = (char *)__dst.__r_.__value_.__r.__words[0];
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v252;
      __dst.__r_.__value_.__l.__size_ = v217;
      __dst.__r_.__value_.__r.__words[2] = (std::string::size_type)&v251[8 * v250];
      if (v244) {
        goto LABEL_455;
      }
LABEL_407:
      __dst.__r_.__value_.__l.__size_ = v217;
      v216 += 2;
    }
  }
LABEL_570:
  memset(v437, 0, sizeof(v437));
  int v438 = 1065353216;
  for (uint64_t j = *(uint64_t ***)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 16); j; uint64_t j = (uint64_t **)*j)
  {
    if (!std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::find<std::string>(v413, (uint64_t)(j + 2))&& !std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::find<std::string>(v410, (uint64_t)(j + 2)))
    {
      uint64_t v311 = v409[0];
      if (v409[0])
      {
        int v312 = *((char *)j + 39);
        if (v312 >= 0) {
          size_t v313 = *((unsigned __int8 *)j + 39);
        }
        else {
          size_t v313 = (size_t)j[3];
        }
        if (v312 >= 0) {
          uint64_t v314 = (uint64_t *)(j + 2);
        }
        else {
          uint64_t v314 = j[2];
        }
        do
        {
          int v315 = v311[55];
          if (v315 >= 0) {
            size_t v316 = v311[55];
          }
          else {
            size_t v316 = *((void *)v311 + 5);
          }
          if (v315 >= 0) {
            uint64_t v317 = v311 + 32;
          }
          else {
            uint64_t v317 = (const void *)*((void *)v311 + 4);
          }
          if (v316 >= v313) {
            size_t v318 = v313;
          }
          else {
            size_t v318 = v316;
          }
          int v319 = memcmp(v314, v317, v318);
          BOOL v320 = v313 < v316;
          if (v319) {
            BOOL v320 = v319 < 0;
          }
          if (!v320)
          {
            int v321 = memcmp(v317, v314, v318);
            BOOL v322 = v316 < v313;
            if (v321) {
              BOOL v322 = v321 < 0;
            }
            if (!v322) {
              goto LABEL_572;
            }
            v311 += 8;
          }
          uint64_t v311 = *(char **)v311;
        }
        while (v311);
      }
      uint64_t v395 = v419;
      v396 = v420;
      if (v420) {
        atomic_fetch_add_explicit(&v420->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v323 = (std::__shared_weak_count *)j[6];
      float v393 = j[5];
      uint64_t v394 = v323;
      if (v323) {
        atomic_fetch_add_explicit(&v323->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      MIL::Builder::FunctionBuilder::Make();
      __p[0] = j + 2;
      uint64_t v324 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v437, (uint64_t)(j + 2), (uint64_t)&std::piecewise_construct, (long long **)__p);
      if (*(void *)v435) {
        operator new();
      }
      *(void *)long long v435 = 0;
      uint64_t v325 = (std::__shared_weak_count *)v324[6];
      v324[5] = 0;
      v324[6] = 0;
      if (v325 && !atomic_fetch_add(&v325->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v325->__on_zero_shared)(v325);
        std::__shared_weak_count::__release_weak(v325);
      }
      uint64_t v326 = *(void *)v435;
      *(void *)long long v435 = 0;
      if (v326) {
        (*(void (**)(uint64_t))(*(void *)v326 + 8))(v326);
      }
      uint64_t v327 = v394;
      if (v394 && !atomic_fetch_add(&v394->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v327->__on_zero_shared)(v327);
        std::__shared_weak_count::__release_weak(v327);
      }
      uint64_t v328 = v396;
      if (v396 && !atomic_fetch_add(&v396->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v328->__on_zero_shared)(v328);
        std::__shared_weak_count::__release_weak(v328);
      }
    }
LABEL_572:
    ;
  }
  uint64_t v391 = v419;
  long long v392 = v420;
  if (v420) {
    atomic_fetch_add_explicit(&v420->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  MIL::Builder::ProgramBuilder::Make();
  uint64_t v329 = v392;
  if (v392 && !atomic_fetch_add(&v392->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v329->__on_zero_shared)(v329);
    std::__shared_weak_count::__release_weak(v329);
    uint64_t v330 = v414[0];
    if (!v414[0]) {
      goto LABEL_629;
    }
  }
  else
  {
    uint64_t v330 = v414[0];
    if (!v414[0]) {
      goto LABEL_629;
    }
  }
  do
  {
    long long v331 = (std::__shared_weak_count *)v330[6];
    uint64_t v389 = v330[5];
    std::string v390 = v331;
    if (v331) {
      atomic_fetch_add_explicit(&v331->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    MIL::Builder::ProgramBuilder::AddFunction();
    uint64_t v332 = v390;
    if (v390 && !atomic_fetch_add(&v390->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v332->__on_zero_shared)(v332);
      std::__shared_weak_count::__release_weak(v332);
    }
    uint64_t v330 = (void *)*v330;
  }
  while (v330);
LABEL_629:
  uint64_t v333 = v411[0];
  if (v411[0])
  {
    do
    {
      uint8x8_t v334 = (std::__shared_weak_count *)v333[6];
      uint64_t v387 = v333[5];
      uint64_t v388 = v334;
      if (v334) {
        atomic_fetch_add_explicit(&v334->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      MIL::Builder::ProgramBuilder::AddFunction();
      uint64_t v335 = v388;
      if (v388 && !atomic_fetch_add(&v388->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v335->__on_zero_shared)(v335);
        std::__shared_weak_count::__release_weak(v335);
      }
      uint64_t v333 = (void *)*v333;
    }
    while (v333);
  }
  unint64_t v336 = *(void **)&v437[16];
  if (*(void *)&v437[16])
  {
    do
    {
      uint64_t v337 = (std::__shared_weak_count *)v336[6];
      uint64_t v385 = v336[5];
      uint64_t v386 = v337;
      if (v337) {
        atomic_fetch_add_explicit(&v337->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      MIL::Builder::ProgramBuilder::AddFunction();
      unint64_t v338 = v386;
      if (v386 && !atomic_fetch_add(&v386->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v338->__on_zero_shared)(v338);
        std::__shared_weak_count::__release_weak(v338);
      }
      unint64_t v336 = (void *)*v336;
    }
    while (v336);
  }
  for (uint64_t k = *(uint64_t **)(MIL::IRObject::GetAttributes(v374) + 16); k; uint64_t k = (uint64_t *)*k)
  {
    while (1)
    {
      if (*((char *)k + 39) < 0) {
        std::string::__init_copy_ctor_external(&v384, (const std::string::value_type *)k[2], k[3]);
      }
      else {
        std::string v384 = *(std::string *)(k + 2);
      }
      int v340 = (std::__shared_weak_count *)k[6];
      uint64_t v382 = k[5];
      v383 = v340;
      if (v340) {
        atomic_fetch_add_explicit(&v340->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      MIL::Builder::ProgramBuilder::SetAttribute();
      uint64_t v341 = v383;
      if (v383 && !atomic_fetch_add(&v383->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v341->__on_zero_shared)(v341);
        std::__shared_weak_count::__release_weak(v341);
      }
      if (SHIBYTE(v384.__r_.__value_.__r.__words[2]) < 0) {
        break;
      }
      uint64_t k = (uint64_t *)*k;
      if (!k) {
        goto LABEL_658;
      }
    }
    operator delete(v384.__r_.__value_.__l.__data_);
  }
LABEL_658:
  MIL::Builder::ProgramBuilder::CreateProgram((uint64_t *)__p, v425[0]);
  if (((*((uint64_t (**)(void **))__p[1] + 2))(&__p[1]) & 1) == 0)
  {
    v367 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    MIL::MILResult::GetMessage((MIL::MILResult *)&__p[1]);
    std::operator+<char>();
    std::runtime_error::runtime_error(v367, (const std::string *)v435);
    __cxa_throw(v367, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v342 = __p[0];
  __p[0] = 0;
  *a3 = v342;
  a3[2] = 0;
  a3[3] = 0;
  a3[1] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a3 + 1, (uint64_t)v416, (uint64_t)v417, 0xAAAAAAAAAAAAAAABLL * (((char *)v417 - (unsigned char *)v416) >> 3));
  MEMORY[0x192FEF390](&__p[1]);
  std::string::size_type v343 = __p[0];
  __p[0] = 0;
  if (v343) {
    (*(void (**)(void *))(*(void *)v343 + 8))(v343);
  }
  uint64_t v344 = v425[0];
  v425[0] = 0;
  if (v344) {
    (*(void (**)(MIL::Builder::ProgramBuilder *))(*(void *)v344 + 8))(v344);
  }
  uint64_t v345 = *(void ***)&v437[16];
  if (*(void *)&v437[16])
  {
    do
    {
      while (1)
      {
        unint64_t v346 = (void **)*v345;
        unint64_t v347 = (std::__shared_weak_count *)v345[6];
        if (v347 && !atomic_fetch_add(&v347->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v347->__on_zero_shared)(v347);
          std::__shared_weak_count::__release_weak(v347);
        }
        if (*((char *)v345 + 39) < 0) {
          break;
        }
        operator delete(v345);
        uint64_t v345 = v346;
        if (!v346) {
          goto LABEL_671;
        }
      }
      operator delete(v345[2]);
      operator delete(v345);
      uint64_t v345 = v346;
    }
    while (v346);
  }
LABEL_671:
  long long v348 = *(void **)v437;
  *(void *)long long v437 = 0;
  if (v348) {
    operator delete(v348);
  }
  std::__tree<std::string>::destroy((uint64_t)&v408, v409[0]);
  long long v349 = (void **)v411[0];
  if (v411[0])
  {
    do
    {
      while (1)
      {
        uint64_t v350 = (void **)*v349;
        unint64_t v351 = (std::__shared_weak_count *)v349[6];
        if (v351 && !atomic_fetch_add(&v351->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v351->__on_zero_shared)(v351);
          std::__shared_weak_count::__release_weak(v351);
        }
        if (*((char *)v349 + 39) < 0) {
          break;
        }
        operator delete(v349);
        long long v349 = v350;
        if (!v350) {
          goto LABEL_681;
        }
      }
      operator delete(v349[2]);
      operator delete(v349);
      long long v349 = v350;
    }
    while (v350);
  }
LABEL_681:
  long long v352 = v410[0];
  v410[0] = 0;
  if (v352) {
    operator delete(v352);
  }
  int v353 = (void **)v414[0];
  if (v414[0])
  {
    do
    {
      while (1)
      {
        std::string::size_type v354 = (void **)*v353;
        uint64_t v355 = (std::__shared_weak_count *)v353[6];
        if (v355 && !atomic_fetch_add(&v355->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v355->__on_zero_shared)(v355);
          std::__shared_weak_count::__release_weak(v355);
        }
        if (*((char *)v353 + 39) < 0) {
          break;
        }
        operator delete(v353);
        int v353 = v354;
        if (!v354) {
          goto LABEL_691;
        }
      }
      operator delete(v353[2]);
      operator delete(v353);
      int v353 = v354;
    }
    while (v354);
  }
LABEL_691:
  uint64_t v356 = v413[0];
  v413[0] = 0;
  if (v356) {
    operator delete(v356);
  }
  unint64_t v357 = (std::string *)v416;
  if (v416)
  {
    long long v358 = v417;
    long long v359 = v416;
    if (v417 != v416)
    {
      do
      {
        if (SHIBYTE(v358[-1].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v358[-1].__r_.__value_.__l.__data_);
        }
        --v358;
      }
      while (v358 != v357);
      long long v359 = v416;
    }
    long long v417 = v357;
    operator delete(v359);
  }
  long long v360 = v420;
  if (v420)
  {
    if (!atomic_fetch_add(&v420->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v360->__on_zero_shared)(v360);
      std::__shared_weak_count::__release_weak(v360);
    }
  }
  if (E5RT::g_trace_analysis_level >= v421) {
    goto LABEL_705;
  }
}

void sub_19229C8C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (SLOBYTE(STACK[0x367]) < 0)
  {
    operator delete((void *)STACK[0x350]);
    if ((v72 & 1) == 0)
    {
LABEL_6:
      std::pair<std::unique_ptr<MIL::IRProgram>,MIL::ValidationResult>::~pair((uint64_t *)&a23);
      unint64_t v75 = STACK[0x2C0];
      STACK[0x2C0] = 0;
      if (v75) {
        (*(void (**)(unint64_t))(*(void *)v75 + 8))(v75);
      }
      std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100](v73 - 224);
      std::__tree<std::string>::destroy((uint64_t)&a70, (char *)a71);
      std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100]((uint64_t)&STACK[0x200]);
      std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100]((uint64_t)&STACK[0x230]);
      std::vector<std::string>::~vector[abi:ne180100]((void **)&STACK[0x260]);
      std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x278]);
      E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)&STACK[0x288]);
      _Unwind_Resume(a1);
    }
  }
  else if (!v72)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v71);
  goto LABEL_6;
}

void sub_19229D024()
{
  unint64_t v0 = STACK[0x2B0];
  STACK[0x2B0] = 0;
  if (!v0) {
    JUMPOUT(0x19229CF1CLL);
  }
  JUMPOUT(0x19229CEF8);
}

void sub_19229D038()
{
  unint64_t v0 = STACK[0x2B0];
  STACK[0x2B0] = 0;
  if (!v0) {
    JUMPOUT(0x19229CF1CLL);
  }
  JUMPOUT(0x19229CEF8);
}

uint64_t std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>::~unordered_map[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(char **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v5 = *(char **)v2;
      uint64_t v6 = (void *)*((void *)v2 + 5);
      if (v6)
      {
        *((void *)v2 + 6) = v6;
        operator delete(v6);
      }
      if (v2[39] < 0) {
        operator delete(*((void **)v2 + 2));
      }
      operator delete(v2);
      uint64_t v2 = v5;
    }
    while (v5);
  }
  uint64_t v3 = *(void **)a1;
  *(void *)a1 = 0;
  if (v3) {
    operator delete(v3);
  }
  return a1;
}

uint64_t std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      while (1)
      {
        uint64_t v3 = (void **)*v2;
        unint64_t v4 = (std::__shared_weak_count *)v2[6];
        if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
        if (*((char *)v2 + 39) < 0) {
          break;
        }
        operator delete(v2);
        uint64_t v2 = v3;
        if (!v3) {
          goto LABEL_9;
        }
      }
      operator delete(v2[2]);
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
LABEL_9:
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = 0;
  if (v5) {
    operator delete(v5);
  }
  return a1;
}

uint64_t std::unordered_map<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  size_t prime = *(void *)(a2 + 8);
  if (prime == 1)
  {
    size_t prime = 2;
LABEL_17:
    std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(*(void *)(a2 + 8));
    int8x8_t v5 = *(int8x8_t *)(a1 + 8);
    BOOL v6 = prime >= *(void *)&v5;
    if (prime > *(void *)&v5) {
      goto LABEL_17;
    }
  }
  else
  {
    int8x8_t v5 = 0;
    BOOL v6 = 1;
    if (prime) {
      goto LABEL_17;
    }
  }
  if (!v6)
  {
    unint64_t v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v5 < 3uLL || (uint8x8_t v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      unint64_t v7 = std::__next_prime(v7);
    }
    else
    {
      uint64_t v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2) {
        unint64_t v7 = v9;
      }
    }
    if (prime <= v7) {
      size_t prime = v7;
    }
    if (prime < *(void *)&v5) {
      goto LABEL_17;
    }
  }
LABEL_18:
  for (uint64_t i = *(void **)(a2 + 16); i; uint64_t i = (void *)*i)
    std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>> const&>(a1, (uint64_t)(i + 2), (uint64_t)(i + 2));
  return a1;
}

void sub_19229D2B4(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void sub_19229D2C8(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  unint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

MIL::Attributes::FlexibleShapeInfo **std::unique_ptr<MIL::Attributes::FlexibleShapeInfo>::~unique_ptr[abi:ne180100](MIL::Attributes::FlexibleShapeInfo **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    MIL::Attributes::FlexibleShapeInfo::~FlexibleShapeInfo(v2);
    MEMORY[0x192FF16B0]();
  }
  return a1;
}

uint64_t nitro::ndarray<float>::operator==<unsigned char>(uint64_t *a1, uint64_t *a2)
{
  if (a2 == a1) {
    return 1;
  }
  int8x8_t v5 = (char *)a1[2];
  unint64_t v4 = (char *)a1[3];
  unint64_t v6 = v4 - v5;
  unint64_t v7 = (v4 - v5) >> 3;
  uint8x8_t v8 = (void *)a2[2];
  if (v7 != (a2[3] - (uint64_t)v8) >> 3) {
    return 0;
  }
  int64_t v9 = v4 - v5;
  if (v4 == v5) {
    return 1;
  }
  uint64_t v10 = v7 <= 1 ? 1 : (v4 - v5) >> 3;
  if (*(void *)v5 != *v8) {
    return 0;
  }
  uint64_t v11 = 1;
  do
  {
    unint64_t v12 = v11;
    if (v10 == v11) {
      break;
    }
    uint64_t v13 = *(void *)&v5[8 * v11];
    uint64_t v14 = v8[v11++];
  }
  while (v13 == v14);
  BOOL v15 = v12 >= v7;
  if (v12 >= v7)
  {
    uint64_t v16 = *a1;
    if (!*a1) {
      return 1;
    }
    if ((unint64_t)(v9 - 8) >= 8)
    {
      unint64_t v19 = ((unint64_t)(v9 - 8) >> 3) + 1;
      uint64_t v18 = &v5[8 * (v19 & 0x3FFFFFFFFFFFFFFELL)];
      uint64_t v20 = v5 + 8;
      uint64_t v21 = 1;
      uint64_t v22 = v19 & 0x3FFFFFFFFFFFFFFELL;
      uint64_t v23 = 1;
      do
      {
        v21 *= *(v20 - 1);
        v23 *= *v20;
        v20 += 2;
        v22 -= 2;
      }
      while (v22);
      uint64_t v17 = v23 * v21;
      if (v19 == (v19 & 0x3FFFFFFFFFFFFFFELL))
      {
LABEL_20:
        if (v17)
        {
          if ((v6 & 0x8000000000000000) != 0) {
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          long long v25 = operator new(v4 - v5);
          bzero(v25, v6 & 0xFFFFFFFFFFFFFFF8);
          uint64_t v27 = *a2;
          if (v6 >> 3 <= 1) {
            unint64_t v28 = 1;
          }
          else {
            unint64_t v28 = v6 >> 3;
          }
          uint64_t v29 = a2[5];
          uint64_t v30 = a2[8];
          uint64_t v31 = v28 & 0x1FFFFFFFFFFFFFFELL;
          while (1)
          {
            if (v6 <= 7)
            {
              uint64_t v32 = 0;
              float v33 = *(float *)(v16 + 4 * a1[8]);
              goto LABEL_42;
            }
            uint64_t v34 = a1[5];
            if (v28 < 2) {
              break;
            }
            uint64_t v37 = 0;
            uint64_t v38 = 0;
            size_t v39 = (void *)(v34 + 8);
            uint64_t v40 = v28 & 0x1FFFFFFFFFFFFFFELL;
            uint64_t v41 = v25 + 1;
            do
            {
              v37 += *(v39 - 1) * *(v41 - 1);
              v38 += *v39 * *v41;
              v41 += 2;
              v39 += 2;
              v40 -= 2;
            }
            while (v40);
            uint64_t v35 = v38 + v37;
            uint64_t v36 = v28 & 0x1FFFFFFFFFFFFFFELL;
            if (v28 != v31) {
              goto LABEL_33;
            }
LABEL_35:
            float v33 = *(float *)(v16 + 4 * (a1[8] + v35));
            if (v28 < 2)
            {
              uint64_t v32 = 0;
              uint64_t v49 = 0;
LABEL_40:
              unint64_t v55 = v28 - v49;
              uint64_t v56 = v49;
              unint64_t v57 = (uint64_t *)(v29 + 8 * v49);
              unint64_t v58 = &v25[v56];
              do
              {
                uint64_t v60 = *v58++;
                uint64_t v59 = v60;
                uint64_t v61 = *v57++;
                v32 += v61 * v59;
                --v55;
              }
              while (v55);
              goto LABEL_42;
            }
            uint64_t v50 = 0;
            uint64_t v51 = 0;
            uint64_t v52 = v28 & 0x1FFFFFFFFFFFFFFELL;
            uint64_t v53 = (void *)(v29 + 8);
            long long v54 = v25 + 1;
            do
            {
              v50 += *(v53 - 1) * *(v54 - 1);
              v51 += *v53 * *v54;
              v54 += 2;
              v53 += 2;
              v52 -= 2;
            }
            while (v52);
            uint64_t v32 = v51 + v50;
            uint64_t v49 = v28 & 0x1FFFFFFFFFFFFFFELL;
            if (v28 != v31) {
              goto LABEL_40;
            }
LABEL_42:
            LOBYTE(v26) = *(unsigned char *)(v27 + v30 + v32);
            float v26 = (float)LODWORD(v26);
            BOOL v15 = v33 == v26;
            if ((int)(v6 >> 3) >= 1 && v33 == v26)
            {
              uint64_t v62 = (v6 >> 3) + 1;
              unint64_t v63 = v6 >> 3;
              while (1)
              {
                uint64_t v64 = (v62 - 2);
                unint64_t v65 = v25[v64] + 1;
                v25[v64] = v65;
                if (v65 < *(void *)&v5[v64 * 8]) {
                  break;
                }
                v25[(v62 - 2)] = 0;
                LODWORD(v63) = v63 - 1;
                if ((unint64_t)--v62 <= 1) {
                  goto LABEL_49;
                }
              }
              if ((int)v63 > 0) {
                continue;
              }
            }
LABEL_49:
            operator delete(v25);
            return v15;
          }
          uint64_t v35 = 0;
          uint64_t v36 = 0;
LABEL_33:
          unint64_t v42 = v28 - v36;
          uint64_t v43 = v36;
          uint64_t v44 = (uint64_t *)(v34 + v43 * 8);
          unint64_t v45 = &v25[v43];
          do
          {
            uint64_t v47 = *v45++;
            uint64_t v46 = v47;
            uint64_t v48 = *v44++;
            v35 += v48 * v46;
            --v42;
          }
          while (v42);
          goto LABEL_35;
        }
        return 1;
      }
    }
    else
    {
      uint64_t v17 = 1;
      uint64_t v18 = (char *)a1[2];
    }
    do
    {
      uint64_t v24 = *(void *)v18;
      v18 += 8;
      v17 *= v24;
    }
    while (v18 != v4);
    goto LABEL_20;
  }
  return v15;
}

void sub_19229D6B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::create_aot_context(int a1@<W0>, void *a2@<X8>)
{
  int v8 = a1;
  Espresso::create_context(&v8, &v6);
  uint64_t v3 = v6;
  if (v6)
  {
    *(unsigned char *)(v6 + 127) = 1;
    unint64_t v4 = v7;
    *a2 = v3;
    a2[1] = v4;
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    int8x8_t v5 = v7;
    if (v7)
    {
      if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void Espresso::AOT::SegmentsLowerer::GenerateAndMergeSegmentFunctions(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char **a4@<X3>, void *a5@<X8>)
{
  uint64_t v6 = *a4;
  int8x8_t v5 = a4[1];
  v589[0] = 0;
  v589[1] = 0;
  v590 = 0;
  *(_OWORD *)v586 = 0u;
  *(_OWORD *)v587 = 0u;
  int v588 = 1065353216;
  v591[1] = 0;
  v591[0] = 0;
  v592[0] = 0;
  *(_OWORD *)std::string __p = 0u;
  *(_OWORD *)v558 = 0u;
  *(_DWORD *)&v558[16] = 1065353216;
  memset(v603, 0, sizeof(v603));
  LODWORD(v604) = 1065353216;
  int64_t v8 = v5 - v6;
  BOOL v7 = v5 == v6;
  uint64_t v9 = (unsigned __int128)((v5 - v6) * (__int128)0xE38E38E38E38E39) >> 64;
  unint64_t v10 = (v9 >> 2) + ((unint64_t)v9 >> 63);
  v553 = (uint64_t *)v10;
  uint64_t v545 = v8;
  if (v7)
  {
    long long __dst = 0uLL;
    long long v598 = 0uLL;
    int i = 1065353216;
    long long v594 = 0uLL;
    long long v595 = 0uLL;
    int j = 1065353216;
  }
  else
  {
    unint64_t v11 = 0;
    if (v10 <= 1) {
      uint64_t v12 = 1;
    }
    else {
      uint64_t v12 = v10;
    }
    do
    {
      uint64_t v13 = (uint64_t)&(*a4)[72 * v11];
      uint64_t v15 = *(void *)(v13 + 24);
      uint64_t v14 = *(void *)(v13 + 32);
      while (v15 != v14)
      {
        uint64_t v16 = (MIL::IRValueType *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a3 + 152))(a3, v15);
        if (v16 && MIL::IRValueType::TryCastAsStateType(v16))
        {
          *(void *)&long long __dst = v15;
          uint64_t v17 = std::__hash_table<std::__hash_value_type<std::string,std::set<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::set<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::set<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::set<unsigned long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)__p, v15, (uint64_t)&std::piecewise_construct, (long long **)&__dst);
          unint64_t v19 = (void **)(v17 + 6);
          uint64_t v18 = (void *)v17[6];
          uint64_t v20 = v17 + 6;
          uint64_t v21 = v17 + 6;
          if (v18)
          {
            while (1)
            {
              while (1)
              {
                uint64_t v21 = v18;
                unint64_t v22 = v18[4];
                if (v11 >= v22) {
                  break;
                }
                uint64_t v18 = (void *)*v21;
                uint64_t v20 = v21;
                if (!*v21) {
                  goto LABEL_22;
                }
              }
              if (v22 >= v11) {
                break;
              }
              uint64_t v18 = (void *)v21[1];
              if (!v18)
              {
                uint64_t v20 = v21 + 1;
                goto LABEL_22;
              }
            }
          }
          else
          {
LABEL_22:
            uint64_t v23 = operator new(0x28uLL);
            v23[4] = v11;
            void *v23 = 0;
            v23[1] = 0;
            v23[2] = v21;
            *uint64_t v20 = v23;
            uint64_t v24 = *(void *)v17[5];
            if (v24)
            {
              v17[5] = v24;
              uint64_t v23 = (void *)*v20;
            }
            long long v25 = *v19;
            BOOL v7 = v23 == *v19;
            *((unsigned char *)v23 + 24) = v7;
            if (!v7)
            {
              do
              {
                uint64_t v26 = v23[2];
                if (*(unsigned char *)(v26 + 24)) {
                  break;
                }
                uint64_t v27 = *(unsigned char **)(v26 + 16);
                uint64_t v28 = *(void *)v27;
                if (*(void *)v27 == v26)
                {
                  uint64_t v31 = *((void *)v27 + 1);
                  if (!v31 || (int v32 = *(unsigned __int8 *)(v31 + 24), v29 = (unsigned char *)(v31 + 24), v32))
                  {
                    if (*(void **)v26 == v23)
                    {
                      *(unsigned char *)(v26 + 24) = 1;
                      v27[24] = 0;
                      uint64_t v35 = *(void *)(v26 + 8);
                      *(void *)uint64_t v27 = v35;
                      if (v35) {
                        goto LABEL_39;
                      }
                    }
                    else
                    {
                      float v33 = *(uint64_t **)(v26 + 8);
                      uint64_t v34 = *v33;
                      *(void *)(v26 + 8) = *v33;
                      if (v34)
                      {
                        *(void *)(v34 + 16) = v26;
                        uint64_t v27 = *(unsigned char **)(v26 + 16);
                      }
                      v33[2] = (uint64_t)v27;
                      *(void *)(*(void *)(v26 + 16) + 8 * (**(void **)(v26 + 16) != v26)) = v33;
                      *float v33 = v26;
                      *(void *)(v26 + 16) = v33;
                      uint64_t v27 = (unsigned char *)v33[2];
                      uint64_t v26 = *(void *)v27;
                      *((unsigned char *)v33 + 24) = 1;
                      v27[24] = 0;
                      uint64_t v35 = *(void *)(v26 + 8);
                      *(void *)uint64_t v27 = v35;
                      if (v35) {
LABEL_39:
                      }
                        *(void *)(v35 + 16) = v27;
                    }
                    *(void *)(v26 + 16) = *((void *)v27 + 2);
                    *(void *)(*((void *)v27 + 2) + 8 * (**((void **)v27 + 2) != (void)v27)) = v26;
                    *(void *)(v26 + 8) = v27;
LABEL_9:
                    *((void *)v27 + 2) = v26;
                    break;
                  }
                }
                else if (!v28 || (int v30 = *(unsigned __int8 *)(v28 + 24), v29 = (unsigned char *)(v28 + 24), v30))
                {
                  if (*(void **)v26 == v23)
                  {
                    uint64_t v37 = v23[1];
                    *(void *)uint64_t v26 = v37;
                    if (v37)
                    {
                      *(void *)(v37 + 16) = v26;
                      uint64_t v27 = *(unsigned char **)(v26 + 16);
                    }
                    v23[2] = v27;
                    *(void *)(*(void *)(v26 + 16) + 8 * (**(void **)(v26 + 16) != v26)) = v23;
                    v23[1] = v26;
                    *(void *)(v26 + 16) = v23;
                    uint64_t v27 = (unsigned char *)v23[2];
                    *((unsigned char *)v23 + 24) = 1;
                    v27[24] = 0;
                    uint64_t v26 = *((void *)v27 + 1);
                    uint64_t v36 = *(void **)v26;
                    *((void *)v27 + 1) = *(void *)v26;
                    if (!v36) {
                      goto LABEL_8;
                    }
                  }
                  else
                  {
                    *(unsigned char *)(v26 + 24) = 1;
                    v27[24] = 0;
                    uint64_t v26 = *((void *)v27 + 1);
                    uint64_t v36 = *(void **)v26;
                    *((void *)v27 + 1) = *(void *)v26;
                    if (!v36) {
                      goto LABEL_8;
                    }
                  }
                  v36[2] = v27;
LABEL_8:
                  *(void *)(v26 + 16) = *((void *)v27 + 2);
                  *(void *)(*((void *)v27 + 2) + 8 * (**((void **)v27 + 2) != (void)v27)) = v26;
                  *(void *)uint64_t v26 = v27;
                  goto LABEL_9;
                }
                *(unsigned char *)(v26 + 24) = 1;
                uint64_t v23 = v27;
                v27[24] = v27 == (unsigned char *)v25;
                *uint64_t v29 = 1;
              }
              while (v27 != (unsigned char *)v25);
            }
            ++v17[7];
          }
        }
        v15 += 24;
      }
      ++v11;
    }
    while (v11 != v12);
    uint64_t v38 = *a4;
    size_t v39 = a4[1];
    if (*a4 != v39)
    {
      while (1)
      {
        uint64_t v40 = *((void *)v38 + 3);
        uint64_t v41 = *((void *)v38 + 4);
        long long __dst = 0u;
        long long v598 = 0u;
        for (int i = 1065353216; v40 != v41; v40 += 24)
          std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)&__dst, v40, v40);
        uint64_t v42 = *((void *)v38 + 6);
        uint64_t v43 = *((void *)v38 + 7);
        long long v594 = 0u;
        long long v595 = 0u;
        for (int j = 1065353216; v42 != v43; v42 += 24)
          std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)&v594, v42, v42);
        uint64_t v44 = v591[1];
        if (v591[1] < v592[0]) {
          break;
        }
        uint64_t v50 = (std::string *)std::vector<std::pair<std::unordered_set<std::string>,std::unordered_set<std::string>>>::__emplace_back_slow_path<std::unordered_set<std::string>,std::unordered_set<std::string>>((uint64_t *)v591, (uint64_t *)&__dst, (uint64_t *)&v594);
        uint64_t v51 = (char *)v595;
        v591[1] = v50;
        if ((void)v595) {
          goto LABEL_79;
        }
LABEL_73:
        unint64_t v55 = (void *)v594;
        *(void *)&long long v594 = 0;
        if (v55) {
          operator delete(v55);
        }
        uint64_t v56 = (void **)v598;
        if ((void)v598)
        {
          do
          {
            uint64_t v59 = (void **)*v56;
            if (*((char *)v56 + 39) < 0) {
              operator delete(v56[2]);
            }
            operator delete(v56);
            uint64_t v56 = v59;
          }
          while (v59);
        }
        unint64_t v57 = (void *)__dst;
        *(void *)&long long __dst = 0;
        if (v57) {
          operator delete(v57);
        }
        v38 += 72;
        if (v38 == v39) {
          goto LABEL_84;
        }
      }
      unint64_t v45 = (char *)__dst;
      *(void *)&long long __dst = 0;
      v591[1]->__r_.__value_.__l.__data_ = v45;
      v44->__r_.__value_.__l.__size_ = *((void *)&__dst + 1);
      *((void *)&__dst + 1) = 0;
      uint64_t v46 = v598;
      v44->__r_.__value_.__r.__words[2] = v598;
      uint64_t v47 = *((void *)&v598 + 1);
      v44[1].__r_.__value_.__r.__words[0] = *((void *)&v598 + 1);
      LODWORD(v44[1].__r_.__value_.__r.__words[1]) = i;
      if (v47)
      {
        std::string::size_type v48 = *(void *)(v46 + 8);
        std::string::size_type size = v44->__r_.__value_.__l.__size_;
        if ((size & (size - 1)) != 0)
        {
          if (v48 >= size) {
            v48 %= size;
          }
        }
        else
        {
          v48 &= size - 1;
        }
        *(void *)&v45[8 * v48] = (char *)&v44->__r_.__value_.__l + 16;
        long long v598 = 0uLL;
      }
      long long v52 = v594;
      std::string::size_type v53 = *((void *)&v595 + 1);
      uint64_t v51 = (char *)v595;
      v44[2].__r_.__value_.__l.__size_ = v595;
      long long v594 = 0uLL;
      *(_OWORD *)&v44[1].__r_.__value_.__r.__words[2] = v52;
      v44[2].__r_.__value_.__r.__words[2] = v53;
      LODWORD(v44[3].__r_.__value_.__l.__data_) = j;
      if (v53)
      {
        unint64_t v54 = *((void *)v51 + 1);
        if ((*((void *)&v52 + 1) & (*((void *)&v52 + 1) - 1)) != 0)
        {
          if (v54 >= *((void *)&v52 + 1)) {
            v54 %= *((void *)&v52 + 1);
          }
        }
        else
        {
          v54 &= *((void *)&v52 + 1) - 1;
        }
        uint64_t v51 = 0;
        *(void *)(v52 + 8 * v54) = (char *)v44 + 56;
        long long v595 = 0uLL;
      }
      v591[1] = (std::string *)((char *)v44 + 80);
      if (!v51) {
        goto LABEL_73;
      }
      do
      {
LABEL_79:
        unint64_t v58 = *(char **)v51;
        if (v51[39] < 0) {
          operator delete(*((void **)v51 + 2));
        }
        operator delete(v51);
        uint64_t v51 = v58;
      }
      while (v58);
      goto LABEL_73;
    }
LABEL_84:
    unint64_t v60 = 0;
    long long __dst = 0u;
    long long v598 = 0u;
    int i = 1065353216;
    long long v594 = 0u;
    long long v595 = 0u;
    int j = 1065353216;
    unint64_t v577 = 0;
    unint64_t v61 = (unint64_t)v553;
    do
    {
      unint64_t v62 = v60 + 1;
      if (v60 + 1 < v61 && *(&v591[0][2].__r_.__value_.__l.__size_ + 10 * v60))
      {
        do
        {
          for (uint64_t k = (void *)*(&v591[0][2].__r_.__value_.__l.__size_ + 10 * v577); k; uint64_t k = (void *)*k)
          {
            if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(&v591[0]->__r_.__value_.__r.__words[10 * v62], (uint64_t)(k + 2)))
            {
              v600 = (uint64_t **)&v577;
              uint64_t v64 = std::__hash_table<std::__hash_value_type<unsigned long,std::set<unsigned long>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::set<unsigned long>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::set<unsigned long>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::set<unsigned long>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v603, &v577, (uint64_t)&std::piecewise_construct, (uint64_t **)&v600);
              BOOL v66 = (void **)(v64 + 4);
              unint64_t v65 = (void *)v64[4];
              int v67 = v64 + 4;
              BOOL v68 = v64 + 4;
              if (v65)
              {
                while (1)
                {
                  while (1)
                  {
                    BOOL v68 = v65;
                    unint64_t v69 = v65[4];
                    if (v62 >= v69) {
                      break;
                    }
                    unint64_t v65 = (void *)*v68;
                    int v67 = v68;
                    if (!*v68) {
                      goto LABEL_102;
                    }
                  }
                  if (v69 >= v62) {
                    break;
                  }
                  unint64_t v65 = (void *)v68[1];
                  if (!v65)
                  {
                    int v67 = v68 + 1;
                    goto LABEL_102;
                  }
                }
              }
              else
              {
LABEL_102:
                long long v70 = operator new(0x28uLL);
                v70[4] = v62;
                void *v70 = 0;
                v70[1] = 0;
                v70[2] = v68;
                void *v67 = v70;
                uint64_t v71 = *(void *)v64[3];
                if (v71)
                {
                  v64[3] = v71;
                  long long v70 = (void *)*v67;
                }
                int v72 = *v66;
                BOOL v7 = v70 == *v66;
                *((unsigned char *)v70 + 24) = v7;
                if (!v7)
                {
                  do
                  {
                    uint64_t v73 = v70[2];
                    if (*(unsigned char *)(v73 + 24)) {
                      break;
                    }
                    unint64_t v74 = *(unsigned char **)(v73 + 16);
                    uint64_t v75 = *(void *)v74;
                    if (*(void *)v74 == v73)
                    {
                      uint64_t v78 = *((void *)v74 + 1);
                      if (!v78 || (v79 = *(unsigned __int8 *)(v78 + 24), unint64_t v76 = (unsigned char *)(v78 + 24), v79))
                      {
                        if (*(void **)v73 == v70)
                        {
                          *(unsigned char *)(v73 + 24) = 1;
                          v74[24] = 0;
                          uint64_t v82 = *(void *)(v73 + 8);
                          *(void *)unint64_t v74 = v82;
                          if (v82) {
                            goto LABEL_119;
                          }
                        }
                        else
                        {
                          uint64_t v80 = *(uint64_t **)(v73 + 8);
                          uint64_t v81 = *v80;
                          *(void *)(v73 + 8) = *v80;
                          if (v81)
                          {
                            *(void *)(v81 + 16) = v73;
                            unint64_t v74 = *(unsigned char **)(v73 + 16);
                          }
                          v80[2] = (uint64_t)v74;
                          *(void *)(*(void *)(v73 + 16) + 8 * (**(void **)(v73 + 16) != v73)) = v80;
                          *uint64_t v80 = v73;
                          *(void *)(v73 + 16) = v80;
                          unint64_t v74 = (unsigned char *)v80[2];
                          uint64_t v73 = *(void *)v74;
                          *((unsigned char *)v80 + 24) = 1;
                          v74[24] = 0;
                          uint64_t v82 = *(void *)(v73 + 8);
                          *(void *)unint64_t v74 = v82;
                          if (v82) {
LABEL_119:
                          }
                            *(void *)(v82 + 16) = v74;
                        }
                        *(void *)(v73 + 16) = *((void *)v74 + 2);
                        *(void *)(*((void *)v74 + 2) + 8 * (**((void **)v74 + 2) != (void)v74)) = v73;
                        *(void *)(v73 + 8) = v74;
LABEL_125:
                        *((void *)v74 + 2) = v73;
                        break;
                      }
                    }
                    else if (!v75 || (int v77 = *(unsigned __int8 *)(v75 + 24), v76 = (unsigned char *)(v75 + 24), v77))
                    {
                      if (*(void **)v73 == v70)
                      {
                        uint64_t v86 = v70[1];
                        *(void *)uint64_t v73 = v86;
                        if (v86)
                        {
                          *(void *)(v86 + 16) = v73;
                          unint64_t v74 = *(unsigned char **)(v73 + 16);
                        }
                        v70[2] = v74;
                        *(void *)(*(void *)(v73 + 16) + 8 * (**(void **)(v73 + 16) != v73)) = v70;
                        v70[1] = v73;
                        *(void *)(v73 + 16) = v70;
                        unint64_t v74 = (unsigned char *)v70[2];
                        *((unsigned char *)v70 + 24) = 1;
                        v74[24] = 0;
                        uint64_t v73 = *((void *)v74 + 1);
                        uint64_t v83 = *(void **)v73;
                        *((void *)v74 + 1) = *(void *)v73;
                        if (v83) {
LABEL_123:
                        }
                          v83[2] = v74;
                      }
                      else
                      {
                        *(unsigned char *)(v73 + 24) = 1;
                        v74[24] = 0;
                        uint64_t v73 = *((void *)v74 + 1);
                        uint64_t v83 = *(void **)v73;
                        *((void *)v74 + 1) = *(void *)v73;
                        if (v83) {
                          goto LABEL_123;
                        }
                      }
                      *(void *)(v73 + 16) = *((void *)v74 + 2);
                      *(void *)(*((void *)v74 + 2) + 8 * (**((void **)v74 + 2) != (void)v74)) = v73;
                      *(void *)uint64_t v73 = v74;
                      goto LABEL_125;
                    }
                    *(unsigned char *)(v73 + 24) = 1;
                    long long v70 = v74;
                    v74[24] = v74 == (unsigned char *)v72;
                    unsigned char *v76 = 1;
                  }
                  while (v74 != (unsigned char *)v72);
                }
                ++v64[5];
              }
              v600 = (uint64_t **)(k + 2);
              uint64_t v84 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&__dst, (unsigned __int8 *)k + 16, (uint64_t)&std::piecewise_construct, (long long **)&v600);
              int v85 = *((_DWORD *)v84 + 10);
              *((_DWORD *)v84 + 10) = v85 + 1;
              if (v85 >= 1) {
                std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)&v594, (uint64_t)(k + 2), (uint64_t)(k + 2));
              }
            }
          }
          ++v62;
          unint64_t v61 = (unint64_t)v553;
        }
        while ((uint64_t *)v62 != v553);
        unint64_t v62 = v577 + 1;
      }
      unint64_t v577 = v62;
      unint64_t v60 = v62;
    }
    while (v62 < v61);
    unint64_t v87 = *(void **)v558;
    if (*(void *)v558)
    {
      do
      {
        size_t v88 = (void *)v87[5];
        uint64_t v89 = (void *)v88[1];
        uint64_t v90 = v88;
        if (v89)
        {
          do
          {
            uint64_t v91 = v89;
            uint64_t v89 = (void *)*v89;
          }
          while (v89);
        }
        else
        {
          do
          {
            uint64_t v91 = (void *)v90[2];
            BOOL v7 = *v91 == (void)v90;
            uint64_t v90 = v91;
          }
          while (!v7);
        }
        v547 = v87;
        uint64_t v92 = v87 + 6;
        if (v91 != v87 + 6)
        {
          do
          {
            v600 = (uint64_t **)(v88 + 4);
            uint64_t v93 = std::__hash_table<std::__hash_value_type<unsigned long,std::set<unsigned long>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::set<unsigned long>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::set<unsigned long>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::set<unsigned long>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v603, v88 + 4, (uint64_t)&std::piecewise_construct, (uint64_t **)&v600);
            uint64_t v95 = (void **)(v93 + 4);
            size_t v94 = (void *)v93[4];
            unint64_t v96 = v91[4];
            unint64_t v97 = v93 + 4;
            uint64_t v98 = v93 + 4;
            if (v94)
            {
              while (1)
              {
                while (1)
                {
                  uint64_t v98 = v94;
                  unint64_t v99 = v94[4];
                  if (v96 >= v99) {
                    break;
                  }
                  size_t v94 = (void *)*v98;
                  unint64_t v97 = v98;
                  if (!*v98) {
                    goto LABEL_153;
                  }
                }
                if (v99 >= v96) {
                  break;
                }
                size_t v94 = (void *)v98[1];
                if (!v94)
                {
                  unint64_t v97 = v98 + 1;
                  goto LABEL_153;
                }
              }
            }
            else
            {
LABEL_153:
              uint64_t v100 = operator new(0x28uLL);
              v100[4] = v96;
              *uint64_t v100 = 0;
              v100[1] = 0;
              uint64_t v100[2] = v98;
              *unint64_t v97 = v100;
              uint64_t v101 = *(void *)v93[3];
              if (v101)
              {
                v93[3] = v101;
                uint64_t v100 = (void *)*v97;
              }
              long long v102 = *v95;
              BOOL v7 = v100 == *v95;
              *((unsigned char *)v100 + 24) = v7;
              if (!v7)
              {
                do
                {
                  uint64_t v103 = v100[2];
                  if (*(unsigned char *)(v103 + 24)) {
                    break;
                  }
                  long long v104 = *(unsigned char **)(v103 + 16);
                  uint64_t v105 = *(void *)v104;
                  if (*(void *)v104 == v103)
                  {
                    uint64_t v108 = *((void *)v104 + 1);
                    if (!v108 || (v109 = *(unsigned __int8 *)(v108 + 24), unint64_t v106 = (unsigned char *)(v108 + 24), v109))
                    {
                      if (*(void **)v103 == v100)
                      {
                        *(unsigned char *)(v103 + 24) = 1;
                        v104[24] = 0;
                        uint64_t v112 = *(void *)(v103 + 8);
                        *(void *)long long v104 = v112;
                        if (v112) {
                          goto LABEL_170;
                        }
                      }
                      else
                      {
                        BOOL v110 = *(uint64_t **)(v103 + 8);
                        uint64_t v111 = *v110;
                        *(void *)(v103 + 8) = *v110;
                        if (v111)
                        {
                          *(void *)(v111 + 16) = v103;
                          long long v104 = *(unsigned char **)(v103 + 16);
                        }
                        v110[2] = (uint64_t)v104;
                        *(void *)(*(void *)(v103 + 16) + 8 * (**(void **)(v103 + 16) != v103)) = v110;
                        *BOOL v110 = v103;
                        *(void *)(v103 + 16) = v110;
                        long long v104 = (unsigned char *)v110[2];
                        uint64_t v103 = *(void *)v104;
                        *((unsigned char *)v110 + 24) = 1;
                        v104[24] = 0;
                        uint64_t v112 = *(void *)(v103 + 8);
                        *(void *)long long v104 = v112;
                        if (v112) {
LABEL_170:
                        }
                          *(void *)(v112 + 16) = v104;
                      }
                      *(void *)(v103 + 16) = *((void *)v104 + 2);
                      *(void *)(*((void *)v104 + 2) + 8 * (**((void **)v104 + 2) != (void)v104)) = v103;
                      *(void *)(v103 + 8) = v104;
LABEL_176:
                      *((void *)v104 + 2) = v103;
                      break;
                    }
                  }
                  else if (!v105 || (v107 = *(unsigned __int8 *)(v105 + 24), unint64_t v106 = (unsigned char *)(v105 + 24), v107))
                  {
                    if (*(void **)v103 == v100)
                    {
                      uint64_t v118 = v100[1];
                      *(void *)uint64_t v103 = v118;
                      if (v118)
                      {
                        *(void *)(v118 + 16) = v103;
                        long long v104 = *(unsigned char **)(v103 + 16);
                      }
                      uint64_t v100[2] = v104;
                      *(void *)(*(void *)(v103 + 16) + 8 * (**(void **)(v103 + 16) != v103)) = v100;
                      v100[1] = v103;
                      *(void *)(v103 + 16) = v100;
                      long long v104 = (unsigned char *)v100[2];
                      *((unsigned char *)v100 + 24) = 1;
                      v104[24] = 0;
                      uint64_t v103 = *((void *)v104 + 1);
                      BOOL v113 = *(void **)v103;
                      *((void *)v104 + 1) = *(void *)v103;
                      if (v113) {
LABEL_174:
                      }
                        v113[2] = v104;
                    }
                    else
                    {
                      *(unsigned char *)(v103 + 24) = 1;
                      v104[24] = 0;
                      uint64_t v103 = *((void *)v104 + 1);
                      BOOL v113 = *(void **)v103;
                      *((void *)v104 + 1) = *(void *)v103;
                      if (v113) {
                        goto LABEL_174;
                      }
                    }
                    *(void *)(v103 + 16) = *((void *)v104 + 2);
                    *(void *)(*((void *)v104 + 2) + 8 * (**((void **)v104 + 2) != (void)v104)) = v103;
                    *(void *)uint64_t v103 = v104;
                    goto LABEL_176;
                  }
                  *(unsigned char *)(v103 + 24) = 1;
                  uint64_t v100 = v104;
                  v104[24] = v104 == (unsigned char *)v102;
                  *unint64_t v106 = 1;
                }
                while (v104 != (unsigned char *)v102);
              }
              ++v93[5];
            }
            uint64_t v114 = (void *)v88[1];
            if (v114)
            {
              do
              {
                uint64_t v115 = v114;
                uint64_t v114 = (void *)*v114;
              }
              while (v114);
            }
            else
            {
              do
              {
                uint64_t v115 = (void *)v88[2];
                BOOL v7 = *v115 == (void)v88;
                size_t v88 = v115;
              }
              while (!v7);
            }
            uint64_t v116 = (void *)v91[1];
            if (v116)
            {
              do
              {
                uint64_t v117 = v116;
                uint64_t v116 = (void *)*v116;
              }
              while (v116);
            }
            else
            {
              do
              {
                uint64_t v117 = (void *)v91[2];
                BOOL v7 = *v117 == (void)v91;
                uint64_t v91 = v117;
              }
              while (!v7);
            }
            uint64_t v91 = v117;
            size_t v88 = v115;
          }
          while (v117 != v92);
        }
        unint64_t v87 = (void *)*v547;
      }
      while (*v547);
    }
  }
  unint64_t v119 = (char *)v598;
  if ((void)v598)
  {
    while (1)
    {
      uint64_t v120 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(&v594, (uint64_t)(v119 + 16));
      uint64_t v121 = *(char **)v119;
      if (!v120) {
        break;
      }
LABEL_201:
      unint64_t v119 = v121;
      if (!v121) {
        goto LABEL_230;
      }
    }
    unint64_t v122 = *((void *)&__dst + 1);
    unint64_t v123 = *((void *)v119 + 1);
    uint8x8_t v124 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&__dst + 8));
    v124.i16[0] = vaddlv_u8(v124);
    if (v124.u32[0] > 1uLL)
    {
      if (v123 >= *((void *)&__dst + 1)) {
        v123 %= *((void *)&__dst + 1);
      }
    }
    else
    {
      v123 &= *((void *)&__dst + 1) - 1;
    }
    uint64_t v125 = *(char **)(__dst + 8 * v123);
    do
    {
      unint64_t v126 = v125;
      uint64_t v125 = *(char **)v125;
    }
    while (v125 != v119);
    if (v126 == (char *)&v598) {
      goto LABEL_1043;
    }
    unint64_t v127 = *((void *)v126 + 1);
    if (v124.u32[0] > 1uLL)
    {
      if (v127 >= *((void *)&__dst + 1)) {
        v127 %= *((void *)&__dst + 1);
      }
    }
    else
    {
      v127 &= *((void *)&__dst + 1) - 1;
    }
    uint64_t v128 = *(void *)v119;
    if (v127 != v123)
    {
LABEL_1043:
      if (v121)
      {
        unint64_t v129 = *((void *)v121 + 1);
        if (v124.u32[0] > 1uLL)
        {
          unint64_t v130 = *((void *)v121 + 1);
          if (v129 >= *((void *)&__dst + 1)) {
            unint64_t v130 = v129 % *((void *)&__dst + 1);
          }
        }
        else
        {
          unint64_t v130 = v129 & (*((void *)&__dst + 1) - 1);
        }
        uint64_t v128 = *(void *)v119;
        if (v130 == v123) {
          goto LABEL_224;
        }
      }
      *(void *)(__dst + 8 * v123) = 0;
      uint64_t v128 = *(void *)v119;
    }
    if (!v128)
    {
LABEL_198:
      *(void *)unint64_t v126 = v128;
      *(void *)unint64_t v119 = 0;
      --*((void *)&v598 + 1);
      if (v119[39] < 0) {
        operator delete(*((void **)v119 + 2));
      }
      operator delete(v119);
      goto LABEL_201;
    }
    unint64_t v129 = *(void *)(v128 + 8);
LABEL_224:
    if (v124.u32[0] > 1uLL)
    {
      if (v129 >= v122) {
        v129 %= v122;
      }
    }
    else
    {
      v129 &= v122 - 1;
    }
    if (v129 != v123)
    {
      *(void *)(__dst + 8 * v129) = v126;
      uint64_t v128 = *(void *)v119;
    }
    goto LABEL_198;
  }
LABEL_230:
  std::unordered_map<unsigned long,std::set<unsigned long>>::unordered_map((uint64_t)v582, (uint64_t)v603);
  std::unordered_map<std::string,int>::unordered_map((uint64_t)v584, (uint64_t)&__dst);
  uint64_t v131 = (void **)v595;
  if ((void)v595)
  {
    do
    {
      int v144 = (void **)*v131;
      if (*((char *)v131 + 39) < 0) {
        operator delete(v131[2]);
      }
      operator delete(v131);
      uint64_t v131 = v144;
    }
    while (v144);
  }
  int v132 = (void *)v594;
  *(void *)&long long v594 = 0;
  if (v132) {
    operator delete(v132);
  }
  size_t v133 = (void **)v598;
  if ((void)v598)
  {
    do
    {
      BOOL v145 = (void **)*v133;
      if (*((char *)v133 + 39) < 0) {
        operator delete(v133[2]);
      }
      operator delete(v133);
      size_t v133 = v145;
    }
    while (v145);
  }
  long long v134 = (void *)__dst;
  *(void *)&long long __dst = 0;
  if (v134) {
    operator delete(v134);
  }
  uint64_t v135 = *(void ***)&v603[16];
  if (*(void *)&v603[16])
  {
    do
    {
      uint64_t v136 = *v135;
      std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)(v135 + 3), v135[4]);
      operator delete(v135);
      uint64_t v135 = (void **)v136;
    }
    while (v136);
  }
  uint64_t v137 = *(void **)v603;
  *(void *)v603 = 0;
  if (v137) {
    operator delete(v137);
  }
  int v138 = *(char **)v558;
  if (*(void *)v558)
  {
    do
    {
      uint64_t v146 = *(char **)v138;
      std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)(v138 + 40), *((void **)v138 + 6));
      if (v138[39] < 0) {
        operator delete(*((void **)v138 + 2));
      }
      operator delete(v138);
      int v138 = v146;
    }
    while (v146);
  }
  size_t v139 = __p[0];
  __p[0] = 0;
  if (v139) {
    operator delete(v139);
  }
  uint64_t v140 = v591[0];
  if (v591[0])
  {
    size_t v141 = v591[1];
    int v142 = v591[0];
    if (v591[1] != v591[0])
    {
      do
      {
        size_t v141 = (std::string *)((char *)v141 - 80);
        std::allocator<std::pair<std::unordered_set<std::string>,std::unordered_set<std::string>>>::destroy[abi:ne180100]((uint64_t)v592, (uint64_t)v141);
      }
      while (v141 != v140);
      int v142 = v591[0];
    }
    v591[1] = v140;
    operator delete(v142);
  }
  unint64_t v581 = 0;
  if ((unint64_t)(v545 + 71) < 0x8F)
  {
    BOOL v143 = a5;
LABEL_601:
    *(_OWORD *)BOOL v143 = *(_OWORD *)v589;
    v143[2] = v590;
    v589[1] = 0;
    v590 = 0;
    v589[0] = 0;
    goto LABEL_602;
  }
  char v543 = 0;
  unint64_t v147 = 0;
  uint64_t v148 = a1 + 40;
  uint64_t v149 = (std::string *)&v558[8];
  while (2)
  {
    unint64_t v546 = v147;
    v548 = *a4;
    unint64_t v580 = 0;
    uint64_t v150 = (unint64_t *)&v548[72 * v147];
    unint64_t v151 = *v150;
    unint64_t v580 = *v150;
    int v152 = *(char *)(a2 + 23);
    if (v152 >= 0) {
      size_t v153 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      size_t v153 = *(void *)(a2 + 8);
    }
    unint64_t v154 = v153 + 1;
    if (v153 + 1 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    uint64_t v155 = *(void **)(a1 + 80);
    if (v154 >= 0x17)
    {
      BOOL v157 = v149;
      uint64_t v158 = v148;
      uint64_t v159 = (v154 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v154 | 7) != 0x17) {
        uint64_t v159 = v154 | 7;
      }
      uint64_t v160 = v159 + 1;
      p_dst = (long long *)operator new(v159 + 1);
      *((void *)&__dst + 1) = v153 + 1;
      *(void *)&long long v598 = v160 | 0x8000000000000000;
      *(void *)&long long __dst = p_dst;
      uint64_t v148 = v158;
      uint64_t v149 = v157;
    }
    else
    {
      *(void *)&long long v598 = 0;
      long long __dst = 0uLL;
      p_dst = &__dst;
      BYTE7(v598) = v153 + 1;
      if (!v153) {
        goto LABEL_275;
      }
    }
    if (v152 >= 0) {
      uint64_t v161 = (const void *)a2;
    }
    else {
      uint64_t v161 = *(const void **)a2;
    }
    memmove(p_dst, v161, v153);
LABEL_275:
    *(_WORD *)((char *)p_dst + v153) = 95;
    uint64_t v162 = **(void **)(a1 + 16) + 24 * v151;
    int v163 = *(char *)(v162 + 23);
    if (v163 >= 0) {
      uint64_t v164 = (const std::string::value_type *)(**(void **)(a1 + 16) + 24 * v151);
    }
    else {
      uint64_t v164 = *(const std::string::value_type **)v162;
    }
    if (v163 >= 0) {
      std::string::size_type v165 = *(unsigned __int8 *)(v162 + 23);
    }
    else {
      std::string::size_type v165 = *(void *)(v162 + 8);
    }
    uint64_t v166 = std::string::append((std::string *)&__dst, v164, v165);
    long long v167 = *(_OWORD *)&v166->__r_.__value_.__l.__data_;
    *(void *)v558 = *((void *)&v166->__r_.__value_.__l + 2);
    *(_OWORD *)std::string __p = v167;
    v166->__r_.__value_.__l.__size_ = 0;
    v166->__r_.__value_.__r.__words[2] = 0;
    v166->__r_.__value_.__r.__words[0] = 0;
    Espresso::MILTranslator::NameGenerator::NameForPrefix(v155, (uint64_t)__p, (uint64_t)v603);
    long long v168 = v150;
    if ((v558[7] & 0x80000000) != 0)
    {
      operator delete(__p[0]);
      if ((SBYTE7(v598) & 0x80000000) == 0)
      {
LABEL_283:
        int8x8_t v169 = (int8x8_t)v586[1];
        if (!v586[1]) {
          goto LABEL_306;
        }
        goto LABEL_287;
      }
    }
    else if ((SBYTE7(v598) & 0x80000000) == 0)
    {
      goto LABEL_283;
    }
    operator delete((void *)__dst);
    int8x8_t v169 = (int8x8_t)v586[1];
    if (!v586[1]) {
      goto LABEL_306;
    }
LABEL_287:
    uint8x8_t v170 = (uint8x8_t)vcnt_s8(v169);
    v170.i16[0] = vaddlv_u8(v170);
    if (v170.u32[0] > 1uLL)
    {
      unint64_t v171 = v580;
      if (v580 >= *(void *)&v169) {
        unint64_t v171 = v580 % *(void *)&v169;
      }
    }
    else
    {
      unint64_t v171 = (*(void *)&v169 - 1) & v580;
    }
    uint64_t v172 = (void *)*((void *)v586[0] + v171);
    if (!v172 || (std::string::size_type v173 = (void *)*v172) == 0)
    {
LABEL_306:
      long long __dst = 0uLL;
      *(void *)&long long v598 = 0;
LABEL_307:
      Espresso::AOT::SegmentsLowerer::ExtractSegment((void *)a1, a2);
      *(void *)&long long v594 = v603;
      int v177 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v148, v603, (uint64_t)&std::piecewise_construct, (long long **)&v594);
      unint64_t v178 = v546;
      long long v179 = *(_OWORD *)__p;
      __p[0] = 0;
      __p[1] = 0;
      int v180 = (std::__shared_weak_count *)*((void *)v177 + 6);
      *(_OWORD *)(v177 + 40) = v179;
      if (v180 && !atomic_fetch_add(&v180->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
        std::__shared_weak_count::__release_weak(v180);
        size_t v181 = (std::__shared_weak_count *)__p[1];
        if (!__p[1]) {
          goto LABEL_311;
        }
      }
      else
      {
        size_t v181 = (std::__shared_weak_count *)__p[1];
        if (!__p[1]) {
          goto LABEL_311;
        }
      }
      if (!atomic_fetch_add(&v181->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v181->__on_zero_shared)(v181);
        std::__shared_weak_count::__release_weak(v181);
        if ((v603[23] & 0x80000000) != 0) {
          goto LABEL_316;
        }
        goto LABEL_312;
      }
LABEL_311:
      if ((v603[23] & 0x80000000) != 0) {
        goto LABEL_316;
      }
      goto LABEL_312;
    }
    uint64_t v174 = *(void *)&v169 - 1;
    if (v170.u32[0] < 2uLL)
    {
      while (1)
      {
        uint64_t v175 = v173[1];
        if (v580 == v175)
        {
          if (v173[2] == v580) {
            goto LABEL_344;
          }
        }
        else if ((v175 & v174) != v171)
        {
          goto LABEL_306;
        }
        std::string::size_type v173 = (void *)*v173;
        if (!v173) {
          goto LABEL_306;
        }
      }
    }
    while (1)
    {
      unint64_t v176 = v173[1];
      if (v580 == v176) {
        break;
      }
      if (v176 >= *(void *)&v169) {
        v176 %= *(void *)&v169;
      }
      if (v176 != v171) {
        goto LABEL_306;
      }
LABEL_301:
      std::string::size_type v173 = (void *)*v173;
      if (!v173) {
        goto LABEL_306;
      }
    }
    if (v173[2] != v580) {
      goto LABEL_301;
    }
LABEL_344:
    if (v170.u32[0] > 1uLL)
    {
      unint64_t v197 = v580;
      if (v580 >= *(void *)&v169) {
        unint64_t v197 = v580 % *(void *)&v169;
      }
    }
    else
    {
      unint64_t v197 = v174 & v580;
    }
    int v198 = (void *)*((void *)v586[0] + v197);
    if (!v198 || (uint64_t v199 = (void *)*v198) == 0) {
LABEL_1034:
    }
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    if (v170.u32[0] < 2uLL)
    {
      while (1)
      {
        uint64_t v200 = v199[1];
        if (v200 == v580)
        {
          if (v199[2] == v580) {
            goto LABEL_356;
          }
        }
        else if ((v200 & v174) != v197)
        {
          goto LABEL_1034;
        }
        uint64_t v199 = (void *)*v199;
        if (!v199) {
          goto LABEL_1034;
        }
      }
    }
    while (2)
    {
      unint64_t v204 = v199[1];
      if (v204 != v580)
      {
        if (v204 >= *(void *)&v169) {
          v204 %= *(void *)&v169;
        }
        if (v204 != v197) {
          goto LABEL_1034;
        }
LABEL_361:
        uint64_t v199 = (void *)*v199;
        if (!v199) {
          goto LABEL_1034;
        }
        continue;
      }
      break;
    }
    if (v199[2] != v580) {
      goto LABEL_361;
    }
LABEL_356:
    unint64_t v201 = v199[6];
    long long __dst = 0uLL;
    *(void *)&long long v598 = 0;
    if (!v586[1]) {
      goto LABEL_1035;
    }
    uint8x8_t v202 = (uint8x8_t)vcnt_s8((int8x8_t)v586[1]);
    v202.i16[0] = vaddlv_u8(v202);
    if (v202.u32[0] > 1uLL)
    {
      unint64_t v203 = v580;
      if ((void *)v580 >= v586[1]) {
        unint64_t v203 = v580 % (unint64_t)v586[1];
      }
    }
    else
    {
      unint64_t v203 = ((unint64_t)v586[1] - 1) & v580;
    }
    uint64_t v205 = (const std::string **)*((void *)v586[0] + v203);
    if (!v205 || (std::string::size_type v206 = *v205) == 0) {
LABEL_1035:
    }
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    if (v202.u32[0] < 2uLL)
    {
      while (1)
      {
        std::string::size_type v208 = v206->__r_.__value_.__l.__size_;
        if (v208 == v580)
        {
          if (v206->__r_.__value_.__r.__words[2] == v580) {
            goto LABEL_384;
          }
        }
        else if ((v208 & ((std::string::size_type)v586[1] - 1)) != v203)
        {
          goto LABEL_1035;
        }
        std::string::size_type v206 = (const std::string *)v206->__r_.__value_.__r.__words[0];
        if (!v206) {
          goto LABEL_1035;
        }
      }
    }
    while (2)
    {
      unint64_t v207 = v206->__r_.__value_.__l.__size_;
      if (v207 != v580)
      {
        if ((void *)v207 >= v586[1]) {
          v207 %= (unint64_t)v586[1];
        }
        if (v207 != v203) {
          goto LABEL_1035;
        }
LABEL_374:
        std::string::size_type v206 = (const std::string *)v206->__r_.__value_.__r.__words[0];
        if (!v206) {
          goto LABEL_1035;
        }
        continue;
      }
      break;
    }
    if (v206->__r_.__value_.__r.__words[2] != v580) {
      goto LABEL_374;
    }
LABEL_384:
    uint64_t v209 = v206 + 1;
    std::string::size_type v579 = v206[2].__r_.__value_.__r.__words[0];
    __p[0] = (void *)&v206[1];
    uint64_t v210 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v148, (unsigned __int8 *)&v206[1], (uint64_t)&std::piecewise_construct, (long long **)__p);
    uint64_t v211 = (std::__shared_weak_count *)*((void *)v210 + 6);
    unint64_t v577 = *((void *)v210 + 5);
    v578 = v211;
    if (v211) {
      atomic_fetch_add_explicit(&v211->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    Espresso::AOT::SegmentsLowerer::ExtractSegment((void *)a1, a2);
    std::string::operator=((std::string *)v603, v209);
    uint64_t v212 = *(std::__shared_weak_count **)(a1 + 32);
    uint64_t v573 = *(void *)(a1 + 24);
    v574 = v212;
    if (v212) {
      atomic_fetch_add_explicit(&v212->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v571 = (unint64_t *)v577;
    v572 = v578;
    if (v578) {
      atomic_fetch_add_explicit(&v578->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v569 = v575;
    v570 = v576;
    if (v576) {
      atomic_fetch_add_explicit(&v576->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    Espresso::AOT::MergeFunctions(&v573, a3, v584, (uint64_t *)&v571, &v569, __p);
    *(void *)&long long v594 = v603;
    uint64_t v213 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v148, v603, (uint64_t)&std::piecewise_construct, (long long **)&v594);
    long long v214 = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v215 = (std::__shared_weak_count *)*((void *)v213 + 6);
    *(_OWORD *)(v213 + 40) = v214;
    if (v215 && !atomic_fetch_add(&v215->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v215->__on_zero_shared)(v215);
      std::__shared_weak_count::__release_weak(v215);
    }
    int v216 = (std::__shared_weak_count *)__p[1];
    if (__p[1] && !atomic_fetch_add((atomic_ullong *volatile)__p[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v216->__on_zero_shared)(v216);
      std::__shared_weak_count::__release_weak(v216);
    }
    std::string::size_type v217 = v570;
    if (v570 && !atomic_fetch_add(&v570->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v217->__on_zero_shared)(v217);
      std::__shared_weak_count::__release_weak(v217);
    }
    int v218 = v572;
    if (v572 && !atomic_fetch_add(&v572->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v218->__on_zero_shared)(v218);
      std::__shared_weak_count::__release_weak(v218);
    }
    size_t v219 = v574;
    if (v574 && !atomic_fetch_add(&v574->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v219->__on_zero_shared)(v219);
      std::__shared_weak_count::__release_weak(v219);
    }
    BOOL v220 = *(std::__shared_weak_count **)(a1 + 32);
    uint64_t v566 = *(void *)(a1 + 24);
    v567 = v220;
    if (v220) {
      atomic_fetch_add_explicit(&v220->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    __p[0] = v603;
    uint64_t v221 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v148, v603, (uint64_t)&std::piecewise_construct, (long long **)__p);
    uint64_t v222 = (std::__shared_weak_count *)*((void *)v221 + 6);
    uint64_t v564 = *((void *)v221 + 5);
    v565 = v222;
    if (v222) {
      atomic_fetch_add_explicit(&v222->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    MIL::Builder::FunctionBuilder::Make();
    std::string v223 = v565;
    if (v565 && !atomic_fetch_add(&v565->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v223->__on_zero_shared)(v223);
      std::__shared_weak_count::__release_weak(v223);
    }
    uint64_t v224 = v567;
    if (v567 && !atomic_fetch_add(&v567->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v224->__on_zero_shared)(v224);
      std::__shared_weak_count::__release_weak(v224);
    }
    MIL::Builder::FunctionBuilder::SelectedSpecialization(v568);
    MIL::Builder::FunctionBuilder::GetBlock();
    MIL::Builder::BlockBuilder::GetOutputNames((uint64_t *)&v594, (MIL::Builder::BlockBuilder *)v562[1]);
    v591[1] = 0;
    v591[0] = 0;
    v592[0] = 0;
    MIL::Builder::FunctionBuilder::CreateFunction(v562, v568);
    uint64_t v225 = v148;
    int64_t v226 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v562[0] + 128))(v562[0]);
    v601 = 0;
    unint64_t v602 = 0;
    v600 = (uint64_t **)&v601;
    int64_t v227 = v226 + 1;
    unint64_t v228 = (void *)*v226;
    if ((void *)*v226 != v226 + 1)
    {
LABEL_425:
      long long v240 = (char **)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__find_equal<std::string>(&v600, &v601, __p, &v605, v228 + 4);
      if (*v240)
      {
        uint64_t v241 = (void *)v228[1];
        if (!v241) {
          goto LABEL_460;
        }
        goto LABEL_450;
      }
      uint64_t v242 = (char *)operator new(0x40uLL);
      uint64_t v243 = (std::string *)(v242 + 32);
      if (*((char *)v228 + 55) < 0)
      {
        std::string::__init_copy_ctor_external(v243, (const std::string::value_type *)v228[4], v228[5]);
      }
      else
      {
        long long v244 = *((_OWORD *)v228 + 2);
        *((void *)v242 + 6) = v228[6];
        *(_OWORD *)&v243->__r_.__value_.__l.__data_ = v244;
      }
      *((void *)v242 + 7) = v228[7];
      std::string::size_type v245 = __p[0];
      *(void *)uint64_t v242 = 0;
      *((void *)v242 + 1) = 0;
      *((void *)v242 + 2) = v245;
      std::__shared_weak_count *v240 = v242;
      if (*v600)
      {
        v600 = (uint64_t **)*v600;
        uint64_t v242 = *v240;
      }
      std::string::size_type v246 = v601;
      v242[24] = v242 == v601;
      if (v242 == v246)
      {
LABEL_449:
        ++v602;
        uint64_t v241 = (void *)v228[1];
        if (!v241) {
          goto LABEL_460;
        }
        goto LABEL_450;
      }
      while (1)
      {
        uint64_t v247 = *((void *)v242 + 2);
        if (*(unsigned char *)(v247 + 24)) {
          goto LABEL_449;
        }
        unint64_t v248 = *(char **)(v247 + 16);
        uint64_t v249 = *(void *)v248;
        if (*(void *)v248 == v247)
        {
          uint64_t v252 = *((void *)v248 + 1);
          if (!v252 || (int v253 = *(unsigned __int8 *)(v252 + 24), v250 = (unsigned char *)(v252 + 24), v253))
          {
            if (*(char **)v247 == v242)
            {
              *(unsigned char *)(v247 + 24) = 1;
              v248[24] = 0;
              uint64_t v256 = *(void *)(v247 + 8);
              *(void *)unint64_t v248 = v256;
              if (v256) {
                goto LABEL_447;
              }
            }
            else
            {
              uint64_t v254 = *(uint64_t **)(v247 + 8);
              uint64_t v255 = *v254;
              *(void *)(v247 + 8) = *v254;
              if (v255)
              {
                *(void *)(v255 + 16) = v247;
                unint64_t v248 = *(char **)(v247 + 16);
              }
              v254[2] = (uint64_t)v248;
              *(void *)(*(void *)(v247 + 16) + 8 * (**(void **)(v247 + 16) != v247)) = v254;
              *uint64_t v254 = v247;
              *(void *)(v247 + 16) = v254;
              unint64_t v248 = (char *)v254[2];
              uint64_t v247 = *(void *)v248;
              *((unsigned char *)v254 + 24) = 1;
              v248[24] = 0;
              uint64_t v256 = *(void *)(v247 + 8);
              *(void *)unint64_t v248 = v256;
              if (v256) {
LABEL_447:
              }
                *(void *)(v256 + 16) = v248;
            }
            *(void *)(v247 + 16) = *((void *)v248 + 2);
            *(void *)(*((void *)v248 + 2) + 8 * (**((void **)v248 + 2) != (void)v248)) = v247;
            *(void *)(v247 + 8) = v248;
            *((void *)v248 + 2) = v247;
            goto LABEL_449;
          }
        }
        else if (!v249 || (int v251 = *(unsigned __int8 *)(v249 + 24), v250 = (unsigned char *)(v249 + 24), v251))
        {
          if (*(char **)v247 == v242)
          {
            uint64_t v258 = *((void *)v242 + 1);
            *(void *)uint64_t v247 = v258;
            if (v258)
            {
              *(void *)(v258 + 16) = v247;
              unint64_t v248 = *(char **)(v247 + 16);
            }
            *((void *)v242 + 2) = v248;
            *(void *)(*(void *)(v247 + 16) + 8 * (**(void **)(v247 + 16) != v247)) = v242;
            *((void *)v242 + 1) = v247;
            *(void *)(v247 + 16) = v242;
            unint64_t v248 = (char *)*((void *)v242 + 2);
          }
          else
          {
            uint64_t v242 = (char *)*((void *)v242 + 2);
          }
          v242[24] = 1;
          v248[24] = 0;
          uint64_t v259 = (char **)*((void *)v248 + 1);
          long long v260 = *v259;
          *((void *)v248 + 1) = *v259;
          if (v260) {
            *((void *)v260 + 2) = v248;
          }
          v259[2] = (char *)*((void *)v248 + 2);
          *(void *)(*((void *)v248 + 2) + 8 * (**((void **)v248 + 2) != (void)v248)) = v259;
          *uint64_t v259 = v248;
          *((void *)v248 + 2) = v259;
          ++v602;
          uint64_t v241 = (void *)v228[1];
          if (!v241)
          {
            do
            {
LABEL_460:
              uint64_t v257 = (void *)v228[2];
              BOOL v7 = *v257 == (void)v228;
              unint64_t v228 = v257;
            }
            while (!v7);
            goto LABEL_424;
          }
          do
          {
LABEL_450:
            uint64_t v257 = v241;
            uint64_t v241 = (void *)*v241;
          }
          while (v241);
LABEL_424:
          unint64_t v228 = v257;
          if (v257 == v227) {
            break;
          }
          goto LABEL_425;
        }
        *(unsigned char *)(v247 + 24) = 1;
        uint64_t v242 = v248;
        v248[24] = v248 == v246;
        unsigned char *v250 = 1;
        if (v248 == v246) {
          goto LABEL_449;
        }
      }
    }
    uint64_t v229 = v562[0];
    v562[0] = 0;
    if (v229) {
      (*(void (**)(uint64_t))(*(void *)v229 + 8))(v229);
    }
    unint64_t v230 = (uint64_t *)v600;
    uint64_t v231 = v591[1];
    long long v168 = v150;
    unint64_t v178 = v546;
    if (v600 != (uint64_t **)&v601)
    {
      do
      {
        uint64_t v261 = (long long *)(v230 + 4);
        if (v231 >= v592[0])
        {
          uint64_t v231 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)v591, (uint64_t)v261);
          v591[1] = v231;
          uint64_t v263 = (char *)v230[1];
          if (v263) {
            goto LABEL_473;
          }
        }
        else if (*((char *)v230 + 55) < 0)
        {
          std::string::__init_copy_ctor_external(v231++, (const std::string::value_type *)v230[4], v230[5]);
          v591[1] = v231;
          uint64_t v263 = (char *)v230[1];
          if (v263)
          {
            do
            {
LABEL_473:
              uint64_t v264 = (char **)v263;
              uint64_t v263 = *(char **)v263;
            }
            while (v263);
            goto LABEL_465;
          }
        }
        else
        {
          long long v262 = *v261;
          v231->__r_.__value_.__r.__words[2] = v230[6];
          *(_OWORD *)&v231->__r_.__value_.__l.__data_ = v262;
          v591[1] = ++v231;
          uint64_t v263 = (char *)v230[1];
          if (v263) {
            goto LABEL_473;
          }
        }
        do
        {
          uint64_t v264 = (char **)v230[2];
          BOOL v7 = *v264 == (char *)v230;
          unint64_t v230 = (uint64_t *)v264;
        }
        while (!v7);
LABEL_465:
        unint64_t v230 = (uint64_t *)v264;
      }
      while (v264 != &v601);
    }
    __p[0] = (void *)v580;
    __p[1] = 0;
    *(void *)v558 = 0;
    uint64_t v232 = (long long *)v591[0];
    unint64_t v233 = 0xAAAAAAAAAAAAAAABLL * (((char *)v231 - (char *)v591[0]) >> 3);
    v149->__r_.__value_.__l.__size_ = 0;
    v149->__r_.__value_.__r.__words[2] = 0;
    v149->__r_.__value_.__r.__words[0] = 0;
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::string*>,std::__wrap_iter<std::string*>>(v149, v232, (long long *)v231, v233);
    memset(&v560, 0, sizeof(v560));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::string*>,std::__wrap_iter<std::string*>>(&v560, (long long *)v594, *((long long **)&v594 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v594 + 1) - v594) >> 3));
    uint64_t v148 = v225;
    long long v234 = *(_OWORD *)__p;
    v168[2] = *(void *)v558;
    *(_OWORD *)long long v168 = v234;
    uint64_t v235 = (std::string *)&v548[72 * v546];
    p_std::string::pointer data = (void **)&v235[1].__r_.__value_.__l.__data_;
    std::string::pointer data = v235[1].__r_.__value_.__l.__data_;
    if (data)
    {
      std::string::size_type v238 = v235[1].__r_.__value_.__l.__size_;
      uint64_t v239 = v235[1].__r_.__value_.__l.__data_;
      if ((std::string::pointer)v238 != data)
      {
        do
        {
          if (*(char *)(v238 - 1) < 0) {
            operator delete(*(void **)(v238 - 24));
          }
          v238 -= 24;
        }
        while ((std::string::pointer)v238 != data);
        uint64_t v239 = *p_data;
      }
      v235[1].__r_.__value_.__l.__size_ = (std::string::size_type)data;
      operator delete(v239);
      *p_std::string::pointer data = 0;
      v235[1].__r_.__value_.__l.__size_ = 0;
      v235[1].__r_.__value_.__r.__words[2] = 0;
    }
    *(_OWORD *)&v235[1].__r_.__value_.__l.__data_ = *(_OWORD *)&v558[8];
    v235[1].__r_.__value_.__r.__words[2] = (std::string::size_type)v559;
    v149->__r_.__value_.__r.__words[0] = 0;
    v149->__r_.__value_.__l.__size_ = 0;
    v149->__r_.__value_.__r.__words[2] = 0;
    char v265 = (void **)&v235[2].__r_.__value_.__l.__data_;
    std::string::pointer v266 = v235[2].__r_.__value_.__l.__data_;
    if (v266)
    {
      std::string::size_type v267 = v235[2].__r_.__value_.__l.__size_;
      int v268 = v235[2].__r_.__value_.__l.__data_;
      if ((std::string::pointer)v267 != v266)
      {
        do
        {
          if (*(char *)(v267 - 1) < 0) {
            operator delete(*(void **)(v267 - 24));
          }
          v267 -= 24;
        }
        while ((std::string::pointer)v267 != v266);
        int v268 = *v265;
      }
      v235[2].__r_.__value_.__l.__size_ = (std::string::size_type)v266;
      operator delete(v268);
      *char v265 = 0;
      v235[2].__r_.__value_.__l.__size_ = 0;
      v235[2].__r_.__value_.__r.__words[2] = 0;
    }
    v235[2] = v560;
    memset(&v560, 0, sizeof(v560));
    uint64_t v269 = *(void *)&v558[8];
    if (*(void *)&v558[8])
    {
      uint64_t v270 = *(void *)&v558[16];
      long long v271 = *(void **)&v558[8];
      if (*(void *)&v558[16] != *(void *)&v558[8])
      {
        do
        {
          if (*(char *)(v270 - 1) < 0) {
            operator delete(*(void **)(v270 - 24));
          }
          v270 -= 24;
        }
        while (v270 != v269);
        long long v271 = *(void **)&v558[8];
      }
      *(void *)&v558[16] = v269;
      operator delete(v271);
    }
    __p[0] = &v579;
    unint64_t v272 = std::__hash_table<std::__hash_value_type<unsigned long,std::set<unsigned long>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::set<unsigned long>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::set<unsigned long>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::set<unsigned long>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v582, &v579, (uint64_t)&std::piecewise_construct, (uint64_t **)__p);
    std::string::size_type v273 = v272;
    std::string::size_type v275 = (uint64_t **)(v272 + 4);
    size_t v274 = (uint64_t *)v272[4];
    unint64_t v276 = v581;
    if (v274)
    {
      while (1)
      {
        while (1)
        {
          std::string::size_type v277 = (uint64_t **)v274;
          unint64_t v278 = v274[4];
          if (v581 >= v278) {
            break;
          }
          size_t v274 = *v277;
          std::string::size_type v275 = v277;
          if (!*v277) {
            goto LABEL_506;
          }
        }
        if (v278 >= v581) {
          break;
        }
        size_t v274 = v277[1];
        if (!v274)
        {
          std::string::size_type v275 = v277 + 1;
          goto LABEL_506;
        }
      }
    }
    else
    {
      std::string::size_type v277 = (uint64_t **)(v272 + 4);
LABEL_506:
      std::string::size_type v279 = (uint64_t *)operator new(0x28uLL);
      v279[4] = v276;
      uint64_t *v279 = 0;
      v279[1] = 0;
      v279[2] = (uint64_t)v277;
      *std::string::size_type v275 = v279;
      uint64_t v280 = *(void *)v273[3];
      if (v280)
      {
        v273[3] = v280;
        std::string::size_type v279 = *v275;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v273[4], v279);
      ++v273[5];
    }
    __p[0] = &v581;
    v281 = std::__hash_table<std::__hash_value_type<unsigned long,std::set<unsigned long>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::set<unsigned long>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::set<unsigned long>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::set<unsigned long>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v582, &v581, (uint64_t)&std::piecewise_construct, (uint64_t **)__p);
    v282 = v281;
    unint64_t v284 = (uint64_t **)(v281 + 4);
    long long v283 = (uint64_t *)v281[4];
    unint64_t v285 = v579;
    if (v283)
    {
      while (1)
      {
        while (1)
        {
          v286 = (uint64_t **)v283;
          unint64_t v287 = v283[4];
          if (v579 >= v287) {
            break;
          }
          long long v283 = *v286;
          unint64_t v284 = v286;
          if (!*v286) {
            goto LABEL_516;
          }
        }
        if (v287 >= v579) {
          break;
        }
        long long v283 = v286[1];
        if (!v283)
        {
          unint64_t v284 = v286 + 1;
          goto LABEL_516;
        }
      }
    }
    else
    {
      v286 = (uint64_t **)(v281 + 4);
LABEL_516:
      uint64_t v288 = (uint64_t *)operator new(0x28uLL);
      v288[4] = v285;
      *uint64_t v288 = 0;
      v288[1] = 0;
      v288[2] = (uint64_t)v286;
      *unint64_t v284 = v288;
      uint64_t v289 = *(void *)v282[3];
      if (v289)
      {
        v282[3] = v289;
        uint64_t v288 = *v284;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v282[4], v288);
      ++v282[5];
      unint64_t v285 = v579;
    }
    MEMORY[0x192FF0F50]((char *)v589[0] + 80 * v285, "");
    std::__tree<std::string>::destroy((uint64_t)&v600, v601);
    uint64_t v290 = v591[0];
    if (v591[0])
    {
      std::string::size_type v291 = v591[1];
      long long v292 = v591[0];
      if (v591[1] != v591[0])
      {
        do
        {
          if (SHIBYTE(v291[-1].__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v291[-1].__r_.__value_.__l.__data_);
          }
          --v291;
        }
        while (v291 != v290);
        long long v292 = v591[0];
      }
      v591[1] = v290;
      operator delete(v292);
    }
    uint64_t v293 = v594;
    if ((void)v594)
    {
      uint64_t v294 = *((void *)&v594 + 1);
      uint64_t v295 = (void *)v594;
      if (*((void *)&v594 + 1) != (void)v594)
      {
        do
        {
          if (*(char *)(v294 - 1) < 0) {
            operator delete(*(void **)(v294 - 24));
          }
          v294 -= 24;
        }
        while (v294 != v293);
        uint64_t v295 = (void *)v594;
      }
      *((void *)&v594 + 1) = v293;
      operator delete(v295);
    }
    std::string v296 = v563;
    if (v563 && !atomic_fetch_add(&v563->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v296->__on_zero_shared)(v296);
      std::__shared_weak_count::__release_weak(v296);
    }
    uint64_t v297 = v568;
    v568 = 0;
    if (v297) {
      (*(void (**)(MIL::Builder::FunctionBuilder *))(*(void *)v297 + 8))(v297);
    }
    uint64_t v298 = v576;
    if (v576 && !atomic_fetch_add(&v576->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v298->__on_zero_shared)(v298);
      std::__shared_weak_count::__release_weak(v298);
      uint64_t v299 = v578;
      if (!v578) {
        goto LABEL_544;
      }
LABEL_543:
      if (atomic_fetch_add(&v299->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_544;
      }
      ((void (*)(std::__shared_weak_count *))v299->__on_zero_shared)(v299);
      std::__shared_weak_count::__release_weak(v299);
      char v543 = 1;
      if ((v603[23] & 0x80000000) == 0) {
        goto LABEL_312;
      }
LABEL_316:
      std::string::__init_copy_ctor_external((std::string *)__p, *(const std::string::value_type **)v603, *(std::string::size_type *)&v603[8]);
    }
    else
    {
      uint64_t v299 = v578;
      if (v578) {
        goto LABEL_543;
      }
LABEL_544:
      char v543 = 1;
      if ((v603[23] & 0x80000000) != 0) {
        goto LABEL_316;
      }
LABEL_312:
      *(_OWORD *)std::string __p = *(_OWORD *)v603;
      *(void *)v558 = *(void *)&v603[16];
    }
    *(void *)&v558[8] = v581;
    *(void *)&long long v594 = &v580;
    uint64_t v182 = std::__hash_table<std::__hash_value_type<unsigned long,std::pair<std::string,unsigned long>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::pair<std::string,unsigned long>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::pair<std::string,unsigned long>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::pair<std::string,unsigned long>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v586, &v580, (uint64_t)&std::piecewise_construct, (void **)&v594);
    size_t v183 = (void **)(v182 + 24);
    if (v182[47] < 0) {
      operator delete(*v183);
    }
    *(_OWORD *)size_t v183 = *(_OWORD *)__p;
    *((void *)v182 + 5) = *(void *)v558;
    *((void *)v182 + 6) = *(void *)&v558[8];
    int v184 = &v548[72 * v178];
    unint64_t v185 = *v168;
    *(_OWORD *)std::string __p = *(_OWORD *)v603;
    *(void *)v558 = *(void *)&v603[16];
    memset(v603, 0, 24);
    v149->__r_.__value_.__l.__size_ = 0;
    v149->__r_.__value_.__r.__words[2] = 0;
    v149->__r_.__value_.__r.__words[0] = 0;
    *(_OWORD *)&v558[8] = *(_OWORD *)(v184 + 24);
    v559 = (void *)*((void *)v184 + 5);
    *((void *)v184 + 3) = 0;
    *((void *)v184 + 4) = 0;
    *((void *)v184 + 5) = 0;
    memset(&v560, 0, sizeof(v560));
    std::string v560 = *(std::string *)(v184 + 2);
    *((void *)v184 + 6) = 0;
    *((void *)v184 + 7) = 0;
    *((void *)v184 + 8) = 0;
    unint64_t v561 = v185;
    int v186 = (char *)v589[1];
    if (v589[1] >= v590)
    {
      uint64_t v189 = std::vector<Espresso::AOT::SegmentsLowerer::SegmentFuncDef>::__emplace_back_slow_path<Espresso::AOT::SegmentsLowerer::SegmentFuncDef>(v589, (uint64_t)__p);
      std::string::size_type v190 = v560.__r_.__value_.__r.__words[0];
      v589[1] = v189;
      if (v560.__r_.__value_.__r.__words[0])
      {
        std::string::size_type v191 = v560.__r_.__value_.__l.__size_;
        uint64_t v192 = (void *)v560.__r_.__value_.__r.__words[0];
        if (v560.__r_.__value_.__l.__size_ != v560.__r_.__value_.__r.__words[0])
        {
          do
          {
            if (*(char *)(v191 - 1) < 0) {
              operator delete(*(void **)(v191 - 24));
            }
            v191 -= 24;
          }
          while (v191 != v190);
          uint64_t v192 = (void *)v560.__r_.__value_.__r.__words[0];
        }
        v560.__r_.__value_.__l.__size_ = v190;
        operator delete(v192);
      }
    }
    else
    {
      long long v187 = *(_OWORD *)__p;
      *((void *)v589[1] + 2) = *(void *)v558;
      *((void *)v186 + 3) = 0;
      *(_OWORD *)int v186 = v187;
      __p[1] = 0;
      *(void *)v558 = 0;
      __p[0] = 0;
      *((void *)v186 + 4) = 0;
      *((void *)v186 + 5) = 0;
      *(_OWORD *)(v186 + 24) = *(_OWORD *)&v558[8];
      uint64_t v188 = v559;
      v149->__r_.__value_.__r.__words[0] = 0;
      v149->__r_.__value_.__l.__size_ = 0;
      *((void *)v186 + 5) = v188;
      *((void *)v186 + 6) = 0;
      v149->__r_.__value_.__r.__words[2] = 0;
      *((void *)v186 + 7) = 0;
      *((void *)v186 + 8) = 0;
      *((std::string *)v186 + 2) = v560;
      memset(&v560, 0, sizeof(v560));
      *((void *)v186 + 9) = v561;
      v589[1] = v186 + 80;
    }
    uint64_t v193 = *(void *)&v558[8];
    if (*(void *)&v558[8])
    {
      uint64_t v194 = *(void *)&v558[16];
      BOOL v195 = *(void **)&v558[8];
      if (*(void *)&v558[16] != *(void *)&v558[8])
      {
        do
        {
          if (*(char *)(v194 - 1) < 0) {
            operator delete(*(void **)(v194 - 24));
          }
          v194 -= 24;
        }
        while (v194 != v193);
        BOOL v195 = *(void **)&v558[8];
      }
      *(void *)&v558[16] = v193;
      operator delete(v195);
    }
    if ((v558[7] & 0x80000000) != 0)
    {
      operator delete(__p[0]);
      int v196 = (void *)__dst;
      BOOL v143 = a5;
      if ((void)__dst)
      {
LABEL_339:
        *((void *)&__dst + 1) = v196;
        operator delete(v196);
      }
    }
    else
    {
      int v196 = (void *)__dst;
      BOOL v143 = a5;
      if ((void)__dst) {
        goto LABEL_339;
      }
    }
    if ((v603[23] & 0x80000000) != 0) {
      operator delete(*(void **)v603);
    }
    unint64_t v147 = v581 + 1;
    unint64_t v581 = v147;
    if (v147 < (unint64_t)v553) {
      continue;
    }
    break;
  }
  if ((v543 & 1) == 0) {
    goto LABEL_601;
  }
  uint8x8_t v300 = (char *)v589[0];
  uint64_t v301 = (char *)v589[1];
  if (v589[0] == v589[1])
  {
    uint64_t v301 = (char *)v589[0];
    goto LABEL_625;
  }
  while (2)
  {
    while (2)
    {
      if (v300[23] < 0)
      {
        if (!*((void *)v300 + 1)) {
          break;
        }
        goto LABEL_554;
      }
      if (v300[23])
      {
LABEL_554:
        v300 += 80;
        if (v300 == v301) {
          goto LABEL_624;
        }
        continue;
      }
      break;
    }
    uint64_t v302 = v300 + 80;
    uint64_t v303 = (void **)v300;
    if (v300 + 80 == v301)
    {
      if (v301 == v300) {
        goto LABEL_580;
      }
      do
      {
LABEL_583:
        uint64_t v312 = *((void *)v301 - 4);
        if (v312)
        {
          uint64_t v313 = *((void *)v301 - 3);
          uint64_t v314 = (void *)*((void *)v301 - 4);
          if (v313 != v312)
          {
            do
            {
              if (*(char *)(v313 - 1) < 0) {
                operator delete(*(void **)(v313 - 24));
              }
              v313 -= 24;
            }
            while (v313 != v312);
            uint64_t v314 = (void *)*((void *)v301 - 4);
          }
          *((void *)v301 - 3) = v312;
          operator delete(v314);
        }
        uint64_t v315 = *((void *)v301 - 7);
        if (v315)
        {
          uint64_t v316 = *((void *)v301 - 6);
          uint64_t v317 = (void *)*((void *)v301 - 7);
          if (v316 != v315)
          {
            do
            {
              if (*(char *)(v316 - 1) < 0) {
                operator delete(*(void **)(v316 - 24));
              }
              v316 -= 24;
            }
            while (v316 != v315);
            uint64_t v317 = (void *)*((void *)v301 - 7);
          }
          *((void *)v301 - 6) = v315;
          operator delete(v317);
        }
        size_t v318 = (void **)(v301 - 80);
        if (*(v301 - 57) < 0) {
          operator delete(*v318);
        }
        v301 -= 80;
      }
      while (v318 != v303);
    }
    else
    {
      do
      {
        if (*((char *)v303 + 23) < 0) {
          operator delete(*v303);
        }
        *(_OWORD *)uint64_t v303 = *(_OWORD *)v302;
        v303[2] = (void *)*((void *)v302 + 2);
        v302[23] = 0;
        char *v302 = 0;
        uint64_t v305 = v303 + 3;
        uint64_t v306 = (void **)v303[3];
        if (v306)
        {
          v307 = (void **)v303[4];
          uint64_t v308 = v303[3];
          if (v307 != v306)
          {
            do
            {
              if (*((char *)v307 - 1) < 0) {
                operator delete(*(v307 - 3));
              }
              v307 -= 3;
            }
            while (v307 != v306);
            uint64_t v308 = *v305;
          }
          v303[4] = v306;
          operator delete(v308);
          void *v305 = 0;
          v303[4] = 0;
          v303[5] = 0;
        }
        *(_OWORD *)(v303 + 3) = *(_OWORD *)(v302 + 24);
        v303[5] = (void *)*((void *)v302 + 5);
        *((void *)v302 + 3) = 0;
        *((void *)v302 + 4) = 0;
        *((void *)v302 + 5) = 0;
        uint64_t v309 = v303 + 6;
        uint64_t v310 = (void **)v303[6];
        if (v310)
        {
          uint64_t v311 = (void **)v303[7];
          int v304 = v303[6];
          if (v311 != v310)
          {
            do
            {
              if (*((char *)v311 - 1) < 0) {
                operator delete(*(v311 - 3));
              }
              v311 -= 3;
            }
            while (v311 != v310);
            int v304 = *v309;
          }
          v303[7] = v310;
          operator delete(v304);
          std::__shared_weak_count *v309 = 0;
          v303[7] = 0;
          v303[8] = 0;
        }
        *((_OWORD *)v303 + 3) = *((_OWORD *)v302 + 3);
        v303[8] = (void *)*((void *)v302 + 8);
        *((void *)v302 + 6) = 0;
        *((void *)v302 + 7) = 0;
        *((void *)v302 + 8) = 0;
        v303[9] = (void *)*((void *)v302 + 9);
        v302 += 80;
        v303 += 10;
      }
      while (v302 != v301);
      uint64_t v301 = (char *)v589[1];
      if (v589[1] != v303) {
        goto LABEL_583;
      }
    }
LABEL_580:
    v589[1] = v303;
    uint64_t v301 = (char *)v303;
    if (v300 != (char *)v303) {
      continue;
    }
    break;
  }
LABEL_624:
  uint8x8_t v300 = (char *)v589[0];
LABEL_625:
  v600 = 0;
  v601 = 0;
  unint64_t v602 = 0;
  memset(v603, 0, sizeof(v603));
  LODWORD(v604) = 1065353216;
  long long __dst = 0u;
  long long v598 = 0u;
  int i = 1065353216;
  int64_t v552 = v301 - v300;
  unint64_t v554 = (v301 - v300) / 80;
  if (v301 == v300)
  {
    long long v594 = 0uLL;
    long long v595 = 0uLL;
    int j = 1065353216;
    *(_OWORD *)v591 = 0uLL;
    *(_OWORD *)v592 = 0uLL;
    int m = 1065353216;
  }
  else
  {
    unint64_t v331 = 0;
    if ((unint64_t)((v301 - v300) / 80) <= 1) {
      uint64_t v332 = 1;
    }
    else {
      uint64_t v332 = (v301 - v300) / 80;
    }
    do
    {
      uint64_t v333 = (char *)v589[0] + 80 * v331;
      uint64_t v334 = *((void *)v333 + 3);
      uint64_t v335 = *((void *)v333 + 4);
      while (v334 != v335)
      {
        unint64_t v336 = (MIL::IRValueType *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a3 + 152))(a3, v334);
        if (v336 && MIL::IRValueType::TryCastAsStateType(v336))
        {
          *(void *)&long long v594 = v334;
          uint64_t v337 = std::__hash_table<std::__hash_value_type<std::string,std::set<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::set<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::set<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::set<unsigned long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v603, v334, (uint64_t)&std::piecewise_construct, (long long **)&v594);
          uint64_t v339 = (void **)(v337 + 6);
          unint64_t v338 = (void *)v337[6];
          int v340 = v337 + 6;
          uint64_t v341 = v337 + 6;
          if (v338)
          {
            while (1)
            {
              while (1)
              {
                uint64_t v341 = v338;
                unint64_t v342 = v338[4];
                if (v331 >= v342) {
                  break;
                }
                unint64_t v338 = (void *)*v341;
                int v340 = v341;
                if (!*v341) {
                  goto LABEL_646;
                }
              }
              if (v342 >= v331) {
                break;
              }
              unint64_t v338 = (void *)v341[1];
              if (!v338)
              {
                int v340 = v341 + 1;
                goto LABEL_646;
              }
            }
          }
          else
          {
LABEL_646:
            std::string::size_type v343 = operator new(0x28uLL);
            v343[4] = v331;
            *std::string::size_type v343 = 0;
            v343[1] = 0;
            v343[2] = v341;
            *int v340 = v343;
            uint64_t v344 = *(void *)v337[5];
            if (v344)
            {
              v337[5] = v344;
              std::string::size_type v343 = (void *)*v340;
            }
            uint64_t v345 = *v339;
            BOOL v7 = v343 == *v339;
            *((unsigned char *)v343 + 24) = v7;
            if (!v7)
            {
              do
              {
                uint64_t v346 = v343[2];
                if (*(unsigned char *)(v346 + 24)) {
                  break;
                }
                unint64_t v347 = *(unsigned char **)(v346 + 16);
                uint64_t v348 = *(void *)v347;
                if (*(void *)v347 == v346)
                {
                  uint64_t v351 = *((void *)v347 + 1);
                  if (!v351 || (int v352 = *(unsigned __int8 *)(v351 + 24), v349 = (unsigned char *)(v351 + 24), v352))
                  {
                    if (*(void **)v346 == v343)
                    {
                      *(unsigned char *)(v346 + 24) = 1;
                      v347[24] = 0;
                      uint64_t v355 = *(void *)(v346 + 8);
                      *(void *)unint64_t v347 = v355;
                      if (v355) {
                        goto LABEL_663;
                      }
                    }
                    else
                    {
                      int v353 = *(uint64_t **)(v346 + 8);
                      uint64_t v354 = *v353;
                      *(void *)(v346 + 8) = *v353;
                      if (v354)
                      {
                        *(void *)(v354 + 16) = v346;
                        unint64_t v347 = *(unsigned char **)(v346 + 16);
                      }
                      v353[2] = (uint64_t)v347;
                      *(void *)(*(void *)(v346 + 16) + 8 * (**(void **)(v346 + 16) != v346)) = v353;
                      *int v353 = v346;
                      *(void *)(v346 + 16) = v353;
                      unint64_t v347 = (unsigned char *)v353[2];
                      uint64_t v346 = *(void *)v347;
                      *((unsigned char *)v353 + 24) = 1;
                      v347[24] = 0;
                      uint64_t v355 = *(void *)(v346 + 8);
                      *(void *)unint64_t v347 = v355;
                      if (v355) {
LABEL_663:
                      }
                        *(void *)(v355 + 16) = v347;
                    }
                    *(void *)(v346 + 16) = *((void *)v347 + 2);
                    *(void *)(*((void *)v347 + 2) + 8 * (**((void **)v347 + 2) != (void)v347)) = v346;
                    *(void *)(v346 + 8) = v347;
LABEL_633:
                    *((void *)v347 + 2) = v346;
                    break;
                  }
                }
                else if (!v348 || (int v350 = *(unsigned __int8 *)(v348 + 24), v349 = (unsigned char *)(v348 + 24), v350))
                {
                  if (*(void **)v346 == v343)
                  {
                    uint64_t v357 = v343[1];
                    *(void *)uint64_t v346 = v357;
                    if (v357)
                    {
                      *(void *)(v357 + 16) = v346;
                      unint64_t v347 = *(unsigned char **)(v346 + 16);
                    }
                    v343[2] = v347;
                    *(void *)(*(void *)(v346 + 16) + 8 * (**(void **)(v346 + 16) != v346)) = v343;
                    v343[1] = v346;
                    *(void *)(v346 + 16) = v343;
                    unint64_t v347 = (unsigned char *)v343[2];
                    *((unsigned char *)v343 + 24) = 1;
                    v347[24] = 0;
                    uint64_t v346 = *((void *)v347 + 1);
                    uint64_t v356 = *(void **)v346;
                    *((void *)v347 + 1) = *(void *)v346;
                    if (!v356) {
                      goto LABEL_632;
                    }
                  }
                  else
                  {
                    *(unsigned char *)(v346 + 24) = 1;
                    v347[24] = 0;
                    uint64_t v346 = *((void *)v347 + 1);
                    uint64_t v356 = *(void **)v346;
                    *((void *)v347 + 1) = *(void *)v346;
                    if (!v356) {
                      goto LABEL_632;
                    }
                  }
                  v356[2] = v347;
LABEL_632:
                  *(void *)(v346 + 16) = *((void *)v347 + 2);
                  *(void *)(*((void *)v347 + 2) + 8 * (**((void **)v347 + 2) != (void)v347)) = v346;
                  *(void *)uint64_t v346 = v347;
                  goto LABEL_633;
                }
                *(unsigned char *)(v346 + 24) = 1;
                std::string::size_type v343 = v347;
                v347[24] = v347 == (unsigned char *)v345;
                *long long v349 = 1;
              }
              while (v347 != (unsigned char *)v345);
            }
            ++v337[7];
          }
        }
        v334 += 24;
      }
      ++v331;
    }
    while (v331 != v332);
    long long v358 = v589[0];
    long long v359 = v589[1];
    if (v589[0] != v589[1])
    {
      while (1)
      {
        uint64_t v360 = v358[3];
        uint64_t v361 = v358[4];
        long long v594 = 0u;
        long long v595 = 0u;
        for (int j = 1065353216; v360 != v361; v360 += 24)
          std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)&v594, v360, v360);
        uint64_t v362 = v358[6];
        uint64_t v363 = v358[7];
        *(_OWORD *)v591 = 0u;
        *(_OWORD *)v592 = 0u;
        for (int m = 1065353216; v362 != v363; v362 += 24)
          std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v591, v362, v362);
        v364 = v601;
        if ((unint64_t)v601 < v602) {
          break;
        }
        uint64_t v370 = (char *)std::vector<std::pair<std::unordered_set<std::string>,std::unordered_set<std::string>>>::__emplace_back_slow_path<std::unordered_set<std::string>,std::unordered_set<std::string>>((uint64_t *)&v600, (uint64_t *)&v594, (uint64_t *)v591);
        uint64_t v371 = (char *)v592[0];
        v601 = v370;
        if (v592[0]) {
          goto LABEL_703;
        }
LABEL_697:
        std::string::size_type v376 = v591[0];
        v591[0] = 0;
        if (v376) {
          operator delete(v376);
        }
        std::string::size_type v377 = (void **)v595;
        if ((void)v595)
        {
          do
          {
            int64_t v380 = (void **)*v377;
            if (*((char *)v377 + 39) < 0) {
              operator delete(v377[2]);
            }
            operator delete(v377);
            std::string::size_type v377 = v380;
          }
          while (v380);
        }
        uint64_t v378 = (void *)v594;
        *(void *)&long long v594 = 0;
        if (v378) {
          operator delete(v378);
        }
        v358 += 10;
        if (v358 == v359) {
          goto LABEL_708;
        }
      }
      unint64_t v365 = v594;
      *(void *)&long long v594 = 0;
      *(_OWORD *)v601 = __PAIR128__(*((unint64_t *)&v594 + 1), v365);
      *((void *)&v594 + 1) = 0;
      uint64_t v366 = v595;
      *((void *)v364 + 2) = v595;
      uint64_t v367 = *((void *)&v595 + 1);
      *((void *)v364 + 3) = *((void *)&v595 + 1);
      *((_DWORD *)v364 + 8) = j;
      if (v367)
      {
        unint64_t v368 = *(void *)(v366 + 8);
        unint64_t v369 = *((void *)v364 + 1);
        if ((v369 & (v369 - 1)) != 0)
        {
          if (v368 >= v369) {
            v368 %= v369;
          }
        }
        else
        {
          v368 &= v369 - 1;
        }
        *(void *)(v365 + 8 * v368) = v364 + 16;
        long long v595 = 0uLL;
      }
      uint64_t v372 = v591[0];
      unint64_t v373 = (unint64_t)v591[1];
      uint64_t v371 = (char *)v592[0];
      uint64_t v374 = v592[1];
      *((void **)v364 + 7) = v592[0];
      v591[1] = 0;
      v591[0] = 0;
      *((void *)v364 + 5) = v372;
      *((void *)v364 + 6) = v373;
      *((void *)v364 + 8) = v374;
      *((_DWORD *)v364 + 18) = m;
      if (v374)
      {
        unint64_t v375 = *((void *)v371 + 1);
        if ((v373 & (v373 - 1)) != 0)
        {
          if (v375 >= v373) {
            v375 %= v373;
          }
        }
        else
        {
          v375 &= v373 - 1;
        }
        uint64_t v371 = 0;
        v372->__r_.__value_.__r.__words[v375] = (std::string::size_type)(v364 + 56);
        v592[0] = 0;
        v592[1] = 0;
      }
      v601 = v364 + 80;
      if (!v371) {
        goto LABEL_697;
      }
      do
      {
LABEL_703:
        unint64_t v379 = *(char **)v371;
        if (v371[39] < 0) {
          operator delete(*((void **)v371 + 2));
        }
        operator delete(v371);
        uint64_t v371 = v379;
      }
      while (v379);
      goto LABEL_697;
    }
LABEL_708:
    unint64_t v381 = 0;
    long long v594 = 0u;
    long long v595 = 0u;
    int j = 1065353216;
    *(_OWORD *)v591 = 0u;
    *(_OWORD *)v592 = 0u;
    int m = 1065353216;
    uint64_t v575 = 0;
    unint64_t v382 = v554;
    do
    {
      unint64_t v383 = v381 + 1;
      if (v381 + 1 < v382 && v600[10 * v381 + 7])
      {
        do
        {
          for (n = v600[10 * v575 + 7]; n; n = (uint64_t *)*n)
          {
            if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(&v600[10 * v383], (uint64_t)(n + 2)))
            {
              unint64_t v577 = (unint64_t)&v575;
              uint64_t v385 = std::__hash_table<std::__hash_value_type<unsigned long,std::set<unsigned long>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::set<unsigned long>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::set<unsigned long>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::set<unsigned long>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)&__dst, (unint64_t *)&v575, (uint64_t)&std::piecewise_construct, (uint64_t **)&v577);
              uint64_t v387 = (void **)(v385 + 4);
              uint64_t v386 = (void *)v385[4];
              uint64_t v388 = v385 + 4;
              uint64_t v389 = v385 + 4;
              if (v386)
              {
                while (1)
                {
                  while (1)
                  {
                    uint64_t v389 = v386;
                    unint64_t v390 = v386[4];
                    if (v383 >= v390) {
                      break;
                    }
                    uint64_t v386 = (void *)*v389;
                    uint64_t v388 = v389;
                    if (!*v389) {
                      goto LABEL_726;
                    }
                  }
                  if (v390 >= v383) {
                    break;
                  }
                  uint64_t v386 = (void *)v389[1];
                  if (!v386)
                  {
                    uint64_t v388 = v389 + 1;
                    goto LABEL_726;
                  }
                }
              }
              else
              {
LABEL_726:
                uint64_t v391 = operator new(0x28uLL);
                v391[4] = v383;
                void *v391 = 0;
                v391[1] = 0;
                v391[2] = v389;
                *uint64_t v388 = v391;
                uint64_t v392 = *(void *)v385[3];
                if (v392)
                {
                  v385[3] = v392;
                  uint64_t v391 = (void *)*v388;
                }
                float v393 = *v387;
                BOOL v7 = v391 == *v387;
                *((unsigned char *)v391 + 24) = v7;
                if (!v7)
                {
                  do
                  {
                    uint64_t v394 = v391[2];
                    if (*(unsigned char *)(v394 + 24)) {
                      break;
                    }
                    uint64_t v395 = *(unsigned char **)(v394 + 16);
                    uint64_t v396 = *(void *)v395;
                    if (*(void *)v395 == v394)
                    {
                      uint64_t v399 = *((void *)v395 + 1);
                      if (!v399 || (int v400 = *(unsigned __int8 *)(v399 + 24), v397 = (unsigned char *)(v399 + 24), v400))
                      {
                        if (*(void **)v394 == v391)
                        {
                          *(unsigned char *)(v394 + 24) = 1;
                          v395[24] = 0;
                          uint64_t v403 = *(void *)(v394 + 8);
                          *(void *)uint64_t v395 = v403;
                          if (v403) {
                            goto LABEL_743;
                          }
                        }
                        else
                        {
                          std::string v401 = *(uint64_t **)(v394 + 8);
                          uint64_t v402 = *v401;
                          *(void *)(v394 + 8) = *v401;
                          if (v402)
                          {
                            *(void *)(v402 + 16) = v394;
                            uint64_t v395 = *(unsigned char **)(v394 + 16);
                          }
                          v401[2] = (uint64_t)v395;
                          *(void *)(*(void *)(v394 + 16) + 8 * (**(void **)(v394 + 16) != v394)) = v401;
                          *std::string v401 = v394;
                          *(void *)(v394 + 16) = v401;
                          uint64_t v395 = (unsigned char *)v401[2];
                          uint64_t v394 = *(void *)v395;
                          *((unsigned char *)v401 + 24) = 1;
                          v395[24] = 0;
                          uint64_t v403 = *(void *)(v394 + 8);
                          *(void *)uint64_t v395 = v403;
                          if (v403) {
LABEL_743:
                          }
                            *(void *)(v403 + 16) = v395;
                        }
                        *(void *)(v394 + 16) = *((void *)v395 + 2);
                        *(void *)(*((void *)v395 + 2) + 8 * (**((void **)v395 + 2) != (void)v395)) = v394;
                        *(void *)(v394 + 8) = v395;
LABEL_749:
                        *((void *)v395 + 2) = v394;
                        break;
                      }
                    }
                    else if (!v396 || (int v398 = *(unsigned __int8 *)(v396 + 24), v397 = (unsigned char *)(v396 + 24), v398))
                    {
                      if (*(void **)v394 == v391)
                      {
                        uint64_t v407 = v391[1];
                        *(void *)uint64_t v394 = v407;
                        if (v407)
                        {
                          *(void *)(v407 + 16) = v394;
                          uint64_t v395 = *(unsigned char **)(v394 + 16);
                        }
                        v391[2] = v395;
                        *(void *)(*(void *)(v394 + 16) + 8 * (**(void **)(v394 + 16) != v394)) = v391;
                        v391[1] = v394;
                        *(void *)(v394 + 16) = v391;
                        uint64_t v395 = (unsigned char *)v391[2];
                        *((unsigned char *)v391 + 24) = 1;
                        v395[24] = 0;
                        uint64_t v394 = *((void *)v395 + 1);
                        v404 = *(void **)v394;
                        *((void *)v395 + 1) = *(void *)v394;
                        if (v404) {
LABEL_747:
                        }
                          v404[2] = v395;
                      }
                      else
                      {
                        *(unsigned char *)(v394 + 24) = 1;
                        v395[24] = 0;
                        uint64_t v394 = *((void *)v395 + 1);
                        v404 = *(void **)v394;
                        *((void *)v395 + 1) = *(void *)v394;
                        if (v404) {
                          goto LABEL_747;
                        }
                      }
                      *(void *)(v394 + 16) = *((void *)v395 + 2);
                      *(void *)(*((void *)v395 + 2) + 8 * (**((void **)v395 + 2) != (void)v395)) = v394;
                      *(void *)uint64_t v394 = v395;
                      goto LABEL_749;
                    }
                    *(unsigned char *)(v394 + 24) = 1;
                    uint64_t v391 = v395;
                    v395[24] = v395 == (unsigned char *)v393;
                    unsigned char *v397 = 1;
                  }
                  while (v395 != (unsigned char *)v393);
                }
                ++v385[5];
              }
              unint64_t v577 = (unint64_t)(n + 2);
              uint64_t v405 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v594, (unsigned __int8 *)n + 16, (uint64_t)&std::piecewise_construct, (long long **)&v577);
              int v406 = *((_DWORD *)v405 + 10);
              *((_DWORD *)v405 + 10) = v406 + 1;
              if (v406 >= 1) {
                std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v591, (uint64_t)(n + 2), (uint64_t)(n + 2));
              }
            }
          }
          ++v383;
        }
        while (v383 != v554);
        unint64_t v383 = v575 + 1;
      }
      uint64_t v575 = v383;
      unint64_t v381 = v383;
      unint64_t v382 = v554;
    }
    while (v383 < v554);
    uint64_t v408 = *(void **)&v603[16];
    if (*(void *)&v603[16])
    {
      do
      {
        long long v409 = (void *)v408[5];
        v410 = (void *)v409[1];
        uint64_t v411 = v409;
        if (v410)
        {
          do
          {
            int v412 = v410;
            v410 = (void *)*v410;
          }
          while (v410);
        }
        else
        {
          do
          {
            int v412 = (void *)v411[2];
            BOOL v7 = *v412 == (void)v411;
            uint64_t v411 = v412;
          }
          while (!v7);
        }
        v556 = v408;
        v413 = v408 + 6;
        if (v412 != v408 + 6)
        {
          do
          {
            unint64_t v577 = (unint64_t)(v409 + 4);
            uint64_t v414 = std::__hash_table<std::__hash_value_type<unsigned long,std::set<unsigned long>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::set<unsigned long>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::set<unsigned long>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::set<unsigned long>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)&__dst, v409 + 4, (uint64_t)&std::piecewise_construct, (uint64_t **)&v577);
            std::string v416 = (void **)(v414 + 4);
            int v415 = (void *)v414[4];
            unint64_t v417 = v412[4];
            unint64_t v418 = v414 + 4;
            uint64_t v419 = v414 + 4;
            if (v415)
            {
              while (1)
              {
                while (1)
                {
                  uint64_t v419 = v415;
                  unint64_t v420 = v415[4];
                  if (v417 >= v420) {
                    break;
                  }
                  int v415 = (void *)*v419;
                  unint64_t v418 = v419;
                  if (!*v419) {
                    goto LABEL_777;
                  }
                }
                if (v420 >= v417) {
                  break;
                }
                int v415 = (void *)v419[1];
                if (!v415)
                {
                  unint64_t v418 = v419 + 1;
                  goto LABEL_777;
                }
              }
            }
            else
            {
LABEL_777:
              uint64_t v421 = operator new(0x28uLL);
              v421[4] = v417;
              *uint64_t v421 = 0;
              v421[1] = 0;
              v421[2] = v419;
              *unint64_t v418 = v421;
              uint64_t v422 = *(void *)v414[3];
              if (v422)
              {
                v414[3] = v422;
                uint64_t v421 = (void *)*v418;
              }
              long long v423 = *v416;
              BOOL v7 = v421 == *v416;
              *((unsigned char *)v421 + 24) = v7;
              if (!v7)
              {
                do
                {
                  uint64_t v424 = v421[2];
                  if (*(unsigned char *)(v424 + 24)) {
                    break;
                  }
                  long long v425 = *(unsigned char **)(v424 + 16);
                  uint64_t v426 = *(void *)v425;
                  if (*(void *)v425 == v424)
                  {
                    uint64_t v429 = *((void *)v425 + 1);
                    if (!v429 || (int v430 = *(unsigned __int8 *)(v429 + 24), v427 = (unsigned char *)(v429 + 24), v430))
                    {
                      if (*(void **)v424 == v421)
                      {
                        *(unsigned char *)(v424 + 24) = 1;
                        v425[24] = 0;
                        uint64_t v433 = *(void *)(v424 + 8);
                        *(void *)long long v425 = v433;
                        if (v433) {
                          goto LABEL_794;
                        }
                      }
                      else
                      {
                        uint64_t v431 = *(uint64_t **)(v424 + 8);
                        uint64_t v432 = *v431;
                        *(void *)(v424 + 8) = *v431;
                        if (v432)
                        {
                          *(void *)(v432 + 16) = v424;
                          long long v425 = *(unsigned char **)(v424 + 16);
                        }
                        v431[2] = (uint64_t)v425;
                        *(void *)(*(void *)(v424 + 16) + 8 * (**(void **)(v424 + 16) != v424)) = v431;
                        *uint64_t v431 = v424;
                        *(void *)(v424 + 16) = v431;
                        long long v425 = (unsigned char *)v431[2];
                        uint64_t v424 = *(void *)v425;
                        *((unsigned char *)v431 + 24) = 1;
                        v425[24] = 0;
                        uint64_t v433 = *(void *)(v424 + 8);
                        *(void *)long long v425 = v433;
                        if (v433) {
LABEL_794:
                        }
                          *(void *)(v433 + 16) = v425;
                      }
                      *(void *)(v424 + 16) = *((void *)v425 + 2);
                      *(void *)(*((void *)v425 + 2) + 8 * (**((void **)v425 + 2) != (void)v425)) = v424;
                      *(void *)(v424 + 8) = v425;
LABEL_800:
                      *((void *)v425 + 2) = v424;
                      break;
                    }
                  }
                  else if (!v426 || (int v428 = *(unsigned __int8 *)(v426 + 24), v427 = (unsigned char *)(v426 + 24), v428))
                  {
                    if (*(void **)v424 == v421)
                    {
                      uint64_t v439 = v421[1];
                      *(void *)uint64_t v424 = v439;
                      if (v439)
                      {
                        *(void *)(v439 + 16) = v424;
                        long long v425 = *(unsigned char **)(v424 + 16);
                      }
                      v421[2] = v425;
                      *(void *)(*(void *)(v424 + 16) + 8 * (**(void **)(v424 + 16) != v424)) = v421;
                      v421[1] = v424;
                      *(void *)(v424 + 16) = v421;
                      long long v425 = (unsigned char *)v421[2];
                      *((unsigned char *)v421 + 24) = 1;
                      v425[24] = 0;
                      uint64_t v424 = *((void *)v425 + 1);
                      long long v434 = *(void **)v424;
                      *((void *)v425 + 1) = *(void *)v424;
                      if (v434) {
LABEL_798:
                      }
                        v434[2] = v425;
                    }
                    else
                    {
                      *(unsigned char *)(v424 + 24) = 1;
                      v425[24] = 0;
                      uint64_t v424 = *((void *)v425 + 1);
                      long long v434 = *(void **)v424;
                      *((void *)v425 + 1) = *(void *)v424;
                      if (v434) {
                        goto LABEL_798;
                      }
                    }
                    *(void *)(v424 + 16) = *((void *)v425 + 2);
                    *(void *)(*((void *)v425 + 2) + 8 * (**((void **)v425 + 2) != (void)v425)) = v424;
                    *(void *)uint64_t v424 = v425;
                    goto LABEL_800;
                  }
                  *(unsigned char *)(v424 + 24) = 1;
                  uint64_t v421 = v425;
                  v425[24] = v425 == (unsigned char *)v423;
                  *int v427 = 1;
                }
                while (v425 != (unsigned char *)v423);
              }
              ++v414[5];
            }
            long long v435 = (void *)v409[1];
            if (v435)
            {
              do
              {
                int v436 = v435;
                long long v435 = (void *)*v435;
              }
              while (v435);
            }
            else
            {
              do
              {
                int v436 = (void *)v409[2];
                BOOL v7 = *v436 == (void)v409;
                long long v409 = v436;
              }
              while (!v7);
            }
            long long v437 = (void *)v412[1];
            if (v437)
            {
              do
              {
                int v438 = v437;
                long long v437 = (void *)*v437;
              }
              while (v437);
            }
            else
            {
              do
              {
                int v438 = (void *)v412[2];
                BOOL v7 = *v438 == (void)v412;
                int v412 = v438;
              }
              while (!v7);
            }
            int v412 = v438;
            long long v409 = v436;
          }
          while (v438 != v413);
        }
        uint64_t v408 = (void *)*v556;
      }
      while (*v556);
    }
  }
  std::string::size_type v440 = (char *)v595;
  unint64_t v441 = v554;
  if ((void)v595)
  {
    while (1)
    {
      long long v442 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v591, (uint64_t)(v440 + 16));
      long long v443 = *(char **)v440;
      if (!v442) {
        break;
      }
LABEL_825:
      std::string::size_type v440 = v443;
      if (!v443) {
        goto LABEL_854;
      }
    }
    unint64_t v444 = *((void *)&v594 + 1);
    unint64_t v445 = *((void *)v440 + 1);
    uint8x8_t v446 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v594 + 8));
    v446.i16[0] = vaddlv_u8(v446);
    if (v446.u32[0] > 1uLL)
    {
      if (v445 >= *((void *)&v594 + 1)) {
        v445 %= *((void *)&v594 + 1);
      }
    }
    else
    {
      v445 &= *((void *)&v594 + 1) - 1;
    }
    long long v447 = *(char **)(v594 + 8 * v445);
    do
    {
      uint64_t v448 = v447;
      long long v447 = *(char **)v447;
    }
    while (v447 != v440);
    if (v448 == (char *)&v595) {
      goto LABEL_1044;
    }
    unint64_t v449 = *((void *)v448 + 1);
    if (v446.u32[0] > 1uLL)
    {
      if (v449 >= *((void *)&v594 + 1)) {
        v449 %= *((void *)&v594 + 1);
      }
    }
    else
    {
      v449 &= *((void *)&v594 + 1) - 1;
    }
    uint64_t v450 = *(void *)v440;
    if (v449 != v445)
    {
LABEL_1044:
      if (v443)
      {
        unint64_t v451 = *((void *)v443 + 1);
        if (v446.u32[0] > 1uLL)
        {
          unint64_t v452 = *((void *)v443 + 1);
          if (v451 >= *((void *)&v594 + 1)) {
            unint64_t v452 = v451 % *((void *)&v594 + 1);
          }
        }
        else
        {
          unint64_t v452 = v451 & (*((void *)&v594 + 1) - 1);
        }
        uint64_t v450 = *(void *)v440;
        if (v452 == v445) {
          goto LABEL_848;
        }
      }
      *(void *)(v594 + 8 * v445) = 0;
      uint64_t v450 = *(void *)v440;
    }
    if (!v450)
    {
LABEL_822:
      *(void *)uint64_t v448 = v450;
      *(void *)std::string::size_type v440 = 0;
      --*((void *)&v595 + 1);
      if (v440[39] < 0) {
        operator delete(*((void **)v440 + 2));
      }
      operator delete(v440);
      goto LABEL_825;
    }
    unint64_t v451 = *(void *)(v450 + 8);
LABEL_848:
    if (v446.u32[0] > 1uLL)
    {
      if (v451 >= v444) {
        v451 %= v444;
      }
    }
    else
    {
      v451 &= v444 - 1;
    }
    if (v451 != v445)
    {
      *(void *)(v594 + 8 * v451) = v448;
      uint64_t v450 = *(void *)v440;
    }
    goto LABEL_822;
  }
LABEL_854:
  std::unordered_map<unsigned long,std::set<unsigned long>>::unordered_map((uint64_t)__p, (uint64_t)&__dst);
  std::unordered_map<std::string,int>::unordered_map((uint64_t)&v559, (uint64_t)&v594);
  uint64_t v453 = (void **)v592[0];
  if (v592[0])
  {
    do
    {
      v474 = (void **)*v453;
      if (*((char *)v453 + 39) < 0) {
        operator delete(v453[2]);
      }
      operator delete(v453);
      uint64_t v453 = v474;
    }
    while (v474);
  }
  v454 = v591[0];
  v591[0] = 0;
  if (v454) {
    operator delete(v454);
  }
  std::string v455 = (void **)v595;
  if ((void)v595)
  {
    do
    {
      v475 = (void **)*v455;
      if (*((char *)v455 + 39) < 0) {
        operator delete(v455[2]);
      }
      operator delete(v455);
      std::string v455 = v475;
    }
    while (v475);
  }
  long long v456 = (void *)v594;
  *(void *)&long long v594 = 0;
  if (v456) {
    operator delete(v456);
  }
  v457 = (void **)v598;
  if ((void)v598)
  {
    do
    {
      v458 = *v457;
      std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)(v457 + 3), v457[4]);
      operator delete(v457);
      v457 = (void **)v458;
    }
    while (v458);
  }
  v459 = (void *)__dst;
  *(void *)&long long __dst = 0;
  if (v459) {
    operator delete(v459);
  }
  v460 = *(char **)&v603[16];
  if (*(void *)&v603[16])
  {
    do
    {
      char v476 = *(char **)v460;
      std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)(v460 + 40), *((void **)v460 + 6));
      if (v460[39] < 0) {
        operator delete(*((void **)v460 + 2));
      }
      operator delete(v460);
      v460 = v476;
    }
    while (v476);
  }
  v461 = *(void **)v603;
  *(void *)v603 = 0;
  if (v461) {
    operator delete(v461);
  }
  v462 = (char *)v600;
  if (v600)
  {
    v463 = v601;
    v464 = (uint64_t *)v600;
    if (v601 != (char *)v600)
    {
      do
      {
        v463 -= 80;
        std::allocator<std::pair<std::unordered_set<std::string>,std::unordered_set<std::string>>>::destroy[abi:ne180100]((uint64_t)&v602, (uint64_t)v463);
      }
      while (v463 != v462);
      v464 = (uint64_t *)v600;
    }
    v601 = v462;
    operator delete(v464);
  }
  v465 = 0;
  unint64_t v466 = v552 + 79;
  long long __dst = 0uLL;
  *(void *)&long long v598 = 0;
  if ((unint64_t)(v552 + 79) >= 0x9F)
  {
    if (v554 >> 61) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    v465 = (char *)operator new(8 * v554);
    *(void *)&long long __dst = v465;
    *(void *)&long long v598 = &v465[8 * v554];
    bzero(v465, 8 * v554);
    *((void *)&__dst + 1) = &v465[8 * v554];
  }
  long long v604 = 0u;
  memset(v603, 0, sizeof(v603));
  *(void *)&long long v595 = 0;
  long long v594 = 0uLL;
  v467 = *(void **)v558;
  if (*(void *)v558)
  {
    do
    {
      char v477 = (void *)v467[3];
      if (v477 != v467 + 4)
      {
        do
        {
          ++*(void *)&v465[8 * v477[4]];
          int v478 = (void *)v477[1];
          if (v478)
          {
            do
            {
              std::string v479 = v478;
              int v478 = (void *)*v478;
            }
            while (v478);
          }
          else
          {
            do
            {
              std::string v479 = (void *)v477[2];
              BOOL v7 = *v479 == (void)v477;
              char v477 = v479;
            }
            while (!v7);
          }
          char v477 = v479;
        }
        while (v479 != v467 + 4);
      }
      v467 = (void *)*v467;
    }
    while (v467);
  }
  if (v466 <= 0x9E)
  {
    unint64_t v468 = 0;
    if (!v554) {
      goto LABEL_878;
    }
LABEL_1031:
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Segments can not be topologically sorted.");
  }
  uint64_t v480 = 0;
  uint64_t v481 = 0;
  uint64_t v482 = 0;
  uint64_t v483 = 0;
  do
  {
    if (!*(void *)&v465[8 * v483])
    {
      uint64_t v484 = ((v482 - v481) << 6) - 1;
      if (v482 == v481) {
        uint64_t v484 = 0;
      }
      unint64_t v485 = v604 + v480;
      if (v484 == v485)
      {
        std::deque<unsigned long>::__add_back_capacity((uint64_t)v603);
        uint64_t v482 = *(void *)&v603[16];
        uint64_t v481 = *(void *)&v603[8];
        unint64_t v485 = *((void *)&v604 + 1) + v604;
      }
      *(void *)(*(void *)(v481 + ((v485 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v485 & 0x1FF)) = v483;
      uint64_t v480 = ++*((void *)&v604 + 1);
    }
    ++v483;
  }
  while (v554 != v483);
  if (v480)
  {
    v486 = 0;
    uint64_t v487 = 0;
    unint64_t v468 = 0;
    uint64_t v488 = 0;
    while (1)
    {
      unint64_t v489 = *(void *)(*(void *)(*(void *)&v603[8] + (((unint64_t)v604 >> 6) & 0x3FFFFFFFFFFFFF8))
                       + 8 * (v604 & 0x1FF));
      *(void *)&long long v604 = v604 + 1;
      *((void *)&v604 + 1) = v480 - 1;
      if ((unint64_t)v604 >= 0x400)
      {
        operator delete(**(void ***)&v603[8]);
        *(void *)&v603[8] += 8;
        *(void *)&long long v604 = v604 - 512;
      }
      if (v487 < v486)
      {
        *(void *)uint64_t v487 = v489;
        v487 += 8;
        int8x8_t v490 = (int8x8_t)__p[1];
        if (!__p[1]) {
          goto LABEL_912;
        }
        goto LABEL_935;
      }
      uint64_t v491 = (v487 - v488) >> 3;
      unint64_t v492 = v491 + 1;
      if ((unint64_t)(v491 + 1) >> 61)
      {
        *(void *)&long long v594 = v468;
        *((void *)&v594 + 1) = v487;
        *(void *)&long long v595 = v486;
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      if ((v486 - v488) >> 2 > v492) {
        unint64_t v492 = (v486 - v488) >> 2;
      }
      if ((unint64_t)(v486 - v488) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v493 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v493 = v492;
      }
      if (v493)
      {
        if (v493 >> 61)
        {
          *(void *)&long long v594 = v468;
          *((void *)&v594 + 1) = v487;
          *(void *)&long long v595 = v486;
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        v494 = operator new(8 * v493);
        unint64_t v468 = &v494[8 * v491];
        *(void *)unint64_t v468 = v489;
        uint64_t v495 = (uint64_t)(v468 + 8);
        if (v487 == v488) {
          goto LABEL_932;
        }
      }
      else
      {
        v494 = 0;
        unint64_t v468 = (char *)(8 * v491);
        *(void *)(8 * v491) = v489;
        uint64_t v495 = 8 * v491 + 8;
        if (v487 == v488) {
          goto LABEL_932;
        }
      }
      unint64_t v496 = v487 - 8 - v488;
      if (v496 < 0x168)
      {
        v497 = v487;
        goto LABEL_931;
      }
      if (&v494[v487 - v488 - 8 - (v496 & 0xFFFFFFFFFFFFFFF8)] > &v494[v487 - v488 - 8])
      {
        v497 = v487;
        do
        {
LABEL_931:
          uint64_t v498 = *((void *)v497 - 1);
          v497 -= 8;
          *((void *)v468 - 1) = v498;
          v468 -= 8;
        }
        while (v497 != v488);
        goto LABEL_932;
      }
      if (&v487[-(v496 & 0xFFFFFFFFFFFFFFF8) - 8] > v487 - 8)
      {
        v497 = v487;
        goto LABEL_931;
      }
      if ((unint64_t)(v488 - v494) < 0x20)
      {
        v497 = v487;
        goto LABEL_931;
      }
      uint64_t v507 = (v496 >> 3) + 1;
      uint64_t v508 = 8 * (v507 & 0x3FFFFFFFFFFFFFFCLL);
      v497 = &v487[-v508];
      v468 -= v508;
      v509 = &v494[8 * v491 - 16];
      v510 = v487 - 16;
      uint64_t v511 = v507 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v512 = *(_OWORD *)v510;
        *(v509 - 1) = *((_OWORD *)v510 - 1);
        _OWORD *v509 = v512;
        v509 -= 2;
        v510 -= 32;
        v511 -= 4;
      }
      while (v511);
      if (v507 != (v507 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_931;
      }
LABEL_932:
      v486 = &v494[8 * v493];
      if (v488) {
        operator delete(v488);
      }
      uint64_t v488 = v468;
      uint64_t v487 = (char *)v495;
      int8x8_t v490 = (int8x8_t)__p[1];
      if (!__p[1]) {
        goto LABEL_912;
      }
LABEL_935:
      uint8x8_t v499 = (uint8x8_t)vcnt_s8(v490);
      v499.i16[0] = vaddlv_u8(v499);
      if (v499.u32[0] > 1uLL)
      {
        unint64_t v500 = v489;
        if (v489 >= *(void *)&v490) {
          unint64_t v500 = v489 % *(void *)&v490;
        }
      }
      else
      {
        unint64_t v500 = (*(void *)&v490 - 1) & v489;
      }
      v501 = (void *)*((void *)__p[0] + v500);
      if (v501)
      {
        v502 = (void *)*v501;
        if (*v501)
        {
          uint64_t v503 = *(void *)&v490 - 1;
          if (v499.u32[0] < 2uLL)
          {
            while (1)
            {
              uint64_t v504 = v502[1];
              if (v489 == v504)
              {
                if (v502[2] == v489) {
                  goto LABEL_959;
                }
              }
              else if ((v504 & v503) != v500)
              {
                goto LABEL_912;
              }
              v502 = (void *)*v502;
              if (!v502) {
                goto LABEL_912;
              }
            }
          }
          do
          {
            unint64_t v505 = v502[1];
            if (v489 == v505)
            {
              if (v502[2] == v489)
              {
LABEL_959:
                if (v499.u32[0] > 1uLL)
                {
                  unint64_t v506 = v489;
                  if (v489 >= *(void *)&v490) {
                    unint64_t v506 = v489 % *(void *)&v490;
                  }
                }
                else
                {
                  unint64_t v506 = v503 & v489;
                }
                v513 = (void *)*((void *)__p[0] + v506);
                if (!v513 || (v514 = (void *)*v513) == 0)
                {
LABEL_1037:
                  *(void *)&long long v594 = v468;
                  *((void *)&v594 + 1) = v487;
                  *(void *)&long long v595 = v486;
                  std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
                }
                if (v499.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    uint64_t v515 = v514[1];
                    if (v489 == v515)
                    {
                      if (v514[2] == v489) {
                        goto LABEL_977;
                      }
                    }
                    else if ((v515 & v503) != v506)
                    {
                      goto LABEL_1037;
                    }
                    v514 = (void *)*v514;
                    if (!v514) {
                      goto LABEL_1037;
                    }
                  }
                }
                while (2)
                {
                  unint64_t v526 = v514[1];
                  if (v489 != v526)
                  {
                    if (v526 >= *(void *)&v490) {
                      v526 %= *(void *)&v490;
                    }
                    if (v526 != v506) {
                      goto LABEL_1037;
                    }
LABEL_994:
                    v514 = (void *)*v514;
                    if (!v514) {
                      goto LABEL_1037;
                    }
                    continue;
                  }
                  break;
                }
                if (v514[2] != v489) {
                  goto LABEL_994;
                }
LABEL_977:
                v516 = (void *)v514[3];
                v517 = v514 + 4;
                if (v516 == v514 + 4) {
                  break;
                }
                uint64_t v518 = __dst;
LABEL_980:
                uint64_t v519 = v516[4];
                uint64_t v520 = *(void *)(v518 + 8 * v519) - 1;
                *(void *)(v518 + 8 * v519) = v520;
                if (v520)
                {
                  v521 = (void *)v516[1];
                  if (!v521) {
                    goto LABEL_990;
                  }
                  do
                  {
LABEL_988:
                    v525 = v521;
                    v521 = (void *)*v521;
                  }
                  while (v521);
                }
                else
                {
                  uint64_t v522 = *(void *)&v603[8];
                  uint64_t v523 = ((*(void *)&v603[16] - *(void *)&v603[8]) << 6) - 1;
                  if (*(void *)&v603[16] == *(void *)&v603[8]) {
                    uint64_t v523 = 0;
                  }
                  unint64_t v524 = *((void *)&v604 + 1) + v604;
                  if (v523 == *((void *)&v604 + 1) + (void)v604)
                  {
                    std::deque<unsigned long>::__add_back_capacity((uint64_t)v603);
                    uint64_t v522 = *(void *)&v603[8];
                    unint64_t v524 = *((void *)&v604 + 1) + v604;
                  }
                  *(void *)(*(void *)(v522 + ((v524 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v524 & 0x1FF)) = v519;
                  ++*((void *)&v604 + 1);
                  v521 = (void *)v516[1];
                  if (v521) {
                    goto LABEL_988;
                  }
                  do
                  {
LABEL_990:
                    v525 = (void *)v516[2];
                    BOOL v7 = *v525 == (void)v516;
                    v516 = v525;
                  }
                  while (!v7);
                }
                v516 = v525;
                if (v525 == v517) {
                  break;
                }
                goto LABEL_980;
              }
            }
            else
            {
              if (v505 >= *(void *)&v490) {
                v505 %= *(void *)&v490;
              }
              if (v505 != v500) {
                break;
              }
            }
            v502 = (void *)*v502;
          }
          while (v502);
        }
      }
LABEL_912:
      uint64_t v480 = *((void *)&v604 + 1);
      if (!*((void *)&v604 + 1))
      {
        *(void *)&long long v594 = v468;
        *((void *)&v594 + 1) = v487;
        *(void *)&long long v595 = v486;
        unint64_t v441 = v554;
        unint64_t v466 = v552 + 79;
        if (v554 != (v487 - v468) >> 3) {
          goto LABEL_1031;
        }
        goto LABEL_878;
      }
    }
  }
  unint64_t v468 = 0;
  if (v554) {
    goto LABEL_1031;
  }
LABEL_878:
  uint64_t v470 = *(void ***)&v603[16];
  v469 = *(void ***)&v603[8];
  *((void *)&v604 + 1) = 0;
  unint64_t v471 = *(void *)&v603[16] - *(void *)&v603[8];
  if (*(void *)&v603[16] - *(void *)&v603[8] >= 0x11uLL)
  {
    do
    {
      operator delete(*v469);
      uint64_t v470 = *(void ***)&v603[16];
      v469 = (void **)(*(void *)&v603[8] + 8);
      *(void *)&v603[8] = v469;
      unint64_t v471 = *(void *)&v603[16] - (void)v469;
    }
    while (*(void *)&v603[16] - (void)v469 > 0x10uLL);
  }
  unint64_t v472 = v471 >> 3;
  if (v472 == 1)
  {
    uint64_t v473 = 256;
    goto LABEL_1001;
  }
  if (v472 == 2)
  {
    uint64_t v473 = 512;
LABEL_1001:
    *(void *)&long long v604 = v473;
  }
  if (v469 != v470)
  {
    do
    {
      v527 = *v469++;
      operator delete(v527);
    }
    while (v469 != v470);
    if (*(void *)&v603[16] != *(void *)&v603[8]) {
      *(void *)&v603[16] += (*(void *)&v603[8] - *(void *)&v603[16] + 7) & 0xFFFFFFFFFFFFFFF8;
    }
  }
  if (*(void *)v603) {
    operator delete(*(void **)v603);
  }
  if ((void)__dst) {
    operator delete((void *)__dst);
  }
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  if (v466 >= 0x9F)
  {
    v534 = 0;
    v535 = (void **)a5;
    uint64_t v536 = 0;
    if (v441 <= 1) {
      uint64_t v537 = 1;
    }
    else {
      uint64_t v537 = v441;
    }
    do
    {
      uint64_t v540 = *(void *)&v468[8 * v536];
      v541 = (char *)v589[0];
      v542 = (char *)v589[0] + 80 * v540;
      if (v534 < v535[2])
      {
        long long v538 = *(_OWORD *)v542;
        *((void *)v534 + 2) = *((void *)v542 + 2);
        *(_OWORD *)v534 = v538;
        *((void *)v542 + 1) = 0;
        *((void *)v542 + 2) = 0;
        *(void *)v542 = 0;
        v539 = &v541[80 * v540];
        *((void *)v534 + 3) = 0;
        *((void *)v534 + 4) = 0;
        *((void *)v534 + 5) = 0;
        *(_OWORD *)(v534 + 24) = *(_OWORD *)(v539 + 24);
        *((void *)v534 + 5) = *((void *)v539 + 5);
        *((void *)v539 + 3) = 0;
        *((void *)v539 + 4) = 0;
        *((void *)v539 + 5) = 0;
        *((void *)v534 + 6) = 0;
        *((void *)v534 + 7) = 0;
        *((void *)v534 + 8) = 0;
        *((_OWORD *)v534 + 3) = *((_OWORD *)v539 + 3);
        *((void *)v534 + 8) = *((void *)v539 + 8);
        *((void *)v539 + 6) = 0;
        *((void *)v539 + 7) = 0;
        *((void *)v539 + 8) = 0;
        *((void *)v534 + 9) = *((void *)v539 + 9);
        v534 += 80;
      }
      else
      {
        v534 = std::vector<Espresso::AOT::SegmentsLowerer::SegmentFuncDef>::__emplace_back_slow_path<Espresso::AOT::SegmentsLowerer::SegmentFuncDef>(v535, (uint64_t)v542);
      }
      v535 = (void **)a5;
      a5[1] = v534;
      ++v536;
    }
    while (v537 != v536);
    goto LABEL_1012;
  }
  if (v468)
  {
LABEL_1012:
    *((void *)&v594 + 1) = v468;
    operator delete(v468);
  }
  v528 = (void **)v560.__r_.__value_.__l.__size_;
  if (v560.__r_.__value_.__l.__size_)
  {
    do
    {
      v533 = (void **)*v528;
      if (*((char *)v528 + 39) < 0) {
        operator delete(v528[2]);
      }
      operator delete(v528);
      v528 = v533;
    }
    while (v533);
  }
  v529 = v559;
  v559 = 0;
  if (v529) {
    operator delete(v529);
  }
  v530 = *(void ***)v558;
  if (*(void *)v558)
  {
    do
    {
      v531 = *v530;
      std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)(v530 + 3), v530[4]);
      operator delete(v530);
      v530 = (void **)v531;
    }
    while (v531);
  }
  v532 = __p[0];
  __p[0] = 0;
  if (v532) {
    operator delete(v532);
  }
LABEL_602:
  int v319 = (void **)v585;
  if (v585)
  {
    do
    {
      uint64_t v329 = (void **)*v319;
      if (*((char *)v319 + 39) < 0) {
        operator delete(v319[2]);
      }
      operator delete(v319);
      int v319 = v329;
    }
    while (v329);
  }
  BOOL v320 = v584[0];
  v584[0] = 0;
  if (v320) {
    operator delete(v320);
  }
  int v321 = v583;
  if (v583)
  {
    do
    {
      BOOL v322 = *v321;
      std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)(v321 + 3), v321[4]);
      operator delete(v321);
      int v321 = (void **)v322;
    }
    while (v322);
  }
  uint64_t v323 = v582[0];
  v582[0] = 0;
  if (v323) {
    operator delete(v323);
  }
  uint64_t v324 = (void **)v587[0];
  if (v587[0])
  {
    do
    {
      uint64_t v330 = (void **)*v324;
      if (*((char *)v324 + 47) < 0) {
        operator delete(v324[3]);
      }
      operator delete(v324);
      uint64_t v324 = v330;
    }
    while (v330);
  }
  uint64_t v325 = v586[0];
  v586[0] = 0;
  if (v325) {
    operator delete(v325);
  }
  uint64_t v326 = (char *)v589[0];
  if (v589[0])
  {
    uint64_t v327 = (char *)v589[1];
    uint64_t v328 = v589[0];
    if (v589[1] != v589[0])
    {
      do
      {
        v327 -= 80;
        std::allocator<Espresso::AOT::SegmentsLowerer::SegmentFuncDef>::destroy[abi:ne180100]((uint64_t)&v590, (uint64_t)v327);
      }
      while (v327 != v326);
      uint64_t v328 = v589[0];
    }
    v589[1] = v326;
    operator delete(v328);
  }
}

void sub_1922A1520(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (v71)
  {
    *(void *)(v72 - 248) = v71;
    operator delete(v71);
  }
  std::deque<unsigned long>::~deque[abi:ne180100](v72 - 144);
  unint64_t v74 = *(void **)(v72 - 208);
  if (v74) {
    operator delete(v74);
  }
  std::pair<std::unordered_map<unsigned long,std::set<unsigned long>>,std::unordered_map<std::string,int>>::~pair((uint64_t)&__p);
  std::pair<std::unordered_map<unsigned long,std::set<unsigned long>>,std::unordered_map<std::string,int>>::~pair((uint64_t)&a55);
  std::unordered_map<unsigned long,std::pair<std::string,unsigned long>>::~unordered_map[abi:ne180100]((uint64_t)&a65);
  std::vector<Espresso::AOT::SegmentsLowerer::SegmentFuncDef>::~vector[abi:ne180100](&a71);
  _Unwind_Resume(a1);
}

void nitro::ndarray_container::visit<nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::operator==(nitro::ndarray_container const&)::$_0,nitro::ndarray<int>>>(nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::operator==(nitro::ndarray_container const&)::$_0,nitro::ndarray<int>>)const::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v22);
  unint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  unint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    int8x8_t v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    BOOL v7 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v7 && v7[280])
    {
      int64_t v8 = v7 + 16;
      if ((v21 & 0x80u) == 0) {
        uint64_t v9 = __p;
      }
      else {
        uint64_t v9 = (void **)__p[0];
      }
      if ((v21 & 0x80u) == 0) {
        uint64_t v10 = v21;
      }
      else {
        uint64_t v10 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
    }
    if ((char)v21 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    unint64_t v11 = (file_logger *)global_logger();
    uint64_t v12 = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    uint64_t v13 = (char *)pthread_getspecific(*((void *)v12 + 74));
    if (v13 && v13[280])
    {
      uint64_t v14 = v13 + 16;
      if ((v24 & 0x80u) == 0) {
        uint64_t v15 = v23;
      }
      else {
        uint64_t v15 = (void **)v23[0];
      }
      if ((v24 & 0x80u) == 0) {
        uint64_t v16 = v24;
      }
      else {
        uint64_t v16 = (uint64_t)v23[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    uint64_t v17 = pthread_getspecific(*((void *)v12 + 74));
    if (v17)
    {
      if (*((unsigned char *)v17 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v12);
        if (*((_DWORD *)v12 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v24 < 0) {
      operator delete(v23[0]);
    }
  }
  uint64_t v18 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1922A1E74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_upsample_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v25 = a4;
  long long v16 = xmmword_192DCA210;
  uint64_t v17 = 0x100000000;
  char v18 = 0;
  __asm { FMOV            V0.2S, #1.0 }
  uint64_t v19 = _D0;
  char v20 = 1;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  uint64_t v21 = 0;
  uint64_t v24 = _D0;
  Espresso::SerDes::params_io<Espresso::upsample_kernel_params>(a2, (uint64_t)&v16, 0);
  Espresso::abstract_engine_factory::shared(&v14);
  uint64_t v10 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "upsample");
  int v11 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v10, a3, (uint64_t)__p, (uint64_t)&v16, &v11);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
}

void sub_1922A20AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::params_io<Espresso::upsample_kernel_params>(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v12, "scaling_factor_x");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v12, &v14);
    (*(void (**)(void *, void **, uint64_t))(*(void *)v14 + 160))(v14, __p, a2 + 4);
    if (v17 < 0) {
      operator delete(__p[0]);
    }
    if (v15) {
      nitro::nitro_function::nitro_function(v15);
    }
    if (v13 < 0) {
      operator delete(v12[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v12, "scaling_factor_y");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v12, &v14);
    (*(void (**)(void *, void **, uint64_t))(*(void *)v14 + 160))(v14, __p, a2 + 8);
    if (v17 < 0) {
      operator delete(__p[0]);
    }
    if (v15) {
      nitro::nitro_function::nitro_function(v15);
    }
    if (v13 < 0) {
      operator delete(v12[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v12, "mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v12, &v14);
    (*(void (**)(void *, void **, uint64_t))(*(void *)v14 + 160))(v14, __p, a2 + 12);
    if (v17 < 0) {
      operator delete(__p[0]);
    }
    if (v15) {
      nitro::nitro_function::nitro_function(v15);
    }
    if (v13 < 0) {
      operator delete(v12[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v12, "align_corners");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v12, &v14);
    (*(void (**)(void *, void **, uint64_t))(*(void *)v14 + 160))(v14, __p, a2 + 16);
    if (v17 < 0) {
      operator delete(__p[0]);
    }
    if (v15) {
      nitro::nitro_function::nitro_function(v15);
    }
    if (v13 < 0) {
      operator delete(v12[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v12, "is_legacy_mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v12, &v14);
    (*(void (**)(void *, void **, uint64_t))(*(void *)v14 + 160))(v14, __p, a2 + 20);
    if (v17 < 0) {
      operator delete(__p[0]);
    }
    if (v15) {
      nitro::nitro_function::nitro_function(v15);
    }
    if (v13 < 0) {
      operator delete(v12[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v12, "fractional_scaling_factor_x");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v12, &v14);
    (*(void (**)(void *, void **, uint64_t))(*(void *)v14 + 216))(v14, __p, a2 + 28);
    if (v17 < 0) {
      operator delete(__p[0]);
    }
    if (v15) {
      nitro::nitro_function::nitro_function(v15);
    }
    if (v13 < 0) {
      operator delete(v12[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v12, "fractional_scaling_factor_y");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v12, &v14);
    (*(void (**)(void *, void **, uint64_t))(*(void *)v14 + 216))(v14, __p, a2 + 32);
    if (v17 < 0) {
      operator delete(__p[0]);
    }
    if (v15) {
      nitro::nitro_function::nitro_function(v15);
    }
    if (v13 < 0) {
      operator delete(v12[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v12, "use_fractional_scale_factors");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v12, &v14);
    (*(void (**)(void *, void **, uint64_t))(*(void *)v14 + 208))(v14, __p, a2 + 24);
    if (v17 < 0) {
      operator delete(__p[0]);
    }
    if (v15) {
      nitro::nitro_function::nitro_function(v15);
    }
    if (v13 < 0) {
      operator delete(v12[0]);
    }
    int v6 = *(unsigned __int8 *)(a2 + 36);
    uint64_t v5 = a2 + 36;
    if (!v6)
    {
      std::string::basic_string[abi:ne180100]<0>(v12, "recompute_fractional_scale_factors");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v12, &v14);
      (*(void (**)(void *, void **, uint64_t))(*(void *)v14 + 208))(v14, __p, v5);
      if (v17 < 0) {
        operator delete(__p[0]);
      }
      if (v15) {
        nitro::nitro_function::nitro_function(v15);
      }
      if (v13 < 0)
      {
        BOOL v7 = v12[0];
LABEL_119:
        operator delete(v7);
      }
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v12, "scaling_factor_x");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v12, &v14);
    int64_t v8 = (_DWORD *)(a2 + 4);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v14, (_DWORD *)(a2 + 4));
    if (v17 < 0) {
      operator delete(__p[0]);
    }
    if (v15) {
      nitro::nitro_function::nitro_function(v15);
    }
    if (v13 < 0) {
      operator delete(v12[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v12, "scaling_factor_y");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v12, &v14);
    uint64_t v9 = (_DWORD *)(a2 + 8);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v14, (_DWORD *)(a2 + 8));
    if (v17 < 0) {
      operator delete(__p[0]);
    }
    if (v15) {
      nitro::nitro_function::nitro_function(v15);
    }
    if (v13 < 0) {
      operator delete(v12[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v12, "mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v12, &v14);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v14, (_DWORD *)(a2 + 12));
    if (v17 < 0) {
      operator delete(__p[0]);
    }
    if (v15) {
      nitro::nitro_function::nitro_function(v15);
    }
    if (v13 < 0) {
      operator delete(v12[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v12, "align_corners");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v12, &v14);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v14, (_DWORD *)(a2 + 16));
    if (v17 < 0) {
      operator delete(__p[0]);
    }
    if (v15) {
      nitro::nitro_function::nitro_function(v15);
    }
    if (v13 < 0) {
      operator delete(v12[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v12, "is_legacy_mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v12, &v14);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v14, (_DWORD *)(a2 + 20));
    if (v17 < 0) {
      operator delete(__p[0]);
    }
    if (v15) {
      nitro::nitro_function::nitro_function(v15);
    }
    if (v13 < 0) {
      operator delete(v12[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v12, "fractional_scaling_factor_x");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v12, &v14);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v14, (float *)(a2 + 28));
    if (v17 < 0) {
      operator delete(__p[0]);
    }
    if (v15) {
      nitro::nitro_function::nitro_function(v15);
    }
    if (v13 < 0) {
      operator delete(v12[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v12, "fractional_scaling_factor_y");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v12, &v14);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v14, (float *)(a2 + 32));
    if (v17 < 0) {
      operator delete(__p[0]);
    }
    if (v15) {
      nitro::nitro_function::nitro_function(v15);
    }
    if (v13 < 0) {
      operator delete(v12[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v12, "use_fractional_scale_factors");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v12, &v14);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v14, (unsigned char *)(a2 + 24));
    if (v17 < 0) {
      operator delete(__p[0]);
    }
    if (v15) {
      nitro::nitro_function::nitro_function(v15);
    }
    if (v13 < 0) {
      operator delete(v12[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v12, "recompute_fractional_scale_factors");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v12, &v14);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v14, (unsigned char *)(a2 + 36));
    if (v17 < 0) {
      operator delete(__p[0]);
    }
    if (v15) {
      nitro::nitro_function::nitro_function(v15);
    }
    if (v13 < 0) {
      operator delete(v12[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(&v14, "scaling_factor");
    int v10 = (*(uint64_t (**)(uint64_t, void **))(*(void *)a1 + 24))(a1, &v14);
    int v11 = v10;
    if (SHIBYTE(__p[0]) < 0)
    {
      operator delete(v14);
      if (!v11) {
        return;
      }
    }
    else if (!v10)
    {
      return;
    }
    std::string::basic_string[abi:ne180100]<0>(&v14, "scaling_factor");
    *int64_t v8 = (*(uint64_t (**)(uint64_t, void **))(*(void *)a1 + 40))(a1, &v14);
    if (SHIBYTE(__p[0]) < 0) {
      operator delete(v14);
    }
    std::string::basic_string[abi:ne180100]<0>(&v14, "scaling_factor");
    _DWORD *v9 = (*(uint64_t (**)(uint64_t, void **))(*(void *)a1 + 40))(a1, &v14);
    if (SHIBYTE(__p[0]) < 0)
    {
      BOOL v7 = v14;
      goto LABEL_119;
    }
  }
}

void sub_1922A29AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::generic_gather_nd_kernel::top_shapes_for_bottom_shapes(_DWORD *a1@<X0>, const Espresso::layer_shape **a2@<X1>, void *a3@<X8>)
{
  *(void *)&long long v64 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *a2;
  if (a2[1] - v5 != 128) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("gather_nd_kernel: two inputs required");
  }
  memset(&v57, 0, sizeof(v57));
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&__x, v5, 0);
  Espresso::layer_nd_shape::shape_vector(&__src, (uint64_t)&__x);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&__x, (const Espresso::layer_shape *)((char *)*a2 + 64), 0);
  Espresso::layer_nd_shape::shape_vector(&v55, (uint64_t)&__x);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&__x, *a2, 0);
  unint64_t v8 = v61;
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&__x, (const Espresso::layer_shape *)((char *)*a2 + 64), 0);
  unint64_t v9 = a1[72];
  if ((v9 & 0x80000000) != 0)
  {
    long long v52 = "gather_nd_kernel: Negative batch_dims not permitted.";
    goto LABEL_71;
  }
  uint64_t v10 = v61;
  int v11 = a1[70];
  if (v11)
  {
    if (v11 == 2)
    {
      if (v9)
      {
        uint64_t v24 = "gather_nd_kernel: In TORCH_GATHER mode, batch_dims not supported.";
      }
      else
      {
        uint64_t v24 = "gather_nd_kernel: In TORCH_GATHER mode, Invalid value of the argument 'axis'.";
        unint64_t v25 = (v8 & ((int)a1[71] >> 31)) + a1[71];
        if ((v25 & 0x80000000) == 0 && v8 > v25)
        {
          if (v8 == v61)
          {
            if (v8)
            {
              std::vector<int>::pointer begin = __src.__begin_;
              uint64_t v27 = v8;
              std::vector<int>::pointer v28 = v55.__begin_;
              do
              {
                if (v25 && *begin != *v28) {
                  Espresso::throw_exception_selector<Espresso::invalid_state_error>("gather_nd_kernel: In TORCH_GATHER mode, Invalid input shapes. Shapes can only differ in axis dimension.");
                }
                ++begin;
                ++v28;
                --v25;
                --v27;
              }
              while (v27);
            }
            std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)&v57, (char *)v55.__begin_, (uint64_t)v55.__end_, v55.__end_ - v55.__begin_);
            goto LABEL_46;
          }
          uint64_t v24 = "gather_nd_kernel: In TORCH_GATHER mode, inputs should have the same rank.";
        }
      }
      Espresso::throw_exception_selector<Espresso::invalid_state_error>(v24);
    }
    if (v11 == 1)
    {
      uint64_t v12 = v61 - 1;
      std::vector<int>::pointer v13 = v55.__begin_;
      uint64_t v14 = v55.__begin_[v12];
      if (v8 < (int)v14 + (int)v9)
      {
        long long v52 = "gather_nd_kernel: In TF_GATHER_ND mode, invalid indices. indices.shape[-1] <= params.rank";
      }
      else
      {
        if (v61 > v9)
        {
          if (v9)
          {
            std::vector<int>::pointer v15 = __src.__begin_;
            uint64_t v16 = a1[72];
            do
            {
              int v18 = *v15++;
              int v17 = v18;
              int v19 = *v13++;
              if (v17 != v19) {
                Espresso::throw_exception_selector<Espresso::invalid_state_error>("gather_nd_kernel: Leading batch dims must match between params and indices shape.");
              }
              --v16;
            }
            while (v16);
          }
          uint64_t v20 = v14 + v9;
          std::vector<int>::size_type v21 = v12 + v8 - v20;
          if (v12 + v8 == v20)
          {
            LODWORD(v54[0]) = 1;
            *(void *)((char *)&v54[1] + 4) = 0;
            *(void *)((char *)v54 + 4) = 0;
            HIDWORD(v54[2]) = 1;
            Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)v54, v21, (uint64_t)&__x);
            *a3 = 0;
            a3[1] = 0;
            a3[2] = 0;
            unint64_t v58 = a3;
            char v59 = 0;
            uint64_t v22 = (char *)operator new(0x40uLL);
            *a3 = v22;
            a3[1] = v22;
            a3[2] = v22 + 64;
            uint64_t v23 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), &__x, &v64, (uint64_t)v22);
            goto LABEL_52;
          }
          LODWORD(__x) = 0;
          std::vector<int>::resize(&v57, v21, (std::vector<int>::const_reference)&__x);
          std::vector<int>::pointer v41 = v55.__begin_;
          if (v55.__end_ - 1 != v55.__begin_)
          {
            memmove(v57.__begin_, v55.__begin_, (char *)(v55.__end_ - 1) - (char *)v55.__begin_);
            std::vector<int>::pointer v41 = v55.__begin_;
          }
          uint64_t v42 = &__src.__begin_[v41[v12] + a1[72]];
          uint64_t v43 = (char *)((char *)__src.__end_ - (char *)v42);
          if (__src.__end_ == v42) {
            goto LABEL_46;
          }
          uint64_t v44 = &v57.__begin_[v10 - 1];
          goto LABEL_45;
        }
        long long v52 = "gather_nd_kernel: In TF_GATHER_ND mode, invalid batch_dims. Must have batch_dims < indices.rank";
      }
    }
    else
    {
      long long v52 = "gather_nd_kernel: Invalid MODE";
    }
LABEL_71:
    Espresso::throw_exception_selector<Espresso::invalid_state_error>(v52);
  }
  int v29 = a1[71];
  int v30 = v8 & (v29 >> 31);
  uint64_t v31 = (v30 + v29);
  if (v30 + v29 < 0 || v8 <= v31)
  {
    std::string::size_type v53 = "gather_nd_kernel: In TF_GATHER mode, Invalid value of the argument 'axis'.";
    goto LABEL_76;
  }
  if (v9 > v31)
  {
    std::string::size_type v53 = "gather_nd_kernel: In TF_GATHER mode, batch_dims must be less than or equal to axis.";
    goto LABEL_76;
  }
  if (v9 && v61 < v9)
  {
    std::string::size_type v53 = "gather_nd_kernel: In TF_GATHER mode, invalid batch_dims. Must have batch_dims <= indices.rank";
LABEL_76:
    Espresso::throw_exception_selector<Espresso::invalid_state_error>(v53);
  }
  if (v9)
  {
    std::vector<int>::pointer v32 = __src.__begin_;
    std::vector<int>::pointer v33 = v55.__begin_;
    uint64_t v34 = a1[72];
    do
    {
      int v36 = *v32++;
      int v35 = v36;
      int v37 = *v33++;
      if (v35 != v37) {
        Espresso::throw_exception_selector<Espresso::invalid_state_error>("gather_nd_kernel: Leading batch dims must match between params and indices shape.");
      }
      --v34;
    }
    while (v34);
  }
  uint64_t v38 = v8 + v61 - 1;
  std::vector<int>::size_type v39 = v38 - v9;
  if (v38 == v9)
  {
    memset(v54, 0, sizeof(v54));
    Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)v54, v39, (uint64_t)&__x);
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    unint64_t v58 = a3;
    char v59 = 0;
    uint64_t v40 = (char *)operator new(0x40uLL);
    *a3 = v40;
    a3[1] = v40;
    a3[2] = v40 + 64;
    uint64_t v23 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), &__x, &v64, (uint64_t)v40);
    goto LABEL_52;
  }
  LODWORD(__x) = 0;
  std::vector<int>::resize(&v57, v39, (std::vector<int>::const_reference)&__x);
  if (v31) {
    memmove(v57.__begin_, __src.__begin_, 4 * v31);
  }
  unint64_t v45 = &v55.__begin_[a1[72]];
  if (v55.__end_ != v45) {
    memmove(&v57.__begin_[v31], v45, (char *)v55.__end_ - (char *)v45);
  }
  uint64_t v42 = &__src.__begin_[v31 + 1];
  uint64_t v43 = (char *)((char *)__src.__end_ - (char *)v42);
  if (__src.__end_ != v42)
  {
    uint64_t v44 = (int *)((char *)&v57.__begin_[v31] + (((char *)v55.__end_ - (char *)v55.__begin_) << 30 >> 30) + -4 * a1[72]);
LABEL_45:
    memmove(v44, v42, (size_t)v43);
  }
LABEL_46:
  memset(v54, 0, 20);
  std::vector<int>::pointer v46 = v57.__begin_;
  int64_t v47 = (char *)v57.__end_ - (char *)v57.__begin_;
  if (v57.__end_ != v57.__begin_)
  {
    uint64_t v48 = v47 >> 2;
    if ((unint64_t)(v47 >> 2) <= 1) {
      uint64_t v48 = 1;
    }
    uint64_t v49 = v54;
    do
    {
      int v50 = *v46++;
      *v49++ = v50;
      --v48;
    }
    while (v48);
  }
  HIDWORD(v54[2]) = (unint64_t)v47 >> 2;
  Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)v54, 0, (uint64_t)&__x);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  unint64_t v58 = a3;
  char v59 = 0;
  uint64_t v51 = (char *)operator new(0x40uLL);
  *a3 = v51;
  a3[1] = v51;
  a3[2] = v51 + 64;
  uint64_t v23 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), &__x, &v64, (uint64_t)v51);
LABEL_52:
  a3[1] = v23;
  if (__p)
  {
    unint64_t v63 = __p;
    operator delete(__p);
  }
  if (v55.__begin_)
  {
    v55.__end_ = v55.__begin_;
    operator delete(v55.__begin_);
  }
  if (__src.__begin_)
  {
    __src.__end_ = __src.__begin_;
    operator delete(__src.__begin_);
  }
  if (v57.__begin_)
  {
    v57.__end_ = v57.__begin_;
    operator delete(v57.__begin_);
  }
}

void sub_1922A2FD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void **a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30)
{
  *(void *)(v30 + 8) = v31;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&a22);
  if (__p)
  {
    a30 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a13) {
    operator delete(a13);
  }
  if (a16) {
    operator delete(a16);
  }
  if (a19) {
    operator delete(a19);
  }
  _Unwind_Resume(a1);
}

void std::vector<int>::resize(std::vector<int> *this, std::vector<int>::size_type __sz, std::vector<int>::const_reference __x)
{
  std::vector<int>::pointer begin = this->__begin_;
  std::vector<int>::pointer end = this->__end_;
  std::vector<int>::size_type v7 = end - this->__begin_;
  if (__sz <= v7)
  {
    if (__sz < v7) {
      this->__end_ = &begin[__sz];
    }
  }
  else
  {
    value = this->__end_cap_.__value_;
    if (__sz - v7 <= value - end)
    {
      uint64_t v23 = &end[__sz - v7];
      std::vector<int>::size_type v24 = 4 * __sz - 4 * v7;
      do
      {
        *end++ = *__x;
        v24 -= 4;
      }
      while (v24);
      this->__end_ = v23;
    }
    else
    {
      if (__sz >> 62) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v10 = (char *)value - (char *)begin;
      std::vector<int>::size_type v11 = ((char *)value - (char *)begin) >> 1;
      if (v11 <= __sz) {
        std::vector<int>::size_type v11 = __sz;
      }
      if (v10 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v12 = v11;
      }
      std::vector<int>::pointer v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v12);
      std::vector<int>::pointer v15 = (int *)&v13[4 * v7];
      uint64_t v16 = (int *)&v13[4 * __sz];
      std::vector<int>::size_type v17 = 4 * __sz - 4 * v7;
      int v18 = v15;
      do
      {
        *v18++ = *__x;
        v17 -= 4;
      }
      while (v17);
      int v19 = (int *)&v13[4 * v14];
      std::vector<int>::pointer v20 = this->__begin_;
      for (std::vector<int>::pointer i = this->__end_; i != v20; --i)
      {
        int v22 = *(i - 1);
        *--std::vector<int>::pointer v15 = v22;
      }
      this->__begin_ = v15;
      this->__end_ = v16;
      this->__end_cap_.__value_ = v19;
      if (v20)
      {
        operator delete(v20);
      }
    }
  }
}

uint64_t e5rt_program_library_get_num_functions(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EE394750;
  v4[1] = a1;
  v4[2] = a2;
  uint64_t v5 = v4;
  uint64_t v2 = E5RT::ExceptionSafeExecute((uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

void sub_1922A32A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_precompiled_compute_op_create_options_set_operation_name(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EE396D08;
  v4[1] = a1;
  v4[2] = a2;
  uint64_t v5 = v4;
  uint64_t v2 = E5RT::ExceptionSafeExecute((uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

void sub_1922A339C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_execution_stream_operation_prepare_op_for_encode(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  v3[0] = &unk_1EE392898;
  v3[1] = a1;
  unint64_t v4 = v3;
  uint64_t v1 = E5RT::ExceptionSafeExecute((uint64_t)v3);
  if (v4 == v3)
  {
    (*(void (**)(void *))(v3[0] + 32))(v3);
  }
  else if (v4)
  {
    (*(void (**)(void))(*v4 + 40))();
  }
  return v1;
}

void sub_1922A3498(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

void E5RT::E5FunctionImpl::LoadOperationInfo(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, void *a5@<X8>)
{
  uint64_t v161 = *MEMORY[0x1E4F143B8];
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t, uint64_t))(*(void *)a3 + 48))(v144, a3, 1, 5);
  if (v144[1] == v144[0])
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v153, "LoadOperationInfo");
    std::string::basic_string[abi:ne180100]<0>(&v145, "Invalid compute program. No text section");
    E5RT::Status::Status(v130, 8, &v145);
    E5RT::E5RTError::E5RTError(exception, &v153, v130);
  }
  uint64_t v11 = *(void *)v144[0];
  uint64_t v10 = *((void *)v144[0] + 1);
  uint64_t v142 = *(void *)v144[0];
  uint64_t v143 = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  if (((*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2) & 2) == 0)
  {
    uint64_t v100 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v153, "LoadOperationInfo");
    std::string::basic_string[abi:ne180100]<0>(&v145, "Invalid symbol type in function block.");
    E5RT::Status::Status(v130, 8, &v145);
    E5RT::E5RTError::E5RTError(v100, &v153, v130);
  }
  uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
  uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 48))(a2);
  uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 40))(v11);
  size_t v141 = 0;
  std::vector<int>::pointer v15 = (unsigned int *)(v14 + v13);
  if ((*(unsigned int (**)(uint64_t))(*(void *)a3 + 16))(a3)) {
    operator new();
  }
  *(void *)&long long v153 = &unk_1EE377EC0;
  *((void *)&v153 + 1) = VerifySizePrefixedKernelInfoBuffer;
  *((void *)&v154 + 1) = &v153;
  *(void *)&long long v145 = &unk_1EE377AA0;
  *((void *)&v145 + 1) = UnPackSizePrefixedKernelInfo;
  *((void *)&v146 + 1) = &v145;
  E5RT_FB::VerifyAndUnPackSizePrefixedE5RTBuffer<KernelInfoT>(v15, (uint64_t)&v153, (uint64_t)&v145);
  uint64_t v16 = *(int **)&v130[0];
  *(void *)&v130[0] = 0;
  size_t v141 = v16;
  if (*((long long **)&v146 + 1) == &v145)
  {
    (*(void (**)(long long *))(v145 + 32))(&v145);
    uint64_t v17 = *((void *)&v154 + 1);
    if (*((long long **)&v154 + 1) != &v153)
    {
LABEL_11:
      if (v17) {
        (*(void (**)(uint64_t))(*(void *)v17 + 40))(v17);
      }
      goto LABEL_15;
    }
  }
  else
  {
    if (*((void *)&v146 + 1)) {
      (*(void (**)(void))(**((void **)&v146 + 1) + 40))();
    }
    uint64_t v17 = *((void *)&v154 + 1);
    if (*((long long **)&v154 + 1) != &v153) {
      goto LABEL_11;
    }
  }
  (*(void (**)(long long *))(v153 + 32))(&v153);
LABEL_15:
  int v18 = (uint64_t *)*((void *)v141 + 1);
  if (!v18)
  {
    uint64_t v101 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v153, "LoadOperationInfo");
    std::string::basic_string[abi:ne180100]<0>(&v145, "Arg frame is missing in operation.");
    E5RT::Status::Status(v130, 11, &v145);
    E5RT::E5RTError::E5RTError(v101, &v153, v130);
  }
  uint64_t v19 = *v18;
  uint64_t v20 = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 40))(a3);
  __n128 v21 = *(__n128 *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)v20 + 16))(v20) + 16 * v19);
  __n128 v140 = v21;
  __n128 v115 = v21;
  if (v21.n128_u64[1]) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v21.n128_u64[1] + 8), 1uLL, memory_order_relaxed);
  }
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t, uint64_t))(*(void *)a3 + 48))(v139, a3, 2, 1);
  if ((void *)((char *)v139[1] - (char *)v139[0]) != (void *)16)
  {
    long long v102 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v153, "LoadOperationInfo");
    std::string::basic_string[abi:ne180100]<0>(&v145, "Found more than one const section.");
    E5RT::Status::Status(v130, 8, &v145);
    E5RT::E5RTError::E5RTError(v102, &v153, v130);
  }
  uint64_t v22 = *(void *)v139[0];
  uint64_t v23 = *((void *)v139[0] + 1);
  uint64_t v137 = *(void *)v139[0];
  uint64_t v138 = v23;
  if (v23) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v23 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v24 = (*(uint64_t (**)(uint64_t))(*(void *)v22 + 40))(v22);
  uint64_t v25 = (*(uint64_t (**)(unint64_t, __n128))(*(void *)v115.n128_u64[0] + 48))(v115.n128_u64[0], v115);
  int v136 = 0;
  uint64_t v26 = v141;
  int v136 = *v141;
  *a5 = 0;
  a5[1] = 0;
  uint64_t v156 = 0;
  long long v154 = 0u;
  long long v155 = 0u;
  long long v153 = 0u;
  int v157 = 1065353216;
  long long v158 = 0u;
  long long v159 = 0u;
  int v160 = 1065353216;
  uint64_t v148 = 0;
  long long v146 = 0u;
  long long v147 = 0u;
  long long v145 = 0u;
  int v149 = 1065353216;
  long long v150 = 0u;
  long long v151 = 0u;
  int v152 = 1065353216;
  uint64_t v131 = 0;
  memset(v130, 0, sizeof(v130));
  int v132 = 1065353216;
  long long v133 = 0u;
  long long v134 = 0u;
  int v135 = 1065353216;
  v129[0] = a1;
  v129[1] = v20;
  v129[2] = a4;
  v129[3] = a3;
  v129[4] = v12;
  uint64_t v27 = (void *)*((void *)v26 + 1);
  std::vector<int>::pointer v28 = (uint64_t *)v27[1];
  int v29 = (uint64_t *)v27[2];
  if (v28 != v29)
  {
    while (1)
    {
      sub_19241E2FC(&__p, (uint64_t)v129, *v28);
      uint64_t v30 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[]((uint64_t)&v153, (uint64_t)&__p);
      uint64_t v32 = v120;
      uint64_t v31 = (uint64_t)v121;
      if (v121) {
        atomic_fetch_add_explicit(&v121->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::vector<int>::pointer v33 = (std::__shared_weak_count *)v30[1];
      *uint64_t v30 = v32;
      v30[1] = v31;
      if (v33 && !atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
        uint64_t v34 = v121;
        if (v121)
        {
LABEL_30:
          if (!atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
            std::__shared_weak_count::__release_weak(v34);
          }
        }
      }
      else
      {
        uint64_t v34 = v121;
        if (v121) {
          goto LABEL_30;
        }
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if (++v28 == v29)
        {
LABEL_36:
          uint64_t v26 = v141;
          uint64_t v27 = (void *)*((void *)v141 + 1);
          break;
        }
      }
      else if (++v28 == v29)
      {
        goto LABEL_36;
      }
    }
  }
  int v35 = (uint64_t *)v27[11];
  int v36 = (uint64_t *)v27[12];
  if (v35 != v36)
  {
    while (1)
    {
      sub_19241E2FC(&__p, (uint64_t)v129, *v35);
      int v37 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[]((uint64_t)v130, (uint64_t)&__p);
      uint64_t v39 = v120;
      uint64_t v38 = (uint64_t)v121;
      if (v121) {
        atomic_fetch_add_explicit(&v121->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v40 = (std::__shared_weak_count *)v37[1];
      *int v37 = v39;
      v37[1] = v38;
      if (v40 && !atomic_fetch_add(&v40->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
        std::vector<int>::pointer v41 = v121;
        if (v121)
        {
LABEL_46:
          if (!atomic_fetch_add(&v41->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
            std::__shared_weak_count::__release_weak(v41);
          }
        }
      }
      else
      {
        std::vector<int>::pointer v41 = v121;
        if (v121) {
          goto LABEL_46;
        }
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if (++v35 == v36)
        {
LABEL_52:
          uint64_t v26 = v141;
          uint64_t v27 = (void *)*((void *)v141 + 1);
          break;
        }
      }
      else if (++v35 == v36)
      {
        goto LABEL_52;
      }
    }
  }
  uint64_t v42 = (uint64_t *)v27[4];
  uint64_t v43 = (uint64_t *)v27[5];
  if (v42 == v43) {
    goto LABEL_69;
  }
  while (1)
  {
    sub_19241E2FC(&__p, (uint64_t)v129, *v42);
    uint64_t v44 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[]((uint64_t)&v145, (uint64_t)&__p);
    uint64_t v46 = v120;
    uint64_t v45 = (uint64_t)v121;
    if (v121) {
      atomic_fetch_add_explicit(&v121->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int64_t v47 = (std::__shared_weak_count *)v44[1];
    uint64_t *v44 = v46;
    v44[1] = v45;
    if (v47 && !atomic_fetch_add(&v47->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
      uint64_t v48 = v121;
      if (v121)
      {
LABEL_62:
        if (!atomic_fetch_add(&v48->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
    }
    else
    {
      uint64_t v48 = v121;
      if (v121) {
        goto LABEL_62;
      }
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if (++v42 == v43)
      {
LABEL_68:
        uint64_t v26 = v141;
        uint64_t v27 = (void *)*((void *)v141 + 1);
LABEL_69:
        int v50 = (unsigned char *)v27[7];
        uint64_t v49 = (unsigned char *)v27[8];
        unint64_t v126 = 0;
        unint64_t v127 = 0;
        uint64_t v128 = 0;
        int64_t v51 = v49 - v50;
        if (v49 == v50)
        {
          LOBYTE(v124) = 0;
          char v125 = 0;
          int v53 = v136 - 1;
        }
        else
        {
          if (v51 < 0) {
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v126 = operator new(v49 - v50);
          unint64_t v127 = v126;
          long long v52 = (char *)v126 + 8 * (v51 >> 3);
          uint64_t v128 = v52;
          memcpy(v126, v50, v51);
          unint64_t v127 = v52;
          uint64_t v124 = *(void *)(*((void *)v26 + 1) + 80);
          char v125 = 1;
          int v53 = v136 - 1;
          if ((v136 - 1) > 0xD)
          {
LABEL_190:
            uint64_t v114 = __cxa_allocate_exception(0x18uLL);
            std::string::basic_string[abi:ne180100]<0>(&__p, "LoadOperationInfo");
            std::string::basic_string[abi:ne180100]<0>(v118, "Invalid op code.");
            E5RT::Status::Status(v116, 8, v118);
            E5RT::E5RTError::E5RTError(v114, &__p, v116);
          }
        }
        unint64_t v54 = (unsigned int *)(v24 + v25);
        switch(v53)
        {
          case 0:
            if (!(*(unsigned int (**)(uint64_t))(*(void *)a3 + 16))(a3))
            {
              uint64_t v55 = *v54;
              __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v54;
              __p.__r_.__value_.__l.__size_ = v55 + 4;
              __p.__r_.__value_.__r.__words[2] = 0xF424000000040;
              LODWORD(v120) = 257;
              uint64_t v122 = 0;
              uint64_t v123 = 0;
              uint64_t v121 = 0;
              if (v55 > 0x7FFFFFFA) {
                __assert_rtn("Verifier", "verifier.h", 42, "size_ < FLATBUFFERS_MAX_BUFFER_SIZE");
              }
              if (v55 < 8
                || v55 != *v54
                || (v58 = v54[1], v57 = v54 + 1, uint64_t v56 = v58, v58 < 1)
                || v55 + 3 < (unint64_t)(v56 + 4)
                || (AneInferenceOp::Verify((int *)((char *)v57 + v56), (uint64_t)&__p) & 1) == 0)
              {
                uint64_t v108 = __cxa_allocate_exception(0x18uLL);
                std::string::basic_string[abi:ne180100]<0>(v118, "LoadOperationInfo");
                std::string::basic_string[abi:ne180100]<0>(v116, "Unable to verify E5 op info.");
                E5RT::Status::Status(v117, 8, v116);
                E5RT::E5RTError::E5RTError(v108, v118, v117);
              }
            }
            operator new();
          case 1:
            if (!(*(unsigned int (**)(uint64_t))(*(void *)a3 + 16))(a3))
            {
              uint64_t v91 = *v54;
              __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v54;
              __p.__r_.__value_.__l.__size_ = v91 + 4;
              __p.__r_.__value_.__r.__words[2] = 0xF424000000040;
              LODWORD(v120) = 257;
              uint64_t v122 = 0;
              uint64_t v123 = 0;
              uint64_t v121 = 0;
              if (v91 > 0x7FFFFFFA) {
                __assert_rtn("Verifier", "verifier.h", 42, "size_ < FLATBUFFERS_MAX_BUFFER_SIZE");
              }
              if (v91 < 8
                || v91 != *v54
                || (v94 = v54[1], v93 = v54 + 1, uint64_t v92 = v94, v94 < 1)
                || v91 + 3 < (unint64_t)(v92 + 4)
                || (CpuInferenceOp::Verify((int *)((char *)v93 + v92), (uint64_t *)&__p) & 1) == 0)
              {
                uint64_t v112 = __cxa_allocate_exception(0x18uLL);
                std::string::basic_string[abi:ne180100]<0>(v118, "LoadOperationInfo");
                std::string::basic_string[abi:ne180100]<0>(v116, "Unable to verify E5 op info.");
                E5RT::Status::Status(v117, 8, v116);
                E5RT::E5RTError::E5RTError(v112, v118, v117);
              }
            }
            operator new();
          case 2:
            if (!(*(unsigned int (**)(uint64_t))(*(void *)a3 + 16))(a3))
            {
              uint64_t v79 = *v54;
              __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v54;
              __p.__r_.__value_.__l.__size_ = v79 + 4;
              __p.__r_.__value_.__r.__words[2] = 0xF424000000040;
              LODWORD(v120) = 257;
              uint64_t v122 = 0;
              uint64_t v123 = 0;
              uint64_t v121 = 0;
              if (v79 > 0x7FFFFFFA) {
                __assert_rtn("Verifier", "verifier.h", 42, "size_ < FLATBUFFERS_MAX_BUFFER_SIZE");
              }
              if (v79 < 8
                || v79 != *v54
                || (v82 = v54[1], v81 = v54 + 1, uint64_t v80 = v82, v82 < 1)
                || v79 + 3 < (unint64_t)(v80 + 4)
                || (CastOp::Verify((int *)((char *)v81 + v80), (uint64_t *)&__p) & 1) == 0)
              {
                int v109 = __cxa_allocate_exception(0x18uLL);
                std::string::basic_string[abi:ne180100]<0>(v118, "LoadOperationInfo");
                std::string::basic_string[abi:ne180100]<0>(v116, "Unable to verify E5 op info.");
                E5RT::Status::Status(v117, 8, v116);
                E5RT::E5RTError::E5RTError(v109, v118, v117);
              }
            }
            operator new();
          case 3:
            if (!(*(unsigned int (**)(uint64_t))(*(void *)a3 + 16))(a3))
            {
              uint64_t v87 = *v54;
              __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v54;
              __p.__r_.__value_.__l.__size_ = v87 + 4;
              __p.__r_.__value_.__r.__words[2] = 0xF424000000040;
              LODWORD(v120) = 257;
              uint64_t v122 = 0;
              uint64_t v123 = 0;
              uint64_t v121 = 0;
              if (v87 > 0x7FFFFFFA) {
                __assert_rtn("Verifier", "verifier.h", 42, "size_ < FLATBUFFERS_MAX_BUFFER_SIZE");
              }
              if (v87 < 8
                || v87 != *v54
                || (v90 = v54[1], v89 = v54 + 1, uint64_t v88 = v90, v90 < 1)
                || v87 + 3 < (unint64_t)(v88 + 4)
                || (QuantOp::Verify((int *)((char *)v89 + v88), (uint64_t *)&__p) & 1) == 0)
              {
                uint64_t v111 = __cxa_allocate_exception(0x18uLL);
                std::string::basic_string[abi:ne180100]<0>(v118, "LoadOperationInfo");
                std::string::basic_string[abi:ne180100]<0>(v116, "Unable to verify E5 op info.");
                E5RT::Status::Status(v117, 8, v116);
                E5RT::E5RTError::E5RTError(v111, v118, v117);
              }
            }
            operator new();
          case 4:
            if (!(*(unsigned int (**)(uint64_t))(*(void *)a3 + 16))(a3))
            {
              uint64_t v71 = *v54;
              __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v54;
              __p.__r_.__value_.__l.__size_ = v71 + 4;
              __p.__r_.__value_.__r.__words[2] = 0xF424000000040;
              LODWORD(v120) = 257;
              uint64_t v122 = 0;
              uint64_t v123 = 0;
              uint64_t v121 = 0;
              if (v71 > 0x7FFFFFFA) {
                __assert_rtn("Verifier", "verifier.h", 42, "size_ < FLATBUFFERS_MAX_BUFFER_SIZE");
              }
              if (v71 < 8
                || v71 != *v54
                || (v74 = v54[1], v73 = v54 + 1, uint64_t v72 = v74, v74 < 1)
                || v71 + 3 < (unint64_t)(v72 + 4)
                || (QuantOp::Verify((int *)((char *)v73 + v72), (uint64_t *)&__p) & 1) == 0)
              {
                unint64_t v106 = __cxa_allocate_exception(0x18uLL);
                std::string::basic_string[abi:ne180100]<0>(v118, "LoadOperationInfo");
                std::string::basic_string[abi:ne180100]<0>(v116, "Unable to verify E5 op info.");
                E5RT::Status::Status(v117, 8, v116);
                E5RT::E5RTError::E5RTError(v106, v118, v117);
              }
            }
            operator new();
          case 6:
            if (!(*(unsigned int (**)(uint64_t))(*(void *)a3 + 16))(a3))
            {
              uint64_t v75 = *v54;
              __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v54;
              __p.__r_.__value_.__l.__size_ = v75 + 4;
              __p.__r_.__value_.__r.__words[2] = 0xF424000000040;
              LODWORD(v120) = 257;
              uint64_t v122 = 0;
              uint64_t v123 = 0;
              uint64_t v121 = 0;
              if (v75 > 0x7FFFFFFA) {
                __assert_rtn("Verifier", "verifier.h", 42, "size_ < FLATBUFFERS_MAX_BUFFER_SIZE");
              }
              if (v75 < 8
                || v75 != *v54
                || (v78 = v54[1], int v77 = v54 + 1, v76 = v78, v78 < 1)
                || v75 + 3 < (unint64_t)(v76 + 4)
                || (E5MinimalCpuOp::Verify((int *)((char *)v77 + v76), (uint64_t *)&__p) & 1) == 0)
              {
                int v107 = __cxa_allocate_exception(0x18uLL);
                std::string::basic_string[abi:ne180100]<0>(v118, "LoadOperationInfo");
                std::string::basic_string[abi:ne180100]<0>(v116, "Unable to verify E5 op info.");
                E5RT::Status::Status(v117, 8, v116);
                E5RT::E5RTError::E5RTError(v107, v118, v117);
              }
            }
            operator new();
          case 7:
            if (!(*(unsigned int (**)(uint64_t))(*(void *)a3 + 16))(a3))
            {
              uint64_t v95 = *v54;
              __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v54;
              __p.__r_.__value_.__l.__size_ = v95 + 4;
              __p.__r_.__value_.__r.__words[2] = 0xF424000000040;
              LODWORD(v120) = 257;
              uint64_t v122 = 0;
              uint64_t v123 = 0;
              uint64_t v121 = 0;
              if (v95 > 0x7FFFFFFA) {
                __assert_rtn("Verifier", "verifier.h", 42, "size_ < FLATBUFFERS_MAX_BUFFER_SIZE");
              }
              if (v95 < 8
                || v95 != *v54
                || (v98 = v54[1], unint64_t v97 = v54 + 1, v96 = v98, v98 < 1)
                || v95 + 3 < (unint64_t)(v96 + 4)
                || (MpsGraphInferenceOp::Verify((int *)((char *)v97 + v96), (uint64_t)&__p) & 1) == 0)
              {
                BOOL v113 = __cxa_allocate_exception(0x18uLL);
                std::string::basic_string[abi:ne180100]<0>(v118, "LoadOperationInfo");
                std::string::basic_string[abi:ne180100]<0>(v116, "Unable to verify E5 op info.");
                E5RT::Status::Status(v117, 8, v116);
                E5RT::E5RTError::E5RTError(v113, v118, v117);
              }
            }
            operator new();
          case 10:
            if (!(*(unsigned int (**)(uint64_t))(*(void *)a3 + 16))(a3))
            {
              uint64_t v83 = *v54;
              __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v54;
              __p.__r_.__value_.__l.__size_ = v83 + 4;
              __p.__r_.__value_.__r.__words[2] = 0xF424000000040;
              LODWORD(v120) = 257;
              uint64_t v122 = 0;
              uint64_t v123 = 0;
              uint64_t v121 = 0;
              if (v83 > 0x7FFFFFFA) {
                __assert_rtn("Verifier", "verifier.h", 42, "size_ < FLATBUFFERS_MAX_BUFFER_SIZE");
              }
              if (v83 < 8
                || v83 != *v54
                || (v86 = v54[1], v85 = v54 + 1, uint64_t v84 = v86, v86 < 1)
                || v83 + 3 < (unint64_t)(v84 + 4)
                || !EirInferenceOp::Verify((int *)((char *)v85 + v84), (uint64_t)&__p))
              {
                BOOL v110 = __cxa_allocate_exception(0x18uLL);
                std::string::basic_string[abi:ne180100]<0>(v118, "LoadOperationInfo");
                std::string::basic_string[abi:ne180100]<0>(v116, "Unable to verify E5 op info.");
                E5RT::Status::Status(v117, 8, v116);
                E5RT::E5RTError::E5RTError(v110, v118, v117);
              }
            }
            operator new();
          case 11:
            if (!(*(unsigned int (**)(uint64_t))(*(void *)a3 + 16))(a3))
            {
              uint64_t v67 = *v54;
              __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v54;
              __p.__r_.__value_.__l.__size_ = v67 + 4;
              __p.__r_.__value_.__r.__words[2] = 0xF424000000040;
              LODWORD(v120) = 257;
              uint64_t v122 = 0;
              uint64_t v123 = 0;
              uint64_t v121 = 0;
              if (v67 > 0x7FFFFFFA) {
                __assert_rtn("Verifier", "verifier.h", 42, "size_ < FLATBUFFERS_MAX_BUFFER_SIZE");
              }
              if (v67 < 8
                || v67 != *v54
                || (v70 = v54[1], unint64_t v69 = v54 + 1, v68 = v70, v70 < 1)
                || v67 + 3 < (unint64_t)(v68 + 4)
                || (BnnsCpuInferenceOp::Verify((int *)((char *)v69 + v68), (uint64_t)&__p) & 1) == 0)
              {
                uint64_t v105 = __cxa_allocate_exception(0x18uLL);
                std::string::basic_string[abi:ne180100]<0>(v118, "LoadOperationInfo");
                std::string::basic_string[abi:ne180100]<0>(v116, "Unable to verify E5 op info.");
                E5RT::Status::Status(v117, 8, v116);
                E5RT::E5RTError::E5RTError(v105, v118, v117);
              }
            }
            operator new();
          case 12:
            if (!(*(unsigned int (**)(uint64_t))(*(void *)a3 + 16))(a3))
            {
              uint64_t v59 = *v54;
              __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v54;
              __p.__r_.__value_.__l.__size_ = v59 + 4;
              __p.__r_.__value_.__r.__words[2] = 0xF424000000040;
              LODWORD(v120) = 257;
              uint64_t v122 = 0;
              uint64_t v123 = 0;
              uint64_t v121 = 0;
              if (v59 > 0x7FFFFFFA) {
                __assert_rtn("Verifier", "verifier.h", 42, "size_ < FLATBUFFERS_MAX_BUFFER_SIZE");
              }
              if (v59 < 8
                || v59 != *v54
                || (v62 = v54[1], v61 = v54 + 1, uint64_t v60 = v62, v62 < 1)
                || v59 + 3 < (unint64_t)(v60 + 4)
                || (JitCallOp::Verify((int *)((char *)v61 + v60), (uint64_t)&__p) & 1) == 0)
              {
                uint64_t v103 = __cxa_allocate_exception(0x18uLL);
                std::string::basic_string[abi:ne180100]<0>(v118, "LoadOperationInfo");
                std::string::basic_string[abi:ne180100]<0>(v116, "Unable to verify E5 op info.");
                E5RT::Status::Status(v117, 8, v116);
                E5RT::E5RTError::E5RTError(v103, v118, v117);
              }
            }
            operator new();
          case 13:
            if (!(*(unsigned int (**)(uint64_t))(*(void *)a3 + 16))(a3))
            {
              uint64_t v63 = *v54;
              __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v54;
              __p.__r_.__value_.__l.__size_ = v63 + 4;
              __p.__r_.__value_.__r.__words[2] = 0xF424000000040;
              LODWORD(v120) = 257;
              uint64_t v122 = 0;
              uint64_t v123 = 0;
              uint64_t v121 = 0;
              if (v63 > 0x7FFFFFFA) {
                __assert_rtn("Verifier", "verifier.h", 42, "size_ < FLATBUFFERS_MAX_BUFFER_SIZE");
              }
              if (v63 < 8
                || v63 != *v54
                || (v66 = v54[1], v65 = v54 + 1, uint64_t v64 = v66, v66 < 1)
                || v63 + 3 < (unint64_t)(v64 + 4)
                || (E5MinimalCpuOp::Verify((int *)((char *)v65 + v64), (uint64_t *)&__p) & 1) == 0)
              {
                long long v104 = __cxa_allocate_exception(0x18uLL);
                std::string::basic_string[abi:ne180100]<0>(v118, "LoadOperationInfo");
                std::string::basic_string[abi:ne180100]<0>(v116, "Unable to verify E5 op info.");
                E5RT::Status::Status(v117, 8, v116);
                E5RT::E5RTError::E5RTError(v104, v118, v117);
              }
            }
            operator new();
          default:
            goto LABEL_190;
        }
        goto LABEL_190;
      }
    }
    else if (++v42 == v43)
    {
      goto LABEL_68;
    }
  }
}

void sub_1922A61D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54,uint64_t a55,void *a56,uint64_t a57,uint64_t a58,char a59,uint64_t a60,uint64_t a61,char a62,uint64_t a63)
{
  std::unique_ptr<QuantOpT>::~unique_ptr[abi:ne180100]((uint64_t *)&a22);
  if (__p)
  {
    a32 = (uint64_t)__p;
    operator delete(__p);
  }
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::~OrderedMap(&a39);
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::~OrderedMap(&a67);
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::~OrderedMap((void **)(v68 - 208));
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v67);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a54);
  std::vector<std::shared_ptr<E5RT::IOPort>>::~vector[abi:ne180100](&a56);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a59);
  uint64_t v70 = a61;
  a61 = 0;
  if (v70) {
    std::default_delete<KernelInfoT>::operator()[abi:ne180100]((uint64_t)&a61, v70);
  }
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a62);
  std::vector<std::shared_ptr<E5RT::IOPort>>::~vector[abi:ne180100](&a64);
  _Unwind_Resume(a1);
}

void **E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::~OrderedMap(void **a1)
{
  uint64_t v2 = (void **)a1[10];
  if (v2)
  {
    do
    {
      while (1)
      {
        uint64_t v3 = (void **)*v2;
        unint64_t v4 = (std::__shared_weak_count *)v2[6];
        if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
        if (*((char *)v2 + 39) < 0) {
          break;
        }
        operator delete(v2);
        uint64_t v2 = v3;
        if (!v3) {
          goto LABEL_9;
        }
      }
      operator delete(v2[2]);
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
LABEL_9:
  uint64_t v5 = a1[8];
  a1[8] = 0;
  if (v5) {
    operator delete(v5);
  }
  uint64_t v6 = (void **)a1[5];
  if (v6)
  {
    do
    {
      uint64_t v11 = (void **)*v6;
      if (*((char *)v6 + 39) < 0) {
        operator delete(v6[2]);
      }
      operator delete(v6);
      uint64_t v6 = v11;
    }
    while (v11);
  }
  std::vector<int>::size_type v7 = a1[3];
  a1[3] = 0;
  if (v7) {
    operator delete(v7);
  }
  unint64_t v8 = (void **)*a1;
  if (*a1)
  {
    unint64_t v9 = (void **)a1[1];
    uint64_t v10 = *a1;
    if (v9 != v8)
    {
      do
      {
        if (*((char *)v9 - 1) < 0) {
          operator delete(*(v9 - 3));
        }
        v9 -= 3;
      }
      while (v9 != v8);
      uint64_t v10 = *a1;
    }
    a1[1] = v8;
    operator delete(v10);
  }
  return a1;
}

void std::allocator<E5RT::E5OperationImpl<AneInferenceOpT>>::construct[abi:ne180100]<E5RT::E5OperationImpl<AneInferenceOpT>,std::string const&,OpCode &,std::unique_ptr<AneInferenceOpT>,E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>,E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>,E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::vector<unsigned long long>,std::optional<unsigned long long> &>(uint64_t a1, uint64_t a2, long long *a3, int *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, uint64_t a9, uint64_t *a10)
{
  int v10 = *a4;
  uint64_t v12 = *a5;
  if (v12) {
    operator new();
  }
  uint64_t v13 = 0;
  *a5 = 0;
  E5RT::E5OperationImpl<AneInferenceOpT>::E5OperationImpl(a2, a3, v10, &v12, a6, a7, a8, a9, *a10, a10[1]);
  uint64_t v11 = v13;
  if (v13)
  {
    if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_1922A6CC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::default_delete<KernelInfoT>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = *(void **)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    if (v2)
    {
      uint64_t v3 = (void *)v2[11];
      if (v3)
      {
        v2[12] = v3;
        operator delete(v3);
      }
      unint64_t v4 = (void *)v2[7];
      if (v4)
      {
        v2[8] = v4;
        operator delete(v4);
      }
      uint64_t v5 = (void *)v2[4];
      if (v5)
      {
        v2[5] = v5;
        operator delete(v5);
      }
      uint64_t v6 = (void *)v2[1];
      if (v6)
      {
        v2[2] = v6;
        operator delete(v6);
      }
      MEMORY[0x192FF16B0](v2, 0x1010C40FAD225F3);
    }
    JUMPOUT(0x192FF16B0);
  }
}

double AneInferenceOp::UnPackTo(int *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = -v4;
  uint64_t v6 = (unsigned __int16 *)((char *)a1 - v4);
  if (*v6 >= 5u)
  {
    uint64_t v7 = v6[2];
    if (v7)
    {
      unint64_t v8 = (char *)a1 + v7;
      uint64_t v9 = *(unsigned int *)((char *)a1 + v7);
      uint64_t v11 = &v8[v9 + 4];
      size_t v10 = *(unsigned int *)&v8[v9];
      if (v10 >= 0x17)
      {
        if ((v10 | 7) == 0x17) {
          uint64_t v33 = (v10 & 0xFFFFFFF8) + 8;
        }
        else {
          uint64_t v33 = v10 | 7;
        }
        p_dst = (long long *)operator new(v33 + 1);
        *((void *)&__dst + 1) = v10;
        uint64_t v47 = v33 - 0x7FFFFFFFFFFFFFFFLL;
        *(void *)&long long __dst = p_dst;
      }
      else
      {
        HIBYTE(v47) = *(_DWORD *)&v8[v9];
        p_dst = &__dst;
        if (!v10)
        {
          *((unsigned char *)&__dst + v10) = 0;
          if ((*(char *)(a2 + 23) & 0x80000000) == 0)
          {
LABEL_6:
            double result = *(double *)&__dst;
            *(_OWORD *)a2 = __dst;
            *(void *)(a2 + 16) = v47;
            uint64_t v5 = -(uint64_t)*a1;
            goto LABEL_7;
          }
LABEL_33:
          operator delete(*(void **)a2);
          goto LABEL_6;
        }
      }
      memcpy(p_dst, v11, v10);
      *((unsigned char *)p_dst + v10) = 0;
      if ((*(char *)(a2 + 23) & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_33;
    }
  }
LABEL_7:
  if (*(unsigned __int16 *)((char *)a1 + v5) >= 7u)
  {
    uint64_t v14 = *(unsigned __int16 *)((char *)a1 + v5 + 6);
    if (*(_WORD *)((char *)a1 + v5 + 6))
    {
      std::vector<int>::pointer v15 = (char *)a1 + v14;
      uint64_t v16 = *(unsigned int *)((char *)a1 + v14);
      int v18 = &v15[v16 + 4];
      size_t v17 = *(unsigned int *)&v15[v16];
      if (v17 >= 0x17)
      {
        if ((v17 | 7) == 0x17) {
          uint64_t v34 = (v17 & 0xFFFFFFF8) + 8;
        }
        else {
          uint64_t v34 = v17 | 7;
        }
        uint64_t v19 = (long long *)operator new(v34 + 1);
        *((void *)&__dst + 1) = v17;
        uint64_t v47 = v34 - 0x7FFFFFFFFFFFFFFFLL;
        *(void *)&long long __dst = v19;
      }
      else
      {
        HIBYTE(v47) = *(_DWORD *)&v15[v16];
        uint64_t v19 = &__dst;
        if (!v17)
        {
          *((unsigned char *)&__dst + v17) = 0;
          uint64_t v20 = a2 + 24;
          if ((*(char *)(a2 + 47) & 0x80000000) == 0)
          {
LABEL_12:
            double result = *(double *)&__dst;
            *(_OWORD *)uint64_t v20 = __dst;
            *(void *)(v20 + 16) = v47;
            uint64_t v5 = -(uint64_t)*a1;
            goto LABEL_13;
          }
LABEL_39:
          operator delete(*(void **)v20);
          goto LABEL_12;
        }
      }
      memcpy(v19, v18, v17);
      *((unsigned char *)v19 + v17) = 0;
      uint64_t v20 = a2 + 24;
      if ((*(char *)(a2 + 47) & 0x80000000) == 0) {
        goto LABEL_12;
      }
      goto LABEL_39;
    }
  }
LABEL_13:
  __n128 v21 = (unsigned __int16 *)((char *)a1 + v5);
  if (*v21 < 9u)
  {
    *(_DWORD *)(a2 + 48) = 0;
    uint64_t v23 = (unsigned __int16 *)((char *)a1 - *a1);
    if (*v23 < 0xBu) {
      goto LABEL_22;
    }
  }
  else
  {
    uint64_t v22 = v21[4];
    if (v22) {
      LODWORD(v22) = *(int *)((char *)a1 + v22);
    }
    *(_DWORD *)(a2 + 48) = v22;
    uint64_t v23 = (unsigned __int16 *)((char *)a1 - *a1);
    if (*v23 < 0xBu) {
      goto LABEL_22;
    }
  }
  uint64_t v24 = v23[5];
  if (!v24)
  {
LABEL_22:
    uint64_t v31 = *(void *)(a2 + 56);
    uint64_t v32 = *(void *)(a2 + 64);
    if (v32 != v31)
    {
      do
      {
        if (*(char *)(v32 - 1) < 0) {
          operator delete(*(void **)(v32 - 24));
        }
        v32 -= 24;
      }
      while (v32 != v31);
      *(void *)(a2 + 64) = v31;
    }
    return result;
  }
  uint64_t v25 = (int *)((char *)a1 + v24 + *(unsigned int *)((char *)a1 + v24));
  uint64_t v26 = *(void *)(a2 + 56);
  uint64_t v28 = *(void *)(a2 + 64);
  uint64_t v27 = (void *)(a2 + 56);
  unint64_t v29 = *v25;
  unint64_t v30 = 0xAAAAAAAAAAAAAAABLL * ((v28 - v26) >> 3);
  if (v29 <= v30)
  {
    if (v29 < v30)
    {
      uint64_t v35 = v26 + 24 * v29;
      while (v28 != v35)
      {
        if (*(char *)(v28 - 1) < 0) {
          operator delete(*(void **)(v28 - 24));
        }
        v28 -= 24;
      }
      *(void *)(a2 + 64) = v35;
    }
  }
  else
  {
    std::vector<std::string>::__append((std::vector<std::string> *)(a2 + 56), v29 - v30);
  }
  if (*v25)
  {
    uint64_t v36 = 0;
    unint64_t v37 = 0;
    uint64_t v38 = v25;
    uint64_t v39 = v25;
    do
    {
      unsigned int v40 = v39[1];
      ++v39;
      std::vector<int>::pointer v41 = (char *)v38 + v40;
      size_t v42 = *((unsigned int *)v41 + 1);
      if (v42 >= 0x17)
      {
        if ((v42 | 7) == 0x17) {
          uint64_t v45 = (v42 & 0xFFFFFFF8) + 8;
        }
        else {
          uint64_t v45 = v42 | 7;
        }
        uint64_t v43 = (long long *)operator new(v45 + 1);
        *((void *)&__dst + 1) = v42;
        uint64_t v47 = v45 - 0x7FFFFFFFFFFFFFFFLL;
        *(void *)&long long __dst = v43;
      }
      else
      {
        HIBYTE(v47) = *((_DWORD *)v41 + 1);
        uint64_t v43 = &__dst;
        if (!v42)
        {
          *((unsigned char *)&__dst + v42) = 0;
          uint64_t v44 = *v27 + v36;
          if (*(char *)(v44 + 23) < 0) {
            goto LABEL_59;
          }
          goto LABEL_49;
        }
      }
      memcpy(v43, v41 + 8, v42);
      *((unsigned char *)v43 + v42) = 0;
      uint64_t v44 = *v27 + v36;
      if (*(char *)(v44 + 23) < 0) {
LABEL_59:
      }
        operator delete(*(void **)v44);
LABEL_49:
      double result = *(double *)&__dst;
      *(_OWORD *)uint64_t v44 = __dst;
      *(void *)(v44 + 16) = v47;
      ++v37;
      v36 += 24;
      uint64_t v38 = v39;
    }
    while (v37 < *v25);
  }
  return result;
}

void nitro::ndarray<half>::assign<int>(nitro::ndarray<int> const&)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  unint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  uint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 1227, 1);
    std::stringbuf::str();
    unint64_t v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      uint64_t v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        size_t v10 = __p;
      }
      else {
        size_t v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  nitro::ndarray<half>& nitro::ndarray<half>::assign<int>(nitro::ndarray<int> const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1922A73C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void *nitro::ndarray<unsigned char>::assign<half>(void *a1, void *a2)
{
  uint64_t v4 = (char *)a1[2];
  uint64_t v3 = (char *)a1[3];
  unint64_t v5 = (v3 - v4) >> 3;
  uint64_t v6 = (void *)a2[2];
  if (v5 != (uint64_t)(a2[3] - (void)v6) >> 3) {
    goto LABEL_13;
  }
  if (v3 == v4) {
    return a1;
  }
  uint64_t v7 = v5 <= 1 ? 1 : (v3 - v4) >> 3;
  if (*(void *)v4 != *v6) {
    goto LABEL_13;
  }
  uint64_t v8 = 1;
  do
  {
    unint64_t v9 = v8;
    if (v7 == v8) {
      break;
    }
    uint64_t v10 = *(void *)&v4[8 * v8];
    uint64_t v11 = v6[v8++];
  }
  while (v10 == v11);
  if (v9 < v5) {
LABEL_13:
  }
    nitro::ndarray<unsigned char>::assign<half>(nitro::ndarray<half> const&)::{lambda(void)#1}::operator()();
  if (v3 != v4 && *a1)
  {
    unint64_t v12 = v3 - v4 - 8;
    if (v12 >= 8)
    {
      uint64_t v15 = (v12 >> 3) + 1;
      uint64_t v14 = &v4[8 * (v15 & 0x3FFFFFFFFFFFFFFELL)];
      uint64_t v16 = v4 + 8;
      uint64_t v17 = 1;
      uint64_t v18 = v15 & 0x3FFFFFFFFFFFFFFELL;
      uint64_t v19 = 1;
      do
      {
        v17 *= *(v16 - 1);
        v19 *= *v16;
        v16 += 2;
        v18 -= 2;
      }
      while (v18);
      uint64_t v13 = v19 * v17;
      if (v15 == (v15 & 0x3FFFFFFFFFFFFFFELL))
      {
LABEL_21:
        if (v13) {
          nitro::ndarray<unsigned char>::pairwise_element_visitor<half,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::assign<half>(nitro::ndarray<half> const&)::{lambda(unsigned char &,half const&)#1}>(a1, a2);
        }
        return a1;
      }
    }
    else
    {
      uint64_t v13 = 1;
      uint64_t v14 = (char *)a1[2];
    }
    do
    {
      uint64_t v20 = *(void *)v14;
      v14 += 8;
      v13 *= v20;
    }
    while (v14 != v3);
    goto LABEL_21;
  }
  return a1;
}

void anonymous namespace'::TraverseCallOp(void *a1, void *a2, uint64_t a3, void *a4, void *a5, uint64_t a6, uint64_t a7, int a8, char a9, void *a10)
{
  uint64_t v300 = *MEMORY[0x1E4F143B8];
  (*(void (**)(MIL::IRUnknownProperty **__return_ptr, uint64_t))(*(void *)a3 + 48))(&v278, a3);
  uint64_t v12 = (*(uint64_t (**)(void))(*(void *)*a2 + 64))();
  (*(void (**)(long long *__return_ptr))(*(void *)v12 + 120))(&v276);
  uint64_t Function = MIL::IRProgram::GetFunction();
  if (!std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::find<std::string>(a5, (uint64_t)&v276))
  {
    size_t v274 = v278;
    std::string::size_type v275 = (std::__shared_weak_count *)v279;
    if (v279) {
      atomic_fetch_add_explicit(v279 + 1, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)Function + 232))(v269, Function);
    unint64_t v272 = v269[0];
    if (v269[0]) {
      operator new();
    }
    std::string::size_type v273 = 0;
    v269[0] = 0;
    MIL::Builder::FunctionBuilder::Make();
    *(void *)std::string v296 = &v276;
    int v163 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a5, (uint64_t)&v276, (uint64_t)&std::piecewise_construct, (long long **)v296);
    if (v280) {
      operator new();
    }
    uint64_t v280 = 0;
    uint64_t v164 = (std::__shared_weak_count *)v163[6];
    v163[5] = 0;
    v163[6] = 0;
    if (v164 && !atomic_fetch_add(&v164->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
      std::__shared_weak_count::__release_weak(v164);
    }
    std::string::size_type v165 = v280;
    uint64_t v280 = 0;
    if (v165) {
      (*(void (**)(void *))(*(void *)v165 + 8))(v165);
    }
    uint64_t v166 = v273;
    if (v273 && !atomic_fetch_add(&v273->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
      std::__shared_weak_count::__release_weak(v166);
    }
    long long v167 = v269[0];
    v269[0] = 0;
    if (v167) {
      (*(void (**)(void *))(*(void *)v167 + 8))(v167);
    }
    long long v168 = v275;
    if (v275 && !atomic_fetch_add(&v275->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
      std::__shared_weak_count::__release_weak(v168);
    }
  }
  *(_OWORD *)uint64_t v269 = 0u;
  *(_OWORD *)uint64_t v270 = 0u;
  int v271 = 1065353216;
  uint64_t v14 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)Function + 128))(Function);
  uint64_t v259 = a2;
  uint64_t v252 = a1;
  uint64_t v15 = (unsigned __int8 *)(v14 + 1);
  uint64_t v16 = (unsigned __int8 *)*v14;
  if ((void *)*v14 == v14 + 1)
  {
    char v260 = 0;
  }
  else
  {
    char v260 = 0;
    do
    {
      uint64_t v17 = v16 + 32;
      uint64_t v18 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>(a4, v16 + 32);
      if (!v18) {
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      }
      *(void *)std::string v296 = v16 + 32;
      uint64_t v19 = std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v269, v16 + 32, (uint64_t)&std::piecewise_construct, (long long **)v296);
      if (v19 != (char *)v18) {
        std::vector<MIL::IRDimension const*>::__assign_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(v19 + 40, *((char **)v18 + 5), *((void *)v18 + 6), (uint64_t)(*((void *)v18 + 6) - *((void *)v18 + 5)) >> 3);
      }
      uint64_t v20 = *(uint64_t ***)(a6 + 8);
      if (v20)
      {
        int v21 = (char)v16[55];
        if (v21 >= 0) {
          size_t v22 = v16[55];
        }
        else {
          size_t v22 = *((void *)v16 + 5);
        }
        if (v21 < 0) {
          uint64_t v17 = (const void *)*((void *)v16 + 4);
        }
        do
        {
          int v23 = *((char *)v20 + 55);
          if (v23 >= 0) {
            size_t v24 = *((unsigned __int8 *)v20 + 55);
          }
          else {
            size_t v24 = (size_t)v20[5];
          }
          if (v23 >= 0) {
            uint64_t v25 = (uint64_t *)(v20 + 4);
          }
          else {
            uint64_t v25 = v20[4];
          }
          if (v24 >= v22) {
            size_t v26 = v22;
          }
          else {
            size_t v26 = v24;
          }
          int v27 = memcmp(v17, v25, v26);
          BOOL v28 = v22 < v24;
          if (v27) {
            BOOL v28 = v27 < 0;
          }
          if (!v28)
          {
            int v29 = memcmp(v25, v17, v26);
            BOOL v30 = v24 < v22;
            if (v29) {
              BOOL v30 = v29 < 0;
            }
            if (!v30)
            {
              char v260 = 1;
              break;
            }
            ++v20;
          }
          uint64_t v20 = (uint64_t **)*v20;
        }
        while (v20);
      }
      uint64_t v31 = (unsigned __int8 *)*((void *)v16 + 1);
      if (v31)
      {
        do
        {
          uint64_t v32 = v31;
          uint64_t v31 = *(unsigned __int8 **)v31;
        }
        while (v31);
      }
      else
      {
        do
        {
          uint64_t v32 = (unsigned __int8 *)*((void *)v16 + 2);
          BOOL v201 = *(void *)v32 == (void)v16;
          uint64_t v16 = v32;
        }
        while (!v201);
      }
      uint64_t v16 = v32;
    }
    while (v32 != v15);
  }
  *(void *)std::string v296 = &v276;
  uint64_t v33 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a5, (uint64_t)&v276, (uint64_t)&std::piecewise_construct, (long long **)v296);
  Context = (MIL::Attributes::FlexibleShapeInfo *)MIL::Builder::FunctionBuilder::GetContext((uint64_t *)&v289, (MIL::Builder::FunctionBuilder *)v33[5]);
  MIL::Attributes::FlexibleShapeInfo::Make((uint64_t *)v283, Context);
  uint64_t v35 = a2;
  uint64_t v36 = a7;
  *(void *)std::string v296 = operator new(0x20uLL);
  *(_OWORD *)&v296[8] = xmmword_192DAA350;
  strcpy(*(char **)v296, "FlexibleShapeInformation");
  MIL::Builder::FunctionBuilder::TryGetAttribute();
  if ((v296[23] & 0x80000000) == 0)
  {
    if (!v286) {
      goto LABEL_53;
    }
LABEL_48:
    MIL::Builder::FunctionBuilder::CreateFunction((uint64_t *)&v280, (MIL::Builder::FunctionBuilder *)v33[5]);
    MIL::Attributes::FlexibleShapeInfo::Make();
    unint64_t v37 = *(MIL::Attributes::FlexibleShapeInfo **)v296;
    *(void *)std::string v296 = 0;
    uint64_t v38 = v283[0];
    v283[0] = v37;
    if (v38)
    {
      MIL::Attributes::FlexibleShapeInfo::~FlexibleShapeInfo(v38);
      MEMORY[0x192FF16B0]();
      uint64_t v39 = *(MIL::Attributes::FlexibleShapeInfo **)v296;
      *(void *)std::string v296 = 0;
      if (v39)
      {
        MIL::Attributes::FlexibleShapeInfo::~FlexibleShapeInfo(v39);
        MEMORY[0x192FF16B0]();
      }
    }
    unsigned int v40 = v280;
    uint64_t v280 = 0;
    if (v40) {
      (*(void (**)(void *))(*(void *)v40 + 8))(v40);
    }
    goto LABEL_53;
  }
  operator delete(*(void **)v296);
  if (v286) {
    goto LABEL_48;
  }
LABEL_53:
  uint64_t v41 = *(unsigned __int8 *)(a7 + 23);
  char v42 = v41;
  uint64_t v43 = *(void *)(a7 + 8);
  if ((v41 & 0x80u) == 0) {
    uint64_t v44 = *(unsigned __int8 *)(a7 + 23);
  }
  else {
    uint64_t v44 = *(void *)(a7 + 8);
  }
  if (!v44) {
    goto LABEL_100;
  }
  memset(v296, 0, sizeof(v296));
  int v297 = 1065353216;
  MIL::Builder::FunctionBuilder::GetInputs((uint64_t *)&v280, (MIL::Builder::FunctionBuilder *)v33[5]);
  uint64_t v45 = (MIL::Builder::Variable *)__p;
  if (!__p) {
    goto LABEL_88;
  }
  uint64_t v46 = v33;
  while (2)
  {
    uint64_t Name = MIL::Builder::Variable::GetName(*((MIL::Builder::Variable **)v45 + 2));
    uint64_t v48 = *(uint64_t ***)(a6 + 8);
    if (!v48) {
      goto LABEL_59;
    }
    uint64_t v49 = (unsigned __int8 *)Name;
    int v50 = *(char *)(Name + 23);
    if (v50 >= 0) {
      size_t v51 = *(unsigned __int8 *)(Name + 23);
    }
    else {
      size_t v51 = *(void *)(Name + 8);
    }
    if (v50 >= 0) {
      long long v52 = (const void *)Name;
    }
    else {
      long long v52 = *(const void **)Name;
    }
    while (1)
    {
      int v53 = *((char *)v48 + 55);
      if (v53 >= 0) {
        size_t v54 = *((unsigned __int8 *)v48 + 55);
      }
      else {
        size_t v54 = (size_t)v48[5];
      }
      if (v53 >= 0) {
        uint64_t v55 = (uint64_t *)(v48 + 4);
      }
      else {
        uint64_t v55 = v48[4];
      }
      if (v54 >= v51) {
        size_t v56 = v51;
      }
      else {
        size_t v56 = v54;
      }
      int v57 = memcmp(v52, v55, v56);
      BOOL v58 = v51 < v54;
      if (v57) {
        BOOL v58 = v57 < 0;
      }
      if (v58) {
        goto LABEL_67;
      }
      int v59 = memcmp(v55, v52, v56);
      BOOL v60 = v54 < v51;
      if (v59) {
        BOOL v60 = v59 < 0;
      }
      if (!v60) {
        break;
      }
      ++v48;
LABEL_67:
      uint64_t v48 = (uint64_t **)*v48;
      if (!v48) {
        goto LABEL_59;
      }
    }
    v290.__r_.__value_.__r.__words[0] = (std::string::size_type)v49;
    int v61 = std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a4, v49, (uint64_t)&std::piecewise_construct, (long long **)&v290);
    v290.__r_.__value_.__r.__words[0] = (std::string::size_type)v49;
    int v62 = std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v296, v49, (uint64_t)&std::piecewise_construct, (long long **)&v290);
    if (v62 != v61) {
      std::vector<MIL::IRDimension const*>::__assign_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(v62 + 40, *((char **)v61 + 5), *((void *)v61 + 6), (uint64_t)(*((void *)v61 + 6) - *((void *)v61 + 5)) >> 3);
    }
LABEL_59:
    uint64_t v45 = *(MIL::Builder::Variable **)v45;
    if (v45) {
      continue;
    }
    break;
  }
  uint64_t v63 = __p;
  uint64_t v35 = v259;
  uint64_t v33 = v46;
  uint64_t v36 = a7;
  if (__p)
  {
    do
    {
      uint64_t v64 = (void *)*v63;
      operator delete(v63);
      uint64_t v63 = v64;
    }
    while (v64);
  }
LABEL_88:
  unint64_t v65 = v280;
  uint64_t v280 = 0;
  if (v65) {
    operator delete(v65);
  }
  if (*(void *)&v296[24])
  {
    if (*(char *)(v36 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v290, *(const std::string::value_type **)v36, *(void *)(v36 + 8));
    }
    else {
      std::string v290 = *(std::string *)v36;
    }
    MIL::Attributes::FlexibleShapeInfo::AddEnumeratedShapes();
    if (SHIBYTE(v290.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v290.__r_.__value_.__l.__data_);
    }
  }
  int v66 = *(char **)&v296[16];
  if (*(void *)&v296[16])
  {
    do
    {
      unint64_t v69 = *(char **)v66;
      uint64_t v70 = (void *)*((void *)v66 + 5);
      if (v70)
      {
        *((void *)v66 + 6) = v70;
        operator delete(v70);
      }
      if (v66[39] < 0) {
        operator delete(*((void **)v66 + 2));
      }
      operator delete(v66);
      int v66 = v69;
    }
    while (v69);
  }
  uint64_t v67 = *(void **)v296;
  *(void *)std::string v296 = 0;
  if (v67) {
    operator delete(v67);
  }
  uint64_t v41 = *(unsigned __int8 *)(v36 + 23);
  uint64_t v43 = *(void *)(v36 + 8);
  char v42 = *(unsigned char *)(v36 + 23);
LABEL_100:
  if (v42 < 0) {
    uint64_t v41 = v43;
  }
  if (v41 || (a8 & 1) != 0) {
    goto LABEL_177;
  }
  memset(v296, 0, sizeof(v296));
  int v297 = 1065353216;
  MIL::Builder::FunctionBuilder::GetInputs((uint64_t *)&v280, (MIL::Builder::FunctionBuilder *)v33[5]);
  uint64_t v68 = (MIL::Builder::Variable *)__p;
  if (!__p) {
    goto LABEL_170;
  }
  uint64_t v254 = v33;
  while (2)
  {
    uint64_t v71 = MIL::Builder::Variable::GetName(*((MIL::Builder::Variable **)v68 + 2));
    uint64_t v72 = *(uint64_t ***)(a6 + 8);
    if (!v72) {
      goto LABEL_111;
    }
    uint64_t v73 = v71;
    int v74 = *(char *)(v71 + 23);
    if (v74 >= 0) {
      size_t v75 = *(unsigned __int8 *)(v71 + 23);
    }
    else {
      size_t v75 = *(void *)(v71 + 8);
    }
    if (v74 >= 0) {
      uint64_t v76 = (const void *)v71;
    }
    else {
      uint64_t v76 = *(const void **)v71;
    }
    while (2)
    {
      int v77 = *((char *)v72 + 55);
      if (v77 >= 0) {
        size_t v78 = *((unsigned __int8 *)v72 + 55);
      }
      else {
        size_t v78 = (size_t)v72[5];
      }
      if (v77 >= 0) {
        uint64_t v79 = (uint64_t *)(v72 + 4);
      }
      else {
        uint64_t v79 = v72[4];
      }
      if (v78 >= v75) {
        size_t v80 = v75;
      }
      else {
        size_t v80 = v78;
      }
      int v81 = memcmp(v76, v79, v80);
      BOOL v82 = v75 < v78;
      if (v81) {
        BOOL v82 = v81 < 0;
      }
      if (v82)
      {
LABEL_120:
        uint64_t v72 = (uint64_t **)*v72;
        if (!v72) {
          goto LABEL_111;
        }
        continue;
      }
      break;
    }
    int v83 = memcmp(v79, v76, v80);
    BOOL v84 = v78 < v75;
    if (v83) {
      BOOL v84 = v83 < 0;
    }
    if (v84)
    {
      ++v72;
      goto LABEL_120;
    }
    *(void *)&long long buf = v73;
    int v85 = std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a4, (unsigned __int8 *)v73, (uint64_t)&std::piecewise_construct, (long long **)&buf);
    uint64_t v86 = *((void *)v85 + 5);
    if (*((void *)v85 + 6) == v86)
    {
LABEL_140:
      if (a10)
      {
        uint64_t v89 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>(a10, (unsigned __int8 *)v73);
        uint64_t v91 = v89;
        if (!v89
          || (uint64_t v91 = v89 + 40, *((void *)v89 + 6) - *((void *)v89 + 5) == *((void *)v85 + 6) - *((void *)v85 + 5)))
        {
          uint64_t v93 = *((void *)v85 + 5);
          uint64_t v92 = *((void *)v85 + 6);
          uint64_t v299 = 0;
          long long buf = 0uLL;
          int64_t v94 = v92 - v93;
          if (v92 == v93) {
            goto LABEL_159;
          }
          goto LABEL_152;
        }
        unint64_t v97 = Espresso::espresso_os_log_subsystem(0, v90);
        if (os_log_type_enabled(v97, OS_LOG_TYPE_ERROR))
        {
          if (*(char *)(v73 + 23) >= 0) {
            uint64_t v108 = v73;
          }
          else {
            uint64_t v108 = *(void *)v73;
          }
          LODWORD(buf) = 136315138;
          *(void *)((char *)&buf + 4) = v108;
          _os_log_error_impl(&dword_1920CB000, v97, OS_LOG_TYPE_ERROR, "%s tensor min shape has a different rank than max shape, so leaving the min shape to default value 1 in FlexibleShapeInfo.", (uint8_t *)&buf, 0xCu);
          uint64_t v91 = 0;
          uint64_t v110 = *((void *)v85 + 5);
          uint64_t v109 = *((void *)v85 + 6);
          uint64_t v299 = 0;
          long long buf = 0uLL;
          int64_t v94 = v109 - v110;
          if (v109 == v110) {
            goto LABEL_159;
          }
          goto LABEL_152;
        }
      }
      uint64_t v91 = 0;
      uint64_t v99 = *((void *)v85 + 5);
      uint64_t v98 = *((void *)v85 + 6);
      uint64_t v299 = 0;
      long long buf = 0uLL;
      int64_t v94 = v98 - v99;
      if (v98 == v99)
      {
LABEL_159:
        unint64_t v284 = (void *)v73;
        int v107 = std::__hash_table<std::__hash_value_type<std::string,std::vector<std::pair<int,int>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::pair<int,int>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::pair<int,int>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::pair<int,int>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v296, v73, (uint64_t)&std::piecewise_construct, (long long **)&v284)+ 5;
        if (v107 != (uint64_t *)&buf) {
          std::vector<std::pair<int,int>>::__assign_with_size[abi:ne180100]<std::pair<int,int>*,std::pair<int,int>*>((uint64_t)v107, (char *)buf, *((char **)&buf + 1), (uint64_t)(*((void *)&buf + 1) - buf) >> 3);
        }
        if ((void)buf)
        {
          *((void *)&buf + 1) = buf;
          operator delete((void *)buf);
        }
        goto LABEL_111;
      }
LABEL_152:
      if (v94 < 0) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v100 = (char *)operator new(v94);
      *(void *)&long long buf = v100;
      uint64_t v299 = &v100[8 * (v94 >> 3)];
      bzero(v100, v94);
      *((void *)&buf + 1) = &v100[v94];
      uint64_t v101 = *((void *)v85 + 5);
      if (*((void *)v85 + 6) != v101)
      {
        unint64_t v102 = 0;
        do
        {
          if (v91)
          {
            uint64_t v103 = MIL::IRDimension::AsConstant(*(MIL::IRDimension **)(*(void *)v91 + 8 * v102));
            int v104 = (*(uint64_t (**)(uint64_t))(*(void *)v103 + 48))(v103);
            *(_DWORD *)(buf + 8 * v102) = v104;
            uint64_t v101 = *((void *)v85 + 5);
          }
          else
          {
            *(_DWORD *)&v100[8 * v102] = 1;
          }
          uint64_t v105 = MIL::IRDimension::AsConstant(*(MIL::IRDimension **)(v101 + 8 * v102));
          int v106 = (*(uint64_t (**)(uint64_t))(*(void *)v105 + 48))(v105);
          uint64_t v100 = (char *)buf;
          *(_DWORD *)(buf + 8 * v102++ + 4) = v106;
          uint64_t v101 = *((void *)v85 + 5);
        }
        while (v102 < (*((void *)v85 + 6) - v101) >> 3);
      }
      goto LABEL_159;
    }
    unint64_t v87 = 0;
    while (!(*(uint64_t (**)(void))(**(void **)(v86 + 8 * v87) + 24))(*(void *)(v86 + 8 * v87)))
    {
      ++v87;
      uint64_t v86 = *((void *)v85 + 5);
      if (v87 >= (*((void *)v85 + 6) - v86) >> 3) {
        goto LABEL_140;
      }
    }
    uint64_t v95 = Espresso::espresso_os_log_subsystem(0, v88);
    if (os_log_type_enabled(v95, OS_LOG_TYPE_ERROR))
    {
      if (*(char *)(v73 + 23) >= 0) {
        uint64_t v96 = v73;
      }
      else {
        uint64_t v96 = *(void *)v73;
      }
      LODWORD(buf) = 136315138;
      *(void *)((char *)&buf + 4) = v96;
      _os_log_error_impl(&dword_1920CB000, v95, OS_LOG_TYPE_ERROR, "%s tensor has unknown max shape, so not adding it to FlexibleShapeInfo.", (uint8_t *)&buf, 0xCu);
    }
LABEL_111:
    uint64_t v68 = *(MIL::Builder::Variable **)v68;
    if (v68) {
      continue;
    }
    break;
  }
  uint64_t v111 = __p;
  uint64_t v35 = v259;
  uint64_t v33 = v254;
  if (__p)
  {
    do
    {
      uint64_t v112 = (void *)*v111;
      operator delete(v111);
      uint64_t v111 = v112;
    }
    while (v112);
  }
LABEL_170:
  BOOL v113 = v280;
  uint64_t v280 = 0;
  if (v113) {
    operator delete(v113);
  }
  if (*(void *)&v296[24]) {
    MIL::Attributes::FlexibleShapeInfo::SetRangeShapes();
  }
  uint64_t v114 = *(char **)&v296[16];
  if (*(void *)&v296[16])
  {
    do
    {
      uint64_t v117 = *(char **)v114;
      uint64_t v118 = (void *)*((void *)v114 + 5);
      if (v118)
      {
        *((void *)v114 + 6) = v118;
        operator delete(v118);
      }
      if (v114[39] < 0) {
        operator delete(*((void **)v114 + 2));
      }
      operator delete(v114);
      uint64_t v114 = v117;
    }
    while (v117);
  }
  __n128 v115 = *(void **)v296;
  *(void *)std::string v296 = 0;
  if (v115) {
    operator delete(v115);
  }
LABEL_177:
  if (!a8) {
    goto LABEL_230;
  }
  memset(v296, 0, sizeof(v296));
  int v297 = 1065353216;
  MIL::Builder::FunctionBuilder::GetInputs((uint64_t *)&v280, (MIL::Builder::FunctionBuilder *)v33[5]);
  uint64_t v116 = (MIL::Builder::Variable *)__p;
  if (!__p) {
    goto LABEL_223;
  }
  uint64_t v255 = v33;
  while (2)
  {
    uint64_t v119 = MIL::Builder::Variable::GetName(*((MIL::Builder::Variable **)v116 + 2));
    uint64_t v120 = *(uint64_t ***)(a6 + 8);
    if (!v120) {
      goto LABEL_185;
    }
    uint64_t v121 = v119;
    int v122 = *(char *)(v119 + 23);
    if (v122 >= 0) {
      size_t v123 = *(unsigned __int8 *)(v119 + 23);
    }
    else {
      size_t v123 = *(void *)(v119 + 8);
    }
    if (v122 >= 0) {
      uint64_t v124 = (const void *)v119;
    }
    else {
      uint64_t v124 = *(const void **)v119;
    }
    while (2)
    {
      int v125 = *((char *)v120 + 55);
      if (v125 >= 0) {
        size_t v126 = *((unsigned __int8 *)v120 + 55);
      }
      else {
        size_t v126 = (size_t)v120[5];
      }
      if (v125 >= 0) {
        unint64_t v127 = (uint64_t *)(v120 + 4);
      }
      else {
        unint64_t v127 = v120[4];
      }
      if (v126 >= v123) {
        size_t v128 = v123;
      }
      else {
        size_t v128 = v126;
      }
      int v129 = memcmp(v124, v127, v128);
      BOOL v130 = v123 < v126;
      if (v129) {
        BOOL v130 = v129 < 0;
      }
      if (v130)
      {
LABEL_194:
        uint64_t v120 = (uint64_t **)*v120;
        if (!v120) {
          goto LABEL_185;
        }
        continue;
      }
      break;
    }
    int v131 = memcmp(v127, v124, v128);
    BOOL v132 = v126 < v123;
    if (v131) {
      BOOL v132 = v131 < 0;
    }
    if (v132)
    {
      ++v120;
      goto LABEL_194;
    }
    *(void *)&long long buf = v121;
    long long v133 = std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a4, (unsigned __int8 *)v121, (uint64_t)&std::piecewise_construct, (long long **)&buf);
    uint64_t v134 = *((void *)v133 + 5);
    if (*((void *)v133 + 6) == v134)
    {
LABEL_214:
      *(void *)&long long buf = v121;
      uint64_t v137 = std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v296, (unsigned __int8 *)v121, (uint64_t)&std::piecewise_construct, (long long **)&buf);
      if (v137 != v133) {
        std::vector<MIL::IRDimension const*>::__assign_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(v137 + 40, *((char **)v133 + 5), *((void *)v133 + 6), (uint64_t)(*((void *)v133 + 6) - *((void *)v133 + 5)) >> 3);
      }
    }
    else
    {
      unint64_t v135 = 0;
      while (!(*(uint64_t (**)(void))(**(void **)(v134 + 8 * v135) + 24))(*(void *)(v134 + 8 * v135)))
      {
        ++v135;
        uint64_t v134 = *((void *)v133 + 5);
        if (v135 >= (*((void *)v133 + 6) - v134) >> 3) {
          goto LABEL_214;
        }
      }
      uint64_t v138 = Espresso::espresso_os_log_subsystem(0, v136);
      if (os_log_type_enabled(v138, OS_LOG_TYPE_ERROR))
      {
        if (*(char *)(v121 + 23) >= 0) {
          uint64_t v139 = v121;
        }
        else {
          uint64_t v139 = *(void *)v121;
        }
        LODWORD(buf) = 136315138;
        *(void *)((char *)&buf + 4) = v139;
        _os_log_error_impl(&dword_1920CB000, v138, OS_LOG_TYPE_ERROR, "%s tensor has unknown default shape, so not adding it to FlexibleShapeInfo.", (uint8_t *)&buf, 0xCu);
      }
    }
LABEL_185:
    uint64_t v116 = *(MIL::Builder::Variable **)v116;
    if (v116) {
      continue;
    }
    break;
  }
  __n128 v140 = __p;
  uint64_t v35 = v259;
  uint64_t v33 = v255;
  if (__p)
  {
    do
    {
      size_t v141 = (void *)*v140;
      operator delete(v140);
      __n128 v140 = v141;
    }
    while (v141);
  }
LABEL_223:
  uint64_t v142 = v280;
  uint64_t v280 = 0;
  if (v142) {
    operator delete(v142);
  }
  if (*(void *)&v296[24]) {
    MIL::Attributes::FlexibleShapeInfo::SetDefaultShapes();
  }
  uint64_t v143 = *(char **)&v296[16];
  if (*(void *)&v296[16])
  {
    do
    {
      long long v145 = *(char **)v143;
      long long v146 = (void *)*((void *)v143 + 5);
      if (v146)
      {
        *((void *)v143 + 6) = v146;
        operator delete(v146);
      }
      if (v143[39] < 0) {
        operator delete(*((void **)v143 + 2));
      }
      operator delete(v143);
      uint64_t v143 = v145;
    }
    while (v145);
  }
  int v144 = *(void **)v296;
  *(void *)std::string v296 = 0;
  if (v144) {
    operator delete(v144);
  }
LABEL_230:
  MIL::Builder::FunctionBuilder::CreateFunction((uint64_t *)&v284, (MIL::Builder::FunctionBuilder *)v33[5]);
  MIL::Attributes::FlexibleShapeInfo::Replace();
  *(_OWORD *)std::string v296 = *(_OWORD *)&v289.__r_.__value_.__l.__data_;
  if (v289.__r_.__value_.__l.__size_) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v289.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v280 = v284;
  if (v284) {
    operator new();
  }
  v281 = 0;
  unint64_t v284 = 0;
  MIL::Builder::FunctionBuilder::Make();
  *(void *)&long long buf = &v276;
  long long v147 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a5, (uint64_t)&v276, (uint64_t)&std::piecewise_construct, (long long **)&buf);
  if (v293) {
    operator new();
  }
  uint64_t v293 = 0;
  uint64_t v148 = (std::__shared_weak_count *)v147[6];
  v147[5] = 0;
  v147[6] = 0;
  if (v148 && !atomic_fetch_add(&v148->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
    std::__shared_weak_count::__release_weak(v148);
  }
  int v149 = v293;
  uint64_t v293 = 0;
  if (v149) {
    (*(void (**)(MIL::Builder::ProgramBuilder *))(*(void *)v149 + 8))(v149);
  }
  long long v150 = (std::__shared_weak_count *)v281;
  if (v281 && !atomic_fetch_add(v281 + 1, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
    std::__shared_weak_count::__release_weak(v150);
  }
  long long v151 = *(std::__shared_weak_count **)&v296[8];
  if (*(void *)&v296[8]
    && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&v296[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
    std::__shared_weak_count::__release_weak(v151);
  }
  int v152 = v284;
  unint64_t v284 = 0;
  if (v152) {
    (*(void (**)(void *))(*(void *)v152 + 8))(v152);
  }
  long long v153 = (std::__shared_weak_count *)v287;
  if (v287 && !atomic_fetch_add(v287 + 1, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
    std::__shared_weak_count::__release_weak(v153);
  }
  long long v154 = v283[0];
  v283[0] = 0;
  if (v154)
  {
    MIL::Attributes::FlexibleShapeInfo::~FlexibleShapeInfo(v154);
    MEMORY[0x192FF16B0]();
  }
  std::string::size_type size = (std::__shared_weak_count *)v289.__r_.__value_.__l.__size_;
  if (v289.__r_.__value_.__l.__size_
    && !atomic_fetch_add((atomic_ullong *volatile)(v289.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
    std::__shared_weak_count::__release_weak(size);
    if (a9) {
      goto LABEL_405;
    }
LABEL_262:
    std::string::size_type v267 = v278;
    int v268 = (std::__shared_weak_count *)v279;
    if (v279) {
      atomic_fetch_add_explicit(v279 + 1, 1uLL, memory_order_relaxed);
    }
    std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>::unordered_map((uint64_t)&v265, (uint64_t)v269);
    uint64_t v156 = (MIL::Transform::ProgramTransformer *)MEMORY[0x192FEFD50](v295, a3);
    MIL::Transform::ProgramTransformer::GetProgramBuilder((uint64_t *)&v293, v156);
    if (SHIBYTE(v277) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)v296, (const std::string::value_type *)v276, *((std::string::size_type *)&v276 + 1));
    }
    else
    {
      *(_OWORD *)std::string v296 = v276;
      *(void *)&v296[16] = v277;
    }
    v281 = 0;
    std::string __p = 0;
    uint64_t v280 = &v281;
    std::__tree<std::string>::__emplace_hint_unique_key_args<std::string,std::string const&>((uint64_t **)&v280, (uint64_t *)&v281, (const void **)v296, (uint64_t)v296);
    if ((v296[23] & 0x80000000) != 0) {
      operator delete(*(void **)v296);
    }
    MIL::Builder::ProgramBuilder::GetFunction();
    MIL::Builder::FunctionBuilder::SelectedSpecialization(v291);
    MIL::Builder::FunctionBuilder::GetBlock();
    MIL::Builder::BlockBuilder::GetOperations((uint64_t *)&v290, *(MIL::Builder::BlockBuilder **)v296);
    int v157 = *(std::__shared_weak_count **)&v296[8];
    if (!*(void *)&v296[8]
      || atomic_fetch_add((atomic_ullong *volatile)(*(void *)&v296[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      std::string::size_type v159 = v290.__r_.__value_.__l.__size_;
      long long v158 = (MIL::Builder::OperationBuilder **)v290.__r_.__value_.__r.__words[0];
      if (v290.__r_.__value_.__r.__words[0] != v290.__r_.__value_.__l.__size_) {
        goto LABEL_276;
      }
      goto LABEL_308;
    }
    ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
    std::__shared_weak_count::__release_weak(v157);
    std::string::size_type v159 = v290.__r_.__value_.__l.__size_;
    long long v158 = (MIL::Builder::OperationBuilder **)v290.__r_.__value_.__r.__words[0];
    if (v290.__r_.__value_.__r.__words[0] == v290.__r_.__value_.__l.__size_)
    {
LABEL_308:
      *((void *)&buf + 1) = 0;
      uint64_t v299 = 0;
      *(void *)&long long buf = (char *)&buf + 8;
      for (std::vector<int>::pointer i = *(const void ***)(MIL::Builder::ProgramBuilder::GetFunctions(v293) + 16); i; std::vector<int>::pointer i = (const void **)*i)
      {
        int v184 = v281;
        if (v281)
        {
          int v185 = *((char *)i + 39);
          size_t v186 = v185 >= 0 ? *((unsigned __int8 *)i + 39) : (size_t)i[3];
          long long v187 = v185 >= 0 ? (uint64_t *)(i + 2) : (uint64_t *)i[2];
          uint64_t v188 = &v281;
          do
          {
            uint64_t v189 = v184;
            std::string::size_type v190 = v188;
            uint64_t v192 = v184 + 4;
            std::string::size_type v191 = (atomic_ullong *)v184[4];
            int v193 = *((char *)v189 + 55);
            if (v193 >= 0) {
              size_t v194 = *((unsigned __int8 *)v189 + 55);
            }
            else {
              size_t v194 = v189[5];
            }
            if (v193 >= 0) {
              BOOL v195 = v192;
            }
            else {
              BOOL v195 = v191;
            }
            if (v186 >= v194) {
              size_t v196 = v194;
            }
            else {
              size_t v196 = v186;
            }
            int v197 = memcmp(v195, v187, v196);
            if (v197) {
              BOOL v198 = v197 < 0;
            }
            else {
              BOOL v198 = v194 < v186;
            }
            uint64_t v199 = (atomic_ullong **)(v189 + 1);
            if (v198)
            {
              uint64_t v188 = v190;
            }
            else
            {
              uint64_t v199 = (atomic_ullong **)v189;
              uint64_t v188 = (atomic_ullong **)v189;
            }
            int v184 = *v199;
          }
          while (v184);
          if (v188 != &v281)
          {
            uint64_t v200 = (atomic_ullong *)(v190 + 4);
            BOOL v201 = !v198;
            if (v198) {
              uint8x8_t v202 = v190;
            }
            else {
              uint8x8_t v202 = v189;
            }
            if (v201) {
              uint64_t v200 = v192;
            }
            size_t v203 = *((unsigned __int8 *)v188 + 55);
            uint64_t v205 = (atomic_ullong *)v202[4];
            size_t v204 = v202[5];
            if ((v203 & 0x80u) == 0) {
              size_t v206 = v203;
            }
            else {
              size_t v206 = v204;
            }
            if ((v203 & 0x80u) == 0) {
              unint64_t v207 = v200;
            }
            else {
              unint64_t v207 = v205;
            }
            if (v206 >= v186) {
              size_t v208 = v186;
            }
            else {
              size_t v208 = v206;
            }
            int v209 = memcmp(v187, v207, v208);
            BOOL v210 = v186 < v206;
            if (v209) {
              BOOL v210 = v209 < 0;
            }
            if (!v210) {
              continue;
            }
          }
        }
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&buf, i + 2, (uint64_t)(i + 2));
      }
      uint8x8_t v170 = (_OWORD *)buf;
      if ((long long *)buf != (long long *)((char *)&buf + 8))
      {
        do
        {
          MIL::Builder::ProgramBuilder::RemoveFunction();
          unint64_t v176 = (void *)*((void *)v170 + 1);
          if (v176)
          {
            do
            {
              int v177 = v176;
              unint64_t v176 = (void *)*v176;
            }
            while (v176);
          }
          else
          {
            do
            {
              int v177 = (_OWORD *)*((void *)v170 + 2);
              BOOL v201 = *(void *)v177 == (void)v170;
              uint8x8_t v170 = v177;
            }
            while (!v201);
          }
          uint8x8_t v170 = v177;
        }
        while (v177 != (long long *)((char *)&buf + 8));
      }
      MIL::Passes::PropagateInputTensorShapes();
      if ((MIL::Passes::TypeInferenceResult::IsGood((MIL::Passes::TypeInferenceResult *)v296) & 1) == 0)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        MIL::MILResult::GetMessage((MIL::MILResult *)v296);
        std::operator+<char>();
        std::runtime_error::runtime_error(exception, &v289);
        __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      MIL::Transform::ProgramTransformer::GetProgram(&v288, (MIL::Transform::ProgramTransformer *)v295);
      uint64_t v171 = MIL::IRProgram::GetFunction();
      (*(void (**)(std::string *__return_ptr))(*(void *)v171 + 160))(&v289);
      uint64_t v172 = (*(uint64_t (**)(uint64_t))(*(void *)v171 + 40))(v171);
      std::string::size_type v173 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v172 + 88))(v172);
      uint64_t v174 = *v173;
      if (v173[1] != *v173)
      {
        unint64_t v175 = 0;
        do
        {
          unint64_t v178 = (void *)(v174 + 24 * v175);
          long long v179 = (atomic_ullong *)v286;
          int v180 = v287;
          if (v286 == v287)
          {
LABEL_324:
            unint64_t v284 = v178;
            size_t v181 = std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a4, (unsigned __int8 *)v178, (uint64_t)&std::piecewise_construct, (long long **)&v284)+ 40;
            if (v181 != (char *)&v286) {
              std::vector<MIL::IRDimension const*>::__assign_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(v181, (char *)v286, (uint64_t)v287, ((char *)v287 - (unsigned char *)v286) >> 3);
            }
          }
          else
          {
            while (!(*(uint64_t (**)(void))(*(void *)*v179 + 24))())
            {
              if (++v179 == v180) {
                goto LABEL_324;
              }
            }
            uint64_t v182 = MIL::IRProgram::GetFunction();
            (*(void (**)(MIL::Attributes::FlexibleShapeInfo **__return_ptr))(*(void *)v182 + 160))(v283);
            if (v283[0])
            {
              v283[1] = v283[0];
              operator delete(v283[0]);
            }
            v283[0] = (MIL::Attributes::FlexibleShapeInfo *)v178;
            size_t v183 = std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a4, (unsigned __int8 *)v178, (uint64_t)&std::piecewise_construct, (long long **)v283)+ 40;
            if (v183 != (char *)&v284) {
              std::vector<MIL::IRDimension const*>::__assign_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(v183, (char *)v284, (uint64_t)v285, (v285 - (unsigned char *)v284) >> 3);
            }
            if (v284)
            {
              unint64_t v285 = v284;
              operator delete(v284);
            }
          }
          if (v286)
          {
            unint64_t v287 = (atomic_ullong *)v286;
            operator delete(v286);
          }
          ++v175;
          uint64_t v174 = *v173;
        }
        while (0xAAAAAAAAAAAAAAABLL * ((v173[1] - *v173) >> 3) > v175);
      }
      if (v289.__r_.__value_.__r.__words[0])
      {
        v289.__r_.__value_.__l.__size_ = v289.__r_.__value_.__r.__words[0];
        operator delete(v289.__r_.__value_.__l.__data_);
      }
      uint64_t v211 = v288;
      uint64_t v288 = 0;
      uint64_t v35 = v259;
      if (v211) {
        (*(void (**)(uint64_t))(*(void *)v211 + 8))(v211);
      }
      MEMORY[0x192FEF710](v296);
      std::__tree<std::string>::destroy((uint64_t)&buf, *((char **)&buf + 1));
      std::string::size_type v212 = v290.__r_.__value_.__r.__words[0];
      if (v290.__r_.__value_.__r.__words[0])
      {
        std::string::size_type v213 = v290.__r_.__value_.__l.__size_;
        long long v214 = (void *)v290.__r_.__value_.__r.__words[0];
        if (v290.__r_.__value_.__l.__size_ != v290.__r_.__value_.__r.__words[0])
        {
          do
          {
            uint64_t v215 = *(std::__shared_weak_count **)(v213 - 8);
            if (v215 && !atomic_fetch_add(&v215->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v215->__on_zero_shared)(v215);
              std::__shared_weak_count::__release_weak(v215);
            }
            v213 -= 16;
          }
          while (v213 != v212);
          long long v214 = (void *)v290.__r_.__value_.__r.__words[0];
        }
        v290.__r_.__value_.__l.__size_ = v212;
        operator delete(v214);
      }
      int v216 = v292;
      if (v292 && !atomic_fetch_add(&v292->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v216->__on_zero_shared)(v216);
        std::__shared_weak_count::__release_weak(v216);
      }
      std::__tree<std::string>::destroy((uint64_t)&v280, (char *)v281);
      std::string::size_type v217 = v294;
      if (v294 && !atomic_fetch_add(&v294->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v217->__on_zero_shared)(v217);
        std::__shared_weak_count::__release_weak(v217);
      }
      MIL::Transform::ProgramTransformer::~ProgramTransformer((MIL::Transform::ProgramTransformer *)v295);
      int v218 = (char *)v266;
      if (v266)
      {
        do
        {
          uint64_t v239 = *(char **)v218;
          long long v240 = (void *)*((void *)v218 + 5);
          if (v240)
          {
            *((void *)v218 + 6) = v240;
            operator delete(v240);
          }
          if (v218[39] < 0) {
            operator delete(*((void **)v218 + 2));
          }
          operator delete(v218);
          int v218 = v239;
        }
        while (v239);
      }
      size_t v219 = v265;
      char v265 = 0;
      if (v219) {
        operator delete(v219);
      }
      BOOL v220 = v268;
      if (v268 && !atomic_fetch_add(&v268->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v220->__on_zero_shared)(v220);
        std::__shared_weak_count::__release_weak(v220);
      }
      goto LABEL_405;
    }
    while (1)
    {
LABEL_276:
      uint64_t Operator = MIL::Builder::OperationBuilder::GetOperator(*v158);
      if (!(*(unsigned int (**)(uint64_t))(*(void *)Operator + 128))(Operator)) {
        goto LABEL_275;
      }
      v296[23] = 8;
      strcpy(v296, "function");
      MIL::Builder::OperationBuilder::TryGetAttribute();
      long long v161 = buf;
      if (*((void *)&buf + 1)
        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&buf + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        (*(void (**)(void))(**((void **)&v161 + 1) + 16))(*((void *)&v161 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v161 + 1));
        if ((v296[23] & 0x80000000) == 0)
        {
LABEL_280:
          if ((void)v161) {
            goto LABEL_284;
          }
          goto LABEL_275;
        }
      }
      else if ((v296[23] & 0x80000000) == 0)
      {
        goto LABEL_280;
      }
      operator delete(*(void **)v296);
      if ((void)v161)
      {
LABEL_284:
        HIBYTE(v299) = 8;
        strcpy((char *)&buf, "function");
        MIL::Builder::OperationBuilder::TryGetAttribute();
        MIL::IRValue::AsTensor((MIL::IRValue *)v289.__r_.__value_.__l.__data_);
        MIL::IRValue::GetScalar<std::string>();
        uint64_t v162 = (std::__shared_weak_count *)v289.__r_.__value_.__l.__size_;
        if (v289.__r_.__value_.__l.__size_
          && !atomic_fetch_add((atomic_ullong *volatile)(v289.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
          std::__shared_weak_count::__release_weak(v162);
          if (SHIBYTE(v299) < 0) {
LABEL_287:
          }
            operator delete((void *)buf);
        }
        else if (SHIBYTE(v299) < 0)
        {
          goto LABEL_287;
        }
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&v280, (const void **)v296, (uint64_t)v296);
        if ((v296[23] & 0x80000000) != 0) {
          operator delete(*(void **)v296);
        }
      }
LABEL_275:
      v158 += 2;
      if (v158 == (MIL::Builder::OperationBuilder **)v159) {
        goto LABEL_308;
      }
    }
  }
  if ((a9 & 1) == 0) {
    goto LABEL_262;
  }
LABEL_405:
  memset(v296, 0, 24);
  uint64_t v221 = (*(uint64_t (**)(void))(*(void *)*v35 + 176))();
  uint64_t v222 = *(MIL::IRNamedValueType ***)v221;
  std::string v223 = *(MIL::IRNamedValueType ***)(v221 + 8);
  if (*(MIL::IRNamedValueType ***)v221 != v223)
  {
    while (2)
    {
      uint64_t v224 = (const void **)MIL::IRNamedValueType::GetName(*v222);
      if (v260) {
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)a6, v224, (uint64_t)v224);
      }
      uint64_t v225 = (unsigned __int8 *)MIL::IRNamedValueType::GetName(*v222);
      int64_t v226 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>(a4, v225);
      if (!v226) {
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      }
      uint64_t v280 = 0;
      v281 = 0;
      std::string __p = 0;
      unint64_t v228 = (unsigned char *)*((void *)v226 + 5);
      int64_t v227 = (unsigned char *)*((void *)v226 + 6);
      int64_t v229 = v227 - v228;
      if (v227 != v228)
      {
        if (v229 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v280 = operator new(v227 - v228);
        v281 = (atomic_ullong *)v280;
        unint64_t v230 = (char *)v280 + 8 * (v229 >> 3);
        std::string __p = v230;
        memcpy(v280, v228, v229);
        v281 = (atomic_ullong *)v230;
      }
      uint64_t v231 = MIL::IRNamedValueType::GetName(*v222);
      if (*(char *)(v231 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v264, *(const std::string::value_type **)v231, *(void *)(v231 + 8));
      }
      else
      {
        long long v232 = *(_OWORD *)v231;
        v264.__r_.__value_.__r.__words[2] = *(void *)(v231 + 16);
        *(_OWORD *)&v264.__r_.__value_.__l.__data_ = v232;
      }
      uint64_t Type = (MIL::IRValueType *)MIL::IRNamedValueType::GetType(*v222);
      long long v234 = (std::__shared_weak_count *)v279;
      v263[0] = v278;
      v263[1] = (MIL::IRUnknownProperty *)v279;
      if (v279) {
        atomic_fetch_add_explicit(v279 + 1, 1uLL, memory_order_relaxed);
      }
      MIL::IRNamedValueType::Make();
      if (v234 && !atomic_fetch_add(&v234->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v234->__on_zero_shared)(v234);
        std::__shared_weak_count::__release_weak(v234);
        if ((SHIBYTE(v264.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_422;
        }
      }
      else if ((SHIBYTE(v264.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_422:
        v290.__r_.__value_.__r.__words[0] = buf;
        if ((void)buf) {
          goto LABEL_423;
        }
        goto LABEL_428;
      }
      operator delete(v264.__r_.__value_.__l.__data_);
      v290.__r_.__value_.__r.__words[0] = buf;
      if ((void)buf) {
LABEL_423:
      }
        operator new();
LABEL_428:
      v290.__r_.__value_.__l.__size_ = 0;
      *(void *)&long long buf = 0;
      uint64_t v236 = *(void *)&v296[8];
      if (*(void *)&v296[8] < *(void *)&v296[16])
      {
        **(void **)&v296[8] = v290.__r_.__value_.__r.__words[0];
        *(void *)(v236 + 8) = 0;
        *(void *)&v296[8] = v236 + 16;
        uint64_t v235 = (MIL::IRNamedValueType *)buf;
        *(void *)&long long buf = 0;
        if (v235) {
          goto LABEL_432;
        }
      }
      else
      {
        uint64_t v237 = std::vector<std::shared_ptr<E5RT::ExecutionStreamOperationInternal>>::__push_back_slow_path<std::shared_ptr<E5RT::ExecutionStreamOperationInternal>>((char **)v296, (uint64_t)&v290);
        std::string::size_type v238 = (std::__shared_weak_count *)v290.__r_.__value_.__l.__size_;
        *(void *)&v296[8] = v237;
        if (v290.__r_.__value_.__l.__size_
          && !atomic_fetch_add((atomic_ullong *volatile)(v290.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v238->__on_zero_shared)(v238);
          std::__shared_weak_count::__release_weak(v238);
          uint64_t v235 = (MIL::IRNamedValueType *)buf;
          *(void *)&long long buf = 0;
          if (v235)
          {
LABEL_432:
            MIL::IRNamedValueType::~IRNamedValueType(v235);
            MEMORY[0x192FF16B0]();
          }
        }
        else
        {
          uint64_t v235 = (MIL::IRNamedValueType *)buf;
          *(void *)&long long buf = 0;
          if (v235) {
            goto LABEL_432;
          }
        }
      }
      if (v280)
      {
        v281 = (atomic_ullong *)v280;
        operator delete(v280);
      }
      v222 += 2;
      if (v222 == v223) {
        break;
      }
      continue;
    }
  }
  (*(void (**)(void, unsigned char *))(*(void *)*v259 + 184))(*v259, v296);
  uint64_t v241 = *v259;
  *uint64_t v259 = 0;
  *uint64_t v252 = v241;
  uint64_t v242 = *(void *)v296;
  if (*(void *)v296)
  {
    uint64_t v243 = *(void *)&v296[8];
    long long v244 = *(void **)v296;
    if (*(void *)&v296[8] != *(void *)v296)
    {
      do
      {
        std::string::size_type v245 = *(std::__shared_weak_count **)(v243 - 8);
        if (v245 && !atomic_fetch_add(&v245->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v245->__on_zero_shared)(v245);
          std::__shared_weak_count::__release_weak(v245);
        }
        v243 -= 16;
      }
      while (v243 != v242);
      long long v244 = *(void **)v296;
    }
    *(void *)&v296[8] = v242;
    operator delete(v244);
  }
  std::string::size_type v246 = (char *)v270[0];
  if (v270[0])
  {
    do
    {
      uint64_t v249 = *(char **)v246;
      unint64_t v250 = (void *)*((void *)v246 + 5);
      if (v250)
      {
        *((void *)v246 + 6) = v250;
        operator delete(v250);
      }
      if (v246[39] < 0) {
        operator delete(*((void **)v246 + 2));
      }
      operator delete(v246);
      std::string::size_type v246 = v249;
    }
    while (v249);
  }
  uint64_t v247 = v269[0];
  v269[0] = 0;
  if (v247) {
    operator delete(v247);
  }
  if (SHIBYTE(v277) < 0) {
    operator delete((void *)v276);
  }
  unint64_t v248 = (std::__shared_weak_count *)v279;
  if (v279)
  {
    if (!atomic_fetch_add(v279 + 1, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v248->__on_zero_shared)(v248);
      std::__shared_weak_count::__release_weak(v248);
    }
  }
}

void sub_1922A95F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47,char a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,uint64_t a63)
{
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&a50);
  std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>::~unordered_map[abi:ne180100](v65 - 192);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a61);
  std::unique_ptr<MIL::Attributes::FlexibleShapeInfo>::~unique_ptr[abi:ne180100]((MIL::Attributes::FlexibleShapeInfo **)&a55);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a65);
  std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>::~unordered_map[abi:ne180100]((uint64_t)&a33);
  if (a47 < 0) {
    operator delete(__p);
  }
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a48);
  _Unwind_Resume(a1);
}

char *std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  unint64_t v8 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v4 = v8;
      if (v8 >= v10) {
        unint64_t v4 = v8 % v10;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v8;
    }
    uint64_t v13 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v13)
    {
      uint64_t v14 = (char *)*v13;
      if (*v13)
      {
        do
        {
          unint64_t v15 = *((void *)v14 + 1);
          if (v15 == v9)
          {
            if (std::equal_to<std::string>::operator()[abi:ne180100]((unsigned __int8 *)v14 + 16, a2)) {
              return v14;
            }
          }
          else
          {
            if (v12 > 1)
            {
              if (v15 >= v10) {
                v15 %= v10;
              }
            }
            else
            {
              v15 &= v10 - 1;
            }
            if (v15 != v4) {
              break;
            }
          }
          uint64_t v14 = *(char **)v14;
        }
        while (v14);
      }
    }
  }
  uint64_t v16 = (void *)(a1 + 16);
  uint64_t v14 = (char *)operator new(0x40uLL);
  v30[0] = v14;
  v30[1] = a1 + 16;
  char v31 = 0;
  *(void *)uint64_t v14 = 0;
  *((void *)v14 + 1) = v9;
  uint64_t v17 = (std::string *)(v14 + 16);
  uint64_t v18 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v17, *(const std::string::value_type **)v18, *((void *)v18 + 1));
  }
  else
  {
    long long v19 = *v18;
    *((void *)v14 + 4) = *((void *)v18 + 2);
    *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v19;
  }
  *((void *)v14 + 5) = 0;
  *((void *)v14 + 6) = 0;
  *((void *)v14 + 7) = 0;
  char v31 = 1;
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v21 = *(float *)(a1 + 32);
  if (!v10 || (float)(v21 * (float)v10) < v20)
  {
    BOOL v22 = 1;
    if (v10 >= 3) {
      BOOL v22 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v23 = v22 | (2 * v10);
    unint64_t v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24) {
      size_t v25 = v24;
    }
    else {
      size_t v25 = v23;
    }
    std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__rehash<true>(a1, v25);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
      else {
        unint64_t v4 = v9;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v9;
    }
  }
  uint64_t v26 = *(void *)a1;
  int v27 = *(void **)(*(void *)a1 + 8 * v4);
  if (v27)
  {
    *(void *)uint64_t v14 = *v27;
LABEL_41:
    void *v27 = v14;
    goto LABEL_42;
  }
  *(void *)uint64_t v14 = *v16;
  void *v16 = v14;
  *(void *)(v26 + 8 * v4) = v16;
  if (*(void *)v14)
  {
    unint64_t v28 = *(void *)(*(void *)v14 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v28 >= v10) {
        v28 %= v10;
      }
    }
    else
    {
      v28 &= v10 - 1;
    }
    int v27 = (void *)(*(void *)a1 + 8 * v28);
    goto LABEL_41;
  }
LABEL_42:
  v30[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<unsigned long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<unsigned long>>,void *>>>>::reset[abi:ne180100]((uint64_t)v30);
  return v14;
}

void sub_1922A9DA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<unsigned long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<unsigned long>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

const void **anonymous namespace'::PropagateShapesAndUpdateTensorToShape(std::shared_ptr<MIL::MILContext>,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>&,MIL::IRProgram const&,std::string const&)::$_0::operator()(void *a1, MIL::IRValueType *a2)
{
  if (E5Common::Utils::IsTensor((uint64_t)a2))
  {
    uint64_t v5 = MIL::IRValueType::AsTensorType(a2);
    double result = (const void **)(*(uint64_t (**)(uint64_t))(*(void *)v5 + 96))(v5);
    a1[1] = 0;
    a1[2] = 0;
    *a1 = 0;
    unint64_t v8 = *result;
    uint64_t v7 = result[1];
    int64_t v9 = v7 - (unsigned char *)*result;
    if (v7 == *result) {
      return result;
    }
    if (v9 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    goto LABEL_12;
  }
  if (E5Common::Utils::IsTensorBuffer(a2, v4))
  {
    uint8x8_t v11 = (MIL::IRMemoryLayoutValueType *)MIL::IRValueType::AsMemoryLayoutType(a2);
    unint64_t v12 = (MIL::IRTensorBufferValueType *)MIL::IRMemoryLayoutValueType::AsTensorBufferType(v11);
    double result = (const void **)MIL::IRTensorBufferValueType::GetShape(v12);
    a1[1] = 0;
    a1[2] = 0;
    *a1 = 0;
    unint64_t v8 = *result;
    uint64_t v7 = result[1];
    int64_t v9 = v7 - (unsigned char *)*result;
    if (v7 == *result) {
      return result;
    }
    if (v9 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    goto LABEL_12;
  }
  if (!E5Common::Utils::IsPixelBuffer(a2, v10))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "PropagateShapesAndUpdateTensorNameToShapeMap: Unsupported type for getShape.");
    __cxa_throw(exception, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
  }
  uint64_t v13 = (MIL::IRMemoryLayoutValueType *)MIL::IRValueType::AsMemoryLayoutType(a2);
  uint64_t v14 = (MIL::IRPixelBufferValueType *)MIL::IRMemoryLayoutValueType::AsPixelBufferType(v13);
  double result = (const void **)MIL::IRPixelBufferValueType::GetShape(v14);
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  unint64_t v8 = *result;
  uint64_t v7 = result[1];
  int64_t v9 = v7 - (unsigned char *)*result;
  if (v7 != *result)
  {
    if (v9 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
LABEL_12:
    unint64_t v15 = (char *)operator new(v7 - (unsigned char *)*result);
    *a1 = v15;
    a1[1] = v15;
    uint64_t v16 = &v15[8 * (v9 >> 3)];
    a1[2] = v16;
    double result = (const void **)memcpy(v15, v8, v9);
    a1[1] = v16;
  }
  return result;
}

void sub_1922A9F38(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1922A9F4C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<std::pair<int,int>>::__assign_with_size[abi:ne180100]<std::pair<int,int>*,std::pair<int,int>*>(uint64_t a1, char *a2, char *a3, size_t __sz)
{
  uint64_t v8 = *(void *)(a1 + 16);
  int64_t v9 = *(void **)a1;
  double result = v9;
  if (__sz <= (v8 - (uint64_t)v9) >> 3)
  {
    uint64_t v18 = *(void **)(a1 + 8);
    uint64_t v17 = (void *)(a1 + 8);
    uint64_t v14 = v18;
    int64_t v19 = (char *)v18 - (char *)v9;
    unint64_t v20 = v18 - v9;
    if (v20 < __sz)
    {
      float v21 = &a2[8 * v20];
      if (v14 == v9) {
        goto LABEL_18;
      }
      if ((unint64_t)(v19 - 8) >= 0x78)
      {
        uint64_t v38 = (char *)v9 + (v19 & 0xFFFFFFFFFFFFFFF8);
        unint64_t v39 = (unint64_t)(v38 - 4);
        unint64_t v40 = (unint64_t)&a2[v19 & 0xFFFFFFFFFFFFFFF8];
        unint64_t v41 = v40 - 4;
        char v42 = a2 + 4;
        BOOL v43 = (unint64_t)v9 + 4 >= v40 || v42 >= v38;
        char v44 = !v43;
        BOOL v22 = a2;
        if ((v39 <= (unint64_t)a2 || (unint64_t)v9 >= v41) && (v44 & 1) == 0)
        {
          unint64_t v46 = ((unint64_t)(v19 - 8) >> 3) + 1;
          uint64_t v47 = v46 & 0x3FFFFFFFFFFFFFF8;
          double result = &v9[v47];
          BOOL v22 = &a2[v47 * 8];
          uint64_t v48 = (long long *)(a2 + 32);
          uint64_t v49 = v9 + 4;
          uint64_t v50 = v46 & 0x3FFFFFFFFFFFFFF8;
          do
          {
            long long v52 = *(v48 - 2);
            long long v51 = *(v48 - 1);
            long long v54 = *v48;
            long long v53 = v48[1];
            v48 += 4;
            *(v49 - 2) = v52;
            *(v49 - 1) = v51;
            _OWORD *v49 = v54;
            v49[1] = v53;
            v49 += 4;
            v50 -= 8;
          }
          while (v50);
          if (v46 == (v46 & 0x3FFFFFFFFFFFFFF8))
          {
LABEL_18:
            if (v21 == a3)
            {
              int64_t v16 = 0;
              goto LABEL_68;
            }
            unint64_t v24 = &a2[v19];
            unint64_t v25 = a3 - &a2[v19] - 8;
            if (v25 < 0x38)
            {
              int v27 = (char *)v14;
            }
            else
            {
              unint64_t v26 = (char *)v14 - v24;
              int v27 = (char *)v14;
              if (v26 >= 0x20)
              {
                uint64_t v28 = (v25 >> 3) + 1;
                uint64_t v29 = v28 & 0x3FFFFFFFFFFFFFFCLL;
                v21 += v29 * 8;
                int v27 = (char *)&v14[v29];
                BOOL v30 = v14 + 2;
                char v31 = &a2[8 * v20 + 16];
                uint64_t v32 = v28 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  long long v33 = *(_OWORD *)v31;
                  *(v30 - 1) = *((_OWORD *)v31 - 1);
                  *BOOL v30 = v33;
                  v30 += 2;
                  v31 += 32;
                  v32 -= 4;
                }
                while (v32);
                if (v28 == (v28 & 0x3FFFFFFFFFFFFFFCLL)) {
                  goto LABEL_67;
                }
              }
            }
            do
            {
              uint64_t v72 = *(void *)v21;
              v21 += 8;
              *(void *)int v27 = v72;
              v27 += 8;
            }
            while (v21 != a3);
LABEL_67:
            int64_t v16 = v27 - (char *)v14;
            goto LABEL_68;
          }
        }
      }
      else
      {
        BOOL v22 = a2;
      }
      do
      {
        uint64_t v23 = *(void *)v22;
        v22 += 8;
        *result++ = v23;
      }
      while (v22 != v21);
      goto LABEL_18;
    }
    if (a2 == a3)
    {
      uint64_t v35 = (char *)v9;
    }
    else
    {
      unint64_t v34 = a3 - a2 - 8;
      if (v34 < 0x78) {
        goto LABEL_27;
      }
      uint64_t v55 = (char *)v9 + (v34 & 0xFFFFFFFFFFFFFFF8);
      unint64_t v56 = (unint64_t)(v55 + 4);
      int v57 = &a2[v34 & 0xFFFFFFFFFFFFFFF8];
      unint64_t v58 = (unint64_t)(v57 + 4);
      unint64_t v59 = (unint64_t)(v55 + 8);
      BOOL v60 = (void *)((char *)v9 + 4) >= (void *)v57 + 1 || (unint64_t)(a2 + 4) >= v59;
      BOOL v61 = !v60;
      BOOL v62 = v56 <= (unint64_t)a2 || (unint64_t)v9 >= v58;
      if (!v62 || v61)
      {
LABEL_27:
        uint64_t v35 = (char *)v9;
        uint64_t v36 = a2;
      }
      else
      {
        uint64_t v63 = (v34 >> 3) + 1;
        uint64_t v64 = v63 & 0x3FFFFFFFFFFFFFF8;
        uint64_t v35 = (char *)&v9[v64];
        uint64_t v36 = &a2[v64 * 8];
        uint64_t v65 = (long long *)(a2 + 32);
        int v66 = v9 + 4;
        uint64_t v67 = v63 & 0x3FFFFFFFFFFFFFF8;
        do
        {
          long long v69 = *(v65 - 2);
          long long v68 = *(v65 - 1);
          long long v71 = *v65;
          long long v70 = v65[1];
          v65 += 4;
          *(v66 - 2) = v69;
          *(v66 - 1) = v68;
          _OWORD *v66 = v71;
          v66[1] = v70;
          v66 += 4;
          v67 -= 8;
        }
        while (v67);
        if (v63 == (v63 & 0x3FFFFFFFFFFFFFF8)) {
          goto LABEL_32;
        }
      }
      do
      {
        uint64_t v37 = *(void *)v36;
        v36 += 8;
        *(void *)uint64_t v35 = v37;
        v35 += 8;
      }
      while (v36 != a3);
    }
LABEL_32:
    int64_t v16 = v35 - (char *)v9;
    uint64_t v14 = v9;
    goto LABEL_68;
  }
  if (v9)
  {
    *(void *)(a1 + 8) = v9;
    operator delete(v9);
    uint64_t v8 = 0;
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
  }
  if (__sz >> 61) {
    goto LABEL_69;
  }
  uint64_t v11 = v8 >> 2;
  if (v8 >> 2 <= __sz) {
    uint64_t v11 = __sz;
  }
  BOOL v43 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8;
  unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
  if (!v43) {
    unint64_t v12 = v11;
  }
  if (v12 >> 61) {
LABEL_69:
  }
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  uint64_t v13 = v12;
  double result = operator new(8 * v12);
  uint64_t v14 = result;
  *(void *)a1 = result;
  *(void *)(a1 + 8) = result;
  *(void *)(a1 + 16) = &result[v13];
  unint64_t v15 = (char *)result;
  if (a2 != a3)
  {
    double result = memcpy(result, a2, ((a3 - a2 - 8) & 0xFFFFFFFFFFFFFFF8) + 8);
    unint64_t v15 = (char *)v14 + ((a3 - a2 - 8) & 0xFFFFFFFFFFFFFFF8) + 8;
  }
  int64_t v16 = v15 - (char *)v14;
  uint64_t v17 = (void *)(a1 + 8);
LABEL_68:
  *uint64_t v17 = (char *)v14 + v16;
  return result;
}

uint64_t e5rt_program_library_get_function_names(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = operator new(0x20uLL);
  *uint64_t v6 = &unk_1EE3947D0;
  v6[1] = a1;
  v6[2] = a3;
  v6[3] = a2;
  unint64_t v10 = v6;
  uint64_t v7 = E5RT::ExceptionSafeExecute((uint64_t)v9);
  if (v10 == v9)
  {
    (*(void (**)(void *))(v9[0] + 32))(v9);
  }
  else if (v10)
  {
    (*(void (**)(void))(*v10 + 40))();
  }
  return v7;
}

void sub_1922AA3AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_program_library_get_function_metadata(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = operator new(0x20uLL);
  *uint64_t v6 = &unk_1EE394850;
  v6[1] = a1;
  v6[2] = a2;
  v6[3] = a3;
  unint64_t v10 = v6;
  uint64_t v7 = E5RT::ExceptionSafeExecute((uint64_t)v9);
  if (v10 == v9)
  {
    (*(void (**)(void *))(v9[0] + 32))(v9);
  }
  else if (v10)
  {
    (*(void (**)(void))(*v10 + 40))();
  }
  return v7;
}

void sub_1922AA4C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_execution_stream_operation_get_output_names(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = operator new(0x20uLL);
  *uint64_t v6 = &unk_1EE392298;
  v6[1] = a1;
  v6[2] = a2;
  v6[3] = a3;
  unint64_t v10 = v6;
  uint64_t v7 = E5RT::ExceptionSafeExecute((uint64_t)v9);
  if (v10 == v9)
  {
    (*(void (**)(void *))(v9[0] + 32))(v9);
  }
  else if (v10)
  {
    (*(void (**)(void))(*v10 + 40))();
  }
  return v7;
}

void sub_1922AA5E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_execution_stream_operation_get_input_names(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = operator new(0x20uLL);
  *uint64_t v6 = &unk_1EE392118;
  v6[1] = a1;
  v6[2] = a2;
  v6[3] = a3;
  unint64_t v10 = v6;
  uint64_t v7 = E5RT::ExceptionSafeExecute((uint64_t)v9);
  if (v10 == v9)
  {
    (*(void (**)(void *))(v9[0] + 32))(v9);
  }
  else if (v10)
  {
    (*(void (**)(void))(*v10 + 40))();
  }
  return v7;
}

void sub_1922AA700(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

void nitro::ndarray<int>::pairwise_element_visitor<int,nitro::ndarray<int>::canonicalize(void)::{lambda(int &,int const&)#1}>(nitro::ndarray<int> const&,nitro::ndarray<int>::canonicalize(void)::{lambda(int &,int const&)#1})::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  unint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  unint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  uint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    uint64_t v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      int64_t v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        unint64_t v10 = __p;
      }
      else {
        unint64_t v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  void nitro::ndarray<int>::pairwise_element_visitor<int,nitro::ndarray<int>::canonicalize(void)::{lambda(int &,int const&)#1}>(nitro::ndarray<int> const&,nitro::ndarray<int>::canonicalize(void)::{lambda(int &,int const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1922AA9A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void *global_logger(void)
{
  {
    file_logger::file_logger((file_logger *)&global_logger(void)::l);
    __cxa_atexit((void (*)(void *))file_logger::~file_logger, &global_logger(void)::l, &dword_1920CB000);
  }
  return &global_logger(void)::l;
}

void sub_1922AAA64(_Unwind_Exception *a1)
{
}

void Espresso::MPSEngine::pool_kernel::recreate_kernel(Espresso::MPSEngine::pool_kernel *this)
{
  uint64_t v2 = (void *)*((void *)this + 54);
  if (v2
    && [v2 kernelWidth] == *((_DWORD *)this + 77)
    && [*((id *)this + 54) kernelHeight] == *((_DWORD *)this + 78))
  {
    return;
  }
  unint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    id v23 = v3[18];
    nitro::nitro_function::nitro_function(v4);
  }
  else
  {
    id v23 = v3[18];
  }
  int v5 = *((_DWORD *)this + 76);
  if (v5 == 2)
  {
    id v6 = objc_alloc(MEMORY[0x1E4F354E0]);
    uint64_t v7 = *((int *)this + 77);
    uint64_t v8 = *((int *)this + 78);
    int v15 = *((_DWORD *)this + 80);
    if (v15 <= 1) {
      uint64_t v10 = 1;
    }
    else {
      uint64_t v10 = v15;
    }
    int v16 = *((_DWORD *)this + 81);
    if (v16 <= 1) {
      uint64_t v12 = 1;
    }
    else {
      uint64_t v12 = v16;
    }
  }
  else if (v5 == 1)
  {
    id v6 = objc_alloc(MEMORY[0x1E4F354F0]);
    uint64_t v7 = *((int *)this + 77);
    uint64_t v8 = *((int *)this + 78);
    int v13 = *((_DWORD *)this + 80);
    if (v13 <= 1) {
      uint64_t v10 = 1;
    }
    else {
      uint64_t v10 = v13;
    }
    int v14 = *((_DWORD *)this + 81);
    if (v14 <= 1) {
      uint64_t v12 = 1;
    }
    else {
      uint64_t v12 = v14;
    }
  }
  else
  {
    if (v5)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Invalid value");
LABEL_38:
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    id v6 = objc_alloc(MEMORY[0x1E4F354D0]);
    uint64_t v7 = *((int *)this + 77);
    uint64_t v8 = *((int *)this + 78);
    int v9 = *((_DWORD *)this + 80);
    if (v9 <= 1) {
      uint64_t v10 = 1;
    }
    else {
      uint64_t v10 = v9;
    }
    int v11 = *((_DWORD *)this + 81);
    if (v11 <= 1) {
      uint64_t v12 = 1;
    }
    else {
      uint64_t v12 = v11;
    }
  }
  uint64_t v17 = [v6 initWithDevice:v23 kernelWidth:v7 kernelHeight:v8 strideInPixelsX:v10 strideInPixelsY:v12];
  uint64_t v18 = (void *)*((void *)this + 54);
  *((void *)this + 54) = v17;

  int64_t v19 = (void *)*((void *)this + 54);
  if (!v19)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Error creating mps kernel");
    goto LABEL_38;
  }
  if (*(unsigned char *)(*((void *)this + 1) + 64))
  {
    unint64_t v20 = (void *)((char *)this + 176);
    if (*((char *)this + 199) < 0) {
      unint64_t v20 = (void *)*v20;
    }
    float v21 = [NSString stringWithUTF8String:v20];
    [*((id *)this + 54) setLabel:v21];

    int64_t v19 = (void *)*((void *)this + 54);
  }
  [v19 setEdgeMode:1];
}

void sub_1922AACE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  __cxa_free_exception(v10);

  _Unwind_Resume(a1);
}

void nitro::ndarray<int>::canonicalize(void)const::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  unint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  unint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"is_valid()", 10);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  int v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    id v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 555, 1);
    std::stringbuf::str();
    uint64_t v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      int v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        uint64_t v10 = __p;
      }
      else {
        uint64_t v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  nitro::ndarray<int>::canonicalize(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1922AAFB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::ndarray<unsigned char>::pairwise_element_visitor<unsigned char,nitro::ndarray<unsigned char>::canonicalize(void)::{lambda(unsigned char &,unsigned char const&)#1}>(nitro::ndarray<unsigned char> const&,nitro::ndarray<unsigned char>::canonicalize(void)::{lambda(unsigned char &,unsigned char const&)#1})::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  unint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  unint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  int v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    id v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    uint64_t v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      int v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        uint64_t v10 = __p;
      }
      else {
        uint64_t v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  void nitro::ndarray<unsigned char>::pairwise_element_visitor<unsigned char,nitro::ndarray<unsigned char>::canonicalize(void)::{lambda(unsigned char &,unsigned char const&)#1}>(nitro::ndarray<unsigned char> const&,nitro::ndarray<unsigned char>::canonicalize(void)::{lambda(unsigned char &,unsigned char const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1922AB27C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

size_t __print_back_trace(void)
{
  size_t result = MEMORY[0x1F4188790]();
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if ((write_error & 1) == 0)
  {
    memset(v17, 0, 512);
    snprintf(__str, 0x400uLL, "backtrace.%d", backtrace_file_number);
    if (write_count) {
      uint64_t v1 = "a";
    }
    else {
      uint64_t v1 = "w";
    }
    uint64_t v2 = fopen(__str, v1);
    if (v2)
    {
      ++write_count;
      int v3 = backtrace((void **)v17, 1024);
      unint64_t v4 = backtrace_symbols((void *const *)v17, v3);
      uint64_t v5 = v3;
      fwrite("Pointers\n", 9uLL, 1uLL, v2);
      fwrite("------------\n", 0xDuLL, 1uLL, v2);
      if (v3)
      {
        id v6 = (const void **)v17;
        uint64_t v7 = v3;
        do
        {
          uint64_t v8 = *v6++;
          fprintf(v2, "%p\n", v8);
          --v7;
        }
        while (v7);
        fwrite("Raw\n", 4uLL, 1uLL, v2);
        fwrite("------------\n", 0xDuLL, 1uLL, v2);
        int v9 = (const char **)v4;
        uint64_t v10 = v3;
        do
        {
          uint64_t v11 = *v9++;
          fprintf(v2, "%s\n", v11);
          --v10;
        }
        while (v10);
      }
      else
      {
        fwrite("Raw\n", 4uLL, 1uLL, v2);
        fwrite("------------\n", 0xDuLL, 1uLL, v2);
      }
      fwrite("\nDemangled\n", 0xBuLL, 1uLL, v2);
      fwrite("------------\n", 0xDuLL, 1uLL, v2);
      if (v3)
      {
        uint64_t v12 = (const char **)v4;
        do
        {
          demangle(*v12, __p);
          if (v15 >= 0) {
            unsigned __int8 v13 = __p;
          }
          else {
            unsigned __int8 v13 = (void **)__p[0];
          }
          fprintf(v2, "%s\n", (const char *)v13);
          if (v15 < 0) {
            operator delete(__p[0]);
          }
          ++v12;
          --v5;
        }
        while (v5);
      }
      free(v4);
      fwrite("-------------------------------------------------------\n", 0x38uLL, 1uLL, v2);
      fwrite("\n\n", 2uLL, 1uLL, v2);
      return fclose(v2);
    }
    else
    {
      size_t result = fwrite("Unable to open output backtrace file.\n", 0x26uLL, 1uLL, (FILE *)*MEMORY[0x1E4F143C8]);
      write_error = 1;
    }
  }
  return result;
}

void sub_1922AB638(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(exception_object);
    uint64_t v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E4FBA240], (uint64_t)"Unable to print back trace on termination", 41);
    std::endl[abi:ne180100]<char,std::char_traits<char>>(v2);
    __cxa_end_catch();
    JUMPOUT(0x1922AB5FCLL);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::AOT::AOTCompilerDriver::Run(uint64_t a1, uint64_t a2, std::string **a3)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v33, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v33 = *(std::string *)a2;
  }
  std::vector<std::string>::vector[abi:ne180100](&__p, (uint64_t)&v33, 1uLL);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v33.__r_.__value_.__l.__data_);
  }
  std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>>(&__p, *(uint64_t *)v32, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a3[1] - (char *)*a3) >> 3));
  memset(&v33, 0, sizeof(v33));
  id v6 = __p;
  uint64_t v5 = *(void *)v32;
  if (*(void **)v32 == __p)
  {
    uint64_t v8 = 0;
  }
  else
  {
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)v32 - (void)__p) >> 3);
    if (v7 >> 61) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v8 = (char *)operator new(0x5555555555555558 * ((uint64_t)(*(void *)v32 - (void)__p) >> 3));
    v33.__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    v33.__r_.__value_.__l.__size_ = (std::string::size_type)v8;
    v33.__r_.__value_.__r.__words[2] = (std::string::size_type)&v8[8 * v7];
    if ((void *)v5 != v6)
    {
      uint64_t v30 = a1;
      while (1)
      {
        while (1)
        {
          int v9 = v6;
          if ((*((char *)v6 + 23) & 0x80000000) == 0) {
            break;
          }
          int v9 = (void *)*v6;
          std::string::size_type v10 = v33.__r_.__value_.__r.__words[2];
          if ((unint64_t)v8 >= v33.__r_.__value_.__r.__words[2]) {
            goto LABEL_15;
          }
LABEL_10:
          *(void *)uint64_t v8 = v9;
          v8 += 8;
          v33.__r_.__value_.__l.__size_ = (std::string::size_type)v8;
          v6 += 3;
          if (v6 == (void *)v5) {
            goto LABEL_44;
          }
        }
        std::string::size_type v10 = v33.__r_.__value_.__r.__words[2];
        if ((unint64_t)v8 < v33.__r_.__value_.__r.__words[2]) {
          goto LABEL_10;
        }
LABEL_15:
        std::string::size_type v11 = v33.__r_.__value_.__r.__words[0];
        uint64_t v12 = &v8[-v33.__r_.__value_.__r.__words[0]];
        uint64_t v13 = (uint64_t)&v8[-v33.__r_.__value_.__r.__words[0]] >> 3;
        unint64_t v14 = v13 + 1;
        if ((unint64_t)(v13 + 1) >> 61) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v15 = v10 - v33.__r_.__value_.__r.__words[0];
        if (v15 >> 2 > v14) {
          unint64_t v14 = v15 >> 2;
        }
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v16 = v14;
        }
        if (v16)
        {
          if (v16 >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v17 = operator new(8 * v16);
          uint64_t v18 = &v17[8 * v13];
          *uint64_t v18 = v9;
          std::string::size_type v19 = (std::string::size_type)(v18 + 1);
          if (v8 != (char *)v11)
          {
LABEL_29:
            unint64_t v20 = (unint64_t)&v8[-v11 - 8];
            if (v20 < 0x168)
            {
              float v21 = v8;
              goto LABEL_31;
            }
            if (&v12[(void)v17 - 8 - (v20 & 0xFFFFFFFFFFFFFFF8)] > &v12[(void)v17 - 8])
            {
              float v21 = v8;
              goto LABEL_31;
            }
            if (&v8[-(v20 & 0xFFFFFFFFFFFFFFF8) - 8] > v8 - 8)
            {
              float v21 = v8;
              goto LABEL_31;
            }
            if ((unint64_t)(v8 - v17 - (void)v12) < 0x20)
            {
              float v21 = v8;
              goto LABEL_31;
            }
            uint64_t v23 = (v20 >> 3) + 1;
            uint64_t v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
            float v21 = &v8[-v24];
            uint64_t v18 = (void *)((char *)v18 - v24);
            unint64_t v25 = &v17[8 * v13 - 16];
            unint64_t v26 = v8 - 16;
            uint64_t v27 = v23 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v28 = *(_OWORD *)v26;
              *(v25 - 1) = *((_OWORD *)v26 - 1);
              _OWORD *v25 = v28;
              v25 -= 2;
              v26 -= 32;
              v27 -= 4;
            }
            while (v27);
            if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
            {
              do
              {
LABEL_31:
                uint64_t v22 = *((void *)v21 - 1);
                v21 -= 8;
                *--uint64_t v18 = v22;
              }
              while (v21 != (char *)v11);
            }
            uint64_t v8 = (char *)v33.__r_.__value_.__r.__words[0];
            v33.__r_.__value_.__r.__words[0] = (std::string::size_type)v18;
            v33.__r_.__value_.__l.__size_ = v19;
            v33.__r_.__value_.__r.__words[2] = (std::string::size_type)&v17[8 * v16];
            if (!v8) {
              goto LABEL_26;
            }
LABEL_25:
            operator delete(v8);
            goto LABEL_26;
          }
        }
        else
        {
          uint64_t v17 = 0;
          uint64_t v18 = (void *)(8 * v13);
          *(void *)(8 * v13) = v9;
          std::string::size_type v19 = 8 * v13 + 8;
          if (v8 != (char *)v11) {
            goto LABEL_29;
          }
        }
        v33.__r_.__value_.__r.__words[0] = (std::string::size_type)v18;
        v33.__r_.__value_.__l.__size_ = v19;
        v33.__r_.__value_.__r.__words[2] = (std::string::size_type)&v17[8 * v16];
        if (v8) {
          goto LABEL_25;
        }
LABEL_26:
        uint64_t v8 = (char *)v19;
        v33.__r_.__value_.__l.__size_ = v19;
        v6 += 3;
        if (v6 == (void *)v5)
        {
LABEL_44:
          uint64_t v29 = (const char **)v33.__r_.__value_.__r.__words[0];
          a1 = v30;
          goto LABEL_47;
        }
      }
    }
  }
  uint64_t v29 = (const char **)v8;
LABEL_47:
  Espresso::AOT::AOTCompilerDriver::Run(a1, (unint64_t)(v8 - (char *)v29) >> 3, v29);
}

void sub_1922ABA4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
}

uint64_t anonymous namespace'::RemoveIdentityOps(uint64_t a1, std::__shared_weak_count *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v181 = a1;
  uint64_t v182 = a2;
  if (a2) {
    atomic_fetch_add_explicit(&a2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t))(*(void *)a4 + 168))(a4);
  MIL::Builder::ProgramBuilder::Make();
  if (v182 && !atomic_fetch_add(&v182->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
    std::__shared_weak_count::__release_weak(v182);
  }
  MIL::Builder::ProgramBuilder::GetFunction();
  (*(void (**)(uint64_t))(*(void *)a4 + 32))(a4);
  MIL::Builder::FunctionBuilder::GetBlock();
  v177[0] = 0;
  v177[1] = 0;
  v175[1] = 0;
  unint64_t v176 = v177;
  uint64_t v174 = v175;
  v175[0] = 0;
  v173[0] = 0;
  v173[1] = 0;
  uint64_t v171 = 0;
  uint64_t v172 = v173;
  int8x8_t v169 = (uint64_t **)&v170;
  uint8x8_t v170 = 0;
  uint64_t v166 = 0;
  long long v167 = 0;
  unint64_t v168 = 0;
  MIL::Builder::BlockBuilder::GetOperations((uint64_t *)&v163, v178);
  uint64_t v5 = (std::string *)v163;
  unint64_t v4 = v164;
  if (v163 != v164)
  {
    while (1)
    {
      uint64_t Operator = MIL::Builder::OperationBuilder::GetOperator((MIL::Builder::OperationBuilder *)v5->__r_.__value_.__l.__data_);
      uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)Operator + 16))(Operator);
      int v9 = *(char *)(v8 + 23);
      if (v9 < 0)
      {
        if (*(void *)(v8 + 8) == 8 && **(void **)v8 == 0x797469746E656469)
        {
LABEL_17:
          char v162 = 1;
          LOWORD(__p) = 120;
          ArgumentForParameter = (MIL::Builder::Variable *)MIL::Builder::OperationBuilder::GetArgumentForParameter();
          if (v162 < 0) {
            operator delete(__p);
          }
          Output = (MIL::Builder::Variable *)MIL::Builder::OperationBuilder::GetOutput((MIL::Builder::OperationBuilder *)v5->__r_.__value_.__l.__data_);
          uint64_t Name = (const std::string *)MIL::Builder::Variable::GetName(Output);
          std::string __p = (void *)MIL::Builder::Variable::GetName(ArgumentForParameter);
          uint64_t v13 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v176, __p, (uint64_t)&std::piecewise_construct, (long long **)&__p);
          std::string::operator=((std::string *)(v13 + 7), Name);
          unint64_t v14 = (const std::string *)MIL::Builder::Variable::GetName(ArgumentForParameter);
          std::string __p = (void *)MIL::Builder::Variable::GetName(Output);
          uint64_t v15 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v172, __p, (uint64_t)&std::piecewise_construct, (long long **)&__p);
          std::string::operator=((std::string *)(v15 + 7), v14);
          unint64_t v16 = v167;
          if ((unint64_t)v167 >= v168)
          {
            id v6 = std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__push_back_slow_path<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions> const&>((uint64_t)&v166, (long long *)v5);
          }
          else
          {
            *long long v167 = v5->__r_.__value_.__r.__words[0];
            std::string::size_type size = v5->__r_.__value_.__l.__size_;
            v16[1] = size;
            if (size) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(size + 8), 1uLL, memory_order_relaxed);
            }
            id v6 = v16 + 2;
          }
          long long v167 = v6;
        }
      }
      else if (v9 == 8 && *(void *)v8 == 0x797469746E656469)
      {
        goto LABEL_17;
      }
      uint64_t v5 = (std::string *)((char *)v5 + 16);
      if (v5 == v4)
      {
        uint64_t v5 = (std::string *)v163;
        break;
      }
    }
  }
  if (v5)
  {
    uint64_t v18 = v164;
    std::string::size_type v19 = v5;
    if (v164 != v5)
    {
      do
      {
        unint64_t v20 = (std::__shared_weak_count *)v18[-1].__r_.__value_.__r.__words[2];
        if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
        uint64_t v18 = (std::string *)((char *)v18 - 16);
      }
      while (v18 != v5);
      std::string::size_type v19 = v163;
    }
    uint64_t v164 = v5;
    operator delete(v19);
  }
  MIL::Builder::BlockBuilder::GetOutputs((uint64_t *)&v163, v178);
  uint64_t v22 = (MIL::Builder::Variable **)v163;
  float v21 = v164;
  if (v163 == v164) {
    goto LABEL_62;
  }
  while (2)
  {
    uint64_t v23 = MIL::Builder::Variable::GetName(*v22);
    uint64_t v24 = v173[0];
    if (!v173[0]) {
      goto LABEL_35;
    }
    unint64_t v25 = (std::string *)v23;
    int v26 = *(char *)(v23 + 23);
    if (v26 >= 0) {
      size_t v27 = *(unsigned __int8 *)(v23 + 23);
    }
    else {
      size_t v27 = *(void *)(v23 + 8);
    }
    if (v26 >= 0) {
      long long v28 = (const void *)v23;
    }
    else {
      long long v28 = *(const void **)v23;
    }
    while (1)
    {
      int v29 = *(char *)(v24 + 55);
      if (v29 >= 0) {
        size_t v30 = *(unsigned __int8 *)(v24 + 55);
      }
      else {
        size_t v30 = *(void *)(v24 + 40);
      }
      if (v29 >= 0) {
        char v31 = (const void *)(v24 + 32);
      }
      else {
        char v31 = *(const void **)(v24 + 32);
      }
      if (v30 >= v27) {
        size_t v32 = v27;
      }
      else {
        size_t v32 = v30;
      }
      int v33 = memcmp(v28, v31, v32);
      BOOL v34 = v27 < v30;
      if (v33) {
        BOOL v34 = v33 < 0;
      }
      if (v34) {
        goto LABEL_44;
      }
      int v35 = memcmp(v31, v28, v32);
      BOOL v36 = v30 < v27;
      if (v35) {
        BOOL v36 = v35 < 0;
      }
      if (!v36) {
        break;
      }
      v24 += 8;
LABEL_44:
      uint64_t v24 = *(void *)v24;
      if (!v24) {
        goto LABEL_35;
      }
    }
    std::string __p = v25;
    uint64_t v37 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v172, v25, (uint64_t)&std::piecewise_construct, (long long **)&__p);
    std::string __p = v25;
    uint64_t v38 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v174, v25, (uint64_t)&std::piecewise_construct, (long long **)&__p);
    std::string::operator=((std::string *)(v38 + 7), (const std::string *)(v37 + 7));
    std::string __p = v25;
    std::string __p = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v172, v25, (uint64_t)&std::piecewise_construct, (long long **)&__p)+ 7;
    unint64_t v39 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v169, __p, (uint64_t)&std::piecewise_construct, (long long **)&__p);
    std::string::operator=((std::string *)(v39 + 7), v25);
LABEL_35:
    if (++v22 != (MIL::Builder::Variable **)v21) {
      continue;
    }
    break;
  }
  uint64_t v22 = (MIL::Builder::Variable **)v163;
LABEL_62:
  if (v22)
  {
    uint64_t v164 = (std::string *)v22;
    operator delete(v22);
  }
  int v163 = 0;
  uint64_t v164 = 0;
  unint64_t v165 = 0;
  MIL::Builder::BlockBuilder::GetOutputNames((uint64_t *)&__p, v178);
  unint64_t v40 = (void **)__p;
  unint64_t v41 = v161;
  if (__p != v161)
  {
    do
    {
      if (*((char *)v40 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v159, (const std::string::value_type *)*v40, (std::string::size_type)v40[1]);
      }
      else
      {
        long long v42 = *(_OWORD *)v40;
        v159.__r_.__value_.__r.__words[2] = (std::string::size_type)v40[2];
        *(_OWORD *)&v159.__r_.__value_.__l.__data_ = v42;
      }
      uint64_t v43 = v175[0];
      if (v175[0])
      {
        if ((v159.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v44 = HIBYTE(v159.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v44 = v159.__r_.__value_.__l.__size_;
        }
        if ((v159.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v45 = &v159;
        }
        else {
          uint64_t v45 = (std::string *)v159.__r_.__value_.__r.__words[0];
        }
        do
        {
          int v46 = *(char *)(v43 + 55);
          if (v46 >= 0) {
            size_t v47 = *(unsigned __int8 *)(v43 + 55);
          }
          else {
            size_t v47 = *(void *)(v43 + 40);
          }
          if (v46 >= 0) {
            uint64_t v48 = (const void *)(v43 + 32);
          }
          else {
            uint64_t v48 = *(const void **)(v43 + 32);
          }
          if (v47 >= v44) {
            size_t v49 = v44;
          }
          else {
            size_t v49 = v47;
          }
          int v50 = memcmp(v45, v48, v49);
          BOOL v51 = v44 < v47;
          if (v50) {
            BOOL v51 = v50 < 0;
          }
          if (!v51)
          {
            int v52 = memcmp(v48, v45, v49);
            BOOL v53 = v47 < v44;
            if (v52) {
              BOOL v53 = v52 < 0;
            }
            if (!v53)
            {
              int v152 = &v159;
              unint64_t v58 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v174, &v159, (uint64_t)&std::piecewise_construct, (long long **)&v152);
              int v57 = (std::string *)(v58 + 7);
              long long v54 = v164;
              if ((unint64_t)v164 < v165)
              {
                if (*((char *)v58 + 79) < 0)
                {
                  std::string::__init_copy_ctor_external(v164, (const std::string::value_type *)v58[7], v58[8]);
                }
                else
                {
                  long long v55 = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
                  uint64_t v56 = v58[9];
LABEL_101:
                  v54->__r_.__value_.__r.__words[2] = v56;
                  *(_OWORD *)&v54->__r_.__value_.__l.__data_ = v55;
                }
                goto LABEL_106;
              }
LABEL_102:
              uint64_t v164 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v163, (uint64_t)v57);
              if (SHIBYTE(v159.__r_.__value_.__r.__words[2]) < 0) {
                goto LABEL_107;
              }
              goto LABEL_66;
            }
            v43 += 8;
          }
          uint64_t v43 = *(void *)v43;
        }
        while (v43);
      }
      long long v54 = v164;
      if ((unint64_t)v164 >= v165)
      {
        int v57 = &v159;
        goto LABEL_102;
      }
      if ((SHIBYTE(v159.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        long long v55 = *(_OWORD *)&v159.__r_.__value_.__l.__data_;
        uint64_t v56 = v159.__r_.__value_.__r.__words[2];
        goto LABEL_101;
      }
      std::string::__init_copy_ctor_external(v164, v159.__r_.__value_.__l.__data_, v159.__r_.__value_.__l.__size_);
LABEL_106:
      uint64_t v164 = v54 + 1;
      if (SHIBYTE(v159.__r_.__value_.__r.__words[2]) < 0) {
LABEL_107:
      }
        operator delete(v159.__r_.__value_.__l.__data_);
LABEL_66:
      v40 += 3;
    }
    while (v40 != v41);
    unint64_t v40 = (void **)__p;
  }
  if (v40)
  {
    unint64_t v59 = v161;
    BOOL v60 = v40;
    if (v161 != v40)
    {
      do
      {
        if (*((char *)v59 - 1) < 0) {
          operator delete(*(v59 - 3));
        }
        v59 -= 3;
      }
      while (v59 != v40);
      BOOL v60 = __p;
    }
    long long v161 = v40;
    operator delete(v60);
  }
  BOOL v61 = v176;
  if (v176 != v177)
  {
    while (2)
    {
      if (*((char *)v61 + 55) < 0) {
        std::string::__init_copy_ctor_external(&v158, (const std::string::value_type *)v61[4], v61[5]);
      }
      else {
        std::string v158 = *(std::string *)(v61 + 4);
      }
      uint64_t v156 = 0;
      int v157 = 0;
      MIL::Builder::BlockBuilder::ReplaceUsesOfInputVariable();
      BOOL v62 = v157;
      if (v157 && !atomic_fetch_add(&v157->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
        std::__shared_weak_count::__release_weak(v62);
        if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0) {
          goto LABEL_129;
        }
LABEL_126:
        uint64_t v63 = (uint64_t *)v61[1];
        if (!v63) {
          goto LABEL_132;
        }
        do
        {
LABEL_130:
          uint64_t v64 = v63;
          uint64_t v63 = (uint64_t *)*v63;
        }
        while (v63);
      }
      else
      {
        if ((SHIBYTE(v158.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_126;
        }
LABEL_129:
        operator delete(v158.__r_.__value_.__l.__data_);
        uint64_t v63 = (uint64_t *)v61[1];
        if (v63) {
          goto LABEL_130;
        }
        do
        {
LABEL_132:
          uint64_t v64 = (uint64_t *)v61[2];
          BOOL v65 = *v64 == (void)v61;
          BOOL v61 = v64;
        }
        while (!v65);
      }
      BOOL v61 = v64;
      if (v64 == v177) {
        break;
      }
      continue;
    }
  }
  int v66 = (uint64_t *)v166;
  uint64_t v67 = v167;
  if (v166 != v167)
  {
    do
    {
      uint64_t v154 = *v66;
      long long v68 = (std::__shared_weak_count *)v66[1];
      long long v155 = v68;
      if (v68) {
        atomic_fetch_add_explicit(&v68->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      MIL::Builder::BlockBuilder::RemoveOperation();
      long long v69 = v155;
      if (v155 && !atomic_fetch_add(&v155->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
        std::__shared_weak_count::__release_weak(v69);
      }
      v66 += 2;
    }
    while (v66 != v67);
  }
  MIL::Builder::BlockBuilder::GetOutputNames((uint64_t *)&__p, v178);
  long long v71 = (char *)__p;
  long long v70 = (char *)v161;
  if (__p != v161)
  {
    do
    {
      MIL::Builder::BlockBuilder::RemoveOutput();
      v71 += 24;
    }
    while (v71 != v70);
  }
  uint64_t v73 = (std::string *)v163;
  uint64_t v72 = v164;
  if (v163 != v164)
  {
    do
    {
      MIL::Builder::BlockBuilder::AddOutput();
      ++v73;
    }
    while (v73 != v72);
  }
  MIL::Builder::BlockBuilder::GetOperations((uint64_t *)&v159, v178);
  std::string::size_type v147 = v159.__r_.__value_.__l.__size_;
  int v74 = (MIL::Builder::OperationBuilder **)v159.__r_.__value_.__r.__words[0];
  if (v159.__r_.__value_.__r.__words[0] == v159.__r_.__value_.__l.__size_)
  {
    if (v159.__r_.__value_.__r.__words[0]) {
      goto LABEL_248;
    }
    goto LABEL_256;
  }
  while (2)
  {
    MIL::Builder::OperationBuilder::GetOutputs((uint64_t *)&v152, *v74);
    size_t v75 = (MIL::Builder::Variable **)v152;
    uint64_t v76 = v153;
    if (v152 == (std::string *)v153) {
      goto LABEL_245;
    }
    uint64_t v77 = 0;
    uint64_t v148 = v153;
    while (2)
    {
      uint64_t v78 = MIL::Builder::Variable::GetName(*v75);
      uint64_t v79 = (uint64_t)v170;
      if (!v170) {
        goto LABEL_155;
      }
      int v80 = *(char *)(v78 + 23);
      if (v80 >= 0) {
        size_t v81 = *(unsigned __int8 *)(v78 + 23);
      }
      else {
        size_t v81 = *(void *)(v78 + 8);
      }
      if (v80 >= 0) {
        BOOL v82 = (const void *)v78;
      }
      else {
        BOOL v82 = *(const void **)v78;
      }
      while (2)
      {
        int v83 = *(char *)(v79 + 55);
        if (v83 >= 0) {
          size_t v84 = *(unsigned __int8 *)(v79 + 55);
        }
        else {
          size_t v84 = *(void *)(v79 + 40);
        }
        if (v83 >= 0) {
          int v85 = (const void *)(v79 + 32);
        }
        else {
          int v85 = *(const void **)(v79 + 32);
        }
        if (v84 >= v81) {
          size_t v86 = v81;
        }
        else {
          size_t v86 = v84;
        }
        int v87 = memcmp(v82, v85, v86);
        BOOL v88 = v81 < v84;
        if (v87) {
          BOOL v88 = v87 < 0;
        }
        if (v88)
        {
LABEL_163:
          uint64_t v79 = *(void *)v79;
          if (!v79) {
            goto LABEL_155;
          }
          continue;
        }
        break;
      }
      int v89 = memcmp(v85, v82, v86);
      BOOL v90 = v84 < v81;
      if (v89) {
        BOOL v90 = v89 < 0;
      }
      if (v90)
      {
        v79 += 8;
        goto LABEL_163;
      }
      uint64_t v91 = MIL::Builder::Variable::GetName(*v75);
      uint64_t v92 = v91;
      uint64_t v93 = v74;
      uint64_t v94 = (uint64_t)v170;
      uint64_t v95 = (uint64_t *)&v170;
      uint64_t v96 = (uint64_t *)&v170;
      if (!v170)
      {
LABEL_205:
        uint64_t v76 = v148;
        uint64_t v111 = (char *)operator new(0x50uLL);
        int v74 = v93;
        uint64_t v112 = (std::string *)(v111 + 32);
        if (*(char *)(v92 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v112, *(const std::string::value_type **)v92, *(void *)(v92 + 8));
        }
        else
        {
          long long v113 = *(_OWORD *)v92;
          *((void *)v111 + 6) = *(void *)(v92 + 16);
          *(_OWORD *)&v112->__r_.__value_.__l.__data_ = v113;
        }
        *((void *)v111 + 7) = 0;
        *((void *)v111 + 8) = 0;
        *((void *)v111 + 9) = 0;
        *(void *)uint64_t v111 = 0;
        *((void *)v111 + 1) = 0;
        *((void *)v111 + 2) = v95;
        *uint64_t v96 = (uint64_t)v111;
        uint64_t v114 = v111;
        if (*v169)
        {
          int8x8_t v169 = (uint64_t **)*v169;
          uint64_t v114 = (char *)*v96;
        }
        uint64_t v115 = (uint64_t)v170;
        v114[24] = v114 == v170;
        if (v114 != (char *)v115)
        {
          do
          {
            uint64_t v116 = *((void *)v114 + 2);
            if (*(unsigned char *)(v116 + 24)) {
              break;
            }
            uint64_t v117 = *(char **)(v116 + 16);
            uint64_t v118 = *(void *)v117;
            if (*(void *)v117 == v116)
            {
              uint64_t v121 = *((void *)v117 + 1);
              if (!v121 || (v122 = *(unsigned __int8 *)(v121 + 24), uint64_t v119 = (unsigned char *)(v121 + 24), v122))
              {
                if (*(char **)v116 == v114)
                {
                  *(unsigned char *)(v116 + 24) = 1;
                  v117[24] = 0;
                  uint64_t v125 = *(void *)(v116 + 8);
                  *(void *)uint64_t v117 = v125;
                  if (v125) {
                    goto LABEL_224;
                  }
                }
                else
                {
                  size_t v123 = *(uint64_t **)(v116 + 8);
                  uint64_t v124 = *v123;
                  *(void *)(v116 + 8) = *v123;
                  if (v124)
                  {
                    *(void *)(v124 + 16) = v116;
                    uint64_t v117 = *(char **)(v116 + 16);
                  }
                  v123[2] = (uint64_t)v117;
                  *(void *)(*(void *)(v116 + 16) + 8 * (**(void **)(v116 + 16) != v116)) = v123;
                  uint64_t *v123 = v116;
                  *(void *)(v116 + 16) = v123;
                  uint64_t v117 = (char *)v123[2];
                  uint64_t v116 = *(void *)v117;
                  *((unsigned char *)v123 + 24) = 1;
                  v117[24] = 0;
                  uint64_t v125 = *(void *)(v116 + 8);
                  *(void *)uint64_t v117 = v125;
                  if (v125) {
LABEL_224:
                  }
                    *(void *)(v125 + 16) = v117;
                }
                *(void *)(v116 + 16) = *((void *)v117 + 2);
                *(void *)(*((void *)v117 + 2) + 8 * (**((void **)v117 + 2) != (void)v117)) = v116;
                *(void *)(v116 + 8) = v117;
LABEL_232:
                *((void *)v117 + 2) = v116;
                break;
              }
            }
            else if (!v118 || (v120 = *(unsigned __int8 *)(v118 + 24), uint64_t v119 = (unsigned char *)(v118 + 24), v120))
            {
              if (*(char **)v116 == v114)
              {
                uint64_t v128 = *((void *)v114 + 1);
                *(void *)uint64_t v116 = v128;
                if (v128)
                {
                  *(void *)(v128 + 16) = v116;
                  uint64_t v117 = *(char **)(v116 + 16);
                }
                *((void *)v114 + 2) = v117;
                *(void *)(*(void *)(v116 + 16) + 8 * (**(void **)(v116 + 16) != v116)) = v114;
                *((void *)v114 + 1) = v116;
                *(void *)(v116 + 16) = v114;
                uint64_t v117 = (char *)*((void *)v114 + 2);
                v114[24] = 1;
                v117[24] = 0;
                uint64_t v116 = *((void *)v117 + 1);
                size_t v126 = *(char **)v116;
                *((void *)v117 + 1) = *(void *)v116;
                if (v126) {
LABEL_230:
                }
                  *((void *)v126 + 2) = v117;
              }
              else
              {
                *(unsigned char *)(v116 + 24) = 1;
                v117[24] = 0;
                uint64_t v116 = *((void *)v117 + 1);
                size_t v126 = *(char **)v116;
                *((void *)v117 + 1) = *(void *)v116;
                if (v126) {
                  goto LABEL_230;
                }
              }
              *(void *)(v116 + 16) = *((void *)v117 + 2);
              *(void *)(*((void *)v117 + 2) + 8 * (**((void **)v117 + 2) != (void)v117)) = v116;
              *(void *)uint64_t v116 = v117;
              goto LABEL_232;
            }
            *(unsigned char *)(v116 + 24) = 1;
            uint64_t v114 = v117;
            v117[24] = v117 == (char *)v115;
            unsigned char *v119 = 1;
          }
          while (v117 != (char *)v115);
        }
        ++v171;
        if (v111[79] < 0) {
          goto LABEL_227;
        }
        goto LABEL_234;
      }
      int v97 = *(char *)(v91 + 23);
      if (v97 >= 0) {
        size_t v98 = *(unsigned __int8 *)(v91 + 23);
      }
      else {
        size_t v98 = *(void *)(v91 + 8);
      }
      if (v97 >= 0) {
        uint64_t v99 = (const void *)v91;
      }
      else {
        uint64_t v99 = *(const void **)v91;
      }
      while (1)
      {
        while (1)
        {
          uint64_t v95 = (uint64_t *)v94;
          unint64_t v102 = *(const void **)(v94 + 32);
          uint64_t v100 = v94 + 32;
          uint64_t v101 = v102;
          int v103 = *(char *)(v100 + 23);
          if (v103 >= 0) {
            size_t v104 = *(unsigned __int8 *)(v100 + 23);
          }
          else {
            size_t v104 = *(void *)(v100 + 8);
          }
          if (v103 >= 0) {
            uint64_t v105 = (const void *)v100;
          }
          else {
            uint64_t v105 = v101;
          }
          if (v104 >= v98) {
            size_t v106 = v98;
          }
          else {
            size_t v106 = v104;
          }
          int v107 = memcmp(v99, v105, v106);
          BOOL v108 = v98 < v104;
          if (v107) {
            BOOL v108 = v107 < 0;
          }
          if (!v108) {
            break;
          }
          uint64_t v94 = *v95;
          uint64_t v96 = v95;
          if (!*v95) {
            goto LABEL_205;
          }
        }
        int v109 = memcmp(v105, v99, v106);
        BOOL v110 = v104 < v98;
        if (v109) {
          BOOL v110 = v109 < 0;
        }
        if (!v110) {
          break;
        }
        uint64_t v94 = v95[1];
        if (!v94)
        {
          uint64_t v96 = v95 + 1;
          goto LABEL_205;
        }
      }
      uint64_t v111 = (char *)v95;
      int v74 = v93;
      uint64_t v76 = v148;
      if ((*((char *)v95 + 79) & 0x80000000) == 0)
      {
LABEL_234:
        std::string v150 = *(std::string *)(v111 + 56);
        goto LABEL_235;
      }
LABEL_227:
      std::string::__init_copy_ctor_external(&v150, *((const std::string::value_type **)v111 + 7), *((void *)v111 + 8));
LABEL_235:
      MIL::Builder::OperationBuilder::RenameOutput();
      unint64_t v127 = v151;
      if (v151 && !atomic_fetch_add(&v151->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
        std::__shared_weak_count::__release_weak(v127);
      }
      if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v150.__r_.__value_.__l.__data_);
      }
LABEL_155:
      ++v77;
      if (++v75 != (MIL::Builder::Variable **)v76) {
        continue;
      }
      break;
    }
    size_t v75 = (MIL::Builder::Variable **)v152;
LABEL_245:
    if (v75)
    {
      long long v153 = (long long *)v75;
      operator delete(v75);
    }
    v74 += 2;
    if (v74 != (MIL::Builder::OperationBuilder **)v147) {
      continue;
    }
    break;
  }
  int v74 = (MIL::Builder::OperationBuilder **)v159.__r_.__value_.__r.__words[0];
  if (v159.__r_.__value_.__r.__words[0])
  {
LABEL_248:
    std::string::size_type v129 = v159.__r_.__value_.__l.__size_;
    BOOL v130 = v74;
    if ((MIL::Builder::OperationBuilder **)v159.__r_.__value_.__l.__size_ != v74)
    {
      do
      {
        int v131 = *(std::__shared_weak_count **)(v129 - 8);
        if (v131 && !atomic_fetch_add(&v131->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
          std::__shared_weak_count::__release_weak(v131);
        }
        v129 -= 16;
      }
      while ((MIL::Builder::OperationBuilder **)v129 != v74);
      BOOL v130 = (MIL::Builder::OperationBuilder **)v159.__r_.__value_.__r.__words[0];
    }
    v159.__r_.__value_.__l.__size_ = (std::string::size_type)v74;
    operator delete(v130);
  }
LABEL_256:
  MIL::Builder::BlockBuilder::CreateBlock(&v149, v178);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a4 + 80))(a4, &v149);
  uint64_t v132 = v149;
  uint64_t v149 = 0;
  if (v132) {
    (*(void (**)(uint64_t))(*(void *)v132 + 8))(v132);
  }
  long long v133 = (void **)__p;
  if (__p)
  {
    uint64_t v134 = v161;
    unint64_t v135 = __p;
    if (v161 != __p)
    {
      do
      {
        if (*((char *)v134 - 1) < 0) {
          operator delete(*(v134 - 3));
        }
        v134 -= 3;
      }
      while (v134 != v133);
      unint64_t v135 = __p;
    }
    long long v161 = v133;
    operator delete(v135);
  }
  int v136 = (std::string *)v163;
  if (v163)
  {
    uint64_t v137 = v164;
    uint64_t v138 = v163;
    if (v164 != v163)
    {
      do
      {
        if (SHIBYTE(v137[-1].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v137[-1].__r_.__value_.__l.__data_);
        }
        --v137;
      }
      while (v137 != v136);
      uint64_t v138 = v163;
    }
    uint64_t v164 = v136;
    operator delete(v138);
  }
  uint64_t v139 = v166;
  if (v166)
  {
    __n128 v140 = v167;
    size_t v141 = v166;
    if (v167 != v166)
    {
      do
      {
        uint64_t v142 = (std::__shared_weak_count *)*(v140 - 1);
        if (v142 && !atomic_fetch_add(&v142->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
          std::__shared_weak_count::__release_weak(v142);
        }
        v140 -= 2;
      }
      while (v140 != v139);
      size_t v141 = v166;
    }
    long long v167 = v139;
    operator delete(v141);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v169, (uint64_t)v170);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v172, v173[0]);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v174, v175[0]);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v176, v177[0]);
  uint64_t v143 = v179;
  if (v179 && !atomic_fetch_add(&v179->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
    std::__shared_weak_count::__release_weak(v143);
  }
  int v144 = v180;
  if (v180 && !atomic_fetch_add(&v180->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
    std::__shared_weak_count::__release_weak(v144);
  }
  uint64_t result = v183;
  uint64_t v183 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_1922ACBA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,void *a49,uint64_t a50,uint64_t a51,void *a52)
{
  if (a42 < 0) {
    operator delete(__p);
  }
  std::vector<std::string>::~vector[abi:ne180100](&a43);
  std::vector<std::string>::~vector[abi:ne180100](&a49);
  std::vector<std::shared_ptr<E5RT::IOPort>>::~vector[abi:ne180100](&a52);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v52 - 256, *(void *)(v52 - 248));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v52 - 232, *(void *)(v52 - 224));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v52 - 208, *(void *)(v52 - 200));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v52 - 184, *(void *)(v52 - 176));
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v52 - 160);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v52 - 144);
  uint64_t v54 = *(void *)(v52 - 112);
  *(void *)(v52 - 112) = 0;
  if (v54) {
    (*(void (**)(uint64_t))(*(void *)v54 + 8))(v54);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_non_maximum_suppression_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v19 = a4;
  int v11 = 1;
  uint64_t v12 = 1056964608;
  char v13 = 0;
  uint64_t v14 = 0x300000000;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  unint64_t v16 = 0;
  int v15 = 0;
  Espresso::SerDes::params_io<Espresso::non_maximum_suppression_params_t>(a2, (uint64_t)&v11, 0);
  Espresso::abstract_engine_factory::shared(&v9);
  uint64_t v5 = v9;
  std::string::basic_string[abi:ne180100]<0>(__p, "non_maximum_suppression");
  int v6 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)&v11, &v6);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  if (v16)
  {
    uint64_t v17 = v16;
    operator delete(v16);
  }
}

void sub_1922ACEB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::params_io<Espresso::non_maximum_suppression_params_t>(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v9, "max_boxes");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v9, v11);
    (*(void (**)(void *, void **, uint64_t))(*(void *)v11[0] + 160))(v11[0], __p, a2);
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (v11[1]) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v11[1]);
    }
    if (v10 < 0) {
      operator delete(v9[0]);
    }
    if (*(float *)(a2 + 4) != 0.5)
    {
      std::string::basic_string[abi:ne180100]<0>(v9, "iou_threshold");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v9, v11);
      (*(void (**)(void *, void **, uint64_t))(*(void *)v11[0] + 216))(v11[0], __p, a2 + 4);
      if (v13 < 0) {
        operator delete(__p[0]);
      }
      if (v11[1]) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v11[1]);
      }
      if (v10 < 0) {
        operator delete(v9[0]);
      }
    }
    if (*(float *)(a2 + 8) != 0.0)
    {
      std::string::basic_string[abi:ne180100]<0>(v9, "score_threshold");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v9, v11);
      (*(void (**)(void *, void **, uint64_t))(*(void *)v11[0] + 216))(v11[0], __p, a2 + 8);
      if (v13 < 0) {
        operator delete(__p[0]);
      }
      if (v11[1]) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v11[1]);
      }
      if (v10 < 0) {
        operator delete(v9[0]);
      }
    }
    if (*(unsigned char *)(a2 + 12))
    {
      std::string::basic_string[abi:ne180100]<0>(v9, "per_class_suppression");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v9, v11);
      (*(void (**)(void *, void **, uint64_t))(*(void *)v11[0] + 208))(v11[0], __p, a2 + 12);
      if (v13 < 0) {
        operator delete(__p[0]);
      }
      if (v11[1]) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v11[1]);
      }
      if (v10 < 0) {
        operator delete(v9[0]);
      }
    }
    if (*(_DWORD *)(a2 + 16))
    {
      std::string::basic_string[abi:ne180100]<0>(v9, "num_boxes_pre_nms");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v9, v11);
      (*(void (**)(void *, void **, uint64_t))(*(void *)v11[0] + 160))(v11[0], __p, a2 + 16);
      if (v13 < 0) {
        operator delete(__p[0]);
      }
      if (v11[1]) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v11[1]);
      }
      if (v10 < 0) {
        operator delete(v9[0]);
      }
    }
    if (*(_DWORD *)(a2 + 20) != 3)
    {
      std::string::basic_string[abi:ne180100]<0>(v9, "mode");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v9, v11);
      (*(void (**)(void *, void **, uint64_t))(*(void *)v11[0] + 160))(v11[0], __p, a2 + 20);
      if (v13 < 0) {
        operator delete(__p[0]);
      }
      if (v11[1]) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v11[1]);
      }
      if (v10 < 0) {
        operator delete(v9[0]);
      }
    }
    if (*(unsigned char *)(a2 + 24))
    {
      std::string::basic_string[abi:ne180100]<0>(v9, "no_scores");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v9, v11);
      (*(void (**)(void *, void **, uint64_t))(*(void *)v11[0] + 208))(v11[0], __p, a2 + 24);
      if (v13 < 0) {
        operator delete(__p[0]);
      }
      if (v11[1]) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v11[1]);
      }
      if (v10 < 0) {
        operator delete(v9[0]);
      }
    }
    if (*(unsigned char *)(a2 + 25))
    {
      std::string::basic_string[abi:ne180100]<0>(v9, "no_count");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v9, v11);
      (*(void (**)(void *, void **, uint64_t))(*(void *)v11[0] + 208))(v11[0], __p, a2 + 25);
      if (v13 < 0) {
        operator delete(__p[0]);
      }
      if (v11[1]) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v11[1]);
      }
      if (v10 < 0) {
        operator delete(v9[0]);
      }
    }
    if (*(unsigned char *)(a2 + 26))
    {
      std::string::basic_string[abi:ne180100]<0>(v9, "no_indices");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v9, v11);
      (*(void (**)(void *, void **, uint64_t))(*(void *)v11[0] + 208))(v11[0], __p, a2 + 26);
      if (v13 < 0) {
        operator delete(__p[0]);
      }
      if (v11[1]) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v11[1]);
      }
      if (v10 < 0) {
        operator delete(v9[0]);
      }
    }
    if (*(unsigned char *)(a2 + 27))
    {
      std::string::basic_string[abi:ne180100]<0>(v9, "ane_layout");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v9, v11);
      (*(void (**)(void *, void **, uint64_t))(*(void *)v11[0] + 208))(v11[0], __p, a2 + 27);
      if (v13 < 0) {
        operator delete(__p[0]);
      }
      if (v11[1]) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v11[1]);
      }
      if (v10 < 0) {
        operator delete(v9[0]);
      }
    }
    if (*(void *)(a2 + 40) != *(void *)(a2 + 32))
    {
      std::string::basic_string[abi:ne180100]<0>(v11, "inline_gather_axes");
      (*(void (**)(uint64_t, void **, uint64_t))(*(void *)a1 + 256))(a1, v11, a2 + 32);
      if ((SHIBYTE(__p[0]) & 0x80000000) == 0) {
        return;
      }
      uint64_t v5 = v11[0];
      goto LABEL_142;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v9, "max_boxes");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v9, v11);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(v11, (_DWORD *)a2);
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (v11[1]) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v11[1]);
    }
    if (v10 < 0) {
      operator delete(v9[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v9, "iou_threshold");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v9, v11);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(v11, (float *)(a2 + 4));
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (v11[1]) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v11[1]);
    }
    if (v10 < 0) {
      operator delete(v9[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v9, "score_threshold");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v9, v11);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(v11, (float *)(a2 + 8));
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (v11[1]) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v11[1]);
    }
    if (v10 < 0) {
      operator delete(v9[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v9, "per_class_suppression");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v9, v11);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(v11, (unsigned char *)(a2 + 12));
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (v11[1]) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v11[1]);
    }
    if (v10 < 0) {
      operator delete(v9[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v9, "num_boxes_pre_nms");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v9, v11);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(v11, (_DWORD *)(a2 + 16));
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (v11[1]) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v11[1]);
    }
    if (v10 < 0) {
      operator delete(v9[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v9, "mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v9, v11);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(v11, (_DWORD *)(a2 + 20));
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (v11[1]) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v11[1]);
    }
    if (v10 < 0) {
      operator delete(v9[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v9, "no_scores");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v9, v11);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(v11, (unsigned char *)(a2 + 24));
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (v11[1]) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v11[1]);
    }
    if (v10 < 0) {
      operator delete(v9[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v9, "no_count");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v9, v11);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(v11, (unsigned char *)(a2 + 25));
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (v11[1]) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v11[1]);
    }
    if (v10 < 0) {
      operator delete(v9[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v9, "no_indices");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v9, v11);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(v11, (unsigned char *)(a2 + 26));
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (v11[1]) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v11[1]);
    }
    if (v10 < 0) {
      operator delete(v9[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v9, "ane_layout");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v9, v11);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(v11, (unsigned char *)(a2 + 27));
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (v11[1]) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v11[1]);
    }
    if (v10 < 0) {
      operator delete(v9[0]);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(v11, "inline_gather_axes");
  int v6 = (*(uint64_t (**)(uint64_t, void **))(*(void *)a1 + 24))(a1, v11);
  int v7 = v6;
  if (SHIBYTE(__p[0]) < 0)
  {
    operator delete(v11[0]);
    if (!v7) {
      return;
    }
  }
  else if (!v6)
  {
    return;
  }
  std::string::basic_string[abi:ne180100]<0>(v9, "inline_gather_axes");
  (*(void (**)(void **__return_ptr, uint64_t, void **))(*(void *)a1 + 136))(v11, a1, v9);
  char v8 = *(void **)(a2 + 32);
  if (v8)
  {
    *(void *)(a2 + 40) = v8;
    operator delete(v8);
    *(void *)(a2 + 32) = 0;
    *(void *)(a2 + 40) = 0;
    *(void *)(a2 + 48) = 0;
  }
  *(_OWORD *)(a2 + 32) = *(_OWORD *)v11;
  *(void **)(a2 + 48) = __p[0];
  v11[1] = 0;
  __p[0] = 0;
  v11[0] = 0;
  if (v10 < 0)
  {
    uint64_t v5 = v9[0];
LABEL_142:
    operator delete(v5);
  }
}

void sub_1922AD960(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::AOT::UpdateFunctionIO(MIL::Builder::FunctionBuilder *a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  MIL::Builder::FunctionBuilder::SelectedSpecialization(a1);
  MIL::Builder::FunctionBuilder::GetBlock();
  unint64_t v1 = 0;
  *(_OWORD *)std::string __p = 0u;
  *(_OWORD *)int v15 = 0u;
  int v16 = 1065353216;
  while (v1 < MIL::Builder::BlockBuilder::GetNumOperations(v12))
  {
    MIL::Builder::BlockBuilder::GetOperation(v12);
    MIL::Builder::OperationBuilder::GetInputArguments((uint64_t *)&v13, (MIL::Builder::OperationBuilder *)v17.__r_.__value_.__l.__data_);
    uint64_t v2 = (void *)v13.__r_.__value_.__r.__words[2];
    if (v13.__r_.__value_.__r.__words[2])
    {
      do
      {
        int v3 = (MIL::Builder::Variable *)v2[2];
        if (MIL::Builder::Variable::TryGetName(v3))
        {
          uint64_t Name = MIL::Builder::Variable::GetName(v3);
          std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)__p, Name, Name);
        }
        uint64_t v2 = (void *)*v2;
      }
      while (v2);
      uint64_t v5 = (void *)v13.__r_.__value_.__r.__words[2];
      if (v13.__r_.__value_.__r.__words[2])
      {
        do
        {
          int v6 = (void *)*v5;
          operator delete(v5);
          uint64_t v5 = v6;
        }
        while (v6);
      }
    }
    int v7 = (void *)v13.__r_.__value_.__r.__words[0];
    v13.__r_.__value_.__r.__words[0] = 0;
    if (v7) {
      operator delete(v7);
    }
    for (unint64_t i = 0;
          i < MIL::Builder::OperationBuilder::GetNumOutputs((MIL::Builder::OperationBuilder *)v17.__r_.__value_.__l.__data_);
          ++i)
    {
      Outputuint64_t Name = MIL::Builder::OperationBuilder::GetOutputName((MIL::Builder::OperationBuilder *)v17.__r_.__value_.__l.__data_);
      if (*(char *)(OutputName + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v13, *(const std::string::value_type **)OutputName, *(void *)(OutputName + 8));
      }
      else
      {
        long long v10 = *(_OWORD *)OutputName;
        v13.__r_.__value_.__r.__words[2] = *(void *)(OutputName + 16);
        *(_OWORD *)&v13.__r_.__value_.__l.__data_ = v10;
      }
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)__p, (uint64_t)&v13, (uint64_t)&v13);
      if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v13.__r_.__value_.__l.__data_);
      }
    }
    std::string::size_type size = (std::__shared_weak_count *)v17.__r_.__value_.__l.__size_;
    if (v17.__r_.__value_.__l.__size_
      && !atomic_fetch_add((atomic_ullong *volatile)(v17.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
    ++v1;
  }
  std::make_unique[abi:ne180100]<Espresso::MILTranslator::NameGenerator,std::unordered_set<std::string> &>();
}

void sub_1922B2748(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,Espresso::MILTranslator::NameGenerator *a22,__int16 a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *__p,uint64_t a62,int a63)
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x220]);
  if (a66 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v73 - 105) < 0) {
    operator delete(*(void **)(v73 - 128));
  }
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a73);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a72);
  if (SLOBYTE(STACK[0x217]) < 0) {
    operator delete((void *)STACK[0x200]);
  }
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v73 - 176);
  std::vector<std::string>::~vector[abi:ne180100](&a41);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a30);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a33);
  std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100]((uint64_t)&a25);
  std::vector<std::string>::~vector[abi:ne180100](&a19);
  std::unique_ptr<Espresso::MILTranslator::NameGenerator>::~unique_ptr[abi:ne180100](&a22);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  _Unwind_Resume(a1);
}

void sub_1922B3540(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,...)
{
  va_start(va, a36);
  if (a23 < 0) {
    operator delete(__p);
  }
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v36 - 224);
  std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100]((uint64_t)va);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1922B3558(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41)
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v41 - 224);
  std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100](&a41);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](&a23);
  _Unwind_Resume(a1);
}

void sub_1922B3560(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41)
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v41 - 224);
  std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100](&a41);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](&a23);
  _Unwind_Resume(a1);
}

void sub_1922B3568(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)va);
  JUMPOUT(0x1922B3574);
}

void anonymous namespace'::ResetBlockOutputs(MIL::Builder::BlockBuilder *a1, uint64_t *a2)
{
  MIL::Builder::BlockBuilder::GetOutputNames((uint64_t *)&__p, a1);
  int v3 = (void **)__p;
  unint64_t v4 = v10;
  if (__p != v10)
  {
    do
    {
      MIL::Builder::BlockBuilder::RemoveOutput();
      v3 += 3;
    }
    while (v3 != v4);
    int v3 = (void **)__p;
  }
  if (v3)
  {
    uint64_t v5 = v10;
    int v6 = v3;
    if (v10 != v3)
    {
      do
      {
        if (*((char *)v5 - 1) < 0) {
          operator delete(*(v5 - 3));
        }
        v5 -= 3;
      }
      while (v5 != v3);
      int v6 = __p;
    }
    long long v10 = v3;
    operator delete(v6);
  }
  uint64_t v8 = *a2;
  for (uint64_t i = a2[1]; v8 != i; v8 += 24)
    MIL::Builder::BlockBuilder::AddOutput();
}

void sub_1922B3660(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::string>::~vector[abi:ne180100]((void **)va);
  _Unwind_Resume(a1);
}

uint64_t anonymous namespace'::GetFunctionInputType()
{
  Input = (MIL::Builder::Variable *)MIL::Builder::FunctionBuilder::TryGetInput();
  if (!Input)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Failed in accessing an intput variable of function.");
    goto LABEL_8;
  }
  unint64_t v1 = Input;
  if (!MIL::Builder::Variable::TryGetType(Input))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Failed in getting the type of an input variable of function.");
LABEL_8:
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }

  return MIL::Builder::Variable::TryGetType(v1);
}

void sub_1922B370C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1922B3720(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t anonymous namespace'::GetFunctionOutputType(_anonymous_namespace_ *this, unint64_t a2)
{
  MIL::Builder::BlockBuilder::GetOutputs((uint64_t *)&__p, this);
  int v3 = (MIL::Builder::Variable **)__p;
  if (a2 >= (v9 - (unsigned char *)__p) >> 3) {
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  }
  unint64_t v4 = (MIL::Builder::Variable *)*((void *)__p + a2);
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Failed in accessing an output variable of function.");
    goto LABEL_10;
  }
  if (!MIL::Builder::Variable::TryGetType(v4))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Failed in getting the type of an output variable of function.");
LABEL_10:
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t Type = MIL::Builder::Variable::TryGetType(v3[a2]);
  if (__p)
  {
    uint64_t v9 = __p;
    operator delete(__p);
  }
  return Type;
}

void sub_1922B3808(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  __cxa_free_exception(v11);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void anonymous namespace'::ReplaceProducer(uint64_t a1, void *a2, unsigned __int8 *a3, uint64_t a4)
{
  MIL::Builder::BlockBuilder::GetOperation();
  BOOL v53 = v56;
  uint64_t v54 = v57;
  if (v57) {
    atomic_fetch_add_explicit(&v57->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  MIL::Builder::OperationBuilder::TryGetOperatorSharedPtr(&v70, v56);
  MIL::Builder::OperationBuilder::Make();
  int v7 = v71;
  if (v71 && !atomic_fetch_add(&v71->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  MIL::Builder::OperationBuilder::GetSpecificationOpsetName(v53);
  MIL::Builder::OperationBuilder::SetSpecificationOpsetName();
  MIL::Builder::OperationBuilder::GetParameterNames((uint64_t *)&v69, v53);
  uint64_t v8 = (uint64_t *)v69.__r_.__value_.__r.__words[2];
  if (v69.__r_.__value_.__r.__words[2])
  {
    do
    {
      while (1)
      {
        if (*((char *)v8 + 39) < 0) {
          std::string::__init_copy_ctor_external(&v68, (const std::string::value_type *)v8[2], v8[3]);
        }
        else {
          std::string v68 = *(std::string *)(v8 + 2);
        }
        for (unsigned int i = 0; MIL::Builder::OperationBuilder::GetNumArguments() > (unint64_t)i; ++i)
        {
          if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&v66, v68.__r_.__value_.__l.__data_, v68.__r_.__value_.__l.__size_);
          }
          else {
            std::string v66 = v68;
          }
          MIL::Builder::OperationBuilder::GetArgumentForParameter();
          MIL::Builder::OperationBuilder::AddInput();
          long long v10 = v67;
          if (v67 && !atomic_fetch_add(&v67->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
            std::__shared_weak_count::__release_weak(v10);
          }
          if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v66.__r_.__value_.__l.__data_);
          }
        }
        if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
          break;
        }
        uint64_t v8 = (uint64_t *)*v8;
        if (!v8) {
          goto LABEL_25;
        }
      }
      operator delete(v68.__r_.__value_.__l.__data_);
      uint64_t v8 = (uint64_t *)*v8;
    }
    while (v8);
LABEL_25:
    int v11 = (void **)v69.__r_.__value_.__r.__words[2];
    if (v69.__r_.__value_.__r.__words[2])
    {
      do
      {
        uint64_t v18 = (void **)*v11;
        if (*((char *)v11 + 39) < 0) {
          operator delete(v11[2]);
        }
        operator delete(v11);
        int v11 = v18;
      }
      while (v18);
    }
  }
  uint64_t v12 = (void *)v69.__r_.__value_.__r.__words[0];
  v69.__r_.__value_.__r.__words[0] = 0;
  if (v12) {
    operator delete(v12);
  }
  MIL::Builder::OperationBuilder::GetBlocks((uint64_t *)&v69, v53);
  std::string::size_type size = v69.__r_.__value_.__l.__size_;
  std::string v13 = (std::string::size_type *)v69.__r_.__value_.__r.__words[0];
  if (v69.__r_.__value_.__r.__words[0] != v69.__r_.__value_.__l.__size_)
  {
    while (1)
    {
      std::string::size_type v15 = *v13;
      v68.__r_.__value_.__r.__words[0] = *v13;
      int v16 = (std::__shared_weak_count *)v13[1];
      v68.__r_.__value_.__l.__size_ = (std::string::size_type)v16;
      if (v16)
      {
        atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
        BOOL v65 = v16;
        atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      else
      {
        BOOL v65 = 0;
      }
      std::string::size_type v64 = v15;
      MIL::Builder::OperationBuilder::AddBlock();
      if (v65 && !atomic_fetch_add(&v65->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
        std::__shared_weak_count::__release_weak(v65);
        std::string v17 = (std::__shared_weak_count *)v68.__r_.__value_.__l.__size_;
        if (v68.__r_.__value_.__l.__size_)
        {
LABEL_37:
          if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
        }
      }
      else
      {
        std::string v17 = (std::__shared_weak_count *)v68.__r_.__value_.__l.__size_;
        if (v68.__r_.__value_.__l.__size_) {
          goto LABEL_37;
        }
      }
      v13 += 2;
      if (v13 == (std::string::size_type *)size)
      {
        std::string v13 = (std::string::size_type *)v69.__r_.__value_.__r.__words[0];
        break;
      }
    }
  }
  if (v13)
  {
    std::string::size_type v19 = v69.__r_.__value_.__l.__size_;
    unint64_t v20 = v13;
    if ((std::string::size_type *)v69.__r_.__value_.__l.__size_ != v13)
    {
      do
      {
        float v21 = *(std::__shared_weak_count **)(v19 - 8);
        if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
        v19 -= 16;
      }
      while ((std::string::size_type *)v19 != v13);
      unint64_t v20 = (std::string::size_type *)v69.__r_.__value_.__r.__words[0];
    }
    v69.__r_.__value_.__l.__size_ = (std::string::size_type)v13;
    operator delete(v20);
  }
  for (unint64_t j = 0; j < MIL::Builder::OperationBuilder::GetNumOutputs(v53); ++j)
  {
    Outputuint64_t Name = MIL::Builder::OperationBuilder::GetOutputName(v53);
    size_t v24 = *(void *)(OutputName + 8);
    if (*(char *)(OutputName + 23) >= 0) {
      uint64_t v25 = *(unsigned __int8 *)(OutputName + 23);
    }
    else {
      uint64_t v25 = *(void *)(OutputName + 8);
    }
    uint64_t v26 = a3[23];
    int v27 = (char)v26;
    if ((v26 & 0x80u) != 0) {
      uint64_t v26 = *((void *)a3 + 1);
    }
    if (v25 != v26) {
      goto LABEL_73;
    }
    if (v27 >= 0) {
      long long v28 = a3;
    }
    else {
      long long v28 = *(unsigned __int8 **)a3;
    }
    if ((*(unsigned char *)(OutputName + 23) & 0x80) != 0)
    {
      size_t v32 = *(const std::string::value_type **)OutputName;
      if (memcmp(*(const void **)OutputName, v28, v24)) {
        goto LABEL_77;
      }
    }
    else if (*(unsigned char *)(OutputName + 23))
    {
      int v29 = (unsigned __int8 *)OutputName;
      uint64_t v30 = *(unsigned __int8 *)(OutputName + 23);
      while (*v29 == *v28)
      {
        ++v29;
        ++v28;
        if (!--v30) {
          goto LABEL_82;
        }
      }
LABEL_73:
      if ((*(unsigned char *)(OutputName + 23) & 0x80) != 0)
      {
        size_t v32 = *(const std::string::value_type **)OutputName;
LABEL_77:
        std::string::__init_copy_ctor_external(&v68, v32, v24);
      }
      else
      {
        long long v31 = *(_OWORD *)OutputName;
        v68.__r_.__value_.__r.__words[2] = *(void *)(OutputName + 16);
        *(_OWORD *)&v68.__r_.__value_.__l.__data_ = v31;
      }
      MIL::Builder::OperationBuilder::GetOutputType(v53);
      MIL::Builder::OperationBuilder::AddOutput();
      if (v62 && !atomic_fetch_add(&v62->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
        std::__shared_weak_count::__release_weak(v62);
        if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
        {
LABEL_81:
          int v33 = &v68;
LABEL_55:
          operator delete(v33->__r_.__value_.__l.__data_);
          continue;
        }
      }
      else if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
      {
        goto LABEL_81;
      }
      continue;
    }
LABEL_82:
    if (*(char *)(a4 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v69, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
    }
    else {
      std::string v69 = *(std::string *)a4;
    }
    MIL::Builder::OperationBuilder::AddOutput();
    if (v63 && !atomic_fetch_add(&v63->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
      if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
      {
LABEL_90:
        int v33 = &v69;
        goto LABEL_55;
      }
    }
    else if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
    {
      goto LABEL_90;
    }
  }
  BOOL v34 = *(uint64_t **)(MIL::Builder::OperationBuilder::GetAttributes(v53) + 16);
  if (v34)
  {
    while (1)
    {
      if (*((char *)v34 + 39) < 0) {
        std::string::__init_copy_ctor_external(&v60, (const std::string::value_type *)v34[2], v34[3]);
      }
      else {
        std::string v60 = *(std::string *)(v34 + 2);
      }
      int v35 = (std::__shared_weak_count *)v34[6];
      uint64_t v58 = v34[5];
      unint64_t v59 = v35;
      if (v35) {
        atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      MIL::Builder::OperationBuilder::SetAttribute();
      uint64_t v36 = v61;
      if (v61 && !atomic_fetch_add(&v61->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
        uint64_t v37 = v59;
        if (v59)
        {
LABEL_105:
          if (!atomic_fetch_add(&v37->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
            std::__shared_weak_count::__release_weak(v37);
          }
        }
      }
      else
      {
        uint64_t v37 = v59;
        if (v59) {
          goto LABEL_105;
        }
      }
      if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v60.__r_.__value_.__l.__data_);
        BOOL v34 = (uint64_t *)*v34;
        if (!v34) {
          break;
        }
      }
      else
      {
        BOOL v34 = (uint64_t *)*v34;
        if (!v34) {
          break;
        }
      }
    }
  }
  if (v54 && !atomic_fetch_add(&v54->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
    std::__shared_weak_count::__release_weak(v54);
    if ((*(char *)(a4 + 23) & 0x80000000) == 0) {
      goto LABEL_114;
    }
LABEL_116:
    std::string::__init_copy_ctor_external(&v52, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
    goto LABEL_117;
  }
  if (*(char *)(a4 + 23) < 0) {
    goto LABEL_116;
  }
LABEL_114:
  std::string v52 = *(std::string *)a4;
LABEL_117:
  uint64_t v50 = 0;
  uint64_t v51 = 0;
  MIL::Builder::BlockBuilder::ReplaceUsesOfInputVariable();
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v52.__r_.__value_.__l.__data_);
  }
  for (unint64_t k = 0; k < MIL::Builder::OperationBuilder::GetNumOutputs(v56); ++k)
  {
    uint64_t v39 = MIL::Builder::OperationBuilder::GetOutputName(v56);
    if (*(char *)(v39 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v69, *(const std::string::value_type **)v39, *(void *)(v39 + 8));
    }
    else
    {
      long long v40 = *(_OWORD *)v39;
      v69.__r_.__value_.__r.__words[2] = *(void *)(v39 + 16);
      *(_OWORD *)&v69.__r_.__value_.__l.__data_ = v40;
    }
    Espresso::MILTranslator::NameGenerator::NameForPrefix(a2, (uint64_t)&v69, (uint64_t)&v68);
    if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v48, v68.__r_.__value_.__l.__data_, v68.__r_.__value_.__l.__size_);
    }
    else {
      std::string v48 = v68;
    }
    MIL::Builder::OperationBuilder::RenameOutput();
    uint64_t v41 = v49;
    if (v49 && !atomic_fetch_add(&v49->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
      if ((SHIBYTE(v48.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_132:
        if ((SHIBYTE(v69.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_133;
        }
        goto LABEL_136;
      }
    }
    else if ((SHIBYTE(v48.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_132;
    }
    operator delete(v48.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v69.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_133:
      std::string v47 = v69;
      goto LABEL_137;
    }
LABEL_136:
    std::string::__init_copy_ctor_external(&v47, v69.__r_.__value_.__l.__data_, v69.__r_.__value_.__l.__size_);
LABEL_137:
    MIL::Builder::BlockBuilder::ReplaceUsesOfInputVariable();
    if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v47.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v68.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_141:
        if ((SHIBYTE(v69.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          continue;
        }
        goto LABEL_142;
      }
    }
    else if ((SHIBYTE(v68.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_141;
    }
    operator delete(v68.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v69.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      continue;
    }
LABEL_142:
    operator delete(v69.__r_.__value_.__l.__data_);
  }
  int v46 = v55;
  if (v55) {
    atomic_fetch_add_explicit(&v55->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v45 = v57;
  if (v57) {
    atomic_fetch_add_explicit(&v57->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  MIL::Builder::BlockBuilder::AddOperation();
  if (v45 && !atomic_fetch_add(&v45->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
    std::__shared_weak_count::__release_weak(v45);
  }
  if (v46 && !atomic_fetch_add(&v46->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
    std::__shared_weak_count::__release_weak(v46);
  }
  std::string::size_type v44 = v57;
  if (v57) {
    atomic_fetch_add_explicit(&v57->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  MIL::Builder::BlockBuilder::RemoveOperation();
  if (v44 && !atomic_fetch_add(&v44->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
    std::__shared_weak_count::__release_weak(v44);
  }
  long long v42 = v55;
  if (v55 && !atomic_fetch_add(&v55->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
    std::__shared_weak_count::__release_weak(v42);
  }
  uint64_t v43 = v57;
  if (v57 && !atomic_fetch_add(&v57->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
    std::__shared_weak_count::__release_weak(v43);
  }
}

void sub_1922B441C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,char a44,uint64_t a45,char a46,uint64_t a47,char a48,uint64_t a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,int a54,__int16 a55,char a56,char a57)
{
}

void sub_1922B45EC()
{
  if (*(char *)(v0 - 153) < 0) {
    JUMPOUT(0x1922B45FCLL);
  }
  JUMPOUT(0x1922B4640);
}

void sub_1922B4604()
{
}

void sub_1922B460C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39)
{
  if (*(char *)(v39 - 153) < 0) {
    operator delete(*(void **)(v39 - 176));
  }
  std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100](v39 - 144);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a37);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a35);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a39);
  _Unwind_Resume(a1);
}

uint64_t anonymous namespace'::BuildIRValueTypeWithNewShape(uint64_t a1, MIL::IRValueType *a2, MIL::IRUnknownProperty **a3)
{
  if (E5Common::Utils::IsTensor((uint64_t)a2))
  {
    uint64_t v6 = MIL::IRValueType::AsTensorType(a2);
    (*(void (**)(uint64_t))(*(void *)v6 + 88))(v6);
    uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 80))(v6);
    std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>::unordered_map((uint64_t)v65, v7);
    uint64_t v8 = MIL::IRTensorValueType::MakeWithShape();
    uint64_t v9 = (void **)__p;
    if (__p)
    {
      do
      {
        while (1)
        {
          long long v10 = (void **)*v9;
          int v11 = (std::__shared_weak_count *)v9[6];
          if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
            std::__shared_weak_count::__release_weak(v11);
          }
          if (*((char *)v9 + 39) < 0) {
            break;
          }
          operator delete(v9);
          uint64_t v9 = v10;
          if (!v10) {
            goto LABEL_73;
          }
        }
        operator delete(v9[2]);
        operator delete(v9);
        uint64_t v9 = v10;
      }
      while (v10);
    }
  }
  else
  {
    if (E5Common::Utils::IsTensorBuffer(a2, v5))
    {
      std::string v13 = (MIL::IRMemoryLayoutValueType *)MIL::IRValueType::AsMemoryLayoutType(a2);
      uint64_t v14 = (MIL::IRTensorBufferValueType *)MIL::IRMemoryLayoutValueType::AsTensorBufferType(v13);
      MIL::IRTensorBufferValueType::GetDataType(v14);
      uint64_t Strides = MIL::IRTensorBufferValueType::GetStrides(v14);
      uint64_t v63 = 0;
      std::string v17 = *(const void **)Strides;
      uint64_t v16 = *(void *)(Strides + 8);
      int64_t v18 = v16 - *(void *)Strides;
      if (v16 != *(void *)Strides)
      {
        if (v18 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        std::string::size_type v19 = operator new(v16 - *(void *)Strides);
        uint64_t v63 = v19;
        memcpy(v19, v17, v18);
        unint64_t v20 = 0;
        do
        {
          if (!MIL::IRProperty::TryAsUnknown(*((MIL::IRProperty **)v19 + v20)))
          {
            exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(exception, "tensor_buffer has known strides while the model has FlexibleShapeInfo. Strides must be unknown on all dimensions.");
            exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
            __cxa_throw(exception, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
          }
          ++v20;
        }
        while (v20 < v18 >> 3);
      }
      uint64_t InterleaveFactors = MIL::IRTensorBufferValueType::GetInterleaveFactors(v14);
      BOOL v62 = 0;
      uint64_t v37 = *(const void **)InterleaveFactors;
      uint64_t v36 = *(void *)(InterleaveFactors + 8);
      size_t v38 = v36 - *(void *)InterleaveFactors;
      if (v36 != *(void *)InterleaveFactors)
      {
        if ((v38 & 0x8000000000000000) != 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        BOOL v62 = operator new(v36 - *(void *)InterleaveFactors);
        memcpy(v62, v37, v38);
      }
      uint64_t Attributes = MIL::IRTensorBufferValueType::GetAttributes(v14);
      std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>::unordered_map((uint64_t)v65, Attributes);
      MIL::Util::GetRowAlignedStrides();
      long long v40 = v60;
      unint64_t v59 = 0;
      size_t v41 = (char *)v61 - (char *)v60;
      if (v61 != v60)
      {
        if ((v41 & 0x8000000000000000) != 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v59 = operator new((char *)v61 - (char *)v60);
        bzero(v59, v41);
        unint64_t v42 = 0;
        do
        {
          uint64_t v43 = (MIL::IRConstantProperty *)MIL::IRProperty::TryAsConstant(v40[v42]);
          if (v43)
          {
            std::string::size_type v44 = *a3;
            Int64Scalaruint64_t Value = (MIL::MILContext *)MIL::IRConstantProperty::GetInt64ScalarValue(v43);
            uint64_t Int64Scalar = MIL::IRConstantProperty::MakeInt64Scalar(v44, Int64ScalarValue);
          }
          else
          {
            if (!MIL::IRProperty::TryAsUnknown(v60[v42]))
            {
              int v57 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
              std::logic_error::logic_error(v57, "Unsupported IRProperty for strides.");
              v57->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
              __cxa_throw(v57, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
            }
            uint64_t Int64Scalar = MIL::IRUnknownProperty::Make(*a3, 0);
          }
          *((void *)v59 + v42++) = Int64Scalar;
          long long v40 = v60;
        }
        while (v42 < v61 - v60);
      }
      uint64_t v8 = MIL::IRTensorBufferValueType::MakeWithShape();
      if (v59) {
        operator delete(v59);
      }
      if (v60) {
        operator delete(v60);
      }
      std::string v47 = (void **)__p;
      if (__p)
      {
        do
        {
          while (1)
          {
            std::string v48 = (void **)*v47;
            size_t v49 = (std::__shared_weak_count *)v47[6];
            if (v49 && !atomic_fetch_add(&v49->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
              std::__shared_weak_count::__release_weak(v49);
            }
            if (*((char *)v47 + 39) < 0) {
              break;
            }
            operator delete(v47);
            std::string v47 = v48;
            if (!v48) {
              goto LABEL_58;
            }
          }
          operator delete(v47[2]);
          operator delete(v47);
          std::string v47 = v48;
        }
        while (v48);
      }
LABEL_58:
      uint64_t v50 = v65[0];
      v65[0] = 0;
      if (v50) {
        operator delete(v50);
      }
      if (v62) {
        operator delete(v62);
      }
      uint64_t v51 = v63;
      if (v63) {
        goto LABEL_74;
      }
      return v8;
    }
    if (E5Common::Utils::IsPixelBuffer(a2, v12))
    {
      uint64_t v22 = (MIL::IRMemoryLayoutValueType *)MIL::IRValueType::AsMemoryLayoutType(a2);
      uint64_t v23 = (MIL::IRPixelBufferValueType *)MIL::IRMemoryLayoutValueType::AsPixelBufferType(v22);
      MIL::IRPixelBufferValueType::GetPixelFormatType(v23);
      uint64_t BytesPerRow = MIL::IRPixelBufferValueType::TryGetBytesPerRow(v23);
      uint64_t v25 = MIL::IRPixelBufferValueType::GetAttributes(v23);
      std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>::unordered_map((uint64_t)v65, v25);
      if (BytesPerRow)
      {
        std::string::size_type v64 = 0;
        uint64_t v26 = *(const void **)BytesPerRow;
        size_t v27 = *(void *)(BytesPerRow + 8) - *(void *)BytesPerRow;
        if (v27)
        {
          if ((v27 & 0x8000000000000000) != 0) {
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          std::string::size_type v64 = operator new(v27);
          memcpy(v64, v26, v27);
        }
        uint64_t v8 = MIL::IRPixelBufferValueType::MakeWithShape();
        if (v64) {
          operator delete(v64);
        }
      }
      else
      {
        MIL::IRPixelBufferValueType::GetPixelFormatType(v23);
        uint64_t v8 = MIL::IRPixelBufferValueType::MakeWithShape();
      }
      std::string v52 = (void **)__p;
      if (__p)
      {
        do
        {
          while (1)
          {
            BOOL v53 = (void **)*v52;
            uint64_t v54 = (std::__shared_weak_count *)v52[6];
            if (v54 && !atomic_fetch_add(&v54->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
              std::__shared_weak_count::__release_weak(v54);
            }
            if (*((char *)v52 + 39) < 0) {
              break;
            }
            operator delete(v52);
            std::string v52 = v53;
            if (!v53) {
              goto LABEL_73;
            }
          }
          operator delete(v52[2]);
          operator delete(v52);
          std::string v52 = v53;
        }
        while (v53);
      }
    }
    else
    {
      if (!E5Common::Utils::IsState(a2, v21))
      {
        uint64_t v58 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::invalid_argument::invalid_argument[abi:ne180100](v58, "BuildIRValueTypeWithNewShape: Unsupported IRValueType.");
        __cxa_throw(v58, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
      }
      long long v28 = (MIL::IRStateValueType *)MIL::IRValueType::AsStateType(a2);
      Wrappeduint64_t Type = (MIL::IRValueType *)MIL::IRStateValueType::GetWrappedType(v28);
      uint64_t v30 = MIL::IRValueType::AsTensorType(WrappedType);
      (*(void (**)(uint64_t))(*(void *)v30 + 88))(v30);
      uint64_t v31 = (*(uint64_t (**)(uint64_t))(*(void *)v30 + 80))(v30);
      std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>::unordered_map((uint64_t)v65, v31);
      MIL::IRTensorValueType::MakeWithShape();
      uint64_t v8 = MIL::IRStateValueType::Make();
      size_t v32 = (void **)__p;
      if (__p)
      {
        do
        {
          while (1)
          {
            int v33 = (void **)*v32;
            BOOL v34 = (std::__shared_weak_count *)v32[6];
            if (v34 && !atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
              std::__shared_weak_count::__release_weak(v34);
            }
            if (*((char *)v32 + 39) < 0) {
              break;
            }
            operator delete(v32);
            size_t v32 = v33;
            if (!v33) {
              goto LABEL_73;
            }
          }
          operator delete(v32[2]);
          operator delete(v32);
          size_t v32 = v33;
        }
        while (v33);
      }
    }
  }
LABEL_73:
  uint64_t v51 = v65[0];
  v65[0] = 0;
  if (v51) {
LABEL_74:
  }
    operator delete(v51);
  return v8;
}

void sub_1922B4E44(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1922B4E58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,char a22)
{
  if (__p)
  {
    operator delete(__p);
    std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100]((uint64_t)&a22);
    _Unwind_Resume(a1);
  }
  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100]((uint64_t)&a22);
  _Unwind_Resume(a1);
}

void sub_1922B4EDC()
{
  __cxa_free_exception(v0);
  JUMPOUT(0x1922B4F10);
}

void sub_1922B4EEC()
{
}

void sub_1922B4EF4()
{
  __cxa_free_exception(v0);
  JUMPOUT(0x1922B4F4CLL);
}

void sub_1922B4F04()
{
}

void sub_1922B4F0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (__p) {
    operator delete(__p);
  }
  if (a13) {
    operator delete(a13);
  }
  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100]((uint64_t)&a22);
  if (a16) {
    operator delete(a16);
  }
  if (v22) {
    operator delete(v22);
  }
  _Unwind_Resume(a1);
}

void EspressoLight::espresso_aot_plan::prepare(EspressoLight::espresso_aot_plan *this)
{
  uint64_t v498 = *MEMORY[0x1E4F143B8];
  if (!EspressoLight::espresso_aot_plan::platf) {
    Espresso::throw_exception_selector<Espresso::generic_error>("set_platform must be called before prepare.");
  }
  EspressoLight::espresso_aot_plan::get_network(this, &v481);
  if (!v481) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Null network. Cannot prepare plan.");
  }
  uint64_t v2 = Espresso::DTypeConverter::DTypeConverter((Espresso::DTypeConverter *)&__dst, v481);
  Espresso::DTypeConverter::PrepareNetworkForConversion(v2);
  Espresso::DTypeConverter::~DTypeConverter((Espresso::DTypeConverter *)&__dst);
  EspressoLight::espresso_aot_plan::identify_segments(this);
  if (Espresso::multi_head_aot_helper_t::is_needed_for ((uint64_t)&v481))
  {
    int v3 = v481;
    unint64_t v4 = operator new(0x48uLL);
    v4[1] = 0;
    v4[2] = 0;
    *unint64_t v4 = &unk_1EE387C08;
    uint64_t v5 = Espresso::multi_head_aot_helper_t::multi_head_aot_helper_t((Espresso::multi_head_aot_helper_t *)(v4 + 3), v3);
    uint64_t v6 = v481;
    *((void *)v481 + 171) = v5;
    uint64_t v7 = (std::__shared_weak_count *)*((void *)v6 + 172);
    *((void *)v6 + 172) = v4;
    if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    uint64_t v8 = v481;
    long long __dst = (char *)operator new(0x20uLL);
    long long v497 = xmmword_192DBF730;
    strcpy(__dst, "per_network_configuration");
    p_dst = &__dst;
    uint64_t v9 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v8 + 59, &__dst, (uint64_t)&std::piecewise_construct, (_OWORD **)&p_dst);
    MEMORY[0x192FF0F50]((char *)v9 + 56, "1");
    if (SHIBYTE(v497) < 0) {
      operator delete(__dst);
    }
  }
  EspressoLight::espresso_aot_plan::compile_segments(this, &v480);
  std::unordered_map<std::string,std::string>::unordered_map((uint64_t)__p, (uint64_t)this + 1176);
  Espresso::AOT::Builder::Builder(v479, __p, *((unsigned __int8 *)this + 1169));
  long long v10 = v478;
  if (v478)
  {
    while (1)
    {
      int v11 = *(char **)v10;
      if (v10[63] < 0)
      {
        operator delete(*((void **)v10 + 5));
        if ((v10[39] & 0x80000000) == 0) {
          goto LABEL_12;
        }
LABEL_15:
        operator delete(*((void **)v10 + 2));
        operator delete(v10);
        long long v10 = v11;
        if (!v11) {
          break;
        }
      }
      else
      {
        if (v10[39] < 0) {
          goto LABEL_15;
        }
LABEL_12:
        operator delete(v10);
        long long v10 = v11;
        if (!v11) {
          break;
        }
      }
    }
  }
  uint64_t v12 = __p[0];
  __p[0] = 0;
  if (v12) {
    operator delete(v12);
  }
  HIBYTE(v497) = 7;
  strcpy((char *)&__dst, "default");
  std::vector<std::string>::vector[abi:ne180100](&v474, (uint64_t)&__dst, 1uLL);
  if (SHIBYTE(v497) < 0)
  {
    operator delete(__dst);
    std::string v13 = (void *)*((void *)v481 + 97);
    uint64_t v14 = (char *)v481 + 784;
    if (v13 != (void *)((char *)v481 + 784)) {
      goto LABEL_20;
    }
  }
  else
  {
    std::string v13 = (void *)*((void *)v481 + 97);
    uint64_t v14 = (char *)v481 + 784;
    if (v13 != (void *)((char *)v481 + 784))
    {
LABEL_20:
      std::string::size_type v15 = v475;
      while (1)
      {
        uint64_t v16 = (long long *)(v13 + 4);
        if ((unint64_t)v15 >= v476)
        {
          std::string::size_type v15 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v474, (uint64_t)v16);
          v475 = v15;
          int64_t v18 = (char *)v13[1];
          if (v18) {
            goto LABEL_29;
          }
        }
        else if (*((char *)v13 + 55) < 0)
        {
          std::string::__init_copy_ctor_external(v15++, (const std::string::value_type *)v13[4], v13[5]);
          v475 = v15;
          int64_t v18 = (char *)v13[1];
          if (v18)
          {
            do
            {
LABEL_29:
              std::string::size_type v19 = v18;
              int64_t v18 = *(char **)v18;
            }
            while (v18);
            goto LABEL_21;
          }
        }
        else
        {
          long long v17 = *v16;
          v15->__r_.__value_.__r.__words[2] = v13[6];
          *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v17;
          v475 = ++v15;
          int64_t v18 = (char *)v13[1];
          if (v18) {
            goto LABEL_29;
          }
        }
        do
        {
          std::string::size_type v19 = (char *)v13[2];
          BOOL v35 = *(void *)v19 == (void)v13;
          std::string v13 = v19;
        }
        while (!v35);
LABEL_21:
        std::string v13 = v19;
        if (v19 == v14) {
          goto LABEL_36;
        }
      }
    }
  }
  std::string::size_type v15 = v475;
LABEL_36:
  long long v443 = (int **)v474;
  if (v474 != v15)
  {
    unint64_t v444 = this;
    Espresso::net::reload_copy((uint64_t *)&v472, v481);
    uint64_t v470 = 0;
    uint64_t v471 = 0;
    v469 = (void **)&v470;
    unint64_t v20 = (long long *)*((void *)v472 + 103);
    float v21 = (long long *)((char *)v472 + 832);
    if (v20 == (long long *)((char *)v472 + 832))
    {
LABEL_38:
      uint64_t v22 = v481;
      uint64_t v23 = (char *)*((void *)v481 + 98);
      if (!v23) {
        goto LABEL_78;
      }
      size_t v24 = (char *)v481 + 784;
      int v25 = *((char *)v443 + 23);
      size_t v26 = v25 >= 0 ? *((unsigned __int8 *)v443 + 23) : (size_t)v443[1];
      size_t v27 = v25 >= 0 ? v443 : (int **)*v443;
      long long v28 = (char *)v481 + 784;
      do
      {
        int v29 = v23[55];
        if (v29 >= 0) {
          size_t v30 = v23[55];
        }
        else {
          size_t v30 = *((void *)v23 + 5);
        }
        if (v29 >= 0) {
          uint64_t v31 = v23 + 32;
        }
        else {
          uint64_t v31 = (const void *)*((void *)v23 + 4);
        }
        if (v26 >= v30) {
          size_t v32 = v30;
        }
        else {
          size_t v32 = v26;
        }
        int v33 = memcmp(v31, v27, v32);
        BOOL v34 = v30 < v26;
        if (v33) {
          BOOL v34 = v33 < 0;
        }
        BOOL v35 = !v34;
        if (v34) {
          uint64_t v36 = (char **)(v23 + 8);
        }
        else {
          uint64_t v36 = (char **)v23;
        }
        if (v35) {
          long long v28 = v23;
        }
        uint64_t v23 = *v36;
      }
      while (*v36);
      if (v28 == v24) {
        goto LABEL_78;
      }
      int v37 = v28[55];
      if (v37 >= 0) {
        size_t v38 = v28[55];
      }
      else {
        size_t v38 = *((void *)v28 + 5);
      }
      if (v37 >= 0) {
        uint64_t v39 = v28 + 32;
      }
      else {
        uint64_t v39 = (const void *)*((void *)v28 + 4);
      }
      if (v38 >= v26) {
        size_t v40 = v26;
      }
      else {
        size_t v40 = v38;
      }
      int v41 = memcmp(v27, v39, v40);
      BOOL v42 = v26 >= v38;
      if (v41) {
        BOOL v42 = v41 >= 0;
      }
      if (!v42 || (v43 = (char *)*((void *)v28 + 10), std::string::size_type v44 = v28 + 88, v43 == v28 + 88))
      {
LABEL_78:
        uint64_t v45 = *((void *)v22 + 171);
        int v46 = v472;
        if (!v45) {
          goto LABEL_789;
        }
LABEL_79:
        Espresso::multi_head_aot_helper_t::remove_unused_layers(v45, v46, v443);
        uint64_t v47 = (uint64_t)v444;
        Espresso::net::_tag_inputs_and_outputs(v472);
        std::string v48 = v473;
        unint64_t v466 = v472;
        v467 = v473;
        if (v473) {
          goto LABEL_80;
        }
        goto LABEL_81;
      }
      while (2)
      {
        uint64_t v77 = (void **)v470;
        uint64_t v78 = (void **)&v470;
        uint64_t v79 = (void **)&v470;
        if (v470)
        {
          int v80 = v43[55];
          if (v80 >= 0) {
            size_t v81 = v43[55];
          }
          else {
            size_t v81 = *((void *)v43 + 5);
          }
          if (v80 >= 0) {
            BOOL v82 = v43 + 32;
          }
          else {
            BOOL v82 = (const void *)*((void *)v43 + 4);
          }
          do
          {
            while (1)
            {
              uint64_t v78 = v77;
              int v85 = v77[4];
              int v83 = v77 + 4;
              size_t v84 = v85;
              int v86 = *((char *)v83 + 23);
              if (v86 >= 0) {
                size_t v87 = *((unsigned __int8 *)v83 + 23);
              }
              else {
                size_t v87 = v83[1];
              }
              if (v86 >= 0) {
                BOOL v88 = v83;
              }
              else {
                BOOL v88 = v84;
              }
              if (v87 >= v81) {
                size_t v89 = v81;
              }
              else {
                size_t v89 = v87;
              }
              int v90 = memcmp(v82, v88, v89);
              BOOL v91 = v81 < v87;
              if (v90) {
                BOOL v91 = v90 < 0;
              }
              if (!v91) {
                break;
              }
              uint64_t v77 = (void **)*v78;
              uint64_t v79 = v78;
              if (!*v78) {
                goto LABEL_166;
              }
            }
            int v92 = memcmp(v88, v82, v89);
            BOOL v93 = v87 < v81;
            if (v92) {
              BOOL v93 = v92 < 0;
            }
            if (!v93)
            {
              uint64_t v94 = (char *)v78;
              goto LABEL_195;
            }
            uint64_t v77 = (void **)v78[1];
          }
          while (v77);
          uint64_t v79 = v78 + 1;
        }
LABEL_166:
        uint64_t v94 = (char *)operator new(0x78uLL);
        uint64_t v95 = (std::string *)(v94 + 32);
        if (v43[55] < 0)
        {
          std::string::__init_copy_ctor_external(v95, *((const std::string::value_type **)v43 + 4), *((void *)v43 + 5));
        }
        else
        {
          long long v96 = *((_OWORD *)v43 + 2);
          *((void *)v94 + 6) = *((void *)v43 + 6);
          *(_OWORD *)&v95->__r_.__value_.__l.__data_ = v96;
        }
        *((void *)v94 + 14) = 0;
        *((_OWORD *)v94 + 5) = 0u;
        *((_OWORD *)v94 + 6) = 0u;
        *(_OWORD *)(v94 + 56) = xmmword_192DC3600;
        *((void *)v94 + 9) = 0xFFFFFFFF00000001;
        *(void *)uint64_t v94 = 0;
        *((void *)v94 + 1) = 0;
        *((void *)v94 + 2) = v78;
        uint64_t *v79 = v94;
        int v97 = v94;
        if (*v469)
        {
          v469 = (void **)*v469;
          int v97 = (char *)*v79;
        }
        size_t v98 = v470;
        BOOL v35 = v97 == v470;
        v97[24] = v97 == v470;
        if (v35) {
          goto LABEL_194;
        }
        while (1)
        {
          uint64_t v99 = (uint64_t *)*((void *)v97 + 2);
          if (*((unsigned char *)v99 + 24)) {
            goto LABEL_194;
          }
          uint64_t v100 = (char *)v99[2];
          uint64_t v101 = *(void *)v100;
          if (*(uint64_t **)v100 == v99) {
            break;
          }
          if (!v101 || (v103 = *(unsigned __int8 *)(v101 + 24), unint64_t v102 = (unsigned char *)(v101 + 24), v103))
          {
            if ((char *)*v99 == v97)
            {
              uint64_t v130 = *((void *)v97 + 1);
              uint64_t *v99 = v130;
              if (v130)
              {
                *(void *)(v130 + 16) = v99;
                uint64_t v100 = (char *)v99[2];
              }
              *((void *)v97 + 2) = v100;
              *(void *)(v99[2] + 8 * (*(void *)v99[2] != (void)v99)) = v97;
              *((void *)v97 + 1) = v99;
              v99[2] = (uint64_t)v97;
              uint64_t v100 = (char *)*((void *)v97 + 2);
              v97[24] = 1;
              v100[24] = 0;
              uint64_t v99 = (uint64_t *)*((void *)v100 + 1);
              uint64_t v109 = *v99;
              *((void *)v100 + 1) = *v99;
              if (!v109) {
                goto LABEL_192;
              }
            }
            else
            {
              *((unsigned char *)v99 + 24) = 1;
              v100[24] = 0;
              uint64_t v99 = (uint64_t *)*((void *)v100 + 1);
              uint64_t v109 = *v99;
              *((void *)v100 + 1) = *v99;
              if (!v109)
              {
LABEL_192:
                v99[2] = *((void *)v100 + 2);
                *(void *)(*((void *)v100 + 2) + 8 * (**((void **)v100 + 2) != (void)v100)) = v99;
                uint64_t *v99 = (uint64_t)v100;
                goto LABEL_193;
              }
            }
            *(void *)(v109 + 16) = v100;
            goto LABEL_192;
          }
LABEL_174:
          *((unsigned char *)v99 + 24) = 1;
          int v97 = v100;
          v100[24] = v100 == v98;
          *unint64_t v102 = 1;
          if (v100 == v98) {
            goto LABEL_194;
          }
        }
        uint64_t v104 = *((void *)v100 + 1);
        if (v104)
        {
          int v105 = *(unsigned __int8 *)(v104 + 24);
          unint64_t v102 = (unsigned char *)(v104 + 24);
          if (!v105) {
            goto LABEL_174;
          }
        }
        if ((char *)*v99 == v97)
        {
          *((unsigned char *)v99 + 24) = 1;
          v100[24] = 0;
          uint64_t v108 = v99[1];
          *(void *)uint64_t v100 = v108;
          if (v108) {
            goto LABEL_186;
          }
        }
        else
        {
          size_t v106 = (uint64_t **)v99[1];
          int v107 = *v106;
          v99[1] = (uint64_t)*v106;
          if (v107)
          {
            v107[2] = (uint64_t)v99;
            uint64_t v100 = (char *)v99[2];
          }
          v106[2] = (uint64_t *)v100;
          *(void *)(v99[2] + 8 * (*(void *)v99[2] != (void)v99)) = v106;
          *size_t v106 = v99;
          v99[2] = (uint64_t)v106;
          uint64_t v100 = (char *)v106[2];
          uint64_t v99 = *(uint64_t **)v100;
          *((unsigned char *)v106 + 24) = 1;
          v100[24] = 0;
          uint64_t v108 = v99[1];
          *(void *)uint64_t v100 = v108;
          if (v108) {
LABEL_186:
          }
            *(void *)(v108 + 16) = v100;
        }
        v99[2] = *((void *)v100 + 2);
        *(void *)(*((void *)v100 + 2) + 8 * (**((void **)v100 + 2) != (void)v100)) = v99;
        v99[1] = (uint64_t)v100;
LABEL_193:
        *((void *)v100 + 2) = v99;
LABEL_194:
        ++v471;
LABEL_195:
        long long v110 = *(_OWORD *)(v43 + 56);
        long long v111 = *(_OWORD *)(v43 + 72);
        *((void *)v94 + 11) = *((void *)v43 + 11);
        *(_OWORD *)(v94 + 72) = v111;
        *(_OWORD *)(v94 + 56) = v110;
        if (v94 != v43)
        {
          uint64_t v112 = (char *)*((void *)v94 + 12);
          uint64_t v114 = (char *)*((void *)v43 + 12);
          long long v113 = (unsigned char *)*((void *)v43 + 13);
          size_t v115 = v113 - v114;
          unint64_t v116 = (v113 - v114) >> 2;
          uint64_t v117 = *((void *)v94 + 14);
          if (v116 > (v117 - (uint64_t)v112) >> 2)
          {
            if (v112)
            {
              *((void *)v94 + 13) = v112;
              operator delete(v112);
              uint64_t v117 = 0;
              *((void *)v94 + 12) = 0;
              *((void *)v94 + 13) = 0;
              *((void *)v94 + 14) = 0;
            }
            if ((v115 & 0x8000000000000000) != 0) {
              goto LABEL_829;
            }
            uint64_t v118 = v117 >> 1;
            if (v117 >> 1 <= v116) {
              uint64_t v118 = (v113 - v114) >> 2;
            }
            unint64_t v119 = (unint64_t)v117 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v118;
            if (v119 >> 62) {
LABEL_829:
            }
              std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
            int v120 = (char *)operator new(4 * v119);
            uint64_t v112 = v120;
            *((void *)v94 + 13) = v120;
            uint64_t v121 = v94 + 104;
            *((void *)v121 - 1) = v120;
            *((void *)v121 + 1) = &v120[4 * v119];
            if (v113 != v114) {
              memcpy(v120, v114, v113 - v114);
            }
            goto LABEL_216;
          }
          size_t v123 = (char *)*((void *)v94 + 13);
          uint64_t v121 = v94 + 104;
          int v122 = v123;
          size_t v124 = v123 - v112;
          unint64_t v125 = (v123 - v112) >> 2;
          if (v125 >= v116)
          {
            if (v113 == v114) {
              goto LABEL_216;
            }
            unint64_t v127 = v112;
            size_t v126 = (char *)*((void *)v43 + 12);
            goto LABEL_215;
          }
          if (v122 != v112)
          {
            memmove(v112, *((const void **)v43 + 12), v124);
            uint64_t v112 = *(char **)v121;
          }
          size_t v126 = &v114[4 * v125];
          size_t v115 = v113 - v126;
          if (v113 != v126)
          {
            unint64_t v127 = v112;
LABEL_215:
            memmove(v127, v126, v115);
          }
LABEL_216:
          *(void *)uint64_t v121 = &v112[v115];
        }
        uint64_t v128 = (char *)*((void *)v43 + 1);
        if (v128)
        {
          do
          {
            std::string::size_type v129 = v128;
            uint64_t v128 = *(char **)v128;
          }
          while (v128);
        }
        else
        {
          do
          {
            std::string::size_type v129 = (char *)*((void *)v43 + 2);
            BOOL v35 = *(void *)v129 == (void)v43;
            uint64_t v43 = v129;
          }
          while (!v35);
        }
        uint64_t v43 = v129;
        if (v129 != v44) {
          continue;
        }
        break;
      }
      uint64_t v45 = *((void *)v481 + 171);
      int v46 = v472;
      if (v45) {
        goto LABEL_79;
      }
LABEL_789:
      uint64_t v47 = (uint64_t)v444;
      std::string v48 = v473;
      unint64_t v466 = v46;
      v467 = v473;
      if (!v473) {
        goto LABEL_81;
      }
LABEL_80:
      atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_81:
      Espresso::compute_network_shape_starting_from_data_shapes((uint64_t *)&v466, (uint64_t)&v469, (uint64_t)&p_dst);
      size_t v49 = v467;
      if (v467 && !atomic_fetch_add(&v467->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
        uint64_t v50 = v473;
        v464 = v472;
        v465 = v473;
        if (v473) {
LABEL_84:
        }
          atomic_fetch_add_explicit(&v50->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      else
      {
        uint64_t v50 = v473;
        v464 = v472;
        v465 = v473;
        if (v473) {
          goto LABEL_84;
        }
      }
      Espresso::shape_network(&v464, (Espresso::net *)&p_dst);
      uint64_t v51 = v465;
      if (v465 && !atomic_fetch_add(&v465->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
        std::__shared_weak_count::__release_weak(v51);
      }
      std::string v52 = Espresso::DTypeConverter::DTypeConverter((Espresso::DTypeConverter *)&__dst, v472);
      Espresso::DTypeConverter::PrepareNetworkForConversion(v52);
      BOOL v53 = v473;
      v463[0] = v472;
      v463[1] = v473;
      if (v473) {
        atomic_fetch_add_explicit(&v473->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      EspressoLight::espresso_aot_plan::identify_segments(v47, v463);
      if (v53 && !atomic_fetch_add(&v53->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
        std::__shared_weak_count::__release_weak(v53);
        uint64_t v54 = v473;
        v461 = v472;
        v462 = v473;
        if (v473) {
LABEL_93:
        }
          atomic_fetch_add_explicit(&v54->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      else
      {
        uint64_t v54 = v473;
        v461 = v472;
        v462 = v473;
        if (v473) {
          goto LABEL_93;
        }
      }
      Espresso::compress_segments_to_dev_ops((uint64_t *)&v461, (uint64_t *)&v480);
      long long v55 = v462;
      if (v462 && !atomic_fetch_add(&v462->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
        std::__shared_weak_count::__release_weak(v55);
      }
      if (!*((void *)v481 + 99)) {
        goto LABEL_239;
      }
      int v56 = *((char *)v443 + 23);
      if (v56 < 0)
      {
        if (v443[1] != (int *)7) {
          goto LABEL_239;
        }
        int v57 = *v443;
      }
      else
      {
        int v57 = (int *)v443;
        if (v56 != 7) {
          goto LABEL_239;
        }
      }
      int v131 = *v57;
      int v132 = *(int *)((char *)v57 + 3);
      if (v131 == 1634100580 && v132 == 1953264993)
      {
        if (*((void *)v481 + 171)) {
LABEL_240:
        }
      }
      else
      {
LABEL_239:
        if (*((void *)v481 + 171)) {
          goto LABEL_240;
        }
      }
      uint64_t v134 = v472;
      v459 = v472;
      v460 = v473;
      if (v473) {
        atomic_fetch_add_explicit(&v473->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      v494 = 0;
      uint64_t v495 = 0;
      unint64_t v493 = (uint64_t *)&v494;
      long long v490 = 0u;
      long long v491 = 0u;
      int v492 = 1065353216;
      unint64_t v489 = 0;
      uint64_t v135 = *((void *)v134 + 4);
      if (*((void *)v134 + 5) == v135) {
        goto LABEL_457;
      }
      unint64_t v136 = 0;
      while (1)
      {
        uint64_t v138 = *(void *)(v135 + 16 * v136);
        uint64_t v139 = (void *)(v138 + 40);
        int v140 = *(char *)(v138 + 63);
        if (v140 < 0)
        {
          if (*(void *)(v138 + 48) != 16) {
            goto LABEL_246;
          }
          uint64_t v139 = (void *)*v139;
        }
        else if (v140 != 16)
        {
          goto LABEL_246;
        }
        uint64_t v142 = (void *)*v139;
        uint64_t v141 = v139[1];
        if (v142 != (void *)0x5F747865746E6F63 || v141 != 0x726566736E617274) {
          goto LABEL_246;
        }
        int v144 = *(const void **)(v138 + 64);
        if (!v144
        {
          Espresso::throw_exception_selector<Espresso::generic_error>("Unable to cast to context transfer kernel");
        }
        long long v146 = v145;
        v486.__r_.__value_.__r.__words[0] = (std::string::size_type)&v489;
        uint64_t v450 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v134 + 56, &v489, (uint64_t)&std::piecewise_construct, (uint64_t **)&v486);
        uint64_t v134 = v459;
        v486.__r_.__value_.__r.__words[0] = (std::string::size_type)&v489;
        unint64_t v449 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v459 + 96, &v489, (uint64_t)&std::piecewise_construct, (uint64_t **)&v486);
        uint64_t v447 = (*(uint64_t (**)(void *))(*(void *)v146 + 320))(v146);
        uint64_t v148 = v450[3];
        uint64_t v147 = v450[4];
        unint64_t v448 = 0xAAAAAAAAAAAAAAABLL * ((v147 - v148) >> 3);
        if (v448 != 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v449[4] - v449[3]) >> 3)) {
          Espresso::throw_exception_selector<Espresso::generic_error>("Invalid context transfer op. Mismatched input/output count.");
        }
        if (v147 == v148) {
          goto LABEL_246;
        }
        unint64_t v149 = 0;
        while (2)
        {
          uint64_t v150 = v450[3] + 24 * v149;
          uint64_t v151 = v449[3];
          int v152 = *(_DWORD *)(v447 + 20);
          int v153 = *(_DWORD *)(v447 + 28);
          if (*(char *)(v150 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v486, *(const std::string::value_type **)v150, *(void *)(v150 + 8));
          }
          else
          {
            long long v154 = *(_OWORD *)v150;
            v486.__r_.__value_.__r.__words[2] = *(void *)(v150 + 16);
            *(_OWORD *)&v486.__r_.__value_.__l.__data_ = v154;
          }
          std::string __str = (std::string *)(v151 + 24 * v149);
          unint64_t v452 = v149;
          int v487 = v152;
          int v488 = v153;
          long long v155 = (uint64_t *)&v494;
          uint64_t v156 = (uint64_t *)&v494;
          uint64_t v157 = (uint64_t)v494;
          if (!v494)
          {
LABEL_365:
            unint64_t v203 = v452;
            uint8x8_t v202 = (char *)operator new(0x58uLL);
            size_t v204 = (std::string *)(v202 + 32);
            if (SHIBYTE(v486.__r_.__value_.__r.__words[2]) < 0)
            {
              std::string::__init_copy_ctor_external(v204, v486.__r_.__value_.__l.__data_, v486.__r_.__value_.__l.__size_);
              int v152 = v487;
              int v153 = v488;
            }
            else
            {
              *(_OWORD *)&v204->__r_.__value_.__l.__data_ = *(_OWORD *)&v486.__r_.__value_.__l.__data_;
              *((void *)v202 + 6) = *((void *)&v486.__r_.__value_.__l + 2);
            }
            *((_DWORD *)v202 + 14) = v152;
            *((_DWORD *)v202 + 15) = v153;
            *((void *)v202 + 9) = 0;
            *((void *)v202 + 10) = 0;
            *((void *)v202 + 8) = 0;
            *(void *)uint8x8_t v202 = 0;
            *((void *)v202 + 1) = 0;
            *((void *)v202 + 2) = v155;
            *uint64_t v156 = (uint64_t)v202;
            uint64_t v205 = v202;
            if (*v493)
            {
              unint64_t v493 = (uint64_t *)*v493;
              uint64_t v205 = (char *)*v156;
            }
            uint64_t v206 = (uint64_t)v494;
            v205[24] = v205 == v494;
            if (v205 == (char *)v206) {
              goto LABEL_391;
            }
            while (1)
            {
              uint64_t v207 = *((void *)v205 + 2);
              if (*(unsigned char *)(v207 + 24)) {
                goto LABEL_391;
              }
              size_t v208 = *(char **)(v207 + 16);
              uint64_t v209 = *(void *)v208;
              if (*(void *)v208 == v207)
              {
                uint64_t v212 = *((void *)v208 + 1);
                if (!v212 || (v213 = *(unsigned __int8 *)(v212 + 24), BOOL v210 = (unsigned char *)(v212 + 24), v213))
                {
                  if (*(char **)v207 == v205)
                  {
                    *(unsigned char *)(v207 + 24) = 1;
                    v208[24] = 0;
                    uint64_t v216 = *(void *)(v207 + 8);
                    *(void *)size_t v208 = v216;
                    if (v216) {
                      goto LABEL_384;
                    }
                  }
                  else
                  {
                    long long v214 = *(uint64_t **)(v207 + 8);
                    uint64_t v215 = *v214;
                    *(void *)(v207 + 8) = *v214;
                    if (v215)
                    {
                      *(void *)(v215 + 16) = v207;
                      size_t v208 = *(char **)(v207 + 16);
                    }
                    v214[2] = (uint64_t)v208;
                    *(void *)(*(void *)(v207 + 16) + 8 * (**(void **)(v207 + 16) != v207)) = v214;
                    uint64_t *v214 = v207;
                    *(void *)(v207 + 16) = v214;
                    size_t v208 = (char *)v214[2];
                    uint64_t v207 = *(void *)v208;
                    *((unsigned char *)v214 + 24) = 1;
                    v208[24] = 0;
                    uint64_t v216 = *(void *)(v207 + 8);
                    *(void *)size_t v208 = v216;
                    if (v216) {
LABEL_384:
                    }
                      *(void *)(v216 + 16) = v208;
                  }
                  *(void *)(v207 + 16) = *((void *)v208 + 2);
                  *(void *)(*((void *)v208 + 2) + 8 * (**((void **)v208 + 2) != (void)v208)) = v207;
                  *(void *)(v207 + 8) = v208;
LABEL_390:
                  *((void *)v208 + 2) = v207;
LABEL_391:
                  ++v495;
LABEL_392:
                  std::string::operator=((std::string *)(v202 + 64), __str);
                  unint64_t v149 = v203 + 1;
                  if (SHIBYTE(v486.__r_.__value_.__r.__words[2]) < 0) {
                    goto LABEL_262;
                  }
                  goto LABEL_263;
                }
              }
              else if (!v209 || (v211 = *(unsigned __int8 *)(v209 + 24), BOOL v210 = (unsigned char *)(v209 + 24), v211))
              {
                if (*(char **)v207 == v205)
                {
                  uint64_t v218 = *((void *)v205 + 1);
                  *(void *)uint64_t v207 = v218;
                  if (v218)
                  {
                    *(void *)(v218 + 16) = v207;
                    size_t v208 = *(char **)(v207 + 16);
                  }
                  *((void *)v205 + 2) = v208;
                  *(void *)(*(void *)(v207 + 16) + 8 * (**(void **)(v207 + 16) != v207)) = v205;
                  *((void *)v205 + 1) = v207;
                  *(void *)(v207 + 16) = v205;
                  size_t v208 = (char *)*((void *)v205 + 2);
                  v205[24] = 1;
                  v208[24] = 0;
                  uint64_t v207 = *((void *)v208 + 1);
                  std::string::size_type v217 = *(char **)v207;
                  *((void *)v208 + 1) = *(void *)v207;
                  if (v217) {
LABEL_388:
                  }
                    *((void *)v217 + 2) = v208;
                }
                else
                {
                  *(unsigned char *)(v207 + 24) = 1;
                  v208[24] = 0;
                  uint64_t v207 = *((void *)v208 + 1);
                  std::string::size_type v217 = *(char **)v207;
                  *((void *)v208 + 1) = *(void *)v207;
                  if (v217) {
                    goto LABEL_388;
                  }
                }
                *(void *)(v207 + 16) = *((void *)v208 + 2);
                *(void *)(*((void *)v208 + 2) + 8 * (**((void **)v208 + 2) != (void)v208)) = v207;
                *(void *)uint64_t v207 = v208;
                goto LABEL_390;
              }
              *(unsigned char *)(v207 + 24) = 1;
              uint64_t v205 = v208;
              v208[24] = v208 == (char *)v206;
              unsigned char *v210 = 1;
              if (v208 == (char *)v206) {
                goto LABEL_391;
              }
            }
          }
          int v446 = SHIBYTE(v486.__r_.__value_.__r.__words[2]);
          long long v445 = *(_OWORD *)&v486.__r_.__value_.__l.__data_;
          if ((v486.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(v486.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = v486.__r_.__value_.__l.__size_;
          }
          if ((v486.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string v159 = &v486;
          }
          else {
            std::string v159 = (std::string *)v486.__r_.__value_.__r.__words[0];
          }
          int v160 = (uint64_t *)&v494;
          uint64_t v161 = (uint64_t)v494;
          do
          {
            int v162 = *(char *)(v161 + 55);
            if (v162 >= 0) {
              size_t v163 = *(unsigned __int8 *)(v161 + 55);
            }
            else {
              size_t v163 = *(void *)(v161 + 40);
            }
            if (v162 >= 0) {
              uint64_t v164 = (const void *)(v161 + 32);
            }
            else {
              uint64_t v164 = *(const void **)(v161 + 32);
            }
            if (size >= v163) {
              size_t v165 = v163;
            }
            else {
              size_t v165 = size;
            }
            int v166 = memcmp(v164, v159, v165);
            BOOL v167 = v163 < size;
            if (v166) {
              BOOL v167 = v166 < 0;
            }
            if (v167)
            {
LABEL_275:
              v161 += 8;
              goto LABEL_276;
            }
            int v168 = memcmp(v159, v164, v165);
            BOOL v169 = size < v163;
            if (v168) {
              BOOL v169 = v168 < 0;
            }
            if (v169) {
              goto LABEL_292;
            }
            int v170 = *(_DWORD *)(v161 + 56);
            if (v170 < v152) {
              goto LABEL_275;
            }
            if (v152 < v170)
            {
LABEL_292:
              int v160 = (uint64_t *)v161;
            }
            else if (*(_DWORD *)(v161 + 60) < v153)
            {
              v161 += 8;
            }
            else
            {
              int v160 = (uint64_t *)v161;
            }
LABEL_276:
            uint64_t v161 = *(void *)v161;
          }
          while (v161);
          if (v160 == (uint64_t *)&v494) {
            goto LABEL_836;
          }
          int v171 = *((char *)v160 + 55);
          if (v171 >= 0) {
            size_t v172 = *((unsigned __int8 *)v160 + 55);
          }
          else {
            size_t v172 = v160[5];
          }
          if (v171 >= 0) {
            std::string::size_type v173 = v160 + 4;
          }
          else {
            std::string::size_type v173 = (const void *)v160[4];
          }
          if (v172 >= size) {
            size_t v174 = size;
          }
          else {
            size_t v174 = v172;
          }
          int v175 = memcmp(v159, v173, v174);
          BOOL v176 = size < v172;
          if (v175) {
            BOOL v176 = v175 < 0;
          }
          if (v176) {
            goto LABEL_836;
          }
          int v177 = memcmp(v173, v159, v174);
          BOOL v178 = v172 < size;
          if (v177) {
            BOOL v178 = v177 < 0;
          }
          if (!v178)
          {
            int v179 = *((_DWORD *)v160 + 14);
            if (v152 < v179 || v179 >= v152 && v153 < *((_DWORD *)v160 + 15))
            {
LABEL_836:
              while (1)
              {
                while (1)
                {
                  long long v155 = (uint64_t *)v157;
                  int v192 = *(char *)(v157 + 55);
                  if (v192 >= 0) {
                    size_t v193 = *(unsigned __int8 *)(v157 + 55);
                  }
                  else {
                    size_t v193 = *(void *)(v157 + 40);
                  }
                  if (v192 >= 0) {
                    size_t v194 = (const void *)(v157 + 32);
                  }
                  else {
                    size_t v194 = *(const void **)(v157 + 32);
                  }
                  if (v193 >= size) {
                    size_t v195 = size;
                  }
                  else {
                    size_t v195 = v193;
                  }
                  int v196 = memcmp(v159, v194, v195);
                  BOOL v197 = size < v193;
                  if (v196) {
                    BOOL v197 = v196 < 0;
                  }
                  if (!v197)
                  {
                    int v198 = memcmp(v194, v159, v195);
                    BOOL v199 = v193 < size;
                    if (v198) {
                      BOOL v199 = v198 < 0;
                    }
                    if (v199) {
                      goto LABEL_358;
                    }
                    int v200 = *(_DWORD *)(v157 + 56);
                    if (v152 >= v200) {
                      break;
                    }
                  }
LABEL_342:
                  uint64_t v157 = *(void *)v157;
                  uint64_t v156 = v155;
                  if (!*v155) {
                    goto LABEL_365;
                  }
                }
                if (v200 >= v152)
                {
                  int v201 = *(_DWORD *)(v157 + 60);
                  if (v153 >= v201)
                  {
                    if (v201 >= v153)
                    {
                      uint8x8_t v202 = (char *)v157;
                      unint64_t v203 = v452;
                      goto LABEL_392;
                    }
                    goto LABEL_358;
                  }
                  goto LABEL_342;
                }
LABEL_358:
                uint64_t v157 = *(void *)(v157 + 8);
                if (!v157)
                {
                  uint64_t v156 = v155 + 1;
                  goto LABEL_365;
                }
              }
            }
          }
          while (1)
          {
LABEL_319:
            int v180 = (char **)v157;
            int v181 = *(char *)(v157 + 55);
            if (v181 >= 0) {
              size_t v182 = *(unsigned __int8 *)(v157 + 55);
            }
            else {
              size_t v182 = *(void *)(v157 + 40);
            }
            if (v181 >= 0) {
              uint64_t v183 = (const void *)(v157 + 32);
            }
            else {
              uint64_t v183 = *(const void **)(v157 + 32);
            }
            if (v182 >= size) {
              size_t v184 = size;
            }
            else {
              size_t v184 = v182;
            }
            int v185 = memcmp(v159, v183, v184);
            BOOL v186 = size < v182;
            if (v185) {
              BOOL v186 = v185 < 0;
            }
            if (!v186)
            {
              int v187 = memcmp(v183, v159, v184);
              BOOL v188 = v182 < size;
              if (v187) {
                BOOL v188 = v187 < 0;
              }
              if (v188) {
                goto LABEL_334;
              }
              int v189 = *(_DWORD *)(v157 + 56);
              if (v152 >= v189)
              {
                if (v189 < v152) {
                  goto LABEL_334;
                }
                int v190 = *(_DWORD *)(v157 + 60);
                if (v153 >= v190) {
                  break;
                }
              }
            }
            uint64_t v157 = *(void *)v157;
            if (!*v180)
            {
              size_t v219 = v180;
              goto LABEL_399;
            }
          }
          if (v190 >= v153)
          {
            std::string::size_type v191 = (char *)v157;
            unint64_t v149 = v452;
            goto LABEL_428;
          }
LABEL_334:
          uint64_t v157 = *(void *)(v157 + 8);
          if (v157) {
            goto LABEL_319;
          }
          size_t v219 = v180 + 1;
LABEL_399:
          unint64_t v149 = v452;
          std::string::size_type v191 = (char *)operator new(0x58uLL);
          BOOL v220 = (std::string *)(v191 + 32);
          if (v446 < 0)
          {
            std::string::__init_copy_ctor_external(v220, (const std::string::value_type *)v445, *((std::string::size_type *)&v445 + 1));
            int v152 = v487;
            int v153 = v488;
          }
          else
          {
            *(_OWORD *)&v220->__r_.__value_.__l.__data_ = *(_OWORD *)&v486.__r_.__value_.__l.__data_;
            *((void *)v191 + 6) = *((void *)&v486.__r_.__value_.__l + 2);
          }
          *((_DWORD *)v191 + 14) = v152;
          *((_DWORD *)v191 + 15) = v153;
          *((void *)v191 + 9) = 0;
          *((void *)v191 + 10) = 0;
          *((void *)v191 + 8) = 0;
          *(void *)std::string::size_type v191 = 0;
          *((void *)v191 + 1) = 0;
          *((void *)v191 + 2) = v180;
          *size_t v219 = v191;
          uint64_t v221 = v191;
          if (*v493)
          {
            unint64_t v493 = (uint64_t *)*v493;
            uint64_t v221 = *v219;
          }
          uint64_t v222 = (uint64_t)v494;
          v221[24] = v221 == v494;
          if (v221 == (char *)v222) {
            goto LABEL_427;
          }
          while (2)
          {
            std::string v223 = (char **)*((void *)v221 + 2);
            if (*((unsigned char *)v223 + 24)) {
              goto LABEL_427;
            }
            uint64_t v224 = v223[2];
            uint64_t v225 = *(char ***)v224;
            if (*(char ***)v224 != v223)
            {
              if (!v225 || (v227 = *((unsigned __int8 *)v225 + 24), int64_t v226 = v225 + 3, v227))
              {
                if (*v223 == v221)
                {
                  uint64_t v243 = *((void *)v221 + 1);
                  *std::string v223 = (char *)v243;
                  if (v243)
                  {
                    *(void *)(v243 + 16) = v223;
                    uint64_t v224 = v223[2];
                  }
                  *((void *)v221 + 2) = v224;
                  *(void *)&v223[2][8 * (*(void *)v223[2] != (void)v223)] = v221;
                  *((void *)v221 + 1) = v223;
                  std::string v223[2] = v221;
                  uint64_t v224 = (char *)*((void *)v221 + 2);
                  v221[24] = 1;
                  v224[24] = 0;
                  std::string v223 = (char **)*((void *)v224 + 1);
                  unint64_t v233 = *v223;
                  *((void *)v224 + 1) = *v223;
                  if (v233) {
LABEL_424:
                  }
                    *((void *)v233 + 2) = v224;
                }
                else
                {
                  *((unsigned char *)v223 + 24) = 1;
                  v224[24] = 0;
                  std::string v223 = (char **)*((void *)v224 + 1);
                  unint64_t v233 = *v223;
                  *((void *)v224 + 1) = *v223;
                  if (v233) {
                    goto LABEL_424;
                  }
                }
                std::string v223[2] = (char *)*((void *)v224 + 2);
                *(void *)(*((void *)v224 + 2) + 8 * (**((void **)v224 + 2) != (void)v224)) = v223;
                *std::string v223 = v224;
                goto LABEL_426;
              }
LABEL_406:
              *((unsigned char *)v223 + 24) = 1;
              uint64_t v221 = v224;
              v224[24] = v224 == (char *)v222;
              *int64_t v226 = 1;
              if (v224 == (char *)v222) {
                goto LABEL_427;
              }
              continue;
            }
            break;
          }
          uint64_t v228 = *((void *)v224 + 1);
          if (v228)
          {
            int v229 = *(unsigned __int8 *)(v228 + 24);
            int64_t v226 = (unsigned char *)(v228 + 24);
            if (!v229) {
              goto LABEL_406;
            }
          }
          if (*v223 == v221)
          {
            *((unsigned char *)v223 + 24) = 1;
            v224[24] = 0;
            long long v232 = v223[1];
            *(void *)uint64_t v224 = v232;
            if (v232) {
              goto LABEL_418;
            }
          }
          else
          {
            unint64_t v230 = v223[1];
            uint64_t v231 = *(char **)v230;
            v223[1] = *(char **)v230;
            if (v231)
            {
              *((void *)v231 + 2) = v223;
              uint64_t v224 = v223[2];
            }
            *((void *)v230 + 2) = v224;
            *(void *)&v223[2][8 * (*(void *)v223[2] != (void)v223)] = v230;
            *(void *)unint64_t v230 = v223;
            std::string v223[2] = v230;
            uint64_t v224 = (char *)*((void *)v230 + 2);
            std::string v223 = *(char ***)v224;
            v230[24] = 1;
            v224[24] = 0;
            long long v232 = v223[1];
            *(void *)uint64_t v224 = v232;
            if (v232) {
LABEL_418:
            }
              *((void *)v232 + 2) = v224;
          }
          std::string v223[2] = (char *)*((void *)v224 + 2);
          *(void *)(*((void *)v224 + 2) + 8 * (**((void **)v224 + 2) != (void)v224)) = v223;
          v223[1] = v224;
LABEL_426:
          *((void *)v224 + 2) = v223;
LABEL_427:
          ++v495;
LABEL_428:
          uint64_t v483 = (Espresso::AOT *)__str;
          long long v234 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v490, (uint64_t)__str, (uint64_t)&std::piecewise_construct, (long long **)&v483);
          std::string::operator=((std::string *)(v234 + 5), (const std::string *)(v191 + 64));
          uint64_t v235 = v450[4];
          uint64_t v236 = v450[3] + 24 * v149;
          uint64_t v237 = v236 + 24;
          if (v236 + 24 != v235)
          {
            do
            {
              if (*(char *)(v236 + 23) < 0) {
                operator delete(*(void **)v236);
              }
              *(_OWORD *)uint64_t v236 = *(_OWORD *)(v236 + 24);
              *(void *)(v236 + 16) = *(void *)(v236 + 40);
              *(unsigned char *)(v236 + 47) = 0;
              uint64_t v238 = v236 + 48;
              *(unsigned char *)(v236 + 24) = 0;
              v236 += 24;
            }
            while (v238 != v235);
            uint64_t v237 = v450[4];
          }
          while (v237 != v236)
          {
            if (*(char *)(v237 - 1) < 0) {
              operator delete(*(void **)(v237 - 24));
            }
            v237 -= 24;
          }
          v450[4] = v236;
          uint64_t v239 = v449[4];
          uint64_t v240 = v449[3] + 24 * v149;
          uint64_t v241 = v240 + 24;
          if (v240 + 24 != v239)
          {
            do
            {
              if (*(char *)(v240 + 23) < 0) {
                operator delete(*(void **)v240);
              }
              *(_OWORD *)uint64_t v240 = *(_OWORD *)(v240 + 24);
              *(void *)(v240 + 16) = *(void *)(v240 + 40);
              *(unsigned char *)(v240 + 47) = 0;
              uint64_t v242 = v240 + 48;
              *(unsigned char *)(v240 + 24) = 0;
              v240 += 24;
            }
            while (v242 != v239);
            uint64_t v241 = v449[4];
          }
          while (v241 != v240)
          {
            if (*(char *)(v241 - 1) < 0) {
              operator delete(*(void **)(v241 - 24));
            }
            v241 -= 24;
          }
          v449[4] = v240;
          --v448;
          if (SHIBYTE(v486.__r_.__value_.__r.__words[2]) < 0) {
LABEL_262:
          }
            operator delete(v486.__r_.__value_.__l.__data_);
LABEL_263:
          if (v149 < v448) {
            continue;
          }
          break;
        }
        uint64_t v134 = v459;
LABEL_246:
        unint64_t v136 = v489 + 1;
        unint64_t v489 = v136;
        uint64_t v135 = *((void *)v134 + 4);
        uint64_t v137 = *((void *)v134 + 5);
        if (v136 >= (v137 - v135) >> 4)
        {
          uint64_t v483 = 0;
          if (v137 != v135)
          {
            do
            {
              v486.__r_.__value_.__r.__words[0] = (std::string::size_type)&v483;
              BOOL v320 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v134 + 56, (unint64_t *)&v483, (uint64_t)&std::piecewise_construct, (uint64_t **)&v486);
              int v321 = (std::string *)v320[3];
              BOOL v322 = (std::string *)v320[4];
              while (v321 != v322)
              {
                if (std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(&v490, (uint64_t)v321))
                {
                  uint64_t v323 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(&v490, (uint64_t)v321);
                  if (!v323) {
                    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
                  }
                  std::string::operator=(v321, (const std::string *)(v323 + 5));
                }
                ++v321;
              }
              uint64_t v483 = (Espresso::AOT *)((char *)v483 + 1);
              uint64_t v134 = v459;
            }
            while ((unint64_t)v483 < (uint64_t)(*((void *)v459 + 5) - *((void *)v459 + 4)) >> 4);
          }
LABEL_457:
          *(_OWORD *)&v486.__r_.__value_.__r.__words[1] = 0uLL;
          v486.__r_.__value_.__r.__words[0] = (std::string::size_type)&v486.__r_.__value_.__l.__size_;
          long long v244 = (char *)*((void *)v134 + 32);
          std::string::size_type v245 = (char **)((char *)v134 + 264);
          if (v244 == (char *)v134 + 264)
          {
LABEL_458:
            std::__tree<std::string>::destroy((uint64_t)v134 + 256, *((char **)v134 + 33));
            *((void *)v134 + 33) = 0;
            *((void *)v134 + 34) = 0;
            *((void *)v134 + 32) = v245;
            std::string::size_type v246 = v486.__r_.__value_.__r.__words[0];
            if ((std::string::size_type *)v486.__r_.__value_.__l.__data_ != &v486.__r_.__value_.__r.__words[1])
            {
              uint64_t v453 = (void **)((char *)v134 + 256);
              p_std::string::size_type size = v486.__r_.__value_.__r.__words[0] + 32;
              unint64_t v248 = (char **)((char *)v134 + 264);
              uint64_t v249 = (char **)((char *)v134 + 264);
LABEL_486:
              std::string::pointer v266 = (char *)operator new(0x40uLL);
              std::string::size_type v267 = (std::string *)(v266 + 32);
              if (*(char *)(v246 + 55) < 0)
              {
                std::string::__init_copy_ctor_external(v267, *(const std::string::value_type **)(v246 + 32), *(void *)(v246 + 40));
              }
              else
              {
                long long v268 = *(_OWORD *)p_size;
                *((void *)v266 + 6) = *(void *)(p_size + 16);
                *(_OWORD *)&v267->__r_.__value_.__l.__data_ = v268;
              }
              v266[56] = 0;
              *(void *)std::string::pointer v266 = 0;
              *((void *)v266 + 1) = 0;
              *((void *)v266 + 2) = v249;
              *unint64_t v248 = v266;
              uint64_t v269 = (void *)**v453;
              uint64_t v270 = v266;
              if (v269)
              {
                *uint64_t v453 = v269;
                uint64_t v270 = *v248;
              }
              int v271 = *v245;
              BOOL v35 = v270 == *v245;
              v270[24] = v35;
              if (v35) {
                goto LABEL_513;
              }
              while (1)
              {
                uint64_t v272 = *((void *)v270 + 2);
                if (*(unsigned char *)(v272 + 24)) {
                  goto LABEL_513;
                }
                std::string::size_type v273 = *(char **)(v272 + 16);
                uint64_t v274 = *(void *)v273;
                if (*(void *)v273 == v272)
                {
                  uint64_t v277 = *((void *)v273 + 1);
                  if (!v277 || (v278 = *(unsigned __int8 *)(v277 + 24), std::string::size_type v275 = (unsigned char *)(v277 + 24), v278))
                  {
                    if (*(char **)v272 == v270)
                    {
                      *(unsigned char *)(v272 + 24) = 1;
                      v273[24] = 0;
                      uint64_t v281 = *(void *)(v272 + 8);
                      *(void *)std::string::size_type v273 = v281;
                      if (v281) {
                        goto LABEL_506;
                      }
                    }
                    else
                    {
                      std::string::size_type v279 = *(uint64_t **)(v272 + 8);
                      uint64_t v280 = *v279;
                      *(void *)(v272 + 8) = *v279;
                      if (v280)
                      {
                        *(void *)(v280 + 16) = v272;
                        std::string::size_type v273 = *(char **)(v272 + 16);
                      }
                      v279[2] = (uint64_t)v273;
                      *(void *)(*(void *)(v272 + 16) + 8 * (**(void **)(v272 + 16) != v272)) = v279;
                      uint64_t *v279 = v272;
                      *(void *)(v272 + 16) = v279;
                      std::string::size_type v273 = (char *)v279[2];
                      uint64_t v272 = *(void *)v273;
                      *((unsigned char *)v279 + 24) = 1;
                      v273[24] = 0;
                      uint64_t v281 = *(void *)(v272 + 8);
                      *(void *)std::string::size_type v273 = v281;
                      if (v281) {
LABEL_506:
                      }
                        *(void *)(v281 + 16) = v273;
                    }
                    *(void *)(v272 + 16) = *((void *)v273 + 2);
                    *(void *)(*((void *)v273 + 2) + 8 * (**((void **)v273 + 2) != (void)v273)) = v272;
                    *(void *)(v272 + 8) = v273;
LABEL_512:
                    *((void *)v273 + 2) = v272;
LABEL_513:
                    ++*((void *)v134 + 34);
                    v266[56] = 1;
                    char v265 = *(std::string **)(v246 + 8);
                    if (v265)
                    {
                      do
                      {
LABEL_514:
                        long long v283 = v265;
                        char v265 = (std::string *)v265->__r_.__value_.__r.__words[0];
                      }
                      while (v265);
                      goto LABEL_518;
                    }
                    while (1)
                    {
                      do
                      {
                        long long v283 = *(std::string **)(v246 + 16);
                        BOOL v35 = v283->__r_.__value_.__r.__words[0] == v246;
                        std::string::size_type v246 = (std::string::size_type)v283;
                      }
                      while (!v35);
LABEL_518:
                      if (v283 == (std::string *)&v486.__r_.__value_.__r.__words[1]) {
                        goto LABEL_601;
                      }
                      int v253 = *v245;
                      std::string::size_type v246 = (std::string::size_type)v283;
                      p_std::string::size_type size = (std::string::size_type)&v283[1].__r_.__value_.__l.__size_;
                      unint64_t v248 = (char **)((char *)v134 + 264);
                      uint64_t v249 = (char **)((char *)v134 + 264);
                      if (!*v245) {
                        goto LABEL_486;
                      }
                      int v250 = v283[2].__r_.__value_.__s.__data_[7];
                      if (v250 >= 0) {
                        size_t v251 = v283[2].__r_.__value_.__s.__data_[7];
                      }
                      else {
                        size_t v251 = v283[1].__r_.__value_.__r.__words[2];
                      }
                      if (v250 >= 0) {
                        uint64_t v252 = &v283[1].__r_.__value_.__l.__size_;
                      }
                      else {
                        uint64_t v252 = (std::string::size_type *)v283[1].__r_.__value_.__l.__size_;
                      }
                      while (1)
                      {
                        while (1)
                        {
                          uint64_t v249 = (char **)v253;
                          uint64_t v256 = (char *)*((void *)v253 + 4);
                          uint64_t v254 = v253 + 32;
                          uint64_t v255 = v256;
                          int v257 = v254[23];
                          if (v257 >= 0) {
                            size_t v258 = v254[23];
                          }
                          else {
                            size_t v258 = *((void *)v254 + 1);
                          }
                          if (v257 >= 0) {
                            uint64_t v259 = v254;
                          }
                          else {
                            uint64_t v259 = v255;
                          }
                          if (v258 >= v251) {
                            size_t v260 = v251;
                          }
                          else {
                            size_t v260 = v258;
                          }
                          int v261 = memcmp(v252, v259, v260);
                          BOOL v262 = v251 < v258;
                          if (v261) {
                            BOOL v262 = v261 < 0;
                          }
                          if (!v262) {
                            break;
                          }
                          int v253 = *v249;
                          unint64_t v248 = v249;
                          if (!*v249) {
                            goto LABEL_486;
                          }
                        }
                        int v263 = memcmp(v259, v252, v260);
                        BOOL v264 = v258 < v251;
                        if (v263) {
                          BOOL v264 = v263 < 0;
                        }
                        if (!v264) {
                          break;
                        }
                        int v253 = v249[1];
                        if (!v253)
                        {
                          unint64_t v248 = v249 + 1;
                          goto LABEL_486;
                        }
                      }
                      *((unsigned char *)v249 + 56) = 1;
                      char v265 = *(std::string **)(v246 + 8);
                      if (v265) {
                        goto LABEL_514;
                      }
                    }
                  }
                }
                else if (!v274 || (v276 = *(unsigned __int8 *)(v274 + 24), std::string::size_type v275 = (unsigned char *)(v274 + 24), v276))
                {
                  if (*(char **)v272 == v270)
                  {
                    uint64_t v284 = *((void *)v270 + 1);
                    *(void *)uint64_t v272 = v284;
                    if (v284)
                    {
                      *(void *)(v284 + 16) = v272;
                      std::string::size_type v273 = *(char **)(v272 + 16);
                    }
                    *((void *)v270 + 2) = v273;
                    *(void *)(*(void *)(v272 + 16) + 8 * (**(void **)(v272 + 16) != v272)) = v270;
                    *((void *)v270 + 1) = v272;
                    *(void *)(v272 + 16) = v270;
                    std::string::size_type v273 = (char *)*((void *)v270 + 2);
                    v270[24] = 1;
                    v273[24] = 0;
                    uint64_t v272 = *((void *)v273 + 1);
                    v282 = *(char **)v272;
                    *((void *)v273 + 1) = *(void *)v272;
                    if (v282) {
LABEL_510:
                    }
                      *((void *)v282 + 2) = v273;
                  }
                  else
                  {
                    *(unsigned char *)(v272 + 24) = 1;
                    v273[24] = 0;
                    uint64_t v272 = *((void *)v273 + 1);
                    v282 = *(char **)v272;
                    *((void *)v273 + 1) = *(void *)v272;
                    if (v282) {
                      goto LABEL_510;
                    }
                  }
                  *(void *)(v272 + 16) = *((void *)v273 + 2);
                  *(void *)(*((void *)v273 + 2) + 8 * (**((void **)v273 + 2) != (void)v273)) = v272;
                  *(void *)uint64_t v272 = v273;
                  goto LABEL_512;
                }
                *(unsigned char *)(v272 + 24) = 1;
                uint64_t v270 = v273;
                v273[24] = v273 == v271;
                *std::string::size_type v275 = 1;
                if (v273 == v271) {
                  goto LABEL_513;
                }
              }
            }
LABEL_601:
            uint64_t v484 = 0;
            uint64_t v485 = 0;
            uint64_t v483 = (Espresso::AOT *)&v484;
            uint64_t v324 = (char *)*((void *)v459 + 38);
            v454 = v459;
            uint64_t v325 = (char **)((char *)v459 + 312);
            uint64_t v326 = v444;
            if (v324 != (char *)v459 + 312)
            {
LABEL_672:
              uint64_t v367 = (uint64_t *)(v324 + 32);
              if (std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(&v490, (uint64_t)(v324 + 32)))
              {
                unint64_t v368 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(&v490, (uint64_t)(v324 + 32));
                if (!v368) {
                  std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
                }
                uint64_t v367 = v368 + 5;
              }
              unint64_t v369 = v484;
              uint64_t v370 = &v484;
              uint64_t v371 = &v484;
              if (v484)
              {
                int v372 = *((char *)v367 + 23);
                if (v372 >= 0) {
                  size_t v373 = *((unsigned __int8 *)v367 + 23);
                }
                else {
                  size_t v373 = v367[1];
                }
                if (v372 >= 0) {
                  uint64_t v374 = (const std::string::value_type *)v367;
                }
                else {
                  uint64_t v374 = (const std::string::value_type *)*v367;
                }
                do
                {
                  while (1)
                  {
                    uint64_t v370 = (char **)v369;
                    std::string::size_type v377 = (char *)*((void *)v369 + 4);
                    unint64_t v375 = v369 + 32;
                    std::string::size_type v376 = v377;
                    int v378 = v375[23];
                    if (v378 >= 0) {
                      size_t v379 = v375[23];
                    }
                    else {
                      size_t v379 = *((void *)v375 + 1);
                    }
                    if (v378 >= 0) {
                      int64_t v380 = v375;
                    }
                    else {
                      int64_t v380 = v376;
                    }
                    if (v379 >= v373) {
                      size_t v381 = v373;
                    }
                    else {
                      size_t v381 = v379;
                    }
                    int v382 = memcmp(v374, v380, v381);
                    BOOL v383 = v373 < v379;
                    if (v382) {
                      BOOL v383 = v382 < 0;
                    }
                    if (!v383) {
                      break;
                    }
                    unint64_t v369 = *v370;
                    uint64_t v371 = v370;
                    if (!*v370) {
                      goto LABEL_700;
                    }
                  }
                  int v384 = memcmp(v380, v374, v381);
                  BOOL v385 = v379 < v373;
                  if (v384) {
                    BOOL v385 = v384 < 0;
                  }
                  if (!v385) {
                    goto LABEL_728;
                  }
                  unint64_t v369 = v370[1];
                }
                while (v369);
                uint64_t v371 = v370 + 1;
              }
LABEL_700:
              uint64_t v386 = (char *)operator new(0x38uLL);
              uint64_t v387 = (std::string *)(v386 + 32);
              if (*((char *)v367 + 23) < 0)
              {
                std::string::__init_copy_ctor_external(v387, (const std::string::value_type *)*v367, v367[1]);
              }
              else
              {
                long long v388 = *(_OWORD *)v367;
                *((void *)v386 + 6) = v367[2];
                *(_OWORD *)&v387->__r_.__value_.__l.__data_ = v388;
              }
              *(void *)uint64_t v386 = 0;
              *((void *)v386 + 1) = 0;
              *((void *)v386 + 2) = v370;
              char *v371 = v386;
              if (*(void *)v483)
              {
                uint64_t v483 = *(Espresso::AOT **)v483;
                uint64_t v386 = *v371;
              }
              uint64_t v389 = v484;
              BOOL v35 = v386 == v484;
              v386[24] = v386 == v484;
              if (v35) {
                goto LABEL_727;
              }
              while (1)
              {
                uint64_t v390 = *((void *)v386 + 2);
                if (*(unsigned char *)(v390 + 24)) {
                  goto LABEL_727;
                }
                uint64_t v391 = *(char **)(v390 + 16);
                uint64_t v392 = *(void *)v391;
                if (*(void *)v391 == v390)
                {
                  uint64_t v395 = *((void *)v391 + 1);
                  if (!v395 || (v396 = *(unsigned __int8 *)(v395 + 24), float v393 = (unsigned char *)(v395 + 24), v396))
                  {
                    if (*(char **)v390 == v386)
                    {
                      *(unsigned char *)(v390 + 24) = 1;
                      v391[24] = 0;
                      uint64_t v399 = *(void *)(v390 + 8);
                      *(void *)uint64_t v391 = v399;
                      if (v399) {
                        goto LABEL_720;
                      }
                    }
                    else
                    {
                      std::string v397 = *(uint64_t **)(v390 + 8);
                      uint64_t v398 = *v397;
                      *(void *)(v390 + 8) = *v397;
                      if (v398)
                      {
                        *(void *)(v398 + 16) = v390;
                        uint64_t v391 = *(char **)(v390 + 16);
                      }
                      v397[2] = (uint64_t)v391;
                      *(void *)(*(void *)(v390 + 16) + 8 * (**(void **)(v390 + 16) != v390)) = v397;
                      uint64_t *v397 = v390;
                      *(void *)(v390 + 16) = v397;
                      uint64_t v391 = (char *)v397[2];
                      uint64_t v390 = *(void *)v391;
                      *((unsigned char *)v397 + 24) = 1;
                      v391[24] = 0;
                      uint64_t v399 = *(void *)(v390 + 8);
                      *(void *)uint64_t v391 = v399;
                      if (v399) {
LABEL_720:
                      }
                        *(void *)(v399 + 16) = v391;
                    }
                    *(void *)(v390 + 16) = *((void *)v391 + 2);
                    *(void *)(*((void *)v391 + 2) + 8 * (**((void **)v391 + 2) != (void)v391)) = v390;
                    *(void *)(v390 + 8) = v391;
LABEL_726:
                    *((void *)v391 + 2) = v390;
LABEL_727:
                    ++v485;
LABEL_728:
                    std::string v401 = (char *)*((void *)v324 + 1);
                    if (v401)
                    {
                      do
                      {
                        uint64_t v402 = (char **)v401;
                        std::string v401 = *(char **)v401;
                      }
                      while (v401);
                    }
                    else
                    {
                      do
                      {
                        uint64_t v402 = (char **)*((void *)v324 + 2);
                        BOOL v35 = *v402 == v324;
                        uint64_t v324 = (char *)v402;
                      }
                      while (!v35);
                    }
                    uint64_t v324 = (char *)v402;
                    if (v402 == v325) {
                      break;
                    }
                    goto LABEL_672;
                  }
                }
                else if (!v392 || (v394 = *(unsigned __int8 *)(v392 + 24), float v393 = (unsigned char *)(v392 + 24), v394))
                {
                  if (*(char **)v390 == v386)
                  {
                    uint64_t v403 = *((void *)v386 + 1);
                    *(void *)uint64_t v390 = v403;
                    if (v403)
                    {
                      *(void *)(v403 + 16) = v390;
                      uint64_t v391 = *(char **)(v390 + 16);
                    }
                    *((void *)v386 + 2) = v391;
                    *(void *)(*(void *)(v390 + 16) + 8 * (**(void **)(v390 + 16) != v390)) = v386;
                    *((void *)v386 + 1) = v390;
                    *(void *)(v390 + 16) = v386;
                    uint64_t v391 = (char *)*((void *)v386 + 2);
                    v386[24] = 1;
                    v391[24] = 0;
                    uint64_t v390 = *((void *)v391 + 1);
                    int v400 = *(char **)v390;
                    *((void *)v391 + 1) = *(void *)v390;
                    if (v400) {
LABEL_724:
                    }
                      *((void *)v400 + 2) = v391;
                  }
                  else
                  {
                    *(unsigned char *)(v390 + 24) = 1;
                    v391[24] = 0;
                    uint64_t v390 = *((void *)v391 + 1);
                    int v400 = *(char **)v390;
                    *((void *)v391 + 1) = *(void *)v390;
                    if (v400) {
                      goto LABEL_724;
                    }
                  }
                  *(void *)(v390 + 16) = *((void *)v391 + 2);
                  *(void *)(*((void *)v391 + 2) + 8 * (**((void **)v391 + 2) != (void)v391)) = v390;
                  *(void *)uint64_t v390 = v391;
                  goto LABEL_726;
                }
                *(unsigned char *)(v390 + 24) = 1;
                uint64_t v386 = v391;
                v391[24] = v391 == v389;
                *float v393 = 1;
                if (v391 == v389) {
                  goto LABEL_727;
                }
              }
            }
            uint64_t v327 = (void **)((char *)v454 + 304);
            std::__tree<std::string>::destroy((uint64_t)v454 + 304, *((char **)v454 + 39));
            *((void *)v454 + 39) = 0;
            *((void *)v454 + 40) = 0;
            *((void *)v454 + 38) = v325;
            uint64_t v328 = v483;
            if (v483 != (Espresso::AOT *)&v484)
            {
              uint64_t v329 = (char *)v483 + 32;
              uint64_t v330 = v325;
              unint64_t v331 = v325;
LABEL_630:
              uint64_t v348 = (char *)operator new(0x40uLL);
              long long v349 = (std::string *)(v348 + 32);
              if (*((char *)v328 + 55) < 0)
              {
                std::string::__init_copy_ctor_external(v349, *((const std::string::value_type **)v328 + 4), *((void *)v328 + 5));
              }
              else
              {
                long long v350 = *(_OWORD *)v329;
                *((void *)v348 + 6) = *((void *)v329 + 2);
                *(_OWORD *)&v349->__r_.__value_.__l.__data_ = v350;
              }
              v348[56] = 0;
              *(void *)uint64_t v348 = 0;
              *((void *)v348 + 1) = 0;
              *((void *)v348 + 2) = v331;
              void *v330 = v348;
              uint64_t v351 = (void *)**v327;
              int v352 = v348;
              uint64_t v326 = v444;
              if (v351)
              {
                char *v327 = v351;
                int v352 = *v330;
              }
              int v353 = *v325;
              BOOL v35 = v352 == *v325;
              v352[24] = v35;
              if (v35) {
                goto LABEL_657;
              }
              while (1)
              {
                uint64_t v354 = *((void *)v352 + 2);
                if (*(unsigned char *)(v354 + 24)) {
                  goto LABEL_657;
                }
                uint64_t v355 = *(char **)(v354 + 16);
                uint64_t v356 = *(void *)v355;
                if (*(void *)v355 == v354)
                {
                  uint64_t v359 = *((void *)v355 + 1);
                  if (!v359 || (v360 = *(unsigned __int8 *)(v359 + 24), uint64_t v357 = (unsigned char *)(v359 + 24), v360))
                  {
                    if (*(char **)v354 == v352)
                    {
                      *(unsigned char *)(v354 + 24) = 1;
                      v355[24] = 0;
                      uint64_t v363 = *(void *)(v354 + 8);
                      *(void *)uint64_t v355 = v363;
                      if (v363) {
                        goto LABEL_650;
                      }
                    }
                    else
                    {
                      uint64_t v361 = *(uint64_t **)(v354 + 8);
                      uint64_t v362 = *v361;
                      *(void *)(v354 + 8) = *v361;
                      if (v362)
                      {
                        *(void *)(v362 + 16) = v354;
                        uint64_t v355 = *(char **)(v354 + 16);
                      }
                      uint64_t v361[2] = (uint64_t)v355;
                      *(void *)(*(void *)(v354 + 16) + 8 * (**(void **)(v354 + 16) != v354)) = v361;
                      uint64_t *v361 = v354;
                      *(void *)(v354 + 16) = v361;
                      uint64_t v355 = (char *)v361[2];
                      uint64_t v354 = *(void *)v355;
                      *((unsigned char *)v361 + 24) = 1;
                      v355[24] = 0;
                      uint64_t v363 = *(void *)(v354 + 8);
                      *(void *)uint64_t v355 = v363;
                      if (v363) {
LABEL_650:
                      }
                        *(void *)(v363 + 16) = v355;
                    }
                    *(void *)(v354 + 16) = *((void *)v355 + 2);
                    *(void *)(*((void *)v355 + 2) + 8 * (**((void **)v355 + 2) != (void)v355)) = v354;
                    *(void *)(v354 + 8) = v355;
LABEL_656:
                    *((void *)v355 + 2) = v354;
LABEL_657:
                    ++*((void *)v454 + 40);
                    v348[56] = 1;
                    unint64_t v347 = (char *)*((void *)v328 + 1);
                    if (v347)
                    {
                      do
                      {
LABEL_658:
                        unint64_t v365 = v347;
                        unint64_t v347 = *(char **)v347;
                      }
                      while (v347);
                      goto LABEL_662;
                    }
                    while (1)
                    {
                      do
                      {
                        unint64_t v365 = (char *)*((void *)v328 + 2);
                        BOOL v35 = *(void *)v365 == (void)v328;
                        uint64_t v328 = (Espresso::AOT *)v365;
                      }
                      while (!v35);
LABEL_662:
                      if (v365 == (char *)&v484) {
                        goto LABEL_740;
                      }
                      uint64_t v335 = *v325;
                      uint64_t v328 = (Espresso::AOT *)v365;
                      uint64_t v329 = v365 + 32;
                      uint64_t v330 = v325;
                      unint64_t v331 = v325;
                      if (!*v325) {
                        goto LABEL_630;
                      }
                      int v332 = v365[55];
                      if (v332 >= 0) {
                        size_t v333 = v365[55];
                      }
                      else {
                        size_t v333 = *((void *)v365 + 5);
                      }
                      if (v332 >= 0) {
                        uint64_t v334 = v365 + 32;
                      }
                      else {
                        uint64_t v334 = (const void *)*((void *)v365 + 4);
                      }
                      while (1)
                      {
                        while (1)
                        {
                          unint64_t v331 = (char **)v335;
                          unint64_t v338 = (const void *)*((void *)v335 + 4);
                          unint64_t v336 = v335 + 32;
                          uint64_t v337 = v338;
                          int v339 = *((char *)v336 + 23);
                          if (v339 >= 0) {
                            size_t v340 = *((unsigned __int8 *)v336 + 23);
                          }
                          else {
                            size_t v340 = v336[1];
                          }
                          if (v339 >= 0) {
                            uint64_t v341 = v336;
                          }
                          else {
                            uint64_t v341 = v337;
                          }
                          if (v340 >= v333) {
                            size_t v342 = v333;
                          }
                          else {
                            size_t v342 = v340;
                          }
                          int v343 = memcmp(v334, v341, v342);
                          BOOL v344 = v333 < v340;
                          if (v343) {
                            BOOL v344 = v343 < 0;
                          }
                          if (!v344) {
                            break;
                          }
                          uint64_t v335 = *v331;
                          uint64_t v330 = v331;
                          if (!*v331) {
                            goto LABEL_630;
                          }
                        }
                        int v345 = memcmp(v341, v334, v342);
                        BOOL v346 = v340 < v333;
                        if (v345) {
                          BOOL v346 = v345 < 0;
                        }
                        if (!v346) {
                          break;
                        }
                        uint64_t v335 = v331[1];
                        if (!v335)
                        {
                          uint64_t v330 = v331 + 1;
                          goto LABEL_630;
                        }
                      }
                      uint64_t v326 = v444;
                      *((unsigned char *)v331 + 56) = 1;
                      unint64_t v347 = (char *)*((void *)v328 + 1);
                      if (v347) {
                        goto LABEL_658;
                      }
                    }
                  }
                }
                else if (!v356 || (v358 = *(unsigned __int8 *)(v356 + 24), uint64_t v357 = (unsigned char *)(v356 + 24), v358))
                {
                  if (*(char **)v354 == v352)
                  {
                    uint64_t v366 = *((void *)v352 + 1);
                    *(void *)uint64_t v354 = v366;
                    if (v366)
                    {
                      *(void *)(v366 + 16) = v354;
                      uint64_t v355 = *(char **)(v354 + 16);
                    }
                    *((void *)v352 + 2) = v355;
                    *(void *)(*(void *)(v354 + 16) + 8 * (**(void **)(v354 + 16) != v354)) = v352;
                    *((void *)v352 + 1) = v354;
                    *(void *)(v354 + 16) = v352;
                    uint64_t v355 = (char *)*((void *)v352 + 2);
                    v352[24] = 1;
                    v355[24] = 0;
                    uint64_t v354 = *((void *)v355 + 1);
                    v364 = *(char **)v354;
                    *((void *)v355 + 1) = *(void *)v354;
                    if (v364) {
LABEL_654:
                    }
                      *((void *)v364 + 2) = v355;
                  }
                  else
                  {
                    *(unsigned char *)(v354 + 24) = 1;
                    v355[24] = 0;
                    uint64_t v354 = *((void *)v355 + 1);
                    v364 = *(char **)v354;
                    *((void *)v355 + 1) = *(void *)v354;
                    if (v364) {
                      goto LABEL_654;
                    }
                  }
                  *(void *)(v354 + 16) = *((void *)v355 + 2);
                  *(void *)(*((void *)v355 + 2) + 8 * (**((void **)v355 + 2) != (void)v355)) = v354;
                  *(void *)uint64_t v354 = v355;
                  goto LABEL_656;
                }
                *(unsigned char *)(v354 + 24) = 1;
                int v352 = v355;
                v355[24] = v355 == v353;
                *uint64_t v357 = 1;
                if (v355 == v353) {
                  goto LABEL_657;
                }
              }
            }
LABEL_740:
            std::__tree<std::string>::destroy((uint64_t)&v483, v484);
            std::__tree<std::string>::destroy((uint64_t)&v486, (char *)v486.__r_.__value_.__l.__size_);
            v404 = (char *)v491;
            if (!(void)v491)
            {
LABEL_747:
              int v406 = (void *)v490;
              *(void *)&long long v490 = 0;
              if (v406) {
                operator delete(v406);
              }
              std::__tree<std::__value_type<std::tuple<std::string,int,int>,std::string>,std::__map_value_compare<std::tuple<std::string,int,int>,std::__value_type<std::tuple<std::string,int,int>,std::string>,std::less<std::tuple<std::string,int,int>>,true>,std::allocator<std::__value_type<std::tuple<std::string,int,int>,std::string>>>::destroy((uint64_t)&v493, (uint64_t)v494);
              if (v460 && !atomic_fetch_add(&v460->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v460->__on_zero_shared)(v460);
                std::__shared_weak_count::__release_weak(v460);
              }
              Espresso::DTypeConverter::PerformConversions((Espresso::DTypeConverter *)&__dst);
              Espresso::AOT::ValidateBlobNumericalPropsForLayersInNetwork((int8x8_t *)v472, v407);
              uint64_t v408 = *((void *)v481 + 2);
              v457 = v472;
              v458 = v473;
              if (v473) {
                atomic_fetch_add_explicit(&v473->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              (*(void (**)(uint64_t, Espresso::net **))(*(void *)v408 + 88))(v408, &v457);
              long long v409 = v458;
              if (v458 && !atomic_fetch_add(&v458->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v409->__on_zero_shared)(v409);
                std::__shared_weak_count::__release_weak(v409);
              }
              v410 = v472;
              LODWORD(v489) = (***(uint64_t (****)(void))(*((void *)v472 + 2) + 8))(*(void *)(*((void *)v472 + 2) + 8));
              long long v490 = 0uLL;
              v486.__r_.__value_.__r.__words[0] = (std::string::size_type)&v489;
              uint64_t v411 = std::__hash_table<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::__unordered_map_hasher<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::hash<Espresso::platform>,std::equal_to<Espresso::platform>,true>,std::__unordered_map_equal<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::equal_to<Espresso::platform>,std::hash<Espresso::platform>,true>,std::allocator<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform const&>,std::tuple<>>((uint64_t)v410 + 528, (unsigned int *)&v489, (uint64_t)&std::piecewise_construct, &v486);
              long long v490 = 0uLL;
              int v412 = (std::__shared_weak_count *)v411[4];
              v411[3] = 0;
              v411[4] = 0;
              if (v412 && !atomic_fetch_add(&v412->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v412->__on_zero_shared)(v412);
                std::__shared_weak_count::__release_weak(v412);
                v413 = (std::__shared_weak_count *)*((void *)&v490 + 1);
                if (!*((void *)&v490 + 1)) {
                  goto LABEL_763;
                }
              }
              else
              {
                v413 = (std::__shared_weak_count *)*((void *)&v490 + 1);
                if (!*((void *)&v490 + 1)) {
                  goto LABEL_763;
                }
              }
              if (!atomic_fetch_add(&v413->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v413->__on_zero_shared)(v413);
                std::__shared_weak_count::__release_weak(v413);
              }
LABEL_763:
              *((void *)&v490 + 1) = 0;
              *(void *)&long long v491 = 0;
              *(void *)&long long v490 = &unk_1EE3500B0;
              uint64_t v414 = (atomic_ullong *)operator new(0x30uLL);
              int v415 = (std::__shared_weak_count *)v414;
              v414[1] = 0;
              *uint64_t v414 = (atomic_ullong)&unk_1EE388618;
              v414[5] = 0;
              v414[2] = 0;
              v414[3] = (atomic_ullong)&unk_1EE35F440;
              v414[4] = 0x100000004;
              atomic_fetch_add_explicit(v414 + 1, 1uLL, memory_order_relaxed);
              *((void *)&v490 + 1) = v414 + 3;
              *(void *)&long long v491 = v414;
              if (!atomic_fetch_add(v414 + 1, 0xFFFFFFFFFFFFFFFFLL))
              {
                (*(void (**)(atomic_ullong *))(*v414 + 16))(v414);
                std::__shared_weak_count::__release_weak(v415);
              }
              Espresso::pass_graph_coloring::run_on_network((Espresso::pass_graph_coloring *)&v490, v410, (uint64_t)&v486);
              if (!v486.__r_.__value_.__l.__size_
              {
                unint64_t v493 = 0;
                v494 = 0;
                Espresso::throw_exception_selector<Espresso::generic_error>("Segment-level graph coloring result not correctly generated");
              }
              std::string::size_type v417 = v486.__r_.__value_.__r.__words[2];
              unint64_t v493 = (uint64_t *)v416;
              v494 = (char *)v486.__r_.__value_.__r.__words[2];
              if (v486.__r_.__value_.__r.__words[2])
              {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v486.__r_.__value_.__r.__words[2] + 8), 1uLL, memory_order_relaxed);
                uint64_t v483 = v416;
                uint64_t v484 = (char *)v417;
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v417 + 8), 1uLL, memory_order_relaxed);
                if (!atomic_fetch_add((atomic_ullong *volatile)(v417 + 8), 0xFFFFFFFFFFFFFFFFLL))
                {
                  (*(void (**)(std::string::size_type))(*(void *)v417 + 16))(v417);
                  std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v417);
                }
                unint64_t v418 = (std::__shared_weak_count *)v486.__r_.__value_.__r.__words[2];
                if (v486.__r_.__value_.__r.__words[2]
                  && !atomic_fetch_add((atomic_ullong *volatile)(v486.__r_.__value_.__r.__words[2] + 8), 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v418->__on_zero_shared)(v418);
                  std::__shared_weak_count::__release_weak(v418);
                  Espresso::net_pass::~net_pass((Espresso::net_pass *)&v490);
                  uint64_t v419 = (int *)v443;
                  int v420 = *((char *)v443 + 23);
                  if ((v420 & 0x80000000) == 0)
                  {
LABEL_775:
                    if (v420 != 7) {
                      goto LABEL_784;
                    }
                    goto LABEL_780;
                  }
LABEL_778:
                  if (*((void *)v419 + 1) != 7) {
                    goto LABEL_784;
                  }
                  uint64_t v419 = *v443;
LABEL_780:
                  int v421 = *v419;
                  int v422 = *(int *)((char *)v419 + 3);
                  if (v421 == 1634100580 && v422 == 1953264993)
                  {
                    BYTE7(v491) = 4;
                    strcpy((char *)&v490, "main");
                    goto LABEL_787;
                  }
LABEL_784:
                  int v424 = *((unsigned __int8 *)v326 + 1169);
                  char v456 = 5;
                  strcpy((char *)v455, "main_");
                  Espresso::AOT::ConfigToE5FuncName((const void **)v443, v424, (const void **)v455, (uint64_t)&v490);
                  if (v456 < 0) {
                    operator delete(v455[0]);
                  }
LABEL_787:
                  Espresso::AOT::Builder::BuildFunction((int)v479, (int)v472, (int)&v490, v483);
                }
              }
              else
              {
                uint64_t v483 = v416;
                uint64_t v484 = 0;
              }
              Espresso::net_pass::~net_pass((Espresso::net_pass *)&v490);
              uint64_t v419 = (int *)v443;
              int v420 = *((char *)v443 + 23);
              if ((v420 & 0x80000000) == 0) {
                goto LABEL_775;
              }
              goto LABEL_778;
            }
            while (1)
            {
              uint64_t v405 = *(char **)v404;
              if (v404[63] < 0)
              {
                operator delete(*((void **)v404 + 5));
                if ((v404[39] & 0x80000000) == 0) {
                  goto LABEL_743;
                }
LABEL_746:
                operator delete(*((void **)v404 + 2));
                operator delete(v404);
                v404 = v405;
                if (!v405) {
                  goto LABEL_747;
                }
              }
              else
              {
                if (v404[39] < 0) {
                  goto LABEL_746;
                }
LABEL_743:
                operator delete(v404);
                v404 = v405;
                if (!v405) {
                  goto LABEL_747;
                }
              }
            }
          }
LABEL_528:
          if (std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(&v490, (uint64_t)(v244 + 32)))
          {
            goto LABEL_582;
          }
          std::string::size_type v285 = v486.__r_.__value_.__l.__size_;
          v286 = &v486.__r_.__value_.__l.__size_;
          unint64_t v287 = &v486.__r_.__value_.__l.__size_;
          if (v486.__r_.__value_.__l.__size_)
          {
            int v288 = v244[55];
            if (v288 >= 0) {
              size_t v289 = v244[55];
            }
            else {
              size_t v289 = *((void *)v244 + 5);
            }
            if (v288 >= 0) {
              std::string v290 = v244 + 32;
            }
            else {
              std::string v290 = (const void *)*((void *)v244 + 4);
            }
            do
            {
              while (1)
              {
                v286 = (std::string::size_type *)v285;
                uint64_t v293 = *(const void **)(v285 + 32);
                std::string::size_type v291 = v285 + 32;
                long long v292 = v293;
                int v294 = *(char *)(v291 + 23);
                if (v294 >= 0) {
                  size_t v295 = *(unsigned __int8 *)(v291 + 23);
                }
                else {
                  size_t v295 = *(void *)(v291 + 8);
                }
                if (v294 >= 0) {
                  std::string v296 = (const void *)v291;
                }
                else {
                  std::string v296 = v292;
                }
                if (v295 >= v289) {
                  size_t v297 = v289;
                }
                else {
                  size_t v297 = v295;
                }
                int v298 = memcmp(v290, v296, v297);
                BOOL v299 = v289 < v295;
                if (v298) {
                  BOOL v299 = v298 < 0;
                }
                if (!v299) {
                  break;
                }
                std::string::size_type v285 = *v286;
                unint64_t v287 = v286;
                if (!*v286) {
                  goto LABEL_554;
                }
              }
              int v300 = memcmp(v296, v290, v297);
              BOOL v301 = v295 < v289;
              if (v300) {
                BOOL v301 = v300 < 0;
              }
              if (!v301) {
                goto LABEL_582;
              }
              std::string::size_type v285 = v286[1];
            }
            while (v285);
            unint64_t v287 = v286 + 1;
          }
LABEL_554:
          uint64_t v302 = (char *)operator new(0x38uLL);
          uint64_t v303 = (std::string *)(v302 + 32);
          if (v244[55] < 0)
          {
            std::string::__init_copy_ctor_external(v303, *((const std::string::value_type **)v244 + 4), *((void *)v244 + 5));
          }
          else
          {
            long long v304 = *((_OWORD *)v244 + 2);
            *((void *)v302 + 6) = *((void *)v244 + 6);
            *(_OWORD *)&v303->__r_.__value_.__l.__data_ = v304;
          }
          *(void *)uint64_t v302 = 0;
          *((void *)v302 + 1) = 0;
          *((void *)v302 + 2) = v286;
          *unint64_t v287 = (std::string::size_type)v302;
          if (*(void *)v486.__r_.__value_.__l.__data_)
          {
            v486.__r_.__value_.__r.__words[0] = *(void *)v486.__r_.__value_.__l.__data_;
            uint64_t v302 = (char *)*v287;
          }
          std::string::size_type v305 = v486.__r_.__value_.__l.__size_;
          BOOL v35 = v302 == (char *)v486.__r_.__value_.__l.__size_;
          v302[24] = v302 == (char *)v486.__r_.__value_.__l.__size_;
          if (v35) {
            goto LABEL_581;
          }
          while (1)
          {
            uint64_t v306 = *((void *)v302 + 2);
            if (*(unsigned char *)(v306 + 24)) {
              goto LABEL_581;
            }
            v307 = *(unsigned char **)(v306 + 16);
            uint64_t v308 = *(void *)v307;
            if (*(void *)v307 == v306)
            {
              uint64_t v311 = *((void *)v307 + 1);
              if (!v311 || (int v312 = *(unsigned __int8 *)(v311 + 24), v309 = (unsigned char *)(v311 + 24), v312))
              {
                if (*(char **)v306 == v302)
                {
                  *(unsigned char *)(v306 + 24) = 1;
                  v307[24] = 0;
                  uint64_t v315 = *(void *)(v306 + 8);
                  *(void *)v307 = v315;
                  if (v315) {
                    goto LABEL_574;
                  }
                }
                else
                {
                  uint64_t v313 = *(uint64_t **)(v306 + 8);
                  uint64_t v314 = *v313;
                  *(void *)(v306 + 8) = *v313;
                  if (v314)
                  {
                    *(void *)(v314 + 16) = v306;
                    v307 = *(unsigned char **)(v306 + 16);
                  }
                  v313[2] = (uint64_t)v307;
                  *(void *)(*(void *)(v306 + 16) + 8 * (**(void **)(v306 + 16) != v306)) = v313;
                  *uint64_t v313 = v306;
                  *(void *)(v306 + 16) = v313;
                  v307 = (unsigned char *)v313[2];
                  uint64_t v306 = *(void *)v307;
                  *((unsigned char *)v313 + 24) = 1;
                  v307[24] = 0;
                  uint64_t v315 = *(void *)(v306 + 8);
                  *(void *)v307 = v315;
                  if (v315) {
LABEL_574:
                  }
                    *(void *)(v315 + 16) = v307;
                }
                *(void *)(v306 + 16) = *((void *)v307 + 2);
                *(void *)(*((void *)v307 + 2) + 8 * (**((void **)v307 + 2) != (void)v307)) = v306;
                *(void *)(v306 + 8) = v307;
LABEL_580:
                *((void *)v307 + 2) = v306;
LABEL_581:
                ++v486.__r_.__value_.__r.__words[2];
LABEL_582:
                uint64_t v317 = (char *)*((void *)v244 + 1);
                if (v317)
                {
                  do
                  {
                    size_t v318 = (char **)v317;
                    uint64_t v317 = *(char **)v317;
                  }
                  while (v317);
                }
                else
                {
                  do
                  {
                    size_t v318 = (char **)*((void *)v244 + 2);
                    BOOL v35 = *v318 == v244;
                    long long v244 = (char *)v318;
                  }
                  while (!v35);
                }
                long long v244 = (char *)v318;
                if (v318 == v245) {
                  goto LABEL_458;
                }
                goto LABEL_528;
              }
            }
            else if (!v308 || (v310 = *(unsigned __int8 *)(v308 + 24), uint64_t v309 = (unsigned char *)(v308 + 24), v310))
            {
              if (*(char **)v306 == v302)
              {
                uint64_t v319 = *((void *)v302 + 1);
                *(void *)uint64_t v306 = v319;
                if (v319)
                {
                  *(void *)(v319 + 16) = v306;
                  v307 = *(unsigned char **)(v306 + 16);
                }
                *((void *)v302 + 2) = v307;
                *(void *)(*(void *)(v306 + 16) + 8 * (**(void **)(v306 + 16) != v306)) = v302;
                *((void *)v302 + 1) = v306;
                *(void *)(v306 + 16) = v302;
                v307 = (unsigned char *)*((void *)v302 + 2);
                v302[24] = 1;
                v307[24] = 0;
                uint64_t v306 = *((void *)v307 + 1);
                uint64_t v316 = *(char **)v306;
                *((void *)v307 + 1) = *(void *)v306;
                if (v316) {
LABEL_578:
                }
                  *((void *)v316 + 2) = v307;
              }
              else
              {
                *(unsigned char *)(v306 + 24) = 1;
                v307[24] = 0;
                uint64_t v306 = *((void *)v307 + 1);
                uint64_t v316 = *(char **)v306;
                *((void *)v307 + 1) = *(void *)v306;
                if (v316) {
                  goto LABEL_578;
                }
              }
              *(void *)(v306 + 16) = *((void *)v307 + 2);
              *(void *)(*((void *)v307 + 2) + 8 * (**((void **)v307 + 2) != (void)v307)) = v306;
              *(void *)uint64_t v306 = v307;
              goto LABEL_580;
            }
            *(unsigned char *)(v306 + 24) = 1;
            uint64_t v302 = v307;
            v307[24] = v307 == (unsigned char *)v305;
            unsigned char *v309 = 1;
            if (v307 == (unsigned char *)v305) {
              goto LABEL_581;
            }
          }
        }
      }
    }
LABEL_102:
    uint64_t v58 = (char **)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__find_equal<std::string>(&v469, &v470, &__dst, &p_dst, (void *)v20 + 4);
    if (*v58)
    {
      unint64_t v59 = (long long *)*((void *)v20 + 1);
      if (v59) {
        goto LABEL_125;
      }
      goto LABEL_131;
    }
    std::string v60 = (char *)operator new(0x78uLL);
    std::pair<std::string const,Espresso::layer_shape>::pair[abi:ne180100]((std::string *)(v60 + 32), v20 + 2);
    BOOL v61 = __dst;
    *(void *)std::string v60 = 0;
    *((void *)v60 + 1) = 0;
    *((void *)v60 + 2) = v61;
    *uint64_t v58 = v60;
    if (*v469)
    {
      v469 = (void **)*v469;
      std::string v60 = *v58;
    }
    BOOL v62 = v470;
    BOOL v35 = v60 == v470;
    v60[24] = v60 == v470;
    if (v35) {
      goto LABEL_124;
    }
    while (1)
    {
      uint64_t v63 = *((void *)v60 + 2);
      if (*(unsigned char *)(v63 + 24)) {
        goto LABEL_124;
      }
      std::string::size_type v64 = *(char **)(v63 + 16);
      uint64_t v65 = *(void *)v64;
      if (*(void *)v64 == v63)
      {
        uint64_t v68 = *((void *)v64 + 1);
        if (!v68 || (int v69 = *(unsigned __int8 *)(v68 + 24), v66 = (unsigned char *)(v68 + 24), v69))
        {
          if (*(char **)v63 == v60)
          {
            *(unsigned char *)(v63 + 24) = 1;
            v64[24] = 0;
            uint64_t v72 = *(void *)(v63 + 8);
            *(void *)std::string::size_type v64 = v72;
            if (v72) {
              goto LABEL_122;
            }
          }
          else
          {
            uint64_t v70 = *(uint64_t **)(v63 + 8);
            uint64_t v71 = *v70;
            *(void *)(v63 + 8) = *v70;
            if (v71)
            {
              *(void *)(v71 + 16) = v63;
              std::string::size_type v64 = *(char **)(v63 + 16);
            }
            v70[2] = (uint64_t)v64;
            *(void *)(*(void *)(v63 + 16) + 8 * (**(void **)(v63 + 16) != v63)) = v70;
            uint64_t *v70 = v63;
            *(void *)(v63 + 16) = v70;
            std::string::size_type v64 = (char *)v70[2];
            uint64_t v63 = *(void *)v64;
            *((unsigned char *)v70 + 24) = 1;
            v64[24] = 0;
            uint64_t v72 = *(void *)(v63 + 8);
            *(void *)std::string::size_type v64 = v72;
            if (v72) {
LABEL_122:
            }
              *(void *)(v72 + 16) = v64;
          }
          *(void *)(v63 + 16) = *((void *)v64 + 2);
          *(void *)(*((void *)v64 + 2) + 8 * (**((void **)v64 + 2) != (void)v64)) = v63;
          *(void *)(v63 + 8) = v64;
          *((void *)v64 + 2) = v63;
LABEL_124:
          ++v471;
          unint64_t v59 = (long long *)*((void *)v20 + 1);
          if (!v59) {
            goto LABEL_131;
          }
          do
          {
LABEL_125:
            uint64_t v73 = v59;
            unint64_t v59 = *(long long **)v59;
          }
          while (v59);
LABEL_101:
          unint64_t v20 = v73;
          if (v73 == v21) {
            goto LABEL_38;
          }
          goto LABEL_102;
        }
      }
      else if (!v65 || (v67 = *(unsigned __int8 *)(v65 + 24), std::string v66 = (unsigned char *)(v65 + 24), v67))
      {
        if (*(char **)v63 == v60)
        {
          uint64_t v76 = *((void *)v60 + 1);
          *(void *)uint64_t v63 = v76;
          if (v76)
          {
            *(void *)(v76 + 16) = v63;
            std::string::size_type v64 = *(char **)(v63 + 16);
          }
          *((void *)v60 + 2) = v64;
          *(void *)(*(void *)(v63 + 16) + 8 * (**(void **)(v63 + 16) != v63)) = v60;
          *((void *)v60 + 1) = v63;
          *(void *)(v63 + 16) = v60;
          std::string::size_type v64 = (char *)*((void *)v60 + 2);
          v60[24] = 1;
          v64[24] = 0;
          int v74 = (uint64_t *)*((void *)v64 + 1);
          uint64_t v75 = *v74;
          *((void *)v64 + 1) = *v74;
          if (v75) {
LABEL_129:
          }
            *(void *)(v75 + 16) = v64;
        }
        else
        {
          *(unsigned char *)(v63 + 24) = 1;
          v64[24] = 0;
          int v74 = (uint64_t *)*((void *)v64 + 1);
          uint64_t v75 = *v74;
          *((void *)v64 + 1) = *v74;
          if (v75) {
            goto LABEL_129;
          }
        }
        v74[2] = *((void *)v64 + 2);
        *(void *)(*((void *)v64 + 2) + 8 * (**((void **)v64 + 2) != (void)v64)) = v74;
        uint64_t *v74 = (uint64_t)v64;
        *((void *)v64 + 2) = v74;
        ++v471;
        unint64_t v59 = (long long *)*((void *)v20 + 1);
        if (v59) {
          goto LABEL_125;
        }
        do
        {
LABEL_131:
          uint64_t v73 = (long long *)*((void *)v20 + 2);
          BOOL v35 = *(void *)v73 == (void)v20;
          unint64_t v20 = v73;
        }
        while (!v35);
        goto LABEL_101;
      }
      *(unsigned char *)(v63 + 24) = 1;
      std::string v60 = v64;
      v64[24] = v64 == v62;
      unsigned char *v66 = 1;
      if (v64 == v62) {
        goto LABEL_124;
      }
    }
  }
  long long v425 = (void *)((char *)v481 + 448);
  if (*((char *)v481 + 471) < 0) {
    long long v425 = (void *)*v425;
  }
  uint64_t v426 = [NSString stringWithUTF8String:v425];
  id v427 = [v426 lastPathComponent];
  int v428 = (const char *)[v427 UTF8String];
  size_t v429 = strlen(v428);
  if (v429 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v430 = v429;
  if (v429 >= 0x17)
  {
    uint64_t v432 = (v429 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v429 | 7) != 0x17) {
      uint64_t v432 = v429 | 7;
    }
    uint64_t v433 = v432 + 1;
    uint64_t v431 = (char **)operator new(v432 + 1);
    *(void *)&long long v497 = v430;
    *((void *)&v497 + 1) = v433 | 0x8000000000000000;
    long long __dst = (char *)v431;
    goto LABEL_802;
  }
  HIBYTE(v497) = v429;
  uint64_t v431 = &__dst;
  if (v429) {
LABEL_802:
  }
    memmove(v431, v428, v430);
  *((unsigned char *)v431 + v430) = 0;

  uint64_t v434 = *(void *)EspressoLight::espresso_aot_plan::platf;
  bundle_dir = EspressoLight::espresso_aot_plan::get_bundle_dir(this);
  Espresso::AOT::Builder::SerializeToFile((uint64_t)v479, v434, (const void **)&bundle_dir->__r_.__value_.__l.__data_, (uint64_t)&__dst);
  if (SHIBYTE(v497) < 0) {
    operator delete(__dst);
  }
  int v436 = (std::string *)v474;
  if (v474)
  {
    long long v437 = v475;
    int v438 = v474;
    if (v475 != v474)
    {
      do
      {
        if (SHIBYTE(v437[-1].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v437[-1].__r_.__value_.__l.__data_);
        }
        --v437;
      }
      while (v437 != v436);
      int v438 = v474;
    }
    v475 = v436;
    operator delete(v438);
  }
  Espresso::AOT::Builder::~Builder((Espresso::AOT::Builder *)v479);
  std::vector<int>::pointer begin = v480.__begin_;
  if (v480.__begin_)
  {
    std::vector<std::string>::pointer end = v480.__end_;
    std::vector<std::string>::pointer v441 = v480.__begin_;
    if (v480.__end_ != v480.__begin_)
    {
      do
      {
        if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(end[-1].__r_.__value_.__l.__data_);
        }
        --end;
      }
      while (end != begin);
      std::vector<std::string>::pointer v441 = v480.__begin_;
    }
    v480.__end_ = begin;
    operator delete(v441);
  }
  long long v442 = v482;
  if (v482 && !atomic_fetch_add(&v482->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v442->__on_zero_shared)(v442);
    std::__shared_weak_count::__release_weak(v442);
  }
}

void sub_1922B80E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a70);
  _Unwind_Resume(a1);
}

void sub_1922B80F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::__shared_weak_count::~__shared_weak_count(v70);
  operator delete(v72);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a70);
  _Unwind_Resume(a1);
}

void sub_1922B8114(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a70);
  _Unwind_Resume(a1);
}

void sub_1922B8128(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::vector<std::string>::~vector[abi:ne180100](&a56);
  Espresso::AOT::Builder::~Builder((Espresso::AOT::Builder *)&a64);
  std::vector<std::string>::~vector[abi:ne180100](&a67);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a70);
  _Unwind_Resume(a1);
}

void Espresso::AOT::ConfigToE5FuncName(const void **a1@<X0>, int a2@<W1>, const void **a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5 = (void *)a4;
  if (a2)
  {
    int v7 = *((char *)a3 + 23);
    if (v7 >= 0) {
      size_t v8 = *((unsigned __int8 *)a3 + 23);
    }
    else {
      size_t v8 = (size_t)a3[1];
    }
    int v9 = *((char *)a1 + 23);
    if (v9 >= 0) {
      size_t v10 = *((unsigned __int8 *)a1 + 23);
    }
    else {
      size_t v10 = (size_t)a1[1];
    }
    unint64_t v11 = v10 + v8;
    if (v10 + v8 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    if (v11 > 0x16)
    {
      uint64_t v12 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v11 | 7) != 0x17) {
        uint64_t v12 = v11 | 7;
      }
      uint64_t v13 = v12 + 1;
      uint64_t v14 = operator new(v12 + 1);
      v5[1] = v11;
      v5[2] = v13 | 0x8000000000000000;
      void *v5 = v14;
      uint64_t v5 = v14;
      if (!v8) {
        goto LABEL_21;
      }
    }
    else
    {
      *(void *)(a4 + 8) = 0;
      *(void *)(a4 + 16) = 0;
      *(void *)a4 = 0;
      *(unsigned char *)(a4 + 23) = v11;
      if (!v8)
      {
LABEL_21:
        uint64_t v16 = (char *)v5 + v8;
        if (v10)
        {
          if (v9 >= 0) {
            long long v17 = a1;
          }
          else {
            long long v17 = *a1;
          }
          memmove(v16, v17, v10);
        }
        v16[v10] = 0;
        return;
      }
    }
    if (v7 >= 0) {
      std::string::size_type v15 = a3;
    }
    else {
      std::string::size_type v15 = *a3;
    }
    memmove(v5, v15, v8);
    goto LABEL_21;
  }
  if (*((char *)a1 + 23) < 0)
  {
    int64_t v18 = (const std::string::value_type *)*a1;
    std::string::size_type v19 = (std::string::size_type)a1[1];
    std::string::__init_copy_ctor_external((std::string *)a4, v18, v19);
  }
  else
  {
    *(_OWORD *)a4 = *(_OWORD *)a1;
    *(void *)(a4 + 16) = a1[2];
  }
}

void nitro::ndarray_container::visit<nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::operator+=(nitro::ndarray_container const&)::$_0,nitro::ndarray<half>>>(nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::operator+=(nitro::ndarray_container const&)::$_0,nitro::ndarray<half>>)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v22);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Check failed (", 14);
  unint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  int v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  unint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    int v7 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v7 && v7[280])
    {
      size_t v8 = v7 + 16;
      if ((v21 & 0x80u) == 0) {
        int v9 = __p;
      }
      else {
        int v9 = (void **)__p[0];
      }
      if ((v21 & 0x80u) == 0) {
        uint64_t v10 = v21;
      }
      else {
        uint64_t v10 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
    }
    if ((char)v21 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    unint64_t v11 = (file_logger *)global_logger();
    uint64_t v12 = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    uint64_t v13 = (char *)pthread_getspecific(*((void *)v12 + 74));
    if (v13 && v13[280])
    {
      uint64_t v14 = v13 + 16;
      if ((v24 & 0x80u) == 0) {
        std::string::size_type v15 = v23;
      }
      else {
        std::string::size_type v15 = (void **)v23[0];
      }
      if ((v24 & 0x80u) == 0) {
        uint64_t v16 = v24;
      }
      else {
        uint64_t v16 = (uint64_t)v23[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    long long v17 = pthread_getspecific(*((void *)v12 + 74));
    if (v17)
    {
      if (*((unsigned char *)v17 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v12);
        if (*((_DWORD *)v12 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v24 < 0) {
      operator delete(v23[0]);
    }
  }
  int64_t v18 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1922B887C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io_base::factory_initialize_registry(uint64_t a1)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "no_op");
  uint64_t v2 = (std::__shared_weak_count *)operator new(0x20uLL);
  v2->__shared_owners_ = 0;
  v2->__shared_weak_owners_ = 0;
  v2->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE389E98;
  v2[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36CAB8;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v2[1], (uint64_t)v2);
  nitro::nitro_function::nitro_function(v2);
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "convolution");
  int v3 = (std::__shared_weak_count *)operator new(0x20uLL);
  v3->__shared_owners_ = 0;
  v3->__shared_weak_owners_ = 0;
  v3->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38AD78;
  v3[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36DBB8;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v3[1], (uint64_t)v3);
  nitro::nitro_function::nitro_function(v3);
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "lrn");
  unint64_t v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  v4->__shared_weak_owners_ = 0;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE389ED0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36CAF8;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v4[1], (uint64_t)v4);
  nitro::nitro_function::nitro_function(v4);
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "pool");
  uint64_t v5 = (std::__shared_weak_count *)operator new(0x20uLL);
  v5->__shared_owners_ = 0;
  v5->__shared_weak_owners_ = 0;
  v5->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38A0C8;
  v5[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36CD38;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v5[1], (uint64_t)v5);
  nitro::nitro_function::nitro_function(v5);
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "softmax");
  uint64_t v6 = (std::__shared_weak_count *)operator new(0x20uLL);
  v6->__shared_owners_ = 0;
  v6->__shared_weak_owners_ = 0;
  v6->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38A838;
  v6[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36D5B8;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v6[1], (uint64_t)v6);
  nitro::nitro_function::nitro_function(v6);
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "inner_product");
  int v7 = (std::__shared_weak_count *)operator new(0x20uLL);
  v7->__shared_owners_ = 0;
  v7->__shared_weak_owners_ = 0;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38B1D8;
  v7[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36E0B8;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v7[1], (uint64_t)v7);
  nitro::nitro_function::nitro_function(v7);
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "inner_product_quantized");
  size_t v8 = (std::__shared_weak_count *)operator new(0x20uLL);
  v8->__shared_owners_ = 0;
  v8->__shared_weak_owners_ = 0;
  v8->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38BBB0;
  v8[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36EBF8;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v8[1], (uint64_t)v8);
  nitro::nitro_function::nitro_function(v8);
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "concat");
  int v9 = (std::__shared_weak_count *)operator new(0x20uLL);
  v9->__shared_owners_ = 0;
  v9->__shared_weak_owners_ = 0;
  v9->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38A330;
  v9[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36CFF8;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v9[1], (uint64_t)v9);
  nitro::nitro_function::nitro_function(v9);
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "upsample");
  uint64_t v10 = (std::__shared_weak_count *)operator new(0x20uLL);
  v10->__shared_owners_ = 0;
  v10->__shared_weak_owners_ = 0;
  v10->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38A9F8;
  v10[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36D7B8;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v10[1], (uint64_t)v10);
  nitro::nitro_function::nitro_function(v10);
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "elementwise");
  unint64_t v11 = (std::__shared_weak_count *)operator new(0x20uLL);
  v11->__shared_owners_ = 0;
  v11->__shared_weak_owners_ = 0;
  v11->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38ADB0;
  v11[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36DBF8;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v11[1], (uint64_t)v11);
  nitro::nitro_function::nitro_function(v11);
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "split");
  uint64_t v12 = (std::__shared_weak_count *)operator new(0x20uLL);
  v12->__shared_owners_ = 0;
  v12->__shared_weak_owners_ = 0;
  v12->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38A288;
  v12[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36CF38;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v12[1], (uint64_t)v12);
  nitro::nitro_function::nitro_function(v12);
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "deconvolution");
  uint64_t v13 = (std::__shared_weak_count *)operator new(0x20uLL);
  v13->__shared_owners_ = 0;
  v13->__shared_weak_owners_ = 0;
  v13->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38B130;
  v13[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36DFF8;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v13[1], (uint64_t)v13);
  nitro::nitro_function::nitro_function(v13);
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "convolution_grad");
  uint64_t v14 = (std::__shared_weak_count *)operator new(0x20uLL);
  v14->__shared_owners_ = 0;
  v14->__shared_weak_owners_ = 0;
  v14->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38B638;
  v14[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36E5B8;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v14[1], (uint64_t)v14);
  nitro::nitro_function::nitro_function(v14);
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "convolution_weights_grad");
  std::string::size_type v15 = (std::__shared_weak_count *)operator new(0x20uLL);
  v15->__shared_owners_ = 0;
  v15->__shared_weak_owners_ = 0;
  v15->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38BC58;
  v15[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36ECB8;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v15[1], (uint64_t)v15);
  nitro::nitro_function::nitro_function(v15);
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "pool_grad");
  uint64_t v16 = (std::__shared_weak_count *)operator new(0x20uLL);
  v16->__shared_owners_ = 0;
  v16->__shared_weak_owners_ = 0;
  v16->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38ABB8;
  v16[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36D9B8;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v16[1], (uint64_t)v16);
  nitro::nitro_function::nitro_function(v16);
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "concat_grad");
  long long v17 = (std::__shared_weak_count *)operator new(0x20uLL);
  v17->__shared_owners_ = 0;
  v17->__shared_weak_owners_ = 0;
  v17->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38AD40;
  v17[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36DB78;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v17[1], (uint64_t)v17);
  nitro::nitro_function::nitro_function(v17);
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "softmax_loss_grad");
  int64_t v18 = (std::__shared_weak_count *)operator new(0x20uLL);
  v18->__shared_owners_ = 0;
  v18->__shared_weak_owners_ = 0;
  v18->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38B868;
  v18[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36E838;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v18[1], (uint64_t)v18);
  nitro::nitro_function::nitro_function(v18);
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "activation");
  std::string::size_type v19 = (std::__shared_weak_count *)operator new(0x20uLL);
  v19->__shared_owners_ = 0;
  v19->__shared_weak_owners_ = 0;
  v19->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38AC28;
  v19[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36DA38;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v19[1], (uint64_t)v19);
  nitro::nitro_function::nitro_function(v19);
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "nonlinearity");
  unint64_t v20 = (std::__shared_weak_count *)operator new(0x20uLL);
  v20->__shared_owners_ = 0;
  v20->__shared_weak_owners_ = 0;
  v20->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38AC28;
  v20[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36DA38;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v20[1], (uint64_t)v20);
  nitro::nitro_function::nitro_function(v20);
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "activation_grad");
  unsigned __int8 v21 = (std::__shared_weak_count *)operator new(0x20uLL);
  v21->__shared_owners_ = 0;
  v21->__shared_weak_owners_ = 0;
  v21->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38B360;
  v21[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36E278;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v21[1], (uint64_t)v21);
  nitro::nitro_function::nitro_function(v21);
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "bias");
  uint64_t v22 = (std::__shared_weak_count *)operator new(0x20uLL);
  v22->__shared_owners_ = 0;
  v22->__shared_weak_owners_ = 0;
  v22->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE389FB0;
  v22[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36CBF8;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v22[1], (uint64_t)v22);
  nitro::nitro_function::nitro_function(v22);
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "bias_grad");
  uint64_t v23 = (std::__shared_weak_count *)operator new(0x20uLL);
  v23->__shared_owners_ = 0;
  v23->__shared_weak_owners_ = 0;
  v23->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38AA68;
  v23[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36D838;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v23[1], (uint64_t)v23);
  nitro::nitro_function::nitro_function(v23);
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "batchnorm");
  unsigned __int8 v24 = (std::__shared_weak_count *)operator new(0x20uLL);
  v24->__shared_owners_ = 0;
  v24->__shared_weak_owners_ = 0;
  v24->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38AA30;
  v24[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36D7F8;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v24[1], (uint64_t)v24);
  nitro::nitro_function::nitro_function(v24);
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "batchnorm_grad");
  int v25 = (std::__shared_weak_count *)operator new(0x20uLL);
  v25->__shared_owners_ = 0;
  v25->__shared_weak_owners_ = 0;
  v25->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38B248;
  v25[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36E138;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v25[1], (uint64_t)v25);
  nitro::nitro_function::nitro_function(v25);
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "l2_normalize");
  size_t v26 = (std::__shared_weak_count *)operator new(0x20uLL);
  v26->__shared_owners_ = 0;
  v26->__shared_weak_owners_ = 0;
  v26->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38AFE0;
  v26[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36DE78;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v26[1], (uint64_t)v26);
  nitro::nitro_function::nitro_function(v26);
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "l2_normalize_grad");
  size_t v27 = (std::__shared_weak_count *)operator new(0x20uLL);
  v27->__shared_owners_ = 0;
  v27->__shared_weak_owners_ = 0;
  v27->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38B7C0;
  v27[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36E778;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v27[1], (uint64_t)v27);
  nitro::nitro_function::nitro_function(v27);
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "inner_product_grad");
  long long v28 = (std::__shared_weak_count *)operator new(0x20uLL);
  v28->__shared_owners_ = 0;
  v28->__shared_weak_owners_ = 0;
  v28->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38B980;
  v28[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36E978;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v28[1], (uint64_t)v28);
  nitro::nitro_function::nitro_function(v28);
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "inner_product_weights_grad");
  int v29 = (std::__shared_weak_count *)operator new(0x20uLL);
  v29->__shared_owners_ = 0;
  v29->__shared_weak_owners_ = 0;
  v29->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38BD00;
  v29[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36ED78;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v29[1], (uint64_t)v29);
  nitro::nitro_function::nitro_function(v29);
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "elementwise_grad");
  size_t v30 = (std::__shared_weak_count *)operator new(0x20uLL);
  v30->__shared_owners_ = 0;
  v30->__shared_weak_owners_ = 0;
  v30->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38B6A8;
  v30[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36E638;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v30[1], (uint64_t)v30);
  nitro::nitro_function::nitro_function(v30);
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "dropout");
  uint64_t v31 = (std::__shared_weak_count *)operator new(0x20uLL);
  v31->__shared_owners_ = 0;
  v31->__shared_weak_owners_ = 0;
  v31->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38A6B0;
  v31[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36D3F8;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v31[1], (uint64_t)v31);
  nitro::nitro_function::nitro_function(v31);
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "dropout_grad");
  size_t v32 = (std::__shared_weak_count *)operator new(0x20uLL);
  v32->__shared_owners_ = 0;
  v32->__shared_weak_owners_ = 0;
  v32->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38AFA8;
  v32[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36DE38;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v32[1], (uint64_t)v32);
  nitro::nitro_function::nitro_function(v32);
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "axpby");
  uint64_t v33 = (std::__shared_weak_count *)operator new(0x20uLL);
  v33->__shared_owners_ = 0;
  v33->__shared_weak_owners_ = 0;
  v33->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38A1A8;
  v33[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36CE38;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v33[1], (uint64_t)v33);
  nitro::nitro_function::nitro_function(v33);
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "load_constant");
  BOOL v34 = (std::__shared_weak_count *)operator new(0x20uLL);
  v34->__shared_owners_ = 0;
  v34->__shared_weak_owners_ = 0;
  v34->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38B210;
  v34[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36E0F8;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v34[1], (uint64_t)v34);
  nitro::nitro_function::nitro_function(v34);
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "context_transfer");
  BOOL v35 = (std::__shared_weak_count *)operator new(0x20uLL);
  v35->__shared_owners_ = 0;
  v35->__shared_weak_owners_ = 0;
  v35->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38B600;
  v35[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36E578;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v35[1], (uint64_t)v35);
  nitro::nitro_function::nitro_function(v35);
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "reshape");
  uint64_t v36 = (std::__shared_weak_count *)operator new(0x20uLL);
  v36->__shared_owners_ = 0;
  v36->__shared_weak_owners_ = 0;
  v36->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38A7C8;
  v36[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36D538;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v36[1], (uint64_t)v36);
  nitro::nitro_function::nitro_function(v36);
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "reshape_like");
  int v37 = (std::__shared_weak_count *)operator new(0x20uLL);
  v37->__shared_owners_ = 0;
  v37->__shared_weak_owners_ = 0;
  v37->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38B018;
  v37[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36DEB8;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v37[1], (uint64_t)v37);
  nitro::nitro_function::nitro_function(v37);
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "tile");
  size_t v38 = (std::__shared_weak_count *)operator new(0x20uLL);
  v38->__shared_owners_ = 0;
  v38->__shared_weak_owners_ = 0;
  v38->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38A100;
  v38[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36CD78;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v38[1], (uint64_t)v38);
  nitro::nitro_function::nitro_function(v38);
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "reduce");
  uint64_t v39 = (std::__shared_weak_count *)operator new(0x20uLL);
  v39->__shared_owners_ = 0;
  v39->__shared_weak_owners_ = 0;
  v39->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38A4F0;
  v39[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36D1F8;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v39[1], (uint64_t)v39);
  nitro::nitro_function::nitro_function(v39);
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "rnn");
  size_t v40 = (std::__shared_weak_count *)operator new(0x20uLL);
  v40->__shared_owners_ = 0;
  v40->__shared_weak_owners_ = 0;
  v40->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE389F08;
  v40[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36CB38;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v40[1], (uint64_t)v40);
  nitro::nitro_function::nitro_function(v40);
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "rnn_arch");
  int v41 = (std::__shared_weak_count *)operator new(0x20uLL);
  v41->__shared_owners_ = 0;
  v41->__shared_weak_owners_ = 0;
  v41->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38A950;
  v41[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36D6F8;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v41[1], (uint64_t)v41);
  nitro::nitro_function::nitro_function(v41);
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "general_padding");
  BOOL v42 = (std::__shared_weak_count *)operator new(0x20uLL);
  v42->__shared_owners_ = 0;
  v42->__shared_weak_owners_ = 0;
  v42->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38B3D0;
  v42[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36E2F8;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v42[1], (uint64_t)v42);
  nitro::nitro_function::nitro_function(v42);
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "transpose");
  uint64_t v43 = (std::__shared_weak_count *)operator new(0x20uLL);
  v43->__shared_owners_ = 0;
  v43->__shared_weak_owners_ = 0;
  v43->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38ABF0;
  v43[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36D9F8;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v43[1], (uint64_t)v43);
  nitro::nitro_function::nitro_function(v43);
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "flatten");
  std::string::size_type v44 = (std::__shared_weak_count *)operator new(0x20uLL);
  v44->__shared_owners_ = 0;
  v44->__shared_weak_owners_ = 0;
  v44->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38A6E8;
  v44[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36D438;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v44[1], (uint64_t)v44);
  nitro::nitro_function::nitro_function(v44);
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "sequence_concat");
  uint64_t v45 = (std::__shared_weak_count *)operator new(0x20uLL);
  v45->__shared_owners_ = 0;
  v45->__shared_weak_owners_ = 0;
  v45->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38B4B0;
  v45[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36E3F8;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v45[1], (uint64_t)v45);
  nitro::nitro_function::nitro_function(v45);
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "sequence_reverse");
  int v46 = (std::__shared_weak_count *)operator new(0x20uLL);
  v46->__shared_owners_ = 0;
  v46->__shared_weak_owners_ = 0;
  v46->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38B788;
  v46[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36E738;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v46[1], (uint64_t)v46);
  nitro::nitro_function::nitro_function(v46);
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "sequence_repeat");
  uint64_t v47 = (std::__shared_weak_count *)operator new(0x20uLL);
  v47->__shared_owners_ = 0;
  v47->__shared_weak_owners_ = 0;
  v47->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38B4E8;
  v47[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36E438;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v47[1], (uint64_t)v47);
  nitro::nitro_function::nitro_function(v47);
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "crop");
  std::string v48 = (std::__shared_weak_count *)operator new(0x20uLL);
  v48->__shared_owners_ = 0;
  v48->__shared_weak_owners_ = 0;
  v48->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38A058;
  v48[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36CCB8;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v48[1], (uint64_t)v48);
  nitro::nitro_function::nitro_function(v48);
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "prediction_smoothing");
  size_t v49 = (std::__shared_weak_count *)operator new(0x20uLL);
  v49->__shared_owners_ = 0;
  v49->__shared_weak_owners_ = 0;
  v49->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38BAD0;
  v49[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36EAF8;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v49[1], (uint64_t)v49);
  nitro::nitro_function::nitro_function(v49);
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "space_to_depth");
  uint64_t v50 = (std::__shared_weak_count *)operator new(0x20uLL);
  v50->__shared_owners_ = 0;
  v50->__shared_weak_owners_ = 0;
  v50->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38B328;
  v50[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36E238;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v50[1], (uint64_t)v50);
  nitro::nitro_function::nitro_function(v50);
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "space_to_batch");
  uint64_t v51 = (std::__shared_weak_count *)operator new(0x20uLL);
  v51->__shared_owners_ = 0;
  v51->__shared_weak_owners_ = 0;
  v51->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38B2F0;
  v51[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36E1F8;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v51[1], (uint64_t)v51);
  nitro::nitro_function::nitro_function(v51);
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "slice");
  std::string v52 = (std::__shared_weak_count *)operator new(0x20uLL);
  v52->__shared_owners_ = 0;
  v52->__shared_weak_owners_ = 0;
  v52->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38A250;
  v52[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36CEF8;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v52[1], (uint64_t)v52);
  nitro::nitro_function::nitro_function(v52);
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "broadcast");
  BOOL v53 = (std::__shared_weak_count *)operator new(0x20uLL);
  v53->__shared_owners_ = 0;
  v53->__shared_weak_owners_ = 0;
  v53->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38AAA0;
  v53[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36D878;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v53[1], (uint64_t)v53);
  nitro::nitro_function::nitro_function(v53);
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "cast");
  uint64_t v54 = (std::__shared_weak_count *)operator new(0x20uLL);
  v54->__shared_owners_ = 0;
  v54->__shared_weak_owners_ = 0;
  v54->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE389FE8;
  v54[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36CC38;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v54[1], (uint64_t)v54);
  nitro::nitro_function::nitro_function(v54);
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "compute_stats");
  long long v55 = (std::__shared_weak_count *)operator new(0x20uLL);
  v55->__shared_owners_ = 0;
  v55->__shared_weak_owners_ = 0;
  v55->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38B0C0;
  v55[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36DF78;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v55[1], (uint64_t)v55);
  nitro::nitro_function::nitro_function(v55);
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "lambda");
  int v56 = (std::__shared_weak_count *)operator new(0x20uLL);
  v56->__shared_owners_ = 0;
  v56->__shared_weak_owners_ = 0;
  v56->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38A480;
  v56[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36D178;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v56[1], (uint64_t)v56);
  nitro::nitro_function::nitro_function(v56);
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "patch_extractor");
  int v57 = (std::__shared_weak_count *)operator new(0x20uLL);
  v57->__shared_owners_ = 0;
  v57->__shared_weak_owners_ = 0;
  v57->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38B478;
  v57[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36E3B8;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v57[1], (uint64_t)v57);
  nitro::nitro_function::nitro_function(v57);
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "crop_and_resize");
  uint64_t v58 = (std::__shared_weak_count *)operator new(0x20uLL);
  v58->__shared_owners_ = 0;
  v58->__shared_weak_owners_ = 0;
  v58->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38B398;
  v58[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36E2B8;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v58[1], (uint64_t)v58);
  nitro::nitro_function::nitro_function(v58);
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "dynamic_quantize");
  unint64_t v59 = (std::__shared_weak_count *)operator new(0x20uLL);
  v59->__shared_owners_ = 0;
  v59->__shared_weak_owners_ = 0;
  v59->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38B670;
  v59[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36E5F8;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v59[1], (uint64_t)v59);
  nitro::nitro_function::nitro_function(v59);
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "dynamic_dequantize");
  std::string v60 = (std::__shared_weak_count *)operator new(0x20uLL);
  v60->__shared_owners_ = 0;
  v60->__shared_weak_owners_ = 0;
  v60->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38B948;
  v60[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36E938;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v60[1], (uint64_t)v60);
  nitro::nitro_function::nitro_function(v60);
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "quantized_gather");
  BOOL v61 = (std::__shared_weak_count *)operator new(0x20uLL);
  v61->__shared_owners_ = 0;
  v61->__shared_weak_owners_ = 0;
  v61->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38B750;
  v61[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36E6F8;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v61[1], (uint64_t)v61);
  nitro::nitro_function::nitro_function(v61);
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "spatial_transformer");
  BOOL v62 = (std::__shared_weak_count *)operator new(0x20uLL);
  v62->__shared_owners_ = 0;
  v62->__shared_weak_owners_ = 0;
  v62->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38BA28;
  v62[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36EA38;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v62[1], (uint64_t)v62);
  nitro::nitro_function::nitro_function(v62);
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "cf_branch");
  uint64_t v63 = (std::__shared_weak_count *)operator new(0x20uLL);
  v63->__shared_owners_ = 0;
  v63->__shared_weak_owners_ = 0;
  v63->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38AAD8;
  v63[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36D8B8;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v63[1], (uint64_t)v63);
  nitro::nitro_function::nitro_function(v63);
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "cf_jump");
  std::string::size_type v64 = (std::__shared_weak_count *)operator new(0x20uLL);
  v64->__shared_owners_ = 0;
  v64->__shared_weak_owners_ = 0;
  v64->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38A608;
  v64[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36D338;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v64[1], (uint64_t)v64);
  nitro::nitro_function::nitro_function(v64);
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "cf_call");
  uint64_t v65 = (std::__shared_weak_count *)operator new(0x20uLL);
  v65->__shared_owners_ = 0;
  v65->__shared_weak_owners_ = 0;
  v65->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38A598;
  v65[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36D2B8;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v65[1], (uint64_t)v65);
  nitro::nitro_function::nitro_function(v65);
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "cf_return");
  std::string v66 = (std::__shared_weak_count *)operator new(0x20uLL);
  v66->__shared_owners_ = 0;
  v66->__shared_weak_owners_ = 0;
  v66->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38AB10;
  v66[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36D8F8;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v66[1], (uint64_t)v66);
  nitro::nitro_function::nitro_function(v66);
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "get_shape");
  int v67 = (std::__shared_weak_count *)operator new(0x20uLL);
  v67->__shared_owners_ = 0;
  v67->__shared_weak_owners_ = 0;
  v67->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38AB80;
  v67[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36D978;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v67[1], (uint64_t)v67);
  nitro::nitro_function::nitro_function(v67);
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "topk");
  uint64_t v68 = (std::__shared_weak_count *)operator new(0x20uLL);
  v68->__shared_owners_ = 0;
  v68->__shared_weak_owners_ = 0;
  v68->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38A138;
  v68[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36CDB8;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v68[1], (uint64_t)v68);
  nitro::nitro_function::nitro_function(v68);
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "gather");
  int v69 = (std::__shared_weak_count *)operator new(0x20uLL);
  v69->__shared_owners_ = 0;
  v69->__shared_weak_owners_ = 0;
  v69->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38A448;
  v69[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36D138;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v69[1], (uint64_t)v69);
  nitro::nitro_function::nitro_function(v69);
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "general_concat");
  uint64_t v70 = (std::__shared_weak_count *)operator new(0x20uLL);
  v70->__shared_owners_ = 0;
  v70->__shared_weak_owners_ = 0;
  v70->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38B280;
  v70[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36E178;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v70[1], (uint64_t)v70);
  nitro::nitro_function::nitro_function(v70);
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  Espresso::generic_alloc_kernel::register_layer_io(a1);
  Espresso::generic_load_global_kernel::register_layer_io(a1);
  Espresso::generic_store_global_kernel::register_layer_io(a1);
  Espresso::generic_cf_if_kernel::register_layer_io(a1);
  Espresso::generic_cf_loop_kernel::register_layer_io(a1);
  Espresso::generic_alloc_kernel::register_layer_io(a1);
  Espresso::generic_load_global_kernel::register_layer_io(a1);
  Espresso::generic_store_global_kernel::register_layer_io(a1);
  Espresso::generic_cf_if_kernel::register_layer_io(a1);
  Espresso::generic_cf_loop_kernel::register_layer_io(a1);
  std::string::basic_string[abi:ne180100]<0>(__p, "cf_for");
  uint64_t v71 = (std::__shared_weak_count *)operator new(0x20uLL);
  v71->__shared_owners_ = 0;
  v71->__shared_weak_owners_ = 0;
  v71->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38A2F8;
  v71[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36CFB8;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v71[1], (uint64_t)v71);
  nitro::nitro_function::nitro_function(v71);
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "cf_end");
  uint64_t v72 = (std::__shared_weak_count *)operator new(0x20uLL);
  v72->__shared_owners_ = 0;
  v72->__shared_weak_owners_ = 0;
  v72->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38A2C0;
  v72[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36CF78;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v72[1], (uint64_t)v72);
  nitro::nitro_function::nitro_function(v72);
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "cf_else");
  uint64_t v73 = (std::__shared_weak_count *)operator new(0x20uLL);
  v73->__shared_owners_ = 0;
  v73->__shared_weak_owners_ = 0;
  v73->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38A5D0;
  v73[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36D2F8;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v73[1], (uint64_t)v73);
  nitro::nitro_function::nitro_function(v73);
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "copy");
  int v74 = (std::__shared_weak_count *)operator new(0x20uLL);
  v74->__shared_owners_ = 0;
  v74->__shared_weak_owners_ = 0;
  v74->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38A020;
  v74[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36CC78;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v74[1], (uint64_t)v74);
  nitro::nitro_function::nitro_function(v74);
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "scatter");
  uint64_t v75 = (std::__shared_weak_count *)operator new(0x20uLL);
  v75->__shared_owners_ = 0;
  v75->__shared_weak_owners_ = 0;
  v75->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38A800;
  v75[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36D578;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v75[1], (uint64_t)v75);
  nitro::nitro_function::nitro_function(v75);
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "load_random");
  uint64_t v76 = (std::__shared_weak_count *)operator new(0x20uLL);
  v76->__shared_owners_ = 0;
  v76->__shared_weak_owners_ = 0;
  v76->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38AE58;
  v76[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36DCB8;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v76[1], (uint64_t)v76);
  nitro::nitro_function::nitro_function(v76);
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "range");
  uint64_t v77 = (std::__shared_weak_count *)operator new(0x20uLL);
  v77->__shared_owners_ = 0;
  v77->__shared_weak_owners_ = 0;
  v77->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38A218;
  v77[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36CEB8;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v77[1], (uint64_t)v77);
  nitro::nitro_function::nitro_function(v77);
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "batch_matmul");
  uint64_t v78 = (std::__shared_weak_count *)operator new(0x20uLL);
  v78->__shared_owners_ = 0;
  v78->__shared_weak_owners_ = 0;
  v78->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38AF70;
  v78[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36DDF8;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v78[1], (uint64_t)v78);
  nitro::nitro_function::nitro_function(v78);
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "matrix_band_part");
  uint64_t v79 = (std::__shared_weak_count *)operator new(0x20uLL);
  v79->__shared_owners_ = 0;
  v79->__shared_weak_owners_ = 0;
  v79->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38B6E0;
  v79[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36E678;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v79[1], (uint64_t)v79);
  nitro::nitro_function::nitro_function(v79);
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "fill");
  int v80 = (std::__shared_weak_count *)operator new(0x20uLL);
  v80->__shared_owners_ = 0;
  v80->__shared_weak_owners_ = 0;
  v80->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38A090;
  v80[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36CCF8;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v80[1], (uint64_t)v80);
  nitro::nitro_function::nitro_function(v80);
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "tensor_zero_pad");
  size_t v81 = (std::__shared_weak_count *)operator new(0x20uLL);
  v81->__shared_owners_ = 0;
  v81->__shared_weak_owners_ = 0;
  v81->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38B590;
  v81[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36E4F8;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v81[1], (uint64_t)v81);
  nitro::nitro_function::nitro_function(v81);
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "squeeze");
  BOOL v82 = (std::__shared_weak_count *)operator new(0x20uLL);
  v82->__shared_owners_ = 0;
  v82->__shared_weak_owners_ = 0;
  v82->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38A870;
  v82[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36D5F8;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v82[1], (uint64_t)v82);
  nitro::nitro_function::nitro_function(v82);
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "expand_dims");
  int v83 = (std::__shared_weak_count *)operator new(0x20uLL);
  v83->__shared_owners_ = 0;
  v83->__shared_weak_owners_ = 0;
  v83->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38ADE8;
  v83[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36DC38;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v83[1], (uint64_t)v83);
  nitro::nitro_function::nitro_function(v83);
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "array_gather");
  size_t v84 = (std::__shared_weak_count *)operator new(0x20uLL);
  v84->__shared_owners_ = 0;
  v84->__shared_weak_owners_ = 0;
  v84->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38AF38;
  v84[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36DDB8;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v84[1], (uint64_t)v84);
  nitro::nitro_function::nitro_function(v84);
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "multinomial");
  int v85 = (std::__shared_weak_count *)operator new(0x20uLL);
  v85->__shared_owners_ = 0;
  v85->__shared_weak_owners_ = 0;
  v85->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38AE90;
  v85[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36DCF8;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v85[1], (uint64_t)v85);
  nitro::nitro_function::nitro_function(v85);
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "instancenorm_1d");
  int v86 = (std::__shared_weak_count *)operator new(0x20uLL);
  v86->__shared_owners_ = 0;
  v86->__shared_weak_owners_ = 0;
  v86->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38B408;
  v86[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36E338;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v86[1], (uint64_t)v86);
  nitro::nitro_function::nitro_function(v86);
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "phi_virtual");
  size_t v87 = (std::__shared_weak_count *)operator new(0x20uLL);
  v87->__shared_owners_ = 0;
  v87->__shared_weak_owners_ = 0;
  v87->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38AEC8;
  v87[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36DD38;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v87[1], (uint64_t)v87);
  nitro::nitro_function::nitro_function(v87);
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "gumbel_max");
  BOOL v88 = (std::__shared_weak_count *)operator new(0x20uLL);
  v88->__shared_owners_ = 0;
  v88->__shared_weak_owners_ = 0;
  v88->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38AC60;
  v88[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36DA78;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v88[1], (uint64_t)v88);
  nitro::nitro_function::nitro_function(v88);
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "builtin");
  size_t v89 = (std::__shared_weak_count *)operator new(0x20uLL);
  v89->__shared_owners_ = 0;
  v89->__shared_weak_owners_ = 0;
  v89->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38A560;
  v89[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36D278;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v89[1], (uint64_t)v89);
  nitro::nitro_function::nitro_function(v89);
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "transplant");
  int v90 = (std::__shared_weak_count *)operator new(0x20uLL);
  v90->__shared_owners_ = 0;
  v90->__shared_weak_owners_ = 0;
  v90->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38AD08;
  v90[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36DB38;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v90[1], (uint64_t)v90);
  nitro::nitro_function::nitro_function(v90);
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "general_slice");
  BOOL v91 = (std::__shared_weak_count *)operator new(0x20uLL);
  v91->__shared_owners_ = 0;
  v91->__shared_weak_owners_ = 0;
  v91->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38B168;
  v91[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36E038;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v91[1], (uint64_t)v91);
  nitro::nitro_function::nitro_function(v91);
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "stack_nd");
  int v92 = (std::__shared_weak_count *)operator new(0x20uLL);
  v92->__shared_owners_ = 0;
  v92->__shared_weak_owners_ = 0;
  v92->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38A9C0;
  v92[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36D778;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v92[1], (uint64_t)v92);
  nitro::nitro_function::nitro_function(v92);
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "split_nd");
  BOOL v93 = (std::__shared_weak_count *)operator new(0x20uLL);
  v93->__shared_owners_ = 0;
  v93->__shared_weak_owners_ = 0;
  v93->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38A988;
  v93[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36D738;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v93[1], (uint64_t)v93);
  nitro::nitro_function::nitro_function(v93);
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "softmax_nd");
  uint64_t v94 = (std::__shared_weak_count *)operator new(0x20uLL);
  v94->__shared_owners_ = 0;
  v94->__shared_weak_owners_ = 0;
  v94->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38ACD0;
  v94[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36DAF8;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v94[1], (uint64_t)v94);
  nitro::nitro_function::nitro_function(v94);
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "sliding_windows");
  uint64_t v95 = (std::__shared_weak_count *)operator new(0x20uLL);
  v95->__shared_owners_ = 0;
  v95->__shared_weak_owners_ = 0;
  v95->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38B520;
  v95[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36E478;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v95[1], (uint64_t)v95);
  nitro::nitro_function::nitro_function(v95);
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "reverse_seq");
  long long v96 = (std::__shared_weak_count *)operator new(0x20uLL);
  v96->__shared_owners_ = 0;
  v96->__shared_weak_owners_ = 0;
  v96->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38AF00;
  v96[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36DD78;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v96[1], (uint64_t)v96);
  nitro::nitro_function::nitro_function(v96);
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "cross_entropy");
  int v97 = (std::__shared_weak_count *)operator new(0x20uLL);
  v97->__shared_owners_ = 0;
  v97->__shared_weak_owners_ = 0;
  v97->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38B0F8;
  v97[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36DFB8;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v97[1], (uint64_t)v97);
  nitro::nitro_function::nitro_function(v97);
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "non_maximum_suppression");
  size_t v98 = (std::__shared_weak_count *)operator new(0x20uLL);
  v98->__shared_owners_ = 0;
  v98->__shared_weak_owners_ = 0;
  v98->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38BBE8;
  v98[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36EC38;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v98[1], (uint64_t)v98);
  nitro::nitro_function::nitro_function(v98);
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "sgd");
  uint64_t v99 = (std::__shared_weak_count *)operator new(0x20uLL);
  v99->__shared_owners_ = 0;
  v99->__shared_weak_owners_ = 0;
  v99->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE389F40;
  v99[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36CB78;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v99[1], (uint64_t)v99);
  nitro::nitro_function::nitro_function(v99);
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "adam");
  uint64_t v100 = (std::__shared_weak_count *)operator new(0x20uLL);
  v100->__shared_owners_ = 0;
  v100->__shared_weak_owners_ = 0;
  v100->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE389F78;
  v100[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36CBB8;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v100[1], (uint64_t)v100);
  nitro::nitro_function::nitro_function(v100);
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "gather_nd");
  uint64_t v101 = (std::__shared_weak_count *)operator new(0x20uLL);
  v101->__shared_owners_ = 0;
  v101->__shared_weak_owners_ = 0;
  v101->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38AB48;
  v101[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36D938;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v101[1], (uint64_t)v101);
  nitro::nitro_function::nitro_function(v101);
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "scatter_nd");
  unint64_t v102 = (std::__shared_weak_count *)operator new(0x20uLL);
  v102->__shared_owners_ = 0;
  v102->__shared_weak_owners_ = 0;
  v102->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38AC98;
  v102[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36DAB8;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v102[1], (uint64_t)v102);
  nitro::nitro_function::nitro_function(v102);
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "nonzero");
  int v103 = (std::__shared_weak_count *)operator new(0x20uLL);
  v103->__shared_owners_ = 0;
  v103->__shared_weak_owners_ = 0;
  v103->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38A758;
  v103[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36D4B8;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v103[1], (uint64_t)v103);
  nitro::nitro_function::nitro_function(v103);
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "precompiled_segment");
  uint64_t v104 = (std::__shared_weak_count *)operator new(0x20uLL);
  v104->__shared_owners_ = 0;
  v104->__shared_weak_owners_ = 0;
  v104->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38B9F0;
  v104[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36E9F8;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v104[1], (uint64_t)v104);
  nitro::nitro_function::nitro_function(v104);
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "one_hot");
  int v105 = (std::__shared_weak_count *)operator new(0x20uLL);
  v105->__shared_owners_ = 0;
  v105->__shared_weak_owners_ = 0;
  v105->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38A790;
  v105[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36D4F8;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v105[1], (uint64_t)v105);
  nitro::nitro_function::nitro_function(v105);
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "cumsum");
  size_t v106 = (std::__shared_weak_count *)operator new(0x20uLL);
  v106->__shared_owners_ = 0;
  v106->__shared_weak_owners_ = 0;
  v106->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38A3A0;
  v106[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36D078;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v106[1], (uint64_t)v106);
  nitro::nitro_function::nitro_function(v106);
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "dev_op");
  int v107 = (std::__shared_weak_count *)operator new(0x20uLL);
  v107->__shared_owners_ = 0;
  v107->__shared_weak_owners_ = 0;
  v107->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38A3D8;
  v107[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36D0B8;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v107[1], (uint64_t)v107);
  nitro::nitro_function::nitro_function(v107);
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "sparse_inner_product");
  uint64_t v108 = (std::__shared_weak_count *)operator new(0x20uLL);
  v108->__shared_owners_ = 0;
  v108->__shared_weak_owners_ = 0;
  v108->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38BB08;
  v108[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36EB38;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v108[1], (uint64_t)v108);
  nitro::nitro_function::nitro_function(v108);
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "grid_sampling");
  uint64_t v109 = (std::__shared_weak_count *)operator new(0x20uLL);
  v109->__shared_owners_ = 0;
  v109->__shared_weak_owners_ = 0;
  v109->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38B1A0;
  v109[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36E078;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v109[1], (uint64_t)v109);
  nitro::nitro_function::nitro_function(v109);
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "resample");
  long long v110 = (std::__shared_weak_count *)operator new(0x20uLL);
  v110->__shared_owners_ = 0;
  v110->__shared_weak_owners_ = 0;
  v110->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38A918;
  v110[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36D6B8;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v110[1], (uint64_t)v110);
  nitro::nitro_function::nitro_function(v110);
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "local_correlation");
  long long v111 = (std::__shared_weak_count *)operator new(0x20uLL);
  v111->__shared_owners_ = 0;
  v111->__shared_weak_owners_ = 0;
  v111->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38B830;
  v111[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36E7F8;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v111[1], (uint64_t)v111);
  nitro::nitro_function::nitro_function(v111);
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "bahdanau_attention");
  uint64_t v112 = (std::__shared_weak_count *)operator new(0x20uLL);
  v112->__shared_owners_ = 0;
  v112->__shared_weak_owners_ = 0;
  v112->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38B910;
  v112[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36E8F8;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v112[1], (uint64_t)v112);
  nitro::nitro_function::nitro_function(v112);
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "self_attention");
  long long v113 = (std::__shared_weak_count *)operator new(0x20uLL);
  v113->__shared_owners_ = 0;
  v113->__shared_weak_owners_ = 0;
  v113->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38B2B8;
  v113[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36E1B8;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v113[1], (uint64_t)v113);
  nitro::nitro_function::nitro_function(v113);
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "loopkit");
  uint64_t v114 = (std::__shared_weak_count *)operator new(0x20uLL);
  v114->__shared_owners_ = 0;
  v114->__shared_weak_owners_ = 0;
  v114->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38A720;
  v114[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36D478;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v114[1], (uint64_t)v114);
  nitro::nitro_function::nitro_function(v114);
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "pool3d");
  size_t v115 = (std::__shared_weak_count *)operator new(0x20uLL);
  v115->__shared_owners_ = 0;
  v115->__shared_weak_owners_ = 0;
  v115->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38A4B8;
  v115[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36D1B8;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v115[1], (uint64_t)v115);
  nitro::nitro_function::nitro_function(v115);
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "hierarchical_inner_product");
  unint64_t v116 = (std::__shared_weak_count *)operator new(0x20uLL);
  v116->__shared_owners_ = 0;
  v116->__shared_weak_owners_ = 0;
  v116->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38BCC8;
  v116[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36ED38;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v116[1], (uint64_t)v116);
  nitro::nitro_function::nitro_function(v116);
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "conv3d");
  uint64_t v117 = (std::__shared_weak_count *)operator new(0x20uLL);
  v117->__shared_owners_ = 0;
  v117->__shared_weak_owners_ = 0;
  v117->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38A368;
  v117[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36D038;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v117[1], (uint64_t)v117);
  nitro::nitro_function::nitro_function(v117);
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "argsort");
  uint64_t v118 = (std::__shared_weak_count *)operator new(0x20uLL);
  v118->__shared_owners_ = 0;
  v118->__shared_weak_owners_ = 0;
  v118->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38A528;
  v118[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36D238;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v118[1], (uint64_t)v118);
  nitro::nitro_function::nitro_function(v118);
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "slice_update");
  unint64_t v119 = (std::__shared_weak_count *)operator new(0x20uLL);
  v119->__shared_owners_ = 0;
  v119->__shared_weak_owners_ = 0;
  v119->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38B050;
  v119[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36DEF8;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v119[1], (uint64_t)v119);
  nitro::nitro_function::nitro_function(v119);
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "static_quantize");
  int v120 = (std::__shared_weak_count *)operator new(0x20uLL);
  v120->__shared_owners_ = 0;
  v120->__shared_weak_owners_ = 0;
  v120->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38B558;
  v120[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36E4B8;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v120[1], (uint64_t)v120);
  nitro::nitro_function::nitro_function(v120);
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "static_dequantize");
  uint64_t v121 = (std::__shared_weak_count *)operator new(0x20uLL);
  v121->__shared_owners_ = 0;
  v121->__shared_weak_owners_ = 0;
  v121->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38B8A0;
  v121[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36E878;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v121[1], (uint64_t)v121);
  nitro::nitro_function::nitro_function(v121);
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "fused_convolution_grad");
  int v122 = (std::__shared_weak_count *)operator new(0x20uLL);
  v122->__shared_owners_ = 0;
  v122->__shared_weak_owners_ = 0;
  v122->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38BB40;
  v122[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36EB78;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v122[1], (uint64_t)v122);
  nitro::nitro_function::nitro_function(v122);
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "fused_inner_product_grad");
  size_t v123 = (std::__shared_weak_count *)operator new(0x20uLL);
  v123->__shared_owners_ = 0;
  v123->__shared_weak_owners_ = 0;
  v123->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38BC90;
  v123[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36ECF8;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v123[1], (uint64_t)v123);
  nitro::nitro_function::nitro_function(v123);
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "deconv3d");
  size_t v124 = (std::__shared_weak_count *)operator new(0x20uLL);
  v124->__shared_owners_ = 0;
  v124->__shared_weak_owners_ = 0;
  v124->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38A8A8;
  v124[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36D638;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v124[1], (uint64_t)v124);
  nitro::nitro_function::nitro_function(v124);
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "general_slice_update");
  unint64_t v125 = (std::__shared_weak_count *)operator new(0x20uLL);
  v125->__shared_owners_ = 0;
  v125->__shared_weak_owners_ = 0;
  v125->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38BA98;
  v125[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36EAB8;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v125[1], (uint64_t)v125);
  nitro::nitro_function::nitro_function(v125);
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "resize_nearest_neighbor");
  size_t v126 = (std::__shared_weak_count *)operator new(0x20uLL);
  v126->__shared_owners_ = 0;
  v126->__shared_weak_owners_ = 0;
  v126->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38BC20;
  v126[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36EC78;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v126[1], (uint64_t)v126);
  nitro::nitro_function::nitro_function(v126);
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "einsum");
  unint64_t v127 = (std::__shared_weak_count *)operator new(0x20uLL);
  v127->__shared_owners_ = 0;
  v127->__shared_weak_owners_ = 0;
  v127->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38A410;
  v127[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36D0F8;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v127[1], (uint64_t)v127);
  nitro::nitro_function::nitro_function(v127);
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "tunneled_ane_op");
  uint64_t v128 = (std::__shared_weak_count *)operator new(0x20uLL);
  v128->__shared_owners_ = 0;
  v128->__shared_weak_owners_ = 0;
  v128->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38B5C8;
  v128[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36E538;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v128[1], (uint64_t)v128);
  nitro::nitro_function::nitro_function(v128);
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "tunneled_ane_unit");
  std::string::size_type v129 = (std::__shared_weak_count *)operator new(0x20uLL);
  v129->__shared_owners_ = 0;
  v129->__shared_weak_owners_ = 0;
  v129->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38B8D8;
  v129[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36E8B8;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v129[1], (uint64_t)v129);
  nitro::nitro_function::nitro_function(v129);
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "plane_rw");
  uint64_t v130 = (std::__shared_weak_count *)operator new(0x20uLL);
  v130->__shared_owners_ = 0;
  v130->__shared_weak_owners_ = 0;
  v130->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38A8E0;
  v130[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36D678;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v130[1], (uint64_t)v130);
  nitro::nitro_function::nitro_function(v130);
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "linear_quantize");
  int v131 = (std::__shared_weak_count *)operator new(0x20uLL);
  v131->__shared_owners_ = 0;
  v131->__shared_weak_owners_ = 0;
  v131->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38B440;
  v131[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36E378;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v131[1], (uint64_t)v131);
  nitro::nitro_function::nitro_function(v131);
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "linear_dequantize");
  int v132 = (std::__shared_weak_count *)operator new(0x20uLL);
  v132->__shared_owners_ = 0;
  v132->__shared_weak_owners_ = 0;
  v132->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38B7F8;
  v132[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36E7B8;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v132[1], (uint64_t)v132);
  nitro::nitro_function::nitro_function(v132);
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "wg_tx_in");
  long long v133 = (std::__shared_weak_count *)operator new(0x20uLL);
  v133->__shared_owners_ = 0;
  v133->__shared_weak_owners_ = 0;
  v133->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38B9B8;
  v133[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36E9B8;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v133[1], (uint64_t)v133);
  nitro::nitro_function::nitro_function(v133);
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "wg_tx_out");
  uint64_t v134 = (std::__shared_weak_count *)operator new(0x20uLL);
  v134->__shared_owners_ = 0;
  v134->__shared_weak_owners_ = 0;
  v134->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38BA60;
  v134[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36EA78;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v134[1], (uint64_t)v134);
  nitro::nitro_function::nitro_function(v134);
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "wg_tx_transform_weights");
  uint64_t v135 = (std::__shared_weak_count *)operator new(0x20uLL);
  v135->__shared_owners_ = 0;
  v135->__shared_weak_owners_ = 0;
  v135->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38BA60;
  v135[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36EA78;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v135[1], (uint64_t)v135);
  nitro::nitro_function::nitro_function(v135);
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "meta_convolution");
  unint64_t v136 = (std::__shared_weak_count *)operator new(0x20uLL);
  v136->__shared_owners_ = 0;
  v136->__shared_weak_owners_ = 0;
  v136->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38B718;
  v136[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36E6B8;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v136[1], (uint64_t)v136);
  nitro::nitro_function::nitro_function(v136);
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "furthest_point_sampling");
  uint64_t v137 = (std::__shared_weak_count *)operator new(0x20uLL);
  v137->__shared_owners_ = 0;
  v137->__shared_weak_owners_ = 0;
  v137->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38BB78;
  v137[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36EBB8;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v137[1], (uint64_t)v137);
  nitro::nitro_function::nitro_function(v137);
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "degamma");
  uint64_t v138 = (std::__shared_weak_count *)operator new(0x20uLL);
  v138->__shared_owners_ = 0;
  v138->__shared_weak_owners_ = 0;
  v138->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38A678;
  v138[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36D3B8;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v138[1], (uint64_t)v138);
  nitro::nitro_function::nitro_function(v138);
  if (v140 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1922BD0C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  nitro::nitro_function::nitro_function(v15);
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::generic_store_global_kernel::register_layer_io(uint64_t a1)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "store_global");
  uint64_t v2 = (std::__shared_weak_count *)operator new(0x20uLL);
  v2->__shared_owners_ = 0;
  v2->__shared_weak_owners_ = 0;
  v2->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38B088;
  v2[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36DF38;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v2[1], (uint64_t)v2);
  nitro::nitro_function::nitro_function(v2);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1922BD5E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  nitro::nitro_function::nitro_function(v15);
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::generic_cf_loop_kernel::register_layer_io(uint64_t a1)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "cf_loop");
  uint64_t v2 = (std::__shared_weak_count *)operator new(0x20uLL);
  v2->__shared_owners_ = 0;
  v2->__shared_weak_owners_ = 0;
  v2->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38A640;
  v2[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36D378;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v2[1], (uint64_t)v2);
  nitro::nitro_function::nitro_function(v2);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1922BD6B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  nitro::nitro_function::nitro_function(v15);
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::generic_cf_if_kernel::register_layer_io(uint64_t a1)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "cf_if");
  uint64_t v2 = (std::__shared_weak_count *)operator new(0x20uLL);
  v2->__shared_owners_ = 0;
  v2->__shared_weak_owners_ = 0;
  v2->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38A1E0;
  v2[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36CE78;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v2[1], (uint64_t)v2);
  nitro::nitro_function::nitro_function(v2);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1922BD790(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  nitro::nitro_function::nitro_function(v15);
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::generic_alloc_kernel::register_layer_io(uint64_t a1)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "alloc");
  uint64_t v2 = (std::__shared_weak_count *)operator new(0x20uLL);
  v2->__shared_owners_ = 0;
  v2->__shared_weak_owners_ = 0;
  v2->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38A170;
  v2[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36CDF8;
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::register_object(a1, (uint64_t)__p, (uint64_t)&v2[1], (uint64_t)v2);
  nitro::nitro_function::nitro_function(v2);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1922BD868(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  nitro::nitro_function::nitro_function(v15);
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::MILTranslator::LayerTranslator::LoadConstant(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *((void *)&v77 + 1) = *MEMORY[0x1E4F143B8];
  uint64_t v9 = (*(uint64_t (**)(void))(**(void **)a4 + 32))();
  uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 24))(v9);
  if (!v10)
  {
    if (*(char *)(a3 + 23) >= 0) {
      uint64_t v51 = (const std::string::value_type *)a3;
    }
    else {
      uint64_t v51 = *(const std::string::value_type **)a3;
    }
    Espresso::throw_exception_selector<Espresso::network_translation_error,char const*>("cannot load non-tensor '%s' as constant", (uint64_t)v51);
  }
  uint64_t v11 = v10;
  long long v67 = xmmword_192DC3600;
  unint64_t v68 = 0xFFFFFFFF00000001;
  uint64_t v12 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v10 + 96))(v10);
  memset(&v74, 0, sizeof(v74));
  std::vector<int>::reserve(&v74, (uint64_t)(v12[1] - *v12) >> 3);
  uint64_t v53 = a2;
  uint64_t v13 = a1;
  uint64_t v14 = (void *)*v12;
  std::string::size_type v15 = (void *)v12[1];
  if ((void *)*v12 == v15)
  {
    std::vector<std::string>::pointer end = v74.__end_;
  }
  else
  {
    do
    {
      uint64_t v16 = (*(uint64_t (**)(void))(*(void *)*v14 + 16))(*v14);
      if (!v16)
      {
        if (*(char *)(a3 + 23) >= 0) {
          uint64_t v50 = a3;
        }
        else {
          uint64_t v50 = *(void *)a3;
        }
        Espresso::throw_exception_selector<Espresso::network_translation_error,char const*>("unexpected non-constant dimension in '%s'", v50);
      }
      int v17 = (*(uint64_t (**)(uint64_t))(*(void *)v16 + 48))(v16);
      int v18 = v17;
      std::vector<int>::pointer v19 = v74.__end_;
      if (v74.__end_ >= v74.__end_cap_.__value_)
      {
        std::vector<int>::pointer begin = v74.__begin_;
        int64_t v22 = v74.__end_ - v74.__begin_;
        unint64_t v23 = v22 + 1;
        if ((unint64_t)(v22 + 1) >> 62) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        int64_t v24 = (char *)v74.__end_cap_.__value_ - (char *)v74.__begin_;
        if (((char *)v74.__end_cap_.__value_ - (char *)v74.__begin_) >> 1 > v23) {
          unint64_t v23 = v24 >> 1;
        }
        if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v25 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v25 = v23;
        }
        if (v25)
        {
          unint64_t v25 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v25);
          std::vector<int>::pointer begin = v74.__begin_;
          std::vector<int>::pointer v19 = v74.__end_;
        }
        else
        {
          uint64_t v26 = 0;
        }
        size_t v27 = (int *)(v25 + 4 * v22);
        int *v27 = v18;
        std::vector<std::string>::pointer end = v27 + 1;
        while (v19 != begin)
        {
          int v28 = *--v19;
          *--size_t v27 = v28;
        }
        v74.__begin_ = v27;
        v74.__end_ = end;
        v74.__end_cap_.__value_ = (int *)(v25 + 4 * v26);
        if (begin) {
          operator delete(begin);
        }
      }
      else
      {
        *v74.__end_ = v17;
        std::vector<std::string>::pointer end = v19 + 1;
      }
      v74.__end_ = end;
      ++v14;
    }
    while (v14 != v15);
  }
  uint64_t v29 = (char *)end - (char *)v74.__begin_;
  if ((unint64_t)((char *)end - (char *)v74.__begin_) > 0x14)
  {
    if (*(char *)(a3 + 23) >= 0) {
      uint64_t v52 = a3;
    }
    else {
      uint64_t v52 = *(void *)a3;
    }
    Espresso::throw_exception_selector<Espresso::network_translation_error,char const*>("cannot load tensor '%s' with rank > 5", v52);
  }
  uint64_t v30 = v13;
  if (end == v74.__begin_)
  {
    LODWORD(v67) = 1;
    if (!end) {
      goto LABEL_32;
    }
  }
  else
  {
    uint64_t v31 = v29 >> 2;
    size_t v32 = &v74.__begin_[v29 >> 2];
    LODWORD(v67) = *(v32 - 1);
    if ((unint64_t)v29 >= 5)
    {
      DWORD1(v67) = *(v32 - 2);
      if ((unint64_t)v29 >= 9)
      {
        uint64_t v33 = &v74.__begin_[v31];
        DWORD2(v67) = *(v33 - 3);
        if ((unint64_t)v29 >= 0xD)
        {
          HIDWORD(v67) = *(v33 - 4);
          if ((unint64_t)v29 >= 0x11) {
            LODWORD(v68) = v74.__begin_[v31 - 5];
          }
        }
      }
    }
  }
  v74.__end_ = v74.__begin_;
  operator delete(v74.__begin_);
LABEL_32:
  BOOL v34 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v11 + 96))(v11);
  uint64_t v35 = (v34[1] - *v34) >> 3;
  if ((int)v35 <= 1) {
    LODWORD(v35) = 1;
  }
  HIDWORD(v68) = v35;
  unsigned int v36 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 88))(v11) - 2;
  if (v36 >= 0x10 || ((0xF79Du >> v36) & 1) == 0) {
    Espresso::throw_exception_selector<Espresso::network_translation_error>("Type unsupported by Espresso encountered");
  }
  int v37 = dword_192E06160[v36];
  uint64_t v38 = *(void *)(v13 + 40);
  std::string::basic_string[abi:ne180100]<0>(v63, "load_constant");
  uint64_t v60 = 0;
  uint64_t v61 = 0;
  uint64_t v62 = 0;
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v76, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string v76 = *(std::string *)a3;
  }
  int v57 = 0;
  uint64_t v58 = 0;
  unint64_t v59 = 0;
  v74.__begin_ = (std::vector<int>::pointer)&v57;
  LOBYTE(v74.__end_) = 0;
  int v57 = (std::string *)operator new(0x18uLL);
  uint64_t v58 = v57;
  unint64_t v59 = v57 + 1;
  uint64_t v58 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v59, (long long *)&v76, &v77, v57);
  int v70 = v37;
  std::vector<Espresso::compute_path>::vector(__p, 0xAAAAAAAAAAAAAAABLL * (((char *)v58 - (char *)v57) >> 3), &v70);
  size_t v40 = v57;
  for (unsigned int i = v58; v40 != i; ++v40)
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(v38 + 240, (uint64_t)v40, (uint64_t)v40);
  Espresso::MILTranslator::TypedEspressoBuilder::PropagateOutputTypes(v38, (uint64_t *)&v57, (uint64_t *)__p);
  (*(void (**)(std::vector<int> *__return_ptr, uint64_t))(*(void *)a5 + 24))(&v74, a5);
  std::string::operator=((std::string *)(v38 + 56), (const std::string *)&v74);
  if (SHIBYTE(v74.__end_cap_.__value_) < 0) {
    operator delete(v74.__begin_);
  }
  memset(&v74, 0, sizeof(v74));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v74, v60, v61, 0xAAAAAAAAAAAAAAABLL * ((v61 - v60) >> 3));
  uint64_t v71 = 0;
  uint64_t v72 = 0;
  uint64_t v73 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v71, (uint64_t)v57, (uint64_t)v58, 0xAAAAAAAAAAAAAAABLL * (((char *)v58 - (char *)v57) >> 3));
  Espresso::sequential_builder::add<Espresso::load_constant_params>((uint64_t *)&v65, (uint64_t *)v38, (uint64_t)v63, v53, (uint64_t)&v67, (uint64_t)v74.__begin_, (uint64_t)v74.__end_, &v71);
  uint64_t v75 = (std::vector<int> *)&v71;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v75);
  uint64_t v75 = &v74;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v75);
  if (*(char *)(v38 + 79) < 0)
  {
    **(unsigned char **)(v38 + 56) = 0;
    *(void *)(v38 + 64) = 0;
  }
  else
  {
    *(unsigned char *)(v38 + 56) = 0;
    *(unsigned char *)(v38 + 79) = 0;
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v74.__begin_ = (std::vector<int>::pointer)&v57;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v74);
  if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v76.__r_.__value_.__l.__data_);
  }
  v74.__begin_ = (std::vector<int>::pointer)&v60;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v74);
  if (v64 < 0) {
    operator delete(v63[0]);
  }
  BOOL v42 = v65;
  int v41 = v66;
  if (v66) {
    atomic_fetch_add_explicit(&v66->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v43 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 16))(v11);
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v71, v43, 1, 1, 1);
  uint64_t v44 = MIL::IRValue::AsTensor(*(MIL::IRValue **)a4);
  uint64_t v45 = (*(uint64_t (**)(uint64_t))(*(void *)v44 + 32))(v44);
  if ((*(unsigned int (**)(uint64_t))(*(void *)v45 + 88))(v45) == 5)
  {
    uint64_t v46 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 16))(v11);
    std::__shared_count v56 = *(std::__shared_count *)a4;
    uint64_t shared_owners = v56.__shared_owners_;
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    std::string v48 = (std::__shared_weak_count *)shared_owners;
    std::string::basic_string[abi:ne180100]<0>(&v74, "constant_blob");
    Espresso::MILTranslator::LayerTranslator::SetKernelParameter<float>(v30, v42, &v56, (uint64_t)&v74, 0, 4 * v46);
    if (SHIBYTE(v74.__end_cap_.__value_) < 0) {
      operator delete(v74.__begin_);
    }
  }
  else
  {
    if (*(unsigned char *)(v13 + 304)) {
      goto LABEL_63;
    }
    uint64_t v49 = v71;
    Espresso::MILTranslator::CopyIRValueToFloat32Blob<4>(*(MIL::IRValue **)a4, v71);
    std::string v48 = v72;
    v55[0] = v49;
    v55[1] = v72;
    if (v72) {
      atomic_fetch_add_explicit(&v72->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    Espresso::generic_load_constant_kernel::set_constant_blob(v42, (uint64_t)v55);
  }
  if (v48) {
    nitro::nitro_function::nitro_function(v48);
  }
LABEL_63:
  if (v72) {
    nitro::nitro_function::nitro_function(v72);
  }
  if (v41) {
    nitro::nitro_function::nitro_function(v41);
  }
  if (v66) {
    nitro::nitro_function::nitro_function(v66);
  }
}

void sub_1922BE040(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,std::__shared_weak_count *a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34)
{
  if (v34) {
    nitro::nitro_function::nitro_function(v34);
  }
  uint64_t v38 = *(std::__shared_weak_count **)(v36 - 176);
  if (v38) {
    nitro::nitro_function::nitro_function(v38);
  }
  if (v35) {
    nitro::nitro_function::nitro_function(v35);
  }
  if (a29) {
    nitro::nitro_function::nitro_function(a29);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::generic_load_constant_kernel::set_constant_blob(_DWORD *a1, uint64_t a2)
{
  uint64_t v2 = *(_DWORD **)a2;
  if (!*(void *)a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "generic_load_constant_kernel must have a blob set");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (v2[2] != a1[76])
  {
    uint64_t v5 = std::runtime_error::runtime_error(&v17, "generic_load_constant_kernel wrong size");
    std::runtime_error::~runtime_error(v5);
    uint64_t v2 = *(_DWORD **)a2;
  }
  if (v2[3] != a1[77])
  {
    uint64_t v6 = std::runtime_error::runtime_error(&v16, "generic_load_constant_kernel wrong size");
    std::runtime_error::~runtime_error(v6);
    uint64_t v2 = *(_DWORD **)a2;
  }
  if (v2[4] != a1[78])
  {
    std::runtime_error::runtime_error(&v15, "generic_load_constant_kernel wrong size");
    std::runtime_error::~runtime_error(&v15);
    uint64_t v2 = *(_DWORD **)a2;
  }
  if (v2[5] != a1[80] * a1[79])
  {
    std::runtime_error::runtime_error(&v14, "generic_load_constant_kernel wrong size");
    std::runtime_error::~runtime_error(&v14);
  }
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "constant_blob");
  uint64_t v7 = 0;
  uint64_t v8 = *(int *)(*(void *)a2 + 8);
  do
  {
    v8 *= *(int *)(*(void *)a2 + 12 + v7);
    v7 += 4;
  }
  while (v7 != 12);
  (*(void (**)(_DWORD *, uint64_t *, void **, void, uint64_t, void))(*(void *)a1 + 160))(a1, &v12, __p, *(void *)(*(void *)a2 + 24), 4 * v8, 0);
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  if (v13) {
    nitro::nitro_function::nitro_function(v13);
  }
}

void sub_1922BE34C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17)
{
  __cxa_free_exception(v17);
  _Unwind_Resume(a1);
}

void Espresso::sequential_builder::add<Espresso::load_constant_params>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  std::vector<int>::pointer v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v19, a6, a7, 0xAAAAAAAAAAAAAAABLL * ((a7 - a6) >> 3));
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v16, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * ((a8[1] - *a8) >> 3));
  uint64_t v14 = a2[12];
  LODWORD(v23[0]) = (***(uint64_t (****)(void))(a2[14] + 8))(*(void *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v14, (uint64_t)(a2 + 14), a3, a5, (int *)v23);
  std::runtime_error v15 = (std::__shared_weak_count *)a1[1];
  v24[0] = *a1;
  v24[1] = v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(v23, 0, sizeof(v23));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v23, (uint64_t)v19, v20, 0xAAAAAAAAAAAAAAABLL * ((v20 - (uint64_t)v19) >> 3));
  memset(v22, 0, sizeof(v22));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v22, v16, v17, 0xAAAAAAAAAAAAAAABLL * ((v17 - v16) >> 3));
  Espresso::sequential_builder::add_kernel_dbg((uint64_t)a2, v24, a3, a4, (uint64_t)(a2 + 7), v23, v22);
  unint64_t v25 = v22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
  unint64_t v25 = v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
  if (*a2) {
    Espresso::sequential_builder::add_shape_from_kernel(a2, *a1, &v19, &v16);
  }
  v23[0] = (std::string *)&v16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v23);
  v23[0] = (std::string *)&v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v23);
}

void sub_1922BE56C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v16 = *(std::__shared_weak_count **)(v13 + 8);
  if (v16) {
    nitro::nitro_function::nitro_function(v16);
  }
  *(void *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(void *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

void Espresso::MILTranslator::CopyIRValueToFloat32Blob<4>(MIL::IRValue *a1, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(MIL::IRValue *))(*(void *)a1 + 32))(a1);
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 24))(v4);
  switch((*(unsigned int (**)(uint64_t))(*(void *)v5 + 88))(v5))
  {
    case 2u:
      MIL::IRValue::AsTensor(a1);
      Data = (unsigned __int8 *)MIL::IRTensorValue::GetDataView<BOOL>();
      unint64_t v8 = *(int *)(a2 + 8);
      for (uint64_t i = 12; i != 24; i += 4)
        v8 *= *(int *)(a2 + i);
      if (v8 != v6) {
        goto LABEL_104;
      }
      height = 0;
      char v11 = 0;
      memset(&src, 0, 24);
      if (v8)
      {
        std::vector<unsigned int>::__vallocate[abi:ne180100](&src, v8);
        height = (float *)src.height;
        do
        {
          if (*Data++) {
            float v13 = 1.0;
          }
          else {
            float v13 = 0.0;
          }
          *height++ = v13;
          --v8;
        }
        while (v8);
        src.height = (vImagePixelCount)height;
        char v11 = src.data;
      }
      uint64_t v14 = (char *)height - v11;
      uint64_t v15 = v14 >> 2;
      if (v14) {
        uint64_t v16 = v11;
      }
      else {
        uint64_t v16 = 0;
      }
      goto LABEL_101;
    case 4u:
      MIL::IRValue::AsTensor(a1);
      uint64_t v81 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
      uint64_t v83 = 0;
      uint64_t v84 = *(int *)(a2 + 8);
      do
      {
        v84 *= *(int *)(a2 + 12 + v83);
        v83 += 4;
      }
      while (v83 != 12);
      if (v84 != v82) {
        goto LABEL_104;
      }
      int v85 = *(void **)(a2 + 24);
      if ((v84 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
        int v86 = (void *)v81;
      }
      else {
        int v86 = 0;
      }
      src.std::string::pointer data = v86;
      src.height = 1;
      src.width = v84 & 0x7FFFFFFFFFFFFFFFLL;
      src.rowBytes = 2 * v84;
      v91.std::string::pointer data = v85;
      v91.height = 1;
      v91.width = v84 & 0x7FFFFFFFFFFFFFFFLL;
      v91.rowBytes = 4 * v84;
      vImageConvert_Planar16FtoPlanarF(&src, &v91, 0);
      return;
    case 5u:
      MIL::IRValue::AsTensor(a1);
      uint64_t v17 = (void *)MIL::IRTensorValue::GetDataView<float>();
      Espresso::MILTranslator::CopySpanToFloat32Blob<float,4>(v17, v18, a2);
      return;
    case 6u:
      MIL::IRValue::AsTensor(a1);
      uint64_t v20 = (double *)MIL::IRTensorValue::GetDataView<double>();
      uint64_t v21 = *(int *)(a2 + 8);
      for (uint64_t j = 12; j != 24; j += 4)
        v21 *= *(int *)(a2 + j);
      if (v21 != v19) {
        goto LABEL_104;
      }
      unint64_t v23 = 0;
      int64_t v24 = 0;
      uint64_t v25 = 8 * v21;
      memset(&src, 0, 24);
      if (8 * v21)
      {
        std::vector<unsigned int>::__vallocate[abi:ne180100](&src, (8 * v21) >> 3);
        unint64_t v23 = (float *)src.height;
        if (v21)
        {
          do
          {
            double v26 = *v20++;
            float v27 = v26;
            *v23++ = v27;
            v25 -= 8;
          }
          while (v25);
        }
        src.height = (vImagePixelCount)v23;
        int64_t v24 = src.data;
      }
      uint64_t v28 = (char *)v23 - v24;
      uint64_t v15 = v28 >> 2;
      if (v28) {
        uint64_t v16 = v24;
      }
      else {
        uint64_t v16 = 0;
      }
      goto LABEL_101;
    case 9u:
      MIL::IRValue::AsTensor(a1);
      uint64_t v30 = (char *)MIL::IRTensorValue::GetDataView<signed char>();
      unint64_t v31 = *(int *)(a2 + 8);
      for (uint64_t k = 12; k != 24; k += 4)
        v31 *= *(int *)(a2 + k);
      if (v31 != v29) {
        goto LABEL_104;
      }
      uint64_t v33 = 0;
      BOOL v34 = 0;
      memset(&src, 0, 24);
      if (v31)
      {
        std::vector<unsigned int>::__vallocate[abi:ne180100](&src, v31);
        uint64_t v33 = (float *)src.height;
        do
        {
          int v35 = *v30++;
          *v33++ = (float)v35;
          --v31;
        }
        while (v31);
        src.height = (vImagePixelCount)v33;
        BOOL v34 = src.data;
      }
      uint64_t v36 = (char *)v33 - v34;
      uint64_t v15 = v36 >> 2;
      if (v36) {
        uint64_t v16 = v34;
      }
      else {
        uint64_t v16 = 0;
      }
      goto LABEL_101;
    case 0xAu:
      MIL::IRValue::AsTensor(a1);
      uint64_t v38 = (__int16 *)MIL::IRTensorValue::GetDataView<short>();
      uint64_t v39 = *(int *)(a2 + 8);
      for (uint64_t m = 12; m != 24; m += 4)
        v39 *= *(int *)(a2 + m);
      if (v39 != v37) {
        goto LABEL_104;
      }
      int v41 = 0;
      BOOL v42 = 0;
      uint64_t v43 = 2 * v39;
      memset(&src, 0, 24);
      if (2 * v39)
      {
        std::vector<unsigned int>::__vallocate[abi:ne180100](&src, (2 * v39) >> 1);
        int v41 = (float *)src.height;
        if (v39)
        {
          do
          {
            int v44 = *v38++;
            *v41++ = (float)v44;
            v43 -= 2;
          }
          while (v43);
        }
        src.height = (vImagePixelCount)v41;
        BOOL v42 = src.data;
      }
      uint64_t v45 = (char *)v41 - v42;
      uint64_t v15 = v45 >> 2;
      if (v45) {
        uint64_t v16 = v42;
      }
      else {
        uint64_t v16 = 0;
      }
      goto LABEL_101;
    case 0xBu:
      MIL::IRValue::AsTensor(a1);
      size_t v87 = (int *)MIL::IRTensorValue::GetDataView<int>();
      uint64_t v89 = *(int *)(a2 + 8);
      for (uint64_t n = 12; n != 24; n += 4)
        v89 *= *(int *)(a2 + n);
      if (v89 != v88) {
        goto LABEL_104;
      }
      memset(&src, 0, 24);
      std::vector<float>::__init_with_size[abi:ne180100]<int const*,int const*>((char *)&src, v87, &v87[v89], (4 * v89) >> 2);
      uint64_t v15 = (uint64_t)(src.height - (unint64_t)src.data) >> 2;
      if ((void *)src.height == src.data) {
        uint64_t v16 = 0;
      }
      else {
        uint64_t v16 = src.data;
      }
      goto LABEL_101;
    case 0xCu:
      MIL::IRValue::AsTensor(a1);
      uint64_t v47 = (uint64_t *)MIL::IRTensorValue::GetDataView<long long>();
      uint64_t v48 = *(int *)(a2 + 8);
      for (iuint64_t i = 12; ii != 24; ii += 4)
        v48 *= *(int *)(a2 + ii);
      if (v48 != v46) {
        goto LABEL_104;
      }
      uint64_t v50 = 0;
      uint64_t v51 = 0;
      uint64_t v52 = 8 * v48;
      memset(&src, 0, 24);
      if (8 * v48)
      {
        std::vector<unsigned int>::__vallocate[abi:ne180100](&src, (8 * v48) >> 3);
        uint64_t v50 = (float *)src.height;
        if (v48)
        {
          do
          {
            uint64_t v53 = *v47++;
            *v50++ = (float)v53;
            v52 -= 8;
          }
          while (v52);
        }
        src.height = (vImagePixelCount)v50;
        uint64_t v51 = src.data;
      }
      uint64_t v54 = (char *)v50 - v51;
      uint64_t v15 = v54 >> 2;
      if (v54) {
        uint64_t v16 = v51;
      }
      else {
        uint64_t v16 = 0;
      }
      goto LABEL_101;
    case 0xEu:
      MIL::IRValue::AsTensor(a1);
      std::__shared_count v56 = (unsigned __int8 *)MIL::IRTensorValue::GetDataView<unsigned char>();
      unint64_t v57 = *(int *)(a2 + 8);
      for (juint64_t j = 12; jj != 24; jj += 4)
        v57 *= *(int *)(a2 + jj);
      if (v57 != v55) {
        goto LABEL_104;
      }
      unint64_t v59 = 0;
      uint64_t v60 = 0;
      memset(&src, 0, 24);
      if (v57)
      {
        std::vector<unsigned int>::__vallocate[abi:ne180100](&src, v57);
        unint64_t v59 = (float *)src.height;
        do
        {
          unsigned int v61 = *v56++;
          *v59++ = (float)v61;
          --v57;
        }
        while (v57);
        src.height = (vImagePixelCount)v59;
        uint64_t v60 = src.data;
      }
      uint64_t v62 = (char *)v59 - v60;
      uint64_t v15 = v62 >> 2;
      if (v62) {
        uint64_t v16 = v60;
      }
      else {
        uint64_t v16 = 0;
      }
      goto LABEL_101;
    case 0xFu:
      MIL::IRValue::AsTensor(a1);
      char v64 = (unsigned __int16 *)MIL::IRTensorValue::GetDataView<unsigned short>();
      uint64_t v65 = *(int *)(a2 + 8);
      for (kuint64_t k = 12; kk != 24; kk += 4)
        v65 *= *(int *)(a2 + kk);
      if (v65 != v63) {
        goto LABEL_104;
      }
      long long v67 = 0;
      unint64_t v68 = 0;
      uint64_t v69 = 2 * v65;
      memset(&src, 0, 24);
      if (2 * v65)
      {
        std::vector<unsigned int>::__vallocate[abi:ne180100](&src, (2 * v65) >> 1);
        long long v67 = (float *)src.height;
        if (v65)
        {
          do
          {
            unsigned int v70 = *v64++;
            *v67++ = (float)v70;
            v69 -= 2;
          }
          while (v69);
        }
        src.height = (vImagePixelCount)v67;
        unint64_t v68 = src.data;
      }
      uint64_t v71 = (char *)v67 - v68;
      uint64_t v15 = v71 >> 2;
      if (v71) {
        uint64_t v16 = v68;
      }
      else {
        uint64_t v16 = 0;
      }
      goto LABEL_101;
    case 0x10u:
      MIL::IRValue::AsTensor(a1);
      uint64_t v73 = (unsigned int *)MIL::IRTensorValue::GetDataView<unsigned int>();
      uint64_t v74 = *(int *)(a2 + 8);
      for (muint64_t m = 12; mm != 24; mm += 4)
        v74 *= *(int *)(a2 + mm);
      if (v74 != v72) {
LABEL_104:
      }
        Espresso::throw_exception_selector<Espresso::network_translation_error>("Destination blob size is different than source data.");
      std::string v76 = 0;
      long long v77 = 0;
      uint64_t v78 = 4 * v74;
      memset(&src, 0, 24);
      if (4 * v74)
      {
        std::vector<unsigned int>::__vallocate[abi:ne180100](&src, (4 * v74) >> 2);
        std::string v76 = (float *)src.height;
        if (v74)
        {
          do
          {
            unsigned int v79 = *v73++;
            *v76++ = (float)v79;
            v78 -= 4;
          }
          while (v78);
        }
        src.height = (vImagePixelCount)v76;
        long long v77 = src.data;
      }
      uint64_t v80 = (char *)v76 - v77;
      uint64_t v15 = v80 >> 2;
      if (v80) {
        uint64_t v16 = v77;
      }
      else {
        uint64_t v16 = 0;
      }
LABEL_101:
      Espresso::MILTranslator::CopySpanToFloat32Blob<float,4>(v16, v15, a2);
      if (src.data)
      {
        src.height = (vImagePixelCount)src.data;
        operator delete(src.data);
      }
      return;
    default:
      Espresso::throw_exception_selector<Espresso::network_translation_error>("Type unsupported for loading constants.");
  }
}

void sub_1922BECC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::MILTranslator::LayerTranslator::TranslateRsqrt(Espresso::MILTranslator::LayerTranslator *this, const MIL::IROperation *a2)
{
  std::string::basic_string[abi:ne180100]<0>(&v21, "epsilon");
  uint64_t ParameterValue = (Espresso::MILTranslator::LayerTranslator *)MIL::IROperation::GetParameterValue();
  Espresso::MILTranslator::LayerTranslator::GetFloatScalarValue(ParameterValue, a2, v5);
  int v7 = v6;
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
  v14[0] = 12;
  v14[1] = 1065353216;
  int v15 = v7;
  int v16 = 0;
  char v17 = 0;
  int v18 = 0;
  int v19 = 0;
  std::string::basic_string[abi:ne180100]<0>(v12, "x");
  Espresso::MILTranslator::LayerTranslator::EnsureInputBlobFromParameter(&v21, (uint64_t)this, (uint64_t)v12, a2, 0);
  std::string::basic_string[abi:ne180100]<0>(v10, "");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  Espresso::MILTranslator::LayerTranslator::AddElementWiseUnary(&v20, (uint64_t)this, a2, (uint64_t)v14, (uint64_t)&v21, (uint64_t)v10, (uint64_t)__p);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
  if (v13 < 0) {
    operator delete(v12[0]);
  }
}

void sub_1922BEE70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (*(char *)(v26 - 33) < 0) {
    operator delete(*(void **)(v26 - 56));
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::MILTranslator::LayerTranslator::GetFloatScalarValue(Espresso::MILTranslator::LayerTranslator *this, const MIL::IRValue *a2, const MIL::IROperation *a3)
{
  uint64_t result = MEMORY[0x192FF0A00](this, a2, a3);
  if (!result)
  {
    uint64_t result = MEMORY[0x192FF09F0](this);
    if (!result)
    {
      int v6 = (MIL::Fp16 *)MEMORY[0x192FF09B0](this);
      if (v6)
      {
        return MIL::Fp16::GetFloat(v6);
      }
      else
      {
        uint64_t result = MEMORY[0x192FF09E0](this);
        if (!result)
        {
          uint64_t result = MEMORY[0x192FF0A30](this);
          if (!result)
          {
            uint64_t Location = MIL::IRObject::GetLocation(a2);
            (*(void (**)(void *__return_ptr))(*(void *)Location + 24))(v14);
            int v8 = v15;
            char v9 = (void *)v14[0];
            std::string::basic_string[abi:ne180100]<0>(v12, "unable to extract constant input's scalar value");
            if (v8 >= 0) {
              uint64_t v10 = v14;
            }
            else {
              uint64_t v10 = v9;
            }
            if (v13 >= 0) {
              char v11 = v12;
            }
            else {
              char v11 = (void *)v12[0];
            }
            Espresso::throw_exception_selector<Espresso::network_translation_error,char const*,char const*>("MIL->EIR translation error %s: %s", (uint64_t)v10, (uint64_t)v11);
          }
        }
      }
    }
  }
  return result;
}

void sub_1922BF024(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::MILTranslator::LayerTranslator::AddElementWiseUnary(std::string *a1, uint64_t a2, const MIL::IROperation *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(void *)&long long v35 = *MEMORY[0x1E4F143B8];
  int v14 = *(char *)(a6 + 23);
  if (v14 < 0)
  {
    std::string::__init_copy_ctor_external(&v34, *(const std::string::value_type **)a6, *(void *)(a6 + 8));
    if (*(char *)(a6 + 23) < 0)
    {
      if (*(void *)(a6 + 8)) {
        goto LABEL_3;
      }
    }
    else if (*(unsigned char *)(a6 + 23))
    {
      goto LABEL_3;
    }
  }
  else
  {
    std::string v34 = *(std::string *)a6;
    if ((_BYTE)v14)
    {
LABEL_3:
      uint64_t v25 = 0;
      uint64_t v26 = 0;
      float v27 = 0;
      std::string __p = &v25;
      char v23 = 0;
      uint64_t v25 = (std::string *)operator new(0x18uLL);
      uint64_t v26 = v25;
      float v27 = v25 + 1;
      uint64_t v26 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v27, (long long *)&v34, &v35, v25);
      goto LABEL_7;
    }
  }
  (*(void (**)(std::string **__return_ptr, const MIL::IROperation *))(*(void *)a3 + 200))(&v25, a3);
LABEL_7:
  if (*(char *)(a7 + 23) < 0)
  {
    std::string::size_type v15 = *(void *)(a7 + 8);
    if (v15)
    {
      std::string::__init_copy_ctor_external(&v21, *(const std::string::value_type **)a7, v15);
      goto LABEL_13;
    }
  }
  else if (*(unsigned char *)(a7 + 23))
  {
    std::string v21 = *(std::string *)a7;
    goto LABEL_13;
  }
  Espresso::MILTranslator::LayerTranslator::GetLayerName(&v21, a3);
LABEL_13:
  Espresso::MILTranslator::NameGenerator::NameForPrefix((void *)(a2 + 168), (uint64_t)&v21, (uint64_t)&__p);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
  if (*(char *)(a5 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v32, *(const std::string::value_type **)a5, *(void *)(a5 + 8));
  }
  else {
    std::string v32 = *(std::string *)a5;
  }
  memset(&v21, 0, sizeof(v21));
  v30.__r_.__value_.__r.__words[0] = (std::string::size_type)&v21;
  v30.__r_.__value_.__s.__data_[8] = 0;
  v21.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
  v21.__r_.__value_.__l.__size_ = v21.__r_.__value_.__r.__words[0];
  v21.__r_.__value_.__r.__words[2] = v21.__r_.__value_.__r.__words[0] + 24;
  v21.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v21.__r_.__value_.__r.__words[2], (long long *)&v32, (long long *)&v33, (std::string *)v21.__r_.__value_.__l.__data_);
  Espresso::MILTranslator::LayerTranslator::EnsureInputBlobs(a2, (uint64_t *)&v21, a3);
  v30.__r_.__value_.__r.__words[0] = (std::string::size_type)&v21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v30);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v32.__r_.__value_.__l.__data_);
  }
  uint64_t v16 = *(void *)(a2 + 40);
  std::string::basic_string[abi:ne180100]<0>(&v21, "elementwise");
  if (*(char *)(a5 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)a5, *(void *)(a5 + 8));
  }
  else {
    std::string v30 = *(std::string *)a5;
  }
  memset(&v32, 0, sizeof(v32));
  uint64_t v28 = &v32;
  char v29 = 0;
  v32.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
  v32.__r_.__value_.__l.__size_ = v32.__r_.__value_.__r.__words[0];
  v32.__r_.__value_.__r.__words[2] = v32.__r_.__value_.__r.__words[0] + 24;
  v32.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v32.__r_.__value_.__r.__words[2], (long long *)&v30, (long long *)&v31, (std::string *)v32.__r_.__value_.__l.__data_);
  uint64_t Location = MIL::IRObject::GetLocation(a3);
  Espresso::MILTranslator::TypedEspressoBuilder::AddLayer<Espresso::elementwise_params>(&v19, v16, (uint64_t)&v21, (uint64_t)&__p, a4, (uint64_t)&v32, (uint64_t *)&v25, Location);
  if (v20) {
    nitro::nitro_function::nitro_function(v20);
  }
  uint64_t v28 = &v32;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v28);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v30.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
  if (v26 == v25) {
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  }
  if (SHIBYTE(v25->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(a1, v25->__r_.__value_.__l.__data_, v25->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v18 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    a1->__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
    *(_OWORD *)&a1->__r_.__value_.__l.__data_ = v18;
  }
  if (v24 < 0) {
    operator delete(__p);
  }
  std::string __p = &v25;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v34.__r_.__value_.__l.__data_);
  }
}

void sub_1922BF404(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  a18 = &a24;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
  if (*(char *)(v41 - 89) < 0) {
    operator delete(*(void **)(v41 - 112));
  }
  _Unwind_Resume(a1);
}

MIL::Builder::ProgramBuilder *Espresso::AOT::ConvertNoOpFunctions@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, std::string::size_type *a3@<X8>)
{
  uint64_t v374 = *MEMORY[0x1E4F143B8];
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 48))(&v364);
  uint64_t v298 = a1;
  int v6 = (E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset *)MIL::Builder::ProgramBuilder::Make();
  int v7 = v365;
  if (v365 && !atomic_fetch_add(&v365->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  Opsetuint64_t Name = E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset::GetOpsetName(v6);
  uint64_t v10 = (void *)v9;
  if (v9 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  char v11 = OpsetName;
  if (v9 >= 0x17)
  {
    uint64_t v13 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v13 = v9 | 7;
    }
    uint64_t v14 = v13 + 1;
    uint64_t v12 = (void **)operator new(v13 + 1);
    __dst[1] = v10;
    unint64_t v363 = v14 | 0x8000000000000000;
    __dst[0] = v12;
    goto LABEL_11;
  }
  HIBYTE(v363) = v9;
  uint64_t v12 = __dst;
  if (v9) {
LABEL_11:
  }
    memmove(v12, v11, (size_t)v10);
  *((unsigned char *)v10 + (void)v12) = 0;
  *((unsigned char *)&v367.__r_.__value_.__s + 23) = 4;
  strcpy((char *)&v367, "cast");
  char v369 = 8;
  strcpy((char *)v368, "identity");
  uint64_t v370 = (char *)operator new(0x19uLL);
  long long v371 = xmmword_192DBD8E0;
  strcpy(v370, "tensor_buffer_to_tensor");
  int v372 = (char *)operator new(0x19uLL);
  long long v373 = xmmword_192DBD8E0;
  strcpy(v372, "tensor_to_tensor_buffer");
  *(_OWORD *)uint64_t v359 = 0u;
  *(_OWORD *)int v360 = 0u;
  int v361 = 1065353216;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v359, (uint64_t)&v367, (uint64_t)&v367);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v359, (uint64_t)v368, (uint64_t)v368);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v359, (uint64_t)&v370, (uint64_t)&v370);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v359, (uint64_t)&v372, (uint64_t)&v372);
  if (SHIBYTE(v373) < 0)
  {
    operator delete(v372);
    if ((SHIBYTE(v371) & 0x80000000) == 0)
    {
LABEL_14:
      if ((v369 & 0x80000000) == 0) {
        goto LABEL_15;
      }
LABEL_636:
      operator delete(v368[0]);
      int v294 = a3;
      if ((SHIBYTE(v367.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_16;
      }
      goto LABEL_637;
    }
  }
  else if ((SHIBYTE(v371) & 0x80000000) == 0)
  {
    goto LABEL_14;
  }
  operator delete(v370);
  if (v369 < 0) {
    goto LABEL_636;
  }
LABEL_15:
  int v294 = a3;
  if ((SHIBYTE(v367.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_16;
  }
LABEL_637:
  operator delete(v367.__r_.__value_.__l.__data_);
LABEL_16:
  v358[1] = 0;
  v358[0] = 0;
  uint64_t v357 = v358;
  uint64_t v15 = *a2;
  uint64_t v295 = a2[1];
  if (*a2 == v295) {
    goto LABEL_607;
  }
  do
  {
    uint64_t v296 = v15;
    MIL::Builder::ProgramBuilder::GetFunction();
    MIL::Builder::FunctionBuilder::GetBlock();
    int v352 = 0;
    uint64_t v353 = 0;
    uint64_t v351 = &v352;
    MIL::Builder::BlockBuilder::GetOutputNames((uint64_t *)&v367, v354);
    std::string::size_type size = v367.__r_.__value_.__l.__size_;
    std::string::size_type v16 = v367.__r_.__value_.__r.__words[0];
    if (v367.__r_.__value_.__r.__words[0] != v367.__r_.__value_.__l.__size_)
    {
      while (1)
      {
        if (*(char *)(v16 + 23) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)__p, *(const std::string::value_type **)v16, *(void *)(v16 + 8));
        }
        else
        {
          long long v18 = *(_OWORD *)v16;
          v340[0] = *(void **)(v16 + 16);
          *(_OWORD *)std::string __p = v18;
        }
        uint64_t v19 = v352;
        std::string v20 = &v352;
        std::string v21 = &v352;
        if (v352)
        {
          char v22 = HIBYTE(v340[0]);
          if (SHIBYTE(v340[0]) >= 0) {
            char v23 = (void *)HIBYTE(v340[0]);
          }
          else {
            char v23 = __p[1];
          }
          if (SHIBYTE(v340[0]) >= 0) {
            char v24 = __p;
          }
          else {
            char v24 = (void **)__p[0];
          }
          while (1)
          {
            while (1)
            {
              std::string v20 = (char **)v19;
              float v27 = (char *)*((void *)v19 + 4);
              uint64_t v25 = v19 + 32;
              uint64_t v26 = v27;
              int v28 = v25[23];
              if (v28 >= 0) {
                size_t v29 = v25[23];
              }
              else {
                size_t v29 = *((void *)v25 + 1);
              }
              if (v28 >= 0) {
                std::string v30 = v25;
              }
              else {
                std::string v30 = v26;
              }
              if (v29 >= (unint64_t)v23) {
                size_t v31 = (size_t)v23;
              }
              else {
                size_t v31 = v29;
              }
              int v32 = memcmp(v24, v30, v31);
              BOOL v33 = (unint64_t)v23 < v29;
              if (v32) {
                BOOL v33 = v32 < 0;
              }
              if (!v33) {
                break;
              }
              uint64_t v19 = *v20;
              std::string v21 = v20;
              if (!*v20) {
                goto LABEL_51;
              }
            }
            int v34 = memcmp(v30, v24, v31);
            BOOL v35 = v29 < (unint64_t)v23;
            if (v34) {
              BOOL v35 = v34 < 0;
            }
            if (!v35) {
              break;
            }
            uint64_t v19 = v20[1];
            if (!v19)
            {
              std::string v21 = v20 + 1;
              goto LABEL_51;
            }
          }
          if ((v22 & 0x80) == 0) {
            goto LABEL_22;
          }
        }
        else
        {
LABEL_51:
          uint64_t v36 = (char *)operator new(0x38uLL);
          uint64_t v37 = (std::string *)(v36 + 32);
          if (SHIBYTE(v340[0]) < 0)
          {
            std::string::__init_copy_ctor_external(v37, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
          }
          else
          {
            *(_OWORD *)&v37->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
            *((void **)v36 + 6) = v340[0];
          }
          *(void *)uint64_t v36 = 0;
          *((void *)v36 + 1) = 0;
          *((void *)v36 + 2) = v20;
          *std::string v21 = v36;
          if (*v351)
          {
            uint64_t v351 = (char **)*v351;
            uint64_t v36 = *v21;
          }
          uint64_t v38 = v352;
          BOOL v61 = v36 == v352;
          v36[24] = v36 == v352;
          if (!v61)
          {
            do
            {
              uint64_t v39 = *((void *)v36 + 2);
              if (*(unsigned char *)(v39 + 24)) {
                break;
              }
              size_t v40 = *(char **)(v39 + 16);
              uint64_t v41 = *(void *)v40;
              if (*(void *)v40 == v39)
              {
                uint64_t v44 = *((void *)v40 + 1);
                if (!v44 || (int v45 = *(unsigned __int8 *)(v44 + 24), v42 = (unsigned char *)(v44 + 24), v45))
                {
                  if (*(char **)v39 == v36)
                  {
                    *(unsigned char *)(v39 + 24) = 1;
                    v40[24] = 0;
                    uint64_t v48 = *(void *)(v39 + 8);
                    *(void *)size_t v40 = v48;
                    if (v48) {
                      goto LABEL_71;
                    }
                  }
                  else
                  {
                    uint64_t v46 = *(uint64_t **)(v39 + 8);
                    uint64_t v47 = *v46;
                    *(void *)(v39 + 8) = *v46;
                    if (v47)
                    {
                      *(void *)(v47 + 16) = v39;
                      size_t v40 = *(char **)(v39 + 16);
                    }
                    void v46[2] = (uint64_t)v40;
                    *(void *)(*(void *)(v39 + 16) + 8 * (**(void **)(v39 + 16) != v39)) = v46;
                    uint64_t *v46 = v39;
                    *(void *)(v39 + 16) = v46;
                    size_t v40 = (char *)v46[2];
                    uint64_t v39 = *(void *)v40;
                    *((unsigned char *)v46 + 24) = 1;
                    v40[24] = 0;
                    uint64_t v48 = *(void *)(v39 + 8);
                    *(void *)size_t v40 = v48;
                    if (v48) {
LABEL_71:
                    }
                      *(void *)(v48 + 16) = v40;
                  }
                  *(void *)(v39 + 16) = *((void *)v40 + 2);
                  *(void *)(*((void *)v40 + 2) + 8 * (**((void **)v40 + 2) != (void)v40)) = v39;
                  *(void *)(v39 + 8) = v40;
LABEL_83:
                  *((void *)v40 + 2) = v39;
                  break;
                }
              }
              else if (!v41 || (v43 = *(unsigned __int8 *)(v41 + 24), BOOL v42 = (unsigned char *)(v41 + 24), v43))
              {
                if (*(char **)v39 == v36)
                {
                  uint64_t v49 = *((void *)v36 + 1);
                  *(void *)uint64_t v39 = v49;
                  if (v49)
                  {
                    *(void *)(v49 + 16) = v39;
                    size_t v40 = *(char **)(v39 + 16);
                  }
                  *((void *)v36 + 2) = v40;
                  *(void *)(*(void *)(v39 + 16) + 8 * (**(void **)(v39 + 16) != v39)) = v36;
                  *((void *)v36 + 1) = v39;
                  *(void *)(v39 + 16) = v36;
                  size_t v40 = (char *)*((void *)v36 + 2);
                }
                else
                {
                  uint64_t v36 = (char *)*((void *)v36 + 2);
                }
                v36[24] = 1;
                v40[24] = 0;
                uint64_t v39 = *((void *)v40 + 1);
                uint64_t v50 = *(char **)v39;
                *((void *)v40 + 1) = *(void *)v39;
                if (v50) {
                  *((void *)v50 + 2) = v40;
                }
                *(void *)(v39 + 16) = *((void *)v40 + 2);
                *(void *)(*((void *)v40 + 2) + 8 * (**((void **)v40 + 2) != (void)v40)) = v39;
                *(void *)uint64_t v39 = v40;
                goto LABEL_83;
              }
              *(unsigned char *)(v39 + 24) = 1;
              uint64_t v36 = v40;
              v40[24] = v40 == v38;
              unsigned char *v42 = 1;
            }
            while (v40 != v38);
          }
          ++v353;
          if ((HIBYTE(v340[0]) & 0x80) == 0) {
            goto LABEL_22;
          }
        }
        operator delete(__p[0]);
LABEL_22:
        v16 += 24;
        if (v16 == size)
        {
          std::string::size_type v16 = v367.__r_.__value_.__r.__words[0];
          break;
        }
      }
    }
    if (v16)
    {
      std::string::size_type v51 = v367.__r_.__value_.__l.__size_;
      uint64_t v52 = (void *)v16;
      if (v367.__r_.__value_.__l.__size_ != v16)
      {
        do
        {
          if (*(char *)(v51 - 1) < 0) {
            operator delete(*(void **)(v51 - 24));
          }
          v51 -= 24;
        }
        while (v51 != v16);
        uint64_t v52 = (void *)v367.__r_.__value_.__r.__words[0];
      }
      v367.__r_.__value_.__l.__size_ = v16;
      operator delete(v52);
    }
    MIL::Builder::BlockBuilder::GetOperations((uint64_t *)&v349, v354);
    uint64_t v53 = (MIL::Builder::OperationBuilder **)v349;
    uint64_t v54 = v350;
    size_t v297 = v350;
    if (v349 == v350)
    {
      if (v349) {
        goto LABEL_99;
      }
      goto LABEL_596;
    }
    do
    {
      uint64_t Operator = MIL::Builder::OperationBuilder::GetOperator(*v53);
      uint64_t v59 = (*(uint64_t (**)(uint64_t))(*(void *)Operator + 16))(Operator);
      int v60 = *(char *)(v59 + 23);
      if (v60 < 0)
      {
        if (*(void *)(v59 + 8) != 15) {
          goto LABEL_107;
        }
        uint64_t v62 = *(void **)v59;
        if (*v62 != 0x736F695F4C4D3545 || *(void *)((char *)v62 + 7) != 0x6C6C61632E363173) {
          goto LABEL_107;
        }
      }
      else
      {
        if (v60 != 15) {
          goto LABEL_107;
        }
        BOOL v61 = *(void *)v59 == 0x736F695F4C4D3545 && *(void *)(v59 + 7) == 0x6C6C61632E363173;
        if (!v61) {
          goto LABEL_107;
        }
      }
      *((unsigned char *)&v367.__r_.__value_.__s + 23) = 8;
      strcpy((char *)&v367, "function");
      MIL::Builder::OperationBuilder::TryGetAttribute();
      MIL::IRValue::AsTensor((MIL::IRValue *)__p[0]);
      uint64_t v64 = MIL::IRTensorValue::GetDataView<std::string>();
      if (*(char *)(v64 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v348, *(const std::string::value_type **)v64, *(void *)(v64 + 8));
      }
      else
      {
        long long v65 = *(_OWORD *)v64;
        v348.__r_.__value_.__r.__words[2] = *(void *)(v64 + 16);
        *(_OWORD *)&v348.__r_.__value_.__l.__data_ = v65;
      }
      std::string v66 = (std::__shared_weak_count *)__p[1];
      if (__p[1] && !atomic_fetch_add((atomic_ullong *volatile)__p[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
        std::__shared_weak_count::__release_weak(v66);
        if ((SHIBYTE(v367.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_129;
        }
LABEL_128:
        operator delete(v367.__r_.__value_.__l.__data_);
        goto LABEL_129;
      }
      if (SHIBYTE(v367.__r_.__value_.__r.__words[2]) < 0) {
        goto LABEL_128;
      }
LABEL_129:
      MIL::Builder::ProgramBuilder::GetFunction();
      long long v67 = *(_OWORD *)&v367.__r_.__value_.__l.__data_;
      *(_OWORD *)&v367.__r_.__value_.__l.__data_ = 0uLL;
      unint64_t v68 = (std::__shared_weak_count *)v356[1];
      *(_OWORD *)uint64_t v356 = v67;
      if (v68 && !atomic_fetch_add(&v68->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
        std::__shared_weak_count::__release_weak(v68);
        uint64_t v69 = (std::__shared_weak_count *)v367.__r_.__value_.__l.__size_;
        if (!v367.__r_.__value_.__l.__size_) {
          goto LABEL_137;
        }
      }
      else
      {
        uint64_t v69 = (std::__shared_weak_count *)v367.__r_.__value_.__l.__size_;
        if (!v367.__r_.__value_.__l.__size_) {
          goto LABEL_137;
        }
      }
      if (!atomic_fetch_add(&v69->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
        std::__shared_weak_count::__release_weak(v69);
      }
LABEL_137:
      MIL::Builder::FunctionBuilder::SelectedSpecialization(v356[0]);
      MIL::Builder::FunctionBuilder::GetBlock();
      int v300 = v53;
      MIL::Builder::BlockBuilder::GetOperations((uint64_t *)__p, v346);
      unsigned int v70 = (MIL::Builder::OperationBuilder **)__p[0];
      uint64_t v71 = (MIL::Builder::OperationBuilder **)__p[1];
      char v72 = 1;
      if (__p[0] == __p[1]) {
        goto LABEL_161;
      }
      do
      {
        uint64_t v74 = *v70;
        uint64_t v73 = (std::__shared_weak_count *)v70[1];
        if (v73) {
          atomic_fetch_add_explicit(&v73->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v75 = MIL::Builder::OperationBuilder::GetOperator(v74);
        uint64_t v76 = (*(uint64_t (**)(uint64_t))(*(void *)v75 + 16))(v75);
        Espresso::AOT::GetOperatorType(v76, &v345);
        long long v77 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v359, (uint64_t)&v345);
        if (v77)
        {
          MIL::Builder::OperationBuilder::GetInputArguments((uint64_t *)&v367, v74);
          uint64_t v78 = (uint64_t **)v367.__r_.__value_.__r.__words[2];
          if (v367.__r_.__value_.__r.__words[2])
          {
            while (1)
            {
              uint64_t Value = (MIL::IRValue *)MIL::Builder::Variable::TryGetValue((MIL::Builder::Variable *)v78[2]);
              if (Value)
              {
                uint64_t v80 = MIL::IRValue::AsTensor(Value);
                if ((*(uint64_t (**)(uint64_t))(*(void *)v80 + 80))(v80)) {
                  break;
                }
              }
              uint64_t v78 = (uint64_t **)*v78;
              if (!v78) {
                goto LABEL_147;
              }
            }
            char v72 = 0;
LABEL_147:
            uint64_t v81 = (void *)v367.__r_.__value_.__r.__words[2];
            if (v367.__r_.__value_.__r.__words[2])
            {
              do
              {
                uint64_t v82 = (void *)*v81;
                operator delete(v81);
                uint64_t v81 = v82;
              }
              while (v82);
            }
          }
          uint64_t v83 = (void *)v367.__r_.__value_.__r.__words[0];
          v367.__r_.__value_.__r.__words[0] = 0;
          if (v83) {
            operator delete(v83);
          }
          if (SHIBYTE(v345.__r_.__value_.__r.__words[2]) < 0)
          {
LABEL_155:
            operator delete(v345.__r_.__value_.__l.__data_);
            if (!v73) {
              goto LABEL_158;
            }
            goto LABEL_156;
          }
        }
        else
        {
          char v72 = 0;
          if (SHIBYTE(v345.__r_.__value_.__r.__words[2]) < 0) {
            goto LABEL_155;
          }
        }
        if (!v73) {
          goto LABEL_158;
        }
LABEL_156:
        if (!atomic_fetch_add(&v73->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
          std::__shared_weak_count::__release_weak(v73);
        }
LABEL_158:
        if (!v77) {
          break;
        }
        v70 += 2;
      }
      while (v70 != v71);
      unsigned int v70 = (MIL::Builder::OperationBuilder **)__p[0];
LABEL_161:
      if (v70)
      {
        uint64_t v84 = (MIL::Builder::OperationBuilder **)__p[1];
        int v85 = v70;
        if (__p[1] != v70)
        {
          do
          {
            int v86 = (std::__shared_weak_count *)*(v84 - 1);
            if (v86 && !atomic_fetch_add(&v86->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
              std::__shared_weak_count::__release_weak(v86);
            }
            v84 -= 2;
          }
          while (v84 != v70);
          int v85 = (MIL::Builder::OperationBuilder **)__p[0];
        }
        __p[1] = v70;
        operator delete(v85);
      }
      if ((v72 & 1) == 0) {
        goto LABEL_592;
      }
      unint64_t v87 = 0;
      *(_OWORD *)&v345.__r_.__value_.__r.__words[1] = 0uLL;
      v345.__r_.__value_.__r.__words[0] = (std::string::size_type)&v345.__r_.__value_.__l.__size_;
      while (1)
      {
        MIL::Builder::BlockBuilder::GetOutputs((uint64_t *)&v367, v346);
        long long v89 = *(_OWORD *)&v367.__r_.__value_.__l.__data_;
        if (v367.__r_.__value_.__r.__words[0])
        {
          v367.__r_.__value_.__l.__size_ = v367.__r_.__value_.__r.__words[0];
          operator delete((void *)v89);
        }
        if ((uint64_t)(*((void *)&v89 + 1) - v89) >> 3 <= v87) {
          break;
        }
        MIL::Builder::BlockBuilder::GetOutputs((uint64_t *)&v367, v346);
        uint64_t Name = MIL::Builder::Variable::GetName(*(MIL::Builder::Variable **)(v367.__r_.__value_.__r.__words[0] + 8 * v87));
        uint64_t v91 = Name;
        std::string::size_type v92 = v345.__r_.__value_.__l.__size_;
        p_std::string::size_type size = &v345.__r_.__value_.__l.__size_;
        uint64_t v94 = &v345.__r_.__value_.__l.__size_;
        if (v345.__r_.__value_.__l.__size_)
        {
          int v95 = *(char *)(Name + 23);
          if (v95 >= 0) {
            size_t v96 = *(unsigned __int8 *)(Name + 23);
          }
          else {
            size_t v96 = *(void *)(Name + 8);
          }
          if (v95 >= 0) {
            int v97 = (const void *)Name;
          }
          else {
            int v97 = *(const void **)Name;
          }
          while (1)
          {
            while (1)
            {
              p_std::string::size_type size = (std::string::size_type *)v92;
              uint64_t v100 = *(const void **)(v92 + 32);
              std::string::size_type v98 = v92 + 32;
              uint64_t v99 = v100;
              int v101 = *(char *)(v98 + 23);
              if (v101 >= 0) {
                size_t v102 = *(unsigned __int8 *)(v98 + 23);
              }
              else {
                size_t v102 = *(void *)(v98 + 8);
              }
              if (v101 >= 0) {
                int v103 = (const void *)v98;
              }
              else {
                int v103 = v99;
              }
              if (v102 >= v96) {
                size_t v104 = v96;
              }
              else {
                size_t v104 = v102;
              }
              int v105 = memcmp(v97, v103, v104);
              BOOL v106 = v96 < v102;
              if (v105) {
                BOOL v106 = v105 < 0;
              }
              if (!v106) {
                break;
              }
              std::string::size_type v92 = *p_size;
              uint64_t v94 = p_size;
              if (!*p_size) {
                goto LABEL_203;
              }
            }
            int v107 = memcmp(v103, v97, v104);
            BOOL v108 = v102 < v96;
            if (v107) {
              BOOL v108 = v107 < 0;
            }
            if (!v108) {
              break;
            }
            std::string::size_type v92 = p_size[1];
            if (!v92)
            {
              uint64_t v94 = p_size + 1;
              goto LABEL_203;
            }
          }
          *((_DWORD *)p_size + 14) = v87;
          uint64_t v88 = (void *)v367.__r_.__value_.__r.__words[0];
          if (!v367.__r_.__value_.__r.__words[0]) {
            goto LABEL_174;
          }
LABEL_173:
          v367.__r_.__value_.__l.__size_ = (std::string::size_type)v88;
          operator delete(v88);
          goto LABEL_174;
        }
LABEL_203:
        uint64_t v109 = (char *)operator new(0x40uLL);
        long long v110 = (std::string *)(v109 + 32);
        if (*(char *)(v91 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v110, *(const std::string::value_type **)v91, *(void *)(v91 + 8));
        }
        else
        {
          long long v111 = *(_OWORD *)v91;
          *((void *)v109 + 6) = *(void *)(v91 + 16);
          *(_OWORD *)&v110->__r_.__value_.__l.__data_ = v111;
        }
        *((_DWORD *)v109 + 14) = 0;
        *(void *)uint64_t v109 = 0;
        *((void *)v109 + 1) = 0;
        *((void *)v109 + 2) = p_size;
        *uint64_t v94 = (std::string::size_type)v109;
        uint64_t v112 = v109;
        if (*(void *)v345.__r_.__value_.__l.__data_)
        {
          v345.__r_.__value_.__r.__words[0] = *(void *)v345.__r_.__value_.__l.__data_;
          uint64_t v112 = (char *)*v94;
        }
        std::string::size_type v113 = v345.__r_.__value_.__l.__size_;
        BOOL v61 = v112 == (char *)v345.__r_.__value_.__l.__size_;
        v112[24] = v112 == (char *)v345.__r_.__value_.__l.__size_;
        if (!v61)
        {
          do
          {
            uint64_t v114 = *((void *)v112 + 2);
            if (*(unsigned char *)(v114 + 24)) {
              break;
            }
            size_t v115 = *(char **)(v114 + 16);
            uint64_t v116 = *(void *)v115;
            if (*(void *)v115 == v114)
            {
              uint64_t v119 = *((void *)v115 + 1);
              if (!v119 || (v120 = *(unsigned __int8 *)(v119 + 24), uint64_t v117 = (unsigned char *)(v119 + 24), v120))
              {
                if (*(char **)v114 == v112)
                {
                  *(unsigned char *)(v114 + 24) = 1;
                  v115[24] = 0;
                  uint64_t v123 = *(void *)(v114 + 8);
                  *(void *)size_t v115 = v123;
                  if (v123) {
                    goto LABEL_223;
                  }
                }
                else
                {
                  uint64_t v121 = *(uint64_t **)(v114 + 8);
                  uint64_t v122 = *v121;
                  *(void *)(v114 + 8) = *v121;
                  if (v122)
                  {
                    *(void *)(v122 + 16) = v114;
                    size_t v115 = *(char **)(v114 + 16);
                  }
                  v121[2] = (uint64_t)v115;
                  *(void *)(*(void *)(v114 + 16) + 8 * (**(void **)(v114 + 16) != v114)) = v121;
                  *uint64_t v121 = v114;
                  *(void *)(v114 + 16) = v121;
                  size_t v115 = (char *)v121[2];
                  uint64_t v114 = *(void *)v115;
                  *((unsigned char *)v121 + 24) = 1;
                  v115[24] = 0;
                  uint64_t v123 = *(void *)(v114 + 8);
                  *(void *)size_t v115 = v123;
                  if (v123) {
LABEL_223:
                  }
                    *(void *)(v123 + 16) = v115;
                }
                *(void *)(v114 + 16) = *((void *)v115 + 2);
                *(void *)(*((void *)v115 + 2) + 8 * (**((void **)v115 + 2) != (void)v115)) = v114;
                *(void *)(v114 + 8) = v115;
LABEL_233:
                *((void *)v115 + 2) = v114;
                break;
              }
            }
            else if (!v116 || (int v118 = *(unsigned __int8 *)(v116 + 24), v117 = (unsigned char *)(v116 + 24), v118))
            {
              if (*(char **)v114 == v112)
              {
                uint64_t v124 = *((void *)v112 + 1);
                *(void *)uint64_t v114 = v124;
                if (v124)
                {
                  *(void *)(v124 + 16) = v114;
                  size_t v115 = *(char **)(v114 + 16);
                }
                *((void *)v112 + 2) = v115;
                *(void *)(*(void *)(v114 + 16) + 8 * (**(void **)(v114 + 16) != v114)) = v112;
                *((void *)v112 + 1) = v114;
                *(void *)(v114 + 16) = v112;
                size_t v115 = (char *)*((void *)v112 + 2);
              }
              else
              {
                uint64_t v112 = (char *)*((void *)v112 + 2);
              }
              v112[24] = 1;
              v115[24] = 0;
              uint64_t v114 = *((void *)v115 + 1);
              unint64_t v125 = *(char **)v114;
              *((void *)v115 + 1) = *(void *)v114;
              if (v125) {
                *((void *)v125 + 2) = v115;
              }
              *(void *)(v114 + 16) = *((void *)v115 + 2);
              *(void *)(*((void *)v115 + 2) + 8 * (**((void **)v115 + 2) != (void)v115)) = v114;
              *(void *)uint64_t v114 = v115;
              goto LABEL_233;
            }
            *(unsigned char *)(v114 + 24) = 1;
            uint64_t v112 = v115;
            v115[24] = v115 == (char *)v113;
            unsigned char *v117 = 1;
          }
          while (v115 != (char *)v113);
        }
        ++v345.__r_.__value_.__r.__words[2];
        *((_DWORD *)v109 + 14) = v87;
        uint64_t v88 = (void *)v367.__r_.__value_.__r.__words[0];
        if (v367.__r_.__value_.__r.__words[0]) {
          goto LABEL_173;
        }
LABEL_174:
        ++v87;
      }
      int v343 = 0;
      uint64_t v344 = 0;
      size_t v342 = &v343;
      MIL::Builder::FunctionBuilder::GetInputs((uint64_t *)&v367, v356[0]);
      std::string::size_type v126 = v367.__r_.__value_.__r.__words[2];
      if (!v367.__r_.__value_.__r.__words[2])
      {
        char v302 = 1;
        unint64_t v230 = (void *)v367.__r_.__value_.__r.__words[0];
        v367.__r_.__value_.__r.__words[0] = 0;
        if (v230) {
          goto LABEL_435;
        }
        goto LABEL_436;
      }
      char v302 = 1;
      while (2)
      {
        int v127 = 0;
        BOOL v299 = (std::string::size_type *)v126;
        uint64_t v128 = *(MIL::Builder::Variable **)(v126 + 16);
        BOOL v301 = v128;
        while (2)
        {
          MIL::Builder::Variable::GetName(v128);
          uint64_t OperationsByInput = MIL::Builder::BlockBuilder::GetOperationsByInput();
          uint64_t v130 = OperationsByInput;
          *(_OWORD *)std::string __p = 0u;
          *(_OWORD *)size_t v340 = 0u;
          float v341 = *(float *)(OperationsByInput + 32);
          size_t prime = *(void *)(OperationsByInput + 8);
          if (prime == 1)
          {
            size_t prime = 2;
            goto LABEL_260;
          }
          if ((prime & (prime - 1)) != 0)
          {
            size_t prime = std::__next_prime(*(void *)(OperationsByInput + 8));
            int v132 = __p[1];
            BOOL v133 = (void *)prime >= __p[1];
            if ((void *)prime > __p[1]) {
              goto LABEL_259;
            }
          }
          else
          {
            int v132 = 0;
            BOOL v133 = 1;
            if (prime)
            {
LABEL_259:
              if (prime >> 61) {
                std::__throw_bad_array_new_length[abi:ne180100]();
              }
LABEL_260:
              uint64_t v137 = operator new(8 * prime);
              uint64_t v138 = __p[0];
              __p[0] = v137;
              if (v138) {
                operator delete(v138);
              }
              uint64_t v139 = 0;
              __p[1] = (void *)prime;
              do
                *((void *)__p[0] + v139++) = 0;
              while (prime != v139);
              char v140 = (void **)v340[0];
              if (!v340[0]) {
                goto LABEL_284;
              }
              size_t v141 = *((void *)v340[0] + 1);
              size_t v142 = prime - 1;
              if ((prime & (prime - 1)) == 0)
              {
                size_t v143 = v141 & v142;
                *((void *)__p[0] + v143) = v340;
                while (1)
                {
                  int v144 = *v140;
                  if (!*v140) {
                    break;
                  }
                  size_t v145 = v144[1] & v142;
                  if (v145 == v143)
                  {
                    char v140 = (void **)*v140;
                  }
                  else if (*((void *)__p[0] + v145))
                  {
                    *char v140 = (void *)*v144;
                    uint64_t v146 = 8 * v145;
                    void *v144 = **(void **)((char *)__p[0] + v146);
                    **(void **)((char *)__p[0] + v146) = v144;
                  }
                  else
                  {
                    *((void *)__p[0] + v145) = v140;
                    char v140 = (void **)v144;
                    size_t v143 = v145;
                  }
                }
                goto LABEL_284;
              }
              if (v141 >= prime) {
                v141 %= prime;
              }
              *((void *)__p[0] + v141) = v340;
              uint64_t v147 = *v140;
              if (!*v140)
              {
LABEL_284:
                uint64_t i = *(void **)(v130 + 16);
                if (i) {
                  goto LABEL_285;
                }
                goto LABEL_286;
              }
              while (1)
              {
LABEL_279:
                size_t v149 = v147[1];
                if (v149 >= prime) {
                  v149 %= prime;
                }
                if (v149 == v141) {
                  goto LABEL_278;
                }
                if (*((void *)__p[0] + v149)) {
                  break;
                }
                *((void *)__p[0] + v149) = v140;
                char v140 = (void **)v147;
                uint64_t v147 = (void *)*v147;
                size_t v141 = v149;
                if (!v147) {
                  goto LABEL_284;
                }
              }
              *char v140 = (void *)*v147;
              uint64_t v148 = 8 * v149;
              *uint64_t v147 = **(void **)((char *)__p[0] + v148);
              **(void **)((char *)__p[0] + v148) = v147;
              uint64_t v147 = v140;
LABEL_278:
              char v140 = (void **)v147;
              uint64_t v147 = (void *)*v147;
              if (!v147) {
                goto LABEL_284;
              }
              goto LABEL_279;
            }
          }
          if (v133) {
            goto LABEL_284;
          }
          unint64_t v134 = vcvtps_u32_f32((float)(unint64_t)v340[1] / v341);
          if ((unint64_t)v132 < 3
            || (uint8x8_t v135 = (uint8x8_t)vcnt_s8((int8x8_t)v132), v135.i16[0] = vaddlv_u8(v135), v135.u32[0] > 1uLL))
          {
            unint64_t v134 = std::__next_prime(v134);
          }
          else
          {
            uint64_t v136 = 1 << -(char)__clz(v134 - 1);
            if (v134 >= 2) {
              unint64_t v134 = v136;
            }
          }
          if (prime <= v134) {
            size_t prime = v134;
          }
          if (prime >= (unint64_t)v132) {
            goto LABEL_284;
          }
          if (prime) {
            goto LABEL_259;
          }
          BOOL v199 = __p[0];
          __p[0] = 0;
          if (v199) {
            operator delete(v199);
          }
          __p[1] = 0;
          for (uint64_t i = *(void **)(v130 + 16); i; uint64_t i = (void *)*i)
LABEL_285:
            std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__emplace_unique_key_args<std::shared_ptr<MIL::Builder::OperationBuilder>,std::shared_ptr<MIL::Builder::OperationBuilder> const&>((uint64_t)__p, i + 2, i + 2);
LABEL_286:
          uint64_t v151 = MIL::Builder::Variable::GetName(v128);
          std::string::size_type v152 = v345.__r_.__value_.__l.__size_;
          if (!v345.__r_.__value_.__l.__size_) {
            goto LABEL_410;
          }
          int v153 = *(char *)(v151 + 23);
          if (v153 >= 0) {
            size_t v154 = *(unsigned __int8 *)(v151 + 23);
          }
          else {
            size_t v154 = *(void *)(v151 + 8);
          }
          if (v153 >= 0) {
            long long v155 = (const void *)v151;
          }
          else {
            long long v155 = *(const void **)v151;
          }
          while (2)
          {
            int v156 = *(char *)(v152 + 55);
            if (v156 >= 0) {
              size_t v157 = *(unsigned __int8 *)(v152 + 55);
            }
            else {
              size_t v157 = *(void *)(v152 + 40);
            }
            if (v156 >= 0) {
              std::string v158 = (const void *)(v152 + 32);
            }
            else {
              std::string v158 = *(const void **)(v152 + 32);
            }
            if (v157 >= v154) {
              size_t v159 = v154;
            }
            else {
              size_t v159 = v157;
            }
            int v160 = memcmp(v155, v158, v159);
            BOOL v161 = v154 < v157;
            if (v160) {
              BOOL v161 = v160 < 0;
            }
            if (v161) {
              goto LABEL_294;
            }
            int v162 = memcmp(v158, v155, v159);
            BOOL v163 = v157 < v154;
            if (v162) {
              BOOL v163 = v162 < 0;
            }
            if (v163)
            {
              v152 += 8;
LABEL_294:
              std::string::size_type v152 = *(void *)v152;
              if (!v152) {
                goto LABEL_410;
              }
              continue;
            }
            break;
          }
          uint64_t v164 = (const std::string *)MIL::Builder::Variable::GetName(v301);
          uint64_t v165 = MIL::Builder::Variable::GetName(v128);
          uint64_t v166 = v165;
          std::string::size_type v167 = v345.__r_.__value_.__l.__size_;
          int v168 = &v345.__r_.__value_.__l.__size_;
          BOOL v169 = &v345.__r_.__value_.__l.__size_;
          if (v345.__r_.__value_.__l.__size_)
          {
            int v170 = *(char *)(v165 + 23);
            if (v170 >= 0) {
              size_t v171 = *(unsigned __int8 *)(v165 + 23);
            }
            else {
              size_t v171 = *(void *)(v165 + 8);
            }
            if (v170 >= 0) {
              size_t v172 = (const void *)v165;
            }
            else {
              size_t v172 = *(const void **)v165;
            }
            while (1)
            {
              while (1)
              {
                int v168 = (std::string::size_type *)v167;
                int v175 = *(const void **)(v167 + 32);
                std::string::size_type v173 = v167 + 32;
                size_t v174 = v175;
                int v176 = *(char *)(v173 + 23);
                if (v176 >= 0) {
                  size_t v177 = *(unsigned __int8 *)(v173 + 23);
                }
                else {
                  size_t v177 = *(void *)(v173 + 8);
                }
                if (v176 >= 0) {
                  BOOL v178 = (const void *)v173;
                }
                else {
                  BOOL v178 = v174;
                }
                if (v177 >= v171) {
                  size_t v179 = v171;
                }
                else {
                  size_t v179 = v177;
                }
                int v180 = memcmp(v172, v178, v179);
                BOOL v181 = v171 < v177;
                if (v180) {
                  BOOL v181 = v180 < 0;
                }
                if (!v181) {
                  break;
                }
                std::string::size_type v167 = *v168;
                BOOL v169 = v168;
                if (!*v168) {
                  goto LABEL_335;
                }
              }
              int v182 = memcmp(v178, v172, v179);
              BOOL v183 = v177 < v171;
              if (v182) {
                BOOL v183 = v182 < 0;
              }
              if (!v183) {
                break;
              }
              std::string::size_type v167 = v168[1];
              if (!v167)
              {
                BOOL v169 = v168 + 1;
                goto LABEL_335;
              }
            }
            int v198 = *((_DWORD *)v168 + 14);
          }
          else
          {
LABEL_335:
            size_t v184 = (char *)operator new(0x40uLL);
            int v185 = (std::string *)(v184 + 32);
            if (*(char *)(v166 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(v185, *(const std::string::value_type **)v166, *(void *)(v166 + 8));
            }
            else
            {
              long long v186 = *(_OWORD *)v166;
              *((void *)v184 + 6) = *(void *)(v166 + 16);
              *(_OWORD *)&v185->__r_.__value_.__l.__data_ = v186;
            }
            *((_DWORD *)v184 + 14) = 0;
            *(void *)size_t v184 = 0;
            *((void *)v184 + 1) = 0;
            *((void *)v184 + 2) = v168;
            std::string::size_type *v169 = (std::string::size_type)v184;
            if (*(void *)v345.__r_.__value_.__l.__data_)
            {
              v345.__r_.__value_.__r.__words[0] = *(void *)v345.__r_.__value_.__l.__data_;
              size_t v184 = (char *)*v169;
            }
            std::string::size_type v187 = v345.__r_.__value_.__l.__size_;
            BOOL v61 = v184 == (char *)v345.__r_.__value_.__l.__size_;
            v184[24] = v184 == (char *)v345.__r_.__value_.__l.__size_;
            if (!v61)
            {
              do
              {
                uint64_t v188 = *((void *)v184 + 2);
                if (*(unsigned char *)(v188 + 24)) {
                  break;
                }
                int v189 = *(unsigned char **)(v188 + 16);
                uint64_t v190 = *(void *)v189;
                if (*(void *)v189 == v188)
                {
                  uint64_t v193 = *((void *)v189 + 1);
                  if (!v193 || (int v194 = *(unsigned __int8 *)(v193 + 24), v191 = (unsigned char *)(v193 + 24), v194))
                  {
                    if (*(char **)v188 == v184)
                    {
                      *(unsigned char *)(v188 + 24) = 1;
                      v189[24] = 0;
                      uint64_t v197 = *(void *)(v188 + 8);
                      *(void *)int v189 = v197;
                      if (v197) {
                        goto LABEL_355;
                      }
                    }
                    else
                    {
                      size_t v195 = *(uint64_t **)(v188 + 8);
                      uint64_t v196 = *v195;
                      *(void *)(v188 + 8) = *v195;
                      if (v196)
                      {
                        *(void *)(v196 + 16) = v188;
                        int v189 = *(unsigned char **)(v188 + 16);
                      }
                      v195[2] = (uint64_t)v189;
                      *(void *)(*(void *)(v188 + 16) + 8 * (**(void **)(v188 + 16) != v188)) = v195;
                      *size_t v195 = v188;
                      *(void *)(v188 + 16) = v195;
                      int v189 = (unsigned char *)v195[2];
                      uint64_t v188 = *(void *)v189;
                      *((unsigned char *)v195 + 24) = 1;
                      v189[24] = 0;
                      uint64_t v197 = *(void *)(v188 + 8);
                      *(void *)int v189 = v197;
                      if (v197) {
LABEL_355:
                      }
                        *(void *)(v197 + 16) = v189;
                    }
                    *(void *)(v188 + 16) = *((void *)v189 + 2);
                    *(void *)(*((void *)v189 + 2) + 8 * (**((void **)v189 + 2) != (void)v189)) = v188;
                    *(void *)(v188 + 8) = v189;
LABEL_370:
                    *((void *)v189 + 2) = v188;
                    break;
                  }
                }
                else if (!v190 || (int v192 = *(unsigned __int8 *)(v190 + 24), v191 = (unsigned char *)(v190 + 24), v192))
                {
                  if (*(char **)v188 == v184)
                  {
                    uint64_t v200 = *((void *)v184 + 1);
                    *(void *)uint64_t v188 = v200;
                    if (v200)
                    {
                      *(void *)(v200 + 16) = v188;
                      int v189 = *(unsigned char **)(v188 + 16);
                    }
                    *((void *)v184 + 2) = v189;
                    *(void *)(*(void *)(v188 + 16) + 8 * (**(void **)(v188 + 16) != v188)) = v184;
                    *((void *)v184 + 1) = v188;
                    *(void *)(v188 + 16) = v184;
                    int v189 = (unsigned char *)*((void *)v184 + 2);
                  }
                  else
                  {
                    size_t v184 = (char *)*((void *)v184 + 2);
                  }
                  v184[24] = 1;
                  v189[24] = 0;
                  uint64_t v188 = *((void *)v189 + 1);
                  int v201 = *(char **)v188;
                  *((void *)v189 + 1) = *(void *)v188;
                  if (v201) {
                    *((void *)v201 + 2) = v189;
                  }
                  *(void *)(v188 + 16) = *((void *)v189 + 2);
                  *(void *)(*((void *)v189 + 2) + 8 * (**((void **)v189 + 2) != (void)v189)) = v188;
                  *(void *)uint64_t v188 = v189;
                  goto LABEL_370;
                }
                *(unsigned char *)(v188 + 24) = 1;
                size_t v184 = v189;
                v189[24] = v189 == (unsigned char *)v187;
                unsigned char *v191 = 1;
              }
              while (v189 != (unsigned char *)v187);
            }
            int v198 = 0;
            ++v345.__r_.__value_.__r.__words[2];
          }
          uint8x8_t v202 = v343;
          unint64_t v203 = &v343;
LABEL_374:
          size_t v204 = v203;
          if (v202)
          {
            while (1)
            {
              unint64_t v203 = (char **)v202;
              int v205 = *((_DWORD *)v202 + 8);
              if (v198 < v205)
              {
                uint8x8_t v202 = *v203;
                goto LABEL_374;
              }
              if (v205 >= v198) {
                break;
              }
              uint8x8_t v202 = v203[1];
              if (!v202)
              {
                size_t v204 = v203 + 1;
                goto LABEL_379;
              }
            }
            uint64_t v206 = (char *)v203;
          }
          else
          {
LABEL_379:
            uint64_t v206 = (char *)operator new(0x40uLL);
            *((_DWORD *)v206 + 8) = v198;
            *((void *)v206 + 6) = 0;
            *((void *)v206 + 7) = 0;
            *((void *)v206 + 5) = 0;
            *(void *)uint64_t v206 = 0;
            *((void *)v206 + 1) = 0;
            *((void *)v206 + 2) = v203;
            std::string *v204 = v206;
            uint64_t v207 = v206;
            if (*v342)
            {
              size_t v342 = (char **)*v342;
              uint64_t v207 = *v204;
            }
            size_t v208 = v343;
            BOOL v61 = v207 == v343;
            v207[24] = v207 == v343;
            if (!v61)
            {
              do
              {
                uint64_t v209 = *((void *)v207 + 2);
                if (*(unsigned char *)(v209 + 24)) {
                  break;
                }
                BOOL v210 = *(char **)(v209 + 16);
                uint64_t v211 = *(void *)v210;
                if (*(void *)v210 == v209)
                {
                  uint64_t v214 = *((void *)v210 + 1);
                  if (!v214 || (int v215 = *(unsigned __int8 *)(v214 + 24), v212 = (unsigned char *)(v214 + 24), v215))
                  {
                    if (*(char **)v209 == v207)
                    {
                      *(unsigned char *)(v209 + 24) = 1;
                      v210[24] = 0;
                      uint64_t v218 = *(void *)(v209 + 8);
                      *(void *)BOOL v210 = v218;
                      if (v218) {
                        goto LABEL_396;
                      }
                    }
                    else
                    {
                      uint64_t v216 = *(uint64_t **)(v209 + 8);
                      uint64_t v217 = *v216;
                      *(void *)(v209 + 8) = *v216;
                      if (v217)
                      {
                        *(void *)(v217 + 16) = v209;
                        BOOL v210 = *(char **)(v209 + 16);
                      }
                      v216[2] = (uint64_t)v210;
                      *(void *)(*(void *)(v209 + 16) + 8 * (**(void **)(v209 + 16) != v209)) = v216;
                      uint64_t *v216 = v209;
                      *(void *)(v209 + 16) = v216;
                      BOOL v210 = (char *)v216[2];
                      uint64_t v209 = *(void *)v210;
                      *((unsigned char *)v216 + 24) = 1;
                      v210[24] = 0;
                      uint64_t v218 = *(void *)(v209 + 8);
                      *(void *)BOOL v210 = v218;
                      if (v218) {
LABEL_396:
                      }
                        *(void *)(v218 + 16) = v210;
                    }
                    *(void *)(v209 + 16) = *((void *)v210 + 2);
                    *(void *)(*((void *)v210 + 2) + 8 * (**((void **)v210 + 2) != (void)v210)) = v209;
                    *(void *)(v209 + 8) = v210;
LABEL_407:
                    *((void *)v210 + 2) = v209;
                    break;
                  }
                }
                else if (!v211 || (int v213 = *(unsigned __int8 *)(v211 + 24), v212 = (unsigned char *)(v211 + 24), v213))
                {
                  if (*(char **)v209 == v207)
                  {
                    uint64_t v219 = *((void *)v207 + 1);
                    *(void *)uint64_t v209 = v219;
                    if (v219)
                    {
                      *(void *)(v219 + 16) = v209;
                      BOOL v210 = *(char **)(v209 + 16);
                    }
                    *((void *)v207 + 2) = v210;
                    *(void *)(*(void *)(v209 + 16) + 8 * (**(void **)(v209 + 16) != v209)) = v207;
                    *((void *)v207 + 1) = v209;
                    *(void *)(v209 + 16) = v207;
                    BOOL v210 = (char *)*((void *)v207 + 2);
                  }
                  else
                  {
                    uint64_t v207 = (char *)*((void *)v207 + 2);
                  }
                  v207[24] = 1;
                  v210[24] = 0;
                  uint64_t v209 = *((void *)v210 + 1);
                  BOOL v220 = *(char **)v209;
                  *((void *)v210 + 1) = *(void *)v209;
                  if (v220) {
                    *((void *)v220 + 2) = v210;
                  }
                  *(void *)(v209 + 16) = *((void *)v210 + 2);
                  *(void *)(*((void *)v210 + 2) + 8 * (**((void **)v210 + 2) != (void)v210)) = v209;
                  *(void *)uint64_t v209 = v210;
                  goto LABEL_407;
                }
                *(unsigned char *)(v209 + 24) = 1;
                uint64_t v207 = v210;
                v210[24] = v210 == v208;
                unsigned char *v212 = 1;
              }
              while (v210 != v208);
            }
            ++v344;
          }
          std::string::operator=((std::string *)(v206 + 40), v164);
LABEL_410:
          if (v340[1])
          {
            if (v340[1] == (void *)1)
            {
              MIL::Builder::OperationBuilder::GetOutputs((uint64_t *)&v336, *((MIL::Builder::OperationBuilder **)v340[0] + 2));
              uint64_t v221 = v337;
              uint64_t v222 = v336;
              if (v336)
              {
                uint64_t v337 = (std::__shared_weak_count *)v336;
                operator delete(v336);
              }
              if ((char *)v221 - v222 == 8)
              {
                MIL::Builder::OperationBuilder::GetOutputs((uint64_t *)&v336, *((MIL::Builder::OperationBuilder **)v340[0] + 2));
                uint64_t v128 = *(MIL::Builder::Variable **)v336;
                uint64_t v337 = (std::__shared_weak_count *)v336;
                operator delete(v336);
                char v223 = 1;
                uint64_t v224 = v340[0];
                if (!v340[0]) {
                  goto LABEL_419;
                }
                goto LABEL_425;
              }
            }
            char v302 = 0;
          }
          char v223 = 0;
          uint64_t v224 = v340[0];
          if (!v340[0]) {
            goto LABEL_419;
          }
          do
          {
LABEL_425:
            int64_t v226 = v224;
            uint64_t v224 = (void *)*v224;
            int v227 = (std::__shared_weak_count *)v226[3];
            if (v227 && !atomic_fetch_add(&v227->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v227->__on_zero_shared)(v227);
              std::__shared_weak_count::__release_weak(v227);
            }
            operator delete(v226);
          }
          while (v224);
LABEL_419:
          uint64_t v225 = __p[0];
          __p[0] = 0;
          if (v225) {
            operator delete(v225);
          }
          if (v223)
          {
            if (++v127 == 6)
            {
              char v302 = 0;
              break;
            }
            continue;
          }
          break;
        }
        std::string::size_type v126 = *v299;
        if (*v299) {
          continue;
        }
        break;
      }
      uint64_t v228 = (void *)v367.__r_.__value_.__r.__words[2];
      if (v367.__r_.__value_.__r.__words[2])
      {
        do
        {
          int v229 = (void *)*v228;
          operator delete(v228);
          uint64_t v228 = v229;
        }
        while (v229);
      }
      unint64_t v230 = (void *)v367.__r_.__value_.__r.__words[0];
      v367.__r_.__value_.__r.__words[0] = 0;
      if (v230) {
LABEL_435:
      }
        operator delete(v230);
LABEL_436:
      if (v302)
      {
        MIL::Builder::BlockBuilder::GetOutputNames((uint64_t *)&v367, v354);
        uint64_t v231 = v342;
        if (v342 == &v343)
        {
LABEL_438:
          long long v232 = (std::__shared_weak_count *)v300[1];
          uint64_t v303 = v232;
          if (v232) {
            atomic_fetch_add_explicit(&v232->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          MIL::Builder::BlockBuilder::RemoveOperation();
          if (v303 && !atomic_fetch_add(&v303->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v303->__on_zero_shared)(v303);
            std::__shared_weak_count::__release_weak(v303);
          }
          MIL::Builder::BlockBuilder::GetOutputNames((uint64_t *)__p, v354);
          unint64_t v233 = (void **)__p[0];
          long long v234 = (void **)__p[1];
          if (__p[0] != __p[1])
          {
            do
            {
              MIL::Builder::BlockBuilder::RemoveOutput();
              v233 += 3;
            }
            while (v233 != v234);
            unint64_t v233 = (void **)__p[0];
          }
          if (v233)
          {
            uint64_t v235 = (void **)__p[1];
            uint64_t v236 = v233;
            if (__p[1] != v233)
            {
              do
              {
                if (*((char *)v235 - 1) < 0) {
                  operator delete(*(v235 - 3));
                }
                v235 -= 3;
              }
              while (v235 != v233);
              uint64_t v236 = (void **)__p[0];
            }
            __p[1] = v233;
            operator delete(v236);
          }
          std::string::size_type v276 = v367.__r_.__value_.__l.__size_;
          for (std::string::size_type j = v367.__r_.__value_.__r.__words[0]; j != v276; j += 24)
            MIL::Builder::BlockBuilder::AddOutput();
          std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&v357, (const void **)&v348.__r_.__value_.__l.__data_, (uint64_t)&v348);
          std::string::size_type v278 = v367.__r_.__value_.__r.__words[0];
          if (v367.__r_.__value_.__r.__words[0])
          {
            std::string::size_type v279 = v367.__r_.__value_.__l.__size_;
            uint64_t v280 = (void *)v367.__r_.__value_.__r.__words[0];
            if (v367.__r_.__value_.__l.__size_ != v367.__r_.__value_.__r.__words[0])
            {
              do
              {
                if (*(char *)(v279 - 1) < 0) {
                  operator delete(*(void **)(v279 - 24));
                }
                v279 -= 24;
              }
              while (v279 != v278);
              uint64_t v280 = (void *)v367.__r_.__value_.__r.__words[0];
            }
            v367.__r_.__value_.__l.__size_ = v278;
            operator delete(v280);
          }
          goto LABEL_591;
        }
        while (1)
        {
          (*(void (**)(void **__return_ptr))(*(void *)v298 + 48))(&v336);
          MIL::MILContext::GetOpset();
          HIBYTE(v340[0]) = 8;
          strcpy((char *)__p, "transfer");
          MIL::IROpset::TryGetOperatorSharedPtr();
          MIL::Builder::OperationBuilder::Make();
          uint64_t v237 = v333;
          if (v333 && !atomic_fetch_add(&v333->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v237->__on_zero_shared)(v237);
            std::__shared_weak_count::__release_weak(v237);
            if ((SHIBYTE(v340[0]) & 0x80000000) == 0)
            {
LABEL_453:
              uint64_t v238 = v337;
              if (!v337) {
                goto LABEL_459;
              }
              goto LABEL_457;
            }
          }
          else if ((SHIBYTE(v340[0]) & 0x80000000) == 0)
          {
            goto LABEL_453;
          }
          operator delete(__p[0]);
          uint64_t v238 = v337;
          if (!v337) {
            goto LABEL_459;
          }
LABEL_457:
          if (!atomic_fetch_add(&v238->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v238->__on_zero_shared)(v238);
            std::__shared_weak_count::__release_weak(v238);
          }
LABEL_459:
          char v331 = 6;
          strcpy((char *)v330, "values");
          ArgumentForParameter = (MIL::Builder::Variable *)MIL::Builder::OperationBuilder::GetArgumentForParameter();
          uint64_t v240 = MIL::Builder::Variable::GetName(ArgumentForParameter);
          if (*(char *)(v240 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v329, *(const std::string::value_type **)v240, *(void *)(v240 + 8));
          }
          else
          {
            long long v241 = *(_OWORD *)v240;
            v329.__r_.__value_.__r.__words[2] = *(void *)(v240 + 16);
            *(_OWORD *)&v329.__r_.__value_.__l.__data_ = v241;
          }
          MIL::Builder::OperationBuilder::AddInput();
          uint64_t v242 = v332;
          if (v332 && !atomic_fetch_add(&v332->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v242->__on_zero_shared)(v242);
            std::__shared_weak_count::__release_weak(v242);
            if (SHIBYTE(v329.__r_.__value_.__r.__words[2]) < 0)
            {
LABEL_489:
              operator delete(v329.__r_.__value_.__l.__data_);
              if ((v331 & 0x80000000) == 0) {
                goto LABEL_466;
              }
              goto LABEL_490;
            }
          }
          else if (SHIBYTE(v329.__r_.__value_.__r.__words[2]) < 0)
          {
            goto LABEL_489;
          }
          if ((v331 & 0x80000000) == 0) {
            goto LABEL_466;
          }
LABEL_490:
          operator delete(v330[0]);
LABEL_466:
          Outputuint64_t Name = MIL::Builder::OperationBuilder::GetOutputName(*v300);
          if (*(char *)(OutputName + 23) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)__p, *(const std::string::value_type **)OutputName, *(void *)(OutputName + 8));
          }
          else
          {
            long long v244 = *(_OWORD *)OutputName;
            v340[0] = *(void **)(OutputName + 16);
            *(_OWORD *)std::string __p = v244;
          }
          int v245 = SHIBYTE(v340[0]);
          if (SHIBYTE(v340[0]) >= 0) {
            size_t v246 = HIBYTE(v340[0]);
          }
          else {
            size_t v246 = (size_t)__p[1];
          }
          unint64_t v247 = v246 + 4;
          if (v246 + 4 > 0x7FFFFFFFFFFFFFF7) {
            std::string::__throw_length_error[abi:ne180100]();
          }
          if (v247 >= 0x17)
          {
            uint64_t v249 = (v247 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v247 | 7) != 0x17) {
              uint64_t v249 = v247 | 7;
            }
            uint64_t v250 = v249 + 1;
            unint64_t v248 = operator new(v249 + 1);
            size_t v326 = v246 + 4;
            unint64_t v327 = v250 | 0x8000000000000000;
            uint64_t v325 = v248;
          }
          else
          {
            size_t v326 = 0;
            unint64_t v327 = 0;
            uint64_t v325 = 0;
            unint64_t v248 = &v325;
            HIBYTE(v327) = v246 + 4;
            if (!v246) {
              goto LABEL_483;
            }
          }
          if (v245 >= 0) {
            size_t v251 = __p;
          }
          else {
            size_t v251 = (void **)__p[0];
          }
          memmove(v248, v251, v246);
LABEL_483:
          strcpy((char *)v248 + v246, "_old");
          MIL::Builder::OperationBuilder::RenameOutput();
          uint64_t v252 = v328;
          if (v328 && !atomic_fetch_add(&v328->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v252->__on_zero_shared)(v252);
            std::__shared_weak_count::__release_weak(v252);
            if ((SHIBYTE(v327) & 0x80000000) == 0)
            {
LABEL_486:
              if (SHIBYTE(v340[0]) < 0) {
                goto LABEL_493;
              }
              goto LABEL_487;
            }
          }
          else if ((SHIBYTE(v327) & 0x80000000) == 0)
          {
            goto LABEL_486;
          }
          operator delete(v325);
          if (SHIBYTE(v340[0]) < 0)
          {
LABEL_493:
            std::string::__init_copy_ctor_external(&v323, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
            goto LABEL_494;
          }
LABEL_487:
          *(_OWORD *)&v323.__r_.__value_.__l.__data_ = *(_OWORD *)__p;
          v323.__r_.__value_.__r.__words[2] = (std::string::size_type)v340[0];
LABEL_494:
          MIL::Builder::OperationBuilder::GetOutputType(*v300);
          MIL::Builder::OperationBuilder::AddOutput();
          int v253 = v324;
          if (v324 && !atomic_fetch_add(&v324->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v253->__on_zero_shared)(v253);
            std::__shared_weak_count::__release_weak(v253);
            if ((SHIBYTE(v323.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_498;
            }
LABEL_497:
            operator delete(v323.__r_.__value_.__l.__data_);
            goto LABEL_498;
          }
          if (SHIBYTE(v323.__r_.__value_.__r.__words[2]) < 0) {
            goto LABEL_497;
          }
LABEL_498:
          (*(void (**)(void **__return_ptr))(*(void *)v298 + 48))(&v336);
          MIL::IRTensorValueType::MakeScalar();
          uint64_t v254 = v337;
          if (v337 && !atomic_fetch_add(&v337->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v254->__on_zero_shared)(v254);
            std::__shared_weak_count::__release_weak(v254);
          }
          char v321 = 4;
          strcpy((char *)v320, "from");
          char v317 = 9;
          strcpy((char *)v316, "cast_only");
          MIL::IRTensorValueType::MakeStringValue();
          size_t v318 = v336;
          if (v336) {
            operator new();
          }
          uint64_t v319 = 0;
          unint64_t v336 = 0;
          MIL::Builder::OperationBuilder::AddInput();
          uint64_t v255 = v322;
          if (v322 && !atomic_fetch_add(&v322->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v255->__on_zero_shared)(v255);
            std::__shared_weak_count::__release_weak(v255);
            uint64_t v256 = v319;
            if (!v319) {
              goto LABEL_511;
            }
          }
          else
          {
            uint64_t v256 = v319;
            if (!v319) {
              goto LABEL_511;
            }
          }
          if (!atomic_fetch_add(&v256->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v256->__on_zero_shared)(v256);
            std::__shared_weak_count::__release_weak(v256);
          }
LABEL_511:
          int v257 = v336;
          unint64_t v336 = 0;
          if (v257) {
            (*(void (**)(void *))(*(void *)v257 + 8))(v257);
          }
          if (v317 < 0)
          {
            operator delete(v316[0]);
            if ((v321 & 0x80000000) == 0) {
              goto LABEL_515;
            }
          }
          else if ((v321 & 0x80000000) == 0)
          {
            goto LABEL_515;
          }
          operator delete(v320[0]);
LABEL_515:
          char v314 = 2;
          strcpy((char *)v313, "to");
          char v310 = 9;
          strcpy((char *)v309, "cast_only");
          MIL::IRTensorValueType::MakeStringValue();
          uint64_t v311 = v336;
          if (v336) {
            operator new();
          }
          int v312 = 0;
          unint64_t v336 = 0;
          MIL::Builder::OperationBuilder::AddInput();
          size_t v258 = v315;
          if (v315 && !atomic_fetch_add(&v315->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v258->__on_zero_shared)(v258);
            std::__shared_weak_count::__release_weak(v258);
            uint64_t v259 = v312;
            if (!v312) {
              goto LABEL_525;
            }
          }
          else
          {
            uint64_t v259 = v312;
            if (!v312) {
              goto LABEL_525;
            }
          }
          if (!atomic_fetch_add(&v259->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v259->__on_zero_shared)(v259);
            std::__shared_weak_count::__release_weak(v259);
          }
LABEL_525:
          size_t v260 = v336;
          unint64_t v336 = 0;
          if (v260) {
            (*(void (**)(void *))(*(void *)v260 + 8))(v260);
          }
          if (v310 < 0)
          {
            operator delete(v309[0]);
            if ((v314 & 0x80000000) == 0)
            {
LABEL_529:
              int v261 = v335;
              uint64_t v307 = v334;
              uint64_t v308 = v335;
              if (!v335) {
                goto LABEL_531;
              }
LABEL_530:
              atomic_fetch_add_explicit(&v261->__shared_owners_, 1uLL, memory_order_relaxed);
              goto LABEL_531;
            }
          }
          else if ((v314 & 0x80000000) == 0)
          {
            goto LABEL_529;
          }
          operator delete(v313[0]);
          int v261 = v335;
          uint64_t v307 = v334;
          uint64_t v308 = v335;
          if (v335) {
            goto LABEL_530;
          }
LABEL_531:
          BOOL v262 = (std::__shared_weak_count *)v300[1];
          std::string::size_type v305 = *v300;
          uint64_t v306 = v262;
          if (v262) {
            atomic_fetch_add_explicit(&v262->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          MIL::Builder::BlockBuilder::AddOperation();
          int v263 = v306;
          if (v306 && !atomic_fetch_add(&v306->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v263->__on_zero_shared)(v263);
            std::__shared_weak_count::__release_weak(v263);
            BOOL v264 = v308;
            if (!v308) {
              goto LABEL_542;
            }
          }
          else
          {
            BOOL v264 = v308;
            if (!v308) {
              goto LABEL_542;
            }
          }
          if (!atomic_fetch_add(&v264->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v264->__on_zero_shared)(v264);
            std::__shared_weak_count::__release_weak(v264);
          }
LABEL_542:
          int v265 = SHIBYTE(v340[0]);
          std::string::pointer v266 = __p[1];
          if (SHIBYTE(v340[0]) >= 0) {
            size_t v267 = HIBYTE(v340[0]);
          }
          else {
            size_t v267 = (size_t)__p[1];
          }
          unint64_t v268 = v267 + 4;
          if (v267 + 4 > 0x7FFFFFFFFFFFFFF7) {
            std::string::__throw_length_error[abi:ne180100]();
          }
          if (v268 >= 0x17)
          {
            uint64_t v270 = (v268 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v268 | 7) != 0x17) {
              uint64_t v270 = v268 | 7;
            }
            uint64_t v271 = v270 + 1;
            uint64_t v269 = operator new(v270 + 1);
            unint64_t v338 = v271 | 0x8000000000000000;
            unint64_t v336 = v269;
            uint64_t v337 = (std::__shared_weak_count *)(v267 + 4);
          }
          else
          {
            unint64_t v338 = 0;
            uint64_t v337 = 0;
            unint64_t v336 = 0;
            uint64_t v269 = &v336;
            HIBYTE(v338) = v267 + 4;
            if (!v267)
            {
              strcpy((char *)&v336, "_old");
              if ((SHIBYTE(v340[0]) & 0x80000000) == 0) {
                goto LABEL_549;
              }
              goto LABEL_557;
            }
          }
          if (v265 >= 0) {
            uint64_t v272 = __p;
          }
          else {
            uint64_t v272 = (void **)__p[0];
          }
          memmove(v269, v272, v267);
          strcpy((char *)v269 + v267, "_old");
          if ((v265 & 0x80000000) == 0)
          {
LABEL_549:
            *(_OWORD *)&v304.__r_.__value_.__l.__data_ = *(_OWORD *)__p;
            v304.__r_.__value_.__r.__words[2] = (std::string::size_type)v340[0];
            goto LABEL_558;
          }
LABEL_557:
          std::string::__init_copy_ctor_external(&v304, (const std::string::value_type *)__p[0], (std::string::size_type)v266);
LABEL_558:
          MIL::Builder::BlockBuilder::ReplaceUsesOfInputVariable();
          if (SHIBYTE(v304.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v304.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v338) & 0x80000000) == 0)
            {
LABEL_560:
              if ((SHIBYTE(v340[0]) & 0x80000000) == 0) {
                goto LABEL_561;
              }
              goto LABEL_565;
            }
          }
          else if ((SHIBYTE(v338) & 0x80000000) == 0)
          {
            goto LABEL_560;
          }
          operator delete(v336);
          if ((SHIBYTE(v340[0]) & 0x80000000) == 0)
          {
LABEL_561:
            std::string::size_type v273 = v335;
            if (!v335) {
              goto LABEL_567;
            }
            goto LABEL_566;
          }
LABEL_565:
          operator delete(__p[0]);
          std::string::size_type v273 = v335;
          if (!v335) {
            goto LABEL_567;
          }
LABEL_566:
          if (atomic_fetch_add(&v273->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
LABEL_567:
            uint64_t v274 = v231[1];
            if (!v274) {
              goto LABEL_571;
            }
            goto LABEL_568;
          }
          ((void (*)(std::__shared_weak_count *))v273->__on_zero_shared)(v273);
          std::__shared_weak_count::__release_weak(v273);
          uint64_t v274 = v231[1];
          if (!v274)
          {
            do
            {
LABEL_571:
              std::string::size_type v275 = (char **)v231[2];
              BOOL v61 = *v275 == (char *)v231;
              uint64_t v231 = v275;
            }
            while (!v61);
            goto LABEL_449;
          }
          do
          {
LABEL_568:
            std::string::size_type v275 = (char **)v274;
            uint64_t v274 = *(char **)v274;
          }
          while (v274);
LABEL_449:
          uint64_t v231 = v275;
          if (v275 == &v343) {
            goto LABEL_438;
          }
        }
      }
LABEL_591:
      std::__tree<std::__value_type<int,std::string>,std::__map_value_compare<int,std::__value_type<int,std::string>,std::less<int>,true>,std::allocator<std::__value_type<int,std::string>>>::destroy((uint64_t)&v342, v343);
      std::__tree<std::string>::destroy((uint64_t)&v345, (char *)v345.__r_.__value_.__l.__size_);
LABEL_592:
      uint64_t v281 = v347;
      if (v347 && !atomic_fetch_add(&v347->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v281->__on_zero_shared)(v281);
        std::__shared_weak_count::__release_weak(v281);
      }
      uint64_t v53 = v300;
      uint64_t v54 = v297;
      if (SHIBYTE(v348.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v348.__r_.__value_.__l.__data_);
      }
LABEL_107:
      v53 += 2;
    }
    while (v53 != v54);
    uint64_t v53 = (MIL::Builder::OperationBuilder **)v349;
    if (v349)
    {
LABEL_99:
      uint64_t v55 = v350;
      std::__shared_count v56 = v53;
      if (v350 != v53)
      {
        do
        {
          unint64_t v57 = (std::__shared_weak_count *)*(v55 - 1);
          if (v57 && !atomic_fetch_add(&v57->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
          v55 -= 2;
        }
        while (v55 != v53);
        std::__shared_count v56 = v349;
      }
      long long v350 = v53;
      operator delete(v56);
      std::__tree<std::string>::destroy((uint64_t)&v351, v352);
      v282 = v355;
      if (!v355) {
        goto LABEL_601;
      }
      goto LABEL_600;
    }
LABEL_596:
    std::__tree<std::string>::destroy((uint64_t)&v351, v352);
    v282 = v355;
    if (!v355) {
      goto LABEL_601;
    }
LABEL_600:
    if (!atomic_fetch_add(&v282->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v282->__on_zero_shared)(v282);
      std::__shared_weak_count::__release_weak(v282);
      long long v283 = (std::__shared_weak_count *)v356[1];
      if (!v356[1]) {
        goto LABEL_18;
      }
      goto LABEL_602;
    }
LABEL_601:
    long long v283 = (std::__shared_weak_count *)v356[1];
    if (!v356[1]) {
      goto LABEL_18;
    }
LABEL_602:
    if (!atomic_fetch_add(&v283->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v283->__on_zero_shared)(v283);
      std::__shared_weak_count::__release_weak(v283);
    }
LABEL_18:
    uint64_t v15 = v296 + 24;
  }
  while (v296 + 24 != v295);
  uint64_t v284 = (uint64_t *)v357;
  if (v357 != v358)
  {
    do
    {
      if (*((char *)v284 + 55) < 0) {
        std::string::__init_copy_ctor_external(&v367, (const std::string::value_type *)v284[4], v284[5]);
      }
      else {
        std::string v367 = *(std::string *)(v284 + 4);
      }
      MIL::Builder::ProgramBuilder::RemoveFunction();
      if (SHIBYTE(v367.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v367.__r_.__value_.__l.__data_);
        std::string::size_type v291 = (char *)v284[1];
        if (v291)
        {
          do
          {
LABEL_629:
            long long v292 = (char **)v291;
            std::string::size_type v291 = *(char **)v291;
          }
          while (v291);
          goto LABEL_621;
        }
      }
      else
      {
        std::string::size_type v291 = (char *)v284[1];
        if (v291) {
          goto LABEL_629;
        }
      }
      do
      {
        long long v292 = (char **)v284[2];
        BOOL v61 = *v292 == (char *)v284;
        uint64_t v284 = (uint64_t *)v292;
      }
      while (!v61);
LABEL_621:
      uint64_t v284 = (uint64_t *)v292;
    }
    while (v292 != v358);
  }
LABEL_607:
  MIL::Builder::ProgramBuilder::CreateProgram((uint64_t *)&v367, v366);
  if (((*(uint64_t (**)(std::string::size_type *))(v367.__r_.__value_.__l.__size_ + 16))(&v367.__r_.__value_.__l.__size_) & 1) == 0)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    MIL::MILResult::GetMessage((MIL::MILResult *)&v367.__r_.__value_.__r.__words[1]);
    std::operator+<char>();
    std::runtime_error::runtime_error(exception, (const std::string *)__p);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  std::string::size_type v285 = v367.__r_.__value_.__r.__words[0];
  v367.__r_.__value_.__r.__words[0] = 0;
  std::string::size_type *v294 = v285;
  MEMORY[0x192FEF390](&v367.__r_.__value_.__r.__words[1]);
  std::string::size_type v286 = v367.__r_.__value_.__r.__words[0];
  v367.__r_.__value_.__r.__words[0] = 0;
  if (v286) {
    (*(void (**)(std::string::size_type))(*(void *)v286 + 8))(v286);
  }
  std::__tree<std::string>::destroy((uint64_t)&v357, v358[0]);
  unint64_t v287 = (void **)v360[0];
  if (v360[0])
  {
    do
    {
      std::string v290 = (void **)*v287;
      if (*((char *)v287 + 39) < 0) {
        operator delete(v287[2]);
      }
      operator delete(v287);
      unint64_t v287 = v290;
    }
    while (v290);
  }
  int v288 = v359[0];
  v359[0] = 0;
  if (v288) {
    operator delete(v288);
  }
  if (SHIBYTE(v363) < 0) {
    operator delete(__dst[0]);
  }
  uint64_t result = v366;
  uint64_t v366 = 0;
  if (result) {
    return (MIL::Builder::ProgramBuilder *)(*(uint64_t (**)(MIL::Builder::ProgramBuilder *))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_1922C1EF0(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x267]) < 0)
  {
    operator delete((void *)STACK[0x250]);
    if ((v2 & 1) == 0)
    {
LABEL_6:
      std::pair<std::unique_ptr<MIL::IRProgram>,MIL::ValidationResult>::~pair((uint64_t *)(v3 - 192));
      std::__tree<std::string>::destroy((uint64_t)&STACK[0x338], (char *)STACK[0x340]);
      uint64_t v5 = (void **)STACK[0x360];
      if (STACK[0x360])
      {
        do
        {
          int v8 = (void **)*v5;
          if (*((char *)v5 + 39) < 0) {
            operator delete(v5[2]);
          }
          operator delete(v5);
          uint64_t v5 = v8;
        }
        while (v8);
      }
      int v6 = (void *)STACK[0x350];
      STACK[0x350] = 0;
      if (v6) {
        operator delete(v6);
      }
      if (*(char *)(v3 - 217) < 0) {
        operator delete(*(void **)(v3 - 240));
      }
      uint64_t v7 = *(void *)(v3 - 200);
      *(void *)(v3 - 200) = 0;
      if (!v7) {
        _Unwind_Resume(a1);
      }
      (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
      _Unwind_Resume(a1);
    }
  }
  else if (!v2)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v1);
  goto LABEL_6;
}

uint64_t nitro::ndarray<unsigned char>::operator==<int>(uint64_t *a1, uint64_t *a2)
{
  if (a2 == a1) {
    return 1;
  }
  uint64_t v5 = (char *)a1[2];
  uint64_t v4 = (char *)a1[3];
  unint64_t v6 = v4 - v5;
  unint64_t v7 = (v4 - v5) >> 3;
  int v8 = (void *)a2[2];
  if (v7 != (a2[3] - (uint64_t)v8) >> 3) {
    return 0;
  }
  int64_t v9 = v4 - v5;
  if (v4 == v5) {
    return 1;
  }
  uint64_t v10 = v7 <= 1 ? 1 : (v4 - v5) >> 3;
  if (*(void *)v5 != *v8) {
    return 0;
  }
  uint64_t v11 = 1;
  do
  {
    unint64_t v12 = v11;
    if (v10 == v11) {
      break;
    }
    uint64_t v13 = *(void *)&v5[8 * v11];
    uint64_t v14 = v8[v11++];
  }
  while (v13 == v14);
  BOOL v15 = v12 >= v7;
  if (v12 >= v7)
  {
    uint64_t v16 = *a1;
    if (!*a1) {
      return 1;
    }
    if ((unint64_t)(v9 - 8) >= 8)
    {
      unint64_t v19 = ((unint64_t)(v9 - 8) >> 3) + 1;
      long long v18 = &v5[8 * (v19 & 0x3FFFFFFFFFFFFFFELL)];
      std::string v20 = v5 + 8;
      uint64_t v21 = 1;
      uint64_t v22 = v19 & 0x3FFFFFFFFFFFFFFELL;
      uint64_t v23 = 1;
      do
      {
        v21 *= *(v20 - 1);
        v23 *= *v20;
        v20 += 2;
        v22 -= 2;
      }
      while (v22);
      uint64_t v17 = v23 * v21;
      if (v19 == (v19 & 0x3FFFFFFFFFFFFFFELL))
      {
LABEL_20:
        if (v17)
        {
          if ((v6 & 0x8000000000000000) != 0) {
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v25 = operator new(v4 - v5);
          bzero(v25, v6 & 0xFFFFFFFFFFFFFFF8);
          uint64_t v26 = *a2;
          if (v6 >> 3 <= 1) {
            unint64_t v27 = 1;
          }
          else {
            unint64_t v27 = v6 >> 3;
          }
          uint64_t v28 = a2[5];
          uint64_t v29 = a2[8];
          uint64_t v30 = v27 & 0x1FFFFFFFFFFFFFFELL;
          while (1)
          {
            if (v6 <= 7)
            {
              uint64_t v31 = 0;
              int v32 = *(unsigned __int8 *)(v16 + a1[8]);
              goto LABEL_42;
            }
            uint64_t v33 = a1[5];
            if (v27 < 2) {
              break;
            }
            uint64_t v36 = 0;
            uint64_t v37 = 0;
            uint64_t v38 = (void *)(v33 + 8);
            uint64_t v39 = v27 & 0x1FFFFFFFFFFFFFFELL;
            size_t v40 = v25 + 1;
            do
            {
              v36 += *(v38 - 1) * *(v40 - 1);
              v37 += *v38 * *v40;
              v40 += 2;
              v38 += 2;
              v39 -= 2;
            }
            while (v39);
            uint64_t v34 = v37 + v36;
            uint64_t v35 = v27 & 0x1FFFFFFFFFFFFFFELL;
            if (v27 != v30) {
              goto LABEL_33;
            }
LABEL_35:
            int v32 = *(unsigned __int8 *)(v16 + a1[8] + v34);
            if (v27 < 2)
            {
              uint64_t v31 = 0;
              uint64_t v48 = 0;
LABEL_40:
              unint64_t v54 = v27 - v48;
              uint64_t v55 = v48;
              std::__shared_count v56 = (uint64_t *)(v28 + 8 * v48);
              unint64_t v57 = &v25[v55];
              do
              {
                uint64_t v59 = *v57++;
                uint64_t v58 = v59;
                uint64_t v60 = *v56++;
                v31 += v60 * v58;
                --v54;
              }
              while (v54);
              goto LABEL_42;
            }
            uint64_t v49 = 0;
            uint64_t v50 = 0;
            uint64_t v51 = v27 & 0x1FFFFFFFFFFFFFFELL;
            uint64_t v52 = (void *)(v28 + 8);
            uint64_t v53 = v25 + 1;
            do
            {
              v49 += *(v52 - 1) * *(v53 - 1);
              v50 += *v52 * *v53;
              v53 += 2;
              v52 += 2;
              v51 -= 2;
            }
            while (v51);
            uint64_t v31 = v50 + v49;
            uint64_t v48 = v27 & 0x1FFFFFFFFFFFFFFELL;
            if (v27 != v30) {
              goto LABEL_40;
            }
LABEL_42:
            int v61 = *(_DWORD *)(v26 + 4 * (v29 + v31));
            BOOL v15 = v61 == v32;
            if ((int)(v6 >> 3) >= 1 && v61 == v32)
            {
              uint64_t v62 = (v6 >> 3) + 1;
              unint64_t v63 = v6 >> 3;
              while (1)
              {
                uint64_t v64 = (v62 - 2);
                unint64_t v65 = v25[v64] + 1;
                v25[v64] = v65;
                if (v65 < *(void *)&v5[v64 * 8]) {
                  break;
                }
                v25[(v62 - 2)] = 0;
                LODWORD(v63) = v63 - 1;
                if ((unint64_t)--v62 <= 1) {
                  goto LABEL_49;
                }
              }
              if ((int)v63 > 0) {
                continue;
              }
            }
LABEL_49:
            operator delete(v25);
            return v15;
          }
          uint64_t v34 = 0;
          uint64_t v35 = 0;
LABEL_33:
          unint64_t v41 = v27 - v35;
          uint64_t v42 = v35;
          int v43 = (uint64_t *)(v33 + v42 * 8);
          uint64_t v44 = &v25[v42];
          do
          {
            uint64_t v46 = *v44++;
            uint64_t v45 = v46;
            uint64_t v47 = *v43++;
            v34 += v47 * v45;
            --v41;
          }
          while (v41);
          goto LABEL_35;
        }
        return 1;
      }
    }
    else
    {
      uint64_t v17 = 1;
      long long v18 = (char *)a1[2];
    }
    do
    {
      uint64_t v24 = *(void *)v18;
      v18 += 8;
      v17 *= v24;
    }
    while (v18 != v4);
    goto LABEL_20;
  }
  return v15;
}

void sub_1922C2BAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_neg_char[abi:ne180100](uint64_t a1, uint64_t a2)
{
  char v2 = a2;
  if (!*(unsigned char *)(a1 + 169))
  {
    unint64_t v6 = (void *)(a1 + 64);
    uint64_t v5 = *(unsigned char **)(a1 + 72);
    unint64_t v16 = *(void *)(a1 + 80);
    if (*(unsigned char *)(a1 + 170))
    {
      if ((unint64_t)v5 < v16) {
        goto LABEL_24;
      }
      uint64_t v17 = (unsigned char *)*v6;
      unint64_t v18 = (unint64_t)&v5[-*v6];
      unint64_t v19 = v18 + 1;
      if ((uint64_t)(v18 + 1) >= 0)
      {
        unint64_t v20 = v16 - (void)v17;
        if (2 * v20 > v19) {
          unint64_t v19 = 2 * v20;
        }
        if (v20 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v21 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v21 = v19;
        }
        if (v21)
        {
          unint64_t v12 = operator new(v21);
          uint64_t v13 = &v12[v18];
          uint64_t v14 = &v12[v21];
          v12[v18] = v2;
          uint64_t v15 = (uint64_t)&v12[v18 + 1];
          if (v5 == v17) {
            goto LABEL_49;
          }
        }
        else
        {
          unint64_t v12 = 0;
          uint64_t v13 = &v5[-*v6];
          uint64_t v14 = 0;
          *(unsigned char *)unint64_t v18 = a2;
          uint64_t v15 = v18 + 1;
          if (v5 == v17) {
            goto LABEL_49;
          }
        }
        if (v18 >= 8 && (unint64_t)(v17 - v12) >= 0x20)
        {
          if (v18 >= 0x20)
          {
            unint64_t v28 = v18 & 0xFFFFFFFFFFFFFFE0;
            uint64_t v38 = (long long *)(v5 - 16);
            uint64_t v39 = &v12[v5 - 16 - v17];
            unint64_t v40 = v18 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              long long v41 = *v38;
              *(v39 - 1) = *(v38 - 1);
              *uint64_t v39 = v41;
              v39 -= 2;
              v38 -= 2;
              v40 -= 32;
            }
            while (v40);
            if (v18 == v28) {
              goto LABEL_86;
            }
            if ((v18 & 0x18) == 0)
            {
              v13 -= v28;
              v5 -= v28;
              goto LABEL_80;
            }
          }
          else
          {
            unint64_t v28 = 0;
          }
          v13 -= v18 & 0xFFFFFFFFFFFFFFF8;
          uint64_t v42 = &v5[-v28 - 8];
          int v43 = &v12[v42 - v17];
          unint64_t v44 = v28 - (v18 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            uint64_t v45 = *(void *)v42;
            v42 -= 8;
            *v43-- = v45;
            v44 += 8;
          }
          while (v44);
          v5 -= v18 & 0xFFFFFFFFFFFFFFF8;
          if (v18 == (v18 & 0xFFFFFFFFFFFFFFF8)) {
            goto LABEL_86;
          }
        }
LABEL_80:
        std::__shared_count v56 = v13 - 1;
        do
        {
          char v57 = *--v5;
          *v56-- = v57;
        }
        while (v5 != v17);
        goto LABEL_86;
      }
LABEL_89:
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    if ((unint64_t)v5 < v16) {
      goto LABEL_24;
    }
    uint64_t v23 = (unsigned char *)*v6;
    unint64_t v24 = (unint64_t)&v5[-*v6];
    unint64_t v25 = v24 + 1;
    if ((uint64_t)(v24 + 1) < 0) {
      goto LABEL_89;
    }
    unint64_t v26 = v16 - (void)v23;
    if (2 * v26 > v25) {
      unint64_t v25 = 2 * v26;
    }
    if (v26 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v27 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v27 = v25;
    }
    if (v27)
    {
      unint64_t v12 = operator new(v27);
      uint64_t v13 = &v12[v24];
      uint64_t v14 = &v12[v27];
      v12[v24] = v2;
      uint64_t v15 = (uint64_t)&v12[v24 + 1];
      if (v5 == v23)
      {
LABEL_49:
        *(void *)(a1 + 64) = v13;
        *(void *)(a1 + 72) = v15;
        *(void *)(a1 + 80) = v14;
        if (!v5) {
          goto LABEL_88;
        }
        goto LABEL_87;
      }
    }
    else
    {
      unint64_t v12 = 0;
      uint64_t v13 = &v5[-*v6];
      uint64_t v14 = 0;
      *(unsigned char *)unint64_t v24 = a2;
      uint64_t v15 = v24 + 1;
      if (v5 == v23) {
        goto LABEL_49;
      }
    }
    if (v24 >= 8 && (unint64_t)(v23 - v12) >= 0x20)
    {
      if (v24 >= 0x20)
      {
        unint64_t v29 = v24 & 0xFFFFFFFFFFFFFFE0;
        uint64_t v46 = (long long *)(v5 - 16);
        uint64_t v47 = &v12[v5 - 16 - v23];
        unint64_t v48 = v24 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v49 = *v46;
          *(v47 - 1) = *(v46 - 1);
          _OWORD *v47 = v49;
          v47 -= 2;
          v46 -= 2;
          v48 -= 32;
        }
        while (v48);
        if (v24 == v29) {
          goto LABEL_86;
        }
        if ((v24 & 0x18) == 0)
        {
          v13 -= v29;
          v5 -= v29;
          goto LABEL_84;
        }
      }
      else
      {
        unint64_t v29 = 0;
      }
      v13 -= v24 & 0xFFFFFFFFFFFFFFF8;
      uint64_t v50 = &v5[-v29 - 8];
      uint64_t v51 = &v12[v50 - v23];
      unint64_t v52 = v29 - (v24 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        uint64_t v53 = *(void *)v50;
        v50 -= 8;
        *v51-- = v53;
        v52 += 8;
      }
      while (v52);
      v5 -= v24 & 0xFFFFFFFFFFFFFFF8;
      if (v24 == (v24 & 0xFFFFFFFFFFFFFFF8)) {
        goto LABEL_86;
      }
    }
LABEL_84:
    uint64_t v58 = v13 - 1;
    do
    {
      char v59 = *--v5;
      *v58-- = v59;
    }
    while (v5 != v23);
    goto LABEL_86;
  }
  char v2 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a2);
  uint64_t v5 = *(unsigned char **)(a1 + 72);
  unint64_t v4 = *(void *)(a1 + 80);
  if ((unint64_t)v5 < v4)
  {
LABEL_24:
    unsigned char *v5 = v2;
    uint64_t v15 = (uint64_t)(v5 + 1);
    goto LABEL_88;
  }
  unint64_t v6 = (void *)(a1 + 64);
  unint64_t v7 = *(unsigned char **)(a1 + 64);
  unint64_t v8 = v5 - v7;
  uint64_t v9 = v5 - v7 + 1;
  if (v9 < 0) {
    goto LABEL_89;
  }
  unint64_t v10 = v4 - (void)v7;
  if (2 * v10 > v9) {
    uint64_t v9 = 2 * v10;
  }
  if (v10 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v11 = v9;
  }
  if (v11)
  {
    unint64_t v12 = operator new(v11);
    uint64_t v13 = &v12[v8];
    uint64_t v14 = &v12[v11];
    v12[v8] = v2;
    uint64_t v15 = (uint64_t)&v12[v8 + 1];
    if (v5 == v7) {
      goto LABEL_49;
    }
  }
  else
  {
    unint64_t v12 = 0;
    uint64_t v13 = (char *)(v5 - v7);
    uint64_t v14 = 0;
    *(unsigned char *)unint64_t v8 = v2;
    uint64_t v15 = v8 + 1;
    if (v5 == v7) {
      goto LABEL_49;
    }
  }
  if (v8 < 8 || (unint64_t)(v7 - v12) < 0x20) {
    goto LABEL_76;
  }
  if (v8 < 0x20)
  {
    unint64_t v22 = 0;
    goto LABEL_55;
  }
  unint64_t v22 = v8 & 0xFFFFFFFFFFFFFFE0;
  uint64_t v30 = (long long *)(v5 - 16);
  uint64_t v31 = &v12[v5 - 16 - v7];
  unint64_t v32 = v8 & 0xFFFFFFFFFFFFFFE0;
  do
  {
    long long v33 = *v30;
    *(v31 - 1) = *(v30 - 1);
    *uint64_t v31 = v33;
    v31 -= 2;
    v30 -= 2;
    v32 -= 32;
  }
  while (v32);
  if (v8 != v22)
  {
    if ((v8 & 0x18) == 0)
    {
      v13 -= v22;
      v5 -= v22;
      goto LABEL_76;
    }
LABEL_55:
    v13 -= v8 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v34 = &v5[-v22 - 8];
    uint64_t v35 = &v12[v34 - v7];
    unint64_t v36 = v22 - (v8 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      uint64_t v37 = *(void *)v34;
      v34 -= 8;
      *v35-- = v37;
      v36 += 8;
    }
    while (v36);
    v5 -= v8 & 0xFFFFFFFFFFFFFFF8;
    if (v8 == (v8 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_86;
    }
LABEL_76:
    unint64_t v54 = v13 - 1;
    do
    {
      char v55 = *--v5;
      *v54-- = v55;
    }
    while (v5 != v7);
  }
LABEL_86:
  uint64_t v5 = (unsigned char *)*v6;
  *(void *)(a1 + 64) = v12;
  *(void *)(a1 + 72) = v15;
  *(void *)(a1 + 80) = v14;
  if (v5) {
LABEL_87:
  }
    operator delete(v5);
LABEL_88:
  *(void *)(a1 + 72) = v15;
}

void E5DB::RegressionTestConfigParser::GetTransformedPixelData(uint64_t a1, void **a2, void **a3, E5RT::SurfaceDescriptor *a4)
{
  unint64_t v6 = (E5RT::BufferObject *)E5RT::MemoryObject::TryAsBuffer(*a3);
  E5RT::BufferObject::GetDataSpan(v6);
  unint64_t v7 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TryAsTensorDescriptor(*a2);
  E5RT::TensorDescriptor::GetTensorShape(v7);
  unint64_t v8 = (E5RT::TensorDescriptorImpl **)E5RT::OperandDescriptor::TryAsTensorDescriptor(*a2);
  E5RT::TensorDescriptor::GetNumElements(v8);
  E5RT::SurfaceObject::AllocSurface(a4, 0);
}

void sub_1922C31D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  __cxa_free_exception(v10);
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(a1);
}

uint64_t Espresso::ANECompilerEngine::mix_softmax_kernel::is_valid_for_engine(uint64_t a1, int64x2_t **a2, uint64_t *a3)
{
  unint64_t v6 = (_OWORD *)a3[6];
  unint64_t v7 = (std::__shared_weak_count *)*((void *)v6 + 10);
  if (v7)
  {
    unint64_t v8 = std::__shared_weak_count::lock(v7);
    if (v8)
    {
      uint64_t v9 = (const Espresso::net *)*((void *)v6 + 9);
      goto LABEL_6;
    }
  }
  else
  {
    unint64_t v8 = 0;
  }
  uint64_t v9 = 0;
LABEL_6:
  Espresso::ANECompilerEngine::ane_arch_allow_network_override((uint64_t)v9 + 472);
  unint64_t v10 = (Espresso::ANECompilerEngine *)objc_claimAutoreleasedReturnValue();
  if (Espresso::ANECompilerEngine::is_mix(v10, v11))
  {
    long long v103 = *(_OWORD *)a2;
    unint64_t v12 = (std::__shared_weak_count *)*((void *)&v103 + 1);
    *a2 = 0;
    a2[1] = 0;
    uint64_t v13 = v12;
    uint64_t is_valid_for_engine = Espresso::ANECompilerEngine::softmax_kernel::is_valid_for_engine(a1, (int64x2_t **)&v103, a3);
    if (v13) {
      nitro::nitro_function::nitro_function(v13);
    }
    goto LABEL_30;
  }
  if (a3[1] - *a3 != 64)
  {
    uint64_t v17 = *a2;
    unint64_t v16 = a2[1];
    v102[0] = v17;
    v102[1] = v16;
    if (v16) {
      atomic_fetch_add_explicit(&v16->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(&v90, "Softmax kernel with multiple inputs not supported on ANE.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)&v90, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v102, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    goto LABEL_21;
  }
  if (a3[4] - a3[3] != 64)
  {
    unint64_t v18 = *a2;
    unint64_t v16 = a2[1];
    v101[0] = v18;
    v101[1] = v16;
    if (v16) {
      atomic_fetch_add_explicit(&v16->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(&v90, "Softmax kernel has multiple outputs not supported on ANE.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)&v90, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v101, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    goto LABEL_21;
  }
  if (*(unsigned char *)(a1 + 304))
  {
    uint64_t v15 = *a2;
    unint64_t v16 = a2[1];
    v100[0] = v15;
    v100[1] = v16;
    if (v16) {
      atomic_fetch_add_explicit(&v16->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(&v90, "Softmax Cross Entropy loss not mapped to ANE.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)&v90, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v100, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
LABEL_21:
    if (v86) {
      nitro::nitro_function::nitro_function(v86);
    }
    *(void *)size_t v96 = v85;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v96);
    *(void *)size_t v96 = v84;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v96);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
LABEL_25:
    if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v90.__r_.__value_.__l.__data_);
    }
    if (v16) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v16);
    }
LABEL_29:
    uint64_t is_valid_for_engine = 0;
    goto LABEL_30;
  }
  if (*(unsigned char *)(a1 + 306))
  {
    if (*(_DWORD *)(a1 + 300))
    {
      unint64_t v20 = *a2;
      unint64_t v16 = a2[1];
      v99[0] = v20;
      v99[1] = v16;
      if (v16) {
        atomic_fetch_add_explicit(&v16->i64[1], 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(&v90, "is_log_softmax and is_plain_sigmoid must not be enabled together.");
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)&v90, (uint64_t)a3, 0);
      Espresso::emit_kernel_validation_warning(v99, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
      Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
      goto LABEL_25;
    }
    *(void *)&v96[16] = 897988541;
    v96[24] = 0;
    uint64_t v98 = 0;
    *(void *)size_t v96 = 26;
    *(void *)&v96[8] = 1065353216;
    Espresso::ANECompilerEngine::elementwise_kernel::elementwise_kernel((uint64_t)&__p, (uint64_t *)(a1 + 8), (uint64_t)v96);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1EE3459F8;
    unint64_t v87 = &unk_1EE345B68;
    size_t v21 = (std::__shared_weak_count *)a2[1];
    uint64_t v94 = *a2;
    int v95 = v21;
    if (v21) {
      atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    char v22 = Espresso::ANECompilerEngine::mix_elementwise_kernel::is_valid_for_engine((uint64_t)&__p, (uint64_t *)&v94, a3);
    if (v95) {
      nitro::nitro_function::nitro_function(v95);
    }
    if ((v22 & 1) == 0)
    {
      unint64_t v44 = *a2;
      uint64_t v45 = a2[1];
      v93[0] = v44;
      v93[1] = v45;
      if (v45) {
        atomic_fetch_add_explicit(&v45->i64[1], 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(&v56, "Elementwise log for log_softmax not supported on ANE.");
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v90, (long long *)&v56, (uint64_t)a3, 0);
      Espresso::emit_kernel_validation_warning(v93, (Espresso::base_kernel::validate_for_engine_warning_t *)&v90);
      Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((Espresso::base_kernel::validate_for_engine_warning_t *)&v90);
      if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v56.__r_.__value_.__l.__data_);
      }
      if (v45) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v45);
      }
      Espresso::ANECompilerEngine::mix_elementwise_kernel::~mix_elementwise_kernel((Espresso::ANECompilerEngine::mix_elementwise_kernel *)&__p);
      goto LABEL_29;
    }
    Espresso::ANECompilerEngine::mix_elementwise_kernel::~mix_elementwise_kernel((Espresso::ANECompilerEngine::mix_elementwise_kernel *)&__p);
  }
  if (*(_DWORD *)(a1 + 300))
  {
    __asm { FMOV            V0.2S, #1.0 }
    *(_OWORD *)&v96[4] = _D0;
    uint64_t v97 = 0;
    *(void *)&v96[20] = 0;
    *(_DWORD *)size_t v96 = 3;
    Espresso::ANECompilerEngine::activation_kernel::activation_kernel((uint64_t)&__p, (uint64_t *)(a1 + 8), (uint64_t)v96);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1EE344D88;
    uint64_t v88 = &unk_1EE344F50;
    long long v89 = 0u;
    unint64_t v28 = (std::__shared_weak_count *)a2[1];
    uint64_t v81 = *a2;
    uint64_t v82 = v28;
    if (v28) {
      atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    char v29 = Espresso::ANECompilerEngine::mix_activation_kernel::is_valid_for_engine((uint64_t)&__p, &v81, a3);
    if (v82) {
      nitro::nitro_function::nitro_function(v82);
    }
    if ((v29 & 1) == 0)
    {
      long long v41 = *a2;
      uint64_t v42 = a2[1];
      v80[0] = v41;
      v80[1] = v42;
      if (v42) {
        atomic_fetch_add_explicit(&v42->i64[1], 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(&v56, "Sigmoid not supported on ANE.");
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v90, (long long *)&v56, (uint64_t)a3, 0);
      Espresso::emit_kernel_validation_warning(v80, (Espresso::base_kernel::validate_for_engine_warning_t *)&v90);
      Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((Espresso::base_kernel::validate_for_engine_warning_t *)&v90);
      if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v56.__r_.__value_.__l.__data_);
      }
      if (v42) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v42);
      }
      Espresso::ANECompilerEngine::mix_activation_kernel::~mix_activation_kernel((Espresso::ANECompilerEngine::mix_activation_kernel *)&__p);
      goto LABEL_29;
    }
    Espresso::ANECompilerEngine::mix_activation_kernel::~mix_activation_kernel((Espresso::ANECompilerEngine::mix_activation_kernel *)&__p);
  }
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v30 = *a3;
  uint64_t v31 = *(void *)(*a3 + 32);
  long long v32 = *(_OWORD *)(*a3 + 16);
  v74[0] = *(_OWORD *)*a3;
  v74[1] = v32;
  uint64_t v75 = v31;
  uint64_t v76 = 0;
  long long v77 = 0;
  uint64_t v78 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v76, *(const void **)(v30 + 40), *(void *)(v30 + 48), (uint64_t)(*(void *)(v30 + 48) - *(void *)(v30 + 40)) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v79, v9, (const Espresso::layer_shape *)v74, 1);
  if (v76)
  {
    long long v77 = v76;
    operator delete(v76);
  }
  if (v8)
  {
    nitro::nitro_function::nitro_function(v8);
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v33 = (_OWORD *)a3[3];
  uint64_t v34 = *((void *)v33 + 4);
  long long v35 = v33[1];
  v68[0] = *v33;
  v68[1] = v35;
  uint64_t v69 = v34;
  unsigned int v70 = 0;
  uint64_t v71 = 0;
  uint64_t v72 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v70, *((const void **)v33 + 5), *((void *)v33 + 6), (uint64_t)(*((void *)v33 + 6) - *((void *)v33 + 5)) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v73, v9, (const Espresso::layer_shape *)v68, 1);
  if (v70)
  {
    uint64_t v71 = v70;
    operator delete(v70);
  }
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  Espresso::ANECompilerEngine::mix_softmax_kernel::supported_by_hw((uint64_t)v65, v10, v79, v73);
  if (!v65[0])
  {
    int v43 = *a2;
    unint64_t v40 = a2[1];
    v64[0] = v43;
    v64[1] = v40;
    if (v40) {
      atomic_fetch_add_explicit(&v40->i64[1], 1uLL, memory_order_relaxed);
    }
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, &v66, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v64, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    if (!v40) {
      goto LABEL_75;
    }
    goto LABEL_74;
  }
  ANECSoftmaxLayerDescInitialize();
  if (*(unsigned char *)(a1 + 307)) {
    BOOL v36 = 1;
  }
  else {
    BOOL v36 = v73[6] < 4;
  }
  uint64_t v37 = @"Width";
  if (!v36) {
    uint64_t v37 = @"Channel";
  }
  *(void *)size_t v96 = 1;
  *(void *)&v96[8] = v37;
  unsigned int v38 = Espresso::ANECompilerEngine::bottom_compute_path((Espresso::ANECompilerEngine *)a3, v9, 0);
  if (v38 < 8 && ((0x97u >> v38) & 1) != 0)
  {
    std::string::size_type v46 = *((void *)&off_1E5747A70 + v38);
    ANECTensorDescInitialize();
    *(void *)&long long v47 = v79[3];
    *((void *)&v47 + 1) = v79[4];
    long long v91 = v47;
    v90.__r_.__value_.__r.__words[0] = v46;
    uint64_t v92 = v79[2];
    *(void *)&long long v47 = v79[0];
    *((void *)&v47 + 1) = v79[1];
    *(_OWORD *)&v90.__r_.__value_.__r.__words[1] = v47;
    uint64_t v61 = 0;
    uint64_t v62 = 0;
    Espresso::ANECompilerEngine::ane_kernel::get_ane_validator((Espresso::ANECompilerEngine::ane_kernel *)&v59, (NSString *)(a1 + 312), v10);
    int v48 = ANECValidateSoftmaxLayer();
    uint64_t is_valid_for_engine = v48 == 0;
    if (v48)
    {
      long long v49 = a2[1];
      v58[0] = *a2;
      v58[1] = v49;
      if (v49) {
        atomic_fetch_add_explicit(&v49->i64[1], 1uLL, memory_order_relaxed);
      }
      std::to_string(&v57, v48);
      uint64_t v50 = std::string::insert(&v57, 0, "mix_softmax_kernel: ANECValidateSoftmaxLayer failed with status ");
      std::string v56 = *v50;
      v50->__r_.__value_.__l.__size_ = 0;
      v50->__r_.__value_.__r.__words[2] = 0;
      v50->__r_.__value_.__r.__words[0] = 0;
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)&v56, (uint64_t)a3, 0);
      Espresso::emit_kernel_validation_warning(v58, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
      Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
      if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v56.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v57.__r_.__value_.__l.__data_);
      }
      if (v49) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v49);
      }
      Espresso::ANECompilerEngine::violations_from_alternates<ANECSoftmaxLayerDescAlternate>((uint64_t)&v56, v61, v62);
      uint64_t v51 = (uint64_t **)v56.__r_.__value_.__r.__words[2];
      if (v56.__r_.__value_.__r.__words[2])
      {
        do
        {
          unint64_t v52 = (std::__shared_weak_count *)a2[1];
          unint64_t v54 = *a2;
          char v55 = v52;
          if (v52) {
            atomic_fetch_add_explicit(&v52->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v53 = v51[2];
          std::string::basic_string[abi:ne180100]<0>(&v57, (char *)objc_msgSend(v53, "UTF8String", v54, v55));
          Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)&v57, (uint64_t)a3, 0);
          Espresso::emit_kernel_validation_warning(&v54, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
          if (v86) {
            nitro::nitro_function::nitro_function(v86);
          }
          v104[0] = (void **)v85;
          std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v104);
          v104[0] = (void **)v84;
          std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v104);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v57.__r_.__value_.__l.__data_);
          }
          if (v52) {
            nitro::nitro_function::nitro_function(v52);
          }
          uint64_t v51 = (uint64_t **)*v51;
        }
        while (v51);
      }
      std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&v56);
    }
    if (v60) {
      nitro::nitro_function::nitro_function(v60);
    }
    goto LABEL_76;
  }
  uint64_t v39 = *a2;
  unint64_t v40 = a2[1];
  v63[0] = v39;
  v63[1] = v40;
  if (v40) {
    atomic_fetch_add_explicit(&v40->i64[1], 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(&v90, "Invalid compute path for softmax input");
  Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)&v90, (uint64_t)a3, 0);
  Espresso::emit_kernel_validation_warning(v63, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
  if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v90.__r_.__value_.__l.__data_);
  }
  if (v40) {
LABEL_74:
  }
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v40);
LABEL_75:
  uint64_t is_valid_for_engine = 0;
LABEL_76:
  if (v67 < 0) {
    operator delete((void *)v66);
  }
LABEL_30:

  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  return is_valid_for_engine;
}

void sub_1922C3B6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a22) {
    nitro::nitro_function::nitro_function(a22);
  }
  if (a35 < 0) {
    operator delete(__p);
  }

  if (v35) {
    nitro::nitro_function::nitro_function(v35);
  }
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::mix_softmax_kernel::supported_by_hw(uint64_t a1, void *a2, _DWORD *a3, _DWORD *a4)
{
  id v9 = a2;
  if (Espresso::ANECompilerEngine::blob_shape_ane_compatible(a3, v9))
  {
    BOOL v7 = Espresso::ANECompilerEngine::blob_shape_ane_compatible(a4, v9);
    unint64_t v8 = (void *)(a1 + 8);
    if (v7)
    {
      *(unsigned char *)a1 = 1;
      std::string::basic_string[abi:ne180100]<0>(v8, "Success");
    }
    else
    {
      *(unsigned char *)a1 = 0;
      std::string::basic_string[abi:ne180100]<0>(v8, "Output blob dimensions exceed ANE limit.");
    }
  }
  else
  {
    *(unsigned char *)a1 = 0;
    std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 8), "Input blob dimensions exceed ANE limit.");
  }
}

void sub_1922C3EBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void Espresso::AOT::E5BackendFlexibleShapeTransformer::AddDefaultFunction(uint64_t a1@<X1>, uint64_t *a2@<X2>, void *a3@<X8>)
{
  *(uint64_t ***)((char *)&v94[2] + 4) = *(uint64_t ***)MEMORY[0x1E4F143B8];
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 48))(&v90, a1);
  uint64_t v87 = v90;
  uint64_t v88 = v91;
  if (v91) {
    atomic_fetch_add_explicit(&v91->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  MIL::Builder::ProgramBuilder::Make();
  if (v88 && !atomic_fetch_add(&v88->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
    std::__shared_weak_count::__release_weak(v88);
  }
  uint64_t v84 = 0;
  int v85 = 0;
  unint64_t v86 = 0;
  uint64_t v81 = 0;
  uint64_t v82 = 0;
  unint64_t v83 = 0;
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  if (*a2 == v6)
  {
    __dst.__r_.__value_.__r.__words[0] = 0;
    goto LABEL_117;
  }
  while (1)
  {
    MIL::IRProgram::GetFunction();
    std::string __p = operator new(0x20uLL);
    v65[0] = xmmword_192DAA350;
    strcpy((char *)__p, "FlexibleShapeInformation");
    MIL::IRObject::TryGetAttributeSharedPtr();
    if (SHIBYTE(v65[0]) < 0)
    {
      operator delete(__p);
      if (!v79)
      {
LABEL_24:
        int v15 = 3;
        goto LABEL_91;
      }
    }
    else if (!v79)
    {
      goto LABEL_24;
    }
    MIL::Attributes::FlexibleShapeInfo::Make();
    MIL::Attributes::FlexibleShapeInfo::TryGetDefaultShapes((uint64_t *)&v76, v78);
    if (!v76[3])
    {
      int v15 = 3;
      goto LABEL_87;
    }
    if (*(void *)(MIL::Attributes::FlexibleShapeInfo::GetEnumeratedShapes(v78) + 24))
    {
      for (uint64_t i = *(void **)(MIL::Attributes::FlexibleShapeInfo::GetEnumeratedShapes(v78) + 16); i; uint64_t i = (void *)*i)
      {
        id v9 = i + 7;
        do
        {
          id v9 = (void *)*v9;
          if (!v9) {
            goto LABEL_25;
          }
          unint64_t v10 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::find<std::string>(v76, (uint64_t)(v9 + 2));
          if (!v10) {
            std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
          }
          unint64_t v12 = v10 + 5;
          size_t v11 = (const void *)v10[5];
          size_t v13 = v12[1] - (void)v11;
          BOOL v7 = (const void *)v9[5];
        }
        while (v13 == v9[6] - (void)v7 && !memcmp(v11, v7, v13));
      }
      uint64_t v14 = Espresso::espresso_os_log_subsystem(0, (const char *)v7);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
        Espresso::AOT::E5BackendFlexibleShapeTransformer::AddDefaultFunction(v93, (uint64_t **)v5, v94, v14);
      }
      int v15 = 2;
      goto LABEL_87;
    }
LABEL_25:
    MIL::Attributes::FlexibleShapeInfo::TryGetRangeShapes((uint64_t *)&__p, v78);
    unint64_t v16 = __p;
    uint64_t v17 = *(std::__shared_weak_count **)&v65[0];
    if (*(void *)&v65[0]
      && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&v65[0] + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
      if (!v16) {
        goto LABEL_86;
      }
LABEL_28:
      unint64_t v18 = v82;
      if ((unint64_t)v82 >= v83)
      {
        unint64_t v20 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v81, v5);
      }
      else
      {
        if (*(char *)(v5 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v82, *(const std::string::value_type **)v5, *(void *)(v5 + 8));
        }
        else
        {
          long long v19 = *(_OWORD *)v5;
          v82->__r_.__value_.__r.__words[2] = *(void *)(v5 + 16);
          *(_OWORD *)&v18->__r_.__value_.__l.__data_ = v19;
        }
        unint64_t v20 = v18 + 1;
      }
      uint64_t v82 = v20;
      MEMORY[0x192FEFD50](v75, a1);
      MIL::Passes::PropagateInputTensorShapes();
      char IsGood = MIL::Passes::TypeInferenceResult::IsGood((MIL::Passes::TypeInferenceResult *)&__p);
      if ((IsGood & 1) == 0)
      {
        unint64_t v44 = Espresso::espresso_os_log_subsystem(0, v21);
        if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
        {
          uint64_t v45 = (uint64_t *)v5;
          if (*(char *)(v5 + 23) < 0) {
            uint64_t v45 = *(uint64_t **)v5;
          }
          uint64_t Message = MIL::MILResult::GetMessage((MIL::MILResult *)&__p);
          if (*(char *)(Message + 23) >= 0) {
            std::string::size_type v47 = Message;
          }
          else {
            std::string::size_type v47 = *(void *)Message;
          }
          LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v45;
          WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
          *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v47;
          _os_log_error_impl(&dword_1920CB000, v44, OS_LOG_TYPE_ERROR, "Skipped adding default_function to entry point: %s as PropagateInputTensorShapes failed when propagating default shape with error message: %s", (uint8_t *)&buf, 0x16u);
          int v15 = 2;
        }
        else
        {
          int v15 = 2;
        }
LABEL_85:
        MEMORY[0x192FEF710](&__p);
        MIL::Transform::ProgramTransformer::~ProgramTransformer((MIL::Transform::ProgramTransformer *)v75);
        if ((IsGood & 1) == 0) {
          goto LABEL_87;
        }
        goto LABEL_86;
      }
      MIL::Transform::ProgramTransformer::GetProgram(&v74, (MIL::Transform::ProgramTransformer *)v75);
      uint64_t Function = MIL::IRProgram::GetFunction();
      uint64_t v71 = v90;
      uint64_t v72 = v91;
      if (v91) {
        atomic_fetch_add_explicit(&v91->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(std::string *__return_ptr))(*(void *)Function + 232))(&buf);
      std::string::size_type v69 = buf.__r_.__value_.__r.__words[0];
      if (buf.__r_.__value_.__r.__words[0]) {
        operator new();
      }
      unsigned int v70 = 0;
      buf.__r_.__value_.__r.__words[0] = 0;
      MIL::Builder::FunctionBuilder::Make();
      unint64_t v24 = v70;
      if (v70 && !atomic_fetch_add(&v70->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
        std::string::size_type v25 = buf.__r_.__value_.__r.__words[0];
        buf.__r_.__value_.__r.__words[0] = 0;
        if (!v25) {
          goto LABEL_46;
        }
      }
      else
      {
        std::string::size_type v25 = buf.__r_.__value_.__r.__words[0];
        buf.__r_.__value_.__r.__words[0] = 0;
        if (!v25)
        {
LABEL_46:
          unint64_t v26 = v72;
          if (v72 && !atomic_fetch_add(&v72->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
            std::__shared_weak_count::__release_weak(v26);
          }
          buf.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
          *(_OWORD *)&buf.__r_.__value_.__r.__words[1] = xmmword_192DAA350;
          strcpy(buf.__r_.__value_.__l.__data_, "FlexibleShapeInformation");
          MIL::Builder::FunctionBuilder::RemoveAttribute();
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(buf.__r_.__value_.__l.__data_);
          }
          int v27 = *(char *)(v5 + 23);
          if (v27 >= 0) {
            size_t v28 = *(unsigned __int8 *)(v5 + 23);
          }
          else {
            size_t v28 = *(void *)(v5 + 8);
          }
          unint64_t v29 = v28 + 1;
          if (v28 + 1 >= 0x7FFFFFFFFFFFFFF8) {
            std::string::__throw_length_error[abi:ne180100]();
          }
          if (v29 >= 0x17)
          {
            uint64_t v31 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v29 | 7) != 0x17) {
              uint64_t v31 = v29 | 7;
            }
            uint64_t v32 = v31 + 1;
            p_dst = (std::string *)operator new(v31 + 1);
            __dst.__r_.__value_.__l.__size_ = v28 + 1;
            __dst.__r_.__value_.__r.__words[2] = v32 | 0x8000000000000000;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
          }
          else
          {
            memset(&__dst, 0, sizeof(__dst));
            p_dst = &__dst;
            *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v28 + 1;
            if (!v28) {
              goto LABEL_65;
            }
          }
          if (v27 >= 0) {
            long long v33 = (uint64_t *)v5;
          }
          else {
            long long v33 = *(uint64_t **)v5;
          }
          memmove(p_dst, v33, v28);
LABEL_65:
          *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v28) = 95;
          uint64_t v34 = std::string::append(&__dst, "default_function");
          long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
          buf.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
          *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v35;
          v34->__r_.__value_.__l.__size_ = 0;
          v34->__r_.__value_.__r.__words[2] = 0;
          v34->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(__dst.__r_.__value_.__l.__data_);
            uint64_t v66 = v73;
            if (v73) {
LABEL_67:
            }
              operator new();
          }
          else
          {
            uint64_t v66 = v73;
            if (v73) {
              goto LABEL_67;
            }
          }
          char v67 = 0;
          uint64_t v73 = 0;
          MIL::Builder::ProgramBuilder::AddFunction();
          BOOL v36 = v67;
          if (v67 && !atomic_fetch_add(&v67->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
            uint64_t v37 = v85;
            if ((unint64_t)v85 < v86) {
              goto LABEL_72;
            }
          }
          else
          {
            uint64_t v37 = v85;
            if ((unint64_t)v85 < v86)
            {
LABEL_72:
              if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
                long long v38 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
                v37->__r_.__value_.__r.__words[2] = buf.__r_.__value_.__r.__words[2];
                *(_OWORD *)&v37->__r_.__value_.__l.__data_ = v38;
                int v85 = v37 + 1;
                if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
                  goto LABEL_74;
                }
LABEL_80:
                uint64_t v39 = v73;
                uint64_t v73 = 0;
                if (!v39)
                {
LABEL_82:
                  uint64_t v40 = v74;
                  uint64_t v74 = 0;
                  if (v40) {
                    (*(void (**)(uint64_t))(*(void *)v40 + 8))(v40);
                  }
                  int v15 = 0;
                  goto LABEL_85;
                }
LABEL_81:
                (*(void (**)(uint64_t))(*(void *)v39 + 8))(v39);
                goto LABEL_82;
              }
              std::string::__init_copy_ctor_external(v37, buf.__r_.__value_.__l.__data_, buf.__r_.__value_.__l.__size_);
              int v85 = v37 + 1;
              if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                goto LABEL_80;
              }
LABEL_74:
              operator delete(buf.__r_.__value_.__l.__data_);
              uint64_t v39 = v73;
              uint64_t v73 = 0;
              if (!v39) {
                goto LABEL_82;
              }
              goto LABEL_81;
            }
          }
          int v85 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v84, (uint64_t)&buf);
          if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_80;
          }
          goto LABEL_74;
        }
      }
      (*(void (**)(std::string::size_type))(*(void *)v25 + 8))(v25);
      goto LABEL_46;
    }
    if (v16) {
      goto LABEL_28;
    }
LABEL_86:
    int v15 = 0;
LABEL_87:
    long long v41 = v77;
    if (v77 && !atomic_fetch_add(&v77->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
      uint64_t v42 = v78;
      uint64_t v78 = 0;
      if (!v42) {
        goto LABEL_91;
      }
LABEL_90:
      MIL::Attributes::FlexibleShapeInfo::~FlexibleShapeInfo(v42);
      MEMORY[0x192FF16B0]();
      goto LABEL_91;
    }
    uint64_t v42 = v78;
    uint64_t v78 = 0;
    if (v42) {
      goto LABEL_90;
    }
LABEL_91:
    int v43 = v80;
    if (v80)
    {
      if (!atomic_fetch_add(&v80->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
        break;
      }
    }
    if (v15 != 3) {
      goto LABEL_94;
    }
LABEL_8:
    v5 += 24;
    if (v5 == v6) {
      goto LABEL_110;
    }
  }
  ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
  std::__shared_weak_count::__release_weak(v43);
  if (v15 == 3) {
    goto LABEL_8;
  }
LABEL_94:
  if (!v15) {
    goto LABEL_8;
  }
LABEL_110:
  __dst.__r_.__value_.__r.__words[0] = 0;
  if (v84 == v85)
  {
LABEL_117:
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 32))(&__p, a1);
    uint64_t v51 = __p;
    std::string __p = 0;
    std::string::size_type v52 = __dst.__r_.__value_.__r.__words[0];
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v51;
    if (!v52) {
      goto LABEL_120;
    }
    (*(void (**)(std::string::size_type))(*(void *)v52 + 8))(v52);
    uint64_t v50 = __p;
    std::string __p = 0;
    if (!v50) {
      goto LABEL_120;
    }
LABEL_119:
    (*(void (**)(void *))(*(void *)v50 + 8))(v50);
    goto LABEL_120;
  }
  MIL::Builder::ProgramBuilder::CreateProgram((uint64_t *)&__p, v89);
  if (((*(uint64_t (**)(_OWORD *))(*(void *)&v65[0] + 16))(v65) & 1) == 0)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    MIL::MILResult::GetMessage((MIL::MILResult *)v65);
    std::operator+<char>();
    std::runtime_error::runtime_error(exception, &buf);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  int v48 = __p;
  std::string __p = 0;
  std::string::size_type v49 = __dst.__r_.__value_.__r.__words[0];
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v48;
  if (v49) {
    (*(void (**)(std::string::size_type))(*(void *)v49 + 8))(v49);
  }
  MEMORY[0x192FEF390](v65);
  uint64_t v50 = __p;
  std::string __p = 0;
  if (v50) {
    goto LABEL_119;
  }
LABEL_120:
  _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2EEEEJNS_10unique_ptrIN3MIL9IRProgramENS_14default_deleteIS5_EEEENS_6vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENSD_ISF_EEEESH_EEC1B8ne180100IJLm0ELm1ELm2EEJS8_SH_SH_EJEJEJS8_RSH_SK_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSM_IJDpT2_EEEDpOT3_(a3, (uint64_t *)&__dst, (uint64_t *)&v84, (uint64_t *)&v81);
  std::string::size_type v53 = __dst.__r_.__value_.__r.__words[0];
  __dst.__r_.__value_.__r.__words[0] = 0;
  if (v53) {
    (*(void (**)(std::string::size_type))(*(void *)v53 + 8))(v53);
  }
  unint64_t v54 = v81;
  if (v81)
  {
    char v55 = v82;
    std::string v56 = (char *)v81;
    if (v82 != v81)
    {
      do
      {
        if (SHIBYTE(v55[-1].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v55[-1].__r_.__value_.__l.__data_);
        }
        --v55;
      }
      while (v55 != v54);
      std::string v56 = (char *)v81;
    }
    uint64_t v82 = v54;
    operator delete(v56);
  }
  std::string v57 = (char *)v84;
  if (v84)
  {
    uint64_t v58 = v85;
    uint64_t v59 = (char *)v84;
    if (v85 != v84)
    {
      do
      {
        if (SHIBYTE(v58[-1].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v58[-1].__r_.__value_.__l.__data_);
        }
        --v58;
      }
      while (v58 != (std::string *)v57);
      uint64_t v59 = (char *)v84;
    }
    int v85 = (std::string *)v57;
    operator delete(v59);
  }
  uint64_t v60 = v89;
  long long v89 = 0;
  if (v60) {
    (*(void (**)(MIL::Builder::ProgramBuilder *))(*(void *)v60 + 8))(v60);
  }
  uint64_t v61 = v91;
  if (v91)
  {
    if (!atomic_fetch_add(&v91->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
}

void sub_1922C4B3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,MIL::Attributes::FlexibleShapeInfo *a48,__int16 a49,char a50,char a51)
{
  MEMORY[0x192FEF710](&__p);
  MIL::Transform::ProgramTransformer::~ProgramTransformer((MIL::Transform::ProgramTransformer *)&a42);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a44);
  std::unique_ptr<MIL::Attributes::FlexibleShapeInfo>::~unique_ptr[abi:ne180100](&a48);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a49);
  std::vector<std::string>::~vector[abi:ne180100]((void **)(v51 - 248));
  std::vector<std::string>::~vector[abi:ne180100]((void **)(v51 - 224));
  uint64_t v53 = *(void *)(v51 - 184);
  *(void *)(v51 - 184) = 0;
  if (v53) {
    (*(void (**)(uint64_t))(*(void *)v53 + 8))(v53);
  }
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v51 - 176);
  _Unwind_Resume(a1);
}

void Espresso::AOT::E5BackendFlexibleShapeTransformer::AddDefaultFunction(uint8_t *buf, uint64_t **a2, uint64_t ***a3, os_log_t log)
{
  if (*((char *)a2 + 23) < 0) {
    a2 = (uint64_t **)*a2;
  }
  *(_DWORD *)std::string buf = 136315138;
  *a3 = a2;
  _os_log_error_impl(&dword_1920CB000, log, OS_LOG_TYPE_ERROR, "Default Shape is not found in the Enumerated Shapes for entry point: %s", buf, 0xCu);
}

void Espresso::AOT::Backends::CostModel::DecisionTreeModelRegistry::InitAllModels(Espresso::AOT::Backends::CostModel::DecisionTreeModelRegistry *this)
{
  v231[1] = *MEMORY[0x1E4F143B8];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EB4A3498, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EB4A3498))
  {
    operator new();
  }
  uint64_t v66 = (char **)_MergedGlobals;
  v97[23] = 8;
  strcpy(v97, "H13P-cpu");
  uint64_t v98 = (void **)&unk_1EE377F70;
  uint64_t v99 = Espresso::AOT::DTrees::avg_poolCpuCp;
  char v103 = 8;
  int v101 = (uint64_t *)&v98;
  strcpy((char *)v102, "H14P-cpu");
  size_t v104 = (void (**)(void **))&unk_1EE377F70;
  int v105 = Espresso::AOT::DTrees::avg_poolCpuDp;
  char v108 = 8;
  BOOL v106 = (void **)&v104;
  strcpy((char *)v107, "H15P-cpu");
  uint64_t v109 = (void (**)(void **))&unk_1EE377F70;
  long long v110 = Espresso::AOT::DTrees::avg_poolCpuEp;
  char v113 = 8;
  long long v111 = (void **)&v109;
  strcpy((char *)v112, "H13P-gpu");
  uint64_t v114 = (void (**)(void **))&unk_1EE377F70;
  size_t v115 = Espresso::AOT::DTrees::avg_poolGpuCp;
  char v118 = 8;
  uint64_t v116 = (void **)&v114;
  strcpy((char *)v117, "H14P-gpu");
  uint64_t v119 = (void (**)(void **))&unk_1EE377F70;
  int v120 = Espresso::AOT::DTrees::avg_poolGpuDp;
  uint64_t v121 = (void **)&v119;
  char v123 = 8;
  strcpy((char *)v122, "H15P-gpu");
  uint64_t v124 = (void (**)(void **))&unk_1EE377F70;
  unint64_t v125 = Espresso::AOT::DTrees::avg_poolGpuEp;
  std::string::size_type v126 = (void **)&v124;
  char v128 = 8;
  strcpy((char *)v127, "H13P-ane");
  std::string::size_type v129 = (void (**)(void **))&unk_1EE377F70;
  uint64_t v130 = Espresso::AOT::DTrees::avg_poolAneCp;
  int v131 = (void **)&v129;
  char v133 = 8;
  strcpy((char *)v132, "H14P-ane");
  unint64_t v134 = (void (**)(void **))&unk_1EE377F70;
  uint8x8_t v135 = Espresso::AOT::DTrees::avg_poolAneDp;
  uint64_t v136 = (void **)&v134;
  char v138 = 8;
  strcpy((char *)v137, "H15P-ane");
  uint64_t v139 = (void (**)(void **))&unk_1EE377F70;
  char v140 = Espresso::AOT::DTrees::avg_poolAneEp;
  size_t v141 = (void **)&v139;
  std::map<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::map[abi:ne180100](&v95, (const void **)v97, 9);
  if (v141 == (void **)&v139)
  {
    v139[4]((void **)&v139);
    if ((v138 & 0x80000000) == 0) {
      goto LABEL_6;
    }
  }
  else
  {
    if (v141) {
      (*((void (**)(void **))*v141 + 5))(v141);
    }
    if ((v138 & 0x80000000) == 0)
    {
LABEL_6:
      unint64_t v1 = v136;
      if (v136 != (void **)&v134) {
        goto LABEL_7;
      }
LABEL_268:
      v134[4]((void **)&v134);
      if ((v133 & 0x80000000) == 0) {
        goto LABEL_10;
      }
      goto LABEL_269;
    }
  }
  operator delete(v137[0]);
  unint64_t v1 = v136;
  if (v136 == (void **)&v134) {
    goto LABEL_268;
  }
LABEL_7:
  if (v1) {
    (*((void (**)(void **))*v1 + 5))(v1);
  }
  if ((v133 & 0x80000000) == 0)
  {
LABEL_10:
    char v2 = v131;
    if (v131 != (void **)&v129) {
      goto LABEL_11;
    }
LABEL_270:
    v129[4]((void **)&v129);
    if ((v128 & 0x80000000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_271;
  }
LABEL_269:
  operator delete(v132[0]);
  char v2 = v131;
  if (v131 == (void **)&v129) {
    goto LABEL_270;
  }
LABEL_11:
  if (v2) {
    (*((void (**)(void **))*v2 + 5))(v2);
  }
  if ((v128 & 0x80000000) == 0)
  {
LABEL_14:
    uint64_t v3 = v126;
    if (v126 != (void **)&v124) {
      goto LABEL_15;
    }
LABEL_272:
    v124[4]((void **)&v124);
    if ((v123 & 0x80000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_273;
  }
LABEL_271:
  operator delete(v127[0]);
  uint64_t v3 = v126;
  if (v126 == (void **)&v124) {
    goto LABEL_272;
  }
LABEL_15:
  if (v3) {
    (*((void (**)(void **))*v3 + 5))(v3);
  }
  if ((v123 & 0x80000000) == 0)
  {
LABEL_18:
    unint64_t v4 = v121;
    if (v121 != (void **)&v119) {
      goto LABEL_19;
    }
LABEL_274:
    v119[4]((void **)&v119);
    if ((v118 & 0x80000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_275;
  }
LABEL_273:
  operator delete(v122[0]);
  unint64_t v4 = v121;
  if (v121 == (void **)&v119) {
    goto LABEL_274;
  }
LABEL_19:
  if (v4) {
    (*((void (**)(void **))*v4 + 5))(v4);
  }
  if ((v118 & 0x80000000) == 0)
  {
LABEL_22:
    uint64_t v5 = v116;
    if (v116 != (void **)&v114) {
      goto LABEL_23;
    }
LABEL_276:
    v114[4]((void **)&v114);
    if ((v113 & 0x80000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_277;
  }
LABEL_275:
  operator delete(v117[0]);
  uint64_t v5 = v116;
  if (v116 == (void **)&v114) {
    goto LABEL_276;
  }
LABEL_23:
  if (v5) {
    (*((void (**)(void **))*v5 + 5))(v5);
  }
  if ((v113 & 0x80000000) == 0)
  {
LABEL_26:
    uint64_t v6 = v111;
    if (v111 != (void **)&v109) {
      goto LABEL_27;
    }
LABEL_278:
    v109[4]((void **)&v109);
    if ((v108 & 0x80000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_279;
  }
LABEL_277:
  operator delete(v112[0]);
  uint64_t v6 = v111;
  if (v111 == (void **)&v109) {
    goto LABEL_278;
  }
LABEL_27:
  if (v6) {
    (*((void (**)(void **))*v6 + 5))(v6);
  }
  if ((v108 & 0x80000000) == 0)
  {
LABEL_30:
    BOOL v7 = v106;
    if (v106 != (void **)&v104) {
      goto LABEL_31;
    }
LABEL_280:
    v104[4]((void **)&v104);
    if ((v103 & 0x80000000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_281;
  }
LABEL_279:
  operator delete(v107[0]);
  BOOL v7 = v106;
  if (v106 == (void **)&v104) {
    goto LABEL_280;
  }
LABEL_31:
  if (v7) {
    (*((void (**)(void **))*v7 + 5))(v7);
  }
  if ((v103 & 0x80000000) == 0)
  {
LABEL_34:
    unint64_t v8 = v101;
    if (v101 != (uint64_t *)&v98) {
      goto LABEL_35;
    }
    goto LABEL_282;
  }
LABEL_281:
  operator delete(v102[0]);
  unint64_t v8 = v101;
  if (v101 != (uint64_t *)&v98)
  {
LABEL_35:
    if (v8) {
      (*(void (**)(uint64_t *))(*v8 + 40))(v8);
    }
    if ((v97[23] & 0x80000000) == 0) {
      goto LABEL_38;
    }
    goto LABEL_283;
  }
LABEL_282:
  ((void (*)(void ***))v98[4])(&v98);
  if ((v97[23] & 0x80000000) != 0) {
LABEL_283:
  }
    operator delete(*(void **)v97);
LABEL_38:
  v97[23] = 8;
  strcpy(v97, "H13G-ane");
  uint64_t v98 = (void **)&unk_1EE377F70;
  uint64_t v99 = Espresso::AOT::DTrees::convAneIp;
  char v103 = 8;
  int v101 = (uint64_t *)&v98;
  strcpy((char *)v102, "H14G-ane");
  size_t v104 = (void (**)(void **))&unk_1EE377F70;
  int v105 = Espresso::AOT::DTrees::convAneFp;
  char v108 = 8;
  BOOL v106 = (void **)&v104;
  strcpy((char *)v107, "H13C-ane");
  uint64_t v109 = (void (**)(void **))&unk_1EE377F70;
  long long v110 = Espresso::AOT::DTrees::convAneJp;
  char v113 = 8;
  long long v111 = (void **)&v109;
  strcpy((char *)v112, "H14C-ane");
  uint64_t v114 = (void (**)(void **))&unk_1EE377F70;
  size_t v115 = Espresso::AOT::DTrees::convAneHp;
  char v118 = 8;
  uint64_t v116 = (void **)&v114;
  strcpy((char *)v117, "H13S-ane");
  uint64_t v119 = (void (**)(void **))&unk_1EE377F70;
  int v120 = Espresso::AOT::DTrees::convAneKp;
  uint64_t v121 = (void **)&v119;
  char v123 = 8;
  strcpy((char *)v122, "H14S-ane");
  uint64_t v124 = (void (**)(void **))&unk_1EE377F70;
  unint64_t v125 = Espresso::AOT::DTrees::convAneGp;
  std::string::size_type v126 = (void **)&v124;
  char v128 = 8;
  strcpy((char *)v127, "H13G-cpu");
  std::string::size_type v129 = (void (**)(void **))&unk_1EE377F70;
  uint64_t v130 = Espresso::AOT::DTrees::convCpuIp;
  int v131 = (void **)&v129;
  char v133 = 8;
  strcpy((char *)v132, "H14G-cpu");
  unint64_t v134 = (void (**)(void **))&unk_1EE377F70;
  uint8x8_t v135 = Espresso::AOT::DTrees::convCpuFp;
  uint64_t v136 = (void **)&v134;
  char v138 = 8;
  strcpy((char *)v137, "H13C-cpu");
  uint64_t v139 = (void (**)(void **))&unk_1EE377F70;
  char v140 = Espresso::AOT::DTrees::convCpuJp;
  size_t v141 = (void **)&v139;
  char v143 = 8;
  strcpy(v142, "H14C-cpu");
  int v144 = &unk_1EE377F70;
  size_t v145 = Espresso::AOT::DTrees::convCpuHp;
  uint64_t v146 = &v144;
  char v148 = 8;
  strcpy(v147, "H13S-cpu");
  size_t v149 = &unk_1EE377F70;
  uint64_t v150 = Espresso::AOT::DTrees::convCpuKp;
  uint64_t v151 = &v149;
  char v153 = 8;
  strcpy(v152, "H14S-cpu");
  size_t v154 = &unk_1EE377F70;
  long long v155 = Espresso::AOT::DTrees::convCpuGp;
  int v156 = &v154;
  char v158 = 8;
  strcpy(v157, "H13G-gpu");
  size_t v159 = &unk_1EE377F70;
  int v160 = Espresso::AOT::DTrees::convGpuIp;
  BOOL v161 = &v159;
  char v163 = 8;
  strcpy(v162, "H14G-gpu");
  uint64_t v164 = &unk_1EE377F70;
  uint64_t v165 = Espresso::AOT::DTrees::convGpuFp;
  uint64_t v166 = &v164;
  char v168 = 8;
  strcpy(v167, "H13C-gpu");
  BOOL v169 = &unk_1EE377F70;
  int v170 = Espresso::AOT::DTrees::convGpuJp;
  size_t v171 = &v169;
  char v173 = 8;
  strcpy(v172, "H14C-gpu");
  size_t v174 = &unk_1EE377F70;
  int v175 = Espresso::AOT::DTrees::convGpuHp;
  int v176 = &v174;
  char v178 = 8;
  strcpy(v177, "H13S-gpu");
  size_t v179 = &unk_1EE377F70;
  int v180 = Espresso::AOT::DTrees::convGpuKp;
  BOOL v181 = &v179;
  char v183 = 8;
  strcpy(v182, "H14S-gpu");
  size_t v184 = &unk_1EE377F70;
  int v185 = Espresso::AOT::DTrees::convGpuGp;
  long long v186 = &v184;
  char v188 = 8;
  strcpy(v187, "H13P-cpu");
  int v189 = &unk_1EE377F70;
  uint64_t v190 = Espresso::AOT::DTrees::convCpuCp;
  std::string::size_type v191 = &v189;
  char v193 = 8;
  strcpy(v192, "H14P-cpu");
  int v194 = &unk_1EE377F70;
  size_t v195 = Espresso::AOT::DTrees::convCpuDp;
  uint64_t v196 = &v194;
  char v198 = 8;
  strcpy(v197, "H15P-cpu");
  BOOL v199 = &unk_1EE377F70;
  uint64_t v200 = Espresso::AOT::DTrees::convCpuEp;
  int v201 = &v199;
  char v203 = 8;
  strcpy(v202, "H13P-gpu");
  size_t v204 = &unk_1EE377F70;
  int v205 = Espresso::AOT::DTrees::convGpuCp;
  uint64_t v206 = &v204;
  char v208 = 8;
  strcpy(v207, "H14P-gpu");
  uint64_t v209 = &unk_1EE377F70;
  BOOL v210 = Espresso::AOT::DTrees::convGpuDp;
  uint64_t v211 = &v209;
  char v213 = 8;
  strcpy(v212, "H15P-gpu");
  uint64_t v214 = &unk_1EE377F70;
  int v215 = Espresso::AOT::DTrees::convGpuEp;
  uint64_t v216 = &v214;
  char v218 = 8;
  strcpy(v217, "H13P-ane");
  uint64_t v219 = &unk_1EE377F70;
  BOOL v220 = Espresso::AOT::DTrees::convAneCp;
  uint64_t v221 = &v219;
  char v223 = 8;
  strcpy(v222, "H14P-ane");
  uint64_t v224 = &unk_1EE377F70;
  uint64_t v225 = Espresso::AOT::DTrees::convAneDp;
  int64_t v226 = &v224;
  char v228 = 8;
  strcpy(v227, "H15P-ane");
  int v229 = &unk_1EE377F70;
  unint64_t v230 = Espresso::AOT::DTrees::convAneEp;
  v231[0] = &v229;
  std::map<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::map[abi:ne180100](&v93, (const void **)v97, 27);
  for (unint64_t i = 0; i != -1512; i -= 56)
  {
    unint64_t v10 = (void *)v231[i / 8];
    if ((void **)((char *)&v229 + i) == v10)
    {
      (*(void (***)(char *))((char *)&v229 + i))[4]((char *)&v229 + i);
      if ((*(&v228 + i) & 0x80000000) == 0) {
        continue;
      }
LABEL_46:
      operator delete(*(void **)&v227[i]);
      continue;
    }
    if (v10) {
      (*(void (**)(void *))(*v10 + 40))(v10);
    }
    if (*(&v228 + i) < 0) {
      goto LABEL_46;
    }
  }
  v97[23] = 8;
  strcpy(v97, "H13G-cpu");
  uint64_t v98 = (void **)&unk_1EE377F70;
  uint64_t v99 = Espresso::AOT::DTrees::lstmCpuIp;
  char v103 = 8;
  int v101 = (uint64_t *)&v98;
  strcpy((char *)v102, "H14G-cpu");
  size_t v104 = (void (**)(void **))&unk_1EE377F70;
  int v105 = Espresso::AOT::DTrees::lstmCpuFp;
  char v108 = 8;
  BOOL v106 = (void **)&v104;
  strcpy((char *)v107, "H13C-cpu");
  uint64_t v109 = (void (**)(void **))&unk_1EE377F70;
  long long v110 = Espresso::AOT::DTrees::lstmCpuJp;
  char v113 = 8;
  long long v111 = (void **)&v109;
  strcpy((char *)v112, "H14C-cpu");
  uint64_t v114 = (void (**)(void **))&unk_1EE377F70;
  size_t v115 = Espresso::AOT::DTrees::lstmCpuHp;
  char v118 = 8;
  uint64_t v116 = (void **)&v114;
  strcpy((char *)v117, "H13S-cpu");
  uint64_t v119 = (void (**)(void **))&unk_1EE377F70;
  int v120 = Espresso::AOT::DTrees::lstmCpuKp;
  uint64_t v121 = (void **)&v119;
  char v123 = 8;
  strcpy((char *)v122, "H14S-cpu");
  uint64_t v124 = (void (**)(void **))&unk_1EE377F70;
  unint64_t v125 = Espresso::AOT::DTrees::lstmCpuGp;
  std::string::size_type v126 = (void **)&v124;
  char v128 = 8;
  strcpy((char *)v127, "H13G-gpu");
  std::string::size_type v129 = (void (**)(void **))&unk_1EE377F70;
  uint64_t v130 = Espresso::AOT::DTrees::lstmGpuIp;
  int v131 = (void **)&v129;
  char v133 = 8;
  strcpy((char *)v132, "H14G-gpu");
  unint64_t v134 = (void (**)(void **))&unk_1EE377F70;
  uint8x8_t v135 = Espresso::AOT::DTrees::lstmGpuFp;
  uint64_t v136 = (void **)&v134;
  char v138 = 8;
  strcpy((char *)v137, "H13C-gpu");
  uint64_t v139 = (void (**)(void **))&unk_1EE377F70;
  char v140 = Espresso::AOT::DTrees::lstmGpuJp;
  size_t v141 = (void **)&v139;
  char v143 = 8;
  strcpy(v142, "H14C-gpu");
  int v144 = &unk_1EE377F70;
  size_t v145 = Espresso::AOT::DTrees::lstmGpuHp;
  uint64_t v146 = &v144;
  char v148 = 8;
  strcpy(v147, "H13S-gpu");
  size_t v149 = &unk_1EE377F70;
  uint64_t v150 = Espresso::AOT::DTrees::lstmGpuKp;
  uint64_t v151 = &v149;
  char v153 = 8;
  strcpy(v152, "H14S-gpu");
  size_t v154 = &unk_1EE377F70;
  long long v155 = Espresso::AOT::DTrees::lstmGpuGp;
  int v156 = &v154;
  char v158 = 8;
  strcpy(v157, "H13P-cpu");
  size_t v159 = &unk_1EE377F70;
  int v160 = Espresso::AOT::DTrees::lstmCpu;
  BOOL v161 = &v159;
  char v163 = 8;
  strcpy(v162, "H14P-cpu");
  uint64_t v164 = &unk_1EE377F70;
  uint64_t v165 = Espresso::AOT::DTrees::lstmCpu;
  uint64_t v166 = &v164;
  char v168 = 8;
  strcpy(v167, "H15P-cpu");
  BOOL v169 = &unk_1EE377F70;
  int v170 = Espresso::AOT::DTrees::lstmCpu;
  size_t v171 = &v169;
  char v173 = 8;
  strcpy(v172, "H16P-cpu");
  size_t v174 = &unk_1EE377F70;
  int v175 = Espresso::AOT::DTrees::lstmCpu;
  int v176 = &v174;
  char v178 = 8;
  strcpy(v177, "H13P-gpu");
  size_t v179 = &unk_1EE377F70;
  int v180 = Espresso::AOT::DTrees::lstmGpu;
  BOOL v181 = &v179;
  char v183 = 8;
  strcpy(v182, "H14P-gpu");
  size_t v184 = &unk_1EE377F70;
  int v185 = Espresso::AOT::DTrees::lstmGpu;
  long long v186 = &v184;
  char v188 = 8;
  strcpy(v187, "H15P-gpu");
  int v189 = &unk_1EE377F70;
  uint64_t v190 = Espresso::AOT::DTrees::lstmGpu;
  std::string::size_type v191 = &v189;
  char v193 = 8;
  strcpy(v192, "H16P-gpu");
  int v194 = &unk_1EE377F70;
  size_t v195 = Espresso::AOT::DTrees::lstmGpu;
  uint64_t v196 = &v194;
  std::map<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::map[abi:ne180100](&v91, (const void **)v97, 20);
  for (uint64_t j = 0; j != -1120; j -= 56)
  {
    unint64_t v12 = *(void **)&v197[j - 8];
    if ((void **)((char *)&v194 + j) == v12)
    {
      (*(void (***)(char *))((char *)&v194 + j))[4]((char *)&v194 + j);
      if ((*(&v193 + j) & 0x80000000) == 0) {
        continue;
      }
LABEL_55:
      operator delete(*(void **)&v192[j]);
      continue;
    }
    if (v12) {
      (*(void (**)(void *))(*v12 + 40))(v12);
    }
    if (*(&v193 + j) < 0) {
      goto LABEL_55;
    }
  }
  v97[23] = 8;
  strcpy(v97, "H13G-ane");
  uint64_t v98 = (void **)&unk_1EE377F70;
  uint64_t v99 = Espresso::AOT::DTrees::reluAneIp;
  char v103 = 8;
  int v101 = (uint64_t *)&v98;
  strcpy((char *)v102, "H14G-ane");
  size_t v104 = (void (**)(void **))&unk_1EE377F70;
  int v105 = Espresso::AOT::DTrees::reluAneFp;
  char v108 = 8;
  BOOL v106 = (void **)&v104;
  strcpy((char *)v107, "H13C-ane");
  uint64_t v109 = (void (**)(void **))&unk_1EE377F70;
  long long v110 = Espresso::AOT::DTrees::reluAneJp;
  char v113 = 8;
  long long v111 = (void **)&v109;
  strcpy((char *)v112, "H14C-ane");
  uint64_t v114 = (void (**)(void **))&unk_1EE377F70;
  size_t v115 = Espresso::AOT::DTrees::reluAneHp;
  char v118 = 8;
  uint64_t v116 = (void **)&v114;
  strcpy((char *)v117, "H13S-ane");
  uint64_t v119 = (void (**)(void **))&unk_1EE377F70;
  int v120 = Espresso::AOT::DTrees::reluAneKp;
  uint64_t v121 = (void **)&v119;
  char v123 = 8;
  strcpy((char *)v122, "H14S-ane");
  uint64_t v124 = (void (**)(void **))&unk_1EE377F70;
  unint64_t v125 = Espresso::AOT::DTrees::reluAneGp;
  std::string::size_type v126 = (void **)&v124;
  char v128 = 8;
  strcpy((char *)v127, "H13G-cpu");
  std::string::size_type v129 = (void (**)(void **))&unk_1EE377F70;
  uint64_t v130 = Espresso::AOT::DTrees::reluCpuIp;
  int v131 = (void **)&v129;
  char v133 = 8;
  strcpy((char *)v132, "H14G-cpu");
  unint64_t v134 = (void (**)(void **))&unk_1EE377F70;
  uint8x8_t v135 = Espresso::AOT::DTrees::reluCpuFp;
  uint64_t v136 = (void **)&v134;
  char v138 = 8;
  strcpy((char *)v137, "H13C-cpu");
  uint64_t v139 = (void (**)(void **))&unk_1EE377F70;
  char v140 = Espresso::AOT::DTrees::reluCpuJp;
  size_t v141 = (void **)&v139;
  char v143 = 8;
  strcpy(v142, "H14C-cpu");
  int v144 = &unk_1EE377F70;
  size_t v145 = Espresso::AOT::DTrees::reluCpuHp;
  uint64_t v146 = &v144;
  char v148 = 8;
  strcpy(v147, "H13S-cpu");
  size_t v149 = &unk_1EE377F70;
  uint64_t v150 = Espresso::AOT::DTrees::reluCpuKp;
  uint64_t v151 = &v149;
  char v153 = 8;
  strcpy(v152, "H14S-cpu");
  size_t v154 = &unk_1EE377F70;
  long long v155 = Espresso::AOT::DTrees::reluCpuGp;
  int v156 = &v154;
  char v158 = 8;
  strcpy(v157, "H13G-gpu");
  size_t v159 = &unk_1EE377F70;
  int v160 = Espresso::AOT::DTrees::reluGpuIp;
  BOOL v161 = &v159;
  char v163 = 8;
  strcpy(v162, "H14G-gpu");
  uint64_t v164 = &unk_1EE377F70;
  uint64_t v165 = Espresso::AOT::DTrees::reluGpuFp;
  uint64_t v166 = &v164;
  char v168 = 8;
  strcpy(v167, "H13C-gpu");
  BOOL v169 = &unk_1EE377F70;
  int v170 = Espresso::AOT::DTrees::reluGpuJp;
  size_t v171 = &v169;
  char v173 = 8;
  strcpy(v172, "H14C-gpu");
  size_t v174 = &unk_1EE377F70;
  int v175 = Espresso::AOT::DTrees::reluGpuHp;
  int v176 = &v174;
  char v178 = 8;
  strcpy(v177, "H13S-gpu");
  size_t v179 = &unk_1EE377F70;
  int v180 = Espresso::AOT::DTrees::reluGpuKp;
  BOOL v181 = &v179;
  char v183 = 8;
  strcpy(v182, "H14S-gpu");
  size_t v184 = &unk_1EE377F70;
  int v185 = Espresso::AOT::DTrees::reluGpuGp;
  long long v186 = &v184;
  char v188 = 8;
  strcpy(v187, "H13P-cpu");
  int v189 = &unk_1EE377F70;
  uint64_t v190 = Espresso::AOT::DTrees::reluCpuCp;
  std::string::size_type v191 = &v189;
  char v193 = 8;
  strcpy(v192, "H14P-cpu");
  int v194 = &unk_1EE377F70;
  size_t v195 = Espresso::AOT::DTrees::reluCpuDp;
  uint64_t v196 = &v194;
  char v198 = 8;
  strcpy(v197, "H15P-cpu");
  BOOL v199 = &unk_1EE377F70;
  uint64_t v200 = Espresso::AOT::DTrees::reluCpuEp;
  int v201 = &v199;
  char v203 = 8;
  strcpy(v202, "H13P-gpu");
  size_t v204 = &unk_1EE377F70;
  int v205 = Espresso::AOT::DTrees::reluGpuCp;
  uint64_t v206 = &v204;
  char v208 = 8;
  strcpy(v207, "H14P-gpu");
  uint64_t v209 = &unk_1EE377F70;
  BOOL v210 = Espresso::AOT::DTrees::reluGpuDp;
  uint64_t v211 = &v209;
  char v213 = 8;
  strcpy(v212, "H15P-gpu");
  uint64_t v214 = &unk_1EE377F70;
  int v215 = Espresso::AOT::DTrees::reluGpuEp;
  uint64_t v216 = &v214;
  char v218 = 8;
  strcpy(v217, "H13P-ane");
  uint64_t v219 = &unk_1EE377F70;
  BOOL v220 = Espresso::AOT::DTrees::reluAneCp;
  uint64_t v221 = &v219;
  char v223 = 8;
  strcpy(v222, "H14P-ane");
  uint64_t v224 = &unk_1EE377F70;
  uint64_t v225 = Espresso::AOT::DTrees::reluAneDp;
  int64_t v226 = &v224;
  char v228 = 8;
  strcpy(v227, "H15P-ane");
  int v229 = &unk_1EE377F70;
  unint64_t v230 = Espresso::AOT::DTrees::reluAneEp;
  v231[0] = &v229;
  std::map<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::map[abi:ne180100](&v89, (const void **)v97, 27);
  for (unint64_t k = 0; k != -1512; k -= 56)
  {
    uint64_t v14 = (void *)v231[k / 8];
    if ((void **)((char *)&v229 + k) == v14)
    {
      (*(void (***)(char *))((char *)&v229 + k))[4]((char *)&v229 + k);
      if ((*(&v228 + k) & 0x80000000) == 0) {
        continue;
      }
LABEL_64:
      operator delete(*(void **)&v227[k]);
      continue;
    }
    if (v14) {
      (*(void (**)(void *))(*v14 + 40))(v14);
    }
    if (*(&v228 + k) < 0) {
      goto LABEL_64;
    }
  }
  v97[23] = 8;
  strcpy(v97, "H13G-ane");
  uint64_t v98 = (void **)&unk_1EE377F70;
  uint64_t v99 = Espresso::AOT::DTrees::concatAneIp;
  char v103 = 8;
  int v101 = (uint64_t *)&v98;
  strcpy((char *)v102, "H14G-ane");
  size_t v104 = (void (**)(void **))&unk_1EE377F70;
  int v105 = Espresso::AOT::DTrees::concatAneFp;
  char v108 = 8;
  BOOL v106 = (void **)&v104;
  strcpy((char *)v107, "H13C-ane");
  uint64_t v109 = (void (**)(void **))&unk_1EE377F70;
  long long v110 = Espresso::AOT::DTrees::concatAneJp;
  char v113 = 8;
  long long v111 = (void **)&v109;
  strcpy((char *)v112, "H14C-ane");
  uint64_t v114 = (void (**)(void **))&unk_1EE377F70;
  size_t v115 = Espresso::AOT::DTrees::concatAneHp;
  char v118 = 8;
  uint64_t v116 = (void **)&v114;
  strcpy((char *)v117, "H13S-ane");
  uint64_t v119 = (void (**)(void **))&unk_1EE377F70;
  int v120 = Espresso::AOT::DTrees::concatAneKp;
  uint64_t v121 = (void **)&v119;
  char v123 = 8;
  strcpy((char *)v122, "H14S-ane");
  uint64_t v124 = (void (**)(void **))&unk_1EE377F70;
  unint64_t v125 = Espresso::AOT::DTrees::concatAneGp;
  std::string::size_type v126 = (void **)&v124;
  char v128 = 8;
  strcpy((char *)v127, "H13G-cpu");
  std::string::size_type v129 = (void (**)(void **))&unk_1EE377F70;
  uint64_t v130 = Espresso::AOT::DTrees::concatCpuIp;
  int v131 = (void **)&v129;
  char v133 = 8;
  strcpy((char *)v132, "H14G-cpu");
  unint64_t v134 = (void (**)(void **))&unk_1EE377F70;
  uint8x8_t v135 = Espresso::AOT::DTrees::concatCpuFp;
  uint64_t v136 = (void **)&v134;
  char v138 = 8;
  strcpy((char *)v137, "H13C-cpu");
  uint64_t v139 = (void (**)(void **))&unk_1EE377F70;
  char v140 = Espresso::AOT::DTrees::concatCpuJp;
  size_t v141 = (void **)&v139;
  char v143 = 8;
  strcpy(v142, "H14C-cpu");
  int v144 = &unk_1EE377F70;
  size_t v145 = Espresso::AOT::DTrees::concatCpuHp;
  uint64_t v146 = &v144;
  char v148 = 8;
  strcpy(v147, "H13S-cpu");
  size_t v149 = &unk_1EE377F70;
  uint64_t v150 = Espresso::AOT::DTrees::concatCpuKp;
  uint64_t v151 = &v149;
  char v153 = 8;
  strcpy(v152, "H14S-cpu");
  size_t v154 = &unk_1EE377F70;
  long long v155 = Espresso::AOT::DTrees::concatCpuGp;
  int v156 = &v154;
  char v158 = 8;
  strcpy(v157, "H13G-gpu");
  size_t v159 = &unk_1EE377F70;
  int v160 = Espresso::AOT::DTrees::concatGpuIp;
  BOOL v161 = &v159;
  char v163 = 8;
  strcpy(v162, "H14G-gpu");
  uint64_t v164 = &unk_1EE377F70;
  uint64_t v165 = Espresso::AOT::DTrees::concatGpuFp;
  uint64_t v166 = &v164;
  char v168 = 8;
  strcpy(v167, "H13C-gpu");
  BOOL v169 = &unk_1EE377F70;
  int v170 = Espresso::AOT::DTrees::concatGpuJp;
  size_t v171 = &v169;
  char v173 = 8;
  strcpy(v172, "H14C-gpu");
  size_t v174 = &unk_1EE377F70;
  int v175 = Espresso::AOT::DTrees::concatGpuHp;
  int v176 = &v174;
  char v178 = 8;
  strcpy(v177, "H13S-gpu");
  size_t v179 = &unk_1EE377F70;
  int v180 = Espresso::AOT::DTrees::concatGpuKp;
  BOOL v181 = &v179;
  char v183 = 8;
  strcpy(v182, "H14S-gpu");
  size_t v184 = &unk_1EE377F70;
  int v185 = Espresso::AOT::DTrees::concatGpuGp;
  long long v186 = &v184;
  char v188 = 8;
  strcpy(v187, "H13P-cpu");
  int v189 = &unk_1EE377F70;
  uint64_t v190 = Espresso::AOT::DTrees::concatCpuCp;
  std::string::size_type v191 = &v189;
  char v193 = 8;
  strcpy(v192, "H14P-cpu");
  int v194 = &unk_1EE377F70;
  size_t v195 = Espresso::AOT::DTrees::concatCpuDp;
  uint64_t v196 = &v194;
  char v198 = 8;
  strcpy(v197, "H15P-cpu");
  BOOL v199 = &unk_1EE377F70;
  uint64_t v200 = Espresso::AOT::DTrees::concatCpuEp;
  int v201 = &v199;
  char v203 = 8;
  strcpy(v202, "H13P-gpu");
  size_t v204 = &unk_1EE377F70;
  int v205 = Espresso::AOT::DTrees::concatGpuCp;
  uint64_t v206 = &v204;
  char v208 = 8;
  strcpy(v207, "H14P-gpu");
  uint64_t v209 = &unk_1EE377F70;
  BOOL v210 = Espresso::AOT::DTrees::concatGpuDp;
  uint64_t v211 = &v209;
  char v213 = 8;
  strcpy(v212, "H15P-gpu");
  uint64_t v214 = &unk_1EE377F70;
  int v215 = Espresso::AOT::DTrees::concatGpuEp;
  uint64_t v216 = &v214;
  char v218 = 8;
  strcpy(v217, "H13P-ane");
  uint64_t v219 = &unk_1EE377F70;
  BOOL v220 = Espresso::AOT::DTrees::concatAneCp;
  uint64_t v221 = &v219;
  char v223 = 8;
  strcpy(v222, "H14P-ane");
  uint64_t v224 = &unk_1EE377F70;
  uint64_t v225 = Espresso::AOT::DTrees::concatAneDp;
  int64_t v226 = &v224;
  char v228 = 8;
  strcpy(v227, "H15P-ane");
  int v229 = &unk_1EE377F70;
  unint64_t v230 = Espresso::AOT::DTrees::concatAneEp;
  v231[0] = &v229;
  std::map<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::map[abi:ne180100](&v87, (const void **)v97, 27);
  for (unint64_t m = 0; m != -1512; m -= 56)
  {
    unint64_t v16 = (void *)v231[m / 8];
    if ((void **)((char *)&v229 + m) == v16)
    {
      (*(void (***)(char *))((char *)&v229 + m))[4]((char *)&v229 + m);
      if ((*(&v228 + m) & 0x80000000) == 0) {
        continue;
      }
LABEL_73:
      operator delete(*(void **)&v227[m]);
      continue;
    }
    if (v16) {
      (*(void (**)(void *))(*v16 + 40))(v16);
    }
    if (*(&v228 + m) < 0) {
      goto LABEL_73;
    }
  }
  v97[23] = 8;
  strcpy(v97, "H13G-ane");
  uint64_t v98 = (void **)&unk_1EE377F70;
  uint64_t v99 = Espresso::AOT::DTrees::linearAneIp;
  char v103 = 8;
  int v101 = (uint64_t *)&v98;
  strcpy((char *)v102, "H14G-ane");
  size_t v104 = (void (**)(void **))&unk_1EE377F70;
  int v105 = Espresso::AOT::DTrees::linearAneFp;
  char v108 = 8;
  BOOL v106 = (void **)&v104;
  strcpy((char *)v107, "H13C-ane");
  uint64_t v109 = (void (**)(void **))&unk_1EE377F70;
  long long v110 = Espresso::AOT::DTrees::linearAneJp;
  char v113 = 8;
  long long v111 = (void **)&v109;
  strcpy((char *)v112, "H14C-ane");
  uint64_t v114 = (void (**)(void **))&unk_1EE377F70;
  size_t v115 = Espresso::AOT::DTrees::linearAneHp;
  char v118 = 8;
  uint64_t v116 = (void **)&v114;
  strcpy((char *)v117, "H13S-ane");
  uint64_t v119 = (void (**)(void **))&unk_1EE377F70;
  int v120 = Espresso::AOT::DTrees::linearAneKp;
  uint64_t v121 = (void **)&v119;
  char v123 = 8;
  strcpy((char *)v122, "H14S-ane");
  uint64_t v124 = (void (**)(void **))&unk_1EE377F70;
  unint64_t v125 = Espresso::AOT::DTrees::linearAneGp;
  std::string::size_type v126 = (void **)&v124;
  char v128 = 8;
  strcpy((char *)v127, "H13G-cpu");
  std::string::size_type v129 = (void (**)(void **))&unk_1EE377F70;
  uint64_t v130 = Espresso::AOT::DTrees::linearCpuIp;
  int v131 = (void **)&v129;
  char v133 = 8;
  strcpy((char *)v132, "H14G-cpu");
  unint64_t v134 = (void (**)(void **))&unk_1EE377F70;
  uint8x8_t v135 = Espresso::AOT::DTrees::linearCpuFp;
  uint64_t v136 = (void **)&v134;
  char v138 = 8;
  strcpy((char *)v137, "H13C-cpu");
  uint64_t v139 = (void (**)(void **))&unk_1EE377F70;
  char v140 = Espresso::AOT::DTrees::linearCpuJp;
  size_t v141 = (void **)&v139;
  char v143 = 8;
  strcpy(v142, "H14C-cpu");
  int v144 = &unk_1EE377F70;
  size_t v145 = Espresso::AOT::DTrees::linearCpuHp;
  uint64_t v146 = &v144;
  char v148 = 8;
  strcpy(v147, "H13S-cpu");
  size_t v149 = &unk_1EE377F70;
  uint64_t v150 = Espresso::AOT::DTrees::linearCpuKp;
  uint64_t v151 = &v149;
  char v153 = 8;
  strcpy(v152, "H14S-cpu");
  size_t v154 = &unk_1EE377F70;
  long long v155 = Espresso::AOT::DTrees::linearCpuGp;
  int v156 = &v154;
  char v158 = 8;
  strcpy(v157, "H13G-gpu");
  size_t v159 = &unk_1EE377F70;
  int v160 = Espresso::AOT::DTrees::linearGpuIp;
  BOOL v161 = &v159;
  char v163 = 8;
  strcpy(v162, "H14G-gpu");
  uint64_t v164 = &unk_1EE377F70;
  uint64_t v165 = Espresso::AOT::DTrees::linearGpuFp;
  uint64_t v166 = &v164;
  char v168 = 8;
  strcpy(v167, "H13C-gpu");
  BOOL v169 = &unk_1EE377F70;
  int v170 = Espresso::AOT::DTrees::linearGpuJp;
  size_t v171 = &v169;
  char v173 = 8;
  strcpy(v172, "H14C-gpu");
  size_t v174 = &unk_1EE377F70;
  int v175 = Espresso::AOT::DTrees::linearGpuHp;
  int v176 = &v174;
  char v178 = 8;
  strcpy(v177, "H13S-gpu");
  size_t v179 = &unk_1EE377F70;
  int v180 = Espresso::AOT::DTrees::linearGpuKp;
  BOOL v181 = &v179;
  char v183 = 8;
  strcpy(v182, "H14S-gpu");
  size_t v184 = &unk_1EE377F70;
  int v185 = Espresso::AOT::DTrees::linearGpuGp;
  long long v186 = &v184;
  char v188 = 8;
  strcpy(v187, "H13P-cpu");
  int v189 = &unk_1EE377F70;
  uint64_t v190 = Espresso::AOT::DTrees::linearCpuCp;
  std::string::size_type v191 = &v189;
  char v193 = 8;
  strcpy(v192, "H14P-cpu");
  int v194 = &unk_1EE377F70;
  size_t v195 = Espresso::AOT::DTrees::linearCpuDp;
  uint64_t v196 = &v194;
  char v198 = 8;
  strcpy(v197, "H15P-cpu");
  BOOL v199 = &unk_1EE377F70;
  uint64_t v200 = Espresso::AOT::DTrees::linearCpuEp;
  int v201 = &v199;
  char v203 = 8;
  strcpy(v202, "H13P-gpu");
  size_t v204 = &unk_1EE377F70;
  int v205 = Espresso::AOT::DTrees::linearGpuCp;
  uint64_t v206 = &v204;
  char v208 = 8;
  strcpy(v207, "H14P-gpu");
  uint64_t v209 = &unk_1EE377F70;
  BOOL v210 = Espresso::AOT::DTrees::linearGpuDp;
  uint64_t v211 = &v209;
  char v213 = 8;
  strcpy(v212, "H15P-gpu");
  uint64_t v214 = &unk_1EE377F70;
  int v215 = Espresso::AOT::DTrees::linearGpuEp;
  uint64_t v216 = &v214;
  char v218 = 8;
  strcpy(v217, "H13P-ane");
  uint64_t v219 = &unk_1EE377F70;
  BOOL v220 = Espresso::AOT::DTrees::linearAneCp;
  uint64_t v221 = &v219;
  char v223 = 8;
  strcpy(v222, "H14P-ane");
  uint64_t v224 = &unk_1EE377F70;
  uint64_t v225 = Espresso::AOT::DTrees::linearAneDp;
  int64_t v226 = &v224;
  char v228 = 8;
  strcpy(v227, "H15P-ane");
  int v229 = &unk_1EE377F70;
  unint64_t v230 = Espresso::AOT::DTrees::linearAneEp;
  v231[0] = &v229;
  std::map<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::map[abi:ne180100](&v85, (const void **)v97, 27);
  for (unint64_t n = 0; n != -1512; n -= 56)
  {
    unint64_t v18 = (void *)v231[n / 8];
    if ((void **)((char *)&v229 + n) == v18)
    {
      (*(void (***)(char *))((char *)&v229 + n))[4]((char *)&v229 + n);
      if ((*(&v228 + n) & 0x80000000) == 0) {
        continue;
      }
LABEL_82:
      operator delete(*(void **)&v227[n]);
      continue;
    }
    if (v18) {
      (*(void (**)(void *))(*v18 + 40))(v18);
    }
    if (*(&v228 + n) < 0) {
      goto LABEL_82;
    }
  }
  v97[23] = 8;
  strcpy(v97, "H13G-ane");
  uint64_t v98 = (void **)&unk_1EE377F70;
  uint64_t v99 = Espresso::AOT::DTrees::addAneIp;
  char v103 = 8;
  int v101 = (uint64_t *)&v98;
  strcpy((char *)v102, "H14G-ane");
  size_t v104 = (void (**)(void **))&unk_1EE377F70;
  int v105 = Espresso::AOT::DTrees::addAneFp;
  char v108 = 8;
  BOOL v106 = (void **)&v104;
  strcpy((char *)v107, "H13C-ane");
  uint64_t v109 = (void (**)(void **))&unk_1EE377F70;
  long long v110 = Espresso::AOT::DTrees::addAneJp;
  char v113 = 8;
  long long v111 = (void **)&v109;
  strcpy((char *)v112, "H14C-ane");
  uint64_t v114 = (void (**)(void **))&unk_1EE377F70;
  size_t v115 = Espresso::AOT::DTrees::addAneHp;
  char v118 = 8;
  uint64_t v116 = (void **)&v114;
  strcpy((char *)v117, "H13S-ane");
  uint64_t v119 = (void (**)(void **))&unk_1EE377F70;
  int v120 = Espresso::AOT::DTrees::addAneKp;
  uint64_t v121 = (void **)&v119;
  char v123 = 8;
  strcpy((char *)v122, "H14S-ane");
  uint64_t v124 = (void (**)(void **))&unk_1EE377F70;
  unint64_t v125 = Espresso::AOT::DTrees::addAneGp;
  std::string::size_type v126 = (void **)&v124;
  char v128 = 8;
  strcpy((char *)v127, "H13G-cpu");
  std::string::size_type v129 = (void (**)(void **))&unk_1EE377F70;
  uint64_t v130 = Espresso::AOT::DTrees::addCpuIp;
  int v131 = (void **)&v129;
  char v133 = 8;
  strcpy((char *)v132, "H14G-cpu");
  unint64_t v134 = (void (**)(void **))&unk_1EE377F70;
  uint8x8_t v135 = Espresso::AOT::DTrees::addCpuFp;
  uint64_t v136 = (void **)&v134;
  char v138 = 8;
  strcpy((char *)v137, "H13C-cpu");
  uint64_t v139 = (void (**)(void **))&unk_1EE377F70;
  char v140 = Espresso::AOT::DTrees::addCpuJp;
  size_t v141 = (void **)&v139;
  char v143 = 8;
  strcpy(v142, "H14C-cpu");
  int v144 = &unk_1EE377F70;
  size_t v145 = Espresso::AOT::DTrees::addCpuHp;
  uint64_t v146 = &v144;
  char v148 = 8;
  strcpy(v147, "H13S-cpu");
  size_t v149 = &unk_1EE377F70;
  uint64_t v150 = Espresso::AOT::DTrees::addCpuKp;
  uint64_t v151 = &v149;
  char v153 = 8;
  strcpy(v152, "H14S-cpu");
  size_t v154 = &unk_1EE377F70;
  long long v155 = Espresso::AOT::DTrees::addCpuGp;
  int v156 = &v154;
  char v158 = 8;
  strcpy(v157, "H13G-gpu");
  size_t v159 = &unk_1EE377F70;
  int v160 = Espresso::AOT::DTrees::addGpuIp;
  BOOL v161 = &v159;
  char v163 = 8;
  strcpy(v162, "H14G-gpu");
  uint64_t v164 = &unk_1EE377F70;
  uint64_t v165 = Espresso::AOT::DTrees::addGpuFp;
  uint64_t v166 = &v164;
  char v168 = 8;
  strcpy(v167, "H13C-gpu");
  BOOL v169 = &unk_1EE377F70;
  int v170 = Espresso::AOT::DTrees::addGpuJp;
  size_t v171 = &v169;
  char v173 = 8;
  strcpy(v172, "H14C-gpu");
  size_t v174 = &unk_1EE377F70;
  int v175 = Espresso::AOT::DTrees::addGpuHp;
  int v176 = &v174;
  char v178 = 8;
  strcpy(v177, "H13S-gpu");
  size_t v179 = &unk_1EE377F70;
  int v180 = Espresso::AOT::DTrees::addGpuKp;
  BOOL v181 = &v179;
  char v183 = 8;
  strcpy(v182, "H14S-gpu");
  size_t v184 = &unk_1EE377F70;
  int v185 = Espresso::AOT::DTrees::addGpuGp;
  long long v186 = &v184;
  char v188 = 8;
  strcpy(v187, "H13P-cpu");
  int v189 = &unk_1EE377F70;
  uint64_t v190 = Espresso::AOT::DTrees::addCpuCp;
  std::string::size_type v191 = &v189;
  char v193 = 8;
  strcpy(v192, "H14P-cpu");
  int v194 = &unk_1EE377F70;
  size_t v195 = Espresso::AOT::DTrees::addCpuDp;
  uint64_t v196 = &v194;
  char v198 = 8;
  strcpy(v197, "H15P-cpu");
  BOOL v199 = &unk_1EE377F70;
  uint64_t v200 = Espresso::AOT::DTrees::addCpuEp;
  int v201 = &v199;
  char v203 = 8;
  strcpy(v202, "H13P-gpu");
  size_t v204 = &unk_1EE377F70;
  int v205 = Espresso::AOT::DTrees::addGpuCp;
  uint64_t v206 = &v204;
  char v208 = 8;
  strcpy(v207, "H14P-gpu");
  uint64_t v209 = &unk_1EE377F70;
  BOOL v210 = Espresso::AOT::DTrees::addGpuDp;
  uint64_t v211 = &v209;
  char v213 = 8;
  strcpy(v212, "H15P-gpu");
  uint64_t v214 = &unk_1EE377F70;
  int v215 = Espresso::AOT::DTrees::addGpuEp;
  uint64_t v216 = &v214;
  char v218 = 8;
  strcpy(v217, "H13P-ane");
  uint64_t v219 = &unk_1EE377F70;
  BOOL v220 = Espresso::AOT::DTrees::addAneCp;
  uint64_t v221 = &v219;
  char v223 = 8;
  strcpy(v222, "H14P-ane");
  uint64_t v224 = &unk_1EE377F70;
  uint64_t v225 = Espresso::AOT::DTrees::addAneDp;
  int64_t v226 = &v224;
  char v228 = 8;
  strcpy(v227, "H15P-ane");
  int v229 = &unk_1EE377F70;
  unint64_t v230 = Espresso::AOT::DTrees::addAneEp;
  v231[0] = &v229;
  std::map<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::map[abi:ne180100](&v83, (const void **)v97, 27);
  for (iunint64_t i = 0; ii != -1512; ii -= 56)
  {
    unint64_t v20 = (void *)v231[ii / 8];
    if ((void **)((char *)&v229 + ii) == v20)
    {
      (*(void (***)(char *))((char *)&v229 + ii))[4]((char *)&v229 + ii);
      if ((*(&v228 + ii) & 0x80000000) == 0) {
        continue;
      }
LABEL_91:
      operator delete(*(void **)&v227[ii]);
      continue;
    }
    if (v20) {
      (*(void (**)(void *))(*v20 + 40))(v20);
    }
    if (*(&v228 + ii) < 0) {
      goto LABEL_91;
    }
  }
  v97[23] = 8;
  strcpy(v97, "H13G-ane");
  uint64_t v98 = (void **)&unk_1EE377F70;
  uint64_t v99 = Espresso::AOT::DTrees::conv_transposeAneIp;
  char v103 = 8;
  int v101 = (uint64_t *)&v98;
  strcpy((char *)v102, "H14G-ane");
  size_t v104 = (void (**)(void **))&unk_1EE377F70;
  int v105 = Espresso::AOT::DTrees::conv_transposeAneFp;
  char v108 = 8;
  BOOL v106 = (void **)&v104;
  strcpy((char *)v107, "H13C-ane");
  uint64_t v109 = (void (**)(void **))&unk_1EE377F70;
  long long v110 = Espresso::AOT::DTrees::conv_transposeAneJp;
  char v113 = 8;
  long long v111 = (void **)&v109;
  strcpy((char *)v112, "H14C-ane");
  uint64_t v114 = (void (**)(void **))&unk_1EE377F70;
  size_t v115 = Espresso::AOT::DTrees::conv_transposeAneHp;
  char v118 = 8;
  uint64_t v116 = (void **)&v114;
  strcpy((char *)v117, "H13S-ane");
  uint64_t v119 = (void (**)(void **))&unk_1EE377F70;
  int v120 = Espresso::AOT::DTrees::conv_transposeAneKp;
  uint64_t v121 = (void **)&v119;
  char v123 = 8;
  strcpy((char *)v122, "H14S-ane");
  uint64_t v124 = (void (**)(void **))&unk_1EE377F70;
  unint64_t v125 = Espresso::AOT::DTrees::conv_transposeAneGp;
  std::string::size_type v126 = (void **)&v124;
  char v128 = 8;
  strcpy((char *)v127, "H13G-cpu");
  std::string::size_type v129 = (void (**)(void **))&unk_1EE377F70;
  uint64_t v130 = Espresso::AOT::DTrees::conv_transposeCpuIp;
  int v131 = (void **)&v129;
  char v133 = 8;
  strcpy((char *)v132, "H14G-cpu");
  unint64_t v134 = (void (**)(void **))&unk_1EE377F70;
  uint8x8_t v135 = Espresso::AOT::DTrees::conv_transposeCpuFp;
  uint64_t v136 = (void **)&v134;
  char v138 = 8;
  strcpy((char *)v137, "H13C-cpu");
  uint64_t v139 = (void (**)(void **))&unk_1EE377F70;
  char v140 = Espresso::AOT::DTrees::conv_transposeCpuJp;
  size_t v141 = (void **)&v139;
  char v143 = 8;
  strcpy(v142, "H14C-cpu");
  int v144 = &unk_1EE377F70;
  size_t v145 = Espresso::AOT::DTrees::conv_transposeCpuHp;
  uint64_t v146 = &v144;
  char v148 = 8;
  strcpy(v147, "H13S-cpu");
  size_t v149 = &unk_1EE377F70;
  uint64_t v150 = Espresso::AOT::DTrees::conv_transposeCpuKp;
  uint64_t v151 = &v149;
  char v153 = 8;
  strcpy(v152, "H14S-cpu");
  size_t v154 = &unk_1EE377F70;
  long long v155 = Espresso::AOT::DTrees::conv_transposeCpuGp;
  int v156 = &v154;
  char v158 = 8;
  strcpy(v157, "H13G-gpu");
  size_t v159 = &unk_1EE377F70;
  int v160 = Espresso::AOT::DTrees::conv_transposeGpuIp;
  BOOL v161 = &v159;
  char v163 = 8;
  strcpy(v162, "H14G-gpu");
  uint64_t v164 = &unk_1EE377F70;
  uint64_t v165 = Espresso::AOT::DTrees::conv_transposeGpuFp;
  uint64_t v166 = &v164;
  char v168 = 8;
  strcpy(v167, "H13C-gpu");
  BOOL v169 = &unk_1EE377F70;
  int v170 = Espresso::AOT::DTrees::conv_transposeGpuJp;
  size_t v171 = &v169;
  char v173 = 8;
  strcpy(v172, "H14C-gpu");
  size_t v174 = &unk_1EE377F70;
  int v175 = Espresso::AOT::DTrees::conv_transposeGpuHp;
  int v176 = &v174;
  char v178 = 8;
  strcpy(v177, "H13S-gpu");
  size_t v179 = &unk_1EE377F70;
  int v180 = Espresso::AOT::DTrees::conv_transposeGpuKp;
  BOOL v181 = &v179;
  char v183 = 8;
  strcpy(v182, "H14S-gpu");
  size_t v184 = &unk_1EE377F70;
  int v185 = Espresso::AOT::DTrees::conv_transposeGpuGp;
  long long v186 = &v184;
  char v188 = 8;
  strcpy(v187, "H13P-cpu");
  int v189 = &unk_1EE377F70;
  uint64_t v190 = Espresso::AOT::DTrees::conv_transposeCpuCp;
  std::string::size_type v191 = &v189;
  char v193 = 8;
  strcpy(v192, "H14P-cpu");
  int v194 = &unk_1EE377F70;
  size_t v195 = Espresso::AOT::DTrees::conv_transposeCpuDp;
  uint64_t v196 = &v194;
  char v198 = 8;
  strcpy(v197, "H15P-cpu");
  BOOL v199 = &unk_1EE377F70;
  uint64_t v200 = Espresso::AOT::DTrees::conv_transposeCpuEp;
  int v201 = &v199;
  char v203 = 8;
  strcpy(v202, "H13P-gpu");
  size_t v204 = &unk_1EE377F70;
  int v205 = Espresso::AOT::DTrees::conv_transposeGpuCp;
  uint64_t v206 = &v204;
  char v208 = 8;
  strcpy(v207, "H14P-gpu");
  uint64_t v209 = &unk_1EE377F70;
  BOOL v210 = Espresso::AOT::DTrees::conv_transposeGpuDp;
  uint64_t v211 = &v209;
  char v213 = 8;
  strcpy(v212, "H15P-gpu");
  uint64_t v214 = &unk_1EE377F70;
  int v215 = Espresso::AOT::DTrees::conv_transposeGpuEp;
  uint64_t v216 = &v214;
  char v218 = 8;
  strcpy(v217, "H13P-ane");
  uint64_t v219 = &unk_1EE377F70;
  BOOL v220 = Espresso::AOT::DTrees::conv_transposeAneCp;
  uint64_t v221 = &v219;
  char v223 = 8;
  strcpy(v222, "H14P-ane");
  uint64_t v224 = &unk_1EE377F70;
  uint64_t v225 = Espresso::AOT::DTrees::conv_transposeAneDp;
  int64_t v226 = &v224;
  char v228 = 8;
  strcpy(v227, "H15P-ane");
  int v229 = &unk_1EE377F70;
  unint64_t v230 = Espresso::AOT::DTrees::conv_transposeAneEp;
  v231[0] = &v229;
  std::map<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::map[abi:ne180100](&v81, (const void **)v97, 27);
  for (juint64_t j = 0; jj != -1512; jj -= 56)
  {
    char v22 = (void *)v231[jj / 8];
    if ((void **)((char *)&v229 + jj) == v22)
    {
      (*(void (***)(char *))((char *)&v229 + jj))[4]((char *)&v229 + jj);
      if ((*(&v228 + jj) & 0x80000000) == 0) {
        continue;
      }
LABEL_100:
      operator delete(*(void **)&v227[jj]);
      continue;
    }
    if (v22) {
      (*(void (**)(void *))(*v22 + 40))(v22);
    }
    if (*(&v228 + jj) < 0) {
      goto LABEL_100;
    }
  }
  v97[23] = 8;
  strcpy(v97, "H13G-ane");
  uint64_t v98 = (void **)&unk_1EE377F70;
  uint64_t v99 = Espresso::AOT::DTrees::transposeAneIp;
  char v103 = 8;
  int v101 = (uint64_t *)&v98;
  strcpy((char *)v102, "H14G-ane");
  size_t v104 = (void (**)(void **))&unk_1EE377F70;
  int v105 = Espresso::AOT::DTrees::transposeAneFp;
  char v108 = 8;
  BOOL v106 = (void **)&v104;
  strcpy((char *)v107, "H13C-ane");
  uint64_t v109 = (void (**)(void **))&unk_1EE377F70;
  long long v110 = Espresso::AOT::DTrees::transposeAneJp;
  char v113 = 8;
  long long v111 = (void **)&v109;
  strcpy((char *)v112, "H14C-ane");
  uint64_t v114 = (void (**)(void **))&unk_1EE377F70;
  size_t v115 = Espresso::AOT::DTrees::transposeAneHp;
  char v118 = 8;
  uint64_t v116 = (void **)&v114;
  strcpy((char *)v117, "H13S-ane");
  uint64_t v119 = (void (**)(void **))&unk_1EE377F70;
  int v120 = Espresso::AOT::DTrees::transposeAneKp;
  uint64_t v121 = (void **)&v119;
  char v123 = 8;
  strcpy((char *)v122, "H14S-ane");
  uint64_t v124 = (void (**)(void **))&unk_1EE377F70;
  unint64_t v125 = Espresso::AOT::DTrees::transposeAneGp;
  std::string::size_type v126 = (void **)&v124;
  char v128 = 8;
  strcpy((char *)v127, "H13G-cpu");
  std::string::size_type v129 = (void (**)(void **))&unk_1EE377F70;
  uint64_t v130 = Espresso::AOT::DTrees::transposeCpuIp;
  int v131 = (void **)&v129;
  char v133 = 8;
  strcpy((char *)v132, "H14G-cpu");
  unint64_t v134 = (void (**)(void **))&unk_1EE377F70;
  uint8x8_t v135 = Espresso::AOT::DTrees::transposeCpuFp;
  uint64_t v136 = (void **)&v134;
  char v138 = 8;
  strcpy((char *)v137, "H13C-cpu");
  uint64_t v139 = (void (**)(void **))&unk_1EE377F70;
  char v140 = Espresso::AOT::DTrees::transposeCpuJp;
  size_t v141 = (void **)&v139;
  char v143 = 8;
  strcpy(v142, "H14C-cpu");
  int v144 = &unk_1EE377F70;
  size_t v145 = Espresso::AOT::DTrees::transposeCpuHp;
  uint64_t v146 = &v144;
  char v148 = 8;
  strcpy(v147, "H13S-cpu");
  size_t v149 = &unk_1EE377F70;
  uint64_t v150 = Espresso::AOT::DTrees::transposeCpuKp;
  uint64_t v151 = &v149;
  char v153 = 8;
  strcpy(v152, "H14S-cpu");
  size_t v154 = &unk_1EE377F70;
  long long v155 = Espresso::AOT::DTrees::transposeCpuGp;
  int v156 = &v154;
  char v158 = 8;
  strcpy(v157, "H13G-gpu");
  size_t v159 = &unk_1EE377F70;
  int v160 = Espresso::AOT::DTrees::transposeGpuIp;
  BOOL v161 = &v159;
  char v163 = 8;
  strcpy(v162, "H14G-gpu");
  uint64_t v164 = &unk_1EE377F70;
  uint64_t v165 = Espresso::AOT::DTrees::transposeGpuFp;
  uint64_t v166 = &v164;
  char v168 = 8;
  strcpy(v167, "H13C-gpu");
  BOOL v169 = &unk_1EE377F70;
  int v170 = Espresso::AOT::DTrees::transposeGpuJp;
  size_t v171 = &v169;
  char v173 = 8;
  strcpy(v172, "H14C-gpu");
  size_t v174 = &unk_1EE377F70;
  int v175 = Espresso::AOT::DTrees::transposeGpuHp;
  int v176 = &v174;
  char v178 = 8;
  strcpy(v177, "H13S-gpu");
  size_t v179 = &unk_1EE377F70;
  int v180 = Espresso::AOT::DTrees::transposeGpuKp;
  BOOL v181 = &v179;
  char v183 = 8;
  strcpy(v182, "H14S-gpu");
  size_t v184 = &unk_1EE377F70;
  int v185 = Espresso::AOT::DTrees::transposeGpuGp;
  long long v186 = &v184;
  char v188 = 8;
  strcpy(v187, "H13P-cpu");
  int v189 = &unk_1EE377F70;
  uint64_t v190 = Espresso::AOT::DTrees::transposeCpuCp;
  std::string::size_type v191 = &v189;
  char v193 = 8;
  strcpy(v192, "H14P-cpu");
  int v194 = &unk_1EE377F70;
  size_t v195 = Espresso::AOT::DTrees::transposeCpuDp;
  uint64_t v196 = &v194;
  char v198 = 8;
  strcpy(v197, "H15P-cpu");
  BOOL v199 = &unk_1EE377F70;
  uint64_t v200 = Espresso::AOT::DTrees::transposeCpuEp;
  int v201 = &v199;
  char v203 = 8;
  strcpy(v202, "H13P-gpu");
  size_t v204 = &unk_1EE377F70;
  int v205 = Espresso::AOT::DTrees::transposeGpuCp;
  uint64_t v206 = &v204;
  char v208 = 8;
  strcpy(v207, "H14P-gpu");
  uint64_t v209 = &unk_1EE377F70;
  BOOL v210 = Espresso::AOT::DTrees::transposeGpuDp;
  uint64_t v211 = &v209;
  char v213 = 8;
  strcpy(v212, "H15P-gpu");
  uint64_t v214 = &unk_1EE377F70;
  int v215 = Espresso::AOT::DTrees::transposeGpuEp;
  uint64_t v216 = &v214;
  char v218 = 8;
  strcpy(v217, "H13P-ane");
  uint64_t v219 = &unk_1EE377F70;
  BOOL v220 = Espresso::AOT::DTrees::transposeAneCp;
  uint64_t v221 = &v219;
  char v223 = 8;
  strcpy(v222, "H14P-ane");
  uint64_t v224 = &unk_1EE377F70;
  uint64_t v225 = Espresso::AOT::DTrees::transposeAneDp;
  int64_t v226 = &v224;
  char v228 = 8;
  strcpy(v227, "H15P-ane");
  int v229 = &unk_1EE377F70;
  unint64_t v230 = Espresso::AOT::DTrees::transposeAneEp;
  v231[0] = &v229;
  std::map<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::map[abi:ne180100](&v79, (const void **)v97, 27);
  for (kunint64_t k = 0; kk != -1512; kk -= 56)
  {
    unint64_t v24 = (void *)v231[kk / 8];
    if ((void **)((char *)&v229 + kk) == v24)
    {
      (*(void (***)(char *))((char *)&v229 + kk))[4]((char *)&v229 + kk);
      if ((*(&v228 + kk) & 0x80000000) == 0) {
        continue;
      }
LABEL_109:
      operator delete(*(void **)&v227[kk]);
      continue;
    }
    if (v24) {
      (*(void (**)(void *))(*v24 + 40))(v24);
    }
    if (*(&v228 + kk) < 0) {
      goto LABEL_109;
    }
  }
  v97[23] = 8;
  strcpy(v97, "H13P-cpu");
  uint64_t v98 = (void **)&unk_1EE377F70;
  uint64_t v99 = Espresso::AOT::DTrees::max_poolCpuCp;
  char v103 = 8;
  int v101 = (uint64_t *)&v98;
  strcpy((char *)v102, "H14P-cpu");
  size_t v104 = (void (**)(void **))&unk_1EE377F70;
  int v105 = Espresso::AOT::DTrees::max_poolCpuDp;
  char v108 = 8;
  BOOL v106 = (void **)&v104;
  strcpy((char *)v107, "H15P-cpu");
  uint64_t v109 = (void (**)(void **))&unk_1EE377F70;
  long long v110 = Espresso::AOT::DTrees::max_poolCpuEp;
  char v113 = 8;
  long long v111 = (void **)&v109;
  strcpy((char *)v112, "H13P-gpu");
  uint64_t v114 = (void (**)(void **))&unk_1EE377F70;
  size_t v115 = Espresso::AOT::DTrees::max_poolGpuCp;
  char v118 = 8;
  uint64_t v116 = (void **)&v114;
  strcpy((char *)v117, "H14P-gpu");
  uint64_t v119 = (void (**)(void **))&unk_1EE377F70;
  int v120 = Espresso::AOT::DTrees::max_poolGpuDp;
  uint64_t v121 = (void **)&v119;
  char v123 = 8;
  strcpy((char *)v122, "H15P-gpu");
  uint64_t v124 = (void (**)(void **))&unk_1EE377F70;
  unint64_t v125 = Espresso::AOT::DTrees::max_poolGpuEp;
  std::string::size_type v126 = (void **)&v124;
  char v128 = 8;
  strcpy((char *)v127, "H13P-ane");
  std::string::size_type v129 = (void (**)(void **))&unk_1EE377F70;
  uint64_t v130 = Espresso::AOT::DTrees::max_poolAneCp;
  int v131 = (void **)&v129;
  char v133 = 8;
  strcpy((char *)v132, "H14P-ane");
  unint64_t v134 = (void (**)(void **))&unk_1EE377F70;
  uint8x8_t v135 = Espresso::AOT::DTrees::max_poolAneDp;
  uint64_t v136 = (void **)&v134;
  char v138 = 8;
  strcpy((char *)v137, "H15P-ane");
  uint64_t v139 = (void (**)(void **))&unk_1EE377F70;
  char v140 = Espresso::AOT::DTrees::max_poolAneEp;
  size_t v141 = (void **)&v139;
  std::map<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::map[abi:ne180100](&v77, (const void **)v97, 9);
  if (v141 == (void **)&v139)
  {
    v139[4]((void **)&v139);
    if ((v138 & 0x80000000) == 0) {
      goto LABEL_114;
    }
  }
  else
  {
    if (v141) {
      (*((void (**)(void **, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *, char *, char *, char *, char *, char *, char *, char *))*v141
    }
       + 5))(v141, v25, v26, v27, v28, v29, v30, v31, v187, v182, v177, v172, v167, v162, v157, v152);
    if ((v138 & 0x80000000) == 0)
    {
LABEL_114:
      uint64_t v32 = v136;
      if (v136 != (void **)&v134) {
        goto LABEL_115;
      }
LABEL_286:
      v134[4]((void **)&v134);
      if (v133 < 0) {
        goto LABEL_287;
      }
LABEL_118:
      long long v33 = v131;
      if (v131 != (void **)&v129) {
        goto LABEL_119;
      }
LABEL_288:
      v129[4]((void **)&v129);
      if (v128 < 0) {
        goto LABEL_289;
      }
LABEL_122:
      uint64_t v34 = v126;
      if (v126 != (void **)&v124) {
        goto LABEL_123;
      }
LABEL_290:
      v124[4]((void **)&v124);
      if (v123 < 0) {
        goto LABEL_291;
      }
LABEL_126:
      long long v35 = v121;
      if (v121 != (void **)&v119) {
        goto LABEL_127;
      }
LABEL_292:
      v119[4]((void **)&v119);
      if (v118 < 0) {
        goto LABEL_293;
      }
LABEL_130:
      BOOL v36 = v116;
      if (v116 != (void **)&v114) {
        goto LABEL_131;
      }
LABEL_294:
      v114[4]((void **)&v114);
      if (v113 < 0) {
        goto LABEL_295;
      }
LABEL_134:
      uint64_t v37 = v111;
      if (v111 != (void **)&v109) {
        goto LABEL_135;
      }
LABEL_296:
      v109[4]((void **)&v109);
      if (v108 < 0) {
        goto LABEL_297;
      }
LABEL_138:
      long long v38 = v106;
      if (v106 != (void **)&v104) {
        goto LABEL_139;
      }
LABEL_298:
      v104[4]((void **)&v104);
      if (v103 < 0) {
        goto LABEL_299;
      }
LABEL_142:
      uint64_t v39 = v101;
      if (v101 != (uint64_t *)&v98) {
        goto LABEL_143;
      }
LABEL_300:
      ((void (*)(void ***))v98[4])(&v98);
      if ((v97[23] & 0x80000000) != 0) {
        goto LABEL_301;
      }
      goto LABEL_146;
    }
  }
  operator delete(v137[0]);
  uint64_t v32 = v136;
  if (v136 == (void **)&v134) {
    goto LABEL_286;
  }
LABEL_115:
  if (v32) {
    (*((void (**)(void **))*v32 + 5))(v32);
  }
  if ((v133 & 0x80000000) == 0) {
    goto LABEL_118;
  }
LABEL_287:
  operator delete(v132[0]);
  long long v33 = v131;
  if (v131 == (void **)&v129) {
    goto LABEL_288;
  }
LABEL_119:
  if (v33) {
    (*((void (**)(void **))*v33 + 5))(v33);
  }
  if ((v128 & 0x80000000) == 0) {
    goto LABEL_122;
  }
LABEL_289:
  operator delete(v127[0]);
  uint64_t v34 = v126;
  if (v126 == (void **)&v124) {
    goto LABEL_290;
  }
LABEL_123:
  if (v34) {
    (*((void (**)(void **))*v34 + 5))(v34);
  }
  if ((v123 & 0x80000000) == 0) {
    goto LABEL_126;
  }
LABEL_291:
  operator delete(v122[0]);
  long long v35 = v121;
  if (v121 == (void **)&v119) {
    goto LABEL_292;
  }
LABEL_127:
  if (v35) {
    (*((void (**)(void **))*v35 + 5))(v35);
  }
  if ((v118 & 0x80000000) == 0) {
    goto LABEL_130;
  }
LABEL_293:
  operator delete(v117[0]);
  BOOL v36 = v116;
  if (v116 == (void **)&v114) {
    goto LABEL_294;
  }
LABEL_131:
  if (v36) {
    (*((void (**)(void **))*v36 + 5))(v36);
  }
  if ((v113 & 0x80000000) == 0) {
    goto LABEL_134;
  }
LABEL_295:
  operator delete(v112[0]);
  uint64_t v37 = v111;
  if (v111 == (void **)&v109) {
    goto LABEL_296;
  }
LABEL_135:
  if (v37) {
    (*((void (**)(void **))*v37 + 5))(v37);
  }
  if ((v108 & 0x80000000) == 0) {
    goto LABEL_138;
  }
LABEL_297:
  operator delete(v107[0]);
  long long v38 = v106;
  if (v106 == (void **)&v104) {
    goto LABEL_298;
  }
LABEL_139:
  if (v38) {
    (*((void (**)(void **))*v38 + 5))(v38);
  }
  if ((v103 & 0x80000000) == 0) {
    goto LABEL_142;
  }
LABEL_299:
  operator delete(v102[0]);
  uint64_t v39 = v101;
  if (v101 == (uint64_t *)&v98) {
    goto LABEL_300;
  }
LABEL_143:
  if (v39) {
    (*(void (**)(uint64_t *))(*v39 + 40))(v39);
  }
  if ((v97[23] & 0x80000000) != 0) {
LABEL_301:
  }
    operator delete(*(void **)v97);
LABEL_146:
  v97[23] = 8;
  strcpy(v97, "H13G-ane");
  uint64_t v98 = (void **)&unk_1EE377F70;
  uint64_t v99 = Espresso::AOT::DTrees::mulAneIp;
  char v103 = 8;
  int v101 = (uint64_t *)&v98;
  strcpy((char *)v102, "H14G-ane");
  size_t v104 = (void (**)(void **))&unk_1EE377F70;
  int v105 = Espresso::AOT::DTrees::mulAneFp;
  char v108 = 8;
  BOOL v106 = (void **)&v104;
  strcpy((char *)v107, "H13C-ane");
  uint64_t v109 = (void (**)(void **))&unk_1EE377F70;
  long long v110 = Espresso::AOT::DTrees::mulAneJp;
  char v113 = 8;
  long long v111 = (void **)&v109;
  strcpy((char *)v112, "H14C-ane");
  uint64_t v114 = (void (**)(void **))&unk_1EE377F70;
  size_t v115 = Espresso::AOT::DTrees::mulAneHp;
  char v118 = 8;
  uint64_t v116 = (void **)&v114;
  strcpy((char *)v117, "H13S-ane");
  uint64_t v119 = (void (**)(void **))&unk_1EE377F70;
  int v120 = Espresso::AOT::DTrees::mulAneKp;
  uint64_t v121 = (void **)&v119;
  char v123 = 8;
  strcpy((char *)v122, "H14S-ane");
  uint64_t v124 = (void (**)(void **))&unk_1EE377F70;
  unint64_t v125 = Espresso::AOT::DTrees::mulAneGp;
  std::string::size_type v126 = (void **)&v124;
  char v128 = 8;
  strcpy((char *)v127, "H13G-cpu");
  std::string::size_type v129 = (void (**)(void **))&unk_1EE377F70;
  uint64_t v130 = Espresso::AOT::DTrees::mulCpuIp;
  int v131 = (void **)&v129;
  char v133 = 8;
  strcpy((char *)v132, "H14G-cpu");
  unint64_t v134 = (void (**)(void **))&unk_1EE377F70;
  uint8x8_t v135 = Espresso::AOT::DTrees::mulCpuFp;
  uint64_t v136 = (void **)&v134;
  char v138 = 8;
  strcpy((char *)v137, "H13C-cpu");
  uint64_t v139 = (void (**)(void **))&unk_1EE377F70;
  char v140 = Espresso::AOT::DTrees::mulCpuJp;
  size_t v141 = (void **)&v139;
  char v143 = 8;
  strcpy(v142, "H14C-cpu");
  int v144 = &unk_1EE377F70;
  size_t v145 = Espresso::AOT::DTrees::mulCpuHp;
  uint64_t v146 = &v144;
  char v148 = 8;
  strcpy(v147, "H13S-cpu");
  size_t v149 = &unk_1EE377F70;
  uint64_t v150 = Espresso::AOT::DTrees::mulCpuKp;
  uint64_t v151 = &v149;
  char v153 = 8;
  strcpy(v152, "H14S-cpu");
  size_t v154 = &unk_1EE377F70;
  long long v155 = Espresso::AOT::DTrees::mulCpuGp;
  int v156 = &v154;
  char v158 = 8;
  strcpy(v157, "H13G-gpu");
  size_t v159 = &unk_1EE377F70;
  int v160 = Espresso::AOT::DTrees::mulGpuIp;
  BOOL v161 = &v159;
  char v163 = 8;
  strcpy(v162, "H14G-gpu");
  uint64_t v164 = &unk_1EE377F70;
  uint64_t v165 = Espresso::AOT::DTrees::mulGpuFp;
  uint64_t v166 = &v164;
  char v168 = 8;
  strcpy(v167, "H13C-gpu");
  BOOL v169 = &unk_1EE377F70;
  int v170 = Espresso::AOT::DTrees::mulGpuJp;
  size_t v171 = &v169;
  char v173 = 8;
  strcpy(v172, "H14C-gpu");
  size_t v174 = &unk_1EE377F70;
  int v175 = Espresso::AOT::DTrees::mulGpuHp;
  int v176 = &v174;
  char v178 = 8;
  strcpy(v177, "H13S-gpu");
  size_t v179 = &unk_1EE377F70;
  int v180 = Espresso::AOT::DTrees::mulGpuKp;
  BOOL v181 = &v179;
  char v183 = 8;
  strcpy(v182, "H14S-gpu");
  size_t v184 = &unk_1EE377F70;
  int v185 = Espresso::AOT::DTrees::mulGpuGp;
  long long v186 = &v184;
  char v188 = 8;
  strcpy(v187, "H13P-cpu");
  int v189 = &unk_1EE377F70;
  uint64_t v190 = Espresso::AOT::DTrees::mulCpuCp;
  std::string::size_type v191 = &v189;
  char v193 = 8;
  strcpy(v192, "H14P-cpu");
  int v194 = &unk_1EE377F70;
  size_t v195 = Espresso::AOT::DTrees::mulCpuDp;
  uint64_t v196 = &v194;
  char v198 = 8;
  strcpy(v197, "H15P-cpu");
  BOOL v199 = &unk_1EE377F70;
  uint64_t v200 = Espresso::AOT::DTrees::mulCpuEp;
  int v201 = &v199;
  char v203 = 8;
  strcpy(v202, "H13P-gpu");
  size_t v204 = &unk_1EE377F70;
  int v205 = Espresso::AOT::DTrees::mulGpuCp;
  uint64_t v206 = &v204;
  char v208 = 8;
  strcpy(v207, "H14P-gpu");
  uint64_t v209 = &unk_1EE377F70;
  BOOL v210 = Espresso::AOT::DTrees::mulGpuDp;
  uint64_t v211 = &v209;
  char v213 = 8;
  strcpy(v212, "H15P-gpu");
  uint64_t v214 = &unk_1EE377F70;
  int v215 = Espresso::AOT::DTrees::mulGpuEp;
  uint64_t v216 = &v214;
  char v218 = 8;
  strcpy(v217, "H13P-ane");
  uint64_t v219 = &unk_1EE377F70;
  BOOL v220 = Espresso::AOT::DTrees::mulAneCp;
  uint64_t v221 = &v219;
  char v223 = 8;
  strcpy(v222, "H14P-ane");
  uint64_t v224 = &unk_1EE377F70;
  uint64_t v225 = Espresso::AOT::DTrees::mulAneDp;
  int64_t v226 = &v224;
  char v228 = 8;
  strcpy(v227, "H15P-ane");
  int v229 = &unk_1EE377F70;
  unint64_t v230 = Espresso::AOT::DTrees::mulAneEp;
  v231[0] = &v229;
  std::map<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::map[abi:ne180100](&v75, (const void **)v97, 27);
  unint64_t v40 = 0;
  while (2)
  {
    long long v41 = (void *)v231[v40 / 8];
    if ((void **)((char *)&v229 + v40) == v41)
    {
      (*(void (***)(char *))((char *)&v229 + v40))[4]((char *)&v229 + v40);
      if (*(&v228 + v40) < 0) {
        goto LABEL_154;
      }
    }
    else
    {
      if (v41) {
        (*(void (**)(void *))(*v41 + 40))(v41);
      }
      if (*(&v228 + v40) < 0) {
LABEL_154:
      }
        operator delete(*(void **)&v227[v40]);
    }
    v40 -= 56;
    if (v40 != -1512) {
      continue;
    }
    break;
  }
  v97[23] = 8;
  strcpy(v97, "H13G-cpu");
  uint64_t v98 = (void **)&unk_1EE377F70;
  uint64_t v99 = Espresso::AOT::DTrees::gatherCpuIp;
  char v103 = 8;
  int v101 = (uint64_t *)&v98;
  strcpy((char *)v102, "H14G-cpu");
  size_t v104 = (void (**)(void **))&unk_1EE377F70;
  int v105 = Espresso::AOT::DTrees::gatherCpuFp;
  char v108 = 8;
  BOOL v106 = (void **)&v104;
  strcpy((char *)v107, "H13C-cpu");
  uint64_t v109 = (void (**)(void **))&unk_1EE377F70;
  long long v110 = Espresso::AOT::DTrees::gatherCpuJp;
  char v113 = 8;
  long long v111 = (void **)&v109;
  strcpy((char *)v112, "H14C-cpu");
  uint64_t v114 = (void (**)(void **))&unk_1EE377F70;
  size_t v115 = Espresso::AOT::DTrees::gatherCpuHp;
  char v118 = 8;
  uint64_t v116 = (void **)&v114;
  strcpy((char *)v117, "H13S-cpu");
  uint64_t v119 = (void (**)(void **))&unk_1EE377F70;
  int v120 = Espresso::AOT::DTrees::gatherCpuKp;
  uint64_t v121 = (void **)&v119;
  char v123 = 8;
  strcpy((char *)v122, "H14S-cpu");
  uint64_t v124 = (void (**)(void **))&unk_1EE377F70;
  unint64_t v125 = Espresso::AOT::DTrees::gatherCpuGp;
  std::string::size_type v126 = (void **)&v124;
  char v128 = 8;
  strcpy((char *)v127, "H13G-gpu");
  std::string::size_type v129 = (void (**)(void **))&unk_1EE377F70;
  uint64_t v130 = Espresso::AOT::DTrees::gatherGpuIp;
  int v131 = (void **)&v129;
  char v133 = 8;
  strcpy((char *)v132, "H14G-gpu");
  unint64_t v134 = (void (**)(void **))&unk_1EE377F70;
  uint8x8_t v135 = Espresso::AOT::DTrees::gatherGpuFp;
  uint64_t v136 = (void **)&v134;
  char v138 = 8;
  strcpy((char *)v137, "H13C-gpu");
  uint64_t v139 = (void (**)(void **))&unk_1EE377F70;
  char v140 = Espresso::AOT::DTrees::gatherGpuJp;
  size_t v141 = (void **)&v139;
  char v143 = 8;
  strcpy(v142, "H14C-gpu");
  int v144 = &unk_1EE377F70;
  size_t v145 = Espresso::AOT::DTrees::gatherGpuHp;
  uint64_t v146 = &v144;
  char v148 = 8;
  strcpy(v147, "H13S-gpu");
  size_t v149 = &unk_1EE377F70;
  uint64_t v150 = Espresso::AOT::DTrees::gatherGpuKp;
  uint64_t v151 = &v149;
  char v153 = 8;
  strcpy(v152, "H14S-gpu");
  size_t v154 = &unk_1EE377F70;
  long long v155 = Espresso::AOT::DTrees::gatherGpuGp;
  int v156 = &v154;
  char v158 = 8;
  strcpy(v157, "H13P-cpu");
  size_t v159 = &unk_1EE377F70;
  int v160 = Espresso::AOT::DTrees::gatherCpuCp;
  BOOL v161 = &v159;
  char v163 = 8;
  strcpy(v162, "H14P-cpu");
  uint64_t v164 = &unk_1EE377F70;
  uint64_t v165 = Espresso::AOT::DTrees::gatherCpuDp;
  uint64_t v166 = &v164;
  char v168 = 8;
  strcpy(v167, "H15P-cpu");
  BOOL v169 = &unk_1EE377F70;
  int v170 = Espresso::AOT::DTrees::gatherCpuEp;
  size_t v171 = &v169;
  char v173 = 8;
  strcpy(v172, "H13P-gpu");
  size_t v174 = &unk_1EE377F70;
  int v175 = Espresso::AOT::DTrees::gatherGpuCp;
  int v176 = &v174;
  char v178 = 8;
  strcpy(v177, "H14P-gpu");
  size_t v179 = &unk_1EE377F70;
  int v180 = Espresso::AOT::DTrees::gatherGpuDp;
  BOOL v181 = &v179;
  char v183 = 8;
  strcpy(v182, "H15P-gpu");
  size_t v184 = &unk_1EE377F70;
  int v185 = Espresso::AOT::DTrees::gatherGpuEp;
  long long v186 = &v184;
  std::map<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::map[abi:ne180100](&v73, (const void **)v97, 18);
  uint64_t v42 = 0;
  while (2)
  {
    int v43 = *(void **)&v187[v42 - 8];
    if ((void **)((char *)&v184 + v42) == v43)
    {
      (*(void (***)(char *))((char *)&v184 + v42))[4]((char *)&v184 + v42);
      if (*(&v183 + v42) < 0) {
        goto LABEL_163;
      }
    }
    else
    {
      if (v43) {
        (*(void (**)(void *))(*v43 + 40))(v43);
      }
      if (*(&v183 + v42) < 0) {
LABEL_163:
      }
        operator delete(*(void **)&v182[v42]);
    }
    v42 -= 56;
    if (v42 != -1008) {
      continue;
    }
    break;
  }
  v97[23] = 8;
  strcpy(v97, "H13P-cpu");
  uint64_t v98 = (void **)&unk_1EE377F70;
  uint64_t v99 = Espresso::AOT::DTrees::reduce_argmaxCpuCp;
  char v103 = 8;
  int v101 = (uint64_t *)&v98;
  strcpy((char *)v102, "H14P-cpu");
  size_t v104 = (void (**)(void **))&unk_1EE377F70;
  int v105 = Espresso::AOT::DTrees::reduce_argmaxCpuDp;
  char v108 = 8;
  BOOL v106 = (void **)&v104;
  strcpy((char *)v107, "H15P-cpu");
  uint64_t v109 = (void (**)(void **))&unk_1EE377F70;
  long long v110 = Espresso::AOT::DTrees::reduce_argmaxCpuEp;
  char v113 = 8;
  long long v111 = (void **)&v109;
  strcpy((char *)v112, "H13P-gpu");
  uint64_t v114 = (void (**)(void **))&unk_1EE377F70;
  size_t v115 = Espresso::AOT::DTrees::reduce_argmaxGpuCp;
  char v118 = 8;
  uint64_t v116 = (void **)&v114;
  strcpy((char *)v117, "H14P-gpu");
  uint64_t v119 = (void (**)(void **))&unk_1EE377F70;
  int v120 = Espresso::AOT::DTrees::reduce_argmaxGpuDp;
  uint64_t v121 = (void **)&v119;
  char v123 = 8;
  strcpy((char *)v122, "H15P-gpu");
  uint64_t v124 = (void (**)(void **))&unk_1EE377F70;
  unint64_t v125 = Espresso::AOT::DTrees::reduce_argmaxGpuEp;
  std::string::size_type v126 = (void **)&v124;
  std::map<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::map[abi:ne180100](&v71, (const void **)v97, 6);
  if (v126 == (void **)&v124)
  {
    v124[4]((void **)&v124);
    if ((v123 & 0x80000000) == 0) {
      goto LABEL_168;
    }
  }
  else
  {
    if (v126) {
      (*((void (**)(void **, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *, char *, char *, char *, char *, char *, char *, char *))*v126
    }
       + 5))(v126, v44, v45, v46, v47, v48, v49, v50, v187, v182, v177, v172, v167, v162, v157, v152);
    if ((v123 & 0x80000000) == 0)
    {
LABEL_168:
      uint64_t v51 = v121;
      if (v121 != (void **)&v119) {
        goto LABEL_169;
      }
LABEL_304:
      v119[4]((void **)&v119);
      if (v118 < 0) {
        goto LABEL_305;
      }
LABEL_172:
      std::string::size_type v52 = v116;
      if (v116 != (void **)&v114) {
        goto LABEL_173;
      }
LABEL_306:
      v114[4]((void **)&v114);
      if (v113 < 0) {
        goto LABEL_307;
      }
LABEL_176:
      uint64_t v53 = v111;
      if (v111 != (void **)&v109) {
        goto LABEL_177;
      }
LABEL_308:
      v109[4]((void **)&v109);
      if (v108 < 0) {
        goto LABEL_309;
      }
LABEL_180:
      unint64_t v54 = v106;
      if (v106 != (void **)&v104) {
        goto LABEL_181;
      }
LABEL_310:
      v104[4]((void **)&v104);
      if (v103 < 0) {
        goto LABEL_311;
      }
LABEL_184:
      char v55 = v101;
      if (v101 != (uint64_t *)&v98) {
        goto LABEL_185;
      }
LABEL_312:
      ((void (*)(void ***))v98[4])(&v98);
      if ((v97[23] & 0x80000000) != 0) {
        goto LABEL_313;
      }
      goto LABEL_188;
    }
  }
  operator delete(v122[0]);
  uint64_t v51 = v121;
  if (v121 == (void **)&v119) {
    goto LABEL_304;
  }
LABEL_169:
  if (v51) {
    (*((void (**)(void **))*v51 + 5))(v51);
  }
  if ((v118 & 0x80000000) == 0) {
    goto LABEL_172;
  }
LABEL_305:
  operator delete(v117[0]);
  std::string::size_type v52 = v116;
  if (v116 == (void **)&v114) {
    goto LABEL_306;
  }
LABEL_173:
  if (v52) {
    (*((void (**)(void **))*v52 + 5))(v52);
  }
  if ((v113 & 0x80000000) == 0) {
    goto LABEL_176;
  }
LABEL_307:
  operator delete(v112[0]);
  uint64_t v53 = v111;
  if (v111 == (void **)&v109) {
    goto LABEL_308;
  }
LABEL_177:
  if (v53) {
    (*((void (**)(void **))*v53 + 5))(v53);
  }
  if ((v108 & 0x80000000) == 0) {
    goto LABEL_180;
  }
LABEL_309:
  operator delete(v107[0]);
  unint64_t v54 = v106;
  if (v106 == (void **)&v104) {
    goto LABEL_310;
  }
LABEL_181:
  if (v54) {
    (*((void (**)(void **))*v54 + 5))(v54);
  }
  if ((v103 & 0x80000000) == 0) {
    goto LABEL_184;
  }
LABEL_311:
  operator delete(v102[0]);
  char v55 = v101;
  if (v101 == (uint64_t *)&v98) {
    goto LABEL_312;
  }
LABEL_185:
  if (v55) {
    (*(void (**)(uint64_t *))(*v55 + 40))(v55);
  }
  if ((v97[23] & 0x80000000) != 0) {
LABEL_313:
  }
    operator delete(*(void **)v97);
LABEL_188:
  v97[23] = 8;
  strcpy(v97, "H13P-cpu");
  uint64_t v98 = (void **)&unk_1EE377F70;
  uint64_t v99 = Espresso::AOT::DTrees::reduce_sumCpuCp;
  char v103 = 8;
  int v101 = (uint64_t *)&v98;
  strcpy((char *)v102, "H14P-cpu");
  size_t v104 = (void (**)(void **))&unk_1EE377F70;
  int v105 = Espresso::AOT::DTrees::reduce_sumCpuDp;
  char v108 = 8;
  BOOL v106 = (void **)&v104;
  strcpy((char *)v107, "H15P-cpu");
  uint64_t v109 = (void (**)(void **))&unk_1EE377F70;
  long long v110 = Espresso::AOT::DTrees::reduce_sumCpuEp;
  char v113 = 8;
  long long v111 = (void **)&v109;
  strcpy((char *)v112, "H13P-gpu");
  uint64_t v114 = (void (**)(void **))&unk_1EE377F70;
  size_t v115 = Espresso::AOT::DTrees::reduce_sumGpuCp;
  char v118 = 8;
  uint64_t v116 = (void **)&v114;
  strcpy((char *)v117, "H14P-gpu");
  uint64_t v119 = (void (**)(void **))&unk_1EE377F70;
  int v120 = Espresso::AOT::DTrees::reduce_sumGpuDp;
  uint64_t v121 = (void **)&v119;
  char v123 = 8;
  strcpy((char *)v122, "H15P-gpu");
  uint64_t v124 = (void (**)(void **))&unk_1EE377F70;
  unint64_t v125 = Espresso::AOT::DTrees::reduce_sumGpuEp;
  std::string::size_type v126 = (void **)&v124;
  char v128 = 8;
  strcpy((char *)v127, "H13P-ane");
  std::string::size_type v129 = (void (**)(void **))&unk_1EE377F70;
  uint64_t v130 = Espresso::AOT::DTrees::reduce_sumAneCp;
  int v131 = (void **)&v129;
  char v133 = 8;
  strcpy((char *)v132, "H14P-ane");
  unint64_t v134 = (void (**)(void **))&unk_1EE377F70;
  uint8x8_t v135 = Espresso::AOT::DTrees::reduce_sumAneDp;
  uint64_t v136 = (void **)&v134;
  char v138 = 8;
  strcpy((char *)v137, "H15P-ane");
  uint64_t v139 = (void (**)(void **))&unk_1EE377F70;
  char v140 = Espresso::AOT::DTrees::reduce_sumAneEp;
  size_t v141 = (void **)&v139;
  std::map<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::map[abi:ne180100](&v69, (const void **)v97, 9);
  if (v141 == (void **)&v139)
  {
    v139[4]((void **)&v139);
    if ((v138 & 0x80000000) == 0) {
      goto LABEL_192;
    }
  }
  else
  {
    if (v141) {
      (*((void (**)(void))*v141 + 5))();
    }
    if ((v138 & 0x80000000) == 0)
    {
LABEL_192:
      std::string v56 = v136;
      if (v136 != (void **)&v134) {
        goto LABEL_193;
      }
LABEL_316:
      v134[4]((void **)&v134);
      if (v133 < 0) {
        goto LABEL_317;
      }
LABEL_196:
      std::string v57 = v131;
      if (v131 != (void **)&v129) {
        goto LABEL_197;
      }
LABEL_318:
      v129[4]((void **)&v129);
      if (v128 < 0) {
        goto LABEL_319;
      }
LABEL_200:
      uint64_t v58 = v126;
      if (v126 != (void **)&v124) {
        goto LABEL_201;
      }
LABEL_320:
      v124[4]((void **)&v124);
      if (v123 < 0) {
        goto LABEL_321;
      }
LABEL_204:
      uint64_t v59 = v121;
      if (v121 != (void **)&v119) {
        goto LABEL_205;
      }
LABEL_322:
      v119[4]((void **)&v119);
      if (v118 < 0) {
        goto LABEL_323;
      }
LABEL_208:
      uint64_t v60 = v116;
      if (v116 != (void **)&v114) {
        goto LABEL_209;
      }
LABEL_324:
      v114[4]((void **)&v114);
      if (v113 < 0) {
        goto LABEL_325;
      }
LABEL_212:
      uint64_t v61 = v111;
      if (v111 != (void **)&v109) {
        goto LABEL_213;
      }
LABEL_326:
      v109[4]((void **)&v109);
      if (v108 < 0) {
        goto LABEL_327;
      }
LABEL_216:
      uint64_t v62 = v106;
      if (v106 != (void **)&v104) {
        goto LABEL_217;
      }
LABEL_328:
      v104[4]((void **)&v104);
      if (v103 < 0) {
        goto LABEL_329;
      }
LABEL_220:
      unint64_t v63 = v101;
      if (v101 != (uint64_t *)&v98) {
        goto LABEL_221;
      }
LABEL_330:
      ((void (*)(void ***))v98[4])(&v98);
      if ((v97[23] & 0x80000000) != 0) {
        goto LABEL_331;
      }
      goto LABEL_224;
    }
  }
  operator delete(v137[0]);
  std::string v56 = v136;
  if (v136 == (void **)&v134) {
    goto LABEL_316;
  }
LABEL_193:
  if (v56) {
    (*((void (**)(void **))*v56 + 5))(v56);
  }
  if ((v133 & 0x80000000) == 0) {
    goto LABEL_196;
  }
LABEL_317:
  operator delete(v132[0]);
  std::string v57 = v131;
  if (v131 == (void **)&v129) {
    goto LABEL_318;
  }
LABEL_197:
  if (v57) {
    (*((void (**)(void **))*v57 + 5))(v57);
  }
  if ((v128 & 0x80000000) == 0) {
    goto LABEL_200;
  }
LABEL_319:
  operator delete(v127[0]);
  uint64_t v58 = v126;
  if (v126 == (void **)&v124) {
    goto LABEL_320;
  }
LABEL_201:
  if (v58) {
    (*((void (**)(void **))*v58 + 5))(v58);
  }
  if ((v123 & 0x80000000) == 0) {
    goto LABEL_204;
  }
LABEL_321:
  operator delete(v122[0]);
  uint64_t v59 = v121;
  if (v121 == (void **)&v119) {
    goto LABEL_322;
  }
LABEL_205:
  if (v59) {
    (*((void (**)(void **))*v59 + 5))(v59);
  }
  if ((v118 & 0x80000000) == 0) {
    goto LABEL_208;
  }
LABEL_323:
  operator delete(v117[0]);
  uint64_t v60 = v116;
  if (v116 == (void **)&v114) {
    goto LABEL_324;
  }
LABEL_209:
  if (v60) {
    (*((void (**)(void **))*v60 + 5))(v60);
  }
  if ((v113 & 0x80000000) == 0) {
    goto LABEL_212;
  }
LABEL_325:
  operator delete(v112[0]);
  uint64_t v61 = v111;
  if (v111 == (void **)&v109) {
    goto LABEL_326;
  }
LABEL_213:
  if (v61) {
    (*((void (**)(void **))*v61 + 5))(v61);
  }
  if ((v108 & 0x80000000) == 0) {
    goto LABEL_216;
  }
LABEL_327:
  operator delete(v107[0]);
  uint64_t v62 = v106;
  if (v106 == (void **)&v104) {
    goto LABEL_328;
  }
LABEL_217:
  if (v62) {
    (*((void (**)(void **))*v62 + 5))(v62);
  }
  if ((v103 & 0x80000000) == 0) {
    goto LABEL_220;
  }
LABEL_329:
  operator delete(v102[0]);
  unint64_t v63 = v101;
  if (v101 == (uint64_t *)&v98) {
    goto LABEL_330;
  }
LABEL_221:
  if (v63) {
    (*(void (**)(uint64_t *))(*v63 + 40))(v63);
  }
  if ((v97[23] & 0x80000000) != 0) {
LABEL_331:
  }
    operator delete(*(void **)v97);
LABEL_224:
  v97[23] = 8;
  strcpy(v97, "H13G-ane");
  uint64_t v98 = (void **)&unk_1EE377F70;
  uint64_t v99 = Espresso::AOT::DTrees::upsample_bilinearAneIp;
  char v103 = 8;
  int v101 = (uint64_t *)&v98;
  strcpy((char *)v102, "H14G-ane");
  size_t v104 = (void (**)(void **))&unk_1EE377F70;
  int v105 = Espresso::AOT::DTrees::upsample_bilinearAneFp;
  char v108 = 8;
  BOOL v106 = (void **)&v104;
  strcpy((char *)v107, "H13C-ane");
  uint64_t v109 = (void (**)(void **))&unk_1EE377F70;
  long long v110 = Espresso::AOT::DTrees::upsample_bilinearAneJp;
  char v113 = 8;
  long long v111 = (void **)&v109;
  strcpy((char *)v112, "H14C-ane");
  uint64_t v114 = (void (**)(void **))&unk_1EE377F70;
  size_t v115 = Espresso::AOT::DTrees::upsample_bilinearAneHp;
  char v118 = 8;
  uint64_t v116 = (void **)&v114;
  strcpy((char *)v117, "H13S-ane");
  uint64_t v119 = (void (**)(void **))&unk_1EE377F70;
  int v120 = Espresso::AOT::DTrees::upsample_bilinearAneKp;
  uint64_t v121 = (void **)&v119;
  char v123 = 8;
  strcpy((char *)v122, "H14S-ane");
  uint64_t v124 = (void (**)(void **))&unk_1EE377F70;
  unint64_t v125 = Espresso::AOT::DTrees::upsample_bilinearAneGp;
  std::string::size_type v126 = (void **)&v124;
  char v128 = 8;
  strcpy((char *)v127, "H13G-cpu");
  std::string::size_type v129 = (void (**)(void **))&unk_1EE377F70;
  uint64_t v130 = Espresso::AOT::DTrees::upsample_bilinearCpuIp;
  int v131 = (void **)&v129;
  char v133 = 8;
  strcpy((char *)v132, "H14G-cpu");
  unint64_t v134 = (void (**)(void **))&unk_1EE377F70;
  uint8x8_t v135 = Espresso::AOT::DTrees::upsample_bilinearCpuFp;
  uint64_t v136 = (void **)&v134;
  char v138 = 8;
  strcpy((char *)v137, "H13C-cpu");
  uint64_t v139 = (void (**)(void **))&unk_1EE377F70;
  char v140 = Espresso::AOT::DTrees::upsample_bilinearCpuJp;
  size_t v141 = (void **)&v139;
  char v143 = 8;
  strcpy(v142, "H14C-cpu");
  int v144 = &unk_1EE377F70;
  size_t v145 = Espresso::AOT::DTrees::upsample_bilinearCpuHp;
  uint64_t v146 = &v144;
  char v148 = 8;
  strcpy(v147, "H13S-cpu");
  size_t v149 = &unk_1EE377F70;
  uint64_t v150 = Espresso::AOT::DTrees::upsample_bilinearCpuKp;
  uint64_t v151 = &v149;
  char v153 = 8;
  strcpy(v152, "H14S-cpu");
  size_t v154 = &unk_1EE377F70;
  long long v155 = Espresso::AOT::DTrees::upsample_bilinearCpuGp;
  int v156 = &v154;
  char v158 = 8;
  strcpy(v157, "H13G-gpu");
  size_t v159 = &unk_1EE377F70;
  int v160 = Espresso::AOT::DTrees::upsample_bilinearGpuIp;
  BOOL v161 = &v159;
  char v163 = 8;
  strcpy(v162, "H14G-gpu");
  uint64_t v164 = &unk_1EE377F70;
  uint64_t v165 = Espresso::AOT::DTrees::upsample_bilinearGpuFp;
  uint64_t v166 = &v164;
  char v168 = 8;
  strcpy(v167, "H13C-gpu");
  BOOL v169 = &unk_1EE377F70;
  int v170 = Espresso::AOT::DTrees::upsample_bilinearGpuJp;
  size_t v171 = &v169;
  char v173 = 8;
  strcpy(v172, "H14C-gpu");
  size_t v174 = &unk_1EE377F70;
  int v175 = Espresso::AOT::DTrees::upsample_bilinearGpuHp;
  int v176 = &v174;
  char v178 = 8;
  strcpy(v177, "H13S-gpu");
  size_t v179 = &unk_1EE377F70;
  int v180 = Espresso::AOT::DTrees::upsample_bilinearGpuKp;
  BOOL v181 = &v179;
  char v183 = 8;
  strcpy(v182, "H14S-gpu");
  size_t v184 = &unk_1EE377F70;
  int v185 = Espresso::AOT::DTrees::upsample_bilinearGpuGp;
  long long v186 = &v184;
  char v188 = 8;
  strcpy(v187, "H13P-cpu");
  int v189 = &unk_1EE377F70;
  uint64_t v190 = Espresso::AOT::DTrees::upsample_bilinearCpuCp;
  std::string::size_type v191 = &v189;
  char v193 = 8;
  strcpy(v192, "H14P-cpu");
  int v194 = &unk_1EE377F70;
  size_t v195 = Espresso::AOT::DTrees::upsample_bilinearCpuDp;
  uint64_t v196 = &v194;
  char v198 = 8;
  strcpy(v197, "H15P-cpu");
  BOOL v199 = &unk_1EE377F70;
  uint64_t v200 = Espresso::AOT::DTrees::upsample_bilinearCpuEp;
  int v201 = &v199;
  char v203 = 8;
  strcpy(v202, "H13P-gpu");
  size_t v204 = &unk_1EE377F70;
  int v205 = Espresso::AOT::DTrees::upsample_bilinearGpuCp;
  uint64_t v206 = &v204;
  char v208 = 8;
  strcpy(v207, "H14P-gpu");
  uint64_t v209 = &unk_1EE377F70;
  BOOL v210 = Espresso::AOT::DTrees::upsample_bilinearGpuDp;
  uint64_t v211 = &v209;
  char v213 = 8;
  strcpy(v212, "H15P-gpu");
  uint64_t v214 = &unk_1EE377F70;
  int v215 = Espresso::AOT::DTrees::upsample_bilinearGpuEp;
  uint64_t v216 = &v214;
  char v218 = 8;
  strcpy(v217, "H13P-ane");
  uint64_t v219 = &unk_1EE377F70;
  BOOL v220 = Espresso::AOT::DTrees::upsample_bilinearAneCp;
  uint64_t v221 = &v219;
  char v223 = 8;
  strcpy(v222, "H14P-ane");
  uint64_t v224 = &unk_1EE377F70;
  uint64_t v225 = Espresso::AOT::DTrees::upsample_bilinearAneDp;
  int64_t v226 = &v224;
  char v228 = 8;
  strcpy(v227, "H15P-ane");
  int v229 = &unk_1EE377F70;
  unint64_t v230 = Espresso::AOT::DTrees::upsample_bilinearAneEp;
  v231[0] = &v229;
  std::map<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::map[abi:ne180100](&v67, (const void **)v97, 27);
  unint64_t v64 = 0;
  while (2)
  {
    unint64_t v65 = (void *)v231[v64 / 8];
    if ((void **)((char *)&v229 + v64) == v65)
    {
      (*(void (***)(char *))((char *)&v229 + v64))[4]((char *)&v229 + v64);
      if (*(&v228 + v64) < 0) {
        goto LABEL_232;
      }
    }
    else
    {
      if (v65) {
        (*(void (**)(void *))(*v65 + 40))(v65);
      }
      if (*(&v228 + v64) < 0) {
LABEL_232:
      }
        operator delete(*(void **)&v227[v64]);
    }
    v64 -= 56;
    if (v64 != -1512) {
      continue;
    }
    break;
  }
  *(void *)uint64_t v97 = 6579297;
  v97[23] = 3;
  uint64_t v99 = 0;
  uint64_t v100 = 0;
  uint64_t v98 = &v99;
  std::map<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__tree_node<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,void *> *,long>>>((uint64_t *)&v98, v83, v84);
  std::__tree<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>>>::destroy((uint64_t)&v98, v99);
  if ((v97[23] & 0x80000000) != 0) {
    operator delete(*(void **)v97);
  }
  strcpy(v97, "avg_pool");
  v97[23] = 8;
  uint64_t v99 = 0;
  uint64_t v100 = 0;
  uint64_t v98 = &v99;
  std::map<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__tree_node<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,void *> *,long>>>((uint64_t *)&v98, v95, &v96);
  std::__tree<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>>>::destroy((uint64_t)&v98, v99);
  if ((v97[23] & 0x80000000) != 0) {
    operator delete(*(void **)v97);
  }
  *(void *)uint64_t v97 = 0x7461636E6F63;
  v97[23] = 6;
  uint64_t v99 = 0;
  uint64_t v100 = 0;
  uint64_t v98 = &v99;
  std::map<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__tree_node<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,void *> *,long>>>((uint64_t *)&v98, v87, &v88);
  std::__tree<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>>>::destroy((uint64_t)&v98, v99);
  if ((v97[23] & 0x80000000) != 0) {
    operator delete(*(void **)v97);
  }
  *(void *)uint64_t v97 = 1986948963;
  v97[23] = 4;
  uint64_t v99 = 0;
  uint64_t v100 = 0;
  uint64_t v98 = &v99;
  std::map<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__tree_node<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,void *> *,long>>>((uint64_t *)&v98, v93, &v94);
  std::__tree<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>>>::destroy((uint64_t)&v98, v99);
  if ((v97[23] & 0x80000000) != 0) {
    operator delete(*(void **)v97);
  }
  strcpy(v97, "conv_transpose");
  v97[23] = 14;
  uint64_t v98 = &v99;
  uint64_t v99 = 0;
  uint64_t v100 = 0;
  std::map<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__tree_node<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,void *> *,long>>>((uint64_t *)&v98, v81, &v82);
  std::__tree<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>>>::destroy((uint64_t)&v98, v99);
  if ((v97[23] & 0x80000000) != 0) {
    operator delete(*(void **)v97);
  }
  *(void *)uint64_t v97 = 0x726568746167;
  v97[23] = 6;
  uint64_t v99 = 0;
  uint64_t v100 = 0;
  uint64_t v98 = &v99;
  std::map<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__tree_node<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,void *> *,long>>>((uint64_t *)&v98, v73, &v74);
  std::__tree<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>>>::destroy((uint64_t)&v98, v99);
  if ((v97[23] & 0x80000000) != 0) {
    operator delete(*(void **)v97);
  }
  *(void *)uint64_t v97 = 0x7261656E696CLL;
  v97[23] = 6;
  uint64_t v99 = 0;
  uint64_t v100 = 0;
  uint64_t v98 = &v99;
  std::map<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__tree_node<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,void *> *,long>>>((uint64_t *)&v98, v85, &v86);
  std::__tree<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>>>::destroy((uint64_t)&v98, v99);
  if ((v97[23] & 0x80000000) != 0) {
    operator delete(*(void **)v97);
  }
  *(void *)uint64_t v97 = 1836348268;
  v97[23] = 4;
  uint64_t v99 = 0;
  uint64_t v100 = 0;
  uint64_t v98 = &v99;
  std::map<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__tree_node<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,void *> *,long>>>((uint64_t *)&v98, v91, &v92);
  std::__tree<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>>>::destroy((uint64_t)&v98, v99);
  if ((v97[23] & 0x80000000) != 0) {
    operator delete(*(void **)v97);
  }
  strcpy(v97, "max_pool");
  v97[23] = 8;
  uint64_t v99 = 0;
  uint64_t v100 = 0;
  uint64_t v98 = &v99;
  std::map<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__tree_node<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,void *> *,long>>>((uint64_t *)&v98, v77, &v78);
  std::__tree<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>>>::destroy((uint64_t)&v98, v99);
  if ((v97[23] & 0x80000000) != 0) {
    operator delete(*(void **)v97);
  }
  *(void *)uint64_t v97 = 7107949;
  v97[23] = 3;
  uint64_t v99 = 0;
  uint64_t v100 = 0;
  uint64_t v98 = &v99;
  std::map<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__tree_node<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,void *> *,long>>>((uint64_t *)&v98, v75, &v76);
  std::__tree<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>>>::destroy((uint64_t)&v98, v99);
  if ((v97[23] & 0x80000000) != 0) {
    operator delete(*(void **)v97);
  }
  *(void *)uint64_t v97 = 1970038130;
  v97[23] = 4;
  uint64_t v99 = 0;
  uint64_t v100 = 0;
  uint64_t v98 = &v99;
  std::map<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__tree_node<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,void *> *,long>>>((uint64_t *)&v98, v89, &v90);
  std::__tree<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>>>::destroy((uint64_t)&v98, v99);
  if ((v97[23] & 0x80000000) != 0) {
    operator delete(*(void **)v97);
  }
  *(void *)uint64_t v97 = 6452595;
  v97[23] = 3;
  uint64_t v99 = 0;
  uint64_t v100 = 0;
  uint64_t v98 = &v99;
  std::map<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__tree_node<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,void *> *,long>>>((uint64_t *)&v98, v83, v84);
  std::__tree<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>>>::destroy((uint64_t)&v98, v99);
  if ((v97[23] & 0x80000000) != 0) {
    operator delete(*(void **)v97);
  }
  strcpy(v97, "reduce_argmax");
  v97[23] = 13;
  uint64_t v98 = &v99;
  uint64_t v99 = 0;
  uint64_t v100 = 0;
  std::map<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__tree_node<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,void *> *,long>>>((uint64_t *)&v98, v71, &v72);
  std::__tree<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>>>::destroy((uint64_t)&v98, v99);
  if ((v97[23] & 0x80000000) != 0) {
    operator delete(*(void **)v97);
  }
  strcpy(v97, "reduce_sum");
  v97[23] = 10;
  uint64_t v98 = &v99;
  uint64_t v99 = 0;
  uint64_t v100 = 0;
  std::map<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__tree_node<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,void *> *,long>>>((uint64_t *)&v98, v69, &v70);
  std::__tree<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>>>::destroy((uint64_t)&v98, v99);
  if ((v97[23] & 0x80000000) != 0) {
    operator delete(*(void **)v97);
  }
  strcpy(v97, "transpose");
  v97[23] = 9;
  uint64_t v98 = &v99;
  uint64_t v99 = 0;
  uint64_t v100 = 0;
  std::map<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__tree_node<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,void *> *,long>>>((uint64_t *)&v98, v79, &v80);
  std::__tree<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>>>::destroy((uint64_t)&v98, v99);
  if ((v97[23] & 0x80000000) != 0) {
    operator delete(*(void **)v97);
  }
  strcpy(v97, "upsample_bilinear");
  v97[23] = 17;
  uint64_t v99 = 0;
  uint64_t v100 = 0;
  uint64_t v98 = &v99;
  std::map<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__tree_node<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,void *> *,long>>>((uint64_t *)&v98, v67, &v68);
  std::__tree<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>>>::destroy((uint64_t)&v98, v99);
  if ((v97[23] & 0x80000000) != 0) {
    operator delete(*(void **)v97);
  }
  std::__tree<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>>>::destroy((uint64_t)&v67, v68);
  std::__tree<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>>>::destroy((uint64_t)&v69, v70);
  std::__tree<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>>>::destroy((uint64_t)&v71, v72);
  std::__tree<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>>>::destroy((uint64_t)&v73, v74);
  std::__tree<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>>>::destroy((uint64_t)&v75, v76);
  std::__tree<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>>>::destroy((uint64_t)&v77, v78);
  std::__tree<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>>>::destroy((uint64_t)&v79, v80);
  std::__tree<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>>>::destroy((uint64_t)&v81, v82);
  std::__tree<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>>>::destroy((uint64_t)&v83, v84[0]);
  std::__tree<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>>>::destroy((uint64_t)&v85, v86);
  std::__tree<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>>>::destroy((uint64_t)&v87, v88);
  std::__tree<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>>>::destroy((uint64_t)&v89, v90);
  std::__tree<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>>>::destroy((uint64_t)&v91, v92);
  std::__tree<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>>>::destroy((uint64_t)&v93, v94);
  std::__tree<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>>>::destroy((uint64_t)&v95, v96);
}

void sub_1922CCF90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,_Unwind_Exception *exception_object)
{
}

void sub_1922CCFA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,_Unwind_Exception *exception_objecta,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,char a44,void *a45,uint64_t a46,char a47,void *a48,uint64_t a49,char a50,void *a51,uint64_t a52,char a53,void *a54,uint64_t a55,char a56,void *a57,uint64_t a58,char a59,void *a60,uint64_t a61,char a62,void *a63)
{
  std::__tree<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>>>::destroy((uint64_t)&a29, (void *)a30);
  std::__tree<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>>>::destroy((uint64_t)&a32, (void *)a33);
  std::__tree<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>>>::destroy((uint64_t)&a35, (void *)a36);
  std::__tree<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>>>::destroy((uint64_t)&a38, (void *)a39);
  std::__tree<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>>>::destroy((uint64_t)&a41, (void *)a42);
  std::__tree<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>>>::destroy((uint64_t)&a44, a45);
  std::__tree<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>>>::destroy((uint64_t)&a47, a48);
  std::__tree<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>>>::destroy((uint64_t)&a50, a51);
  std::__tree<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>>>::destroy((uint64_t)&a53, a54);
  std::__tree<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>>>::destroy((uint64_t)&a56, a57);
  std::__tree<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>>>::destroy((uint64_t)&a59, a60);
  std::__tree<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>>>::destroy((uint64_t)&a62, a63);
  std::__tree<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>>>::destroy((uint64_t)&a65, a66);
  std::__tree<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>>>::destroy((uint64_t)&a68, a69);
  std::__tree<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>>>::destroy((uint64_t)&a71, a72);
  _Unwind_Resume(a1);
}

void sub_1922CD138(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v33);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v32);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v27);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v31);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v30);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v29);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v28);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v34);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a9);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a10);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a11);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a12);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a13);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a14);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a15);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a16);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a17);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a18);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a19);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a20);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a21);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a22);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a23);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a24);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a26);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a27);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair((uint64_t)&STACK[0x208]);
  JUMPOUT(0x1922CD060);
}

void sub_1922CD218(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v26);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a19);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a20);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a21);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a22);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a23);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a24);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a26);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair((uint64_t)&STACK[0x208]);
  JUMPOUT(0x1922CD06CLL);
}

void sub_1922CD268(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v27);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v29);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v28);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a26);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a27);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair((uint64_t)&STACK[0x208]);
  JUMPOUT(0x1922CD078);
}

void sub_1922CD2A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v33);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v32);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v27);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v31);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v30);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v29);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v28);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v34);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a18);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a19);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a20);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a21);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a22);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a23);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a24);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a26);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a27);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair((uint64_t)&STACK[0x208]);
  JUMPOUT(0x1922CD084);
}

void sub_1922CD338(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v33);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v32);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v27);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v31);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v30);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v29);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v28);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v34);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a9);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a10);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a11);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a12);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a13);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a14);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a15);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a16);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a17);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a18);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a19);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a20);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a21);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a22);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a23);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a24);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a26);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a27);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair((uint64_t)&STACK[0x208]);
  JUMPOUT(0x1922CD090);
}

void sub_1922CD418(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v26);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a19);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a20);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a21);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a22);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a23);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a24);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a26);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair((uint64_t)&STACK[0x208]);
  JUMPOUT(0x1922CD0A0);
}

void sub_1922CD468(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v33);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v32);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v27);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v31);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v30);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v29);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v28);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v34);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a9);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a10);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a11);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a12);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a13);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a14);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a15);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a16);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a17);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a18);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a19);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a20);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a21);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a22);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a23);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a24);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a26);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a27);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair((uint64_t)&STACK[0x208]);
  JUMPOUT(0x1922CD0B0);
}

void sub_1922CD548(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v33);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v32);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v27);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v31);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v30);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v29);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v28);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v34);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a9);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a10);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a11);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a12);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a13);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a14);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a15);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a16);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a17);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a18);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a19);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a20);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a21);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a22);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a23);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a24);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a26);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a27);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair((uint64_t)&STACK[0x208]);
  JUMPOUT(0x1922CD0C0);
}

void sub_1922CD628(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v33);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v32);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v27);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v31);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v30);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v29);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v28);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v34);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a9);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a10);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a11);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a12);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a13);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a14);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a15);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a16);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a17);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a18);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a19);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a20);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a21);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a22);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a23);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a24);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a26);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a27);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair((uint64_t)&STACK[0x208]);
  JUMPOUT(0x1922CD0D0);
}

void sub_1922CD708(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v33);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v32);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v27);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v31);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v30);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v29);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v28);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v34);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a9);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a10);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a11);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a12);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a13);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a14);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a15);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a16);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a17);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a18);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a19);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a20);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a21);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a22);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a23);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a24);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a26);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a27);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair((uint64_t)&STACK[0x208]);
  JUMPOUT(0x1922CD0E0);
}

void sub_1922CD7E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v33);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v32);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v27);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v31);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v30);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v29);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v28);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v34);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a9);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a10);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a11);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a12);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a13);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a14);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a15);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a16);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a17);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a18);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a19);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a20);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a21);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a22);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a23);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a24);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a26);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a27);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair((uint64_t)&STACK[0x208]);
  JUMPOUT(0x1922CD0F0);
}

void sub_1922CD8C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v33);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v32);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v27);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v31);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v30);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v29);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v28);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v34);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a9);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a10);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a11);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a12);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a13);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a14);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a15);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a16);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a17);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a18);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a19);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a20);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a21);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a22);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a23);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a24);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a26);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a27);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair((uint64_t)&STACK[0x208]);
  JUMPOUT(0x1922CD100);
}

void sub_1922CD9A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v34);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v33);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v27);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v32);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v31);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v30);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v29);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v28);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a16);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a17);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a18);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a19);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a20);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a21);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a22);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a23);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a24);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a26);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a27);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair((uint64_t)&STACK[0x208]);
  JUMPOUT(0x1922CD110);
}

void sub_1922CDA50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,_Unwind_Exception *exception_objecta,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v78);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v77);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v72);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v76);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v75);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v74);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v73);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v79);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a9);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a10);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a11);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a12);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a13);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a14);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a15);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a16);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a17);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a18);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a19);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a20);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a21);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a22);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a23);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a24);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a26);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a27);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair((uint64_t)&STACK[0x208]);
  std::__tree<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>>>::destroy((uint64_t)&a71, a72);
  _Unwind_Resume(a1);
}

void sub_1922CDB44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v24);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(v25);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a19);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a20);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a21);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a22);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a23);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair(a24);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair((uint64_t)&STACK[0x208]);
  _Unwind_Resume(a1);
}

uint64_t e5rt_surface_object_release(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  v3[0] = &unk_1EE398A78;
  v3[1] = a1;
  unint64_t v4 = v3;
  uint64_t v1 = E5RT::ExceptionSafeExecute((uint64_t)v3);
  if (v4 == v3)
  {
    (*(void (**)(void *))(v3[0] + 32))(v3);
  }
  else if (v4)
  {
    (*(void (**)(void))(*v4 + 40))();
  }
  return v1;
}

void sub_1922CDC80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_surface_object_create_from_iosurface(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EE398978;
  v4[1] = a1;
  v4[2] = a2;
  uint64_t v5 = v4;
  uint64_t v2 = E5RT::ExceptionSafeExecute((uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

void sub_1922CDD7C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_surface_desc_release(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  v3[0] = &unk_1EE398878;
  v3[1] = a1;
  unint64_t v4 = v3;
  uint64_t v1 = E5RT::ExceptionSafeExecute((uint64_t)v3);
  if (v4 == v3)
  {
    (*(void (**)(void *))(v3[0] + 32))(v3);
  }
  else if (v4)
  {
    (*(void (**)(void))(*v4 + 40))();
  }
  return v1;
}

void sub_1922CDE78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_surface_desc_get_width(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EE398478;
  v4[1] = a1;
  v4[2] = a2;
  uint64_t v5 = v4;
  uint64_t v2 = E5RT::ExceptionSafeExecute((uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

void sub_1922CDF74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_surface_desc_get_height(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EE3984F8;
  v4[1] = a1;
  v4[2] = a2;
  uint64_t v5 = v4;
  uint64_t v2 = E5RT::ExceptionSafeExecute((uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

void sub_1922CE070(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_surface_desc_get_format(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EE398678;
  v4[1] = a1;
  v4[2] = a2;
  uint64_t v5 = v4;
  uint64_t v2 = E5RT::ExceptionSafeExecute((uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

void sub_1922CE16C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_surface_desc_get_custom_row_strides(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = operator new(0x20uLL);
  *uint64_t v6 = &unk_1EE3986F8;
  v6[1] = a1;
  v6[2] = a2;
  v6[3] = a3;
  unint64_t v10 = v6;
  uint64_t v7 = E5RT::ExceptionSafeExecute((uint64_t)v9);
  if (v10 == v9)
  {
    (*(void (**)(void *))(v9[0] + 32))(v9);
  }
  else if (v10)
  {
    (*(void (**)(void))(*v10 + 40))();
  }
  return v7;
}

void sub_1922CE288(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_program_library_create(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EE394650;
  v4[1] = a1;
  v4[2] = a2;
  uint64_t v5 = v4;
  uint64_t v2 = E5RT::ExceptionSafeExecute((uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

void sub_1922CE384(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_io_port_bind_surface_object(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EE393B68;
  v4[1] = a1;
  v4[2] = a2;
  uint64_t v5 = v4;
  uint64_t v2 = E5RT::ExceptionSafeExecute((uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

void sub_1922CE480(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_cvpb_4cc_to_surface_format(unsigned int a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EE3987F8;
  v4[1] = a2;
  v4[2] = a1;
  uint64_t v5 = v4;
  uint64_t v2 = E5RT::ExceptionSafeExecute((uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

void sub_1922CE580(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

double ___ZN8Espresso14DummyMPSEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_2@<D0>(uint64_t *a1@<X1>, long long *a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::pool_kernel_cpu,std::allocator<Espresso::pool_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::pool_params const&,void>(&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

void nitro::ndarray<unsigned char>::canonicalize(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 555, 1);
    std::stringbuf::str();
    uint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      uint64_t v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        unint64_t v4 = __p;
      }
      else {
        unint64_t v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    uint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exceptiounint64_t n = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1922CE714(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1922CE728(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1922CE720);
}

void void nitro::ndarray<int>::pairwise_element_visitor<int,nitro::ndarray<int>& nitro::ndarray<int>::operator-=<int>(nitro::ndarray<int> const&)::{lambda(int &,int const&)#1}>(nitro::ndarray<int> const&,nitro::ndarray<int>& nitro::ndarray<int>::operator-=<int>(nitro::ndarray<int> const&)::{lambda(int &,int const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    uint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      uint64_t v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        unint64_t v4 = __p;
      }
      else {
        unint64_t v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    uint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exceptiounint64_t n = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1922CE88C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1922CE8A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1922CE898);
}

void nitro::ndarray<unsigned char>::canonicalize(void)const::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  unint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"is_valid()", 10);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  uint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 555, 1);
    std::stringbuf::str();
    unint64_t v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      id v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        unsigned __int8 v10 = __p;
      }
      else {
        unsigned __int8 v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  nitro::ndarray<unsigned char>::canonicalize(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1922CEB48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::ndarray<int>::pairwise_element_visitor<int,nitro::ndarray<int>& nitro::ndarray<int>::operator-=<int>(nitro::ndarray<int> const&)::{lambda(int &,int const&)#1}>(nitro::ndarray<int> const&,nitro::ndarray<int>& nitro::ndarray<int>::operator-=<int>(nitro::ndarray<int> const&)::{lambda(int &,int const&)#1})::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  unint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  uint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    unint64_t v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      id v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        unsigned __int8 v10 = __p;
      }
      else {
        unsigned __int8 v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  void nitro::ndarray<int>::pairwise_element_visitor<int,nitro::ndarray<int>& nitro::ndarray<int>::operator-=<int>(nitro::ndarray<int> const&)::{lambda(int &,int const&)#1}>(nitro::ndarray<int> const&,nitro::ndarray<int>& nitro::ndarray<int>::operator-=<int>(nitro::ndarray<int> const&)::{lambda(int &,int const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1922CEE14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::ndarray<unsigned char>::pairwise_element_visitor<half,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::assign<half>(nitro::ndarray<half> const&)::{lambda(unsigned char &,half const&)#1}>(nitro::ndarray<half> const&,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::assign<half>(nitro::ndarray<half> const&)::{lambda(unsigned char &,half const&)#1})::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  unint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  uint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    unint64_t v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      id v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        unsigned __int8 v10 = __p;
      }
      else {
        unsigned __int8 v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  void nitro::ndarray<unsigned char>::pairwise_element_visitor<half,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::assign<half>(nitro::ndarray<half> const&)::{lambda(unsigned char &,half const&)#1}>(nitro::ndarray<half> const&,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::assign<half>(nitro::ndarray<half> const&)::{lambda(unsigned char &,half const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1922CF0E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::ndarray<half>::pairwise_element_visitor<int,nitro::ndarray<half>& nitro::ndarray<half>::operator-=<int>(nitro::ndarray<int> const&)::{lambda(half &,int const&)#1}>(nitro::ndarray<int> const&,nitro::ndarray<half>& nitro::ndarray<half>::operator-=<int>(nitro::ndarray<int> const&)::{lambda(half &,int const&)#1})::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  unint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  uint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    unint64_t v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      id v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        unsigned __int8 v10 = __p;
      }
      else {
        unsigned __int8 v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  void nitro::ndarray<half>::pairwise_element_visitor<int,nitro::ndarray<half>& nitro::ndarray<half>::operator-=<int>(nitro::ndarray<int> const&)::{lambda(half &,int const&)#1}>(nitro::ndarray<int> const&,nitro::ndarray<half>& nitro::ndarray<half>::operator-=<int>(nitro::ndarray<int> const&)::{lambda(half &,int const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1922CF3AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::ndarray<half>::pairwise_element_visitor<float,nitro::ndarray<half>& nitro::ndarray<half>::assign<float>(nitro::ndarray<float> const&)::{lambda(half &,float const&)#1}>(nitro::ndarray<float> const&,nitro::ndarray<half>& nitro::ndarray<half>::assign<float>(nitro::ndarray<float> const&)::{lambda(half &,float const&)#1})::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  unint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  uint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    unint64_t v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      id v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        unsigned __int8 v10 = __p;
      }
      else {
        unsigned __int8 v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  void nitro::ndarray<half>::pairwise_element_visitor<float,nitro::ndarray<half>& nitro::ndarray<half>::assign<float>(nitro::ndarray<float> const&)::{lambda(half &,float const&)#1}>(nitro::ndarray<float> const&,nitro::ndarray<half>& nitro::ndarray<half>::assign<float>(nitro::ndarray<float> const&)::{lambda(half &,float const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1922CF678(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::ndarray_container::visit<nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::operator-=(nitro::ndarray_container const&)::$_0,nitro::ndarray<int>>>(nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::operator-=(nitro::ndarray_container const&)::$_0,nitro::ndarray<int>>)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v22);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  unint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    uint64_t v7 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v7 && v7[280])
    {
      unint64_t v8 = v7 + 16;
      if ((v21 & 0x80u) == 0) {
        id v9 = __p;
      }
      else {
        id v9 = (void **)__p[0];
      }
      if ((v21 & 0x80u) == 0) {
        uint64_t v10 = v21;
      }
      else {
        uint64_t v10 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
    }
    if ((char)v21 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v11 = (file_logger *)global_logger();
    unint64_t v12 = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    unsigned __int8 v13 = (char *)pthread_getspecific(*((void *)v12 + 74));
    if (v13 && v13[280])
    {
      uint64_t v14 = v13 + 16;
      if ((v24 & 0x80u) == 0) {
        std::locale v15 = v23;
      }
      else {
        std::locale v15 = (void **)v23[0];
      }
      if ((v24 & 0x80u) == 0) {
        uint64_t v16 = v24;
      }
      else {
        uint64_t v16 = (uint64_t)v23[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    uint64_t v17 = pthread_getspecific(*((void *)v12 + 74));
    if (v17)
    {
      if (*((unsigned char *)v17 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v12);
        if (*((_DWORD *)v12 + 150) == 7)
        {
          __print_back_trace();
          exceptiounint64_t n = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v24 < 0) {
      operator delete(v23[0]);
    }
  }
  unint64_t v18 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1922CF908(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

void nitro::ndarray_container::visit<nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::operator-=(nitro::ndarray_container const&)::$_0,nitro::ndarray<float>>>(nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::operator-=(nitro::ndarray_container const&)::$_0,nitro::ndarray<float>>)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v22);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  unint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    uint64_t v7 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v7 && v7[280])
    {
      unint64_t v8 = v7 + 16;
      if ((v21 & 0x80u) == 0) {
        id v9 = __p;
      }
      else {
        id v9 = (void **)__p[0];
      }
      if ((v21 & 0x80u) == 0) {
        uint64_t v10 = v21;
      }
      else {
        uint64_t v10 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
    }
    if ((char)v21 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v11 = (file_logger *)global_logger();
    unint64_t v12 = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    unsigned __int8 v13 = (char *)pthread_getspecific(*((void *)v12 + 74));
    if (v13 && v13[280])
    {
      uint64_t v14 = v13 + 16;
      if ((v24 & 0x80u) == 0) {
        std::locale v15 = v23;
      }
      else {
        std::locale v15 = (void **)v23[0];
      }
      if ((v24 & 0x80u) == 0) {
        uint64_t v16 = v24;
      }
      else {
        uint64_t v16 = (uint64_t)v23[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    uint64_t v17 = pthread_getspecific(*((void *)v12 + 74));
    if (v17)
    {
      if (*((unsigned char *)v17 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v12);
        if (*((_DWORD *)v12 + 150) == 7)
        {
          __print_back_trace();
          exceptiounint64_t n = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v24 < 0) {
      operator delete(v23[0]);
    }
  }
  unint64_t v18 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1922CFC88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::__emplace_unique_key_args<std::string,std::string const&,MIL::IRValueType const*&>(uint64_t **a1, const void **a2, uint64_t a3, void *a4)
{
  unint64_t v8 = a1 + 1;
  uint64_t v7 = a1[1];
  if (v7)
  {
    int v9 = *((char *)a2 + 23);
    if (v9 >= 0) {
      size_t v10 = *((unsigned __int8 *)a2 + 23);
    }
    else {
      size_t v10 = (size_t)a2[1];
    }
    if (v9 >= 0) {
      uint64_t v11 = a2;
    }
    else {
      uint64_t v11 = *a2;
    }
    do
    {
      while (1)
      {
        unint64_t v12 = (uint64_t **)v7;
        std::locale v15 = (const void *)v7[4];
        unsigned __int8 v13 = v7 + 4;
        uint64_t v14 = v15;
        int v16 = *((char *)v13 + 23);
        if (v16 >= 0) {
          size_t v17 = *((unsigned __int8 *)v13 + 23);
        }
        else {
          size_t v17 = v13[1];
        }
        if (v16 >= 0) {
          unint64_t v18 = v13;
        }
        else {
          unint64_t v18 = v14;
        }
        if (v17 >= v10) {
          size_t v19 = v10;
        }
        else {
          size_t v19 = v17;
        }
        int v20 = memcmp(v11, v18, v19);
        BOOL v21 = v10 < v17;
        if (v20) {
          BOOL v21 = v20 < 0;
        }
        if (!v21) {
          break;
        }
        uint64_t v7 = *v12;
        unint64_t v8 = v12;
        if (!*v12) {
          goto LABEL_26;
        }
      }
      int v22 = memcmp(v18, v11, v19);
      BOOL v23 = v17 < v10;
      if (v22) {
        BOOL v23 = v22 < 0;
      }
      if (!v23) {
        return v12;
      }
      uint64_t v7 = v12[1];
    }
    while (v7);
    unint64_t v8 = v12 + 1;
LABEL_26:
    unsigned __int8 v24 = operator new(0x40uLL);
    uint64_t v25 = (std::string *)(v24 + 4);
    if (*(char *)(a3 + 23) < 0) {
      goto LABEL_29;
    }
  }
  else
  {
    unint64_t v12 = a1 + 1;
    unsigned __int8 v24 = operator new(0x40uLL);
    uint64_t v25 = (std::string *)(v24 + 4);
    if (*(char *)(a3 + 23) < 0)
    {
LABEL_29:
      std::string::__init_copy_ctor_external(v25, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
      goto LABEL_30;
    }
  }
  *(_OWORD *)&v25->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
  v25->__r_.__value_.__r.__words[2] = *(void *)(a3 + 16);
LABEL_30:
  v24[7] = *a4;
  void *v24 = 0;
  v24[1] = 0;
  void v24[2] = v12;
  *unint64_t v8 = v24;
  uint64_t v26 = (uint64_t *)**a1;
  uint64_t v27 = v24;
  if (v26)
  {
    *a1 = v26;
    uint64_t v27 = *v8;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v27);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return (uint64_t **)v24;
}

void sub_1922CFF64(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__throw_bad_any_cast[abi:ne180100]()
{
  exceptiounint64_t n = (std::bad_any_cast *)__cxa_allocate_exception(8uLL);
  exception->__vftable = 0;
  uint64_t v1 = std::bad_any_cast::bad_any_cast(exception);
  __cxa_throw(v1, MEMORY[0x1E4FBA330], (void (*)(void *))std::bad_any_cast::~bad_any_cast);
}

uint64_t std::__shared_ptr_emplace<Espresso::pool_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned short,1>,std::allocator<Espresso::blob<unsigned short,1>>,int &,int &,int &,int &,void>(void *a1, int a2, int a3, int a4, int a5)
{
  size_t v10 = (char *)operator new(0x58uLL);
  *((void *)v10 + 1) = 0;
  *((void *)v10 + 2) = 0;
  *(void *)size_t v10 = &unk_1EE389CD8;
  *((void *)v10 + 3) = &unk_1EE36C0D0;
  *(_OWORD *)(v10 + 56) = 0u;
  *(_OWORD *)(v10 + 72) = 0u;
  *((_DWORD *)v10 + 8) = a2;
  uint64_t v11 = (Espresso *)(2 * a2 * (uint64_t)a3 * a4 * a5);
  unint64_t v12 = Espresso::kern_alloc_uninitialized(v11);
  bzero(v12, (size_t)v11);
  *((void *)v10 + 5) = v12;
  v10[48] = 1;
  *a1 = v10 + 24;
  a1[1] = v10;
}

void sub_1922D00B8(_Unwind_Exception *a1)
{
  uint64_t shared_owners = (std::__shared_weak_count *)v1[3].__shared_owners_;
  if (shared_owners) {
    nitro::nitro_function::nitro_function(shared_owners);
  }
  shared_weak_owners = (std::__shared_weak_count *)v1[2].__shared_weak_owners_;
  if (shared_weak_owners) {
    nitro::nitro_function::nitro_function(shared_weak_owners);
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v5);
  _Unwind_Resume(a1);
}

void *std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,Espresso::blob<float,4>::UnitializedBlobType,void>(void *a1, int a2, int a3, int a4, int a5)
{
  size_t v10 = operator new(0x60uLL);
  v10[1] = 0;
  v10[2] = 0;
  void *v10 = &unk_1EE3899C8;
  v10[3] = &unk_1EE36BF10;
  *((_OWORD *)v10 + 4) = 0u;
  *((_OWORD *)v10 + 5) = 0u;
  *((_DWORD *)v10 + 8) = a2;
  *((_DWORD *)v10 + 9) = a3;
  *((_DWORD *)v10 + 10) = a4;
  *((_DWORD *)v10 + 11) = a5;
  double result = Espresso::kern_alloc_uninitialized((Espresso *)(4 * a2 * (uint64_t)a3 * a4 * a5));
  v10[6] = result;
  *((unsigned char *)v10 + 56) = 1;
  *a1 = v10 + 3;
  a1[1] = v10;
  return result;
}

void sub_1922D01B8(_Unwind_Exception *a1)
{
  shared_weak_owners = (std::__shared_weak_count *)v1[3].__shared_weak_owners_;
  if (shared_weak_owners) {
    nitro::nitro_function::nitro_function(shared_weak_owners);
  }
  unint64_t v4 = (std::__shared_weak_count *)v1[3].__vftable;
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v5);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<Espresso::pool_kernel_cpu,std::allocator<Espresso::pool_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::pool_params const&,void>(void *a1, uint64_t *a2, long long *a3)
{
  uint64_t v6 = operator new(0x1C8uLL);
  v6[1] = 0;
  v6[2] = 0;
  *uint64_t v6 = &unk_1EE383170;
  Espresso::pool_kernel_cpu::pool_kernel_cpu((uint64_t)(v6 + 3), a2, v7, a3);
  *a1 = v8;
  a1[1] = v6;
}

void sub_1922D0254(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void *std::__hash_table<MIL::Builder::OperationBuilder *,std::hash<MIL::Builder::OperationBuilder *>,std::equal_to<MIL::Builder::OperationBuilder *>,std::allocator<MIL::Builder::OperationBuilder *>>::__emplace_unique_key_args<MIL::Builder::OperationBuilder *,MIL::Builder::OperationBuilder *>(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = HIDWORD(*a2);
  unint64_t v8 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ v7);
  unint64_t v9 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) ^ ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) >> 47));
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) ^ ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) >> 47));
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
    }
    else
    {
      unint64_t v3 = v9 & (v10 - 1);
    }
    unint64_t v12 = *(void **)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      unsigned __int8 v13 = (void *)*v12;
      if (*v12)
      {
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v15 = v13[1];
            if (v15 == v9)
            {
              if (v13[2] == v6) {
                return v13;
              }
            }
            else if ((v15 & (v10 - 1)) != v3)
            {
              goto LABEL_23;
            }
            unsigned __int8 v13 = (void *)*v13;
            if (!v13) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v14 = v13[1];
          if (v14 == v9)
          {
            if (v13[2] == v6) {
              return v13;
            }
          }
          else
          {
            if (v14 >= v10) {
              v14 %= v10;
            }
            if (v14 != v3) {
              break;
            }
          }
          unsigned __int8 v13 = (void *)*v13;
        }
        while (v13);
      }
    }
  }
LABEL_23:
  size_t v17 = operator new(0x18uLL);
  *size_t v17 = 0;
  v17[1] = v9;
  v17[2] = *a3;
  float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v19 = *(float *)(a1 + 32);
  if (v10 && (float)(v19 * (float)v10) >= v18)
  {
    uint64_t v20 = *(void *)a1;
    BOOL v21 = *(void **)(*(void *)a1 + 8 * v3);
    if (v21)
    {
LABEL_26:
      *size_t v17 = *v21;
LABEL_61:
      *BOOL v21 = v17;
      goto LABEL_62;
    }
  }
  else
  {
    BOOL v22 = 1;
    if (v10 >= 3) {
      BOOL v22 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v23 = v22 | (2 * v10);
    unint64_t v24 = vcvtps_u32_f32(v18 / v19);
    if (v23 <= v24) {
      size_t prime = v24;
    }
    else {
      size_t prime = v23;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v10 = *(void *)(a1 + 8);
    }
    if (prime > v10) {
      goto LABEL_37;
    }
    if (prime < v10)
    {
      unint64_t v26 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v10 < 3 || (uint8x8_t v27 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
      {
        unint64_t v26 = std::__next_prime(v26);
      }
      else
      {
        uint64_t v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2) {
          unint64_t v26 = v28;
        }
      }
      if (prime <= v26) {
        size_t prime = v26;
      }
      if (prime < v10) {
LABEL_37:
      }
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v10 = *(void *)(a1 + 8);
    unint64_t v29 = v10 - 1;
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
      {
        unint64_t v3 = v9 % v10;
        uint64_t v20 = *(void *)a1;
        BOOL v21 = *(void **)(*(void *)a1 + 8 * (v9 % v10));
        if (v21) {
          goto LABEL_26;
        }
      }
      else
      {
        unint64_t v3 = v9;
        uint64_t v20 = *(void *)a1;
        BOOL v21 = *(void **)(*(void *)a1 + 8 * v9);
        if (v21) {
          goto LABEL_26;
        }
      }
    }
    else
    {
      unint64_t v3 = v29 & v9;
      uint64_t v20 = *(void *)a1;
      BOOL v21 = *(void **)(*(void *)a1 + 8 * (v29 & v9));
      if (v21) {
        goto LABEL_26;
      }
    }
  }
  *size_t v17 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v17;
  *(void *)(v20 + 8 * v3) = a1 + 16;
  if (*v17)
  {
    unint64_t v30 = *(void *)(*v17 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v30 >= v10) {
        v30 %= v10;
      }
    }
    else
    {
      v30 &= v10 - 1;
    }
    BOOL v21 = (void *)(*(void *)a1 + 8 * v30);
    goto LABEL_61;
  }
LABEL_62:
  ++*(void *)(a1 + 24);
  return v17;
}

void sub_1922D05B4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::ostringstream::str[abi:ne180100]()
{
  return std::stringbuf::str();
}

uint64_t std::__function::__func<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1},std::allocator<Espresso::AOT::AOTCompilerOptionsManager::Impl::Impl(std::string,std::string)::{lambda(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)#1}>,void ()(Espresso::AOT::AOTCompilerOptions &,cxxopts::OptionValue const&)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000192DC2749) {
    return a1 + 8;
  }
  if (((v3 & 0x8000000192DC2749 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000192DC2749)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000192DC2749 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 8;
  }
  return 0;
}

void Espresso::AOT::OpPlacementPass::AddOpCopyForConsumer(uint64_t a1, MIL::Builder::OperationBuilder **a2, uint64_t *a3, uint64_t a4, void *a5, void **a6)
{
  MIL::Builder::OperationBuilder::CreateOperation((uint64_t *)&v61, *a2);
  uint64_t v64 = v61;
  if ((void)v61) {
    operator new();
  }
  unint64_t v65 = 0;
  *(void *)&long long v61 = 0;
  MIL::Builder::OperationBuilder::Make();
  unint64_t v12 = v65;
  if (v65 && !atomic_fetch_add(&v65->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  uint64_t v45 = a1;
  uint64_t v13 = v61;
  *(void *)&long long v61 = 0;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  unint64_t v14 = 0;
  long long v61 = 0u;
  long long v62 = 0u;
  int v63 = 1065353216;
  while (v14 < MIL::Builder::OperationBuilder::GetNumOutputs(*a2))
  {
    Outputuint64_t Name = MIL::Builder::OperationBuilder::GetOutputName(*a2);
    if (*(char *)(OutputName + 23) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)v52, *(const std::string::value_type **)OutputName, *(void *)(OutputName + 8));
    }
    else
    {
      long long v16 = *(_OWORD *)OutputName;
      *(void *)&v52[16] = *(void *)(OutputName + 16);
      *(_OWORD *)std::string::size_type v52 = v16;
    }
    Espresso::MILTranslator::NameGenerator::NameForPrefix(*a6, (uint64_t)v52, (uint64_t)&__p);
    v50.__r_.__value_.__r.__words[0] = (std::string::size_type)v52;
    size_t v17 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v61, (uint64_t)v52, (uint64_t)&std::piecewise_construct, (long long **)&v50);
    std::string::operator=((std::string *)(v17 + 5), &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v59, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    }
    else {
      std::string v59 = __p;
    }
    MIL::Builder::OperationBuilder::RenameOutput();
    float v18 = v60;
    if (v60 && !atomic_fetch_add(&v60->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
      if ((SHIBYTE(v59.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_21:
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_25;
        }
        goto LABEL_9;
      }
    }
    else if ((SHIBYTE(v59.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_21;
    }
    operator delete(v59.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_25:
      if ((v52[23] & 0x80000000) == 0) {
        goto LABEL_10;
      }
      goto LABEL_26;
    }
LABEL_9:
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((v52[23] & 0x80000000) == 0) {
      goto LABEL_10;
    }
LABEL_26:
    operator delete(*(void **)v52);
LABEL_10:
    ++v14;
  }
  std::string v57 = v66;
  uint64_t v58 = v67;
  if (v67) {
    atomic_fetch_add_explicit(&v67->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  float v19 = (std::__shared_weak_count *)a3[1];
  uint64_t v55 = *a3;
  std::string v56 = v19;
  if (v19) {
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  MIL::Builder::BlockBuilder::AddOperation();
  uint64_t v20 = v56;
  if (!v56 || atomic_fetch_add(&v56->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    BOOL v21 = v58;
    if (v58) {
      goto LABEL_34;
    }
LABEL_35:
    BOOL v22 = (uint64_t *)v62;
    if (!(void)v62) {
      goto LABEL_36;
    }
    do
    {
LABEL_94:
      if (*((char *)v22 + 63) < 0) {
        std::string::__init_copy_ctor_external(&v54, (const std::string::value_type *)v22[5], v22[6]);
      }
      else {
        std::string v54 = *(std::string *)(v22 + 5);
      }
      MIL::Builder::OperationBuilder::RenameArgument();
      if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v54.__r_.__value_.__l.__data_);
      }
      BOOL v22 = (uint64_t *)*v22;
    }
    while (v22);
    goto LABEL_36;
  }
  ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
  std::__shared_weak_count::__release_weak(v20);
  BOOL v21 = v58;
  if (!v58) {
    goto LABEL_35;
  }
LABEL_34:
  if (atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_35;
  }
  ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
  std::__shared_weak_count::__release_weak(v21);
  BOOL v22 = (uint64_t *)v62;
  if ((void)v62) {
    goto LABEL_94;
  }
LABEL_36:
  memset(v52, 0, sizeof(v52));
  int v53 = 1065353216;
  MIL::Builder::OperationBuilder::GetInputArguments((uint64_t *)&__p, v66);
  unint64_t v23 = (void *)__p.__r_.__value_.__r.__words[2];
  if (__p.__r_.__value_.__r.__words[2])
  {
    do
    {
      unint64_t v24 = (MIL::Builder::Variable *)v23[2];
      if (MIL::Builder::Variable::TryGetName(v24))
      {
        uint64_t Name = MIL::Builder::Variable::GetName(v24);
        if (*(char *)(Name + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v50, *(const std::string::value_type **)Name, *(void *)(Name + 8));
        }
        else
        {
          long long v26 = *(_OWORD *)Name;
          v50.__r_.__value_.__r.__words[2] = *(void *)(Name + 16);
          *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v26;
        }
        if (std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::find<std::string>(a5, (uint64_t)&v50))
        {
          unint64_t v68 = &v50;
          uint8x8_t v27 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a5, (uint64_t)&v50, (uint64_t)&std::piecewise_construct, (long long **)&v68);
          std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__emplace_unique_key_args<std::shared_ptr<MIL::Builder::OperationBuilder>,std::shared_ptr<MIL::Builder::OperationBuilder> const&>((uint64_t)v52, v27 + 5, v27 + 5);
        }
        if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v50.__r_.__value_.__l.__data_);
        }
      }
      unint64_t v23 = (void *)*v23;
    }
    while (v23);
    uint64_t v28 = (void *)__p.__r_.__value_.__r.__words[2];
    if (__p.__r_.__value_.__r.__words[2])
    {
      do
      {
        unint64_t v29 = (void *)*v28;
        operator delete(v28);
        uint64_t v28 = v29;
      }
      while (v29);
    }
  }
  unint64_t v30 = (void *)__p.__r_.__value_.__r.__words[0];
  __p.__r_.__value_.__r.__words[0] = 0;
  if (v30) {
    operator delete(v30);
  }
  uint64_t v31 = *(void **)&v52[16];
  if (*(void *)&v52[16])
  {
    while (2)
    {
      std::string::size_type v32 = v31[2];
      std::string::size_type v33 = v31[3];
      __p.__r_.__value_.__r.__words[0] = v32;
      __p.__r_.__value_.__l.__size_ = v33;
      if (v33)
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v33 + 8), 1uLL, memory_order_relaxed);
        std::string::size_type v48 = v32;
        uint64_t v49 = (std::__shared_weak_count *)v33;
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v33 + 8), 1uLL, memory_order_relaxed);
        uint64_t v34 = v67;
        uint64_t v46 = v66;
        uint64_t v47 = v67;
        if (v67) {
          goto LABEL_56;
        }
      }
      else
      {
        std::string::size_type v48 = v32;
        uint64_t v49 = 0;
        uint64_t v34 = v67;
        uint64_t v46 = v66;
        uint64_t v47 = v67;
        if (v67) {
LABEL_56:
        }
          atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      Espresso::AOT::OpPlacementPass::AddOpCopyForConsumer(v45, &v48, &v46, a4, a5, a6);
      if (v34 && !atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
        long long v35 = v49;
        if (v49) {
          goto LABEL_60;
        }
      }
      else
      {
        long long v35 = v49;
        if (v49)
        {
LABEL_60:
          if (!atomic_fetch_add(&v35->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
            std::__shared_weak_count::__release_weak(v35);
          }
        }
      }
      std::string::size_type size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
      if (__p.__r_.__value_.__l.__size_
        && !atomic_fetch_add((atomic_ullong *volatile)(__p.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
      uint64_t v31 = (void *)*v31;
      if (!v31)
      {
        uint64_t v37 = *(void **)&v52[16];
        if (*(void *)&v52[16])
        {
          do
          {
            long long v38 = v37;
            uint64_t v37 = (void *)*v37;
            uint64_t v39 = (std::__shared_weak_count *)v38[3];
            if (v39 && !atomic_fetch_add(&v39->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
              std::__shared_weak_count::__release_weak(v39);
            }
            operator delete(v38);
          }
          while (v37);
        }
        break;
      }
      continue;
    }
  }
  unint64_t v40 = *(void **)v52;
  *(void *)std::string::size_type v52 = 0;
  if (v40) {
    operator delete(v40);
  }
  long long v41 = (char *)v62;
  if ((void)v62)
  {
    while (1)
    {
      uint64_t v42 = *(char **)v41;
      if (v41[63] < 0)
      {
        operator delete(*((void **)v41 + 5));
        if ((v41[39] & 0x80000000) == 0) {
          goto LABEL_79;
        }
LABEL_82:
        operator delete(*((void **)v41 + 2));
        operator delete(v41);
        long long v41 = v42;
        if (!v42) {
          break;
        }
      }
      else
      {
        if (v41[39] < 0) {
          goto LABEL_82;
        }
LABEL_79:
        operator delete(v41);
        long long v41 = v42;
        if (!v42) {
          break;
        }
      }
    }
  }
  int v43 = (void *)v61;
  *(void *)&long long v61 = 0;
  if (v43) {
    operator delete(v43);
  }
  uint64_t v44 = v67;
  if (v67 && !atomic_fetch_add(&v67->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
    std::__shared_weak_count::__release_weak(v44);
  }
}

void sub_1922D0DD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,char a45,uint64_t a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  uint64_t v56 = *(void *)(v54 - 176);
  *(void *)(v54 - 176) = 0;
  if (v56)
  {
    (*(void (**)(uint64_t))(*(void *)v56 + 8))(v56);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::abstract_engine_factory::engine_with_name(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = *(std::recursive_mutex **)(a1 + 96);
  std::recursive_mutex::lock(v6);
  unint64_t v9 = *(void **)(a1 + 56);
  unint64_t v7 = (void *)(a1 + 56);
  unint64_t v8 = v9;
  if (!v9) {
    goto LABEL_8;
  }
  unint64_t v10 = v7;
  do
  {
    BOOL v11 = std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v8 + 4, a2);
    unint64_t v12 = v8 + 1;
    if (!v11)
    {
      unint64_t v12 = v8;
      unint64_t v10 = v8;
    }
    unint64_t v8 = (void *)*v12;
  }
  while (*v12);
  if (v10 == v7 || std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, v10 + 4))
  {
LABEL_8:
    *a3 = 0;
    a3[1] = 0;
  }
  else
  {
    uint64_t v13 = v10[8];
    *a3 = v10[7];
    a3[1] = v13;
    if (v13) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
    }
  }

  std::recursive_mutex::unlock(v6);
}

void *nitro::ndarray<int>::canonicalize@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  if (!nitro::ndarray<float>::is_canonical(a1))
  {
    if (a1[3] - a1[2] == a1[6] - a1[5]) {
      nitro::ndarray<int>::ndarray((uint64_t)a2);
    }
    nitro::ndarray<int>::canonicalize(void)const::{lambda(void)#1}::operator()();
  }

  return nitro::ndarray<int>::ndarray(a2, a1);
}

void sub_1922D15FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char a15)
{
  nitro::ndarray<float>::~ndarray(v15);
  _Unwind_Resume(a1);
}

uint64_t nitro::ndarray<float>::operator==<half>(uint64_t *a1, uint64_t *a2)
{
  if (a2 == a1) {
    return 1;
  }
  uint64_t v5 = (char *)a1[2];
  unint64_t v4 = (char *)a1[3];
  unint64_t v6 = v4 - v5;
  unint64_t v7 = (v4 - v5) >> 3;
  unint64_t v8 = (void *)a2[2];
  if (v7 != (a2[3] - (uint64_t)v8) >> 3) {
    return 0;
  }
  int64_t v9 = v4 - v5;
  if (v4 == v5) {
    return 1;
  }
  uint64_t v10 = v7 <= 1 ? 1 : (v4 - v5) >> 3;
  if (*(void *)v5 != *v8) {
    return 0;
  }
  uint64_t v11 = 1;
  do
  {
    unint64_t v12 = v11;
    if (v10 == v11) {
      break;
    }
    uint64_t v13 = *(void *)&v5[8 * v11];
    uint64_t v14 = v8[v11++];
  }
  while (v13 == v14);
  BOOL v15 = v12 >= v7;
  if (v12 >= v7)
  {
    uint64_t v16 = *a1;
    if (!*a1) {
      return 1;
    }
    if ((unint64_t)(v9 - 8) >= 8)
    {
      unint64_t v19 = ((unint64_t)(v9 - 8) >> 3) + 1;
      float v18 = &v5[8 * (v19 & 0x3FFFFFFFFFFFFFFELL)];
      uint64_t v20 = v5 + 8;
      uint64_t v21 = 1;
      uint64_t v22 = v19 & 0x3FFFFFFFFFFFFFFELL;
      uint64_t v23 = 1;
      do
      {
        v21 *= *(v20 - 1);
        v23 *= *v20;
        v20 += 2;
        v22 -= 2;
      }
      while (v22);
      uint64_t v17 = v23 * v21;
      if (v19 == (v19 & 0x3FFFFFFFFFFFFFFELL))
      {
LABEL_20:
        if (v17)
        {
          if ((v6 & 0x8000000000000000) != 0) {
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v25 = operator new(v4 - v5);
          bzero(v25, v6 & 0xFFFFFFFFFFFFFFF8);
          uint64_t v26 = *a2;
          if (v6 >> 3 <= 1) {
            unint64_t v27 = 1;
          }
          else {
            unint64_t v27 = v6 >> 3;
          }
          uint64_t v28 = a2[5];
          uint64_t v29 = a2[8];
          uint64_t v30 = v27 & 0x1FFFFFFFFFFFFFFELL;
          while (1)
          {
            if (v6 <= 7)
            {
              uint64_t v31 = 0;
              float v32 = *(float *)(v16 + 4 * a1[8]);
              goto LABEL_42;
            }
            uint64_t v33 = a1[5];
            if (v27 < 2) {
              break;
            }
            uint64_t v36 = 0;
            uint64_t v37 = 0;
            long long v38 = (void *)(v33 + 8);
            uint64_t v39 = v27 & 0x1FFFFFFFFFFFFFFELL;
            unint64_t v40 = v25 + 1;
            do
            {
              v36 += *(v38 - 1) * *(v40 - 1);
              v37 += *v38 * *v40;
              v40 += 2;
              v38 += 2;
              v39 -= 2;
            }
            while (v39);
            uint64_t v34 = v37 + v36;
            uint64_t v35 = v27 & 0x1FFFFFFFFFFFFFFELL;
            if (v27 != v30) {
              goto LABEL_33;
            }
LABEL_35:
            float v32 = *(float *)(v16 + 4 * (a1[8] + v34));
            if (v27 < 2)
            {
              uint64_t v31 = 0;
              uint64_t v48 = 0;
LABEL_40:
              unint64_t v54 = v27 - v48;
              uint64_t v55 = v48;
              uint64_t v56 = (uint64_t *)(v28 + 8 * v48);
              std::string v57 = &v25[v55];
              do
              {
                uint64_t v59 = *v57++;
                uint64_t v58 = v59;
                uint64_t v60 = *v56++;
                v31 += v60 * v58;
                --v54;
              }
              while (v54);
              goto LABEL_42;
            }
            uint64_t v49 = 0;
            uint64_t v50 = 0;
            uint64_t v51 = v27 & 0x1FFFFFFFFFFFFFFELL;
            std::string::size_type v52 = (void *)(v28 + 8);
            int v53 = v25 + 1;
            do
            {
              v49 += *(v52 - 1) * *(v53 - 1);
              v50 += *v52 * *v53;
              v53 += 2;
              v52 += 2;
              v51 -= 2;
            }
            while (v51);
            uint64_t v31 = v50 + v49;
            uint64_t v48 = v27 & 0x1FFFFFFFFFFFFFFELL;
            if (v27 != v30) {
              goto LABEL_40;
            }
LABEL_42:
            _H1 = *(_WORD *)(v26 + 2 * (v29 + v31));
            __asm { FCVT            S1, H1 }
            BOOL v15 = v32 == _S1;
            if ((int)(v6 >> 3) >= 1 && v32 == _S1)
            {
              uint64_t v67 = (v6 >> 3) + 1;
              unint64_t v68 = v6 >> 3;
              while (1)
              {
                uint64_t v69 = (v67 - 2);
                unint64_t v70 = v25[v69] + 1;
                v25[v69] = v70;
                if (v70 < *(void *)&v5[v69 * 8]) {
                  break;
                }
                v25[(v67 - 2)] = 0;
                LODWORD(v68) = v68 - 1;
                if ((unint64_t)--v67 <= 1) {
                  goto LABEL_49;
                }
              }
              if ((int)v68 > 0) {
                continue;
              }
            }
LABEL_49:
            operator delete(v25);
            return v15;
          }
          uint64_t v34 = 0;
          uint64_t v35 = 0;
LABEL_33:
          unint64_t v41 = v27 - v35;
          uint64_t v42 = v35;
          int v43 = (uint64_t *)(v33 + v42 * 8);
          uint64_t v44 = &v25[v42];
          do
          {
            uint64_t v46 = *v44++;
            uint64_t v45 = v46;
            uint64_t v47 = *v43++;
            v34 += v47 * v45;
            --v41;
          }
          while (v41);
          goto LABEL_35;
        }
        return 1;
      }
    }
    else
    {
      uint64_t v17 = 1;
      float v18 = (char *)a1[2];
    }
    do
    {
      uint64_t v24 = *(void *)v18;
      v18 += 8;
      v17 *= v24;
    }
    while (v18 != v4);
    goto LABEL_20;
  }
  return v15;
}

void sub_1922D1974(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<half>::operator-<int>(void *a1, void *a2)
{
  uint64_t v5 = (char *)a1[2];
  unint64_t v4 = (char *)a1[3];
  size_t v6 = v4 - v5;
  unint64_t v7 = (v4 - v5) >> 3;
  unint64_t v8 = (char *)a2[2];
  int64_t v9 = (char *)a2[3];
  uint64_t v10 = (v9 - v8) >> 3;
  if (v7 != v10) {
    goto LABEL_11;
  }
  if (v4 != v5)
  {
    uint64_t v11 = v7 <= 1 ? 1 : (v4 - v5) >> 3;
    if (*(void *)v5 != *(void *)v8) {
      goto LABEL_11;
    }
    uint64_t v12 = 1;
    do
    {
      unint64_t v13 = v12;
      if (v11 == v12) {
        break;
      }
      uint64_t v14 = *(void *)&v5[8 * v12];
      uint64_t v15 = *(void *)&v8[8 * v12++];
    }
    while (v14 == v15);
    if (v13 < v7)
    {
LABEL_11:
      long long v38 = 0;
      uint64_t v39 = 0;
      unint64_t v40 = 0;
      if (v4 != v5)
      {
        if ((v6 & 0x8000000000000000) != 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        long long v38 = (char *)operator new(v4 - v5);
        unint64_t v40 = &v38[8 * v7];
        memcpy(v38, v5, v6);
        uint64_t v39 = v40;
      }
      uint64_t v35 = 0;
      uint64_t v36 = 0;
      uint64_t v37 = 0;
      uint64_t v17 = (unsigned char *)a1[5];
      uint64_t v16 = (unsigned char *)a1[6];
      int64_t v18 = v16 - v17;
      if (v16 != v17)
      {
        if (v18 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v19 = (char *)operator new(v16 - v17);
        uint64_t v20 = &v19[8 * (v18 >> 3)];
        uint64_t v35 = v19;
        uint64_t v37 = v20;
        memcpy(v19, v17, v18);
        uint64_t v36 = v20;
      }
      float v32 = 0;
      uint64_t v33 = 0;
      uint64_t v34 = 0;
      if (v9 != v8)
      {
        if (v9 - v8 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v21 = (char *)operator new(v9 - v8);
        uint64_t v22 = &v21[8 * v10];
        float v32 = v21;
        uint64_t v34 = v22;
        memcpy(v21, v8, v9 - v8);
        uint64_t v33 = v22;
      }
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      uint64_t v31 = 0;
      uint64_t v24 = (unsigned char *)a2[5];
      uint64_t v23 = (unsigned char *)a2[6];
      int64_t v25 = v23 - v24;
      if (v23 != v24)
      {
        if (v25 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v26 = (char *)operator new(v23 - v24);
        unint64_t v27 = &v26[8 * (v25 >> 3)];
        uint64_t v29 = v26;
        uint64_t v31 = v27;
        memcpy(v26, v24, v25);
        uint64_t v30 = v27;
      }
      nitro::ndarray_impl::compute_broadcast((const void **)&v38, (const void **)&v35, (uint64_t)&v32, (uint64_t)&v29);
      nitro::ndarray<half>::ndarray(&v28, a1, (uint64_t)&v38, (uint64_t)&v35, 0);
      nitro::ndarray<half>::copy(&v28);
    }
  }
  nitro::ndarray<half>::copy(a1);
}

void sub_1922D1CF8(_Unwind_Exception *a1)
{
  nitro::ndarray<float>::~ndarray(v1);
  _Unwind_Resume(a1);
}

void sub_1922D1D0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  nitro::ndarray<float>::~ndarray(&a9);
  nitro::ndarray<float>::~ndarray(v25);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
    uint64_t v28 = a21;
    if (!a21)
    {
LABEL_3:
      uint64_t v29 = a24;
      if (!a24) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v28 = a21;
    if (!a21) {
      goto LABEL_3;
    }
  }
  a22 = (uint64_t)v28;
  operator delete(v28);
  uint64_t v29 = a24;
  if (!a24)
  {
LABEL_4:
    uint64_t v30 = *(void **)(v26 - 112);
    if (!v30) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_9:
  a25 = (uint64_t)v29;
  operator delete(v29);
  uint64_t v30 = *(void **)(v26 - 112);
  if (!v30) {
LABEL_6:
  }
    _Unwind_Resume(a1);
LABEL_5:
  *(void *)(v26 - 104) = v30;
  operator delete(v30);
  goto LABEL_6;
}

void sub_1922D1DA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a21) {
    JUMPOUT(0x1922D1D84);
  }
  JUMPOUT(0x1922D1D54);
}

void sub_1922D1DB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a24) {
    JUMPOUT(0x1922D1D94);
  }
  JUMPOUT(0x1922D1D5CLL);
}

void sub_1922D1DC8()
{
  if (!*(void *)(v0 - 112)) {
    JUMPOUT(0x1922D1D6CLL);
  }
  JUMPOUT(0x1922D1D64);
}

uint64_t nitro::ndarray<half>::operator==<float>(uint64_t *a1, uint64_t *a2)
{
  if (a2 == a1) {
    return 1;
  }
  uint64_t v5 = (char *)a1[2];
  unint64_t v4 = (char *)a1[3];
  unint64_t v6 = v4 - v5;
  unint64_t v7 = (v4 - v5) >> 3;
  unint64_t v8 = (void *)a2[2];
  if (v7 != (a2[3] - (uint64_t)v8) >> 3) {
    return 0;
  }
  int64_t v9 = v4 - v5;
  if (v4 == v5) {
    return 1;
  }
  uint64_t v10 = v7 <= 1 ? 1 : (v4 - v5) >> 3;
  if (*(void *)v5 != *v8) {
    return 0;
  }
  uint64_t v11 = 1;
  do
  {
    unint64_t v12 = v11;
    if (v10 == v11) {
      break;
    }
    uint64_t v13 = *(void *)&v5[8 * v11];
    uint64_t v14 = v8[v11++];
  }
  while (v13 == v14);
  BOOL v15 = v12 >= v7;
  if (v12 >= v7)
  {
    uint64_t v16 = *a1;
    if (!*a1) {
      return 1;
    }
    if ((unint64_t)(v9 - 8) >= 8)
    {
      unint64_t v19 = ((unint64_t)(v9 - 8) >> 3) + 1;
      int64_t v18 = &v5[8 * (v19 & 0x3FFFFFFFFFFFFFFELL)];
      uint64_t v20 = v5 + 8;
      uint64_t v21 = 1;
      uint64_t v22 = v19 & 0x3FFFFFFFFFFFFFFELL;
      uint64_t v23 = 1;
      do
      {
        v21 *= *(v20 - 1);
        v23 *= *v20;
        v20 += 2;
        v22 -= 2;
      }
      while (v22);
      uint64_t v17 = v23 * v21;
      if (v19 == (v19 & 0x3FFFFFFFFFFFFFFELL))
      {
LABEL_20:
        if (v17)
        {
          if ((v6 & 0x8000000000000000) != 0) {
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          int64_t v25 = operator new(v4 - v5);
          bzero(v25, v6 & 0xFFFFFFFFFFFFFFF8);
          uint64_t v26 = *a2;
          if (v6 >> 3 <= 1) {
            unint64_t v27 = 1;
          }
          else {
            unint64_t v27 = v6 >> 3;
          }
          uint64_t v28 = a2[5];
          uint64_t v29 = a2[8];
          uint64_t v30 = v27 & 0x1FFFFFFFFFFFFFFELL;
          while (1)
          {
            if (v6 <= 7)
            {
              uint64_t v31 = 0;
              _H0 = *(_WORD *)(v16 + 2 * a1[8]);
              goto LABEL_42;
            }
            uint64_t v33 = a1[5];
            if (v27 < 2) {
              break;
            }
            uint64_t v36 = 0;
            uint64_t v37 = 0;
            long long v38 = (void *)(v33 + 8);
            uint64_t v39 = v27 & 0x1FFFFFFFFFFFFFFELL;
            unint64_t v40 = v25 + 1;
            do
            {
              v36 += *(v38 - 1) * *(v40 - 1);
              v37 += *v38 * *v40;
              v40 += 2;
              v38 += 2;
              v39 -= 2;
            }
            while (v39);
            uint64_t v34 = v37 + v36;
            uint64_t v35 = v27 & 0x1FFFFFFFFFFFFFFELL;
            if (v27 != v30) {
              goto LABEL_33;
            }
LABEL_35:
            _H0 = *(_WORD *)(v16 + 2 * (a1[8] + v34));
            if (v27 < 2)
            {
              uint64_t v31 = 0;
              uint64_t v48 = 0;
LABEL_40:
              unint64_t v54 = v27 - v48;
              uint64_t v55 = v48;
              uint64_t v56 = (uint64_t *)(v28 + 8 * v48);
              std::string v57 = &v25[v55];
              do
              {
                uint64_t v59 = *v57++;
                uint64_t v58 = v59;
                uint64_t v60 = *v56++;
                v31 += v60 * v58;
                --v54;
              }
              while (v54);
              goto LABEL_42;
            }
            uint64_t v49 = 0;
            uint64_t v50 = 0;
            uint64_t v51 = v27 & 0x1FFFFFFFFFFFFFFELL;
            std::string::size_type v52 = (void *)(v28 + 8);
            int v53 = v25 + 1;
            do
            {
              v49 += *(v52 - 1) * *(v53 - 1);
              v50 += *v52 * *v53;
              v53 += 2;
              v52 += 2;
              v51 -= 2;
            }
            while (v51);
            uint64_t v31 = v50 + v49;
            uint64_t v48 = v27 & 0x1FFFFFFFFFFFFFFELL;
            if (v27 != v30) {
              goto LABEL_40;
            }
LABEL_42:
            __asm { FCVT            S0, H0 }
            float v66 = *(float *)(v26 + 4 * (v29 + v31));
            BOOL v15 = v66 == _S0;
            if ((int)(v6 >> 3) >= 1 && v66 == _S0)
            {
              uint64_t v67 = (v6 >> 3) + 1;
              unint64_t v68 = v6 >> 3;
              while (1)
              {
                uint64_t v69 = (v67 - 2);
                unint64_t v70 = v25[v69] + 1;
                v25[v69] = v70;
                if (v70 < *(void *)&v5[v69 * 8]) {
                  break;
                }
                v25[(v67 - 2)] = 0;
                LODWORD(v68) = v68 - 1;
                if ((unint64_t)--v67 <= 1) {
                  goto LABEL_49;
                }
              }
              if ((int)v68 > 0) {
                continue;
              }
            }
LABEL_49:
            operator delete(v25);
            return v15;
          }
          uint64_t v34 = 0;
          uint64_t v35 = 0;
LABEL_33:
          unint64_t v41 = v27 - v35;
          uint64_t v42 = v35;
          int v43 = (uint64_t *)(v33 + v42 * 8);
          uint64_t v44 = &v25[v42];
          do
          {
            uint64_t v46 = *v44++;
            uint64_t v45 = v46;
            uint64_t v47 = *v43++;
            v34 += v47 * v45;
            --v41;
          }
          while (v41);
          goto LABEL_35;
        }
        return 1;
      }
    }
    else
    {
      uint64_t v17 = 1;
      int64_t v18 = (char *)a1[2];
    }
    do
    {
      uint64_t v24 = *(void *)v18;
      v18 += 8;
      v17 *= v24;
    }
    while (v18 != v4);
    goto LABEL_20;
  }
  return v15;
}

void sub_1922D210C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t E5RT::SurfaceDescriptor::GetSurfacePlaneCount(E5RT::SurfaceDescriptor *this)
{
  return *(void *)(*((void *)this + 1) + 16);
}

uint64_t E5RT::IOSurfaceObject::ValidateSurfaceObjectMatchesWithDescriptor(E5RT::IOSurfaceObject *this, const E5RT::SurfaceDescriptor *a2)
{
  uint64_t v3 = (__IOSurface *)*((void *)this + 1);
  if (!v3)
  {
    exceptiounint64_t n = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v35, "ValidateSurfaceObjectMatchesWithDescriptor");
    std::string::basic_string[abi:ne180100]<0>(v33, "IOSurface not allocated.");
    E5RT::Status::Status(v34, 1, v33);
    E5RT::E5RTError::E5RTError(exception, v35, v34);
  }
  size_t PlaneCount = IOSurfaceGetPlaneCount(v3);
  Surfacesize_t PlaneCount = E5RT::SurfaceDescriptor::GetSurfacePlaneCount(a2);
  uint64_t v7 = SurfacePlaneCount;
  if (PlaneCount != SurfacePlaneCount && (SurfacePlaneCount != 1 || PlaneCount))
  {
    uint64_t v29 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v35, "ValidateSurfaceObjectMatchesWithDescriptor");
    std::string::basic_string[abi:ne180100]<0>(v33, "Surface Object's plane count does not match with provided Surface Descriptor.");
    E5RT::Status::Status(v34, 2, v33);
    E5RT::E5RTError::E5RTError(v29, v35, v34);
  }
  if (IOSurfaceGetPlaneCount(*((IOSurfaceRef *)this + 1)) >= 2)
  {
    if (IOSurfaceGetPlaneCount(*((IOSurfaceRef *)this + 1)))
    {
      size_t v22 = 0;
      do
      {
        unint64_t SurfaceWidth = E5RT::SurfaceDescriptor::GetSurfaceWidth(a2);
        if (SurfaceWidth % IOSurfaceGetWidthOfPlane(*((IOSurfaceRef *)this + 1), v22))
        {
          uint64_t v31 = __cxa_allocate_exception(0x18uLL);
          std::string::basic_string[abi:ne180100]<0>(v35, "ValidateSurfaceObjectMatchesWithDescriptor");
          std::string::basic_string[abi:ne180100]<0>(v33, "Surface Object's width of plane does not match with provided Surface Descriptor.");
          E5RT::Status::Status(v34, 2, v33);
          E5RT::E5RTError::E5RTError(v31, v35, v34);
        }
        unint64_t SurfaceHeight = E5RT::SurfaceDescriptor::GetSurfaceHeight(a2);
        if (SurfaceHeight % IOSurfaceGetHeightOfPlane(*((IOSurfaceRef *)this + 1), v22))
        {
          float v32 = __cxa_allocate_exception(0x18uLL);
          std::string::basic_string[abi:ne180100]<0>(v35, "ValidateSurfaceObjectMatchesWithDescriptor");
          std::string::basic_string[abi:ne180100]<0>(v33, "Surface Object's height of plane does not match with provided Surface Descriptor.");
          E5RT::Status::Status(v34, 2, v33);
          E5RT::E5RTError::E5RTError(v32, v35, v34);
        }
        ++v22;
      }
      while (IOSurfaceGetPlaneCount(*((IOSurfaceRef *)this + 1)) > v22);
    }
  }
  else
  {
    uint64_t v8 = E5RT::SurfaceDescriptor::GetSurfaceWidth(a2);
    if (v8 != IOSurfaceGetWidth(*((IOSurfaceRef *)this + 1)))
    {
      int64_t v25 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v35, "ValidateSurfaceObjectMatchesWithDescriptor");
      std::string::basic_string[abi:ne180100]<0>(v33, "Surface Object's width does not match with provided Surface Descriptor.");
      E5RT::Status::Status(v34, 2, v33);
      E5RT::E5RTError::E5RTError(v25, v35, v34);
    }
    uint64_t v9 = E5RT::SurfaceDescriptor::GetSurfaceHeight(a2);
    if (v9 != IOSurfaceGetHeight(*((IOSurfaceRef *)this + 1)))
    {
      uint64_t v26 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v35, "ValidateSurfaceObjectMatchesWithDescriptor");
      std::string::basic_string[abi:ne180100]<0>(v33, "Surface Object's height does not match with provided Surface Descriptor.");
      E5RT::Status::Status(v34, 2, v33);
      E5RT::E5RTError::E5RTError(v26, v35, v34);
    }
  }
  PixelFormat = (E5RT *)IOSurfaceGetPixelFormat(*((IOSurfaceRef *)this + 1));
  unsigned int v11 = E5RT::CVPB4ccToSurfaceFormat(PixelFormat);
  if (E5RT::SurfaceDescriptor::GetSurfaceFormat(a2) != v11)
  {
    unint64_t v27 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v35, "ValidateSurfaceObjectMatchesWithDescriptor");
    std::string::basic_string[abi:ne180100]<0>(v33, "Surface Object's format does not match with provided Surface Descriptor.");
    E5RT::Status::Status(v34, 2, v33);
    E5RT::E5RTError::E5RTError(v27, v35, v34);
  }
  CustomRowuint64_t Strides = (uint64_t *)E5RT::SurfaceDescriptor::TryGetCustomRowStrides(a2);
  uint64_t v13 = *CustomRowStrides;
  uint64_t v14 = CustomRowStrides[1];
  if (*CustomRowStrides != v14)
  {
    if (v7 != (v14 - v13) >> 3)
    {
      uint64_t v28 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v35, "ValidateSurfaceObjectMatchesWithDescriptor");
      std::string::basic_string[abi:ne180100]<0>(v33, "Invalid custom per row stride configuration. Length of custom strides is not equal to plane count.");
      E5RT::Status::Status(v34, 2, v33);
      E5RT::E5RTError::E5RTError(v28, v35, v34);
    }
    BOOL v15 = CustomRowStrides;
    size_t v16 = 0;
    do
    {
      uint64_t v17 = *(void *)(v13 + 8 * v16);
      if (v17 != IOSurfaceGetBytesPerRowOfPlane(*((IOSurfaceRef *)this + 1), v16))
      {
        uint64_t v20 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v35, "ValidateSurfaceObjectMatchesWithDescriptor");
        std::string::basic_string[abi:ne180100]<0>(v33, "Surface Object's custom row strides does not match with provided Surface Descriptor.");
        E5RT::Status::Status(v34, 2, v33);
        E5RT::E5RTError::E5RTError(v20, v35, v34);
      }
      ++v16;
      uint64_t v13 = *v15;
    }
    while (v16 < (v15[1] - *v15) >> 3);
  }
  uint64_t result = E5RT::IsMultiSliceFormat(v11);
  if (result)
  {
    uint64_t SurfaceSliceCount = E5RT::SurfaceDescriptor::GetSurfaceSliceCount(a2);
    uint64_t result = IOSurfaceGetSliceCount();
    if (result != SurfaceSliceCount)
    {
      uint64_t v30 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v35, "ValidateSurfaceObjectMatchesWithDescriptor");
      std::string::basic_string[abi:ne180100]<0>(v33, "Invalid slice count: IOSurface slice count does not match with provided Surface Descriptor.");
      E5RT::Status::Status(v34, 2, v33);
      E5RT::E5RTError::E5RTError(v30, v35, v34);
    }
  }
  return result;
}

void sub_1922D27A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
      goto LABEL_9;
    }
  }
  else if ((v23 & 1) == 0)
  {
LABEL_9:
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v22);
  goto LABEL_9;
}

uint64_t E5RT::SurfaceObject::ValidateSurfaceObjectMatchesWithDescriptor(E5RT::SurfaceObject *this, const E5RT::SurfaceDescriptor *a2)
{
  return (*(uint64_t (**)(void, const E5RT::SurfaceDescriptor *))(**((void **)this + 1) + 16))(*((void *)this + 1), a2);
}

void Espresso::AOT::MakeVectorFromMILValue<unsigned long long>(MIL::IRValue *a1@<X0>, void *a2@<X8>)
{
  MIL::IRValue::AsTensor(a1);
  uint64_t Data = MIL::IRTensorValue::GetDataView<unsigned long long>();
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  if (v4)
  {
    unint64_t v5 = v4;
    if (v4 >> 61) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = Data;
    uint64_t v7 = 8 * v4;
    uint64_t v8 = operator new(8 * v4);
    *a2 = v8;
    a2[2] = (char *)v8 + 8 * v5;
    bzero(v8, 8 * v5);
    unint64_t v9 = 0;
    a2[1] = (char *)v8 + v7;
    if (v5 < 4) {
      goto LABEL_8;
    }
    if ((unint64_t)v8 - v6 < 0x20) {
      goto LABEL_8;
    }
    unint64_t v9 = v5 & 0xFFFFFFFFFFFFFFFCLL;
    uint64_t v10 = (long long *)(v6 + 16);
    unsigned int v11 = v8 + 1;
    unint64_t v12 = v5 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      long long v13 = *v10;
      *(v11 - 1) = *(v10 - 1);
      _OWORD *v11 = v13;
      v10 += 2;
      v11 += 2;
      v12 -= 4;
    }
    while (v12);
    if (v5 != v9)
    {
LABEL_8:
      unint64_t v14 = v5 - v9;
      uint64_t v15 = 8 * v9;
      size_t v16 = (uint64_t *)(v6 + 8 * v9);
      uint64_t v17 = (void *)((char *)v8 + v15);
      do
      {
        uint64_t v18 = *v16++;
        *v17++ = v18;
        --v14;
      }
      while (v14);
    }
  }
}

void sub_1922D2A4C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

MIL::Builder::ProgramBuilder *Espresso::AOT::PruneNoOpTransfers@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 48))(&v317);
  uint64_t v248 = a1;
  uint64_t v6 = (E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset *)MIL::Builder::ProgramBuilder::Make();
  uint64_t v7 = v318;
  if (v318 && !atomic_fetch_add(&v318->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  Opsetuint64_t Name = E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset::GetOpsetName(v6);
  uint64_t v10 = (void *)v9;
  if (v9 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  unsigned int v11 = OpsetName;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    unint64_t v12 = (void **)operator new(v14 + 1);
    __dst[1] = v10;
    unint64_t v316 = v15 | 0x8000000000000000;
    __dst[0] = v12;
LABEL_12:
    memmove(v12, v11, (size_t)v10);
    *((unsigned char *)v10 + (void)v12) = 0;
    uint64_t v13 = *a2;
    uint64_t v249 = a2[1];
    if (*a2 != v249) {
      goto LABEL_15;
    }
    goto LABEL_527;
  }
  HIBYTE(v316) = v9;
  unint64_t v12 = __dst;
  if (v9) {
    goto LABEL_12;
  }
  LOBYTE(__dst[0]) = 0;
  uint64_t v13 = *a2;
  uint64_t v249 = a2[1];
  if (*a2 != v249)
  {
    do
    {
LABEL_15:
      uint64_t v250 = v13;
      MIL::Builder::ProgramBuilder::GetFunction();
      MIL::Builder::FunctionBuilder::GetBlock();
      char v310 = 0;
      uint64_t v311 = 0;
      uint64_t v309 = &v310;
      MIL::Builder::BlockBuilder::GetOutputNames((uint64_t *)&v307, v312);
      MIL::Builder::BlockBuilder::GetOperations((uint64_t *)&v305, v312);
      uint64_t v16 = (uint64_t)v305;
      uint64_t v17 = v306;
      if (v305 == (void *)v306)
      {
        if (v305) {
          goto LABEL_490;
        }
        goto LABEL_498;
      }
      do
      {
        uint64_t Operator = MIL::Builder::OperationBuilder::GetOperator(*(MIL::Builder::OperationBuilder **)v16);
        uint64_t v20 = (*(uint64_t (**)(uint64_t))(*(void *)Operator + 16))(Operator);
        int v21 = *(char *)(v20 + 23);
        if (v21 < 0)
        {
          if (*(void *)(v20 + 8) != 19) {
            goto LABEL_20;
          }
          uint64_t v20 = *(void *)v20;
        }
        else if (v21 != 19)
        {
          goto LABEL_20;
        }
        if (*(void *)v20 == 0x736F695F4C4D3545
          && *(void *)(v20 + 8) == 0x736E6172742E3631
          && *(void *)(v20 + 11) == 0x726566736E617274)
        {
          uint64_t v24 = *(MIL::Builder::OperationBuilder **)v16;
          for (unint64_t i = v310; i; unint64_t i = (uint64_t *)*i)
          {
            unint64_t v33 = i[4];
            if ((unint64_t)v24 >= v33)
            {
              if (v33 >= (unint64_t)v24) {
                goto LABEL_20;
              }
              ++i;
            }
          }
          BYTE7(v252) = 6;
          strcpy((char *)v251, "values");
          unint64_t NumArguments = MIL::Builder::OperationBuilder::GetNumArguments();
          if (SBYTE7(v252) < 0) {
            operator delete(v251[0]);
          }
          if (NumArguments >= 2)
          {
            exceptiounint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(exception, "Transfer Op has more than 1 input.");
            __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          BYTE7(v252) = 6;
          strcpy((char *)v251, "values");
          ArgumentForParameter = (MIL::Builder::Variable *)MIL::Builder::OperationBuilder::GetArgumentForParameter();
          if (SBYTE7(v252) < 0) {
            operator delete(v251[0]);
          }
          uint64_t v303 = 0;
          std::string __p = 0;
          std::string v304 = 0;
          uint64_t v28 = (char *)operator new(0x10uLL);
          *(void *)uint64_t v28 = *(void *)v16;
          uint64_t v29 = *(void *)(v16 + 8);
          *((void *)v28 + 1) = v29;
          if (v29)
          {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v29 + 8), 1uLL, memory_order_relaxed);
            if (v303)
            {
              uint64_t v243 = v28 - 16;
              for (uint64_t j = v303 - 16; ; j -= 16)
              {
                *(_OWORD *)uint64_t v243 = *(_OWORD *)j;
                v243 -= 16;
                *(void *)uint64_t j = 0;
                *((void *)j + 1) = 0;
              }
            }
          }
          std::string __p = v28;
          uint64_t v303 = v28 + 16;
          std::string v304 = v28 + 16;
          MIL::Builder::OperationBuilder::GetOutputName(*(MIL::Builder::OperationBuilder **)v16);
          uint64_t OperationsByInput = MIL::Builder::BlockBuilder::GetOperationsByInput();
          uint64_t v31 = OperationsByInput;
          *(_OWORD *)size_t v251 = 0u;
          long long v252 = 0u;
          float v253 = *(float *)(OperationsByInput + 32);
          size_t prime = *(void *)(OperationsByInput + 8);
          if (prime == 1)
          {
            size_t prime = 2;
            goto LABEL_65;
          }
          if ((prime & (prime - 1)) != 0)
          {
            size_t prime = std::__next_prime(*(void *)(OperationsByInput + 8));
            uint64_t v34 = v251[1];
            BOOL v35 = (void *)prime >= v251[1];
            if ((void *)prime > v251[1]) {
              goto LABEL_64;
            }
          }
          else
          {
            uint64_t v34 = 0;
            BOOL v35 = 1;
            if (prime)
            {
LABEL_64:
              if (prime >> 61) {
                std::__throw_bad_array_new_length[abi:ne180100]();
              }
LABEL_65:
              uint64_t v39 = operator new(8 * prime);
              unint64_t v40 = v251[0];
              v251[0] = v39;
              if (v40) {
                operator delete(v40);
              }
              uint64_t v41 = 0;
              v251[1] = (void *)prime;
              do
                *((void *)v251[0] + v41++) = 0;
              while (prime != v41);
              uint64_t v42 = (void **)v252;
              if ((void)v252)
              {
                size_t v43 = *(void *)(v252 + 8);
                size_t v44 = prime - 1;
                if ((prime & (prime - 1)) == 0)
                {
                  size_t v45 = v43 & v44;
                  *((void *)v251[0] + v45) = &v252;
                  while (1)
                  {
                    uint64_t v46 = *v42;
                    if (!*v42) {
                      break;
                    }
                    size_t v47 = v46[1] & v44;
                    if (v47 == v45)
                    {
                      uint64_t v42 = (void **)*v42;
                    }
                    else if (*((void *)v251[0] + v47))
                    {
                      char *v42 = (void *)*v46;
                      uint64_t v48 = 8 * v47;
                      void *v46 = **(void **)((char *)v251[0] + v48);
                      **(void **)((char *)v251[0] + v48) = v46;
                    }
                    else
                    {
                      *((void *)v251[0] + v47) = v42;
                      uint64_t v42 = (void **)v46;
                      size_t v45 = v47;
                    }
                  }
                  goto LABEL_89;
                }
                if (v43 >= prime) {
                  v43 %= prime;
                }
                *((void *)v251[0] + v43) = &v252;
                uint64_t v49 = *v42;
                if (!*v42) {
                  goto LABEL_89;
                }
                while (1)
                {
LABEL_84:
                  size_t v51 = v49[1];
                  if (v51 >= prime) {
                    v51 %= prime;
                  }
                  if (v51 == v43) {
                    goto LABEL_83;
                  }
                  if (*((void *)v251[0] + v51)) {
                    break;
                  }
                  *((void *)v251[0] + v51) = v42;
                  uint64_t v42 = (void **)v49;
                  uint64_t v49 = (void *)*v49;
                  size_t v43 = v51;
                  if (!v49) {
                    goto LABEL_89;
                  }
                }
                char *v42 = (void *)*v49;
                uint64_t v50 = 8 * v51;
                void *v49 = **(void **)((char *)v251[0] + v50);
                **(void **)((char *)v251[0] + v50) = v49;
                uint64_t v49 = v42;
LABEL_83:
                uint64_t v42 = (void **)v49;
                uint64_t v49 = (void *)*v49;
                if (!v49) {
                  goto LABEL_89;
                }
                goto LABEL_84;
              }
LABEL_89:
              std::string::size_type v52 = *(void **)(v31 + 16);
              if (!v52) {
                goto LABEL_122;
              }
              do
              {
LABEL_90:
                std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__emplace_unique_key_args<std::shared_ptr<MIL::Builder::OperationBuilder>,std::shared_ptr<MIL::Builder::OperationBuilder> const&>((uint64_t)v251, v52 + 2, v52 + 2);
                std::string::size_type v52 = (void *)*v52;
              }
              while (v52);
              goto LABEL_122;
            }
          }
          if (v35) {
            goto LABEL_89;
          }
          unint64_t v36 = vcvtps_u32_f32((float)*((unint64_t *)&v252 + 1) / v253);
          if ((unint64_t)v34 < 3
            || (uint8x8_t v37 = (uint8x8_t)vcnt_s8((int8x8_t)v34), v37.i16[0] = vaddlv_u8(v37), v37.u32[0] > 1uLL))
          {
            unint64_t v36 = std::__next_prime(v36);
          }
          else
          {
            uint64_t v38 = 1 << -(char)__clz(v36 - 1);
            if (v36 >= 2) {
              unint64_t v36 = v38;
            }
          }
          if (prime <= v36) {
            size_t prime = v36;
          }
          if (prime >= (unint64_t)v34) {
            goto LABEL_89;
          }
          if (prime) {
            goto LABEL_64;
          }
          int v53 = v251[0];
          v251[0] = 0;
          if (v53) {
            operator delete(v53);
          }
          v251[1] = 0;
          std::string::size_type v52 = *(void **)(v31 + 16);
          if (v52) {
            goto LABEL_90;
          }
LABEL_122:
          while (*((void *)&v252 + 1) == 1)
          {
            uint64_t v70 = MIL::Builder::OperationBuilder::GetOperator(*(MIL::Builder::OperationBuilder **)(v252 + 16));
            uint64_t v71 = (*(uint64_t (**)(uint64_t))(*(void *)v70 + 16))(v70);
            int v72 = *(char *)(v71 + 23);
            if (v72 < 0)
            {
              if (*(void *)(v71 + 8) != 19) {
                break;
              }
              uint64_t v71 = *(void *)v71;
            }
            else if (v72 != 19)
            {
              break;
            }
            BOOL v73 = *(void *)v71 == 0x736F695F4C4D3545 && *(void *)(v71 + 8) == 0x736E6172742E3631;
            if (!v73 || *(void *)(v71 + 11) != 0x726566736E617274) {
              break;
            }
            uint64_t v54 = v252;
            uint64_t v55 = v303;
            if (v303 >= v304)
            {
              uint64_t v58 = (char *)__p;
              uint64_t v59 = (v303 - (unsigned char *)__p) >> 4;
              unint64_t v60 = v59 + 1;
              if ((unint64_t)(v59 + 1) >> 60) {
                std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v61 = v304 - (unsigned char *)__p;
              if ((v304 - (unsigned char *)__p) >> 3 > v60) {
                unint64_t v60 = v61 >> 3;
              }
              if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFF0) {
                unint64_t v62 = 0xFFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v62 = v60;
              }
              if (v62 >> 60) {
                std::__throw_bad_array_new_length[abi:ne180100]();
              }
              int v63 = (char *)operator new(16 * v62);
              uint64_t v64 = &v63[16 * v59];
              long long v65 = *(_OWORD *)(v54 + 16);
              *(_OWORD *)uint64_t v64 = v65;
              if (*((void *)&v65 + 1))
              {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v65 + 1) + 8), 1uLL, memory_order_relaxed);
                uint64_t v55 = v303;
              }
              std::string v57 = v64 + 16;
              if (v55 == v58)
              {
                std::string __p = &v63[16 * v59];
                uint64_t v303 = v64 + 16;
                std::string v304 = &v63[16 * v62];
              }
              else
              {
                do
                {
                  long long v66 = *((_OWORD *)v55 - 1);
                  v55 -= 16;
                  *((_OWORD *)v64 - 1) = v66;
                  v64 -= 16;
                  *(void *)uint64_t v55 = 0;
                  *((void *)v55 + 1) = 0;
                }
                while (v55 != v58);
                uint64_t v58 = (char *)__p;
                uint64_t v67 = v303;
                std::string __p = v64;
                uint64_t v303 = v57;
                std::string v304 = &v63[16 * v62];
                while (v67 != v58)
                {
                  unint64_t v68 = (std::__shared_weak_count *)*((void *)v67 - 1);
                  if (v68 && !atomic_fetch_add(&v68->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                  {
                    ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
                    std::__shared_weak_count::__release_weak(v68);
                  }
                  v67 -= 16;
                }
              }
              if (v58) {
                operator delete(v58);
              }
            }
            else
            {
              *(void *)uint64_t v303 = *(void *)(v252 + 16);
              uint64_t v56 = *(void *)(v54 + 24);
              *((void *)v55 + 1) = v56;
              if (v56) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v56 + 8), 1uLL, memory_order_relaxed);
              }
              std::string v57 = v55 + 16;
            }
            uint64_t v303 = v57;
            MIL::Builder::OperationBuilder::GetOutputName(*(MIL::Builder::OperationBuilder **)(v252 + 16));
            uint64_t v69 = MIL::Builder::BlockBuilder::GetOperationsByInput();
            if (v251 != (void **)v69)
            {
              float v253 = *(float *)(v69 + 32);
              std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::shared_ptr<MIL::Builder::OperationBuilder>,void *> *>>(v251, *(void **)(v69 + 16), 0);
            }
          }
          Output = (MIL::Builder::Variable *)MIL::Builder::OperationBuilder::GetOutput(*((MIL::Builder::OperationBuilder **)v303
                                                                                       - 2));
          uint64_t Name = MIL::Builder::Variable::GetName(ArgumentForParameter);
          if (*(char *)(Name + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v301, *(const std::string::value_type **)Name, *(void *)(Name + 8));
          }
          else
          {
            long long v77 = *(_OWORD *)Name;
            v301.__r_.__value_.__r.__words[2] = *(void *)(Name + 16);
            *(_OWORD *)&v301.__r_.__value_.__l.__data_ = v77;
          }
          uint64_t v78 = MIL::Builder::Variable::GetName(Output);
          if (*(char *)(v78 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v300, *(const std::string::value_type **)v78, *(void *)(v78 + 8));
          }
          else
          {
            long long v79 = *(_OWORD *)v78;
            v300.__r_.__value_.__r.__words[2] = *(void *)(v78 + 16);
            *(_OWORD *)&v300.__r_.__value_.__l.__data_ = v79;
          }
          uint64_t Type = (E5Common::Utils *)MIL::Builder::Variable::TryGetType(ArgumentForParameter);
          uint64_t v81 = (E5Common::Utils *)MIL::Builder::Variable::TryGetType(Output);
          BOOL IsTensor = E5Common::Utils::IsTensor((uint64_t)Type);
          if (IsTensor != E5Common::Utils::IsTensor((uint64_t)v81)) {
            goto LABEL_466;
          }
          int IsTensorBuffer = E5Common::Utils::IsTensorBuffer(Type, v83);
          if (IsTensorBuffer != E5Common::Utils::IsTensorBuffer(v81, v85)) {
            goto LABEL_466;
          }
          int IsPixelBuffer = E5Common::Utils::IsPixelBuffer(Type, v86);
          if (IsPixelBuffer != E5Common::Utils::IsPixelBuffer(v81, v88)) {
            goto LABEL_466;
          }
          if (Type != v81)
          {
            if ((unint64_t)(v303 - (unsigned char *)__p) < 0x11) {
              goto LABEL_466;
            }
            (*(void (**)(MIL::Builder::OperationBuilder **__return_ptr))(*(void *)v248 + 48))(&v292);
            MIL::MILContext::GetOpset();
            *((unsigned char *)&v299.__r_.__value_.__s + 23) = 8;
            strcpy((char *)&v299, "transfer");
            MIL::IROpset::TryGetOperatorSharedPtr();
            MIL::Builder::OperationBuilder::Make();
            long long v89 = v287;
            if (v287 && !atomic_fetch_add(&v287->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
              std::__shared_weak_count::__release_weak(v89);
              if (SHIBYTE(v299.__r_.__value_.__r.__words[2]) < 0) {
LABEL_149:
              }
                operator delete(v299.__r_.__value_.__l.__data_);
            }
            else if (SHIBYTE(v299.__r_.__value_.__r.__words[2]) < 0)
            {
              goto LABEL_149;
            }
            uint64_t v90 = v293;
            if (v293 && !atomic_fetch_add(&v293->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
              std::__shared_weak_count::__release_weak(v90);
            }
            (*(void (**)(std::string *__return_ptr))(*(void *)v248 + 48))(&v299);
            MIL::IRTensorValueType::MakeScalar();
            std::string::size_type size = (std::__shared_weak_count *)v299.__r_.__value_.__l.__size_;
            if (v299.__r_.__value_.__l.__size_
              && !atomic_fetch_add((atomic_ullong *volatile)(v299.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
              std::__shared_weak_count::__release_weak(size);
            }
            char v285 = 4;
            strcpy((char *)v284, "from");
            char v281 = 9;
            strcpy((char *)v280, "cast_only");
            MIL::IRTensorValueType::MakeStringValue();
            std::string::size_type v282 = v299.__r_.__value_.__r.__words[0];
            if (v299.__r_.__value_.__r.__words[0]) {
              operator new();
            }
            long long v283 = 0;
            v299.__r_.__value_.__r.__words[0] = 0;
            MIL::Builder::OperationBuilder::AddInput();
            BOOL v161 = v286;
            if (v286 && !atomic_fetch_add(&v286->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
              std::__shared_weak_count::__release_weak(v161);
            }
            int v162 = v283;
            if (v283 && !atomic_fetch_add(&v283->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
              std::__shared_weak_count::__release_weak(v162);
            }
            std::string::size_type v163 = v299.__r_.__value_.__r.__words[0];
            v299.__r_.__value_.__r.__words[0] = 0;
            if (v163) {
              (*(void (**)(std::string::size_type))(*(void *)v163 + 8))(v163);
            }
            if (v281 < 0)
            {
              operator delete(v280[0]);
              if (v285 < 0) {
                goto LABEL_320;
              }
            }
            else
            {
              if ((v285 & 0x80000000) == 0) {
                goto LABEL_317;
              }
LABEL_320:
              operator delete(v284[0]);
            }
LABEL_317:
            char v278 = 2;
            strcpy((char *)v277, "to");
            char v274 = 9;
            strcpy((char *)v273, "cast_only");
            MIL::IRTensorValueType::MakeStringValue();
            std::string::size_type v275 = v299.__r_.__value_.__r.__words[0];
            if (v299.__r_.__value_.__r.__words[0]) {
              operator new();
            }
            std::string::size_type v276 = 0;
            v299.__r_.__value_.__r.__words[0] = 0;
            MIL::Builder::OperationBuilder::AddInput();
            uint64_t v164 = v279;
            if (v279 && !atomic_fetch_add(&v279->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
              std::__shared_weak_count::__release_weak(v164);
            }
            uint64_t v165 = v276;
            if (v276 && !atomic_fetch_add(&v276->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
              std::__shared_weak_count::__release_weak(v165);
            }
            std::string::size_type v166 = v299.__r_.__value_.__r.__words[0];
            v299.__r_.__value_.__r.__words[0] = 0;
            if (v166) {
              (*(void (**)(std::string::size_type))(*(void *)v166 + 8))(v166);
            }
            if (v274 < 0)
            {
              operator delete(v273[0]);
              if (v278 < 0) {
                goto LABEL_334;
              }
            }
            else
            {
              if ((v278 & 0x80000000) == 0) {
                goto LABEL_331;
              }
LABEL_334:
              operator delete(v277[0]);
            }
LABEL_331:
            char v271 = 6;
            strcpy((char *)v270, "values");
            if (SHIBYTE(v301.__r_.__value_.__r.__words[2]) < 0) {
              std::string::__init_copy_ctor_external(&v269, v301.__r_.__value_.__l.__data_, v301.__r_.__value_.__l.__size_);
            }
            else {
              std::string v269 = v301;
            }
            MIL::Builder::OperationBuilder::AddInput();
            std::string::size_type v167 = v272;
            if (v272 && !atomic_fetch_add(&v272->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
              std::__shared_weak_count::__release_weak(v167);
              if (SHIBYTE(v269.__r_.__value_.__r.__words[2]) < 0) {
                goto LABEL_369;
              }
LABEL_339:
              if (v271 < 0) {
LABEL_370:
              }
                operator delete(v270[0]);
            }
            else
            {
              if ((SHIBYTE(v269.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                goto LABEL_339;
              }
LABEL_369:
              operator delete(v269.__r_.__value_.__l.__data_);
              if (v271 < 0) {
                goto LABEL_370;
              }
            }
            int v168 = SHIBYTE(v300.__r_.__value_.__r.__words[2]);
            if ((v300.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              size_t v169 = HIBYTE(v300.__r_.__value_.__r.__words[2]);
            }
            else {
              size_t v169 = v300.__r_.__value_.__l.__size_;
            }
            unint64_t v170 = v169 + 4;
            if (v169 + 4 > 0x7FFFFFFFFFFFFFF7) {
              std::string::__throw_length_error[abi:ne180100]();
            }
            if (v170 >= 0x17)
            {
              uint64_t v172 = (v170 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v170 | 7) != 0x17) {
                uint64_t v172 = v170 | 7;
              }
              uint64_t v173 = v172 + 1;
              size_t v171 = operator new(v172 + 1);
              size_t v266 = v169 + 4;
              unint64_t v267 = v173 | 0x8000000000000000;
              int v265 = v171;
            }
            else
            {
              size_t v266 = 0;
              unint64_t v267 = 0;
              int v265 = 0;
              size_t v171 = &v265;
              HIBYTE(v267) = v169 + 4;
              if (!v169) {
                goto LABEL_354;
              }
            }
            if (v168 >= 0) {
              size_t v174 = &v300;
            }
            else {
              size_t v174 = (std::string *)v300.__r_.__value_.__r.__words[0];
            }
            memmove(v171, v174, v169);
LABEL_354:
            strcpy((char *)v171 + v169, "_old");
            MIL::Builder::OperationBuilder::RenameOutput();
            int v175 = v268;
            if (v268 && !atomic_fetch_add(&v268->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
              std::__shared_weak_count::__release_weak(v175);
              if (SHIBYTE(v267) < 0) {
                goto LABEL_372;
              }
LABEL_357:
              if ((SHIBYTE(v300.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                goto LABEL_358;
              }
LABEL_373:
              std::string::__init_copy_ctor_external(&v263, v300.__r_.__value_.__l.__data_, v300.__r_.__value_.__l.__size_);
            }
            else
            {
              if ((SHIBYTE(v267) & 0x80000000) == 0) {
                goto LABEL_357;
              }
LABEL_372:
              operator delete(v265);
              if (SHIBYTE(v300.__r_.__value_.__r.__words[2]) < 0) {
                goto LABEL_373;
              }
LABEL_358:
              std::string v263 = v300;
            }
            MIL::Builder::OperationBuilder::GetOutputType(*((MIL::Builder::OperationBuilder **)v303 - 2));
            MIL::Builder::OperationBuilder::AddOutput();
            size_t v179 = v264;
            if (v264 && !atomic_fetch_add(&v264->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
              std::__shared_weak_count::__release_weak(v179);
              if (SHIBYTE(v263.__r_.__value_.__r.__words[2]) < 0) {
LABEL_377:
              }
                operator delete(v263.__r_.__value_.__l.__data_);
            }
            else if (SHIBYTE(v263.__r_.__value_.__r.__words[2]) < 0)
            {
              goto LABEL_377;
            }
            int v261 = v296;
            BOOL v262 = (std::__shared_weak_count *)v297;
            if (v297) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)v297 + 1, 1uLL, memory_order_relaxed);
            }
            int v180 = (std::__shared_weak_count *)*((void *)__p + 1);
            uint64_t v259 = *(void *)__p;
            size_t v260 = v180;
            if (v180) {
              atomic_fetch_add_explicit(&v180->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            MIL::Builder::BlockBuilder::AddOperation();
            BOOL v181 = v260;
            if (v260 && !atomic_fetch_add(&v260->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v181->__on_zero_shared)(v181);
              std::__shared_weak_count::__release_weak(v181);
            }
            int v182 = v262;
            if (v262 && !atomic_fetch_add(&v262->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
              std::__shared_weak_count::__release_weak(v182);
            }
            int v183 = SHIBYTE(v300.__r_.__value_.__r.__words[2]);
            std::string::size_type v184 = v300.__r_.__value_.__l.__size_;
            if ((v300.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              size_t v185 = HIBYTE(v300.__r_.__value_.__r.__words[2]);
            }
            else {
              size_t v185 = v300.__r_.__value_.__l.__size_;
            }
            unint64_t v186 = v185 + 4;
            if (v185 + 4 > 0x7FFFFFFFFFFFFFF7) {
              std::string::__throw_length_error[abi:ne180100]();
            }
            if (v186 >= 0x17)
            {
              std::string::size_type v247 = v300.__r_.__value_.__l.__size_;
              uint64_t v188 = (v186 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v186 | 7) != 0x17) {
                uint64_t v188 = v186 | 7;
              }
              uint64_t v189 = v188 + 1;
              std::string::size_type v187 = operator new(v188 + 1);
              v299.__r_.__value_.__r.__words[2] = v189 | 0x8000000000000000;
              v299.__r_.__value_.__r.__words[0] = (std::string::size_type)v187;
              v299.__r_.__value_.__l.__size_ = v185 + 4;
              std::string::size_type v184 = v247;
            }
            else
            {
              memset(&v299, 0, sizeof(v299));
              std::string::size_type v187 = &v299;
              *((unsigned char *)&v299.__r_.__value_.__s + 23) = v185 + 4;
              if (!v185)
              {
                strcpy((char *)&v299, "_old");
                if ((SHIBYTE(v300.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                  goto LABEL_395;
                }
LABEL_403:
                std::string::__init_copy_ctor_external(&v258, v300.__r_.__value_.__l.__data_, v184);
                goto LABEL_404;
              }
            }
            if (v183 >= 0) {
              uint64_t v190 = &v300;
            }
            else {
              uint64_t v190 = (std::string *)v300.__r_.__value_.__r.__words[0];
            }
            memmove(v187, v190, v185);
            strcpy((char *)v187 + v185, "_old");
            if (v183 < 0) {
              goto LABEL_403;
            }
LABEL_395:
            std::string v258 = v300;
LABEL_404:
            uint64_t v256 = 0;
            int v257 = 0;
            MIL::Builder::BlockBuilder::ReplaceUsesOfInputVariable();
            std::string::size_type v191 = v257;
            if (v257 && !atomic_fetch_add(&v257->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v191->__on_zero_shared)(v191);
              std::__shared_weak_count::__release_weak(v191);
              if (SHIBYTE(v258.__r_.__value_.__r.__words[2]) < 0) {
                goto LABEL_459;
              }
LABEL_407:
              if (SHIBYTE(v299.__r_.__value_.__r.__words[2]) < 0) {
LABEL_460:
              }
                operator delete(v299.__r_.__value_.__l.__data_);
            }
            else
            {
              if ((SHIBYTE(v258.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                goto LABEL_407;
              }
LABEL_459:
              operator delete(v258.__r_.__value_.__l.__data_);
              if (SHIBYTE(v299.__r_.__value_.__r.__words[2]) < 0) {
                goto LABEL_460;
              }
            }
            int v192 = (unint64_t *)__p;
            char v193 = (unint64_t *)v303;
            while (v192 != v193)
            {
              unint64_t v194 = *v192;
              size_t v195 = v310;
              uint64_t v196 = &v310;
LABEL_413:
              uint64_t v197 = v196;
              if (v195)
              {
                do
                {
                  uint64_t v196 = (uint64_t **)v195;
                  unint64_t v198 = v195[4];
                  if (v194 < v198)
                  {
                    size_t v195 = *v196;
                    goto LABEL_413;
                  }
                  if (v198 >= v194) {
                    goto LABEL_442;
                  }
                  size_t v195 = v196[1];
                }
                while (v195);
                uint64_t v197 = v196 + 1;
              }
              BOOL v199 = (uint64_t *)operator new(0x28uLL);
              v199[4] = v194;
              uint64_t *v199 = 0;
              v199[1] = 0;
              v199[2] = (uint64_t)v196;
              *uint64_t v197 = v199;
              if (*v309)
              {
                uint64_t v309 = (uint64_t **)*v309;
                BOOL v199 = *v197;
              }
              uint64_t v200 = v310;
              *((unsigned char *)v199 + 24) = v199 == v310;
              if (v199 != v200)
              {
                do
                {
                  uint64_t v201 = v199[2];
                  if (*(unsigned char *)(v201 + 24)) {
                    break;
                  }
                  uint8x8_t v202 = *(uint64_t **)(v201 + 16);
                  uint64_t v203 = *v202;
                  if (*v202 == v201)
                  {
                    uint64_t v206 = v202[1];
                    if (!v206 || (int v207 = *(unsigned __int8 *)(v206 + 24), v204 = (unsigned char *)(v206 + 24), v207))
                    {
                      if (*(uint64_t **)v201 == v199)
                      {
                        *(unsigned char *)(v201 + 24) = 1;
                        *((unsigned char *)v202 + 24) = 0;
                        uint64_t v210 = *(void *)(v201 + 8);
                        *uint8x8_t v202 = v210;
                        if (v210) {
                          goto LABEL_434;
                        }
                      }
                      else
                      {
                        char v208 = *(uint64_t **)(v201 + 8);
                        uint64_t v209 = *v208;
                        *(void *)(v201 + 8) = *v208;
                        if (v209)
                        {
                          *(void *)(v209 + 16) = v201;
                          uint8x8_t v202 = *(uint64_t **)(v201 + 16);
                        }
                        v208[2] = (uint64_t)v202;
                        *(void *)(*(void *)(v201 + 16) + 8 * (**(void **)(v201 + 16) != v201)) = v208;
                        uint64_t *v208 = v201;
                        *(void *)(v201 + 16) = v208;
                        uint8x8_t v202 = (uint64_t *)v208[2];
                        uint64_t v201 = *v202;
                        *((unsigned char *)v208 + 24) = 1;
                        *((unsigned char *)v202 + 24) = 0;
                        uint64_t v210 = *(void *)(v201 + 8);
                        *uint8x8_t v202 = v210;
                        if (v210) {
LABEL_434:
                        }
                          *(void *)(v210 + 16) = v202;
                      }
                      *(void *)(v201 + 16) = v202[2];
                      *(void *)(v202[2] + 8 * (*(void *)v202[2] != (void)v202)) = v201;
                      *(void *)(v201 + 8) = v202;
LABEL_440:
                      v202[2] = v201;
                      break;
                    }
                  }
                  else if (!v203 || (v205 = *(unsigned __int8 *)(v203 + 24), size_t v204 = (unsigned char *)(v203 + 24), v205))
                  {
                    if (*(uint64_t **)v201 == v199)
                    {
                      uint64_t v214 = v199[1];
                      *(void *)uint64_t v201 = v214;
                      if (v214)
                      {
                        *(void *)(v214 + 16) = v201;
                        uint8x8_t v202 = *(uint64_t **)(v201 + 16);
                      }
                      v199[2] = (uint64_t)v202;
                      *(void *)(*(void *)(v201 + 16) + 8 * (**(void **)(v201 + 16) != v201)) = v199;
                      v199[1] = v201;
                      *(void *)(v201 + 16) = v199;
                      uint8x8_t v202 = (uint64_t *)v199[2];
                      *((unsigned char *)v199 + 24) = 1;
                      *((unsigned char *)v202 + 24) = 0;
                      uint64_t v201 = v202[1];
                      uint64_t v211 = *(uint64_t **)v201;
                      v202[1] = *(void *)v201;
                      if (v211) {
LABEL_438:
                      }
                        v211[2] = (uint64_t)v202;
                    }
                    else
                    {
                      *(unsigned char *)(v201 + 24) = 1;
                      *((unsigned char *)v202 + 24) = 0;
                      uint64_t v201 = v202[1];
                      uint64_t v211 = *(uint64_t **)v201;
                      v202[1] = *(void *)v201;
                      if (v211) {
                        goto LABEL_438;
                      }
                    }
                    *(void *)(v201 + 16) = v202[2];
                    *(void *)(v202[2] + 8 * (*(void *)v202[2] != (void)v202)) = v201;
                    *(void *)uint64_t v201 = v202;
                    goto LABEL_440;
                  }
                  *(unsigned char *)(v201 + 24) = 1;
                  BOOL v199 = v202;
                  *((unsigned char *)v202 + 24) = v202 == v200;
                  unsigned char *v204 = 1;
                }
                while (v202 != v200);
              }
              ++v311;
              unint64_t v194 = *v192;
LABEL_442:
              uint64_t v212 = (std::__shared_weak_count *)v192[1];
              unint64_t v254 = v194;
              uint64_t v255 = v212;
              if (v212) {
                atomic_fetch_add_explicit(&v212->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              MIL::Builder::BlockBuilder::RemoveOperation();
              char v213 = v255;
              if (v255 && !atomic_fetch_add(&v255->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v213->__on_zero_shared)(v213);
                std::__shared_weak_count::__release_weak(v213);
              }
              v192 += 2;
            }
            int v215 = (std::__shared_weak_count *)v297;
            if (v297 && !atomic_fetch_add((atomic_ullong *volatile)v297 + 1, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v215->__on_zero_shared)(v215);
              std::__shared_weak_count::__release_weak(v215);
            }
            goto LABEL_466;
          }
          uint64_t v92 = MIL::Builder::BlockBuilder::GetOperationsByInput();
          std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>::unordered_set((uint64_t)&v299, v92);
          BOOL v93 = (void *)v299.__r_.__value_.__r.__words[2];
          if (v299.__r_.__value_.__r.__words[2])
          {
            do
            {
              if (SHIBYTE(v301.__r_.__value_.__r.__words[2]) < 0) {
                std::string::__init_copy_ctor_external(&v298, v301.__r_.__value_.__l.__data_, v301.__r_.__value_.__l.__size_);
              }
              else {
                std::string v298 = v301;
              }
              MIL::Builder::OperationBuilder::RenameArgument();
              if (SHIBYTE(v298.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v298.__r_.__value_.__l.__data_);
              }
              BOOL v93 = (void *)*v93;
            }
            while (v93);
          }
          unint64_t v94 = 0;
          while (2)
          {
            MIL::Builder::BlockBuilder::GetOutputNames((uint64_t *)&v296, v312);
            size_t v96 = v297;
            uint64_t v97 = (void **)v296;
            if (v296)
            {
              if (v297 == v296)
              {
                uint64_t v99 = v297;
              }
              else
              {
                uint64_t v98 = (void **)v297;
                do
                {
                  if (*((char *)v98 - 1) < 0) {
                    operator delete(*(v98 - 3));
                  }
                  v98 -= 3;
                }
                while (v98 != v97);
                uint64_t v99 = v296;
              }
              size_t v297 = v97;
              operator delete(v99);
            }
            if (v94 >= 0xAAAAAAAAAAAAAAABLL * ((v96 - (unsigned char *)v97) >> 3))
            {
              unint64_t v125 = (unint64_t *)__p;
              std::string::size_type v126 = (unint64_t *)v303;
LABEL_229:
              if (v125 == v126) {
                goto LABEL_463;
              }
              unint64_t v127 = *v125;
              char v128 = v310;
              for (unint64_t k = &v310; ; v128 = *k)
              {
                uint64_t v130 = k;
                if (!v128) {
                  break;
                }
                while (1)
                {
                  unint64_t k = (uint64_t **)v128;
                  unint64_t v131 = v128[4];
                  if (v127 < v131) {
                    break;
                  }
                  if (v131 >= v127) {
                    goto LABEL_261;
                  }
                  char v128 = k[1];
                  if (!v128)
                  {
                    uint64_t v130 = k + 1;
                    goto LABEL_237;
                  }
                }
              }
LABEL_237:
              int v132 = (uint64_t *)operator new(0x28uLL);
              v132[4] = v127;
              uint64_t *v132 = 0;
              v132[1] = 0;
              v132[2] = (uint64_t)k;
              *uint64_t v130 = v132;
              if (*v309)
              {
                uint64_t v309 = (uint64_t **)*v309;
                int v132 = *v130;
              }
              char v133 = v310;
              *((unsigned char *)v132 + 24) = v132 == v310;
              if (v132 == v133) {
                goto LABEL_260;
              }
              while (1)
              {
                uint64_t v134 = v132[2];
                if (*(unsigned char *)(v134 + 24)) {
                  goto LABEL_260;
                }
                uint8x8_t v135 = *(uint64_t **)(v134 + 16);
                uint64_t v136 = *v135;
                if (*v135 == v134)
                {
                  uint64_t v139 = v135[1];
                  if (!v139 || (int v140 = *(unsigned __int8 *)(v139 + 24), v137 = (unsigned char *)(v139 + 24), v140))
                  {
                    if (*(uint64_t **)v134 == v132)
                    {
                      *(unsigned char *)(v134 + 24) = 1;
                      *((unsigned char *)v135 + 24) = 0;
                      uint64_t v143 = *(void *)(v134 + 8);
                      uint64_t *v135 = v143;
                      if (v143) {
                        goto LABEL_253;
                      }
                    }
                    else
                    {
                      size_t v141 = *(uint64_t **)(v134 + 8);
                      uint64_t v142 = *v141;
                      *(void *)(v134 + 8) = *v141;
                      if (v142)
                      {
                        *(void *)(v142 + 16) = v134;
                        uint8x8_t v135 = *(uint64_t **)(v134 + 16);
                      }
                      v141[2] = (uint64_t)v135;
                      *(void *)(*(void *)(v134 + 16) + 8 * (**(void **)(v134 + 16) != v134)) = v141;
                      *size_t v141 = v134;
                      *(void *)(v134 + 16) = v141;
                      uint8x8_t v135 = (uint64_t *)v141[2];
                      uint64_t v134 = *v135;
                      *((unsigned char *)v141 + 24) = 1;
                      *((unsigned char *)v135 + 24) = 0;
                      uint64_t v143 = *(void *)(v134 + 8);
                      uint64_t *v135 = v143;
                      if (v143) {
LABEL_253:
                      }
                        *(void *)(v143 + 16) = v135;
                    }
                    *(void *)(v134 + 16) = v135[2];
                    *(void *)(v135[2] + 8 * (*(void *)v135[2] != (void)v135)) = v134;
                    *(void *)(v134 + 8) = v135;
LABEL_259:
                    v135[2] = v134;
LABEL_260:
                    ++v311;
                    unint64_t v127 = *v125;
LABEL_261:
                    size_t v145 = (std::__shared_weak_count *)v125[1];
                    unint64_t v288 = v127;
                    size_t v289 = v145;
                    if (v145) {
                      atomic_fetch_add_explicit(&v145->__shared_owners_, 1uLL, memory_order_relaxed);
                    }
                    MIL::Builder::BlockBuilder::RemoveOperation();
                    uint64_t v146 = v289;
                    if (v289 && !atomic_fetch_add(&v289->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                    {
                      ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
                      std::__shared_weak_count::__release_weak(v146);
                    }
                    v125 += 2;
                    goto LABEL_229;
                  }
                }
                else if (!v136 || (int v138 = *(unsigned __int8 *)(v136 + 24), v137 = (unsigned char *)(v136 + 24), v138))
                {
                  if (*(uint64_t **)v134 == v132)
                  {
                    uint64_t v147 = v132[1];
                    *(void *)uint64_t v134 = v147;
                    if (v147)
                    {
                      *(void *)(v147 + 16) = v134;
                      uint8x8_t v135 = *(uint64_t **)(v134 + 16);
                    }
                    v132[2] = (uint64_t)v135;
                    *(void *)(*(void *)(v134 + 16) + 8 * (**(void **)(v134 + 16) != v134)) = v132;
                    v132[1] = v134;
                    *(void *)(v134 + 16) = v132;
                    uint8x8_t v135 = (uint64_t *)v132[2];
                    *((unsigned char *)v132 + 24) = 1;
                    *((unsigned char *)v135 + 24) = 0;
                    uint64_t v134 = v135[1];
                    int v144 = *(uint64_t **)v134;
                    v135[1] = *(void *)v134;
                    if (v144) {
LABEL_257:
                    }
                      v144[2] = (uint64_t)v135;
                  }
                  else
                  {
                    *(unsigned char *)(v134 + 24) = 1;
                    *((unsigned char *)v135 + 24) = 0;
                    uint64_t v134 = v135[1];
                    int v144 = *(uint64_t **)v134;
                    v135[1] = *(void *)v134;
                    if (v144) {
                      goto LABEL_257;
                    }
                  }
                  *(void *)(v134 + 16) = v135[2];
                  *(void *)(v135[2] + 8 * (*(void *)v135[2] != (void)v135)) = v134;
                  *(void *)uint64_t v134 = v135;
                  goto LABEL_259;
                }
                *(unsigned char *)(v134 + 24) = 1;
                int v132 = v135;
                *((unsigned char *)v135 + 24) = v135 == v133;
                *uint64_t v137 = 1;
                if (v135 == v133) {
                  goto LABEL_260;
                }
              }
            }
            MIL::Builder::BlockBuilder::GetOutputNames((uint64_t *)&v296, v312);
            uint64_t v100 = v296;
            int v101 = (char *)v296 + 24 * v94;
            if ((v300.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v102 = HIBYTE(v300.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v102 = v300.__r_.__value_.__l.__size_;
            }
            uint64_t v103 = v101[23];
            int v104 = (char)v103;
            if ((v103 & 0x80u) != 0) {
              uint64_t v103 = *((void *)v101 + 1);
            }
            if (v102 == v103)
            {
              if (v104 >= 0) {
                int v105 = (unsigned __int8 *)v296 + 24 * v94;
              }
              else {
                int v105 = *(unsigned __int8 **)v101;
              }
              if ((*((unsigned char *)&v300.__r_.__value_.__s + 23) & 0x80) != 0)
              {
                BOOL v113 = memcmp(v300.__r_.__value_.__l.__data_, v105, v300.__r_.__value_.__l.__size_) == 0;
                uint64_t v114 = (void **)v297;
                int v95 = v100;
                if (v297 == v100) {
                  goto LABEL_167;
                }
              }
              else if (*((unsigned char *)&v300.__r_.__value_.__s + 23))
              {
                uint64_t v106 = HIBYTE(v300.__r_.__value_.__r.__words[2]) - 1;
                int v107 = &v300;
                do
                {
                  int v109 = v107->__r_.__value_.__s.__data_[0];
                  int v107 = (std::string *)((char *)v107 + 1);
                  int v108 = v109;
                  int v111 = *v105++;
                  int v110 = v111;
                  BOOL v35 = v106-- != 0;
                  char v112 = v35;
                  BOOL v113 = v108 == v110;
                }
                while (v108 == v110 && (v112 & 1) != 0);
                if (!v296)
                {
                  if (v108 == v110)
                  {
LABEL_209:
                    MIL::Builder::BlockBuilder::ReplaceOutput();
                    size_t v115 = (unint64_t *)__p;
                    uint64_t v116 = (unint64_t *)v303;
                    while (v115 != v116)
                    {
                      unint64_t v117 = *v115;
                      char v118 = v310;
                      uint64_t v119 = &v310;
LABEL_214:
                      int v120 = v119;
                      if (v118)
                      {
                        do
                        {
                          uint64_t v119 = (uint64_t **)v118;
                          unint64_t v121 = v118[4];
                          if (v117 < v121)
                          {
                            char v118 = *v119;
                            goto LABEL_214;
                          }
                          if (v121 >= v117) {
                            goto LABEL_222;
                          }
                          char v118 = v119[1];
                        }
                        while (v118);
                        int v120 = v119 + 1;
                      }
                      uint64_t v122 = (uint64_t *)operator new(0x28uLL);
                      v122[4] = v117;
                      uint64_t *v122 = 0;
                      v122[1] = 0;
                      v122[2] = (uint64_t)v119;
                      void *v120 = v122;
                      if (*v309)
                      {
                        uint64_t v309 = (uint64_t **)*v309;
                        uint64_t v122 = *v120;
                      }
                      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v310, v122);
                      ++v311;
                      unint64_t v117 = *v115;
LABEL_222:
                      char v123 = (std::__shared_weak_count *)v115[1];
                      unint64_t v294 = v117;
                      uint64_t v295 = v123;
                      if (v123) {
                        atomic_fetch_add_explicit(&v123->__shared_owners_, 1uLL, memory_order_relaxed);
                      }
                      MIL::Builder::BlockBuilder::RemoveOperation();
                      uint64_t v124 = v295;
                      if (v295 && !atomic_fetch_add(&v295->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                      {
                        ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
                        std::__shared_weak_count::__release_weak(v124);
                      }
                      v115 += 2;
                    }
                    MIL::Builder::BlockBuilder::GetOperations((uint64_t *)&v296, v312);
                    char v148 = (MIL::Builder::OperationBuilder **)v296;
                    size_t v149 = (MIL::Builder::OperationBuilder **)v297;
                    if (v296 == v297)
                    {
                      if (v296) {
                        goto LABEL_360;
                      }
                      goto LABEL_463;
                    }
                    while (2)
                    {
                      uint64_t v150 = *v148;
                      uint64_t v151 = (std::__shared_weak_count *)v148[1];
                      long long v292 = *v148;
                      uint64_t v293 = v151;
                      if (v151) {
                        atomic_fetch_add_explicit(&v151->__shared_owners_, 1uLL, memory_order_relaxed);
                      }
                      unint64_t v152 = 0;
LABEL_281:
                      if (v152 >= MIL::Builder::OperationBuilder::GetNumOutputs(v150))
                      {
                        int v160 = v293;
                        if (v293 && !atomic_fetch_add(&v293->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                        {
                          ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
                          std::__shared_weak_count::__release_weak(v160);
                        }
                        v148 += 2;
                        if (v148 != v149) {
                          continue;
                        }
                        char v148 = (MIL::Builder::OperationBuilder **)v296;
                        if (v296)
                        {
LABEL_360:
                          int v176 = (MIL::Builder::OperationBuilder **)v297;
                          size_t v177 = v148;
                          if (v297 != v148)
                          {
                            do
                            {
                              char v178 = (std::__shared_weak_count *)*(v176 - 1);
                              if (v178 && !atomic_fetch_add(&v178->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                              {
                                ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
                                std::__shared_weak_count::__release_weak(v178);
                              }
                              v176 -= 2;
                            }
                            while (v176 != v148);
                            size_t v177 = v296;
                          }
                          size_t v297 = v148;
                          operator delete(v177);
                        }
LABEL_463:
                        uint64_t v216 = (void *)v299.__r_.__value_.__r.__words[2];
                        if (v299.__r_.__value_.__r.__words[2])
                        {
                          do
                          {
                            uint64_t v219 = v216;
                            uint64_t v216 = (void *)*v216;
                            BOOL v220 = (std::__shared_weak_count *)v219[3];
                            if (v220 && !atomic_fetch_add(&v220->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                            {
                              ((void (*)(std::__shared_weak_count *))v220->__on_zero_shared)(v220);
                              std::__shared_weak_count::__release_weak(v220);
                            }
                            operator delete(v219);
                          }
                          while (v216);
                        }
                        uint64_t v217 = (void *)v299.__r_.__value_.__r.__words[0];
                        v299.__r_.__value_.__r.__words[0] = 0;
                        if (v217) {
                          operator delete(v217);
                        }
LABEL_466:
                        if ((SHIBYTE(v300.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                        {
                          if ((SHIBYTE(v301.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                            goto LABEL_468;
                          }
LABEL_475:
                          operator delete(v301.__r_.__value_.__l.__data_);
                          char v218 = (void *)v252;
                          if (!(void)v252) {
                            goto LABEL_476;
                          }
                          do
                          {
LABEL_482:
                            uint64_t v224 = v218;
                            char v218 = (void *)*v218;
                            uint64_t v225 = (std::__shared_weak_count *)v224[3];
                            if (v225 && !atomic_fetch_add(&v225->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                            {
                              ((void (*)(std::__shared_weak_count *))v225->__on_zero_shared)(v225);
                              std::__shared_weak_count::__release_weak(v225);
                            }
                            operator delete(v224);
                          }
                          while (v218);
                          goto LABEL_476;
                        }
                        operator delete(v300.__r_.__value_.__l.__data_);
                        if (SHIBYTE(v301.__r_.__value_.__r.__words[2]) < 0) {
                          goto LABEL_475;
                        }
LABEL_468:
                        char v218 = (void *)v252;
                        if ((void)v252) {
                          goto LABEL_482;
                        }
LABEL_476:
                        uint64_t v221 = v251[0];
                        v251[0] = 0;
                        if (v221) {
                          operator delete(v221);
                        }
                        uint64_t v222 = (char *)__p;
                        if (__p)
                        {
                          char v223 = v303;
                          uint64_t v18 = __p;
                          if (v303 != __p)
                          {
                            do
                            {
                              int64_t v226 = (std::__shared_weak_count *)*((void *)v223 - 1);
                              if (v226 && !atomic_fetch_add(&v226->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                              {
                                ((void (*)(std::__shared_weak_count *))v226->__on_zero_shared)(v226);
                                std::__shared_weak_count::__release_weak(v226);
                              }
                              v223 -= 16;
                            }
                            while (v223 != v222);
                            uint64_t v18 = __p;
                          }
                          uint64_t v303 = v222;
                          operator delete(v18);
                        }
                        goto LABEL_20;
                      }
                      break;
                    }
                    char v153 = (MIL::Builder::Variable *)MIL::Builder::OperationBuilder::GetOutput(v292);
                    size_t v154 = (unsigned __int8 *)MIL::Builder::Variable::GetName(v153);
                    uint64_t v155 = v154[23];
                    if ((v155 & 0x80u) == 0) {
                      uint64_t v156 = v154[23];
                    }
                    else {
                      uint64_t v156 = *((void *)v154 + 1);
                    }
                    std::string::size_type v157 = HIBYTE(v301.__r_.__value_.__r.__words[2]);
                    if ((v301.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                      std::string::size_type v157 = v301.__r_.__value_.__l.__size_;
                    }
                    if (v156 == v157)
                    {
                      if ((v301.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                        char v158 = &v301;
                      }
                      else {
                        char v158 = (std::string *)v301.__r_.__value_.__r.__words[0];
                      }
                      if ((v155 & 0x80) != 0)
                      {
                        if (!memcmp(*(const void **)v154, v158, *((void *)v154 + 1))) {
                          goto LABEL_295;
                        }
                      }
                      else
                      {
                        if (v154[23])
                        {
                          while (*v154 == v158->__r_.__value_.__s.__data_[0])
                          {
                            ++v154;
                            char v158 = (std::string *)((char *)v158 + 1);
                            if (!--v155) {
                              goto LABEL_295;
                            }
                          }
                          goto LABEL_280;
                        }
LABEL_295:
                        if (SHIBYTE(v300.__r_.__value_.__r.__words[2]) < 0) {
                          std::string::__init_copy_ctor_external(&v290, v300.__r_.__value_.__l.__data_, v300.__r_.__value_.__l.__size_);
                        }
                        else {
                          std::string v290 = v300;
                        }
                        MIL::Builder::OperationBuilder::RenameOutput();
                        size_t v159 = v291;
                        if (v291 && !atomic_fetch_add(&v291->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                        {
                          ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
                          std::__shared_weak_count::__release_weak(v159);
                          if (SHIBYTE(v290.__r_.__value_.__r.__words[2]) < 0) {
LABEL_301:
                          }
                            operator delete(v290.__r_.__value_.__l.__data_);
                        }
                        else if (SHIBYTE(v290.__r_.__value_.__r.__words[2]) < 0)
                        {
                          goto LABEL_301;
                        }
                      }
                    }
LABEL_280:
                    ++v152;
                    uint64_t v150 = v292;
                    goto LABEL_281;
                  }
                  goto LABEL_168;
                }
                uint64_t v114 = (void **)v297;
                int v95 = v296;
                if (v297 == v296)
                {
LABEL_167:
                  size_t v297 = v100;
                  operator delete(v95);
                  if (v113) {
                    goto LABEL_209;
                  }
LABEL_168:
                  ++v94;
                  continue;
                }
              }
              else
              {
                BOOL v113 = 1;
                uint64_t v114 = (void **)v297;
                int v95 = v296;
                if (v297 == v296) {
                  goto LABEL_167;
                }
              }
            }
            else
            {
              BOOL v113 = 0;
              uint64_t v114 = (void **)v297;
              int v95 = v296;
              if (v297 == v296) {
                goto LABEL_167;
              }
            }
            break;
          }
          do
          {
            if (*((char *)v114 - 1) < 0) {
              operator delete(*(v114 - 3));
            }
            v114 -= 3;
          }
          while (v114 != v100);
          int v95 = v296;
          goto LABEL_167;
        }
LABEL_20:
        v16 += 16;
      }
      while (v16 != v17);
      uint64_t v16 = (uint64_t)v305;
      if (v305)
      {
LABEL_490:
        uint64_t v227 = v306;
        char v228 = (void *)v16;
        if (v306 != v16)
        {
          do
          {
            int v229 = *(std::__shared_weak_count **)(v227 - 8);
            if (v229 && !atomic_fetch_add(&v229->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v229->__on_zero_shared)(v229);
              std::__shared_weak_count::__release_weak(v229);
            }
            v227 -= 16;
          }
          while (v227 != v16);
          char v228 = v305;
        }
        uint64_t v306 = v16;
        operator delete(v228);
      }
LABEL_498:
      MIL::Builder::BlockBuilder::GetOutputNames((uint64_t *)v251, v312);
      uint64_t v231 = (void **)v251[0];
      unint64_t v230 = (void **)v251[1];
      if (v251[0] != v251[1])
      {
        do
        {
          MIL::Builder::BlockBuilder::RemoveOutput();
          v231 += 3;
        }
        while (v231 != v230);
        uint64_t v231 = (void **)v251[0];
      }
      if (v231)
      {
        long long v232 = (void **)v251[1];
        unint64_t v233 = v231;
        if (v251[1] != v231)
        {
          do
          {
            if (*((char *)v232 - 1) < 0) {
              operator delete(*(v232 - 3));
            }
            v232 -= 3;
          }
          while (v232 != v231);
          unint64_t v233 = (void **)v251[0];
        }
        v251[1] = v231;
        operator delete(v233);
      }
      uint64_t v235 = (uint64_t)v307;
      uint64_t v234 = v308;
      if (v307 != (void *)v308)
      {
        do
        {
          MIL::Builder::BlockBuilder::AddOutput();
          v235 += 24;
        }
        while (v235 != v234);
        uint64_t v235 = (uint64_t)v307;
      }
      if (v235)
      {
        uint64_t v236 = v308;
        uint64_t v237 = (void *)v235;
        if (v308 != v235)
        {
          do
          {
            if (*(char *)(v236 - 1) < 0) {
              operator delete(*(void **)(v236 - 24));
            }
            v236 -= 24;
          }
          while (v236 != v235);
          uint64_t v237 = v307;
        }
        uint64_t v308 = v235;
        operator delete(v237);
      }
      std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v309, v310);
      uint64_t v238 = v313;
      if (v313 && !atomic_fetch_add(&v313->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v238->__on_zero_shared)(v238);
        std::__shared_weak_count::__release_weak(v238);
        uint64_t v239 = v314;
        if (v314) {
          goto LABEL_523;
        }
      }
      else
      {
        uint64_t v239 = v314;
        if (v314)
        {
LABEL_523:
          if (!atomic_fetch_add(&v239->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v239->__on_zero_shared)(v239);
            std::__shared_weak_count::__release_weak(v239);
          }
        }
      }
      uint64_t v13 = v250 + 24;
    }
    while (v250 + 24 != v249);
  }
LABEL_527:
  MIL::Builder::ProgramBuilder::CreateProgram((uint64_t *)v251, v319);
  if (((*((uint64_t (**)(void **))v251[1] + 2))(&v251[1]) & 1) == 0)
  {
    size_t v246 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    MIL::MILResult::GetMessage((MIL::MILResult *)&v251[1]);
    std::operator+<char>();
    std::runtime_error::runtime_error(v246, &v299);
    __cxa_throw(v246, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v240 = v251[0];
  v251[0] = 0;
  *a3 = v240;
  MEMORY[0x192FEF390](&v251[1]);
  long long v241 = v251[0];
  v251[0] = 0;
  if (v241) {
    (*(void (**)(void *))(*(void *)v241 + 8))(v241);
  }
  if (SHIBYTE(v316) < 0) {
    operator delete(__dst[0]);
  }
  uint64_t result = v319;
  uint64_t v319 = 0;
  if (result) {
    return (MIL::Builder::ProgramBuilder *)(*(uint64_t (**)(MIL::Builder::ProgramBuilder *))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_1922D4E4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  if (SLOBYTE(STACK[0x2BF]) < 0)
  {
    operator delete((void *)STACK[0x2A8]);
    if ((v10 & 1) == 0)
    {
LABEL_6:
      std::pair<std::unique_ptr<MIL::IRProgram>,MIL::ValidationResult>::~pair((uint64_t *)va);
      if (*(char *)(v11 - 113) < 0)
      {
        operator delete(*(void **)(v11 - 136));
        uint64_t v13 = *(void *)(v11 - 96);
        *(void *)(v11 - 96) = 0;
        if (v13) {
          goto LABEL_8;
        }
      }
      else
      {
        uint64_t v13 = *(void *)(v11 - 96);
        *(void *)(v11 - 96) = 0;
        if (v13)
        {
LABEL_8:
          (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
          _Unwind_Resume(a1);
        }
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v10)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v9);
  goto LABEL_6;
}

void Espresso::sequential_builder::add<Espresso::general_slice_params_t>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  unint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v19, a6, a7, 0xAAAAAAAAAAAAAAABLL * ((a7 - a6) >> 3));
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v16, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * ((a8[1] - *a8) >> 3));
  uint64_t v14 = a2[12];
  LODWORD(v23[0]) = (***(uint64_t (****)(void))(a2[14] + 8))(*(void *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v14, (uint64_t)(a2 + 14), a3, a5, (int *)v23);
  uint64_t v15 = (std::__shared_weak_count *)a1[1];
  v24[0] = *a1;
  v24[1] = v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(v23, 0, sizeof(v23));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v23, (uint64_t)v19, v20, 0xAAAAAAAAAAAAAAABLL * ((v20 - (uint64_t)v19) >> 3));
  memset(v22, 0, sizeof(v22));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v22, v16, v17, 0xAAAAAAAAAAAAAAABLL * ((v17 - v16) >> 3));
  Espresso::sequential_builder::add_kernel_dbg((uint64_t)a2, v24, a3, a4, (uint64_t)(a2 + 7), v23, v22);
  int64_t v25 = v22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
  int64_t v25 = v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
  if (*a2) {
    Espresso::sequential_builder::add_shape_from_kernel(a2, *a1, &v19, &v16);
  }
  v23[0] = (std::string *)&v16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v23);
  v23[0] = (std::string *)&v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v23);
}

void sub_1922D57D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v16 = *(std::__shared_weak_count **)(v13 + 8);
  if (v16) {
    nitro::nitro_function::nitro_function(v16);
  }
  *(void *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(void *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

void Espresso::sequential_builder::add<Espresso::slice_params_t>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  unint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v19, a6, a7, 0xAAAAAAAAAAAAAAABLL * ((a7 - a6) >> 3));
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v16, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * ((a8[1] - *a8) >> 3));
  uint64_t v14 = a2[12];
  LODWORD(v23[0]) = (***(uint64_t (****)(void))(a2[14] + 8))(*(void *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v14, (uint64_t)(a2 + 14), a3, a5, (int *)v23);
  uint64_t v15 = (std::__shared_weak_count *)a1[1];
  v24[0] = *a1;
  v24[1] = v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(v23, 0, sizeof(v23));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v23, (uint64_t)v19, v20, 0xAAAAAAAAAAAAAAABLL * ((v20 - (uint64_t)v19) >> 3));
  memset(v22, 0, sizeof(v22));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v22, v16, v17, 0xAAAAAAAAAAAAAAABLL * ((v17 - v16) >> 3));
  Espresso::sequential_builder::add_kernel_dbg((uint64_t)a2, v24, a3, a4, (uint64_t)(a2 + 7), v23, v22);
  int64_t v25 = v22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
  int64_t v25 = v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
  if (*a2) {
    Espresso::sequential_builder::add_shape_from_kernel(a2, *a1, &v19, &v16);
  }
  v23[0] = (std::string *)&v16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v23);
  v23[0] = (std::string *)&v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v23);
}

void sub_1922D5A38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v16 = *(std::__shared_weak_count **)(v13 + 8);
  if (v16) {
    nitro::nitro_function::nitro_function(v16);
  }
  *(void *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(void *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

uint64_t Espresso::keys_translation::c_api_engine_from_cpp_platform(Espresso::keys_translation *this)
{
  if ((int)this > 19999)
  {
    switch((int)this)
    {
      case 50000:
        return 5;
      case 50001:
      case 50003:
      case 50004:
      case 50006:
      case 50007:
        goto LABEL_17;
      case 50002:
      case 50005:
      case 50008:
        return (uint64_t)this;
      default:
        if (this == 90000)
        {
          uint64_t v1 = 209;
        }
        else
        {
          if (this != 20000)
          {
LABEL_17:
            int v3 = (int)this;
            exceptiounint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::to_string(&v7, v3);
            unint64_t v5 = std::string::insert(&v7, 0, "Not supported: ");
            long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
            v8.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v8.__r_.__value_.__l.__data_ = v6;
            v5->__r_.__value_.__l.__size_ = 0;
            v5->__r_.__value_.__r.__words[2] = 0;
            v5->__r_.__value_.__r.__words[0] = 0;
            std::runtime_error::runtime_error(exception, &v8);
            __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          uint64_t v1 = 2;
        }
        break;
    }
  }
  else
  {
    switch((int)this)
    {
      case 10006:
      case 10007:
      case 10008:
      case 10009:
      case 10010:
      case 10011:
        return (uint64_t)this;
      default:
        uint64_t v1 = 1;
        switch((int)this)
        {
          case 0:
            return v1;
          case 1:
          case 2:
          case 3:
          case 4:
            goto LABEL_17;
          case 5:
            return 7;
          case 6:
            return 8;
          case 7:
            return 9;
          default:
            if (this != 100) {
              goto LABEL_17;
            }
            uint64_t v1 = 0;
            break;
        }
        break;
    }
  }
  return v1;
}

void sub_1922D5C6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

uint64_t Espresso::keys_translation::cpp_platform_from_c_api(uint64_t a1)
{
  if ((int)a1 <= 10005)
  {
    uint64_t v1 = 100;
    switch((int)a1)
    {
      case 0:
        return v1;
      case 1:
        return 0;
      case 2:
        goto LABEL_20;
      case 3:
        return 60000;
      case 4:
      case 6:
        goto LABEL_26;
      case 5:
        return 50000;
      case 7:
        return 5;
      case 8:
        return 6;
      case 9:
        return 7;
      default:
        if (a1 == 201)
        {
LABEL_20:
          uint64_t v1 = 20000;
        }
        else
        {
          if (a1 != 209) {
            goto LABEL_26;
          }
          uint64_t v1 = 90000;
        }
        break;
    }
  }
  else
  {
    if ((int)a1 <= 50001)
    {
      switch((int)a1)
      {
        case 10006:
        case 10007:
        case 10008:
        case 10009:
        case 10010:
        case 10011:
          return a1;
        default:
          goto LABEL_26;
      }
    }
    if ((int)a1 > 79999)
    {
      if (a1 != 80000 && a1 != 100000)
      {
        if (a1 == 0x7FFFFFFF)
        {
          exceptiounint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "ESPRESSO_ENGINE_MAX_VAL is not the right engine");
          __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
LABEL_26:
        int v4 = a1;
        unint64_t v5 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::to_string(&v8, v4);
        long long v6 = std::string::insert(&v8, 0, "Not supported engine: ");
        long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
        v9.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v9.__r_.__value_.__l.__data_ = v7;
        v6->__r_.__value_.__l.__size_ = 0;
        v6->__r_.__value_.__r.__words[2] = 0;
        v6->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v5, &v9);
        __cxa_throw(v5, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
    }
    else if (a1 != 50002 && a1 != 50005 && a1 != 50008)
    {
      goto LABEL_26;
    }
    return a1;
  }
  return v1;
}

void sub_1922D5EE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

uint64_t Espresso::keys_translation::c_api_engine_from_name(void *a1)
{
  Espresso::abstract_engine_factory::shared(&v6);
  Espresso::abstract_engine_factory::engine_with_name((uint64_t)v6.__r_.__value_.__l.__data_, a1, &v7);
  if (v6.__r_.__value_.__l.__size_) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v6.__r_.__value_.__l.__size_);
  }
  if (!v7)
  {
    exceptiounint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(exception, &v6);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v2 = (Espresso::keys_translation *)(**v7)(v7);
  uint64_t v3 = Espresso::keys_translation::c_api_engine_from_cpp_platform(v2);
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  return v3;
}

void sub_1922D603C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v18 & 1) == 0)
    {
LABEL_6:
      if (a17) {
        nitro::nitro_function::nitro_function(a17);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v17);
  goto LABEL_6;
}

void Espresso::MILTranslator::TypedEspressoBuilder::AddLayer<Espresso::general_slice_params_t>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t a8)
{
  if (*(void *)(a6 + 8) == *(void *)a6) {
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v15 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>((void *)(a2 + 200), *(unsigned __int8 **)a6);
  if (!v15) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  int v20 = *((_DWORD *)v15 + 10);
  std::vector<Espresso::compute_path>::vector(__p, 0xAAAAAAAAAAAAAAABLL * ((a7[1] - *a7) >> 3), &v20);
  uint64_t v17 = *a7;
  uint64_t v16 = a7[1];
  if (*a7 != v16)
  {
    do
    {
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a2 + 240, v17, v17);
      v17 += 24;
    }
    while (v17 != v16);
  }
  Espresso::MILTranslator::TypedEspressoBuilder::PropagateOutputTypes(a2, a7, (uint64_t *)__p);
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)a8 + 24))(&__str, a8);
  std::string::operator=((std::string *)(a2 + 56), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  memset(&__str, 0, sizeof(__str));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&__str, *(void *)a6, *(void *)(a6 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a6 + 8) - *(void *)a6) >> 3));
  memset(v21, 0, sizeof(v21));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v21, *a7, a7[1], 0xAAAAAAAAAAAAAAABLL * ((a7[1] - *a7) >> 3));
  Espresso::sequential_builder::add<Espresso::general_slice_params_t>(a1, (uint64_t *)a2, a3, a4, a5, (uint64_t)__str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_, v21);
  p_str = (std::string *)v21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_str);
  p_str = &__str;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_str);
  if (*(char *)(a2 + 79) < 0)
  {
    **(unsigned char **)(a2 + 56) = 0;
    *(void *)(a2 + 64) = 0;
  }
  else
  {
    *(unsigned char *)(a2 + 56) = 0;
    *(unsigned char *)(a2 + 79) = 0;
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_1922D6294(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void **a23)
{
  a23 = &a17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a23);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::MILTranslator::TypedEspressoBuilder::AddLayer<Espresso::gather_nd_params_t>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t a8)
{
  if (*(void *)(a6 + 8) == *(void *)a6) {
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v15 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>((void *)(a2 + 200), *(unsigned __int8 **)a6);
  if (!v15) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  int v22 = *((_DWORD *)v15 + 10);
  std::vector<Espresso::compute_path>::vector(__p, 0xAAAAAAAAAAAAAAABLL * ((a7[1] - *a7) >> 3), &v22);
  uint64_t v17 = *a7;
  uint64_t v16 = a7[1];
  if (*a7 != v16)
  {
    do
    {
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a2 + 240, v17, v17);
      v17 += 24;
    }
    while (v17 != v16);
  }
  Espresso::MILTranslator::TypedEspressoBuilder::PropagateOutputTypes(a2, a7, (uint64_t *)__p);
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)a8 + 24))(&__str, a8);
  std::string::operator=((std::string *)(a2 + 56), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  uint64_t v26 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v26, *(void *)a6, *(void *)(a6 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a6 + 8) - *(void *)a6) >> 3));
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v23, *a7, a7[1], 0xAAAAAAAAAAAAAAABLL * ((a7[1] - *a7) >> 3));
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  float v32 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v32, v26, v27, 0xAAAAAAAAAAAAAAABLL * ((v27 - v26) >> 3));
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v29, v23, v24, 0xAAAAAAAAAAAAAAABLL * ((v24 - v23) >> 3));
  uint64_t v18 = *(void *)(a2 + 96);
  LODWORD(__str.__r_.__value_.__l.__data_) = (***(uint64_t (****)(void))(*(void *)(a2 + 112) + 8))(*(void *)(*(void *)(a2 + 112) + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v18, a2 + 112, a3, a5, (int *)&__str);
  unint64_t v19 = (std::__shared_weak_count *)a1[1];
  v37[0] = *a1;
  v37[1] = v19;
  if (v19) {
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(&__str, 0, sizeof(__str));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&__str, (uint64_t)v32, v33, 0xAAAAAAAAAAAAAAABLL * ((v33 - (uint64_t)v32) >> 3));
  memset(v35, 0, sizeof(v35));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v35, v29, v30, 0xAAAAAAAAAAAAAAABLL * ((v30 - v29) >> 3));
  Espresso::sequential_builder::add_kernel_dbg(a2, v37, a3, a4, a2 + 56, (std::string **)&__str, v35);
  v38[0] = (void **)v35;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v38);
  v38[0] = (void **)&__str;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v38);
  if (v19) {
    nitro::nitro_function::nitro_function(v19);
  }
  if (*(void *)a2) {
    Espresso::sequential_builder::add_shape_from_kernel((uint64_t *)a2, *a1, &v32, &v29);
  }
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v32;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  if (*(char *)(a2 + 79) < 0)
  {
    **(unsigned char **)(a2 + 56) = 0;
    *(void *)(a2 + 64) = 0;
  }
  else
  {
    *(unsigned char *)(a2 + 56) = 0;
    *(unsigned char *)(a2 + 79) = 0;
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_1922D664C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,char a24)
{
  uint64_t v27 = *(std::__shared_weak_count **)(v24 + 8);
  if (v27) {
    nitro::nitro_function::nitro_function(v27);
  }
  *(void *)(v25 - 96) = &a21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 96));
  *(void *)(v25 - 96) = &a24;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 96));
  *(void *)(v25 - 96) = &a15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 96));
  *(void *)(v25 - 96) = &a18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 96));
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::MILTranslator::TypedEspressoBuilder::AddLayer<Espresso::slice_params_t>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t a8)
{
  if (*(void *)(a6 + 8) == *(void *)a6) {
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v15 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>((void *)(a2 + 200), *(unsigned __int8 **)a6);
  if (!v15) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  int v20 = *((_DWORD *)v15 + 10);
  std::vector<Espresso::compute_path>::vector(__p, 0xAAAAAAAAAAAAAAABLL * ((a7[1] - *a7) >> 3), &v20);
  uint64_t v17 = *a7;
  uint64_t v16 = a7[1];
  if (*a7 != v16)
  {
    do
    {
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a2 + 240, v17, v17);
      v17 += 24;
    }
    while (v17 != v16);
  }
  Espresso::MILTranslator::TypedEspressoBuilder::PropagateOutputTypes(a2, a7, (uint64_t *)__p);
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)a8 + 24))(&__str, a8);
  std::string::operator=((std::string *)(a2 + 56), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  memset(&__str, 0, sizeof(__str));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&__str, *(void *)a6, *(void *)(a6 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a6 + 8) - *(void *)a6) >> 3));
  memset(v21, 0, sizeof(v21));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v21, *a7, a7[1], 0xAAAAAAAAAAAAAAABLL * ((a7[1] - *a7) >> 3));
  Espresso::sequential_builder::add<Espresso::slice_params_t>(a1, (uint64_t *)a2, a3, a4, a5, (uint64_t)__str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_, v21);
  p_str = (std::string *)v21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_str);
  p_str = &__str;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_str);
  if (*(char *)(a2 + 79) < 0)
  {
    **(unsigned char **)(a2 + 56) = 0;
    *(void *)(a2 + 64) = 0;
  }
  else
  {
    *(unsigned char *)(a2 + 56) = 0;
    *(unsigned char *)(a2 + 79) = 0;
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_1922D6930(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void **a23)
{
  a23 = &a17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a23);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::MILTranslator::TypedEspressoBuilder::AddLayer<Espresso::topk_params_t>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, uint64_t a9)
{
  uint64_t v16 = *a7;
  uint64_t v15 = a7[1];
  if (*a7 != v15)
  {
    do
    {
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a2 + 240, v16, v16);
      v16 += 24;
    }
    while (v16 != v15);
  }
  Espresso::MILTranslator::TypedEspressoBuilder::PropagateOutputTypes(a2, a7, a8);
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)a9 + 24))(&__str, a9);
  std::string::operator=((std::string *)(a2 + 56), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  uint64_t v24 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v24, *a6, a6[1], 0xAAAAAAAAAAAAAAABLL * ((a6[1] - *a6) >> 3));
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v21, *a7, a7[1], 0xAAAAAAAAAAAAAAABLL * ((a7[1] - *a7) >> 3));
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  uint64_t v30 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v30, v24, v25, 0xAAAAAAAAAAAAAAABLL * ((v25 - v24) >> 3));
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v27, v21, v22, 0xAAAAAAAAAAAAAAABLL * ((v22 - v21) >> 3));
  uint64_t v17 = *(void *)(a2 + 96);
  LODWORD(__str.__r_.__value_.__l.__data_) = (***(uint64_t (****)(void))(*(void *)(a2 + 112) + 8))(*(void *)(*(void *)(a2 + 112) + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v17, a2 + 112, a3, a5, (int *)&__str);
  uint64_t v18 = (std::__shared_weak_count *)a1[1];
  v35[0] = *a1;
  v35[1] = v18;
  if (v18) {
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(&__str, 0, sizeof(__str));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&__str, (uint64_t)v30, v31, 0xAAAAAAAAAAAAAAABLL * ((v31 - (uint64_t)v30) >> 3));
  memset(v33, 0, sizeof(v33));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v33, v27, v28, 0xAAAAAAAAAAAAAAABLL * ((v28 - v27) >> 3));
  Espresso::sequential_builder::add_kernel_dbg(a2, v35, a3, a4, a2 + 56, (std::string **)&__str, v33);
  v36[0] = (void **)v33;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v36);
  v36[0] = (void **)&__str;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v36);
  if (v18) {
    nitro::nitro_function::nitro_function(v18);
  }
  if (*(void *)a2) {
    Espresso::sequential_builder::add_shape_from_kernel((uint64_t *)a2, *a1, &v30, &v27);
  }
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v30;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v24;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  if (*(char *)(a2 + 79) < 0)
  {
    **(unsigned char **)(a2 + 56) = 0;
    *(void *)(a2 + 64) = 0;
  }
  else
  {
    *(unsigned char *)(a2 + 56) = 0;
    *(unsigned char *)(a2 + 79) = 0;
  }
}

void sub_1922D6C88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  uint64_t v34 = *(std::__shared_weak_count **)(v31 + 8);
  if (v34) {
    nitro::nitro_function::nitro_function(v34);
  }
  *(void *)(v32 - 96) = &a17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v32 - 96));
  *(void *)(v32 - 96) = &a20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v32 - 96));
  *(void *)(v32 - 96) = &a11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v32 - 96));
  *(void *)(v32 - 96) = &a14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v32 - 96));
  _Unwind_Resume(a1);
}

void Espresso::MILTranslator::LayerTranslator::TranslateSigmoid(Espresso::MILTranslator::LayerTranslator *this, const MIL::IROperation *a2)
{
  int v7 = 3;
  __asm { FMOV            V0.2S, #1.0 }
  uint64_t v8 = _D0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  Espresso::MILTranslator::LayerTranslator::AddActivationLayer(&v12, (uint64_t)this, a2, (uint64_t)&v7);
  if (v13) {
    nitro::nitro_function::nitro_function(v13);
  }
}

void Espresso::MILTranslator::LayerTranslator::TranslateTopK(Espresso::MILTranslator::LayerTranslator *this, const MIL::IROperation *a2)
{
  *(void *)&long long v44 = *MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:ne180100]<0>(&__p, "x");
  Espresso::MILTranslator::LayerTranslator::EnsureInputBlobFromParameter(&v43, (uint64_t)this, (uint64_t)&__p, a2, 0);
  unint64_t v40 = 0;
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  uint64_t v29 = &v40;
  char v30 = 0;
  unint64_t v40 = (std::string *)operator new(0x18uLL);
  uint64_t v41 = v40;
  uint64_t v42 = (unsigned __int8 *)&v40[1];
  uint64_t v41 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v42, (long long *)&v43, &v44, v40);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v43.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v39) < 0) {
    operator delete(__p);
  }
  (*(void (**)(std::string *__return_ptr, const MIL::IROperation *))(*(void *)a2 + 200))(&v43, a2);
  Espresso::MILTranslator::LayerTranslator::EnsureInputBlobs((uint64_t)this, (uint64_t *)&v40, a2);
  int v4 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>((void *)(*((void *)this + 5) + 200), (unsigned __int8 *)v40);
  if (!v4) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  uint64_t v5 = *((unsigned int *)v4 + 10);
  std::string v6 = operator new(8uLL);
  *(void *)std::string v6 = v5 | 0x300000000;
  uint64_t v38 = v6 + 2;
  uint64_t v39 = v6 + 2;
  std::string __p = v6;
  int v32 = 5;
  __int16 v33 = 0;
  int v34 = -1;
  __int16 v35 = 256;
  char v36 = 1;
  std::string::basic_string[abi:ne180100]<0>(&v29, "k");
  uint64_t ParameterValue = MIL::IROperation::GetParameterValue();
  uint64_t v8 = MEMORY[0x192FF0A00](ParameterValue);
  uint64_t v9 = v8;
  if (v31 < 0)
  {
    operator delete(v29);
    if (v9) {
      goto LABEL_8;
    }
  }
  else if (v8)
  {
LABEL_8:
    std::string::basic_string[abi:ne180100]<0>(&v29, "k");
    MIL::IROperation::GetParameterValue();
    int v10 = MIL::IRValue::GetScalar<int>();
    goto LABEL_19;
  }
  std::string::basic_string[abi:ne180100]<0>(&v29, "k");
  uint64_t v11 = MIL::IROperation::GetParameterValue();
  uint64_t v12 = MEMORY[0x192FF0A20](v11);
  uint64_t v13 = v12;
  if (v31 < 0)
  {
    operator delete(v29);
    if (v13) {
      goto LABEL_12;
    }
  }
  else if (v12)
  {
LABEL_12:
    std::string::basic_string[abi:ne180100]<0>(&v29, "k");
    MIL::IROperation::GetParameterValue();
    int v10 = MIL::IRValue::GetScalar<short>();
    goto LABEL_19;
  }
  std::string::basic_string[abi:ne180100]<0>(&v29, "k");
  uint64_t v14 = MIL::IROperation::GetParameterValue();
  uint64_t v15 = MEMORY[0x192FF09D0](v14);
  uint64_t v16 = v15;
  if (v31 < 0)
  {
    operator delete(v29);
    if (!v16) {
      goto LABEL_21;
    }
  }
  else if (!v15)
  {
    goto LABEL_21;
  }
  std::string::basic_string[abi:ne180100]<0>(&v29, "k");
  MIL::IROperation::GetParameterValue();
  int v10 = MIL::IRValue::GetScalar<signed char>();
LABEL_19:
  int v32 = v10;
  if (v31 < 0) {
    operator delete(v29);
  }
LABEL_21:
  HIBYTE(v33) = 1;
  std::string::basic_string[abi:ne180100]<0>(&v29, "axis");
  MIL::IROperation::GetParameterValue();
  int v34 = MIL::IRValue::GetScalar<int>();
  if (v31 < 0) {
    operator delete(v29);
  }
  std::string::basic_string[abi:ne180100]<0>(&v29, "ascending");
  MIL::IROperation::GetParameterValue();
  LOBYTE(v35) = MIL::IRValue::GetScalar<BOOL>();
  if (v31 < 0) {
    operator delete(v29);
  }
  std::string::basic_string[abi:ne180100]<0>(&v29, "sort");
  uint64_t v17 = MIL::IROperation::TryGetParameterValue();
  uint64_t v18 = v17;
  if (v31 < 0)
  {
    operator delete(v29);
    if (!v18) {
      goto LABEL_30;
    }
    goto LABEL_29;
  }
  if (v17) {
LABEL_29:
  }
    HIBYTE(v35) = MIL::IRValue::GetScalar<BOOL>();
LABEL_30:
  std::string::basic_string[abi:ne180100]<0>(&v29, "return_indices");
  uint64_t v19 = MIL::IROperation::TryGetParameterValue();
  uint64_t v20 = v19;
  if (v31 < 0)
  {
    operator delete(v29);
    if (!v20) {
      goto LABEL_35;
    }
  }
  else if (!v19)
  {
    goto LABEL_35;
  }
  char v36 = MIL::IRValue::GetScalar<BOOL>();
  if ((v36 & 1) == 0)
  {
    uint64_t v38 = v6 + 1;
    goto LABEL_44;
  }
LABEL_35:
  std::string::basic_string[abi:ne180100]<0>(&v29, "output_indices_dtype");
  uint64_t v21 = MIL::IROperation::TryGetParameterValue();
  uint64_t v22 = v21;
  if (v31 < 0)
  {
    operator delete(v29);
    if (!v22) {
      goto LABEL_44;
    }
  }
  else if (!v21)
  {
    goto LABEL_44;
  }
  MIL::IRValue::GetScalar<std::string>();
  unsigned int v23 = MIL::StringToIRDataType() - 2;
  if (v23 >= 0x10 || ((0xF79Du >> v23) & 1) == 0) {
    Espresso::throw_exception_selector<Espresso::network_translation_error>("Type unsupported by Espresso encountered");
  }
  v6[1] = dword_192E06160[v23];
  if (v31 < 0) {
    operator delete(v29);
  }
LABEL_44:
  uint64_t v24 = *((void *)this + 5);
  std::string::basic_string[abi:ne180100]<0>(&v29, "topk");
  Espresso::MILTranslator::LayerTranslator::GetLayerName(&v26, a2);
  uint64_t Location = MIL::IRObject::GetLocation(a2);
  Espresso::MILTranslator::TypedEspressoBuilder::AddLayer<Espresso::topk_params_t>(&v27, v24, (uint64_t)&v29, (uint64_t)&v26, (uint64_t)&v32, (uint64_t *)&v40, (uint64_t *)&v43, (uint64_t *)&__p, Location);
  if (v28) {
    nitro::nitro_function::nitro_function(v28);
  }
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
  if (v31 < 0) {
    operator delete(v29);
  }
  operator delete(v6);
  std::string __p = &v43;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  v43.__r_.__value_.__r.__words[0] = (std::string::size_type)&v40;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v43);
}

void sub_1922D72F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  operator delete(v32);
  a27 = (void *)(v33 - 64);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a27);
  a27 = (void *)(v33 - 88);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a27);
  _Unwind_Resume(a1);
}

uint64_t E5RT::CVPB4ccToSurfaceFormat(E5RT *this)
{
  if ((int)this > 875836517)
  {
    if ((int)this > 1751410031)
    {
      if ((int)this > 2016686639)
      {
        if ((int)this <= 2084718400)
        {
          if (this != 2016686640 && this != 2019963440) {
            goto LABEL_91;
          }
          return 14;
        }
        else
        {
          switch(this)
          {
            case 0x7C424741:
              return 25;
            case 0x7C4C3068:
              return 21;
            case 0x7C526841:
              return 29;
            default:
              goto LABEL_91;
          }
        }
      }
      else if ((int)this <= 1882468911)
      {
        if (this == 1751410032)
        {
          return 9;
        }
        else
        {
          if (this != 1751411059) {
            goto LABEL_91;
          }
          return 10;
        }
      }
      else
      {
        if (this != 1882468912 && this != 1885745712 && this != 1886859824) {
          goto LABEL_91;
        }
        return 15;
      }
    }
    else if ((int)this > 1278226535)
    {
      if ((int)this <= 1380401728)
      {
        if (this == 1278226536)
        {
          return 7;
        }
        else
        {
          if (this != 1278226742) {
            goto LABEL_91;
          }
          return 16;
        }
      }
      else
      {
        switch(this)
        {
          case 0x52474241:
            return 3;
          case 0x52476641:
            return 12;
          case 0x52476841:
            return 11;
          default:
            goto LABEL_91;
        }
      }
    }
    else if ((int)this <= 1111970368)
    {
      if (this != 875836518 && this != 875836534) {
        goto LABEL_91;
      }
      return 5;
    }
    else
    {
      switch(this)
      {
        case 0x42475241:
          return 2;
        case 0x4C303038:
          return 1;
        case 0x4C303066:
          return 13;
        default:
          goto LABEL_91;
      }
    }
  }
  if ((int)this <= 759967847)
  {
    if ((int)this > 642527541)
    {
      if ((int)this <= 706956391)
      {
        if (this == 642527542)
        {
          return 17;
        }
        else
        {
          if (this != 642934849) {
            goto LABEL_91;
          }
          return 26;
        }
      }
      else
      {
        switch(this)
        {
          case 0x2A234C68:
            return 32;
          case 0x2A264C68:
            return 33;
          case 0x2D424741:
            return 23;
          default:
            goto LABEL_91;
        }
      }
    }
    if ((int)this <= 641234479)
    {
      if (this == 32) {
        return 8;
      }
      if (this != 641230384) {
        goto LABEL_91;
      }
    }
    else if (this != 641234480)
    {
      if (this != 641877825)
      {
        if (this == 642527336) {
          return 18;
        }
LABEL_91:
        exceptiounint64_t n = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v6, "CVPB4ccToSurfaceFormat");
        std::string::basic_string[abi:ne180100]<0>(v4, "Invalid format 4cc.");
        E5RT::Status::Status(v5, 1, v4);
        E5RT::E5RTError::E5RTError(exception, v6, v5);
      }
      return 22;
    }
    return 30;
  }
  if ((int)this > 843264055)
  {
    if ((int)this <= 843264103)
    {
      if (this == 843264056)
      {
        return 4;
      }
      else
      {
        if (this != 843264102) {
          goto LABEL_91;
        }
        return 6;
      }
    }
    else
    {
      if (this != 843264104)
      {
        uint64_t v1 = 0;
        if (this == 875704422 || this == 875704438) {
          return v1;
        }
        goto LABEL_91;
      }
      return 31;
    }
  }
  else if ((int)this <= 792872768)
  {
    if (this == 759967848)
    {
      return 19;
    }
    else
    {
      if (this != 760375361) {
        goto LABEL_91;
      }
      return 27;
    }
  }
  else
  {
    switch(this)
    {
      case 0x2F424741:
        return 24;
      case 0x2F4C3068:
        return 20;
      case 0x2F526841:
        return 28;
      default:
        goto LABEL_91;
    }
  }
}

void sub_1922D7BC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if (v23)
    {
LABEL_8:
      __cxa_free_exception(v22);
      _Unwind_Resume(a1);
    }
  }
  else if (v23)
  {
    goto LABEL_8;
  }
  _Unwind_Resume(a1);
}

void *E5RT::SurfaceObjectImpl::SurfaceObjectImpl(void *this)
{
  *this = &unk_1EE325A40;
  return this;
}

void E5RT::IOSurfaceObject::CreateIOSurfaceObjectImplFromHandle(E5RT::IOSurfaceObject *this, __IOSurface *a2)
{
  if (this)
  {
    PixelFormat = (E5RT *)IOSurfaceGetPixelFormat(this);
    E5RT::CVPB4ccToSurfaceFormat(PixelFormat);
    operator new();
  }
  exceptiounint64_t n = __cxa_allocate_exception(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v6, "CreateIOSurfaceObjectImplFromHandle");
  std::string::basic_string[abi:ne180100]<0>(v4, "Invalid IOSurface.");
  E5RT::Status::Status(v5, 1, v4);
  E5RT::E5RTError::E5RTError(exception, v6, v5);
}

void sub_1922D7D64(_Unwind_Exception *a1)
{
  std::unique_ptr<E5RT::IOSurfaceObject>::~unique_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_1922D7D78(_Unwind_Exception *a1)
{
  MEMORY[0x192FF16B0](v1, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

void sub_1922D7D9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

void *E5RT::SurfaceObject::SurfaceObject(void *a1, uint64_t *a2)
{
  uint64_t result = E5RT::MemoryObject::MemoryObject(a1);
  uint64_t v4 = *a2;
  *a2 = 0;
  *uint64_t result = &unk_1EE3249C0;
  result[1] = v4;
  return result;
}

{
  void *result;
  uint64_t v4;

  uint64_t result = E5RT::MemoryObject::MemoryObject(a1);
  uint64_t v4 = *a2;
  *a2 = 0;
  *uint64_t result = &unk_1EE3249C0;
  result[1] = v4;
  return result;
}

void E5RT::SurfaceObject::CreateSurfaceFromHandle<__IOSurface *>(E5RT::IOSurfaceObject *a1, __IOSurface *a2)
{
}

void sub_1922D7F20(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (a2) {
    sub_19239F224(a2);
  }
  MEMORY[0x192FF16B0](v2, 0xA1C40BD48D6D6);
  std::unique_ptr<E5RT::IOSurfaceObject>::~unique_ptr[abi:ne180100]((E5RT::AsyncEventImpl **)va);
  _Unwind_Resume(a1);
}

void sub_1922D7F5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<E5RT::IOSurfaceObject>::~unique_ptr[abi:ne180100]((E5RT::AsyncEventImpl **)va);
  _Unwind_Resume(a1);
}

void anonymous namespace'::TraverseEntryPointFunctionAndUpdateItsBuilder(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6, uint64_t a7, int a8, char a9, void *a10)
{
  (*(void (**)(MIL::IRUnknownProperty **__return_ptr, uint64_t))(*(void *)a3 + 48))(&v137, a3);
  uint64_t v12 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 128))(a1);
  v136[0] = 0;
  v136[1] = 0;
  uint8x8_t v135 = v136;
  uint64_t v14 = v12 + 1;
  uint64_t v13 = (void *)*v12;
  if ((void *)*v12 != v12 + 1)
  {
    do
    {
      std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,MIL::IRValueType const*> const&>((uint64_t **)&v135, v136, v13 + 4, (uint64_t)(v13 + 4));
      uint64_t v16 = (void *)v13[1];
      if (v16)
      {
        do
        {
          uint64_t v17 = v16;
          uint64_t v16 = (void *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          uint64_t v17 = (void *)v13[2];
          BOOL v64 = *v17 == (void)v13;
          uint64_t v13 = v17;
        }
        while (!v64);
      }
      uint64_t v13 = v17;
    }
    while (v17 != v14);
  }
  uint64_t v116 = a1;
  (*(void (**)(long long *__return_ptr))(*(void *)a3 + 48))(&v134);
  uint64_t v15 = (uint64_t *)v135;
  char v123 = a5;
  if (v135 != v136)
  {
    do
    {
      uint64_t v18 = v15 + 4;
      if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>(a5, (unsigned __int8 *)v15 + 32))
      {
        uint64_t v19 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>(a5, (unsigned __int8 *)v15 + 32);
        if (!v19) {
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        }
        memset(&v146, 0, sizeof(v146));
        uint64_t v21 = (unsigned char *)*((void *)v19 + 5);
        uint64_t v20 = (unsigned char *)*((void *)v19 + 6);
        int64_t v22 = v20 - v21;
        if (v20 != v21)
        {
          if (v22 < 0) {
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          v146.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(v20 - v21);
          v146.__r_.__value_.__l.__size_ = v146.__r_.__value_.__r.__words[0];
          std::string::size_type v23 = v146.__r_.__value_.__r.__words[0] + 8 * (v22 >> 3);
          v146.__r_.__value_.__r.__words[2] = v23;
          memcpy(v146.__r_.__value_.__l.__data_, v21, v22);
          v146.__r_.__value_.__l.__size_ = v23;
        }
        if (*((char *)v15 + 55) < 0)
        {
          std::string::__init_copy_ctor_external(&v145, (const std::string::value_type *)v15[4], v15[5]);
        }
        else
        {
          *(_OWORD *)&v145.__r_.__value_.__l.__data_ = *v18;
          v145.__r_.__value_.__r.__words[2] = v15[6];
        }
        a5 = v123;
        char v30 = (MIL::IRValueType *)v15[7];
        char v31 = (std::__shared_weak_count *)*((void *)&v134 + 1);
        *(_OWORD *)&v142.__r_.__value_.__l.__data_ = v134;
        if (*((void *)&v134 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v134 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        MIL::Builder::FunctionBuilder::AddInput();
        if (v31 && !atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
          if ((SHIBYTE(v145.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_27:
            int v32 = (void *)v146.__r_.__value_.__r.__words[0];
            if (!v146.__r_.__value_.__r.__words[0]) {
              goto LABEL_43;
            }
LABEL_38:
            v146.__r_.__value_.__l.__size_ = (std::string::size_type)v32;
LABEL_42:
            operator delete(v32);
            goto LABEL_43;
          }
        }
        else if ((SHIBYTE(v145.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_27;
        }
        operator delete(v145.__r_.__value_.__l.__data_);
        int v32 = (void *)v146.__r_.__value_.__r.__words[0];
        if (v146.__r_.__value_.__r.__words[0]) {
          goto LABEL_38;
        }
      }
      else
      {
        BOOL IsTensor = E5Common::Utils::IsTensor(v15[7]);
        std::string v26 = (MIL::IRValueType *)v15[7];
        if (IsTensor)
        {
          uint64_t v27 = MIL::IRValueType::AsTensorType(v26);
          uint64_t v28 = (*(uint64_t (**)(uint64_t))(*(void *)v27 + 96))(v27);
          v146.__r_.__value_.__r.__words[0] = (std::string::size_type)(v15 + 4);
          uint64_t v29 = std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a5, (unsigned __int8 *)v15 + 32, (uint64_t)&std::piecewise_construct, (long long **)&v146);
        }
        else
        {
          if (!E5Common::Utils::IsState(v26, v24))
          {
            exceptiounint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(exception, "Unsupported input function type.");
            goto LABEL_206;
          }
          uint64_t v33 = (MIL::IRStateValueType *)MIL::IRValueType::AsStateType((MIL::IRValueType *)v15[7]);
          Wrappeduint64_t Type = (MIL::IRValueType *)MIL::IRStateValueType::GetWrappedType(v33);
          if (!E5Common::Utils::IsTensor((uint64_t)WrappedType))
          {
            exceptiounint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(exception, "Unsupported wrapped type in input state of a function.");
LABEL_206:
            exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
            __cxa_throw(exception, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
          }
          uint64_t v35 = MIL::IRValueType::AsTensorType(WrappedType);
          uint64_t v28 = (*(uint64_t (**)(uint64_t))(*(void *)v35 + 96))(v35);
          v146.__r_.__value_.__r.__words[0] = (std::string::size_type)(v15 + 4);
          uint64_t v29 = std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a5, (unsigned __int8 *)v15 + 32, (uint64_t)&std::piecewise_construct, (long long **)&v146);
        }
        char v36 = v29 + 40;
        if (v36 != (char *)v28) {
          std::vector<MIL::IRDimension const*>::__assign_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(v36, *(char **)v28, *(void *)(v28 + 8), (uint64_t)(*(void *)(v28 + 8) - *(void *)v28) >> 3);
        }
        if (*((char *)v15 + 55) < 0)
        {
          std::string::__init_copy_ctor_external(&v144, (const std::string::value_type *)v15[4], v15[5]);
        }
        else
        {
          *(_OWORD *)&v144.__r_.__value_.__l.__data_ = *v18;
          v144.__r_.__value_.__r.__words[2] = v15[6];
        }
        MIL::Builder::FunctionBuilder::AddInput();
        if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0)
        {
          int v32 = (void *)v144.__r_.__value_.__r.__words[0];
          goto LABEL_42;
        }
      }
LABEL_43:
      uint8x8_t v37 = (char *)v15[1];
      if (v37)
      {
        do
        {
          uint64_t v38 = (char **)v37;
          uint8x8_t v37 = *(char **)v37;
        }
        while (v37);
      }
      else
      {
        do
        {
          uint64_t v38 = (char **)v15[2];
          BOOL v64 = *v38 == (char *)v15;
          uint64_t v15 = (uint64_t *)v38;
        }
        while (!v64);
      }
      uint64_t v15 = (uint64_t *)v38;
    }
    while (v38 != v136);
  }
  uint64_t v39 = (std::__shared_weak_count *)*((void *)&v134 + 1);
  if (*((void *)&v134 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v134 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
    std::__shared_weak_count::__release_weak(v39);
  }
  std::__tree<std::string>::destroy((uint64_t)&v135, v136[0]);
  Opsetuint64_t Name = E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset::GetOpsetName(v40);
  std::string::size_type v43 = v42;
  if (v42 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  long long v44 = OpsetName;
  if (v42 >= 0x17)
  {
    uint64_t v46 = (v42 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v42 | 7) != 0x17) {
      uint64_t v46 = v42 | 7;
    }
    uint64_t v47 = v46 + 1;
    p_dst = (std::string *)operator new(v46 + 1);
    __dst.__r_.__value_.__l.__size_ = v43;
    __dst.__r_.__value_.__r.__words[2] = v47 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_59;
  }
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v42;
  p_dst = &__dst;
  if (v42) {
LABEL_59:
  }
    memmove(p_dst, v44, v43);
  p_dst->__r_.__value_.__s.__data_[v43] = 0;
  uint64_t v48 = (*(uint64_t (**)(uint64_t, std::string *))(*(void *)v116 + 64))(v116, &__dst);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v131, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
  }
  else {
    std::string v131 = __dst;
  }
  MIL::Builder::FunctionBuilder::AddBlock();
  if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v131.__r_.__value_.__l.__data_);
  }
  MIL::Builder::FunctionBuilder::SetSpecialization();
  uint64_t v49 = (MIL::IRObject *)(*(uint64_t (**)(uint64_t))(*(void *)v116 + 40))(v116);
  LocationPtr = (void *)MIL::IRObject::GetLocationPtr(v49);
  size_t v51 = (std::__shared_weak_count *)LocationPtr[1];
  v129[1] = *LocationPtr;
  uint64_t v130 = v51;
  if (v51) {
    atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  MIL::Builder::FunctionBuilder::SetLocation();
  std::string::size_type v52 = v123;
  if (v130 && !atomic_fetch_add(&v130->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
    std::__shared_weak_count::__release_weak(v130);
  }
  int v53 = (uint64_t **)(*(uint64_t (**)(uint64_t))(*(void *)v48 + 56))(v48);
  uint64_t v55 = **v53;
  uint64_t v54 = (*v53)[1];
  if (v55 != v54)
  {
    uint64_t v56 = a10;
    uint64_t v117 = (*v53)[1];
    do
    {
      (*(void (**)(void *__return_ptr))(**(void **)v55 + 32))(v129);
      uint64_t v57 = (*(uint64_t (**)(void))(*(void *)v129[0] + 64))(v129[0]);
      if ((*(unsigned int (**)(uint64_t))(*(void *)v57 + 128))(v57))
      {
        uint64_t v128 = v129[0];
        v129[0] = 0;
        uint64_t v58 = v129[0];
        v129[0] = v146.__r_.__value_.__r.__words[0];
        if (v58) {
          (*(void (**)(uint64_t))(*(void *)v58 + 8))(v58);
        }
        uint64_t v59 = v128;
        uint64_t v128 = 0;
        if (v59) {
          (*(void (**)(uint64_t))(*(void *)v59 + 8))(v59);
        }
        if (v129[0]) {
          operator new();
        }
        v129[0] = 0;
        MIL::Builder::OperationBuilder::Make();
        MIL::Builder::BlockBuilder::AddOperation();
        int v63 = v127;
        if (!v127 || atomic_fetch_add(&v127->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
          goto LABEL_183;
        }
        goto LABEL_85;
      }
      uint64_t v60 = (*(uint64_t (**)(void))(*(void *)v129[0] + 64))(v129[0]);
      uint64_t v61 = (*(uint64_t (**)(uint64_t))(*(void *)v60 + 16))(v60);
      int v62 = *(char *)(v61 + 23);
      if (v62 < 0)
      {
        if (*(void *)(v61 + 8) != 19) {
          goto LABEL_197;
        }
        uint64_t v61 = *(void *)v61;
      }
      else if (v62 != 19)
      {
        goto LABEL_197;
      }
      BOOL v64 = *(void *)v61 == 0x736F695F4C4D3545 && *(void *)(v61 + 8) == 0x736E6172742E3631;
      if (!v64 || *(void *)(v61 + 11) != 0x726566736E617274)
      {
LABEL_197:
        int v111 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        (*(void (**)(void))(*(void *)v129[0] + 56))(v129[0]);
        std::operator+<char>();
        char v112 = std::string::append(&v145, ".");
        long long v113 = *(_OWORD *)&v112->__r_.__value_.__l.__data_;
        v146.__r_.__value_.__r.__words[2] = v112->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v146.__r_.__value_.__l.__data_ = v113;
        v112->__r_.__value_.__l.__size_ = 0;
        v112->__r_.__value_.__r.__words[2] = 0;
        v112->__r_.__value_.__r.__words[0] = 0;
        std::logic_error::logic_error(v111, &v146);
        v111->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
        __cxa_throw(v111, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
      }
      long long v66 = (MIL::IROperation *)v129[0];
      v129[0] = 0;
      unint64_t v68 = v137;
      uint64_t v67 = (atomic_ullong *)v138;
      std::string::size_type v126 = v138;
      if (v138) {
        atomic_fetch_add_explicit(&v138->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      *((unsigned char *)&v146.__r_.__value_.__s + 23) = 6;
      strcpy((char *)&v146, "values");
      uint64_t v124 = v66;
      Argumentuint64_t Name = MIL::IROperation::GetArgumentName();
      if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v146.__r_.__value_.__l.__data_);
      }
      if (!std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>(v52, (unsigned __int8 *)ArgumentName))
      {
        uint64_t v114 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v114, "Failed to extract \"values\" shapes for transfer op: E5ML_ios16.transfer");
        __cxa_throw(v114, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      uint64_t v70 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>(v52, (unsigned __int8 *)ArgumentName);
      if (!v70) {
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      }
      memset(&v146, 0, sizeof(v146));
      int v72 = (unsigned char *)*((void *)v70 + 5);
      uint64_t v71 = (unsigned char *)*((void *)v70 + 6);
      int64_t v73 = v71 - v72;
      if (v71 != v72)
      {
        if (v73 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        v146.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(v71 - v72);
        v146.__r_.__value_.__l.__size_ = v146.__r_.__value_.__r.__words[0];
        std::string::size_type v74 = v146.__r_.__value_.__r.__words[0] + 8 * (v73 >> 3);
        v146.__r_.__value_.__r.__words[2] = v74;
        memcpy(v146.__r_.__value_.__l.__data_, v72, v73);
        v146.__r_.__value_.__l.__size_ = v74;
      }
      memset(&v145, 0, sizeof(v145));
      uint64_t v75 = (MIL::IRNamedValueType ***)(*(uint64_t (**)(MIL::IROperation *))(*(void *)v66 + 176))(v66);
      uint64_t Name = MIL::IRNamedValueType::GetName(**v75);
      if (*(char *)(Name + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v144, *(const std::string::value_type **)Name, *(void *)(Name + 8));
      }
      else
      {
        long long v77 = *(_OWORD *)Name;
        v144.__r_.__value_.__r.__words[2] = *(void *)(Name + 16);
        *(_OWORD *)&v144.__r_.__value_.__l.__data_ = v77;
      }
      uint64_t v78 = *(uint64_t ***)(a4 + 8);
      if (v78)
      {
        int v79 = *(char *)(ArgumentName + 23);
        if (v79 >= 0) {
          size_t v80 = *(unsigned __int8 *)(ArgumentName + 23);
        }
        else {
          size_t v80 = *(void *)(ArgumentName + 8);
        }
        if (v79 >= 0) {
          uint64_t v81 = (const void *)ArgumentName;
        }
        else {
          uint64_t v81 = *(const void **)ArgumentName;
        }
        do
        {
          int v82 = *((char *)v78 + 55);
          if (v82 >= 0) {
            size_t v83 = *((unsigned __int8 *)v78 + 55);
          }
          else {
            size_t v83 = (size_t)v78[5];
          }
          if (v82 >= 0) {
            uint64_t v84 = (uint64_t *)(v78 + 4);
          }
          else {
            uint64_t v84 = v78[4];
          }
          if (v83 >= v80) {
            size_t v85 = v80;
          }
          else {
            size_t v85 = v83;
          }
          int v86 = memcmp(v81, v84, v85);
          BOOL v87 = v80 < v83;
          if (v86) {
            BOOL v87 = v86 < 0;
          }
          if (!v87)
          {
            int v88 = memcmp(v84, v81, v85);
            BOOL v89 = v83 < v80;
            if (v88) {
              BOOL v89 = v88 < 0;
            }
            if (!v89)
            {
              std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)a4, (const void **)&v144.__r_.__value_.__l.__data_, (uint64_t)&v144);
              break;
            }
            ++v78;
          }
          uint64_t v78 = (uint64_t **)*v78;
        }
        while (v78);
      }
      if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v142, v144.__r_.__value_.__l.__data_, v144.__r_.__value_.__l.__size_);
      }
      else {
        std::string v142 = v144;
      }
      std::string::size_type v52 = v123;
      Outputuint64_t Type = (MIL::IRValueType *)MIL::IROperation::GetOutputType(v124);
      v141[0] = v68;
      v141[1] = (MIL::IRUnknownProperty *)v67;
      uint64_t v54 = v117;
      if (v67) {
        atomic_fetch_add_explicit(v67 + 1, 1uLL, memory_order_relaxed);
      }
      uint64_t v56 = a10;
      MIL::IRNamedValueType::Make();
      if (v67 && !atomic_fetch_add(v67 + 1, 0xFFFFFFFFFFFFFFFFLL))
      {
        (*(void (**)(atomic_ullong *))(*v67 + 16))(v67);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v67);
        if ((SHIBYTE(v142.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_141:
          uint64_t v139 = (std::string *)v143;
          if (v143) {
            goto LABEL_142;
          }
          goto LABEL_147;
        }
      }
      else if ((SHIBYTE(v142.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_141;
      }
      operator delete(v142.__r_.__value_.__l.__data_);
      uint64_t v139 = (std::string *)v143;
      if (v143) {
LABEL_142:
      }
        operator new();
LABEL_147:
      int v140 = 0;
      uint64_t v143 = 0;
      std::string::size_type size = v145.__r_.__value_.__l.__size_;
      if (v145.__r_.__value_.__l.__size_ < v145.__r_.__value_.__r.__words[2])
      {
        *(void *)v145.__r_.__value_.__l.__size_ = v139;
        *(void *)(size + 8) = 0;
        v145.__r_.__value_.__l.__size_ = size + 16;
      }
      else
      {
        uint64_t v92 = std::vector<std::shared_ptr<E5RT::ExecutionStreamOperationInternal>>::__push_back_slow_path<std::shared_ptr<E5RT::ExecutionStreamOperationInternal>>(&v145.__r_.__value_.__l.__data_, (uint64_t)&v139);
        BOOL v93 = v140;
        v145.__r_.__value_.__l.__size_ = (std::string::size_type)v92;
        if (v140 && !atomic_fetch_add(&v140->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
          std::__shared_weak_count::__release_weak(v93);
        }
      }
      unint64_t v94 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>(v123, (unsigned __int8 *)ArgumentName);
      if (!v94) {
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      }
      uint64_t v139 = &v144;
      int v95 = std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v123, (unsigned __int8 *)&v144, (uint64_t)&std::piecewise_construct, (long long **)&v139);
      if (v95 != (char *)v94) {
        std::vector<MIL::IRDimension const*>::__assign_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(v95 + 40, *((char **)v94 + 5), *((void *)v94 + 6), (uint64_t)(*((void *)v94 + 6) - *((void *)v94 + 5)) >> 3);
      }
      (*(void (**)(MIL::IROperation *, std::string *))(*(void *)v124 + 184))(v124, &v145);
      if (a10)
      {
        size_t v96 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>(a10, (unsigned __int8 *)ArgumentName);
        if (v96)
        {
          uint64_t v139 = &v144;
          uint64_t v97 = std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a10, (unsigned __int8 *)&v144, (uint64_t)&std::piecewise_construct, (long long **)&v139);
          if (v97 != (char *)v96) {
            std::vector<MIL::IRDimension const*>::__assign_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(v97 + 40, *((char **)v96 + 5), *((void *)v96 + 6), (uint64_t)(*((void *)v96 + 6) - *((void *)v96 + 5)) >> 3);
          }
        }
      }
      uint64_t v98 = (MIL::IRNamedValueType *)v143;
      uint64_t v143 = 0;
      if (v98)
      {
        MIL::IRNamedValueType::~IRNamedValueType(v98);
        MEMORY[0x192FF16B0]();
      }
      if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v144.__r_.__value_.__l.__data_);
        uint64_t v99 = (void *)v145.__r_.__value_.__r.__words[0];
        if (!v145.__r_.__value_.__r.__words[0])
        {
LABEL_162:
          uint64_t v100 = (void *)v146.__r_.__value_.__r.__words[0];
          if (!v146.__r_.__value_.__r.__words[0]) {
            goto LABEL_164;
          }
LABEL_163:
          v146.__r_.__value_.__l.__size_ = (std::string::size_type)v100;
          operator delete(v100);
          goto LABEL_164;
        }
      }
      else
      {
        uint64_t v99 = (void *)v145.__r_.__value_.__r.__words[0];
        if (!v145.__r_.__value_.__r.__words[0]) {
          goto LABEL_162;
        }
      }
      std::string::size_type v102 = v145.__r_.__value_.__l.__size_;
      if ((void *)v145.__r_.__value_.__l.__size_ == v99)
      {
        v145.__r_.__value_.__l.__size_ = (std::string::size_type)v99;
        operator delete(v99);
        uint64_t v100 = (void *)v146.__r_.__value_.__r.__words[0];
        if (v146.__r_.__value_.__r.__words[0]) {
          goto LABEL_163;
        }
      }
      else
      {
        do
        {
          uint64_t v103 = *(std::__shared_weak_count **)(v102 - 8);
          if (v103 && !atomic_fetch_add(&v103->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
            std::__shared_weak_count::__release_weak(v103);
          }
          v102 -= 16;
        }
        while ((void *)v102 != v99);
        v145.__r_.__value_.__l.__size_ = (std::string::size_type)v99;
        operator delete(v145.__r_.__value_.__l.__data_);
        uint64_t v100 = (void *)v146.__r_.__value_.__r.__words[0];
        if (v146.__r_.__value_.__r.__words[0]) {
          goto LABEL_163;
        }
      }
LABEL_164:
      uint64_t v101 = v129[0];
      v129[0] = v124;
      if (v101) {
        (*(void (**)(uint64_t))(*(void *)v101 + 8))(v101);
      }
      if (v126 && !atomic_fetch_add(&v126->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
        std::__shared_weak_count::__release_weak(v126);
        if (v129[0]) {
LABEL_169:
        }
          operator new();
      }
      else if (v129[0])
      {
        goto LABEL_169;
      }
      v129[0] = 0;
      MIL::Builder::OperationBuilder::Make();
      MIL::Builder::BlockBuilder::AddOperation();
      int v63 = v125;
      if (!v125 || atomic_fetch_add(&v125->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_183;
      }
LABEL_85:
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
LABEL_183:
      uint64_t v104 = v129[0];
      v129[0] = 0;
      if (v104) {
        (*(void (**)(uint64_t))(*(void *)v104 + 8))(v104);
      }
      v55 += 16;
    }
    while (v55 != v54);
  }
  uint64_t v105 = (*(uint64_t (**)(uint64_t))(*(void *)v116 + 40))(v116);
  uint64_t v106 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v105 + 88))(v105);
  uint64_t v107 = *v106;
  uint64_t v108 = v106[1];
  if (*v106 != v108)
  {
    do
    {
      MIL::Builder::BlockBuilder::AddOutput();
      v107 += 24;
    }
    while (v107 != v108);
  }
  int v109 = v132;
  if (!v132 || atomic_fetch_add(&v132->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_191;
    }
    goto LABEL_190;
  }
  ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
  std::__shared_weak_count::__release_weak(v109);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
LABEL_190:
  }
    operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_191:
  int v110 = v138;
  if (v138)
  {
    if (!atomic_fetch_add(&v138->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
      std::__shared_weak_count::__release_weak(v110);
    }
  }
}

void sub_1922D9330(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,char a25,uint64_t a26,char a27,uint64_t a28,char a29,uint64_t a30,char a31,uint64_t a32,char a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,char a48,uint64_t a49,void *__p,uint64_t a51,int a52,__int16 a53,char a54,char a55,char a56,uint64_t a57,char a58,uint64_t a59,uint64_t a60,char a61)
{
  if ((a55 & 0x80000000) == 0)
  {
    std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a61);
    _Unwind_Resume(a1);
  }
  operator delete(__p);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a61);
  _Unwind_Resume(a1);
}

void anonymous namespace'::WriteInterleavedEmbeddingsFile<signed char>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v11, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v11 = *(std::string *)a2;
  }
  MEMORY[0x192FEF4E0](v12, &v11);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  MIL::Blob::StorageReader::GetDataView<signed char>();
  size_t v6 = v5;
  if (v5)
  {
    if ((v5 & 0x8000000000000000) != 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    int v10 = operator new(v5);
    bzero(v10, v6);
  }
  int v7 = *(const void **)a4;
  size_t v8 = *(void *)(a4 + 8) - *(void *)a4;
  if (v8)
  {
    if ((v8 & 0x8000000000000000) != 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    std::string __p = operator new(v8);
    memcpy(__p, v7, v8);
  }
  Espresso::AOT::InterleaveSpan<signed char>();
}

void sub_1922D9BCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,char a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  MEMORY[0x192FF16B0](v44, 0x1093C402D7449D9);
  if (v43) {
    operator delete(v43);
  }
  MIL::Blob::StorageReader::~StorageReader((MIL::Blob::StorageReader *)&a37);
  _Unwind_Resume(a1);
}

void anonymous namespace'::WriteInterleavedEmbeddingsFile<MIL::Fp16>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v11, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v11 = *(std::string *)a2;
  }
  MEMORY[0x192FEF4E0](v12, &v11);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  MIL::Blob::StorageReader::GetDataView<MIL::Fp16>();
  uint64_t v6 = v5;
  if (v5)
  {
    if (v5 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    int v7 = operator new(2 * v5);
    bzero(v7, 2 * v6);
  }
  size_t v8 = *(const void **)a4;
  size_t v9 = *(void *)(a4 + 8) - *(void *)a4;
  if (v9)
  {
    if ((v9 & 0x8000000000000000) != 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    std::string __p = operator new(v9);
    memcpy(__p, v8, v9);
  }
  Espresso::AOT::InterleaveSpan<MIL::Fp16>();
}

void sub_1922DA254(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,char a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  MEMORY[0x192FF16B0](v44, 0x1093C402D7449D9);
  if (v43) {
    operator delete(v43);
  }
  MIL::Blob::StorageReader::~StorageReader((MIL::Blob::StorageReader *)&a37);
  _Unwind_Resume(a1);
}

uint64_t e5rt_async_event_create(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = operator new(0x20uLL);
  *uint64_t v6 = &unk_1EE391998;
  v6[1] = a1;
  v6[2] = a2;
  *((_DWORD *)v6 + 6) = a3;
  int v10 = v6;
  uint64_t v7 = E5RT::ExceptionSafeExecute((uint64_t)v9);
  if (v10 == v9)
  {
    (*(void (**)(void *))(v9[0] + 32))(v9);
  }
  else if (v10)
  {
    (*(void (**)(void))(*v10 + 40))();
  }
  return v7;
}

void sub_1922DA4C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *std::function<e5rt_error_code_t ()(void)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

uint64_t e5rt_async_event_create_from_iosurface_shared_event(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  uint64_t v6 = operator new(0x20uLL);
  *uint64_t v6 = &unk_1EE391A18;
  v6[1] = a1;
  v6[2] = a2;
  void v6[3] = v5;
  int v10 = v6;
  uint64_t v7 = E5RT::ExceptionSafeExecute((uint64_t)v9);
  if (v10 == v9)
  {
    (*(void (**)(void *))(v9[0] + 32))(v9);
  }
  else if (v10)
  {
    (*(void (**)(void))(*v10 + 40))();
  }

  return v7;
}

void sub_1922DA67C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);

  _Unwind_Resume(a1);
}

uint64_t e5rt_async_event_get_name(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EE391A98;
  v4[1] = a1;
  v4[2] = a2;
  id v5 = v4;
  uint64_t v2 = E5RT::ExceptionSafeExecute((uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

void sub_1922DA790(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_async_event_get_last_signaled_value(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EE391B18;
  v4[1] = a1;
  v4[2] = a2;
  id v5 = v4;
  uint64_t v2 = E5RT::ExceptionSafeExecute((uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

void sub_1922DA88C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_async_event_get_active_future_value(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EE391B98;
  v4[1] = a1;
  v4[2] = a2;
  id v5 = v4;
  uint64_t v2 = E5RT::ExceptionSafeExecute((uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

void sub_1922DA988(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_async_event_set_active_future_value(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EE391C18;
  v4[1] = a1;
  v4[2] = a2;
  id v5 = v4;
  uint64_t v2 = E5RT::ExceptionSafeExecute((uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

void sub_1922DAA84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_async_event_sync_wait(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = operator new(0x20uLL);
  *uint64_t v6 = &unk_1EE391C98;
  v6[1] = a1;
  v6[2] = a2;
  void v6[3] = a3;
  int v10 = v6;
  uint64_t v7 = E5RT::ExceptionSafeExecute((uint64_t)v9);
  if (v10 == v9)
  {
    (*(void (**)(void *))(v9[0] + 32))(v9);
  }
  else if (v10)
  {
    (*(void (**)(void))(*v10 + 40))();
  }
  return v7;
}

void sub_1922DABA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_async_event_async_notify(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v7 = a3;
  id v8 = a4;
  id v9 = v7;
  uint64_t v10 = MEMORY[0x192FF2250](v8);
  uint64_t v11 = operator new(0x28uLL);
  void *v11 = &unk_1EE391D18;
  v11[1] = a1;
  v11[2] = a2;
  void v11[3] = v9;
  v11[4] = v10;
  uint64_t v15 = v11;
  uint64_t v12 = E5RT::ExceptionSafeExecute((uint64_t)v14);
  if (v15 == v14)
  {
    (*(void (**)(void *))(v14[0] + 32))(v14);
  }
  else if (v15)
  {
    (*(void (**)(void))(*v15 + 40))();
  }

  return v12;
}

void sub_1922DACF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);

  _Unwind_Resume(a1);
}

uint64_t e5rt_async_event_signal(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EE391D98;
  v4[1] = a1;
  v4[2] = a2;
  id v5 = v4;
  uint64_t v2 = E5RT::ExceptionSafeExecute((uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

void sub_1922DAE14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_async_event_get_iosurface_shared_event(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EE391E18;
  v4[1] = a1;
  v4[2] = a2;
  id v5 = v4;
  uint64_t v2 = E5RT::ExceptionSafeExecute((uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

void sub_1922DAF10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_async_event_release(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  v3[0] = &unk_1EE391E98;
  v3[1] = a1;
  uint64_t v4 = v3;
  uint64_t v1 = E5RT::ExceptionSafeExecute((uint64_t)v3);
  if (v4 == v3)
  {
    (*(void (**)(void *))(v3[0] + 32))(v3);
  }
  else if (v4)
  {
    (*(void (**)(void))(*v4 + 40))();
  }
  return v1;
}

void sub_1922DB00C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

void __clang_call_terminate(void *a1)
{
}

void std::__throw_bad_function_call[abi:ne180100]()
{
  exceptiounint64_t n = __cxa_allocate_exception(8uLL);
}

void std::bad_function_call::~bad_function_call(std::bad_function_call *this)
{
  std::exception::~exception(this);

  JUMPOUT(0x192FF16B0);
}

void sub_1922DB0C0()
{
}

__n128 sub_1922DB0D4(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1EE391998;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_1922DB128(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE391998;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1922DB160(uint64_t a1)
{
  if (*(void *)(a1 + 8))
  {
    if (*(void *)(a1 + 16)) {
      operator new();
    }
    std::string __dst = (char *)operator new(0x30uLL);
    long long v5 = xmmword_192DA88C0;
    strcpy(__dst, "Invalid Function Argument: eventName is NULL.");
    char v3 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&__dst, (uint64_t *)__p);
  }
  else
  {
    std::string __dst = (char *)operator new(0x30uLL);
    long long v5 = xmmword_192DA88D0;
    strcpy(__dst, "Invalid Function Argument: handle is NULL.");
    char v3 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&__dst, (uint64_t *)__p);
  }
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v5) < 0) {
    operator delete(__dst);
  }
  return 1;
}

void sub_1922DB45C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0)
  {
    operator delete(a15);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1922DB528(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z23e5rt_async_event_createE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z23e5rt_async_event_createE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z23e5rt_async_event_createE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z23e5rt_async_event_createE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_1922DB598()
{
  return &unk_1EE3919F8;
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  __n128 result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D0] + 16);
  return result;
}

void std::__shared_ptr_pointer<E5RT::AsyncEvent  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

uint64_t std::__shared_ptr_pointer<E5RT::AsyncEvent  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<E5RT::AsyncEvent  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000192DA8A2BLL) {
    return a1 + 24;
  }
  if (((v3 & 0x8000000192DA8A2BLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000192DA8A2BLL)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000192DA8A2BLL & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

uint64_t sub_1922DB6C8(uint64_t a1)
{
  return a1;
}

void sub_1922DB6F4(uint64_t a1)
{
  JUMPOUT(0x192FF16B0);
}

char *sub_1922DB740(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1EE391A18;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *((void *)v2 + 3) = *(id *)(a1 + 24);
  return v2;
}

id sub_1922DB7A0(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE391A18;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  id result = *(id *)(a1 + 24);
  *(void *)(a2 + 24) = result;
  return result;
}

void sub_1922DB7F0(uint64_t a1)
{
}

void sub_1922DB7F8(id *a1)
{
  operator delete(a1);
}

uint64_t sub_1922DB834(void *a1)
{
  if (a1[1])
  {
    if (a1[2])
    {
      if (a1[3]) {
        operator new();
      }
      std::string __dst = (char *)operator new(0x30uLL);
      long long v5 = xmmword_192DA88E0;
      strcpy(__dst, "Invalid Function Argument: eventHandle is NULL.");
      char v3 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&__dst, (uint64_t *)__p);
    }
    else
    {
      std::string __dst = (char *)operator new(0x30uLL);
      long long v5 = xmmword_192DA88C0;
      strcpy(__dst, "Invalid Function Argument: eventName is NULL.");
      char v3 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&__dst, (uint64_t *)__p);
    }
  }
  else
  {
    std::string __dst = (char *)operator new(0x30uLL);
    long long v5 = xmmword_192DA88D0;
    strcpy(__dst, "Invalid Function Argument: handle is NULL.");
    char v3 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&__dst, (uint64_t *)__p);
  }
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v5) < 0) {
    operator delete(__dst);
  }
  return 1;
}

void sub_1922DBBA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0)
  {
    operator delete(a15);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1922DBC70(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z51e5rt_async_event_create_from_iosurface_shared_eventE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z51e5rt_async_event_create_from_iosurface_shared_eventE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z51e5rt_async_event_create_from_iosurface_shared_eventE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z51e5rt_async_event_create_from_iosurface_shared_eventE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_1922DBCE0()
{
  return &unk_1EE391A78;
}

void sub_1922DBCF0()
{
}

__n128 sub_1922DBD04(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE391A98;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1922DBD50(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE391A98;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1922DBD80(uint64_t a1)
{
  uint64_t v1 = *(E5RT::AsyncEvent ***)(a1 + 8);
  if (v1)
  {
    if (*(void *)(a1 + 16))
    {
      Eventuint64_t Name = E5RT::AsyncEvent::GetEventName(*v1);
      uint64_t result = 0;
      if (*(char *)(EventName + 23) < 0) {
        Eventuint64_t Name = *(void *)EventName;
      }
      **(void **)(a1 + 16) = EventName;
    }
    else
    {
      id v7 = operator new(0x30uLL);
      long long v8 = xmmword_192DA88F0;
      strcpy((char *)v7, "Invalid Function Argument: event_name is NULL.");
      char v6 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
      if (v6 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v8) < 0) {
        operator delete(v7);
      }
      return 1;
    }
  }
  else
  {
    id v7 = operator new(0x30uLL);
    long long v8 = xmmword_192DA88D0;
    strcpy((char *)v7, "Invalid Function Argument: handle is NULL.");
    char v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    if (v6 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v8) < 0) {
      operator delete(v7);
    }
    return 1;
  }
  return result;
}

void sub_1922DBF10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1922DBF50(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z25e5rt_async_event_get_nameE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z25e5rt_async_event_get_nameE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z25e5rt_async_event_get_nameE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z25e5rt_async_event_get_nameE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_1922DBFC0()
{
  return &unk_1EE391AF8;
}

void sub_1922DBFD0()
{
}

__n128 sub_1922DBFE4(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE391B18;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1922DC030(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE391B18;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1922DC060(uint64_t a1)
{
  uint64_t v1 = *(E5RT::AsyncEvent ***)(a1 + 8);
  if (v1)
  {
    if (*(void *)(a1 + 16))
    {
      LastSignaleduint64_t Value = E5RT::AsyncEvent::GetLastSignaledValue(*v1);
      uint64_t result = 0;
      **(void **)(a1 + 16) = LastSignaledValue;
    }
    else
    {
      id v7 = operator new(0x38uLL);
      long long v8 = xmmword_192DA8900;
      strcpy((char *)v7, "Invalid Function Argument: signaled_value is NULL.");
      char v6 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
      if (v6 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v8) < 0) {
        operator delete(v7);
      }
      return 1;
    }
  }
  else
  {
    id v7 = operator new(0x30uLL);
    long long v8 = xmmword_192DA88D0;
    strcpy((char *)v7, "Invalid Function Argument: handle is NULL.");
    char v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    if (v6 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v8) < 0) {
      operator delete(v7);
    }
    return 1;
  }
  return result;
}

void sub_1922DC1E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1922DC228(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z40e5rt_async_event_get_last_signaled_valueE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z40e5rt_async_event_get_last_signaled_valueE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z40e5rt_async_event_get_last_signaled_valueE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z40e5rt_async_event_get_last_signaled_valueE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_1922DC298()
{
  return &unk_1EE391B78;
}

void sub_1922DC2A8()
{
}

__n128 sub_1922DC2BC(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE391B98;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1922DC308(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE391B98;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1922DC338(uint64_t a1)
{
  uint64_t v1 = *(E5RT::AsyncEvent ***)(a1 + 8);
  if (v1)
  {
    if (*(void *)(a1 + 16))
    {
      ActiveFutureuint64_t Value = E5RT::AsyncEvent::GetActiveFutureValue(*v1);
      uint64_t result = 0;
      **(void **)(a1 + 16) = ActiveFutureValue;
    }
    else
    {
      id v7 = operator new(0x38uLL);
      long long v8 = xmmword_192DA8910;
      strcpy((char *)v7, "Invalid Function Argument: active_future_value is NULL.");
      char v6 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
      if (v6 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v8) < 0) {
        operator delete(v7);
      }
      return 1;
    }
  }
  else
  {
    id v7 = operator new(0x30uLL);
    long long v8 = xmmword_192DA88D0;
    strcpy((char *)v7, "Invalid Function Argument: handle is NULL.");
    char v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    if (v6 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v8) < 0) {
      operator delete(v7);
    }
    return 1;
  }
  return result;
}

void sub_1922DC4C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1922DC500(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z40e5rt_async_event_get_active_future_valueE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z40e5rt_async_event_get_active_future_valueE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z40e5rt_async_event_get_active_future_valueE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z40e5rt_async_event_get_active_future_valueE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_1922DC570()
{
  return &unk_1EE391BF8;
}

void sub_1922DC580()
{
}

__n128 sub_1922DC594(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE391C18;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1922DC5E0(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE391C18;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1922DC610(uint64_t a1)
{
  uint64_t v1 = *(E5RT::AsyncEvent ***)(a1 + 8);
  if (v1)
  {
    E5RT::AsyncEvent::SetActiveFutureValue(*v1);
    return 0;
  }
  else
  {
    long long v5 = operator new(0x30uLL);
    long long v6 = xmmword_192DA88D0;
    strcpy((char *)v5, "Invalid Function Argument: handle is NULL.");
    char v4 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v5, (uint64_t *)__p);
    if (v4 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v6) < 0) {
      operator delete(v5);
    }
    return 1;
  }
}

void sub_1922DC6E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1922DC720(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z40e5rt_async_event_set_active_future_valueE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z40e5rt_async_event_set_active_future_valueE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z40e5rt_async_event_set_active_future_valueE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z40e5rt_async_event_set_active_future_valueE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_1922DC790()
{
  return &unk_1EE391C78;
}

void sub_1922DC7A0()
{
}

__n128 sub_1922DC7B4(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1EE391C98;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_1922DC808(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE391C98;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1922DC840(uint64_t a1)
{
  uint64_t v1 = *(E5RT::AsyncEvent ***)(a1 + 8);
  if (v1)
  {
    E5RT::AsyncEvent::SyncWait(*v1);
    return 0;
  }
  else
  {
    long long v5 = operator new(0x30uLL);
    long long v6 = xmmword_192DA88D0;
    strcpy((char *)v5, "Invalid Function Argument: handle is NULL.");
    char v4 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v5, (uint64_t *)__p);
    if (v4 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v6) < 0) {
      operator delete(v5);
    }
    return 1;
  }
}

void sub_1922DC918(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1922DC954(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z26e5rt_async_event_sync_waitE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z26e5rt_async_event_sync_waitE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z26e5rt_async_event_sync_waitE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z26e5rt_async_event_sync_waitE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_1922DC9C4()
{
  return &unk_1EE391CF8;
}

uint64_t sub_1922DC9D0(uint64_t a1)
{
  return a1;
}

void sub_1922DCA04(uint64_t a1)
{
  JUMPOUT(0x192FF16B0);
}

char *sub_1922DCA58(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_1EE391D18;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *((void *)v2 + 3) = *(id *)(a1 + 24);
  *((void *)v2 + 4) = MEMORY[0x192FF2250](*(void *)(a1 + 32));
  return v2;
}

uint64_t sub_1922DCAC4(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE391D18;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(id *)(a1 + 24);
  uint64_t result = MEMORY[0x192FF2250](*(void *)(a1 + 32));
  *(void *)(a2 + 32) = result;
  return result;
}

void sub_1922DCB24(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
}

void sub_1922DCB60(id *a1)
{
  operator delete(a1);
}

uint64_t sub_1922DCBA4(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 8);
  if (v1)
  {
    E5RT::AsyncEvent::AsyncNotify(*v1);
    return 0;
  }
  else
  {
    long long v5 = operator new(0x30uLL);
    long long v6 = xmmword_192DA88D0;
    strcpy((char *)v5, "Invalid Function Argument: handle is NULL.");
    char v4 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v5, (uint64_t *)__p);
    if (v4 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v6) < 0) {
      operator delete(v5);
    }
    return 1;
  }
}

void sub_1922DCC80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1922DCCBC(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z29e5rt_async_event_async_notifyE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z29e5rt_async_event_async_notifyE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z29e5rt_async_event_async_notifyE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z29e5rt_async_event_async_notifyE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_1922DCD2C()
{
  return &unk_1EE391D78;
}

void sub_1922DCD3C()
{
}

__n128 sub_1922DCD50(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE391D98;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1922DCD9C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE391D98;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1922DCDCC(uint64_t a1)
{
  uint64_t v1 = *(E5RT::AsyncEvent ***)(a1 + 8);
  if (v1)
  {
    E5RT::AsyncEvent::Signal(*v1);
    return 0;
  }
  else
  {
    long long v5 = operator new(0x30uLL);
    long long v6 = xmmword_192DA88D0;
    strcpy((char *)v5, "Invalid Function Argument: handle is NULL.");
    char v4 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v5, (uint64_t *)__p);
    if (v4 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v6) < 0) {
      operator delete(v5);
    }
    return 1;
  }
}

void sub_1922DCEA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1922DCEDC(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z23e5rt_async_event_signalE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z23e5rt_async_event_signalE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z23e5rt_async_event_signalE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z23e5rt_async_event_signalE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_1922DCF4C()
{
  return &unk_1EE391DF8;
}

void sub_1922DCF5C()
{
}

__n128 sub_1922DCF70(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE391E18;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1922DCFBC(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE391E18;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1922DCFEC(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 8);
  if (v1)
  {
    if (*(void *)(a1 + 16))
    {
      E5RT::AsyncEvent::GetHandle<IOSurfaceSharedEvent * {__strong}>(*v1);
      id v3 = (id)objc_claimAutoreleasedReturnValue();
      uint64_t result = 0;
      **(void **)(a1 + 16) = v3;
    }
    else
    {
      id v7 = operator new(0x40uLL);
      long long v8 = xmmword_192DA8920;
      strcpy((char *)v7, "Invalid Function Argument: iosurface_shared_event is NULL.");
      char v6 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
      if (v6 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v8) < 0) {
        operator delete(v7);
      }
      return 1;
    }
  }
  else
  {
    id v7 = operator new(0x30uLL);
    long long v8 = xmmword_192DA88D0;
    strcpy((char *)v7, "Invalid Function Argument: handle is NULL.");
    char v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    if (v6 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v8) < 0) {
      operator delete(v7);
    }
    return 1;
  }
  return result;
}

void sub_1922DD17C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1922DD1BC(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z43e5rt_async_event_get_iosurface_shared_eventE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z43e5rt_async_event_get_iosurface_shared_eventE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z43e5rt_async_event_get_iosurface_shared_eventE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z43e5rt_async_event_get_iosurface_shared_eventE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_1922DD22C()
{
  return &unk_1EE391E78;
}

void sub_1922DD23C()
{
}

void *sub_1922DD250(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EE391E98;
  result[1] = v3;
  return result;
}

uint64_t sub_1922DD298(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE391E98;
  a2[1] = v2;
  return result;
}

uint64_t sub_1922DD2C4(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 8);
  if (v1)
  {
    uint64_t v2 = *v1;
    if (*v1)
    {
      char v4 = *(std::__shared_weak_count **)(v2 + 8);
      if (v4)
      {
        if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
      }
      MEMORY[0x192FF16B0](v2, 0x20C40A4A59CD2);
      uint64_t v1 = *(uint64_t **)(a1 + 8);
    }
    uint64_t result = 0;
    *uint64_t v1 = 0;
  }
  else
  {
    long long v8 = operator new(0x30uLL);
    long long v9 = xmmword_192DA88D0;
    strcpy((char *)v8, "Invalid Function Argument: handle is NULL.");
    char v7 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v8, (uint64_t *)__p);
    if (v7 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v9) < 0) {
      operator delete(v8);
    }
    return 1;
  }
  return result;
}

void sub_1922DD40C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1922DD448(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z24e5rt_async_event_releaseE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z24e5rt_async_event_releaseE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z24e5rt_async_event_releaseE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z24e5rt_async_event_releaseE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_1922DD4B8()
{
  return &unk_1EE391EF8;
}

uint64_t sub_1922DD4C4(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 8))(a1);
}

uint64_t e5rt_execution_stream_operation_create_resource_sharing_precompiled_compute_operations_with_multiple_options(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  char v6 = operator new(0x20uLL);
  *char v6 = &unk_1EE392018;
  v6[1] = a1;
  v6[2] = a2;
  void v6[3] = a3;
  uint64_t v10 = v6;
  uint64_t v7 = E5RT::ExceptionSafeExecute((uint64_t)v9);
  if (v10 == v9)
  {
    (*(void (**)(void *))(v9[0] + 32))(v9);
  }
  else if (v10)
  {
    (*(void (**)(void))(*v10 + 40))();
  }
  return v7;
}

void sub_1922DD604(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_execution_stream_operation_get_num_inouts(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EE392398;
  v4[1] = a1;
  v4[2] = a2;
  long long v5 = v4;
  uint64_t v2 = E5RT::ExceptionSafeExecute((uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

void sub_1922DD700(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_execution_stream_operation_get_inout_names(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = operator new(0x20uLL);
  *uint64_t v6 = &unk_1EE392418;
  v6[1] = a1;
  v6[2] = a2;
  void v6[3] = a3;
  uint64_t v10 = v6;
  uint64_t v7 = E5RT::ExceptionSafeExecute((uint64_t)v9);
  if (v10 == v9)
  {
    (*(void (**)(void *))(v9[0] + 32))(v9);
  }
  else if (v10)
  {
    (*(void (**)(void))(*v10 + 40))();
  }
  return v7;
}

void sub_1922DD81C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_execution_stream_operation_retain_inout_port(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = operator new(0x20uLL);
  *uint64_t v6 = &unk_1EE392498;
  v6[1] = a1;
  v6[2] = a2;
  void v6[3] = a3;
  uint64_t v10 = v6;
  uint64_t v7 = E5RT::ExceptionSafeExecute((uint64_t)v9);
  if (v10 == v9)
  {
    (*(void (**)(void *))(v9[0] + 32))(v9);
  }
  else if (v10)
  {
    (*(void (**)(void))(*v10 + 40))();
  }
  return v7;
}

void sub_1922DD938(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_execution_stream_operation_release(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  v3[0] = &unk_1EE392518;
  v3[1] = a1;
  char v4 = v3;
  uint64_t v1 = E5RT::ExceptionSafeExecute((uint64_t)v3);
  if (v4 == v3)
  {
    (*(void (**)(void *))(v3[0] + 32))(v3);
  }
  else if (v4)
  {
    (*(void (**)(void))(*v4 + 40))();
  }
  return v1;
}

void sub_1922DDA34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_execution_stream_operation_get_opname(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EE392598;
  v4[1] = a1;
  v4[2] = a2;
  uint64_t v5 = v4;
  uint64_t v2 = E5RT::ExceptionSafeExecute((uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

void sub_1922DDB30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_execution_stream_operation_bind_dependent_events(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = operator new(0x20uLL);
  *uint64_t v6 = &unk_1EE392618;
  v6[1] = a1;
  v6[2] = a3;
  void v6[3] = a2;
  uint64_t v10 = v6;
  uint64_t v7 = E5RT::ExceptionSafeExecute((uint64_t)v9);
  if (v10 == v9)
  {
    (*(void (**)(void *))(v9[0] + 32))(v9);
  }
  else if (v10)
  {
    (*(void (**)(void))(*v10 + 40))();
  }
  return v7;
}

void sub_1922DDC4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_execution_stream_operation_bind_completion_event(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EE392698;
  v4[1] = a1;
  v4[2] = a2;
  uint64_t v5 = v4;
  uint64_t v2 = E5RT::ExceptionSafeExecute((uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

void sub_1922DDD48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_execution_stream_operation_get_dependent_event_count(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EE392718;
  v4[1] = a1;
  v4[2] = a2;
  uint64_t v5 = v4;
  uint64_t v2 = E5RT::ExceptionSafeExecute((uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

void sub_1922DDE44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_execution_stream_operation_retain_dependent_events(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EE392798;
  v4[1] = a1;
  v4[2] = a2;
  uint64_t v5 = v4;
  uint64_t v2 = E5RT::ExceptionSafeExecute((uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

void sub_1922DDF40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_execution_stream_operation_retain_completion_event(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EE392818;
  v4[1] = a1;
  v4[2] = a2;
  uint64_t v5 = v4;
  uint64_t v2 = E5RT::ExceptionSafeExecute((uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

void sub_1922DE03C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_execution_stream_operation_reshape_operation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  long long v8 = operator new(0x28uLL);
  *long long v8 = &unk_1EE392918;
  v8[1] = a1;
  v8[2] = a2;
  v8[3] = a3;
  v8[4] = a4;
  uint64_t v12 = v8;
  uint64_t v9 = E5RT::ExceptionSafeExecute((uint64_t)v11);
  if (v12 == v11)
  {
    (*(void (**)(void *))(v11[0] + 32))(v11);
  }
  else if (v12)
  {
    (*(void (**)(void))(*v12 + 40))();
  }
  return v9;
}

void sub_1922DE160(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_execution_stream_operation_serialize_inference_frame_data(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  long long v8 = operator new(0x28uLL);
  *long long v8 = &unk_1EE392998;
  v8[1] = a1;
  v8[2] = a2;
  v8[3] = a3;
  *((unsigned char *)v8 + 32) = a4;
  uint64_t v12 = v8;
  uint64_t v9 = E5RT::ExceptionSafeExecute((uint64_t)v11);
  if (v12 == v11)
  {
    (*(void (**)(void *))(v11[0] + 32))(v11);
  }
  else if (v12)
  {
    (*(void (**)(void))(*v12 + 40))();
  }
  return v9;
}

void sub_1922DE284(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_execution_stream_operation_serialize_inference_frame_data_per_segment(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  long long v8 = operator new(0x28uLL);
  *long long v8 = &unk_1EE392A18;
  v8[1] = a1;
  v8[2] = a2;
  v8[3] = a3;
  *((unsigned char *)v8 + 32) = a4;
  uint64_t v12 = v8;
  uint64_t v9 = E5RT::ExceptionSafeExecute((uint64_t)v11);
  if (v12 == v11)
  {
    (*(void (**)(void *))(v11[0] + 32))(v11);
  }
  else if (v12)
  {
    (*(void (**)(void))(*v12 + 40))();
  }
  return v9;
}

void sub_1922DE3A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  exceptiounint64_t n = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  uint64_t v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x1E4FBA350], MEMORY[0x1E4FBA1F8]);
}

void sub_1922DE3F4()
{
}

__n128 sub_1922DE408(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x38uLL);
  *(void *)uint64_t v2 = &unk_1EE391F18;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  __n128 result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 sub_1922DE464(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE391F18;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1922DE4A4(void *a1)
{
  if (a1[1])
  {
    if (a1[2])
    {
      if (a1[3])
      {
        if (a1[4]) {
          operator new();
        }
        std::string __dst = (char *)operator new(0x38uLL);
        long long v5 = xmmword_192DA90A0;
        strcpy(__dst, "Invalid Function Argument: e5_function_name is NULL.");
        char v3 = 10;
        strcpy((char *)v2, "operator()");
        E5RT::LogErrorMessage((uint64_t *)&__dst, v2);
      }
      else
      {
        std::string __dst = (char *)operator new(0x38uLL);
        long long v5 = xmmword_192DA90B0;
        strcpy(__dst, "Invalid Function Argument: e5_library_path is NULL.");
        char v3 = 10;
        strcpy((char *)v2, "operator()");
        E5RT::LogErrorMessage((uint64_t *)&__dst, v2);
      }
    }
    else
    {
      std::string __dst = (char *)operator new(0x38uLL);
      long long v5 = xmmword_192DA8900;
      strcpy(__dst, "Invalid Function Argument: operation_name is NULL.");
      char v3 = 10;
      strcpy((char *)v2, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&__dst, v2);
    }
  }
  else
  {
    std::string __dst = (char *)operator new(0x30uLL);
    long long v5 = xmmword_192DA88D0;
    strcpy(__dst, "Invalid Function Argument: handle is NULL.");
    char v3 = 10;
    strcpy((char *)v2, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&__dst, v2);
  }
  if (v3 < 0) {
    operator delete((void *)v2[0]);
  }
  if (SHIBYTE(v5) < 0) {
    operator delete(__dst);
  }
  return 1;
}

void sub_1922DE9D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a27 < 0)
  {
    operator delete(a22);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1922DEB10(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z68e5rt_execution_stream_operation_create_precompiled_compute_operationE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z68e5rt_execution_stream_operation_create_precompiled_compute_operationE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z68e5rt_execution_stream_operation_create_precompiled_compute_operationE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z68e5rt_execution_stream_operation_create_precompiled_compute_operationE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_1922DEB80()
{
  return &unk_1EE391F78;
}

void std::__shared_ptr_pointer<E5RT::ExecutionStreamOperation  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

uint64_t std::__shared_ptr_pointer<E5RT::ExecutionStreamOperation  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<E5RT::ExecutionStreamOperation  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000192DA9193) {
    return a1 + 24;
  }
  if (((v3 & 0x8000000192DA9193 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000192DA9193)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000192DA9193 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

void sub_1922DEC80()
{
}

__n128 sub_1922DEC94(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE391F98;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1922DECE0(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE391F98;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1922DED10(uint64_t a1)
{
  if (*(void *)(a1 + 8))
  {
    if (*(void *)(a1 + 16)) {
      operator new();
    }
    char v4 = operator new(0x30uLL);
    long long v5 = xmmword_192DA90C0;
    strcpy((char *)v4, "Invalid Function Argument: options is NULL.");
    char v3 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v4, (uint64_t *)__p);
    if (v3 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v5) < 0) {
      operator delete(v4);
    }
    return 1;
  }
  else
  {
    char v4 = operator new(0x30uLL);
    long long v5 = xmmword_192DA88D0;
    strcpy((char *)v4, "Invalid Function Argument: handle is NULL.");
    char v3 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v4, (uint64_t *)__p);
    if (v3 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v5) < 0) {
      operator delete(v4);
    }
    return 1;
  }
}

void sub_1922DEFA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0)
  {
    operator delete(a15);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1922DF054(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z81e5rt_execution_stream_operation_create_precompiled_compute_operation_with_optionsE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z81e5rt_execution_stream_operation_create_precompiled_compute_operation_with_optionsE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z81e5rt_execution_stream_operation_create_precompiled_compute_operation_with_optionsE3$_0"))return 0; {
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z81e5rt_execution_stream_operation_create_precompiled_compute_operation_with_optionsE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  }
  return 0;
}

void *sub_1922DF0C4()
{
  return &unk_1EE391FF8;
}

void sub_1922DF0D4()
{
}

__n128 sub_1922DF0E8(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1EE392018;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_1922DF13C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE392018;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1922DF174(void *a1)
{
  if (!a1[1])
  {
    uint64_t v18 = operator new(0x30uLL);
    long long v19 = xmmword_192DA90C0;
    strcpy((char *)v18, "Invalid Function Argument: handles is NULL.");
    char v17 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v18, (uint64_t *)__p);
LABEL_33:
    if (v17 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v19) < 0) {
      operator delete(v18);
    }
    return 1;
  }
  if (!a1[2])
  {
    uint64_t v18 = operator new(0x40uLL);
    long long v19 = xmmword_192DA90E0;
    strcpy((char *)v18, "Invalid Function Argument: multiple_create_options is NULL.");
    char v17 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v18, (uint64_t *)__p);
    goto LABEL_33;
  }
  if (!a1[3])
  {
    uint64_t v18 = operator new(0x38uLL);
    long long v19 = xmmword_192DA90D0;
    strcpy((char *)v18, "Invalid Function Argument: num_compute_operation is 0");
    char v17 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v18, (uint64_t *)__p);
    goto LABEL_33;
  }
  uint64_t v2 = 0;
  unint64_t v3 = 0;
  uint64_t v18 = 0;
  long long v19 = 0uLL;
  do
  {
    while (1)
    {
      uint64_t v4 = *(void *)(a1[2] + 8 * v3);
      if ((unint64_t)v2 < *((void *)&v19 + 1)) {
        break;
      }
      uint64_t v2 = std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__push_back_slow_path<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions> const&>((uint64_t)&v18, (long long *)v4);
      *(void *)&long long v19 = v2;
      if (++v3 >= a1[3]) {
        goto LABEL_10;
      }
    }
    *uint64_t v2 = *(void *)v4;
    uint64_t v5 = *(void *)(v4 + 8);
    v2[1] = v5;
    if (v5) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    }
    v2 += 2;
    *(void *)&long long v19 = v2;
    ++v3;
  }
  while (v3 < a1[3]);
LABEL_10:
  E5RT::ExecutionStreamOperation::CreateResourceSharingPreCompiledComputeOps(__p, &v18);
  if (a1[3]) {
    operator new();
  }
  uint64_t v6 = __p[0];
  if (__p[0])
  {
    uint64_t v7 = __p[1];
    long long v8 = __p[0];
    if (__p[1] != __p[0])
    {
      do
      {
        uint64_t v10 = *--v7;
        uint64_t v9 = v10;
        void *v7 = 0;
        if (v10) {
          (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
        }
      }
      while (v7 != v6);
      long long v8 = __p[0];
    }
    __p[1] = v6;
    operator delete(v8);
  }
  uint64_t v11 = (char *)v18;
  if (v18)
  {
    uint64_t v12 = (char *)v19;
    uint64_t v13 = v18;
    if ((void *)v19 != v18)
    {
      do
      {
        uint64_t v14 = (std::__shared_weak_count *)*((void *)v12 - 1);
        if (v14)
        {
          if (!atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
            std::__shared_weak_count::__release_weak(v14);
          }
        }
        v12 -= 16;
      }
      while (v12 != v11);
      uint64_t v13 = v18;
    }
    *(void *)&long long v19 = v11;
    operator delete(v13);
  }
  return 0;
}

void sub_1922DF5B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1922DF708(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z108e5rt_execution_stream_operation_create_resource_sharing_precompiled_compute_operations_with_mul"
                     "tiple_optionsE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"Z108e5rt_execution_stream_operation_create_resource_sharing_precompiled_compute_operatio"
                                "ns_with_multiple_optionsE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z108e5rt_execution_stream_operation_create_resource_sharing_precompiled_compute_operations_with_multiple_optionsE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z108e5rt_execution_stream_operation_create_resource_sharing_precompiled_compute_operations_with_multiple_optionsE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_1922DF778()
{
  return &unk_1EE392078;
}

void sub_1922DF788()
{
}

__n128 sub_1922DF79C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE392098;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1922DF7E8(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE392098;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1922DF818(uint64_t a1)
{
  uint64_t v1 = *(E5RT::ExecutionStreamOperationInternal ****)(a1 + 8);
  if (v1)
  {
    if (*(void *)(a1 + 16))
    {
      uint64_t InputPorts = E5RT::ExecutionStreamOperation::GetInputPorts(*v1);
      uint64_t result = 0;
      **(void **)(a1 + 16) = *(void *)(InputPorts + 24);
    }
    else
    {
      uint64_t v7 = operator new(0x30uLL);
      long long v8 = xmmword_192DA88C0;
      strcpy((char *)v7, "Invalid Function Argument: num_ports is NULL.");
      char v6 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
      if (v6 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v8) < 0) {
        operator delete(v7);
      }
      return 1;
    }
  }
  else
  {
    uint64_t v7 = operator new(0x30uLL);
    long long v8 = xmmword_192DA88D0;
    strcpy((char *)v7, "Invalid Function Argument: handle is NULL.");
    char v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    if (v6 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v8) < 0) {
      operator delete(v7);
    }
    return 1;
  }
  return result;
}

void sub_1922DF99C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1922DF9DC(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z46e5rt_execution_stream_operation_get_num_inputsE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z46e5rt_execution_stream_operation_get_num_inputsE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z46e5rt_execution_stream_operation_get_num_inputsE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z46e5rt_execution_stream_operation_get_num_inputsE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_1922DFA4C()
{
  return &unk_1EE3920F8;
}

void sub_1922DFA5C()
{
}

__n128 sub_1922DFA70(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1EE392118;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_1922DFAC4(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE392118;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1922DFAFC(uint64_t a1)
{
  return sub_1922DFB8C(*(E5RT::ExecutionStreamOperationInternal ****)(a1 + 8), 0, *(void *)(a1 + 16), *(void **)(a1 + 24));
}

uint64_t sub_1922DFB10(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z47e5rt_execution_stream_operation_get_input_namesE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z47e5rt_execution_stream_operation_get_input_namesE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z47e5rt_execution_stream_operation_get_input_namesE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z47e5rt_execution_stream_operation_get_input_namesE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_1922DFB80()
{
  return &unk_1EE392178;
}

uint64_t sub_1922DFB8C(E5RT::ExecutionStreamOperationInternal ***a1, int a2, uint64_t a3, void *a4)
{
  if (a1)
  {
    uint64_t v4 = a4;
    if (a4)
    {
      if (a2 == 2)
      {
        uint64_t OutputPorts = E5RT::ExecutionStreamOperation::GetInOutPorts(*a1);
      }
      else if (a2 == 1)
      {
        uint64_t OutputPorts = E5RT::ExecutionStreamOperation::GetOutputPorts(*a1);
      }
      else
      {
        uint64_t OutputPorts = E5RT::ExecutionStreamOperation::GetInputPorts(*a1);
      }
      if (*(void *)(OutputPorts + 24) == a3)
      {
        for (unint64_t i = *(uint64_t **)(OutputPorts + 16); i; unint64_t i = (uint64_t *)*i)
        {
          uint64_t v9 = i + 2;
          if (*((char *)i + 39) < 0) {
            uint64_t v9 = (void *)*v9;
          }
          *v4++ = v9;
        }
        return 0;
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(v12, "Invalid Function Argument: num_ports does not match number of ports in Execution Stream operation.");
        std::string::basic_string[abi:ne180100]<0>(__p, "PopulatePortNames");
        E5RT::LogErrorMessage((uint64_t *)v12, (uint64_t *)__p);
        if (v11 < 0) {
          operator delete(__p[0]);
        }
        if (v13 < 0) {
          operator delete(v12[0]);
        }
        return 1;
      }
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(v12, "Invalid Function Argument: names is NULL.");
      std::string::basic_string[abi:ne180100]<0>(__p, "PopulatePortNames");
      E5RT::LogErrorMessage((uint64_t *)v12, (uint64_t *)__p);
      if (v11 < 0) {
        operator delete(__p[0]);
      }
      if (v13 < 0) {
        operator delete(v12[0]);
      }
      return 1;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v12, "Invalid Function Argument: handle is NULL.");
    std::string::basic_string[abi:ne180100]<0>(__p, "PopulatePortNames");
    E5RT::LogErrorMessage((uint64_t *)v12, (uint64_t *)__p);
    if (v11 < 0) {
      operator delete(__p[0]);
    }
    if (v13 < 0) {
      operator delete(v12[0]);
    }
    return 1;
  }
}

void sub_1922DFD48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

void sub_1922DFDC0()
{
}

__n128 sub_1922DFDD4(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1EE392198;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_1922DFE28(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE392198;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1922DFE60(uint64_t *a1)
{
  return sub_1922DFEF0(a1[1], 0, a1[2], a1[3]);
}

uint64_t sub_1922DFE74(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z49e5rt_execution_stream_operation_retain_input_portE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z49e5rt_execution_stream_operation_retain_input_portE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z49e5rt_execution_stream_operation_retain_input_portE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z49e5rt_execution_stream_operation_retain_input_portE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_1922DFEE4()
{
  return &unk_1EE3921F8;
}

uint64_t sub_1922DFEF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1)
  {
    if (a3)
    {
      if (a4) {
        operator new();
      }
      std::string::basic_string[abi:ne180100]<0>(&__dst, "Invalid Function Argument: port_handle is NULL.");
      std::string::basic_string[abi:ne180100]<0>(__p, "GetPort");
      E5RT::LogErrorMessage((uint64_t *)&__dst, (uint64_t *)__p);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&__dst, "Invalid Function Argument: port_name is NULL.");
      std::string::basic_string[abi:ne180100]<0>(__p, "GetPort");
      E5RT::LogErrorMessage((uint64_t *)&__dst, (uint64_t *)__p);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__dst, "Invalid Function Argument: handle is NULL.");
    std::string::basic_string[abi:ne180100]<0>(__p, "GetPort");
    E5RT::LogErrorMessage((uint64_t *)&__dst, (uint64_t *)__p);
  }
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v8 < 0) {
    operator delete(__dst);
  }
  return 1;
}

void sub_1922E02D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0)
  {
    operator delete(a15);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::unique_ptr<e5rt_io_port>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    unint64_t v3 = *(std::__shared_weak_count **)(v2 + 8);
    if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    MEMORY[0x192FF16B0](v2, 0x20C40A4A59CD2);
  }
  return a1;
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1, const char *a2)
{
  __n128 result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D8] + 16);
  return result;
}

void sub_1922E042C()
{
}

__n128 sub_1922E0440(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE392218;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1922E048C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE392218;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1922E04BC(uint64_t a1)
{
  uint64_t v1 = *(E5RT::ExecutionStreamOperationInternal ****)(a1 + 8);
  if (v1)
  {
    if (*(void *)(a1 + 16))
    {
      uint64_t OutputPorts = E5RT::ExecutionStreamOperation::GetOutputPorts(*v1);
      uint64_t result = 0;
      **(void **)(a1 + 16) = *(void *)(OutputPorts + 24);
    }
    else
    {
      uint64_t v7 = operator new(0x30uLL);
      long long v8 = xmmword_192DA88C0;
      strcpy((char *)v7, "Invalid Function Argument: num_ports is NULL.");
      char v6 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
      if (v6 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v8) < 0) {
        operator delete(v7);
      }
      return 1;
    }
  }
  else
  {
    uint64_t v7 = operator new(0x30uLL);
    long long v8 = xmmword_192DA88D0;
    strcpy((char *)v7, "Invalid Function Argument: handle is NULL.");
    char v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    if (v6 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v8) < 0) {
      operator delete(v7);
    }
    return 1;
  }
  return result;
}

void sub_1922E0640(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1922E0680(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z47e5rt_execution_stream_operation_get_num_outputsE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z47e5rt_execution_stream_operation_get_num_outputsE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z47e5rt_execution_stream_operation_get_num_outputsE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z47e5rt_execution_stream_operation_get_num_outputsE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_1922E06F0()
{
  return &unk_1EE392278;
}

void sub_1922E0700()
{
}

__n128 sub_1922E0714(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1EE392298;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_1922E0768(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE392298;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1922E07A0(uint64_t a1)
{
  return sub_1922DFB8C(*(E5RT::ExecutionStreamOperationInternal ****)(a1 + 8), 1, *(void *)(a1 + 16), *(void **)(a1 + 24));
}

uint64_t sub_1922E07B4(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z48e5rt_execution_stream_operation_get_output_namesE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z48e5rt_execution_stream_operation_get_output_namesE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z48e5rt_execution_stream_operation_get_output_namesE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z48e5rt_execution_stream_operation_get_output_namesE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_1922E0824()
{
  return &unk_1EE3922F8;
}

void sub_1922E0834()
{
}

__n128 sub_1922E0848(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1EE392318;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_1922E089C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE392318;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1922E08D4(uint64_t *a1)
{
  return sub_1922DFEF0(a1[1], 1, a1[2], a1[3]);
}

uint64_t sub_1922E08E8(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z50e5rt_execution_stream_operation_retain_output_portE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z50e5rt_execution_stream_operation_retain_output_portE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z50e5rt_execution_stream_operation_retain_output_portE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z50e5rt_execution_stream_operation_retain_output_portE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_1922E0958()
{
  return &unk_1EE392378;
}

void sub_1922E0968()
{
}

__n128 sub_1922E097C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE392398;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1922E09C8(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE392398;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1922E09F8(uint64_t a1)
{
  uint64_t v1 = *(E5RT::ExecutionStreamOperationInternal ****)(a1 + 8);
  if (v1)
  {
    if (*(void *)(a1 + 16))
    {
      uint64_t v3 = E5RT::ExecutionStreamOperation::GetInOutPorts(*v1);
      uint64_t result = 0;
      **(void **)(a1 + 16) = *(void *)(v3 + 24);
    }
    else
    {
      uint64_t v7 = operator new(0x30uLL);
      long long v8 = xmmword_192DA88C0;
      strcpy((char *)v7, "Invalid Function Argument: num_ports is NULL.");
      char v6 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
      if (v6 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v8) < 0) {
        operator delete(v7);
      }
      return 1;
    }
  }
  else
  {
    uint64_t v7 = operator new(0x30uLL);
    long long v8 = xmmword_192DA88D0;
    strcpy((char *)v7, "Invalid Function Argument: handle is NULL.");
    char v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    if (v6 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v8) < 0) {
      operator delete(v7);
    }
    return 1;
  }
  return result;
}

void sub_1922E0B7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1922E0BBC(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z46e5rt_execution_stream_operation_get_num_inoutsE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z46e5rt_execution_stream_operation_get_num_inoutsE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z46e5rt_execution_stream_operation_get_num_inoutsE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z46e5rt_execution_stream_operation_get_num_inoutsE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_1922E0C2C()
{
  return &unk_1EE3923F8;
}

void sub_1922E0C3C()
{
}

__n128 sub_1922E0C50(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1EE392418;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_1922E0CA4(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE392418;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1922E0CDC(uint64_t a1)
{
  return sub_1922DFB8C(*(E5RT::ExecutionStreamOperationInternal ****)(a1 + 8), 2, *(void *)(a1 + 16), *(void **)(a1 + 24));
}

uint64_t sub_1922E0CF0(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z47e5rt_execution_stream_operation_get_inout_namesE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z47e5rt_execution_stream_operation_get_inout_namesE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z47e5rt_execution_stream_operation_get_inout_namesE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z47e5rt_execution_stream_operation_get_inout_namesE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_1922E0D60()
{
  return &unk_1EE392478;
}

void sub_1922E0D70()
{
}

__n128 sub_1922E0D84(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1EE392498;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_1922E0DD8(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE392498;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1922E0E10(uint64_t *a1)
{
  return sub_1922DFEF0(a1[1], 2, a1[2], a1[3]);
}

uint64_t sub_1922E0E24(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z49e5rt_execution_stream_operation_retain_inout_portE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z49e5rt_execution_stream_operation_retain_inout_portE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z49e5rt_execution_stream_operation_retain_inout_portE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z49e5rt_execution_stream_operation_retain_inout_portE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_1922E0E94()
{
  return &unk_1EE3924F8;
}

void sub_1922E0EA4()
{
}

void *sub_1922E0EB8(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EE392518;
  result[1] = v3;
  return result;
}

uint64_t sub_1922E0F00(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE392518;
  a2[1] = v2;
  return result;
}

uint64_t sub_1922E0F2C(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 8);
  if (v1)
  {
    uint64_t v2 = *v1;
    if (*v1)
    {
      uint64_t v4 = *(std::__shared_weak_count **)(v2 + 8);
      if (v4)
      {
        if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
      }
      MEMORY[0x192FF16B0](v2, 0x20C40A4A59CD2);
      uint64_t result = 0;
      **(void **)(a1 + 8) = 0;
    }
    else
    {
      long long v8 = operator new(0x30uLL);
      long long v9 = xmmword_192DA90C0;
      strcpy((char *)v8, "Invalid Function Argument: *handle is NULL.");
      char v7 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v8, (uint64_t *)__p);
      if (v7 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v9) < 0) {
        operator delete(v8);
      }
      return 1;
    }
  }
  else
  {
    long long v8 = operator new(0x30uLL);
    long long v9 = xmmword_192DA88D0;
    strcpy((char *)v8, "Invalid Function Argument: handle is NULL.");
    char v7 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v8, (uint64_t *)__p);
    if (v7 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v9) < 0) {
      operator delete(v8);
    }
    return 1;
  }
  return result;
}

void sub_1922E1110(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1922E1150(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z39e5rt_execution_stream_operation_releaseE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z39e5rt_execution_stream_operation_releaseE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z39e5rt_execution_stream_operation_releaseE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z39e5rt_execution_stream_operation_releaseE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_1922E11C0()
{
  return &unk_1EE392578;
}

void sub_1922E11D0()
{
}

__n128 sub_1922E11E4(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE392598;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1922E1230(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE392598;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1922E1260(uint64_t a1)
{
  uint64_t v1 = *(E5RT::ExecutionStreamOperationInternal ****)(a1 + 8);
  if (v1)
  {
    if (*(void *)(a1 + 16))
    {
      Opuint64_t Name = E5RT::ExecutionStreamOperation::GetOpName(*v1);
      uint64_t result = 0;
      if (*(char *)(OpName + 23) < 0) {
        Opuint64_t Name = *(void *)OpName;
      }
      **(void **)(a1 + 16) = OpName;
    }
    else
    {
      char v7 = operator new(0x30uLL);
      long long v8 = xmmword_192DA88D0;
      strcpy((char *)v7, "Invalid Function Argument: opname is NULL.");
      char v6 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
      if (v6 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v8) < 0) {
        operator delete(v7);
      }
      return 1;
    }
  }
  else
  {
    char v7 = operator new(0x30uLL);
    long long v8 = xmmword_192DA88D0;
    strcpy((char *)v7, "Invalid Function Argument: handle is NULL.");
    char v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    if (v6 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v8) < 0) {
      operator delete(v7);
    }
    return 1;
  }
  return result;
}

void sub_1922E13F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1922E1430(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z42e5rt_execution_stream_operation_get_opnameE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z42e5rt_execution_stream_operation_get_opnameE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z42e5rt_execution_stream_operation_get_opnameE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z42e5rt_execution_stream_operation_get_opnameE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_1922E14A0()
{
  return &unk_1EE3925F8;
}

void sub_1922E14B0()
{
}

__n128 sub_1922E14C4(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1EE392618;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_1922E1518(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE392618;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1922E1550(void *a1)
{
  uint64_t v1 = (uint64_t *)a1[1];
  if (v1)
  {
    if (!a1[2])
    {
      memset(v16, 0, sizeof(v16));
      int v17 = 1065353216;
LABEL_13:
      E5RT::ExecutionStreamOperation::BindDependentAsyncEvents(*v1);
      uint64_t v8 = 0;
      long long v9 = v16[2];
      if (!v16[2]) {
        goto LABEL_24;
      }
      do
      {
LABEL_16:
        uint64_t v10 = v9;
        long long v9 = (void *)*v9;
        char v11 = (std::__shared_weak_count *)v10[3];
        if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
        operator delete(v10);
      }
      while (v9);
LABEL_24:
      uint64_t v12 = v16[0];
      v16[0] = 0;
      if (v12) {
        operator delete(v12);
      }
      return v8;
    }
    if (a1[3])
    {
      uint64_t v3 = 0;
      memset(v16, 0, sizeof(v16));
      int v17 = 1065353216;
      while (1)
      {
        uint64_t v4 = *(uint64_t **)(a1[3] + 8 * v3);
        if (!v4) {
          break;
        }
        uint64_t v6 = *v4;
        uint64_t v5 = v4[1];
        *(void *)uint64_t v18 = v6;
        *(void *)&v18[8] = v5;
        if (v5) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
        }
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__emplace_unique_key_args<std::shared_ptr<E5RT::AsyncEvent const>,std::shared_ptr<E5RT::AsyncEvent const>>((uint64_t)v16, (uint64_t *)v18, (uint64_t)v18);
        char v7 = *(std::__shared_weak_count **)&v18[8];
        if (*(void *)&v18[8]
          && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&v18[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
        if ((unint64_t)++v3 >= a1[2])
        {
          uint64_t v1 = (uint64_t *)a1[1];
          goto LABEL_13;
        }
      }
      *(void *)uint64_t v18 = operator new(0x38uLL);
      *(_OWORD *)&v18[8] = xmmword_192DA8910;
      strcpy(*(char **)v18, "Invalid Function Argument: dependent_events[i] is NULL.");
      char v15 = 10;
      strcpy((char *)v14, "operator()");
      E5RT::LogErrorMessage((uint64_t *)v18, v14);
      if (v15 < 0) {
        operator delete((void *)v14[0]);
      }
      if ((v18[23] & 0x80000000) != 0) {
        operator delete(*(void **)v18);
      }
      uint64_t v8 = 1;
      long long v9 = v16[2];
      if (!v16[2]) {
        goto LABEL_24;
      }
      goto LABEL_16;
    }
    v16[0] = operator new(0x38uLL);
    *(_OWORD *)&v16[1] = xmmword_192DA90A0;
    strcpy((char *)v16[0], "Invalid Function Argument: dependent_events is NULL.");
    v18[23] = 10;
    strcpy(v18, "operator()");
    E5RT::LogErrorMessage((uint64_t *)v16, (uint64_t *)v18);
  }
  else
  {
    v16[0] = operator new(0x30uLL);
    *(_OWORD *)&v16[1] = xmmword_192DA88D0;
    strcpy((char *)v16[0], "Invalid Function Argument: handle is NULL.");
    v18[23] = 10;
    strcpy(v18, "operator()");
    E5RT::LogErrorMessage((uint64_t *)v16, (uint64_t *)v18);
  }
  if ((v18[23] & 0x80000000) != 0) {
    operator delete(*(void **)v18);
  }
  if (SHIBYTE(v16[2]) < 0) {
    operator delete(v16[0]);
  }
  return 1;
}

void sub_1922E1888(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1922E1978(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z53e5rt_execution_stream_operation_bind_dependent_eventsE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z53e5rt_execution_stream_operation_bind_dependent_eventsE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z53e5rt_execution_stream_operation_bind_dependent_eventsE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z53e5rt_execution_stream_operation_bind_dependent_eventsE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_1922E19E8()
{
  return &unk_1EE392678;
}

void *std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__emplace_unique_key_args<std::shared_ptr<E5RT::AsyncEvent const>,std::shared_ptr<E5RT::AsyncEvent const>>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = HIDWORD(*a2);
  unint64_t v8 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ v7);
  unint64_t v9 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) ^ ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) >> 47));
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) ^ ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) >> 47));
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
    }
    else
    {
      unint64_t v3 = v9 & (v10 - 1);
    }
    uint64_t v12 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      char v13 = *v12;
      if (*v12)
      {
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v15 = v13[1];
            if (v15 == v9)
            {
              if (v13[2] == v6) {
                return v13;
              }
            }
            else if ((v15 & (v10 - 1)) != v3)
            {
              goto LABEL_23;
            }
            char v13 = (void *)*v13;
            if (!v13) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v14 = v13[1];
          if (v14 == v9)
          {
            if (v13[2] == v6) {
              return v13;
            }
          }
          else
          {
            if (v14 >= v10) {
              v14 %= v10;
            }
            if (v14 != v3) {
              break;
            }
          }
          char v13 = (void *)*v13;
        }
        while (v13);
      }
    }
  }
LABEL_23:
  uint64_t v16 = (void *)(a1 + 16);
  char v13 = operator new(0x20uLL);
  void *v13 = 0;
  v13[1] = v9;
  *((_OWORD *)v13 + 1) = *(_OWORD *)a3;
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (v10 && (float)(v18 * (float)v10) >= v17)
  {
    uint64_t v19 = *(void *)a1;
    uint64_t v20 = *(void **)(*(void *)a1 + 8 * v3);
    if (v20)
    {
LABEL_26:
      void *v13 = *v20;
LABEL_61:
      *uint64_t v20 = v13;
      goto LABEL_62;
    }
  }
  else
  {
    BOOL v21 = 1;
    if (v10 >= 3) {
      BOOL v21 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v22 = v21 | (2 * v10);
    unint64_t v23 = vcvtps_u32_f32(v17 / v18);
    if (v22 <= v23) {
      size_t prime = v23;
    }
    else {
      size_t prime = v22;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v25 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v25) {
      goto LABEL_37;
    }
    if (prime < *(void *)&v25)
    {
      unint64_t v26 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v25 < 3uLL || (uint8x8_t v27 = (uint8x8_t)vcnt_s8(v25), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
      {
        unint64_t v26 = std::__next_prime(v26);
      }
      else
      {
        uint64_t v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2) {
          unint64_t v26 = v28;
        }
      }
      if (prime <= v26) {
        size_t prime = v26;
      }
      if (prime < *(void *)&v25) {
LABEL_37:
      }
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v10 = *(void *)(a1 + 8);
    unint64_t v29 = v10 - 1;
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
      {
        unint64_t v3 = v9 % v10;
        uint64_t v19 = *(void *)a1;
        uint64_t v20 = *(void **)(*(void *)a1 + 8 * (v9 % v10));
        if (v20) {
          goto LABEL_26;
        }
      }
      else
      {
        unint64_t v3 = v9;
        uint64_t v19 = *(void *)a1;
        uint64_t v20 = *(void **)(*(void *)a1 + 8 * v9);
        if (v20) {
          goto LABEL_26;
        }
      }
    }
    else
    {
      unint64_t v3 = v29 & v9;
      uint64_t v19 = *(void *)a1;
      uint64_t v20 = *(void **)(*(void *)a1 + 8 * (v29 & v9));
      if (v20) {
        goto LABEL_26;
      }
    }
  }
  void *v13 = *v16;
  void *v16 = v13;
  *(void *)(v19 + 8 * v3) = v16;
  if (*v13)
  {
    unint64_t v30 = *(void *)(*v13 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v30 >= v10) {
        v30 %= v10;
      }
    }
    else
    {
      v30 &= v10 - 1;
    }
    uint64_t v20 = (void *)(*(void *)a1 + 8 * v30);
    goto LABEL_61;
  }
LABEL_62:
  ++*(void *)(a1 + 24);
  return v13;
}

void sub_1922E1D48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::shared_ptr<E5RT::AsyncEvent const>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::shared_ptr<E5RT::AsyncEvent const>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::unique_ptr<std::__hash_node<std::shared_ptr<E5RT::AsyncEvent const>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::shared_ptr<E5RT::AsyncEvent const>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16))
    {
      unint64_t v3 = (std::__shared_weak_count *)v2[3];
      if (v3)
      {
        if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
        }
      }
    }
    operator delete(v2);
  }
  return a1;
}

void sub_1922E1DF0()
{
}

__n128 sub_1922E1E04(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE392698;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1922E1E50(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE392698;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1922E1E80(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 8);
  if (v1)
  {
    uint64_t v2 = *(void *)(a1 + 16);
    uint64_t v3 = *v1;
    if (v2)
    {
      uint64_t v5 = *(void **)v2;
      uint64_t v4 = *(atomic_ullong **)(v2 + 8);
      __p[0] = v5;
      __p[1] = v4;
      if (v4) {
        atomic_fetch_add_explicit(v4 + 1, 1uLL, memory_order_relaxed);
      }
      E5RT::ExecutionStreamOperation::BindCompletionAsyncEvent(v3, (long long *)__p);
    }
    else
    {
      __p[0] = 0;
      __p[1] = 0;
      E5RT::ExecutionStreamOperation::BindCompletionAsyncEvent(v3, (long long *)__p);
    }
    uint64_t v6 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      if (!atomic_fetch_add((atomic_ullong *volatile)__p[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    return 0;
  }
  else
  {
    unint64_t v10 = operator new(0x30uLL);
    long long v11 = xmmword_192DA88D0;
    strcpy((char *)v10, "Invalid Function Argument: handle is NULL.");
    char v9 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v10, (uint64_t *)__p);
    if (v9 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v11) < 0) {
      operator delete(v10);
    }
    return 1;
  }
}

void sub_1922E1FCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, _Unwind_Exception *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20 = exception_object;
  if (a10)
  {
    sub_1922E4094(a10, (uint64_t)exception_object, a2, (uint64_t)&a15);
    uint64_t v20 = a15;
  }
  _Unwind_Resume(v20);
}

uint64_t sub_1922E2040(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z53e5rt_execution_stream_operation_bind_completion_eventE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z53e5rt_execution_stream_operation_bind_completion_eventE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z53e5rt_execution_stream_operation_bind_completion_eventE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z53e5rt_execution_stream_operation_bind_completion_eventE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_1922E20B0()
{
  return &unk_1EE3926F8;
}

void sub_1922E20C0()
{
}

__n128 sub_1922E20D4(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE392718;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1922E2120(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE392718;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1922E2150(uint64_t a1)
{
  uint64_t v1 = *(E5RT::ExecutionStreamOperationInternal ****)(a1 + 8);
  if (v1)
  {
    if (*(void *)(a1 + 16))
    {
      uint64_t DependentAsyncEvents = E5RT::ExecutionStreamOperation::GetDependentAsyncEvents(*v1);
      uint64_t result = 0;
      **(void **)(a1 + 16) = *(void *)(DependentAsyncEvents + 24);
    }
    else
    {
      unint64_t v7 = operator new(0x30uLL);
      long long v8 = xmmword_192DA90F0;
      strcpy((char *)v7, "Invalid Function Argument: count is NULL.");
      char v6 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
      if (v6 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v8) < 0) {
        operator delete(v7);
      }
      return 1;
    }
  }
  else
  {
    unint64_t v7 = operator new(0x30uLL);
    long long v8 = xmmword_192DA88D0;
    strcpy((char *)v7, "Invalid Function Argument: handle is NULL.");
    char v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    if (v6 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v8) < 0) {
      operator delete(v7);
    }
    return 1;
  }
  return result;
}

void sub_1922E22D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1922E2314(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z57e5rt_execution_stream_operation_get_dependent_event_countE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z57e5rt_execution_stream_operation_get_dependent_event_countE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z57e5rt_execution_stream_operation_get_dependent_event_countE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z57e5rt_execution_stream_operation_get_dependent_event_countE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_1922E2384()
{
  return &unk_1EE392778;
}

void sub_1922E2394()
{
}

__n128 sub_1922E23A8(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE392798;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1922E23F4(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE392798;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1922E2424(uint64_t a1)
{
  uint64_t v1 = *(E5RT::ExecutionStreamOperationInternal ****)(a1 + 8);
  if (v1)
  {
    if (*(void *)(a1 + 16))
    {
      if (*(void *)(E5RT::ExecutionStreamOperation::GetDependentAsyncEvents(*v1) + 16)) {
        operator new();
      }
      return 0;
    }
    uint64_t v5 = operator new(0x38uLL);
    long long v6 = xmmword_192DA90A0;
    strcpy((char *)v5, "Invalid Function Argument: dependent_events is NULL.");
    char v4 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v5, (uint64_t *)__p);
  }
  else
  {
    uint64_t v5 = operator new(0x30uLL);
    long long v6 = xmmword_192DA88D0;
    strcpy((char *)v5, "Invalid Function Argument: handle is NULL.");
    char v4 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v5, (uint64_t *)__p);
  }
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v6) < 0) {
    operator delete(v5);
  }
  return 1;
}

void sub_1922E262C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((a20 & 0x80000000) == 0)
  {
LABEL_3:
    _Unwind_Resume(a1);
  }
  operator delete(a15);
  _Unwind_Resume(a1);
}

uint64_t sub_1922E266C(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z55e5rt_execution_stream_operation_retain_dependent_eventsE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z55e5rt_execution_stream_operation_retain_dependent_eventsE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z55e5rt_execution_stream_operation_retain_dependent_eventsE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z55e5rt_execution_stream_operation_retain_dependent_eventsE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_1922E26DC()
{
  return &unk_1EE3927F8;
}

void sub_1922E26EC()
{
}

__n128 sub_1922E2700(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE392818;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1922E274C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE392818;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1922E277C(uint64_t a1)
{
  if (*(void *)(a1 + 8))
  {
    if (*(void *)(a1 + 16)) {
      operator new();
    }
    char v4 = (char *)operator new(0x38uLL);
    long long v5 = xmmword_192DA90A0;
    strcpy(v4, "Invalid Function Argument: completion_event is NULL.");
    char v3 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v4, (uint64_t *)__p);
    if (v3 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v5) < 0) {
      operator delete(v4);
    }
    return 1;
  }
  else
  {
    char v4 = (char *)operator new(0x30uLL);
    long long v5 = xmmword_192DA88D0;
    strcpy(v4, "Invalid Function Argument: handle is NULL.");
    char v3 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v4, (uint64_t *)__p);
    if (v3 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v5) < 0) {
      operator delete(v4);
    }
    return 1;
  }
}

void sub_1922E29D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0)
  {
    operator delete(a16);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1922E2A38(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z55e5rt_execution_stream_operation_retain_completion_eventE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z55e5rt_execution_stream_operation_retain_completion_eventE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z55e5rt_execution_stream_operation_retain_completion_eventE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z55e5rt_execution_stream_operation_retain_completion_eventE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_1922E2AA8()
{
  return &unk_1EE392878;
}

void sub_1922E2AB8()
{
}

void *sub_1922E2ACC(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EE392898;
  result[1] = v3;
  return result;
}

uint64_t sub_1922E2B14(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE392898;
  a2[1] = v2;
  return result;
}

uint64_t sub_1922E2B40(uint64_t a1)
{
  uint64_t v1 = *(E5RT::ExecutionStreamOperation ***)(a1 + 8);
  if (v1)
  {
    E5RT::ExecutionStreamOperation::PrepareOpForEncode(*v1);
    return 0;
  }
  else
  {
    long long v5 = operator new(0x30uLL);
    long long v6 = xmmword_192DA88D0;
    strcpy((char *)v5, "Invalid Function Argument: handle is NULL.");
    char v4 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v5, (uint64_t *)__p);
    if (v4 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v6) < 0) {
      operator delete(v5);
    }
    return 1;
  }
}

void sub_1922E2C10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1922E2C4C(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z53e5rt_execution_stream_operation_prepare_op_for_encodeE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z53e5rt_execution_stream_operation_prepare_op_for_encodeE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z53e5rt_execution_stream_operation_prepare_op_for_encodeE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z53e5rt_execution_stream_operation_prepare_op_for_encodeE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_1922E2CBC()
{
  return &unk_1EE3928F8;
}

void sub_1922E2CCC()
{
}

__n128 sub_1922E2CE0(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_1EE392918;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_1922E2D34(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE392918;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1922E2D6C(void *a1)
{
  uint64_t v1 = (void **)a1[1];
  if (!v1)
  {
    v21[0] = operator new(0x30uLL);
    *(_OWORD *)&v21[1] = xmmword_192DA88D0;
    strcpy((char *)v21[0], "Invalid Function Argument: handle is NULL.");
    HIBYTE(v24) = 10;
    strcpy((char *)&__dst, "operator()");
    E5RT::LogErrorMessage((uint64_t *)v21, (uint64_t *)&__dst);
LABEL_39:
    if (SHIBYTE(v24) < 0) {
      operator delete((void *)__dst);
    }
    if (SHIBYTE(v21[2]) < 0) {
      operator delete(v21[0]);
    }
    return 1;
  }
  if (!a1[2])
  {
    v21[0] = operator new(0x38uLL);
    *(_OWORD *)&v21[1] = xmmword_192DA90D0;
    strcpy((char *)v21[0], "Invalid Function Argument: input_inout_names is NULL.");
    HIBYTE(v24) = 10;
    strcpy((char *)&__dst, "operator()");
    E5RT::LogErrorMessage((uint64_t *)v21, (uint64_t *)&__dst);
    goto LABEL_39;
  }
  if (!a1[3])
  {
    v21[0] = operator new(0x40uLL);
    *(_OWORD *)&v21[1] = xmmword_192DA90E0;
    strcpy((char *)v21[0], "Invalid Function Argument: input_inout_descriptors is NULL.");
    HIBYTE(v24) = 10;
    strcpy((char *)&__dst, "operator()");
    E5RT::LogErrorMessage((uint64_t *)v21, (uint64_t *)&__dst);
    goto LABEL_39;
  }
  memset(v21, 0, sizeof(v21));
  int v22 = 1065353216;
  if (!a1[4]) {
    goto LABEL_23;
  }
  unint64_t v3 = 0;
  do
  {
    while (1)
    {
      char v4 = *(uint64_t **)(a1[3] + 8 * v3);
      long long v5 = *(const char **)(a1[2] + 8 * v3);
      size_t v6 = strlen(v5);
      if (v6 >= 0x7FFFFFFFFFFFFFF8) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      size_t v7 = v6;
      if (v6 >= 0x17)
      {
        uint64_t v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v6 | 7) != 0x17) {
          uint64_t v9 = v6 | 7;
        }
        uint64_t v10 = v9 + 1;
        p_dst = (long long *)operator new(v9 + 1);
        *((void *)&__dst + 1) = v7;
        unint64_t v24 = v10 | 0x8000000000000000;
        *(void *)&long long __dst = p_dst;
LABEL_15:
        memmove(p_dst, v5, v7);
        goto LABEL_16;
      }
      HIBYTE(v24) = v6;
      p_dst = &__dst;
      if (v6) {
        goto LABEL_15;
      }
LABEL_16:
      *((unsigned char *)p_dst + v7) = 0;
      int8x8_t v25 = &__dst;
      long long v11 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v21, (uint64_t)&__dst, (uint64_t)&std::piecewise_construct, &v25);
      uint64_t v13 = *v4;
      uint64_t v12 = v4[1];
      if (v12) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
      }
      unint64_t v14 = (std::__shared_weak_count *)*((void *)v11 + 6);
      *((void *)v11 + 5) = v13;
      *((void *)v11 + 6) = v12;
      if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
      if (SHIBYTE(v24) < 0) {
        break;
      }
      if (++v3 >= a1[4]) {
        goto LABEL_22;
      }
    }
    operator delete((void *)__dst);
    ++v3;
  }
  while (v3 < a1[4]);
LABEL_22:
  uint64_t v1 = (void **)a1[1];
LABEL_23:
  uint64_t v15 = *v1;
  if (*v1) {
  (*(void (**)(void *, void **))(*(void *)v15 + 120))(v15, v21);
  }
  uint64_t v16 = (void **)v21[2];
  if (v21[2])
  {
    do
    {
      while (1)
      {
        float v17 = (void **)*v16;
        float v18 = (std::__shared_weak_count *)v16[6];
        if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
        if (*((char *)v16 + 39) < 0) {
          break;
        }
        operator delete(v16);
        uint64_t v16 = v17;
        if (!v17) {
          goto LABEL_33;
        }
      }
      operator delete(v16[2]);
      operator delete(v16);
      uint64_t v16 = v17;
    }
    while (v17);
  }
LABEL_33:
  uint64_t v19 = v21[0];
  v21[0] = 0;
  if (v19) {
    operator delete(v19);
  }
  return 0;
}

void sub_1922E31B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1922E32AC(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z49e5rt_execution_stream_operation_reshape_operationE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z49e5rt_execution_stream_operation_reshape_operationE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z49e5rt_execution_stream_operation_reshape_operationE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z49e5rt_execution_stream_operation_reshape_operationE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_1922E331C()
{
  return &unk_1EE392978;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, long long **a4)
{
  size_t v6 = (unsigned char *)a2;
  unint64_t v8 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v9 = v8;
  }
  unint64_t v10 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v44, (uint64_t *)a2, v9);
  unint64_t v11 = v10;
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v12) {
        unint64_t v4 = v10 % v12;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v10;
    }
    unint64_t v14 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      uint64_t v15 = (unsigned __int8 *)*v14;
      if (*v14)
      {
        char v16 = v6[23];
        if (v16 >= 0) {
          uint64_t v17 = v6[23];
        }
        else {
          uint64_t v17 = *((void *)v6 + 1);
        }
        if (v16 < 0) {
          size_t v6 = *(unsigned char **)v6;
        }
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v22 = *((void *)v15 + 1);
            if (v22 == v11)
            {
              uint64_t v23 = v15[39];
              if ((v23 & 0x80u) == 0) {
                uint64_t v24 = v15[39];
              }
              else {
                uint64_t v24 = *((void *)v15 + 3);
              }
              if (v24 == v17)
              {
                if ((v23 & 0x80) != 0)
                {
                  if (!memcmp(*((const void **)v15 + 2), v6, *((void *)v15 + 3))) {
                    return v15;
                  }
                }
                else
                {
                  if (!v15[39]) {
                    return v15;
                  }
                  uint64_t v25 = 0;
                  while (v15[v25 + 16] == v6[v25])
                  {
                    if (v23 == ++v25) {
                      return v15;
                    }
                  }
                }
              }
            }
            else if ((v22 & (v12 - 1)) != v4)
            {
              goto LABEL_51;
            }
            uint64_t v15 = *(unsigned __int8 **)v15;
            if (!v15) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v18 = *((void *)v15 + 1);
          if (v18 == v11)
          {
            uint64_t v19 = v15[39];
            if ((v19 & 0x80u) == 0) {
              uint64_t v20 = v15[39];
            }
            else {
              uint64_t v20 = *((void *)v15 + 3);
            }
            if (v20 == v17)
            {
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp(*((const void **)v15 + 2), v6, *((void *)v15 + 3))) {
                  return v15;
                }
              }
              else
              {
                if (!v15[39]) {
                  return v15;
                }
                uint64_t v21 = 0;
                while (v15[v21 + 16] == v6[v21])
                {
                  if (v19 == ++v21) {
                    return v15;
                  }
                }
              }
            }
          }
          else
          {
            if (v18 >= v12) {
              v18 %= v12;
            }
            if (v18 != v4) {
              break;
            }
          }
          uint64_t v15 = *(unsigned __int8 **)v15;
        }
        while (v15);
      }
    }
  }
LABEL_51:
  unint64_t v26 = (void *)(a1 + 16);
  uint64_t v15 = (unsigned __int8 *)operator new(0x38uLL);
  v44[0] = v15;
  v44[1] = a1 + 16;
  *(void *)uint64_t v15 = 0;
  *((void *)v15 + 1) = v11;
  uint8x8_t v27 = *a4;
  long long v28 = **a4;
  *((void *)v15 + 4) = *((void *)*a4 + 2);
  *((_OWORD *)v15 + 1) = v28;
  *((void *)v27 + 1) = 0;
  *((void *)v27 + 2) = 0;
  *(void *)uint8x8_t v27 = 0;
  *((void *)v15 + 5) = 0;
  *((void *)v15 + 6) = 0;
  char v45 = 1;
  float v29 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v30 = *(float *)(a1 + 32);
  if (v12 && (float)(v30 * (float)v12) >= v29)
  {
    uint64_t v31 = *(void *)a1;
    int v32 = *(void **)(*(void *)a1 + 8 * v4);
    if (v32)
    {
LABEL_54:
      *(void *)uint64_t v15 = *v32;
LABEL_89:
      *int v32 = v15;
      goto LABEL_90;
    }
  }
  else
  {
    BOOL v33 = 1;
    if (v12 >= 3) {
      BOOL v33 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v34 = v33 | (2 * v12);
    unint64_t v35 = vcvtps_u32_f32(v29 / v30);
    if (v34 <= v35) {
      size_t prime = v35;
    }
    else {
      size_t prime = v34;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v37 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v37) {
      goto LABEL_65;
    }
    if (prime < *(void *)&v37)
    {
      unint64_t v38 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v37 < 3uLL || (uint8x8_t v39 = (uint8x8_t)vcnt_s8(v37), v39.i16[0] = vaddlv_u8(v39), v39.u32[0] > 1uLL))
      {
        unint64_t v38 = std::__next_prime(v38);
      }
      else
      {
        uint64_t v40 = 1 << -(char)__clz(v38 - 1);
        if (v38 >= 2) {
          unint64_t v38 = v40;
        }
      }
      if (prime <= v38) {
        size_t prime = v38;
      }
      if (prime < *(void *)&v37) {
LABEL_65:
      }
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v12 = *(void *)(a1 + 8);
    unint64_t v41 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        unint64_t v4 = v11 % v12;
        uint64_t v31 = *(void *)a1;
        int v32 = *(void **)(*(void *)a1 + 8 * (v11 % v12));
        if (v32) {
          goto LABEL_54;
        }
      }
      else
      {
        unint64_t v4 = v11;
        uint64_t v31 = *(void *)a1;
        int v32 = *(void **)(*(void *)a1 + 8 * v11);
        if (v32) {
          goto LABEL_54;
        }
      }
    }
    else
    {
      unint64_t v4 = v41 & v11;
      uint64_t v31 = *(void *)a1;
      int v32 = *(void **)(*(void *)a1 + 8 * (v41 & v11));
      if (v32) {
        goto LABEL_54;
      }
    }
  }
  *(void *)uint64_t v15 = *v26;
  void *v26 = v15;
  *(void *)(v31 + 8 * v4) = v26;
  if (*(void *)v15)
  {
    unint64_t v42 = *(void *)(*(void *)v15 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v42 >= v12) {
        v42 %= v12;
      }
    }
    else
    {
      v42 &= v12 - 1;
    }
    int v32 = (void *)(*(void *)a1 + 8 * v42);
    goto LABEL_89;
  }
LABEL_90:
  ++*(void *)(a1 + 24);
  return v15;
}

void sub_1922E373C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16))
    {
      unint64_t v3 = *(std::__shared_weak_count **)(v2 + 48);
      if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
        if ((*(char *)(v2 + 39) & 0x80000000) == 0) {
          goto LABEL_7;
        }
        goto LABEL_6;
      }
      if (*(char *)(v2 + 39) < 0) {
LABEL_6:
      }
        operator delete(*(void **)(v2 + 16));
    }
LABEL_7:
    operator delete((void *)v2);
  }
  return a1;
}

void sub_1922E3804()
{
}

__n128 sub_1922E3818(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_1EE392998;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_1922E386C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE392998;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1922E38A4(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 8);
  if (v1)
  {
    unint64_t v3 = *(const void **)(a1 + 16);
    if (v3)
    {
      uint64_t v4 = *v1;
      size_t v5 = strlen(*(const char **)(a1 + 16));
      if (v5 > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      size_t v6 = v5;
      if (v5 >= 0x17)
      {
        uint64_t v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v5 | 7) != 0x17) {
          uint64_t v8 = v5 | 7;
        }
        uint64_t v9 = v8 + 1;
        p_dst = (void **)operator new(v8 + 1);
        *(void *)&long long v20 = v6;
        *((void *)&v20 + 1) = v9 | 0x8000000000000000;
        long long __dst = p_dst;
      }
      else
      {
        HIBYTE(v20) = v5;
        p_dst = &__dst;
        if (!v5)
        {
LABEL_11:
          *((unsigned char *)p_dst + v6) = 0;
          unint64_t v10 = *(const char **)(a1 + 24);
          size_t v11 = strlen(v10);
          if (v11 > 0x7FFFFFFFFFFFFFF7) {
            std::string::__throw_length_error[abi:ne180100]();
          }
          size_t v12 = v11;
          if (v11 >= 0x17)
          {
            uint64_t v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v11 | 7) != 0x17) {
              uint64_t v14 = v11 | 7;
            }
            uint64_t v15 = v14 + 1;
            p_p = (long long *)operator new(v14 + 1);
            *((void *)&__p + 1) = v12;
            unint64_t v18 = v15 | 0x8000000000000000;
            *(void *)&long long __p = p_p;
          }
          else
          {
            HIBYTE(v18) = v11;
            p_p = &__p;
            if (!v11)
            {
LABEL_19:
              *((unsigned char *)p_p + v12) = 0;
              E5RT::ExecutionStreamOperation::SerializeInferenceFrameData(v4, (uint64_t)&__dst, (uint64_t)&__p, *(unsigned __int8 *)(a1 + 32));
              if (SHIBYTE(v18) < 0)
              {
                operator delete((void *)__p);
                if ((SHIBYTE(v20) & 0x80000000) == 0) {
                  return 0;
                }
              }
              else if ((SHIBYTE(v20) & 0x80000000) == 0)
              {
                return 0;
              }
              operator delete(__dst);
              return 0;
            }
          }
          memmove(p_p, v10, v12);
          goto LABEL_19;
        }
      }
      memmove(p_dst, v3, v6);
      goto LABEL_11;
    }
    long long __dst = operator new(0x30uLL);
    long long v20 = xmmword_192DA88F0;
    strcpy((char *)__dst, "Invalid Function Argument: output_dir is NULL.");
    HIBYTE(v18) = 10;
    strcpy((char *)&__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&__dst, (uint64_t *)&__p);
  }
  else
  {
    long long __dst = operator new(0x30uLL);
    long long v20 = xmmword_192DA88D0;
    strcpy((char *)__dst, "Invalid Function Argument: handle is NULL.");
    HIBYTE(v18) = 10;
    strcpy((char *)&__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&__dst, (uint64_t *)&__p);
  }
  if (SHIBYTE(v18) < 0) {
    operator delete((void *)__p);
  }
  if (SHIBYTE(v20) < 0) {
    operator delete(__dst);
  }
  return 1;
}

void sub_1922E3B30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1922E3B84(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z62e5rt_execution_stream_operation_serialize_inference_frame_dataE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z62e5rt_execution_stream_operation_serialize_inference_frame_dataE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z62e5rt_execution_stream_operation_serialize_inference_frame_dataE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z62e5rt_execution_stream_operation_serialize_inference_frame_dataE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_1922E3BF4()
{
  return &unk_1EE3929F8;
}

void sub_1922E3C04()
{
}

__n128 sub_1922E3C18(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_1EE392A18;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_1922E3C6C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE392A18;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1922E3CA4(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 8);
  if (v1)
  {
    unint64_t v3 = *(const void **)(a1 + 16);
    if (v3)
    {
      uint64_t v4 = *v1;
      size_t v5 = strlen(*(const char **)(a1 + 16));
      if (v5 > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      size_t v6 = v5;
      if (v5 >= 0x17)
      {
        uint64_t v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v5 | 7) != 0x17) {
          uint64_t v8 = v5 | 7;
        }
        uint64_t v9 = v8 + 1;
        p_dst = (void **)operator new(v8 + 1);
        *(void *)&long long v20 = v6;
        *((void *)&v20 + 1) = v9 | 0x8000000000000000;
        long long __dst = p_dst;
      }
      else
      {
        HIBYTE(v20) = v5;
        p_dst = &__dst;
        if (!v5)
        {
LABEL_11:
          *((unsigned char *)p_dst + v6) = 0;
          unint64_t v10 = *(const char **)(a1 + 24);
          size_t v11 = strlen(v10);
          if (v11 > 0x7FFFFFFFFFFFFFF7) {
            std::string::__throw_length_error[abi:ne180100]();
          }
          size_t v12 = v11;
          if (v11 >= 0x17)
          {
            uint64_t v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v11 | 7) != 0x17) {
              uint64_t v14 = v11 | 7;
            }
            uint64_t v15 = v14 + 1;
            p_p = (long long *)operator new(v14 + 1);
            *((void *)&__p + 1) = v12;
            unint64_t v18 = v15 | 0x8000000000000000;
            *(void *)&long long __p = p_p;
          }
          else
          {
            HIBYTE(v18) = v11;
            p_p = &__p;
            if (!v11)
            {
LABEL_19:
              *((unsigned char *)p_p + v12) = 0;
              E5RT::ExecutionStreamOperation::SerializeInferenceFrameDataPerSegment(v4, (uint64_t)&__dst, (uint64_t)&__p);
              if (SHIBYTE(v18) < 0)
              {
                operator delete((void *)__p);
                if ((SHIBYTE(v20) & 0x80000000) == 0) {
                  return 0;
                }
              }
              else if ((SHIBYTE(v20) & 0x80000000) == 0)
              {
                return 0;
              }
              operator delete(__dst);
              return 0;
            }
          }
          memmove(p_p, v10, v12);
          goto LABEL_19;
        }
      }
      memmove(p_dst, v3, v6);
      goto LABEL_11;
    }
    long long __dst = operator new(0x30uLL);
    long long v20 = xmmword_192DA88F0;
    strcpy((char *)__dst, "Invalid Function Argument: output_dir is NULL.");
    HIBYTE(v18) = 10;
    strcpy((char *)&__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&__dst, (uint64_t *)&__p);
  }
  else
  {
    long long __dst = operator new(0x30uLL);
    long long v20 = xmmword_192DA88D0;
    strcpy((char *)__dst, "Invalid Function Argument: handle is NULL.");
    HIBYTE(v18) = 10;
    strcpy((char *)&__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&__dst, (uint64_t *)&__p);
  }
  if (SHIBYTE(v18) < 0) {
    operator delete((void *)__p);
  }
  if (SHIBYTE(v20) < 0) {
    operator delete(__dst);
  }
  return 1;
}

void sub_1922E3F30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1922E3F84(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z74e5rt_execution_stream_operation_serialize_inference_frame_data_per_segmentE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z74e5rt_execution_stream_operation_serialize_inference_frame_data_per_segmentE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z74e5rt_execution_stream_operation_serialize_inference_frame_data_per_segmentE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z74e5rt_execution_stream_operation_serialize_inference_frame_data_per_segmentE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_1922E3FF4()
{
  return &unk_1EE392A78;
}

uint64_t sub_1922E4000(uint64_t result)
{
  return result;
}

uint64_t sub_1922E4010()
{
  OUTLINED_FUNCTION_0();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1922E4044(uint64_t a1)
{
  uint64_t v1 = sub_1922E4000(a1);
  if (!v2)
  {
    unint64_t v3 = (std::__shared_weak_count *)v1;
    OUTLINED_FUNCTION_0();
    (*(void (**)(void))(v4 + 16))();
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_1922E4094(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v7 = sub_1922E4000(a1);
  if (!v8)
  {
    uint64_t v9 = (std::__shared_weak_count *)v7;
    OUTLINED_FUNCTION_0();
    (*(void (**)(void))(v10 + 16))();
    std::__shared_weak_count::__release_weak(v9);
  }
  *(void *)a4 = a2;
  *(_DWORD *)(a4 + 8) = a3;
}

E5RT::SurfaceDescriptor *E5RT::Ops::BaseEirInferenceOperation::Impl::Initialize(uint64_t a1, uint64_t *a2)
{
  std::unique_ptr<E5RT::Ops::BaseEirInferenceOperation::Impl::BaseEirInferenceOperationConfig>::operator=[abi:ne180100]((uint64_t *)(a1 + 120), a2);
  uint64_t InputPorts = E5RT::ExecutionStreamOperationInternal::GetInputPorts(*(E5RT::ExecutionStreamOperationInternal **)a1);
  __n128 result = (E5RT::SurfaceDescriptor *)E5RT::ExecutionStreamOperationInternal::GetOutputPorts(*(E5RT::ExecutionStreamOperationInternal **)a1);
  size_t v5 = result;
  long long v25 = xmmword_192DAA360;
  uint64_t v6 = *(void *)(a1 + 120);
  uint64_t v7 = *(_DWORD **)(v6 + 24);
  for (unint64_t i = *(_DWORD **)(v6 + 32); v7 != i; ++v7)
  {
    int v9 = *v7 - 1;
    uint64_t v10 = (char *)&v26;
    if (v9 <= 6)
    {
      uint64_t v10 = (char *)&v26;
      if ((0x47u >> v9)) {
        uint64_t v10 = (char *)&v25 + 4 * qword_192DAA458[v9];
      }
    }
    if (v10 - (char *)&v25 == 16)
    {
      exceptiounint64_t n = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v24, "Initialize");
      std::string::basic_string[abi:ne180100]<0>(v22, "Unsupported surface format requested to EIR operation.");
      E5RT::Status::Status(v23, 2, v22);
      E5RT::E5RTError::E5RTError(exception, v24, v23);
    }
  }
  size_t v11 = *(uint64_t ***)(InputPorts + 16);
  if (v11)
  {
    while (1)
    {
      PortDescriptorRef = (void *)E5RT::IOPort::GetPortDescriptorRef((E5RT::IOPortImpl **)v11[5]);
      __n128 result = (E5RT::SurfaceDescriptor *)E5RT::OperandDescriptor::TryAsSurfaceDescriptor(PortDescriptorRef);
      if (result) {
        break;
      }
LABEL_12:
      size_t v11 = (uint64_t **)*v11;
      if (!v11) {
        goto LABEL_21;
      }
    }
    __n128 result = (E5RT::SurfaceDescriptor *)E5RT::SurfaceDescriptor::GetSurfaceFormat(result);
    if (v25 == result)
    {
      uint64_t v12 = 0;
    }
    else if (DWORD1(v25) == result)
    {
      uint64_t v12 = 1;
    }
    else if (DWORD2(v25) == result)
    {
      uint64_t v12 = 2;
    }
    else
    {
      uint8x8_t v13 = (char *)&v26;
      if (HIDWORD(v25) != result)
      {
LABEL_11:
        if (v13 - (char *)&v25 == 16)
        {
          uint64_t v21 = __cxa_allocate_exception(0x18uLL);
          std::string::basic_string[abi:ne180100]<0>(v24, "Initialize");
          std::string::basic_string[abi:ne180100]<0>(v22, "Unsupported surface format for input to EIR segment.");
          E5RT::Status::Status(v23, 2, v22);
          E5RT::E5RTError::E5RTError(v21, v24, v23);
        }
        goto LABEL_12;
      }
      uint64_t v12 = 3;
    }
    uint8x8_t v13 = (char *)((unint64_t)&v25 | (4 * v12));
    goto LABEL_11;
  }
LABEL_21:
  uint64_t v15 = (void *)((char *)v5 + 16);
  while (1)
  {
    uint64_t v15 = (void *)*v15;
    if (!v15) {
      break;
    }
    char v16 = (E5RT::IOPortImpl **)v15[5];
    if (!v16)
    {
      uint64_t v19 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v24, "Initialize");
      std::string::basic_string[abi:ne180100]<0>(v22, "Invalid output port.");
      E5RT::Status::Status(v23, 1, v22);
      E5RT::E5RTError::E5RTError(v19, v24, v23);
    }
    uint64_t v17 = (void *)E5RT::IOPort::GetPortDescriptorRef(v16);
    __n128 result = (E5RT::SurfaceDescriptor *)E5RT::OperandDescriptor::TryAsSurfaceDescriptor(v17);
    if (result)
    {
      unint64_t v18 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v24, "Initialize");
      std::string::basic_string[abi:ne180100]<0>(v22, "Output surface ports aren't supported with EIR inference yet.");
      E5RT::Status::Status(v23, 2, v22);
      E5RT::E5RTError::E5RTError(v18, v24, v23);
    }
  }
  *(unsigned char *)(a1 + 129) = 1;
  return result;
}

void sub_1922E4464(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  if (v23) {
    __cxa_free_exception(v22);
  }
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<E5RT::Ops::BaseEirInferenceOperation::Impl::BaseEirInferenceOperationConfig>::operator=[abi:ne180100](uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a2 = 0;
  uint64_t v4 = *a1;
  *a1 = v3;
  if (!v4) {
    return a1;
  }
  if ((*(char *)(v4 + 103) & 0x80000000) == 0)
  {
    if ((*(char *)(v4 + 79) & 0x80000000) == 0) {
      goto LABEL_4;
    }
LABEL_11:
    operator delete(*(void **)(v4 + 56));
    size_t v5 = *(void **)(v4 + 24);
    if (!v5) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  operator delete(*(void **)(v4 + 80));
  if (*(char *)(v4 + 79) < 0) {
    goto LABEL_11;
  }
LABEL_4:
  size_t v5 = *(void **)(v4 + 24);
  if (v5)
  {
LABEL_5:
    *(void *)(v4 + 32) = v5;
    operator delete(v5);
  }
LABEL_6:
  uint64_t v6 = *(void **)v4;
  if (*(void *)v4)
  {
    *(void *)(v4 + 8) = v6;
    operator delete(v6);
  }
  MEMORY[0x192FF16B0](v4, 0x1092C40A2AD7073);
  return a1;
}

E5RT::Ops::BaseEirInferenceOperation::Impl *E5RT::Ops::BaseEirInferenceOperation::Impl::Impl(E5RT::Ops::BaseEirInferenceOperation::Impl *this, E5RT::ExecutionStreamOperationInternal *a2)
{
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *(void *)this = a2;
  *((_DWORD *)this + 18) = 1065353216;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_DWORD *)this + 28) = 1065353216;
  *((void *)this + 15) = 0;
  *((_WORD *)this + 64) = 0;
  if (!*(void *)(E5RT::ExecutionStreamOperationInternal::GetOutputPorts(a2) + 24))
  {
    exceptiounint64_t n = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v8, "Impl");
    std::string::basic_string[abi:ne180100]<0>(v6, "No outputs specified.");
    E5RT::Status::Status(v7, 2, v6);
    E5RT::E5RTError::E5RTError(exception, v8, v7);
  }
  if (*(void *)(E5RT::ExecutionStreamOperationInternal::GetInOutPorts(*(E5RT::ExecutionStreamOperationInternal **)this)
                 + 24))
  {
    size_t v5 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v8, "Impl");
    std::string::basic_string[abi:ne180100]<0>(v6, "InOut ports are not supported by EIR op yet.");
    E5RT::Status::Status(v7, 1, v6);
    E5RT::E5RTError::E5RTError(v5, v8, v7);
  }
  return this;
}

void sub_1922E4794(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  std::unique_ptr<E5RT::Ops::BaseEirInferenceOperation::Impl::BaseEirInferenceOperationConfig>::~unique_ptr[abi:ne180100](v24);
  std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100](v23);
  std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100](v22);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<E5RT::Ops::BaseEirInferenceOperation::Impl::BaseEirInferenceOperationConfig>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (!v2) {
    return a1;
  }
  if ((*(char *)(v2 + 103) & 0x80000000) == 0)
  {
    if ((*(char *)(v2 + 79) & 0x80000000) == 0) {
      goto LABEL_4;
    }
LABEL_11:
    operator delete(*(void **)(v2 + 56));
    uint64_t v3 = *(void **)(v2 + 24);
    if (!v3) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  operator delete(*(void **)(v2 + 80));
  if (*(char *)(v2 + 79) < 0) {
    goto LABEL_11;
  }
LABEL_4:
  uint64_t v3 = *(void **)(v2 + 24);
  if (v3)
  {
LABEL_5:
    *(void *)(v2 + 32) = v3;
    operator delete(v3);
  }
LABEL_6:
  uint64_t v4 = *(void **)v2;
  if (*(void *)v2)
  {
    *(void *)(v2 + 8) = v4;
    operator delete(v4);
  }
  MEMORY[0x192FF16B0](v2, 0x1092C40A2AD7073);
  return a1;
}

void E5RT::Ops::BaseEirInferenceOperation::Impl::~Impl(E5RT::Ops::BaseEirInferenceOperation::Impl *this)
{
  E5RT::Ops::BaseEirInferenceOperation::Impl::UnpinNetworkWeights((uint64_t)this);
  espresso_plan_destroy(*((void *)this + 2));
  espresso_context_destroy(*((void **)this + 1));
  uint64_t v2 = *((void *)this + 15);
  *((void *)this + 15) = 0;
  if (!v2) {
    goto LABEL_9;
  }
  if ((*(char *)(v2 + 103) & 0x80000000) == 0)
  {
    if ((*(char *)(v2 + 79) & 0x80000000) == 0) {
      goto LABEL_4;
    }
LABEL_23:
    operator delete(*(void **)(v2 + 56));
    uint64_t v3 = *(void **)(v2 + 24);
    if (!v3) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  operator delete(*(void **)(v2 + 80));
  if (*(char *)(v2 + 79) < 0) {
    goto LABEL_23;
  }
LABEL_4:
  uint64_t v3 = *(void **)(v2 + 24);
  if (v3)
  {
LABEL_5:
    *(void *)(v2 + 32) = v3;
    operator delete(v3);
  }
LABEL_6:
  uint64_t v4 = *(void **)v2;
  if (*(void *)v2)
  {
    *(void *)(v2 + 8) = v4;
    operator delete(v4);
  }
  MEMORY[0x192FF16B0](v2, 0x1092C40A2AD7073);
LABEL_9:
  size_t v5 = (void **)*((void *)this + 12);
  if (v5)
  {
    do
    {
      int v9 = (void **)*v5;
      if (*((char *)v5 + 39) < 0) {
        operator delete(v5[2]);
      }
      operator delete(v5);
      size_t v5 = v9;
    }
    while (v9);
  }
  uint64_t v6 = (void *)*((void *)this + 10);
  *((void *)this + 10) = 0;
  if (v6) {
    operator delete(v6);
  }
  uint64_t v7 = (void **)*((void *)this + 7);
  if (v7)
  {
    do
    {
      uint64_t v10 = (void **)*v7;
      if (*((char *)v7 + 39) < 0) {
        operator delete(v7[2]);
      }
      operator delete(v7);
      uint64_t v7 = v10;
    }
    while (v10);
  }
  uint64_t v8 = (void *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v8) {
    operator delete(v8);
  }
}

uint64_t E5RT::Ops::BaseEirInferenceOperation::Impl::UnpinNetworkWeights(uint64_t this)
{
  if (*(unsigned char *)(this + 128))
  {
    uint64_t v1 = this;
    this = espresso_network_unpin_weights_blob_storage(*(const void **)(this + 24), *(void *)(this + 32));
    if (this)
    {
      exceptiounint64_t n = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v5, "UnpinNetworkWeights");
      std::string::basic_string[abi:ne180100]<0>(v3, "Unpin network blob storage failed.");
      E5RT::Status::Status(v4, 2, v3);
      E5RT::E5RTError::E5RTError(exception, v5, v4);
    }
    *(unsigned char *)(v1 + 128) = 0;
  }
  return this;
}

void sub_1922E4AFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

uint64_t E5RT::Ops::BaseEirInferenceOperation::Impl::DeclareEIRInputsAndOutputs(E5RT::ExecutionStreamOperationInternal **this)
{
  uint64_t v2 = E5RT::ExecutionStreamOperationInternal::GetInputPorts(*this) + 16;
  while (1)
  {
    uint64_t v2 = *(void *)v2;
    if (!v2) {
      break;
    }
    uint64_t v3 = (char *)(v2 + 16);
    if (*(char *)(v2 + 39) < 0) {
      uint64_t v3 = *(char **)(v2 + 16);
    }
    if (espresso_network_declare_input(this[3], (int)this[4], v3))
    {
      exceptiounint64_t n = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v11, "DeclareEIRInputsAndOutputs");
      std::operator+<char>();
      E5RT::Status::Status(v10, 2, v9);
      E5RT::E5RTError::E5RTError(exception, v11, v10);
    }
  }
  uint64_t result = E5RT::ExecutionStreamOperationInternal::GetOutputPorts(*this);
  size_t v5 = (uint64_t *)(result + 16);
  while (1)
  {
    size_t v5 = (uint64_t *)*v5;
    if (!v5) {
      break;
    }
    uint64_t v6 = (char *)(v5 + 2);
    if (*((char *)v5 + 39) < 0) {
      uint64_t v6 = (char *)v5[2];
    }
    uint64_t result = espresso_network_declare_output(this[3], (int)this[4], v6);
    if (result)
    {
      uint64_t v8 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v11, "DeclareEIRInputsAndOutputs");
      std::operator+<char>();
      E5RT::Status::Status(v10, 2, v9);
      E5RT::E5RTError::E5RTError(v8, v11, v10);
    }
  }
  return result;
}

void sub_1922E4D10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
      goto LABEL_8;
    }
  }
  else if (!v23)
  {
LABEL_8:
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

char *E5RT::Ops::BaseEirInferenceOperation::Impl::PopulateBuffersInfo(char *result, uint64_t a2)
{
  uint64_t v2 = *(uint64_t **)(a2 + 16);
  if (v2)
  {
    uint64_t v3 = result;
    uint64_t v4 = (uint64_t)(result + 40);
    uint64_t v5 = (uint64_t)(result + 80);
    do
    {
      PortDescriptorRef = (void *)E5RT::IOPort::GetPortDescriptorRef((E5RT::IOPortImpl **)v2[5]);
      int v9 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TryAsTensorDescriptor(PortDescriptorRef);
      if (!v9)
      {
        long long v20 = (void *)E5RT::IOPort::GetPortDescriptorRef((E5RT::IOPortImpl **)v2[5]);
        uint64_t result = (char *)E5RT::OperandDescriptor::TryAsSurfaceDescriptor(v20);
        if (result)
        {
          uint64_t v21 = (E5RT::SurfaceDescriptor *)result;
          int SurfaceFormat = E5RT::SurfaceDescriptor::GetSurfaceFormat((E5RT::SurfaceDescriptor *)result);
          int v23 = SurfaceFormat;
          if ((SurfaceFormat - 1) < 3)
          {
            uint64_t SurfaceHeight = E5RT::SurfaceDescriptor::GetSurfaceHeight(v21);
            uint64_t SurfaceWidth = E5RT::SurfaceDescriptor::GetSurfaceWidth(v21);
            *(void *)&v35[0] = v2 + 2;
            uint64_t result = (char *)std::__hash_table<std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v5, (uint64_t)(v2 + 2), (uint64_t)&std::piecewise_construct, (long long **)v35);
            *((_DWORD *)result + 10) = v23;
            *((void *)result + 6) = 0;
            *((void *)result + 7) = SurfaceHeight;
            *((void *)result + 8) = SurfaceWidth;
            *((void *)result + 9) = 0;
            *((_DWORD *)result + 20) = 0;
          }
          else
          {
            if (SurfaceFormat != 7)
            {
              exceptiounint64_t n = __cxa_allocate_exception(0x18uLL);
              std::string::basic_string[abi:ne180100]<0>(v35, "PopulateSurfaceBuffer");
              std::string::basic_string[abi:ne180100]<0>(&v40, "Unsupported surface format requested to EIR operation.");
              E5RT::Status::Status(&v37, 6, &v40);
              E5RT::E5RTError::E5RTError(exception, v35, &v37);
            }
            *(void *)&v35[0] = v2 + 2;
            uint64_t result = (char *)std::__hash_table<std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v5, (uint64_t)(v2 + 2), (uint64_t)&std::piecewise_construct, (long long **)v35);
            *((_DWORD *)result + 10) = 7;
            *((void *)result + 6) = 0;
            *((_DWORD *)result + 20) = 1;
          }
        }
        goto LABEL_4;
      }
      uint64_t v10 = v9;
      uint64_t v11 = *((void *)v3 + 15);
      TensorShape = (uint64_t *)E5RT::TensorDescriptor::GetTensorShape(v9);
      TensorDataTypeRef = (E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(v10);
      ComponentDatauint64_t Type = E5RT::TensorDataType::GetComponentDataType(TensorDataTypeRef);
      int ComponentSize = E5RT::TensorDataType::GetComponentSize((E5RT::TensorDataType::Impl **)TensorDataTypeRef);
      if (ComponentDataType == 4)
      {
        int v17 = 65552;
        if (ComponentSize == 4)
        {
          int v17 = 65568;
          LODWORD(v36) = 65568;
          uint64_t v19 = *(_DWORD **)v11;
          unint64_t v18 = *(_DWORD **)(v11 + 8);
          if (*(_DWORD **)v11 != v18)
          {
LABEL_26:
            while (*v19 != v17)
            {
              if (++v19 == v18)
              {
                uint64_t v19 = v18;
                goto LABEL_29;
              }
            }
          }
          goto LABEL_29;
        }
        if (ComponentSize != 2) {
          goto LABEL_36;
        }
      }
      else
      {
        if (ComponentDataType != 1)
        {
          if (ComponentDataType) {
            BOOL v16 = 0;
          }
          else {
            BOOL v16 = ComponentSize == 1;
          }
          if (!v16)
          {
LABEL_36:
            BOOL v33 = __cxa_allocate_exception(0x18uLL);
            uint64_t v40 = (char *)operator new(0x20uLL);
            long long v41 = xmmword_192DAA330;
            strcpy(v40, "GetStorageTypeForTensorDataType");
            int8x8_t v37 = (char *)operator new(0x48uLL);
            long long v38 = xmmword_192DAA340;
            strcpy(v37, "Cannot convert from given tensor data type to espresso_storage_type_t");
            E5RT::Status::Status(v39, 6, &v37);
            E5RT::E5RTError::E5RTError(v33, &v40, v39);
          }
          int v17 = 262152;
          LODWORD(v36) = 262152;
          uint64_t v19 = *(_DWORD **)v11;
          unint64_t v18 = *(_DWORD **)(v11 + 8);
          if (*(_DWORD **)v11 != v18) {
            goto LABEL_26;
          }
          goto LABEL_29;
        }
        int v17 = 131080;
        if (ComponentSize != 1)
        {
          if (ComponentSize != 4) {
            goto LABEL_36;
          }
          int v17 = 131104;
          LODWORD(v36) = 131104;
          uint64_t v19 = *(_DWORD **)v11;
          unint64_t v18 = *(_DWORD **)(v11 + 8);
          if (*(_DWORD **)v11 != v18) {
            goto LABEL_26;
          }
          goto LABEL_29;
        }
      }
      LODWORD(v36) = v17;
      uint64_t v19 = *(_DWORD **)v11;
      unint64_t v18 = *(_DWORD **)(v11 + 8);
      if (*(_DWORD **)v11 != v18) {
        goto LABEL_26;
      }
LABEL_29:
      if (v19 == v18
        || espresso_buffer_pack_tensor_shape((uint64_t)v35, (TensorShape[1] - *TensorShape) >> 3, *TensorShape))
      {
        int v32 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v35, "PopulateBuffersInfo");
        std::string::basic_string[abi:ne180100]<0>(&v40, "Unable to pre-populate espresso_buffer_t.");
        E5RT::Status::Status(&v37, 6, &v40);
        E5RT::E5RTError::E5RTError(v32, v35, &v37);
      }
      uint64_t v40 = (char *)(v2 + 2);
      uint64_t result = (char *)std::__hash_table<std::__hash_value_type<std::string,espresso_buffer_t>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,espresso_buffer_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v4, (uint64_t)(v2 + 2), (uint64_t)&std::piecewise_construct, (long long **)&v40);
      long long v24 = v35[6];
      long long v25 = v35[5];
      long long v26 = v35[4];
      long long v27 = v35[2];
      *(_OWORD *)(result + 88) = v35[3];
      uint64_t v28 = v36;
      long long v29 = v35[9];
      long long v30 = v35[8];
      *(_OWORD *)(result + 152) = v35[7];
      *(_OWORD *)(result + 168) = v30;
      *(_OWORD *)(result + 184) = v29;
      *((void *)result + 25) = v28;
      *(_OWORD *)(result + 104) = v26;
      *(_OWORD *)(result + 120) = v25;
      *(_OWORD *)(result + 136) = v24;
      long long v31 = v35[1];
      *(_OWORD *)(result + 40) = v35[0];
      *(_OWORD *)(result + 56) = v31;
      *(_OWORD *)(result + 72) = v27;
LABEL_4:
      uint64_t v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  return result;
}

void sub_1922E5244(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  E5RT::Status::~Status((E5RT::Status *)(v17 - 144));
  if (*(char *)(v17 - 89) < 0) {
    operator delete(*(void **)(v17 - 112));
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (v16) {
    __cxa_free_exception(v15);
  }
  _Unwind_Resume(a1);
}

void E5RT::Ops::BaseEirInferenceOperation::Impl::PrepareOpForEncode(E5RT::ExecutionStreamOperationInternal **this)
{
  uint64_t v160 = *MEMORY[0x1E4F143B8];
  if (E5RT::ExecutionStreamOperationInternal::GetOpState(*this)) {
    return;
  }
  unint64_t v127 = (E5RT::Ops::BaseEirInferenceOperation::Impl *)this;
  BYTE7(v153) = 4;
  strcpy((char *)__p, "e5rt");
  uint64_t v2 = E5RT::GetE5RTLog((uint64_t)__p);
  os_signpost_id_t v3 = os_signpost_id_generate(v2);

  if (SBYTE7(v153) < 0) {
    operator delete(__p[0]);
  }
  BYTE7(v153) = 4;
  strcpy((char *)__p, "e5rt");
  uint64_t v4 = E5RT::GetE5RTLog((uint64_t)__p);
  if (SBYTE7(v153) < 0)
  {
    operator delete(__p[0]);
    if (v3 - 1 > 0xFFFFFFFFFFFFFFFDLL) {
      goto LABEL_10;
    }
  }
  else if (v3 - 1 > 0xFFFFFFFFFFFFFFFDLL)
  {
    goto LABEL_10;
  }
  if (os_signpost_enabled(v4))
  {
    LOWORD(__p[0]) = 0;
    _os_signpost_emit_with_name_impl(&dword_1920CB000, v4, OS_SIGNPOST_INTERVAL_BEGIN, v3, "EIROpPrepareForEncode", (const char *)&unk_192F346DB, (uint8_t *)__p, 2u);
  }
LABEL_10:

  v157[0] = MEMORY[0x1E4F143A8];
  v157[1] = 3221225472;
  v157[2] = sub_1922E6F44;
  v157[3] = &__block_descriptor_48_e5_v8__0l;
  v157[4] = v127;
  v157[5] = v3;
  uint64_t v5 = (void (**)(void))MEMORY[0x192FF2250](v157);
  uint64_t v6 = *((void *)v127 + 15);
  __p[1] = 0;
  *(void *)&long long v153 = 0;
  __p[0] = 0;
  int v9 = *(std::string **)(v6 + 56);
  uint64_t v7 = v6 + 56;
  uint64_t v8 = v9;
  uint64_t v10 = *(unsigned __int8 *)(v7 + 23);
  if ((v10 & 0x80u) == 0) {
    uint64_t v11 = (std::string *)v7;
  }
  else {
    uint64_t v11 = v8;
  }
  uint64_t v12 = *(void *)(v7 + 8);
  if ((v10 & 0x80u) == 0) {
    uint64_t v12 = v10;
  }
  uint64_t v128 = v5;
  std::string::append[abi:ne180100]<char const*,0>((std::string *)__p, v11, (std::string *)((char *)v11 + v12));
  std::__fs::filesystem::__status((const std::__fs::filesystem::path *)__p, 0);
  uint8_t v13 = buf[0];
  if (SBYTE7(v153) < 0) {
    operator delete(__p[0]);
  }
  if (v13 == 255 || !v13)
  {
    std::operator+<char>();
    exceptiounint64_t n = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(buf, "PrepareOpForEncode");
    E5RT::Status::Status(v139, 13, __p);
    E5RT::E5RTError::E5RTError(exception, buf, v139);
  }
  context = (E5RT *)espresso_create_context(*(_DWORD *)(*((void *)v127 + 15) + 48), -1);
  *((void *)v127 + 1) = context;
  if (!context)
  {
    size_t v115 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, "PrepareOpForEncode");
    std::string::basic_string[abi:ne180100]<0>(buf, "Unable to create context.");
    E5RT::Status::Status(v139, 2, buf);
    E5RT::E5RTError::E5RTError(v115, __p, v139);
  }
  if (E5RT::DoesCurrentPlatformSupportPinningNetworkMemory(context)
    && espresso_context_set_int_option(*((EspressoLight **)v127 + 1), "need_to_keep_blob_storage", 1))
  {
    uint64_t v119 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, "PrepareOpForEncode");
    std::string::basic_string[abi:ne180100]<0>(buf, "Unable to set context flag to keep blob storage alive.");
    E5RT::Status::Status(v139, 2, buf);
    E5RT::E5RTError::E5RTError(v119, __p, v139);
  }
  uint64_t v15 = *(unsigned int *)(*((void *)v127 + 15) + 104);
  if (!v15
    || !espresso_context_set_int_option(*((EspressoLight **)v127 + 1), "compute_unit_mask", v15))
  {
    goto LABEL_30;
  }
  BYTE7(v153) = 4;
  strcpy((char *)__p, "e5rt");
  char v16 = E5RT::GetE5RTLog((uint64_t)__p);
  uint64_t v17 = v16;
  if ((SBYTE7(v153) & 0x80000000) == 0)
  {
    if (!os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
      goto LABEL_29;
    }
    goto LABEL_28;
  }
  operator delete(__p[0]);
  if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
LABEL_28:
  }
    sub_1922EC25C(v17);
LABEL_29:

LABEL_30:
  espresso_tmp_enable_montreal(1);
  plaunint64_t n = (unsigned char *)espresso_create_plan(*((void **)v127 + 1), 0);
  *((void *)v127 + 2) = plan;
  if (!plan)
  {
    uint64_t v116 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, "PrepareOpForEncode");
    std::string::basic_string[abi:ne180100]<0>(buf, "Unable to create plan.");
    E5RT::Status::Status(v139, 2, buf);
    E5RT::E5RTError::E5RTError(v116, __p, v139);
  }
  uint64_t v19 = *((void *)v127 + 15);
  long long v20 = (char *)(v19 + 56);
  if (*(char *)(v19 + 79) < 0) {
    long long v20 = *(char **)v20;
  }
  if (espresso_plan_add_network(plan, v20, *(unsigned int *)(v19 + 52), (uint64_t)v127 + 24))
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
    uint64_t v122 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Unable to add network to plan: ", 31);
    last_error = espresso_get_last_error();
    size_t v124 = strlen(last_error);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v122, (uint64_t)last_error, v124);
    unint64_t v125 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(buf, "PrepareOpForEncode");
    std::stringbuf::str();
    E5RT::Status::Status(v135, 2, v139);
    E5RT::E5RTError::E5RTError(v125, buf, v135);
  }
  size_t v149 = 0;
  uint64_t v150 = 0;
  uint64_t v151 = 0;
  if (espresso_get_additional_configuration_names(*((void *)v127 + 3), *((void *)v127 + 4), (uint64_t *)&v149))
  {
    uint64_t v117 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, "PrepareOpForEncode");
    std::string::basic_string[abi:ne180100]<0>(buf, "Unable to fetch configuration names.");
    E5RT::Status::Status(v139, 2, buf);
    E5RT::E5RTError::E5RTError(v117, __p, v139);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((char *)v150 - (unsigned char *)v149) >> 3) >= 2)
  {
    uint64_t v21 = *((void *)v127 + 15);
    uint64_t v22 = (char *)(v21 + 80);
    if (*(char *)(v21 + 103) < 0) {
      uint64_t v22 = *(char **)v22;
    }
    if (espresso_network_select_configuration(*((void **)v127 + 3), *((void *)v127 + 4), v22))
    {
      int v120 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(__p, "PrepareOpForEncode");
      std::string::basic_string[abi:ne180100]<0>(buf, "Failed to switch configurations");
      E5RT::Status::Status(v139, 2, buf);
      E5RT::E5RTError::E5RTError(v120, __p, v139);
    }
  }
  E5RT::Ops::BaseEirInferenceOperation::Impl::DeclareEIRInputsAndOutputs((E5RT::ExecutionStreamOperationInternal **)v127);
  uint64_t InputPorts = E5RT::ExecutionStreamOperationInternal::GetInputPorts(*(E5RT::ExecutionStreamOperationInternal **)v127);
  E5RT::Ops::BaseEirInferenceOperation::Impl::PopulateBuffersInfo((char *)v127, InputPorts);
  uint64_t OutputPorts = E5RT::ExecutionStreamOperationInternal::GetOutputPorts(*(E5RT::ExecutionStreamOperationInternal **)v127);
  E5RT::Ops::BaseEirInferenceOperation::Impl::PopulateBuffersInfo((char *)v127, OutputPorts);
  if (espresso_plan_build(*((uint64_t **)v127 + 2)))
  {
    char v118 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, "PrepareOpForEncode");
    std::string::basic_string[abi:ne180100]<0>(buf, "Unable to build plan.");
    E5RT::Status::Status(v139, 2, buf);
    E5RT::E5RTError::E5RTError(v118, __p, v139);
  }
  unint64_t __val = 0;
  uint64_t v126 = E5RT::ExecutionStreamOperationInternal::GetInputPorts(*(E5RT::ExecutionStreamOperationInternal **)v127);
  long long v25 = *(uint64_t **)(v126 + 16);
  if (v25)
  {
    char v26 = 0;
    do
    {
      PortDescriptorRef = (void *)E5RT::IOPort::GetPortDescriptorRef((E5RT::IOPortImpl **)v25[5]);
      if (!E5RT::OperandDescriptor::TryAsTensorDescriptor(PortDescriptorRef)) {
        goto LABEL_157;
      }
      uint64_t v28 = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef((E5RT::IOPortImpl **)v25[5]);
      long long v29 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor(v28);
      if (E5RT::IOPort::IsDynamic((E5RT::IOPortImpl **)v25[5]))
      {
        if ((E5RT::TensorDescriptor::HasKnownShape(v29) & 1) == 0) {
          goto LABEL_157;
        }
      }
      TensorShape = (void *)E5RT::TensorDescriptor::GetTensorShape(v29);
      long long v31 = v25 + 2;
      long long v155 = 0u;
      long long v156 = 0u;
      long long v153 = 0u;
      long long v154 = 0u;
      *(_OWORD *)long long __p = 0u;
      uint64_t v32 = (uint64_t)(v25 + 2);
      if (*((char *)v25 + 39) < 0) {
        uint64_t v32 = *v31;
      }
      if (espresso_network_query_blob_shape(*((uint64_t **)v127 + 3), *((void *)v127 + 4), v32, (uint64_t)&__val, (uint64_t)__p))
      {
        uint64_t v114 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(buf, "PrepareOpForEncode");
        std::string::basic_string[abi:ne180100]<0>(v139, "Unable to query input dimensions.");
        E5RT::Status::Status(v135, 2, v139);
        E5RT::E5RTError::E5RTError(v114, buf, v135);
      }
      Ranunint64_t k = E5RT::TensorDescriptor::GetRank(v29);
      unint64_t v34 = Rank;
      if (__val != Rank)
      {
        buf[23] = 4;
        strcpy((char *)buf, "e5rt");
        uint64_t v46 = E5RT::GetE5RTLog((uint64_t)buf);
        if ((char)buf[23] < 0) {
          operator delete(*(void **)buf);
        }
        if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
        {
          if (*((char *)v25 + 39) < 0) {
            long long v31 = (uint64_t *)*v31;
          }
          std::to_string((std::string *)v139, v34);
          int v110 = v139[23];
          int v111 = *(unsigned char **)v139;
          std::to_string((std::string *)v135, __val);
          char v112 = v139;
          if (v110 < 0) {
            char v112 = v111;
          }
          if (v135[23] >= 0) {
            long long v113 = v135;
          }
          else {
            long long v113 = *(unsigned char **)v135;
          }
          *(_DWORD *)std::string buf = 136315650;
          *(void *)&buf[4] = v31;
          *(_WORD *)&buf[12] = 2080;
          *(void *)&buf[14] = v112;
          *(_WORD *)&buf[22] = 2080;
          *(void *)&buf[24] = v113;
          _os_log_error_impl(&dword_1920CB000, v46, OS_LOG_TYPE_ERROR, "Detected rank mistmatch between E5 and EIR. Input = %s, E5 ranunint64_t k = %s, EIR ranunint64_t k = %s. Skipped checking shape mistmatch.", buf, 0x20u);
          if ((v135[23] & 0x80000000) != 0) {
            operator delete(*(void **)v135);
          }
          if ((v139[23] & 0x80000000) != 0) {
            operator delete(*(void **)v139);
          }
        }

        goto LABEL_157;
      }
      if (Rank)
      {
        unint64_t v35 = 0;
        while (1)
        {
          uint64_t v36 = *(void **)(*TensorShape + 8 * v35);
          int8x8_t v37 = __p[v35];
          if (v36 != v37) {
            break;
          }
LABEL_52:
          if (++v35 >= v34) {
            goto LABEL_42;
          }
        }
        if (v36 < v37)
        {
          std::operator+<char>();
          long long v91 = std::string::append(&v144, " dim = ");
          long long v92 = *(_OWORD *)&v91->__r_.__value_.__l.__data_;
          v145.__r_.__value_.__r.__words[2] = v91->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v145.__r_.__value_.__l.__data_ = v92;
          v91->__r_.__value_.__l.__size_ = 0;
          v91->__r_.__value_.__r.__words[2] = 0;
          v91->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v143, v35);
          if ((v143.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            BOOL v93 = &v143;
          }
          else {
            BOOL v93 = (std::string *)v143.__r_.__value_.__r.__words[0];
          }
          if ((v143.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(v143.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = v143.__r_.__value_.__l.__size_;
          }
          int v95 = std::string::append(&v145, (const std::string::value_type *)v93, size);
          long long v96 = *(_OWORD *)&v95->__r_.__value_.__l.__data_;
          v146.__r_.__value_.__r.__words[2] = v95->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v146.__r_.__value_.__l.__data_ = v96;
          v95->__r_.__value_.__l.__size_ = 0;
          v95->__r_.__value_.__r.__words[2] = 0;
          v95->__r_.__value_.__r.__words[0] = 0;
          uint64_t v97 = std::string::append(&v146, " E5 = ");
          long long v98 = *(_OWORD *)&v97->__r_.__value_.__l.__data_;
          v147.__r_.__value_.__r.__words[2] = v97->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v147.__r_.__value_.__l.__data_ = v98;
          v97->__r_.__value_.__l.__size_ = 0;
          v97->__r_.__value_.__r.__words[2] = 0;
          v97->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v142, *(void *)(*TensorShape + 8 * v35));
          if ((v142.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v99 = &v142;
          }
          else {
            uint64_t v99 = (std::string *)v142.__r_.__value_.__r.__words[0];
          }
          if ((v142.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v100 = HIBYTE(v142.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v100 = v142.__r_.__value_.__l.__size_;
          }
          uint64_t v101 = std::string::append(&v147, (const std::string::value_type *)v99, v100);
          long long v102 = *(_OWORD *)&v101->__r_.__value_.__l.__data_;
          *(void *)&v135[16] = *((void *)&v101->__r_.__value_.__l + 2);
          *(_OWORD *)uint8x8_t v135 = v102;
          v101->__r_.__value_.__l.__size_ = 0;
          v101->__r_.__value_.__r.__words[2] = 0;
          v101->__r_.__value_.__r.__words[0] = 0;
          uint64_t v103 = std::string::append((std::string *)v135, " EIR = ");
          long long v104 = *(_OWORD *)&v103->__r_.__value_.__l.__data_;
          *(void *)&v139[16] = *((void *)&v103->__r_.__value_.__l + 2);
          *(_OWORD *)uint64_t v139 = v104;
          v103->__r_.__value_.__l.__size_ = 0;
          v103->__r_.__value_.__r.__words[2] = 0;
          v103->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v141, (unint64_t)__p[v35]);
          if ((v141.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v105 = &v141;
          }
          else {
            uint64_t v105 = (std::string *)v141.__r_.__value_.__r.__words[0];
          }
          if ((v141.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v106 = HIBYTE(v141.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v106 = v141.__r_.__value_.__l.__size_;
          }
          uint64_t v107 = std::string::append((std::string *)v139, (const std::string::value_type *)v105, v106);
          long long v108 = *(_OWORD *)&v107->__r_.__value_.__l.__data_;
          *(void *)&uint8_t buf[16] = *((void *)&v107->__r_.__value_.__l + 2);
          *(_OWORD *)std::string buf = v108;
          v107->__r_.__value_.__l.__size_ = 0;
          v107->__r_.__value_.__r.__words[2] = 0;
          v107->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v141.__r_.__value_.__l.__data_);
            if ((v139[23] & 0x80000000) == 0) {
              goto LABEL_187;
            }
LABEL_215:
            operator delete(*(void **)v139);
            if ((v135[23] & 0x80000000) == 0) {
              goto LABEL_216;
            }
LABEL_188:
            operator delete(*(void **)v135);
            if ((SHIBYTE(v142.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_189;
            }
LABEL_217:
            operator delete(v142.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v147.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_218;
            }
LABEL_190:
            operator delete(v147.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v146.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_191;
            }
LABEL_219:
            operator delete(v146.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v143.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_220;
            }
LABEL_192:
            operator delete(v143.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v145.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_193;
            }
LABEL_221:
            operator delete(v145.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v144.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_195;
            }
          }
          else
          {
            if ((v139[23] & 0x80000000) != 0) {
              goto LABEL_215;
            }
LABEL_187:
            if ((v135[23] & 0x80000000) != 0) {
              goto LABEL_188;
            }
LABEL_216:
            if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0) {
              goto LABEL_217;
            }
LABEL_189:
            if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0) {
              goto LABEL_190;
            }
LABEL_218:
            if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0) {
              goto LABEL_219;
            }
LABEL_191:
            if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0) {
              goto LABEL_192;
            }
LABEL_220:
            if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0) {
              goto LABEL_221;
            }
LABEL_193:
            if ((SHIBYTE(v144.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_195:
              int v109 = __cxa_allocate_exception(0x18uLL);
              std::string::basic_string[abi:ne180100]<0>(v139, "PrepareOpForEncode");
              E5RT::Status::Status(v135, 2, buf);
              E5RT::E5RTError::E5RTError(v109, v139, v135);
            }
          }
          operator delete(v144.__r_.__value_.__l.__data_);
          goto LABEL_195;
        }
        buf[23] = 4;
        strcpy((char *)buf, "e5rt");
        long long v38 = E5RT::GetE5RTLog((uint64_t)buf);
        uint8x8_t v39 = v38;
        if ((char)buf[23] < 0)
        {
          operator delete(*(void **)buf);
          if (os_log_type_enabled(v39, OS_LOG_TYPE_INFO)) {
            goto LABEL_60;
          }
        }
        else
        {
          if (!os_log_type_enabled(v38, OS_LOG_TYPE_INFO)) {
            goto LABEL_72;
          }
LABEL_60:
          uint64_t v40 = (uint64_t)(v25 + 2);
          if (*((char *)v25 + 39) < 0) {
            uint64_t v40 = *v31;
          }
          std::to_string((std::string *)v139, v35);
          if (v139[23] >= 0) {
            long long v41 = v139;
          }
          else {
            long long v41 = *(unsigned char **)v139;
          }
          std::to_string((std::string *)v135, *(void *)(*TensorShape + 8 * v35));
          int v42 = v135[23];
          std::string::size_type v43 = *(unsigned char **)v135;
          std::to_string(&v147, (unint64_t)__p[v35]);
          uint64_t v44 = v135;
          if (v42 < 0) {
            uint64_t v44 = v43;
          }
          char v45 = &v147;
          if ((v147.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            char v45 = (std::string *)v147.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)std::string buf = 136315906;
          *(void *)&buf[4] = v40;
          *(_WORD *)&buf[12] = 2080;
          *(void *)&buf[14] = v41;
          *(_WORD *)&buf[22] = 2080;
          *(void *)&buf[24] = v44;
          LOWORD(v159[0]) = 2080;
          *(void *)((char *)v159 + 2) = v45;
          _os_log_impl(&dword_1920CB000, v39, OS_LOG_TYPE_INFO, "Detected shape mistmatch between E5 and EIR. Input = %s, diunint64_t m = %s, E5 = %s, EIR = %s. EIR will be reshaped to match E5 shape.", buf, 0x2Au);
          if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v147.__r_.__value_.__l.__data_);
            uint64_t v5 = v128;
            if ((v135[23] & 0x80000000) != 0) {
              goto LABEL_74;
            }
LABEL_71:
            if ((v139[23] & 0x80000000) != 0) {
LABEL_75:
            }
              operator delete(*(void **)v139);
          }
          else
          {
            uint64_t v5 = v128;
            if ((v135[23] & 0x80000000) == 0) {
              goto LABEL_71;
            }
LABEL_74:
            operator delete(*(void **)v135);
            if ((v139[23] & 0x80000000) != 0) {
              goto LABEL_75;
            }
          }
        }
LABEL_72:

        char v26 = 1;
        unint64_t v34 = __val;
        goto LABEL_52;
      }
LABEL_42:
      long long v25 = (uint64_t *)*v25;
    }
    while (v25);
    if (v26)
    {
      memset(buf, 0, sizeof(buf));
      v159[0] = 1065353216;
      memset(v139, 0, sizeof(v139));
      int v140 = 1065353216;
      for (unint64_t i = *(uint64_t ***)(v126 + 16); i; unint64_t i = (uint64_t **)*i)
      {
        E5RT::IOPort::GetMemoryObject((E5RT::IOPort *)i[5], v135);
        v147.__r_.__value_.__r.__words[0] = (std::string::size_type)(i + 2);
        uint64_t v48 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v139, (uint64_t)(i + 2), (uint64_t)&std::piecewise_construct, (long long **)&v147);
        long long v49 = *(_OWORD *)v135;
        *(_OWORD *)uint8x8_t v135 = 0uLL;
        uint64_t v50 = (std::__shared_weak_count *)v48[6];
        *(_OWORD *)(v48 + 5) = v49;
        if (v50 && !atomic_fetch_add(&v50->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
          std::__shared_weak_count::__release_weak(v50);
        }
        size_t v51 = *(std::__shared_weak_count **)&v135[8];
        if (*(void *)&v135[8]
          && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&v135[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
        uint64_t v52 = (uint64_t)i[5];
        uint64_t v137 = 0;
        int v138 = 0;
        E5RT::IOPort::BindMemoryObject(v52, (uint64_t)&v137);
        int v53 = v138;
        if (v138 && !atomic_fetch_add(&v138->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
          std::__shared_weak_count::__release_weak(v53);
        }
        E5RT::IOPort::GetPortDescriptor((E5RT::IOPort *)i[5], v135);
        v147.__r_.__value_.__r.__words[0] = (std::string::size_type)(i + 2);
        uint64_t v54 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)buf, (uint64_t)(i + 2), (uint64_t)&std::piecewise_construct, (long long **)&v147);
        long long v55 = *(_OWORD *)v135;
        *(_OWORD *)uint8x8_t v135 = 0uLL;
        uint64_t v56 = (std::__shared_weak_count *)v54[6];
        *(_OWORD *)(v54 + 5) = v55;
        if (v56 && !atomic_fetch_add(&v56->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
          std::__shared_weak_count::__release_weak(v56);
        }
        uint64_t v57 = *(std::__shared_weak_count **)&v135[8];
        if (*(void *)&v135[8]
          && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&v135[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
          std::__shared_weak_count::__release_weak(v57);
        }
      }
      memset(v135, 0, sizeof(v135));
      int v136 = 1065353216;
      uint64_t v58 = E5RT::ExecutionStreamOperationInternal::GetOutputPorts(*(E5RT::ExecutionStreamOperationInternal **)v127);
      for (uint64_t j = *(uint64_t ***)(v58 + 16); j; uint64_t j = (uint64_t **)*j)
      {
        E5RT::IOPort::GetMemoryObject((E5RT::IOPort *)j[5], &v147);
        v146.__r_.__value_.__r.__words[0] = (std::string::size_type)(j + 2);
        uint64_t v60 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v135, (uint64_t)(j + 2), (uint64_t)&std::piecewise_construct, (long long **)&v146);
        long long v61 = *(_OWORD *)&v147.__r_.__value_.__l.__data_;
        *(_OWORD *)&v147.__r_.__value_.__l.__data_ = 0uLL;
        int v62 = (std::__shared_weak_count *)v60[6];
        *(_OWORD *)(v60 + 5) = v61;
        if (v62 && !atomic_fetch_add(&v62->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
          std::__shared_weak_count::__release_weak(v62);
        }
        int v63 = (std::__shared_weak_count *)v147.__r_.__value_.__l.__size_;
        if (v147.__r_.__value_.__l.__size_
          && !atomic_fetch_add((atomic_ullong *volatile)(v147.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
          std::__shared_weak_count::__release_weak(v63);
        }
        uint64_t v64 = (uint64_t)j[5];
        uint64_t v133 = 0;
        long long v134 = 0;
        E5RT::IOPort::BindMemoryObject(v64, (uint64_t)&v133);
        long long v65 = v134;
        if (v134 && !atomic_fetch_add(&v134->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
          std::__shared_weak_count::__release_weak(v65);
        }
      }
      E5RT::Ops::BaseEirInferenceOperation::Impl::ReshapeOperationInternal((uint64_t)v127, (uint64_t)buf);
      for (unint64_t k = *(void **)(v126 + 16); k; unint64_t k = (void *)*k)
      {
        uint64_t v67 = k[5];
        v147.__r_.__value_.__r.__words[0] = (std::string::size_type)(k + 2);
        unint64_t v68 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v139, (uint64_t)(k + 2), (uint64_t)&std::piecewise_construct, (long long **)&v147);
        uint64_t v69 = v68[6];
        uint64_t v131 = v68[5];
        int v132 = (std::__shared_weak_count *)v69;
        if (v69) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v69 + 8), 1uLL, memory_order_relaxed);
        }
        E5RT::IOPort::BindMemoryObject(v67, (uint64_t)&v131);
        uint64_t v70 = v132;
        if (v132 && !atomic_fetch_add(&v132->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
          std::__shared_weak_count::__release_weak(v70);
        }
      }
      for (unint64_t m = *(void **)(v58 + 16); m; unint64_t m = (void *)*m)
      {
        uint64_t v72 = m[5];
        v147.__r_.__value_.__r.__words[0] = (std::string::size_type)(m + 2);
        int64_t v73 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v135, (uint64_t)(m + 2), (uint64_t)&std::piecewise_construct, (long long **)&v147);
        uint64_t v74 = v73[6];
        uint64_t v129 = v73[5];
        uint64_t v130 = (std::__shared_weak_count *)v74;
        if (v74) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v74 + 8), 1uLL, memory_order_relaxed);
        }
        E5RT::IOPort::BindMemoryObject(v72, (uint64_t)&v129);
        uint64_t v75 = v130;
        if (v130 && !atomic_fetch_add(&v130->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
          std::__shared_weak_count::__release_weak(v75);
        }
      }
      uint64_t v76 = *(void ***)&v135[16];
      if (*(void *)&v135[16])
      {
        do
        {
          while (1)
          {
            long long v77 = (void **)*v76;
            uint64_t v78 = (std::__shared_weak_count *)v76[6];
            if (v78 && !atomic_fetch_add(&v78->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
              std::__shared_weak_count::__release_weak(v78);
            }
            if (*((char *)v76 + 39) < 0) {
              break;
            }
            operator delete(v76);
            uint64_t v76 = v77;
            if (!v77) {
              goto LABEL_135;
            }
          }
          operator delete(v76[2]);
          operator delete(v76);
          uint64_t v76 = v77;
        }
        while (v77);
      }
LABEL_135:
      int v79 = *(void **)v135;
      *(void *)uint8x8_t v135 = 0;
      if (v79) {
        operator delete(v79);
      }
      size_t v80 = *(void ***)&v139[16];
      if (*(void *)&v139[16])
      {
        do
        {
          while (1)
          {
            uint64_t v81 = (void **)*v80;
            int v82 = (std::__shared_weak_count *)v80[6];
            if (v82 && !atomic_fetch_add(&v82->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
              std::__shared_weak_count::__release_weak(v82);
            }
            if (*((char *)v80 + 39) < 0) {
              break;
            }
            operator delete(v80);
            size_t v80 = v81;
            if (!v81) {
              goto LABEL_145;
            }
          }
          operator delete(v80[2]);
          operator delete(v80);
          size_t v80 = v81;
        }
        while (v81);
      }
LABEL_145:
      size_t v83 = *(void **)v139;
      *(void *)uint64_t v139 = 0;
      if (v83) {
        operator delete(v83);
      }
      uint64_t v84 = *(void ***)&buf[16];
      if (*(void *)&buf[16])
      {
        do
        {
          while (1)
          {
            size_t v85 = (void **)*v84;
            int v86 = (std::__shared_weak_count *)v84[6];
            if (v86 && !atomic_fetch_add(&v86->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
              std::__shared_weak_count::__release_weak(v86);
            }
            if (*((char *)v84 + 39) < 0) {
              break;
            }
            operator delete(v84);
            uint64_t v84 = v85;
            if (!v85) {
              goto LABEL_155;
            }
          }
          operator delete(v84[2]);
          operator delete(v84);
          uint64_t v84 = v85;
        }
        while (v85);
      }
LABEL_155:
      BOOL v87 = *(void **)buf;
      *(void *)std::string buf = 0;
      if (v87) {
        operator delete(v87);
      }
    }
  }
LABEL_157:
  int v88 = (void **)v149;
  if (v149)
  {
    BOOL v89 = v150;
    uint64_t v90 = v149;
    if (v150 != v149)
    {
      do
      {
        if (*((char *)v89 - 1) < 0) {
          operator delete(*(v89 - 3));
        }
        v89 -= 3;
      }
      while (v89 != v88);
      uint64_t v90 = v149;
    }
    uint64_t v150 = v88;
    operator delete(v90);
  }
  v5[2](v5);
}

void sub_1922E68D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void (**a14)(void), uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  E5RT::Status::~Status((E5RT::Status *)&a21);
  if (a34 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v68 - 137) < 0)
  {
    operator delete(*(void **)(v68 - 160));
    if ((v66 & 1) == 0)
    {
LABEL_8:
      std::ostringstream::~ostringstream((uint64_t)&a66);
      a14[2](a14);

      _Unwind_Resume(a1);
    }
  }
  else if (!v66)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v67);
  goto LABEL_8;
}

void sub_1922E6F44(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  char v8 = 4;
  strcpy(__p, "e5rt");
  os_signpost_id_t v3 = E5RT::GetE5RTLog((uint64_t)__p);
  if (v8 < 0)
  {
    operator delete(*(void **)__p);
    os_signpost_id_t v4 = *(void *)(a1 + 40);
    if (v4 - 1 > 0xFFFFFFFFFFFFFFFDLL) {
      goto LABEL_9;
    }
  }
  else
  {
    os_signpost_id_t v4 = *(void *)(a1 + 40);
    if (v4 - 1 > 0xFFFFFFFFFFFFFFFDLL) {
      goto LABEL_9;
    }
  }
  if (os_signpost_enabled(v3))
  {
    uint64_t v5 = *(void *)(v2 + 120);
    uint64_t v6 = (void *)(v5 + 56);
    if (*(char *)(v5 + 79) < 0) {
      uint64_t v6 = (void *)*v6;
    }
    *(_DWORD *)long long __p = 136315138;
    *(void *)&__p[4] = v6;
    _os_signpost_emit_with_name_impl(&dword_1920CB000, v3, OS_SIGNPOST_INTERVAL_END, v4, "EIROpPrepareForEncode", "Model=%{signpost.description:attribute}s", __p, 0xCu);
  }
LABEL_9:
}

void sub_1922E7068(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::ostringstream::~ostringstream(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA418];
  uint64_t v3 = *MEMORY[0x1E4FBA418];
  *(void *)a1 = *MEMORY[0x1E4FBA418];
  *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 8) = MEMORY[0x1E4FBA470] + 16;
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](a1 + 112);
  return a1;
}

uint64_t E5RT::Ops::BaseEirInferenceOperation::Impl::ReshapeOperationInternal(uint64_t a1, uint64_t a2)
{
  if (E5RT::ExecutionStreamOperationInternal::GetOpState(*(E5RT::ExecutionStreamOperationInternal **)a1) == 2)
  {
    exceptiounint64_t n = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(__src, "ReshapeOperationInternal");
    std::string::basic_string[abi:ne180100]<0>(&v58, "Cannot reshape an op that is Encoded to a stream.");
    E5RT::Status::Status(&v56, 2, &v58);
    E5RT::E5RTError::E5RTError(exception, __src, &v56);
  }
  E5RT::Ops::BaseEirInferenceOperation::Impl::ReshapeEIRNetworkWithNewTensorDescriptors((E5RT::ExecutionStreamOperationInternal **)a1, a2);
  uint64_t InputPorts = (void *)E5RT::ExecutionStreamOperationInternal::GetInputPorts(*(E5RT::ExecutionStreamOperationInternal **)a1);
  uint64_t v5 = a2 + 16;
  while (1)
  {
    uint64_t v5 = *(void *)v5;
    if (!v5) {
      break;
    }
    uint64_t v9 = (void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(InputPorts, v5 + 16)[5];
    if (v9) {
    uint64_t v10 = *(std::__shared_weak_count **)(v5 + 48);
    }
    uint64_t v54 = *(void *)(v5 + 40);
    long long v55 = v10;
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    E5RT::IOPortPriv::SetPortDescriptor((uint64_t)v9, &v54);
    uint64_t v11 = v55;
    if (v55 && !atomic_fetch_add(&v55->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    uint64_t v6 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor(*(E5RT::OperandDescriptor **)(v5 + 40));
    TensorShape = (uint64_t *)E5RT::TensorDescriptor::GetTensorShape(v6);
    *(void *)&__src[0] = v5 + 16;
    char v8 = std::__hash_table<std::__hash_value_type<std::string,espresso_buffer_t>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,espresso_buffer_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 40, v5 + 16, (uint64_t)&std::piecewise_construct, (long long **)__src);
    if (espresso_buffer_pack_tensor_shape((uint64_t)(v8 + 5), (TensorShape[1] - *TensorShape) >> 3, *TensorShape))
    {
      long long v41 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(__src, "ReshapeOperationInternal");
      std::string::basic_string[abi:ne180100]<0>(&v58, "Unable to set new tensor shape to espresso_buffer_t.");
      E5RT::Status::Status(&v56, 2, &v58);
      E5RT::E5RTError::E5RTError(v41, __src, &v56);
    }
  }
  unint64_t v53 = 0;
  uint64_t result = E5RT::ExecutionStreamOperationInternal::GetOutputPorts(*(E5RT::ExecutionStreamOperationInternal **)a1);
  uint64_t v13 = *(void *)(result + 16);
  if (v13)
  {
    memset(__src, 0, sizeof(__src));
    uint64_t v14 = v13 + 16;
    if (*(char *)(v13 + 39) < 0) {
      uint64_t v14 = *(void *)(v13 + 16);
    }
    if (espresso_network_query_blob_shape(*(uint64_t **)(a1 + 24), *(void *)(a1 + 32), v14, (uint64_t)&v53, (uint64_t)__src))
    {
      int v42 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(&v58, "ReshapeOperationInternal");
      std::string::basic_string[abi:ne180100]<0>(&v56, "Unable to query output dimensions after reshaping espresso network inputs.");
      E5RT::Status::Status(&v51, 2, &v56);
      E5RT::E5RTError::E5RTError(v42, &v58, &v51);
    }
    unint64_t v15 = v53;
    if (v53)
    {
      char v16 = (uint64_t *)__src;
      while (1)
      {
        uint64_t v17 = *v16++;
        if (v17 != 1) {
          break;
        }
        if (!--v15) {
          goto LABEL_20;
        }
      }
      BOOL v19 = 0;
    }
    else
    {
LABEL_20:
      LODWORD(v50) = 0;
      if (*(char *)(v13 + 39) >= 0) {
        unint64_t v18 = (char *)(v13 + 16);
      }
      else {
        unint64_t v18 = *(char **)(v13 + 16);
      }
      if (espresso_blob_is_dynamic(*(void *)(a1 + 24), *(void *)(a1 + 32), v18, &v50))
      {
        std::string::size_type v43 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(&v58, "operator()");
        std::operator+<char>();
        E5RT::Status::Status(&v51, 2, &v56);
        E5RT::E5RTError::E5RTError(v43, &v58, &v51);
      }
      BOOL v19 = v50 != 0;
    }
    PortDescriptorRef = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef(*(E5RT::IOPortImpl ***)(v13 + 40));
    uint64_t v21 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor(PortDescriptorRef);
    Ranunint64_t k = E5RT::TensorDescriptor::GetRank(v21);
    unint64_t v23 = Rank;
    unint64_t v24 = v53;
    if (v19)
    {
      uint64_t v25 = v53 - Rank;
      if (v53 < Rank)
      {
        uint64_t v44 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(&v58, "ReshapeOperationInternal");
        std::operator+<char>();
        E5RT::Status::Status(&v51, 11, &v56);
        E5RT::E5RTError::E5RTError(v44, &v58, &v51);
      }
      if (v53 > Rank)
      {
        char v26 = (uint64_t *)__src + Rank;
        do
        {
          uint64_t v27 = *v26++;
          if (v27 != 1)
          {
            unint64_t v35 = __cxa_allocate_exception(0x18uLL);
            uint64_t v58 = (char *)operator new(0x20uLL);
            long long v59 = xmmword_192DAA350;
            strcpy(v58, "ReshapeOperationInternal");
            std::operator+<char>();
            uint64_t v36 = std::string::append(&v51, " and upper dims are not 1");
            long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
            std::string::size_type v57 = v36->__r_.__value_.__r.__words[2];
            long long v56 = v37;
            v36->__r_.__value_.__l.__size_ = 0;
            v36->__r_.__value_.__r.__words[2] = 0;
            v36->__r_.__value_.__r.__words[0] = 0;
            E5RT::Status::Status(&v50, 11, &v56);
            E5RT::E5RTError::E5RTError(v35, &v58, &v50);
          }
          --v25;
        }
        while (v25);
      }
    }
    else
    {
      if (Rank) {
        BOOL v28 = 1;
      }
      else {
        BOOL v28 = v53 == 1;
      }
      if (!v28)
      {
        uint64_t v46 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(&v58, "ReshapeOperationInternal");
        std::operator+<char>();
        uint64_t v47 = std::string::append(&v51, " is not 1 from Classic CPU");
        long long v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
        std::string::size_type v57 = v47->__r_.__value_.__r.__words[2];
        long long v56 = v48;
        v47->__r_.__value_.__l.__size_ = 0;
        v47->__r_.__value_.__r.__words[2] = 0;
        v47->__r_.__value_.__r.__words[0] = 0;
        E5RT::Status::Status(&v50, 11, &v56);
        E5RT::E5RTError::E5RTError(v46, &v58, &v50);
      }
      if (v53 < Rank)
      {
        char v45 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(&v58, "ReshapeOperationInternal");
        std::operator+<char>();
        E5RT::Status::Status(&v51, 11, &v56);
        E5RT::E5RTError::E5RTError(v45, &v58, &v51);
      }
      if (!Rank || (uint64_t v29 = v53 - Rank, v53 <= Rank))
      {
        unint64_t v53 = Rank;
        uint64_t v58 = 0;
        long long v59 = 0uLL;
        if (v24 == Rank)
        {
          long long v56 = 0uLL;
          std::string::size_type v57 = 0;
          if (Rank)
          {
            if ((Rank & 0x8000000000000000) != 0) {
              std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
            }
            size_t v34 = 8 * Rank;
            BOOL v33 = (char *)operator new(8 * Rank);
            unint64_t v23 = (unint64_t)&v33[8 * v23];
            memcpy(v33, __src, v34);
LABEL_54:
            uint64_t v58 = v33;
            *(void *)&long long v59 = v23;
            *((void *)&v59 + 1) = v23;
            E5RT::TensorDataType::TensorDataType(&v56);
          }
LABEL_53:
          BOOL v33 = 0;
          goto LABEL_54;
        }
LABEL_46:
        long long v56 = 0uLL;
        std::string::size_type v57 = 0;
        if (Rank)
        {
          if (Rank >> 61) {
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          size_t v32 = 8 * Rank;
          BOOL v33 = (char *)operator new(8 * Rank);
          unint64_t v23 = (unint64_t)&v33[8 * v23];
          memset(v33, 255, v32);
          goto LABEL_54;
        }
        goto LABEL_53;
      }
      long long v30 = (uint64_t *)__src + Rank;
      do
      {
        uint64_t v31 = *v30++;
        if (v31 != 1)
        {
          long long v38 = __cxa_allocate_exception(0x18uLL);
          uint64_t v58 = (char *)operator new(0x20uLL);
          long long v59 = xmmword_192DAA350;
          strcpy(v58, "ReshapeOperationInternal");
          std::operator+<char>();
          uint8x8_t v39 = std::string::append(&v51, " and upper dims are not 1");
          long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
          std::string::size_type v57 = v39->__r_.__value_.__r.__words[2];
          long long v56 = v40;
          v39->__r_.__value_.__l.__size_ = 0;
          v39->__r_.__value_.__r.__words[2] = 0;
          v39->__r_.__value_.__r.__words[0] = 0;
          E5RT::Status::Status(&v50, 11, &v56);
          E5RT::E5RTError::E5RTError(v38, &v58, &v50);
        }
        --v29;
      }
      while (v29);
    }
    unint64_t v53 = Rank;
    uint64_t v58 = 0;
    long long v59 = 0uLL;
    goto LABEL_46;
  }
  return result;
}

void sub_1922E7C8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  long long v37 = *(void **)(v35 - 144);
  if (v37)
  {
    *(void *)(v35 - 136) = v37;
    operator delete(v37);
  }
  long long v38 = *(void **)(v35 - 120);
  if (!v38) {
    _Unwind_Resume(exception_object);
  }
  *(void *)(v35 - 112) = v38;
  operator delete(v38);
  _Unwind_Resume(exception_object);
}

void sub_1922E7F7C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1922E7FB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    JUMPOUT(0x1922E7F30);
  }
  JUMPOUT(0x1922E7F10);
}

void sub_1922E7FC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    JUMPOUT(0x1922E7F30);
  }
  JUMPOUT(0x1922E7F10);
}

void sub_1922E7FDC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1922E7FF0(_Unwind_Exception *a1)
{
  if (*(char *)(v2 - 97) < 0)
  {
    operator delete(*(void **)(v2 - 120));
    __cxa_free_exception(v1);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1922E801CLL);
}

void sub_1922E802C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void E5RT::Ops::BaseEirInferenceOperation::Impl::BindBuffers(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v73 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(uint64_t **)(a2 + 16);
  if (v3)
  {
    int v60 = a3 ^ 1;
    if (a3) {
      int v5 = 0x10000;
    }
    else {
      int v5 = 0x20000;
    }
    unsigned int v57 = v5;
    uint64_t v58 = a1 + 40;
    long long v59 = (void *)(a1 + 80);
    long long v56 = (long long *)*MEMORY[0x1E4F24D20];
    long long v55 = (long long *)*MEMORY[0x1E4F24D70];
    uint64_t v54 = (long long *)*MEMORY[0x1E4F24E10];
    unint64_t v53 = (long long *)*MEMORY[0x1E4F24D08];
    CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    while (1)
    {
      PortDescriptorRef = (void *)E5RT::IOPort::GetPortDescriptorRef((E5RT::IOPortImpl **)v3[5]);
      uint64_t v7 = E5RT::OperandDescriptor::TryAsTensorDescriptor(PortDescriptorRef);
      char v8 = (E5RT::IOPortImpl **)v3[5];
      if (v7) {
        break;
      }
      BOOL v19 = (void *)E5RT::IOPort::GetPortDescriptorRef((E5RT::IOPortImpl **)v3[5]);
      if (E5RT::OperandDescriptor::TryAsSurfaceDescriptor(v19))
      {
        long long v20 = (std::__shared_weak_count *)v3[6];
        int v62 = (E5RT::IOPort *)v3[5];
        int v63 = v20;
        if (v20) {
          atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v22 = *(uint64_t **)(a1 + 24);
        uint64_t v21 = *(void *)(a1 + 32);
        unint64_t v23 = std::__hash_table<std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>>>::find<std::string>(v59, (uint64_t)(v3 + 2));
        if (!v23
          || (int v24 = *((_DWORD *)v23 + 10),
              (uint64_t v25 = std::__hash_table<std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>>>::find<std::string>(v59, (uint64_t)(v3 + 2))) == 0))
        {
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        }
        E5RT::IOPort::GetMemoryObject(v62, &v64);
        if (v64 && E5RT::MemoryObject::TryAsSurface(v64))
        {
          char v26 = (__IOSurface *)E5RT::SurfaceObject::GetHandle<__IOSurface *>();
          uint64_t v27 = v26;
          switch(v24)
          {
            case 1:
              if (*((_DWORD *)v25 + 20)) {
                BOOL v28 = 0;
              }
              else {
                BOOL v28 = v25 + 6;
              }
              uint64_t *v28 = (uint64_t)IOSurfaceGetBaseAddress(v26);
              v28[3] = IOSurfaceGetBytesPerRow(v27);
              if (*((char *)v3 + 39) >= 0) {
                uint64_t v29 = (uint64_t)(v3 + 2);
              }
              else {
                uint64_t v29 = v3[2];
              }
              long long v30 = *((_OWORD *)v28 + 1);
              long long v71 = *(_OWORD *)v28;
              long long v72 = v30;
              int v31 = espresso_network_bind_input_vimagebuffer_planar8(v22, v21, v29, 0, (uint64_t)&v71, 0);
              break;
            case 2:
              if (*((_DWORD *)v25 + 20)) {
                uint64_t v46 = 0;
              }
              else {
                uint64_t v46 = v25 + 6;
              }
              uint64_t *v46 = (uint64_t)IOSurfaceGetBaseAddress(v26);
              v46[3] = IOSurfaceGetBytesPerRow(v27);
              if (*((char *)v3 + 39) >= 0) {
                uint64_t v47 = (uint64_t)(v3 + 2);
              }
              else {
                uint64_t v47 = v3[2];
              }
              long long v48 = *((_OWORD *)v46 + 1);
              long long v71 = *(_OWORD *)v46;
              long long v72 = v48;
              int v31 = espresso_network_bind_input_vimagebuffer_bgra8(v22, v21, v47, 0, (uint64_t)&v71, 0);
              break;
            case 3:
              if (*((_DWORD *)v25 + 20)) {
                BOOL v33 = 0;
              }
              else {
                BOOL v33 = v25 + 6;
              }
              *BOOL v33 = (uint64_t)IOSurfaceGetBaseAddress(v26);
              void v33[3] = IOSurfaceGetBytesPerRow(v27);
              if (*((char *)v3 + 39) >= 0) {
                uint64_t v34 = (uint64_t)(v3 + 2);
              }
              else {
                uint64_t v34 = v3[2];
              }
              long long v35 = *((_OWORD *)v33 + 1);
              long long v71 = *(_OWORD *)v33;
              long long v72 = v35;
              int v31 = espresso_network_bind_input_vimagebuffer_rgba8(v22, v21, v34, 0, (uint64_t)&v71, 0);
              break;
            case 7:
              if (*((_DWORD *)v25 + 20) != 1) {
                std::__throw_bad_variant_access[abi:ne180100]();
              }
              CVPixelBufferRef pixelBufferOut = (CVPixelBufferRef)v25[6];
              E5RT::IOPort::GetPortDescriptor(v62, &v71);
              uint64_t v36 = (E5RT::SurfaceDescriptor *)E5RT::OperandDescriptor::SurfaceDescriptor((E5RT::OperandDescriptor *)v71);
              long long v37 = (std::__shared_weak_count *)*((void *)&v71 + 1);
              if (*((void *)&v71 + 1)
                && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v71 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
                std::__shared_weak_count::__release_weak(v37);
              }
              *(void *)&long long v71 = MEMORY[0x1E4F1CC08];
              v70[0] = v56;
              v70[1] = v55;
              long long v38 = NSNumber;
              unsigned int SurfaceFormat = E5RT::SurfaceDescriptor::GetSurfaceFormat(v36);
              long long v40 = [v38 numberWithUnsignedInt:E5RT::SurfaceFormatToCVPB4cc(SurfaceFormat)];
              *((void *)&v71 + 1) = v40;
              v70[2] = v54;
              long long v41 = [NSNumber numberWithUnsignedLong:E5RT::SurfaceDescriptor::GetSurfaceHeight(v36)];
              *(void *)&long long v72 = v41;
              v70[3] = v53;
              int v42 = [NSNumber numberWithUnsignedLong:E5RT::SurfaceDescriptor::GetSurfaceWidth(v36)];
              *((void *)&v72 + 1) = v42;
              CFDictionaryRef v43 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v71 forKeys:v70 count:4];

              if (CVPixelBufferCreateWithIOSurface(allocator, v27, v43, &pixelBufferOut))
              {
                exceptiounint64_t n = __cxa_allocate_exception(0x18uLL);
                std::string::basic_string[abi:ne180100]<0>(v68, "operator()");
                std::string::basic_string[abi:ne180100]<0>(v66, "Failed to create a CVPixelBuffer using the input IOSurface.");
                E5RT::Status::Status(v67, 6, v66);
                E5RT::E5RTError::E5RTError(exception, v68, v67);
              }
              CVPixelBufferRef v44 = pixelBufferOut;

              if (*((char *)v3 + 39) >= 0) {
                uint64_t v45 = (uint64_t)(v3 + 2);
              }
              else {
                uint64_t v45 = v3[2];
              }
              int v31 = espresso_network_bind_cvpixelbuffer(v22, v21, v45, 0, (uint64_t)v44);
              break;
            default:
              std::string v51 = __cxa_allocate_exception(0x18uLL);
              std::string::basic_string[abi:ne180100]<0>(&v71, "BindSurfaceBuffer");
              std::string::basic_string[abi:ne180100]<0>(v70, "Unsupported surface format requested to EIR operation.");
              E5RT::Status::Status(v68, 6, v70);
              E5RT::E5RTError::E5RTError(v51, &v71, v68);
          }
          int v17 = v31;
          size_t v32 = v65;
          if (v65)
          {
LABEL_71:
            if (atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
              goto LABEL_72;
            }
            ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
            std::__shared_weak_count::__release_weak(v32);
            uint64_t v9 = v63;
            if (!v63)
            {
LABEL_6:
              if (v17)
              {
                long long v49 = __cxa_allocate_exception(0x18uLL);
                std::string::basic_string[abi:ne180100]<0>(&v71, "BindBuffers");
                std::string::basic_string[abi:ne180100]<0>(v70, "Unable to bind buffer to network.");
                E5RT::Status::Status(v68, 2, v70);
                E5RT::E5RTError::E5RTError(v49, &v71, v68);
              }
              goto LABEL_7;
            }
LABEL_73:
            if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
              std::__shared_weak_count::__release_weak(v9);
            }
            goto LABEL_6;
          }
        }
        else
        {
          int v17 = -4;
          size_t v32 = v65;
          if (v65) {
            goto LABEL_71;
          }
        }
LABEL_72:
        uint64_t v9 = v63;
        if (!v63) {
          goto LABEL_6;
        }
        goto LABEL_73;
      }
LABEL_7:
      uint64_t v3 = (uint64_t *)*v3;
      if (!v3) {
        return;
      }
    }
    uint64_t v9 = (std::__shared_weak_count *)v3[6];
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v10 = *(uint64_t **)(a1 + 24);
    uint64_t v11 = *(void *)(a1 + 32);
    int v12 = E5RT::IOPort::IsDynamic(v8) & v60;
    if (a3 && E5RT::IOPort::IsDynamic(v8))
    {
      if (((E5RT::IOPort::HasKnownShape(v8) ^ 1 | v12) & 1) == 0)
      {
LABEL_14:
        E5RT::IOPort::GetMemoryObject((E5RT::IOPort *)v8, &v71);
        if ((void)v71
          && (v70[0] = (long long *)(v3 + 2),
              v13 = std::__hash_table<std::__hash_value_type<std::string,espresso_buffer_t>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,espresso_buffer_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v58, (uint64_t)(v3 + 2), (uint64_t)&std::piecewise_construct, v70), uint64_t v14 = (E5RT::BufferObject *)E5RT::MemoryObject::Buffer((E5RT::MemoryObject *)v71), DataSpan = E5RT::BufferObject::GetDataSpan(v14), (v13[5] = DataSpan) != 0))
        {
          if (*((char *)v3 + 39) >= 0) {
            uint64_t v16 = (uint64_t)(v3 + 2);
          }
          else {
            uint64_t v16 = v3[2];
          }
          int v17 = espresso_network_bind_buffer(v10, v11, v16, (uint64_t)(v13 + 5), v57, 0x20000, 0x10000);
          unint64_t v18 = (std::__shared_weak_count *)*((void *)&v71 + 1);
          if (!*((void *)&v71 + 1)) {
            goto LABEL_41;
          }
        }
        else
        {
          int v17 = -4;
          unint64_t v18 = (std::__shared_weak_count *)*((void *)&v71 + 1);
          if (!*((void *)&v71 + 1)) {
            goto LABEL_41;
          }
        }
        if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
          if (!v9) {
            goto LABEL_6;
          }
          goto LABEL_73;
        }
LABEL_41:
        if (!v9) {
          goto LABEL_6;
        }
        goto LABEL_73;
      }
    }
    else if ((v12 & 1) == 0)
    {
      goto LABEL_14;
    }
    int v17 = 0;
    if (!v9) {
      goto LABEL_6;
    }
    goto LABEL_73;
  }
}

void sub_1922E8824(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  E5RT::Status::~Status((E5RT::Status *)&a32);
  if (*(char *)(v39 - 137) < 0) {
    operator delete(*(void **)(v39 - 160));
  }
  if (*(char *)(v39 - 105) < 0)
  {
    operator delete(*(void **)(v39 - 128));
    if ((v38 & 1) == 0)
    {
LABEL_8:
      std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
      std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
      _Unwind_Resume(a1);
    }
  }
  else if (!v38)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v37);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_1922E8A1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  E5RT::Status::~Status((E5RT::Status *)&a29);
  if (*(char *)(v31 - 137) < 0) {
    operator delete(*(void **)(v31 - 160));
  }
  if (*(char *)(v31 - 105) < 0)
  {
    operator delete(*(void **)(v31 - 128));
    if (v30)
    {
LABEL_8:
      __cxa_free_exception(v29);
      _Unwind_Resume(a1);
    }
  }
  else if (v30)
  {
    goto LABEL_8;
  }
  _Unwind_Resume(a1);
}

const void **E5RT::Ops::BaseEirInferenceOperation::Impl::EncodeOperation(E5RT::ExecutionStreamOperationInternal **this)
{
  uint64_t InputPorts = E5RT::ExecutionStreamOperationInternal::GetInputPorts(*this);
  E5RT::Ops::BaseEirInferenceOperation::Impl::BindBuffers((uint64_t)this, InputPorts, 1);
  uint64_t OutputPorts = E5RT::ExecutionStreamOperationInternal::GetOutputPorts(*this);
  E5RT::Ops::BaseEirInferenceOperation::Impl::BindBuffers((uint64_t)this, OutputPorts, 0);
  Configuint64_t Options = (E5RT::ExecutionStreamOperationConfigOptions *)E5RT::ExecutionStreamOperationInternal::GetConfigOptions(*this);
  if (E5RT::ExecutionStreamOperationConfigOptions::GetPrewireModelMemory(ConfigOptions))
  {
    return E5RT::Ops::BaseEirInferenceOperation::Impl::PinNetworkWeights((const void **)this);
  }
  else
  {
    return (const void **)E5RT::Ops::BaseEirInferenceOperation::Impl::UnpinNetworkWeights((uint64_t)this);
  }
}

const void **E5RT::Ops::BaseEirInferenceOperation::Impl::PinNetworkWeights(const void **this)
{
  if (!*((unsigned char *)this + 128))
  {
    uint64_t v1 = this;
    if ((E5RT::DoesCurrentPlatformSupportPinningNetworkMemory((E5RT *)this) & 1) == 0)
    {
      exceptiounint64_t n = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v6, "PinNetworkWeights");
      std::string::basic_string[abi:ne180100]<0>(v4, "Pinning network memory is not supported on this platform.");
      E5RT::Status::Status(v5, 2, v4);
      E5RT::E5RTError::E5RTError(exception, v6, v5);
    }
    this = (const void **)espresso_network_pin_weights_blob_storage(v1[3], (int)v1[4]);
    if (this)
    {
      uint64_t v3 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v6, "PinNetworkWeights");
      std::string::basic_string[abi:ne180100]<0>(v4, "Pin network blob storage failed.");
      E5RT::Status::Status(v5, 2, v4);
      E5RT::E5RTError::E5RTError(v3, v6, v5);
    }
    *((unsigned char *)v1 + 128) = 1;
  }
  return this;
}

void sub_1922E8CA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
      goto LABEL_8;
    }
  }
  else if ((v23 & 1) == 0)
  {
LABEL_8:
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

uint64_t E5RT::Ops::BaseEirInferenceOperation::Impl::ExecuteSync(E5RT::Ops::BaseEirInferenceOperation::Impl *this)
{
  if (E5RT::ExecutionStreamOperationInternal::GetOpState(*(E5RT::ExecutionStreamOperationInternal **)this) != 2)
  {
    exceptiounint64_t n = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v17, "ExecuteSync");
    std::string::basic_string[abi:ne180100]<0>(v20, "Cannot execute an Op that has not been Encoded.");
    E5RT::Status::Status(&v21, 2, v20);
    E5RT::E5RTError::E5RTError(exception, v17, &v21);
  }
  if (E5RT::ExecutionStreamOperationInternal::HasDynamicInputPorts(*(E5RT::ExecutionStreamOperationInternal **)this))
  {
    *(_OWORD *)int v17 = 0u;
    *(_OWORD *)long long __p = 0u;
    int v19 = 1065353216;
    for (unint64_t i = *(uint64_t **)(E5RT::ExecutionStreamOperationInternal::GetInputPorts(*(E5RT::ExecutionStreamOperationInternal **)this)
                          + 16); i; unint64_t i = (uint64_t *)*i)
    {
      E5RT::IOPort::GetPortDescriptor((E5RT::IOPort *)i[5], v20);
      uint64_t v21 = (long long *)(i + 2);
      uint64_t v3 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v17, (uint64_t)(i + 2), (uint64_t)&std::piecewise_construct, &v21);
      long long v4 = v20[0];
      v20[0] = 0uLL;
      int v5 = (std::__shared_weak_count *)v3[6];
      *(_OWORD *)(v3 + 5) = v4;
      if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
        uint64_t v6 = (std::__shared_weak_count *)*((void *)&v20[0] + 1);
        if (*((void *)&v20[0] + 1))
        {
LABEL_9:
          if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
        }
      }
      else
      {
        uint64_t v6 = (std::__shared_weak_count *)*((void *)&v20[0] + 1);
        if (*((void *)&v20[0] + 1)) {
          goto LABEL_9;
        }
      }
    }
    E5RT::Ops::BaseEirInferenceOperation::Impl::ReshapeEIRNetworkWithNewTensorDescriptors((E5RT::ExecutionStreamOperationInternal **)this, (uint64_t)v17);
    uint64_t InputPorts = E5RT::ExecutionStreamOperationInternal::GetInputPorts(*(E5RT::ExecutionStreamOperationInternal **)this);
    E5RT::Ops::BaseEirInferenceOperation::Impl::PopulateBuffersInfo((char *)this, InputPorts);
    uint64_t v8 = E5RT::ExecutionStreamOperationInternal::GetInputPorts(*(E5RT::ExecutionStreamOperationInternal **)this);
    E5RT::Ops::BaseEirInferenceOperation::Impl::BindBuffers((uint64_t)this, v8, 1);
    uint64_t v9 = (void **)__p[0];
    if (__p[0])
    {
      do
      {
        while (1)
        {
          uint64_t v10 = (void **)*v9;
          uint64_t v11 = (std::__shared_weak_count *)v9[6];
          if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
            std::__shared_weak_count::__release_weak(v11);
          }
          if (*((char *)v9 + 39) < 0) {
            break;
          }
          operator delete(v9);
          uint64_t v9 = v10;
          if (!v10) {
            goto LABEL_21;
          }
        }
        operator delete(v9[2]);
        operator delete(v9);
        uint64_t v9 = v10;
      }
      while (v10);
    }
LABEL_21:
    int v12 = v17[0];
    v17[0] = 0;
    if (v12) {
      operator delete(v12);
    }
  }
  if (espresso_plan_execute_sync(*((uint64_t **)this + 2)))
  {
    uint64_t v16 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v17, "ExecuteSync");
    std::string::basic_string[abi:ne180100]<0>(v20, "Unable to successfully execute plan.");
    E5RT::Status::Status(&v21, 11, v20);
    E5RT::E5RTError::E5RTError(v16, v17, &v21);
  }
  uint64_t result = E5RT::ExecutionStreamOperationInternal::HasDynamicOutputPorts(*(E5RT::ExecutionStreamOperationInternal **)this);
  if (result)
  {
    uint64_t result = E5RT::ExecutionStreamOperationInternal::GetOutputPorts(*(E5RT::ExecutionStreamOperationInternal **)this);
    for (uint64_t j = *(uint64_t ***)(result + 16); j; uint64_t j = (uint64_t **)*j)
    {
      uint64_t result = E5RT::IOPort::IsDynamic((E5RT::IOPortImpl **)j[5]);
      if (result) {
        E5RT::Ops::BaseEirInferenceOperation::Impl::PopulateDataDependentDynamicPort((uint64_t)this, (uint64_t)(j + 2), j[5]);
      }
    }
  }
  return result;
}

void sub_1922E90C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1922E90DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1922E90F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1922E9104(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
}

void sub_1922E9120(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  E5RT::Status::~Status((E5RT::Status *)(v25 - 56));
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if (v24) {
      goto LABEL_8;
    }
  }
  else if (v24)
  {
LABEL_8:
    __cxa_free_exception(v23);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void E5RT::Ops::BaseEirInferenceOperation::Impl::ReshapeEIRNetworkWithNewTensorDescriptors(E5RT::ExecutionStreamOperationInternal **a1, uint64_t a2)
{
  uint64_t v3 = a1;
  uint64_t InputPorts = E5RT::ExecutionStreamOperationInternal::GetInputPorts(*a1);
  uint64_t v5 = *(void *)(a2 + 24);
  int v42 = (void *)InputPorts;
  if (v5 != *(void *)(InputPorts + 24))
  {
    exceptiounint64_t n = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v49, "ReshapeEIRNetworkWithNewTensorDescriptors");
    std::string::basic_string[abi:ne180100]<0>(v47, "Require new shapes for all inputs to reshape.");
    E5RT::Status::Status(&__p, 2, v47);
    E5RT::E5RTError::E5RTError(exception, v49, &__p);
  }
  unint64_t v6 = v5 << 32;
  long long __p = 0;
  uint64_t v45 = 0;
  uint64_t v46 = 0;
  int v41 = v5;
  if (!(v5 << 32))
  {
    CFDictionaryRef v43 = 0;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    int v12 = 0;
    uint64_t v13 = *(uint64_t ***)(a2 + 16);
    if (!v13) {
      goto LABEL_28;
    }
    goto LABEL_7;
  }
  if ((v6 & 0x8000000000000000) != 0) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  long long __p = operator new((8 * v5) & 0x7FFFFFFFFLL);
  uint64_t v46 = (char *)__p + 8 * (int)v5;
  bzero(__p, (8 * v5) & 0x7FFFFFFFFLL);
  uint64_t v45 = (char *)__p + ((8 * v5) & 0x7FFFFFFFFLL);
  uint64_t v7 = operator new((4 * v5) & 0x3FFFFFFFFLL);
  bzero(v7, (4 * v5) & 0x3FFFFFFFFLL);
  uint64_t v8 = operator new((4 * v5) & 0x3FFFFFFFFLL);
  bzero(v8, (4 * v5) & 0x3FFFFFFFFLL);
  uint64_t v9 = operator new((4 * v5) & 0x3FFFFFFFFLL);
  bzero(v9, (4 * v5) & 0x3FFFFFFFFLL);
  uint64_t v10 = operator new((4 * v5) & 0x3FFFFFFFFLL);
  CFDictionaryRef v43 = __p;
  bzero(v10, (4 * v5) & 0x3FFFFFFFFLL);
  uint64_t v11 = operator new((4 * v5) & 0x3FFFFFFFFLL);
  bzero(v11, v6 >> 30);
  int v12 = operator new(v6 >> 30);
  bzero(v12, v6 >> 30);
  uint64_t v13 = *(uint64_t ***)(a2 + 16);
  if (v13)
  {
LABEL_7:
    uint64_t v34 = v3;
    long long v35 = v12;
    uint64_t v14 = v10;
    uint64_t v15 = 0;
    uint64_t v36 = v11;
    long long v37 = v14;
    int v38 = v9;
    uint64_t v39 = v8;
    long long v40 = v7;
    while (1)
    {
      uint64_t v16 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(v42, (uint64_t)(v13 + 2));
      if (!v16)
      {
        BOOL v28 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v49, "ReshapeEIRNetworkWithNewTensorDescriptors");
        std::string::basic_string[abi:ne180100]<0>(v47, "Unknown operand name given for reshaping.");
        E5RT::Status::Status(v48, 2, v47);
        E5RT::E5RTError::E5RTError(v28, v49, v48);
      }
      PortDescriptorRef = (void *)E5RT::IOPort::GetPortDescriptorRef((E5RT::IOPortImpl **)v16[5]);
      if (E5RT::OperandDescriptor::TryAsSurfaceDescriptor(PortDescriptorRef))
      {
        uint64_t v29 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v49, "ReshapeEIRNetworkWithNewTensorDescriptors");
        std::string::basic_string[abi:ne180100]<0>(v47, "EIR op cannot reshape a surface descriptor.");
        E5RT::Status::Status(v48, 2, v47);
        E5RT::E5RTError::E5RTError(v29, v49, v48);
      }
      unint64_t v18 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor((E5RT::OperandDescriptor *)v13[5]);
      int v19 = v18;
      uint64_t v20 = *((char *)v13 + 39) >= 0 ? (uint64_t)(v13 + 2) : (uint64_t)v13[2];
      CFDictionaryRef v43 = __p;
      *(void *)((char *)__p + v15) = v20;
      TensorShape = (int **)E5RT::TensorDescriptor::GetTensorShape(v18);
      Ranunint64_t k = E5RT::TensorDescriptor::GetRank(v19);
      if (!Rank) {
        break;
      }
      char v23 = *TensorShape;
      uint64_t v24 = (uint64_t)&(*TensorShape)[2 * Rank];
      _DWORD *v7 = *(void *)(v24 - 8);
      if (Rank == 1) {
        goto LABEL_20;
      }
      *uint64_t v8 = *(void *)(v24 - 16);
      if (Rank <= 2) {
        goto LABEL_21;
      }
      uint64_t v25 = &v23[2 * Rank];
      _DWORD *v9 = *((void *)v25 - 3);
      if (Rank == 3) {
        goto LABEL_22;
      }
      *uint64_t v14 = *((void *)v25 - 4);
      if (Rank != 5)
      {
        _DWORD *v11 = 1;
        *int v12 = Rank;
        if (Rank >= 6)
        {
          uint64_t v27 = __cxa_allocate_exception(0x18uLL);
          std::string::basic_string[abi:ne180100]<0>(v49, "operator()");
          std::string::basic_string[abi:ne180100]<0>(v47, "Cannot reshape a tensor of rank > 5.");
          E5RT::Status::Status(v48, 2, v47);
          E5RT::E5RTError::E5RTError(v27, v49, v48);
        }
        goto LABEL_24;
      }
      int v26 = *v23;
LABEL_23:
      _DWORD *v11 = v26;
      *int v12 = Rank;
LABEL_24:
      v15 += 8;
      ++v7;
      uint64_t v13 = (uint64_t **)*v13;
      ++v8;
      ++v9;
      ++v14;
      ++v12;
      ++v11;
      if (!v13)
      {
        uint64_t v8 = v39;
        uint64_t v7 = v40;
        uint64_t v10 = v37;
        uint64_t v9 = v38;
        int v12 = v35;
        uint64_t v11 = v36;
        uint64_t v3 = v34;
        goto LABEL_28;
      }
    }
    _DWORD *v7 = 1;
LABEL_20:
    *uint64_t v8 = 1;
LABEL_21:
    _DWORD *v9 = 1;
LABEL_22:
    int v26 = 1;
    *uint64_t v14 = 1;
    goto LABEL_23;
  }
LABEL_28:
  if (espresso_plan_build_clean((uint64_t *)v3[2]))
  {
    uint64_t v31 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v49, "ReshapeEIRNetworkWithNewTensorDescriptors");
    std::string::basic_string[abi:ne180100]<0>(v47, "Unable to clean plan before reshaping EIR op. Op state is corrupted.");
    E5RT::Status::Status(v48, 2, v47);
    E5RT::E5RTError::E5RTError(v31, v49, v48);
  }
  if (espresso_network_change_input_blob_shapes_seq_rank(v3[3], (int)v3[4], v41, (uint64_t)v43, (uint64_t)v7, (uint64_t)v8, (uint64_t)v9, (uint64_t)v10, (uint64_t)v11, (uint64_t)v12))
  {
    size_t v32 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v49, "ReshapeEIRNetworkWithNewTensorDescriptors");
    std::string::basic_string[abi:ne180100]<0>(v47, "Unable to reshape espresso network input shapes.");
    E5RT::Status::Status(v48, 2, v47);
    E5RT::E5RTError::E5RTError(v32, v49, v48);
  }
  if (espresso_plan_build((uint64_t *)v3[2]))
  {
    BOOL v33 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v49, "ReshapeEIRNetworkWithNewTensorDescriptors");
    std::string::basic_string[abi:ne180100]<0>(v47, "Unable to rebuild plan after reshaping espresso network inputs.");
    E5RT::Status::Status(v48, 2, v47);
    E5RT::E5RTError::E5RTError(v33, v49, v48);
  }
  if (v12) {
    operator delete(v12);
  }
  if (v11) {
    operator delete(v11);
  }
  if (v10) {
    operator delete(v10);
  }
  if (v9) {
    operator delete(v9);
  }
  if (v8) {
    operator delete(v8);
  }
  if (v7) {
    operator delete(v7);
  }
  if (__p)
  {
    operator delete(__p);
  }
}

void sub_1922E98BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  operator delete(v32);
  if (v30)
  {
    operator delete(v30);
    if (v33)
    {
LABEL_10:
      operator delete(v33);
      if (v31)
      {
LABEL_11:
        operator delete(v31);
        if (v34)
        {
LABEL_12:
          operator delete(v34);
          uint64_t v36 = __p;
          if (!__p) {
LABEL_7:
          }
            _Unwind_Resume(a1);
LABEL_6:
          operator delete(v36);
          goto LABEL_7;
        }
LABEL_5:
        uint64_t v36 = __p;
        if (!__p) {
          goto LABEL_7;
        }
        goto LABEL_6;
      }
LABEL_4:
      if (v34) {
        goto LABEL_12;
      }
      goto LABEL_5;
    }
  }
  else if (v33)
  {
    goto LABEL_10;
  }
  if (v31) {
    goto LABEL_11;
  }
  goto LABEL_4;
}

void E5RT::Ops::BaseEirInferenceOperation::Impl::PopulateDataDependentDynamicPort(uint64_t a1, uint64_t a2, void *lpsrc)
{
  memset(__src, 0, 80);
  uint64_t v5 = std::__hash_table<std::__hash_value_type<std::string,espresso_buffer_t>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,espresso_buffer_t>>>::find<std::string>((void *)(a1 + 40), a2);
  if (v5)
  {
    uint64_t v18 = 0;
    unint64_t v6 = (int32x4_t *)(v5 + 5);
    if (*(char *)(a2 + 23) >= 0) {
      uint64_t v7 = a2;
    }
    else {
      uint64_t v7 = *(void *)a2;
    }
    if (!espresso_network_bind_buffer(*(uint64_t **)(a1 + 24), *(void *)(a1 + 32), v7, (uint64_t)v6, 0x20000, 0x40000, 0x10000))
    {
      if (!espresso_buffer_unpack_tensor_shape(v6, &v18, __src))
      {
        uint64_t v8 = v18;
        uint64_t v15 = 0;
        uint64_t v16 = 0;
        long long __p = 0;
        if (v18)
        {
          if (v18 < 0) {
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          size_t v9 = 8 * v18;
          long long __p = operator new(8 * v18);
          uint64_t v16 = (char *)__p + 8 * v8;
          memcpy(__p, __src, v9);
          uint64_t v15 = v16;
        }
        E5RT::TensorDataType::TensorDataType(&v12);
      }
      exceptiounint64_t n = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(&__p, "PopulateDataDependentDynamicPort");
      std::string::basic_string[abi:ne180100]<0>(&v13, "Unable to query output dimensions after executing dyn op.");
      E5RT::Status::Status(&v12, 2, &v13);
      E5RT::E5RTError::E5RTError(exception, &__p, &v12);
    }
    uint64_t v10 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&__p, "PopulateDataDependentDynamicPort");
    std::string::basic_string[abi:ne180100]<0>(&v13, "Unable to bind output to dyn output.");
    E5RT::Status::Status(&v12, 2, &v13);
    E5RT::E5RTError::E5RTError(v10, &__p, &v12);
  }
  std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
}

void sub_1922EA0D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a18) {
    sub_1922EC2D8(a18);
  }
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  if (__p)
  {
    a26 = (uint64_t)__p;
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1922EA20C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
  {
    operator delete(__p);
    __cxa_free_exception(v27);
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v27);
  _Unwind_Resume(a1);
}

void sub_1922EA234(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void E5RT::Ops::BaseEirInferenceOperation::BaseEirInferenceOperation(uint64_t a1, int a2, long long *a3, uint64_t a4, long long *a5, uint64_t a6, uint64_t a7)
{
  memset(v20, 0, 32);
  LODWORD(v20[4]) = 1065353216;
  E5RT::ExecutionStreamOperationInternal::ExecutionStreamOperationInternal(a1, (long long *)a4, a6, a7, (uint64_t)v20);
  uint64_t v12 = (void **)v20[2];
  if (v20[2])
  {
    do
    {
      while (1)
      {
        uint64_t v13 = (void **)*v12;
        uint64_t v14 = (std::__shared_weak_count *)v12[6];
        if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
        if (*((char *)v12 + 39) < 0) {
          break;
        }
        operator delete(v12);
        uint64_t v12 = v13;
        if (!v13) {
          goto LABEL_9;
        }
      }
      operator delete(v12[2]);
      operator delete(v12);
      uint64_t v12 = v13;
    }
    while (v13);
  }
LABEL_9:
  uint64_t v15 = v20[0];
  v20[0] = 0;
  if (v15) {
    operator delete(v15);
  }
  *(void *)a1 = &unk_1EE326668;
  *(void *)(a1 + 296) = 0;
  long long v16 = *a5;
  *(void *)(a1 + 320) = *((void *)a5 + 2);
  *(_OWORD *)(a1 + 304) = v16;
  *(_DWORD *)(a1 + 328) = a2;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 336), *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v17 = *a3;
    *(void *)(a1 + 352) = *((void *)a3 + 2);
    *(_OWORD *)(a1 + 336) = v17;
  }
  if (*(char *)(a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 360), *(const std::string::value_type **)a4, *(void *)(a4 + 8));
  }
  else
  {
    long long v18 = *(_OWORD *)a4;
    *(void *)(a1 + 376) = *(void *)(a4 + 16);
    *(_OWORD *)(a1 + 360) = v18;
  }
  int v19 = *(_DWORD *)(a1 + 304);
  E5RT::ExecutionStreamOperationInternal::GetTraceIdentifier((E5RT::ExecutionStreamOperationInternal *)a1);
  E5RT::ExecutionStreamOperationInternal::GetNameTraceIdentifier((E5RT::ExecutionStreamOperationInternal *)a1);
  LODWORD(v20[0]) = 0;
  HIDWORD(v20[0]) = v19;
  memset(&v20[1], 0, 32);
  kdebug_trace();
  operator new();
}

void sub_1922EA4B4(_Unwind_Exception *a1)
{
  if ((v1[359] & 0x80000000) == 0)
  {
    std::experimental::fundamentals_v2::propagate_const<std::unique_ptr<E5RT::Ops::BaseEirInferenceOperation::Impl>>::~propagate_const(v2);
    E5RT::ExecutionStreamOperationInternal::~ExecutionStreamOperationInternal((E5RT::ExecutionStreamOperationInternal *)v1);
    _Unwind_Resume(a1);
  }
  operator delete(*v3);
  std::experimental::fundamentals_v2::propagate_const<std::unique_ptr<E5RT::Ops::BaseEirInferenceOperation::Impl>>::~propagate_const(v2);
  E5RT::ExecutionStreamOperationInternal::~ExecutionStreamOperationInternal((E5RT::ExecutionStreamOperationInternal *)v1);
  _Unwind_Resume(a1);
}

void sub_1922EA578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

E5RT::Ops::BaseEirInferenceOperation::Impl **std::experimental::fundamentals_v2::propagate_const<std::unique_ptr<E5RT::Ops::BaseEirInferenceOperation::Impl>>::~propagate_const(E5RT::Ops::BaseEirInferenceOperation::Impl **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    E5RT::Ops::BaseEirInferenceOperation::Impl::~Impl(v2);
    MEMORY[0x192FF16B0]();
  }
  return a1;
}

void E5RT::Ops::BaseEirInferenceOperation::~BaseEirInferenceOperation(void **this)
{
  *this = &unk_1EE326668;
  if (*((char *)this + 383) < 0)
  {
    operator delete(this[45]);
    if ((*((char *)this + 359) & 0x80000000) == 0)
    {
LABEL_3:
      uint64_t v2 = (E5RT::Ops::BaseEirInferenceOperation::Impl *)this[37];
      this[37] = 0;
      if (!v2) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if ((*((char *)this + 359) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(this[42]);
  uint64_t v2 = (E5RT::Ops::BaseEirInferenceOperation::Impl *)this[37];
  this[37] = 0;
  if (v2)
  {
LABEL_4:
    E5RT::Ops::BaseEirInferenceOperation::Impl::~Impl(v2);
    MEMORY[0x192FF16B0]();
  }
LABEL_5:

  E5RT::ExecutionStreamOperationInternal::~ExecutionStreamOperationInternal((E5RT::ExecutionStreamOperationInternal *)this);
}

uint64_t E5RT::Ops::BaseEirInferenceOperation::GetOpCode(E5RT::Ops::BaseEirInferenceOperation *this)
{
  return *((unsigned int *)this + 82);
}

uint64_t E5RT::Ops::BaseEirInferenceOperation::PrepareOpForEncode(E5RT::Ops::BaseEirInferenceOperation *this)
{
  E5RT::ExecutionStreamOperationInternal::GetTraceIdentifier(this);
  kdebug_trace();
  InitializedImpl = (E5RT::ExecutionStreamOperationInternal **)E5RT::Ops::BaseEirInferenceOperation::GetInitializedImpl(this);
  E5RT::Ops::BaseEirInferenceOperation::Impl::PrepareOpForEncode(InitializedImpl);
  E5RT::ExecutionStreamOperationInternal::PrepareOpForEncode((uint64_t)this);
  return kdebug_trace();
}

void sub_1922EA714(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

uint64_t E5RT::Ops::BaseEirInferenceOperation::GetInitializedImpl(E5RT::Ops::BaseEirInferenceOperation *this)
{
  if (!*(unsigned char *)(*((void *)this + 37) + 129)) {
    operator new();
  }
  return *((void *)this + 37);
}

void sub_1922EAA2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
    std::unique_ptr<E5RT::Ops::BaseEirInferenceOperation::Impl::BaseEirInferenceOperationConfig>::~unique_ptr[abi:ne180100](&a14);
    _Unwind_Resume(a1);
  }
  std::unique_ptr<E5RT::Ops::BaseEirInferenceOperation::Impl::BaseEirInferenceOperationConfig>::~unique_ptr[abi:ne180100](&a14);
  _Unwind_Resume(a1);
}

uint64_t E5RT::Ops::BaseEirInferenceOperation::EncodeOperation(E5RT::Ops::BaseEirInferenceOperation *this, const E5RT::ExecutionStreamConfigOptions *a2, uint64_t a3)
{
  E5RT::ExecutionStreamOperationInternal::GetTraceIdentifier(this);
  kdebug_trace();
  E5RT::ExecutionStreamOperationInternal::EncodeOperation(this, a2, a3);
  InitializedImpl = (E5RT::ExecutionStreamOperationInternal **)E5RT::Ops::BaseEirInferenceOperation::GetInitializedImpl(this);
  E5RT::Ops::BaseEirInferenceOperation::Impl::EncodeOperation(InitializedImpl);
  return kdebug_trace();
}

void sub_1922EAB58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

uint64_t E5RT::Ops::BaseEirInferenceOperation::ExecuteSync(E5RT::Ops::BaseEirInferenceOperation *this)
{
  E5RT::ExecutionStreamOperationInternal::GetTraceIdentifier(this);
  E5RT::ExecutionStreamOperationInternal::GetStreamId(this);
  kdebug_trace();
  InitializedImpl = (E5RT::Ops::BaseEirInferenceOperation::Impl *)E5RT::Ops::BaseEirInferenceOperation::GetInitializedImpl(this);
  E5RT::Ops::BaseEirInferenceOperation::Impl::ExecuteSync(InitializedImpl);
  return kdebug_trace();
}

void sub_1922EABFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

uint64_t E5RT::Ops::BaseEirInferenceOperation::ReshapeOperationInternal(E5RT::ExecutionStreamOperationInternal *a1, uint64_t a2)
{
  if (((*(uint64_t (**)(E5RT::ExecutionStreamOperationInternal *))(*(void *)a1 + 160))(a1) & 1) == 0)
  {
    exceptiounint64_t n = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v8, "ReshapeOperationInternal");
    std::string::basic_string[abi:ne180100]<0>(v11, "Reshape is not supported by this operation.");
    E5RT::Status::Status(v12, 2, v11);
    E5RT::E5RTError::E5RTError(exception, &v8, v12);
  }
  int v4 = *((_DWORD *)a1 + 81);
  E5RT::ExecutionStreamOperationInternal::GetTraceIdentifier(a1);
  E5RT::ExecutionStreamOperationInternal::GetStreamId(a1);
  LODWORD(v8) = 0;
  HIDWORD(v8) = v4;
  long long v9 = 0u;
  long long v10 = 0u;
  kdebug_trace();
  uint64_t InitializedImpl = E5RT::Ops::BaseEirInferenceOperation::GetInitializedImpl(a1);
  E5RT::Ops::BaseEirInferenceOperation::Impl::ReshapeOperationInternal(InitializedImpl, a2);
  E5RT::ExecutionStreamOperationInternal::UpdateDynamicPorts(a1);
  return kdebug_trace();
}

void sub_1922EAD50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  E5RT::Status::~Status((E5RT::Status *)(v25 - 40));
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v24 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v24)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v23);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, long long **a4)
{
  unint64_t v6 = (unsigned char *)a2;
  unint64_t v8 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v9 = v8;
  }
  unint64_t v10 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v45, (uint64_t *)a2, v9);
  unint64_t v11 = v10;
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v12) {
        unint64_t v4 = v10 % v12;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v10;
    }
    uint64_t v14 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      uint64_t v15 = *v14;
      if (*v14)
      {
        char v16 = v6[23];
        if (v16 >= 0) {
          uint64_t v17 = v6[23];
        }
        else {
          uint64_t v17 = *((void *)v6 + 1);
        }
        if (v16 < 0) {
          unint64_t v6 = *(unsigned char **)v6;
        }
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v22 = v15[1];
            if (v22 == v11)
            {
              uint64_t v23 = *((unsigned __int8 *)v15 + 39);
              if ((v23 & 0x80u) == 0) {
                uint64_t v24 = *((unsigned __int8 *)v15 + 39);
              }
              else {
                uint64_t v24 = v15[3];
              }
              if (v24 == v17)
              {
                if ((v23 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v15[2], v6, v15[3])) {
                    return v15;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v15 + 39)) {
                    return v15;
                  }
                  uint64_t v25 = 0;
                  while (*((unsigned __int8 *)v15 + v25 + 16) == v6[v25])
                  {
                    if (v23 == ++v25) {
                      return v15;
                    }
                  }
                }
              }
            }
            else if ((v22 & (v12 - 1)) != v4)
            {
              goto LABEL_51;
            }
            uint64_t v15 = (uint64_t *)*v15;
            if (!v15) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v18 = v15[1];
          if (v18 == v11)
          {
            uint64_t v19 = *((unsigned __int8 *)v15 + 39);
            if ((v19 & 0x80u) == 0) {
              uint64_t v20 = *((unsigned __int8 *)v15 + 39);
            }
            else {
              uint64_t v20 = v15[3];
            }
            if (v20 == v17)
            {
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp((const void *)v15[2], v6, v15[3])) {
                  return v15;
                }
              }
              else
              {
                if (!*((unsigned char *)v15 + 39)) {
                  return v15;
                }
                uint64_t v21 = 0;
                while (*((unsigned __int8 *)v15 + v21 + 16) == v6[v21])
                {
                  if (v19 == ++v21) {
                    return v15;
                  }
                }
              }
            }
          }
          else
          {
            if (v18 >= v12) {
              v18 %= v12;
            }
            if (v18 != v4) {
              break;
            }
          }
          uint64_t v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_51:
  int v26 = (char *)operator new(0x58uLL);
  v45[0] = v26;
  v45[1] = a1 + 16;
  char v46 = 0;
  *(void *)int v26 = 0;
  *((void *)v26 + 1) = v11;
  uint64_t v27 = (std::string *)(v26 + 16);
  BOOL v28 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v27, *(const std::string::value_type **)v28, *((void *)v28 + 1));
  }
  else
  {
    long long v29 = *v28;
    *((void *)v26 + 4) = *((void *)v28 + 2);
    *(_OWORD *)&v27->__r_.__value_.__l.__data_ = v29;
  }
  *((_DWORD *)v26 + 10) = 0;
  *((_OWORD *)v26 + 3) = 0u;
  *((_OWORD *)v26 + 4) = 0u;
  *((_DWORD *)v26 + 20) = 0;
  char v46 = 1;
  float v30 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v31 = *(float *)(a1 + 32);
  if (!v12 || (float)(v31 * (float)v12) < v30)
  {
    BOOL v34 = 1;
    if (v12 >= 3) {
      BOOL v34 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v35 = v34 | (2 * v12);
    unint64_t v36 = vcvtps_u32_f32(v30 / v31);
    if (v35 <= v36) {
      size_t prime = v36;
    }
    else {
      size_t prime = v35;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v38 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v38) {
      goto LABEL_68;
    }
    if (prime < *(void *)&v38)
    {
      unint64_t v39 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v38 < 3uLL || (uint8x8_t v40 = (uint8x8_t)vcnt_s8(v38), v40.i16[0] = vaddlv_u8(v40), v40.u32[0] > 1uLL))
      {
        unint64_t v39 = std::__next_prime(v39);
      }
      else
      {
        uint64_t v41 = 1 << -(char)__clz(v39 - 1);
        if (v39 >= 2) {
          unint64_t v39 = v41;
        }
      }
      if (prime <= v39) {
        size_t prime = v39;
      }
      if (prime < *(void *)&v38) {
LABEL_68:
      }
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v12 = *(void *)(a1 + 8);
    unint64_t v42 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        unint64_t v4 = v11 % v12;
        size_t v32 = *(void **)(*(void *)a1 + 8 * (v11 % v12));
        BOOL v33 = (void *)v45[0];
        if (v32) {
          goto LABEL_57;
        }
      }
      else
      {
        unint64_t v4 = v11;
        size_t v32 = *(void **)(*(void *)a1 + 8 * v11);
        BOOL v33 = (void *)v45[0];
        if (v32) {
          goto LABEL_57;
        }
      }
    }
    else
    {
      unint64_t v4 = v42 & v11;
      size_t v32 = *(void **)(*(void *)a1 + 8 * (v42 & v11));
      BOOL v33 = (void *)v45[0];
      if (v32) {
        goto LABEL_57;
      }
    }
LABEL_81:
    *BOOL v33 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v45[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v45[0])
    {
      unint64_t v43 = *(void *)(*(void *)v45[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v43 >= v12) {
          v43 %= v12;
        }
      }
      else
      {
        v43 &= v12 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v43) = v45[0];
    }
    goto LABEL_92;
  }
  size_t v32 = *(void **)(*(void *)a1 + 8 * v4);
  BOOL v33 = (void *)v45[0];
  if (!v32) {
    goto LABEL_81;
  }
LABEL_57:
  *BOOL v33 = *v32;
  *size_t v32 = v45[0];
LABEL_92:
  uint64_t v15 = (uint64_t *)v45[0];
  ++*(void *)(a1 + 24);
  return v15;
}

void sub_1922EB23C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1922EB250(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16) && *(char *)(v2 + 39) < 0) {
      operator delete(*(void **)(v2 + 16));
    }
    operator delete((void *)v2);
  }
  return a1;
}

void std::__throw_bad_variant_access[abi:ne180100]()
{
  exceptiounint64_t n = __cxa_allocate_exception(8uLL);
  void *exception = MEMORY[0x1E4FBA4F0] + 16;
  __cxa_throw(exception, MEMORY[0x1E4FBA340], (void (*)(void *))std::bad_variant_access::~bad_variant_access);
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,espresso_buffer_t>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,espresso_buffer_t>>>::find<std::string>(void *a1, uint64_t a2)
{
  uint64_t v2 = (unsigned char *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v5 = v4;
  }
  unint64_t v6 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v25, (uint64_t *)a2, v5);
  int8x8_t v7 = (int8x8_t)a1[1];
  if (!*(void *)&v7) {
    return 0;
  }
  unint64_t v8 = v6;
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v10 = v6;
    if (v6 >= *(void *)&v7) {
      unint64_t v10 = v6 % *(void *)&v7;
    }
  }
  else
  {
    unint64_t v10 = (*(void *)&v7 - 1) & v6;
  }
  unint64_t v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    uint8x8_t v13 = *v12;
    if (*v12)
    {
      char v14 = v2[23];
      if (v14 >= 0) {
        uint64_t v15 = v2[23];
      }
      else {
        uint64_t v15 = *((void *)v2 + 1);
      }
      if (v14 < 0) {
        uint64_t v2 = *(unsigned char **)v2;
      }
      if (v9.u32[0] < 2uLL)
      {
        uint64_t v16 = *(void *)&v7 - 1;
        while (1)
        {
          uint64_t v21 = v13[1];
          if (v21 == v8)
          {
            uint64_t v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0) {
              uint64_t v23 = *((unsigned __int8 *)v13 + 39);
            }
            else {
              uint64_t v23 = v13[3];
            }
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3])) {
                  return v13;
                }
              }
              else
              {
                if (!*((unsigned char *)v13 + 39)) {
                  return v13;
                }
                uint64_t v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24) {
                    return v13;
                  }
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          uint64_t result = 0;
          uint8x8_t v13 = (uint64_t *)*v13;
          if (!v13) {
            return result;
          }
        }
      }
      while (1)
      {
        unint64_t v17 = v13[1];
        if (v17 == v8)
        {
          uint64_t v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0) {
            uint64_t v19 = *((unsigned __int8 *)v13 + 39);
          }
          else {
            uint64_t v19 = v13[3];
          }
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3])) {
                return v13;
              }
            }
            else
            {
              if (!*((unsigned char *)v13 + 39)) {
                return v13;
              }
              uint64_t v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20) {
                  return v13;
                }
              }
            }
          }
        }
        else
        {
          if (v17 >= *(void *)&v7) {
            v17 %= *(void *)&v7;
          }
          if (v17 != v10) {
            return 0;
          }
        }
        uint64_t result = 0;
        uint8x8_t v13 = (uint64_t *)*v13;
        if (!v13) {
          return result;
        }
      }
    }
  }
  return 0;
}

void std::__shared_ptr_pointer<E5RT::BufferObject  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

uint64_t std::__shared_ptr_pointer<E5RT::BufferObject  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<E5RT::BufferObject  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000192DAF49ALL) {
    return a1 + 24;
  }
  if (((v3 & 0x8000000192DAF49ALL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000192DAF49ALL)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000192DAF49ALL & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,espresso_buffer_t>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,espresso_buffer_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, long long **a4)
{
  unint64_t v6 = (unsigned char *)a2;
  unint64_t v8 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v9 = v8;
  }
  unint64_t v10 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v45, (uint64_t *)a2, v9);
  unint64_t v11 = v10;
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v12) {
        unint64_t v4 = v10 % v12;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v10;
    }
    char v14 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      uint64_t v15 = *v14;
      if (*v14)
      {
        char v16 = v6[23];
        if (v16 >= 0) {
          uint64_t v17 = v6[23];
        }
        else {
          uint64_t v17 = *((void *)v6 + 1);
        }
        if (v16 < 0) {
          unint64_t v6 = *(unsigned char **)v6;
        }
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v22 = v15[1];
            if (v22 == v11)
            {
              uint64_t v23 = *((unsigned __int8 *)v15 + 39);
              if ((v23 & 0x80u) == 0) {
                uint64_t v24 = *((unsigned __int8 *)v15 + 39);
              }
              else {
                uint64_t v24 = v15[3];
              }
              if (v24 == v17)
              {
                if ((v23 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v15[2], v6, v15[3])) {
                    return v15;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v15 + 39)) {
                    return v15;
                  }
                  uint64_t v25 = 0;
                  while (*((unsigned __int8 *)v15 + v25 + 16) == v6[v25])
                  {
                    if (v23 == ++v25) {
                      return v15;
                    }
                  }
                }
              }
            }
            else if ((v22 & (v12 - 1)) != v4)
            {
              goto LABEL_51;
            }
            uint64_t v15 = (uint64_t *)*v15;
            if (!v15) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v18 = v15[1];
          if (v18 == v11)
          {
            uint64_t v19 = *((unsigned __int8 *)v15 + 39);
            if ((v19 & 0x80u) == 0) {
              uint64_t v20 = *((unsigned __int8 *)v15 + 39);
            }
            else {
              uint64_t v20 = v15[3];
            }
            if (v20 == v17)
            {
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp((const void *)v15[2], v6, v15[3])) {
                  return v15;
                }
              }
              else
              {
                if (!*((unsigned char *)v15 + 39)) {
                  return v15;
                }
                uint64_t v21 = 0;
                while (*((unsigned __int8 *)v15 + v21 + 16) == v6[v21])
                {
                  if (v19 == ++v21) {
                    return v15;
                  }
                }
              }
            }
          }
          else
          {
            if (v18 >= v12) {
              v18 %= v12;
            }
            if (v18 != v4) {
              break;
            }
          }
          uint64_t v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_51:
  int v26 = (char *)operator new(0xD0uLL);
  v45[0] = v26;
  v45[1] = a1 + 16;
  char v46 = 0;
  *(void *)int v26 = 0;
  *((void *)v26 + 1) = v11;
  uint64_t v27 = (std::string *)(v26 + 16);
  BOOL v28 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v27, *(const std::string::value_type **)v28, *((void *)v28 + 1));
  }
  else
  {
    long long v29 = *v28;
    *((void *)v26 + 4) = *((void *)v28 + 2);
    *(_OWORD *)&v27->__r_.__value_.__l.__data_ = v29;
  }
  *((void *)v26 + 25) = 0;
  *(_OWORD *)(v26 + 184) = 0u;
  *(_OWORD *)(v26 + 168) = 0u;
  *(_OWORD *)(v26 + 152) = 0u;
  *(_OWORD *)(v26 + 136) = 0u;
  *(_OWORD *)(v26 + 120) = 0u;
  *(_OWORD *)(v26 + 104) = 0u;
  *(_OWORD *)(v26 + 88) = 0u;
  *(_OWORD *)(v26 + 72) = 0u;
  *(_OWORD *)(v26 + 56) = 0u;
  *(_OWORD *)(v26 + 40) = 0u;
  char v46 = 1;
  float v30 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v31 = *(float *)(a1 + 32);
  if (!v12 || (float)(v31 * (float)v12) < v30)
  {
    BOOL v34 = 1;
    if (v12 >= 3) {
      BOOL v34 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v35 = v34 | (2 * v12);
    unint64_t v36 = vcvtps_u32_f32(v30 / v31);
    if (v35 <= v36) {
      size_t prime = v36;
    }
    else {
      size_t prime = v35;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v38 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v38) {
      goto LABEL_68;
    }
    if (prime < *(void *)&v38)
    {
      unint64_t v39 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v38 < 3uLL || (uint8x8_t v40 = (uint8x8_t)vcnt_s8(v38), v40.i16[0] = vaddlv_u8(v40), v40.u32[0] > 1uLL))
      {
        unint64_t v39 = std::__next_prime(v39);
      }
      else
      {
        uint64_t v41 = 1 << -(char)__clz(v39 - 1);
        if (v39 >= 2) {
          unint64_t v39 = v41;
        }
      }
      if (prime <= v39) {
        size_t prime = v39;
      }
      if (prime < *(void *)&v38) {
LABEL_68:
      }
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v12 = *(void *)(a1 + 8);
    unint64_t v42 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        unint64_t v4 = v11 % v12;
        size_t v32 = *(void **)(*(void *)a1 + 8 * (v11 % v12));
        BOOL v33 = (void *)v45[0];
        if (v32) {
          goto LABEL_57;
        }
      }
      else
      {
        unint64_t v4 = v11;
        size_t v32 = *(void **)(*(void *)a1 + 8 * v11);
        BOOL v33 = (void *)v45[0];
        if (v32) {
          goto LABEL_57;
        }
      }
    }
    else
    {
      unint64_t v4 = v42 & v11;
      size_t v32 = *(void **)(*(void *)a1 + 8 * (v42 & v11));
      BOOL v33 = (void *)v45[0];
      if (v32) {
        goto LABEL_57;
      }
    }
LABEL_81:
    *BOOL v33 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v45[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v45[0])
    {
      unint64_t v43 = *(void *)(*(void *)v45[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v43 >= v12) {
          v43 %= v12;
        }
      }
      else
      {
        v43 &= v12 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v43) = v45[0];
    }
    goto LABEL_92;
  }
  size_t v32 = *(void **)(*(void *)a1 + 8 * v4);
  BOOL v33 = (void *)v45[0];
  if (!v32) {
    goto LABEL_81;
  }
LABEL_57:
  *BOOL v33 = *v32;
  *size_t v32 = v45[0];
LABEL_92:
  uint64_t v15 = (uint64_t *)v45[0];
  ++*(void *)(a1 + 24);
  return v15;
}

void sub_1922EBA9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1922EBAB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, long long **a4)
{
  unint64_t v6 = (unsigned char *)a2;
  unint64_t v8 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v9 = v8;
  }
  unint64_t v10 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v45, (uint64_t *)a2, v9);
  unint64_t v11 = v10;
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v12) {
        unint64_t v4 = v10 % v12;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v10;
    }
    char v14 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      uint64_t v15 = *v14;
      if (*v14)
      {
        char v16 = v6[23];
        if (v16 >= 0) {
          uint64_t v17 = v6[23];
        }
        else {
          uint64_t v17 = *((void *)v6 + 1);
        }
        if (v16 < 0) {
          unint64_t v6 = *(unsigned char **)v6;
        }
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v22 = v15[1];
            if (v22 == v11)
            {
              uint64_t v23 = *((unsigned __int8 *)v15 + 39);
              if ((v23 & 0x80u) == 0) {
                uint64_t v24 = *((unsigned __int8 *)v15 + 39);
              }
              else {
                uint64_t v24 = v15[3];
              }
              if (v24 == v17)
              {
                if ((v23 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v15[2], v6, v15[3])) {
                    return v15;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v15 + 39)) {
                    return v15;
                  }
                  uint64_t v25 = 0;
                  while (*((unsigned __int8 *)v15 + v25 + 16) == v6[v25])
                  {
                    if (v23 == ++v25) {
                      return v15;
                    }
                  }
                }
              }
            }
            else if ((v22 & (v12 - 1)) != v4)
            {
              goto LABEL_51;
            }
            uint64_t v15 = (uint64_t *)*v15;
            if (!v15) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v18 = v15[1];
          if (v18 == v11)
          {
            uint64_t v19 = *((unsigned __int8 *)v15 + 39);
            if ((v19 & 0x80u) == 0) {
              uint64_t v20 = *((unsigned __int8 *)v15 + 39);
            }
            else {
              uint64_t v20 = v15[3];
            }
            if (v20 == v17)
            {
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp((const void *)v15[2], v6, v15[3])) {
                  return v15;
                }
              }
              else
              {
                if (!*((unsigned char *)v15 + 39)) {
                  return v15;
                }
                uint64_t v21 = 0;
                while (*((unsigned __int8 *)v15 + v21 + 16) == v6[v21])
                {
                  if (v19 == ++v21) {
                    return v15;
                  }
                }
              }
            }
          }
          else
          {
            if (v18 >= v12) {
              v18 %= v12;
            }
            if (v18 != v4) {
              break;
            }
          }
          uint64_t v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_51:
  int v26 = operator new(0x38uLL);
  v45[0] = v26;
  v45[1] = a1 + 16;
  char v46 = 0;
  void *v26 = 0;
  v26[1] = v11;
  uint64_t v27 = (std::string *)(v26 + 2);
  BOOL v28 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v27, *(const std::string::value_type **)v28, *((void *)v28 + 1));
  }
  else
  {
    long long v29 = *v28;
    v26[4] = *((void *)v28 + 2);
    *(_OWORD *)&v27->__r_.__value_.__l.__data_ = v29;
  }
  v26[5] = 0;
  v26[6] = 0;
  char v46 = 1;
  float v30 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v31 = *(float *)(a1 + 32);
  if (!v12 || (float)(v31 * (float)v12) < v30)
  {
    BOOL v34 = 1;
    if (v12 >= 3) {
      BOOL v34 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v35 = v34 | (2 * v12);
    unint64_t v36 = vcvtps_u32_f32(v30 / v31);
    if (v35 <= v36) {
      size_t prime = v36;
    }
    else {
      size_t prime = v35;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v38 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v38) {
      goto LABEL_68;
    }
    if (prime < *(void *)&v38)
    {
      unint64_t v39 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v38 < 3uLL || (uint8x8_t v40 = (uint8x8_t)vcnt_s8(v38), v40.i16[0] = vaddlv_u8(v40), v40.u32[0] > 1uLL))
      {
        unint64_t v39 = std::__next_prime(v39);
      }
      else
      {
        uint64_t v41 = 1 << -(char)__clz(v39 - 1);
        if (v39 >= 2) {
          unint64_t v39 = v41;
        }
      }
      if (prime <= v39) {
        size_t prime = v39;
      }
      if (prime < *(void *)&v38) {
LABEL_68:
      }
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v12 = *(void *)(a1 + 8);
    unint64_t v42 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        unint64_t v4 = v11 % v12;
        size_t v32 = *(void **)(*(void *)a1 + 8 * (v11 % v12));
        BOOL v33 = (void *)v45[0];
        if (v32) {
          goto LABEL_57;
        }
      }
      else
      {
        unint64_t v4 = v11;
        size_t v32 = *(void **)(*(void *)a1 + 8 * v11);
        BOOL v33 = (void *)v45[0];
        if (v32) {
          goto LABEL_57;
        }
      }
    }
    else
    {
      unint64_t v4 = v42 & v11;
      size_t v32 = *(void **)(*(void *)a1 + 8 * (v42 & v11));
      BOOL v33 = (void *)v45[0];
      if (v32) {
        goto LABEL_57;
      }
    }
LABEL_81:
    *BOOL v33 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v45[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v45[0])
    {
      unint64_t v43 = *(void *)(*(void *)v45[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v43 >= v12) {
          v43 %= v12;
        }
      }
      else
      {
        v43 &= v12 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v43) = v45[0];
    }
    goto LABEL_92;
  }
  size_t v32 = *(void **)(*(void *)a1 + 8 * v4);
  BOOL v33 = (void *)v45[0];
  if (!v32) {
    goto LABEL_81;
  }
LABEL_57:
  *BOOL v33 = *v32;
  *size_t v32 = v45[0];
LABEL_92:
  uint64_t v15 = (uint64_t *)v45[0];
  ++*(void *)(a1 + 24);
  return v15;
}

void sub_1922EBF10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1922EBF24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>>>::find<std::string>(void *a1, uint64_t a2)
{
  uint64_t v2 = (unsigned char *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v5 = v4;
  }
  unint64_t v6 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v25, (uint64_t *)a2, v5);
  int8x8_t v7 = (int8x8_t)a1[1];
  if (!*(void *)&v7) {
    return 0;
  }
  unint64_t v8 = v6;
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v10 = v6;
    if (v6 >= *(void *)&v7) {
      unint64_t v10 = v6 % *(void *)&v7;
    }
  }
  else
  {
    unint64_t v10 = (*(void *)&v7 - 1) & v6;
  }
  unint64_t v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    uint8x8_t v13 = *v12;
    if (*v12)
    {
      char v14 = v2[23];
      if (v14 >= 0) {
        uint64_t v15 = v2[23];
      }
      else {
        uint64_t v15 = *((void *)v2 + 1);
      }
      if (v14 < 0) {
        uint64_t v2 = *(unsigned char **)v2;
      }
      if (v9.u32[0] < 2uLL)
      {
        uint64_t v16 = *(void *)&v7 - 1;
        while (1)
        {
          uint64_t v21 = v13[1];
          if (v21 == v8)
          {
            uint64_t v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0) {
              uint64_t v23 = *((unsigned __int8 *)v13 + 39);
            }
            else {
              uint64_t v23 = v13[3];
            }
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3])) {
                  return v13;
                }
              }
              else
              {
                if (!*((unsigned char *)v13 + 39)) {
                  return v13;
                }
                uint64_t v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24) {
                    return v13;
                  }
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          uint64_t result = 0;
          uint8x8_t v13 = (uint64_t *)*v13;
          if (!v13) {
            return result;
          }
        }
      }
      while (1)
      {
        unint64_t v17 = v13[1];
        if (v17 == v8)
        {
          uint64_t v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0) {
            uint64_t v19 = *((unsigned __int8 *)v13 + 39);
          }
          else {
            uint64_t v19 = v13[3];
          }
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3])) {
                return v13;
              }
            }
            else
            {
              if (!*((unsigned char *)v13 + 39)) {
                return v13;
              }
              uint64_t v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20) {
                  return v13;
                }
              }
            }
          }
        }
        else
        {
          if (v17 >= *(void *)&v7) {
            v17 %= *(void *)&v7;
          }
          if (v17 != v10) {
            return 0;
          }
        }
        uint64_t result = 0;
        uint8x8_t v13 = (uint64_t *)*v13;
        if (!v13) {
          return result;
        }
      }
    }
  }
  return 0;
}

void std::__shared_ptr_pointer<E5RT::TensorDescriptor  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

uint64_t std::__shared_ptr_pointer<E5RT::TensorDescriptor  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<E5RT::TensorDescriptor  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000192DAA422) {
    return a1 + 24;
  }
  if (((v3 & 0x8000000192DAA422 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000192DAA422)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000192DAA422 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

void sub_1922EC25C(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl(&dword_1920CB000, log, OS_LOG_TYPE_ERROR, "Unable to set compute_unit_mask", v1, 2u);
}

uint64_t std::__function::__func<Espresso::AOT::MemOptimizer::MemOptimizerForMIL::BuildInterferenceGraph(std::string const&)::$_1,std::allocator<Espresso::AOT::MemOptimizer::MemOptimizerForMIL::BuildInterferenceGraph(std::string const&)::$_1>,BOOL ()(MIL::IROperation const&)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 8))(a1);
}

uint64_t sub_1922EC2D8(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 8))(a1);
}

uint64_t e5rt_e5_compiler_create_with_config(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EE392B18;
  v4[1] = a1;
  v4[2] = a2;
  unint64_t v5 = v4;
  uint64_t v2 = E5RT::ExceptionSafeExecute((uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

void sub_1922EC3F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_e5_compiler_compile(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  unint64_t v8 = operator new(0x28uLL);
  *unint64_t v8 = &unk_1EE392C18;
  v8[1] = a1;
  v8[2] = a2;
  void v8[3] = a3;
  v8[4] = a4;
  unint64_t v12 = v8;
  uint64_t v9 = E5RT::ExceptionSafeExecute((uint64_t)v11);
  if (v12 == v11)
  {
    (*(void (**)(void *))(v11[0] + 32))(v11);
  }
  else if (v12)
  {
    (*(void (**)(void))(*v12 + 40))();
  }
  return v9;
}

void sub_1922EC51C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_e5_compiler_is_new_compile_required(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  unint64_t v8 = operator new(0x28uLL);
  *unint64_t v8 = &unk_1EE392D18;
  v8[1] = a1;
  v8[2] = a2;
  void v8[3] = a3;
  v8[4] = a4;
  unint64_t v12 = v8;
  uint64_t v9 = E5RT::ExceptionSafeExecute((uint64_t)v11);
  if (v12 == v11)
  {
    (*(void (**)(void *))(v11[0] + 32))(v11);
  }
  else if (v12)
  {
    (*(void (**)(void))(*v12 + 40))();
  }
  return v9;
}

void sub_1922EC640(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_e5_compiler_purge_e5_bundles_for_input_model(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EE392D98;
  v4[1] = a1;
  v4[2] = a2;
  unint64_t v5 = v4;
  uint64_t v2 = E5RT::ExceptionSafeExecute((uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

void sub_1922EC73C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1922EC754()
{
}

void *sub_1922EC768(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EE392A98;
  result[1] = v3;
  return result;
}

uint64_t sub_1922EC7B0(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE392A98;
  a2[1] = v2;
  return result;
}

uint64_t sub_1922EC7DC(uint64_t a1)
{
  if (*(void *)(a1 + 8)) {
    operator new();
  }
  unint64_t v4 = operator new(0x30uLL);
  long long v5 = xmmword_192DA88D0;
  strcpy((char *)v4, "Invalid Function Argument: handle is NULL.");
  char v3 = 10;
  strcpy((char *)__p, "operator()");
  E5RT::LogErrorMessage((uint64_t *)&v4, (uint64_t *)__p);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v5) < 0) {
    operator delete(v4);
  }
  return 1;
}

void sub_1922EC8DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0)
  {
    operator delete(a15);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1922EC940(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z23e5rt_e5_compiler_createE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z23e5rt_e5_compiler_createE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z23e5rt_e5_compiler_createE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z23e5rt_e5_compiler_createE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_1922EC9B0()
{
  return &unk_1EE392AF8;
}

void sub_1922EC9C0()
{
}

__n128 sub_1922EC9D4(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE392B18;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1922ECA20(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE392B18;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1922ECA50(uint64_t a1)
{
  if (*(void *)(a1 + 8))
  {
    if (*(void *)(a1 + 16)) {
      operator new();
    }
    unint64_t v4 = operator new(0x38uLL);
    long long v5 = xmmword_192DA8900;
    strcpy((char *)v4, "Invalid Function Argument: config_options is NULL.");
    char v3 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v4, (uint64_t *)__p);
    if (v3 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v5) < 0) {
      operator delete(v4);
    }
    return 1;
  }
  else
  {
    unint64_t v4 = operator new(0x30uLL);
    long long v5 = xmmword_192DA88D0;
    strcpy((char *)v4, "Invalid Function Argument: handle is NULL.");
    char v3 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v4, (uint64_t *)__p);
    if (v3 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v5) < 0) {
      operator delete(v4);
    }
    return 1;
  }
}

void sub_1922ECC00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

void sub_1922ECC40(_Unwind_Exception *a1)
{
  MEMORY[0x192FF16B0](v1, 0x20C40A4A59CD2);
  _Unwind_Resume(a1);
}

uint64_t sub_1922ECC64(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z35e5rt_e5_compiler_create_with_configE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z35e5rt_e5_compiler_create_with_configE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z35e5rt_e5_compiler_create_with_configE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z35e5rt_e5_compiler_create_with_configE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_1922ECCD4()
{
  return &unk_1EE392B78;
}

void sub_1922ECCE4()
{
}

void *sub_1922ECCF8(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EE392B98;
  result[1] = v3;
  return result;
}

uint64_t sub_1922ECD40(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE392B98;
  a2[1] = v2;
  return result;
}

uint64_t sub_1922ECD6C(uint64_t a1)
{
  uint64_t v1 = *(uint64_t ***)(a1 + 8);
  if (v1)
  {
    uint64_t v2 = *v1;
    if (*v1)
    {
      uint64_t v4 = *v2;
      *uint64_t v2 = 0;
      if (v4) {
        (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      }
      MEMORY[0x192FF16B0](v2, 0x20C40A4A59CD2);
      uint64_t result = 0;
      **(void **)(a1 + 8) = 0;
    }
    else
    {
      unint64_t v8 = operator new(0x30uLL);
      long long v9 = xmmword_192DA90C0;
      strcpy((char *)v8, "Invalid Function Argument: *handle is NULL.");
      char v7 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v8, (uint64_t *)__p);
      if (v7 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v9) < 0) {
        operator delete(v8);
      }
      return 1;
    }
  }
  else
  {
    unint64_t v8 = operator new(0x30uLL);
    long long v9 = xmmword_192DA88D0;
    strcpy((char *)v8, "Invalid Function Argument: handle is NULL.");
    char v7 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v8, (uint64_t *)__p);
    if (v7 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v9) < 0) {
      operator delete(v8);
    }
    return 1;
  }
  return result;
}

void sub_1922ECF28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1922ECF68(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z24e5rt_e5_compiler_releaseE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z24e5rt_e5_compiler_releaseE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z24e5rt_e5_compiler_releaseE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z24e5rt_e5_compiler_releaseE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_1922ECFD8()
{
  return &unk_1EE392BF8;
}

void sub_1922ECFE8()
{
}

__n128 sub_1922ECFFC(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_1EE392C18;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_1922ED050(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE392C18;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1922ED088(void *a1)
{
  if (a1[1])
  {
    if (a1[2])
    {
      if (a1[3])
      {
        if (a1[4]) {
          operator new();
        }
        long long __dst = (char *)operator new(0x30uLL);
        long long v5 = xmmword_192DA90C0;
        strcpy(__dst, "Invalid Function Argument: library is NULL.");
        char v3 = 10;
        strcpy((char *)__p, "operator()");
        E5RT::LogErrorMessage((uint64_t *)&__dst, (uint64_t *)__p);
      }
      else
      {
        long long __dst = (char *)operator new(0x30uLL);
        long long v5 = xmmword_192DA90C0;
        strcpy(__dst, "Invalid Function Argument: options is NULL.");
        char v3 = 10;
        strcpy((char *)__p, "operator()");
        E5RT::LogErrorMessage((uint64_t *)&__dst, (uint64_t *)__p);
      }
    }
    else
    {
      long long __dst = (char *)operator new(0x38uLL);
      long long v5 = xmmword_192DAA490;
      strcpy(__dst, "Invalid Function Argument: path_to_input_file is NULL.");
      char v3 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&__dst, (uint64_t *)__p);
    }
  }
  else
  {
    long long __dst = (char *)operator new(0x30uLL);
    long long v5 = xmmword_192DA88D0;
    strcpy(__dst, "Invalid Function Argument: handle is NULL.");
    char v3 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&__dst, (uint64_t *)__p);
  }
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v5) < 0) {
    operator delete(__dst);
  }
  return 1;
}

void sub_1922ED514(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1922ED63C(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z24e5rt_e5_compiler_compileE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z24e5rt_e5_compiler_compileE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z24e5rt_e5_compiler_compileE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z24e5rt_e5_compiler_compileE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_1922ED6AC()
{
  return &unk_1EE392C78;
}

void sub_1922ED6BC()
{
}

__n128 sub_1922ED6D0(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_1EE392C98;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_1922ED724(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE392C98;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1922ED75C(void *a1)
{
  if (a1[1])
  {
    if (a1[2])
    {
      if (a1[3])
      {
        if (a1[4]) {
          operator new();
        }
        uint64_t v4 = operator new(0x30uLL);
        long long v5 = xmmword_192DA90C0;
        strcpy((char *)v4, "Invalid Function Argument: library is NULL.");
        char v3 = 10;
        strcpy((char *)__p, "operator()");
        E5RT::LogErrorMessage((uint64_t *)&v4, (uint64_t *)__p);
      }
      else
      {
        uint64_t v4 = operator new(0x30uLL);
        long long v5 = xmmword_192DA90C0;
        strcpy((char *)v4, "Invalid Function Argument: options is NULL.");
        char v3 = 10;
        strcpy((char *)__p, "operator()");
        E5RT::LogErrorMessage((uint64_t *)&v4, (uint64_t *)__p);
      }
    }
    else
    {
      uint64_t v4 = operator new(0x38uLL);
      long long v5 = xmmword_192DA8900;
      strcpy((char *)v4, "Invalid Function Argument: mil_ir_program is NULL.");
      char v3 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v4, (uint64_t *)__p);
    }
  }
  else
  {
    uint64_t v4 = operator new(0x30uLL);
    long long v5 = xmmword_192DA88D0;
    strcpy((char *)v4, "Invalid Function Argument: handle is NULL.");
    char v3 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v4, (uint64_t *)__p);
  }
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v5) < 0) {
    operator delete(v4);
  }
  return 1;
}

void sub_1922EDB4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1922EDC1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    JUMPOUT(0x1922EDC2CLL);
  }
  JUMPOUT(0x1922EDBACLL);
}

void sub_1922EDC60()
{
  uint64_t v1 = *v0;
  uint64_t *v0 = 0;
  if (!v1) {
    JUMPOUT(0x1922EDBDCLL);
  }
  JUMPOUT(0x1922EDBB8);
}

uint64_t sub_1922EDC74(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z40e5rt_e5_compiler_compile_from_ir_programE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z40e5rt_e5_compiler_compile_from_ir_programE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z40e5rt_e5_compiler_compile_from_ir_programE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z40e5rt_e5_compiler_compile_from_ir_programE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_1922EDCE4()
{
  return &unk_1EE392CF8;
}

void sub_1922EDCF4()
{
}

__n128 sub_1922EDD08(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_1EE392D18;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_1922EDD5C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE392D18;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1922EDD94(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (v1)
  {
    unint64_t v3 = *(const void **)(a1 + 16);
    if (v3)
    {
      if (*(void *)(a1 + 24))
      {
        if (*(void *)(a1 + 32))
        {
          uint64_t v4 = *(void *)(v1 + 8);
          size_t v5 = strlen(*(const char **)(a1 + 16));
          if (v5 >= 0x7FFFFFFFFFFFFFF8) {
            std::string::__throw_length_error[abi:ne180100]();
          }
          size_t v6 = v5;
          if (v5 >= 0x17)
          {
            uint64_t v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v5 | 7) != 0x17) {
              uint64_t v8 = v5 | 7;
            }
            uint64_t v9 = v8 + 1;
            p_dst = (void **)operator new(v8 + 1);
            *(void *)&long long v14 = v6;
            *((void *)&v14 + 1) = v9 | 0x8000000000000000;
            long long __dst = p_dst;
          }
          else
          {
            HIBYTE(v14) = v5;
            p_dst = &__dst;
            if (!v5) {
              goto LABEL_13;
            }
          }
          memmove(p_dst, v3, v6);
LABEL_13:
          *((unsigned char *)p_dst + v6) = 0;
          **(unsigned char **)(a1 + 32) = E5RT::E5Compiler::IsNewCompileRequired(v4, (std::string::size_type)&__dst, **(E5RT::E5CompilerOptions ***)(a1 + 24));
          if (SHIBYTE(v14) < 0) {
            operator delete(__dst);
          }
          return 0;
        }
        long long __dst = operator new(0x30uLL);
        long long v14 = xmmword_192DAA4A0;
        strcpy((char *)__dst, "Invalid Function Argument: required is NULL.");
        char v12 = 10;
        strcpy((char *)__p, "operator()");
        E5RT::LogErrorMessage((uint64_t *)&__dst, (uint64_t *)__p);
      }
      else
      {
        long long __dst = operator new(0x30uLL);
        long long v14 = xmmword_192DA90C0;
        strcpy((char *)__dst, "Invalid Function Argument: options is NULL.");
        char v12 = 10;
        strcpy((char *)__p, "operator()");
        E5RT::LogErrorMessage((uint64_t *)&__dst, (uint64_t *)__p);
      }
    }
    else
    {
      long long __dst = operator new(0x38uLL);
      long long v14 = xmmword_192DAA490;
      strcpy((char *)__dst, "Invalid Function Argument: path_to_input_file is NULL.");
      char v12 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&__dst, (uint64_t *)__p);
    }
  }
  else
  {
    long long __dst = operator new(0x30uLL);
    long long v14 = xmmword_192DA88D0;
    strcpy((char *)__dst, "Invalid Function Argument: handle is NULL.");
    char v12 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&__dst, (uint64_t *)__p);
  }
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v14) < 0) {
    operator delete(__dst);
  }
  return 1;
}

void sub_1922EE07C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if (a20 < 0)
    {
LABEL_5:
      operator delete(a15);
      _Unwind_Resume(a1);
    }
  }
  else if (a20 < 0)
  {
    goto LABEL_5;
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1922EE0D4(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z40e5rt_e5_compiler_is_new_compile_requiredE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z40e5rt_e5_compiler_is_new_compile_requiredE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z40e5rt_e5_compiler_is_new_compile_requiredE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z40e5rt_e5_compiler_is_new_compile_requiredE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_1922EE144()
{
  return &unk_1EE392D78;
}

void sub_1922EE154()
{
}

__n128 sub_1922EE168(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE392D98;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1922EE1B4(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE392D98;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1922EE1E4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (v1)
  {
    uint64_t v2 = *(const void **)(a1 + 16);
    if (v2)
    {
      uint64_t v3 = *(void *)(v1 + 8);
      size_t v4 = strlen(*(const char **)(a1 + 16));
      if (v4 >= 0x7FFFFFFFFFFFFFF8) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      std::string::size_type v5 = v4;
      if (v4 >= 0x17)
      {
        uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v4 | 7) != 0x17) {
          uint64_t v7 = v4 | 7;
        }
        uint64_t v8 = v7 + 1;
        p_dst = (std::string *)operator new(v7 + 1);
        __dst.__r_.__value_.__l.__size_ = v5;
        __dst.__r_.__value_.__r.__words[2] = v8 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
      }
      else
      {
        *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v4;
        p_dst = &__dst;
        if (!v4) {
          goto LABEL_11;
        }
      }
      memcpy(p_dst, v2, v5);
LABEL_11:
      p_dst->__r_.__value_.__s.__data_[v5] = 0;
      E5RT::E5Compiler::PurgeE5BundlesForInputModel(v3, &__dst);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__dst.__r_.__value_.__l.__data_);
      }
      return 0;
    }
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x38uLL);
    *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = xmmword_192DAA490;
    strcpy(__dst.__r_.__value_.__l.__data_, "Invalid Function Argument: path_to_input_file is NULL.");
    char v11 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&__dst, (uint64_t *)__p);
  }
  else
  {
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
    *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = xmmword_192DA88D0;
    strcpy(__dst.__r_.__value_.__l.__data_, "Invalid Function Argument: handle is NULL.");
    char v11 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&__dst, (uint64_t *)__p);
  }
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  return 1;
}

void sub_1922EE3D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if (a20 < 0)
    {
LABEL_5:
      operator delete(a15);
      _Unwind_Resume(a1);
    }
  }
  else if (a20 < 0)
  {
    goto LABEL_5;
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1922EE428(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z49e5rt_e5_compiler_purge_e5_bundles_for_input_modelE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z49e5rt_e5_compiler_purge_e5_bundles_for_input_modelE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z49e5rt_e5_compiler_purge_e5_bundles_for_input_modelE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z49e5rt_e5_compiler_purge_e5_bundles_for_input_modelE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_1922EE498()
{
  return &unk_1EE392DF8;
}

uint64_t sub_1922EE4A4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 8))();
}

uint64_t e5rt_execution_stream_release(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  v3[0] = &unk_1EE392E98;
  v3[1] = a1;
  size_t v4 = v3;
  uint64_t v1 = E5RT::ExceptionSafeExecute((uint64_t)v3);
  if (v4 == v3)
  {
    (*(void (**)(void *))(v3[0] + 32))(v3);
  }
  else if (v4)
  {
    (*(void (**)(void))(*v4 + 40))();
  }
  return v1;
}

void sub_1922EE5B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_execution_stream_encode_workload(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EE392F18;
  v4[1] = a1;
  v4[2] = a2;
  uint64_t v5 = v4;
  uint64_t v2 = E5RT::ExceptionSafeExecute((uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

void sub_1922EE6AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_execution_stream_execute_sync(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  v3[0] = &unk_1EE392F98;
  v3[1] = a1;
  size_t v4 = v3;
  uint64_t v1 = E5RT::ExceptionSafeExecute((uint64_t)v3);
  if (v4 == v3)
  {
    (*(void (**)(void *))(v3[0] + 32))(v3);
  }
  else if (v4)
  {
    (*(void (**)(void))(*v4 + 40))();
  }
  return v1;
}

void sub_1922EE7A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_execution_stream_encode_operation(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EE393018;
  v4[1] = a1;
  v4[2] = a2;
  uint64_t v5 = v4;
  uint64_t v2 = E5RT::ExceptionSafeExecute((uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

void sub_1922EE8A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_execution_stream_prewire_in_use_allocations(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  v3[0] = &unk_1EE393098;
  v3[1] = a1;
  size_t v4 = v3;
  uint64_t v1 = E5RT::ExceptionSafeExecute((uint64_t)v3);
  if (v4 == v3)
  {
    (*(void (**)(void *))(v3[0] + 32))(v3);
  }
  else if (v4)
  {
    (*(void (**)(void))(*v4 + 40))();
  }
  return v1;
}

void sub_1922EE9A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_execution_stream_reset(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  v3[0] = &unk_1EE393118;
  v3[1] = a1;
  size_t v4 = v3;
  uint64_t v1 = E5RT::ExceptionSafeExecute((uint64_t)v3);
  if (v4 == v3)
  {
    (*(void (**)(void *))(v3[0] + 32))(v3);
  }
  else if (v4)
  {
    (*(void (**)(void))(*v4 + 40))();
  }
  return v1;
}

void sub_1922EEA9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_execution_stream_get_stream_id(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EE393198;
  v4[1] = a1;
  v4[2] = a2;
  uint64_t v5 = v4;
  uint64_t v2 = E5RT::ExceptionSafeExecute((uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

void sub_1922EEB98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_execution_stream_async_submit(uint64_t a1, void *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  id v2 = a2;
  v5[0] = &unk_1EE393218;
  uint64_t v6 = v5;
  uint64_t v3 = E5RT::ExceptionSafeExecute((uint64_t)v5);
  if (v6 == v5)
  {
    (*(void (**)(void *))(v5[0] + 32))(v5);
  }
  else if (v6)
  {
    (*(void (**)(void))(*v6 + 40))();
  }

  return v3;
}

void sub_1922EECA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);

  _Unwind_Resume(a1);
}

uint64_t e5rt_execution_stream_submit_async(uint64_t a1, void *a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  v6[0] = &unk_1EE393298;
  v6[1] = a1;
  v6[2] = MEMORY[0x192FF2250]();
  uint64_t v7 = v6;
  uint64_t v4 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  if (v7 == v6)
  {
    (*(void (**)(void *))(v6[0] + 32))(v6);
  }
  else if (v7)
  {
    (*(void (**)(void))(*v7 + 40))();
  }

  return v4;
}

void sub_1922EEDCC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);

  _Unwind_Resume(a1);
}

uint64_t e5rt_execution_stream_get_internal_async_compute_request_id_for_last_submit(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EE393398;
  v4[1] = a1;
  v4[2] = a2;
  uint64_t v5 = v4;
  uint64_t v2 = E5RT::ExceptionSafeExecute((uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

void sub_1922EEED4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_execution_stream_reset_config_options(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EE393418;
  v4[1] = a1;
  v4[2] = a2;
  uint64_t v5 = v4;
  uint64_t v2 = E5RT::ExceptionSafeExecute((uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

void sub_1922EEFD0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_execution_stream_set_config_options(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EE393498;
  v4[1] = a1;
  v4[2] = a2;
  uint64_t v5 = v4;
  uint64_t v2 = E5RT::ExceptionSafeExecute((uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

void sub_1922EF0CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_execution_stream_step_execute_sync(uint64_t a1, void *a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  v6[0] = &unk_1EE393518;
  v6[1] = a1;
  v6[2] = MEMORY[0x192FF2250]();
  uint64_t v7 = v6;
  uint64_t v4 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  if (v7 == v6)
  {
    (*(void (**)(void *))(v6[0] + 32))(v6);
  }
  else if (v7)
  {
    (*(void (**)(void))(*v7 + 40))();
  }

  return v4;
}

void sub_1922EF1E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);

  _Unwind_Resume(a1);
}

uint64_t e5rt_execution_stream_set_ane_execution_priority(uint64_t a1, unsigned int a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EE393598;
  v4[1] = a1;
  v4[2] = a2;
  uint64_t v5 = v4;
  uint64_t v2 = E5RT::ExceptionSafeExecute((uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

void sub_1922EF2F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_execution_stream_set_quality_of_service(uint64_t a1, unsigned int a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EE393618;
  v4[1] = a1;
  v4[2] = a2;
  uint64_t v5 = v4;
  uint64_t v2 = E5RT::ExceptionSafeExecute((uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

void sub_1922EF3F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1922EF408()
{
}

void *sub_1922EF41C(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EE392E18;
  result[1] = v3;
  return result;
}

uint64_t sub_1922EF464(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE392E18;
  a2[1] = v2;
  return result;
}

uint64_t sub_1922EF490(uint64_t a1)
{
  if (*(void *)(a1 + 8)) {
    operator new();
  }
  uint64_t v4 = operator new(0x30uLL);
  long long v5 = xmmword_192DA88D0;
  strcpy((char *)v4, "Invalid Function Argument: handle is NULL.");
  char v3 = 10;
  strcpy((char *)__p, "operator()");
  E5RT::LogErrorMessage((uint64_t *)&v4, (uint64_t *)__p);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v5) < 0) {
    operator delete(v4);
  }
  return 1;
}

void sub_1922EF674(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0)
  {
    operator delete(a15);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1922EF724(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z28e5rt_execution_stream_createE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z28e5rt_execution_stream_createE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z28e5rt_execution_stream_createE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z28e5rt_execution_stream_createE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_1922EF794()
{
  return &unk_1EE392E78;
}

void std::__shared_ptr_pointer<E5RT::ExecutionStream  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

uint64_t std::__shared_ptr_pointer<E5RT::ExecutionStream  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<E5RT::ExecutionStream  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000192DAA9E1) {
    return a1 + 24;
  }
  if (((v3 & 0x8000000192DAA9E1 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000192DAA9E1)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000192DAA9E1 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

void sub_1922EF894()
{
}

void *sub_1922EF8A8(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EE392E98;
  result[1] = v3;
  return result;
}

uint64_t sub_1922EF8F0(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE392E98;
  a2[1] = v2;
  return result;
}

uint64_t sub_1922EF91C(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 8);
  if (v1)
  {
    uint64_t v2 = *v1;
    if (*v1)
    {
      uint64_t v4 = *(std::__shared_weak_count **)(v2 + 8);
      if (v4)
      {
        if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
      }
      MEMORY[0x192FF16B0](v2, 0x20C40A4A59CD2);
      uint64_t result = 0;
      **(void **)(a1 + 8) = 0;
    }
    else
    {
      uint64_t v8 = operator new(0x30uLL);
      long long v9 = xmmword_192DA90C0;
      strcpy((char *)v8, "Invalid Function Argument: *handle is NULL.");
      char v7 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v8, (uint64_t *)__p);
      if (v7 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v9) < 0) {
        operator delete(v8);
      }
      return 1;
    }
  }
  else
  {
    uint64_t v8 = operator new(0x30uLL);
    long long v9 = xmmword_192DA88D0;
    strcpy((char *)v8, "Invalid Function Argument: handle is NULL.");
    char v7 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v8, (uint64_t *)__p);
    if (v7 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v9) < 0) {
      operator delete(v8);
    }
    return 1;
  }
  return result;
}

void sub_1922EFB00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1922EFB40(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z29e5rt_execution_stream_releaseE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z29e5rt_execution_stream_releaseE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z29e5rt_execution_stream_releaseE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z29e5rt_execution_stream_releaseE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_1922EFBB0()
{
  return &unk_1EE392EF8;
}

void sub_1922EFBC0()
{
}

__n128 sub_1922EFBD4(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE392F18;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1922EFC20(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE392F18;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1922EFC50(uint64_t a1)
{
  if (*(void *)(a1 + 8))
  {
    uint64_t v1 = *(void *)(a1 + 16);
    if (v1)
    {
      unint64_t v3 = *(void **)v1;
      uint64_t v2 = *(atomic_ullong **)(v1 + 8);
      __p[0] = v3;
      __p[1] = v2;
      if (v2) {
        atomic_fetch_add_explicit(v2 + 1, 1uLL, memory_order_relaxed);
      }
      E5RT::ExecutionStream::EncodeComputeWorkload();
    }
    char v7 = operator new(0x38uLL);
    long long v8 = xmmword_192DA90B0;
    strcpy((char *)v7, "Invalid Function Argument: function_handle is NULL.");
    char v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
  }
  else
  {
    char v7 = operator new(0x30uLL);
    long long v8 = xmmword_192DA88D0;
    strcpy((char *)v7, "Invalid Function Argument: handle is NULL.");
    char v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
  }
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v8) < 0) {
    operator delete(v7);
  }
  return 1;
}

void sub_1922EFE00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0)
  {
    operator delete(a15);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1922EFE58(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z37e5rt_execution_stream_encode_workloadE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z37e5rt_execution_stream_encode_workloadE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z37e5rt_execution_stream_encode_workloadE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z37e5rt_execution_stream_encode_workloadE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_1922EFEC8()
{
  return &unk_1EE392F78;
}

void sub_1922EFED8()
{
}

void *sub_1922EFEEC(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EE392F98;
  result[1] = v3;
  return result;
}

uint64_t sub_1922EFF34(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE392F98;
  a2[1] = v2;
  return result;
}

uint64_t sub_1922EFF60(uint64_t a1)
{
  uint64_t v1 = *(E5RT::ExecutionStreamImpl ****)(a1 + 8);
  if (v1)
  {
    E5RT::ExecutionStream::ExecuteStreamSync(*v1);
    return 0;
  }
  else
  {
    long long v5 = operator new(0x30uLL);
    long long v6 = xmmword_192DA88D0;
    strcpy((char *)v5, "Invalid Function Argument: handle is NULL.");
    char v4 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v5, (uint64_t *)__p);
    if (v4 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v6) < 0) {
      operator delete(v5);
    }
    return 1;
  }
}

void sub_1922F0030(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1922F006C(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z34e5rt_execution_stream_execute_syncE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z34e5rt_execution_stream_execute_syncE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z34e5rt_execution_stream_execute_syncE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z34e5rt_execution_stream_execute_syncE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_1922F00DC()
{
  return &unk_1EE392FF8;
}

void sub_1922F00EC()
{
}

__n128 sub_1922F0100(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE393018;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1922F014C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE393018;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1922F017C(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 8);
  if (v1)
  {
    uint64_t v2 = *(void *)(a1 + 16);
    if (v2)
    {
      uint64_t v3 = *v1;
      long long v5 = *(void **)v2;
      char v4 = *(atomic_ullong **)(v2 + 8);
      __p[0] = v5;
      __p[1] = v4;
      if (v4) {
        atomic_fetch_add_explicit(v4 + 1, 1uLL, memory_order_relaxed);
      }
      E5RT::ExecutionStream::EncodeOperation(v3, (long long *)__p);
      long long v6 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        if (!atomic_fetch_add((atomic_ullong *volatile)__p[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      return 0;
    }
    unint64_t v10 = operator new(0x38uLL);
    long long v11 = xmmword_192DA90A0;
    strcpy((char *)v10, "Invalid Function Argument: operation_handle is NULL.");
    char v9 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v10, (uint64_t *)__p);
  }
  else
  {
    unint64_t v10 = operator new(0x30uLL);
    long long v11 = xmmword_192DA88D0;
    strcpy((char *)v10, "Invalid Function Argument: handle is NULL.");
    char v9 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v10, (uint64_t *)__p);
  }
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v11) < 0) {
    operator delete(v10);
  }
  return 1;
}

void sub_1922F032C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0)
  {
    operator delete(a15);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1922F0384(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z38e5rt_execution_stream_encode_operationE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z38e5rt_execution_stream_encode_operationE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z38e5rt_execution_stream_encode_operationE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z38e5rt_execution_stream_encode_operationE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_1922F03F4()
{
  return &unk_1EE393078;
}

void sub_1922F0404()
{
}

void *sub_1922F0418(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EE393098;
  result[1] = v3;
  return result;
}

uint64_t sub_1922F0460(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE393098;
  a2[1] = v2;
  return result;
}

uint64_t sub_1922F048C(uint64_t a1)
{
  uint64_t v1 = *(E5RT::ExecutionStreamImpl ****)(a1 + 8);
  if (v1)
  {
    E5RT::ExecutionStream::PreWireInUseAllocations(*v1);
    return 0;
  }
  else
  {
    long long v5 = operator new(0x30uLL);
    long long v6 = xmmword_192DA88D0;
    strcpy((char *)v5, "Invalid Function Argument: handle is NULL.");
    char v4 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v5, (uint64_t *)__p);
    if (v4 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v6) < 0) {
      operator delete(v5);
    }
    return 1;
  }
}

void sub_1922F055C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1922F0598(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z48e5rt_execution_stream_prewire_in_use_allocationsE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z48e5rt_execution_stream_prewire_in_use_allocationsE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z48e5rt_execution_stream_prewire_in_use_allocationsE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z48e5rt_execution_stream_prewire_in_use_allocationsE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_1922F0608()
{
  return &unk_1EE3930F8;
}

void sub_1922F0618()
{
}

void *sub_1922F062C(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EE393118;
  result[1] = v3;
  return result;
}

uint64_t sub_1922F0674(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE393118;
  a2[1] = v2;
  return result;
}

uint64_t sub_1922F06A0(uint64_t a1)
{
  uint64_t v1 = *(E5RT::ExecutionStreamImpl ****)(a1 + 8);
  if (v1)
  {
    E5RT::ExecutionStream::ResetStream(*v1);
    return 0;
  }
  else
  {
    long long v5 = operator new(0x30uLL);
    long long v6 = xmmword_192DA88D0;
    strcpy((char *)v5, "Invalid Function Argument: handle is NULL.");
    char v4 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v5, (uint64_t *)__p);
    if (v4 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v6) < 0) {
      operator delete(v5);
    }
    return 1;
  }
}

void sub_1922F0770(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1922F07AC(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z27e5rt_execution_stream_resetE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z27e5rt_execution_stream_resetE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z27e5rt_execution_stream_resetE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z27e5rt_execution_stream_resetE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_1922F081C()
{
  return &unk_1EE393178;
}

void sub_1922F082C()
{
}

__n128 sub_1922F0840(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE393198;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1922F088C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE393198;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1922F08BC(uint64_t a1)
{
  uint64_t v1 = *(E5RT::ExecutionStreamImpl ****)(a1 + 8);
  if (v1)
  {
    if (*(void *)(a1 + 16))
    {
      uint64_t StreamId = E5RT::ExecutionStream::GetStreamId(*v1);
      uint64_t result = 0;
      **(void **)(a1 + 16) = StreamId;
    }
    else
    {
      char v7 = operator new(0x30uLL);
      long long v8 = xmmword_192DA88C0;
      strcpy((char *)v7, "Invalid Function Argument: stream_id is NULL.");
      char v6 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
      if (v6 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v8) < 0) {
        operator delete(v7);
      }
      return 1;
    }
  }
  else
  {
    char v7 = operator new(0x30uLL);
    long long v8 = xmmword_192DA88D0;
    strcpy((char *)v7, "Invalid Function Argument: handle is NULL.");
    char v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    if (v6 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v8) < 0) {
      operator delete(v7);
    }
    return 1;
  }
  return result;
}

void sub_1922F0A3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1922F0A7C(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z35e5rt_execution_stream_get_stream_idE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z35e5rt_execution_stream_get_stream_idE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z35e5rt_execution_stream_get_stream_idE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z35e5rt_execution_stream_get_stream_idE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_1922F0AEC()
{
  return &unk_1EE3931F8;
}

void sub_1922F0AFC()
{
}

void *sub_1922F0B10()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EE393218;
  return result;
}

void sub_1922F0B48(uint64_t a1, void *a2)
{
  *a2 = &unk_1EE393218;
}

uint64_t sub_1922F0B70()
{
  unint64_t v3 = operator new(0x50uLL);
  long long v4 = xmmword_192DAA8F0;
  char v2 = 10;
  strcpy((char *)__p, "operator()");
  E5RT::LogErrorMessage((uint64_t *)&v3, (uint64_t *)__p);
  if (v2 < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v4) & 0x80000000) == 0) {
      return 2;
    }
  }
  else if ((SHIBYTE(v4) & 0x80000000) == 0)
  {
    return 2;
  }
  operator delete(v3);
  return 2;
}

void sub_1922F0C40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1922F0C7C(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z34e5rt_execution_stream_async_submitE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z34e5rt_execution_stream_async_submitE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z34e5rt_execution_stream_async_submitE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z34e5rt_execution_stream_async_submitE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_1922F0CEC()
{
  return &unk_1EE393278;
}

uint64_t sub_1922F0CF8(uint64_t a1)
{
  return a1;
}

void sub_1922F0D24(uint64_t a1)
{
  JUMPOUT(0x192FF16B0);
}

void *sub_1922F0D70(uint64_t a1)
{
  char v2 = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *char v2 = &unk_1EE393298;
  v2[1] = v4;
  uint64_t v2[2] = MEMORY[0x192FF2250](v3);
  return v2;
}

uint64_t sub_1922F0DC8(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *a2 = &unk_1EE393298;
  a2[1] = v4;
  uint64_t result = MEMORY[0x192FF2250](v3);
  a2[2] = result;
  return result;
}

void sub_1922F0E10(uint64_t a1)
{
}

void sub_1922F0E18(id *a1)
{
  operator delete(a1);
}

uint64_t sub_1922F0E54(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(uint64_t **)(a1 + 8);
  if (v1)
  {
    char v9 = 0;
    uint64_t v3 = *(void ***)(a1 + 16);
    if (!v3)
    {
      uint64_t v4 = *v1;
      goto LABEL_11;
    }
    unint64_t v10 = &unk_1EE393308;
    *(void *)&long long v11 = MEMORY[0x192FF2250]();
    char v12 = &v10;
    std::__function::__value_func<void ()(unsigned long long,unsigned long long,std::unique_ptr<E5RT::E5RTError>)>::swap[abi:ne180100](&v10, __p);
    if (v12 == &v10)
    {
      (*((void (**)(void **))v10 + 4))(&v10);
      uint64_t v3 = v9;
      uint64_t v4 = **(void **)(a1 + 8);
      if (!v9) {
        goto LABEL_11;
      }
    }
    else
    {
      if (v12) {
        (*((void (**)(void))*v12 + 5))();
      }
      uint64_t v3 = v9;
      uint64_t v4 = **(void **)(a1 + 8);
      if (!v9) {
        goto LABEL_11;
      }
    }
    if (v3 == __p)
    {
      char v12 = &v10;
      (*((void (**)(void **, void **))__p[0] + 3))(__p, &v10);
LABEL_13:
      E5RT::ExecutionStream::SubmitStreamAsync(v4, &v10);
      if (v12 == &v10)
      {
        (*((void (**)(void **))v10 + 4))(&v10);
        long long v5 = v9;
        if (v9 != __p)
        {
LABEL_17:
          if (v5) {
            (*((void (**)(void **))*v5 + 5))(v5);
          }
          return 0;
        }
      }
      else
      {
        if (v12) {
          (*((void (**)(void))*v12 + 5))();
        }
        long long v5 = v9;
        if (v9 != __p) {
          goto LABEL_17;
        }
      }
      (*((void (**)(void **))__p[0] + 4))(__p);
      return 0;
    }
    uint64_t v3 = (void **)(*((uint64_t (**)(void **))*v3 + 2))(v3);
LABEL_11:
    char v12 = v3;
    goto LABEL_13;
  }
  unint64_t v10 = operator new(0x30uLL);
  long long v11 = xmmword_192DA88D0;
  strcpy((char *)v10, "Invalid Function Argument: handle is NULL.");
  char v8 = 10;
  strcpy((char *)__p, "operator()");
  E5RT::LogErrorMessage((uint64_t *)&v10, (uint64_t *)__p);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v11) < 0) {
    operator delete(v10);
  }
  return 1;
}

void sub_1922F116C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1922F1260(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z34e5rt_execution_stream_submit_asyncE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z34e5rt_execution_stream_submit_asyncE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z34e5rt_execution_stream_submit_asyncE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z34e5rt_execution_stream_submit_asyncE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_1922F12D0()
{
  return &unk_1EE393378;
}

uint64_t sub_1922F12DC(uint64_t a1)
{
  return a1;
}

void sub_1922F1308(uint64_t a1)
{
  JUMPOUT(0x192FF16B0);
}

void *sub_1922F1354(uint64_t a1)
{
  char v2 = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *char v2 = &unk_1EE393308;
  v2[1] = MEMORY[0x192FF2250](v3);
  return v2;
}

uint64_t sub_1922F13AC(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  *a2 = &unk_1EE393308;
  uint64_t result = MEMORY[0x192FF2250](v3);
  a2[1] = result;
  return result;
}

void sub_1922F13F4(uint64_t a1)
{
}

void sub_1922F13FC(id *a1)
{
  operator delete(a1);
}

uint64_t sub_1922F1438(uint64_t a1, unint64_t *a2, unint64_t *a3, E5RT::E5RTError **a4)
{
  unint64_t v5 = *a2;
  unint64_t v6 = *a3;
  char v7 = *a4;
  *a4 = 0;
  if (!v7) {
    goto LABEL_2;
  }
  Status = (E5RT::Status *)E5RT::E5RTError::GetStatus(v7);
  E5RT::Status::GetErrorCode(Status);
  std::to_string(&v35, v5);
  unint64_t v10 = std::string::insert(&v35, 0, "Submit Async failed for [");
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v36.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  char v12 = std::string::append(&v36, ":");
  long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v37.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&__p, v6);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  uint64_t v16 = std::string::append(&v37, (const std::string::value_type *)p_p, size);
  long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  uint64_t v18 = std::string::append(&v38, "]: ");
  long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v39.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  Erroruint64_t Message = E5RT::Status::GetErrorMessage(Status);
  int v21 = *(char *)(ErrorMessage + 23);
  if (v21 >= 0) {
    uint64_t v22 = (const std::string::value_type *)ErrorMessage;
  }
  else {
    uint64_t v22 = *(const std::string::value_type **)ErrorMessage;
  }
  if (v21 >= 0) {
    std::string::size_type v23 = *(unsigned __int8 *)(ErrorMessage + 23);
  }
  else {
    std::string::size_type v23 = *(void *)(ErrorMessage + 8);
  }
  uint64_t v24 = std::string::append(&v39, v22, v23);
  long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
  v40.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v25;
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  int v26 = std::string::append(&v40, " @ ");
  long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  v41.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v27;
  v26->__r_.__value_.__l.__size_ = 0;
  v26->__r_.__value_.__r.__words[2] = 0;
  v26->__r_.__value_.__r.__words[0] = 0;
  uint64_t Location = E5RT::E5RTError::GetLocation(v7);
  int v29 = *(char *)(Location + 23);
  if (v29 >= 0) {
    float v30 = (const std::string::value_type *)Location;
  }
  else {
    float v30 = *(const std::string::value_type **)Location;
  }
  if (v29 >= 0) {
    std::string::size_type v31 = *(unsigned __int8 *)(Location + 23);
  }
  else {
    std::string::size_type v31 = *(void *)(Location + 8);
  }
  size_t v32 = std::string::append(&v41, v30, v31);
  long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
  std::string::size_type v43 = v32->__r_.__value_.__r.__words[2];
  long long v42 = v33;
  v32->__r_.__value_.__l.__size_ = 0;
  v32->__r_.__value_.__r.__words[2] = 0;
  v32->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v41.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_25:
      if ((SHIBYTE(v39.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_26;
      }
      goto LABEL_37;
    }
  }
  else if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_25;
  }
  operator delete(v40.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v39.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_26:
    if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_38;
  }
LABEL_37:
  operator delete(v39.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_27:
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_39;
  }
LABEL_38:
  operator delete(v38.__r_.__value_.__l.__data_);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_28:
    if ((SHIBYTE(v37.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_40;
  }
LABEL_39:
  operator delete(__p.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v37.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_29:
    if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_30;
    }
LABEL_41:
    operator delete(v36.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_31;
    }
LABEL_42:
    operator delete(v35.__r_.__value_.__l.__data_);
    goto LABEL_31;
  }
LABEL_40:
  operator delete(v37.__r_.__value_.__l.__data_);
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_41;
  }
LABEL_30:
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_42;
  }
LABEL_31:
  *((unsigned char *)&v41.__r_.__value_.__s + 23) = 10;
  strcpy((char *)&v41, "operator()");
  E5RT::LogErrorMessage((uint64_t *)&v42, (uint64_t *)&v41);
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v41.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v43) < 0) {
    operator delete((void *)v42);
  }
LABEL_2:
  uint64_t result = (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 16))();
  if (v7) {
    return (*(uint64_t (**)(E5RT::E5RTError *))(*(void *)v7 + 8))(v7);
  }
  return result;
}

void sub_1922F1774(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  if (*(char *)(v48 - 105) < 0) {
    operator delete(*(void **)(v48 - 128));
  }
  if (*(char *)(v48 - 73) < 0) {
    operator delete(*(void **)(v48 - 96));
  }
  (*(void (**)(uint64_t))(*(void *)v47 + 8))(v47);
  _Unwind_Resume(a1);
}

uint64_t sub_1922F1910(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZZ34e5rt_execution_stream_submit_asyncENK3$_0clEvEUlyyNSt3__110unique_ptrIN4E5RT9E5RTErrorENS0_14de"
                     "fault_deleteIS3_EEEEE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZZ34e5rt_execution_stream_submit_asyncENK3$_0clEvEUlyyNSt3__110unique_ptrIN4E5RT9E5RTErr"
                                "orENS0_14default_deleteIS3_EEEEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZZ34e5rt_execution_stream_submit_asyncENK3$_0clEvEUlyyNSt3__110unique_ptrIN4E5RT9E5RTErrorENS0_14default_deleteIS3_EEEEE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZZ34e5rt_execution_stream_submit_asyncENK3$_0clEvEUlyyNSt3__110unique_ptrIN4E5RT9E5RTErrorENS0_14default_deleteIS3_EEEEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_1922F1980()
{
  return &unk_1EE393368;
}

void *std::__function::__value_func<void ()(unsigned long long,unsigned long long,std::unique_ptr<E5RT::E5RTError>)>::swap[abi:ne180100](void *result, void *a2)
{
  void v6[3] = *MEMORY[0x1E4F143B8];
  if (a2 != result)
  {
    unint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    unint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        void v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        void v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        void v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      void v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_1922F1C18(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_1922F1C28()
{
}

__n128 sub_1922F1C3C(uint64_t a1)
{
  char v2 = (char *)operator new(0x18uLL);
  *(void *)char v2 = &unk_1EE393398;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1922F1C88(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE393398;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1922F1CB8(uint64_t a1)
{
  uint64_t v1 = *(E5RT::ExecutionStreamImpl ****)(a1 + 8);
  if (v1)
  {
    if (*(void *)(a1 + 16))
    {
      uint64_t InternalAsyncComputeRequestIdForLastSubmit = E5RT::ExecutionStream::GetInternalAsyncComputeRequestIdForLastSubmit(*v1);
      uint64_t result = 0;
      **(void **)(a1 + 16) = InternalAsyncComputeRequestIdForLastSubmit;
    }
    else
    {
      char v7 = operator new(0x40uLL);
      long long v8 = xmmword_192DAA900;
      strcpy((char *)v7, "Invalid Function Argument: async_compute_request_id is NULL.");
      char v6 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
      if (v6 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v8) < 0) {
        operator delete(v7);
      }
      return 1;
    }
  }
  else
  {
    char v7 = operator new(0x30uLL);
    long long v8 = xmmword_192DA88D0;
    strcpy((char *)v7, "Invalid Function Argument: handle is NULL.");
    char v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    if (v6 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v8) < 0) {
      operator delete(v7);
    }
    return 1;
  }
  return result;
}

void sub_1922F1E40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1922F1E80(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z75e5rt_execution_stream_get_internal_async_compute_request_id_for_last_submitE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z75e5rt_execution_stream_get_internal_async_compute_request_id_for_last_submitE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z75e5rt_execution_stream_get_internal_async_compute_request_id_for_last_submitE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z75e5rt_execution_stream_get_internal_async_compute_request_id_for_last_submitE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_1922F1EF0()
{
  return &unk_1EE3933F8;
}

void sub_1922F1F00()
{
}

__n128 sub_1922F1F14(uint64_t a1)
{
  char v2 = (char *)operator new(0x18uLL);
  *(void *)char v2 = &unk_1EE393418;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1922F1F60(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE393418;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1922F1F90(uint64_t a1)
{
  uint64_t v1 = *(E5RT::ExecutionStream ***)(a1 + 8);
  if (v1)
  {
    char v2 = *(void **)(a1 + 16);
    if (v2)
    {
      if (!*v2)
      {
        E5RT::ExecutionStream::ResetConfigOptions(*v1, &v6);
        if (v6) {
          operator new();
        }
        return 0;
      }
      char v6 = operator new(0x38uLL);
      long long v7 = xmmword_192DA8910;
      strcpy((char *)v6, "Invalid Function Argument: *config_options is not NULL.");
      char v5 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v6, (uint64_t *)__p);
    }
    else
    {
      char v6 = operator new(0x38uLL);
      long long v7 = xmmword_192DA8900;
      strcpy((char *)v6, "Invalid Function Argument: config_options is NULL.");
      char v5 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v6, (uint64_t *)__p);
    }
  }
  else
  {
    char v6 = operator new(0x30uLL);
    long long v7 = xmmword_192DA88D0;
    strcpy((char *)v6, "Invalid Function Argument: handle is NULL.");
    char v5 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v6, (uint64_t *)__p);
  }
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v7) < 0) {
    operator delete(v6);
  }
  return 1;
}

void sub_1922F21BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0)
  {
    operator delete(a15);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1922F220C(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z42e5rt_execution_stream_reset_config_optionsE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z42e5rt_execution_stream_reset_config_optionsE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z42e5rt_execution_stream_reset_config_optionsE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z42e5rt_execution_stream_reset_config_optionsE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_1922F227C()
{
  return &unk_1EE393478;
}

void sub_1922F228C()
{
}

__n128 sub_1922F22A0(uint64_t a1)
{
  char v2 = (char *)operator new(0x18uLL);
  *(void *)char v2 = &unk_1EE393498;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1922F22EC(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE393498;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1922F231C(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 8);
  if (v1)
  {
    unint64_t v3 = *(void ****)(a1 + 16);
    if (v3)
    {
      uint64_t v4 = *v3;
      if (v4)
      {
        uint64_t v5 = *v1;
        char v6 = *v4;
        *uint64_t v4 = 0;
        long long v13 = v6;
        E5RT::ExecutionStream::SetConfigOptions(v5, (uint64_t *)&v13);
        long long v7 = v13;
        long long v13 = 0;
        if (v7) {
          (*(void (**)(void *))(*(void *)v7 + 8))(v7);
        }
        long long v8 = **(uint64_t ***)(a1 + 16);
        uint64_t v9 = *v8;
        *long long v8 = 0;
        if (v9) {
          (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
        }
        return e5rt_execution_stream_config_options_release(*(void *)(a1 + 16));
      }
      else
      {
        long long v13 = operator new(0x38uLL);
        long long v14 = xmmword_192DA90B0;
        strcpy((char *)v13, "Invalid Function Argument: *config_options is NULL.");
        char v12 = 10;
        strcpy((char *)__p, "operator()");
        E5RT::LogErrorMessage((uint64_t *)&v13, (uint64_t *)__p);
        if (v12 < 0) {
          operator delete(__p[0]);
        }
        if (SHIBYTE(v14) < 0) {
          operator delete(v13);
        }
        return 1;
      }
    }
    else
    {
      long long v13 = operator new(0x38uLL);
      long long v14 = xmmword_192DA8900;
      strcpy((char *)v13, "Invalid Function Argument: config_options is NULL.");
      char v12 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v13, (uint64_t *)__p);
      if (v12 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v14) < 0) {
        operator delete(v13);
      }
      return 1;
    }
  }
  else
  {
    long long v13 = operator new(0x30uLL);
    long long v14 = xmmword_192DA88D0;
    strcpy((char *)v13, "Invalid Function Argument: handle is NULL.");
    char v12 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v13, (uint64_t *)__p);
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v14) < 0) {
      operator delete(v13);
    }
    return 1;
  }
}